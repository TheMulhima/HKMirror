using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dSystem class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dSystem
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_inst()
        {
            if (!HookedList.Contains("get_inst"))
            {
                HookedList.Add("get_inst");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSystem), "get_inst", false), get_inst);
            }
        }

        internal static event Delegates.get_inst_BeforeArgs _beforeget_inst;
        internal static event Delegates.get_inst_NormalArgs _afterget_inst;

        private static tk2dSystem get_inst(Func<tk2dSystem> orig)
        {
            _beforeget_inst?.Invoke();
            var retVal = orig();
            if (_afterget_inst != null) retVal = _afterget_inst.Invoke();
            return retVal;
        }

        internal static void Hookget_inst_NoCreate()
        {
            if (!HookedList.Contains("get_inst_NoCreate"))
            {
                HookedList.Add("get_inst_NoCreate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSystem), "get_inst_NoCreate", false),
                    get_inst_NoCreate);
            }
        }

        internal static event Delegates.get_inst_NoCreate_BeforeArgs _beforeget_inst_NoCreate;
        internal static event Delegates.get_inst_NoCreate_NormalArgs _afterget_inst_NoCreate;

        private static tk2dSystem get_inst_NoCreate(Func<tk2dSystem> orig)
        {
            _beforeget_inst_NoCreate?.Invoke();
            var retVal = orig();
            if (_afterget_inst_NoCreate != null) retVal = _afterget_inst_NoCreate.Invoke();
            return retVal;
        }

        internal static void Hookget_CurrentPlatform()
        {
            if (!HookedList.Contains("get_CurrentPlatform"))
            {
                HookedList.Add("get_CurrentPlatform");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSystem), "get_CurrentPlatform", false),
                    get_CurrentPlatform);
            }
        }

        internal static event Delegates.get_CurrentPlatform_BeforeArgs _beforeget_CurrentPlatform;
        internal static event Delegates.get_CurrentPlatform_NormalArgs _afterget_CurrentPlatform;

        private static string get_CurrentPlatform(Func<string> orig)
        {
            _beforeget_CurrentPlatform?.Invoke();
            var retVal = orig();
            if (_afterget_CurrentPlatform != null) retVal = _afterget_CurrentPlatform.Invoke();
            return retVal;
        }

        internal static void Hookset_CurrentPlatform()
        {
            if (!HookedList.Contains("set_CurrentPlatform"))
            {
                HookedList.Add("set_CurrentPlatform");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSystem), "set_CurrentPlatform", false),
                    set_CurrentPlatform);
            }
        }

        internal static event Delegates.set_CurrentPlatform_BeforeArgs _beforeset_CurrentPlatform;
        internal static event Delegates.set_CurrentPlatform_NormalArgs _afterset_CurrentPlatform;

        private static void set_CurrentPlatform(Action<string> orig, string value)
        {
            Delegates.Params_set_CurrentPlatform @params = new()
            {
                value = value
            };
            _beforeset_CurrentPlatform?.Invoke(@params);
            value = @params.value;
            orig(value);
            if (_afterset_CurrentPlatform != null) _afterset_CurrentPlatform.Invoke(@params);
        }

        internal static void Hookget_OverrideBuildMaterial()
        {
            if (!HookedList.Contains("get_OverrideBuildMaterial"))
            {
                HookedList.Add("get_OverrideBuildMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSystem), "get_OverrideBuildMaterial", false),
                    get_OverrideBuildMaterial);
            }
        }

        internal static event Delegates.get_OverrideBuildMaterial_BeforeArgs _beforeget_OverrideBuildMaterial;
        internal static event Delegates.get_OverrideBuildMaterial_NormalArgs _afterget_OverrideBuildMaterial;

        private static bool get_OverrideBuildMaterial(Func<bool> orig)
        {
            _beforeget_OverrideBuildMaterial?.Invoke();
            var retVal = orig();
            if (_afterget_OverrideBuildMaterial != null) retVal = _afterget_OverrideBuildMaterial.Invoke();
            return retVal;
        }

        internal static void HookGetAssetPlatform()
        {
            if (!HookedList.Contains("GetAssetPlatform"))
            {
                HookedList.Add("GetAssetPlatform");
                On.tk2dSystem.GetAssetPlatform += GetAssetPlatform;
            }
        }

        internal static event Delegates.GetAssetPlatform_BeforeArgs _beforeGetAssetPlatform;
        internal static event Delegates.GetAssetPlatform_NormalArgs _afterGetAssetPlatform;

        private static tk2dAssetPlatform GetAssetPlatform(On.tk2dSystem.orig_GetAssetPlatform orig, string platform)
        {
            Delegates.Params_GetAssetPlatform @params = new()
            {
                platform = platform
            };
            _beforeGetAssetPlatform?.Invoke(@params);
            platform = @params.platform;
            var retVal = orig(platform);
            if (_afterGetAssetPlatform != null) retVal = _afterGetAssetPlatform.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_CurrentPlatform_BeforeArgs();

        public delegate string get_CurrentPlatform_NormalArgs();

        public delegate void get_inst_BeforeArgs();

        public delegate void get_inst_NoCreate_BeforeArgs();

        public delegate tk2dSystem get_inst_NoCreate_NormalArgs();

        public delegate tk2dSystem get_inst_NormalArgs();

        public delegate void get_OverrideBuildMaterial_BeforeArgs();

        public delegate bool get_OverrideBuildMaterial_NormalArgs();

        public delegate void GetAssetPlatform_BeforeArgs(Params_GetAssetPlatform args);

        public delegate tk2dAssetPlatform GetAssetPlatform_NormalArgs(Params_GetAssetPlatform args);

        public delegate void set_CurrentPlatform_BeforeArgs(Params_set_CurrentPlatform args);

        public delegate void set_CurrentPlatform_NormalArgs(Params_set_CurrentPlatform args);

        public sealed class Params_set_CurrentPlatform
        {
            public string value;
        }

        public sealed class Params_GetAssetPlatform
        {
            public string platform;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_inst_BeforeArgs get_inst
        {
            add
            {
                HookHandler._beforeget_inst += value;
                HookHandler.Hookget_inst();
            }
            remove => HookHandler._beforeget_inst -= value;
        }

        public static event Delegates.get_inst_NoCreate_BeforeArgs get_inst_NoCreate
        {
            add
            {
                HookHandler._beforeget_inst_NoCreate += value;
                HookHandler.Hookget_inst_NoCreate();
            }
            remove => HookHandler._beforeget_inst_NoCreate -= value;
        }

        public static event Delegates.get_CurrentPlatform_BeforeArgs get_CurrentPlatform
        {
            add
            {
                HookHandler._beforeget_CurrentPlatform += value;
                HookHandler.Hookget_CurrentPlatform();
            }
            remove => HookHandler._beforeget_CurrentPlatform -= value;
        }

        public static event Delegates.set_CurrentPlatform_BeforeArgs set_CurrentPlatform
        {
            add
            {
                HookHandler._beforeset_CurrentPlatform += value;
                HookHandler.Hookset_CurrentPlatform();
            }
            remove => HookHandler._beforeset_CurrentPlatform -= value;
        }

        public static event Delegates.get_OverrideBuildMaterial_BeforeArgs get_OverrideBuildMaterial
        {
            add
            {
                HookHandler._beforeget_OverrideBuildMaterial += value;
                HookHandler.Hookget_OverrideBuildMaterial();
            }
            remove => HookHandler._beforeget_OverrideBuildMaterial -= value;
        }

        public static event Delegates.GetAssetPlatform_BeforeArgs GetAssetPlatform
        {
            add
            {
                HookHandler._beforeGetAssetPlatform += value;
                HookHandler.HookGetAssetPlatform();
            }
            remove => HookHandler._beforeGetAssetPlatform -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_inst_NormalArgs get_inst
        {
            add
            {
                HookHandler._afterget_inst += value;
                HookHandler.Hookget_inst();
            }
            remove => HookHandler._afterget_inst -= value;
        }

        public static event Delegates.get_inst_NoCreate_NormalArgs get_inst_NoCreate
        {
            add
            {
                HookHandler._afterget_inst_NoCreate += value;
                HookHandler.Hookget_inst_NoCreate();
            }
            remove => HookHandler._afterget_inst_NoCreate -= value;
        }

        public static event Delegates.get_CurrentPlatform_NormalArgs get_CurrentPlatform
        {
            add
            {
                HookHandler._afterget_CurrentPlatform += value;
                HookHandler.Hookget_CurrentPlatform();
            }
            remove => HookHandler._afterget_CurrentPlatform -= value;
        }

        public static event Delegates.set_CurrentPlatform_NormalArgs set_CurrentPlatform
        {
            add
            {
                HookHandler._afterset_CurrentPlatform += value;
                HookHandler.Hookset_CurrentPlatform();
            }
            remove => HookHandler._afterset_CurrentPlatform -= value;
        }

        public static event Delegates.get_OverrideBuildMaterial_NormalArgs get_OverrideBuildMaterial
        {
            add
            {
                HookHandler._afterget_OverrideBuildMaterial += value;
                HookHandler.Hookget_OverrideBuildMaterial();
            }
            remove => HookHandler._afterget_OverrideBuildMaterial -= value;
        }

        public static event Delegates.GetAssetPlatform_NormalArgs GetAssetPlatform
        {
            add
            {
                HookHandler._afterGetAssetPlatform += value;
                HookHandler.HookGetAssetPlatform();
            }
            remove => HookHandler._afterGetAssetPlatform -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_inst_NormalArgs get_inst
        {
            add => HookEndpointManager.Add<Delegates.get_inst_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSystem), "get_inst", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_inst_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSystem), "get_inst", false), value);
        }

        public static event Delegates.get_inst_NoCreate_NormalArgs get_inst_NoCreate
        {
            add => HookEndpointManager.Add<Delegates.get_inst_NoCreate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSystem), "get_inst_NoCreate", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_inst_NoCreate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSystem), "get_inst_NoCreate", false), value);
        }

        public static event Delegates.get_CurrentPlatform_NormalArgs get_CurrentPlatform
        {
            add => HookEndpointManager.Add<Delegates.get_CurrentPlatform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSystem), "get_CurrentPlatform", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_CurrentPlatform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSystem), "get_CurrentPlatform", false), value);
        }

        public static event Delegates.set_CurrentPlatform_NormalArgs set_CurrentPlatform
        {
            add => HookEndpointManager.Add<Delegates.set_CurrentPlatform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSystem), "set_CurrentPlatform", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_CurrentPlatform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSystem), "set_CurrentPlatform", false), value);
        }

        public static event Delegates.get_OverrideBuildMaterial_NormalArgs get_OverrideBuildMaterial
        {
            add => HookEndpointManager.Add<Delegates.get_OverrideBuildMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSystem), "get_OverrideBuildMaterial", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_OverrideBuildMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSystem), "get_OverrideBuildMaterial", false), value);
        }

        public static event On.tk2dSystem.hook_GetAssetPlatform GetAssetPlatform
        {
            add => On.tk2dSystem.GetAssetPlatform += value;
            remove => On.tk2dSystem.GetAssetPlatform -= value;
        }
    }
}