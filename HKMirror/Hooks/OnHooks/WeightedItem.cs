using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for WeightedItem class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnWeightedItem
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Weight()
        {
            if (!HookedList.Contains("get_Weight"))
            {
                HookedList.Add("get_Weight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(WeightedItem), "get_Weight"), get_Weight);
            }
        }

        internal static event Delegates.get_Weight_BeforeArgs _beforeget_Weight;
        internal static event Delegates.get_Weight_NormalArgs _afterget_Weight;

        private static float get_Weight(Func<WeightedItem, float> orig, WeightedItem self)
        {
            Delegates.Params_get_Weight @params = new()
            {
                self = self
            };
            _beforeget_Weight?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Weight != null) retVal = _afterget_Weight.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_Weight_BeforeArgs(Params_get_Weight args);

        public delegate float get_Weight_NormalArgs(Params_get_Weight args);

        public sealed class Params_get_Weight
        {
            public WeightedItem self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Weight_BeforeArgs get_Weight
        {
            add
            {
                HookHandler._beforeget_Weight += value;
                HookHandler.Hookget_Weight();
            }
            remove => HookHandler._beforeget_Weight -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Weight_NormalArgs get_Weight
        {
            add
            {
                HookHandler._afterget_Weight += value;
                HookHandler.Hookget_Weight();
            }
            remove => HookHandler._afterget_Weight -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Weight_NormalArgs get_Weight
        {
            add => HookEndpointManager.Add<Delegates.get_Weight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(WeightedItem), "get_Weight"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Weight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(WeightedItem), "get_Weight"), value);
        }
    }
}