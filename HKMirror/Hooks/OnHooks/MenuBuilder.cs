using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for MenuBuilder class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuBuilder
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_MenuObject()
        {
            if (!HookedList.Contains("get_MenuObject"))
            {
                HookedList.Add("get_MenuObject");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "get_MenuObject", true),
                    get_MenuObject);
            }
        }

        internal static event Delegates.get_MenuObject_BeforeArgs _beforeget_MenuObject;
        internal static event Delegates.get_MenuObject_AfterArgs _afterget_MenuObject;

        private static UnityEngine.GameObject get_MenuObject(
            Func<Modding.Menu.MenuBuilder, UnityEngine.GameObject> orig, Modding.Menu.MenuBuilder self)
        {
            Delegates.Params_get_MenuObject @params = new()
            {
                self = self
            };
            if (_beforeget_MenuObject != null)
            {
                foreach (Delegates.get_MenuObject_BeforeArgs toInvoke in _beforeget_MenuObject.GetInvocationList())
                {
                    try
                    {
                        _beforeget_MenuObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_MenuObject != null)
            {
                foreach (Delegates.get_MenuObject_AfterArgs toInvoke in _afterget_MenuObject.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_MenuObject.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_MenuObject()
        {
            if (!HookedList.Contains("set_MenuObject"))
            {
                HookedList.Add("set_MenuObject");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "set_MenuObject", true),
                    set_MenuObject);
            }
        }

        internal static event Delegates.set_MenuObject_BeforeArgs _beforeset_MenuObject;
        internal static event Delegates.set_MenuObject_AfterArgs _afterset_MenuObject;

        private static void set_MenuObject(Action<Modding.Menu.MenuBuilder, UnityEngine.GameObject> orig,
            Modding.Menu.MenuBuilder self, UnityEngine.GameObject value)
        {
            Delegates.Params_set_MenuObject @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_MenuObject != null)
            {
                foreach (Delegates.set_MenuObject_BeforeArgs toInvoke in _beforeset_MenuObject.GetInvocationList())
                {
                    try
                    {
                        _beforeset_MenuObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_MenuObject != null)
            {
                foreach (Delegates.set_MenuObject_AfterArgs toInvoke in _afterset_MenuObject.GetInvocationList())
                {
                    try
                    {
                        _afterset_MenuObject.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_Screen()
        {
            if (!HookedList.Contains("get_Screen"))
            {
                HookedList.Add("get_Screen");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "get_Screen", true),
                    get_Screen);
            }
        }

        internal static event Delegates.get_Screen_BeforeArgs _beforeget_Screen;
        internal static event Delegates.get_Screen_AfterArgs _afterget_Screen;

        private static MenuScreen get_Screen(Func<Modding.Menu.MenuBuilder, MenuScreen> orig,
            Modding.Menu.MenuBuilder self)
        {
            Delegates.Params_get_Screen @params = new()
            {
                self = self
            };
            if (_beforeget_Screen != null)
            {
                foreach (Delegates.get_Screen_BeforeArgs toInvoke in _beforeget_Screen.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Screen?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Screen != null)
            {
                foreach (Delegates.get_Screen_AfterArgs toInvoke in _afterget_Screen.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Screen.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_Screen()
        {
            if (!HookedList.Contains("set_Screen"))
            {
                HookedList.Add("set_Screen");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "set_Screen", true),
                    set_Screen);
            }
        }

        internal static event Delegates.set_Screen_BeforeArgs _beforeset_Screen;
        internal static event Delegates.set_Screen_AfterArgs _afterset_Screen;

        private static void set_Screen(Action<Modding.Menu.MenuBuilder, MenuScreen> orig, Modding.Menu.MenuBuilder self,
            MenuScreen value)
        {
            Delegates.Params_set_Screen @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Screen != null)
            {
                foreach (Delegates.set_Screen_BeforeArgs toInvoke in _beforeset_Screen.GetInvocationList())
                {
                    try
                    {
                        _beforeset_Screen?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Screen != null)
            {
                foreach (Delegates.set_Screen_AfterArgs toInvoke in _afterset_Screen.GetInvocationList())
                {
                    try
                    {
                        _afterset_Screen.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_DefaultNavGraph()
        {
            if (!HookedList.Contains("get_DefaultNavGraph"))
            {
                HookedList.Add("get_DefaultNavGraph");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "get_DefaultNavGraph", true),
                    get_DefaultNavGraph);
            }
        }

        internal static event Delegates.get_DefaultNavGraph_BeforeArgs _beforeget_DefaultNavGraph;
        internal static event Delegates.get_DefaultNavGraph_AfterArgs _afterget_DefaultNavGraph;

        private static Modding.Menu.INavigationGraph get_DefaultNavGraph(
            Func<Modding.Menu.MenuBuilder, Modding.Menu.INavigationGraph> orig, Modding.Menu.MenuBuilder self)
        {
            Delegates.Params_get_DefaultNavGraph @params = new()
            {
                self = self
            };
            if (_beforeget_DefaultNavGraph != null)
            {
                foreach (Delegates.get_DefaultNavGraph_BeforeArgs toInvoke in _beforeget_DefaultNavGraph
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_DefaultNavGraph?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DefaultNavGraph != null)
            {
                foreach (Delegates.get_DefaultNavGraph_AfterArgs toInvoke in
                         _afterget_DefaultNavGraph.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_DefaultNavGraph.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_DefaultNavGraph()
        {
            if (!HookedList.Contains("set_DefaultNavGraph"))
            {
                HookedList.Add("set_DefaultNavGraph");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "set_DefaultNavGraph", true),
                    set_DefaultNavGraph);
            }
        }

        internal static event Delegates.set_DefaultNavGraph_BeforeArgs _beforeset_DefaultNavGraph;
        internal static event Delegates.set_DefaultNavGraph_AfterArgs _afterset_DefaultNavGraph;

        private static void set_DefaultNavGraph(Action<Modding.Menu.MenuBuilder, Modding.Menu.INavigationGraph> orig,
            Modding.Menu.MenuBuilder self, Modding.Menu.INavigationGraph value)
        {
            Delegates.Params_set_DefaultNavGraph @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_DefaultNavGraph != null)
            {
                foreach (Delegates.set_DefaultNavGraph_BeforeArgs toInvoke in _beforeset_DefaultNavGraph
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeset_DefaultNavGraph?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_DefaultNavGraph != null)
            {
                foreach (Delegates.set_DefaultNavGraph_AfterArgs toInvoke in
                         _afterset_DefaultNavGraph.GetInvocationList())
                {
                    try
                    {
                        _afterset_DefaultNavGraph.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookBuild()
        {
            if (!HookedList.Contains("Build"))
            {
                HookedList.Add("Build");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "Build", true), Build);
            }
        }

        internal static event Delegates.Build_BeforeArgs _beforeBuild;
        internal static event Delegates.Build_AfterArgs _afterBuild;

        private static MenuScreen Build(Func<Modding.Menu.MenuBuilder, MenuScreen> orig, Modding.Menu.MenuBuilder self)
        {
            Delegates.Params_Build @params = new()
            {
                self = self
            };
            if (_beforeBuild != null)
            {
                foreach (Delegates.Build_BeforeArgs toInvoke in _beforeBuild.GetInvocationList())
                {
                    try
                    {
                        _beforeBuild?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterBuild != null)
            {
                foreach (Delegates.Build_AfterArgs toInvoke in _afterBuild.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterBuild.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookAddContent_IContentLayout_INavigationGraph_ContentArea()
        {
            if (!HookedList.Contains("AddContent_IContentLayout_INavigationGraph_ContentArea"))
            {
                HookedList.Add("AddContent_IContentLayout_INavigationGraph_ContentArea");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder),
                        "AddContent_IContentLayout_INavigationGraph_ContentArea", true),
                    AddContent_IContentLayout_INavigationGraph_ContentArea);
            }
        }

        internal static event Delegates.AddContent_IContentLayout_INavigationGraph_ContentArea_BeforeArgs
            _beforeAddContent_IContentLayout_INavigationGraph_ContentArea;

        internal static event Delegates.AddContent_IContentLayout_INavigationGraph_ContentArea_AfterArgs
            _afterAddContent_IContentLayout_INavigationGraph_ContentArea;

        private static Modding.Menu.MenuBuilder AddContent_IContentLayout_INavigationGraph_ContentArea(
            Func<Modding.Menu.MenuBuilder, Modding.Menu.IContentLayout, Modding.Menu.INavigationGraph,
                System.Action<Modding.Menu.ContentArea>, Modding.Menu.MenuBuilder> orig, Modding.Menu.MenuBuilder self,
            Modding.Menu.IContentLayout layout, Modding.Menu.INavigationGraph navgraph,
            System.Action<Modding.Menu.ContentArea> action)
        {
            Delegates.Params_AddContent_IContentLayout_INavigationGraph_ContentArea @params = new()
            {
                self = self, layout = layout, navgraph = navgraph, action = action
            };
            if (_beforeAddContent_IContentLayout_INavigationGraph_ContentArea != null)
            {
                foreach (Delegates.AddContent_IContentLayout_INavigationGraph_ContentArea_BeforeArgs toInvoke in
                         _beforeAddContent_IContentLayout_INavigationGraph_ContentArea.GetInvocationList())
                {
                    try
                    {
                        _beforeAddContent_IContentLayout_INavigationGraph_ContentArea?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            layout = @params.layout;
            navgraph = @params.navgraph;
            action = @params.action;
            var retVal = orig(self, layout, navgraph, action);
            if (_afterAddContent_IContentLayout_INavigationGraph_ContentArea != null)
            {
                foreach (Delegates.AddContent_IContentLayout_INavigationGraph_ContentArea_AfterArgs toInvoke in
                         _afterAddContent_IContentLayout_INavigationGraph_ContentArea.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterAddContent_IContentLayout_INavigationGraph_ContentArea.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookAddContent_IContentLayout_ContentArea()
        {
            if (!HookedList.Contains("AddContent_IContentLayout_ContentArea"))
            {
                HookedList.Add("AddContent_IContentLayout_ContentArea");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder),
                        "AddContent_IContentLayout_ContentArea", true), AddContent_IContentLayout_ContentArea);
            }
        }

        internal static event Delegates.AddContent_IContentLayout_ContentArea_BeforeArgs
            _beforeAddContent_IContentLayout_ContentArea;

        internal static event Delegates.AddContent_IContentLayout_ContentArea_AfterArgs
            _afterAddContent_IContentLayout_ContentArea;

        private static Modding.Menu.MenuBuilder AddContent_IContentLayout_ContentArea(
            Func<Modding.Menu.MenuBuilder, Modding.Menu.IContentLayout, System.Action<Modding.Menu.ContentArea>,
                Modding.Menu.MenuBuilder> orig, Modding.Menu.MenuBuilder self, Modding.Menu.IContentLayout layout,
            System.Action<Modding.Menu.ContentArea> action)
        {
            Delegates.Params_AddContent_IContentLayout_ContentArea @params = new()
            {
                self = self, layout = layout, action = action
            };
            if (_beforeAddContent_IContentLayout_ContentArea != null)
            {
                foreach (Delegates.AddContent_IContentLayout_ContentArea_BeforeArgs toInvoke in
                         _beforeAddContent_IContentLayout_ContentArea.GetInvocationList())
                {
                    try
                    {
                        _beforeAddContent_IContentLayout_ContentArea?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            layout = @params.layout;
            action = @params.action;
            var retVal = orig(self, layout, action);
            if (_afterAddContent_IContentLayout_ContentArea != null)
            {
                foreach (Delegates.AddContent_IContentLayout_ContentArea_AfterArgs toInvoke in
                         _afterAddContent_IContentLayout_ContentArea.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterAddContent_IContentLayout_ContentArea.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookAddControls_IContentLayout_INavigationGraph_ContentArea()
        {
            if (!HookedList.Contains("AddControls_IContentLayout_INavigationGraph_ContentArea"))
            {
                HookedList.Add("AddControls_IContentLayout_INavigationGraph_ContentArea");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder),
                        "AddControls_IContentLayout_INavigationGraph_ContentArea", true),
                    AddControls_IContentLayout_INavigationGraph_ContentArea);
            }
        }

        internal static event Delegates.AddControls_IContentLayout_INavigationGraph_ContentArea_BeforeArgs
            _beforeAddControls_IContentLayout_INavigationGraph_ContentArea;

        internal static event Delegates.AddControls_IContentLayout_INavigationGraph_ContentArea_AfterArgs
            _afterAddControls_IContentLayout_INavigationGraph_ContentArea;

        private static Modding.Menu.MenuBuilder AddControls_IContentLayout_INavigationGraph_ContentArea(
            Func<Modding.Menu.MenuBuilder, Modding.Menu.IContentLayout, Modding.Menu.INavigationGraph,
                System.Action<Modding.Menu.ContentArea>, Modding.Menu.MenuBuilder> orig, Modding.Menu.MenuBuilder self,
            Modding.Menu.IContentLayout layout, Modding.Menu.INavigationGraph navgraph,
            System.Action<Modding.Menu.ContentArea> action)
        {
            Delegates.Params_AddControls_IContentLayout_INavigationGraph_ContentArea @params = new()
            {
                self = self, layout = layout, navgraph = navgraph, action = action
            };
            if (_beforeAddControls_IContentLayout_INavigationGraph_ContentArea != null)
            {
                foreach (Delegates.AddControls_IContentLayout_INavigationGraph_ContentArea_BeforeArgs toInvoke in
                         _beforeAddControls_IContentLayout_INavigationGraph_ContentArea.GetInvocationList())
                {
                    try
                    {
                        _beforeAddControls_IContentLayout_INavigationGraph_ContentArea?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            layout = @params.layout;
            navgraph = @params.navgraph;
            action = @params.action;
            var retVal = orig(self, layout, navgraph, action);
            if (_afterAddControls_IContentLayout_INavigationGraph_ContentArea != null)
            {
                foreach (Delegates.AddControls_IContentLayout_INavigationGraph_ContentArea_AfterArgs toInvoke in
                         _afterAddControls_IContentLayout_INavigationGraph_ContentArea.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterAddControls_IContentLayout_INavigationGraph_ContentArea.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookAddControls_IContentLayout_ContentArea()
        {
            if (!HookedList.Contains("AddControls_IContentLayout_ContentArea"))
            {
                HookedList.Add("AddControls_IContentLayout_ContentArea");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder),
                        "AddControls_IContentLayout_ContentArea", true), AddControls_IContentLayout_ContentArea);
            }
        }

        internal static event Delegates.AddControls_IContentLayout_ContentArea_BeforeArgs
            _beforeAddControls_IContentLayout_ContentArea;

        internal static event Delegates.AddControls_IContentLayout_ContentArea_AfterArgs
            _afterAddControls_IContentLayout_ContentArea;

        private static Modding.Menu.MenuBuilder AddControls_IContentLayout_ContentArea(
            Func<Modding.Menu.MenuBuilder, Modding.Menu.IContentLayout, System.Action<Modding.Menu.ContentArea>,
                Modding.Menu.MenuBuilder> orig, Modding.Menu.MenuBuilder self, Modding.Menu.IContentLayout layout,
            System.Action<Modding.Menu.ContentArea> action)
        {
            Delegates.Params_AddControls_IContentLayout_ContentArea @params = new()
            {
                self = self, layout = layout, action = action
            };
            if (_beforeAddControls_IContentLayout_ContentArea != null)
            {
                foreach (Delegates.AddControls_IContentLayout_ContentArea_BeforeArgs toInvoke in
                         _beforeAddControls_IContentLayout_ContentArea.GetInvocationList())
                {
                    try
                    {
                        _beforeAddControls_IContentLayout_ContentArea?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            layout = @params.layout;
            action = @params.action;
            var retVal = orig(self, layout, action);
            if (_afterAddControls_IContentLayout_ContentArea != null)
            {
                foreach (Delegates.AddControls_IContentLayout_ContentArea_AfterArgs toInvoke in
                         _afterAddControls_IContentLayout_ContentArea.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterAddControls_IContentLayout_ContentArea.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookCreateTitle()
        {
            if (!HookedList.Contains("CreateTitle"))
            {
                HookedList.Add("CreateTitle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "CreateTitle", true),
                    CreateTitle);
            }
        }

        internal static event Delegates.CreateTitle_BeforeArgs _beforeCreateTitle;
        internal static event Delegates.CreateTitle_AfterArgs _afterCreateTitle;

        private static Modding.Menu.MenuBuilder CreateTitle(
            Func<Modding.Menu.MenuBuilder, string, Modding.Menu.Config.MenuTitleStyle, Modding.Menu.MenuBuilder> orig,
            Modding.Menu.MenuBuilder self, string title, Modding.Menu.Config.MenuTitleStyle style)
        {
            Delegates.Params_CreateTitle @params = new()
            {
                self = self, title = title, style = style
            };
            if (_beforeCreateTitle != null)
            {
                foreach (Delegates.CreateTitle_BeforeArgs toInvoke in _beforeCreateTitle.GetInvocationList())
                {
                    try
                    {
                        _beforeCreateTitle?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            title = @params.title;
            style = @params.style;
            var retVal = orig(self, title, style);
            if (_afterCreateTitle != null)
            {
                foreach (Delegates.CreateTitle_AfterArgs toInvoke in _afterCreateTitle.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterCreateTitle.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookCreateContentPane()
        {
            if (!HookedList.Contains("CreateContentPane"))
            {
                HookedList.Add("CreateContentPane");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "CreateContentPane", true),
                    CreateContentPane);
            }
        }

        internal static event Delegates.CreateContentPane_BeforeArgs _beforeCreateContentPane;
        internal static event Delegates.CreateContentPane_AfterArgs _afterCreateContentPane;

        private static Modding.Menu.MenuBuilder CreateContentPane(
            Func<Modding.Menu.MenuBuilder, Modding.Menu.RectTransformData, Modding.Menu.MenuBuilder> orig,
            Modding.Menu.MenuBuilder self, Modding.Menu.RectTransformData style)
        {
            Delegates.Params_CreateContentPane @params = new()
            {
                self = self, style = style
            };
            if (_beforeCreateContentPane != null)
            {
                foreach (Delegates.CreateContentPane_BeforeArgs toInvoke in
                         _beforeCreateContentPane.GetInvocationList())
                {
                    try
                    {
                        _beforeCreateContentPane?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            style = @params.style;
            var retVal = orig(self, style);
            if (_afterCreateContentPane != null)
            {
                foreach (Delegates.CreateContentPane_AfterArgs toInvoke in _afterCreateContentPane.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterCreateContentPane.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookCreateControlPane()
        {
            if (!HookedList.Contains("CreateControlPane"))
            {
                HookedList.Add("CreateControlPane");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "CreateControlPane", true),
                    CreateControlPane);
            }
        }

        internal static event Delegates.CreateControlPane_BeforeArgs _beforeCreateControlPane;
        internal static event Delegates.CreateControlPane_AfterArgs _afterCreateControlPane;

        private static Modding.Menu.MenuBuilder CreateControlPane(
            Func<Modding.Menu.MenuBuilder, Modding.Menu.RectTransformData, Modding.Menu.MenuBuilder> orig,
            Modding.Menu.MenuBuilder self, Modding.Menu.RectTransformData style)
        {
            Delegates.Params_CreateControlPane @params = new()
            {
                self = self, style = style
            };
            if (_beforeCreateControlPane != null)
            {
                foreach (Delegates.CreateControlPane_BeforeArgs toInvoke in
                         _beforeCreateControlPane.GetInvocationList())
                {
                    try
                    {
                        _beforeCreateControlPane?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            style = @params.style;
            var retVal = orig(self, style);
            if (_afterCreateControlPane != null)
            {
                foreach (Delegates.CreateControlPane_AfterArgs toInvoke in _afterCreateControlPane.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterCreateControlPane.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookSetDefaultNavGraph()
        {
            if (!HookedList.Contains("SetDefaultNavGraph"))
            {
                HookedList.Add("SetDefaultNavGraph");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "SetDefaultNavGraph", true),
                    SetDefaultNavGraph);
            }
        }

        internal static event Delegates.SetDefaultNavGraph_BeforeArgs _beforeSetDefaultNavGraph;
        internal static event Delegates.SetDefaultNavGraph_AfterArgs _afterSetDefaultNavGraph;

        private static Modding.Menu.MenuBuilder SetDefaultNavGraph(
            Func<Modding.Menu.MenuBuilder, Modding.Menu.INavigationGraph, Modding.Menu.MenuBuilder> orig,
            Modding.Menu.MenuBuilder self, Modding.Menu.INavigationGraph navGraph)
        {
            Delegates.Params_SetDefaultNavGraph @params = new()
            {
                self = self, navGraph = navGraph
            };
            if (_beforeSetDefaultNavGraph != null)
            {
                foreach (Delegates.SetDefaultNavGraph_BeforeArgs toInvoke in
                         _beforeSetDefaultNavGraph.GetInvocationList())
                {
                    try
                    {
                        _beforeSetDefaultNavGraph?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            navGraph = @params.navGraph;
            var retVal = orig(self, navGraph);
            if (_afterSetDefaultNavGraph != null)
            {
                foreach (Delegates.SetDefaultNavGraph_AfterArgs toInvoke in
                         _afterSetDefaultNavGraph.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterSetDefaultNavGraph.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_MenuObject
        {
            public Modding.Menu.MenuBuilder self;
        }

        public delegate void get_MenuObject_BeforeArgs(Params_get_MenuObject args);

        public delegate UnityEngine.GameObject get_MenuObject_AfterArgs(Params_get_MenuObject args,
            UnityEngine.GameObject ret);

        public delegate UnityEngine.GameObject get_MenuObject_WithArgs(
            Func<Modding.Menu.MenuBuilder, UnityEngine.GameObject> orig, Modding.Menu.MenuBuilder self);

        public sealed class Params_set_MenuObject
        {
            public Modding.Menu.MenuBuilder self;
            public UnityEngine.GameObject value;
        }

        public delegate void set_MenuObject_BeforeArgs(Params_set_MenuObject args);

        public delegate void set_MenuObject_AfterArgs(Params_set_MenuObject args);

        public delegate void set_MenuObject_WithArgs(Action<Modding.Menu.MenuBuilder, UnityEngine.GameObject> orig,
            Modding.Menu.MenuBuilder self, UnityEngine.GameObject value);

        public sealed class Params_get_Screen
        {
            public Modding.Menu.MenuBuilder self;
        }

        public delegate void get_Screen_BeforeArgs(Params_get_Screen args);

        public delegate MenuScreen get_Screen_AfterArgs(Params_get_Screen args, MenuScreen ret);

        public delegate MenuScreen get_Screen_WithArgs(Func<Modding.Menu.MenuBuilder, MenuScreen> orig,
            Modding.Menu.MenuBuilder self);

        public sealed class Params_set_Screen
        {
            public Modding.Menu.MenuBuilder self;
            public MenuScreen value;
        }

        public delegate void set_Screen_BeforeArgs(Params_set_Screen args);

        public delegate void set_Screen_AfterArgs(Params_set_Screen args);

        public delegate void set_Screen_WithArgs(Action<Modding.Menu.MenuBuilder, MenuScreen> orig,
            Modding.Menu.MenuBuilder self, MenuScreen value);

        public sealed class Params_get_DefaultNavGraph
        {
            public Modding.Menu.MenuBuilder self;
        }

        public delegate void get_DefaultNavGraph_BeforeArgs(Params_get_DefaultNavGraph args);

        public delegate Modding.Menu.INavigationGraph get_DefaultNavGraph_AfterArgs(Params_get_DefaultNavGraph args,
            Modding.Menu.INavigationGraph ret);

        public delegate Modding.Menu.INavigationGraph get_DefaultNavGraph_WithArgs(
            Func<Modding.Menu.MenuBuilder, Modding.Menu.INavigationGraph> orig, Modding.Menu.MenuBuilder self);

        public sealed class Params_set_DefaultNavGraph
        {
            public Modding.Menu.MenuBuilder self;
            public Modding.Menu.INavigationGraph value;
        }

        public delegate void set_DefaultNavGraph_BeforeArgs(Params_set_DefaultNavGraph args);

        public delegate void set_DefaultNavGraph_AfterArgs(Params_set_DefaultNavGraph args);

        public delegate void set_DefaultNavGraph_WithArgs(
            Action<Modding.Menu.MenuBuilder, Modding.Menu.INavigationGraph> orig, Modding.Menu.MenuBuilder self,
            Modding.Menu.INavigationGraph value);

        public sealed class Params_Build
        {
            public Modding.Menu.MenuBuilder self;
        }

        public delegate void Build_BeforeArgs(Params_Build args);

        public delegate MenuScreen Build_AfterArgs(Params_Build args, MenuScreen ret);

        public delegate MenuScreen Build_WithArgs(Func<Modding.Menu.MenuBuilder, MenuScreen> orig,
            Modding.Menu.MenuBuilder self);

        public sealed class Params_AddContent_IContentLayout_INavigationGraph_ContentArea
        {
            public Modding.Menu.MenuBuilder self;
            public Modding.Menu.IContentLayout layout;
            public Modding.Menu.INavigationGraph navgraph;
            public System.Action<Modding.Menu.ContentArea> action;
        }

        public delegate void AddContent_IContentLayout_INavigationGraph_ContentArea_BeforeArgs(
            Params_AddContent_IContentLayout_INavigationGraph_ContentArea args);

        public delegate Modding.Menu.MenuBuilder AddContent_IContentLayout_INavigationGraph_ContentArea_AfterArgs(
            Params_AddContent_IContentLayout_INavigationGraph_ContentArea args, Modding.Menu.MenuBuilder ret);

        public delegate Modding.Menu.MenuBuilder AddContent_IContentLayout_INavigationGraph_ContentArea_WithArgs(
            Func<Modding.Menu.MenuBuilder, Modding.Menu.IContentLayout, Modding.Menu.INavigationGraph,
                System.Action<Modding.Menu.ContentArea>, Modding.Menu.MenuBuilder> orig, Modding.Menu.MenuBuilder self,
            Modding.Menu.IContentLayout layout, Modding.Menu.INavigationGraph navgraph,
            System.Action<Modding.Menu.ContentArea> action);

        public sealed class Params_AddContent_IContentLayout_ContentArea
        {
            public Modding.Menu.MenuBuilder self;
            public Modding.Menu.IContentLayout layout;
            public System.Action<Modding.Menu.ContentArea> action;
        }

        public delegate void AddContent_IContentLayout_ContentArea_BeforeArgs(
            Params_AddContent_IContentLayout_ContentArea args);

        public delegate Modding.Menu.MenuBuilder AddContent_IContentLayout_ContentArea_AfterArgs(
            Params_AddContent_IContentLayout_ContentArea args, Modding.Menu.MenuBuilder ret);

        public delegate Modding.Menu.MenuBuilder AddContent_IContentLayout_ContentArea_WithArgs(
            Func<Modding.Menu.MenuBuilder, Modding.Menu.IContentLayout, System.Action<Modding.Menu.ContentArea>,
                Modding.Menu.MenuBuilder> orig, Modding.Menu.MenuBuilder self, Modding.Menu.IContentLayout layout,
            System.Action<Modding.Menu.ContentArea> action);

        public sealed class Params_AddControls_IContentLayout_INavigationGraph_ContentArea
        {
            public Modding.Menu.MenuBuilder self;
            public Modding.Menu.IContentLayout layout;
            public Modding.Menu.INavigationGraph navgraph;
            public System.Action<Modding.Menu.ContentArea> action;
        }

        public delegate void AddControls_IContentLayout_INavigationGraph_ContentArea_BeforeArgs(
            Params_AddControls_IContentLayout_INavigationGraph_ContentArea args);

        public delegate Modding.Menu.MenuBuilder AddControls_IContentLayout_INavigationGraph_ContentArea_AfterArgs(
            Params_AddControls_IContentLayout_INavigationGraph_ContentArea args, Modding.Menu.MenuBuilder ret);

        public delegate Modding.Menu.MenuBuilder AddControls_IContentLayout_INavigationGraph_ContentArea_WithArgs(
            Func<Modding.Menu.MenuBuilder, Modding.Menu.IContentLayout, Modding.Menu.INavigationGraph,
                System.Action<Modding.Menu.ContentArea>, Modding.Menu.MenuBuilder> orig, Modding.Menu.MenuBuilder self,
            Modding.Menu.IContentLayout layout, Modding.Menu.INavigationGraph navgraph,
            System.Action<Modding.Menu.ContentArea> action);

        public sealed class Params_AddControls_IContentLayout_ContentArea
        {
            public Modding.Menu.MenuBuilder self;
            public Modding.Menu.IContentLayout layout;
            public System.Action<Modding.Menu.ContentArea> action;
        }

        public delegate void AddControls_IContentLayout_ContentArea_BeforeArgs(
            Params_AddControls_IContentLayout_ContentArea args);

        public delegate Modding.Menu.MenuBuilder AddControls_IContentLayout_ContentArea_AfterArgs(
            Params_AddControls_IContentLayout_ContentArea args, Modding.Menu.MenuBuilder ret);

        public delegate Modding.Menu.MenuBuilder AddControls_IContentLayout_ContentArea_WithArgs(
            Func<Modding.Menu.MenuBuilder, Modding.Menu.IContentLayout, System.Action<Modding.Menu.ContentArea>,
                Modding.Menu.MenuBuilder> orig, Modding.Menu.MenuBuilder self, Modding.Menu.IContentLayout layout,
            System.Action<Modding.Menu.ContentArea> action);

        public sealed class Params_CreateTitle
        {
            public Modding.Menu.MenuBuilder self;
            public string title;
            public Modding.Menu.Config.MenuTitleStyle style;
        }

        public delegate void CreateTitle_BeforeArgs(Params_CreateTitle args);

        public delegate Modding.Menu.MenuBuilder CreateTitle_AfterArgs(Params_CreateTitle args,
            Modding.Menu.MenuBuilder ret);

        public delegate Modding.Menu.MenuBuilder CreateTitle_WithArgs(
            Func<Modding.Menu.MenuBuilder, string, Modding.Menu.Config.MenuTitleStyle, Modding.Menu.MenuBuilder> orig,
            Modding.Menu.MenuBuilder self, string title, Modding.Menu.Config.MenuTitleStyle style);

        public sealed class Params_CreateContentPane
        {
            public Modding.Menu.MenuBuilder self;
            public Modding.Menu.RectTransformData style;
        }

        public delegate void CreateContentPane_BeforeArgs(Params_CreateContentPane args);

        public delegate Modding.Menu.MenuBuilder CreateContentPane_AfterArgs(Params_CreateContentPane args,
            Modding.Menu.MenuBuilder ret);

        public delegate Modding.Menu.MenuBuilder CreateContentPane_WithArgs(
            Func<Modding.Menu.MenuBuilder, Modding.Menu.RectTransformData, Modding.Menu.MenuBuilder> orig,
            Modding.Menu.MenuBuilder self, Modding.Menu.RectTransformData style);

        public sealed class Params_CreateControlPane
        {
            public Modding.Menu.MenuBuilder self;
            public Modding.Menu.RectTransformData style;
        }

        public delegate void CreateControlPane_BeforeArgs(Params_CreateControlPane args);

        public delegate Modding.Menu.MenuBuilder CreateControlPane_AfterArgs(Params_CreateControlPane args,
            Modding.Menu.MenuBuilder ret);

        public delegate Modding.Menu.MenuBuilder CreateControlPane_WithArgs(
            Func<Modding.Menu.MenuBuilder, Modding.Menu.RectTransformData, Modding.Menu.MenuBuilder> orig,
            Modding.Menu.MenuBuilder self, Modding.Menu.RectTransformData style);

        public sealed class Params_SetDefaultNavGraph
        {
            public Modding.Menu.MenuBuilder self;
            public Modding.Menu.INavigationGraph navGraph;
        }

        public delegate void SetDefaultNavGraph_BeforeArgs(Params_SetDefaultNavGraph args);

        public delegate Modding.Menu.MenuBuilder SetDefaultNavGraph_AfterArgs(Params_SetDefaultNavGraph args,
            Modding.Menu.MenuBuilder ret);

        public delegate Modding.Menu.MenuBuilder SetDefaultNavGraph_WithArgs(
            Func<Modding.Menu.MenuBuilder, Modding.Menu.INavigationGraph, Modding.Menu.MenuBuilder> orig,
            Modding.Menu.MenuBuilder self, Modding.Menu.INavigationGraph navGraph);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_MenuObject_BeforeArgs get_MenuObject
        {
            add
            {
                HookHandler._beforeget_MenuObject += value;
                HookHandler.Hookget_MenuObject();
            }
            remove => HookHandler._beforeget_MenuObject -= value;
        }

        public static event Delegates.set_MenuObject_BeforeArgs set_MenuObject
        {
            add
            {
                HookHandler._beforeset_MenuObject += value;
                HookHandler.Hookset_MenuObject();
            }
            remove => HookHandler._beforeset_MenuObject -= value;
        }

        public static event Delegates.get_Screen_BeforeArgs get_Screen
        {
            add
            {
                HookHandler._beforeget_Screen += value;
                HookHandler.Hookget_Screen();
            }
            remove => HookHandler._beforeget_Screen -= value;
        }

        public static event Delegates.set_Screen_BeforeArgs set_Screen
        {
            add
            {
                HookHandler._beforeset_Screen += value;
                HookHandler.Hookset_Screen();
            }
            remove => HookHandler._beforeset_Screen -= value;
        }

        public static event Delegates.get_DefaultNavGraph_BeforeArgs get_DefaultNavGraph
        {
            add
            {
                HookHandler._beforeget_DefaultNavGraph += value;
                HookHandler.Hookget_DefaultNavGraph();
            }
            remove => HookHandler._beforeget_DefaultNavGraph -= value;
        }

        public static event Delegates.set_DefaultNavGraph_BeforeArgs set_DefaultNavGraph
        {
            add
            {
                HookHandler._beforeset_DefaultNavGraph += value;
                HookHandler.Hookset_DefaultNavGraph();
            }
            remove => HookHandler._beforeset_DefaultNavGraph -= value;
        }

        public static event Delegates.Build_BeforeArgs Build
        {
            add
            {
                HookHandler._beforeBuild += value;
                HookHandler.HookBuild();
            }
            remove => HookHandler._beforeBuild -= value;
        }

        public static event Delegates.AddContent_IContentLayout_INavigationGraph_ContentArea_BeforeArgs
            AddContent_IContentLayout_INavigationGraph_ContentArea
            {
                add
                {
                    HookHandler._beforeAddContent_IContentLayout_INavigationGraph_ContentArea += value;
                    HookHandler.HookAddContent_IContentLayout_INavigationGraph_ContentArea();
                }
                remove => HookHandler._beforeAddContent_IContentLayout_INavigationGraph_ContentArea -= value;
            }

        public static event Delegates.AddContent_IContentLayout_ContentArea_BeforeArgs
            AddContent_IContentLayout_ContentArea
            {
                add
                {
                    HookHandler._beforeAddContent_IContentLayout_ContentArea += value;
                    HookHandler.HookAddContent_IContentLayout_ContentArea();
                }
                remove => HookHandler._beforeAddContent_IContentLayout_ContentArea -= value;
            }

        public static event Delegates.AddControls_IContentLayout_INavigationGraph_ContentArea_BeforeArgs
            AddControls_IContentLayout_INavigationGraph_ContentArea
            {
                add
                {
                    HookHandler._beforeAddControls_IContentLayout_INavigationGraph_ContentArea += value;
                    HookHandler.HookAddControls_IContentLayout_INavigationGraph_ContentArea();
                }
                remove => HookHandler._beforeAddControls_IContentLayout_INavigationGraph_ContentArea -= value;
            }

        public static event Delegates.AddControls_IContentLayout_ContentArea_BeforeArgs
            AddControls_IContentLayout_ContentArea
            {
                add
                {
                    HookHandler._beforeAddControls_IContentLayout_ContentArea += value;
                    HookHandler.HookAddControls_IContentLayout_ContentArea();
                }
                remove => HookHandler._beforeAddControls_IContentLayout_ContentArea -= value;
            }

        public static event Delegates.CreateTitle_BeforeArgs CreateTitle
        {
            add
            {
                HookHandler._beforeCreateTitle += value;
                HookHandler.HookCreateTitle();
            }
            remove => HookHandler._beforeCreateTitle -= value;
        }

        public static event Delegates.CreateContentPane_BeforeArgs CreateContentPane
        {
            add
            {
                HookHandler._beforeCreateContentPane += value;
                HookHandler.HookCreateContentPane();
            }
            remove => HookHandler._beforeCreateContentPane -= value;
        }

        public static event Delegates.CreateControlPane_BeforeArgs CreateControlPane
        {
            add
            {
                HookHandler._beforeCreateControlPane += value;
                HookHandler.HookCreateControlPane();
            }
            remove => HookHandler._beforeCreateControlPane -= value;
        }

        public static event Delegates.SetDefaultNavGraph_BeforeArgs SetDefaultNavGraph
        {
            add
            {
                HookHandler._beforeSetDefaultNavGraph += value;
                HookHandler.HookSetDefaultNavGraph();
            }
            remove => HookHandler._beforeSetDefaultNavGraph -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_MenuObject_AfterArgs get_MenuObject
        {
            add
            {
                HookHandler._afterget_MenuObject += value;
                HookHandler.Hookget_MenuObject();
            }
            remove => HookHandler._afterget_MenuObject -= value;
        }

        public static event Delegates.set_MenuObject_AfterArgs set_MenuObject
        {
            add
            {
                HookHandler._afterset_MenuObject += value;
                HookHandler.Hookset_MenuObject();
            }
            remove => HookHandler._afterset_MenuObject -= value;
        }

        public static event Delegates.get_Screen_AfterArgs get_Screen
        {
            add
            {
                HookHandler._afterget_Screen += value;
                HookHandler.Hookget_Screen();
            }
            remove => HookHandler._afterget_Screen -= value;
        }

        public static event Delegates.set_Screen_AfterArgs set_Screen
        {
            add
            {
                HookHandler._afterset_Screen += value;
                HookHandler.Hookset_Screen();
            }
            remove => HookHandler._afterset_Screen -= value;
        }

        public static event Delegates.get_DefaultNavGraph_AfterArgs get_DefaultNavGraph
        {
            add
            {
                HookHandler._afterget_DefaultNavGraph += value;
                HookHandler.Hookget_DefaultNavGraph();
            }
            remove => HookHandler._afterget_DefaultNavGraph -= value;
        }

        public static event Delegates.set_DefaultNavGraph_AfterArgs set_DefaultNavGraph
        {
            add
            {
                HookHandler._afterset_DefaultNavGraph += value;
                HookHandler.Hookset_DefaultNavGraph();
            }
            remove => HookHandler._afterset_DefaultNavGraph -= value;
        }

        public static event Delegates.Build_AfterArgs Build
        {
            add
            {
                HookHandler._afterBuild += value;
                HookHandler.HookBuild();
            }
            remove => HookHandler._afterBuild -= value;
        }

        public static event Delegates.AddContent_IContentLayout_INavigationGraph_ContentArea_AfterArgs
            AddContent_IContentLayout_INavigationGraph_ContentArea
            {
                add
                {
                    HookHandler._afterAddContent_IContentLayout_INavigationGraph_ContentArea += value;
                    HookHandler.HookAddContent_IContentLayout_INavigationGraph_ContentArea();
                }
                remove => HookHandler._afterAddContent_IContentLayout_INavigationGraph_ContentArea -= value;
            }

        public static event Delegates.AddContent_IContentLayout_ContentArea_AfterArgs
            AddContent_IContentLayout_ContentArea
            {
                add
                {
                    HookHandler._afterAddContent_IContentLayout_ContentArea += value;
                    HookHandler.HookAddContent_IContentLayout_ContentArea();
                }
                remove => HookHandler._afterAddContent_IContentLayout_ContentArea -= value;
            }

        public static event Delegates.AddControls_IContentLayout_INavigationGraph_ContentArea_AfterArgs
            AddControls_IContentLayout_INavigationGraph_ContentArea
            {
                add
                {
                    HookHandler._afterAddControls_IContentLayout_INavigationGraph_ContentArea += value;
                    HookHandler.HookAddControls_IContentLayout_INavigationGraph_ContentArea();
                }
                remove => HookHandler._afterAddControls_IContentLayout_INavigationGraph_ContentArea -= value;
            }

        public static event Delegates.AddControls_IContentLayout_ContentArea_AfterArgs
            AddControls_IContentLayout_ContentArea
            {
                add
                {
                    HookHandler._afterAddControls_IContentLayout_ContentArea += value;
                    HookHandler.HookAddControls_IContentLayout_ContentArea();
                }
                remove => HookHandler._afterAddControls_IContentLayout_ContentArea -= value;
            }

        public static event Delegates.CreateTitle_AfterArgs CreateTitle
        {
            add
            {
                HookHandler._afterCreateTitle += value;
                HookHandler.HookCreateTitle();
            }
            remove => HookHandler._afterCreateTitle -= value;
        }

        public static event Delegates.CreateContentPane_AfterArgs CreateContentPane
        {
            add
            {
                HookHandler._afterCreateContentPane += value;
                HookHandler.HookCreateContentPane();
            }
            remove => HookHandler._afterCreateContentPane -= value;
        }

        public static event Delegates.CreateControlPane_AfterArgs CreateControlPane
        {
            add
            {
                HookHandler._afterCreateControlPane += value;
                HookHandler.HookCreateControlPane();
            }
            remove => HookHandler._afterCreateControlPane -= value;
        }

        public static event Delegates.SetDefaultNavGraph_AfterArgs SetDefaultNavGraph
        {
            add
            {
                HookHandler._afterSetDefaultNavGraph += value;
                HookHandler.HookSetDefaultNavGraph();
            }
            remove => HookHandler._afterSetDefaultNavGraph -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_MenuObject_WithArgs get_MenuObject
        {
            add => HookEndpointManager.Add<Delegates.get_MenuObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "get_MenuObject", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_MenuObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "get_MenuObject", true), value);
        }

        public static event Delegates.set_MenuObject_WithArgs set_MenuObject
        {
            add => HookEndpointManager.Add<Delegates.set_MenuObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "set_MenuObject", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_MenuObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "set_MenuObject", true), value);
        }

        public static event Delegates.get_Screen_WithArgs get_Screen
        {
            add => HookEndpointManager.Add<Delegates.get_Screen_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "get_Screen", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_Screen_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "get_Screen", true), value);
        }

        public static event Delegates.set_Screen_WithArgs set_Screen
        {
            add => HookEndpointManager.Add<Delegates.set_Screen_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "set_Screen", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_Screen_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "set_Screen", true), value);
        }

        public static event Delegates.get_DefaultNavGraph_WithArgs get_DefaultNavGraph
        {
            add => HookEndpointManager.Add<Delegates.get_DefaultNavGraph_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "get_DefaultNavGraph", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_DefaultNavGraph_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "get_DefaultNavGraph", true), value);
        }

        public static event Delegates.set_DefaultNavGraph_WithArgs set_DefaultNavGraph
        {
            add => HookEndpointManager.Add<Delegates.set_DefaultNavGraph_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "set_DefaultNavGraph", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_DefaultNavGraph_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "set_DefaultNavGraph", true), value);
        }

        public static event Delegates.Build_WithArgs Build
        {
            add => HookEndpointManager.Add<Delegates.Build_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "Build", true), value);
            remove => HookEndpointManager.Remove<Delegates.Build_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "Build", true), value);
        }

        public static event Delegates.AddContent_IContentLayout_INavigationGraph_ContentArea_WithArgs
            AddContent_IContentLayout_INavigationGraph_ContentArea
            {
                add => HookEndpointManager
                    .Add<Delegates.AddContent_IContentLayout_INavigationGraph_ContentArea_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "AddContent", true), value);
                remove =>
                    HookEndpointManager
                        .Remove<Delegates.AddContent_IContentLayout_INavigationGraph_ContentArea_WithArgs>(
                            ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "AddContent", true),
                            value);
            }

        public static event Delegates.AddContent_IContentLayout_ContentArea_WithArgs
            AddContent_IContentLayout_ContentArea
            {
                add => HookEndpointManager.Add<Delegates.AddContent_IContentLayout_ContentArea_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "AddContent", true), value);
                remove => HookEndpointManager.Remove<Delegates.AddContent_IContentLayout_ContentArea_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "AddContent", true), value);
            }

        public static event Delegates.AddControls_IContentLayout_INavigationGraph_ContentArea_WithArgs
            AddControls_IContentLayout_INavigationGraph_ContentArea
            {
                add => HookEndpointManager
                    .Add<Delegates.AddControls_IContentLayout_INavigationGraph_ContentArea_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "AddControls", true), value);
                remove =>
                    HookEndpointManager
                        .Remove<Delegates.AddControls_IContentLayout_INavigationGraph_ContentArea_WithArgs>(
                            ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "AddControls", true),
                            value);
            }

        public static event Delegates.AddControls_IContentLayout_ContentArea_WithArgs
            AddControls_IContentLayout_ContentArea
            {
                add => HookEndpointManager.Add<Delegates.AddControls_IContentLayout_ContentArea_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "AddControls", true), value);
                remove => HookEndpointManager.Remove<Delegates.AddControls_IContentLayout_ContentArea_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "AddControls", true), value);
            }

        public static event Delegates.CreateTitle_WithArgs CreateTitle
        {
            add => HookEndpointManager.Add<Delegates.CreateTitle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "CreateTitle", true), value);
            remove => HookEndpointManager.Remove<Delegates.CreateTitle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "CreateTitle", true), value);
        }

        public static event Delegates.CreateContentPane_WithArgs CreateContentPane
        {
            add => HookEndpointManager.Add<Delegates.CreateContentPane_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "CreateContentPane", true), value);
            remove => HookEndpointManager.Remove<Delegates.CreateContentPane_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "CreateContentPane", true), value);
        }

        public static event Delegates.CreateControlPane_WithArgs CreateControlPane
        {
            add => HookEndpointManager.Add<Delegates.CreateControlPane_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "CreateControlPane", true), value);
            remove => HookEndpointManager.Remove<Delegates.CreateControlPane_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "CreateControlPane", true), value);
        }

        public static event Delegates.SetDefaultNavGraph_WithArgs SetDefaultNavGraph
        {
            add => HookEndpointManager.Add<Delegates.SetDefaultNavGraph_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "SetDefaultNavGraph", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetDefaultNavGraph_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.MenuBuilder), "SetDefaultNavGraph", true), value);
        }
    }
}