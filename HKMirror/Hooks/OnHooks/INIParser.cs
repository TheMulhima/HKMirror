using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for INIParser class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnINIParser
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_FileName()
        {
            if (!HookedList.Contains("get_FileName"))
            {
                HookedList.Add("get_FileName");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(INIParser), "get_FileName", true), get_FileName);
            }
        }

        internal static event Delegates.get_FileName_BeforeArgs _beforeget_FileName;
        internal static event Delegates.get_FileName_AfterArgs _afterget_FileName;

        private static string get_FileName(Func<INIParser, string> orig, INIParser self)
        {
            Delegates.Params_get_FileName @params = new()
            {
                self = self
            };
            if (_beforeget_FileName != null)
            {
                foreach (Delegates.get_FileName_BeforeArgs toInvoke in _beforeget_FileName.GetInvocationList())
                {
                    try
                    {
                        _beforeget_FileName?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_FileName != null)
            {
                foreach (Delegates.get_FileName_AfterArgs toInvoke in _afterget_FileName.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_FileName.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_iniString()
        {
            if (!HookedList.Contains("get_iniString"))
            {
                HookedList.Add("get_iniString");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(INIParser), "get_iniString", true), get_iniString);
            }
        }

        internal static event Delegates.get_iniString_BeforeArgs _beforeget_iniString;
        internal static event Delegates.get_iniString_AfterArgs _afterget_iniString;

        private static string get_iniString(Func<INIParser, string> orig, INIParser self)
        {
            Delegates.Params_get_iniString @params = new()
            {
                self = self
            };
            if (_beforeget_iniString != null)
            {
                foreach (Delegates.get_iniString_BeforeArgs toInvoke in _beforeget_iniString.GetInvocationList())
                {
                    try
                    {
                        _beforeget_iniString?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_iniString != null)
            {
                foreach (Delegates.get_iniString_AfterArgs toInvoke in _afterget_iniString.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_iniString.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookOpen_string()
        {
            if (!HookedList.Contains("Open_string"))
            {
                HookedList.Add("Open_string");
                On.INIParser.Open_string += Open_string;
            }
        }

        internal static event Delegates.Open_string_BeforeArgs _beforeOpen_string;
        internal static event Delegates.Open_string_AfterArgs _afterOpen_string;

        private static void Open_string(On.INIParser.orig_Open_string orig, INIParser self, string path)
        {
            Delegates.Params_Open_string @params = new()
            {
                self = self, path = path
            };
            if (_beforeOpen_string != null)
            {
                foreach (Delegates.Open_string_BeforeArgs toInvoke in _beforeOpen_string.GetInvocationList())
                {
                    try
                    {
                        _beforeOpen_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            path = @params.path;
            orig(self, path);
            if (_afterOpen_string != null)
            {
                foreach (Delegates.Open_string_AfterArgs toInvoke in _afterOpen_string.GetInvocationList())
                {
                    try
                    {
                        _afterOpen_string.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOpen_TextAsset()
        {
            if (!HookedList.Contains("Open_TextAsset"))
            {
                HookedList.Add("Open_TextAsset");
                On.INIParser.Open_TextAsset += Open_TextAsset;
            }
        }

        internal static event Delegates.Open_TextAsset_BeforeArgs _beforeOpen_TextAsset;
        internal static event Delegates.Open_TextAsset_AfterArgs _afterOpen_TextAsset;

        private static void Open_TextAsset(On.INIParser.orig_Open_TextAsset orig, INIParser self,
            UnityEngine.TextAsset name)
        {
            Delegates.Params_Open_TextAsset @params = new()
            {
                self = self, name = name
            };
            if (_beforeOpen_TextAsset != null)
            {
                foreach (Delegates.Open_TextAsset_BeforeArgs toInvoke in _beforeOpen_TextAsset.GetInvocationList())
                {
                    try
                    {
                        _beforeOpen_TextAsset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            name = @params.name;
            orig(self, name);
            if (_afterOpen_TextAsset != null)
            {
                foreach (Delegates.Open_TextAsset_AfterArgs toInvoke in _afterOpen_TextAsset.GetInvocationList())
                {
                    try
                    {
                        _afterOpen_TextAsset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOpenFromString()
        {
            if (!HookedList.Contains("OpenFromString"))
            {
                HookedList.Add("OpenFromString");
                On.INIParser.OpenFromString += OpenFromString;
            }
        }

        internal static event Delegates.OpenFromString_BeforeArgs _beforeOpenFromString;
        internal static event Delegates.OpenFromString_AfterArgs _afterOpenFromString;

        private static void OpenFromString(On.INIParser.orig_OpenFromString orig, INIParser self, string str)
        {
            Delegates.Params_OpenFromString @params = new()
            {
                self = self, str = str
            };
            if (_beforeOpenFromString != null)
            {
                foreach (Delegates.OpenFromString_BeforeArgs toInvoke in _beforeOpenFromString.GetInvocationList())
                {
                    try
                    {
                        _beforeOpenFromString?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            str = @params.str;
            orig(self, str);
            if (_afterOpenFromString != null)
            {
                foreach (Delegates.OpenFromString_AfterArgs toInvoke in _afterOpenFromString.GetInvocationList())
                {
                    try
                    {
                        _afterOpenFromString.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookInitialize()
        {
            if (!HookedList.Contains("Initialize"))
            {
                HookedList.Add("Initialize");
                On.INIParser.Initialize += Initialize;
            }
        }

        internal static event Delegates.Initialize_BeforeArgs _beforeInitialize;
        internal static event Delegates.Initialize_AfterArgs _afterInitialize;

        private static void Initialize(On.INIParser.orig_Initialize orig, INIParser self, string iniString,
            bool AutoFlush)
        {
            Delegates.Params_Initialize @params = new()
            {
                self = self, iniString = iniString, AutoFlush = AutoFlush
            };
            if (_beforeInitialize != null)
            {
                foreach (Delegates.Initialize_BeforeArgs toInvoke in _beforeInitialize.GetInvocationList())
                {
                    try
                    {
                        _beforeInitialize?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            iniString = @params.iniString;
            AutoFlush = @params.AutoFlush;
            orig(self, iniString, AutoFlush);
            if (_afterInitialize != null)
            {
                foreach (Delegates.Initialize_AfterArgs toInvoke in _afterInitialize.GetInvocationList())
                {
                    try
                    {
                        _afterInitialize.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookClose()
        {
            if (!HookedList.Contains("Close"))
            {
                HookedList.Add("Close");
                On.INIParser.Close += Close;
            }
        }

        internal static event Delegates.Close_BeforeArgs _beforeClose;
        internal static event Delegates.Close_AfterArgs _afterClose;

        private static void Close(On.INIParser.orig_Close orig, INIParser self)
        {
            Delegates.Params_Close @params = new()
            {
                self = self
            };
            if (_beforeClose != null)
            {
                foreach (Delegates.Close_BeforeArgs toInvoke in _beforeClose.GetInvocationList())
                {
                    try
                    {
                        _beforeClose?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterClose != null)
            {
                foreach (Delegates.Close_AfterArgs toInvoke in _afterClose.GetInvocationList())
                {
                    try
                    {
                        _afterClose.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookParseSectionName()
        {
            if (!HookedList.Contains("ParseSectionName"))
            {
                HookedList.Add("ParseSectionName");
                On.INIParser.ParseSectionName += ParseSectionName;
            }
        }

        internal static event Delegates.ParseSectionName_BeforeArgs _beforeParseSectionName;
        internal static event Delegates.ParseSectionName_AfterArgs _afterParseSectionName;

        private static string ParseSectionName(On.INIParser.orig_ParseSectionName orig, INIParser self, string Line)
        {
            Delegates.Params_ParseSectionName @params = new()
            {
                self = self, Line = Line
            };
            if (_beforeParseSectionName != null)
            {
                foreach (Delegates.ParseSectionName_BeforeArgs toInvoke in _beforeParseSectionName.GetInvocationList())
                {
                    try
                    {
                        _beforeParseSectionName?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            Line = @params.Line;
            var retVal = orig(self, Line);
            if (_afterParseSectionName != null)
            {
                foreach (Delegates.ParseSectionName_AfterArgs toInvoke in _afterParseSectionName.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterParseSectionName.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookParseKeyValuePair()
        {
            if (!HookedList.Contains("ParseKeyValuePair"))
            {
                HookedList.Add("ParseKeyValuePair");
                On.INIParser.ParseKeyValuePair += ParseKeyValuePair;
            }
        }

        internal static event Delegates.ParseKeyValuePair_BeforeArgs _beforeParseKeyValuePair;
        internal static event Delegates.ParseKeyValuePair_AfterArgs _afterParseKeyValuePair;

        private static bool ParseKeyValuePair(On.INIParser.orig_ParseKeyValuePair orig, INIParser self, string Line,
            ref string Key, ref string Value)
        {
            Delegates.Params_ParseKeyValuePair @params = new()
            {
                self = self, Line = Line, Key = Key, Value = Value
            };
            if (_beforeParseKeyValuePair != null)
            {
                foreach (Delegates.ParseKeyValuePair_BeforeArgs toInvoke in
                         _beforeParseKeyValuePair.GetInvocationList())
                {
                    try
                    {
                        _beforeParseKeyValuePair?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            Line = @params.Line;
            Key = @params.Key;
            Value = @params.Value;
            var retVal = orig(self, Line, ref Key, ref Value);
            if (_afterParseKeyValuePair != null)
            {
                foreach (Delegates.ParseKeyValuePair_AfterArgs toInvoke in _afterParseKeyValuePair.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterParseKeyValuePair.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookisComment()
        {
            if (!HookedList.Contains("isComment"))
            {
                HookedList.Add("isComment");
                On.INIParser.isComment += isComment;
            }
        }

        internal static event Delegates.isComment_BeforeArgs _beforeisComment;
        internal static event Delegates.isComment_AfterArgs _afterisComment;

        private static bool isComment(On.INIParser.orig_isComment orig, INIParser self, string Line)
        {
            Delegates.Params_isComment @params = new()
            {
                self = self, Line = Line
            };
            if (_beforeisComment != null)
            {
                foreach (Delegates.isComment_BeforeArgs toInvoke in _beforeisComment.GetInvocationList())
                {
                    try
                    {
                        _beforeisComment?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            Line = @params.Line;
            var retVal = orig(self, Line);
            if (_afterisComment != null)
            {
                foreach (Delegates.isComment_AfterArgs toInvoke in _afterisComment.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterisComment.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookRefresh()
        {
            if (!HookedList.Contains("Refresh"))
            {
                HookedList.Add("Refresh");
                On.INIParser.Refresh += Refresh;
            }
        }

        internal static event Delegates.Refresh_BeforeArgs _beforeRefresh;
        internal static event Delegates.Refresh_AfterArgs _afterRefresh;

        private static void Refresh(On.INIParser.orig_Refresh orig, INIParser self)
        {
            Delegates.Params_Refresh @params = new()
            {
                self = self
            };
            if (_beforeRefresh != null)
            {
                foreach (Delegates.Refresh_BeforeArgs toInvoke in _beforeRefresh.GetInvocationList())
                {
                    try
                    {
                        _beforeRefresh?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterRefresh != null)
            {
                foreach (Delegates.Refresh_AfterArgs toInvoke in _afterRefresh.GetInvocationList())
                {
                    try
                    {
                        _afterRefresh.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookPerformFlush()
        {
            if (!HookedList.Contains("PerformFlush"))
            {
                HookedList.Add("PerformFlush");
                On.INIParser.PerformFlush += PerformFlush;
            }
        }

        internal static event Delegates.PerformFlush_BeforeArgs _beforePerformFlush;
        internal static event Delegates.PerformFlush_AfterArgs _afterPerformFlush;

        private static void PerformFlush(On.INIParser.orig_PerformFlush orig, INIParser self)
        {
            Delegates.Params_PerformFlush @params = new()
            {
                self = self
            };
            if (_beforePerformFlush != null)
            {
                foreach (Delegates.PerformFlush_BeforeArgs toInvoke in _beforePerformFlush.GetInvocationList())
                {
                    try
                    {
                        _beforePerformFlush?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterPerformFlush != null)
            {
                foreach (Delegates.PerformFlush_AfterArgs toInvoke in _afterPerformFlush.GetInvocationList())
                {
                    try
                    {
                        _afterPerformFlush.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookIsSectionExists()
        {
            if (!HookedList.Contains("IsSectionExists"))
            {
                HookedList.Add("IsSectionExists");
                On.INIParser.IsSectionExists += IsSectionExists;
            }
        }

        internal static event Delegates.IsSectionExists_BeforeArgs _beforeIsSectionExists;
        internal static event Delegates.IsSectionExists_AfterArgs _afterIsSectionExists;

        private static bool IsSectionExists(On.INIParser.orig_IsSectionExists orig, INIParser self, string SectionName)
        {
            Delegates.Params_IsSectionExists @params = new()
            {
                self = self, SectionName = SectionName
            };
            if (_beforeIsSectionExists != null)
            {
                foreach (Delegates.IsSectionExists_BeforeArgs toInvoke in _beforeIsSectionExists.GetInvocationList())
                {
                    try
                    {
                        _beforeIsSectionExists?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            SectionName = @params.SectionName;
            var retVal = orig(self, SectionName);
            if (_afterIsSectionExists != null)
            {
                foreach (Delegates.IsSectionExists_AfterArgs toInvoke in _afterIsSectionExists.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterIsSectionExists.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookIsKeyExists()
        {
            if (!HookedList.Contains("IsKeyExists"))
            {
                HookedList.Add("IsKeyExists");
                On.INIParser.IsKeyExists += IsKeyExists;
            }
        }

        internal static event Delegates.IsKeyExists_BeforeArgs _beforeIsKeyExists;
        internal static event Delegates.IsKeyExists_AfterArgs _afterIsKeyExists;

        private static bool IsKeyExists(On.INIParser.orig_IsKeyExists orig, INIParser self, string SectionName,
            string Key)
        {
            Delegates.Params_IsKeyExists @params = new()
            {
                self = self, SectionName = SectionName, Key = Key
            };
            if (_beforeIsKeyExists != null)
            {
                foreach (Delegates.IsKeyExists_BeforeArgs toInvoke in _beforeIsKeyExists.GetInvocationList())
                {
                    try
                    {
                        _beforeIsKeyExists?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            SectionName = @params.SectionName;
            Key = @params.Key;
            var retVal = orig(self, SectionName, Key);
            if (_afterIsKeyExists != null)
            {
                foreach (Delegates.IsKeyExists_AfterArgs toInvoke in _afterIsKeyExists.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterIsKeyExists.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookSectionDelete()
        {
            if (!HookedList.Contains("SectionDelete"))
            {
                HookedList.Add("SectionDelete");
                On.INIParser.SectionDelete += SectionDelete;
            }
        }

        internal static event Delegates.SectionDelete_BeforeArgs _beforeSectionDelete;
        internal static event Delegates.SectionDelete_AfterArgs _afterSectionDelete;

        private static void SectionDelete(On.INIParser.orig_SectionDelete orig, INIParser self, string SectionName)
        {
            Delegates.Params_SectionDelete @params = new()
            {
                self = self, SectionName = SectionName
            };
            if (_beforeSectionDelete != null)
            {
                foreach (Delegates.SectionDelete_BeforeArgs toInvoke in _beforeSectionDelete.GetInvocationList())
                {
                    try
                    {
                        _beforeSectionDelete?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            SectionName = @params.SectionName;
            orig(self, SectionName);
            if (_afterSectionDelete != null)
            {
                foreach (Delegates.SectionDelete_AfterArgs toInvoke in _afterSectionDelete.GetInvocationList())
                {
                    try
                    {
                        _afterSectionDelete.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookKeyDelete()
        {
            if (!HookedList.Contains("KeyDelete"))
            {
                HookedList.Add("KeyDelete");
                On.INIParser.KeyDelete += KeyDelete;
            }
        }

        internal static event Delegates.KeyDelete_BeforeArgs _beforeKeyDelete;
        internal static event Delegates.KeyDelete_AfterArgs _afterKeyDelete;

        private static void KeyDelete(On.INIParser.orig_KeyDelete orig, INIParser self, string SectionName, string Key)
        {
            Delegates.Params_KeyDelete @params = new()
            {
                self = self, SectionName = SectionName, Key = Key
            };
            if (_beforeKeyDelete != null)
            {
                foreach (Delegates.KeyDelete_BeforeArgs toInvoke in _beforeKeyDelete.GetInvocationList())
                {
                    try
                    {
                        _beforeKeyDelete?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            SectionName = @params.SectionName;
            Key = @params.Key;
            orig(self, SectionName, Key);
            if (_afterKeyDelete != null)
            {
                foreach (Delegates.KeyDelete_AfterArgs toInvoke in _afterKeyDelete.GetInvocationList())
                {
                    try
                    {
                        _afterKeyDelete.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookReadValue_string_string_string()
        {
            if (!HookedList.Contains("ReadValue_string_string_string"))
            {
                HookedList.Add("ReadValue_string_string_string");
                On.INIParser.ReadValue_string_string_string += ReadValue_string_string_string;
            }
        }

        internal static event Delegates.ReadValue_string_string_string_BeforeArgs _beforeReadValue_string_string_string;
        internal static event Delegates.ReadValue_string_string_string_AfterArgs _afterReadValue_string_string_string;

        private static string ReadValue_string_string_string(On.INIParser.orig_ReadValue_string_string_string orig,
            INIParser self, string SectionName, string Key, string DefaultValue)
        {
            Delegates.Params_ReadValue_string_string_string @params = new()
            {
                self = self, SectionName = SectionName, Key = Key, DefaultValue = DefaultValue
            };
            if (_beforeReadValue_string_string_string != null)
            {
                foreach (Delegates.ReadValue_string_string_string_BeforeArgs toInvoke in
                         _beforeReadValue_string_string_string.GetInvocationList())
                {
                    try
                    {
                        _beforeReadValue_string_string_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            SectionName = @params.SectionName;
            Key = @params.Key;
            DefaultValue = @params.DefaultValue;
            var retVal = orig(self, SectionName, Key, DefaultValue);
            if (_afterReadValue_string_string_string != null)
            {
                foreach (Delegates.ReadValue_string_string_string_AfterArgs toInvoke in
                         _afterReadValue_string_string_string.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterReadValue_string_string_string.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookWriteValue_string_string_string()
        {
            if (!HookedList.Contains("WriteValue_string_string_string"))
            {
                HookedList.Add("WriteValue_string_string_string");
                On.INIParser.WriteValue_string_string_string += WriteValue_string_string_string;
            }
        }

        internal static event Delegates.WriteValue_string_string_string_BeforeArgs
            _beforeWriteValue_string_string_string;

        internal static event Delegates.WriteValue_string_string_string_AfterArgs _afterWriteValue_string_string_string;

        private static void WriteValue_string_string_string(On.INIParser.orig_WriteValue_string_string_string orig,
            INIParser self, string SectionName, string Key, string Value)
        {
            Delegates.Params_WriteValue_string_string_string @params = new()
            {
                self = self, SectionName = SectionName, Key = Key, Value = Value
            };
            if (_beforeWriteValue_string_string_string != null)
            {
                foreach (Delegates.WriteValue_string_string_string_BeforeArgs toInvoke in
                         _beforeWriteValue_string_string_string.GetInvocationList())
                {
                    try
                    {
                        _beforeWriteValue_string_string_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            SectionName = @params.SectionName;
            Key = @params.Key;
            Value = @params.Value;
            orig(self, SectionName, Key, Value);
            if (_afterWriteValue_string_string_string != null)
            {
                foreach (Delegates.WriteValue_string_string_string_AfterArgs toInvoke in
                         _afterWriteValue_string_string_string.GetInvocationList())
                {
                    try
                    {
                        _afterWriteValue_string_string_string.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookEncodeByteArray()
        {
            if (!HookedList.Contains("EncodeByteArray"))
            {
                HookedList.Add("EncodeByteArray");
                On.INIParser.EncodeByteArray += EncodeByteArray;
            }
        }

        internal static event Delegates.EncodeByteArray_BeforeArgs _beforeEncodeByteArray;
        internal static event Delegates.EncodeByteArray_AfterArgs _afterEncodeByteArray;

        private static string EncodeByteArray(On.INIParser.orig_EncodeByteArray orig, INIParser self, byte[] Value)
        {
            Delegates.Params_EncodeByteArray @params = new()
            {
                self = self, Value = Value
            };
            if (_beforeEncodeByteArray != null)
            {
                foreach (Delegates.EncodeByteArray_BeforeArgs toInvoke in _beforeEncodeByteArray.GetInvocationList())
                {
                    try
                    {
                        _beforeEncodeByteArray?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            Value = @params.Value;
            var retVal = orig(self, Value);
            if (_afterEncodeByteArray != null)
            {
                foreach (Delegates.EncodeByteArray_AfterArgs toInvoke in _afterEncodeByteArray.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterEncodeByteArray.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookDecodeByteArray()
        {
            if (!HookedList.Contains("DecodeByteArray"))
            {
                HookedList.Add("DecodeByteArray");
                On.INIParser.DecodeByteArray += DecodeByteArray;
            }
        }

        internal static event Delegates.DecodeByteArray_BeforeArgs _beforeDecodeByteArray;
        internal static event Delegates.DecodeByteArray_AfterArgs _afterDecodeByteArray;

        private static byte[] DecodeByteArray(On.INIParser.orig_DecodeByteArray orig, INIParser self, string Value)
        {
            Delegates.Params_DecodeByteArray @params = new()
            {
                self = self, Value = Value
            };
            if (_beforeDecodeByteArray != null)
            {
                foreach (Delegates.DecodeByteArray_BeforeArgs toInvoke in _beforeDecodeByteArray.GetInvocationList())
                {
                    try
                    {
                        _beforeDecodeByteArray?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            Value = @params.Value;
            var retVal = orig(self, Value);
            if (_afterDecodeByteArray != null)
            {
                foreach (Delegates.DecodeByteArray_AfterArgs toInvoke in _afterDecodeByteArray.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterDecodeByteArray.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookReadValue_string_string_bool()
        {
            if (!HookedList.Contains("ReadValue_string_string_bool"))
            {
                HookedList.Add("ReadValue_string_string_bool");
                On.INIParser.ReadValue_string_string_bool += ReadValue_string_string_bool;
            }
        }

        internal static event Delegates.ReadValue_string_string_bool_BeforeArgs _beforeReadValue_string_string_bool;
        internal static event Delegates.ReadValue_string_string_bool_AfterArgs _afterReadValue_string_string_bool;

        private static bool ReadValue_string_string_bool(On.INIParser.orig_ReadValue_string_string_bool orig,
            INIParser self, string SectionName, string Key, bool DefaultValue)
        {
            Delegates.Params_ReadValue_string_string_bool @params = new()
            {
                self = self, SectionName = SectionName, Key = Key, DefaultValue = DefaultValue
            };
            if (_beforeReadValue_string_string_bool != null)
            {
                foreach (Delegates.ReadValue_string_string_bool_BeforeArgs toInvoke in
                         _beforeReadValue_string_string_bool.GetInvocationList())
                {
                    try
                    {
                        _beforeReadValue_string_string_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            SectionName = @params.SectionName;
            Key = @params.Key;
            DefaultValue = @params.DefaultValue;
            var retVal = orig(self, SectionName, Key, DefaultValue);
            if (_afterReadValue_string_string_bool != null)
            {
                foreach (Delegates.ReadValue_string_string_bool_AfterArgs toInvoke in _afterReadValue_string_string_bool
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterReadValue_string_string_bool.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookReadValue_string_string_int()
        {
            if (!HookedList.Contains("ReadValue_string_string_int"))
            {
                HookedList.Add("ReadValue_string_string_int");
                On.INIParser.ReadValue_string_string_int += ReadValue_string_string_int;
            }
        }

        internal static event Delegates.ReadValue_string_string_int_BeforeArgs _beforeReadValue_string_string_int;
        internal static event Delegates.ReadValue_string_string_int_AfterArgs _afterReadValue_string_string_int;

        private static int ReadValue_string_string_int(On.INIParser.orig_ReadValue_string_string_int orig,
            INIParser self, string SectionName, string Key, int DefaultValue)
        {
            Delegates.Params_ReadValue_string_string_int @params = new()
            {
                self = self, SectionName = SectionName, Key = Key, DefaultValue = DefaultValue
            };
            if (_beforeReadValue_string_string_int != null)
            {
                foreach (Delegates.ReadValue_string_string_int_BeforeArgs toInvoke in _beforeReadValue_string_string_int
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeReadValue_string_string_int?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            SectionName = @params.SectionName;
            Key = @params.Key;
            DefaultValue = @params.DefaultValue;
            var retVal = orig(self, SectionName, Key, DefaultValue);
            if (_afterReadValue_string_string_int != null)
            {
                foreach (Delegates.ReadValue_string_string_int_AfterArgs toInvoke in _afterReadValue_string_string_int
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterReadValue_string_string_int.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookReadValue_string_string_Int64()
        {
            if (!HookedList.Contains("ReadValue_string_string_Int64"))
            {
                HookedList.Add("ReadValue_string_string_Int64");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(INIParser), "ReadValue_string_string_Int64", true),
                    ReadValue_string_string_Int64);
            }
        }

        internal static event Delegates.ReadValue_string_string_Int64_BeforeArgs _beforeReadValue_string_string_Int64;
        internal static event Delegates.ReadValue_string_string_Int64_AfterArgs _afterReadValue_string_string_Int64;

        private static long ReadValue_string_string_Int64(Func<INIParser, string, string, long, long> orig,
            INIParser self, string SectionName, string Key, long DefaultValue)
        {
            Delegates.Params_ReadValue_string_string_Int64 @params = new()
            {
                self = self, SectionName = SectionName, Key = Key, DefaultValue = DefaultValue
            };
            if (_beforeReadValue_string_string_Int64 != null)
            {
                foreach (Delegates.ReadValue_string_string_Int64_BeforeArgs toInvoke in
                         _beforeReadValue_string_string_Int64.GetInvocationList())
                {
                    try
                    {
                        _beforeReadValue_string_string_Int64?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            SectionName = @params.SectionName;
            Key = @params.Key;
            DefaultValue = @params.DefaultValue;
            var retVal = orig(self, SectionName, Key, DefaultValue);
            if (_afterReadValue_string_string_Int64 != null)
            {
                foreach (Delegates.ReadValue_string_string_Int64_AfterArgs toInvoke in
                         _afterReadValue_string_string_Int64.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterReadValue_string_string_Int64.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookReadValue_string_string_Double()
        {
            if (!HookedList.Contains("ReadValue_string_string_Double"))
            {
                HookedList.Add("ReadValue_string_string_Double");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(INIParser), "ReadValue_string_string_Double", true),
                    ReadValue_string_string_Double);
            }
        }

        internal static event Delegates.ReadValue_string_string_Double_BeforeArgs _beforeReadValue_string_string_Double;
        internal static event Delegates.ReadValue_string_string_Double_AfterArgs _afterReadValue_string_string_Double;

        private static double ReadValue_string_string_Double(Func<INIParser, string, string, double, double> orig,
            INIParser self, string SectionName, string Key, double DefaultValue)
        {
            Delegates.Params_ReadValue_string_string_Double @params = new()
            {
                self = self, SectionName = SectionName, Key = Key, DefaultValue = DefaultValue
            };
            if (_beforeReadValue_string_string_Double != null)
            {
                foreach (Delegates.ReadValue_string_string_Double_BeforeArgs toInvoke in
                         _beforeReadValue_string_string_Double.GetInvocationList())
                {
                    try
                    {
                        _beforeReadValue_string_string_Double?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            SectionName = @params.SectionName;
            Key = @params.Key;
            DefaultValue = @params.DefaultValue;
            var retVal = orig(self, SectionName, Key, DefaultValue);
            if (_afterReadValue_string_string_Double != null)
            {
                foreach (Delegates.ReadValue_string_string_Double_AfterArgs toInvoke in
                         _afterReadValue_string_string_Double.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterReadValue_string_string_Double.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookReadValue_string_string_Array()
        {
            if (!HookedList.Contains("ReadValue_string_string_Array"))
            {
                HookedList.Add("ReadValue_string_string_Array");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(INIParser), "ReadValue_string_string_Array", true),
                    ReadValue_string_string_Array);
            }
        }

        internal static event Delegates.ReadValue_string_string_Array_BeforeArgs _beforeReadValue_string_string_Array;
        internal static event Delegates.ReadValue_string_string_Array_AfterArgs _afterReadValue_string_string_Array;

        private static byte[] ReadValue_string_string_Array(Func<INIParser, string, string, byte[], byte[]> orig,
            INIParser self, string SectionName, string Key, byte[] DefaultValue)
        {
            Delegates.Params_ReadValue_string_string_Array @params = new()
            {
                self = self, SectionName = SectionName, Key = Key, DefaultValue = DefaultValue
            };
            if (_beforeReadValue_string_string_Array != null)
            {
                foreach (Delegates.ReadValue_string_string_Array_BeforeArgs toInvoke in
                         _beforeReadValue_string_string_Array.GetInvocationList())
                {
                    try
                    {
                        _beforeReadValue_string_string_Array?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            SectionName = @params.SectionName;
            Key = @params.Key;
            DefaultValue = @params.DefaultValue;
            var retVal = orig(self, SectionName, Key, DefaultValue);
            if (_afterReadValue_string_string_Array != null)
            {
                foreach (Delegates.ReadValue_string_string_Array_AfterArgs toInvoke in
                         _afterReadValue_string_string_Array.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterReadValue_string_string_Array.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookReadValue_string_string_DateTime()
        {
            if (!HookedList.Contains("ReadValue_string_string_DateTime"))
            {
                HookedList.Add("ReadValue_string_string_DateTime");
                On.INIParser.ReadValue_string_string_DateTime += ReadValue_string_string_DateTime;
            }
        }

        internal static event Delegates.ReadValue_string_string_DateTime_BeforeArgs
            _beforeReadValue_string_string_DateTime;

        internal static event Delegates.ReadValue_string_string_DateTime_AfterArgs
            _afterReadValue_string_string_DateTime;

        private static System.DateTime ReadValue_string_string_DateTime(
            On.INIParser.orig_ReadValue_string_string_DateTime orig, INIParser self, string SectionName, string Key,
            System.DateTime DefaultValue)
        {
            Delegates.Params_ReadValue_string_string_DateTime @params = new()
            {
                self = self, SectionName = SectionName, Key = Key, DefaultValue = DefaultValue
            };
            if (_beforeReadValue_string_string_DateTime != null)
            {
                foreach (Delegates.ReadValue_string_string_DateTime_BeforeArgs toInvoke in
                         _beforeReadValue_string_string_DateTime.GetInvocationList())
                {
                    try
                    {
                        _beforeReadValue_string_string_DateTime?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            SectionName = @params.SectionName;
            Key = @params.Key;
            DefaultValue = @params.DefaultValue;
            var retVal = orig(self, SectionName, Key, DefaultValue);
            if (_afterReadValue_string_string_DateTime != null)
            {
                foreach (Delegates.ReadValue_string_string_DateTime_AfterArgs toInvoke in
                         _afterReadValue_string_string_DateTime.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterReadValue_string_string_DateTime.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookWriteValue_string_string_bool()
        {
            if (!HookedList.Contains("WriteValue_string_string_bool"))
            {
                HookedList.Add("WriteValue_string_string_bool");
                On.INIParser.WriteValue_string_string_bool += WriteValue_string_string_bool;
            }
        }

        internal static event Delegates.WriteValue_string_string_bool_BeforeArgs _beforeWriteValue_string_string_bool;
        internal static event Delegates.WriteValue_string_string_bool_AfterArgs _afterWriteValue_string_string_bool;

        private static void WriteValue_string_string_bool(On.INIParser.orig_WriteValue_string_string_bool orig,
            INIParser self, string SectionName, string Key, bool Value)
        {
            Delegates.Params_WriteValue_string_string_bool @params = new()
            {
                self = self, SectionName = SectionName, Key = Key, Value = Value
            };
            if (_beforeWriteValue_string_string_bool != null)
            {
                foreach (Delegates.WriteValue_string_string_bool_BeforeArgs toInvoke in
                         _beforeWriteValue_string_string_bool.GetInvocationList())
                {
                    try
                    {
                        _beforeWriteValue_string_string_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            SectionName = @params.SectionName;
            Key = @params.Key;
            Value = @params.Value;
            orig(self, SectionName, Key, Value);
            if (_afterWriteValue_string_string_bool != null)
            {
                foreach (Delegates.WriteValue_string_string_bool_AfterArgs toInvoke in
                         _afterWriteValue_string_string_bool.GetInvocationList())
                {
                    try
                    {
                        _afterWriteValue_string_string_bool.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookWriteValue_string_string_int()
        {
            if (!HookedList.Contains("WriteValue_string_string_int"))
            {
                HookedList.Add("WriteValue_string_string_int");
                On.INIParser.WriteValue_string_string_int += WriteValue_string_string_int;
            }
        }

        internal static event Delegates.WriteValue_string_string_int_BeforeArgs _beforeWriteValue_string_string_int;
        internal static event Delegates.WriteValue_string_string_int_AfterArgs _afterWriteValue_string_string_int;

        private static void WriteValue_string_string_int(On.INIParser.orig_WriteValue_string_string_int orig,
            INIParser self, string SectionName, string Key, int Value)
        {
            Delegates.Params_WriteValue_string_string_int @params = new()
            {
                self = self, SectionName = SectionName, Key = Key, Value = Value
            };
            if (_beforeWriteValue_string_string_int != null)
            {
                foreach (Delegates.WriteValue_string_string_int_BeforeArgs toInvoke in
                         _beforeWriteValue_string_string_int.GetInvocationList())
                {
                    try
                    {
                        _beforeWriteValue_string_string_int?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            SectionName = @params.SectionName;
            Key = @params.Key;
            Value = @params.Value;
            orig(self, SectionName, Key, Value);
            if (_afterWriteValue_string_string_int != null)
            {
                foreach (Delegates.WriteValue_string_string_int_AfterArgs toInvoke in _afterWriteValue_string_string_int
                             .GetInvocationList())
                {
                    try
                    {
                        _afterWriteValue_string_string_int.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookWriteValue_string_string_Int64()
        {
            if (!HookedList.Contains("WriteValue_string_string_Int64"))
            {
                HookedList.Add("WriteValue_string_string_Int64");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(INIParser), "WriteValue_string_string_Int64", true),
                    WriteValue_string_string_Int64);
            }
        }

        internal static event Delegates.WriteValue_string_string_Int64_BeforeArgs _beforeWriteValue_string_string_Int64;
        internal static event Delegates.WriteValue_string_string_Int64_AfterArgs _afterWriteValue_string_string_Int64;

        private static void WriteValue_string_string_Int64(Action<INIParser, string, string, long> orig, INIParser self,
            string SectionName, string Key, long Value)
        {
            Delegates.Params_WriteValue_string_string_Int64 @params = new()
            {
                self = self, SectionName = SectionName, Key = Key, Value = Value
            };
            if (_beforeWriteValue_string_string_Int64 != null)
            {
                foreach (Delegates.WriteValue_string_string_Int64_BeforeArgs toInvoke in
                         _beforeWriteValue_string_string_Int64.GetInvocationList())
                {
                    try
                    {
                        _beforeWriteValue_string_string_Int64?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            SectionName = @params.SectionName;
            Key = @params.Key;
            Value = @params.Value;
            orig(self, SectionName, Key, Value);
            if (_afterWriteValue_string_string_Int64 != null)
            {
                foreach (Delegates.WriteValue_string_string_Int64_AfterArgs toInvoke in
                         _afterWriteValue_string_string_Int64.GetInvocationList())
                {
                    try
                    {
                        _afterWriteValue_string_string_Int64.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookWriteValue_string_string_Double()
        {
            if (!HookedList.Contains("WriteValue_string_string_Double"))
            {
                HookedList.Add("WriteValue_string_string_Double");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(INIParser), "WriteValue_string_string_Double", true),
                    WriteValue_string_string_Double);
            }
        }

        internal static event Delegates.WriteValue_string_string_Double_BeforeArgs
            _beforeWriteValue_string_string_Double;

        internal static event Delegates.WriteValue_string_string_Double_AfterArgs _afterWriteValue_string_string_Double;

        private static void WriteValue_string_string_Double(Action<INIParser, string, string, double> orig,
            INIParser self, string SectionName, string Key, double Value)
        {
            Delegates.Params_WriteValue_string_string_Double @params = new()
            {
                self = self, SectionName = SectionName, Key = Key, Value = Value
            };
            if (_beforeWriteValue_string_string_Double != null)
            {
                foreach (Delegates.WriteValue_string_string_Double_BeforeArgs toInvoke in
                         _beforeWriteValue_string_string_Double.GetInvocationList())
                {
                    try
                    {
                        _beforeWriteValue_string_string_Double?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            SectionName = @params.SectionName;
            Key = @params.Key;
            Value = @params.Value;
            orig(self, SectionName, Key, Value);
            if (_afterWriteValue_string_string_Double != null)
            {
                foreach (Delegates.WriteValue_string_string_Double_AfterArgs toInvoke in
                         _afterWriteValue_string_string_Double.GetInvocationList())
                {
                    try
                    {
                        _afterWriteValue_string_string_Double.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookWriteValue_string_string_Array()
        {
            if (!HookedList.Contains("WriteValue_string_string_Array"))
            {
                HookedList.Add("WriteValue_string_string_Array");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(INIParser), "WriteValue_string_string_Array", true),
                    WriteValue_string_string_Array);
            }
        }

        internal static event Delegates.WriteValue_string_string_Array_BeforeArgs _beforeWriteValue_string_string_Array;
        internal static event Delegates.WriteValue_string_string_Array_AfterArgs _afterWriteValue_string_string_Array;

        private static void WriteValue_string_string_Array(Action<INIParser, string, string, byte[]> orig,
            INIParser self, string SectionName, string Key, byte[] Value)
        {
            Delegates.Params_WriteValue_string_string_Array @params = new()
            {
                self = self, SectionName = SectionName, Key = Key, Value = Value
            };
            if (_beforeWriteValue_string_string_Array != null)
            {
                foreach (Delegates.WriteValue_string_string_Array_BeforeArgs toInvoke in
                         _beforeWriteValue_string_string_Array.GetInvocationList())
                {
                    try
                    {
                        _beforeWriteValue_string_string_Array?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            SectionName = @params.SectionName;
            Key = @params.Key;
            Value = @params.Value;
            orig(self, SectionName, Key, Value);
            if (_afterWriteValue_string_string_Array != null)
            {
                foreach (Delegates.WriteValue_string_string_Array_AfterArgs toInvoke in
                         _afterWriteValue_string_string_Array.GetInvocationList())
                {
                    try
                    {
                        _afterWriteValue_string_string_Array.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookWriteValue_string_string_DateTime()
        {
            if (!HookedList.Contains("WriteValue_string_string_DateTime"))
            {
                HookedList.Add("WriteValue_string_string_DateTime");
                On.INIParser.WriteValue_string_string_DateTime += WriteValue_string_string_DateTime;
            }
        }

        internal static event Delegates.WriteValue_string_string_DateTime_BeforeArgs
            _beforeWriteValue_string_string_DateTime;

        internal static event Delegates.WriteValue_string_string_DateTime_AfterArgs
            _afterWriteValue_string_string_DateTime;

        private static void WriteValue_string_string_DateTime(On.INIParser.orig_WriteValue_string_string_DateTime orig,
            INIParser self, string SectionName, string Key, System.DateTime Value)
        {
            Delegates.Params_WriteValue_string_string_DateTime @params = new()
            {
                self = self, SectionName = SectionName, Key = Key, Value = Value
            };
            if (_beforeWriteValue_string_string_DateTime != null)
            {
                foreach (Delegates.WriteValue_string_string_DateTime_BeforeArgs toInvoke in
                         _beforeWriteValue_string_string_DateTime.GetInvocationList())
                {
                    try
                    {
                        _beforeWriteValue_string_string_DateTime?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            SectionName = @params.SectionName;
            Key = @params.Key;
            Value = @params.Value;
            orig(self, SectionName, Key, Value);
            if (_afterWriteValue_string_string_DateTime != null)
            {
                foreach (Delegates.WriteValue_string_string_DateTime_AfterArgs toInvoke in
                         _afterWriteValue_string_string_DateTime.GetInvocationList())
                {
                    try
                    {
                        _afterWriteValue_string_string_DateTime.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_FileName
        {
            public INIParser self;
        }

        public delegate void get_FileName_BeforeArgs(Params_get_FileName args);

        public delegate string get_FileName_AfterArgs(Params_get_FileName args, string ret);

        public delegate string get_FileName_WithArgs(Func<INIParser, string> orig, INIParser self);

        public sealed class Params_get_iniString
        {
            public INIParser self;
        }

        public delegate void get_iniString_BeforeArgs(Params_get_iniString args);

        public delegate string get_iniString_AfterArgs(Params_get_iniString args, string ret);

        public delegate string get_iniString_WithArgs(Func<INIParser, string> orig, INIParser self);

        public sealed class Params_Open_string
        {
            public INIParser self;
            public string path;
        }

        public delegate void Open_string_BeforeArgs(Params_Open_string args);

        public delegate void Open_string_AfterArgs(Params_Open_string args);

        public delegate void Open_string_WithArgs(Action<INIParser, string> orig, INIParser self, string path);

        public sealed class Params_Open_TextAsset
        {
            public INIParser self;
            public UnityEngine.TextAsset name;
        }

        public delegate void Open_TextAsset_BeforeArgs(Params_Open_TextAsset args);

        public delegate void Open_TextAsset_AfterArgs(Params_Open_TextAsset args);

        public delegate void Open_TextAsset_WithArgs(Action<INIParser, UnityEngine.TextAsset> orig, INIParser self,
            UnityEngine.TextAsset name);

        public sealed class Params_OpenFromString
        {
            public INIParser self;
            public string str;
        }

        public delegate void OpenFromString_BeforeArgs(Params_OpenFromString args);

        public delegate void OpenFromString_AfterArgs(Params_OpenFromString args);

        public delegate void OpenFromString_WithArgs(Action<INIParser, string> orig, INIParser self, string str);

        public sealed class Params_Initialize
        {
            public INIParser self;
            public string iniString;
            public bool AutoFlush;
        }

        public delegate void Initialize_BeforeArgs(Params_Initialize args);

        public delegate void Initialize_AfterArgs(Params_Initialize args);

        public delegate void Initialize_WithArgs(Action<INIParser, string, bool> orig, INIParser self, string iniString,
            bool AutoFlush);

        public sealed class Params_Close
        {
            public INIParser self;
        }

        public delegate void Close_BeforeArgs(Params_Close args);

        public delegate void Close_AfterArgs(Params_Close args);

        public delegate void Close_WithArgs(Action<INIParser> orig, INIParser self);

        public sealed class Params_ParseSectionName
        {
            public INIParser self;
            public string Line;
        }

        public delegate void ParseSectionName_BeforeArgs(Params_ParseSectionName args);

        public delegate string ParseSectionName_AfterArgs(Params_ParseSectionName args, string ret);

        public delegate string ParseSectionName_WithArgs(Func<INIParser, string, string> orig, INIParser self,
            string Line);

        public sealed class Params_ParseKeyValuePair
        {
            public INIParser self;
            public string Line;
            public string Key;
            public string Value;
        }

        public delegate void ParseKeyValuePair_BeforeArgs(Params_ParseKeyValuePair args);

        public delegate bool ParseKeyValuePair_AfterArgs(Params_ParseKeyValuePair args, bool ret);

        public delegate bool ParseKeyValuePair_WithArgs(Func<INIParser, string, string, string, bool> orig,
            INIParser self, string Line, ref string Key, ref string Value);

        public sealed class Params_isComment
        {
            public INIParser self;
            public string Line;
        }

        public delegate void isComment_BeforeArgs(Params_isComment args);

        public delegate bool isComment_AfterArgs(Params_isComment args, bool ret);

        public delegate bool isComment_WithArgs(Func<INIParser, string, bool> orig, INIParser self, string Line);

        public sealed class Params_Refresh
        {
            public INIParser self;
        }

        public delegate void Refresh_BeforeArgs(Params_Refresh args);

        public delegate void Refresh_AfterArgs(Params_Refresh args);

        public delegate void Refresh_WithArgs(Action<INIParser> orig, INIParser self);

        public sealed class Params_PerformFlush
        {
            public INIParser self;
        }

        public delegate void PerformFlush_BeforeArgs(Params_PerformFlush args);

        public delegate void PerformFlush_AfterArgs(Params_PerformFlush args);

        public delegate void PerformFlush_WithArgs(Action<INIParser> orig, INIParser self);

        public sealed class Params_IsSectionExists
        {
            public INIParser self;
            public string SectionName;
        }

        public delegate void IsSectionExists_BeforeArgs(Params_IsSectionExists args);

        public delegate bool IsSectionExists_AfterArgs(Params_IsSectionExists args, bool ret);

        public delegate bool IsSectionExists_WithArgs(Func<INIParser, string, bool> orig, INIParser self,
            string SectionName);

        public sealed class Params_IsKeyExists
        {
            public INIParser self;
            public string SectionName;
            public string Key;
        }

        public delegate void IsKeyExists_BeforeArgs(Params_IsKeyExists args);

        public delegate bool IsKeyExists_AfterArgs(Params_IsKeyExists args, bool ret);

        public delegate bool IsKeyExists_WithArgs(Func<INIParser, string, string, bool> orig, INIParser self,
            string SectionName, string Key);

        public sealed class Params_SectionDelete
        {
            public INIParser self;
            public string SectionName;
        }

        public delegate void SectionDelete_BeforeArgs(Params_SectionDelete args);

        public delegate void SectionDelete_AfterArgs(Params_SectionDelete args);

        public delegate void SectionDelete_WithArgs(Action<INIParser, string> orig, INIParser self, string SectionName);

        public sealed class Params_KeyDelete
        {
            public INIParser self;
            public string SectionName;
            public string Key;
        }

        public delegate void KeyDelete_BeforeArgs(Params_KeyDelete args);

        public delegate void KeyDelete_AfterArgs(Params_KeyDelete args);

        public delegate void KeyDelete_WithArgs(Action<INIParser, string, string> orig, INIParser self,
            string SectionName, string Key);

        public sealed class Params_ReadValue_string_string_string
        {
            public INIParser self;
            public string SectionName;
            public string Key;
            public string DefaultValue;
        }

        public delegate void ReadValue_string_string_string_BeforeArgs(Params_ReadValue_string_string_string args);

        public delegate string ReadValue_string_string_string_AfterArgs(Params_ReadValue_string_string_string args,
            string ret);

        public delegate string ReadValue_string_string_string_WithArgs(
            Func<INIParser, string, string, string, string> orig, INIParser self, string SectionName, string Key,
            string DefaultValue);

        public sealed class Params_WriteValue_string_string_string
        {
            public INIParser self;
            public string SectionName;
            public string Key;
            public string Value;
        }

        public delegate void WriteValue_string_string_string_BeforeArgs(Params_WriteValue_string_string_string args);

        public delegate void WriteValue_string_string_string_AfterArgs(Params_WriteValue_string_string_string args);

        public delegate void WriteValue_string_string_string_WithArgs(Action<INIParser, string, string, string> orig,
            INIParser self, string SectionName, string Key, string Value);

        public sealed class Params_EncodeByteArray
        {
            public INIParser self;
            public byte[] Value;
        }

        public delegate void EncodeByteArray_BeforeArgs(Params_EncodeByteArray args);

        public delegate string EncodeByteArray_AfterArgs(Params_EncodeByteArray args, string ret);

        public delegate string EncodeByteArray_WithArgs(Func<INIParser, byte[], string> orig, INIParser self,
            byte[] Value);

        public sealed class Params_DecodeByteArray
        {
            public INIParser self;
            public string Value;
        }

        public delegate void DecodeByteArray_BeforeArgs(Params_DecodeByteArray args);

        public delegate byte[] DecodeByteArray_AfterArgs(Params_DecodeByteArray args, byte[] ret);

        public delegate byte[] DecodeByteArray_WithArgs(Func<INIParser, string, byte[]> orig, INIParser self,
            string Value);

        public sealed class Params_ReadValue_string_string_bool
        {
            public INIParser self;
            public string SectionName;
            public string Key;
            public bool DefaultValue;
        }

        public delegate void ReadValue_string_string_bool_BeforeArgs(Params_ReadValue_string_string_bool args);

        public delegate bool ReadValue_string_string_bool_AfterArgs(Params_ReadValue_string_string_bool args, bool ret);

        public delegate bool ReadValue_string_string_bool_WithArgs(Func<INIParser, string, string, bool, bool> orig,
            INIParser self, string SectionName, string Key, bool DefaultValue);

        public sealed class Params_ReadValue_string_string_int
        {
            public INIParser self;
            public string SectionName;
            public string Key;
            public int DefaultValue;
        }

        public delegate void ReadValue_string_string_int_BeforeArgs(Params_ReadValue_string_string_int args);

        public delegate int ReadValue_string_string_int_AfterArgs(Params_ReadValue_string_string_int args, int ret);

        public delegate int ReadValue_string_string_int_WithArgs(Func<INIParser, string, string, int, int> orig,
            INIParser self, string SectionName, string Key, int DefaultValue);

        public sealed class Params_ReadValue_string_string_Int64
        {
            public INIParser self;
            public string SectionName;
            public string Key;
            public long DefaultValue;
        }

        public delegate void ReadValue_string_string_Int64_BeforeArgs(Params_ReadValue_string_string_Int64 args);

        public delegate long ReadValue_string_string_Int64_AfterArgs(Params_ReadValue_string_string_Int64 args,
            long ret);

        public delegate long ReadValue_string_string_Int64_WithArgs(Func<INIParser, string, string, long, long> orig,
            INIParser self, string SectionName, string Key, long DefaultValue);

        public sealed class Params_ReadValue_string_string_Double
        {
            public INIParser self;
            public string SectionName;
            public string Key;
            public double DefaultValue;
        }

        public delegate void ReadValue_string_string_Double_BeforeArgs(Params_ReadValue_string_string_Double args);

        public delegate double ReadValue_string_string_Double_AfterArgs(Params_ReadValue_string_string_Double args,
            double ret);

        public delegate double ReadValue_string_string_Double_WithArgs(
            Func<INIParser, string, string, double, double> orig, INIParser self, string SectionName, string Key,
            double DefaultValue);

        public sealed class Params_ReadValue_string_string_Array
        {
            public INIParser self;
            public string SectionName;
            public string Key;
            public byte[] DefaultValue;
        }

        public delegate void ReadValue_string_string_Array_BeforeArgs(Params_ReadValue_string_string_Array args);

        public delegate byte[] ReadValue_string_string_Array_AfterArgs(Params_ReadValue_string_string_Array args,
            byte[] ret);

        public delegate byte[] ReadValue_string_string_Array_WithArgs(
            Func<INIParser, string, string, byte[], byte[]> orig, INIParser self, string SectionName, string Key,
            byte[] DefaultValue);

        public sealed class Params_ReadValue_string_string_DateTime
        {
            public INIParser self;
            public string SectionName;
            public string Key;
            public System.DateTime DefaultValue;
        }

        public delegate void ReadValue_string_string_DateTime_BeforeArgs(Params_ReadValue_string_string_DateTime args);

        public delegate System.DateTime ReadValue_string_string_DateTime_AfterArgs(
            Params_ReadValue_string_string_DateTime args, System.DateTime ret);

        public delegate System.DateTime ReadValue_string_string_DateTime_WithArgs(
            Func<INIParser, string, string, System.DateTime, System.DateTime> orig, INIParser self, string SectionName,
            string Key, System.DateTime DefaultValue);

        public sealed class Params_WriteValue_string_string_bool
        {
            public INIParser self;
            public string SectionName;
            public string Key;
            public bool Value;
        }

        public delegate void WriteValue_string_string_bool_BeforeArgs(Params_WriteValue_string_string_bool args);

        public delegate void WriteValue_string_string_bool_AfterArgs(Params_WriteValue_string_string_bool args);

        public delegate void WriteValue_string_string_bool_WithArgs(Action<INIParser, string, string, bool> orig,
            INIParser self, string SectionName, string Key, bool Value);

        public sealed class Params_WriteValue_string_string_int
        {
            public INIParser self;
            public string SectionName;
            public string Key;
            public int Value;
        }

        public delegate void WriteValue_string_string_int_BeforeArgs(Params_WriteValue_string_string_int args);

        public delegate void WriteValue_string_string_int_AfterArgs(Params_WriteValue_string_string_int args);

        public delegate void WriteValue_string_string_int_WithArgs(Action<INIParser, string, string, int> orig,
            INIParser self, string SectionName, string Key, int Value);

        public sealed class Params_WriteValue_string_string_Int64
        {
            public INIParser self;
            public string SectionName;
            public string Key;
            public long Value;
        }

        public delegate void WriteValue_string_string_Int64_BeforeArgs(Params_WriteValue_string_string_Int64 args);

        public delegate void WriteValue_string_string_Int64_AfterArgs(Params_WriteValue_string_string_Int64 args);

        public delegate void WriteValue_string_string_Int64_WithArgs(Action<INIParser, string, string, long> orig,
            INIParser self, string SectionName, string Key, long Value);

        public sealed class Params_WriteValue_string_string_Double
        {
            public INIParser self;
            public string SectionName;
            public string Key;
            public double Value;
        }

        public delegate void WriteValue_string_string_Double_BeforeArgs(Params_WriteValue_string_string_Double args);

        public delegate void WriteValue_string_string_Double_AfterArgs(Params_WriteValue_string_string_Double args);

        public delegate void WriteValue_string_string_Double_WithArgs(Action<INIParser, string, string, double> orig,
            INIParser self, string SectionName, string Key, double Value);

        public sealed class Params_WriteValue_string_string_Array
        {
            public INIParser self;
            public string SectionName;
            public string Key;
            public byte[] Value;
        }

        public delegate void WriteValue_string_string_Array_BeforeArgs(Params_WriteValue_string_string_Array args);

        public delegate void WriteValue_string_string_Array_AfterArgs(Params_WriteValue_string_string_Array args);

        public delegate void WriteValue_string_string_Array_WithArgs(Action<INIParser, string, string, byte[]> orig,
            INIParser self, string SectionName, string Key, byte[] Value);

        public sealed class Params_WriteValue_string_string_DateTime
        {
            public INIParser self;
            public string SectionName;
            public string Key;
            public System.DateTime Value;
        }

        public delegate void
            WriteValue_string_string_DateTime_BeforeArgs(Params_WriteValue_string_string_DateTime args);

        public delegate void WriteValue_string_string_DateTime_AfterArgs(Params_WriteValue_string_string_DateTime args);

        public delegate void WriteValue_string_string_DateTime_WithArgs(
            Action<INIParser, string, string, System.DateTime> orig, INIParser self, string SectionName, string Key,
            System.DateTime Value);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_FileName_BeforeArgs get_FileName
        {
            add
            {
                HookHandler._beforeget_FileName += value;
                HookHandler.Hookget_FileName();
            }
            remove => HookHandler._beforeget_FileName -= value;
        }

        public static event Delegates.get_iniString_BeforeArgs get_iniString
        {
            add
            {
                HookHandler._beforeget_iniString += value;
                HookHandler.Hookget_iniString();
            }
            remove => HookHandler._beforeget_iniString -= value;
        }

        public static event Delegates.Open_string_BeforeArgs Open_string
        {
            add
            {
                HookHandler._beforeOpen_string += value;
                HookHandler.HookOpen_string();
            }
            remove => HookHandler._beforeOpen_string -= value;
        }

        public static event Delegates.Open_TextAsset_BeforeArgs Open_TextAsset
        {
            add
            {
                HookHandler._beforeOpen_TextAsset += value;
                HookHandler.HookOpen_TextAsset();
            }
            remove => HookHandler._beforeOpen_TextAsset -= value;
        }

        public static event Delegates.OpenFromString_BeforeArgs OpenFromString
        {
            add
            {
                HookHandler._beforeOpenFromString += value;
                HookHandler.HookOpenFromString();
            }
            remove => HookHandler._beforeOpenFromString -= value;
        }

        public static event Delegates.Initialize_BeforeArgs Initialize
        {
            add
            {
                HookHandler._beforeInitialize += value;
                HookHandler.HookInitialize();
            }
            remove => HookHandler._beforeInitialize -= value;
        }

        public static event Delegates.Close_BeforeArgs Close
        {
            add
            {
                HookHandler._beforeClose += value;
                HookHandler.HookClose();
            }
            remove => HookHandler._beforeClose -= value;
        }

        public static event Delegates.ParseSectionName_BeforeArgs ParseSectionName
        {
            add
            {
                HookHandler._beforeParseSectionName += value;
                HookHandler.HookParseSectionName();
            }
            remove => HookHandler._beforeParseSectionName -= value;
        }

        public static event Delegates.ParseKeyValuePair_BeforeArgs ParseKeyValuePair
        {
            add
            {
                HookHandler._beforeParseKeyValuePair += value;
                HookHandler.HookParseKeyValuePair();
            }
            remove => HookHandler._beforeParseKeyValuePair -= value;
        }

        public static event Delegates.isComment_BeforeArgs isComment
        {
            add
            {
                HookHandler._beforeisComment += value;
                HookHandler.HookisComment();
            }
            remove => HookHandler._beforeisComment -= value;
        }

        public static event Delegates.Refresh_BeforeArgs Refresh
        {
            add
            {
                HookHandler._beforeRefresh += value;
                HookHandler.HookRefresh();
            }
            remove => HookHandler._beforeRefresh -= value;
        }

        public static event Delegates.PerformFlush_BeforeArgs PerformFlush
        {
            add
            {
                HookHandler._beforePerformFlush += value;
                HookHandler.HookPerformFlush();
            }
            remove => HookHandler._beforePerformFlush -= value;
        }

        public static event Delegates.IsSectionExists_BeforeArgs IsSectionExists
        {
            add
            {
                HookHandler._beforeIsSectionExists += value;
                HookHandler.HookIsSectionExists();
            }
            remove => HookHandler._beforeIsSectionExists -= value;
        }

        public static event Delegates.IsKeyExists_BeforeArgs IsKeyExists
        {
            add
            {
                HookHandler._beforeIsKeyExists += value;
                HookHandler.HookIsKeyExists();
            }
            remove => HookHandler._beforeIsKeyExists -= value;
        }

        public static event Delegates.SectionDelete_BeforeArgs SectionDelete
        {
            add
            {
                HookHandler._beforeSectionDelete += value;
                HookHandler.HookSectionDelete();
            }
            remove => HookHandler._beforeSectionDelete -= value;
        }

        public static event Delegates.KeyDelete_BeforeArgs KeyDelete
        {
            add
            {
                HookHandler._beforeKeyDelete += value;
                HookHandler.HookKeyDelete();
            }
            remove => HookHandler._beforeKeyDelete -= value;
        }

        public static event Delegates.ReadValue_string_string_string_BeforeArgs ReadValue_string_string_string
        {
            add
            {
                HookHandler._beforeReadValue_string_string_string += value;
                HookHandler.HookReadValue_string_string_string();
            }
            remove => HookHandler._beforeReadValue_string_string_string -= value;
        }

        public static event Delegates.WriteValue_string_string_string_BeforeArgs WriteValue_string_string_string
        {
            add
            {
                HookHandler._beforeWriteValue_string_string_string += value;
                HookHandler.HookWriteValue_string_string_string();
            }
            remove => HookHandler._beforeWriteValue_string_string_string -= value;
        }

        public static event Delegates.EncodeByteArray_BeforeArgs EncodeByteArray
        {
            add
            {
                HookHandler._beforeEncodeByteArray += value;
                HookHandler.HookEncodeByteArray();
            }
            remove => HookHandler._beforeEncodeByteArray -= value;
        }

        public static event Delegates.DecodeByteArray_BeforeArgs DecodeByteArray
        {
            add
            {
                HookHandler._beforeDecodeByteArray += value;
                HookHandler.HookDecodeByteArray();
            }
            remove => HookHandler._beforeDecodeByteArray -= value;
        }

        public static event Delegates.ReadValue_string_string_bool_BeforeArgs ReadValue_string_string_bool
        {
            add
            {
                HookHandler._beforeReadValue_string_string_bool += value;
                HookHandler.HookReadValue_string_string_bool();
            }
            remove => HookHandler._beforeReadValue_string_string_bool -= value;
        }

        public static event Delegates.ReadValue_string_string_int_BeforeArgs ReadValue_string_string_int
        {
            add
            {
                HookHandler._beforeReadValue_string_string_int += value;
                HookHandler.HookReadValue_string_string_int();
            }
            remove => HookHandler._beforeReadValue_string_string_int -= value;
        }

        public static event Delegates.ReadValue_string_string_Int64_BeforeArgs ReadValue_string_string_Int64
        {
            add
            {
                HookHandler._beforeReadValue_string_string_Int64 += value;
                HookHandler.HookReadValue_string_string_Int64();
            }
            remove => HookHandler._beforeReadValue_string_string_Int64 -= value;
        }

        public static event Delegates.ReadValue_string_string_Double_BeforeArgs ReadValue_string_string_Double
        {
            add
            {
                HookHandler._beforeReadValue_string_string_Double += value;
                HookHandler.HookReadValue_string_string_Double();
            }
            remove => HookHandler._beforeReadValue_string_string_Double -= value;
        }

        public static event Delegates.ReadValue_string_string_Array_BeforeArgs ReadValue_string_string_Array
        {
            add
            {
                HookHandler._beforeReadValue_string_string_Array += value;
                HookHandler.HookReadValue_string_string_Array();
            }
            remove => HookHandler._beforeReadValue_string_string_Array -= value;
        }

        public static event Delegates.ReadValue_string_string_DateTime_BeforeArgs ReadValue_string_string_DateTime
        {
            add
            {
                HookHandler._beforeReadValue_string_string_DateTime += value;
                HookHandler.HookReadValue_string_string_DateTime();
            }
            remove => HookHandler._beforeReadValue_string_string_DateTime -= value;
        }

        public static event Delegates.WriteValue_string_string_bool_BeforeArgs WriteValue_string_string_bool
        {
            add
            {
                HookHandler._beforeWriteValue_string_string_bool += value;
                HookHandler.HookWriteValue_string_string_bool();
            }
            remove => HookHandler._beforeWriteValue_string_string_bool -= value;
        }

        public static event Delegates.WriteValue_string_string_int_BeforeArgs WriteValue_string_string_int
        {
            add
            {
                HookHandler._beforeWriteValue_string_string_int += value;
                HookHandler.HookWriteValue_string_string_int();
            }
            remove => HookHandler._beforeWriteValue_string_string_int -= value;
        }

        public static event Delegates.WriteValue_string_string_Int64_BeforeArgs WriteValue_string_string_Int64
        {
            add
            {
                HookHandler._beforeWriteValue_string_string_Int64 += value;
                HookHandler.HookWriteValue_string_string_Int64();
            }
            remove => HookHandler._beforeWriteValue_string_string_Int64 -= value;
        }

        public static event Delegates.WriteValue_string_string_Double_BeforeArgs WriteValue_string_string_Double
        {
            add
            {
                HookHandler._beforeWriteValue_string_string_Double += value;
                HookHandler.HookWriteValue_string_string_Double();
            }
            remove => HookHandler._beforeWriteValue_string_string_Double -= value;
        }

        public static event Delegates.WriteValue_string_string_Array_BeforeArgs WriteValue_string_string_Array
        {
            add
            {
                HookHandler._beforeWriteValue_string_string_Array += value;
                HookHandler.HookWriteValue_string_string_Array();
            }
            remove => HookHandler._beforeWriteValue_string_string_Array -= value;
        }

        public static event Delegates.WriteValue_string_string_DateTime_BeforeArgs WriteValue_string_string_DateTime
        {
            add
            {
                HookHandler._beforeWriteValue_string_string_DateTime += value;
                HookHandler.HookWriteValue_string_string_DateTime();
            }
            remove => HookHandler._beforeWriteValue_string_string_DateTime -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_FileName_AfterArgs get_FileName
        {
            add
            {
                HookHandler._afterget_FileName += value;
                HookHandler.Hookget_FileName();
            }
            remove => HookHandler._afterget_FileName -= value;
        }

        public static event Delegates.get_iniString_AfterArgs get_iniString
        {
            add
            {
                HookHandler._afterget_iniString += value;
                HookHandler.Hookget_iniString();
            }
            remove => HookHandler._afterget_iniString -= value;
        }

        public static event Delegates.Open_string_AfterArgs Open_string
        {
            add
            {
                HookHandler._afterOpen_string += value;
                HookHandler.HookOpen_string();
            }
            remove => HookHandler._afterOpen_string -= value;
        }

        public static event Delegates.Open_TextAsset_AfterArgs Open_TextAsset
        {
            add
            {
                HookHandler._afterOpen_TextAsset += value;
                HookHandler.HookOpen_TextAsset();
            }
            remove => HookHandler._afterOpen_TextAsset -= value;
        }

        public static event Delegates.OpenFromString_AfterArgs OpenFromString
        {
            add
            {
                HookHandler._afterOpenFromString += value;
                HookHandler.HookOpenFromString();
            }
            remove => HookHandler._afterOpenFromString -= value;
        }

        public static event Delegates.Initialize_AfterArgs Initialize
        {
            add
            {
                HookHandler._afterInitialize += value;
                HookHandler.HookInitialize();
            }
            remove => HookHandler._afterInitialize -= value;
        }

        public static event Delegates.Close_AfterArgs Close
        {
            add
            {
                HookHandler._afterClose += value;
                HookHandler.HookClose();
            }
            remove => HookHandler._afterClose -= value;
        }

        public static event Delegates.ParseSectionName_AfterArgs ParseSectionName
        {
            add
            {
                HookHandler._afterParseSectionName += value;
                HookHandler.HookParseSectionName();
            }
            remove => HookHandler._afterParseSectionName -= value;
        }

        public static event Delegates.ParseKeyValuePair_AfterArgs ParseKeyValuePair
        {
            add
            {
                HookHandler._afterParseKeyValuePair += value;
                HookHandler.HookParseKeyValuePair();
            }
            remove => HookHandler._afterParseKeyValuePair -= value;
        }

        public static event Delegates.isComment_AfterArgs isComment
        {
            add
            {
                HookHandler._afterisComment += value;
                HookHandler.HookisComment();
            }
            remove => HookHandler._afterisComment -= value;
        }

        public static event Delegates.Refresh_AfterArgs Refresh
        {
            add
            {
                HookHandler._afterRefresh += value;
                HookHandler.HookRefresh();
            }
            remove => HookHandler._afterRefresh -= value;
        }

        public static event Delegates.PerformFlush_AfterArgs PerformFlush
        {
            add
            {
                HookHandler._afterPerformFlush += value;
                HookHandler.HookPerformFlush();
            }
            remove => HookHandler._afterPerformFlush -= value;
        }

        public static event Delegates.IsSectionExists_AfterArgs IsSectionExists
        {
            add
            {
                HookHandler._afterIsSectionExists += value;
                HookHandler.HookIsSectionExists();
            }
            remove => HookHandler._afterIsSectionExists -= value;
        }

        public static event Delegates.IsKeyExists_AfterArgs IsKeyExists
        {
            add
            {
                HookHandler._afterIsKeyExists += value;
                HookHandler.HookIsKeyExists();
            }
            remove => HookHandler._afterIsKeyExists -= value;
        }

        public static event Delegates.SectionDelete_AfterArgs SectionDelete
        {
            add
            {
                HookHandler._afterSectionDelete += value;
                HookHandler.HookSectionDelete();
            }
            remove => HookHandler._afterSectionDelete -= value;
        }

        public static event Delegates.KeyDelete_AfterArgs KeyDelete
        {
            add
            {
                HookHandler._afterKeyDelete += value;
                HookHandler.HookKeyDelete();
            }
            remove => HookHandler._afterKeyDelete -= value;
        }

        public static event Delegates.ReadValue_string_string_string_AfterArgs ReadValue_string_string_string
        {
            add
            {
                HookHandler._afterReadValue_string_string_string += value;
                HookHandler.HookReadValue_string_string_string();
            }
            remove => HookHandler._afterReadValue_string_string_string -= value;
        }

        public static event Delegates.WriteValue_string_string_string_AfterArgs WriteValue_string_string_string
        {
            add
            {
                HookHandler._afterWriteValue_string_string_string += value;
                HookHandler.HookWriteValue_string_string_string();
            }
            remove => HookHandler._afterWriteValue_string_string_string -= value;
        }

        public static event Delegates.EncodeByteArray_AfterArgs EncodeByteArray
        {
            add
            {
                HookHandler._afterEncodeByteArray += value;
                HookHandler.HookEncodeByteArray();
            }
            remove => HookHandler._afterEncodeByteArray -= value;
        }

        public static event Delegates.DecodeByteArray_AfterArgs DecodeByteArray
        {
            add
            {
                HookHandler._afterDecodeByteArray += value;
                HookHandler.HookDecodeByteArray();
            }
            remove => HookHandler._afterDecodeByteArray -= value;
        }

        public static event Delegates.ReadValue_string_string_bool_AfterArgs ReadValue_string_string_bool
        {
            add
            {
                HookHandler._afterReadValue_string_string_bool += value;
                HookHandler.HookReadValue_string_string_bool();
            }
            remove => HookHandler._afterReadValue_string_string_bool -= value;
        }

        public static event Delegates.ReadValue_string_string_int_AfterArgs ReadValue_string_string_int
        {
            add
            {
                HookHandler._afterReadValue_string_string_int += value;
                HookHandler.HookReadValue_string_string_int();
            }
            remove => HookHandler._afterReadValue_string_string_int -= value;
        }

        public static event Delegates.ReadValue_string_string_Int64_AfterArgs ReadValue_string_string_Int64
        {
            add
            {
                HookHandler._afterReadValue_string_string_Int64 += value;
                HookHandler.HookReadValue_string_string_Int64();
            }
            remove => HookHandler._afterReadValue_string_string_Int64 -= value;
        }

        public static event Delegates.ReadValue_string_string_Double_AfterArgs ReadValue_string_string_Double
        {
            add
            {
                HookHandler._afterReadValue_string_string_Double += value;
                HookHandler.HookReadValue_string_string_Double();
            }
            remove => HookHandler._afterReadValue_string_string_Double -= value;
        }

        public static event Delegates.ReadValue_string_string_Array_AfterArgs ReadValue_string_string_Array
        {
            add
            {
                HookHandler._afterReadValue_string_string_Array += value;
                HookHandler.HookReadValue_string_string_Array();
            }
            remove => HookHandler._afterReadValue_string_string_Array -= value;
        }

        public static event Delegates.ReadValue_string_string_DateTime_AfterArgs ReadValue_string_string_DateTime
        {
            add
            {
                HookHandler._afterReadValue_string_string_DateTime += value;
                HookHandler.HookReadValue_string_string_DateTime();
            }
            remove => HookHandler._afterReadValue_string_string_DateTime -= value;
        }

        public static event Delegates.WriteValue_string_string_bool_AfterArgs WriteValue_string_string_bool
        {
            add
            {
                HookHandler._afterWriteValue_string_string_bool += value;
                HookHandler.HookWriteValue_string_string_bool();
            }
            remove => HookHandler._afterWriteValue_string_string_bool -= value;
        }

        public static event Delegates.WriteValue_string_string_int_AfterArgs WriteValue_string_string_int
        {
            add
            {
                HookHandler._afterWriteValue_string_string_int += value;
                HookHandler.HookWriteValue_string_string_int();
            }
            remove => HookHandler._afterWriteValue_string_string_int -= value;
        }

        public static event Delegates.WriteValue_string_string_Int64_AfterArgs WriteValue_string_string_Int64
        {
            add
            {
                HookHandler._afterWriteValue_string_string_Int64 += value;
                HookHandler.HookWriteValue_string_string_Int64();
            }
            remove => HookHandler._afterWriteValue_string_string_Int64 -= value;
        }

        public static event Delegates.WriteValue_string_string_Double_AfterArgs WriteValue_string_string_Double
        {
            add
            {
                HookHandler._afterWriteValue_string_string_Double += value;
                HookHandler.HookWriteValue_string_string_Double();
            }
            remove => HookHandler._afterWriteValue_string_string_Double -= value;
        }

        public static event Delegates.WriteValue_string_string_Array_AfterArgs WriteValue_string_string_Array
        {
            add
            {
                HookHandler._afterWriteValue_string_string_Array += value;
                HookHandler.HookWriteValue_string_string_Array();
            }
            remove => HookHandler._afterWriteValue_string_string_Array -= value;
        }

        public static event Delegates.WriteValue_string_string_DateTime_AfterArgs WriteValue_string_string_DateTime
        {
            add
            {
                HookHandler._afterWriteValue_string_string_DateTime += value;
                HookHandler.HookWriteValue_string_string_DateTime();
            }
            remove => HookHandler._afterWriteValue_string_string_DateTime -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_FileName_WithArgs get_FileName
        {
            add => HookEndpointManager.Add<Delegates.get_FileName_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(INIParser), "get_FileName", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_FileName_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(INIParser), "get_FileName", true), value);
        }

        public static event Delegates.get_iniString_WithArgs get_iniString
        {
            add => HookEndpointManager.Add<Delegates.get_iniString_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(INIParser), "get_iniString", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_iniString_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(INIParser), "get_iniString", true), value);
        }

        public static event On.INIParser.hook_Open_string Open_string
        {
            add => On.INIParser.Open_string += value;
            remove => On.INIParser.Open_string -= value;
        }

        public static event On.INIParser.hook_Open_TextAsset Open_TextAsset
        {
            add => On.INIParser.Open_TextAsset += value;
            remove => On.INIParser.Open_TextAsset -= value;
        }

        public static event On.INIParser.hook_OpenFromString OpenFromString
        {
            add => On.INIParser.OpenFromString += value;
            remove => On.INIParser.OpenFromString -= value;
        }

        public static event On.INIParser.hook_Initialize Initialize
        {
            add => On.INIParser.Initialize += value;
            remove => On.INIParser.Initialize -= value;
        }

        public static event On.INIParser.hook_Close Close
        {
            add => On.INIParser.Close += value;
            remove => On.INIParser.Close -= value;
        }

        public static event On.INIParser.hook_ParseSectionName ParseSectionName
        {
            add => On.INIParser.ParseSectionName += value;
            remove => On.INIParser.ParseSectionName -= value;
        }

        public static event On.INIParser.hook_ParseKeyValuePair ParseKeyValuePair
        {
            add => On.INIParser.ParseKeyValuePair += value;
            remove => On.INIParser.ParseKeyValuePair -= value;
        }

        public static event On.INIParser.hook_isComment isComment
        {
            add => On.INIParser.isComment += value;
            remove => On.INIParser.isComment -= value;
        }

        public static event On.INIParser.hook_Refresh Refresh
        {
            add => On.INIParser.Refresh += value;
            remove => On.INIParser.Refresh -= value;
        }

        public static event On.INIParser.hook_PerformFlush PerformFlush
        {
            add => On.INIParser.PerformFlush += value;
            remove => On.INIParser.PerformFlush -= value;
        }

        public static event On.INIParser.hook_IsSectionExists IsSectionExists
        {
            add => On.INIParser.IsSectionExists += value;
            remove => On.INIParser.IsSectionExists -= value;
        }

        public static event On.INIParser.hook_IsKeyExists IsKeyExists
        {
            add => On.INIParser.IsKeyExists += value;
            remove => On.INIParser.IsKeyExists -= value;
        }

        public static event On.INIParser.hook_SectionDelete SectionDelete
        {
            add => On.INIParser.SectionDelete += value;
            remove => On.INIParser.SectionDelete -= value;
        }

        public static event On.INIParser.hook_KeyDelete KeyDelete
        {
            add => On.INIParser.KeyDelete += value;
            remove => On.INIParser.KeyDelete -= value;
        }

        public static event On.INIParser.hook_ReadValue_string_string_string ReadValue_string_string_string
        {
            add => On.INIParser.ReadValue_string_string_string += value;
            remove => On.INIParser.ReadValue_string_string_string -= value;
        }

        public static event On.INIParser.hook_WriteValue_string_string_string WriteValue_string_string_string
        {
            add => On.INIParser.WriteValue_string_string_string += value;
            remove => On.INIParser.WriteValue_string_string_string -= value;
        }

        public static event On.INIParser.hook_EncodeByteArray EncodeByteArray
        {
            add => On.INIParser.EncodeByteArray += value;
            remove => On.INIParser.EncodeByteArray -= value;
        }

        public static event On.INIParser.hook_DecodeByteArray DecodeByteArray
        {
            add => On.INIParser.DecodeByteArray += value;
            remove => On.INIParser.DecodeByteArray -= value;
        }

        public static event On.INIParser.hook_ReadValue_string_string_bool ReadValue_string_string_bool
        {
            add => On.INIParser.ReadValue_string_string_bool += value;
            remove => On.INIParser.ReadValue_string_string_bool -= value;
        }

        public static event On.INIParser.hook_ReadValue_string_string_int ReadValue_string_string_int
        {
            add => On.INIParser.ReadValue_string_string_int += value;
            remove => On.INIParser.ReadValue_string_string_int -= value;
        }

        public static event Delegates.ReadValue_string_string_Int64_WithArgs ReadValue_string_string_Int64
        {
            add => HookEndpointManager.Add<Delegates.ReadValue_string_string_Int64_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(INIParser), "ReadValue", true), value);
            remove => HookEndpointManager.Remove<Delegates.ReadValue_string_string_Int64_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(INIParser), "ReadValue", true), value);
        }

        public static event Delegates.ReadValue_string_string_Double_WithArgs ReadValue_string_string_Double
        {
            add => HookEndpointManager.Add<Delegates.ReadValue_string_string_Double_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(INIParser), "ReadValue", true), value);
            remove => HookEndpointManager.Remove<Delegates.ReadValue_string_string_Double_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(INIParser), "ReadValue", true), value);
        }

        public static event Delegates.ReadValue_string_string_Array_WithArgs ReadValue_string_string_Array
        {
            add => HookEndpointManager.Add<Delegates.ReadValue_string_string_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(INIParser), "ReadValue", true), value);
            remove => HookEndpointManager.Remove<Delegates.ReadValue_string_string_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(INIParser), "ReadValue", true), value);
        }

        public static event On.INIParser.hook_ReadValue_string_string_DateTime ReadValue_string_string_DateTime
        {
            add => On.INIParser.ReadValue_string_string_DateTime += value;
            remove => On.INIParser.ReadValue_string_string_DateTime -= value;
        }

        public static event On.INIParser.hook_WriteValue_string_string_bool WriteValue_string_string_bool
        {
            add => On.INIParser.WriteValue_string_string_bool += value;
            remove => On.INIParser.WriteValue_string_string_bool -= value;
        }

        public static event On.INIParser.hook_WriteValue_string_string_int WriteValue_string_string_int
        {
            add => On.INIParser.WriteValue_string_string_int += value;
            remove => On.INIParser.WriteValue_string_string_int -= value;
        }

        public static event Delegates.WriteValue_string_string_Int64_WithArgs WriteValue_string_string_Int64
        {
            add => HookEndpointManager.Add<Delegates.WriteValue_string_string_Int64_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(INIParser), "WriteValue", true), value);
            remove => HookEndpointManager.Remove<Delegates.WriteValue_string_string_Int64_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(INIParser), "WriteValue", true), value);
        }

        public static event Delegates.WriteValue_string_string_Double_WithArgs WriteValue_string_string_Double
        {
            add => HookEndpointManager.Add<Delegates.WriteValue_string_string_Double_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(INIParser), "WriteValue", true), value);
            remove => HookEndpointManager.Remove<Delegates.WriteValue_string_string_Double_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(INIParser), "WriteValue", true), value);
        }

        public static event Delegates.WriteValue_string_string_Array_WithArgs WriteValue_string_string_Array
        {
            add => HookEndpointManager.Add<Delegates.WriteValue_string_string_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(INIParser), "WriteValue", true), value);
            remove => HookEndpointManager.Remove<Delegates.WriteValue_string_string_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(INIParser), "WriteValue", true), value);
        }

        public static event On.INIParser.hook_WriteValue_string_string_DateTime WriteValue_string_string_DateTime
        {
            add => On.INIParser.WriteValue_string_string_DateTime += value;
            remove => On.INIParser.WriteValue_string_string_DateTime -= value;
        }
    }
}