using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for uGuiSetButtonNormalColor class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnuGuiSetButtonNormalColor
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(uGuiSetButtonNormalColor), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<uGuiSetButtonNormalColor> orig, uGuiSetButtonNormalColor self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(uGuiSetButtonNormalColor), "OnEnter"), OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_NormalArgs _afterOnEnter;

        private static void OnEnter(Action<uGuiSetButtonNormalColor> orig, uGuiSetButtonNormalColor self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            _beforeOnEnter?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnter != null) _afterOnEnter.Invoke(@params);
        }

        internal static void HookOnUpdate()
        {
            if (!HookedList.Contains("OnUpdate"))
            {
                HookedList.Add("OnUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(uGuiSetButtonNormalColor), "OnUpdate"), OnUpdate);
            }
        }

        internal static event Delegates.OnUpdate_BeforeArgs _beforeOnUpdate;
        internal static event Delegates.OnUpdate_NormalArgs _afterOnUpdate;

        private static void OnUpdate(Action<uGuiSetButtonNormalColor> orig, uGuiSetButtonNormalColor self)
        {
            Delegates.Params_OnUpdate @params = new()
            {
                self = self
            };
            _beforeOnUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnUpdate != null) _afterOnUpdate.Invoke(@params);
        }

        internal static void HookOnExit()
        {
            if (!HookedList.Contains("OnExit"))
            {
                HookedList.Add("OnExit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(uGuiSetButtonNormalColor), "OnExit"), OnExit);
            }
        }

        internal static event Delegates.OnExit_BeforeArgs _beforeOnExit;
        internal static event Delegates.OnExit_NormalArgs _afterOnExit;

        private static void OnExit(Action<uGuiSetButtonNormalColor> orig, uGuiSetButtonNormalColor self)
        {
            Delegates.Params_OnExit @params = new()
            {
                self = self
            };
            _beforeOnExit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnExit != null) _afterOnExit.Invoke(@params);
        }

        internal static void HookInitialize()
        {
            if (!HookedList.Contains("Initialize"))
            {
                HookedList.Add("Initialize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(uGuiSetButtonNormalColor), "Initialize"), Initialize);
            }
        }

        internal static event Delegates.Initialize_BeforeArgs _beforeInitialize;
        internal static event Delegates.Initialize_NormalArgs _afterInitialize;

        private static void Initialize(Action<uGuiSetButtonNormalColor, GameObject> orig, uGuiSetButtonNormalColor self,
            GameObject go)
        {
            Delegates.Params_Initialize @params = new()
            {
                self = self, go = go
            };
            _beforeInitialize?.Invoke(@params);
            self = @params.self;
            go = @params.go;
            orig(self, go);
            if (_afterInitialize != null) _afterInitialize.Invoke(@params);
        }

        internal static void HookDoSetButtonColor()
        {
            if (!HookedList.Contains("DoSetButtonColor"))
            {
                HookedList.Add("DoSetButtonColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(uGuiSetButtonNormalColor), "DoSetButtonColor"),
                    DoSetButtonColor);
            }
        }

        internal static event Delegates.DoSetButtonColor_BeforeArgs _beforeDoSetButtonColor;
        internal static event Delegates.DoSetButtonColor_NormalArgs _afterDoSetButtonColor;

        private static void DoSetButtonColor(Action<uGuiSetButtonNormalColor> orig, uGuiSetButtonNormalColor self)
        {
            Delegates.Params_DoSetButtonColor @params = new()
            {
                self = self
            };
            _beforeDoSetButtonColor?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoSetButtonColor != null) _afterDoSetButtonColor.Invoke(@params);
        }

        internal static void HookDoSetOldColorValue()
        {
            if (!HookedList.Contains("DoSetOldColorValue"))
            {
                HookedList.Add("DoSetOldColorValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(uGuiSetButtonNormalColor), "DoSetOldColorValue"),
                    DoSetOldColorValue);
            }
        }

        internal static event Delegates.DoSetOldColorValue_BeforeArgs _beforeDoSetOldColorValue;
        internal static event Delegates.DoSetOldColorValue_NormalArgs _afterDoSetOldColorValue;

        private static void DoSetOldColorValue(Action<uGuiSetButtonNormalColor> orig, uGuiSetButtonNormalColor self)
        {
            Delegates.Params_DoSetOldColorValue @params = new()
            {
                self = self
            };
            _beforeDoSetOldColorValue?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoSetOldColorValue != null) _afterDoSetOldColorValue.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void DoSetButtonColor_BeforeArgs(Params_DoSetButtonColor args);

        public delegate void DoSetButtonColor_NormalArgs(Params_DoSetButtonColor args);

        public delegate void DoSetOldColorValue_BeforeArgs(Params_DoSetOldColorValue args);

        public delegate void DoSetOldColorValue_NormalArgs(Params_DoSetOldColorValue args);

        public delegate void Initialize_BeforeArgs(Params_Initialize args);

        public delegate void Initialize_NormalArgs(Params_Initialize args);

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_NormalArgs(Params_OnEnter args);

        public delegate void OnExit_BeforeArgs(Params_OnExit args);

        public delegate void OnExit_NormalArgs(Params_OnExit args);

        public delegate void OnUpdate_BeforeArgs(Params_OnUpdate args);

        public delegate void OnUpdate_NormalArgs(Params_OnUpdate args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public sealed class Params_Reset
        {
            public uGuiSetButtonNormalColor self;
        }

        public sealed class Params_OnEnter
        {
            public uGuiSetButtonNormalColor self;
        }

        public sealed class Params_OnUpdate
        {
            public uGuiSetButtonNormalColor self;
        }

        public sealed class Params_OnExit
        {
            public uGuiSetButtonNormalColor self;
        }

        public sealed class Params_Initialize
        {
            public GameObject go;
            public uGuiSetButtonNormalColor self;
        }

        public sealed class Params_DoSetButtonColor
        {
            public uGuiSetButtonNormalColor self;
        }

        public sealed class Params_DoSetOldColorValue
        {
            public uGuiSetButtonNormalColor self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.OnUpdate_BeforeArgs OnUpdate
        {
            add
            {
                HookHandler._beforeOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._beforeOnUpdate -= value;
        }

        public static event Delegates.OnExit_BeforeArgs OnExit
        {
            add
            {
                HookHandler._beforeOnExit += value;
                HookHandler.HookOnExit();
            }
            remove => HookHandler._beforeOnExit -= value;
        }

        public static event Delegates.Initialize_BeforeArgs Initialize
        {
            add
            {
                HookHandler._beforeInitialize += value;
                HookHandler.HookInitialize();
            }
            remove => HookHandler._beforeInitialize -= value;
        }

        public static event Delegates.DoSetButtonColor_BeforeArgs DoSetButtonColor
        {
            add
            {
                HookHandler._beforeDoSetButtonColor += value;
                HookHandler.HookDoSetButtonColor();
            }
            remove => HookHandler._beforeDoSetButtonColor -= value;
        }

        public static event Delegates.DoSetOldColorValue_BeforeArgs DoSetOldColorValue
        {
            add
            {
                HookHandler._beforeDoSetOldColorValue += value;
                HookHandler.HookDoSetOldColorValue();
            }
            remove => HookHandler._beforeDoSetOldColorValue -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.OnUpdate_NormalArgs OnUpdate
        {
            add
            {
                HookHandler._afterOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._afterOnUpdate -= value;
        }

        public static event Delegates.OnExit_NormalArgs OnExit
        {
            add
            {
                HookHandler._afterOnExit += value;
                HookHandler.HookOnExit();
            }
            remove => HookHandler._afterOnExit -= value;
        }

        public static event Delegates.Initialize_NormalArgs Initialize
        {
            add
            {
                HookHandler._afterInitialize += value;
                HookHandler.HookInitialize();
            }
            remove => HookHandler._afterInitialize -= value;
        }

        public static event Delegates.DoSetButtonColor_NormalArgs DoSetButtonColor
        {
            add
            {
                HookHandler._afterDoSetButtonColor += value;
                HookHandler.HookDoSetButtonColor();
            }
            remove => HookHandler._afterDoSetButtonColor -= value;
        }

        public static event Delegates.DoSetOldColorValue_NormalArgs DoSetOldColorValue
        {
            add
            {
                HookHandler._afterDoSetOldColorValue += value;
                HookHandler.HookDoSetOldColorValue();
            }
            remove => HookHandler._afterDoSetOldColorValue -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(uGuiSetButtonNormalColor), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(uGuiSetButtonNormalColor), "Reset"), value);
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(uGuiSetButtonNormalColor), "OnEnter"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(uGuiSetButtonNormalColor), "OnEnter"), value);
        }

        public static event Delegates.OnUpdate_NormalArgs OnUpdate
        {
            add => HookEndpointManager.Add<Delegates.OnUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(uGuiSetButtonNormalColor), "OnUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.OnUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(uGuiSetButtonNormalColor), "OnUpdate"), value);
        }

        public static event Delegates.OnExit_NormalArgs OnExit
        {
            add => HookEndpointManager.Add<Delegates.OnExit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(uGuiSetButtonNormalColor), "OnExit"), value);
            remove => HookEndpointManager.Remove<Delegates.OnExit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(uGuiSetButtonNormalColor), "OnExit"), value);
        }

        public static event Delegates.Initialize_NormalArgs Initialize
        {
            add => HookEndpointManager.Add<Delegates.Initialize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(uGuiSetButtonNormalColor), "Initialize"), value);
            remove => HookEndpointManager.Remove<Delegates.Initialize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(uGuiSetButtonNormalColor), "Initialize"), value);
        }

        public static event Delegates.DoSetButtonColor_NormalArgs DoSetButtonColor
        {
            add => HookEndpointManager.Add<Delegates.DoSetButtonColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(uGuiSetButtonNormalColor), "DoSetButtonColor"), value);
            remove => HookEndpointManager.Remove<Delegates.DoSetButtonColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(uGuiSetButtonNormalColor), "DoSetButtonColor"), value);
        }

        public static event Delegates.DoSetOldColorValue_NormalArgs DoSetOldColorValue
        {
            add => HookEndpointManager.Add<Delegates.DoSetOldColorValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(uGuiSetButtonNormalColor), "DoSetOldColorValue"), value);
            remove => HookEndpointManager.Remove<Delegates.DoSetOldColorValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(uGuiSetButtonNormalColor), "DoSetOldColorValue"), value);
        }
    }
}