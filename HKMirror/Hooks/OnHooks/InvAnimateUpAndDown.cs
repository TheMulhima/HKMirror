namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for InvAnimateUpAndDown class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnInvAnimateUpAndDown
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.InvAnimateUpAndDown.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.InvAnimateUpAndDown.orig_Awake orig, InvAnimateUpAndDown self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.InvAnimateUpAndDown.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.InvAnimateUpAndDown.orig_Update orig, InvAnimateUpAndDown self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookAnimateUp()
        {
            if (!HookedList.Contains("AnimateUp"))
            {
                HookedList.Add("AnimateUp");
                On.InvAnimateUpAndDown.AnimateUp += AnimateUp;
            }
        }

        internal static event Delegates.AnimateUp_BeforeArgs _beforeAnimateUp;
        internal static event Delegates.AnimateUp_NormalArgs _afterAnimateUp;

        private static void AnimateUp(On.InvAnimateUpAndDown.orig_AnimateUp orig, InvAnimateUpAndDown self)
        {
            Delegates.Params_AnimateUp @params = new()
            {
                self = self
            };
            _beforeAnimateUp?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAnimateUp != null) _afterAnimateUp.Invoke(@params);
        }

        internal static void HookAnimateDown()
        {
            if (!HookedList.Contains("AnimateDown"))
            {
                HookedList.Add("AnimateDown");
                On.InvAnimateUpAndDown.AnimateDown += AnimateDown;
            }
        }

        internal static event Delegates.AnimateDown_BeforeArgs _beforeAnimateDown;
        internal static event Delegates.AnimateDown_NormalArgs _afterAnimateDown;

        private static void AnimateDown(On.InvAnimateUpAndDown.orig_AnimateDown orig, InvAnimateUpAndDown self)
        {
            Delegates.Params_AnimateDown @params = new()
            {
                self = self
            };
            _beforeAnimateDown?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAnimateDown != null) _afterAnimateDown.Invoke(@params);
        }

        internal static void HookReplayUpAnim()
        {
            if (!HookedList.Contains("ReplayUpAnim"))
            {
                HookedList.Add("ReplayUpAnim");
                On.InvAnimateUpAndDown.ReplayUpAnim += ReplayUpAnim;
            }
        }

        internal static event Delegates.ReplayUpAnim_BeforeArgs _beforeReplayUpAnim;
        internal static event Delegates.ReplayUpAnim_NormalArgs _afterReplayUpAnim;

        private static void ReplayUpAnim(On.InvAnimateUpAndDown.orig_ReplayUpAnim orig, InvAnimateUpAndDown self)
        {
            Delegates.Params_ReplayUpAnim @params = new()
            {
                self = self
            };
            _beforeReplayUpAnim?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReplayUpAnim != null) _afterReplayUpAnim.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AnimateDown_BeforeArgs(Params_AnimateDown args);

        public delegate void AnimateDown_NormalArgs(Params_AnimateDown args);

        public delegate void AnimateUp_BeforeArgs(Params_AnimateUp args);

        public delegate void AnimateUp_NormalArgs(Params_AnimateUp args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void ReplayUpAnim_BeforeArgs(Params_ReplayUpAnim args);

        public delegate void ReplayUpAnim_NormalArgs(Params_ReplayUpAnim args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_Awake
        {
            public InvAnimateUpAndDown self;
        }

        public sealed class Params_Update
        {
            public InvAnimateUpAndDown self;
        }

        public sealed class Params_AnimateUp
        {
            public InvAnimateUpAndDown self;
        }

        public sealed class Params_AnimateDown
        {
            public InvAnimateUpAndDown self;
        }

        public sealed class Params_ReplayUpAnim
        {
            public InvAnimateUpAndDown self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.AnimateUp_BeforeArgs AnimateUp
        {
            add
            {
                HookHandler._beforeAnimateUp += value;
                HookHandler.HookAnimateUp();
            }
            remove => HookHandler._beforeAnimateUp -= value;
        }

        public static event Delegates.AnimateDown_BeforeArgs AnimateDown
        {
            add
            {
                HookHandler._beforeAnimateDown += value;
                HookHandler.HookAnimateDown();
            }
            remove => HookHandler._beforeAnimateDown -= value;
        }

        public static event Delegates.ReplayUpAnim_BeforeArgs ReplayUpAnim
        {
            add
            {
                HookHandler._beforeReplayUpAnim += value;
                HookHandler.HookReplayUpAnim();
            }
            remove => HookHandler._beforeReplayUpAnim -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.AnimateUp_NormalArgs AnimateUp
        {
            add
            {
                HookHandler._afterAnimateUp += value;
                HookHandler.HookAnimateUp();
            }
            remove => HookHandler._afterAnimateUp -= value;
        }

        public static event Delegates.AnimateDown_NormalArgs AnimateDown
        {
            add
            {
                HookHandler._afterAnimateDown += value;
                HookHandler.HookAnimateDown();
            }
            remove => HookHandler._afterAnimateDown -= value;
        }

        public static event Delegates.ReplayUpAnim_NormalArgs ReplayUpAnim
        {
            add
            {
                HookHandler._afterReplayUpAnim += value;
                HookHandler.HookReplayUpAnim();
            }
            remove => HookHandler._afterReplayUpAnim -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.InvAnimateUpAndDown.hook_Awake Awake
        {
            add => On.InvAnimateUpAndDown.Awake += value;
            remove => On.InvAnimateUpAndDown.Awake -= value;
        }

        public static event On.InvAnimateUpAndDown.hook_Update Update
        {
            add => On.InvAnimateUpAndDown.Update += value;
            remove => On.InvAnimateUpAndDown.Update -= value;
        }

        public static event On.InvAnimateUpAndDown.hook_AnimateUp AnimateUp
        {
            add => On.InvAnimateUpAndDown.AnimateUp += value;
            remove => On.InvAnimateUpAndDown.AnimateUp -= value;
        }

        public static event On.InvAnimateUpAndDown.hook_AnimateDown AnimateDown
        {
            add => On.InvAnimateUpAndDown.AnimateDown += value;
            remove => On.InvAnimateUpAndDown.AnimateDown -= value;
        }

        public static event On.InvAnimateUpAndDown.hook_ReplayUpAnim ReplayUpAnim
        {
            add => On.InvAnimateUpAndDown.ReplayUpAnim += value;
            remove => On.InvAnimateUpAndDown.ReplayUpAnim -= value;
        }
    }
}