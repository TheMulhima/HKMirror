namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for FixVerticalAlign class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnFixVerticalAlign
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.FixVerticalAlign.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.FixVerticalAlign.orig_OnEnable orig, FixVerticalAlign self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.FixVerticalAlign.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.FixVerticalAlign.orig_Start orig, FixVerticalAlign self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookAlignText()
        {
            if (!HookedList.Contains("AlignText"))
            {
                HookedList.Add("AlignText");
                On.FixVerticalAlign.AlignText += AlignText;
            }
        }

        internal static event Delegates.AlignText_BeforeArgs _beforeAlignText;
        internal static event Delegates.AlignText_NormalArgs _afterAlignText;

        private static void AlignText(On.FixVerticalAlign.orig_AlignText orig, FixVerticalAlign self)
        {
            Delegates.Params_AlignText @params = new()
            {
                self = self
            };
            _beforeAlignText?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAlignText != null) _afterAlignText.Invoke(@params);
        }

        internal static void HookAlignTextKeymap()
        {
            if (!HookedList.Contains("AlignTextKeymap"))
            {
                HookedList.Add("AlignTextKeymap");
                On.FixVerticalAlign.AlignTextKeymap += AlignTextKeymap;
            }
        }

        internal static event Delegates.AlignTextKeymap_BeforeArgs _beforeAlignTextKeymap;
        internal static event Delegates.AlignTextKeymap_NormalArgs _afterAlignTextKeymap;

        private static void AlignTextKeymap(On.FixVerticalAlign.orig_AlignTextKeymap orig, FixVerticalAlign self)
        {
            Delegates.Params_AlignTextKeymap @params = new()
            {
                self = self
            };
            _beforeAlignTextKeymap?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAlignTextKeymap != null) _afterAlignTextKeymap.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AlignText_BeforeArgs(Params_AlignText args);

        public delegate void AlignText_NormalArgs(Params_AlignText args);

        public delegate void AlignTextKeymap_BeforeArgs(Params_AlignTextKeymap args);

        public delegate void AlignTextKeymap_NormalArgs(Params_AlignTextKeymap args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_OnEnable
        {
            public FixVerticalAlign self;
        }

        public sealed class Params_Start
        {
            public FixVerticalAlign self;
        }

        public sealed class Params_AlignText
        {
            public FixVerticalAlign self;
        }

        public sealed class Params_AlignTextKeymap
        {
            public FixVerticalAlign self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.AlignText_BeforeArgs AlignText
        {
            add
            {
                HookHandler._beforeAlignText += value;
                HookHandler.HookAlignText();
            }
            remove => HookHandler._beforeAlignText -= value;
        }

        public static event Delegates.AlignTextKeymap_BeforeArgs AlignTextKeymap
        {
            add
            {
                HookHandler._beforeAlignTextKeymap += value;
                HookHandler.HookAlignTextKeymap();
            }
            remove => HookHandler._beforeAlignTextKeymap -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.AlignText_NormalArgs AlignText
        {
            add
            {
                HookHandler._afterAlignText += value;
                HookHandler.HookAlignText();
            }
            remove => HookHandler._afterAlignText -= value;
        }

        public static event Delegates.AlignTextKeymap_NormalArgs AlignTextKeymap
        {
            add
            {
                HookHandler._afterAlignTextKeymap += value;
                HookHandler.HookAlignTextKeymap();
            }
            remove => HookHandler._afterAlignTextKeymap -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.FixVerticalAlign.hook_OnEnable OnEnable
        {
            add => On.FixVerticalAlign.OnEnable += value;
            remove => On.FixVerticalAlign.OnEnable -= value;
        }

        public static event On.FixVerticalAlign.hook_Start Start
        {
            add => On.FixVerticalAlign.Start += value;
            remove => On.FixVerticalAlign.Start -= value;
        }

        public static event On.FixVerticalAlign.hook_AlignText AlignText
        {
            add => On.FixVerticalAlign.AlignText += value;
            remove => On.FixVerticalAlign.AlignText -= value;
        }

        public static event On.FixVerticalAlign.hook_AlignTextKeymap AlignTextKeymap
        {
            add => On.FixVerticalAlign.AlignTextKeymap += value;
            remove => On.FixVerticalAlign.AlignTextKeymap -= value;
        }
    }
}