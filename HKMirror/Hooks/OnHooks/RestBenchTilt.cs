namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for RestBenchTilt class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnRestBenchTilt
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookGetTilt()
        {
            if (!HookedList.Contains("GetTilt"))
            {
                HookedList.Add("GetTilt");
                On.RestBenchTilt.GetTilt += GetTilt;
            }
        }

        internal static event Delegates.GetTilt_BeforeArgs _beforeGetTilt;
        internal static event Delegates.GetTilt_AfterArgs _afterGetTilt;

        private static float GetTilt(On.RestBenchTilt.orig_GetTilt orig, RestBenchTilt self)
        {
            Delegates.Params_GetTilt @params = new()
            {
                self = self
            };
            if (_beforeGetTilt != null)
                foreach (Delegates.GetTilt_BeforeArgs toInvoke in _beforeGetTilt.GetInvocationList())
                    try
                    {
                        _beforeGetTilt?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetTilt != null)
                foreach (Delegates.GetTilt_AfterArgs toInvoke in _afterGetTilt.GetInvocationList())
                    try
                    {
                        retVal = _afterGetTilt.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate float GetTilt_AfterArgs(Params_GetTilt args, float ret);

        public delegate void GetTilt_BeforeArgs(Params_GetTilt args);

        public delegate float GetTilt_WithArgs(Func<RestBenchTilt, float> orig, RestBenchTilt self);

        public sealed class Params_GetTilt
        {
            public RestBenchTilt self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.GetTilt_BeforeArgs GetTilt
        {
            add
            {
                HookHandler._beforeGetTilt += value;
                HookHandler.HookGetTilt();
            }
            remove => HookHandler._beforeGetTilt -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.GetTilt_AfterArgs GetTilt
        {
            add
            {
                HookHandler._afterGetTilt += value;
                HookHandler.HookGetTilt();
            }
            remove => HookHandler._afterGetTilt -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.RestBenchTilt.hook_GetTilt GetTilt
        {
            add => On.RestBenchTilt.GetTilt += value;
            remove => On.RestBenchTilt.GetTilt -= value;
        }
    }
}