using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for BossStatueTrophyPlaque class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBossStatueTrophyPlaque
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookTierCompleteEffectDelayed()
{
if (!HookedList.Contains("TierCompleteEffectDelayed"))
{
HookedList.Add("TierCompleteEffectDelayed");
On.BossStatueTrophyPlaque.TierCompleteEffectDelayed += TierCompleteEffectDelayed;

}
}
internal static event Delegates.TierCompleteEffectDelayed_BeforeArgs _beforeTierCompleteEffectDelayed;
private static System.Collections.IEnumerator TierCompleteEffectDelayed(On.BossStatueTrophyPlaque.orig_TierCompleteEffectDelayed orig,BossStatueTrophyPlaque self)
{
Delegates.Params_TierCompleteEffectDelayed @params = new() 
{
self = self
};
if (_beforeTierCompleteEffectDelayed != null)
{
foreach (Delegates.TierCompleteEffectDelayed_BeforeArgs toInvoke in _beforeTierCompleteEffectDelayed.GetInvocationList())
{
try
{
_beforeTierCompleteEffectDelayed?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_TierCompleteEffectDelayed
{
public BossStatueTrophyPlaque self;
}
public delegate void TierCompleteEffectDelayed_BeforeArgs(Params_TierCompleteEffectDelayed args);
public delegate System.Collections.IEnumerator TierCompleteEffectDelayed_AfterArgs(Params_TierCompleteEffectDelayed args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator TierCompleteEffectDelayed_WithArgs (Func<BossStatueTrophyPlaque, System.Collections.IEnumerator> orig, BossStatueTrophyPlaque self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.TierCompleteEffectDelayed_BeforeArgs TierCompleteEffectDelayed
{
add
{

HookHandler._beforeTierCompleteEffectDelayed += value;
HookHandler.HookTierCompleteEffectDelayed();
}
remove => HookHandler._beforeTierCompleteEffectDelayed -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.BossStatueTrophyPlaque.hook_TierCompleteEffectDelayed TierCompleteEffectDelayed
{
add => On.BossStatueTrophyPlaque.TierCompleteEffectDelayed += value;
remove => On.BossStatueTrophyPlaque.TierCompleteEffectDelayed -= value;
}
}

}
