namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ConveyorBelt class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnConveyorBelt
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnCollisionEnter2D()
        {
            if (!HookedList.Contains("OnCollisionEnter2D"))
            {
                HookedList.Add("OnCollisionEnter2D");
                On.ConveyorBelt.OnCollisionEnter2D += OnCollisionEnter2D;
            }
        }

        internal static event Delegates.OnCollisionEnter2D_BeforeArgs _beforeOnCollisionEnter2D;
        internal static event Delegates.OnCollisionEnter2D_NormalArgs _afterOnCollisionEnter2D;

        private static void OnCollisionEnter2D(On.ConveyorBelt.orig_OnCollisionEnter2D orig, ConveyorBelt self,
            Collision2D collision)
        {
            Delegates.Params_OnCollisionEnter2D @params = new()
            {
                self = self, collision = collision
            };
            _beforeOnCollisionEnter2D?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnCollisionEnter2D != null) _afterOnCollisionEnter2D.Invoke(@params);
        }

        internal static void HookOnCollisionExit2D()
        {
            if (!HookedList.Contains("OnCollisionExit2D"))
            {
                HookedList.Add("OnCollisionExit2D");
                On.ConveyorBelt.OnCollisionExit2D += OnCollisionExit2D;
            }
        }

        internal static event Delegates.OnCollisionExit2D_BeforeArgs _beforeOnCollisionExit2D;
        internal static event Delegates.OnCollisionExit2D_NormalArgs _afterOnCollisionExit2D;

        private static void OnCollisionExit2D(On.ConveyorBelt.orig_OnCollisionExit2D orig, ConveyorBelt self,
            Collision2D collision)
        {
            Delegates.Params_OnCollisionExit2D @params = new()
            {
                self = self, collision = collision
            };
            _beforeOnCollisionExit2D?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnCollisionExit2D != null) _afterOnCollisionExit2D.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void OnCollisionEnter2D_BeforeArgs(Params_OnCollisionEnter2D args);

        public delegate void OnCollisionEnter2D_NormalArgs(Params_OnCollisionEnter2D args);

        public delegate void OnCollisionExit2D_BeforeArgs(Params_OnCollisionExit2D args);

        public delegate void OnCollisionExit2D_NormalArgs(Params_OnCollisionExit2D args);

        public sealed class Params_OnCollisionEnter2D
        {
            public Collision2D collision;
            public ConveyorBelt self;
        }

        public sealed class Params_OnCollisionExit2D
        {
            public Collision2D collision;
            public ConveyorBelt self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnCollisionEnter2D_BeforeArgs OnCollisionEnter2D
        {
            add
            {
                HookHandler._beforeOnCollisionEnter2D += value;
                HookHandler.HookOnCollisionEnter2D();
            }
            remove => HookHandler._beforeOnCollisionEnter2D -= value;
        }

        public static event Delegates.OnCollisionExit2D_BeforeArgs OnCollisionExit2D
        {
            add
            {
                HookHandler._beforeOnCollisionExit2D += value;
                HookHandler.HookOnCollisionExit2D();
            }
            remove => HookHandler._beforeOnCollisionExit2D -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnCollisionEnter2D_NormalArgs OnCollisionEnter2D
        {
            add
            {
                HookHandler._afterOnCollisionEnter2D += value;
                HookHandler.HookOnCollisionEnter2D();
            }
            remove => HookHandler._afterOnCollisionEnter2D -= value;
        }

        public static event Delegates.OnCollisionExit2D_NormalArgs OnCollisionExit2D
        {
            add
            {
                HookHandler._afterOnCollisionExit2D += value;
                HookHandler.HookOnCollisionExit2D();
            }
            remove => HookHandler._afterOnCollisionExit2D -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.ConveyorBelt.hook_OnCollisionEnter2D OnCollisionEnter2D
        {
            add => On.ConveyorBelt.OnCollisionEnter2D += value;
            remove => On.ConveyorBelt.OnCollisionEnter2D -= value;
        }

        public static event On.ConveyorBelt.hook_OnCollisionExit2D OnCollisionExit2D
        {
            add => On.ConveyorBelt.OnCollisionExit2D += value;
            remove => On.ConveyorBelt.OnCollisionExit2D -= value;
        }
    }
}