using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for GameCameras class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGameCameras
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_sceneParticles()
        {
            if (!HookedList.Contains("get_sceneParticles"))
            {
                HookedList.Add("get_sceneParticles");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameCameras), "get_sceneParticles", true),
                    get_sceneParticles);
            }
        }

        internal static event Delegates.get_sceneParticles_BeforeArgs _beforeget_sceneParticles;
        internal static event Delegates.get_sceneParticles_AfterArgs _afterget_sceneParticles;

        private static SceneParticlesController get_sceneParticles(Func<GameCameras, SceneParticlesController> orig,
            GameCameras self)
        {
            Delegates.Params_get_sceneParticles @params = new()
            {
                self = self
            };
            if (_beforeget_sceneParticles != null)
            {
                foreach (Delegates.get_sceneParticles_BeforeArgs toInvoke in
                         _beforeget_sceneParticles.GetInvocationList())
                {
                    try
                    {
                        _beforeget_sceneParticles?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_sceneParticles != null)
            {
                foreach (Delegates.get_sceneParticles_AfterArgs toInvoke in
                         _afterget_sceneParticles.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_sceneParticles.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_sceneParticles()
        {
            if (!HookedList.Contains("set_sceneParticles"))
            {
                HookedList.Add("set_sceneParticles");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameCameras), "set_sceneParticles", true),
                    set_sceneParticles);
            }
        }

        internal static event Delegates.set_sceneParticles_BeforeArgs _beforeset_sceneParticles;
        internal static event Delegates.set_sceneParticles_AfterArgs _afterset_sceneParticles;

        private static void set_sceneParticles(Action<GameCameras, SceneParticlesController> orig, GameCameras self,
            SceneParticlesController value)
        {
            Delegates.Params_set_sceneParticles @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_sceneParticles != null)
            {
                foreach (Delegates.set_sceneParticles_BeforeArgs toInvoke in
                         _beforeset_sceneParticles.GetInvocationList())
                {
                    try
                    {
                        _beforeset_sceneParticles?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_sceneParticles != null)
            {
                foreach (Delegates.set_sceneParticles_AfterArgs toInvoke in
                         _afterset_sceneParticles.GetInvocationList())
                {
                    try
                    {
                        _afterset_sceneParticles.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_instance()
        {
            if (!HookedList.Contains("get_instance"))
            {
                HookedList.Add("get_instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameCameras), "get_instance", false), get_instance);
            }
        }

        internal static event Delegates.get_instance_BeforeArgs _beforeget_instance;
        internal static event Delegates.get_instance_AfterArgs _afterget_instance;

        private static GameCameras get_instance(Func<GameCameras> orig)
        {
            if (_beforeget_instance != null)
            {
                foreach (Delegates.get_instance_BeforeArgs toInvoke in _beforeget_instance.GetInvocationList())
                {
                    try
                    {
                        _beforeget_instance?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            var retVal = orig();
            if (_afterget_instance != null)
            {
                foreach (Delegates.get_instance_AfterArgs toInvoke in _afterget_instance.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_instance.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.GameCameras.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.GameCameras.orig_Awake orig, GameCameras self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
            {
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                {
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
            {
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                {
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.GameCameras.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.GameCameras.orig_Start orig, GameCameras self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSceneInit()
        {
            if (!HookedList.Contains("SceneInit"))
            {
                HookedList.Add("SceneInit");
                On.GameCameras.SceneInit += SceneInit;
            }
        }

        internal static event Delegates.SceneInit_BeforeArgs _beforeSceneInit;
        internal static event Delegates.SceneInit_AfterArgs _afterSceneInit;

        private static void SceneInit(On.GameCameras.orig_SceneInit orig, GameCameras self)
        {
            Delegates.Params_SceneInit @params = new()
            {
                self = self
            };
            if (_beforeSceneInit != null)
            {
                foreach (Delegates.SceneInit_BeforeArgs toInvoke in _beforeSceneInit.GetInvocationList())
                {
                    try
                    {
                        _beforeSceneInit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterSceneInit != null)
            {
                foreach (Delegates.SceneInit_AfterArgs toInvoke in _afterSceneInit.GetInvocationList())
                {
                    try
                    {
                        _afterSceneInit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.GameCameras.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_AfterArgs _afterOnDestroy;

        private static void OnDestroy(On.GameCameras.orig_OnDestroy orig, GameCameras self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            if (_beforeOnDestroy != null)
            {
                foreach (Delegates.OnDestroy_BeforeArgs toInvoke in _beforeOnDestroy.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDestroy?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null)
            {
                foreach (Delegates.OnDestroy_AfterArgs toInvoke in _afterOnDestroy.GetInvocationList())
                {
                    try
                    {
                        _afterOnDestroy.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetupGameRefs()
        {
            if (!HookedList.Contains("SetupGameRefs"))
            {
                HookedList.Add("SetupGameRefs");
                On.GameCameras.SetupGameRefs += SetupGameRefs;
            }
        }

        internal static event Delegates.SetupGameRefs_BeforeArgs _beforeSetupGameRefs;
        internal static event Delegates.SetupGameRefs_AfterArgs _afterSetupGameRefs;

        private static void SetupGameRefs(On.GameCameras.orig_SetupGameRefs orig, GameCameras self)
        {
            Delegates.Params_SetupGameRefs @params = new()
            {
                self = self
            };
            if (_beforeSetupGameRefs != null)
            {
                foreach (Delegates.SetupGameRefs_BeforeArgs toInvoke in _beforeSetupGameRefs.GetInvocationList())
                {
                    try
                    {
                        _beforeSetupGameRefs?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterSetupGameRefs != null)
            {
                foreach (Delegates.SetupGameRefs_AfterArgs toInvoke in _afterSetupGameRefs.GetInvocationList())
                {
                    try
                    {
                        _afterSetupGameRefs.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStartScene()
        {
            if (!HookedList.Contains("StartScene"))
            {
                HookedList.Add("StartScene");
                On.GameCameras.StartScene += StartScene;
            }
        }

        internal static event Delegates.StartScene_BeforeArgs _beforeStartScene;
        internal static event Delegates.StartScene_AfterArgs _afterStartScene;

        private static void StartScene(On.GameCameras.orig_StartScene orig, GameCameras self)
        {
            Delegates.Params_StartScene @params = new()
            {
                self = self
            };
            if (_beforeStartScene != null)
            {
                foreach (Delegates.StartScene_BeforeArgs toInvoke in _beforeStartScene.GetInvocationList())
                {
                    try
                    {
                        _beforeStartScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStartScene != null)
            {
                foreach (Delegates.StartScene_AfterArgs toInvoke in _afterStartScene.GetInvocationList())
                {
                    try
                    {
                        _afterStartScene.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookMoveMenuToHUDCamera()
        {
            if (!HookedList.Contains("MoveMenuToHUDCamera"))
            {
                HookedList.Add("MoveMenuToHUDCamera");
                On.GameCameras.MoveMenuToHUDCamera += MoveMenuToHUDCamera;
            }
        }

        internal static event Delegates.MoveMenuToHUDCamera_BeforeArgs _beforeMoveMenuToHUDCamera;
        internal static event Delegates.MoveMenuToHUDCamera_AfterArgs _afterMoveMenuToHUDCamera;

        private static void MoveMenuToHUDCamera(On.GameCameras.orig_MoveMenuToHUDCamera orig, GameCameras self)
        {
            Delegates.Params_MoveMenuToHUDCamera @params = new()
            {
                self = self
            };
            if (_beforeMoveMenuToHUDCamera != null)
            {
                foreach (Delegates.MoveMenuToHUDCamera_BeforeArgs toInvoke in _beforeMoveMenuToHUDCamera
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeMoveMenuToHUDCamera?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterMoveMenuToHUDCamera != null)
            {
                foreach (Delegates.MoveMenuToHUDCamera_AfterArgs toInvoke in
                         _afterMoveMenuToHUDCamera.GetInvocationList())
                {
                    try
                    {
                        _afterMoveMenuToHUDCamera.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDisableHUDCamIfAllowed()
        {
            if (!HookedList.Contains("DisableHUDCamIfAllowed"))
            {
                HookedList.Add("DisableHUDCamIfAllowed");
                On.GameCameras.DisableHUDCamIfAllowed += DisableHUDCamIfAllowed;
            }
        }

        internal static event Delegates.DisableHUDCamIfAllowed_BeforeArgs _beforeDisableHUDCamIfAllowed;
        internal static event Delegates.DisableHUDCamIfAllowed_AfterArgs _afterDisableHUDCamIfAllowed;

        private static void DisableHUDCamIfAllowed(On.GameCameras.orig_DisableHUDCamIfAllowed orig, GameCameras self)
        {
            Delegates.Params_DisableHUDCamIfAllowed @params = new()
            {
                self = self
            };
            if (_beforeDisableHUDCamIfAllowed != null)
            {
                foreach (Delegates.DisableHUDCamIfAllowed_BeforeArgs toInvoke in _beforeDisableHUDCamIfAllowed
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeDisableHUDCamIfAllowed?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterDisableHUDCamIfAllowed != null)
            {
                foreach (Delegates.DisableHUDCamIfAllowed_AfterArgs toInvoke in _afterDisableHUDCamIfAllowed
                             .GetInvocationList())
                {
                    try
                    {
                        _afterDisableHUDCamIfAllowed.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStopCameraShake()
        {
            if (!HookedList.Contains("StopCameraShake"))
            {
                HookedList.Add("StopCameraShake");
                On.GameCameras.StopCameraShake += StopCameraShake;
            }
        }

        internal static event Delegates.StopCameraShake_BeforeArgs _beforeStopCameraShake;
        internal static event Delegates.StopCameraShake_AfterArgs _afterStopCameraShake;

        private static void StopCameraShake(On.GameCameras.orig_StopCameraShake orig, GameCameras self)
        {
            Delegates.Params_StopCameraShake @params = new()
            {
                self = self
            };
            if (_beforeStopCameraShake != null)
            {
                foreach (Delegates.StopCameraShake_BeforeArgs toInvoke in _beforeStopCameraShake.GetInvocationList())
                {
                    try
                    {
                        _beforeStopCameraShake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStopCameraShake != null)
            {
                foreach (Delegates.StopCameraShake_AfterArgs toInvoke in _afterStopCameraShake.GetInvocationList())
                {
                    try
                    {
                        _afterStopCameraShake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookResumeCameraShake()
        {
            if (!HookedList.Contains("ResumeCameraShake"))
            {
                HookedList.Add("ResumeCameraShake");
                On.GameCameras.ResumeCameraShake += ResumeCameraShake;
            }
        }

        internal static event Delegates.ResumeCameraShake_BeforeArgs _beforeResumeCameraShake;
        internal static event Delegates.ResumeCameraShake_AfterArgs _afterResumeCameraShake;

        private static void ResumeCameraShake(On.GameCameras.orig_ResumeCameraShake orig, GameCameras self)
        {
            Delegates.Params_ResumeCameraShake @params = new()
            {
                self = self
            };
            if (_beforeResumeCameraShake != null)
            {
                foreach (Delegates.ResumeCameraShake_BeforeArgs toInvoke in
                         _beforeResumeCameraShake.GetInvocationList())
                {
                    try
                    {
                        _beforeResumeCameraShake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterResumeCameraShake != null)
            {
                foreach (Delegates.ResumeCameraShake_AfterArgs toInvoke in _afterResumeCameraShake.GetInvocationList())
                {
                    try
                    {
                        _afterResumeCameraShake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDisableImageEffects()
        {
            if (!HookedList.Contains("DisableImageEffects"))
            {
                HookedList.Add("DisableImageEffects");
                On.GameCameras.DisableImageEffects += DisableImageEffects;
            }
        }

        internal static event Delegates.DisableImageEffects_BeforeArgs _beforeDisableImageEffects;
        internal static event Delegates.DisableImageEffects_AfterArgs _afterDisableImageEffects;

        private static void DisableImageEffects(On.GameCameras.orig_DisableImageEffects orig, GameCameras self)
        {
            Delegates.Params_DisableImageEffects @params = new()
            {
                self = self
            };
            if (_beforeDisableImageEffects != null)
            {
                foreach (Delegates.DisableImageEffects_BeforeArgs toInvoke in _beforeDisableImageEffects
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeDisableImageEffects?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterDisableImageEffects != null)
            {
                foreach (Delegates.DisableImageEffects_AfterArgs toInvoke in
                         _afterDisableImageEffects.GetInvocationList())
                {
                    try
                    {
                        _afterDisableImageEffects.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookEnableImageEffects()
        {
            if (!HookedList.Contains("EnableImageEffects"))
            {
                HookedList.Add("EnableImageEffects");
                On.GameCameras.EnableImageEffects += EnableImageEffects;
            }
        }

        internal static event Delegates.EnableImageEffects_BeforeArgs _beforeEnableImageEffects;
        internal static event Delegates.EnableImageEffects_AfterArgs _afterEnableImageEffects;

        private static void EnableImageEffects(On.GameCameras.orig_EnableImageEffects orig, GameCameras self,
            bool isGameplayLevel, bool isBloomForced)
        {
            Delegates.Params_EnableImageEffects @params = new()
            {
                self = self, isGameplayLevel = isGameplayLevel, isBloomForced = isBloomForced
            };
            if (_beforeEnableImageEffects != null)
            {
                foreach (Delegates.EnableImageEffects_BeforeArgs toInvoke in
                         _beforeEnableImageEffects.GetInvocationList())
                {
                    try
                    {
                        _beforeEnableImageEffects?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            isGameplayLevel = @params.isGameplayLevel;
            isBloomForced = @params.isBloomForced;
            orig(self, isGameplayLevel, isBloomForced);
            if (_afterEnableImageEffects != null)
            {
                foreach (Delegates.EnableImageEffects_AfterArgs toInvoke in
                         _afterEnableImageEffects.GetInvocationList())
                {
                    try
                    {
                        _afterEnableImageEffects.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetOverscan()
        {
            if (!HookedList.Contains("SetOverscan"))
            {
                HookedList.Add("SetOverscan");
                On.GameCameras.SetOverscan += SetOverscan;
            }
        }

        internal static event Delegates.SetOverscan_BeforeArgs _beforeSetOverscan;
        internal static event Delegates.SetOverscan_AfterArgs _afterSetOverscan;

        private static void SetOverscan(On.GameCameras.orig_SetOverscan orig, GameCameras self, float value)
        {
            Delegates.Params_SetOverscan @params = new()
            {
                self = self, value = value
            };
            if (_beforeSetOverscan != null)
            {
                foreach (Delegates.SetOverscan_BeforeArgs toInvoke in _beforeSetOverscan.GetInvocationList())
                {
                    try
                    {
                        _beforeSetOverscan?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterSetOverscan != null)
            {
                foreach (Delegates.SetOverscan_AfterArgs toInvoke in _afterSetOverscan.GetInvocationList())
                {
                    try
                    {
                        _afterSetOverscan.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookTestParentForPosition()
        {
            if (!HookedList.Contains("TestParentForPosition"))
            {
                HookedList.Add("TestParentForPosition");
                On.GameCameras.TestParentForPosition += TestParentForPosition;
            }
        }

        internal static event Delegates.TestParentForPosition_BeforeArgs _beforeTestParentForPosition;
        internal static event Delegates.TestParentForPosition_AfterArgs _afterTestParentForPosition;

        private static void TestParentForPosition(On.GameCameras.orig_TestParentForPosition orig, GameCameras self)
        {
            Delegates.Params_TestParentForPosition @params = new()
            {
                self = self
            };
            if (_beforeTestParentForPosition != null)
            {
                foreach (Delegates.TestParentForPosition_BeforeArgs toInvoke in _beforeTestParentForPosition
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeTestParentForPosition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterTestParentForPosition != null)
            {
                foreach (Delegates.TestParentForPosition_AfterArgs toInvoke in _afterTestParentForPosition
                             .GetInvocationList())
                {
                    try
                    {
                        _afterTestParentForPosition.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookorig_get_instance()
        {
            if (!HookedList.Contains("orig_get_instance"))
            {
                HookedList.Add("orig_get_instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameCameras), "orig_get_instance", false),
                    orig_get_instance);
            }
        }

        internal static event Delegates.orig_get_instance_BeforeArgs _beforeorig_get_instance;
        internal static event Delegates.orig_get_instance_AfterArgs _afterorig_get_instance;

        private static GameCameras orig_get_instance(Func<GameCameras> orig)
        {
            if (_beforeorig_get_instance != null)
            {
                foreach (Delegates.orig_get_instance_BeforeArgs toInvoke in
                         _beforeorig_get_instance.GetInvocationList())
                {
                    try
                    {
                        _beforeorig_get_instance?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            var retVal = orig();
            if (_afterorig_get_instance != null)
            {
                foreach (Delegates.orig_get_instance_AfterArgs toInvoke in _afterorig_get_instance.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterorig_get_instance.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_sceneParticles
        {
            public GameCameras self;
        }

        public delegate void get_sceneParticles_BeforeArgs(Params_get_sceneParticles args);

        public delegate SceneParticlesController get_sceneParticles_AfterArgs(Params_get_sceneParticles args,
            SceneParticlesController ret);

        public delegate SceneParticlesController get_sceneParticles_WithArgs(
            Func<GameCameras, SceneParticlesController> orig, GameCameras self);

        public sealed class Params_set_sceneParticles
        {
            public GameCameras self;
            public SceneParticlesController value;
        }

        public delegate void set_sceneParticles_BeforeArgs(Params_set_sceneParticles args);

        public delegate void set_sceneParticles_AfterArgs(Params_set_sceneParticles args);

        public delegate void set_sceneParticles_WithArgs(Action<GameCameras, SceneParticlesController> orig,
            GameCameras self, SceneParticlesController value);

        public delegate void get_instance_BeforeArgs();

        public delegate GameCameras get_instance_AfterArgs(GameCameras ret);

        public delegate GameCameras get_instance_WithArgs(Func<GameCameras> orig);

        public sealed class Params_Awake
        {
            public GameCameras self;
        }

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<GameCameras> orig, GameCameras self);

        public sealed class Params_Start
        {
            public GameCameras self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<GameCameras> orig, GameCameras self);

        public sealed class Params_SceneInit
        {
            public GameCameras self;
        }

        public delegate void SceneInit_BeforeArgs(Params_SceneInit args);

        public delegate void SceneInit_AfterArgs(Params_SceneInit args);

        public delegate void SceneInit_WithArgs(Action<GameCameras> orig, GameCameras self);

        public sealed class Params_OnDestroy
        {
            public GameCameras self;
        }

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_AfterArgs(Params_OnDestroy args);

        public delegate void OnDestroy_WithArgs(Action<GameCameras> orig, GameCameras self);

        public sealed class Params_SetupGameRefs
        {
            public GameCameras self;
        }

        public delegate void SetupGameRefs_BeforeArgs(Params_SetupGameRefs args);

        public delegate void SetupGameRefs_AfterArgs(Params_SetupGameRefs args);

        public delegate void SetupGameRefs_WithArgs(Action<GameCameras> orig, GameCameras self);

        public sealed class Params_StartScene
        {
            public GameCameras self;
        }

        public delegate void StartScene_BeforeArgs(Params_StartScene args);

        public delegate void StartScene_AfterArgs(Params_StartScene args);

        public delegate void StartScene_WithArgs(Action<GameCameras> orig, GameCameras self);

        public sealed class Params_MoveMenuToHUDCamera
        {
            public GameCameras self;
        }

        public delegate void MoveMenuToHUDCamera_BeforeArgs(Params_MoveMenuToHUDCamera args);

        public delegate void MoveMenuToHUDCamera_AfterArgs(Params_MoveMenuToHUDCamera args);

        public delegate void MoveMenuToHUDCamera_WithArgs(Action<GameCameras> orig, GameCameras self);

        public sealed class Params_DisableHUDCamIfAllowed
        {
            public GameCameras self;
        }

        public delegate void DisableHUDCamIfAllowed_BeforeArgs(Params_DisableHUDCamIfAllowed args);

        public delegate void DisableHUDCamIfAllowed_AfterArgs(Params_DisableHUDCamIfAllowed args);

        public delegate void DisableHUDCamIfAllowed_WithArgs(Action<GameCameras> orig, GameCameras self);

        public sealed class Params_StopCameraShake
        {
            public GameCameras self;
        }

        public delegate void StopCameraShake_BeforeArgs(Params_StopCameraShake args);

        public delegate void StopCameraShake_AfterArgs(Params_StopCameraShake args);

        public delegate void StopCameraShake_WithArgs(Action<GameCameras> orig, GameCameras self);

        public sealed class Params_ResumeCameraShake
        {
            public GameCameras self;
        }

        public delegate void ResumeCameraShake_BeforeArgs(Params_ResumeCameraShake args);

        public delegate void ResumeCameraShake_AfterArgs(Params_ResumeCameraShake args);

        public delegate void ResumeCameraShake_WithArgs(Action<GameCameras> orig, GameCameras self);

        public sealed class Params_DisableImageEffects
        {
            public GameCameras self;
        }

        public delegate void DisableImageEffects_BeforeArgs(Params_DisableImageEffects args);

        public delegate void DisableImageEffects_AfterArgs(Params_DisableImageEffects args);

        public delegate void DisableImageEffects_WithArgs(Action<GameCameras> orig, GameCameras self);

        public sealed class Params_EnableImageEffects
        {
            public GameCameras self;
            public bool isGameplayLevel;
            public bool isBloomForced;
        }

        public delegate void EnableImageEffects_BeforeArgs(Params_EnableImageEffects args);

        public delegate void EnableImageEffects_AfterArgs(Params_EnableImageEffects args);

        public delegate void EnableImageEffects_WithArgs(Action<GameCameras, bool, bool> orig, GameCameras self,
            bool isGameplayLevel, bool isBloomForced);

        public sealed class Params_SetOverscan
        {
            public GameCameras self;
            public float value;
        }

        public delegate void SetOverscan_BeforeArgs(Params_SetOverscan args);

        public delegate void SetOverscan_AfterArgs(Params_SetOverscan args);

        public delegate void SetOverscan_WithArgs(Action<GameCameras, float> orig, GameCameras self, float value);

        public sealed class Params_TestParentForPosition
        {
            public GameCameras self;
        }

        public delegate void TestParentForPosition_BeforeArgs(Params_TestParentForPosition args);

        public delegate void TestParentForPosition_AfterArgs(Params_TestParentForPosition args);

        public delegate void TestParentForPosition_WithArgs(Action<GameCameras> orig, GameCameras self);

        public delegate void orig_get_instance_BeforeArgs();

        public delegate GameCameras orig_get_instance_AfterArgs(GameCameras ret);

        public delegate GameCameras orig_get_instance_WithArgs(Func<GameCameras> orig);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_sceneParticles_BeforeArgs get_sceneParticles
        {
            add
            {
                HookHandler._beforeget_sceneParticles += value;
                HookHandler.Hookget_sceneParticles();
            }
            remove => HookHandler._beforeget_sceneParticles -= value;
        }

        public static event Delegates.set_sceneParticles_BeforeArgs set_sceneParticles
        {
            add
            {
                HookHandler._beforeset_sceneParticles += value;
                HookHandler.Hookset_sceneParticles();
            }
            remove => HookHandler._beforeset_sceneParticles -= value;
        }

        public static event Delegates.get_instance_BeforeArgs get_instance
        {
            add
            {
                HookHandler._beforeget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._beforeget_instance -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.SceneInit_BeforeArgs SceneInit
        {
            add
            {
                HookHandler._beforeSceneInit += value;
                HookHandler.HookSceneInit();
            }
            remove => HookHandler._beforeSceneInit -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.SetupGameRefs_BeforeArgs SetupGameRefs
        {
            add
            {
                HookHandler._beforeSetupGameRefs += value;
                HookHandler.HookSetupGameRefs();
            }
            remove => HookHandler._beforeSetupGameRefs -= value;
        }

        public static event Delegates.StartScene_BeforeArgs StartScene
        {
            add
            {
                HookHandler._beforeStartScene += value;
                HookHandler.HookStartScene();
            }
            remove => HookHandler._beforeStartScene -= value;
        }

        public static event Delegates.MoveMenuToHUDCamera_BeforeArgs MoveMenuToHUDCamera
        {
            add
            {
                HookHandler._beforeMoveMenuToHUDCamera += value;
                HookHandler.HookMoveMenuToHUDCamera();
            }
            remove => HookHandler._beforeMoveMenuToHUDCamera -= value;
        }

        public static event Delegates.DisableHUDCamIfAllowed_BeforeArgs DisableHUDCamIfAllowed
        {
            add
            {
                HookHandler._beforeDisableHUDCamIfAllowed += value;
                HookHandler.HookDisableHUDCamIfAllowed();
            }
            remove => HookHandler._beforeDisableHUDCamIfAllowed -= value;
        }

        public static event Delegates.StopCameraShake_BeforeArgs StopCameraShake
        {
            add
            {
                HookHandler._beforeStopCameraShake += value;
                HookHandler.HookStopCameraShake();
            }
            remove => HookHandler._beforeStopCameraShake -= value;
        }

        public static event Delegates.ResumeCameraShake_BeforeArgs ResumeCameraShake
        {
            add
            {
                HookHandler._beforeResumeCameraShake += value;
                HookHandler.HookResumeCameraShake();
            }
            remove => HookHandler._beforeResumeCameraShake -= value;
        }

        public static event Delegates.DisableImageEffects_BeforeArgs DisableImageEffects
        {
            add
            {
                HookHandler._beforeDisableImageEffects += value;
                HookHandler.HookDisableImageEffects();
            }
            remove => HookHandler._beforeDisableImageEffects -= value;
        }

        public static event Delegates.EnableImageEffects_BeforeArgs EnableImageEffects
        {
            add
            {
                HookHandler._beforeEnableImageEffects += value;
                HookHandler.HookEnableImageEffects();
            }
            remove => HookHandler._beforeEnableImageEffects -= value;
        }

        public static event Delegates.SetOverscan_BeforeArgs SetOverscan
        {
            add
            {
                HookHandler._beforeSetOverscan += value;
                HookHandler.HookSetOverscan();
            }
            remove => HookHandler._beforeSetOverscan -= value;
        }

        public static event Delegates.TestParentForPosition_BeforeArgs TestParentForPosition
        {
            add
            {
                HookHandler._beforeTestParentForPosition += value;
                HookHandler.HookTestParentForPosition();
            }
            remove => HookHandler._beforeTestParentForPosition -= value;
        }

        public static event Delegates.orig_get_instance_BeforeArgs orig_get_instance
        {
            add
            {
                HookHandler._beforeorig_get_instance += value;
                HookHandler.Hookorig_get_instance();
            }
            remove => HookHandler._beforeorig_get_instance -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_sceneParticles_AfterArgs get_sceneParticles
        {
            add
            {
                HookHandler._afterget_sceneParticles += value;
                HookHandler.Hookget_sceneParticles();
            }
            remove => HookHandler._afterget_sceneParticles -= value;
        }

        public static event Delegates.set_sceneParticles_AfterArgs set_sceneParticles
        {
            add
            {
                HookHandler._afterset_sceneParticles += value;
                HookHandler.Hookset_sceneParticles();
            }
            remove => HookHandler._afterset_sceneParticles -= value;
        }

        public static event Delegates.get_instance_AfterArgs get_instance
        {
            add
            {
                HookHandler._afterget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._afterget_instance -= value;
        }

        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.SceneInit_AfterArgs SceneInit
        {
            add
            {
                HookHandler._afterSceneInit += value;
                HookHandler.HookSceneInit();
            }
            remove => HookHandler._afterSceneInit -= value;
        }

        public static event Delegates.OnDestroy_AfterArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.SetupGameRefs_AfterArgs SetupGameRefs
        {
            add
            {
                HookHandler._afterSetupGameRefs += value;
                HookHandler.HookSetupGameRefs();
            }
            remove => HookHandler._afterSetupGameRefs -= value;
        }

        public static event Delegates.StartScene_AfterArgs StartScene
        {
            add
            {
                HookHandler._afterStartScene += value;
                HookHandler.HookStartScene();
            }
            remove => HookHandler._afterStartScene -= value;
        }

        public static event Delegates.MoveMenuToHUDCamera_AfterArgs MoveMenuToHUDCamera
        {
            add
            {
                HookHandler._afterMoveMenuToHUDCamera += value;
                HookHandler.HookMoveMenuToHUDCamera();
            }
            remove => HookHandler._afterMoveMenuToHUDCamera -= value;
        }

        public static event Delegates.DisableHUDCamIfAllowed_AfterArgs DisableHUDCamIfAllowed
        {
            add
            {
                HookHandler._afterDisableHUDCamIfAllowed += value;
                HookHandler.HookDisableHUDCamIfAllowed();
            }
            remove => HookHandler._afterDisableHUDCamIfAllowed -= value;
        }

        public static event Delegates.StopCameraShake_AfterArgs StopCameraShake
        {
            add
            {
                HookHandler._afterStopCameraShake += value;
                HookHandler.HookStopCameraShake();
            }
            remove => HookHandler._afterStopCameraShake -= value;
        }

        public static event Delegates.ResumeCameraShake_AfterArgs ResumeCameraShake
        {
            add
            {
                HookHandler._afterResumeCameraShake += value;
                HookHandler.HookResumeCameraShake();
            }
            remove => HookHandler._afterResumeCameraShake -= value;
        }

        public static event Delegates.DisableImageEffects_AfterArgs DisableImageEffects
        {
            add
            {
                HookHandler._afterDisableImageEffects += value;
                HookHandler.HookDisableImageEffects();
            }
            remove => HookHandler._afterDisableImageEffects -= value;
        }

        public static event Delegates.EnableImageEffects_AfterArgs EnableImageEffects
        {
            add
            {
                HookHandler._afterEnableImageEffects += value;
                HookHandler.HookEnableImageEffects();
            }
            remove => HookHandler._afterEnableImageEffects -= value;
        }

        public static event Delegates.SetOverscan_AfterArgs SetOverscan
        {
            add
            {
                HookHandler._afterSetOverscan += value;
                HookHandler.HookSetOverscan();
            }
            remove => HookHandler._afterSetOverscan -= value;
        }

        public static event Delegates.TestParentForPosition_AfterArgs TestParentForPosition
        {
            add
            {
                HookHandler._afterTestParentForPosition += value;
                HookHandler.HookTestParentForPosition();
            }
            remove => HookHandler._afterTestParentForPosition -= value;
        }

        public static event Delegates.orig_get_instance_AfterArgs orig_get_instance
        {
            add
            {
                HookHandler._afterorig_get_instance += value;
                HookHandler.Hookorig_get_instance();
            }
            remove => HookHandler._afterorig_get_instance -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_sceneParticles_WithArgs get_sceneParticles
        {
            add => HookEndpointManager.Add<Delegates.get_sceneParticles_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameCameras), "get_sceneParticles", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_sceneParticles_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameCameras), "get_sceneParticles", true), value);
        }

        public static event Delegates.set_sceneParticles_WithArgs set_sceneParticles
        {
            add => HookEndpointManager.Add<Delegates.set_sceneParticles_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameCameras), "set_sceneParticles", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_sceneParticles_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameCameras), "set_sceneParticles", true), value);
        }

        public static event Delegates.get_instance_WithArgs get_instance
        {
            add => HookEndpointManager.Add<Delegates.get_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameCameras), "get_instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameCameras), "get_instance", false), value);
        }

        public static event On.GameCameras.hook_Awake Awake
        {
            add => On.GameCameras.Awake += value;
            remove => On.GameCameras.Awake -= value;
        }

        public static event On.GameCameras.hook_Start Start
        {
            add => On.GameCameras.Start += value;
            remove => On.GameCameras.Start -= value;
        }

        public static event On.GameCameras.hook_SceneInit SceneInit
        {
            add => On.GameCameras.SceneInit += value;
            remove => On.GameCameras.SceneInit -= value;
        }

        public static event On.GameCameras.hook_OnDestroy OnDestroy
        {
            add => On.GameCameras.OnDestroy += value;
            remove => On.GameCameras.OnDestroy -= value;
        }

        public static event On.GameCameras.hook_SetupGameRefs SetupGameRefs
        {
            add => On.GameCameras.SetupGameRefs += value;
            remove => On.GameCameras.SetupGameRefs -= value;
        }

        public static event On.GameCameras.hook_StartScene StartScene
        {
            add => On.GameCameras.StartScene += value;
            remove => On.GameCameras.StartScene -= value;
        }

        public static event On.GameCameras.hook_MoveMenuToHUDCamera MoveMenuToHUDCamera
        {
            add => On.GameCameras.MoveMenuToHUDCamera += value;
            remove => On.GameCameras.MoveMenuToHUDCamera -= value;
        }

        public static event On.GameCameras.hook_DisableHUDCamIfAllowed DisableHUDCamIfAllowed
        {
            add => On.GameCameras.DisableHUDCamIfAllowed += value;
            remove => On.GameCameras.DisableHUDCamIfAllowed -= value;
        }

        public static event On.GameCameras.hook_StopCameraShake StopCameraShake
        {
            add => On.GameCameras.StopCameraShake += value;
            remove => On.GameCameras.StopCameraShake -= value;
        }

        public static event On.GameCameras.hook_ResumeCameraShake ResumeCameraShake
        {
            add => On.GameCameras.ResumeCameraShake += value;
            remove => On.GameCameras.ResumeCameraShake -= value;
        }

        public static event On.GameCameras.hook_DisableImageEffects DisableImageEffects
        {
            add => On.GameCameras.DisableImageEffects += value;
            remove => On.GameCameras.DisableImageEffects -= value;
        }

        public static event On.GameCameras.hook_EnableImageEffects EnableImageEffects
        {
            add => On.GameCameras.EnableImageEffects += value;
            remove => On.GameCameras.EnableImageEffects -= value;
        }

        public static event On.GameCameras.hook_SetOverscan SetOverscan
        {
            add => On.GameCameras.SetOverscan += value;
            remove => On.GameCameras.SetOverscan -= value;
        }

        public static event On.GameCameras.hook_TestParentForPosition TestParentForPosition
        {
            add => On.GameCameras.TestParentForPosition += value;
            remove => On.GameCameras.TestParentForPosition -= value;
        }

        public static event Delegates.orig_get_instance_WithArgs orig_get_instance
        {
            add => HookEndpointManager.Add<Delegates.orig_get_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameCameras), "orig_get_instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.orig_get_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameCameras), "orig_get_instance", false), value);
        }
    }
}