using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GGGetTotalBindings class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGGGetTotalBindings
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_IntValue()
        {
            if (!HookedList.Contains("get_IntValue"))
            {
                HookedList.Add("get_IntValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GGGetTotalBindings), "get_IntValue"), get_IntValue);
            }
        }

        internal static event Delegates.get_IntValue_BeforeArgs _beforeget_IntValue;
        internal static event Delegates.get_IntValue_NormalArgs _afterget_IntValue;

        private static int get_IntValue(Func<GGGetTotalBindings, int> orig, GGGetTotalBindings self)
        {
            Delegates.Params_get_IntValue @params = new()
            {
                self = self
            };
            _beforeget_IntValue?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IntValue != null) retVal = _afterget_IntValue.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_IntValue_BeforeArgs(Params_get_IntValue args);

        public delegate int get_IntValue_NormalArgs(Params_get_IntValue args);

        public sealed class Params_get_IntValue
        {
            public GGGetTotalBindings self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_IntValue_BeforeArgs get_IntValue
        {
            add
            {
                HookHandler._beforeget_IntValue += value;
                HookHandler.Hookget_IntValue();
            }
            remove => HookHandler._beforeget_IntValue -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_IntValue_NormalArgs get_IntValue
        {
            add
            {
                HookHandler._afterget_IntValue += value;
                HookHandler.Hookget_IntValue();
            }
            remove => HookHandler._afterget_IntValue -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_IntValue_NormalArgs get_IntValue
        {
            add => HookEndpointManager.Add<Delegates.get_IntValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GGGetTotalBindings), "get_IntValue"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IntValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GGGetTotalBindings), "get_IntValue"), value);
        }
    }
}