using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dClippedSprite class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dClippedSprite
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_ClipRect()
        {
            if (!HookedList.Contains("get_ClipRect"))
            {
                HookedList.Add("get_ClipRect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "get_ClipRect"), get_ClipRect);
            }
        }

        internal static event Delegates.get_ClipRect_BeforeArgs _beforeget_ClipRect;
        internal static event Delegates.get_ClipRect_NormalArgs _afterget_ClipRect;

        private static Rect get_ClipRect(Func<tk2dClippedSprite, Rect> orig, tk2dClippedSprite self)
        {
            Delegates.Params_get_ClipRect @params = new()
            {
                self = self
            };
            _beforeget_ClipRect?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ClipRect != null) retVal = _afterget_ClipRect.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_ClipRect()
        {
            if (!HookedList.Contains("set_ClipRect"))
            {
                HookedList.Add("set_ClipRect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "set_ClipRect"), set_ClipRect);
            }
        }

        internal static event Delegates.set_ClipRect_BeforeArgs _beforeset_ClipRect;
        internal static event Delegates.set_ClipRect_NormalArgs _afterset_ClipRect;

        private static void set_ClipRect(Action<tk2dClippedSprite, Rect> orig, tk2dClippedSprite self, Rect value)
        {
            Delegates.Params_set_ClipRect @params = new()
            {
                self = self, value = value
            };
            _beforeset_ClipRect?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ClipRect != null) _afterset_ClipRect.Invoke(@params);
        }

        internal static void Hookget_clipBottomLeft()
        {
            if (!HookedList.Contains("get_clipBottomLeft"))
            {
                HookedList.Add("get_clipBottomLeft");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "get_clipBottomLeft"),
                    get_clipBottomLeft);
            }
        }

        internal static event Delegates.get_clipBottomLeft_BeforeArgs _beforeget_clipBottomLeft;
        internal static event Delegates.get_clipBottomLeft_NormalArgs _afterget_clipBottomLeft;

        private static Vector2 get_clipBottomLeft(Func<tk2dClippedSprite, Vector2> orig, tk2dClippedSprite self)
        {
            Delegates.Params_get_clipBottomLeft @params = new()
            {
                self = self
            };
            _beforeget_clipBottomLeft?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_clipBottomLeft != null) retVal = _afterget_clipBottomLeft.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_clipBottomLeft()
        {
            if (!HookedList.Contains("set_clipBottomLeft"))
            {
                HookedList.Add("set_clipBottomLeft");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "set_clipBottomLeft"),
                    set_clipBottomLeft);
            }
        }

        internal static event Delegates.set_clipBottomLeft_BeforeArgs _beforeset_clipBottomLeft;
        internal static event Delegates.set_clipBottomLeft_NormalArgs _afterset_clipBottomLeft;

        private static void set_clipBottomLeft(Action<tk2dClippedSprite, Vector2> orig, tk2dClippedSprite self,
            Vector2 value)
        {
            Delegates.Params_set_clipBottomLeft @params = new()
            {
                self = self, value = value
            };
            _beforeset_clipBottomLeft?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_clipBottomLeft != null) _afterset_clipBottomLeft.Invoke(@params);
        }

        internal static void Hookget_clipTopRight()
        {
            if (!HookedList.Contains("get_clipTopRight"))
            {
                HookedList.Add("get_clipTopRight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "get_clipTopRight"),
                    get_clipTopRight);
            }
        }

        internal static event Delegates.get_clipTopRight_BeforeArgs _beforeget_clipTopRight;
        internal static event Delegates.get_clipTopRight_NormalArgs _afterget_clipTopRight;

        private static Vector2 get_clipTopRight(Func<tk2dClippedSprite, Vector2> orig, tk2dClippedSprite self)
        {
            Delegates.Params_get_clipTopRight @params = new()
            {
                self = self
            };
            _beforeget_clipTopRight?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_clipTopRight != null) retVal = _afterget_clipTopRight.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_clipTopRight()
        {
            if (!HookedList.Contains("set_clipTopRight"))
            {
                HookedList.Add("set_clipTopRight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "set_clipTopRight"),
                    set_clipTopRight);
            }
        }

        internal static event Delegates.set_clipTopRight_BeforeArgs _beforeset_clipTopRight;
        internal static event Delegates.set_clipTopRight_NormalArgs _afterset_clipTopRight;

        private static void set_clipTopRight(Action<tk2dClippedSprite, Vector2> orig, tk2dClippedSprite self,
            Vector2 value)
        {
            Delegates.Params_set_clipTopRight @params = new()
            {
                self = self, value = value
            };
            _beforeset_clipTopRight?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_clipTopRight != null) _afterset_clipTopRight.Invoke(@params);
        }

        internal static void Hookget_CreateBoxCollider()
        {
            if (!HookedList.Contains("get_CreateBoxCollider"))
            {
                HookedList.Add("get_CreateBoxCollider");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "get_CreateBoxCollider"),
                    get_CreateBoxCollider);
            }
        }

        internal static event Delegates.get_CreateBoxCollider_BeforeArgs _beforeget_CreateBoxCollider;
        internal static event Delegates.get_CreateBoxCollider_NormalArgs _afterget_CreateBoxCollider;

        private static bool get_CreateBoxCollider(Func<tk2dClippedSprite, bool> orig, tk2dClippedSprite self)
        {
            Delegates.Params_get_CreateBoxCollider @params = new()
            {
                self = self
            };
            _beforeget_CreateBoxCollider?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_CreateBoxCollider != null) retVal = _afterget_CreateBoxCollider.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_CreateBoxCollider()
        {
            if (!HookedList.Contains("set_CreateBoxCollider"))
            {
                HookedList.Add("set_CreateBoxCollider");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "set_CreateBoxCollider"),
                    set_CreateBoxCollider);
            }
        }

        internal static event Delegates.set_CreateBoxCollider_BeforeArgs _beforeset_CreateBoxCollider;
        internal static event Delegates.set_CreateBoxCollider_NormalArgs _afterset_CreateBoxCollider;

        private static void set_CreateBoxCollider(Action<tk2dClippedSprite, bool> orig, tk2dClippedSprite self,
            bool value)
        {
            Delegates.Params_set_CreateBoxCollider @params = new()
            {
                self = self, value = value
            };
            _beforeset_CreateBoxCollider?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_CreateBoxCollider != null) _afterset_CreateBoxCollider.Invoke(@params);
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.tk2dClippedSprite.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.tk2dClippedSprite.orig_Awake orig, tk2dClippedSprite self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.tk2dClippedSprite.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_NormalArgs _afterOnDestroy;

        private static void OnDestroy(On.tk2dClippedSprite.orig_OnDestroy orig, tk2dClippedSprite self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            _beforeOnDestroy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null) _afterOnDestroy.Invoke(@params);
        }

        internal static void HookSetColors()
        {
            if (!HookedList.Contains("SetColors"))
            {
                HookedList.Add("SetColors");
                On.tk2dClippedSprite.SetColors += SetColors;
            }
        }

        internal static event Delegates.SetColors_BeforeArgs _beforeSetColors;
        internal static event Delegates.SetColors_NormalArgs _afterSetColors;

        private static void SetColors(On.tk2dClippedSprite.orig_SetColors orig, tk2dClippedSprite self, Color32[] dest)
        {
            Delegates.Params_SetColors @params = new()
            {
                self = self, dest = dest
            };
            _beforeSetColors?.Invoke(@params);
            self = @params.self;
            dest = @params.dest;
            orig(self, dest);
            if (_afterSetColors != null) _afterSetColors.Invoke(@params);
        }

        internal static void HookSetGeometry()
        {
            if (!HookedList.Contains("SetGeometry"))
            {
                HookedList.Add("SetGeometry");
                On.tk2dClippedSprite.SetGeometry += SetGeometry;
            }
        }

        internal static event Delegates.SetGeometry_BeforeArgs _beforeSetGeometry;
        internal static event Delegates.SetGeometry_NormalArgs _afterSetGeometry;

        private static void SetGeometry(On.tk2dClippedSprite.orig_SetGeometry orig, tk2dClippedSprite self,
            Vector3[] vertices, Vector2[] uvs)
        {
            Delegates.Params_SetGeometry @params = new()
            {
                self = self, vertices = vertices, uvs = uvs
            };
            _beforeSetGeometry?.Invoke(@params);
            self = @params.self;
            vertices = @params.vertices;
            uvs = @params.uvs;
            orig(self, vertices, uvs);
            if (_afterSetGeometry != null) _afterSetGeometry.Invoke(@params);
        }

        internal static void HookBuild()
        {
            if (!HookedList.Contains("Build"))
            {
                HookedList.Add("Build");
                On.tk2dClippedSprite.Build += Build;
            }
        }

        internal static event Delegates.Build_BeforeArgs _beforeBuild;
        internal static event Delegates.Build_NormalArgs _afterBuild;

        private static void Build(On.tk2dClippedSprite.orig_Build orig, tk2dClippedSprite self)
        {
            Delegates.Params_Build @params = new()
            {
                self = self
            };
            _beforeBuild?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBuild != null) _afterBuild.Invoke(@params);
        }

        internal static void HookUpdateGeometry()
        {
            if (!HookedList.Contains("UpdateGeometry"))
            {
                HookedList.Add("UpdateGeometry");
                On.tk2dClippedSprite.UpdateGeometry += UpdateGeometry;
            }
        }

        internal static event Delegates.UpdateGeometry_BeforeArgs _beforeUpdateGeometry;
        internal static event Delegates.UpdateGeometry_NormalArgs _afterUpdateGeometry;

        private static void UpdateGeometry(On.tk2dClippedSprite.orig_UpdateGeometry orig, tk2dClippedSprite self)
        {
            Delegates.Params_UpdateGeometry @params = new()
            {
                self = self
            };
            _beforeUpdateGeometry?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateGeometry != null) _afterUpdateGeometry.Invoke(@params);
        }

        internal static void HookUpdateColors()
        {
            if (!HookedList.Contains("UpdateColors"))
            {
                HookedList.Add("UpdateColors");
                On.tk2dClippedSprite.UpdateColors += UpdateColors;
            }
        }

        internal static event Delegates.UpdateColors_BeforeArgs _beforeUpdateColors;
        internal static event Delegates.UpdateColors_NormalArgs _afterUpdateColors;

        private static void UpdateColors(On.tk2dClippedSprite.orig_UpdateColors orig, tk2dClippedSprite self)
        {
            Delegates.Params_UpdateColors @params = new()
            {
                self = self
            };
            _beforeUpdateColors?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateColors != null) _afterUpdateColors.Invoke(@params);
        }

        internal static void HookUpdateVertices()
        {
            if (!HookedList.Contains("UpdateVertices"))
            {
                HookedList.Add("UpdateVertices");
                On.tk2dClippedSprite.UpdateVertices += UpdateVertices;
            }
        }

        internal static event Delegates.UpdateVertices_BeforeArgs _beforeUpdateVertices;
        internal static event Delegates.UpdateVertices_NormalArgs _afterUpdateVertices;

        private static void UpdateVertices(On.tk2dClippedSprite.orig_UpdateVertices orig, tk2dClippedSprite self)
        {
            Delegates.Params_UpdateVertices @params = new()
            {
                self = self
            };
            _beforeUpdateVertices?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateVertices != null) _afterUpdateVertices.Invoke(@params);
        }

        internal static void HookUpdateColorsImpl()
        {
            if (!HookedList.Contains("UpdateColorsImpl"))
            {
                HookedList.Add("UpdateColorsImpl");
                On.tk2dClippedSprite.UpdateColorsImpl += UpdateColorsImpl;
            }
        }

        internal static event Delegates.UpdateColorsImpl_BeforeArgs _beforeUpdateColorsImpl;
        internal static event Delegates.UpdateColorsImpl_NormalArgs _afterUpdateColorsImpl;

        private static void UpdateColorsImpl(On.tk2dClippedSprite.orig_UpdateColorsImpl orig, tk2dClippedSprite self)
        {
            Delegates.Params_UpdateColorsImpl @params = new()
            {
                self = self
            };
            _beforeUpdateColorsImpl?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateColorsImpl != null) _afterUpdateColorsImpl.Invoke(@params);
        }

        internal static void HookUpdateGeometryImpl()
        {
            if (!HookedList.Contains("UpdateGeometryImpl"))
            {
                HookedList.Add("UpdateGeometryImpl");
                On.tk2dClippedSprite.UpdateGeometryImpl += UpdateGeometryImpl;
            }
        }

        internal static event Delegates.UpdateGeometryImpl_BeforeArgs _beforeUpdateGeometryImpl;
        internal static event Delegates.UpdateGeometryImpl_NormalArgs _afterUpdateGeometryImpl;

        private static void UpdateGeometryImpl(On.tk2dClippedSprite.orig_UpdateGeometryImpl orig,
            tk2dClippedSprite self)
        {
            Delegates.Params_UpdateGeometryImpl @params = new()
            {
                self = self
            };
            _beforeUpdateGeometryImpl?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateGeometryImpl != null) _afterUpdateGeometryImpl.Invoke(@params);
        }

        internal static void HookUpdateCollider()
        {
            if (!HookedList.Contains("UpdateCollider"))
            {
                HookedList.Add("UpdateCollider");
                On.tk2dClippedSprite.UpdateCollider += UpdateCollider;
            }
        }

        internal static event Delegates.UpdateCollider_BeforeArgs _beforeUpdateCollider;
        internal static event Delegates.UpdateCollider_NormalArgs _afterUpdateCollider;

        private static void UpdateCollider(On.tk2dClippedSprite.orig_UpdateCollider orig, tk2dClippedSprite self)
        {
            Delegates.Params_UpdateCollider @params = new()
            {
                self = self
            };
            _beforeUpdateCollider?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateCollider != null) _afterUpdateCollider.Invoke(@params);
        }

        internal static void HookCreateCollider()
        {
            if (!HookedList.Contains("CreateCollider"))
            {
                HookedList.Add("CreateCollider");
                On.tk2dClippedSprite.CreateCollider += CreateCollider;
            }
        }

        internal static event Delegates.CreateCollider_BeforeArgs _beforeCreateCollider;
        internal static event Delegates.CreateCollider_NormalArgs _afterCreateCollider;

        private static void CreateCollider(On.tk2dClippedSprite.orig_CreateCollider orig, tk2dClippedSprite self)
        {
            Delegates.Params_CreateCollider @params = new()
            {
                self = self
            };
            _beforeCreateCollider?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCreateCollider != null) _afterCreateCollider.Invoke(@params);
        }

        internal static void HookUpdateMaterial()
        {
            if (!HookedList.Contains("UpdateMaterial"))
            {
                HookedList.Add("UpdateMaterial");
                On.tk2dClippedSprite.UpdateMaterial += UpdateMaterial;
            }
        }

        internal static event Delegates.UpdateMaterial_BeforeArgs _beforeUpdateMaterial;
        internal static event Delegates.UpdateMaterial_NormalArgs _afterUpdateMaterial;

        private static void UpdateMaterial(On.tk2dClippedSprite.orig_UpdateMaterial orig, tk2dClippedSprite self)
        {
            Delegates.Params_UpdateMaterial @params = new()
            {
                self = self
            };
            _beforeUpdateMaterial?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateMaterial != null) _afterUpdateMaterial.Invoke(@params);
        }

        internal static void HookGetCurrentVertexCount()
        {
            if (!HookedList.Contains("GetCurrentVertexCount"))
            {
                HookedList.Add("GetCurrentVertexCount");
                On.tk2dClippedSprite.GetCurrentVertexCount += GetCurrentVertexCount;
            }
        }

        internal static event Delegates.GetCurrentVertexCount_BeforeArgs _beforeGetCurrentVertexCount;
        internal static event Delegates.GetCurrentVertexCount_NormalArgs _afterGetCurrentVertexCount;

        private static int GetCurrentVertexCount(On.tk2dClippedSprite.orig_GetCurrentVertexCount orig,
            tk2dClippedSprite self)
        {
            Delegates.Params_GetCurrentVertexCount @params = new()
            {
                self = self
            };
            _beforeGetCurrentVertexCount?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetCurrentVertexCount != null) retVal = _afterGetCurrentVertexCount.Invoke(@params);
            return retVal;
        }

        internal static void HookReshapeBounds()
        {
            if (!HookedList.Contains("ReshapeBounds"))
            {
                HookedList.Add("ReshapeBounds");
                On.tk2dClippedSprite.ReshapeBounds += ReshapeBounds;
            }
        }

        internal static event Delegates.ReshapeBounds_BeforeArgs _beforeReshapeBounds;
        internal static event Delegates.ReshapeBounds_NormalArgs _afterReshapeBounds;

        private static void ReshapeBounds(On.tk2dClippedSprite.orig_ReshapeBounds orig, tk2dClippedSprite self,
            Vector3 dMin, Vector3 dMax)
        {
            Delegates.Params_ReshapeBounds @params = new()
            {
                self = self, dMin = dMin, dMax = dMax
            };
            _beforeReshapeBounds?.Invoke(@params);
            self = @params.self;
            dMin = @params.dMin;
            dMax = @params.dMax;
            orig(self, dMin, dMax);
            if (_afterReshapeBounds != null) _afterReshapeBounds.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void Build_BeforeArgs(Params_Build args);

        public delegate void Build_NormalArgs(Params_Build args);

        public delegate void CreateCollider_BeforeArgs(Params_CreateCollider args);

        public delegate void CreateCollider_NormalArgs(Params_CreateCollider args);

        public delegate void get_clipBottomLeft_BeforeArgs(Params_get_clipBottomLeft args);

        public delegate Vector2 get_clipBottomLeft_NormalArgs(Params_get_clipBottomLeft args);

        public delegate void get_ClipRect_BeforeArgs(Params_get_ClipRect args);

        public delegate Rect get_ClipRect_NormalArgs(Params_get_ClipRect args);

        public delegate void get_clipTopRight_BeforeArgs(Params_get_clipTopRight args);

        public delegate Vector2 get_clipTopRight_NormalArgs(Params_get_clipTopRight args);

        public delegate void get_CreateBoxCollider_BeforeArgs(Params_get_CreateBoxCollider args);

        public delegate bool get_CreateBoxCollider_NormalArgs(Params_get_CreateBoxCollider args);

        public delegate void GetCurrentVertexCount_BeforeArgs(Params_GetCurrentVertexCount args);

        public delegate int GetCurrentVertexCount_NormalArgs(Params_GetCurrentVertexCount args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_NormalArgs(Params_OnDestroy args);

        public delegate void ReshapeBounds_BeforeArgs(Params_ReshapeBounds args);

        public delegate void ReshapeBounds_NormalArgs(Params_ReshapeBounds args);

        public delegate void set_clipBottomLeft_BeforeArgs(Params_set_clipBottomLeft args);

        public delegate void set_clipBottomLeft_NormalArgs(Params_set_clipBottomLeft args);

        public delegate void set_ClipRect_BeforeArgs(Params_set_ClipRect args);

        public delegate void set_ClipRect_NormalArgs(Params_set_ClipRect args);

        public delegate void set_clipTopRight_BeforeArgs(Params_set_clipTopRight args);

        public delegate void set_clipTopRight_NormalArgs(Params_set_clipTopRight args);

        public delegate void set_CreateBoxCollider_BeforeArgs(Params_set_CreateBoxCollider args);

        public delegate void set_CreateBoxCollider_NormalArgs(Params_set_CreateBoxCollider args);

        public delegate void SetColors_BeforeArgs(Params_SetColors args);

        public delegate void SetColors_NormalArgs(Params_SetColors args);

        public delegate void SetGeometry_BeforeArgs(Params_SetGeometry args);

        public delegate void SetGeometry_NormalArgs(Params_SetGeometry args);

        public delegate void UpdateCollider_BeforeArgs(Params_UpdateCollider args);

        public delegate void UpdateCollider_NormalArgs(Params_UpdateCollider args);

        public delegate void UpdateColors_BeforeArgs(Params_UpdateColors args);

        public delegate void UpdateColors_NormalArgs(Params_UpdateColors args);

        public delegate void UpdateColorsImpl_BeforeArgs(Params_UpdateColorsImpl args);

        public delegate void UpdateColorsImpl_NormalArgs(Params_UpdateColorsImpl args);

        public delegate void UpdateGeometry_BeforeArgs(Params_UpdateGeometry args);

        public delegate void UpdateGeometry_NormalArgs(Params_UpdateGeometry args);

        public delegate void UpdateGeometryImpl_BeforeArgs(Params_UpdateGeometryImpl args);

        public delegate void UpdateGeometryImpl_NormalArgs(Params_UpdateGeometryImpl args);

        public delegate void UpdateMaterial_BeforeArgs(Params_UpdateMaterial args);

        public delegate void UpdateMaterial_NormalArgs(Params_UpdateMaterial args);

        public delegate void UpdateVertices_BeforeArgs(Params_UpdateVertices args);

        public delegate void UpdateVertices_NormalArgs(Params_UpdateVertices args);

        public sealed class Params_get_ClipRect
        {
            public tk2dClippedSprite self;
        }

        public sealed class Params_set_ClipRect
        {
            public tk2dClippedSprite self;
            public Rect value;
        }

        public sealed class Params_get_clipBottomLeft
        {
            public tk2dClippedSprite self;
        }

        public sealed class Params_set_clipBottomLeft
        {
            public tk2dClippedSprite self;
            public Vector2 value;
        }

        public sealed class Params_get_clipTopRight
        {
            public tk2dClippedSprite self;
        }

        public sealed class Params_set_clipTopRight
        {
            public tk2dClippedSprite self;
            public Vector2 value;
        }

        public sealed class Params_get_CreateBoxCollider
        {
            public tk2dClippedSprite self;
        }

        public sealed class Params_set_CreateBoxCollider
        {
            public tk2dClippedSprite self;
            public bool value;
        }

        public sealed class Params_Awake
        {
            public tk2dClippedSprite self;
        }

        public sealed class Params_OnDestroy
        {
            public tk2dClippedSprite self;
        }

        public sealed class Params_SetColors
        {
            public Color32[] dest;
            public tk2dClippedSprite self;
        }

        public sealed class Params_SetGeometry
        {
            public tk2dClippedSprite self;
            public Vector2[] uvs;
            public Vector3[] vertices;
        }

        public sealed class Params_Build
        {
            public tk2dClippedSprite self;
        }

        public sealed class Params_UpdateGeometry
        {
            public tk2dClippedSprite self;
        }

        public sealed class Params_UpdateColors
        {
            public tk2dClippedSprite self;
        }

        public sealed class Params_UpdateVertices
        {
            public tk2dClippedSprite self;
        }

        public sealed class Params_UpdateColorsImpl
        {
            public tk2dClippedSprite self;
        }

        public sealed class Params_UpdateGeometryImpl
        {
            public tk2dClippedSprite self;
        }

        public sealed class Params_UpdateCollider
        {
            public tk2dClippedSprite self;
        }

        public sealed class Params_CreateCollider
        {
            public tk2dClippedSprite self;
        }

        public sealed class Params_UpdateMaterial
        {
            public tk2dClippedSprite self;
        }

        public sealed class Params_GetCurrentVertexCount
        {
            public tk2dClippedSprite self;
        }

        public sealed class Params_ReshapeBounds
        {
            public Vector3 dMax;
            public Vector3 dMin;
            public tk2dClippedSprite self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_ClipRect_BeforeArgs get_ClipRect
        {
            add
            {
                HookHandler._beforeget_ClipRect += value;
                HookHandler.Hookget_ClipRect();
            }
            remove => HookHandler._beforeget_ClipRect -= value;
        }

        public static event Delegates.set_ClipRect_BeforeArgs set_ClipRect
        {
            add
            {
                HookHandler._beforeset_ClipRect += value;
                HookHandler.Hookset_ClipRect();
            }
            remove => HookHandler._beforeset_ClipRect -= value;
        }

        public static event Delegates.get_clipBottomLeft_BeforeArgs get_clipBottomLeft
        {
            add
            {
                HookHandler._beforeget_clipBottomLeft += value;
                HookHandler.Hookget_clipBottomLeft();
            }
            remove => HookHandler._beforeget_clipBottomLeft -= value;
        }

        public static event Delegates.set_clipBottomLeft_BeforeArgs set_clipBottomLeft
        {
            add
            {
                HookHandler._beforeset_clipBottomLeft += value;
                HookHandler.Hookset_clipBottomLeft();
            }
            remove => HookHandler._beforeset_clipBottomLeft -= value;
        }

        public static event Delegates.get_clipTopRight_BeforeArgs get_clipTopRight
        {
            add
            {
                HookHandler._beforeget_clipTopRight += value;
                HookHandler.Hookget_clipTopRight();
            }
            remove => HookHandler._beforeget_clipTopRight -= value;
        }

        public static event Delegates.set_clipTopRight_BeforeArgs set_clipTopRight
        {
            add
            {
                HookHandler._beforeset_clipTopRight += value;
                HookHandler.Hookset_clipTopRight();
            }
            remove => HookHandler._beforeset_clipTopRight -= value;
        }

        public static event Delegates.get_CreateBoxCollider_BeforeArgs get_CreateBoxCollider
        {
            add
            {
                HookHandler._beforeget_CreateBoxCollider += value;
                HookHandler.Hookget_CreateBoxCollider();
            }
            remove => HookHandler._beforeget_CreateBoxCollider -= value;
        }

        public static event Delegates.set_CreateBoxCollider_BeforeArgs set_CreateBoxCollider
        {
            add
            {
                HookHandler._beforeset_CreateBoxCollider += value;
                HookHandler.Hookset_CreateBoxCollider();
            }
            remove => HookHandler._beforeset_CreateBoxCollider -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.SetColors_BeforeArgs SetColors
        {
            add
            {
                HookHandler._beforeSetColors += value;
                HookHandler.HookSetColors();
            }
            remove => HookHandler._beforeSetColors -= value;
        }

        public static event Delegates.SetGeometry_BeforeArgs SetGeometry
        {
            add
            {
                HookHandler._beforeSetGeometry += value;
                HookHandler.HookSetGeometry();
            }
            remove => HookHandler._beforeSetGeometry -= value;
        }

        public static event Delegates.Build_BeforeArgs Build
        {
            add
            {
                HookHandler._beforeBuild += value;
                HookHandler.HookBuild();
            }
            remove => HookHandler._beforeBuild -= value;
        }

        public static event Delegates.UpdateGeometry_BeforeArgs UpdateGeometry
        {
            add
            {
                HookHandler._beforeUpdateGeometry += value;
                HookHandler.HookUpdateGeometry();
            }
            remove => HookHandler._beforeUpdateGeometry -= value;
        }

        public static event Delegates.UpdateColors_BeforeArgs UpdateColors
        {
            add
            {
                HookHandler._beforeUpdateColors += value;
                HookHandler.HookUpdateColors();
            }
            remove => HookHandler._beforeUpdateColors -= value;
        }

        public static event Delegates.UpdateVertices_BeforeArgs UpdateVertices
        {
            add
            {
                HookHandler._beforeUpdateVertices += value;
                HookHandler.HookUpdateVertices();
            }
            remove => HookHandler._beforeUpdateVertices -= value;
        }

        public static event Delegates.UpdateColorsImpl_BeforeArgs UpdateColorsImpl
        {
            add
            {
                HookHandler._beforeUpdateColorsImpl += value;
                HookHandler.HookUpdateColorsImpl();
            }
            remove => HookHandler._beforeUpdateColorsImpl -= value;
        }

        public static event Delegates.UpdateGeometryImpl_BeforeArgs UpdateGeometryImpl
        {
            add
            {
                HookHandler._beforeUpdateGeometryImpl += value;
                HookHandler.HookUpdateGeometryImpl();
            }
            remove => HookHandler._beforeUpdateGeometryImpl -= value;
        }

        public static event Delegates.UpdateCollider_BeforeArgs UpdateCollider
        {
            add
            {
                HookHandler._beforeUpdateCollider += value;
                HookHandler.HookUpdateCollider();
            }
            remove => HookHandler._beforeUpdateCollider -= value;
        }

        public static event Delegates.CreateCollider_BeforeArgs CreateCollider
        {
            add
            {
                HookHandler._beforeCreateCollider += value;
                HookHandler.HookCreateCollider();
            }
            remove => HookHandler._beforeCreateCollider -= value;
        }

        public static event Delegates.UpdateMaterial_BeforeArgs UpdateMaterial
        {
            add
            {
                HookHandler._beforeUpdateMaterial += value;
                HookHandler.HookUpdateMaterial();
            }
            remove => HookHandler._beforeUpdateMaterial -= value;
        }

        public static event Delegates.GetCurrentVertexCount_BeforeArgs GetCurrentVertexCount
        {
            add
            {
                HookHandler._beforeGetCurrentVertexCount += value;
                HookHandler.HookGetCurrentVertexCount();
            }
            remove => HookHandler._beforeGetCurrentVertexCount -= value;
        }

        public static event Delegates.ReshapeBounds_BeforeArgs ReshapeBounds
        {
            add
            {
                HookHandler._beforeReshapeBounds += value;
                HookHandler.HookReshapeBounds();
            }
            remove => HookHandler._beforeReshapeBounds -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_ClipRect_NormalArgs get_ClipRect
        {
            add
            {
                HookHandler._afterget_ClipRect += value;
                HookHandler.Hookget_ClipRect();
            }
            remove => HookHandler._afterget_ClipRect -= value;
        }

        public static event Delegates.set_ClipRect_NormalArgs set_ClipRect
        {
            add
            {
                HookHandler._afterset_ClipRect += value;
                HookHandler.Hookset_ClipRect();
            }
            remove => HookHandler._afterset_ClipRect -= value;
        }

        public static event Delegates.get_clipBottomLeft_NormalArgs get_clipBottomLeft
        {
            add
            {
                HookHandler._afterget_clipBottomLeft += value;
                HookHandler.Hookget_clipBottomLeft();
            }
            remove => HookHandler._afterget_clipBottomLeft -= value;
        }

        public static event Delegates.set_clipBottomLeft_NormalArgs set_clipBottomLeft
        {
            add
            {
                HookHandler._afterset_clipBottomLeft += value;
                HookHandler.Hookset_clipBottomLeft();
            }
            remove => HookHandler._afterset_clipBottomLeft -= value;
        }

        public static event Delegates.get_clipTopRight_NormalArgs get_clipTopRight
        {
            add
            {
                HookHandler._afterget_clipTopRight += value;
                HookHandler.Hookget_clipTopRight();
            }
            remove => HookHandler._afterget_clipTopRight -= value;
        }

        public static event Delegates.set_clipTopRight_NormalArgs set_clipTopRight
        {
            add
            {
                HookHandler._afterset_clipTopRight += value;
                HookHandler.Hookset_clipTopRight();
            }
            remove => HookHandler._afterset_clipTopRight -= value;
        }

        public static event Delegates.get_CreateBoxCollider_NormalArgs get_CreateBoxCollider
        {
            add
            {
                HookHandler._afterget_CreateBoxCollider += value;
                HookHandler.Hookget_CreateBoxCollider();
            }
            remove => HookHandler._afterget_CreateBoxCollider -= value;
        }

        public static event Delegates.set_CreateBoxCollider_NormalArgs set_CreateBoxCollider
        {
            add
            {
                HookHandler._afterset_CreateBoxCollider += value;
                HookHandler.Hookset_CreateBoxCollider();
            }
            remove => HookHandler._afterset_CreateBoxCollider -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.SetColors_NormalArgs SetColors
        {
            add
            {
                HookHandler._afterSetColors += value;
                HookHandler.HookSetColors();
            }
            remove => HookHandler._afterSetColors -= value;
        }

        public static event Delegates.SetGeometry_NormalArgs SetGeometry
        {
            add
            {
                HookHandler._afterSetGeometry += value;
                HookHandler.HookSetGeometry();
            }
            remove => HookHandler._afterSetGeometry -= value;
        }

        public static event Delegates.Build_NormalArgs Build
        {
            add
            {
                HookHandler._afterBuild += value;
                HookHandler.HookBuild();
            }
            remove => HookHandler._afterBuild -= value;
        }

        public static event Delegates.UpdateGeometry_NormalArgs UpdateGeometry
        {
            add
            {
                HookHandler._afterUpdateGeometry += value;
                HookHandler.HookUpdateGeometry();
            }
            remove => HookHandler._afterUpdateGeometry -= value;
        }

        public static event Delegates.UpdateColors_NormalArgs UpdateColors
        {
            add
            {
                HookHandler._afterUpdateColors += value;
                HookHandler.HookUpdateColors();
            }
            remove => HookHandler._afterUpdateColors -= value;
        }

        public static event Delegates.UpdateVertices_NormalArgs UpdateVertices
        {
            add
            {
                HookHandler._afterUpdateVertices += value;
                HookHandler.HookUpdateVertices();
            }
            remove => HookHandler._afterUpdateVertices -= value;
        }

        public static event Delegates.UpdateColorsImpl_NormalArgs UpdateColorsImpl
        {
            add
            {
                HookHandler._afterUpdateColorsImpl += value;
                HookHandler.HookUpdateColorsImpl();
            }
            remove => HookHandler._afterUpdateColorsImpl -= value;
        }

        public static event Delegates.UpdateGeometryImpl_NormalArgs UpdateGeometryImpl
        {
            add
            {
                HookHandler._afterUpdateGeometryImpl += value;
                HookHandler.HookUpdateGeometryImpl();
            }
            remove => HookHandler._afterUpdateGeometryImpl -= value;
        }

        public static event Delegates.UpdateCollider_NormalArgs UpdateCollider
        {
            add
            {
                HookHandler._afterUpdateCollider += value;
                HookHandler.HookUpdateCollider();
            }
            remove => HookHandler._afterUpdateCollider -= value;
        }

        public static event Delegates.CreateCollider_NormalArgs CreateCollider
        {
            add
            {
                HookHandler._afterCreateCollider += value;
                HookHandler.HookCreateCollider();
            }
            remove => HookHandler._afterCreateCollider -= value;
        }

        public static event Delegates.UpdateMaterial_NormalArgs UpdateMaterial
        {
            add
            {
                HookHandler._afterUpdateMaterial += value;
                HookHandler.HookUpdateMaterial();
            }
            remove => HookHandler._afterUpdateMaterial -= value;
        }

        public static event Delegates.GetCurrentVertexCount_NormalArgs GetCurrentVertexCount
        {
            add
            {
                HookHandler._afterGetCurrentVertexCount += value;
                HookHandler.HookGetCurrentVertexCount();
            }
            remove => HookHandler._afterGetCurrentVertexCount -= value;
        }

        public static event Delegates.ReshapeBounds_NormalArgs ReshapeBounds
        {
            add
            {
                HookHandler._afterReshapeBounds += value;
                HookHandler.HookReshapeBounds();
            }
            remove => HookHandler._afterReshapeBounds -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_ClipRect_NormalArgs get_ClipRect
        {
            add => HookEndpointManager.Add<Delegates.get_ClipRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "get_ClipRect"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ClipRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "get_ClipRect"), value);
        }

        public static event Delegates.set_ClipRect_NormalArgs set_ClipRect
        {
            add => HookEndpointManager.Add<Delegates.set_ClipRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "set_ClipRect"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ClipRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "set_ClipRect"), value);
        }

        public static event Delegates.get_clipBottomLeft_NormalArgs get_clipBottomLeft
        {
            add => HookEndpointManager.Add<Delegates.get_clipBottomLeft_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "get_clipBottomLeft"), value);
            remove => HookEndpointManager.Remove<Delegates.get_clipBottomLeft_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "get_clipBottomLeft"), value);
        }

        public static event Delegates.set_clipBottomLeft_NormalArgs set_clipBottomLeft
        {
            add => HookEndpointManager.Add<Delegates.set_clipBottomLeft_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "set_clipBottomLeft"), value);
            remove => HookEndpointManager.Remove<Delegates.set_clipBottomLeft_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "set_clipBottomLeft"), value);
        }

        public static event Delegates.get_clipTopRight_NormalArgs get_clipTopRight
        {
            add => HookEndpointManager.Add<Delegates.get_clipTopRight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "get_clipTopRight"), value);
            remove => HookEndpointManager.Remove<Delegates.get_clipTopRight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "get_clipTopRight"), value);
        }

        public static event Delegates.set_clipTopRight_NormalArgs set_clipTopRight
        {
            add => HookEndpointManager.Add<Delegates.set_clipTopRight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "set_clipTopRight"), value);
            remove => HookEndpointManager.Remove<Delegates.set_clipTopRight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "set_clipTopRight"), value);
        }

        public static event Delegates.get_CreateBoxCollider_NormalArgs get_CreateBoxCollider
        {
            add => HookEndpointManager.Add<Delegates.get_CreateBoxCollider_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "get_CreateBoxCollider"), value);
            remove => HookEndpointManager.Remove<Delegates.get_CreateBoxCollider_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "get_CreateBoxCollider"), value);
        }

        public static event Delegates.set_CreateBoxCollider_NormalArgs set_CreateBoxCollider
        {
            add => HookEndpointManager.Add<Delegates.set_CreateBoxCollider_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "set_CreateBoxCollider"), value);
            remove => HookEndpointManager.Remove<Delegates.set_CreateBoxCollider_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dClippedSprite), "set_CreateBoxCollider"), value);
        }

        public static event On.tk2dClippedSprite.hook_Awake Awake
        {
            add => On.tk2dClippedSprite.Awake += value;
            remove => On.tk2dClippedSprite.Awake -= value;
        }

        public static event On.tk2dClippedSprite.hook_OnDestroy OnDestroy
        {
            add => On.tk2dClippedSprite.OnDestroy += value;
            remove => On.tk2dClippedSprite.OnDestroy -= value;
        }

        public static event On.tk2dClippedSprite.hook_SetColors SetColors
        {
            add => On.tk2dClippedSprite.SetColors += value;
            remove => On.tk2dClippedSprite.SetColors -= value;
        }

        public static event On.tk2dClippedSprite.hook_SetGeometry SetGeometry
        {
            add => On.tk2dClippedSprite.SetGeometry += value;
            remove => On.tk2dClippedSprite.SetGeometry -= value;
        }

        public static event On.tk2dClippedSprite.hook_Build Build
        {
            add => On.tk2dClippedSprite.Build += value;
            remove => On.tk2dClippedSprite.Build -= value;
        }

        public static event On.tk2dClippedSprite.hook_UpdateGeometry UpdateGeometry
        {
            add => On.tk2dClippedSprite.UpdateGeometry += value;
            remove => On.tk2dClippedSprite.UpdateGeometry -= value;
        }

        public static event On.tk2dClippedSprite.hook_UpdateColors UpdateColors
        {
            add => On.tk2dClippedSprite.UpdateColors += value;
            remove => On.tk2dClippedSprite.UpdateColors -= value;
        }

        public static event On.tk2dClippedSprite.hook_UpdateVertices UpdateVertices
        {
            add => On.tk2dClippedSprite.UpdateVertices += value;
            remove => On.tk2dClippedSprite.UpdateVertices -= value;
        }

        public static event On.tk2dClippedSprite.hook_UpdateColorsImpl UpdateColorsImpl
        {
            add => On.tk2dClippedSprite.UpdateColorsImpl += value;
            remove => On.tk2dClippedSprite.UpdateColorsImpl -= value;
        }

        public static event On.tk2dClippedSprite.hook_UpdateGeometryImpl UpdateGeometryImpl
        {
            add => On.tk2dClippedSprite.UpdateGeometryImpl += value;
            remove => On.tk2dClippedSprite.UpdateGeometryImpl -= value;
        }

        public static event On.tk2dClippedSprite.hook_UpdateCollider UpdateCollider
        {
            add => On.tk2dClippedSprite.UpdateCollider += value;
            remove => On.tk2dClippedSprite.UpdateCollider -= value;
        }

        public static event On.tk2dClippedSprite.hook_CreateCollider CreateCollider
        {
            add => On.tk2dClippedSprite.CreateCollider += value;
            remove => On.tk2dClippedSprite.CreateCollider -= value;
        }

        public static event On.tk2dClippedSprite.hook_UpdateMaterial UpdateMaterial
        {
            add => On.tk2dClippedSprite.UpdateMaterial += value;
            remove => On.tk2dClippedSprite.UpdateMaterial -= value;
        }

        public static event On.tk2dClippedSprite.hook_GetCurrentVertexCount GetCurrentVertexCount
        {
            add => On.tk2dClippedSprite.GetCurrentVertexCount += value;
            remove => On.tk2dClippedSprite.GetCurrentVertexCount -= value;
        }

        public static event On.tk2dClippedSprite.hook_ReshapeBounds ReshapeBounds
        {
            add => On.tk2dClippedSprite.ReshapeBounds += value;
            remove => On.tk2dClippedSprite.ReshapeBounds -= value;
        }
    }
}