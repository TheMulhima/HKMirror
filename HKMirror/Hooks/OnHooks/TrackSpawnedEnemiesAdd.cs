namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TrackSpawnedEnemiesAdd class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTrackSpawnedEnemiesAdd
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                On.TrackSpawnedEnemiesAdd.Reset += Reset;
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_AfterArgs _afterReset;

        private static void Reset(On.TrackSpawnedEnemiesAdd.orig_Reset orig, TrackSpawnedEnemiesAdd self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            if (_beforeReset != null)
                foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
                    try
                    {
                        _beforeReset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterReset != null)
                foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
                    try
                    {
                        _afterReset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                On.TrackSpawnedEnemiesAdd.OnEnter += OnEnter;
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_AfterArgs _afterOnEnter;

        private static void OnEnter(On.TrackSpawnedEnemiesAdd.orig_OnEnter orig, TrackSpawnedEnemiesAdd self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            if (_beforeOnEnter != null)
                foreach (Delegates.OnEnter_BeforeArgs toInvoke in _beforeOnEnter.GetInvocationList())
                    try
                    {
                        _beforeOnEnter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnter != null)
                foreach (Delegates.OnEnter_AfterArgs toInvoke in _afterOnEnter.GetInvocationList())
                    try
                    {
                        _afterOnEnter.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAddTracked()
        {
            if (!HookedList.Contains("AddTracked"))
            {
                HookedList.Add("AddTracked");
                On.TrackSpawnedEnemiesAdd.AddTracked += AddTracked;
            }
        }

        internal static event Delegates.AddTracked_BeforeArgs _beforeAddTracked;
        internal static event Delegates.AddTracked_AfterArgs _afterAddTracked;

        private static void AddTracked(On.TrackSpawnedEnemiesAdd.orig_AddTracked orig, TrackSpawnedEnemiesAdd self,
            TrackSpawnedEnemies tracker, GameObject obj)
        {
            Delegates.Params_AddTracked @params = new()
            {
                self = self, tracker = tracker, obj = obj
            };
            if (_beforeAddTracked != null)
                foreach (Delegates.AddTracked_BeforeArgs toInvoke in _beforeAddTracked.GetInvocationList())
                    try
                    {
                        _beforeAddTracked?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            tracker = @params.tracker;
            obj = @params.obj;
            orig(self, tracker, obj);
            if (_afterAddTracked != null)
                foreach (Delegates.AddTracked_AfterArgs toInvoke in _afterAddTracked.GetInvocationList())
                    try
                    {
                        _afterAddTracked.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AddTracked_AfterArgs(Params_AddTracked args);

        public delegate void AddTracked_BeforeArgs(Params_AddTracked args);

        public delegate void AddTracked_WithArgs(Action<TrackSpawnedEnemiesAdd, TrackSpawnedEnemies, GameObject> orig,
            TrackSpawnedEnemiesAdd self, TrackSpawnedEnemies tracker, GameObject obj);

        public delegate void OnEnter_AfterArgs(Params_OnEnter args);

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_WithArgs(Action<TrackSpawnedEnemiesAdd> orig, TrackSpawnedEnemiesAdd self);

        public delegate void Reset_AfterArgs(Params_Reset args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_WithArgs(Action<TrackSpawnedEnemiesAdd> orig, TrackSpawnedEnemiesAdd self);

        public sealed class Params_Reset
        {
            public TrackSpawnedEnemiesAdd self;
        }

        public sealed class Params_OnEnter
        {
            public TrackSpawnedEnemiesAdd self;
        }

        public sealed class Params_AddTracked
        {
            public GameObject obj;
            public TrackSpawnedEnemiesAdd self;
            public TrackSpawnedEnemies tracker;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.AddTracked_BeforeArgs AddTracked
        {
            add
            {
                HookHandler._beforeAddTracked += value;
                HookHandler.HookAddTracked();
            }
            remove => HookHandler._beforeAddTracked -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_AfterArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_AfterArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.AddTracked_AfterArgs AddTracked
        {
            add
            {
                HookHandler._afterAddTracked += value;
                HookHandler.HookAddTracked();
            }
            remove => HookHandler._afterAddTracked -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.TrackSpawnedEnemiesAdd.hook_Reset Reset
        {
            add => On.TrackSpawnedEnemiesAdd.Reset += value;
            remove => On.TrackSpawnedEnemiesAdd.Reset -= value;
        }

        public static event On.TrackSpawnedEnemiesAdd.hook_OnEnter OnEnter
        {
            add => On.TrackSpawnedEnemiesAdd.OnEnter += value;
            remove => On.TrackSpawnedEnemiesAdd.OnEnter -= value;
        }

        public static event On.TrackSpawnedEnemiesAdd.hook_AddTracked AddTracked
        {
            add => On.TrackSpawnedEnemiesAdd.AddTracked += value;
            remove => On.TrackSpawnedEnemiesAdd.AddTracked -= value;
        }
    }
}