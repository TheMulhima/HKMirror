using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dSpriteCollectionSize class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dSpriteCollectionSize
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookExplicit()
        {
            if (!HookedList.Contains("Explicit"))
            {
                HookedList.Add("Explicit");
                On.tk2dSpriteCollectionSize.Explicit += Explicit;
            }
        }

        internal static event Delegates.Explicit_BeforeArgs _beforeExplicit;
        internal static event Delegates.Explicit_AfterArgs _afterExplicit;

        private static tk2dSpriteCollectionSize Explicit(On.tk2dSpriteCollectionSize.orig_Explicit orig,
            float orthoSize, float targetHeight)
        {
            Delegates.Params_Explicit @params = new()
            {
                orthoSize = orthoSize, targetHeight = targetHeight
            };
            if (_beforeExplicit != null)
                foreach (Delegates.Explicit_BeforeArgs toInvoke in _beforeExplicit.GetInvocationList())
                    try
                    {
                        _beforeExplicit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orthoSize = @params.orthoSize;
            targetHeight = @params.targetHeight;
            var retVal = orig(orthoSize, targetHeight);
            if (_afterExplicit != null)
                foreach (Delegates.Explicit_AfterArgs toInvoke in _afterExplicit.GetInvocationList())
                    try
                    {
                        retVal = _afterExplicit.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookPixelsPerMeter()
        {
            if (!HookedList.Contains("PixelsPerMeter"))
            {
                HookedList.Add("PixelsPerMeter");
                On.tk2dSpriteCollectionSize.PixelsPerMeter += PixelsPerMeter;
            }
        }

        internal static event Delegates.PixelsPerMeter_BeforeArgs _beforePixelsPerMeter;
        internal static event Delegates.PixelsPerMeter_AfterArgs _afterPixelsPerMeter;

        private static tk2dSpriteCollectionSize PixelsPerMeter(On.tk2dSpriteCollectionSize.orig_PixelsPerMeter orig,
            float pixelsPerMeter)
        {
            Delegates.Params_PixelsPerMeter @params = new()
            {
                pixelsPerMeter = pixelsPerMeter
            };
            if (_beforePixelsPerMeter != null)
                foreach (Delegates.PixelsPerMeter_BeforeArgs toInvoke in _beforePixelsPerMeter.GetInvocationList())
                    try
                    {
                        _beforePixelsPerMeter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            pixelsPerMeter = @params.pixelsPerMeter;
            var retVal = orig(pixelsPerMeter);
            if (_afterPixelsPerMeter != null)
                foreach (Delegates.PixelsPerMeter_AfterArgs toInvoke in _afterPixelsPerMeter.GetInvocationList())
                    try
                    {
                        retVal = _afterPixelsPerMeter.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookForResolution()
        {
            if (!HookedList.Contains("ForResolution"))
            {
                HookedList.Add("ForResolution");
                On.tk2dSpriteCollectionSize.ForResolution += ForResolution;
            }
        }

        internal static event Delegates.ForResolution_BeforeArgs _beforeForResolution;
        internal static event Delegates.ForResolution_AfterArgs _afterForResolution;

        private static tk2dSpriteCollectionSize ForResolution(On.tk2dSpriteCollectionSize.orig_ForResolution orig,
            float orthoSize, float width, float height)
        {
            Delegates.Params_ForResolution @params = new()
            {
                orthoSize = orthoSize, width = width, height = height
            };
            if (_beforeForResolution != null)
                foreach (Delegates.ForResolution_BeforeArgs toInvoke in _beforeForResolution.GetInvocationList())
                    try
                    {
                        _beforeForResolution?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orthoSize = @params.orthoSize;
            width = @params.width;
            height = @params.height;
            var retVal = orig(orthoSize, width, height);
            if (_afterForResolution != null)
                foreach (Delegates.ForResolution_AfterArgs toInvoke in _afterForResolution.GetInvocationList())
                    try
                    {
                        retVal = _afterForResolution.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookForTk2dCamera()
        {
            if (!HookedList.Contains("ForTk2dCamera"))
            {
                HookedList.Add("ForTk2dCamera");
                On.tk2dSpriteCollectionSize.ForTk2dCamera += ForTk2dCamera;
            }
        }

        internal static event Delegates.ForTk2dCamera_BeforeArgs _beforeForTk2dCamera;
        internal static event Delegates.ForTk2dCamera_AfterArgs _afterForTk2dCamera;

        private static tk2dSpriteCollectionSize ForTk2dCamera(On.tk2dSpriteCollectionSize.orig_ForTk2dCamera orig)
        {
            if (_beforeForTk2dCamera != null)
                foreach (Delegates.ForTk2dCamera_BeforeArgs toInvoke in _beforeForTk2dCamera.GetInvocationList())
                    try
                    {
                        _beforeForTk2dCamera?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterForTk2dCamera != null)
                foreach (Delegates.ForTk2dCamera_AfterArgs toInvoke in _afterForTk2dCamera.GetInvocationList())
                    try
                    {
                        retVal = _afterForTk2dCamera.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookForTk2dCamera_tk2dCamera()
        {
            if (!HookedList.Contains("ForTk2dCamera_tk2dCamera"))
            {
                HookedList.Add("ForTk2dCamera_tk2dCamera");
                On.tk2dSpriteCollectionSize.ForTk2dCamera_tk2dCamera += ForTk2dCamera_tk2dCamera;
            }
        }

        internal static event Delegates.ForTk2dCamera_tk2dCamera_BeforeArgs _beforeForTk2dCamera_tk2dCamera;
        internal static event Delegates.ForTk2dCamera_tk2dCamera_AfterArgs _afterForTk2dCamera_tk2dCamera;

        private static tk2dSpriteCollectionSize ForTk2dCamera_tk2dCamera(
            On.tk2dSpriteCollectionSize.orig_ForTk2dCamera_tk2dCamera orig, tk2dCamera camera)
        {
            Delegates.Params_ForTk2dCamera_tk2dCamera @params = new()
            {
                camera = camera
            };
            if (_beforeForTk2dCamera_tk2dCamera != null)
                foreach (Delegates.ForTk2dCamera_tk2dCamera_BeforeArgs toInvoke in _beforeForTk2dCamera_tk2dCamera
                             .GetInvocationList())
                    try
                    {
                        _beforeForTk2dCamera_tk2dCamera?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            camera = @params.camera;
            var retVal = orig(camera);
            if (_afterForTk2dCamera_tk2dCamera != null)
                foreach (Delegates.ForTk2dCamera_tk2dCamera_AfterArgs toInvoke in _afterForTk2dCamera_tk2dCamera
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterForTk2dCamera_tk2dCamera.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookDefault()
        {
            if (!HookedList.Contains("Default"))
            {
                HookedList.Add("Default");
                On.tk2dSpriteCollectionSize.Default += Default;
            }
        }

        internal static event Delegates.Default_BeforeArgs _beforeDefault;
        internal static event Delegates.Default_AfterArgs _afterDefault;

        private static tk2dSpriteCollectionSize Default(On.tk2dSpriteCollectionSize.orig_Default orig)
        {
            if (_beforeDefault != null)
                foreach (Delegates.Default_BeforeArgs toInvoke in _beforeDefault.GetInvocationList())
                    try
                    {
                        _beforeDefault?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterDefault != null)
                foreach (Delegates.Default_AfterArgs toInvoke in _afterDefault.GetInvocationList())
                    try
                    {
                        retVal = _afterDefault.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCopyFromLegacy()
        {
            if (!HookedList.Contains("CopyFromLegacy"))
            {
                HookedList.Add("CopyFromLegacy");
                On.tk2dSpriteCollectionSize.CopyFromLegacy += CopyFromLegacy;
            }
        }

        internal static event Delegates.CopyFromLegacy_BeforeArgs _beforeCopyFromLegacy;
        internal static event Delegates.CopyFromLegacy_AfterArgs _afterCopyFromLegacy;

        private static void CopyFromLegacy(On.tk2dSpriteCollectionSize.orig_CopyFromLegacy orig,
            tk2dSpriteCollectionSize self, bool useTk2dCamera, float orthoSize, float targetHeight)
        {
            Delegates.Params_CopyFromLegacy @params = new()
            {
                self = self, useTk2dCamera = useTk2dCamera, orthoSize = orthoSize, targetHeight = targetHeight
            };
            if (_beforeCopyFromLegacy != null)
                foreach (Delegates.CopyFromLegacy_BeforeArgs toInvoke in _beforeCopyFromLegacy.GetInvocationList())
                    try
                    {
                        _beforeCopyFromLegacy?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            useTk2dCamera = @params.useTk2dCamera;
            orthoSize = @params.orthoSize;
            targetHeight = @params.targetHeight;
            orig(self, useTk2dCamera, orthoSize, targetHeight);
            if (_afterCopyFromLegacy != null)
                foreach (Delegates.CopyFromLegacy_AfterArgs toInvoke in _afterCopyFromLegacy.GetInvocationList())
                    try
                    {
                        _afterCopyFromLegacy.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCopyFrom()
        {
            if (!HookedList.Contains("CopyFrom"))
            {
                HookedList.Add("CopyFrom");
                On.tk2dSpriteCollectionSize.CopyFrom += CopyFrom;
            }
        }

        internal static event Delegates.CopyFrom_BeforeArgs _beforeCopyFrom;
        internal static event Delegates.CopyFrom_AfterArgs _afterCopyFrom;

        private static void CopyFrom(On.tk2dSpriteCollectionSize.orig_CopyFrom orig, tk2dSpriteCollectionSize self,
            tk2dSpriteCollectionSize source)
        {
            Delegates.Params_CopyFrom @params = new()
            {
                self = self, source = source
            };
            if (_beforeCopyFrom != null)
                foreach (Delegates.CopyFrom_BeforeArgs toInvoke in _beforeCopyFrom.GetInvocationList())
                    try
                    {
                        _beforeCopyFrom?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            source = @params.source;
            orig(self, source);
            if (_afterCopyFrom != null)
                foreach (Delegates.CopyFrom_AfterArgs toInvoke in _afterCopyFrom.GetInvocationList())
                    try
                    {
                        _afterCopyFrom.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_OrthoSize()
        {
            if (!HookedList.Contains("get_OrthoSize"))
            {
                HookedList.Add("get_OrthoSize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionSize), "get_OrthoSize"),
                    get_OrthoSize);
            }
        }

        internal static event Delegates.get_OrthoSize_BeforeArgs _beforeget_OrthoSize;
        internal static event Delegates.get_OrthoSize_AfterArgs _afterget_OrthoSize;

        private static float get_OrthoSize(Func<tk2dSpriteCollectionSize, float> orig, tk2dSpriteCollectionSize self)
        {
            Delegates.Params_get_OrthoSize @params = new()
            {
                self = self
            };
            if (_beforeget_OrthoSize != null)
                foreach (Delegates.get_OrthoSize_BeforeArgs toInvoke in _beforeget_OrthoSize.GetInvocationList())
                    try
                    {
                        _beforeget_OrthoSize?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_OrthoSize != null)
                foreach (Delegates.get_OrthoSize_AfterArgs toInvoke in _afterget_OrthoSize.GetInvocationList())
                    try
                    {
                        retVal = _afterget_OrthoSize.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_TargetHeight()
        {
            if (!HookedList.Contains("get_TargetHeight"))
            {
                HookedList.Add("get_TargetHeight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionSize), "get_TargetHeight"),
                    get_TargetHeight);
            }
        }

        internal static event Delegates.get_TargetHeight_BeforeArgs _beforeget_TargetHeight;
        internal static event Delegates.get_TargetHeight_AfterArgs _afterget_TargetHeight;

        private static float get_TargetHeight(Func<tk2dSpriteCollectionSize, float> orig, tk2dSpriteCollectionSize self)
        {
            Delegates.Params_get_TargetHeight @params = new()
            {
                self = self
            };
            if (_beforeget_TargetHeight != null)
                foreach (Delegates.get_TargetHeight_BeforeArgs toInvoke in _beforeget_TargetHeight.GetInvocationList())
                    try
                    {
                        _beforeget_TargetHeight?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_TargetHeight != null)
                foreach (Delegates.get_TargetHeight_AfterArgs toInvoke in _afterget_TargetHeight.GetInvocationList())
                    try
                    {
                        retVal = _afterget_TargetHeight.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void CopyFrom_AfterArgs(Params_CopyFrom args);

        public delegate void CopyFrom_BeforeArgs(Params_CopyFrom args);

        public delegate void CopyFrom_WithArgs(Action<tk2dSpriteCollectionSize, tk2dSpriteCollectionSize> orig,
            tk2dSpriteCollectionSize self, tk2dSpriteCollectionSize source);

        public delegate void CopyFromLegacy_AfterArgs(Params_CopyFromLegacy args);

        public delegate void CopyFromLegacy_BeforeArgs(Params_CopyFromLegacy args);

        public delegate void CopyFromLegacy_WithArgs(Action<tk2dSpriteCollectionSize, bool, float, float> orig,
            tk2dSpriteCollectionSize self, bool useTk2dCamera, float orthoSize, float targetHeight);

        public delegate tk2dSpriteCollectionSize Default_AfterArgs(tk2dSpriteCollectionSize ret);

        public delegate void Default_BeforeArgs();

        public delegate tk2dSpriteCollectionSize Default_WithArgs(Func<tk2dSpriteCollectionSize> orig);

        public delegate tk2dSpriteCollectionSize Explicit_AfterArgs(Params_Explicit args, tk2dSpriteCollectionSize ret);

        public delegate void Explicit_BeforeArgs(Params_Explicit args);

        public delegate tk2dSpriteCollectionSize Explicit_WithArgs(Func<float, float, tk2dSpriteCollectionSize> orig,
            float orthoSize, float targetHeight);

        public delegate tk2dSpriteCollectionSize ForResolution_AfterArgs(Params_ForResolution args,
            tk2dSpriteCollectionSize ret);

        public delegate void ForResolution_BeforeArgs(Params_ForResolution args);

        public delegate tk2dSpriteCollectionSize ForResolution_WithArgs(
            Func<float, float, float, tk2dSpriteCollectionSize> orig, float orthoSize, float width, float height);

        public delegate tk2dSpriteCollectionSize ForTk2dCamera_AfterArgs(tk2dSpriteCollectionSize ret);

        public delegate void ForTk2dCamera_BeforeArgs();

        public delegate tk2dSpriteCollectionSize ForTk2dCamera_tk2dCamera_AfterArgs(
            Params_ForTk2dCamera_tk2dCamera args, tk2dSpriteCollectionSize ret);

        public delegate void ForTk2dCamera_tk2dCamera_BeforeArgs(Params_ForTk2dCamera_tk2dCamera args);

        public delegate tk2dSpriteCollectionSize ForTk2dCamera_tk2dCamera_WithArgs(
            Func<tk2dCamera, tk2dSpriteCollectionSize> orig, tk2dCamera camera);

        public delegate tk2dSpriteCollectionSize ForTk2dCamera_WithArgs(Func<tk2dSpriteCollectionSize> orig);

        public delegate float get_OrthoSize_AfterArgs(Params_get_OrthoSize args, float ret);

        public delegate void get_OrthoSize_BeforeArgs(Params_get_OrthoSize args);

        public delegate float get_OrthoSize_WithArgs(Func<tk2dSpriteCollectionSize, float> orig,
            tk2dSpriteCollectionSize self);

        public delegate float get_TargetHeight_AfterArgs(Params_get_TargetHeight args, float ret);

        public delegate void get_TargetHeight_BeforeArgs(Params_get_TargetHeight args);

        public delegate float get_TargetHeight_WithArgs(Func<tk2dSpriteCollectionSize, float> orig,
            tk2dSpriteCollectionSize self);

        public delegate tk2dSpriteCollectionSize PixelsPerMeter_AfterArgs(Params_PixelsPerMeter args,
            tk2dSpriteCollectionSize ret);

        public delegate void PixelsPerMeter_BeforeArgs(Params_PixelsPerMeter args);

        public delegate tk2dSpriteCollectionSize PixelsPerMeter_WithArgs(Func<float, tk2dSpriteCollectionSize> orig,
            float pixelsPerMeter);

        public sealed class Params_Explicit
        {
            public float orthoSize;
            public float targetHeight;
        }

        public sealed class Params_PixelsPerMeter
        {
            public float pixelsPerMeter;
        }

        public sealed class Params_ForResolution
        {
            public float height;
            public float orthoSize;
            public float width;
        }

        public sealed class Params_ForTk2dCamera_tk2dCamera
        {
            public tk2dCamera camera;
        }

        public sealed class Params_CopyFromLegacy
        {
            public float orthoSize;
            public tk2dSpriteCollectionSize self;
            public float targetHeight;
            public bool useTk2dCamera;
        }

        public sealed class Params_CopyFrom
        {
            public tk2dSpriteCollectionSize self;
            public tk2dSpriteCollectionSize source;
        }

        public sealed class Params_get_OrthoSize
        {
            public tk2dSpriteCollectionSize self;
        }

        public sealed class Params_get_TargetHeight
        {
            public tk2dSpriteCollectionSize self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Explicit_BeforeArgs Explicit
        {
            add
            {
                HookHandler._beforeExplicit += value;
                HookHandler.HookExplicit();
            }
            remove => HookHandler._beforeExplicit -= value;
        }

        public static event Delegates.PixelsPerMeter_BeforeArgs PixelsPerMeter
        {
            add
            {
                HookHandler._beforePixelsPerMeter += value;
                HookHandler.HookPixelsPerMeter();
            }
            remove => HookHandler._beforePixelsPerMeter -= value;
        }

        public static event Delegates.ForResolution_BeforeArgs ForResolution
        {
            add
            {
                HookHandler._beforeForResolution += value;
                HookHandler.HookForResolution();
            }
            remove => HookHandler._beforeForResolution -= value;
        }

        public static event Delegates.ForTk2dCamera_BeforeArgs ForTk2dCamera
        {
            add
            {
                HookHandler._beforeForTk2dCamera += value;
                HookHandler.HookForTk2dCamera();
            }
            remove => HookHandler._beforeForTk2dCamera -= value;
        }

        public static event Delegates.ForTk2dCamera_tk2dCamera_BeforeArgs ForTk2dCamera_tk2dCamera
        {
            add
            {
                HookHandler._beforeForTk2dCamera_tk2dCamera += value;
                HookHandler.HookForTk2dCamera_tk2dCamera();
            }
            remove => HookHandler._beforeForTk2dCamera_tk2dCamera -= value;
        }

        public static event Delegates.Default_BeforeArgs Default
        {
            add
            {
                HookHandler._beforeDefault += value;
                HookHandler.HookDefault();
            }
            remove => HookHandler._beforeDefault -= value;
        }

        public static event Delegates.CopyFromLegacy_BeforeArgs CopyFromLegacy
        {
            add
            {
                HookHandler._beforeCopyFromLegacy += value;
                HookHandler.HookCopyFromLegacy();
            }
            remove => HookHandler._beforeCopyFromLegacy -= value;
        }

        public static event Delegates.CopyFrom_BeforeArgs CopyFrom
        {
            add
            {
                HookHandler._beforeCopyFrom += value;
                HookHandler.HookCopyFrom();
            }
            remove => HookHandler._beforeCopyFrom -= value;
        }

        public static event Delegates.get_OrthoSize_BeforeArgs get_OrthoSize
        {
            add
            {
                HookHandler._beforeget_OrthoSize += value;
                HookHandler.Hookget_OrthoSize();
            }
            remove => HookHandler._beforeget_OrthoSize -= value;
        }

        public static event Delegates.get_TargetHeight_BeforeArgs get_TargetHeight
        {
            add
            {
                HookHandler._beforeget_TargetHeight += value;
                HookHandler.Hookget_TargetHeight();
            }
            remove => HookHandler._beforeget_TargetHeight -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Explicit_AfterArgs Explicit
        {
            add
            {
                HookHandler._afterExplicit += value;
                HookHandler.HookExplicit();
            }
            remove => HookHandler._afterExplicit -= value;
        }

        public static event Delegates.PixelsPerMeter_AfterArgs PixelsPerMeter
        {
            add
            {
                HookHandler._afterPixelsPerMeter += value;
                HookHandler.HookPixelsPerMeter();
            }
            remove => HookHandler._afterPixelsPerMeter -= value;
        }

        public static event Delegates.ForResolution_AfterArgs ForResolution
        {
            add
            {
                HookHandler._afterForResolution += value;
                HookHandler.HookForResolution();
            }
            remove => HookHandler._afterForResolution -= value;
        }

        public static event Delegates.ForTk2dCamera_AfterArgs ForTk2dCamera
        {
            add
            {
                HookHandler._afterForTk2dCamera += value;
                HookHandler.HookForTk2dCamera();
            }
            remove => HookHandler._afterForTk2dCamera -= value;
        }

        public static event Delegates.ForTk2dCamera_tk2dCamera_AfterArgs ForTk2dCamera_tk2dCamera
        {
            add
            {
                HookHandler._afterForTk2dCamera_tk2dCamera += value;
                HookHandler.HookForTk2dCamera_tk2dCamera();
            }
            remove => HookHandler._afterForTk2dCamera_tk2dCamera -= value;
        }

        public static event Delegates.Default_AfterArgs Default
        {
            add
            {
                HookHandler._afterDefault += value;
                HookHandler.HookDefault();
            }
            remove => HookHandler._afterDefault -= value;
        }

        public static event Delegates.CopyFromLegacy_AfterArgs CopyFromLegacy
        {
            add
            {
                HookHandler._afterCopyFromLegacy += value;
                HookHandler.HookCopyFromLegacy();
            }
            remove => HookHandler._afterCopyFromLegacy -= value;
        }

        public static event Delegates.CopyFrom_AfterArgs CopyFrom
        {
            add
            {
                HookHandler._afterCopyFrom += value;
                HookHandler.HookCopyFrom();
            }
            remove => HookHandler._afterCopyFrom -= value;
        }

        public static event Delegates.get_OrthoSize_AfterArgs get_OrthoSize
        {
            add
            {
                HookHandler._afterget_OrthoSize += value;
                HookHandler.Hookget_OrthoSize();
            }
            remove => HookHandler._afterget_OrthoSize -= value;
        }

        public static event Delegates.get_TargetHeight_AfterArgs get_TargetHeight
        {
            add
            {
                HookHandler._afterget_TargetHeight += value;
                HookHandler.Hookget_TargetHeight();
            }
            remove => HookHandler._afterget_TargetHeight -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.tk2dSpriteCollectionSize.hook_Explicit Explicit
        {
            add => On.tk2dSpriteCollectionSize.Explicit += value;
            remove => On.tk2dSpriteCollectionSize.Explicit -= value;
        }

        public static event On.tk2dSpriteCollectionSize.hook_PixelsPerMeter PixelsPerMeter
        {
            add => On.tk2dSpriteCollectionSize.PixelsPerMeter += value;
            remove => On.tk2dSpriteCollectionSize.PixelsPerMeter -= value;
        }

        public static event On.tk2dSpriteCollectionSize.hook_ForResolution ForResolution
        {
            add => On.tk2dSpriteCollectionSize.ForResolution += value;
            remove => On.tk2dSpriteCollectionSize.ForResolution -= value;
        }

        public static event On.tk2dSpriteCollectionSize.hook_ForTk2dCamera ForTk2dCamera
        {
            add => On.tk2dSpriteCollectionSize.ForTk2dCamera += value;
            remove => On.tk2dSpriteCollectionSize.ForTk2dCamera -= value;
        }

        public static event On.tk2dSpriteCollectionSize.hook_ForTk2dCamera_tk2dCamera ForTk2dCamera_tk2dCamera
        {
            add => On.tk2dSpriteCollectionSize.ForTk2dCamera_tk2dCamera += value;
            remove => On.tk2dSpriteCollectionSize.ForTk2dCamera_tk2dCamera -= value;
        }

        public static event On.tk2dSpriteCollectionSize.hook_Default Default
        {
            add => On.tk2dSpriteCollectionSize.Default += value;
            remove => On.tk2dSpriteCollectionSize.Default -= value;
        }

        public static event On.tk2dSpriteCollectionSize.hook_CopyFromLegacy CopyFromLegacy
        {
            add => On.tk2dSpriteCollectionSize.CopyFromLegacy += value;
            remove => On.tk2dSpriteCollectionSize.CopyFromLegacy -= value;
        }

        public static event On.tk2dSpriteCollectionSize.hook_CopyFrom CopyFrom
        {
            add => On.tk2dSpriteCollectionSize.CopyFrom += value;
            remove => On.tk2dSpriteCollectionSize.CopyFrom -= value;
        }

        public static event Delegates.get_OrthoSize_WithArgs get_OrthoSize
        {
            add => HookEndpointManager.Add<Delegates.get_OrthoSize_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionSize), "get_OrthoSize"), value);
            remove => HookEndpointManager.Remove<Delegates.get_OrthoSize_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionSize), "get_OrthoSize"), value);
        }

        public static event Delegates.get_TargetHeight_WithArgs get_TargetHeight
        {
            add => HookEndpointManager.Add<Delegates.get_TargetHeight_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionSize), "get_TargetHeight"), value);
            remove => HookEndpointManager.Remove<Delegates.get_TargetHeight_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionSize), "get_TargetHeight"), value);
        }
    }
}