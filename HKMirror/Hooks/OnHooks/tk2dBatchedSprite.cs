using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dBatchedSprite class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dBatchedSprite
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_BoxColliderOffsetZ()
        {
            if (!HookedList.Contains("get_BoxColliderOffsetZ"))
            {
                HookedList.Add("get_BoxColliderOffsetZ");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_BoxColliderOffsetZ"),
                    get_BoxColliderOffsetZ);
            }
        }

        internal static event Delegates.get_BoxColliderOffsetZ_BeforeArgs _beforeget_BoxColliderOffsetZ;
        internal static event Delegates.get_BoxColliderOffsetZ_AfterArgs _afterget_BoxColliderOffsetZ;

        private static float get_BoxColliderOffsetZ(Func<tk2dBatchedSprite, float> orig, tk2dBatchedSprite self)
        {
            Delegates.Params_get_BoxColliderOffsetZ @params = new()
            {
                self = self
            };
            if (_beforeget_BoxColliderOffsetZ != null)
                foreach (Delegates.get_BoxColliderOffsetZ_BeforeArgs toInvoke in _beforeget_BoxColliderOffsetZ
                             .GetInvocationList())
                    try
                    {
                        _beforeget_BoxColliderOffsetZ?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_BoxColliderOffsetZ != null)
                foreach (Delegates.get_BoxColliderOffsetZ_AfterArgs toInvoke in _afterget_BoxColliderOffsetZ
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_BoxColliderOffsetZ.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_BoxColliderOffsetZ()
        {
            if (!HookedList.Contains("set_BoxColliderOffsetZ"))
            {
                HookedList.Add("set_BoxColliderOffsetZ");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_BoxColliderOffsetZ"),
                    set_BoxColliderOffsetZ);
            }
        }

        internal static event Delegates.set_BoxColliderOffsetZ_BeforeArgs _beforeset_BoxColliderOffsetZ;
        internal static event Delegates.set_BoxColliderOffsetZ_AfterArgs _afterset_BoxColliderOffsetZ;

        private static void set_BoxColliderOffsetZ(Action<tk2dBatchedSprite, float> orig, tk2dBatchedSprite self,
            float value)
        {
            Delegates.Params_set_BoxColliderOffsetZ @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_BoxColliderOffsetZ != null)
                foreach (Delegates.set_BoxColliderOffsetZ_BeforeArgs toInvoke in _beforeset_BoxColliderOffsetZ
                             .GetInvocationList())
                    try
                    {
                        _beforeset_BoxColliderOffsetZ?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_BoxColliderOffsetZ != null)
                foreach (Delegates.set_BoxColliderOffsetZ_AfterArgs toInvoke in _afterset_BoxColliderOffsetZ
                             .GetInvocationList())
                    try
                    {
                        _afterset_BoxColliderOffsetZ.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_BoxColliderExtentZ()
        {
            if (!HookedList.Contains("get_BoxColliderExtentZ"))
            {
                HookedList.Add("get_BoxColliderExtentZ");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_BoxColliderExtentZ"),
                    get_BoxColliderExtentZ);
            }
        }

        internal static event Delegates.get_BoxColliderExtentZ_BeforeArgs _beforeget_BoxColliderExtentZ;
        internal static event Delegates.get_BoxColliderExtentZ_AfterArgs _afterget_BoxColliderExtentZ;

        private static float get_BoxColliderExtentZ(Func<tk2dBatchedSprite, float> orig, tk2dBatchedSprite self)
        {
            Delegates.Params_get_BoxColliderExtentZ @params = new()
            {
                self = self
            };
            if (_beforeget_BoxColliderExtentZ != null)
                foreach (Delegates.get_BoxColliderExtentZ_BeforeArgs toInvoke in _beforeget_BoxColliderExtentZ
                             .GetInvocationList())
                    try
                    {
                        _beforeget_BoxColliderExtentZ?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_BoxColliderExtentZ != null)
                foreach (Delegates.get_BoxColliderExtentZ_AfterArgs toInvoke in _afterget_BoxColliderExtentZ
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_BoxColliderExtentZ.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_BoxColliderExtentZ()
        {
            if (!HookedList.Contains("set_BoxColliderExtentZ"))
            {
                HookedList.Add("set_BoxColliderExtentZ");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_BoxColliderExtentZ"),
                    set_BoxColliderExtentZ);
            }
        }

        internal static event Delegates.set_BoxColliderExtentZ_BeforeArgs _beforeset_BoxColliderExtentZ;
        internal static event Delegates.set_BoxColliderExtentZ_AfterArgs _afterset_BoxColliderExtentZ;

        private static void set_BoxColliderExtentZ(Action<tk2dBatchedSprite, float> orig, tk2dBatchedSprite self,
            float value)
        {
            Delegates.Params_set_BoxColliderExtentZ @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_BoxColliderExtentZ != null)
                foreach (Delegates.set_BoxColliderExtentZ_BeforeArgs toInvoke in _beforeset_BoxColliderExtentZ
                             .GetInvocationList())
                    try
                    {
                        _beforeset_BoxColliderExtentZ?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_BoxColliderExtentZ != null)
                foreach (Delegates.set_BoxColliderExtentZ_AfterArgs toInvoke in _afterset_BoxColliderExtentZ
                             .GetInvocationList())
                    try
                    {
                        _afterset_BoxColliderExtentZ.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_FormattedText()
        {
            if (!HookedList.Contains("get_FormattedText"))
            {
                HookedList.Add("get_FormattedText");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_FormattedText"),
                    get_FormattedText);
            }
        }

        internal static event Delegates.get_FormattedText_BeforeArgs _beforeget_FormattedText;
        internal static event Delegates.get_FormattedText_AfterArgs _afterget_FormattedText;

        private static string get_FormattedText(Func<tk2dBatchedSprite, string> orig, tk2dBatchedSprite self)
        {
            Delegates.Params_get_FormattedText @params = new()
            {
                self = self
            };
            if (_beforeget_FormattedText != null)
                foreach (Delegates.get_FormattedText_BeforeArgs toInvoke in
                         _beforeget_FormattedText.GetInvocationList())
                    try
                    {
                        _beforeget_FormattedText?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_FormattedText != null)
                foreach (Delegates.get_FormattedText_AfterArgs toInvoke in _afterget_FormattedText.GetInvocationList())
                    try
                    {
                        retVal = _afterget_FormattedText.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_FormattedText()
        {
            if (!HookedList.Contains("set_FormattedText"))
            {
                HookedList.Add("set_FormattedText");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_FormattedText"),
                    set_FormattedText);
            }
        }

        internal static event Delegates.set_FormattedText_BeforeArgs _beforeset_FormattedText;
        internal static event Delegates.set_FormattedText_AfterArgs _afterset_FormattedText;

        private static void set_FormattedText(Action<tk2dBatchedSprite, string> orig, tk2dBatchedSprite self,
            string value)
        {
            Delegates.Params_set_FormattedText @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_FormattedText != null)
                foreach (Delegates.set_FormattedText_BeforeArgs toInvoke in
                         _beforeset_FormattedText.GetInvocationList())
                    try
                    {
                        _beforeset_FormattedText?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_FormattedText != null)
                foreach (Delegates.set_FormattedText_AfterArgs toInvoke in _afterset_FormattedText.GetInvocationList())
                    try
                    {
                        _afterset_FormattedText.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_ClippedSpriteRegionBottomLeft()
        {
            if (!HookedList.Contains("get_ClippedSpriteRegionBottomLeft"))
            {
                HookedList.Add("get_ClippedSpriteRegionBottomLeft");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_ClippedSpriteRegionBottomLeft"),
                    get_ClippedSpriteRegionBottomLeft);
            }
        }

        internal static event Delegates.get_ClippedSpriteRegionBottomLeft_BeforeArgs
            _beforeget_ClippedSpriteRegionBottomLeft;

        internal static event Delegates.get_ClippedSpriteRegionBottomLeft_AfterArgs
            _afterget_ClippedSpriteRegionBottomLeft;

        private static Vector2 get_ClippedSpriteRegionBottomLeft(Func<tk2dBatchedSprite, Vector2> orig,
            tk2dBatchedSprite self)
        {
            Delegates.Params_get_ClippedSpriteRegionBottomLeft @params = new()
            {
                self = self
            };
            if (_beforeget_ClippedSpriteRegionBottomLeft != null)
                foreach (Delegates.get_ClippedSpriteRegionBottomLeft_BeforeArgs toInvoke in
                         _beforeget_ClippedSpriteRegionBottomLeft.GetInvocationList())
                    try
                    {
                        _beforeget_ClippedSpriteRegionBottomLeft?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ClippedSpriteRegionBottomLeft != null)
                foreach (Delegates.get_ClippedSpriteRegionBottomLeft_AfterArgs toInvoke in
                         _afterget_ClippedSpriteRegionBottomLeft.GetInvocationList())
                    try
                    {
                        retVal = _afterget_ClippedSpriteRegionBottomLeft.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_ClippedSpriteRegionBottomLeft()
        {
            if (!HookedList.Contains("set_ClippedSpriteRegionBottomLeft"))
            {
                HookedList.Add("set_ClippedSpriteRegionBottomLeft");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_ClippedSpriteRegionBottomLeft"),
                    set_ClippedSpriteRegionBottomLeft);
            }
        }

        internal static event Delegates.set_ClippedSpriteRegionBottomLeft_BeforeArgs
            _beforeset_ClippedSpriteRegionBottomLeft;

        internal static event Delegates.set_ClippedSpriteRegionBottomLeft_AfterArgs
            _afterset_ClippedSpriteRegionBottomLeft;

        private static void set_ClippedSpriteRegionBottomLeft(Action<tk2dBatchedSprite, Vector2> orig,
            tk2dBatchedSprite self, Vector2 value)
        {
            Delegates.Params_set_ClippedSpriteRegionBottomLeft @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_ClippedSpriteRegionBottomLeft != null)
                foreach (Delegates.set_ClippedSpriteRegionBottomLeft_BeforeArgs toInvoke in
                         _beforeset_ClippedSpriteRegionBottomLeft.GetInvocationList())
                    try
                    {
                        _beforeset_ClippedSpriteRegionBottomLeft?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ClippedSpriteRegionBottomLeft != null)
                foreach (Delegates.set_ClippedSpriteRegionBottomLeft_AfterArgs toInvoke in
                         _afterset_ClippedSpriteRegionBottomLeft.GetInvocationList())
                    try
                    {
                        _afterset_ClippedSpriteRegionBottomLeft.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_ClippedSpriteRegionTopRight()
        {
            if (!HookedList.Contains("get_ClippedSpriteRegionTopRight"))
            {
                HookedList.Add("get_ClippedSpriteRegionTopRight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_ClippedSpriteRegionTopRight"),
                    get_ClippedSpriteRegionTopRight);
            }
        }

        internal static event Delegates.get_ClippedSpriteRegionTopRight_BeforeArgs
            _beforeget_ClippedSpriteRegionTopRight;

        internal static event Delegates.get_ClippedSpriteRegionTopRight_AfterArgs _afterget_ClippedSpriteRegionTopRight;

        private static Vector2 get_ClippedSpriteRegionTopRight(Func<tk2dBatchedSprite, Vector2> orig,
            tk2dBatchedSprite self)
        {
            Delegates.Params_get_ClippedSpriteRegionTopRight @params = new()
            {
                self = self
            };
            if (_beforeget_ClippedSpriteRegionTopRight != null)
                foreach (Delegates.get_ClippedSpriteRegionTopRight_BeforeArgs toInvoke in
                         _beforeget_ClippedSpriteRegionTopRight.GetInvocationList())
                    try
                    {
                        _beforeget_ClippedSpriteRegionTopRight?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ClippedSpriteRegionTopRight != null)
                foreach (Delegates.get_ClippedSpriteRegionTopRight_AfterArgs toInvoke in
                         _afterget_ClippedSpriteRegionTopRight.GetInvocationList())
                    try
                    {
                        retVal = _afterget_ClippedSpriteRegionTopRight.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_ClippedSpriteRegionTopRight()
        {
            if (!HookedList.Contains("set_ClippedSpriteRegionTopRight"))
            {
                HookedList.Add("set_ClippedSpriteRegionTopRight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_ClippedSpriteRegionTopRight"),
                    set_ClippedSpriteRegionTopRight);
            }
        }

        internal static event Delegates.set_ClippedSpriteRegionTopRight_BeforeArgs
            _beforeset_ClippedSpriteRegionTopRight;

        internal static event Delegates.set_ClippedSpriteRegionTopRight_AfterArgs _afterset_ClippedSpriteRegionTopRight;

        private static void set_ClippedSpriteRegionTopRight(Action<tk2dBatchedSprite, Vector2> orig,
            tk2dBatchedSprite self, Vector2 value)
        {
            Delegates.Params_set_ClippedSpriteRegionTopRight @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_ClippedSpriteRegionTopRight != null)
                foreach (Delegates.set_ClippedSpriteRegionTopRight_BeforeArgs toInvoke in
                         _beforeset_ClippedSpriteRegionTopRight.GetInvocationList())
                    try
                    {
                        _beforeset_ClippedSpriteRegionTopRight?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ClippedSpriteRegionTopRight != null)
                foreach (Delegates.set_ClippedSpriteRegionTopRight_AfterArgs toInvoke in
                         _afterset_ClippedSpriteRegionTopRight.GetInvocationList())
                    try
                    {
                        _afterset_ClippedSpriteRegionTopRight.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_SlicedSpriteBorderBottomLeft()
        {
            if (!HookedList.Contains("get_SlicedSpriteBorderBottomLeft"))
            {
                HookedList.Add("get_SlicedSpriteBorderBottomLeft");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_SlicedSpriteBorderBottomLeft"),
                    get_SlicedSpriteBorderBottomLeft);
            }
        }

        internal static event Delegates.get_SlicedSpriteBorderBottomLeft_BeforeArgs
            _beforeget_SlicedSpriteBorderBottomLeft;

        internal static event Delegates.get_SlicedSpriteBorderBottomLeft_AfterArgs
            _afterget_SlicedSpriteBorderBottomLeft;

        private static Vector2 get_SlicedSpriteBorderBottomLeft(Func<tk2dBatchedSprite, Vector2> orig,
            tk2dBatchedSprite self)
        {
            Delegates.Params_get_SlicedSpriteBorderBottomLeft @params = new()
            {
                self = self
            };
            if (_beforeget_SlicedSpriteBorderBottomLeft != null)
                foreach (Delegates.get_SlicedSpriteBorderBottomLeft_BeforeArgs toInvoke in
                         _beforeget_SlicedSpriteBorderBottomLeft.GetInvocationList())
                    try
                    {
                        _beforeget_SlicedSpriteBorderBottomLeft?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SlicedSpriteBorderBottomLeft != null)
                foreach (Delegates.get_SlicedSpriteBorderBottomLeft_AfterArgs toInvoke in
                         _afterget_SlicedSpriteBorderBottomLeft.GetInvocationList())
                    try
                    {
                        retVal = _afterget_SlicedSpriteBorderBottomLeft.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_SlicedSpriteBorderBottomLeft()
        {
            if (!HookedList.Contains("set_SlicedSpriteBorderBottomLeft"))
            {
                HookedList.Add("set_SlicedSpriteBorderBottomLeft");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_SlicedSpriteBorderBottomLeft"),
                    set_SlicedSpriteBorderBottomLeft);
            }
        }

        internal static event Delegates.set_SlicedSpriteBorderBottomLeft_BeforeArgs
            _beforeset_SlicedSpriteBorderBottomLeft;

        internal static event Delegates.set_SlicedSpriteBorderBottomLeft_AfterArgs
            _afterset_SlicedSpriteBorderBottomLeft;

        private static void set_SlicedSpriteBorderBottomLeft(Action<tk2dBatchedSprite, Vector2> orig,
            tk2dBatchedSprite self, Vector2 value)
        {
            Delegates.Params_set_SlicedSpriteBorderBottomLeft @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_SlicedSpriteBorderBottomLeft != null)
                foreach (Delegates.set_SlicedSpriteBorderBottomLeft_BeforeArgs toInvoke in
                         _beforeset_SlicedSpriteBorderBottomLeft.GetInvocationList())
                    try
                    {
                        _beforeset_SlicedSpriteBorderBottomLeft?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_SlicedSpriteBorderBottomLeft != null)
                foreach (Delegates.set_SlicedSpriteBorderBottomLeft_AfterArgs toInvoke in
                         _afterset_SlicedSpriteBorderBottomLeft.GetInvocationList())
                    try
                    {
                        _afterset_SlicedSpriteBorderBottomLeft.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_SlicedSpriteBorderTopRight()
        {
            if (!HookedList.Contains("get_SlicedSpriteBorderTopRight"))
            {
                HookedList.Add("get_SlicedSpriteBorderTopRight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_SlicedSpriteBorderTopRight"),
                    get_SlicedSpriteBorderTopRight);
            }
        }

        internal static event Delegates.get_SlicedSpriteBorderTopRight_BeforeArgs _beforeget_SlicedSpriteBorderTopRight;
        internal static event Delegates.get_SlicedSpriteBorderTopRight_AfterArgs _afterget_SlicedSpriteBorderTopRight;

        private static Vector2 get_SlicedSpriteBorderTopRight(Func<tk2dBatchedSprite, Vector2> orig,
            tk2dBatchedSprite self)
        {
            Delegates.Params_get_SlicedSpriteBorderTopRight @params = new()
            {
                self = self
            };
            if (_beforeget_SlicedSpriteBorderTopRight != null)
                foreach (Delegates.get_SlicedSpriteBorderTopRight_BeforeArgs toInvoke in
                         _beforeget_SlicedSpriteBorderTopRight.GetInvocationList())
                    try
                    {
                        _beforeget_SlicedSpriteBorderTopRight?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SlicedSpriteBorderTopRight != null)
                foreach (Delegates.get_SlicedSpriteBorderTopRight_AfterArgs toInvoke in
                         _afterget_SlicedSpriteBorderTopRight.GetInvocationList())
                    try
                    {
                        retVal = _afterget_SlicedSpriteBorderTopRight.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_SlicedSpriteBorderTopRight()
        {
            if (!HookedList.Contains("set_SlicedSpriteBorderTopRight"))
            {
                HookedList.Add("set_SlicedSpriteBorderTopRight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_SlicedSpriteBorderTopRight"),
                    set_SlicedSpriteBorderTopRight);
            }
        }

        internal static event Delegates.set_SlicedSpriteBorderTopRight_BeforeArgs _beforeset_SlicedSpriteBorderTopRight;
        internal static event Delegates.set_SlicedSpriteBorderTopRight_AfterArgs _afterset_SlicedSpriteBorderTopRight;

        private static void set_SlicedSpriteBorderTopRight(Action<tk2dBatchedSprite, Vector2> orig,
            tk2dBatchedSprite self, Vector2 value)
        {
            Delegates.Params_set_SlicedSpriteBorderTopRight @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_SlicedSpriteBorderTopRight != null)
                foreach (Delegates.set_SlicedSpriteBorderTopRight_BeforeArgs toInvoke in
                         _beforeset_SlicedSpriteBorderTopRight.GetInvocationList())
                    try
                    {
                        _beforeset_SlicedSpriteBorderTopRight?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_SlicedSpriteBorderTopRight != null)
                foreach (Delegates.set_SlicedSpriteBorderTopRight_AfterArgs toInvoke in
                         _afterset_SlicedSpriteBorderTopRight.GetInvocationList())
                    try
                    {
                        _afterset_SlicedSpriteBorderTopRight.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_Dimensions()
        {
            if (!HookedList.Contains("get_Dimensions"))
            {
                HookedList.Add("get_Dimensions");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_Dimensions"), get_Dimensions);
            }
        }

        internal static event Delegates.get_Dimensions_BeforeArgs _beforeget_Dimensions;
        internal static event Delegates.get_Dimensions_AfterArgs _afterget_Dimensions;

        private static Vector2 get_Dimensions(Func<tk2dBatchedSprite, Vector2> orig, tk2dBatchedSprite self)
        {
            Delegates.Params_get_Dimensions @params = new()
            {
                self = self
            };
            if (_beforeget_Dimensions != null)
                foreach (Delegates.get_Dimensions_BeforeArgs toInvoke in _beforeget_Dimensions.GetInvocationList())
                    try
                    {
                        _beforeget_Dimensions?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Dimensions != null)
                foreach (Delegates.get_Dimensions_AfterArgs toInvoke in _afterget_Dimensions.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Dimensions.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Dimensions()
        {
            if (!HookedList.Contains("set_Dimensions"))
            {
                HookedList.Add("set_Dimensions");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_Dimensions"), set_Dimensions);
            }
        }

        internal static event Delegates.set_Dimensions_BeforeArgs _beforeset_Dimensions;
        internal static event Delegates.set_Dimensions_AfterArgs _afterset_Dimensions;

        private static void set_Dimensions(Action<tk2dBatchedSprite, Vector2> orig, tk2dBatchedSprite self,
            Vector2 value)
        {
            Delegates.Params_set_Dimensions @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Dimensions != null)
                foreach (Delegates.set_Dimensions_BeforeArgs toInvoke in _beforeset_Dimensions.GetInvocationList())
                    try
                    {
                        _beforeset_Dimensions?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Dimensions != null)
                foreach (Delegates.set_Dimensions_AfterArgs toInvoke in _afterset_Dimensions.GetInvocationList())
                    try
                    {
                        _afterset_Dimensions.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_IsDrawn()
        {
            if (!HookedList.Contains("get_IsDrawn"))
            {
                HookedList.Add("get_IsDrawn");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_IsDrawn"), get_IsDrawn);
            }
        }

        internal static event Delegates.get_IsDrawn_BeforeArgs _beforeget_IsDrawn;
        internal static event Delegates.get_IsDrawn_AfterArgs _afterget_IsDrawn;

        private static bool get_IsDrawn(Func<tk2dBatchedSprite, bool> orig, tk2dBatchedSprite self)
        {
            Delegates.Params_get_IsDrawn @params = new()
            {
                self = self
            };
            if (_beforeget_IsDrawn != null)
                foreach (Delegates.get_IsDrawn_BeforeArgs toInvoke in _beforeget_IsDrawn.GetInvocationList())
                    try
                    {
                        _beforeget_IsDrawn?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsDrawn != null)
                foreach (Delegates.get_IsDrawn_AfterArgs toInvoke in _afterget_IsDrawn.GetInvocationList())
                    try
                    {
                        retVal = _afterget_IsDrawn.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCheckFlag()
        {
            if (!HookedList.Contains("CheckFlag"))
            {
                HookedList.Add("CheckFlag");
                On.tk2dBatchedSprite.CheckFlag += CheckFlag;
            }
        }

        internal static event Delegates.CheckFlag_BeforeArgs _beforeCheckFlag;
        internal static event Delegates.CheckFlag_AfterArgs _afterCheckFlag;

        private static bool CheckFlag(On.tk2dBatchedSprite.orig_CheckFlag orig, tk2dBatchedSprite self,
            tk2dBatchedSprite.Flags mask)
        {
            Delegates.Params_CheckFlag @params = new()
            {
                self = self, mask = mask
            };
            if (_beforeCheckFlag != null)
                foreach (Delegates.CheckFlag_BeforeArgs toInvoke in _beforeCheckFlag.GetInvocationList())
                    try
                    {
                        _beforeCheckFlag?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            mask = @params.mask;
            var retVal = orig(self, mask);
            if (_afterCheckFlag != null)
                foreach (Delegates.CheckFlag_AfterArgs toInvoke in _afterCheckFlag.GetInvocationList())
                    try
                    {
                        retVal = _afterCheckFlag.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetFlag()
        {
            if (!HookedList.Contains("SetFlag"))
            {
                HookedList.Add("SetFlag");
                On.tk2dBatchedSprite.SetFlag += SetFlag;
            }
        }

        internal static event Delegates.SetFlag_BeforeArgs _beforeSetFlag;
        internal static event Delegates.SetFlag_AfterArgs _afterSetFlag;

        private static void SetFlag(On.tk2dBatchedSprite.orig_SetFlag orig, tk2dBatchedSprite self,
            tk2dBatchedSprite.Flags mask, bool value)
        {
            Delegates.Params_SetFlag @params = new()
            {
                self = self, mask = mask, value = value
            };
            if (_beforeSetFlag != null)
                foreach (Delegates.SetFlag_BeforeArgs toInvoke in _beforeSetFlag.GetInvocationList())
                    try
                    {
                        _beforeSetFlag?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            mask = @params.mask;
            value = @params.value;
            orig(self, mask, value);
            if (_afterSetFlag != null)
                foreach (Delegates.SetFlag_AfterArgs toInvoke in _afterSetFlag.GetInvocationList())
                    try
                    {
                        _afterSetFlag.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_CachedBoundsCenter()
        {
            if (!HookedList.Contains("get_CachedBoundsCenter"))
            {
                HookedList.Add("get_CachedBoundsCenter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_CachedBoundsCenter"),
                    get_CachedBoundsCenter);
            }
        }

        internal static event Delegates.get_CachedBoundsCenter_BeforeArgs _beforeget_CachedBoundsCenter;
        internal static event Delegates.get_CachedBoundsCenter_AfterArgs _afterget_CachedBoundsCenter;

        private static Vector3 get_CachedBoundsCenter(Func<tk2dBatchedSprite, Vector3> orig, tk2dBatchedSprite self)
        {
            Delegates.Params_get_CachedBoundsCenter @params = new()
            {
                self = self
            };
            if (_beforeget_CachedBoundsCenter != null)
                foreach (Delegates.get_CachedBoundsCenter_BeforeArgs toInvoke in _beforeget_CachedBoundsCenter
                             .GetInvocationList())
                    try
                    {
                        _beforeget_CachedBoundsCenter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_CachedBoundsCenter != null)
                foreach (Delegates.get_CachedBoundsCenter_AfterArgs toInvoke in _afterget_CachedBoundsCenter
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_CachedBoundsCenter.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_CachedBoundsCenter()
        {
            if (!HookedList.Contains("set_CachedBoundsCenter"))
            {
                HookedList.Add("set_CachedBoundsCenter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_CachedBoundsCenter"),
                    set_CachedBoundsCenter);
            }
        }

        internal static event Delegates.set_CachedBoundsCenter_BeforeArgs _beforeset_CachedBoundsCenter;
        internal static event Delegates.set_CachedBoundsCenter_AfterArgs _afterset_CachedBoundsCenter;

        private static void set_CachedBoundsCenter(Action<tk2dBatchedSprite, Vector3> orig, tk2dBatchedSprite self,
            Vector3 value)
        {
            Delegates.Params_set_CachedBoundsCenter @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_CachedBoundsCenter != null)
                foreach (Delegates.set_CachedBoundsCenter_BeforeArgs toInvoke in _beforeset_CachedBoundsCenter
                             .GetInvocationList())
                    try
                    {
                        _beforeset_CachedBoundsCenter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_CachedBoundsCenter != null)
                foreach (Delegates.set_CachedBoundsCenter_AfterArgs toInvoke in _afterset_CachedBoundsCenter
                             .GetInvocationList())
                    try
                    {
                        _afterset_CachedBoundsCenter.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_CachedBoundsExtents()
        {
            if (!HookedList.Contains("get_CachedBoundsExtents"))
            {
                HookedList.Add("get_CachedBoundsExtents");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_CachedBoundsExtents"),
                    get_CachedBoundsExtents);
            }
        }

        internal static event Delegates.get_CachedBoundsExtents_BeforeArgs _beforeget_CachedBoundsExtents;
        internal static event Delegates.get_CachedBoundsExtents_AfterArgs _afterget_CachedBoundsExtents;

        private static Vector3 get_CachedBoundsExtents(Func<tk2dBatchedSprite, Vector3> orig, tk2dBatchedSprite self)
        {
            Delegates.Params_get_CachedBoundsExtents @params = new()
            {
                self = self
            };
            if (_beforeget_CachedBoundsExtents != null)
                foreach (Delegates.get_CachedBoundsExtents_BeforeArgs toInvoke in _beforeget_CachedBoundsExtents
                             .GetInvocationList())
                    try
                    {
                        _beforeget_CachedBoundsExtents?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_CachedBoundsExtents != null)
                foreach (Delegates.get_CachedBoundsExtents_AfterArgs toInvoke in _afterget_CachedBoundsExtents
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_CachedBoundsExtents.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_CachedBoundsExtents()
        {
            if (!HookedList.Contains("set_CachedBoundsExtents"))
            {
                HookedList.Add("set_CachedBoundsExtents");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_CachedBoundsExtents"),
                    set_CachedBoundsExtents);
            }
        }

        internal static event Delegates.set_CachedBoundsExtents_BeforeArgs _beforeset_CachedBoundsExtents;
        internal static event Delegates.set_CachedBoundsExtents_AfterArgs _afterset_CachedBoundsExtents;

        private static void set_CachedBoundsExtents(Action<tk2dBatchedSprite, Vector3> orig, tk2dBatchedSprite self,
            Vector3 value)
        {
            Delegates.Params_set_CachedBoundsExtents @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_CachedBoundsExtents != null)
                foreach (Delegates.set_CachedBoundsExtents_BeforeArgs toInvoke in _beforeset_CachedBoundsExtents
                             .GetInvocationList())
                    try
                    {
                        _beforeset_CachedBoundsExtents?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_CachedBoundsExtents != null)
                foreach (Delegates.set_CachedBoundsExtents_AfterArgs toInvoke in _afterset_CachedBoundsExtents
                             .GetInvocationList())
                    try
                    {
                        _afterset_CachedBoundsExtents.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetSpriteDefinition()
        {
            if (!HookedList.Contains("GetSpriteDefinition"))
            {
                HookedList.Add("GetSpriteDefinition");
                On.tk2dBatchedSprite.GetSpriteDefinition += GetSpriteDefinition;
            }
        }

        internal static event Delegates.GetSpriteDefinition_BeforeArgs _beforeGetSpriteDefinition;
        internal static event Delegates.GetSpriteDefinition_AfterArgs _afterGetSpriteDefinition;

        private static tk2dSpriteDefinition GetSpriteDefinition(On.tk2dBatchedSprite.orig_GetSpriteDefinition orig,
            tk2dBatchedSprite self)
        {
            Delegates.Params_GetSpriteDefinition @params = new()
            {
                self = self
            };
            if (_beforeGetSpriteDefinition != null)
                foreach (Delegates.GetSpriteDefinition_BeforeArgs toInvoke in _beforeGetSpriteDefinition
                             .GetInvocationList())
                    try
                    {
                        _beforeGetSpriteDefinition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetSpriteDefinition != null)
                foreach (Delegates.GetSpriteDefinition_AfterArgs toInvoke in
                         _afterGetSpriteDefinition.GetInvocationList())
                    try
                    {
                        retVal = _afterGetSpriteDefinition.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate bool CheckFlag_AfterArgs(Params_CheckFlag args, bool ret);

        public delegate void CheckFlag_BeforeArgs(Params_CheckFlag args);

        public delegate bool CheckFlag_WithArgs(Func<tk2dBatchedSprite, tk2dBatchedSprite.Flags, bool> orig,
            tk2dBatchedSprite self, tk2dBatchedSprite.Flags mask);

        public delegate float get_BoxColliderExtentZ_AfterArgs(Params_get_BoxColliderExtentZ args, float ret);

        public delegate void get_BoxColliderExtentZ_BeforeArgs(Params_get_BoxColliderExtentZ args);

        public delegate float get_BoxColliderExtentZ_WithArgs(Func<tk2dBatchedSprite, float> orig,
            tk2dBatchedSprite self);

        public delegate float get_BoxColliderOffsetZ_AfterArgs(Params_get_BoxColliderOffsetZ args, float ret);

        public delegate void get_BoxColliderOffsetZ_BeforeArgs(Params_get_BoxColliderOffsetZ args);

        public delegate float get_BoxColliderOffsetZ_WithArgs(Func<tk2dBatchedSprite, float> orig,
            tk2dBatchedSprite self);

        public delegate Vector3 get_CachedBoundsCenter_AfterArgs(Params_get_CachedBoundsCenter args, Vector3 ret);

        public delegate void get_CachedBoundsCenter_BeforeArgs(Params_get_CachedBoundsCenter args);

        public delegate Vector3 get_CachedBoundsCenter_WithArgs(Func<tk2dBatchedSprite, Vector3> orig,
            tk2dBatchedSprite self);

        public delegate Vector3 get_CachedBoundsExtents_AfterArgs(Params_get_CachedBoundsExtents args, Vector3 ret);

        public delegate void get_CachedBoundsExtents_BeforeArgs(Params_get_CachedBoundsExtents args);

        public delegate Vector3 get_CachedBoundsExtents_WithArgs(Func<tk2dBatchedSprite, Vector3> orig,
            tk2dBatchedSprite self);

        public delegate Vector2 get_ClippedSpriteRegionBottomLeft_AfterArgs(
            Params_get_ClippedSpriteRegionBottomLeft args, Vector2 ret);

        public delegate void
            get_ClippedSpriteRegionBottomLeft_BeforeArgs(Params_get_ClippedSpriteRegionBottomLeft args);

        public delegate Vector2 get_ClippedSpriteRegionBottomLeft_WithArgs(Func<tk2dBatchedSprite, Vector2> orig,
            tk2dBatchedSprite self);

        public delegate Vector2 get_ClippedSpriteRegionTopRight_AfterArgs(Params_get_ClippedSpriteRegionTopRight args,
            Vector2 ret);

        public delegate void get_ClippedSpriteRegionTopRight_BeforeArgs(Params_get_ClippedSpriteRegionTopRight args);

        public delegate Vector2 get_ClippedSpriteRegionTopRight_WithArgs(Func<tk2dBatchedSprite, Vector2> orig,
            tk2dBatchedSprite self);

        public delegate Vector2 get_Dimensions_AfterArgs(Params_get_Dimensions args, Vector2 ret);

        public delegate void get_Dimensions_BeforeArgs(Params_get_Dimensions args);

        public delegate Vector2 get_Dimensions_WithArgs(Func<tk2dBatchedSprite, Vector2> orig, tk2dBatchedSprite self);

        public delegate string get_FormattedText_AfterArgs(Params_get_FormattedText args, string ret);

        public delegate void get_FormattedText_BeforeArgs(Params_get_FormattedText args);

        public delegate string get_FormattedText_WithArgs(Func<tk2dBatchedSprite, string> orig, tk2dBatchedSprite self);

        public delegate bool get_IsDrawn_AfterArgs(Params_get_IsDrawn args, bool ret);

        public delegate void get_IsDrawn_BeforeArgs(Params_get_IsDrawn args);

        public delegate bool get_IsDrawn_WithArgs(Func<tk2dBatchedSprite, bool> orig, tk2dBatchedSprite self);

        public delegate Vector2 get_SlicedSpriteBorderBottomLeft_AfterArgs(Params_get_SlicedSpriteBorderBottomLeft args,
            Vector2 ret);

        public delegate void get_SlicedSpriteBorderBottomLeft_BeforeArgs(Params_get_SlicedSpriteBorderBottomLeft args);

        public delegate Vector2 get_SlicedSpriteBorderBottomLeft_WithArgs(Func<tk2dBatchedSprite, Vector2> orig,
            tk2dBatchedSprite self);

        public delegate Vector2 get_SlicedSpriteBorderTopRight_AfterArgs(Params_get_SlicedSpriteBorderTopRight args,
            Vector2 ret);

        public delegate void get_SlicedSpriteBorderTopRight_BeforeArgs(Params_get_SlicedSpriteBorderTopRight args);

        public delegate Vector2 get_SlicedSpriteBorderTopRight_WithArgs(Func<tk2dBatchedSprite, Vector2> orig,
            tk2dBatchedSprite self);

        public delegate tk2dSpriteDefinition GetSpriteDefinition_AfterArgs(Params_GetSpriteDefinition args,
            tk2dSpriteDefinition ret);

        public delegate void GetSpriteDefinition_BeforeArgs(Params_GetSpriteDefinition args);

        public delegate tk2dSpriteDefinition GetSpriteDefinition_WithArgs(
            Func<tk2dBatchedSprite, tk2dSpriteDefinition> orig, tk2dBatchedSprite self);

        public delegate void set_BoxColliderExtentZ_AfterArgs(Params_set_BoxColliderExtentZ args);

        public delegate void set_BoxColliderExtentZ_BeforeArgs(Params_set_BoxColliderExtentZ args);

        public delegate void set_BoxColliderExtentZ_WithArgs(Action<tk2dBatchedSprite, float> orig,
            tk2dBatchedSprite self, float value);

        public delegate void set_BoxColliderOffsetZ_AfterArgs(Params_set_BoxColliderOffsetZ args);

        public delegate void set_BoxColliderOffsetZ_BeforeArgs(Params_set_BoxColliderOffsetZ args);

        public delegate void set_BoxColliderOffsetZ_WithArgs(Action<tk2dBatchedSprite, float> orig,
            tk2dBatchedSprite self, float value);

        public delegate void set_CachedBoundsCenter_AfterArgs(Params_set_CachedBoundsCenter args);

        public delegate void set_CachedBoundsCenter_BeforeArgs(Params_set_CachedBoundsCenter args);

        public delegate void set_CachedBoundsCenter_WithArgs(Action<tk2dBatchedSprite, Vector3> orig,
            tk2dBatchedSprite self, Vector3 value);

        public delegate void set_CachedBoundsExtents_AfterArgs(Params_set_CachedBoundsExtents args);

        public delegate void set_CachedBoundsExtents_BeforeArgs(Params_set_CachedBoundsExtents args);

        public delegate void set_CachedBoundsExtents_WithArgs(Action<tk2dBatchedSprite, Vector3> orig,
            tk2dBatchedSprite self, Vector3 value);

        public delegate void set_ClippedSpriteRegionBottomLeft_AfterArgs(Params_set_ClippedSpriteRegionBottomLeft args);

        public delegate void
            set_ClippedSpriteRegionBottomLeft_BeforeArgs(Params_set_ClippedSpriteRegionBottomLeft args);

        public delegate void set_ClippedSpriteRegionBottomLeft_WithArgs(Action<tk2dBatchedSprite, Vector2> orig,
            tk2dBatchedSprite self, Vector2 value);

        public delegate void set_ClippedSpriteRegionTopRight_AfterArgs(Params_set_ClippedSpriteRegionTopRight args);

        public delegate void set_ClippedSpriteRegionTopRight_BeforeArgs(Params_set_ClippedSpriteRegionTopRight args);

        public delegate void set_ClippedSpriteRegionTopRight_WithArgs(Action<tk2dBatchedSprite, Vector2> orig,
            tk2dBatchedSprite self, Vector2 value);

        public delegate void set_Dimensions_AfterArgs(Params_set_Dimensions args);

        public delegate void set_Dimensions_BeforeArgs(Params_set_Dimensions args);

        public delegate void set_Dimensions_WithArgs(Action<tk2dBatchedSprite, Vector2> orig, tk2dBatchedSprite self,
            Vector2 value);

        public delegate void set_FormattedText_AfterArgs(Params_set_FormattedText args);

        public delegate void set_FormattedText_BeforeArgs(Params_set_FormattedText args);

        public delegate void set_FormattedText_WithArgs(Action<tk2dBatchedSprite, string> orig, tk2dBatchedSprite self,
            string value);

        public delegate void set_SlicedSpriteBorderBottomLeft_AfterArgs(Params_set_SlicedSpriteBorderBottomLeft args);

        public delegate void set_SlicedSpriteBorderBottomLeft_BeforeArgs(Params_set_SlicedSpriteBorderBottomLeft args);

        public delegate void set_SlicedSpriteBorderBottomLeft_WithArgs(Action<tk2dBatchedSprite, Vector2> orig,
            tk2dBatchedSprite self, Vector2 value);

        public delegate void set_SlicedSpriteBorderTopRight_AfterArgs(Params_set_SlicedSpriteBorderTopRight args);

        public delegate void set_SlicedSpriteBorderTopRight_BeforeArgs(Params_set_SlicedSpriteBorderTopRight args);

        public delegate void set_SlicedSpriteBorderTopRight_WithArgs(Action<tk2dBatchedSprite, Vector2> orig,
            tk2dBatchedSprite self, Vector2 value);

        public delegate void SetFlag_AfterArgs(Params_SetFlag args);

        public delegate void SetFlag_BeforeArgs(Params_SetFlag args);

        public delegate void SetFlag_WithArgs(Action<tk2dBatchedSprite, tk2dBatchedSprite.Flags, bool> orig,
            tk2dBatchedSprite self, tk2dBatchedSprite.Flags mask, bool value);

        public sealed class Params_get_BoxColliderOffsetZ
        {
            public tk2dBatchedSprite self;
        }

        public sealed class Params_set_BoxColliderOffsetZ
        {
            public tk2dBatchedSprite self;
            public float value;
        }

        public sealed class Params_get_BoxColliderExtentZ
        {
            public tk2dBatchedSprite self;
        }

        public sealed class Params_set_BoxColliderExtentZ
        {
            public tk2dBatchedSprite self;
            public float value;
        }

        public sealed class Params_get_FormattedText
        {
            public tk2dBatchedSprite self;
        }

        public sealed class Params_set_FormattedText
        {
            public tk2dBatchedSprite self;
            public string value;
        }

        public sealed class Params_get_ClippedSpriteRegionBottomLeft
        {
            public tk2dBatchedSprite self;
        }

        public sealed class Params_set_ClippedSpriteRegionBottomLeft
        {
            public tk2dBatchedSprite self;
            public Vector2 value;
        }

        public sealed class Params_get_ClippedSpriteRegionTopRight
        {
            public tk2dBatchedSprite self;
        }

        public sealed class Params_set_ClippedSpriteRegionTopRight
        {
            public tk2dBatchedSprite self;
            public Vector2 value;
        }

        public sealed class Params_get_SlicedSpriteBorderBottomLeft
        {
            public tk2dBatchedSprite self;
        }

        public sealed class Params_set_SlicedSpriteBorderBottomLeft
        {
            public tk2dBatchedSprite self;
            public Vector2 value;
        }

        public sealed class Params_get_SlicedSpriteBorderTopRight
        {
            public tk2dBatchedSprite self;
        }

        public sealed class Params_set_SlicedSpriteBorderTopRight
        {
            public tk2dBatchedSprite self;
            public Vector2 value;
        }

        public sealed class Params_get_Dimensions
        {
            public tk2dBatchedSprite self;
        }

        public sealed class Params_set_Dimensions
        {
            public tk2dBatchedSprite self;
            public Vector2 value;
        }

        public sealed class Params_get_IsDrawn
        {
            public tk2dBatchedSprite self;
        }

        public sealed class Params_CheckFlag
        {
            public tk2dBatchedSprite.Flags mask;
            public tk2dBatchedSprite self;
        }

        public sealed class Params_SetFlag
        {
            public tk2dBatchedSprite.Flags mask;
            public tk2dBatchedSprite self;
            public bool value;
        }

        public sealed class Params_get_CachedBoundsCenter
        {
            public tk2dBatchedSprite self;
        }

        public sealed class Params_set_CachedBoundsCenter
        {
            public tk2dBatchedSprite self;
            public Vector3 value;
        }

        public sealed class Params_get_CachedBoundsExtents
        {
            public tk2dBatchedSprite self;
        }

        public sealed class Params_set_CachedBoundsExtents
        {
            public tk2dBatchedSprite self;
            public Vector3 value;
        }

        public sealed class Params_GetSpriteDefinition
        {
            public tk2dBatchedSprite self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_BoxColliderOffsetZ_BeforeArgs get_BoxColliderOffsetZ
        {
            add
            {
                HookHandler._beforeget_BoxColliderOffsetZ += value;
                HookHandler.Hookget_BoxColliderOffsetZ();
            }
            remove => HookHandler._beforeget_BoxColliderOffsetZ -= value;
        }

        public static event Delegates.set_BoxColliderOffsetZ_BeforeArgs set_BoxColliderOffsetZ
        {
            add
            {
                HookHandler._beforeset_BoxColliderOffsetZ += value;
                HookHandler.Hookset_BoxColliderOffsetZ();
            }
            remove => HookHandler._beforeset_BoxColliderOffsetZ -= value;
        }

        public static event Delegates.get_BoxColliderExtentZ_BeforeArgs get_BoxColliderExtentZ
        {
            add
            {
                HookHandler._beforeget_BoxColliderExtentZ += value;
                HookHandler.Hookget_BoxColliderExtentZ();
            }
            remove => HookHandler._beforeget_BoxColliderExtentZ -= value;
        }

        public static event Delegates.set_BoxColliderExtentZ_BeforeArgs set_BoxColliderExtentZ
        {
            add
            {
                HookHandler._beforeset_BoxColliderExtentZ += value;
                HookHandler.Hookset_BoxColliderExtentZ();
            }
            remove => HookHandler._beforeset_BoxColliderExtentZ -= value;
        }

        public static event Delegates.get_FormattedText_BeforeArgs get_FormattedText
        {
            add
            {
                HookHandler._beforeget_FormattedText += value;
                HookHandler.Hookget_FormattedText();
            }
            remove => HookHandler._beforeget_FormattedText -= value;
        }

        public static event Delegates.set_FormattedText_BeforeArgs set_FormattedText
        {
            add
            {
                HookHandler._beforeset_FormattedText += value;
                HookHandler.Hookset_FormattedText();
            }
            remove => HookHandler._beforeset_FormattedText -= value;
        }

        public static event Delegates.get_ClippedSpriteRegionBottomLeft_BeforeArgs get_ClippedSpriteRegionBottomLeft
        {
            add
            {
                HookHandler._beforeget_ClippedSpriteRegionBottomLeft += value;
                HookHandler.Hookget_ClippedSpriteRegionBottomLeft();
            }
            remove => HookHandler._beforeget_ClippedSpriteRegionBottomLeft -= value;
        }

        public static event Delegates.set_ClippedSpriteRegionBottomLeft_BeforeArgs set_ClippedSpriteRegionBottomLeft
        {
            add
            {
                HookHandler._beforeset_ClippedSpriteRegionBottomLeft += value;
                HookHandler.Hookset_ClippedSpriteRegionBottomLeft();
            }
            remove => HookHandler._beforeset_ClippedSpriteRegionBottomLeft -= value;
        }

        public static event Delegates.get_ClippedSpriteRegionTopRight_BeforeArgs get_ClippedSpriteRegionTopRight
        {
            add
            {
                HookHandler._beforeget_ClippedSpriteRegionTopRight += value;
                HookHandler.Hookget_ClippedSpriteRegionTopRight();
            }
            remove => HookHandler._beforeget_ClippedSpriteRegionTopRight -= value;
        }

        public static event Delegates.set_ClippedSpriteRegionTopRight_BeforeArgs set_ClippedSpriteRegionTopRight
        {
            add
            {
                HookHandler._beforeset_ClippedSpriteRegionTopRight += value;
                HookHandler.Hookset_ClippedSpriteRegionTopRight();
            }
            remove => HookHandler._beforeset_ClippedSpriteRegionTopRight -= value;
        }

        public static event Delegates.get_SlicedSpriteBorderBottomLeft_BeforeArgs get_SlicedSpriteBorderBottomLeft
        {
            add
            {
                HookHandler._beforeget_SlicedSpriteBorderBottomLeft += value;
                HookHandler.Hookget_SlicedSpriteBorderBottomLeft();
            }
            remove => HookHandler._beforeget_SlicedSpriteBorderBottomLeft -= value;
        }

        public static event Delegates.set_SlicedSpriteBorderBottomLeft_BeforeArgs set_SlicedSpriteBorderBottomLeft
        {
            add
            {
                HookHandler._beforeset_SlicedSpriteBorderBottomLeft += value;
                HookHandler.Hookset_SlicedSpriteBorderBottomLeft();
            }
            remove => HookHandler._beforeset_SlicedSpriteBorderBottomLeft -= value;
        }

        public static event Delegates.get_SlicedSpriteBorderTopRight_BeforeArgs get_SlicedSpriteBorderTopRight
        {
            add
            {
                HookHandler._beforeget_SlicedSpriteBorderTopRight += value;
                HookHandler.Hookget_SlicedSpriteBorderTopRight();
            }
            remove => HookHandler._beforeget_SlicedSpriteBorderTopRight -= value;
        }

        public static event Delegates.set_SlicedSpriteBorderTopRight_BeforeArgs set_SlicedSpriteBorderTopRight
        {
            add
            {
                HookHandler._beforeset_SlicedSpriteBorderTopRight += value;
                HookHandler.Hookset_SlicedSpriteBorderTopRight();
            }
            remove => HookHandler._beforeset_SlicedSpriteBorderTopRight -= value;
        }

        public static event Delegates.get_Dimensions_BeforeArgs get_Dimensions
        {
            add
            {
                HookHandler._beforeget_Dimensions += value;
                HookHandler.Hookget_Dimensions();
            }
            remove => HookHandler._beforeget_Dimensions -= value;
        }

        public static event Delegates.set_Dimensions_BeforeArgs set_Dimensions
        {
            add
            {
                HookHandler._beforeset_Dimensions += value;
                HookHandler.Hookset_Dimensions();
            }
            remove => HookHandler._beforeset_Dimensions -= value;
        }

        public static event Delegates.get_IsDrawn_BeforeArgs get_IsDrawn
        {
            add
            {
                HookHandler._beforeget_IsDrawn += value;
                HookHandler.Hookget_IsDrawn();
            }
            remove => HookHandler._beforeget_IsDrawn -= value;
        }

        public static event Delegates.CheckFlag_BeforeArgs CheckFlag
        {
            add
            {
                HookHandler._beforeCheckFlag += value;
                HookHandler.HookCheckFlag();
            }
            remove => HookHandler._beforeCheckFlag -= value;
        }

        public static event Delegates.SetFlag_BeforeArgs SetFlag
        {
            add
            {
                HookHandler._beforeSetFlag += value;
                HookHandler.HookSetFlag();
            }
            remove => HookHandler._beforeSetFlag -= value;
        }

        public static event Delegates.get_CachedBoundsCenter_BeforeArgs get_CachedBoundsCenter
        {
            add
            {
                HookHandler._beforeget_CachedBoundsCenter += value;
                HookHandler.Hookget_CachedBoundsCenter();
            }
            remove => HookHandler._beforeget_CachedBoundsCenter -= value;
        }

        public static event Delegates.set_CachedBoundsCenter_BeforeArgs set_CachedBoundsCenter
        {
            add
            {
                HookHandler._beforeset_CachedBoundsCenter += value;
                HookHandler.Hookset_CachedBoundsCenter();
            }
            remove => HookHandler._beforeset_CachedBoundsCenter -= value;
        }

        public static event Delegates.get_CachedBoundsExtents_BeforeArgs get_CachedBoundsExtents
        {
            add
            {
                HookHandler._beforeget_CachedBoundsExtents += value;
                HookHandler.Hookget_CachedBoundsExtents();
            }
            remove => HookHandler._beforeget_CachedBoundsExtents -= value;
        }

        public static event Delegates.set_CachedBoundsExtents_BeforeArgs set_CachedBoundsExtents
        {
            add
            {
                HookHandler._beforeset_CachedBoundsExtents += value;
                HookHandler.Hookset_CachedBoundsExtents();
            }
            remove => HookHandler._beforeset_CachedBoundsExtents -= value;
        }

        public static event Delegates.GetSpriteDefinition_BeforeArgs GetSpriteDefinition
        {
            add
            {
                HookHandler._beforeGetSpriteDefinition += value;
                HookHandler.HookGetSpriteDefinition();
            }
            remove => HookHandler._beforeGetSpriteDefinition -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_BoxColliderOffsetZ_AfterArgs get_BoxColliderOffsetZ
        {
            add
            {
                HookHandler._afterget_BoxColliderOffsetZ += value;
                HookHandler.Hookget_BoxColliderOffsetZ();
            }
            remove => HookHandler._afterget_BoxColliderOffsetZ -= value;
        }

        public static event Delegates.set_BoxColliderOffsetZ_AfterArgs set_BoxColliderOffsetZ
        {
            add
            {
                HookHandler._afterset_BoxColliderOffsetZ += value;
                HookHandler.Hookset_BoxColliderOffsetZ();
            }
            remove => HookHandler._afterset_BoxColliderOffsetZ -= value;
        }

        public static event Delegates.get_BoxColliderExtentZ_AfterArgs get_BoxColliderExtentZ
        {
            add
            {
                HookHandler._afterget_BoxColliderExtentZ += value;
                HookHandler.Hookget_BoxColliderExtentZ();
            }
            remove => HookHandler._afterget_BoxColliderExtentZ -= value;
        }

        public static event Delegates.set_BoxColliderExtentZ_AfterArgs set_BoxColliderExtentZ
        {
            add
            {
                HookHandler._afterset_BoxColliderExtentZ += value;
                HookHandler.Hookset_BoxColliderExtentZ();
            }
            remove => HookHandler._afterset_BoxColliderExtentZ -= value;
        }

        public static event Delegates.get_FormattedText_AfterArgs get_FormattedText
        {
            add
            {
                HookHandler._afterget_FormattedText += value;
                HookHandler.Hookget_FormattedText();
            }
            remove => HookHandler._afterget_FormattedText -= value;
        }

        public static event Delegates.set_FormattedText_AfterArgs set_FormattedText
        {
            add
            {
                HookHandler._afterset_FormattedText += value;
                HookHandler.Hookset_FormattedText();
            }
            remove => HookHandler._afterset_FormattedText -= value;
        }

        public static event Delegates.get_ClippedSpriteRegionBottomLeft_AfterArgs get_ClippedSpriteRegionBottomLeft
        {
            add
            {
                HookHandler._afterget_ClippedSpriteRegionBottomLeft += value;
                HookHandler.Hookget_ClippedSpriteRegionBottomLeft();
            }
            remove => HookHandler._afterget_ClippedSpriteRegionBottomLeft -= value;
        }

        public static event Delegates.set_ClippedSpriteRegionBottomLeft_AfterArgs set_ClippedSpriteRegionBottomLeft
        {
            add
            {
                HookHandler._afterset_ClippedSpriteRegionBottomLeft += value;
                HookHandler.Hookset_ClippedSpriteRegionBottomLeft();
            }
            remove => HookHandler._afterset_ClippedSpriteRegionBottomLeft -= value;
        }

        public static event Delegates.get_ClippedSpriteRegionTopRight_AfterArgs get_ClippedSpriteRegionTopRight
        {
            add
            {
                HookHandler._afterget_ClippedSpriteRegionTopRight += value;
                HookHandler.Hookget_ClippedSpriteRegionTopRight();
            }
            remove => HookHandler._afterget_ClippedSpriteRegionTopRight -= value;
        }

        public static event Delegates.set_ClippedSpriteRegionTopRight_AfterArgs set_ClippedSpriteRegionTopRight
        {
            add
            {
                HookHandler._afterset_ClippedSpriteRegionTopRight += value;
                HookHandler.Hookset_ClippedSpriteRegionTopRight();
            }
            remove => HookHandler._afterset_ClippedSpriteRegionTopRight -= value;
        }

        public static event Delegates.get_SlicedSpriteBorderBottomLeft_AfterArgs get_SlicedSpriteBorderBottomLeft
        {
            add
            {
                HookHandler._afterget_SlicedSpriteBorderBottomLeft += value;
                HookHandler.Hookget_SlicedSpriteBorderBottomLeft();
            }
            remove => HookHandler._afterget_SlicedSpriteBorderBottomLeft -= value;
        }

        public static event Delegates.set_SlicedSpriteBorderBottomLeft_AfterArgs set_SlicedSpriteBorderBottomLeft
        {
            add
            {
                HookHandler._afterset_SlicedSpriteBorderBottomLeft += value;
                HookHandler.Hookset_SlicedSpriteBorderBottomLeft();
            }
            remove => HookHandler._afterset_SlicedSpriteBorderBottomLeft -= value;
        }

        public static event Delegates.get_SlicedSpriteBorderTopRight_AfterArgs get_SlicedSpriteBorderTopRight
        {
            add
            {
                HookHandler._afterget_SlicedSpriteBorderTopRight += value;
                HookHandler.Hookget_SlicedSpriteBorderTopRight();
            }
            remove => HookHandler._afterget_SlicedSpriteBorderTopRight -= value;
        }

        public static event Delegates.set_SlicedSpriteBorderTopRight_AfterArgs set_SlicedSpriteBorderTopRight
        {
            add
            {
                HookHandler._afterset_SlicedSpriteBorderTopRight += value;
                HookHandler.Hookset_SlicedSpriteBorderTopRight();
            }
            remove => HookHandler._afterset_SlicedSpriteBorderTopRight -= value;
        }

        public static event Delegates.get_Dimensions_AfterArgs get_Dimensions
        {
            add
            {
                HookHandler._afterget_Dimensions += value;
                HookHandler.Hookget_Dimensions();
            }
            remove => HookHandler._afterget_Dimensions -= value;
        }

        public static event Delegates.set_Dimensions_AfterArgs set_Dimensions
        {
            add
            {
                HookHandler._afterset_Dimensions += value;
                HookHandler.Hookset_Dimensions();
            }
            remove => HookHandler._afterset_Dimensions -= value;
        }

        public static event Delegates.get_IsDrawn_AfterArgs get_IsDrawn
        {
            add
            {
                HookHandler._afterget_IsDrawn += value;
                HookHandler.Hookget_IsDrawn();
            }
            remove => HookHandler._afterget_IsDrawn -= value;
        }

        public static event Delegates.CheckFlag_AfterArgs CheckFlag
        {
            add
            {
                HookHandler._afterCheckFlag += value;
                HookHandler.HookCheckFlag();
            }
            remove => HookHandler._afterCheckFlag -= value;
        }

        public static event Delegates.SetFlag_AfterArgs SetFlag
        {
            add
            {
                HookHandler._afterSetFlag += value;
                HookHandler.HookSetFlag();
            }
            remove => HookHandler._afterSetFlag -= value;
        }

        public static event Delegates.get_CachedBoundsCenter_AfterArgs get_CachedBoundsCenter
        {
            add
            {
                HookHandler._afterget_CachedBoundsCenter += value;
                HookHandler.Hookget_CachedBoundsCenter();
            }
            remove => HookHandler._afterget_CachedBoundsCenter -= value;
        }

        public static event Delegates.set_CachedBoundsCenter_AfterArgs set_CachedBoundsCenter
        {
            add
            {
                HookHandler._afterset_CachedBoundsCenter += value;
                HookHandler.Hookset_CachedBoundsCenter();
            }
            remove => HookHandler._afterset_CachedBoundsCenter -= value;
        }

        public static event Delegates.get_CachedBoundsExtents_AfterArgs get_CachedBoundsExtents
        {
            add
            {
                HookHandler._afterget_CachedBoundsExtents += value;
                HookHandler.Hookget_CachedBoundsExtents();
            }
            remove => HookHandler._afterget_CachedBoundsExtents -= value;
        }

        public static event Delegates.set_CachedBoundsExtents_AfterArgs set_CachedBoundsExtents
        {
            add
            {
                HookHandler._afterset_CachedBoundsExtents += value;
                HookHandler.Hookset_CachedBoundsExtents();
            }
            remove => HookHandler._afterset_CachedBoundsExtents -= value;
        }

        public static event Delegates.GetSpriteDefinition_AfterArgs GetSpriteDefinition
        {
            add
            {
                HookHandler._afterGetSpriteDefinition += value;
                HookHandler.HookGetSpriteDefinition();
            }
            remove => HookHandler._afterGetSpriteDefinition -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_BoxColliderOffsetZ_WithArgs get_BoxColliderOffsetZ
        {
            add => HookEndpointManager.Add<Delegates.get_BoxColliderOffsetZ_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_BoxColliderOffsetZ"), value);
            remove => HookEndpointManager.Remove<Delegates.get_BoxColliderOffsetZ_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_BoxColliderOffsetZ"), value);
        }

        public static event Delegates.set_BoxColliderOffsetZ_WithArgs set_BoxColliderOffsetZ
        {
            add => HookEndpointManager.Add<Delegates.set_BoxColliderOffsetZ_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_BoxColliderOffsetZ"), value);
            remove => HookEndpointManager.Remove<Delegates.set_BoxColliderOffsetZ_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_BoxColliderOffsetZ"), value);
        }

        public static event Delegates.get_BoxColliderExtentZ_WithArgs get_BoxColliderExtentZ
        {
            add => HookEndpointManager.Add<Delegates.get_BoxColliderExtentZ_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_BoxColliderExtentZ"), value);
            remove => HookEndpointManager.Remove<Delegates.get_BoxColliderExtentZ_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_BoxColliderExtentZ"), value);
        }

        public static event Delegates.set_BoxColliderExtentZ_WithArgs set_BoxColliderExtentZ
        {
            add => HookEndpointManager.Add<Delegates.set_BoxColliderExtentZ_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_BoxColliderExtentZ"), value);
            remove => HookEndpointManager.Remove<Delegates.set_BoxColliderExtentZ_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_BoxColliderExtentZ"), value);
        }

        public static event Delegates.get_FormattedText_WithArgs get_FormattedText
        {
            add => HookEndpointManager.Add<Delegates.get_FormattedText_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_FormattedText"), value);
            remove => HookEndpointManager.Remove<Delegates.get_FormattedText_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_FormattedText"), value);
        }

        public static event Delegates.set_FormattedText_WithArgs set_FormattedText
        {
            add => HookEndpointManager.Add<Delegates.set_FormattedText_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_FormattedText"), value);
            remove => HookEndpointManager.Remove<Delegates.set_FormattedText_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_FormattedText"), value);
        }

        public static event Delegates.get_ClippedSpriteRegionBottomLeft_WithArgs get_ClippedSpriteRegionBottomLeft
        {
            add => HookEndpointManager.Add<Delegates.get_ClippedSpriteRegionBottomLeft_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_ClippedSpriteRegionBottomLeft"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ClippedSpriteRegionBottomLeft_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_ClippedSpriteRegionBottomLeft"), value);
        }

        public static event Delegates.set_ClippedSpriteRegionBottomLeft_WithArgs set_ClippedSpriteRegionBottomLeft
        {
            add => HookEndpointManager.Add<Delegates.set_ClippedSpriteRegionBottomLeft_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_ClippedSpriteRegionBottomLeft"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ClippedSpriteRegionBottomLeft_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_ClippedSpriteRegionBottomLeft"), value);
        }

        public static event Delegates.get_ClippedSpriteRegionTopRight_WithArgs get_ClippedSpriteRegionTopRight
        {
            add => HookEndpointManager.Add<Delegates.get_ClippedSpriteRegionTopRight_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_ClippedSpriteRegionTopRight"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ClippedSpriteRegionTopRight_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_ClippedSpriteRegionTopRight"), value);
        }

        public static event Delegates.set_ClippedSpriteRegionTopRight_WithArgs set_ClippedSpriteRegionTopRight
        {
            add => HookEndpointManager.Add<Delegates.set_ClippedSpriteRegionTopRight_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_ClippedSpriteRegionTopRight"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ClippedSpriteRegionTopRight_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_ClippedSpriteRegionTopRight"), value);
        }

        public static event Delegates.get_SlicedSpriteBorderBottomLeft_WithArgs get_SlicedSpriteBorderBottomLeft
        {
            add => HookEndpointManager.Add<Delegates.get_SlicedSpriteBorderBottomLeft_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_SlicedSpriteBorderBottomLeft"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SlicedSpriteBorderBottomLeft_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_SlicedSpriteBorderBottomLeft"), value);
        }

        public static event Delegates.set_SlicedSpriteBorderBottomLeft_WithArgs set_SlicedSpriteBorderBottomLeft
        {
            add => HookEndpointManager.Add<Delegates.set_SlicedSpriteBorderBottomLeft_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_SlicedSpriteBorderBottomLeft"), value);
            remove => HookEndpointManager.Remove<Delegates.set_SlicedSpriteBorderBottomLeft_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_SlicedSpriteBorderBottomLeft"), value);
        }

        public static event Delegates.get_SlicedSpriteBorderTopRight_WithArgs get_SlicedSpriteBorderTopRight
        {
            add => HookEndpointManager.Add<Delegates.get_SlicedSpriteBorderTopRight_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_SlicedSpriteBorderTopRight"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SlicedSpriteBorderTopRight_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_SlicedSpriteBorderTopRight"), value);
        }

        public static event Delegates.set_SlicedSpriteBorderTopRight_WithArgs set_SlicedSpriteBorderTopRight
        {
            add => HookEndpointManager.Add<Delegates.set_SlicedSpriteBorderTopRight_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_SlicedSpriteBorderTopRight"), value);
            remove => HookEndpointManager.Remove<Delegates.set_SlicedSpriteBorderTopRight_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_SlicedSpriteBorderTopRight"), value);
        }

        public static event Delegates.get_Dimensions_WithArgs get_Dimensions
        {
            add => HookEndpointManager.Add<Delegates.get_Dimensions_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_Dimensions"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Dimensions_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_Dimensions"), value);
        }

        public static event Delegates.set_Dimensions_WithArgs set_Dimensions
        {
            add => HookEndpointManager.Add<Delegates.set_Dimensions_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_Dimensions"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Dimensions_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_Dimensions"), value);
        }

        public static event Delegates.get_IsDrawn_WithArgs get_IsDrawn
        {
            add => HookEndpointManager.Add<Delegates.get_IsDrawn_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_IsDrawn"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsDrawn_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_IsDrawn"), value);
        }

        public static event On.tk2dBatchedSprite.hook_CheckFlag CheckFlag
        {
            add => On.tk2dBatchedSprite.CheckFlag += value;
            remove => On.tk2dBatchedSprite.CheckFlag -= value;
        }

        public static event On.tk2dBatchedSprite.hook_SetFlag SetFlag
        {
            add => On.tk2dBatchedSprite.SetFlag += value;
            remove => On.tk2dBatchedSprite.SetFlag -= value;
        }

        public static event Delegates.get_CachedBoundsCenter_WithArgs get_CachedBoundsCenter
        {
            add => HookEndpointManager.Add<Delegates.get_CachedBoundsCenter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_CachedBoundsCenter"), value);
            remove => HookEndpointManager.Remove<Delegates.get_CachedBoundsCenter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_CachedBoundsCenter"), value);
        }

        public static event Delegates.set_CachedBoundsCenter_WithArgs set_CachedBoundsCenter
        {
            add => HookEndpointManager.Add<Delegates.set_CachedBoundsCenter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_CachedBoundsCenter"), value);
            remove => HookEndpointManager.Remove<Delegates.set_CachedBoundsCenter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_CachedBoundsCenter"), value);
        }

        public static event Delegates.get_CachedBoundsExtents_WithArgs get_CachedBoundsExtents
        {
            add => HookEndpointManager.Add<Delegates.get_CachedBoundsExtents_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_CachedBoundsExtents"), value);
            remove => HookEndpointManager.Remove<Delegates.get_CachedBoundsExtents_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "get_CachedBoundsExtents"), value);
        }

        public static event Delegates.set_CachedBoundsExtents_WithArgs set_CachedBoundsExtents
        {
            add => HookEndpointManager.Add<Delegates.set_CachedBoundsExtents_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_CachedBoundsExtents"), value);
            remove => HookEndpointManager.Remove<Delegates.set_CachedBoundsExtents_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dBatchedSprite), "set_CachedBoundsExtents"), value);
        }

        public static event On.tk2dBatchedSprite.hook_GetSpriteDefinition GetSpriteDefinition
        {
            add => On.tk2dBatchedSprite.GetSpriteDefinition += value;
            remove => On.tk2dBatchedSprite.GetSpriteDefinition -= value;
        }
    }
}