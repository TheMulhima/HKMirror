using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for PS4SimpleInputDevice class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPS4SimpleInputDevice
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookUpdate()
{
if (!HookedList.Contains("Update"))
{
HookedList.Add("Update");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PS4SimpleInputDevice), "Update", true), Update);

}
}
internal static event Delegates.Update_BeforeArgs _beforeUpdate;
internal static event Delegates.Update_AfterArgs _afterUpdate;
private static void Update(Action<InControl.PS4SimpleInputDevice,  ulong,  float> orig, InControl.PS4SimpleInputDevice self,  ulong updateTick,  float deltaTime)
{
Delegates.Params_Update @params = new() 
{
self = self
, updateTick = updateTick
, deltaTime = deltaTime
};
if (_beforeUpdate != null)
{
foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
{
try
{
_beforeUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
updateTick = @params.updateTick;
deltaTime = @params.deltaTime;
orig(self, updateTick, deltaTime);
if (_afterUpdate != null)
{
foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
{
try
{
_afterUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetNativeVibrationValue()
{
if (!HookedList.Contains("GetNativeVibrationValue"))
{
HookedList.Add("GetNativeVibrationValue");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PS4SimpleInputDevice), "GetNativeVibrationValue", false), GetNativeVibrationValue);

}
}
internal static event Delegates.GetNativeVibrationValue_BeforeArgs _beforeGetNativeVibrationValue;
internal static event Delegates.GetNativeVibrationValue_AfterArgs _afterGetNativeVibrationValue;
private static int GetNativeVibrationValue(Func< float, int> orig,  float strength)
{
Delegates.Params_GetNativeVibrationValue @params = new() 
{
strength = strength
};
if (_beforeGetNativeVibrationValue != null)
{
foreach (Delegates.GetNativeVibrationValue_BeforeArgs toInvoke in _beforeGetNativeVibrationValue.GetInvocationList())
{
try
{
_beforeGetNativeVibrationValue?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
strength = @params.strength;
var retVal = orig(strength);
if (_afterGetNativeVibrationValue != null)
{
foreach (Delegates.GetNativeVibrationValue_AfterArgs toInvoke in _afterGetNativeVibrationValue.GetInvocationList())
{
try
{
retVal = _afterGetNativeVibrationValue.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_IsConnected()
{
if (!HookedList.Contains("get_IsConnected"))
{
HookedList.Add("get_IsConnected");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PS4SimpleInputDevice), "get_IsConnected", true), get_IsConnected);

}
}
internal static event Delegates.get_IsConnected_BeforeArgs _beforeget_IsConnected;
internal static event Delegates.get_IsConnected_AfterArgs _afterget_IsConnected;
private static bool get_IsConnected(Func<InControl.PS4SimpleInputDevice, bool> orig, InControl.PS4SimpleInputDevice self)
{
Delegates.Params_get_IsConnected @params = new() 
{
self = self
};
if (_beforeget_IsConnected != null)
{
foreach (Delegates.get_IsConnected_BeforeArgs toInvoke in _beforeget_IsConnected.GetInvocationList())
{
try
{
_beforeget_IsConnected?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_IsConnected != null)
{
foreach (Delegates.get_IsConnected_AfterArgs toInvoke in _afterget_IsConnected.GetInvocationList())
{
try
{
retVal = _afterget_IsConnected.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetVibrationMixer()
{
if (!HookedList.Contains("GetVibrationMixer"))
{
HookedList.Add("GetVibrationMixer");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PS4SimpleInputDevice), "GetVibrationMixer", true), GetVibrationMixer);

}
}
internal static event Delegates.GetVibrationMixer_BeforeArgs _beforeGetVibrationMixer;
internal static event Delegates.GetVibrationMixer_AfterArgs _afterGetVibrationMixer;
private static VibrationMixer GetVibrationMixer(Func<InControl.PS4SimpleInputDevice, VibrationMixer> orig, InControl.PS4SimpleInputDevice self)
{
Delegates.Params_GetVibrationMixer @params = new() 
{
self = self
};
if (_beforeGetVibrationMixer != null)
{
foreach (Delegates.GetVibrationMixer_BeforeArgs toInvoke in _beforeGetVibrationMixer.GetInvocationList())
{
try
{
_beforeGetVibrationMixer?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetVibrationMixer != null)
{
foreach (Delegates.GetVibrationMixer_AfterArgs toInvoke in _afterGetVibrationMixer.GetInvocationList())
{
try
{
retVal = _afterGetVibrationMixer.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Update
{
public InControl.PS4SimpleInputDevice self;
public ulong updateTick;
public float deltaTime;
}
public delegate void Update_BeforeArgs(Params_Update args);
public delegate void Update_AfterArgs(Params_Update args);
public delegate void Update_WithArgs (Action<InControl.PS4SimpleInputDevice,  ulong,  float> orig, InControl.PS4SimpleInputDevice self,  ulong updateTick,  float deltaTime);
public sealed class Params_GetNativeVibrationValue
{
public float strength;
}
public delegate void GetNativeVibrationValue_BeforeArgs(Params_GetNativeVibrationValue args);
public delegate int GetNativeVibrationValue_AfterArgs(Params_GetNativeVibrationValue args, int ret);
public delegate int GetNativeVibrationValue_WithArgs (Func< float, int> orig,  float strength);
public sealed class Params_get_IsConnected
{
public InControl.PS4SimpleInputDevice self;
}
public delegate void get_IsConnected_BeforeArgs(Params_get_IsConnected args);
public delegate bool get_IsConnected_AfterArgs(Params_get_IsConnected args, bool ret);
public delegate bool get_IsConnected_WithArgs (Func<InControl.PS4SimpleInputDevice, bool> orig, InControl.PS4SimpleInputDevice self);
public sealed class Params_GetVibrationMixer
{
public InControl.PS4SimpleInputDevice self;
}
public delegate void GetVibrationMixer_BeforeArgs(Params_GetVibrationMixer args);
public delegate VibrationMixer GetVibrationMixer_AfterArgs(Params_GetVibrationMixer args, VibrationMixer ret);
public delegate VibrationMixer GetVibrationMixer_WithArgs (Func<InControl.PS4SimpleInputDevice, VibrationMixer> orig, InControl.PS4SimpleInputDevice self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Update_BeforeArgs Update
{
add
{

HookHandler._beforeUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._beforeUpdate -= value;
}
public static event Delegates.GetNativeVibrationValue_BeforeArgs GetNativeVibrationValue
{
add
{

HookHandler._beforeGetNativeVibrationValue += value;
HookHandler.HookGetNativeVibrationValue();
}
remove => HookHandler._beforeGetNativeVibrationValue -= value;
}
public static event Delegates.get_IsConnected_BeforeArgs get_IsConnected
{
add
{

HookHandler._beforeget_IsConnected += value;
HookHandler.Hookget_IsConnected();
}
remove => HookHandler._beforeget_IsConnected -= value;
}
public static event Delegates.GetVibrationMixer_BeforeArgs GetVibrationMixer
{
add
{

HookHandler._beforeGetVibrationMixer += value;
HookHandler.HookGetVibrationMixer();
}
remove => HookHandler._beforeGetVibrationMixer -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Update_AfterArgs Update
{
add
{

HookHandler._afterUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._afterUpdate -= value;
}
public static event Delegates.GetNativeVibrationValue_AfterArgs GetNativeVibrationValue
{
add
{

HookHandler._afterGetNativeVibrationValue += value;
HookHandler.HookGetNativeVibrationValue();
}
remove => HookHandler._afterGetNativeVibrationValue -= value;
}
public static event Delegates.get_IsConnected_AfterArgs get_IsConnected
{
add
{

HookHandler._afterget_IsConnected += value;
HookHandler.Hookget_IsConnected();
}
remove => HookHandler._afterget_IsConnected -= value;
}
public static event Delegates.GetVibrationMixer_AfterArgs GetVibrationMixer
{
add
{

HookHandler._afterGetVibrationMixer += value;
HookHandler.HookGetVibrationMixer();
}
remove => HookHandler._afterGetVibrationMixer -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.Update_WithArgs Update
{
add => HookEndpointManager.Add<Delegates.Update_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PS4SimpleInputDevice), "Update", true), value);
remove => HookEndpointManager.Remove<Delegates.Update_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PS4SimpleInputDevice), "Update", true), value);
}
public static event Delegates.GetNativeVibrationValue_WithArgs GetNativeVibrationValue
{
add => HookEndpointManager.Add<Delegates.GetNativeVibrationValue_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PS4SimpleInputDevice), "GetNativeVibrationValue", false), value);
remove => HookEndpointManager.Remove<Delegates.GetNativeVibrationValue_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PS4SimpleInputDevice), "GetNativeVibrationValue", false), value);
}
public static event Delegates.get_IsConnected_WithArgs get_IsConnected
{
add => HookEndpointManager.Add<Delegates.get_IsConnected_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PS4SimpleInputDevice), "get_IsConnected", true), value);
remove => HookEndpointManager.Remove<Delegates.get_IsConnected_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PS4SimpleInputDevice), "get_IsConnected", true), value);
}
public static event Delegates.GetVibrationMixer_WithArgs GetVibrationMixer
{
add => HookEndpointManager.Add<Delegates.GetVibrationMixer_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PS4SimpleInputDevice), "VibrationManager.IVibrationMixerProvider.GetVibrationMixer", true), value);
remove => HookEndpointManager.Remove<Delegates.GetVibrationMixer_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PS4SimpleInputDevice), "VibrationManager.IVibrationMixerProvider.GetVibrationMixer", true), value);
}
}

}
