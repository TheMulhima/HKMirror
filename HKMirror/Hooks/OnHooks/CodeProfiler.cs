namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for CodeProfiler class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCodeProfiler
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.CodeProfiler.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.CodeProfiler.orig_Awake orig, CodeProfiler self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnGUI()
        {
            if (!HookedList.Contains("OnGUI"))
            {
                HookedList.Add("OnGUI");
                On.CodeProfiler.OnGUI += OnGUI;
            }
        }

        internal static event Delegates.OnGUI_BeforeArgs _beforeOnGUI;
        internal static event Delegates.OnGUI_NormalArgs _afterOnGUI;

        private static void OnGUI(On.CodeProfiler.orig_OnGUI orig, CodeProfiler self)
        {
            Delegates.Params_OnGUI @params = new()
            {
                self = self
            };
            _beforeOnGUI?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnGUI != null) _afterOnGUI.Invoke(@params);
        }

        internal static void HookBegin()
        {
            if (!HookedList.Contains("Begin"))
            {
                HookedList.Add("Begin");
                On.CodeProfiler.Begin += Begin;
            }
        }

        internal static event Delegates.Begin_BeforeArgs _beforeBegin;
        internal static event Delegates.Begin_NormalArgs _afterBegin;

        private static void Begin(On.CodeProfiler.orig_Begin orig, string id)
        {
            Delegates.Params_Begin @params = new()
            {
                id = id
            };
            _beforeBegin?.Invoke(@params);
            id = @params.id;
            orig(id);
            if (_afterBegin != null) _afterBegin.Invoke(@params);
        }

        internal static void HookEnd()
        {
            if (!HookedList.Contains("End"))
            {
                HookedList.Add("End");
                On.CodeProfiler.End += End;
            }
        }

        internal static event Delegates.End_BeforeArgs _beforeEnd;
        internal static event Delegates.End_NormalArgs _afterEnd;

        private static void End(On.CodeProfiler.orig_End orig, string id)
        {
            Delegates.Params_End @params = new()
            {
                id = id
            };
            _beforeEnd?.Invoke(@params);
            id = @params.id;
            orig(id);
            if (_afterEnd != null) _afterEnd.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.CodeProfiler.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.CodeProfiler.orig_Update orig, CodeProfiler self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void Begin_BeforeArgs(Params_Begin args);

        public delegate void Begin_NormalArgs(Params_Begin args);

        public delegate void End_BeforeArgs(Params_End args);

        public delegate void End_NormalArgs(Params_End args);

        public delegate void OnGUI_BeforeArgs(Params_OnGUI args);

        public delegate void OnGUI_NormalArgs(Params_OnGUI args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_Awake
        {
            public CodeProfiler self;
        }

        public sealed class Params_OnGUI
        {
            public CodeProfiler self;
        }

        public sealed class Params_Begin
        {
            public string id;
        }

        public sealed class Params_End
        {
            public string id;
        }

        public sealed class Params_Update
        {
            public CodeProfiler self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnGUI_BeforeArgs OnGUI
        {
            add
            {
                HookHandler._beforeOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._beforeOnGUI -= value;
        }

        public static event Delegates.Begin_BeforeArgs Begin
        {
            add
            {
                HookHandler._beforeBegin += value;
                HookHandler.HookBegin();
            }
            remove => HookHandler._beforeBegin -= value;
        }

        public static event Delegates.End_BeforeArgs End
        {
            add
            {
                HookHandler._beforeEnd += value;
                HookHandler.HookEnd();
            }
            remove => HookHandler._beforeEnd -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnGUI_NormalArgs OnGUI
        {
            add
            {
                HookHandler._afterOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._afterOnGUI -= value;
        }

        public static event Delegates.Begin_NormalArgs Begin
        {
            add
            {
                HookHandler._afterBegin += value;
                HookHandler.HookBegin();
            }
            remove => HookHandler._afterBegin -= value;
        }

        public static event Delegates.End_NormalArgs End
        {
            add
            {
                HookHandler._afterEnd += value;
                HookHandler.HookEnd();
            }
            remove => HookHandler._afterEnd -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.CodeProfiler.hook_Awake Awake
        {
            add => On.CodeProfiler.Awake += value;
            remove => On.CodeProfiler.Awake -= value;
        }

        public static event On.CodeProfiler.hook_OnGUI OnGUI
        {
            add => On.CodeProfiler.OnGUI += value;
            remove => On.CodeProfiler.OnGUI -= value;
        }

        public static event On.CodeProfiler.hook_Begin Begin
        {
            add => On.CodeProfiler.Begin += value;
            remove => On.CodeProfiler.Begin -= value;
        }

        public static event On.CodeProfiler.hook_End End
        {
            add => On.CodeProfiler.End += value;
            remove => On.CodeProfiler.End -= value;
        }

        public static event On.CodeProfiler.hook_Update Update
        {
            add => On.CodeProfiler.Update += value;
            remove => On.CodeProfiler.Update -= value;
        }
    }
}