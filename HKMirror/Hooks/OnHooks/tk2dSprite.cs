namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dSprite class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dSprite
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.tk2dSprite.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.tk2dSprite.orig_Awake orig, tk2dSprite self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.tk2dSprite.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_AfterArgs _afterOnDestroy;

        private static void OnDestroy(On.tk2dSprite.orig_OnDestroy orig, tk2dSprite self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            if (_beforeOnDestroy != null)
                foreach (Delegates.OnDestroy_BeforeArgs toInvoke in _beforeOnDestroy.GetInvocationList())
                    try
                    {
                        _beforeOnDestroy?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null)
                foreach (Delegates.OnDestroy_AfterArgs toInvoke in _afterOnDestroy.GetInvocationList())
                    try
                    {
                        _afterOnDestroy.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookBuild()
        {
            if (!HookedList.Contains("Build"))
            {
                HookedList.Add("Build");
                On.tk2dSprite.Build += Build;
            }
        }

        internal static event Delegates.Build_BeforeArgs _beforeBuild;
        internal static event Delegates.Build_AfterArgs _afterBuild;

        private static void Build(On.tk2dSprite.orig_Build orig, tk2dSprite self)
        {
            Delegates.Params_Build @params = new()
            {
                self = self
            };
            if (_beforeBuild != null)
                foreach (Delegates.Build_BeforeArgs toInvoke in _beforeBuild.GetInvocationList())
                    try
                    {
                        _beforeBuild?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterBuild != null)
                foreach (Delegates.Build_AfterArgs toInvoke in _afterBuild.GetInvocationList())
                    try
                    {
                        _afterBuild.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAddComponent_GameObject_tk2dSpriteCollectionData_int()
        {
            if (!HookedList.Contains("AddComponent_GameObject_tk2dSpriteCollectionData_int"))
            {
                HookedList.Add("AddComponent_GameObject_tk2dSpriteCollectionData_int");
                On.tk2dSprite.AddComponent_GameObject_tk2dSpriteCollectionData_int +=
                    AddComponent_GameObject_tk2dSpriteCollectionData_int;
            }
        }

        internal static event Delegates.AddComponent_GameObject_tk2dSpriteCollectionData_int_BeforeArgs
            _beforeAddComponent_GameObject_tk2dSpriteCollectionData_int;

        internal static event Delegates.AddComponent_GameObject_tk2dSpriteCollectionData_int_AfterArgs
            _afterAddComponent_GameObject_tk2dSpriteCollectionData_int;

        private static tk2dSprite AddComponent_GameObject_tk2dSpriteCollectionData_int(
            On.tk2dSprite.orig_AddComponent_GameObject_tk2dSpriteCollectionData_int orig, GameObject go,
            tk2dSpriteCollectionData spriteCollection, int spriteId)
        {
            Delegates.Params_AddComponent_GameObject_tk2dSpriteCollectionData_int @params = new()
            {
                go = go, spriteCollection = spriteCollection, spriteId = spriteId
            };
            if (_beforeAddComponent_GameObject_tk2dSpriteCollectionData_int != null)
                foreach (Delegates.AddComponent_GameObject_tk2dSpriteCollectionData_int_BeforeArgs toInvoke in
                         _beforeAddComponent_GameObject_tk2dSpriteCollectionData_int.GetInvocationList())
                    try
                    {
                        _beforeAddComponent_GameObject_tk2dSpriteCollectionData_int?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            go = @params.go;
            spriteCollection = @params.spriteCollection;
            spriteId = @params.spriteId;
            var retVal = orig(go, spriteCollection, spriteId);
            if (_afterAddComponent_GameObject_tk2dSpriteCollectionData_int != null)
                foreach (Delegates.AddComponent_GameObject_tk2dSpriteCollectionData_int_AfterArgs toInvoke in
                         _afterAddComponent_GameObject_tk2dSpriteCollectionData_int.GetInvocationList())
                    try
                    {
                        retVal = _afterAddComponent_GameObject_tk2dSpriteCollectionData_int.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAddComponent_GameObject_tk2dSpriteCollectionData_string()
        {
            if (!HookedList.Contains("AddComponent_GameObject_tk2dSpriteCollectionData_string"))
            {
                HookedList.Add("AddComponent_GameObject_tk2dSpriteCollectionData_string");
                On.tk2dSprite.AddComponent_GameObject_tk2dSpriteCollectionData_string +=
                    AddComponent_GameObject_tk2dSpriteCollectionData_string;
            }
        }

        internal static event Delegates.AddComponent_GameObject_tk2dSpriteCollectionData_string_BeforeArgs
            _beforeAddComponent_GameObject_tk2dSpriteCollectionData_string;

        internal static event Delegates.AddComponent_GameObject_tk2dSpriteCollectionData_string_AfterArgs
            _afterAddComponent_GameObject_tk2dSpriteCollectionData_string;

        private static tk2dSprite AddComponent_GameObject_tk2dSpriteCollectionData_string(
            On.tk2dSprite.orig_AddComponent_GameObject_tk2dSpriteCollectionData_string orig, GameObject go,
            tk2dSpriteCollectionData spriteCollection, string spriteName)
        {
            Delegates.Params_AddComponent_GameObject_tk2dSpriteCollectionData_string @params = new()
            {
                go = go, spriteCollection = spriteCollection, spriteName = spriteName
            };
            if (_beforeAddComponent_GameObject_tk2dSpriteCollectionData_string != null)
                foreach (Delegates.AddComponent_GameObject_tk2dSpriteCollectionData_string_BeforeArgs toInvoke in
                         _beforeAddComponent_GameObject_tk2dSpriteCollectionData_string.GetInvocationList())
                    try
                    {
                        _beforeAddComponent_GameObject_tk2dSpriteCollectionData_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            go = @params.go;
            spriteCollection = @params.spriteCollection;
            spriteName = @params.spriteName;
            var retVal = orig(go, spriteCollection, spriteName);
            if (_afterAddComponent_GameObject_tk2dSpriteCollectionData_string != null)
                foreach (Delegates.AddComponent_GameObject_tk2dSpriteCollectionData_string_AfterArgs toInvoke in
                         _afterAddComponent_GameObject_tk2dSpriteCollectionData_string.GetInvocationList())
                    try
                    {
                        retVal = _afterAddComponent_GameObject_tk2dSpriteCollectionData_string.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCreateFromTexture()
        {
            if (!HookedList.Contains("CreateFromTexture"))
            {
                HookedList.Add("CreateFromTexture");
                On.tk2dSprite.CreateFromTexture += CreateFromTexture;
            }
        }

        internal static event Delegates.CreateFromTexture_BeforeArgs _beforeCreateFromTexture;
        internal static event Delegates.CreateFromTexture_AfterArgs _afterCreateFromTexture;

        private static GameObject CreateFromTexture(On.tk2dSprite.orig_CreateFromTexture orig, Texture texture,
            tk2dSpriteCollectionSize size, Rect region, Vector2 anchor)
        {
            Delegates.Params_CreateFromTexture @params = new()
            {
                texture = texture, size = size, region = region, anchor = anchor
            };
            if (_beforeCreateFromTexture != null)
                foreach (Delegates.CreateFromTexture_BeforeArgs toInvoke in
                         _beforeCreateFromTexture.GetInvocationList())
                    try
                    {
                        _beforeCreateFromTexture?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            texture = @params.texture;
            size = @params.size;
            region = @params.region;
            anchor = @params.anchor;
            var retVal = orig(texture, size, region, anchor);
            if (_afterCreateFromTexture != null)
                foreach (Delegates.CreateFromTexture_AfterArgs toInvoke in _afterCreateFromTexture.GetInvocationList())
                    try
                    {
                        retVal = _afterCreateFromTexture.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookUpdateGeometry()
        {
            if (!HookedList.Contains("UpdateGeometry"))
            {
                HookedList.Add("UpdateGeometry");
                On.tk2dSprite.UpdateGeometry += UpdateGeometry;
            }
        }

        internal static event Delegates.UpdateGeometry_BeforeArgs _beforeUpdateGeometry;
        internal static event Delegates.UpdateGeometry_AfterArgs _afterUpdateGeometry;

        private static void UpdateGeometry(On.tk2dSprite.orig_UpdateGeometry orig, tk2dSprite self)
        {
            Delegates.Params_UpdateGeometry @params = new()
            {
                self = self
            };
            if (_beforeUpdateGeometry != null)
                foreach (Delegates.UpdateGeometry_BeforeArgs toInvoke in _beforeUpdateGeometry.GetInvocationList())
                    try
                    {
                        _beforeUpdateGeometry?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateGeometry != null)
                foreach (Delegates.UpdateGeometry_AfterArgs toInvoke in _afterUpdateGeometry.GetInvocationList())
                    try
                    {
                        _afterUpdateGeometry.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateColors()
        {
            if (!HookedList.Contains("UpdateColors"))
            {
                HookedList.Add("UpdateColors");
                On.tk2dSprite.UpdateColors += UpdateColors;
            }
        }

        internal static event Delegates.UpdateColors_BeforeArgs _beforeUpdateColors;
        internal static event Delegates.UpdateColors_AfterArgs _afterUpdateColors;

        private static void UpdateColors(On.tk2dSprite.orig_UpdateColors orig, tk2dSprite self)
        {
            Delegates.Params_UpdateColors @params = new()
            {
                self = self
            };
            if (_beforeUpdateColors != null)
                foreach (Delegates.UpdateColors_BeforeArgs toInvoke in _beforeUpdateColors.GetInvocationList())
                    try
                    {
                        _beforeUpdateColors?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateColors != null)
                foreach (Delegates.UpdateColors_AfterArgs toInvoke in _afterUpdateColors.GetInvocationList())
                    try
                    {
                        _afterUpdateColors.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateVertices()
        {
            if (!HookedList.Contains("UpdateVertices"))
            {
                HookedList.Add("UpdateVertices");
                On.tk2dSprite.UpdateVertices += UpdateVertices;
            }
        }

        internal static event Delegates.UpdateVertices_BeforeArgs _beforeUpdateVertices;
        internal static event Delegates.UpdateVertices_AfterArgs _afterUpdateVertices;

        private static void UpdateVertices(On.tk2dSprite.orig_UpdateVertices orig, tk2dSprite self)
        {
            Delegates.Params_UpdateVertices @params = new()
            {
                self = self
            };
            if (_beforeUpdateVertices != null)
                foreach (Delegates.UpdateVertices_BeforeArgs toInvoke in _beforeUpdateVertices.GetInvocationList())
                    try
                    {
                        _beforeUpdateVertices?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateVertices != null)
                foreach (Delegates.UpdateVertices_AfterArgs toInvoke in _afterUpdateVertices.GetInvocationList())
                    try
                    {
                        _afterUpdateVertices.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateColorsImpl()
        {
            if (!HookedList.Contains("UpdateColorsImpl"))
            {
                HookedList.Add("UpdateColorsImpl");
                On.tk2dSprite.UpdateColorsImpl += UpdateColorsImpl;
            }
        }

        internal static event Delegates.UpdateColorsImpl_BeforeArgs _beforeUpdateColorsImpl;
        internal static event Delegates.UpdateColorsImpl_AfterArgs _afterUpdateColorsImpl;

        private static void UpdateColorsImpl(On.tk2dSprite.orig_UpdateColorsImpl orig, tk2dSprite self)
        {
            Delegates.Params_UpdateColorsImpl @params = new()
            {
                self = self
            };
            if (_beforeUpdateColorsImpl != null)
                foreach (Delegates.UpdateColorsImpl_BeforeArgs toInvoke in _beforeUpdateColorsImpl.GetInvocationList())
                    try
                    {
                        _beforeUpdateColorsImpl?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateColorsImpl != null)
                foreach (Delegates.UpdateColorsImpl_AfterArgs toInvoke in _afterUpdateColorsImpl.GetInvocationList())
                    try
                    {
                        _afterUpdateColorsImpl.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateVerticesImpl()
        {
            if (!HookedList.Contains("UpdateVerticesImpl"))
            {
                HookedList.Add("UpdateVerticesImpl");
                On.tk2dSprite.UpdateVerticesImpl += UpdateVerticesImpl;
            }
        }

        internal static event Delegates.UpdateVerticesImpl_BeforeArgs _beforeUpdateVerticesImpl;
        internal static event Delegates.UpdateVerticesImpl_AfterArgs _afterUpdateVerticesImpl;

        private static void UpdateVerticesImpl(On.tk2dSprite.orig_UpdateVerticesImpl orig, tk2dSprite self)
        {
            Delegates.Params_UpdateVerticesImpl @params = new()
            {
                self = self
            };
            if (_beforeUpdateVerticesImpl != null)
                foreach (Delegates.UpdateVerticesImpl_BeforeArgs toInvoke in
                         _beforeUpdateVerticesImpl.GetInvocationList())
                    try
                    {
                        _beforeUpdateVerticesImpl?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateVerticesImpl != null)
                foreach (Delegates.UpdateVerticesImpl_AfterArgs toInvoke in
                         _afterUpdateVerticesImpl.GetInvocationList())
                    try
                    {
                        _afterUpdateVerticesImpl.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateGeometryImpl()
        {
            if (!HookedList.Contains("UpdateGeometryImpl"))
            {
                HookedList.Add("UpdateGeometryImpl");
                On.tk2dSprite.UpdateGeometryImpl += UpdateGeometryImpl;
            }
        }

        internal static event Delegates.UpdateGeometryImpl_BeforeArgs _beforeUpdateGeometryImpl;
        internal static event Delegates.UpdateGeometryImpl_AfterArgs _afterUpdateGeometryImpl;

        private static void UpdateGeometryImpl(On.tk2dSprite.orig_UpdateGeometryImpl orig, tk2dSprite self)
        {
            Delegates.Params_UpdateGeometryImpl @params = new()
            {
                self = self
            };
            if (_beforeUpdateGeometryImpl != null)
                foreach (Delegates.UpdateGeometryImpl_BeforeArgs toInvoke in
                         _beforeUpdateGeometryImpl.GetInvocationList())
                    try
                    {
                        _beforeUpdateGeometryImpl?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateGeometryImpl != null)
                foreach (Delegates.UpdateGeometryImpl_AfterArgs toInvoke in
                         _afterUpdateGeometryImpl.GetInvocationList())
                    try
                    {
                        _afterUpdateGeometryImpl.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateMaterial()
        {
            if (!HookedList.Contains("UpdateMaterial"))
            {
                HookedList.Add("UpdateMaterial");
                On.tk2dSprite.UpdateMaterial += UpdateMaterial;
            }
        }

        internal static event Delegates.UpdateMaterial_BeforeArgs _beforeUpdateMaterial;
        internal static event Delegates.UpdateMaterial_AfterArgs _afterUpdateMaterial;

        private static void UpdateMaterial(On.tk2dSprite.orig_UpdateMaterial orig, tk2dSprite self)
        {
            Delegates.Params_UpdateMaterial @params = new()
            {
                self = self
            };
            if (_beforeUpdateMaterial != null)
                foreach (Delegates.UpdateMaterial_BeforeArgs toInvoke in _beforeUpdateMaterial.GetInvocationList())
                    try
                    {
                        _beforeUpdateMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateMaterial != null)
                foreach (Delegates.UpdateMaterial_AfterArgs toInvoke in _afterUpdateMaterial.GetInvocationList())
                    try
                    {
                        _afterUpdateMaterial.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetCurrentVertexCount()
        {
            if (!HookedList.Contains("GetCurrentVertexCount"))
            {
                HookedList.Add("GetCurrentVertexCount");
                On.tk2dSprite.GetCurrentVertexCount += GetCurrentVertexCount;
            }
        }

        internal static event Delegates.GetCurrentVertexCount_BeforeArgs _beforeGetCurrentVertexCount;
        internal static event Delegates.GetCurrentVertexCount_AfterArgs _afterGetCurrentVertexCount;

        private static int GetCurrentVertexCount(On.tk2dSprite.orig_GetCurrentVertexCount orig, tk2dSprite self)
        {
            Delegates.Params_GetCurrentVertexCount @params = new()
            {
                self = self
            };
            if (_beforeGetCurrentVertexCount != null)
                foreach (Delegates.GetCurrentVertexCount_BeforeArgs toInvoke in _beforeGetCurrentVertexCount
                             .GetInvocationList())
                    try
                    {
                        _beforeGetCurrentVertexCount?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetCurrentVertexCount != null)
                foreach (Delegates.GetCurrentVertexCount_AfterArgs toInvoke in _afterGetCurrentVertexCount
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetCurrentVertexCount.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookForceBuild()
        {
            if (!HookedList.Contains("ForceBuild"))
            {
                HookedList.Add("ForceBuild");
                On.tk2dSprite.ForceBuild += ForceBuild;
            }
        }

        internal static event Delegates.ForceBuild_BeforeArgs _beforeForceBuild;
        internal static event Delegates.ForceBuild_AfterArgs _afterForceBuild;

        private static void ForceBuild(On.tk2dSprite.orig_ForceBuild orig, tk2dSprite self)
        {
            Delegates.Params_ForceBuild @params = new()
            {
                self = self
            };
            if (_beforeForceBuild != null)
                foreach (Delegates.ForceBuild_BeforeArgs toInvoke in _beforeForceBuild.GetInvocationList())
                    try
                    {
                        _beforeForceBuild?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterForceBuild != null)
                foreach (Delegates.ForceBuild_AfterArgs toInvoke in _afterForceBuild.GetInvocationList())
                    try
                    {
                        _afterForceBuild.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookReshapeBounds()
        {
            if (!HookedList.Contains("ReshapeBounds"))
            {
                HookedList.Add("ReshapeBounds");
                On.tk2dSprite.ReshapeBounds += ReshapeBounds;
            }
        }

        internal static event Delegates.ReshapeBounds_BeforeArgs _beforeReshapeBounds;
        internal static event Delegates.ReshapeBounds_AfterArgs _afterReshapeBounds;

        private static void ReshapeBounds(On.tk2dSprite.orig_ReshapeBounds orig, tk2dSprite self, Vector3 dMin,
            Vector3 dMax)
        {
            Delegates.Params_ReshapeBounds @params = new()
            {
                self = self, dMin = dMin, dMax = dMax
            };
            if (_beforeReshapeBounds != null)
                foreach (Delegates.ReshapeBounds_BeforeArgs toInvoke in _beforeReshapeBounds.GetInvocationList())
                    try
                    {
                        _beforeReshapeBounds?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            dMin = @params.dMin;
            dMax = @params.dMax;
            orig(self, dMin, dMax);
            if (_afterReshapeBounds != null)
                foreach (Delegates.ReshapeBounds_AfterArgs toInvoke in _afterReshapeBounds.GetInvocationList())
                    try
                    {
                        _afterReshapeBounds.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate tk2dSprite AddComponent_GameObject_tk2dSpriteCollectionData_int_AfterArgs(
            Params_AddComponent_GameObject_tk2dSpriteCollectionData_int args, tk2dSprite ret);

        public delegate void AddComponent_GameObject_tk2dSpriteCollectionData_int_BeforeArgs(
            Params_AddComponent_GameObject_tk2dSpriteCollectionData_int args);

        public delegate tk2dSprite AddComponent_GameObject_tk2dSpriteCollectionData_int_WithArgs(
            Func<GameObject, tk2dSpriteCollectionData, int, tk2dSprite> orig, GameObject go,
            tk2dSpriteCollectionData spriteCollection, int spriteId);

        public delegate tk2dSprite AddComponent_GameObject_tk2dSpriteCollectionData_string_AfterArgs(
            Params_AddComponent_GameObject_tk2dSpriteCollectionData_string args, tk2dSprite ret);

        public delegate void AddComponent_GameObject_tk2dSpriteCollectionData_string_BeforeArgs(
            Params_AddComponent_GameObject_tk2dSpriteCollectionData_string args);

        public delegate tk2dSprite AddComponent_GameObject_tk2dSpriteCollectionData_string_WithArgs(
            Func<GameObject, tk2dSpriteCollectionData, string, tk2dSprite> orig, GameObject go,
            tk2dSpriteCollectionData spriteCollection, string spriteName);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<tk2dSprite> orig, tk2dSprite self);

        public delegate void Build_AfterArgs(Params_Build args);

        public delegate void Build_BeforeArgs(Params_Build args);

        public delegate void Build_WithArgs(Action<tk2dSprite> orig, tk2dSprite self);

        public delegate GameObject CreateFromTexture_AfterArgs(Params_CreateFromTexture args, GameObject ret);

        public delegate void CreateFromTexture_BeforeArgs(Params_CreateFromTexture args);

        public delegate GameObject CreateFromTexture_WithArgs(
            Func<Texture, tk2dSpriteCollectionSize, Rect, Vector2, GameObject> orig, Texture texture,
            tk2dSpriteCollectionSize size, Rect region, Vector2 anchor);

        public delegate void ForceBuild_AfterArgs(Params_ForceBuild args);

        public delegate void ForceBuild_BeforeArgs(Params_ForceBuild args);

        public delegate void ForceBuild_WithArgs(Action<tk2dSprite> orig, tk2dSprite self);

        public delegate int GetCurrentVertexCount_AfterArgs(Params_GetCurrentVertexCount args, int ret);

        public delegate void GetCurrentVertexCount_BeforeArgs(Params_GetCurrentVertexCount args);

        public delegate int GetCurrentVertexCount_WithArgs(Func<tk2dSprite, int> orig, tk2dSprite self);

        public delegate void OnDestroy_AfterArgs(Params_OnDestroy args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_WithArgs(Action<tk2dSprite> orig, tk2dSprite self);

        public delegate void ReshapeBounds_AfterArgs(Params_ReshapeBounds args);

        public delegate void ReshapeBounds_BeforeArgs(Params_ReshapeBounds args);

        public delegate void ReshapeBounds_WithArgs(Action<tk2dSprite, Vector3, Vector3> orig, tk2dSprite self,
            Vector3 dMin, Vector3 dMax);

        public delegate void UpdateColors_AfterArgs(Params_UpdateColors args);

        public delegate void UpdateColors_BeforeArgs(Params_UpdateColors args);

        public delegate void UpdateColors_WithArgs(Action<tk2dSprite> orig, tk2dSprite self);

        public delegate void UpdateColorsImpl_AfterArgs(Params_UpdateColorsImpl args);

        public delegate void UpdateColorsImpl_BeforeArgs(Params_UpdateColorsImpl args);

        public delegate void UpdateColorsImpl_WithArgs(Action<tk2dSprite> orig, tk2dSprite self);

        public delegate void UpdateGeometry_AfterArgs(Params_UpdateGeometry args);

        public delegate void UpdateGeometry_BeforeArgs(Params_UpdateGeometry args);

        public delegate void UpdateGeometry_WithArgs(Action<tk2dSprite> orig, tk2dSprite self);

        public delegate void UpdateGeometryImpl_AfterArgs(Params_UpdateGeometryImpl args);

        public delegate void UpdateGeometryImpl_BeforeArgs(Params_UpdateGeometryImpl args);

        public delegate void UpdateGeometryImpl_WithArgs(Action<tk2dSprite> orig, tk2dSprite self);

        public delegate void UpdateMaterial_AfterArgs(Params_UpdateMaterial args);

        public delegate void UpdateMaterial_BeforeArgs(Params_UpdateMaterial args);

        public delegate void UpdateMaterial_WithArgs(Action<tk2dSprite> orig, tk2dSprite self);

        public delegate void UpdateVertices_AfterArgs(Params_UpdateVertices args);

        public delegate void UpdateVertices_BeforeArgs(Params_UpdateVertices args);

        public delegate void UpdateVertices_WithArgs(Action<tk2dSprite> orig, tk2dSprite self);

        public delegate void UpdateVerticesImpl_AfterArgs(Params_UpdateVerticesImpl args);

        public delegate void UpdateVerticesImpl_BeforeArgs(Params_UpdateVerticesImpl args);

        public delegate void UpdateVerticesImpl_WithArgs(Action<tk2dSprite> orig, tk2dSprite self);

        public sealed class Params_Awake
        {
            public tk2dSprite self;
        }

        public sealed class Params_OnDestroy
        {
            public tk2dSprite self;
        }

        public sealed class Params_Build
        {
            public tk2dSprite self;
        }

        public sealed class Params_AddComponent_GameObject_tk2dSpriteCollectionData_int
        {
            public GameObject go;
            public tk2dSpriteCollectionData spriteCollection;
            public int spriteId;
        }

        public sealed class Params_AddComponent_GameObject_tk2dSpriteCollectionData_string
        {
            public GameObject go;
            public tk2dSpriteCollectionData spriteCollection;
            public string spriteName;
        }

        public sealed class Params_CreateFromTexture
        {
            public Vector2 anchor;
            public Rect region;
            public tk2dSpriteCollectionSize size;
            public Texture texture;
        }

        public sealed class Params_UpdateGeometry
        {
            public tk2dSprite self;
        }

        public sealed class Params_UpdateColors
        {
            public tk2dSprite self;
        }

        public sealed class Params_UpdateVertices
        {
            public tk2dSprite self;
        }

        public sealed class Params_UpdateColorsImpl
        {
            public tk2dSprite self;
        }

        public sealed class Params_UpdateVerticesImpl
        {
            public tk2dSprite self;
        }

        public sealed class Params_UpdateGeometryImpl
        {
            public tk2dSprite self;
        }

        public sealed class Params_UpdateMaterial
        {
            public tk2dSprite self;
        }

        public sealed class Params_GetCurrentVertexCount
        {
            public tk2dSprite self;
        }

        public sealed class Params_ForceBuild
        {
            public tk2dSprite self;
        }

        public sealed class Params_ReshapeBounds
        {
            public Vector3 dMax;
            public Vector3 dMin;
            public tk2dSprite self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.Build_BeforeArgs Build
        {
            add
            {
                HookHandler._beforeBuild += value;
                HookHandler.HookBuild();
            }
            remove => HookHandler._beforeBuild -= value;
        }

        public static event Delegates.AddComponent_GameObject_tk2dSpriteCollectionData_int_BeforeArgs
            AddComponent_GameObject_tk2dSpriteCollectionData_int
            {
                add
                {
                    HookHandler._beforeAddComponent_GameObject_tk2dSpriteCollectionData_int += value;
                    HookHandler.HookAddComponent_GameObject_tk2dSpriteCollectionData_int();
                }
                remove => HookHandler._beforeAddComponent_GameObject_tk2dSpriteCollectionData_int -= value;
            }

        public static event Delegates.AddComponent_GameObject_tk2dSpriteCollectionData_string_BeforeArgs
            AddComponent_GameObject_tk2dSpriteCollectionData_string
            {
                add
                {
                    HookHandler._beforeAddComponent_GameObject_tk2dSpriteCollectionData_string += value;
                    HookHandler.HookAddComponent_GameObject_tk2dSpriteCollectionData_string();
                }
                remove => HookHandler._beforeAddComponent_GameObject_tk2dSpriteCollectionData_string -= value;
            }

        public static event Delegates.CreateFromTexture_BeforeArgs CreateFromTexture
        {
            add
            {
                HookHandler._beforeCreateFromTexture += value;
                HookHandler.HookCreateFromTexture();
            }
            remove => HookHandler._beforeCreateFromTexture -= value;
        }

        public static event Delegates.UpdateGeometry_BeforeArgs UpdateGeometry
        {
            add
            {
                HookHandler._beforeUpdateGeometry += value;
                HookHandler.HookUpdateGeometry();
            }
            remove => HookHandler._beforeUpdateGeometry -= value;
        }

        public static event Delegates.UpdateColors_BeforeArgs UpdateColors
        {
            add
            {
                HookHandler._beforeUpdateColors += value;
                HookHandler.HookUpdateColors();
            }
            remove => HookHandler._beforeUpdateColors -= value;
        }

        public static event Delegates.UpdateVertices_BeforeArgs UpdateVertices
        {
            add
            {
                HookHandler._beforeUpdateVertices += value;
                HookHandler.HookUpdateVertices();
            }
            remove => HookHandler._beforeUpdateVertices -= value;
        }

        public static event Delegates.UpdateColorsImpl_BeforeArgs UpdateColorsImpl
        {
            add
            {
                HookHandler._beforeUpdateColorsImpl += value;
                HookHandler.HookUpdateColorsImpl();
            }
            remove => HookHandler._beforeUpdateColorsImpl -= value;
        }

        public static event Delegates.UpdateVerticesImpl_BeforeArgs UpdateVerticesImpl
        {
            add
            {
                HookHandler._beforeUpdateVerticesImpl += value;
                HookHandler.HookUpdateVerticesImpl();
            }
            remove => HookHandler._beforeUpdateVerticesImpl -= value;
        }

        public static event Delegates.UpdateGeometryImpl_BeforeArgs UpdateGeometryImpl
        {
            add
            {
                HookHandler._beforeUpdateGeometryImpl += value;
                HookHandler.HookUpdateGeometryImpl();
            }
            remove => HookHandler._beforeUpdateGeometryImpl -= value;
        }

        public static event Delegates.UpdateMaterial_BeforeArgs UpdateMaterial
        {
            add
            {
                HookHandler._beforeUpdateMaterial += value;
                HookHandler.HookUpdateMaterial();
            }
            remove => HookHandler._beforeUpdateMaterial -= value;
        }

        public static event Delegates.GetCurrentVertexCount_BeforeArgs GetCurrentVertexCount
        {
            add
            {
                HookHandler._beforeGetCurrentVertexCount += value;
                HookHandler.HookGetCurrentVertexCount();
            }
            remove => HookHandler._beforeGetCurrentVertexCount -= value;
        }

        public static event Delegates.ForceBuild_BeforeArgs ForceBuild
        {
            add
            {
                HookHandler._beforeForceBuild += value;
                HookHandler.HookForceBuild();
            }
            remove => HookHandler._beforeForceBuild -= value;
        }

        public static event Delegates.ReshapeBounds_BeforeArgs ReshapeBounds
        {
            add
            {
                HookHandler._beforeReshapeBounds += value;
                HookHandler.HookReshapeBounds();
            }
            remove => HookHandler._beforeReshapeBounds -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnDestroy_AfterArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.Build_AfterArgs Build
        {
            add
            {
                HookHandler._afterBuild += value;
                HookHandler.HookBuild();
            }
            remove => HookHandler._afterBuild -= value;
        }

        public static event Delegates.AddComponent_GameObject_tk2dSpriteCollectionData_int_AfterArgs
            AddComponent_GameObject_tk2dSpriteCollectionData_int
            {
                add
                {
                    HookHandler._afterAddComponent_GameObject_tk2dSpriteCollectionData_int += value;
                    HookHandler.HookAddComponent_GameObject_tk2dSpriteCollectionData_int();
                }
                remove => HookHandler._afterAddComponent_GameObject_tk2dSpriteCollectionData_int -= value;
            }

        public static event Delegates.AddComponent_GameObject_tk2dSpriteCollectionData_string_AfterArgs
            AddComponent_GameObject_tk2dSpriteCollectionData_string
            {
                add
                {
                    HookHandler._afterAddComponent_GameObject_tk2dSpriteCollectionData_string += value;
                    HookHandler.HookAddComponent_GameObject_tk2dSpriteCollectionData_string();
                }
                remove => HookHandler._afterAddComponent_GameObject_tk2dSpriteCollectionData_string -= value;
            }

        public static event Delegates.CreateFromTexture_AfterArgs CreateFromTexture
        {
            add
            {
                HookHandler._afterCreateFromTexture += value;
                HookHandler.HookCreateFromTexture();
            }
            remove => HookHandler._afterCreateFromTexture -= value;
        }

        public static event Delegates.UpdateGeometry_AfterArgs UpdateGeometry
        {
            add
            {
                HookHandler._afterUpdateGeometry += value;
                HookHandler.HookUpdateGeometry();
            }
            remove => HookHandler._afterUpdateGeometry -= value;
        }

        public static event Delegates.UpdateColors_AfterArgs UpdateColors
        {
            add
            {
                HookHandler._afterUpdateColors += value;
                HookHandler.HookUpdateColors();
            }
            remove => HookHandler._afterUpdateColors -= value;
        }

        public static event Delegates.UpdateVertices_AfterArgs UpdateVertices
        {
            add
            {
                HookHandler._afterUpdateVertices += value;
                HookHandler.HookUpdateVertices();
            }
            remove => HookHandler._afterUpdateVertices -= value;
        }

        public static event Delegates.UpdateColorsImpl_AfterArgs UpdateColorsImpl
        {
            add
            {
                HookHandler._afterUpdateColorsImpl += value;
                HookHandler.HookUpdateColorsImpl();
            }
            remove => HookHandler._afterUpdateColorsImpl -= value;
        }

        public static event Delegates.UpdateVerticesImpl_AfterArgs UpdateVerticesImpl
        {
            add
            {
                HookHandler._afterUpdateVerticesImpl += value;
                HookHandler.HookUpdateVerticesImpl();
            }
            remove => HookHandler._afterUpdateVerticesImpl -= value;
        }

        public static event Delegates.UpdateGeometryImpl_AfterArgs UpdateGeometryImpl
        {
            add
            {
                HookHandler._afterUpdateGeometryImpl += value;
                HookHandler.HookUpdateGeometryImpl();
            }
            remove => HookHandler._afterUpdateGeometryImpl -= value;
        }

        public static event Delegates.UpdateMaterial_AfterArgs UpdateMaterial
        {
            add
            {
                HookHandler._afterUpdateMaterial += value;
                HookHandler.HookUpdateMaterial();
            }
            remove => HookHandler._afterUpdateMaterial -= value;
        }

        public static event Delegates.GetCurrentVertexCount_AfterArgs GetCurrentVertexCount
        {
            add
            {
                HookHandler._afterGetCurrentVertexCount += value;
                HookHandler.HookGetCurrentVertexCount();
            }
            remove => HookHandler._afterGetCurrentVertexCount -= value;
        }

        public static event Delegates.ForceBuild_AfterArgs ForceBuild
        {
            add
            {
                HookHandler._afterForceBuild += value;
                HookHandler.HookForceBuild();
            }
            remove => HookHandler._afterForceBuild -= value;
        }

        public static event Delegates.ReshapeBounds_AfterArgs ReshapeBounds
        {
            add
            {
                HookHandler._afterReshapeBounds += value;
                HookHandler.HookReshapeBounds();
            }
            remove => HookHandler._afterReshapeBounds -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.tk2dSprite.hook_Awake Awake
        {
            add => On.tk2dSprite.Awake += value;
            remove => On.tk2dSprite.Awake -= value;
        }

        public static event On.tk2dSprite.hook_OnDestroy OnDestroy
        {
            add => On.tk2dSprite.OnDestroy += value;
            remove => On.tk2dSprite.OnDestroy -= value;
        }

        public static event On.tk2dSprite.hook_Build Build
        {
            add => On.tk2dSprite.Build += value;
            remove => On.tk2dSprite.Build -= value;
        }

        public static event On.tk2dSprite.hook_AddComponent_GameObject_tk2dSpriteCollectionData_int
            AddComponent_GameObject_tk2dSpriteCollectionData_int
            {
                add => On.tk2dSprite.AddComponent_GameObject_tk2dSpriteCollectionData_int += value;
                remove => On.tk2dSprite.AddComponent_GameObject_tk2dSpriteCollectionData_int -= value;
            }

        public static event On.tk2dSprite.hook_AddComponent_GameObject_tk2dSpriteCollectionData_string
            AddComponent_GameObject_tk2dSpriteCollectionData_string
            {
                add => On.tk2dSprite.AddComponent_GameObject_tk2dSpriteCollectionData_string += value;
                remove => On.tk2dSprite.AddComponent_GameObject_tk2dSpriteCollectionData_string -= value;
            }

        public static event On.tk2dSprite.hook_CreateFromTexture CreateFromTexture
        {
            add => On.tk2dSprite.CreateFromTexture += value;
            remove => On.tk2dSprite.CreateFromTexture -= value;
        }

        public static event On.tk2dSprite.hook_UpdateGeometry UpdateGeometry
        {
            add => On.tk2dSprite.UpdateGeometry += value;
            remove => On.tk2dSprite.UpdateGeometry -= value;
        }

        public static event On.tk2dSprite.hook_UpdateColors UpdateColors
        {
            add => On.tk2dSprite.UpdateColors += value;
            remove => On.tk2dSprite.UpdateColors -= value;
        }

        public static event On.tk2dSprite.hook_UpdateVertices UpdateVertices
        {
            add => On.tk2dSprite.UpdateVertices += value;
            remove => On.tk2dSprite.UpdateVertices -= value;
        }

        public static event On.tk2dSprite.hook_UpdateColorsImpl UpdateColorsImpl
        {
            add => On.tk2dSprite.UpdateColorsImpl += value;
            remove => On.tk2dSprite.UpdateColorsImpl -= value;
        }

        public static event On.tk2dSprite.hook_UpdateVerticesImpl UpdateVerticesImpl
        {
            add => On.tk2dSprite.UpdateVerticesImpl += value;
            remove => On.tk2dSprite.UpdateVerticesImpl -= value;
        }

        public static event On.tk2dSprite.hook_UpdateGeometryImpl UpdateGeometryImpl
        {
            add => On.tk2dSprite.UpdateGeometryImpl += value;
            remove => On.tk2dSprite.UpdateGeometryImpl -= value;
        }

        public static event On.tk2dSprite.hook_UpdateMaterial UpdateMaterial
        {
            add => On.tk2dSprite.UpdateMaterial += value;
            remove => On.tk2dSprite.UpdateMaterial -= value;
        }

        public static event On.tk2dSprite.hook_GetCurrentVertexCount GetCurrentVertexCount
        {
            add => On.tk2dSprite.GetCurrentVertexCount += value;
            remove => On.tk2dSprite.GetCurrentVertexCount -= value;
        }

        public static event On.tk2dSprite.hook_ForceBuild ForceBuild
        {
            add => On.tk2dSprite.ForceBuild += value;
            remove => On.tk2dSprite.ForceBuild -= value;
        }

        public static event On.tk2dSprite.hook_ReshapeBounds ReshapeBounds
        {
            add => On.tk2dSprite.ReshapeBounds += value;
            remove => On.tk2dSprite.ReshapeBounds -= value;
        }
    }
}