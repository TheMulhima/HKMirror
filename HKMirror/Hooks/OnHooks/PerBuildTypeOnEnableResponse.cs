namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for PerBuildTypeOnEnableResponse class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPerBuildTypeOnEnableResponse
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.PerBuildTypeOnEnableResponse.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.PerBuildTypeOnEnableResponse.orig_OnEnable orig,
            PerBuildTypeOnEnableResponse self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDoEvent()
        {
            if (!HookedList.Contains("DoEvent"))
            {
                HookedList.Add("DoEvent");
                On.PerBuildTypeOnEnableResponse.DoEvent += DoEvent;
            }
        }

        internal static event Delegates.DoEvent_BeforeArgs _beforeDoEvent;
        internal static event Delegates.DoEvent_AfterArgs _afterDoEvent;

        private static void DoEvent(On.PerBuildTypeOnEnableResponse.orig_DoEvent orig,
            PerBuildTypeOnEnableResponse self, bool value)
        {
            Delegates.Params_DoEvent @params = new()
            {
                self = self, value = value
            };
            if (_beforeDoEvent != null)
                foreach (Delegates.DoEvent_BeforeArgs toInvoke in _beforeDoEvent.GetInvocationList())
                    try
                    {
                        _beforeDoEvent?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterDoEvent != null)
                foreach (Delegates.DoEvent_AfterArgs toInvoke in _afterDoEvent.GetInvocationList())
                    try
                    {
                        _afterDoEvent.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void DoEvent_AfterArgs(Params_DoEvent args);

        public delegate void DoEvent_BeforeArgs(Params_DoEvent args);

        public delegate void DoEvent_WithArgs(Action<PerBuildTypeOnEnableResponse, bool> orig,
            PerBuildTypeOnEnableResponse self, bool value);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<PerBuildTypeOnEnableResponse> orig,
            PerBuildTypeOnEnableResponse self);

        public sealed class Params_OnEnable
        {
            public PerBuildTypeOnEnableResponse self;
        }

        public sealed class Params_DoEvent
        {
            public PerBuildTypeOnEnableResponse self;
            public bool value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.DoEvent_BeforeArgs DoEvent
        {
            add
            {
                HookHandler._beforeDoEvent += value;
                HookHandler.HookDoEvent();
            }
            remove => HookHandler._beforeDoEvent -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.DoEvent_AfterArgs DoEvent
        {
            add
            {
                HookHandler._afterDoEvent += value;
                HookHandler.HookDoEvent();
            }
            remove => HookHandler._afterDoEvent -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.PerBuildTypeOnEnableResponse.hook_OnEnable OnEnable
        {
            add => On.PerBuildTypeOnEnableResponse.OnEnable += value;
            remove => On.PerBuildTypeOnEnableResponse.OnEnable -= value;
        }

        public static event On.PerBuildTypeOnEnableResponse.hook_DoEvent DoEvent
        {
            add => On.PerBuildTypeOnEnableResponse.DoEvent += value;
            remove => On.PerBuildTypeOnEnableResponse.DoEvent -= value;
        }
    }
}