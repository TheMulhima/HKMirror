using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for PreselectOption class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPreselectOption
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookHighlightDefault()
        {
            if (!HookedList.Contains("HighlightDefault"))
            {
                HookedList.Add("HighlightDefault");
                On.PreselectOption.HighlightDefault += HighlightDefault;
            }
        }

        internal static event Delegates.HighlightDefault_BeforeArgs _beforeHighlightDefault;
        internal static event Delegates.HighlightDefault_AfterArgs _afterHighlightDefault;

        private static void HighlightDefault(On.PreselectOption.orig_HighlightDefault orig, PreselectOption self,
            bool deselect)
        {
            Delegates.Params_HighlightDefault @params = new()
            {
                self = self, deselect = deselect
            };
            if (_beforeHighlightDefault != null)
            {
                foreach (Delegates.HighlightDefault_BeforeArgs toInvoke in _beforeHighlightDefault.GetInvocationList())
                {
                    try
                    {
                        _beforeHighlightDefault?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            deselect = @params.deselect;
            orig(self, deselect);
            if (_afterHighlightDefault != null)
            {
                foreach (Delegates.HighlightDefault_AfterArgs toInvoke in _afterHighlightDefault.GetInvocationList())
                {
                    try
                    {
                        _afterHighlightDefault.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetDefaultHighlight()
        {
            if (!HookedList.Contains("SetDefaultHighlight"))
            {
                HookedList.Add("SetDefaultHighlight");
                On.PreselectOption.SetDefaultHighlight += SetDefaultHighlight;
            }
        }

        internal static event Delegates.SetDefaultHighlight_BeforeArgs _beforeSetDefaultHighlight;
        internal static event Delegates.SetDefaultHighlight_AfterArgs _afterSetDefaultHighlight;

        private static void SetDefaultHighlight(On.PreselectOption.orig_SetDefaultHighlight orig, PreselectOption self,
            UnityEngine.UI.Button button)
        {
            Delegates.Params_SetDefaultHighlight @params = new()
            {
                self = self, button = button
            };
            if (_beforeSetDefaultHighlight != null)
            {
                foreach (Delegates.SetDefaultHighlight_BeforeArgs toInvoke in _beforeSetDefaultHighlight
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeSetDefaultHighlight?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            button = @params.button;
            orig(self, button);
            if (_afterSetDefaultHighlight != null)
            {
                foreach (Delegates.SetDefaultHighlight_AfterArgs toInvoke in
                         _afterSetDefaultHighlight.GetInvocationList())
                {
                    try
                    {
                        _afterSetDefaultHighlight.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDeselectAll()
        {
            if (!HookedList.Contains("DeselectAll"))
            {
                HookedList.Add("DeselectAll");
                On.PreselectOption.DeselectAll += DeselectAll;
            }
        }

        internal static event Delegates.DeselectAll_BeforeArgs _beforeDeselectAll;
        internal static event Delegates.DeselectAll_AfterArgs _afterDeselectAll;

        private static void DeselectAll(On.PreselectOption.orig_DeselectAll orig, PreselectOption self)
        {
            Delegates.Params_DeselectAll @params = new()
            {
                self = self
            };
            if (_beforeDeselectAll != null)
            {
                foreach (Delegates.DeselectAll_BeforeArgs toInvoke in _beforeDeselectAll.GetInvocationList())
                {
                    try
                    {
                        _beforeDeselectAll?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterDeselectAll != null)
            {
                foreach (Delegates.DeselectAll_AfterArgs toInvoke in _afterDeselectAll.GetInvocationList())
                {
                    try
                    {
                        _afterDeselectAll.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookForceDeselect()
        {
            if (!HookedList.Contains("ForceDeselect"))
            {
                HookedList.Add("ForceDeselect");
                On.PreselectOption.ForceDeselect += ForceDeselect;
            }
        }

        internal static event Delegates.ForceDeselect_BeforeArgs _beforeForceDeselect;

        private static System.Collections.IEnumerator ForceDeselect(On.PreselectOption.orig_ForceDeselect orig,
            PreselectOption self)
        {
            Delegates.Params_ForceDeselect @params = new()
            {
                self = self
            };
            if (_beforeForceDeselect != null)
            {
                foreach (Delegates.ForceDeselect_BeforeArgs toInvoke in _beforeForceDeselect.GetInvocationList())
                {
                    try
                    {
                        _beforeForceDeselect?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            return orig(self);
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_HighlightDefault
        {
            public PreselectOption self;
            public bool deselect;
        }

        public delegate void HighlightDefault_BeforeArgs(Params_HighlightDefault args);

        public delegate void HighlightDefault_AfterArgs(Params_HighlightDefault args);

        public delegate void HighlightDefault_WithArgs(Action<PreselectOption, bool> orig, PreselectOption self,
            bool deselect);

        public sealed class Params_SetDefaultHighlight
        {
            public PreselectOption self;
            public UnityEngine.UI.Button button;
        }

        public delegate void SetDefaultHighlight_BeforeArgs(Params_SetDefaultHighlight args);

        public delegate void SetDefaultHighlight_AfterArgs(Params_SetDefaultHighlight args);

        public delegate void SetDefaultHighlight_WithArgs(Action<PreselectOption, UnityEngine.UI.Button> orig,
            PreselectOption self, UnityEngine.UI.Button button);

        public sealed class Params_DeselectAll
        {
            public PreselectOption self;
        }

        public delegate void DeselectAll_BeforeArgs(Params_DeselectAll args);

        public delegate void DeselectAll_AfterArgs(Params_DeselectAll args);

        public delegate void DeselectAll_WithArgs(Action<PreselectOption> orig, PreselectOption self);

        public sealed class Params_ForceDeselect
        {
            public PreselectOption self;
        }

        public delegate void ForceDeselect_BeforeArgs(Params_ForceDeselect args);

        public delegate System.Collections.IEnumerator ForceDeselect_AfterArgs(Params_ForceDeselect args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator ForceDeselect_WithArgs(
            Func<PreselectOption, System.Collections.IEnumerator> orig, PreselectOption self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.HighlightDefault_BeforeArgs HighlightDefault
        {
            add
            {
                HookHandler._beforeHighlightDefault += value;
                HookHandler.HookHighlightDefault();
            }
            remove => HookHandler._beforeHighlightDefault -= value;
        }

        public static event Delegates.SetDefaultHighlight_BeforeArgs SetDefaultHighlight
        {
            add
            {
                HookHandler._beforeSetDefaultHighlight += value;
                HookHandler.HookSetDefaultHighlight();
            }
            remove => HookHandler._beforeSetDefaultHighlight -= value;
        }

        public static event Delegates.DeselectAll_BeforeArgs DeselectAll
        {
            add
            {
                HookHandler._beforeDeselectAll += value;
                HookHandler.HookDeselectAll();
            }
            remove => HookHandler._beforeDeselectAll -= value;
        }

        public static event Delegates.ForceDeselect_BeforeArgs ForceDeselect
        {
            add
            {
                HookHandler._beforeForceDeselect += value;
                HookHandler.HookForceDeselect();
            }
            remove => HookHandler._beforeForceDeselect -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.HighlightDefault_AfterArgs HighlightDefault
        {
            add
            {
                HookHandler._afterHighlightDefault += value;
                HookHandler.HookHighlightDefault();
            }
            remove => HookHandler._afterHighlightDefault -= value;
        }

        public static event Delegates.SetDefaultHighlight_AfterArgs SetDefaultHighlight
        {
            add
            {
                HookHandler._afterSetDefaultHighlight += value;
                HookHandler.HookSetDefaultHighlight();
            }
            remove => HookHandler._afterSetDefaultHighlight -= value;
        }

        public static event Delegates.DeselectAll_AfterArgs DeselectAll
        {
            add
            {
                HookHandler._afterDeselectAll += value;
                HookHandler.HookDeselectAll();
            }
            remove => HookHandler._afterDeselectAll -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.PreselectOption.hook_HighlightDefault HighlightDefault
        {
            add => On.PreselectOption.HighlightDefault += value;
            remove => On.PreselectOption.HighlightDefault -= value;
        }

        public static event On.PreselectOption.hook_SetDefaultHighlight SetDefaultHighlight
        {
            add => On.PreselectOption.SetDefaultHighlight += value;
            remove => On.PreselectOption.SetDefaultHighlight -= value;
        }

        public static event On.PreselectOption.hook_DeselectAll DeselectAll
        {
            add => On.PreselectOption.DeselectAll += value;
            remove => On.PreselectOption.DeselectAll -= value;
        }

        public static event On.PreselectOption.hook_ForceDeselect ForceDeselect
        {
            add => On.PreselectOption.ForceDeselect += value;
            remove => On.PreselectOption.ForceDeselect -= value;
        }
    }
}