namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for Walker class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnWalker
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.Walker.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.Walker.orig_Awake orig, Walker self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.Walker.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.Walker.orig_Start orig, Walker self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.Walker.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.Walker.orig_Update orig, Walker self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStartMoving()
        {
            if (!HookedList.Contains("StartMoving"))
            {
                HookedList.Add("StartMoving");
                On.Walker.StartMoving += StartMoving;
            }
        }

        internal static event Delegates.StartMoving_BeforeArgs _beforeStartMoving;
        internal static event Delegates.StartMoving_AfterArgs _afterStartMoving;

        private static void StartMoving(On.Walker.orig_StartMoving orig, Walker self)
        {
            Delegates.Params_StartMoving @params = new()
            {
                self = self
            };
            if (_beforeStartMoving != null)
                foreach (Delegates.StartMoving_BeforeArgs toInvoke in _beforeStartMoving.GetInvocationList())
                    try
                    {
                        _beforeStartMoving?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStartMoving != null)
                foreach (Delegates.StartMoving_AfterArgs toInvoke in _afterStartMoving.GetInvocationList())
                    try
                    {
                        _afterStartMoving.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCancelTurn()
        {
            if (!HookedList.Contains("CancelTurn"))
            {
                HookedList.Add("CancelTurn");
                On.Walker.CancelTurn += CancelTurn;
            }
        }

        internal static event Delegates.CancelTurn_BeforeArgs _beforeCancelTurn;
        internal static event Delegates.CancelTurn_AfterArgs _afterCancelTurn;

        private static void CancelTurn(On.Walker.orig_CancelTurn orig, Walker self)
        {
            Delegates.Params_CancelTurn @params = new()
            {
                self = self
            };
            if (_beforeCancelTurn != null)
                foreach (Delegates.CancelTurn_BeforeArgs toInvoke in _beforeCancelTurn.GetInvocationList())
                    try
                    {
                        _beforeCancelTurn?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCancelTurn != null)
                foreach (Delegates.CancelTurn_AfterArgs toInvoke in _afterCancelTurn.GetInvocationList())
                    try
                    {
                        _afterCancelTurn.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGo()
        {
            if (!HookedList.Contains("Go"))
            {
                HookedList.Add("Go");
                On.Walker.Go += Go;
            }
        }

        internal static event Delegates.Go_BeforeArgs _beforeGo;
        internal static event Delegates.Go_AfterArgs _afterGo;

        private static void Go(On.Walker.orig_Go orig, Walker self, int facing)
        {
            Delegates.Params_Go @params = new()
            {
                self = self, facing = facing
            };
            if (_beforeGo != null)
                foreach (Delegates.Go_BeforeArgs toInvoke in _beforeGo.GetInvocationList())
                    try
                    {
                        _beforeGo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            facing = @params.facing;
            orig(self, facing);
            if (_afterGo != null)
                foreach (Delegates.Go_AfterArgs toInvoke in _afterGo.GetInvocationList())
                    try
                    {
                        _afterGo.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRecieveGoMessage()
        {
            if (!HookedList.Contains("RecieveGoMessage"))
            {
                HookedList.Add("RecieveGoMessage");
                On.Walker.RecieveGoMessage += RecieveGoMessage;
            }
        }

        internal static event Delegates.RecieveGoMessage_BeforeArgs _beforeRecieveGoMessage;
        internal static event Delegates.RecieveGoMessage_AfterArgs _afterRecieveGoMessage;

        private static void RecieveGoMessage(On.Walker.orig_RecieveGoMessage orig, Walker self, int facing)
        {
            Delegates.Params_RecieveGoMessage @params = new()
            {
                self = self, facing = facing
            };
            if (_beforeRecieveGoMessage != null)
                foreach (Delegates.RecieveGoMessage_BeforeArgs toInvoke in _beforeRecieveGoMessage.GetInvocationList())
                    try
                    {
                        _beforeRecieveGoMessage?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            facing = @params.facing;
            orig(self, facing);
            if (_afterRecieveGoMessage != null)
                foreach (Delegates.RecieveGoMessage_AfterArgs toInvoke in _afterRecieveGoMessage.GetInvocationList())
                    try
                    {
                        _afterRecieveGoMessage.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStop()
        {
            if (!HookedList.Contains("Stop"))
            {
                HookedList.Add("Stop");
                On.Walker.Stop += Stop;
            }
        }

        internal static event Delegates.Stop_BeforeArgs _beforeStop;
        internal static event Delegates.Stop_AfterArgs _afterStop;

        private static void Stop(On.Walker.orig_Stop orig, Walker self, Walker.StopReasons reason)
        {
            Delegates.Params_Stop @params = new()
            {
                self = self, reason = reason
            };
            if (_beforeStop != null)
                foreach (Delegates.Stop_BeforeArgs toInvoke in _beforeStop.GetInvocationList())
                    try
                    {
                        _beforeStop?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            reason = @params.reason;
            orig(self, reason);
            if (_afterStop != null)
                foreach (Delegates.Stop_AfterArgs toInvoke in _afterStop.GetInvocationList())
                    try
                    {
                        _afterStop.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookChangeFacing()
        {
            if (!HookedList.Contains("ChangeFacing"))
            {
                HookedList.Add("ChangeFacing");
                On.Walker.ChangeFacing += ChangeFacing;
            }
        }

        internal static event Delegates.ChangeFacing_BeforeArgs _beforeChangeFacing;
        internal static event Delegates.ChangeFacing_AfterArgs _afterChangeFacing;

        private static void ChangeFacing(On.Walker.orig_ChangeFacing orig, Walker self, int facing)
        {
            Delegates.Params_ChangeFacing @params = new()
            {
                self = self, facing = facing
            };
            if (_beforeChangeFacing != null)
                foreach (Delegates.ChangeFacing_BeforeArgs toInvoke in _beforeChangeFacing.GetInvocationList())
                    try
                    {
                        _beforeChangeFacing?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            facing = @params.facing;
            orig(self, facing);
            if (_afterChangeFacing != null)
                foreach (Delegates.ChangeFacing_AfterArgs toInvoke in _afterChangeFacing.GetInvocationList())
                    try
                    {
                        _afterChangeFacing.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookBeginWaitingForConditions()
        {
            if (!HookedList.Contains("BeginWaitingForConditions"))
            {
                HookedList.Add("BeginWaitingForConditions");
                On.Walker.BeginWaitingForConditions += BeginWaitingForConditions;
            }
        }

        internal static event Delegates.BeginWaitingForConditions_BeforeArgs _beforeBeginWaitingForConditions;
        internal static event Delegates.BeginWaitingForConditions_AfterArgs _afterBeginWaitingForConditions;

        private static void BeginWaitingForConditions(On.Walker.orig_BeginWaitingForConditions orig, Walker self)
        {
            Delegates.Params_BeginWaitingForConditions @params = new()
            {
                self = self
            };
            if (_beforeBeginWaitingForConditions != null)
                foreach (Delegates.BeginWaitingForConditions_BeforeArgs toInvoke in _beforeBeginWaitingForConditions
                             .GetInvocationList())
                    try
                    {
                        _beforeBeginWaitingForConditions?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterBeginWaitingForConditions != null)
                foreach (Delegates.BeginWaitingForConditions_AfterArgs toInvoke in _afterBeginWaitingForConditions
                             .GetInvocationList())
                    try
                    {
                        _afterBeginWaitingForConditions.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateWaitingForConditions()
        {
            if (!HookedList.Contains("UpdateWaitingForConditions"))
            {
                HookedList.Add("UpdateWaitingForConditions");
                On.Walker.UpdateWaitingForConditions += UpdateWaitingForConditions;
            }
        }

        internal static event Delegates.UpdateWaitingForConditions_BeforeArgs _beforeUpdateWaitingForConditions;
        internal static event Delegates.UpdateWaitingForConditions_AfterArgs _afterUpdateWaitingForConditions;

        private static void UpdateWaitingForConditions(On.Walker.orig_UpdateWaitingForConditions orig, Walker self)
        {
            Delegates.Params_UpdateWaitingForConditions @params = new()
            {
                self = self
            };
            if (_beforeUpdateWaitingForConditions != null)
                foreach (Delegates.UpdateWaitingForConditions_BeforeArgs toInvoke in _beforeUpdateWaitingForConditions
                             .GetInvocationList())
                    try
                    {
                        _beforeUpdateWaitingForConditions?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateWaitingForConditions != null)
                foreach (Delegates.UpdateWaitingForConditions_AfterArgs toInvoke in _afterUpdateWaitingForConditions
                             .GetInvocationList())
                    try
                    {
                        _afterUpdateWaitingForConditions.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookBeginStopped()
        {
            if (!HookedList.Contains("BeginStopped"))
            {
                HookedList.Add("BeginStopped");
                On.Walker.BeginStopped += BeginStopped;
            }
        }

        internal static event Delegates.BeginStopped_BeforeArgs _beforeBeginStopped;
        internal static event Delegates.BeginStopped_AfterArgs _afterBeginStopped;

        private static void BeginStopped(On.Walker.orig_BeginStopped orig, Walker self, Walker.StopReasons reason)
        {
            Delegates.Params_BeginStopped @params = new()
            {
                self = self, reason = reason
            };
            if (_beforeBeginStopped != null)
                foreach (Delegates.BeginStopped_BeforeArgs toInvoke in _beforeBeginStopped.GetInvocationList())
                    try
                    {
                        _beforeBeginStopped?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            reason = @params.reason;
            orig(self, reason);
            if (_afterBeginStopped != null)
                foreach (Delegates.BeginStopped_AfterArgs toInvoke in _afterBeginStopped.GetInvocationList())
                    try
                    {
                        _afterBeginStopped.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateStopping()
        {
            if (!HookedList.Contains("UpdateStopping"))
            {
                HookedList.Add("UpdateStopping");
                On.Walker.UpdateStopping += UpdateStopping;
            }
        }

        internal static event Delegates.UpdateStopping_BeforeArgs _beforeUpdateStopping;
        internal static event Delegates.UpdateStopping_AfterArgs _afterUpdateStopping;

        private static void UpdateStopping(On.Walker.orig_UpdateStopping orig, Walker self)
        {
            Delegates.Params_UpdateStopping @params = new()
            {
                self = self
            };
            if (_beforeUpdateStopping != null)
                foreach (Delegates.UpdateStopping_BeforeArgs toInvoke in _beforeUpdateStopping.GetInvocationList())
                    try
                    {
                        _beforeUpdateStopping?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateStopping != null)
                foreach (Delegates.UpdateStopping_AfterArgs toInvoke in _afterUpdateStopping.GetInvocationList())
                    try
                    {
                        _afterUpdateStopping.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookEndStopping()
        {
            if (!HookedList.Contains("EndStopping"))
            {
                HookedList.Add("EndStopping");
                On.Walker.EndStopping += EndStopping;
            }
        }

        internal static event Delegates.EndStopping_BeforeArgs _beforeEndStopping;
        internal static event Delegates.EndStopping_AfterArgs _afterEndStopping;

        private static void EndStopping(On.Walker.orig_EndStopping orig, Walker self)
        {
            Delegates.Params_EndStopping @params = new()
            {
                self = self
            };
            if (_beforeEndStopping != null)
                foreach (Delegates.EndStopping_BeforeArgs toInvoke in _beforeEndStopping.GetInvocationList())
                    try
                    {
                        _beforeEndStopping?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterEndStopping != null)
                foreach (Delegates.EndStopping_AfterArgs toInvoke in _afterEndStopping.GetInvocationList())
                    try
                    {
                        _afterEndStopping.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookBeginWalkingOrTurning()
        {
            if (!HookedList.Contains("BeginWalkingOrTurning"))
            {
                HookedList.Add("BeginWalkingOrTurning");
                On.Walker.BeginWalkingOrTurning += BeginWalkingOrTurning;
            }
        }

        internal static event Delegates.BeginWalkingOrTurning_BeforeArgs _beforeBeginWalkingOrTurning;
        internal static event Delegates.BeginWalkingOrTurning_AfterArgs _afterBeginWalkingOrTurning;

        private static void BeginWalkingOrTurning(On.Walker.orig_BeginWalkingOrTurning orig, Walker self, int facing)
        {
            Delegates.Params_BeginWalkingOrTurning @params = new()
            {
                self = self, facing = facing
            };
            if (_beforeBeginWalkingOrTurning != null)
                foreach (Delegates.BeginWalkingOrTurning_BeforeArgs toInvoke in _beforeBeginWalkingOrTurning
                             .GetInvocationList())
                    try
                    {
                        _beforeBeginWalkingOrTurning?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            facing = @params.facing;
            orig(self, facing);
            if (_afterBeginWalkingOrTurning != null)
                foreach (Delegates.BeginWalkingOrTurning_AfterArgs toInvoke in _afterBeginWalkingOrTurning
                             .GetInvocationList())
                    try
                    {
                        _afterBeginWalkingOrTurning.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookBeginWalking()
        {
            if (!HookedList.Contains("BeginWalking"))
            {
                HookedList.Add("BeginWalking");
                On.Walker.BeginWalking += BeginWalking;
            }
        }

        internal static event Delegates.BeginWalking_BeforeArgs _beforeBeginWalking;
        internal static event Delegates.BeginWalking_AfterArgs _afterBeginWalking;

        private static void BeginWalking(On.Walker.orig_BeginWalking orig, Walker self, int facing)
        {
            Delegates.Params_BeginWalking @params = new()
            {
                self = self, facing = facing
            };
            if (_beforeBeginWalking != null)
                foreach (Delegates.BeginWalking_BeforeArgs toInvoke in _beforeBeginWalking.GetInvocationList())
                    try
                    {
                        _beforeBeginWalking?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            facing = @params.facing;
            orig(self, facing);
            if (_afterBeginWalking != null)
                foreach (Delegates.BeginWalking_AfterArgs toInvoke in _afterBeginWalking.GetInvocationList())
                    try
                    {
                        _afterBeginWalking.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateWalking()
        {
            if (!HookedList.Contains("UpdateWalking"))
            {
                HookedList.Add("UpdateWalking");
                On.Walker.UpdateWalking += UpdateWalking;
            }
        }

        internal static event Delegates.UpdateWalking_BeforeArgs _beforeUpdateWalking;
        internal static event Delegates.UpdateWalking_AfterArgs _afterUpdateWalking;

        private static void UpdateWalking(On.Walker.orig_UpdateWalking orig, Walker self)
        {
            Delegates.Params_UpdateWalking @params = new()
            {
                self = self
            };
            if (_beforeUpdateWalking != null)
                foreach (Delegates.UpdateWalking_BeforeArgs toInvoke in _beforeUpdateWalking.GetInvocationList())
                    try
                    {
                        _beforeUpdateWalking?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateWalking != null)
                foreach (Delegates.UpdateWalking_AfterArgs toInvoke in _afterUpdateWalking.GetInvocationList())
                    try
                    {
                        _afterUpdateWalking.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookBeginTurning()
        {
            if (!HookedList.Contains("BeginTurning"))
            {
                HookedList.Add("BeginTurning");
                On.Walker.BeginTurning += BeginTurning;
            }
        }

        internal static event Delegates.BeginTurning_BeforeArgs _beforeBeginTurning;
        internal static event Delegates.BeginTurning_AfterArgs _afterBeginTurning;

        private static void BeginTurning(On.Walker.orig_BeginTurning orig, Walker self, int facing)
        {
            Delegates.Params_BeginTurning @params = new()
            {
                self = self, facing = facing
            };
            if (_beforeBeginTurning != null)
                foreach (Delegates.BeginTurning_BeforeArgs toInvoke in _beforeBeginTurning.GetInvocationList())
                    try
                    {
                        _beforeBeginTurning?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            facing = @params.facing;
            orig(self, facing);
            if (_afterBeginTurning != null)
                foreach (Delegates.BeginTurning_AfterArgs toInvoke in _afterBeginTurning.GetInvocationList())
                    try
                    {
                        _afterBeginTurning.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateTurning()
        {
            if (!HookedList.Contains("UpdateTurning"))
            {
                HookedList.Add("UpdateTurning");
                On.Walker.UpdateTurning += UpdateTurning;
            }
        }

        internal static event Delegates.UpdateTurning_BeforeArgs _beforeUpdateTurning;
        internal static event Delegates.UpdateTurning_AfterArgs _afterUpdateTurning;

        private static void UpdateTurning(On.Walker.orig_UpdateTurning orig, Walker self)
        {
            Delegates.Params_UpdateTurning @params = new()
            {
                self = self
            };
            if (_beforeUpdateTurning != null)
                foreach (Delegates.UpdateTurning_BeforeArgs toInvoke in _beforeUpdateTurning.GetInvocationList())
                    try
                    {
                        _beforeUpdateTurning?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateTurning != null)
                foreach (Delegates.UpdateTurning_AfterArgs toInvoke in _afterUpdateTurning.GetInvocationList())
                    try
                    {
                        _afterUpdateTurning.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookEndTurning()
        {
            if (!HookedList.Contains("EndTurning"))
            {
                HookedList.Add("EndTurning");
                On.Walker.EndTurning += EndTurning;
            }
        }

        internal static event Delegates.EndTurning_BeforeArgs _beforeEndTurning;
        internal static event Delegates.EndTurning_AfterArgs _afterEndTurning;

        private static void EndTurning(On.Walker.orig_EndTurning orig, Walker self)
        {
            Delegates.Params_EndTurning @params = new()
            {
                self = self
            };
            if (_beforeEndTurning != null)
                foreach (Delegates.EndTurning_BeforeArgs toInvoke in _beforeEndTurning.GetInvocationList())
                    try
                    {
                        _beforeEndTurning?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterEndTurning != null)
                foreach (Delegates.EndTurning_AfterArgs toInvoke in _afterEndTurning.GetInvocationList())
                    try
                    {
                        _afterEndTurning.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookClearTurnCooldown()
        {
            if (!HookedList.Contains("ClearTurnCooldown"))
            {
                HookedList.Add("ClearTurnCooldown");
                On.Walker.ClearTurnCooldown += ClearTurnCooldown;
            }
        }

        internal static event Delegates.ClearTurnCooldown_BeforeArgs _beforeClearTurnCooldown;
        internal static event Delegates.ClearTurnCooldown_AfterArgs _afterClearTurnCooldown;

        private static void ClearTurnCooldown(On.Walker.orig_ClearTurnCooldown orig, Walker self)
        {
            Delegates.Params_ClearTurnCooldown @params = new()
            {
                self = self
            };
            if (_beforeClearTurnCooldown != null)
                foreach (Delegates.ClearTurnCooldown_BeforeArgs toInvoke in
                         _beforeClearTurnCooldown.GetInvocationList())
                    try
                    {
                        _beforeClearTurnCooldown?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterClearTurnCooldown != null)
                foreach (Delegates.ClearTurnCooldown_AfterArgs toInvoke in _afterClearTurnCooldown.GetInvocationList())
                    try
                    {
                        _afterClearTurnCooldown.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<Walker> orig, Walker self);

        public delegate void BeginStopped_AfterArgs(Params_BeginStopped args);

        public delegate void BeginStopped_BeforeArgs(Params_BeginStopped args);

        public delegate void BeginStopped_WithArgs(Action<Walker, Walker.StopReasons> orig, Walker self,
            Walker.StopReasons reason);

        public delegate void BeginTurning_AfterArgs(Params_BeginTurning args);

        public delegate void BeginTurning_BeforeArgs(Params_BeginTurning args);

        public delegate void BeginTurning_WithArgs(Action<Walker, int> orig, Walker self, int facing);

        public delegate void BeginWaitingForConditions_AfterArgs(Params_BeginWaitingForConditions args);

        public delegate void BeginWaitingForConditions_BeforeArgs(Params_BeginWaitingForConditions args);

        public delegate void BeginWaitingForConditions_WithArgs(Action<Walker> orig, Walker self);

        public delegate void BeginWalking_AfterArgs(Params_BeginWalking args);

        public delegate void BeginWalking_BeforeArgs(Params_BeginWalking args);

        public delegate void BeginWalking_WithArgs(Action<Walker, int> orig, Walker self, int facing);

        public delegate void BeginWalkingOrTurning_AfterArgs(Params_BeginWalkingOrTurning args);

        public delegate void BeginWalkingOrTurning_BeforeArgs(Params_BeginWalkingOrTurning args);

        public delegate void BeginWalkingOrTurning_WithArgs(Action<Walker, int> orig, Walker self, int facing);

        public delegate void CancelTurn_AfterArgs(Params_CancelTurn args);

        public delegate void CancelTurn_BeforeArgs(Params_CancelTurn args);

        public delegate void CancelTurn_WithArgs(Action<Walker> orig, Walker self);

        public delegate void ChangeFacing_AfterArgs(Params_ChangeFacing args);

        public delegate void ChangeFacing_BeforeArgs(Params_ChangeFacing args);

        public delegate void ChangeFacing_WithArgs(Action<Walker, int> orig, Walker self, int facing);

        public delegate void ClearTurnCooldown_AfterArgs(Params_ClearTurnCooldown args);

        public delegate void ClearTurnCooldown_BeforeArgs(Params_ClearTurnCooldown args);

        public delegate void ClearTurnCooldown_WithArgs(Action<Walker> orig, Walker self);

        public delegate void EndStopping_AfterArgs(Params_EndStopping args);

        public delegate void EndStopping_BeforeArgs(Params_EndStopping args);

        public delegate void EndStopping_WithArgs(Action<Walker> orig, Walker self);

        public delegate void EndTurning_AfterArgs(Params_EndTurning args);

        public delegate void EndTurning_BeforeArgs(Params_EndTurning args);

        public delegate void EndTurning_WithArgs(Action<Walker> orig, Walker self);

        public delegate void Go_AfterArgs(Params_Go args);

        public delegate void Go_BeforeArgs(Params_Go args);

        public delegate void Go_WithArgs(Action<Walker, int> orig, Walker self, int facing);

        public delegate void RecieveGoMessage_AfterArgs(Params_RecieveGoMessage args);

        public delegate void RecieveGoMessage_BeforeArgs(Params_RecieveGoMessage args);

        public delegate void RecieveGoMessage_WithArgs(Action<Walker, int> orig, Walker self, int facing);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<Walker> orig, Walker self);

        public delegate void StartMoving_AfterArgs(Params_StartMoving args);

        public delegate void StartMoving_BeforeArgs(Params_StartMoving args);

        public delegate void StartMoving_WithArgs(Action<Walker> orig, Walker self);

        public delegate void Stop_AfterArgs(Params_Stop args);

        public delegate void Stop_BeforeArgs(Params_Stop args);

        public delegate void Stop_WithArgs(Action<Walker, Walker.StopReasons> orig, Walker self,
            Walker.StopReasons reason);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<Walker> orig, Walker self);

        public delegate void UpdateStopping_AfterArgs(Params_UpdateStopping args);

        public delegate void UpdateStopping_BeforeArgs(Params_UpdateStopping args);

        public delegate void UpdateStopping_WithArgs(Action<Walker> orig, Walker self);

        public delegate void UpdateTurning_AfterArgs(Params_UpdateTurning args);

        public delegate void UpdateTurning_BeforeArgs(Params_UpdateTurning args);

        public delegate void UpdateTurning_WithArgs(Action<Walker> orig, Walker self);

        public delegate void UpdateWaitingForConditions_AfterArgs(Params_UpdateWaitingForConditions args);

        public delegate void UpdateWaitingForConditions_BeforeArgs(Params_UpdateWaitingForConditions args);

        public delegate void UpdateWaitingForConditions_WithArgs(Action<Walker> orig, Walker self);

        public delegate void UpdateWalking_AfterArgs(Params_UpdateWalking args);

        public delegate void UpdateWalking_BeforeArgs(Params_UpdateWalking args);

        public delegate void UpdateWalking_WithArgs(Action<Walker> orig, Walker self);

        public sealed class Params_Awake
        {
            public Walker self;
        }

        public sealed class Params_Start
        {
            public Walker self;
        }

        public sealed class Params_Update
        {
            public Walker self;
        }

        public sealed class Params_StartMoving
        {
            public Walker self;
        }

        public sealed class Params_CancelTurn
        {
            public Walker self;
        }

        public sealed class Params_Go
        {
            public int facing;
            public Walker self;
        }

        public sealed class Params_RecieveGoMessage
        {
            public int facing;
            public Walker self;
        }

        public sealed class Params_Stop
        {
            public Walker.StopReasons reason;
            public Walker self;
        }

        public sealed class Params_ChangeFacing
        {
            public int facing;
            public Walker self;
        }

        public sealed class Params_BeginWaitingForConditions
        {
            public Walker self;
        }

        public sealed class Params_UpdateWaitingForConditions
        {
            public Walker self;
        }

        public sealed class Params_BeginStopped
        {
            public Walker.StopReasons reason;
            public Walker self;
        }

        public sealed class Params_UpdateStopping
        {
            public Walker self;
        }

        public sealed class Params_EndStopping
        {
            public Walker self;
        }

        public sealed class Params_BeginWalkingOrTurning
        {
            public int facing;
            public Walker self;
        }

        public sealed class Params_BeginWalking
        {
            public int facing;
            public Walker self;
        }

        public sealed class Params_UpdateWalking
        {
            public Walker self;
        }

        public sealed class Params_BeginTurning
        {
            public int facing;
            public Walker self;
        }

        public sealed class Params_UpdateTurning
        {
            public Walker self;
        }

        public sealed class Params_EndTurning
        {
            public Walker self;
        }

        public sealed class Params_ClearTurnCooldown
        {
            public Walker self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.StartMoving_BeforeArgs StartMoving
        {
            add
            {
                HookHandler._beforeStartMoving += value;
                HookHandler.HookStartMoving();
            }
            remove => HookHandler._beforeStartMoving -= value;
        }

        public static event Delegates.CancelTurn_BeforeArgs CancelTurn
        {
            add
            {
                HookHandler._beforeCancelTurn += value;
                HookHandler.HookCancelTurn();
            }
            remove => HookHandler._beforeCancelTurn -= value;
        }

        public static event Delegates.Go_BeforeArgs Go
        {
            add
            {
                HookHandler._beforeGo += value;
                HookHandler.HookGo();
            }
            remove => HookHandler._beforeGo -= value;
        }

        public static event Delegates.RecieveGoMessage_BeforeArgs RecieveGoMessage
        {
            add
            {
                HookHandler._beforeRecieveGoMessage += value;
                HookHandler.HookRecieveGoMessage();
            }
            remove => HookHandler._beforeRecieveGoMessage -= value;
        }

        public static event Delegates.Stop_BeforeArgs Stop
        {
            add
            {
                HookHandler._beforeStop += value;
                HookHandler.HookStop();
            }
            remove => HookHandler._beforeStop -= value;
        }

        public static event Delegates.ChangeFacing_BeforeArgs ChangeFacing
        {
            add
            {
                HookHandler._beforeChangeFacing += value;
                HookHandler.HookChangeFacing();
            }
            remove => HookHandler._beforeChangeFacing -= value;
        }

        public static event Delegates.BeginWaitingForConditions_BeforeArgs BeginWaitingForConditions
        {
            add
            {
                HookHandler._beforeBeginWaitingForConditions += value;
                HookHandler.HookBeginWaitingForConditions();
            }
            remove => HookHandler._beforeBeginWaitingForConditions -= value;
        }

        public static event Delegates.UpdateWaitingForConditions_BeforeArgs UpdateWaitingForConditions
        {
            add
            {
                HookHandler._beforeUpdateWaitingForConditions += value;
                HookHandler.HookUpdateWaitingForConditions();
            }
            remove => HookHandler._beforeUpdateWaitingForConditions -= value;
        }

        public static event Delegates.BeginStopped_BeforeArgs BeginStopped
        {
            add
            {
                HookHandler._beforeBeginStopped += value;
                HookHandler.HookBeginStopped();
            }
            remove => HookHandler._beforeBeginStopped -= value;
        }

        public static event Delegates.UpdateStopping_BeforeArgs UpdateStopping
        {
            add
            {
                HookHandler._beforeUpdateStopping += value;
                HookHandler.HookUpdateStopping();
            }
            remove => HookHandler._beforeUpdateStopping -= value;
        }

        public static event Delegates.EndStopping_BeforeArgs EndStopping
        {
            add
            {
                HookHandler._beforeEndStopping += value;
                HookHandler.HookEndStopping();
            }
            remove => HookHandler._beforeEndStopping -= value;
        }

        public static event Delegates.BeginWalkingOrTurning_BeforeArgs BeginWalkingOrTurning
        {
            add
            {
                HookHandler._beforeBeginWalkingOrTurning += value;
                HookHandler.HookBeginWalkingOrTurning();
            }
            remove => HookHandler._beforeBeginWalkingOrTurning -= value;
        }

        public static event Delegates.BeginWalking_BeforeArgs BeginWalking
        {
            add
            {
                HookHandler._beforeBeginWalking += value;
                HookHandler.HookBeginWalking();
            }
            remove => HookHandler._beforeBeginWalking -= value;
        }

        public static event Delegates.UpdateWalking_BeforeArgs UpdateWalking
        {
            add
            {
                HookHandler._beforeUpdateWalking += value;
                HookHandler.HookUpdateWalking();
            }
            remove => HookHandler._beforeUpdateWalking -= value;
        }

        public static event Delegates.BeginTurning_BeforeArgs BeginTurning
        {
            add
            {
                HookHandler._beforeBeginTurning += value;
                HookHandler.HookBeginTurning();
            }
            remove => HookHandler._beforeBeginTurning -= value;
        }

        public static event Delegates.UpdateTurning_BeforeArgs UpdateTurning
        {
            add
            {
                HookHandler._beforeUpdateTurning += value;
                HookHandler.HookUpdateTurning();
            }
            remove => HookHandler._beforeUpdateTurning -= value;
        }

        public static event Delegates.EndTurning_BeforeArgs EndTurning
        {
            add
            {
                HookHandler._beforeEndTurning += value;
                HookHandler.HookEndTurning();
            }
            remove => HookHandler._beforeEndTurning -= value;
        }

        public static event Delegates.ClearTurnCooldown_BeforeArgs ClearTurnCooldown
        {
            add
            {
                HookHandler._beforeClearTurnCooldown += value;
                HookHandler.HookClearTurnCooldown();
            }
            remove => HookHandler._beforeClearTurnCooldown -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.StartMoving_AfterArgs StartMoving
        {
            add
            {
                HookHandler._afterStartMoving += value;
                HookHandler.HookStartMoving();
            }
            remove => HookHandler._afterStartMoving -= value;
        }

        public static event Delegates.CancelTurn_AfterArgs CancelTurn
        {
            add
            {
                HookHandler._afterCancelTurn += value;
                HookHandler.HookCancelTurn();
            }
            remove => HookHandler._afterCancelTurn -= value;
        }

        public static event Delegates.Go_AfterArgs Go
        {
            add
            {
                HookHandler._afterGo += value;
                HookHandler.HookGo();
            }
            remove => HookHandler._afterGo -= value;
        }

        public static event Delegates.RecieveGoMessage_AfterArgs RecieveGoMessage
        {
            add
            {
                HookHandler._afterRecieveGoMessage += value;
                HookHandler.HookRecieveGoMessage();
            }
            remove => HookHandler._afterRecieveGoMessage -= value;
        }

        public static event Delegates.Stop_AfterArgs Stop
        {
            add
            {
                HookHandler._afterStop += value;
                HookHandler.HookStop();
            }
            remove => HookHandler._afterStop -= value;
        }

        public static event Delegates.ChangeFacing_AfterArgs ChangeFacing
        {
            add
            {
                HookHandler._afterChangeFacing += value;
                HookHandler.HookChangeFacing();
            }
            remove => HookHandler._afterChangeFacing -= value;
        }

        public static event Delegates.BeginWaitingForConditions_AfterArgs BeginWaitingForConditions
        {
            add
            {
                HookHandler._afterBeginWaitingForConditions += value;
                HookHandler.HookBeginWaitingForConditions();
            }
            remove => HookHandler._afterBeginWaitingForConditions -= value;
        }

        public static event Delegates.UpdateWaitingForConditions_AfterArgs UpdateWaitingForConditions
        {
            add
            {
                HookHandler._afterUpdateWaitingForConditions += value;
                HookHandler.HookUpdateWaitingForConditions();
            }
            remove => HookHandler._afterUpdateWaitingForConditions -= value;
        }

        public static event Delegates.BeginStopped_AfterArgs BeginStopped
        {
            add
            {
                HookHandler._afterBeginStopped += value;
                HookHandler.HookBeginStopped();
            }
            remove => HookHandler._afterBeginStopped -= value;
        }

        public static event Delegates.UpdateStopping_AfterArgs UpdateStopping
        {
            add
            {
                HookHandler._afterUpdateStopping += value;
                HookHandler.HookUpdateStopping();
            }
            remove => HookHandler._afterUpdateStopping -= value;
        }

        public static event Delegates.EndStopping_AfterArgs EndStopping
        {
            add
            {
                HookHandler._afterEndStopping += value;
                HookHandler.HookEndStopping();
            }
            remove => HookHandler._afterEndStopping -= value;
        }

        public static event Delegates.BeginWalkingOrTurning_AfterArgs BeginWalkingOrTurning
        {
            add
            {
                HookHandler._afterBeginWalkingOrTurning += value;
                HookHandler.HookBeginWalkingOrTurning();
            }
            remove => HookHandler._afterBeginWalkingOrTurning -= value;
        }

        public static event Delegates.BeginWalking_AfterArgs BeginWalking
        {
            add
            {
                HookHandler._afterBeginWalking += value;
                HookHandler.HookBeginWalking();
            }
            remove => HookHandler._afterBeginWalking -= value;
        }

        public static event Delegates.UpdateWalking_AfterArgs UpdateWalking
        {
            add
            {
                HookHandler._afterUpdateWalking += value;
                HookHandler.HookUpdateWalking();
            }
            remove => HookHandler._afterUpdateWalking -= value;
        }

        public static event Delegates.BeginTurning_AfterArgs BeginTurning
        {
            add
            {
                HookHandler._afterBeginTurning += value;
                HookHandler.HookBeginTurning();
            }
            remove => HookHandler._afterBeginTurning -= value;
        }

        public static event Delegates.UpdateTurning_AfterArgs UpdateTurning
        {
            add
            {
                HookHandler._afterUpdateTurning += value;
                HookHandler.HookUpdateTurning();
            }
            remove => HookHandler._afterUpdateTurning -= value;
        }

        public static event Delegates.EndTurning_AfterArgs EndTurning
        {
            add
            {
                HookHandler._afterEndTurning += value;
                HookHandler.HookEndTurning();
            }
            remove => HookHandler._afterEndTurning -= value;
        }

        public static event Delegates.ClearTurnCooldown_AfterArgs ClearTurnCooldown
        {
            add
            {
                HookHandler._afterClearTurnCooldown += value;
                HookHandler.HookClearTurnCooldown();
            }
            remove => HookHandler._afterClearTurnCooldown -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.Walker.hook_Awake Awake
        {
            add => On.Walker.Awake += value;
            remove => On.Walker.Awake -= value;
        }

        public static event On.Walker.hook_Start Start
        {
            add => On.Walker.Start += value;
            remove => On.Walker.Start -= value;
        }

        public static event On.Walker.hook_Update Update
        {
            add => On.Walker.Update += value;
            remove => On.Walker.Update -= value;
        }

        public static event On.Walker.hook_StartMoving StartMoving
        {
            add => On.Walker.StartMoving += value;
            remove => On.Walker.StartMoving -= value;
        }

        public static event On.Walker.hook_CancelTurn CancelTurn
        {
            add => On.Walker.CancelTurn += value;
            remove => On.Walker.CancelTurn -= value;
        }

        public static event On.Walker.hook_Go Go
        {
            add => On.Walker.Go += value;
            remove => On.Walker.Go -= value;
        }

        public static event On.Walker.hook_RecieveGoMessage RecieveGoMessage
        {
            add => On.Walker.RecieveGoMessage += value;
            remove => On.Walker.RecieveGoMessage -= value;
        }

        public static event On.Walker.hook_Stop Stop
        {
            add => On.Walker.Stop += value;
            remove => On.Walker.Stop -= value;
        }

        public static event On.Walker.hook_ChangeFacing ChangeFacing
        {
            add => On.Walker.ChangeFacing += value;
            remove => On.Walker.ChangeFacing -= value;
        }

        public static event On.Walker.hook_BeginWaitingForConditions BeginWaitingForConditions
        {
            add => On.Walker.BeginWaitingForConditions += value;
            remove => On.Walker.BeginWaitingForConditions -= value;
        }

        public static event On.Walker.hook_UpdateWaitingForConditions UpdateWaitingForConditions
        {
            add => On.Walker.UpdateWaitingForConditions += value;
            remove => On.Walker.UpdateWaitingForConditions -= value;
        }

        public static event On.Walker.hook_BeginStopped BeginStopped
        {
            add => On.Walker.BeginStopped += value;
            remove => On.Walker.BeginStopped -= value;
        }

        public static event On.Walker.hook_UpdateStopping UpdateStopping
        {
            add => On.Walker.UpdateStopping += value;
            remove => On.Walker.UpdateStopping -= value;
        }

        public static event On.Walker.hook_EndStopping EndStopping
        {
            add => On.Walker.EndStopping += value;
            remove => On.Walker.EndStopping -= value;
        }

        public static event On.Walker.hook_BeginWalkingOrTurning BeginWalkingOrTurning
        {
            add => On.Walker.BeginWalkingOrTurning += value;
            remove => On.Walker.BeginWalkingOrTurning -= value;
        }

        public static event On.Walker.hook_BeginWalking BeginWalking
        {
            add => On.Walker.BeginWalking += value;
            remove => On.Walker.BeginWalking -= value;
        }

        public static event On.Walker.hook_UpdateWalking UpdateWalking
        {
            add => On.Walker.UpdateWalking += value;
            remove => On.Walker.UpdateWalking -= value;
        }

        public static event On.Walker.hook_BeginTurning BeginTurning
        {
            add => On.Walker.BeginTurning += value;
            remove => On.Walker.BeginTurning -= value;
        }

        public static event On.Walker.hook_UpdateTurning UpdateTurning
        {
            add => On.Walker.UpdateTurning += value;
            remove => On.Walker.UpdateTurning -= value;
        }

        public static event On.Walker.hook_EndTurning EndTurning
        {
            add => On.Walker.EndTurning += value;
            remove => On.Walker.EndTurning -= value;
        }

        public static event On.Walker.hook_ClearTurnCooldown ClearTurnCooldown
        {
            add => On.Walker.ClearTurnCooldown += value;
            remove => On.Walker.ClearTurnCooldown -= value;
        }
    }
}