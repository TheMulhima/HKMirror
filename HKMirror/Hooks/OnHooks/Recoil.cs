using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for Recoil class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnRecoil
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_SkipFreezingByController()
        {
            if (!HookedList.Contains("get_SkipFreezingByController"))
            {
                HookedList.Add("get_SkipFreezingByController");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Recoil), "get_SkipFreezingByController"),
                    get_SkipFreezingByController);
            }
        }

        internal static event Delegates.get_SkipFreezingByController_BeforeArgs _beforeget_SkipFreezingByController;
        internal static event Delegates.get_SkipFreezingByController_NormalArgs _afterget_SkipFreezingByController;

        private static bool get_SkipFreezingByController(Func<Recoil, bool> orig, Recoil self)
        {
            Delegates.Params_get_SkipFreezingByController @params = new()
            {
                self = self
            };
            _beforeget_SkipFreezingByController?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SkipFreezingByController != null) retVal = _afterget_SkipFreezingByController.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_SkipFreezingByController()
        {
            if (!HookedList.Contains("set_SkipFreezingByController"))
            {
                HookedList.Add("set_SkipFreezingByController");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Recoil), "set_SkipFreezingByController"),
                    set_SkipFreezingByController);
            }
        }

        internal static event Delegates.set_SkipFreezingByController_BeforeArgs _beforeset_SkipFreezingByController;
        internal static event Delegates.set_SkipFreezingByController_NormalArgs _afterset_SkipFreezingByController;

        private static void set_SkipFreezingByController(Action<Recoil, bool> orig, Recoil self, bool value)
        {
            Delegates.Params_set_SkipFreezingByController @params = new()
            {
                self = self, value = value
            };
            _beforeset_SkipFreezingByController?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_SkipFreezingByController != null) _afterset_SkipFreezingByController.Invoke(@params);
        }

        internal static void Hookget_IsRecoiling()
        {
            if (!HookedList.Contains("get_IsRecoiling"))
            {
                HookedList.Add("get_IsRecoiling");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Recoil), "get_IsRecoiling"), get_IsRecoiling);
            }
        }

        internal static event Delegates.get_IsRecoiling_BeforeArgs _beforeget_IsRecoiling;
        internal static event Delegates.get_IsRecoiling_NormalArgs _afterget_IsRecoiling;

        private static bool get_IsRecoiling(Func<Recoil, bool> orig, Recoil self)
        {
            Delegates.Params_get_IsRecoiling @params = new()
            {
                self = self
            };
            _beforeget_IsRecoiling?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsRecoiling != null) retVal = _afterget_IsRecoiling.Invoke(@params);
            return retVal;
        }

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                On.Recoil.Reset += Reset;
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(On.Recoil.orig_Reset orig, Recoil self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.Recoil.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.Recoil.orig_Awake orig, Recoil self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.Recoil.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.Recoil.orig_OnEnable orig, Recoil self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookRecoilByHealthManagerFSMParameters()
        {
            if (!HookedList.Contains("RecoilByHealthManagerFSMParameters"))
            {
                HookedList.Add("RecoilByHealthManagerFSMParameters");
                On.Recoil.RecoilByHealthManagerFSMParameters += RecoilByHealthManagerFSMParameters;
            }
        }

        internal static event Delegates.RecoilByHealthManagerFSMParameters_BeforeArgs
            _beforeRecoilByHealthManagerFSMParameters;

        internal static event Delegates.RecoilByHealthManagerFSMParameters_NormalArgs
            _afterRecoilByHealthManagerFSMParameters;

        private static void RecoilByHealthManagerFSMParameters(On.Recoil.orig_RecoilByHealthManagerFSMParameters orig,
            Recoil self)
        {
            Delegates.Params_RecoilByHealthManagerFSMParameters @params = new()
            {
                self = self
            };
            _beforeRecoilByHealthManagerFSMParameters?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRecoilByHealthManagerFSMParameters != null)
                _afterRecoilByHealthManagerFSMParameters.Invoke(@params);
        }

        internal static void HookRecoilByDamage()
        {
            if (!HookedList.Contains("RecoilByDamage"))
            {
                HookedList.Add("RecoilByDamage");
                On.Recoil.RecoilByDamage += RecoilByDamage;
            }
        }

        internal static event Delegates.RecoilByDamage_BeforeArgs _beforeRecoilByDamage;
        internal static event Delegates.RecoilByDamage_NormalArgs _afterRecoilByDamage;

        private static void RecoilByDamage(On.Recoil.orig_RecoilByDamage orig, Recoil self, HitInstance damageInstance)
        {
            Delegates.Params_RecoilByDamage @params = new()
            {
                self = self, damageInstance = damageInstance
            };
            _beforeRecoilByDamage?.Invoke(@params);
            self = @params.self;
            damageInstance = @params.damageInstance;
            orig(self, damageInstance);
            if (_afterRecoilByDamage != null) _afterRecoilByDamage.Invoke(@params);
        }

        internal static void HookRecoilByDirection()
        {
            if (!HookedList.Contains("RecoilByDirection"))
            {
                HookedList.Add("RecoilByDirection");
                On.Recoil.RecoilByDirection += RecoilByDirection;
            }
        }

        internal static event Delegates.RecoilByDirection_BeforeArgs _beforeRecoilByDirection;
        internal static event Delegates.RecoilByDirection_NormalArgs _afterRecoilByDirection;

        private static void RecoilByDirection(On.Recoil.orig_RecoilByDirection orig, Recoil self, int attackDirection,
            float attackMagnitude)
        {
            Delegates.Params_RecoilByDirection @params = new()
            {
                self = self, attackDirection = attackDirection, attackMagnitude = attackMagnitude
            };
            _beforeRecoilByDirection?.Invoke(@params);
            self = @params.self;
            attackDirection = @params.attackDirection;
            attackMagnitude = @params.attackMagnitude;
            orig(self, attackDirection, attackMagnitude);
            if (_afterRecoilByDirection != null) _afterRecoilByDirection.Invoke(@params);
        }

        internal static void HookCancelRecoil()
        {
            if (!HookedList.Contains("CancelRecoil"))
            {
                HookedList.Add("CancelRecoil");
                On.Recoil.CancelRecoil += CancelRecoil;
            }
        }

        internal static event Delegates.CancelRecoil_BeforeArgs _beforeCancelRecoil;
        internal static event Delegates.CancelRecoil_NormalArgs _afterCancelRecoil;

        private static void CancelRecoil(On.Recoil.orig_CancelRecoil orig, Recoil self)
        {
            Delegates.Params_CancelRecoil @params = new()
            {
                self = self
            };
            _beforeCancelRecoil?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCancelRecoil != null) _afterCancelRecoil.Invoke(@params);
        }

        internal static void HookFreeze()
        {
            if (!HookedList.Contains("Freeze"))
            {
                HookedList.Add("Freeze");
                On.Recoil.Freeze += Freeze;
            }
        }

        internal static event Delegates.Freeze_BeforeArgs _beforeFreeze;
        internal static event Delegates.Freeze_NormalArgs _afterFreeze;

        private static void Freeze(On.Recoil.orig_Freeze orig, Recoil self)
        {
            Delegates.Params_Freeze @params = new()
            {
                self = self
            };
            _beforeFreeze?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFreeze != null) _afterFreeze.Invoke(@params);
        }

        internal static void HookFixedUpdate()
        {
            if (!HookedList.Contains("FixedUpdate"))
            {
                HookedList.Add("FixedUpdate");
                On.Recoil.FixedUpdate += FixedUpdate;
            }
        }

        internal static event Delegates.FixedUpdate_BeforeArgs _beforeFixedUpdate;
        internal static event Delegates.FixedUpdate_NormalArgs _afterFixedUpdate;

        private static void FixedUpdate(On.Recoil.orig_FixedUpdate orig, Recoil self)
        {
            Delegates.Params_FixedUpdate @params = new()
            {
                self = self
            };
            _beforeFixedUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFixedUpdate != null) _afterFixedUpdate.Invoke(@params);
        }

        internal static void HookUpdatePhysics()
        {
            if (!HookedList.Contains("UpdatePhysics"))
            {
                HookedList.Add("UpdatePhysics");
                On.Recoil.UpdatePhysics += UpdatePhysics;
            }
        }

        internal static event Delegates.UpdatePhysics_BeforeArgs _beforeUpdatePhysics;
        internal static event Delegates.UpdatePhysics_NormalArgs _afterUpdatePhysics;

        private static void UpdatePhysics(On.Recoil.orig_UpdatePhysics orig, Recoil self, float deltaTime)
        {
            Delegates.Params_UpdatePhysics @params = new()
            {
                self = self, deltaTime = deltaTime
            };
            _beforeUpdatePhysics?.Invoke(@params);
            self = @params.self;
            deltaTime = @params.deltaTime;
            orig(self, deltaTime);
            if (_afterUpdatePhysics != null) _afterUpdatePhysics.Invoke(@params);
        }

        internal static void HookSetRecoilSpeed()
        {
            if (!HookedList.Contains("SetRecoilSpeed"))
            {
                HookedList.Add("SetRecoilSpeed");
                On.Recoil.SetRecoilSpeed += SetRecoilSpeed;
            }
        }

        internal static event Delegates.SetRecoilSpeed_BeforeArgs _beforeSetRecoilSpeed;
        internal static event Delegates.SetRecoilSpeed_NormalArgs _afterSetRecoilSpeed;

        private static void SetRecoilSpeed(On.Recoil.orig_SetRecoilSpeed orig, Recoil self, float newSpeed)
        {
            Delegates.Params_SetRecoilSpeed @params = new()
            {
                self = self, newSpeed = newSpeed
            };
            _beforeSetRecoilSpeed?.Invoke(@params);
            self = @params.self;
            newSpeed = @params.newSpeed;
            orig(self, newSpeed);
            if (_afterSetRecoilSpeed != null) _afterSetRecoilSpeed.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void CancelRecoil_BeforeArgs(Params_CancelRecoil args);

        public delegate void CancelRecoil_NormalArgs(Params_CancelRecoil args);

        public delegate void FixedUpdate_BeforeArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_NormalArgs(Params_FixedUpdate args);

        public delegate void Freeze_BeforeArgs(Params_Freeze args);

        public delegate void Freeze_NormalArgs(Params_Freeze args);

        public delegate void get_IsRecoiling_BeforeArgs(Params_get_IsRecoiling args);

        public delegate bool get_IsRecoiling_NormalArgs(Params_get_IsRecoiling args);

        public delegate void get_SkipFreezingByController_BeforeArgs(Params_get_SkipFreezingByController args);

        public delegate bool get_SkipFreezingByController_NormalArgs(Params_get_SkipFreezingByController args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void RecoilByDamage_BeforeArgs(Params_RecoilByDamage args);

        public delegate void RecoilByDamage_NormalArgs(Params_RecoilByDamage args);

        public delegate void RecoilByDirection_BeforeArgs(Params_RecoilByDirection args);

        public delegate void RecoilByDirection_NormalArgs(Params_RecoilByDirection args);

        public delegate void RecoilByHealthManagerFSMParameters_BeforeArgs(
            Params_RecoilByHealthManagerFSMParameters args);

        public delegate void RecoilByHealthManagerFSMParameters_NormalArgs(
            Params_RecoilByHealthManagerFSMParameters args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public delegate void set_SkipFreezingByController_BeforeArgs(Params_set_SkipFreezingByController args);

        public delegate void set_SkipFreezingByController_NormalArgs(Params_set_SkipFreezingByController args);

        public delegate void SetRecoilSpeed_BeforeArgs(Params_SetRecoilSpeed args);

        public delegate void SetRecoilSpeed_NormalArgs(Params_SetRecoilSpeed args);

        public delegate void UpdatePhysics_BeforeArgs(Params_UpdatePhysics args);

        public delegate void UpdatePhysics_NormalArgs(Params_UpdatePhysics args);

        public sealed class Params_get_SkipFreezingByController
        {
            public Recoil self;
        }

        public sealed class Params_set_SkipFreezingByController
        {
            public Recoil self;
            public bool value;
        }

        public sealed class Params_get_IsRecoiling
        {
            public Recoil self;
        }

        public sealed class Params_Reset
        {
            public Recoil self;
        }

        public sealed class Params_Awake
        {
            public Recoil self;
        }

        public sealed class Params_OnEnable
        {
            public Recoil self;
        }

        public sealed class Params_RecoilByHealthManagerFSMParameters
        {
            public Recoil self;
        }

        public sealed class Params_RecoilByDamage
        {
            public HitInstance damageInstance;
            public Recoil self;
        }

        public sealed class Params_RecoilByDirection
        {
            public int attackDirection;
            public float attackMagnitude;
            public Recoil self;
        }

        public sealed class Params_CancelRecoil
        {
            public Recoil self;
        }

        public sealed class Params_Freeze
        {
            public Recoil self;
        }

        public sealed class Params_FixedUpdate
        {
            public Recoil self;
        }

        public sealed class Params_UpdatePhysics
        {
            public float deltaTime;
            public Recoil self;
        }

        public sealed class Params_SetRecoilSpeed
        {
            public float newSpeed;
            public Recoil self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_SkipFreezingByController_BeforeArgs get_SkipFreezingByController
        {
            add
            {
                HookHandler._beforeget_SkipFreezingByController += value;
                HookHandler.Hookget_SkipFreezingByController();
            }
            remove => HookHandler._beforeget_SkipFreezingByController -= value;
        }

        public static event Delegates.set_SkipFreezingByController_BeforeArgs set_SkipFreezingByController
        {
            add
            {
                HookHandler._beforeset_SkipFreezingByController += value;
                HookHandler.Hookset_SkipFreezingByController();
            }
            remove => HookHandler._beforeset_SkipFreezingByController -= value;
        }

        public static event Delegates.get_IsRecoiling_BeforeArgs get_IsRecoiling
        {
            add
            {
                HookHandler._beforeget_IsRecoiling += value;
                HookHandler.Hookget_IsRecoiling();
            }
            remove => HookHandler._beforeget_IsRecoiling -= value;
        }

        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.RecoilByHealthManagerFSMParameters_BeforeArgs RecoilByHealthManagerFSMParameters
        {
            add
            {
                HookHandler._beforeRecoilByHealthManagerFSMParameters += value;
                HookHandler.HookRecoilByHealthManagerFSMParameters();
            }
            remove => HookHandler._beforeRecoilByHealthManagerFSMParameters -= value;
        }

        public static event Delegates.RecoilByDamage_BeforeArgs RecoilByDamage
        {
            add
            {
                HookHandler._beforeRecoilByDamage += value;
                HookHandler.HookRecoilByDamage();
            }
            remove => HookHandler._beforeRecoilByDamage -= value;
        }

        public static event Delegates.RecoilByDirection_BeforeArgs RecoilByDirection
        {
            add
            {
                HookHandler._beforeRecoilByDirection += value;
                HookHandler.HookRecoilByDirection();
            }
            remove => HookHandler._beforeRecoilByDirection -= value;
        }

        public static event Delegates.CancelRecoil_BeforeArgs CancelRecoil
        {
            add
            {
                HookHandler._beforeCancelRecoil += value;
                HookHandler.HookCancelRecoil();
            }
            remove => HookHandler._beforeCancelRecoil -= value;
        }

        public static event Delegates.Freeze_BeforeArgs Freeze
        {
            add
            {
                HookHandler._beforeFreeze += value;
                HookHandler.HookFreeze();
            }
            remove => HookHandler._beforeFreeze -= value;
        }

        public static event Delegates.FixedUpdate_BeforeArgs FixedUpdate
        {
            add
            {
                HookHandler._beforeFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._beforeFixedUpdate -= value;
        }

        public static event Delegates.UpdatePhysics_BeforeArgs UpdatePhysics
        {
            add
            {
                HookHandler._beforeUpdatePhysics += value;
                HookHandler.HookUpdatePhysics();
            }
            remove => HookHandler._beforeUpdatePhysics -= value;
        }

        public static event Delegates.SetRecoilSpeed_BeforeArgs SetRecoilSpeed
        {
            add
            {
                HookHandler._beforeSetRecoilSpeed += value;
                HookHandler.HookSetRecoilSpeed();
            }
            remove => HookHandler._beforeSetRecoilSpeed -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_SkipFreezingByController_NormalArgs get_SkipFreezingByController
        {
            add
            {
                HookHandler._afterget_SkipFreezingByController += value;
                HookHandler.Hookget_SkipFreezingByController();
            }
            remove => HookHandler._afterget_SkipFreezingByController -= value;
        }

        public static event Delegates.set_SkipFreezingByController_NormalArgs set_SkipFreezingByController
        {
            add
            {
                HookHandler._afterset_SkipFreezingByController += value;
                HookHandler.Hookset_SkipFreezingByController();
            }
            remove => HookHandler._afterset_SkipFreezingByController -= value;
        }

        public static event Delegates.get_IsRecoiling_NormalArgs get_IsRecoiling
        {
            add
            {
                HookHandler._afterget_IsRecoiling += value;
                HookHandler.Hookget_IsRecoiling();
            }
            remove => HookHandler._afterget_IsRecoiling -= value;
        }

        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.RecoilByHealthManagerFSMParameters_NormalArgs RecoilByHealthManagerFSMParameters
        {
            add
            {
                HookHandler._afterRecoilByHealthManagerFSMParameters += value;
                HookHandler.HookRecoilByHealthManagerFSMParameters();
            }
            remove => HookHandler._afterRecoilByHealthManagerFSMParameters -= value;
        }

        public static event Delegates.RecoilByDamage_NormalArgs RecoilByDamage
        {
            add
            {
                HookHandler._afterRecoilByDamage += value;
                HookHandler.HookRecoilByDamage();
            }
            remove => HookHandler._afterRecoilByDamage -= value;
        }

        public static event Delegates.RecoilByDirection_NormalArgs RecoilByDirection
        {
            add
            {
                HookHandler._afterRecoilByDirection += value;
                HookHandler.HookRecoilByDirection();
            }
            remove => HookHandler._afterRecoilByDirection -= value;
        }

        public static event Delegates.CancelRecoil_NormalArgs CancelRecoil
        {
            add
            {
                HookHandler._afterCancelRecoil += value;
                HookHandler.HookCancelRecoil();
            }
            remove => HookHandler._afterCancelRecoil -= value;
        }

        public static event Delegates.Freeze_NormalArgs Freeze
        {
            add
            {
                HookHandler._afterFreeze += value;
                HookHandler.HookFreeze();
            }
            remove => HookHandler._afterFreeze -= value;
        }

        public static event Delegates.FixedUpdate_NormalArgs FixedUpdate
        {
            add
            {
                HookHandler._afterFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._afterFixedUpdate -= value;
        }

        public static event Delegates.UpdatePhysics_NormalArgs UpdatePhysics
        {
            add
            {
                HookHandler._afterUpdatePhysics += value;
                HookHandler.HookUpdatePhysics();
            }
            remove => HookHandler._afterUpdatePhysics -= value;
        }

        public static event Delegates.SetRecoilSpeed_NormalArgs SetRecoilSpeed
        {
            add
            {
                HookHandler._afterSetRecoilSpeed += value;
                HookHandler.HookSetRecoilSpeed();
            }
            remove => HookHandler._afterSetRecoilSpeed -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_SkipFreezingByController_NormalArgs get_SkipFreezingByController
        {
            add => HookEndpointManager.Add<Delegates.get_SkipFreezingByController_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Recoil), "get_SkipFreezingByController"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SkipFreezingByController_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Recoil), "get_SkipFreezingByController"), value);
        }

        public static event Delegates.set_SkipFreezingByController_NormalArgs set_SkipFreezingByController
        {
            add => HookEndpointManager.Add<Delegates.set_SkipFreezingByController_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Recoil), "set_SkipFreezingByController"), value);
            remove => HookEndpointManager.Remove<Delegates.set_SkipFreezingByController_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Recoil), "set_SkipFreezingByController"), value);
        }

        public static event Delegates.get_IsRecoiling_NormalArgs get_IsRecoiling
        {
            add => HookEndpointManager.Add<Delegates.get_IsRecoiling_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Recoil), "get_IsRecoiling"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsRecoiling_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Recoil), "get_IsRecoiling"), value);
        }

        public static event On.Recoil.hook_Reset Reset
        {
            add => On.Recoil.Reset += value;
            remove => On.Recoil.Reset -= value;
        }

        public static event On.Recoil.hook_Awake Awake
        {
            add => On.Recoil.Awake += value;
            remove => On.Recoil.Awake -= value;
        }

        public static event On.Recoil.hook_OnEnable OnEnable
        {
            add => On.Recoil.OnEnable += value;
            remove => On.Recoil.OnEnable -= value;
        }

        public static event On.Recoil.hook_RecoilByHealthManagerFSMParameters RecoilByHealthManagerFSMParameters
        {
            add => On.Recoil.RecoilByHealthManagerFSMParameters += value;
            remove => On.Recoil.RecoilByHealthManagerFSMParameters -= value;
        }

        public static event On.Recoil.hook_RecoilByDamage RecoilByDamage
        {
            add => On.Recoil.RecoilByDamage += value;
            remove => On.Recoil.RecoilByDamage -= value;
        }

        public static event On.Recoil.hook_RecoilByDirection RecoilByDirection
        {
            add => On.Recoil.RecoilByDirection += value;
            remove => On.Recoil.RecoilByDirection -= value;
        }

        public static event On.Recoil.hook_CancelRecoil CancelRecoil
        {
            add => On.Recoil.CancelRecoil += value;
            remove => On.Recoil.CancelRecoil -= value;
        }

        public static event On.Recoil.hook_Freeze Freeze
        {
            add => On.Recoil.Freeze += value;
            remove => On.Recoil.Freeze -= value;
        }

        public static event On.Recoil.hook_FixedUpdate FixedUpdate
        {
            add => On.Recoil.FixedUpdate += value;
            remove => On.Recoil.FixedUpdate -= value;
        }

        public static event On.Recoil.hook_UpdatePhysics UpdatePhysics
        {
            add => On.Recoil.UpdatePhysics += value;
            remove => On.Recoil.UpdatePhysics -= value;
        }

        public static event On.Recoil.hook_SetRecoilSpeed SetRecoilSpeed
        {
            add => On.Recoil.SetRecoilSpeed += value;
            remove => On.Recoil.SetRecoilSpeed -= value;
        }
    }
}