using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GOGGalaxyOnlineSubsystem class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGOGGalaxyOnlineSubsystem
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookIsPackaged()
        {
            if (!HookedList.Contains("IsPackaged"))
            {
                HookedList.Add("IsPackaged");
                On.GOGGalaxyOnlineSubsystem.IsPackaged += IsPackaged;
            }
        }

        internal static event Delegates.IsPackaged_BeforeArgs _beforeIsPackaged;
        internal static event Delegates.IsPackaged_NormalArgs _afterIsPackaged;

        private static bool IsPackaged(On.GOGGalaxyOnlineSubsystem.orig_IsPackaged orig,
            DesktopPlatform desktopPlatform)
        {
            Delegates.Params_IsPackaged @params = new()
            {
                desktopPlatform = desktopPlatform
            };
            _beforeIsPackaged?.Invoke(@params);
            desktopPlatform = @params.desktopPlatform;
            var retVal = orig(desktopPlatform);
            if (_afterIsPackaged != null) retVal = _afterIsPackaged.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_DidInitialize()
        {
            if (!HookedList.Contains("get_DidInitialize"))
            {
                HookedList.Add("get_DidInitialize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GOGGalaxyOnlineSubsystem), "get_DidInitialize"),
                    get_DidInitialize);
            }
        }

        internal static event Delegates.get_DidInitialize_BeforeArgs _beforeget_DidInitialize;
        internal static event Delegates.get_DidInitialize_NormalArgs _afterget_DidInitialize;

        private static bool get_DidInitialize(Func<GOGGalaxyOnlineSubsystem, bool> orig, GOGGalaxyOnlineSubsystem self)
        {
            Delegates.Params_get_DidInitialize @params = new()
            {
                self = self
            };
            _beforeget_DidInitialize?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DidInitialize != null) retVal = _afterget_DidInitialize.Invoke(@params);
            return retVal;
        }

        internal static void HookDispose()
        {
            if (!HookedList.Contains("Dispose"))
            {
                HookedList.Add("Dispose");
                On.GOGGalaxyOnlineSubsystem.Dispose += Dispose;
            }
        }

        internal static event Delegates.Dispose_BeforeArgs _beforeDispose;
        internal static event Delegates.Dispose_NormalArgs _afterDispose;

        private static void Dispose(On.GOGGalaxyOnlineSubsystem.orig_Dispose orig, GOGGalaxyOnlineSubsystem self)
        {
            Delegates.Params_Dispose @params = new()
            {
                self = self
            };
            _beforeDispose?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDispose != null) _afterDispose.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.GOGGalaxyOnlineSubsystem.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.GOGGalaxyOnlineSubsystem.orig_Update orig, GOGGalaxyOnlineSubsystem self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookOnAuthorized()
        {
            if (!HookedList.Contains("OnAuthorized"))
            {
                HookedList.Add("OnAuthorized");
                On.GOGGalaxyOnlineSubsystem.OnAuthorized += OnAuthorized;
            }
        }

        internal static event Delegates.OnAuthorized_BeforeArgs _beforeOnAuthorized;
        internal static event Delegates.OnAuthorized_NormalArgs _afterOnAuthorized;

        private static void OnAuthorized(On.GOGGalaxyOnlineSubsystem.orig_OnAuthorized orig,
            GOGGalaxyOnlineSubsystem self)
        {
            Delegates.Params_OnAuthorized @params = new()
            {
                self = self
            };
            _beforeOnAuthorized?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnAuthorized != null) _afterOnAuthorized.Invoke(@params);
        }

        internal static void Hookget_AreAchievementsFetched()
        {
            if (!HookedList.Contains("get_AreAchievementsFetched"))
            {
                HookedList.Add("get_AreAchievementsFetched");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GOGGalaxyOnlineSubsystem), "get_AreAchievementsFetched"),
                    get_AreAchievementsFetched);
            }
        }

        internal static event Delegates.get_AreAchievementsFetched_BeforeArgs _beforeget_AreAchievementsFetched;
        internal static event Delegates.get_AreAchievementsFetched_NormalArgs _afterget_AreAchievementsFetched;

        private static bool get_AreAchievementsFetched(Func<GOGGalaxyOnlineSubsystem, bool> orig,
            GOGGalaxyOnlineSubsystem self)
        {
            Delegates.Params_get_AreAchievementsFetched @params = new()
            {
                self = self
            };
            _beforeget_AreAchievementsFetched?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AreAchievementsFetched != null) retVal = _afterget_AreAchievementsFetched.Invoke(@params);
            return retVal;
        }

        internal static void HookOnStatisticsReceived()
        {
            if (!HookedList.Contains("OnStatisticsReceived"))
            {
                HookedList.Add("OnStatisticsReceived");
                On.GOGGalaxyOnlineSubsystem.OnStatisticsReceived += OnStatisticsReceived;
            }
        }

        internal static event Delegates.OnStatisticsReceived_BeforeArgs _beforeOnStatisticsReceived;
        internal static event Delegates.OnStatisticsReceived_NormalArgs _afterOnStatisticsReceived;

        private static void OnStatisticsReceived(On.GOGGalaxyOnlineSubsystem.orig_OnStatisticsReceived orig,
            GOGGalaxyOnlineSubsystem self)
        {
            Delegates.Params_OnStatisticsReceived @params = new()
            {
                self = self
            };
            _beforeOnStatisticsReceived?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnStatisticsReceived != null) _afterOnStatisticsReceived.Invoke(@params);
        }

        internal static void HookIsAchievementUnlocked()
        {
            if (!HookedList.Contains("IsAchievementUnlocked"))
            {
                HookedList.Add("IsAchievementUnlocked");
                On.GOGGalaxyOnlineSubsystem.IsAchievementUnlocked += IsAchievementUnlocked;
            }
        }

        internal static event Delegates.IsAchievementUnlocked_BeforeArgs _beforeIsAchievementUnlocked;
        internal static event Delegates.IsAchievementUnlocked_NormalArgs _afterIsAchievementUnlocked;

        private static bool? IsAchievementUnlocked(On.GOGGalaxyOnlineSubsystem.orig_IsAchievementUnlocked orig,
            GOGGalaxyOnlineSubsystem self, string achievementId)
        {
            Delegates.Params_IsAchievementUnlocked @params = new()
            {
                self = self, achievementId = achievementId
            };
            _beforeIsAchievementUnlocked?.Invoke(@params);
            self = @params.self;
            achievementId = @params.achievementId;
            var retVal = orig(self, achievementId);
            if (_afterIsAchievementUnlocked != null) retVal = _afterIsAchievementUnlocked.Invoke(@params);
            return retVal;
        }

        internal static void HookPushAchievementUnlock()
        {
            if (!HookedList.Contains("PushAchievementUnlock"))
            {
                HookedList.Add("PushAchievementUnlock");
                On.GOGGalaxyOnlineSubsystem.PushAchievementUnlock += PushAchievementUnlock;
            }
        }

        internal static event Delegates.PushAchievementUnlock_BeforeArgs _beforePushAchievementUnlock;
        internal static event Delegates.PushAchievementUnlock_NormalArgs _afterPushAchievementUnlock;

        private static void PushAchievementUnlock(On.GOGGalaxyOnlineSubsystem.orig_PushAchievementUnlock orig,
            GOGGalaxyOnlineSubsystem self, string achievementId)
        {
            Delegates.Params_PushAchievementUnlock @params = new()
            {
                self = self, achievementId = achievementId
            };
            _beforePushAchievementUnlock?.Invoke(@params);
            self = @params.self;
            achievementId = @params.achievementId;
            orig(self, achievementId);
            if (_afterPushAchievementUnlock != null) _afterPushAchievementUnlock.Invoke(@params);
        }

        internal static void HookResetAchievements()
        {
            if (!HookedList.Contains("ResetAchievements"))
            {
                HookedList.Add("ResetAchievements");
                On.GOGGalaxyOnlineSubsystem.ResetAchievements += ResetAchievements;
            }
        }

        internal static event Delegates.ResetAchievements_BeforeArgs _beforeResetAchievements;
        internal static event Delegates.ResetAchievements_NormalArgs _afterResetAchievements;

        private static void ResetAchievements(On.GOGGalaxyOnlineSubsystem.orig_ResetAchievements orig,
            GOGGalaxyOnlineSubsystem self)
        {
            Delegates.Params_ResetAchievements @params = new()
            {
                self = self
            };
            _beforeResetAchievements?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetAchievements != null) _afterResetAchievements.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Dispose_BeforeArgs(Params_Dispose args);

        public delegate void Dispose_NormalArgs(Params_Dispose args);

        public delegate void get_AreAchievementsFetched_BeforeArgs(Params_get_AreAchievementsFetched args);

        public delegate bool get_AreAchievementsFetched_NormalArgs(Params_get_AreAchievementsFetched args);

        public delegate void get_DidInitialize_BeforeArgs(Params_get_DidInitialize args);

        public delegate bool get_DidInitialize_NormalArgs(Params_get_DidInitialize args);

        public delegate void IsAchievementUnlocked_BeforeArgs(Params_IsAchievementUnlocked args);

        public delegate bool? IsAchievementUnlocked_NormalArgs(Params_IsAchievementUnlocked args);

        public delegate void IsPackaged_BeforeArgs(Params_IsPackaged args);

        public delegate bool IsPackaged_NormalArgs(Params_IsPackaged args);

        public delegate void OnAuthorized_BeforeArgs(Params_OnAuthorized args);

        public delegate void OnAuthorized_NormalArgs(Params_OnAuthorized args);

        public delegate void OnStatisticsReceived_BeforeArgs(Params_OnStatisticsReceived args);

        public delegate void OnStatisticsReceived_NormalArgs(Params_OnStatisticsReceived args);

        public delegate void PushAchievementUnlock_BeforeArgs(Params_PushAchievementUnlock args);

        public delegate void PushAchievementUnlock_NormalArgs(Params_PushAchievementUnlock args);

        public delegate void ResetAchievements_BeforeArgs(Params_ResetAchievements args);

        public delegate void ResetAchievements_NormalArgs(Params_ResetAchievements args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_IsPackaged
        {
            public DesktopPlatform desktopPlatform;
        }

        public sealed class Params_get_DidInitialize
        {
            public GOGGalaxyOnlineSubsystem self;
        }

        public sealed class Params_Dispose
        {
            public GOGGalaxyOnlineSubsystem self;
        }

        public sealed class Params_Update
        {
            public GOGGalaxyOnlineSubsystem self;
        }

        public sealed class Params_OnAuthorized
        {
            public GOGGalaxyOnlineSubsystem self;
        }

        public sealed class Params_get_AreAchievementsFetched
        {
            public GOGGalaxyOnlineSubsystem self;
        }

        public sealed class Params_OnStatisticsReceived
        {
            public GOGGalaxyOnlineSubsystem self;
        }

        public sealed class Params_IsAchievementUnlocked
        {
            public string achievementId;
            public GOGGalaxyOnlineSubsystem self;
        }

        public sealed class Params_PushAchievementUnlock
        {
            public string achievementId;
            public GOGGalaxyOnlineSubsystem self;
        }

        public sealed class Params_ResetAchievements
        {
            public GOGGalaxyOnlineSubsystem self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.IsPackaged_BeforeArgs IsPackaged
        {
            add
            {
                HookHandler._beforeIsPackaged += value;
                HookHandler.HookIsPackaged();
            }
            remove => HookHandler._beforeIsPackaged -= value;
        }

        public static event Delegates.get_DidInitialize_BeforeArgs get_DidInitialize
        {
            add
            {
                HookHandler._beforeget_DidInitialize += value;
                HookHandler.Hookget_DidInitialize();
            }
            remove => HookHandler._beforeget_DidInitialize -= value;
        }

        public static event Delegates.Dispose_BeforeArgs Dispose
        {
            add
            {
                HookHandler._beforeDispose += value;
                HookHandler.HookDispose();
            }
            remove => HookHandler._beforeDispose -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.OnAuthorized_BeforeArgs OnAuthorized
        {
            add
            {
                HookHandler._beforeOnAuthorized += value;
                HookHandler.HookOnAuthorized();
            }
            remove => HookHandler._beforeOnAuthorized -= value;
        }

        public static event Delegates.get_AreAchievementsFetched_BeforeArgs get_AreAchievementsFetched
        {
            add
            {
                HookHandler._beforeget_AreAchievementsFetched += value;
                HookHandler.Hookget_AreAchievementsFetched();
            }
            remove => HookHandler._beforeget_AreAchievementsFetched -= value;
        }

        public static event Delegates.OnStatisticsReceived_BeforeArgs OnStatisticsReceived
        {
            add
            {
                HookHandler._beforeOnStatisticsReceived += value;
                HookHandler.HookOnStatisticsReceived();
            }
            remove => HookHandler._beforeOnStatisticsReceived -= value;
        }

        public static event Delegates.IsAchievementUnlocked_BeforeArgs IsAchievementUnlocked
        {
            add
            {
                HookHandler._beforeIsAchievementUnlocked += value;
                HookHandler.HookIsAchievementUnlocked();
            }
            remove => HookHandler._beforeIsAchievementUnlocked -= value;
        }

        public static event Delegates.PushAchievementUnlock_BeforeArgs PushAchievementUnlock
        {
            add
            {
                HookHandler._beforePushAchievementUnlock += value;
                HookHandler.HookPushAchievementUnlock();
            }
            remove => HookHandler._beforePushAchievementUnlock -= value;
        }

        public static event Delegates.ResetAchievements_BeforeArgs ResetAchievements
        {
            add
            {
                HookHandler._beforeResetAchievements += value;
                HookHandler.HookResetAchievements();
            }
            remove => HookHandler._beforeResetAchievements -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.IsPackaged_NormalArgs IsPackaged
        {
            add
            {
                HookHandler._afterIsPackaged += value;
                HookHandler.HookIsPackaged();
            }
            remove => HookHandler._afterIsPackaged -= value;
        }

        public static event Delegates.get_DidInitialize_NormalArgs get_DidInitialize
        {
            add
            {
                HookHandler._afterget_DidInitialize += value;
                HookHandler.Hookget_DidInitialize();
            }
            remove => HookHandler._afterget_DidInitialize -= value;
        }

        public static event Delegates.Dispose_NormalArgs Dispose
        {
            add
            {
                HookHandler._afterDispose += value;
                HookHandler.HookDispose();
            }
            remove => HookHandler._afterDispose -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.OnAuthorized_NormalArgs OnAuthorized
        {
            add
            {
                HookHandler._afterOnAuthorized += value;
                HookHandler.HookOnAuthorized();
            }
            remove => HookHandler._afterOnAuthorized -= value;
        }

        public static event Delegates.get_AreAchievementsFetched_NormalArgs get_AreAchievementsFetched
        {
            add
            {
                HookHandler._afterget_AreAchievementsFetched += value;
                HookHandler.Hookget_AreAchievementsFetched();
            }
            remove => HookHandler._afterget_AreAchievementsFetched -= value;
        }

        public static event Delegates.OnStatisticsReceived_NormalArgs OnStatisticsReceived
        {
            add
            {
                HookHandler._afterOnStatisticsReceived += value;
                HookHandler.HookOnStatisticsReceived();
            }
            remove => HookHandler._afterOnStatisticsReceived -= value;
        }

        public static event Delegates.IsAchievementUnlocked_NormalArgs IsAchievementUnlocked
        {
            add
            {
                HookHandler._afterIsAchievementUnlocked += value;
                HookHandler.HookIsAchievementUnlocked();
            }
            remove => HookHandler._afterIsAchievementUnlocked -= value;
        }

        public static event Delegates.PushAchievementUnlock_NormalArgs PushAchievementUnlock
        {
            add
            {
                HookHandler._afterPushAchievementUnlock += value;
                HookHandler.HookPushAchievementUnlock();
            }
            remove => HookHandler._afterPushAchievementUnlock -= value;
        }

        public static event Delegates.ResetAchievements_NormalArgs ResetAchievements
        {
            add
            {
                HookHandler._afterResetAchievements += value;
                HookHandler.HookResetAchievements();
            }
            remove => HookHandler._afterResetAchievements -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.GOGGalaxyOnlineSubsystem.hook_IsPackaged IsPackaged
        {
            add => On.GOGGalaxyOnlineSubsystem.IsPackaged += value;
            remove => On.GOGGalaxyOnlineSubsystem.IsPackaged -= value;
        }

        public static event Delegates.get_DidInitialize_NormalArgs get_DidInitialize
        {
            add => HookEndpointManager.Add<Delegates.get_DidInitialize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GOGGalaxyOnlineSubsystem), "get_DidInitialize"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DidInitialize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GOGGalaxyOnlineSubsystem), "get_DidInitialize"), value);
        }

        public static event On.GOGGalaxyOnlineSubsystem.hook_Dispose Dispose
        {
            add => On.GOGGalaxyOnlineSubsystem.Dispose += value;
            remove => On.GOGGalaxyOnlineSubsystem.Dispose -= value;
        }

        public static event On.GOGGalaxyOnlineSubsystem.hook_Update Update
        {
            add => On.GOGGalaxyOnlineSubsystem.Update += value;
            remove => On.GOGGalaxyOnlineSubsystem.Update -= value;
        }

        public static event On.GOGGalaxyOnlineSubsystem.hook_OnAuthorized OnAuthorized
        {
            add => On.GOGGalaxyOnlineSubsystem.OnAuthorized += value;
            remove => On.GOGGalaxyOnlineSubsystem.OnAuthorized -= value;
        }

        public static event Delegates.get_AreAchievementsFetched_NormalArgs get_AreAchievementsFetched
        {
            add => HookEndpointManager.Add<Delegates.get_AreAchievementsFetched_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GOGGalaxyOnlineSubsystem), "get_AreAchievementsFetched"), value);
            remove => HookEndpointManager.Remove<Delegates.get_AreAchievementsFetched_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GOGGalaxyOnlineSubsystem), "get_AreAchievementsFetched"), value);
        }

        public static event On.GOGGalaxyOnlineSubsystem.hook_OnStatisticsReceived OnStatisticsReceived
        {
            add => On.GOGGalaxyOnlineSubsystem.OnStatisticsReceived += value;
            remove => On.GOGGalaxyOnlineSubsystem.OnStatisticsReceived -= value;
        }

        public static event On.GOGGalaxyOnlineSubsystem.hook_IsAchievementUnlocked IsAchievementUnlocked
        {
            add => On.GOGGalaxyOnlineSubsystem.IsAchievementUnlocked += value;
            remove => On.GOGGalaxyOnlineSubsystem.IsAchievementUnlocked -= value;
        }

        public static event On.GOGGalaxyOnlineSubsystem.hook_PushAchievementUnlock PushAchievementUnlock
        {
            add => On.GOGGalaxyOnlineSubsystem.PushAchievementUnlock += value;
            remove => On.GOGGalaxyOnlineSubsystem.PushAchievementUnlock -= value;
        }

        public static event On.GOGGalaxyOnlineSubsystem.hook_ResetAchievements ResetAchievements
        {
            add => On.GOGGalaxyOnlineSubsystem.ResetAchievements += value;
            remove => On.GOGGalaxyOnlineSubsystem.ResetAchievements -= value;
        }
    }
}