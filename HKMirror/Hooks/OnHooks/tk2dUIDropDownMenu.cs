using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for tk2dUIDropDownMenu class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUIDropDownMenu
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_ItemList()
{
if (!HookedList.Contains("get_ItemList"))
{
HookedList.Add("get_ItemList");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_ItemList", true), get_ItemList);

}
}
internal static event Delegates.get_ItemList_BeforeArgs _beforeget_ItemList;
internal static event Delegates.get_ItemList_AfterArgs _afterget_ItemList;
private static System.Collections.Generic.List<string> get_ItemList(Func<tk2dUIDropDownMenu, System.Collections.Generic.List<string>> orig, tk2dUIDropDownMenu self)
{
Delegates.Params_get_ItemList @params = new() 
{
self = self
};
if (_beforeget_ItemList != null)
{
foreach (Delegates.get_ItemList_BeforeArgs toInvoke in _beforeget_ItemList.GetInvocationList())
{
try
{
_beforeget_ItemList?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_ItemList != null)
{
foreach (Delegates.get_ItemList_AfterArgs toInvoke in _afterget_ItemList.GetInvocationList())
{
try
{
retVal = _afterget_ItemList.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_ItemList()
{
if (!HookedList.Contains("set_ItemList"))
{
HookedList.Add("set_ItemList");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_ItemList", true), set_ItemList);

}
}
internal static event Delegates.set_ItemList_BeforeArgs _beforeset_ItemList;
internal static event Delegates.set_ItemList_AfterArgs _afterset_ItemList;
private static void set_ItemList(Action<tk2dUIDropDownMenu,  System.Collections.Generic.List<string>> orig, tk2dUIDropDownMenu self,  System.Collections.Generic.List<string> value)
{
Delegates.Params_set_ItemList @params = new() 
{
self = self
, value = value
};
if (_beforeset_ItemList != null)
{
foreach (Delegates.set_ItemList_BeforeArgs toInvoke in _beforeset_ItemList.GetInvocationList())
{
try
{
_beforeset_ItemList?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_ItemList != null)
{
foreach (Delegates.set_ItemList_AfterArgs toInvoke in _afterset_ItemList.GetInvocationList())
{
try
{
_afterset_ItemList.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_Index()
{
if (!HookedList.Contains("get_Index"))
{
HookedList.Add("get_Index");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_Index", true), get_Index);

}
}
internal static event Delegates.get_Index_BeforeArgs _beforeget_Index;
internal static event Delegates.get_Index_AfterArgs _afterget_Index;
private static int get_Index(Func<tk2dUIDropDownMenu, int> orig, tk2dUIDropDownMenu self)
{
Delegates.Params_get_Index @params = new() 
{
self = self
};
if (_beforeget_Index != null)
{
foreach (Delegates.get_Index_BeforeArgs toInvoke in _beforeget_Index.GetInvocationList())
{
try
{
_beforeget_Index?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_Index != null)
{
foreach (Delegates.get_Index_AfterArgs toInvoke in _afterget_Index.GetInvocationList())
{
try
{
retVal = _afterget_Index.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_Index()
{
if (!HookedList.Contains("set_Index"))
{
HookedList.Add("set_Index");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_Index", true), set_Index);

}
}
internal static event Delegates.set_Index_BeforeArgs _beforeset_Index;
internal static event Delegates.set_Index_AfterArgs _afterset_Index;
private static void set_Index(Action<tk2dUIDropDownMenu,  int> orig, tk2dUIDropDownMenu self,  int value)
{
Delegates.Params_set_Index @params = new() 
{
self = self
, value = value
};
if (_beforeset_Index != null)
{
foreach (Delegates.set_Index_BeforeArgs toInvoke in _beforeset_Index.GetInvocationList())
{
try
{
_beforeset_Index?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_Index != null)
{
foreach (Delegates.set_Index_AfterArgs toInvoke in _afterset_Index.GetInvocationList())
{
try
{
_afterset_Index.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_SelectedItem()
{
if (!HookedList.Contains("get_SelectedItem"))
{
HookedList.Add("get_SelectedItem");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_SelectedItem", true), get_SelectedItem);

}
}
internal static event Delegates.get_SelectedItem_BeforeArgs _beforeget_SelectedItem;
internal static event Delegates.get_SelectedItem_AfterArgs _afterget_SelectedItem;
private static string get_SelectedItem(Func<tk2dUIDropDownMenu, string> orig, tk2dUIDropDownMenu self)
{
Delegates.Params_get_SelectedItem @params = new() 
{
self = self
};
if (_beforeget_SelectedItem != null)
{
foreach (Delegates.get_SelectedItem_BeforeArgs toInvoke in _beforeget_SelectedItem.GetInvocationList())
{
try
{
_beforeget_SelectedItem?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_SelectedItem != null)
{
foreach (Delegates.get_SelectedItem_AfterArgs toInvoke in _afterget_SelectedItem.GetInvocationList())
{
try
{
retVal = _afterget_SelectedItem.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_SendMessageTarget()
{
if (!HookedList.Contains("get_SendMessageTarget"))
{
HookedList.Add("get_SendMessageTarget");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_SendMessageTarget", true), get_SendMessageTarget);

}
}
internal static event Delegates.get_SendMessageTarget_BeforeArgs _beforeget_SendMessageTarget;
internal static event Delegates.get_SendMessageTarget_AfterArgs _afterget_SendMessageTarget;
private static UnityEngine.GameObject get_SendMessageTarget(Func<tk2dUIDropDownMenu, UnityEngine.GameObject> orig, tk2dUIDropDownMenu self)
{
Delegates.Params_get_SendMessageTarget @params = new() 
{
self = self
};
if (_beforeget_SendMessageTarget != null)
{
foreach (Delegates.get_SendMessageTarget_BeforeArgs toInvoke in _beforeget_SendMessageTarget.GetInvocationList())
{
try
{
_beforeget_SendMessageTarget?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_SendMessageTarget != null)
{
foreach (Delegates.get_SendMessageTarget_AfterArgs toInvoke in _afterget_SendMessageTarget.GetInvocationList())
{
try
{
retVal = _afterget_SendMessageTarget.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_SendMessageTarget()
{
if (!HookedList.Contains("set_SendMessageTarget"))
{
HookedList.Add("set_SendMessageTarget");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_SendMessageTarget", true), set_SendMessageTarget);

}
}
internal static event Delegates.set_SendMessageTarget_BeforeArgs _beforeset_SendMessageTarget;
internal static event Delegates.set_SendMessageTarget_AfterArgs _afterset_SendMessageTarget;
private static void set_SendMessageTarget(Action<tk2dUIDropDownMenu,  UnityEngine.GameObject> orig, tk2dUIDropDownMenu self,  UnityEngine.GameObject value)
{
Delegates.Params_set_SendMessageTarget @params = new() 
{
self = self
, value = value
};
if (_beforeset_SendMessageTarget != null)
{
foreach (Delegates.set_SendMessageTarget_BeforeArgs toInvoke in _beforeset_SendMessageTarget.GetInvocationList())
{
try
{
_beforeset_SendMessageTarget?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_SendMessageTarget != null)
{
foreach (Delegates.set_SendMessageTarget_AfterArgs toInvoke in _afterset_SendMessageTarget.GetInvocationList())
{
try
{
_afterset_SendMessageTarget.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_MenuLayoutItem()
{
if (!HookedList.Contains("get_MenuLayoutItem"))
{
HookedList.Add("get_MenuLayoutItem");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_MenuLayoutItem", true), get_MenuLayoutItem);

}
}
internal static event Delegates.get_MenuLayoutItem_BeforeArgs _beforeget_MenuLayoutItem;
internal static event Delegates.get_MenuLayoutItem_AfterArgs _afterget_MenuLayoutItem;
private static tk2dUILayout get_MenuLayoutItem(Func<tk2dUIDropDownMenu, tk2dUILayout> orig, tk2dUIDropDownMenu self)
{
Delegates.Params_get_MenuLayoutItem @params = new() 
{
self = self
};
if (_beforeget_MenuLayoutItem != null)
{
foreach (Delegates.get_MenuLayoutItem_BeforeArgs toInvoke in _beforeget_MenuLayoutItem.GetInvocationList())
{
try
{
_beforeget_MenuLayoutItem?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_MenuLayoutItem != null)
{
foreach (Delegates.get_MenuLayoutItem_AfterArgs toInvoke in _afterget_MenuLayoutItem.GetInvocationList())
{
try
{
retVal = _afterget_MenuLayoutItem.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_MenuLayoutItem()
{
if (!HookedList.Contains("set_MenuLayoutItem"))
{
HookedList.Add("set_MenuLayoutItem");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_MenuLayoutItem", true), set_MenuLayoutItem);

}
}
internal static event Delegates.set_MenuLayoutItem_BeforeArgs _beforeset_MenuLayoutItem;
internal static event Delegates.set_MenuLayoutItem_AfterArgs _afterset_MenuLayoutItem;
private static void set_MenuLayoutItem(Action<tk2dUIDropDownMenu,  tk2dUILayout> orig, tk2dUIDropDownMenu self,  tk2dUILayout value)
{
Delegates.Params_set_MenuLayoutItem @params = new() 
{
self = self
, value = value
};
if (_beforeset_MenuLayoutItem != null)
{
foreach (Delegates.set_MenuLayoutItem_BeforeArgs toInvoke in _beforeset_MenuLayoutItem.GetInvocationList())
{
try
{
_beforeset_MenuLayoutItem?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_MenuLayoutItem != null)
{
foreach (Delegates.set_MenuLayoutItem_AfterArgs toInvoke in _afterset_MenuLayoutItem.GetInvocationList())
{
try
{
_afterset_MenuLayoutItem.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_TemplateLayoutItem()
{
if (!HookedList.Contains("get_TemplateLayoutItem"))
{
HookedList.Add("get_TemplateLayoutItem");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_TemplateLayoutItem", true), get_TemplateLayoutItem);

}
}
internal static event Delegates.get_TemplateLayoutItem_BeforeArgs _beforeget_TemplateLayoutItem;
internal static event Delegates.get_TemplateLayoutItem_AfterArgs _afterget_TemplateLayoutItem;
private static tk2dUILayout get_TemplateLayoutItem(Func<tk2dUIDropDownMenu, tk2dUILayout> orig, tk2dUIDropDownMenu self)
{
Delegates.Params_get_TemplateLayoutItem @params = new() 
{
self = self
};
if (_beforeget_TemplateLayoutItem != null)
{
foreach (Delegates.get_TemplateLayoutItem_BeforeArgs toInvoke in _beforeget_TemplateLayoutItem.GetInvocationList())
{
try
{
_beforeget_TemplateLayoutItem?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_TemplateLayoutItem != null)
{
foreach (Delegates.get_TemplateLayoutItem_AfterArgs toInvoke in _afterget_TemplateLayoutItem.GetInvocationList())
{
try
{
retVal = _afterget_TemplateLayoutItem.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_TemplateLayoutItem()
{
if (!HookedList.Contains("set_TemplateLayoutItem"))
{
HookedList.Add("set_TemplateLayoutItem");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_TemplateLayoutItem", true), set_TemplateLayoutItem);

}
}
internal static event Delegates.set_TemplateLayoutItem_BeforeArgs _beforeset_TemplateLayoutItem;
internal static event Delegates.set_TemplateLayoutItem_AfterArgs _afterset_TemplateLayoutItem;
private static void set_TemplateLayoutItem(Action<tk2dUIDropDownMenu,  tk2dUILayout> orig, tk2dUIDropDownMenu self,  tk2dUILayout value)
{
Delegates.Params_set_TemplateLayoutItem @params = new() 
{
self = self
, value = value
};
if (_beforeset_TemplateLayoutItem != null)
{
foreach (Delegates.set_TemplateLayoutItem_BeforeArgs toInvoke in _beforeset_TemplateLayoutItem.GetInvocationList())
{
try
{
_beforeset_TemplateLayoutItem?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_TemplateLayoutItem != null)
{
foreach (Delegates.set_TemplateLayoutItem_AfterArgs toInvoke in _afterset_TemplateLayoutItem.GetInvocationList())
{
try
{
_afterset_TemplateLayoutItem.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.tk2dUIDropDownMenu.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.tk2dUIDropDownMenu.orig_Awake orig,tk2dUIDropDownMenu self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
On.tk2dUIDropDownMenu.OnEnable += OnEnable;

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(On.tk2dUIDropDownMenu.orig_OnEnable orig,tk2dUIDropDownMenu self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDisable()
{
if (!HookedList.Contains("OnDisable"))
{
HookedList.Add("OnDisable");
On.tk2dUIDropDownMenu.OnDisable += OnDisable;

}
}
internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;
private static void OnDisable(On.tk2dUIDropDownMenu.orig_OnDisable orig,tk2dUIDropDownMenu self)
{
Delegates.Params_OnDisable @params = new() 
{
self = self
};
if (_beforeOnDisable != null)
{
foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
{
try
{
_beforeOnDisable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDisable != null)
{
foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
{
try
{
_afterOnDisable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateList()
{
if (!HookedList.Contains("UpdateList"))
{
HookedList.Add("UpdateList");
On.tk2dUIDropDownMenu.UpdateList += UpdateList;

}
}
internal static event Delegates.UpdateList_BeforeArgs _beforeUpdateList;
internal static event Delegates.UpdateList_AfterArgs _afterUpdateList;
private static void UpdateList(On.tk2dUIDropDownMenu.orig_UpdateList orig,tk2dUIDropDownMenu self)
{
Delegates.Params_UpdateList @params = new() 
{
self = self
};
if (_beforeUpdateList != null)
{
foreach (Delegates.UpdateList_BeforeArgs toInvoke in _beforeUpdateList.GetInvocationList())
{
try
{
_beforeUpdateList?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateList != null)
{
foreach (Delegates.UpdateList_AfterArgs toInvoke in _afterUpdateList.GetInvocationList())
{
try
{
_afterUpdateList.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetSelectedItem()
{
if (!HookedList.Contains("SetSelectedItem"))
{
HookedList.Add("SetSelectedItem");
On.tk2dUIDropDownMenu.SetSelectedItem += SetSelectedItem;

}
}
internal static event Delegates.SetSelectedItem_BeforeArgs _beforeSetSelectedItem;
internal static event Delegates.SetSelectedItem_AfterArgs _afterSetSelectedItem;
private static void SetSelectedItem(On.tk2dUIDropDownMenu.orig_SetSelectedItem orig,tk2dUIDropDownMenu self)
{
Delegates.Params_SetSelectedItem @params = new() 
{
self = self
};
if (_beforeSetSelectedItem != null)
{
foreach (Delegates.SetSelectedItem_BeforeArgs toInvoke in _beforeSetSelectedItem.GetInvocationList())
{
try
{
_beforeSetSelectedItem?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetSelectedItem != null)
{
foreach (Delegates.SetSelectedItem_AfterArgs toInvoke in _afterSetSelectedItem.GetInvocationList())
{
try
{
_afterSetSelectedItem.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCreateAnotherDropDownItem()
{
if (!HookedList.Contains("CreateAnotherDropDownItem"))
{
HookedList.Add("CreateAnotherDropDownItem");
On.tk2dUIDropDownMenu.CreateAnotherDropDownItem += CreateAnotherDropDownItem;

}
}
internal static event Delegates.CreateAnotherDropDownItem_BeforeArgs _beforeCreateAnotherDropDownItem;
internal static event Delegates.CreateAnotherDropDownItem_AfterArgs _afterCreateAnotherDropDownItem;
private static tk2dUIDropDownItem CreateAnotherDropDownItem(On.tk2dUIDropDownMenu.orig_CreateAnotherDropDownItem orig,tk2dUIDropDownMenu self)
{
Delegates.Params_CreateAnotherDropDownItem @params = new() 
{
self = self
};
if (_beforeCreateAnotherDropDownItem != null)
{
foreach (Delegates.CreateAnotherDropDownItem_BeforeArgs toInvoke in _beforeCreateAnotherDropDownItem.GetInvocationList())
{
try
{
_beforeCreateAnotherDropDownItem?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterCreateAnotherDropDownItem != null)
{
foreach (Delegates.CreateAnotherDropDownItem_AfterArgs toInvoke in _afterCreateAnotherDropDownItem.GetInvocationList())
{
try
{
retVal = _afterCreateAnotherDropDownItem.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookItemSelected()
{
if (!HookedList.Contains("ItemSelected"))
{
HookedList.Add("ItemSelected");
On.tk2dUIDropDownMenu.ItemSelected += ItemSelected;

}
}
internal static event Delegates.ItemSelected_BeforeArgs _beforeItemSelected;
internal static event Delegates.ItemSelected_AfterArgs _afterItemSelected;
private static void ItemSelected(On.tk2dUIDropDownMenu.orig_ItemSelected orig,tk2dUIDropDownMenu self,  tk2dUIDropDownItem item)
{
Delegates.Params_ItemSelected @params = new() 
{
self = self
, item = item
};
if (_beforeItemSelected != null)
{
foreach (Delegates.ItemSelected_BeforeArgs toInvoke in _beforeItemSelected.GetInvocationList())
{
try
{
_beforeItemSelected?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
item = @params.item;
orig(self, item);
if (_afterItemSelected != null)
{
foreach (Delegates.ItemSelected_AfterArgs toInvoke in _afterItemSelected.GetInvocationList())
{
try
{
_afterItemSelected.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookExpandButtonPressed()
{
if (!HookedList.Contains("ExpandButtonPressed"))
{
HookedList.Add("ExpandButtonPressed");
On.tk2dUIDropDownMenu.ExpandButtonPressed += ExpandButtonPressed;

}
}
internal static event Delegates.ExpandButtonPressed_BeforeArgs _beforeExpandButtonPressed;
internal static event Delegates.ExpandButtonPressed_AfterArgs _afterExpandButtonPressed;
private static void ExpandButtonPressed(On.tk2dUIDropDownMenu.orig_ExpandButtonPressed orig,tk2dUIDropDownMenu self)
{
Delegates.Params_ExpandButtonPressed @params = new() 
{
self = self
};
if (_beforeExpandButtonPressed != null)
{
foreach (Delegates.ExpandButtonPressed_BeforeArgs toInvoke in _beforeExpandButtonPressed.GetInvocationList())
{
try
{
_beforeExpandButtonPressed?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterExpandButtonPressed != null)
{
foreach (Delegates.ExpandButtonPressed_AfterArgs toInvoke in _afterExpandButtonPressed.GetInvocationList())
{
try
{
_afterExpandButtonPressed.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookExpandList()
{
if (!HookedList.Contains("ExpandList"))
{
HookedList.Add("ExpandList");
On.tk2dUIDropDownMenu.ExpandList += ExpandList;

}
}
internal static event Delegates.ExpandList_BeforeArgs _beforeExpandList;
internal static event Delegates.ExpandList_AfterArgs _afterExpandList;
private static void ExpandList(On.tk2dUIDropDownMenu.orig_ExpandList orig,tk2dUIDropDownMenu self)
{
Delegates.Params_ExpandList @params = new() 
{
self = self
};
if (_beforeExpandList != null)
{
foreach (Delegates.ExpandList_BeforeArgs toInvoke in _beforeExpandList.GetInvocationList())
{
try
{
_beforeExpandList?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterExpandList != null)
{
foreach (Delegates.ExpandList_AfterArgs toInvoke in _afterExpandList.GetInvocationList())
{
try
{
_afterExpandList.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCollapseList()
{
if (!HookedList.Contains("CollapseList"))
{
HookedList.Add("CollapseList");
On.tk2dUIDropDownMenu.CollapseList += CollapseList;

}
}
internal static event Delegates.CollapseList_BeforeArgs _beforeCollapseList;
internal static event Delegates.CollapseList_AfterArgs _afterCollapseList;
private static void CollapseList(On.tk2dUIDropDownMenu.orig_CollapseList orig,tk2dUIDropDownMenu self)
{
Delegates.Params_CollapseList @params = new() 
{
self = self
};
if (_beforeCollapseList != null)
{
foreach (Delegates.CollapseList_BeforeArgs toInvoke in _beforeCollapseList.GetInvocationList())
{
try
{
_beforeCollapseList?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterCollapseList != null)
{
foreach (Delegates.CollapseList_AfterArgs toInvoke in _afterCollapseList.GetInvocationList())
{
try
{
_afterCollapseList.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDropDownItemHoverBtnToggle()
{
if (!HookedList.Contains("DropDownItemHoverBtnToggle"))
{
HookedList.Add("DropDownItemHoverBtnToggle");
On.tk2dUIDropDownMenu.DropDownItemHoverBtnToggle += DropDownItemHoverBtnToggle;

}
}
internal static event Delegates.DropDownItemHoverBtnToggle_BeforeArgs _beforeDropDownItemHoverBtnToggle;
internal static event Delegates.DropDownItemHoverBtnToggle_AfterArgs _afterDropDownItemHoverBtnToggle;
private static void DropDownItemHoverBtnToggle(On.tk2dUIDropDownMenu.orig_DropDownItemHoverBtnToggle orig,tk2dUIDropDownMenu self,  tk2dUIUpDownHoverButton upDownHoverButton)
{
Delegates.Params_DropDownItemHoverBtnToggle @params = new() 
{
self = self
, upDownHoverButton = upDownHoverButton
};
if (_beforeDropDownItemHoverBtnToggle != null)
{
foreach (Delegates.DropDownItemHoverBtnToggle_BeforeArgs toInvoke in _beforeDropDownItemHoverBtnToggle.GetInvocationList())
{
try
{
_beforeDropDownItemHoverBtnToggle?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
upDownHoverButton = @params.upDownHoverButton;
orig(self, upDownHoverButton);
if (_afterDropDownItemHoverBtnToggle != null)
{
foreach (Delegates.DropDownItemHoverBtnToggle_AfterArgs toInvoke in _afterDropDownItemHoverBtnToggle.GetInvocationList())
{
try
{
_afterDropDownItemHoverBtnToggle.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDestroy()
{
if (!HookedList.Contains("OnDestroy"))
{
HookedList.Add("OnDestroy");
On.tk2dUIDropDownMenu.OnDestroy += OnDestroy;

}
}
internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
internal static event Delegates.OnDestroy_AfterArgs _afterOnDestroy;
private static void OnDestroy(On.tk2dUIDropDownMenu.orig_OnDestroy orig,tk2dUIDropDownMenu self)
{
Delegates.Params_OnDestroy @params = new() 
{
self = self
};
if (_beforeOnDestroy != null)
{
foreach (Delegates.OnDestroy_BeforeArgs toInvoke in _beforeOnDestroy.GetInvocationList())
{
try
{
_beforeOnDestroy?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDestroy != null)
{
foreach (Delegates.OnDestroy_AfterArgs toInvoke in _afterOnDestroy.GetInvocationList())
{
try
{
_afterOnDestroy.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_ItemList
{
public tk2dUIDropDownMenu self;
}
public delegate void get_ItemList_BeforeArgs(Params_get_ItemList args);
public delegate System.Collections.Generic.List<string> get_ItemList_AfterArgs(Params_get_ItemList args, System.Collections.Generic.List<string> ret);
public delegate System.Collections.Generic.List<string> get_ItemList_WithArgs (Func<tk2dUIDropDownMenu, System.Collections.Generic.List<string>> orig, tk2dUIDropDownMenu self);
public sealed class Params_set_ItemList
{
public tk2dUIDropDownMenu self;
public System.Collections.Generic.List<string> value;
}
public delegate void set_ItemList_BeforeArgs(Params_set_ItemList args);
public delegate void set_ItemList_AfterArgs(Params_set_ItemList args);
public delegate void set_ItemList_WithArgs (Action<tk2dUIDropDownMenu,  System.Collections.Generic.List<string>> orig, tk2dUIDropDownMenu self,  System.Collections.Generic.List<string> value);
public sealed class Params_get_Index
{
public tk2dUIDropDownMenu self;
}
public delegate void get_Index_BeforeArgs(Params_get_Index args);
public delegate int get_Index_AfterArgs(Params_get_Index args, int ret);
public delegate int get_Index_WithArgs (Func<tk2dUIDropDownMenu, int> orig, tk2dUIDropDownMenu self);
public sealed class Params_set_Index
{
public tk2dUIDropDownMenu self;
public int value;
}
public delegate void set_Index_BeforeArgs(Params_set_Index args);
public delegate void set_Index_AfterArgs(Params_set_Index args);
public delegate void set_Index_WithArgs (Action<tk2dUIDropDownMenu,  int> orig, tk2dUIDropDownMenu self,  int value);
public sealed class Params_get_SelectedItem
{
public tk2dUIDropDownMenu self;
}
public delegate void get_SelectedItem_BeforeArgs(Params_get_SelectedItem args);
public delegate string get_SelectedItem_AfterArgs(Params_get_SelectedItem args, string ret);
public delegate string get_SelectedItem_WithArgs (Func<tk2dUIDropDownMenu, string> orig, tk2dUIDropDownMenu self);
public sealed class Params_get_SendMessageTarget
{
public tk2dUIDropDownMenu self;
}
public delegate void get_SendMessageTarget_BeforeArgs(Params_get_SendMessageTarget args);
public delegate UnityEngine.GameObject get_SendMessageTarget_AfterArgs(Params_get_SendMessageTarget args, UnityEngine.GameObject ret);
public delegate UnityEngine.GameObject get_SendMessageTarget_WithArgs (Func<tk2dUIDropDownMenu, UnityEngine.GameObject> orig, tk2dUIDropDownMenu self);
public sealed class Params_set_SendMessageTarget
{
public tk2dUIDropDownMenu self;
public UnityEngine.GameObject value;
}
public delegate void set_SendMessageTarget_BeforeArgs(Params_set_SendMessageTarget args);
public delegate void set_SendMessageTarget_AfterArgs(Params_set_SendMessageTarget args);
public delegate void set_SendMessageTarget_WithArgs (Action<tk2dUIDropDownMenu,  UnityEngine.GameObject> orig, tk2dUIDropDownMenu self,  UnityEngine.GameObject value);
public sealed class Params_get_MenuLayoutItem
{
public tk2dUIDropDownMenu self;
}
public delegate void get_MenuLayoutItem_BeforeArgs(Params_get_MenuLayoutItem args);
public delegate tk2dUILayout get_MenuLayoutItem_AfterArgs(Params_get_MenuLayoutItem args, tk2dUILayout ret);
public delegate tk2dUILayout get_MenuLayoutItem_WithArgs (Func<tk2dUIDropDownMenu, tk2dUILayout> orig, tk2dUIDropDownMenu self);
public sealed class Params_set_MenuLayoutItem
{
public tk2dUIDropDownMenu self;
public tk2dUILayout value;
}
public delegate void set_MenuLayoutItem_BeforeArgs(Params_set_MenuLayoutItem args);
public delegate void set_MenuLayoutItem_AfterArgs(Params_set_MenuLayoutItem args);
public delegate void set_MenuLayoutItem_WithArgs (Action<tk2dUIDropDownMenu,  tk2dUILayout> orig, tk2dUIDropDownMenu self,  tk2dUILayout value);
public sealed class Params_get_TemplateLayoutItem
{
public tk2dUIDropDownMenu self;
}
public delegate void get_TemplateLayoutItem_BeforeArgs(Params_get_TemplateLayoutItem args);
public delegate tk2dUILayout get_TemplateLayoutItem_AfterArgs(Params_get_TemplateLayoutItem args, tk2dUILayout ret);
public delegate tk2dUILayout get_TemplateLayoutItem_WithArgs (Func<tk2dUIDropDownMenu, tk2dUILayout> orig, tk2dUIDropDownMenu self);
public sealed class Params_set_TemplateLayoutItem
{
public tk2dUIDropDownMenu self;
public tk2dUILayout value;
}
public delegate void set_TemplateLayoutItem_BeforeArgs(Params_set_TemplateLayoutItem args);
public delegate void set_TemplateLayoutItem_AfterArgs(Params_set_TemplateLayoutItem args);
public delegate void set_TemplateLayoutItem_WithArgs (Action<tk2dUIDropDownMenu,  tk2dUILayout> orig, tk2dUIDropDownMenu self,  tk2dUILayout value);
public sealed class Params_Awake
{
public tk2dUIDropDownMenu self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<tk2dUIDropDownMenu> orig, tk2dUIDropDownMenu self);
public sealed class Params_OnEnable
{
public tk2dUIDropDownMenu self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<tk2dUIDropDownMenu> orig, tk2dUIDropDownMenu self);
public sealed class Params_OnDisable
{
public tk2dUIDropDownMenu self;
}
public delegate void OnDisable_BeforeArgs(Params_OnDisable args);
public delegate void OnDisable_AfterArgs(Params_OnDisable args);
public delegate void OnDisable_WithArgs (Action<tk2dUIDropDownMenu> orig, tk2dUIDropDownMenu self);
public sealed class Params_UpdateList
{
public tk2dUIDropDownMenu self;
}
public delegate void UpdateList_BeforeArgs(Params_UpdateList args);
public delegate void UpdateList_AfterArgs(Params_UpdateList args);
public delegate void UpdateList_WithArgs (Action<tk2dUIDropDownMenu> orig, tk2dUIDropDownMenu self);
public sealed class Params_SetSelectedItem
{
public tk2dUIDropDownMenu self;
}
public delegate void SetSelectedItem_BeforeArgs(Params_SetSelectedItem args);
public delegate void SetSelectedItem_AfterArgs(Params_SetSelectedItem args);
public delegate void SetSelectedItem_WithArgs (Action<tk2dUIDropDownMenu> orig, tk2dUIDropDownMenu self);
public sealed class Params_CreateAnotherDropDownItem
{
public tk2dUIDropDownMenu self;
}
public delegate void CreateAnotherDropDownItem_BeforeArgs(Params_CreateAnotherDropDownItem args);
public delegate tk2dUIDropDownItem CreateAnotherDropDownItem_AfterArgs(Params_CreateAnotherDropDownItem args, tk2dUIDropDownItem ret);
public delegate tk2dUIDropDownItem CreateAnotherDropDownItem_WithArgs (Func<tk2dUIDropDownMenu, tk2dUIDropDownItem> orig, tk2dUIDropDownMenu self);
public sealed class Params_ItemSelected
{
public tk2dUIDropDownMenu self;
public tk2dUIDropDownItem item;
}
public delegate void ItemSelected_BeforeArgs(Params_ItemSelected args);
public delegate void ItemSelected_AfterArgs(Params_ItemSelected args);
public delegate void ItemSelected_WithArgs (Action<tk2dUIDropDownMenu,  tk2dUIDropDownItem> orig, tk2dUIDropDownMenu self,  tk2dUIDropDownItem item);
public sealed class Params_ExpandButtonPressed
{
public tk2dUIDropDownMenu self;
}
public delegate void ExpandButtonPressed_BeforeArgs(Params_ExpandButtonPressed args);
public delegate void ExpandButtonPressed_AfterArgs(Params_ExpandButtonPressed args);
public delegate void ExpandButtonPressed_WithArgs (Action<tk2dUIDropDownMenu> orig, tk2dUIDropDownMenu self);
public sealed class Params_ExpandList
{
public tk2dUIDropDownMenu self;
}
public delegate void ExpandList_BeforeArgs(Params_ExpandList args);
public delegate void ExpandList_AfterArgs(Params_ExpandList args);
public delegate void ExpandList_WithArgs (Action<tk2dUIDropDownMenu> orig, tk2dUIDropDownMenu self);
public sealed class Params_CollapseList
{
public tk2dUIDropDownMenu self;
}
public delegate void CollapseList_BeforeArgs(Params_CollapseList args);
public delegate void CollapseList_AfterArgs(Params_CollapseList args);
public delegate void CollapseList_WithArgs (Action<tk2dUIDropDownMenu> orig, tk2dUIDropDownMenu self);
public sealed class Params_DropDownItemHoverBtnToggle
{
public tk2dUIDropDownMenu self;
public tk2dUIUpDownHoverButton upDownHoverButton;
}
public delegate void DropDownItemHoverBtnToggle_BeforeArgs(Params_DropDownItemHoverBtnToggle args);
public delegate void DropDownItemHoverBtnToggle_AfterArgs(Params_DropDownItemHoverBtnToggle args);
public delegate void DropDownItemHoverBtnToggle_WithArgs (Action<tk2dUIDropDownMenu,  tk2dUIUpDownHoverButton> orig, tk2dUIDropDownMenu self,  tk2dUIUpDownHoverButton upDownHoverButton);
public sealed class Params_OnDestroy
{
public tk2dUIDropDownMenu self;
}
public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);
public delegate void OnDestroy_AfterArgs(Params_OnDestroy args);
public delegate void OnDestroy_WithArgs (Action<tk2dUIDropDownMenu> orig, tk2dUIDropDownMenu self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_ItemList_BeforeArgs get_ItemList
{
add
{

HookHandler._beforeget_ItemList += value;
HookHandler.Hookget_ItemList();
}
remove => HookHandler._beforeget_ItemList -= value;
}
public static event Delegates.set_ItemList_BeforeArgs set_ItemList
{
add
{

HookHandler._beforeset_ItemList += value;
HookHandler.Hookset_ItemList();
}
remove => HookHandler._beforeset_ItemList -= value;
}
public static event Delegates.get_Index_BeforeArgs get_Index
{
add
{

HookHandler._beforeget_Index += value;
HookHandler.Hookget_Index();
}
remove => HookHandler._beforeget_Index -= value;
}
public static event Delegates.set_Index_BeforeArgs set_Index
{
add
{

HookHandler._beforeset_Index += value;
HookHandler.Hookset_Index();
}
remove => HookHandler._beforeset_Index -= value;
}
public static event Delegates.get_SelectedItem_BeforeArgs get_SelectedItem
{
add
{

HookHandler._beforeget_SelectedItem += value;
HookHandler.Hookget_SelectedItem();
}
remove => HookHandler._beforeget_SelectedItem -= value;
}
public static event Delegates.get_SendMessageTarget_BeforeArgs get_SendMessageTarget
{
add
{

HookHandler._beforeget_SendMessageTarget += value;
HookHandler.Hookget_SendMessageTarget();
}
remove => HookHandler._beforeget_SendMessageTarget -= value;
}
public static event Delegates.set_SendMessageTarget_BeforeArgs set_SendMessageTarget
{
add
{

HookHandler._beforeset_SendMessageTarget += value;
HookHandler.Hookset_SendMessageTarget();
}
remove => HookHandler._beforeset_SendMessageTarget -= value;
}
public static event Delegates.get_MenuLayoutItem_BeforeArgs get_MenuLayoutItem
{
add
{

HookHandler._beforeget_MenuLayoutItem += value;
HookHandler.Hookget_MenuLayoutItem();
}
remove => HookHandler._beforeget_MenuLayoutItem -= value;
}
public static event Delegates.set_MenuLayoutItem_BeforeArgs set_MenuLayoutItem
{
add
{

HookHandler._beforeset_MenuLayoutItem += value;
HookHandler.Hookset_MenuLayoutItem();
}
remove => HookHandler._beforeset_MenuLayoutItem -= value;
}
public static event Delegates.get_TemplateLayoutItem_BeforeArgs get_TemplateLayoutItem
{
add
{

HookHandler._beforeget_TemplateLayoutItem += value;
HookHandler.Hookget_TemplateLayoutItem();
}
remove => HookHandler._beforeget_TemplateLayoutItem -= value;
}
public static event Delegates.set_TemplateLayoutItem_BeforeArgs set_TemplateLayoutItem
{
add
{

HookHandler._beforeset_TemplateLayoutItem += value;
HookHandler.Hookset_TemplateLayoutItem();
}
remove => HookHandler._beforeset_TemplateLayoutItem -= value;
}
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.OnDisable_BeforeArgs OnDisable
{
add
{

HookHandler._beforeOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._beforeOnDisable -= value;
}
public static event Delegates.UpdateList_BeforeArgs UpdateList
{
add
{

HookHandler._beforeUpdateList += value;
HookHandler.HookUpdateList();
}
remove => HookHandler._beforeUpdateList -= value;
}
public static event Delegates.SetSelectedItem_BeforeArgs SetSelectedItem
{
add
{

HookHandler._beforeSetSelectedItem += value;
HookHandler.HookSetSelectedItem();
}
remove => HookHandler._beforeSetSelectedItem -= value;
}
public static event Delegates.CreateAnotherDropDownItem_BeforeArgs CreateAnotherDropDownItem
{
add
{

HookHandler._beforeCreateAnotherDropDownItem += value;
HookHandler.HookCreateAnotherDropDownItem();
}
remove => HookHandler._beforeCreateAnotherDropDownItem -= value;
}
public static event Delegates.ItemSelected_BeforeArgs ItemSelected
{
add
{

HookHandler._beforeItemSelected += value;
HookHandler.HookItemSelected();
}
remove => HookHandler._beforeItemSelected -= value;
}
public static event Delegates.ExpandButtonPressed_BeforeArgs ExpandButtonPressed
{
add
{

HookHandler._beforeExpandButtonPressed += value;
HookHandler.HookExpandButtonPressed();
}
remove => HookHandler._beforeExpandButtonPressed -= value;
}
public static event Delegates.ExpandList_BeforeArgs ExpandList
{
add
{

HookHandler._beforeExpandList += value;
HookHandler.HookExpandList();
}
remove => HookHandler._beforeExpandList -= value;
}
public static event Delegates.CollapseList_BeforeArgs CollapseList
{
add
{

HookHandler._beforeCollapseList += value;
HookHandler.HookCollapseList();
}
remove => HookHandler._beforeCollapseList -= value;
}
public static event Delegates.DropDownItemHoverBtnToggle_BeforeArgs DropDownItemHoverBtnToggle
{
add
{

HookHandler._beforeDropDownItemHoverBtnToggle += value;
HookHandler.HookDropDownItemHoverBtnToggle();
}
remove => HookHandler._beforeDropDownItemHoverBtnToggle -= value;
}
public static event Delegates.OnDestroy_BeforeArgs OnDestroy
{
add
{

HookHandler._beforeOnDestroy += value;
HookHandler.HookOnDestroy();
}
remove => HookHandler._beforeOnDestroy -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_ItemList_AfterArgs get_ItemList
{
add
{

HookHandler._afterget_ItemList += value;
HookHandler.Hookget_ItemList();
}
remove => HookHandler._afterget_ItemList -= value;
}
public static event Delegates.set_ItemList_AfterArgs set_ItemList
{
add
{

HookHandler._afterset_ItemList += value;
HookHandler.Hookset_ItemList();
}
remove => HookHandler._afterset_ItemList -= value;
}
public static event Delegates.get_Index_AfterArgs get_Index
{
add
{

HookHandler._afterget_Index += value;
HookHandler.Hookget_Index();
}
remove => HookHandler._afterget_Index -= value;
}
public static event Delegates.set_Index_AfterArgs set_Index
{
add
{

HookHandler._afterset_Index += value;
HookHandler.Hookset_Index();
}
remove => HookHandler._afterset_Index -= value;
}
public static event Delegates.get_SelectedItem_AfterArgs get_SelectedItem
{
add
{

HookHandler._afterget_SelectedItem += value;
HookHandler.Hookget_SelectedItem();
}
remove => HookHandler._afterget_SelectedItem -= value;
}
public static event Delegates.get_SendMessageTarget_AfterArgs get_SendMessageTarget
{
add
{

HookHandler._afterget_SendMessageTarget += value;
HookHandler.Hookget_SendMessageTarget();
}
remove => HookHandler._afterget_SendMessageTarget -= value;
}
public static event Delegates.set_SendMessageTarget_AfterArgs set_SendMessageTarget
{
add
{

HookHandler._afterset_SendMessageTarget += value;
HookHandler.Hookset_SendMessageTarget();
}
remove => HookHandler._afterset_SendMessageTarget -= value;
}
public static event Delegates.get_MenuLayoutItem_AfterArgs get_MenuLayoutItem
{
add
{

HookHandler._afterget_MenuLayoutItem += value;
HookHandler.Hookget_MenuLayoutItem();
}
remove => HookHandler._afterget_MenuLayoutItem -= value;
}
public static event Delegates.set_MenuLayoutItem_AfterArgs set_MenuLayoutItem
{
add
{

HookHandler._afterset_MenuLayoutItem += value;
HookHandler.Hookset_MenuLayoutItem();
}
remove => HookHandler._afterset_MenuLayoutItem -= value;
}
public static event Delegates.get_TemplateLayoutItem_AfterArgs get_TemplateLayoutItem
{
add
{

HookHandler._afterget_TemplateLayoutItem += value;
HookHandler.Hookget_TemplateLayoutItem();
}
remove => HookHandler._afterget_TemplateLayoutItem -= value;
}
public static event Delegates.set_TemplateLayoutItem_AfterArgs set_TemplateLayoutItem
{
add
{

HookHandler._afterset_TemplateLayoutItem += value;
HookHandler.Hookset_TemplateLayoutItem();
}
remove => HookHandler._afterset_TemplateLayoutItem -= value;
}
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.OnDisable_AfterArgs OnDisable
{
add
{

HookHandler._afterOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._afterOnDisable -= value;
}
public static event Delegates.UpdateList_AfterArgs UpdateList
{
add
{

HookHandler._afterUpdateList += value;
HookHandler.HookUpdateList();
}
remove => HookHandler._afterUpdateList -= value;
}
public static event Delegates.SetSelectedItem_AfterArgs SetSelectedItem
{
add
{

HookHandler._afterSetSelectedItem += value;
HookHandler.HookSetSelectedItem();
}
remove => HookHandler._afterSetSelectedItem -= value;
}
public static event Delegates.CreateAnotherDropDownItem_AfterArgs CreateAnotherDropDownItem
{
add
{

HookHandler._afterCreateAnotherDropDownItem += value;
HookHandler.HookCreateAnotherDropDownItem();
}
remove => HookHandler._afterCreateAnotherDropDownItem -= value;
}
public static event Delegates.ItemSelected_AfterArgs ItemSelected
{
add
{

HookHandler._afterItemSelected += value;
HookHandler.HookItemSelected();
}
remove => HookHandler._afterItemSelected -= value;
}
public static event Delegates.ExpandButtonPressed_AfterArgs ExpandButtonPressed
{
add
{

HookHandler._afterExpandButtonPressed += value;
HookHandler.HookExpandButtonPressed();
}
remove => HookHandler._afterExpandButtonPressed -= value;
}
public static event Delegates.ExpandList_AfterArgs ExpandList
{
add
{

HookHandler._afterExpandList += value;
HookHandler.HookExpandList();
}
remove => HookHandler._afterExpandList -= value;
}
public static event Delegates.CollapseList_AfterArgs CollapseList
{
add
{

HookHandler._afterCollapseList += value;
HookHandler.HookCollapseList();
}
remove => HookHandler._afterCollapseList -= value;
}
public static event Delegates.DropDownItemHoverBtnToggle_AfterArgs DropDownItemHoverBtnToggle
{
add
{

HookHandler._afterDropDownItemHoverBtnToggle += value;
HookHandler.HookDropDownItemHoverBtnToggle();
}
remove => HookHandler._afterDropDownItemHoverBtnToggle -= value;
}
public static event Delegates.OnDestroy_AfterArgs OnDestroy
{
add
{

HookHandler._afterOnDestroy += value;
HookHandler.HookOnDestroy();
}
remove => HookHandler._afterOnDestroy -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_ItemList_WithArgs get_ItemList
{
add => HookEndpointManager.Add<Delegates.get_ItemList_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_ItemList", true), value);
remove => HookEndpointManager.Remove<Delegates.get_ItemList_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_ItemList", true), value);
}
public static event Delegates.set_ItemList_WithArgs set_ItemList
{
add => HookEndpointManager.Add<Delegates.set_ItemList_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_ItemList", true), value);
remove => HookEndpointManager.Remove<Delegates.set_ItemList_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_ItemList", true), value);
}
public static event Delegates.get_Index_WithArgs get_Index
{
add => HookEndpointManager.Add<Delegates.get_Index_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_Index", true), value);
remove => HookEndpointManager.Remove<Delegates.get_Index_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_Index", true), value);
}
public static event Delegates.set_Index_WithArgs set_Index
{
add => HookEndpointManager.Add<Delegates.set_Index_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_Index", true), value);
remove => HookEndpointManager.Remove<Delegates.set_Index_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_Index", true), value);
}
public static event Delegates.get_SelectedItem_WithArgs get_SelectedItem
{
add => HookEndpointManager.Add<Delegates.get_SelectedItem_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_SelectedItem", true), value);
remove => HookEndpointManager.Remove<Delegates.get_SelectedItem_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_SelectedItem", true), value);
}
public static event Delegates.get_SendMessageTarget_WithArgs get_SendMessageTarget
{
add => HookEndpointManager.Add<Delegates.get_SendMessageTarget_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_SendMessageTarget", true), value);
remove => HookEndpointManager.Remove<Delegates.get_SendMessageTarget_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_SendMessageTarget", true), value);
}
public static event Delegates.set_SendMessageTarget_WithArgs set_SendMessageTarget
{
add => HookEndpointManager.Add<Delegates.set_SendMessageTarget_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_SendMessageTarget", true), value);
remove => HookEndpointManager.Remove<Delegates.set_SendMessageTarget_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_SendMessageTarget", true), value);
}
public static event Delegates.get_MenuLayoutItem_WithArgs get_MenuLayoutItem
{
add => HookEndpointManager.Add<Delegates.get_MenuLayoutItem_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_MenuLayoutItem", true), value);
remove => HookEndpointManager.Remove<Delegates.get_MenuLayoutItem_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_MenuLayoutItem", true), value);
}
public static event Delegates.set_MenuLayoutItem_WithArgs set_MenuLayoutItem
{
add => HookEndpointManager.Add<Delegates.set_MenuLayoutItem_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_MenuLayoutItem", true), value);
remove => HookEndpointManager.Remove<Delegates.set_MenuLayoutItem_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_MenuLayoutItem", true), value);
}
public static event Delegates.get_TemplateLayoutItem_WithArgs get_TemplateLayoutItem
{
add => HookEndpointManager.Add<Delegates.get_TemplateLayoutItem_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_TemplateLayoutItem", true), value);
remove => HookEndpointManager.Remove<Delegates.get_TemplateLayoutItem_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_TemplateLayoutItem", true), value);
}
public static event Delegates.set_TemplateLayoutItem_WithArgs set_TemplateLayoutItem
{
add => HookEndpointManager.Add<Delegates.set_TemplateLayoutItem_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_TemplateLayoutItem", true), value);
remove => HookEndpointManager.Remove<Delegates.set_TemplateLayoutItem_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_TemplateLayoutItem", true), value);
}
public static event On.tk2dUIDropDownMenu.hook_Awake Awake
{
add => On.tk2dUIDropDownMenu.Awake += value;
remove => On.tk2dUIDropDownMenu.Awake -= value;
}
public static event On.tk2dUIDropDownMenu.hook_OnEnable OnEnable
{
add => On.tk2dUIDropDownMenu.OnEnable += value;
remove => On.tk2dUIDropDownMenu.OnEnable -= value;
}
public static event On.tk2dUIDropDownMenu.hook_OnDisable OnDisable
{
add => On.tk2dUIDropDownMenu.OnDisable += value;
remove => On.tk2dUIDropDownMenu.OnDisable -= value;
}
public static event On.tk2dUIDropDownMenu.hook_UpdateList UpdateList
{
add => On.tk2dUIDropDownMenu.UpdateList += value;
remove => On.tk2dUIDropDownMenu.UpdateList -= value;
}
public static event On.tk2dUIDropDownMenu.hook_SetSelectedItem SetSelectedItem
{
add => On.tk2dUIDropDownMenu.SetSelectedItem += value;
remove => On.tk2dUIDropDownMenu.SetSelectedItem -= value;
}
public static event On.tk2dUIDropDownMenu.hook_CreateAnotherDropDownItem CreateAnotherDropDownItem
{
add => On.tk2dUIDropDownMenu.CreateAnotherDropDownItem += value;
remove => On.tk2dUIDropDownMenu.CreateAnotherDropDownItem -= value;
}
public static event On.tk2dUIDropDownMenu.hook_ItemSelected ItemSelected
{
add => On.tk2dUIDropDownMenu.ItemSelected += value;
remove => On.tk2dUIDropDownMenu.ItemSelected -= value;
}
public static event On.tk2dUIDropDownMenu.hook_ExpandButtonPressed ExpandButtonPressed
{
add => On.tk2dUIDropDownMenu.ExpandButtonPressed += value;
remove => On.tk2dUIDropDownMenu.ExpandButtonPressed -= value;
}
public static event On.tk2dUIDropDownMenu.hook_ExpandList ExpandList
{
add => On.tk2dUIDropDownMenu.ExpandList += value;
remove => On.tk2dUIDropDownMenu.ExpandList -= value;
}
public static event On.tk2dUIDropDownMenu.hook_CollapseList CollapseList
{
add => On.tk2dUIDropDownMenu.CollapseList += value;
remove => On.tk2dUIDropDownMenu.CollapseList -= value;
}
public static event On.tk2dUIDropDownMenu.hook_DropDownItemHoverBtnToggle DropDownItemHoverBtnToggle
{
add => On.tk2dUIDropDownMenu.DropDownItemHoverBtnToggle += value;
remove => On.tk2dUIDropDownMenu.DropDownItemHoverBtnToggle -= value;
}
public static event On.tk2dUIDropDownMenu.hook_OnDestroy OnDestroy
{
add => On.tk2dUIDropDownMenu.OnDestroy += value;
remove => On.tk2dUIDropDownMenu.OnDestroy -= value;
}
}

}
