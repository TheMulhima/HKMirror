using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dUIDropDownMenu class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUIDropDownMenu
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_ItemList()
        {
            if (!HookedList.Contains("get_ItemList"))
            {
                HookedList.Add("get_ItemList");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_ItemList"), get_ItemList);
            }
        }

        internal static event Delegates.get_ItemList_BeforeArgs _beforeget_ItemList;
        internal static event Delegates.get_ItemList_NormalArgs _afterget_ItemList;

        private static List<string> get_ItemList(Func<tk2dUIDropDownMenu, List<string>> orig, tk2dUIDropDownMenu self)
        {
            Delegates.Params_get_ItemList @params = new()
            {
                self = self
            };
            _beforeget_ItemList?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ItemList != null) retVal = _afterget_ItemList.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_ItemList()
        {
            if (!HookedList.Contains("set_ItemList"))
            {
                HookedList.Add("set_ItemList");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_ItemList"), set_ItemList);
            }
        }

        internal static event Delegates.set_ItemList_BeforeArgs _beforeset_ItemList;
        internal static event Delegates.set_ItemList_NormalArgs _afterset_ItemList;

        private static void set_ItemList(Action<tk2dUIDropDownMenu, List<string>> orig, tk2dUIDropDownMenu self,
            List<string> value)
        {
            Delegates.Params_set_ItemList @params = new()
            {
                self = self, value = value
            };
            _beforeset_ItemList?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ItemList != null) _afterset_ItemList.Invoke(@params);
        }

        internal static void Hookget_Index()
        {
            if (!HookedList.Contains("get_Index"))
            {
                HookedList.Add("get_Index");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_Index"), get_Index);
            }
        }

        internal static event Delegates.get_Index_BeforeArgs _beforeget_Index;
        internal static event Delegates.get_Index_NormalArgs _afterget_Index;

        private static int get_Index(Func<tk2dUIDropDownMenu, int> orig, tk2dUIDropDownMenu self)
        {
            Delegates.Params_get_Index @params = new()
            {
                self = self
            };
            _beforeget_Index?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Index != null) retVal = _afterget_Index.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Index()
        {
            if (!HookedList.Contains("set_Index"))
            {
                HookedList.Add("set_Index");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_Index"), set_Index);
            }
        }

        internal static event Delegates.set_Index_BeforeArgs _beforeset_Index;
        internal static event Delegates.set_Index_NormalArgs _afterset_Index;

        private static void set_Index(Action<tk2dUIDropDownMenu, int> orig, tk2dUIDropDownMenu self, int value)
        {
            Delegates.Params_set_Index @params = new()
            {
                self = self, value = value
            };
            _beforeset_Index?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Index != null) _afterset_Index.Invoke(@params);
        }

        internal static void Hookget_SelectedItem()
        {
            if (!HookedList.Contains("get_SelectedItem"))
            {
                HookedList.Add("get_SelectedItem");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_SelectedItem"),
                    get_SelectedItem);
            }
        }

        internal static event Delegates.get_SelectedItem_BeforeArgs _beforeget_SelectedItem;
        internal static event Delegates.get_SelectedItem_NormalArgs _afterget_SelectedItem;

        private static string get_SelectedItem(Func<tk2dUIDropDownMenu, string> orig, tk2dUIDropDownMenu self)
        {
            Delegates.Params_get_SelectedItem @params = new()
            {
                self = self
            };
            _beforeget_SelectedItem?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SelectedItem != null) retVal = _afterget_SelectedItem.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_SendMessageTarget()
        {
            if (!HookedList.Contains("get_SendMessageTarget"))
            {
                HookedList.Add("get_SendMessageTarget");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_SendMessageTarget"),
                    get_SendMessageTarget);
            }
        }

        internal static event Delegates.get_SendMessageTarget_BeforeArgs _beforeget_SendMessageTarget;
        internal static event Delegates.get_SendMessageTarget_NormalArgs _afterget_SendMessageTarget;

        private static GameObject get_SendMessageTarget(Func<tk2dUIDropDownMenu, GameObject> orig,
            tk2dUIDropDownMenu self)
        {
            Delegates.Params_get_SendMessageTarget @params = new()
            {
                self = self
            };
            _beforeget_SendMessageTarget?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SendMessageTarget != null) retVal = _afterget_SendMessageTarget.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_SendMessageTarget()
        {
            if (!HookedList.Contains("set_SendMessageTarget"))
            {
                HookedList.Add("set_SendMessageTarget");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_SendMessageTarget"),
                    set_SendMessageTarget);
            }
        }

        internal static event Delegates.set_SendMessageTarget_BeforeArgs _beforeset_SendMessageTarget;
        internal static event Delegates.set_SendMessageTarget_NormalArgs _afterset_SendMessageTarget;

        private static void set_SendMessageTarget(Action<tk2dUIDropDownMenu, GameObject> orig, tk2dUIDropDownMenu self,
            GameObject value)
        {
            Delegates.Params_set_SendMessageTarget @params = new()
            {
                self = self, value = value
            };
            _beforeset_SendMessageTarget?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_SendMessageTarget != null) _afterset_SendMessageTarget.Invoke(@params);
        }

        internal static void Hookget_MenuLayoutItem()
        {
            if (!HookedList.Contains("get_MenuLayoutItem"))
            {
                HookedList.Add("get_MenuLayoutItem");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_MenuLayoutItem"),
                    get_MenuLayoutItem);
            }
        }

        internal static event Delegates.get_MenuLayoutItem_BeforeArgs _beforeget_MenuLayoutItem;
        internal static event Delegates.get_MenuLayoutItem_NormalArgs _afterget_MenuLayoutItem;

        private static tk2dUILayout get_MenuLayoutItem(Func<tk2dUIDropDownMenu, tk2dUILayout> orig,
            tk2dUIDropDownMenu self)
        {
            Delegates.Params_get_MenuLayoutItem @params = new()
            {
                self = self
            };
            _beforeget_MenuLayoutItem?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_MenuLayoutItem != null) retVal = _afterget_MenuLayoutItem.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_MenuLayoutItem()
        {
            if (!HookedList.Contains("set_MenuLayoutItem"))
            {
                HookedList.Add("set_MenuLayoutItem");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_MenuLayoutItem"),
                    set_MenuLayoutItem);
            }
        }

        internal static event Delegates.set_MenuLayoutItem_BeforeArgs _beforeset_MenuLayoutItem;
        internal static event Delegates.set_MenuLayoutItem_NormalArgs _afterset_MenuLayoutItem;

        private static void set_MenuLayoutItem(Action<tk2dUIDropDownMenu, tk2dUILayout> orig, tk2dUIDropDownMenu self,
            tk2dUILayout value)
        {
            Delegates.Params_set_MenuLayoutItem @params = new()
            {
                self = self, value = value
            };
            _beforeset_MenuLayoutItem?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_MenuLayoutItem != null) _afterset_MenuLayoutItem.Invoke(@params);
        }

        internal static void Hookget_TemplateLayoutItem()
        {
            if (!HookedList.Contains("get_TemplateLayoutItem"))
            {
                HookedList.Add("get_TemplateLayoutItem");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_TemplateLayoutItem"),
                    get_TemplateLayoutItem);
            }
        }

        internal static event Delegates.get_TemplateLayoutItem_BeforeArgs _beforeget_TemplateLayoutItem;
        internal static event Delegates.get_TemplateLayoutItem_NormalArgs _afterget_TemplateLayoutItem;

        private static tk2dUILayout get_TemplateLayoutItem(Func<tk2dUIDropDownMenu, tk2dUILayout> orig,
            tk2dUIDropDownMenu self)
        {
            Delegates.Params_get_TemplateLayoutItem @params = new()
            {
                self = self
            };
            _beforeget_TemplateLayoutItem?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_TemplateLayoutItem != null) retVal = _afterget_TemplateLayoutItem.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_TemplateLayoutItem()
        {
            if (!HookedList.Contains("set_TemplateLayoutItem"))
            {
                HookedList.Add("set_TemplateLayoutItem");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_TemplateLayoutItem"),
                    set_TemplateLayoutItem);
            }
        }

        internal static event Delegates.set_TemplateLayoutItem_BeforeArgs _beforeset_TemplateLayoutItem;
        internal static event Delegates.set_TemplateLayoutItem_NormalArgs _afterset_TemplateLayoutItem;

        private static void set_TemplateLayoutItem(Action<tk2dUIDropDownMenu, tk2dUILayout> orig,
            tk2dUIDropDownMenu self, tk2dUILayout value)
        {
            Delegates.Params_set_TemplateLayoutItem @params = new()
            {
                self = self, value = value
            };
            _beforeset_TemplateLayoutItem?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_TemplateLayoutItem != null) _afterset_TemplateLayoutItem.Invoke(@params);
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.tk2dUIDropDownMenu.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.tk2dUIDropDownMenu.orig_Awake orig, tk2dUIDropDownMenu self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.tk2dUIDropDownMenu.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.tk2dUIDropDownMenu.orig_OnEnable orig, tk2dUIDropDownMenu self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.tk2dUIDropDownMenu.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.tk2dUIDropDownMenu.orig_OnDisable orig, tk2dUIDropDownMenu self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookUpdateList()
        {
            if (!HookedList.Contains("UpdateList"))
            {
                HookedList.Add("UpdateList");
                On.tk2dUIDropDownMenu.UpdateList += UpdateList;
            }
        }

        internal static event Delegates.UpdateList_BeforeArgs _beforeUpdateList;
        internal static event Delegates.UpdateList_NormalArgs _afterUpdateList;

        private static void UpdateList(On.tk2dUIDropDownMenu.orig_UpdateList orig, tk2dUIDropDownMenu self)
        {
            Delegates.Params_UpdateList @params = new()
            {
                self = self
            };
            _beforeUpdateList?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateList != null) _afterUpdateList.Invoke(@params);
        }

        internal static void HookSetSelectedItem()
        {
            if (!HookedList.Contains("SetSelectedItem"))
            {
                HookedList.Add("SetSelectedItem");
                On.tk2dUIDropDownMenu.SetSelectedItem += SetSelectedItem;
            }
        }

        internal static event Delegates.SetSelectedItem_BeforeArgs _beforeSetSelectedItem;
        internal static event Delegates.SetSelectedItem_NormalArgs _afterSetSelectedItem;

        private static void SetSelectedItem(On.tk2dUIDropDownMenu.orig_SetSelectedItem orig, tk2dUIDropDownMenu self)
        {
            Delegates.Params_SetSelectedItem @params = new()
            {
                self = self
            };
            _beforeSetSelectedItem?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetSelectedItem != null) _afterSetSelectedItem.Invoke(@params);
        }

        internal static void HookCreateAnotherDropDownItem()
        {
            if (!HookedList.Contains("CreateAnotherDropDownItem"))
            {
                HookedList.Add("CreateAnotherDropDownItem");
                On.tk2dUIDropDownMenu.CreateAnotherDropDownItem += CreateAnotherDropDownItem;
            }
        }

        internal static event Delegates.CreateAnotherDropDownItem_BeforeArgs _beforeCreateAnotherDropDownItem;
        internal static event Delegates.CreateAnotherDropDownItem_NormalArgs _afterCreateAnotherDropDownItem;

        private static tk2dUIDropDownItem CreateAnotherDropDownItem(
            On.tk2dUIDropDownMenu.orig_CreateAnotherDropDownItem orig, tk2dUIDropDownMenu self)
        {
            Delegates.Params_CreateAnotherDropDownItem @params = new()
            {
                self = self
            };
            _beforeCreateAnotherDropDownItem?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCreateAnotherDropDownItem != null) retVal = _afterCreateAnotherDropDownItem.Invoke(@params);
            return retVal;
        }

        internal static void HookItemSelected()
        {
            if (!HookedList.Contains("ItemSelected"))
            {
                HookedList.Add("ItemSelected");
                On.tk2dUIDropDownMenu.ItemSelected += ItemSelected;
            }
        }

        internal static event Delegates.ItemSelected_BeforeArgs _beforeItemSelected;
        internal static event Delegates.ItemSelected_NormalArgs _afterItemSelected;

        private static void ItemSelected(On.tk2dUIDropDownMenu.orig_ItemSelected orig, tk2dUIDropDownMenu self,
            tk2dUIDropDownItem item)
        {
            Delegates.Params_ItemSelected @params = new()
            {
                self = self, item = item
            };
            _beforeItemSelected?.Invoke(@params);
            self = @params.self;
            item = @params.item;
            orig(self, item);
            if (_afterItemSelected != null) _afterItemSelected.Invoke(@params);
        }

        internal static void HookExpandButtonPressed()
        {
            if (!HookedList.Contains("ExpandButtonPressed"))
            {
                HookedList.Add("ExpandButtonPressed");
                On.tk2dUIDropDownMenu.ExpandButtonPressed += ExpandButtonPressed;
            }
        }

        internal static event Delegates.ExpandButtonPressed_BeforeArgs _beforeExpandButtonPressed;
        internal static event Delegates.ExpandButtonPressed_NormalArgs _afterExpandButtonPressed;

        private static void ExpandButtonPressed(On.tk2dUIDropDownMenu.orig_ExpandButtonPressed orig,
            tk2dUIDropDownMenu self)
        {
            Delegates.Params_ExpandButtonPressed @params = new()
            {
                self = self
            };
            _beforeExpandButtonPressed?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterExpandButtonPressed != null) _afterExpandButtonPressed.Invoke(@params);
        }

        internal static void HookExpandList()
        {
            if (!HookedList.Contains("ExpandList"))
            {
                HookedList.Add("ExpandList");
                On.tk2dUIDropDownMenu.ExpandList += ExpandList;
            }
        }

        internal static event Delegates.ExpandList_BeforeArgs _beforeExpandList;
        internal static event Delegates.ExpandList_NormalArgs _afterExpandList;

        private static void ExpandList(On.tk2dUIDropDownMenu.orig_ExpandList orig, tk2dUIDropDownMenu self)
        {
            Delegates.Params_ExpandList @params = new()
            {
                self = self
            };
            _beforeExpandList?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterExpandList != null) _afterExpandList.Invoke(@params);
        }

        internal static void HookCollapseList()
        {
            if (!HookedList.Contains("CollapseList"))
            {
                HookedList.Add("CollapseList");
                On.tk2dUIDropDownMenu.CollapseList += CollapseList;
            }
        }

        internal static event Delegates.CollapseList_BeforeArgs _beforeCollapseList;
        internal static event Delegates.CollapseList_NormalArgs _afterCollapseList;

        private static void CollapseList(On.tk2dUIDropDownMenu.orig_CollapseList orig, tk2dUIDropDownMenu self)
        {
            Delegates.Params_CollapseList @params = new()
            {
                self = self
            };
            _beforeCollapseList?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCollapseList != null) _afterCollapseList.Invoke(@params);
        }

        internal static void HookDropDownItemHoverBtnToggle()
        {
            if (!HookedList.Contains("DropDownItemHoverBtnToggle"))
            {
                HookedList.Add("DropDownItemHoverBtnToggle");
                On.tk2dUIDropDownMenu.DropDownItemHoverBtnToggle += DropDownItemHoverBtnToggle;
            }
        }

        internal static event Delegates.DropDownItemHoverBtnToggle_BeforeArgs _beforeDropDownItemHoverBtnToggle;
        internal static event Delegates.DropDownItemHoverBtnToggle_NormalArgs _afterDropDownItemHoverBtnToggle;

        private static void DropDownItemHoverBtnToggle(On.tk2dUIDropDownMenu.orig_DropDownItemHoverBtnToggle orig,
            tk2dUIDropDownMenu self, tk2dUIUpDownHoverButton upDownHoverButton)
        {
            Delegates.Params_DropDownItemHoverBtnToggle @params = new()
            {
                self = self, upDownHoverButton = upDownHoverButton
            };
            _beforeDropDownItemHoverBtnToggle?.Invoke(@params);
            self = @params.self;
            upDownHoverButton = @params.upDownHoverButton;
            orig(self, upDownHoverButton);
            if (_afterDropDownItemHoverBtnToggle != null) _afterDropDownItemHoverBtnToggle.Invoke(@params);
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.tk2dUIDropDownMenu.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_NormalArgs _afterOnDestroy;

        private static void OnDestroy(On.tk2dUIDropDownMenu.orig_OnDestroy orig, tk2dUIDropDownMenu self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            _beforeOnDestroy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null) _afterOnDestroy.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void CollapseList_BeforeArgs(Params_CollapseList args);

        public delegate void CollapseList_NormalArgs(Params_CollapseList args);

        public delegate void CreateAnotherDropDownItem_BeforeArgs(Params_CreateAnotherDropDownItem args);

        public delegate tk2dUIDropDownItem CreateAnotherDropDownItem_NormalArgs(Params_CreateAnotherDropDownItem args);

        public delegate void DropDownItemHoverBtnToggle_BeforeArgs(Params_DropDownItemHoverBtnToggle args);

        public delegate void DropDownItemHoverBtnToggle_NormalArgs(Params_DropDownItemHoverBtnToggle args);

        public delegate void ExpandButtonPressed_BeforeArgs(Params_ExpandButtonPressed args);

        public delegate void ExpandButtonPressed_NormalArgs(Params_ExpandButtonPressed args);

        public delegate void ExpandList_BeforeArgs(Params_ExpandList args);

        public delegate void ExpandList_NormalArgs(Params_ExpandList args);

        public delegate void get_Index_BeforeArgs(Params_get_Index args);

        public delegate int get_Index_NormalArgs(Params_get_Index args);

        public delegate void get_ItemList_BeforeArgs(Params_get_ItemList args);

        public delegate List<string> get_ItemList_NormalArgs(Params_get_ItemList args);

        public delegate void get_MenuLayoutItem_BeforeArgs(Params_get_MenuLayoutItem args);

        public delegate tk2dUILayout get_MenuLayoutItem_NormalArgs(Params_get_MenuLayoutItem args);

        public delegate void get_SelectedItem_BeforeArgs(Params_get_SelectedItem args);

        public delegate string get_SelectedItem_NormalArgs(Params_get_SelectedItem args);

        public delegate void get_SendMessageTarget_BeforeArgs(Params_get_SendMessageTarget args);

        public delegate GameObject get_SendMessageTarget_NormalArgs(Params_get_SendMessageTarget args);

        public delegate void get_TemplateLayoutItem_BeforeArgs(Params_get_TemplateLayoutItem args);

        public delegate tk2dUILayout get_TemplateLayoutItem_NormalArgs(Params_get_TemplateLayoutItem args);

        public delegate void ItemSelected_BeforeArgs(Params_ItemSelected args);

        public delegate void ItemSelected_NormalArgs(Params_ItemSelected args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_NormalArgs(Params_OnDestroy args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void set_Index_BeforeArgs(Params_set_Index args);

        public delegate void set_Index_NormalArgs(Params_set_Index args);

        public delegate void set_ItemList_BeforeArgs(Params_set_ItemList args);

        public delegate void set_ItemList_NormalArgs(Params_set_ItemList args);

        public delegate void set_MenuLayoutItem_BeforeArgs(Params_set_MenuLayoutItem args);

        public delegate void set_MenuLayoutItem_NormalArgs(Params_set_MenuLayoutItem args);

        public delegate void set_SendMessageTarget_BeforeArgs(Params_set_SendMessageTarget args);

        public delegate void set_SendMessageTarget_NormalArgs(Params_set_SendMessageTarget args);

        public delegate void set_TemplateLayoutItem_BeforeArgs(Params_set_TemplateLayoutItem args);

        public delegate void set_TemplateLayoutItem_NormalArgs(Params_set_TemplateLayoutItem args);

        public delegate void SetSelectedItem_BeforeArgs(Params_SetSelectedItem args);

        public delegate void SetSelectedItem_NormalArgs(Params_SetSelectedItem args);

        public delegate void UpdateList_BeforeArgs(Params_UpdateList args);

        public delegate void UpdateList_NormalArgs(Params_UpdateList args);

        public sealed class Params_get_ItemList
        {
            public tk2dUIDropDownMenu self;
        }

        public sealed class Params_set_ItemList
        {
            public tk2dUIDropDownMenu self;
            public List<string> value;
        }

        public sealed class Params_get_Index
        {
            public tk2dUIDropDownMenu self;
        }

        public sealed class Params_set_Index
        {
            public tk2dUIDropDownMenu self;
            public int value;
        }

        public sealed class Params_get_SelectedItem
        {
            public tk2dUIDropDownMenu self;
        }

        public sealed class Params_get_SendMessageTarget
        {
            public tk2dUIDropDownMenu self;
        }

        public sealed class Params_set_SendMessageTarget
        {
            public tk2dUIDropDownMenu self;
            public GameObject value;
        }

        public sealed class Params_get_MenuLayoutItem
        {
            public tk2dUIDropDownMenu self;
        }

        public sealed class Params_set_MenuLayoutItem
        {
            public tk2dUIDropDownMenu self;
            public tk2dUILayout value;
        }

        public sealed class Params_get_TemplateLayoutItem
        {
            public tk2dUIDropDownMenu self;
        }

        public sealed class Params_set_TemplateLayoutItem
        {
            public tk2dUIDropDownMenu self;
            public tk2dUILayout value;
        }

        public sealed class Params_Awake
        {
            public tk2dUIDropDownMenu self;
        }

        public sealed class Params_OnEnable
        {
            public tk2dUIDropDownMenu self;
        }

        public sealed class Params_OnDisable
        {
            public tk2dUIDropDownMenu self;
        }

        public sealed class Params_UpdateList
        {
            public tk2dUIDropDownMenu self;
        }

        public sealed class Params_SetSelectedItem
        {
            public tk2dUIDropDownMenu self;
        }

        public sealed class Params_CreateAnotherDropDownItem
        {
            public tk2dUIDropDownMenu self;
        }

        public sealed class Params_ItemSelected
        {
            public tk2dUIDropDownItem item;
            public tk2dUIDropDownMenu self;
        }

        public sealed class Params_ExpandButtonPressed
        {
            public tk2dUIDropDownMenu self;
        }

        public sealed class Params_ExpandList
        {
            public tk2dUIDropDownMenu self;
        }

        public sealed class Params_CollapseList
        {
            public tk2dUIDropDownMenu self;
        }

        public sealed class Params_DropDownItemHoverBtnToggle
        {
            public tk2dUIDropDownMenu self;
            public tk2dUIUpDownHoverButton upDownHoverButton;
        }

        public sealed class Params_OnDestroy
        {
            public tk2dUIDropDownMenu self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_ItemList_BeforeArgs get_ItemList
        {
            add
            {
                HookHandler._beforeget_ItemList += value;
                HookHandler.Hookget_ItemList();
            }
            remove => HookHandler._beforeget_ItemList -= value;
        }

        public static event Delegates.set_ItemList_BeforeArgs set_ItemList
        {
            add
            {
                HookHandler._beforeset_ItemList += value;
                HookHandler.Hookset_ItemList();
            }
            remove => HookHandler._beforeset_ItemList -= value;
        }

        public static event Delegates.get_Index_BeforeArgs get_Index
        {
            add
            {
                HookHandler._beforeget_Index += value;
                HookHandler.Hookget_Index();
            }
            remove => HookHandler._beforeget_Index -= value;
        }

        public static event Delegates.set_Index_BeforeArgs set_Index
        {
            add
            {
                HookHandler._beforeset_Index += value;
                HookHandler.Hookset_Index();
            }
            remove => HookHandler._beforeset_Index -= value;
        }

        public static event Delegates.get_SelectedItem_BeforeArgs get_SelectedItem
        {
            add
            {
                HookHandler._beforeget_SelectedItem += value;
                HookHandler.Hookget_SelectedItem();
            }
            remove => HookHandler._beforeget_SelectedItem -= value;
        }

        public static event Delegates.get_SendMessageTarget_BeforeArgs get_SendMessageTarget
        {
            add
            {
                HookHandler._beforeget_SendMessageTarget += value;
                HookHandler.Hookget_SendMessageTarget();
            }
            remove => HookHandler._beforeget_SendMessageTarget -= value;
        }

        public static event Delegates.set_SendMessageTarget_BeforeArgs set_SendMessageTarget
        {
            add
            {
                HookHandler._beforeset_SendMessageTarget += value;
                HookHandler.Hookset_SendMessageTarget();
            }
            remove => HookHandler._beforeset_SendMessageTarget -= value;
        }

        public static event Delegates.get_MenuLayoutItem_BeforeArgs get_MenuLayoutItem
        {
            add
            {
                HookHandler._beforeget_MenuLayoutItem += value;
                HookHandler.Hookget_MenuLayoutItem();
            }
            remove => HookHandler._beforeget_MenuLayoutItem -= value;
        }

        public static event Delegates.set_MenuLayoutItem_BeforeArgs set_MenuLayoutItem
        {
            add
            {
                HookHandler._beforeset_MenuLayoutItem += value;
                HookHandler.Hookset_MenuLayoutItem();
            }
            remove => HookHandler._beforeset_MenuLayoutItem -= value;
        }

        public static event Delegates.get_TemplateLayoutItem_BeforeArgs get_TemplateLayoutItem
        {
            add
            {
                HookHandler._beforeget_TemplateLayoutItem += value;
                HookHandler.Hookget_TemplateLayoutItem();
            }
            remove => HookHandler._beforeget_TemplateLayoutItem -= value;
        }

        public static event Delegates.set_TemplateLayoutItem_BeforeArgs set_TemplateLayoutItem
        {
            add
            {
                HookHandler._beforeset_TemplateLayoutItem += value;
                HookHandler.Hookset_TemplateLayoutItem();
            }
            remove => HookHandler._beforeset_TemplateLayoutItem -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.UpdateList_BeforeArgs UpdateList
        {
            add
            {
                HookHandler._beforeUpdateList += value;
                HookHandler.HookUpdateList();
            }
            remove => HookHandler._beforeUpdateList -= value;
        }

        public static event Delegates.SetSelectedItem_BeforeArgs SetSelectedItem
        {
            add
            {
                HookHandler._beforeSetSelectedItem += value;
                HookHandler.HookSetSelectedItem();
            }
            remove => HookHandler._beforeSetSelectedItem -= value;
        }

        public static event Delegates.CreateAnotherDropDownItem_BeforeArgs CreateAnotherDropDownItem
        {
            add
            {
                HookHandler._beforeCreateAnotherDropDownItem += value;
                HookHandler.HookCreateAnotherDropDownItem();
            }
            remove => HookHandler._beforeCreateAnotherDropDownItem -= value;
        }

        public static event Delegates.ItemSelected_BeforeArgs ItemSelected
        {
            add
            {
                HookHandler._beforeItemSelected += value;
                HookHandler.HookItemSelected();
            }
            remove => HookHandler._beforeItemSelected -= value;
        }

        public static event Delegates.ExpandButtonPressed_BeforeArgs ExpandButtonPressed
        {
            add
            {
                HookHandler._beforeExpandButtonPressed += value;
                HookHandler.HookExpandButtonPressed();
            }
            remove => HookHandler._beforeExpandButtonPressed -= value;
        }

        public static event Delegates.ExpandList_BeforeArgs ExpandList
        {
            add
            {
                HookHandler._beforeExpandList += value;
                HookHandler.HookExpandList();
            }
            remove => HookHandler._beforeExpandList -= value;
        }

        public static event Delegates.CollapseList_BeforeArgs CollapseList
        {
            add
            {
                HookHandler._beforeCollapseList += value;
                HookHandler.HookCollapseList();
            }
            remove => HookHandler._beforeCollapseList -= value;
        }

        public static event Delegates.DropDownItemHoverBtnToggle_BeforeArgs DropDownItemHoverBtnToggle
        {
            add
            {
                HookHandler._beforeDropDownItemHoverBtnToggle += value;
                HookHandler.HookDropDownItemHoverBtnToggle();
            }
            remove => HookHandler._beforeDropDownItemHoverBtnToggle -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_ItemList_NormalArgs get_ItemList
        {
            add
            {
                HookHandler._afterget_ItemList += value;
                HookHandler.Hookget_ItemList();
            }
            remove => HookHandler._afterget_ItemList -= value;
        }

        public static event Delegates.set_ItemList_NormalArgs set_ItemList
        {
            add
            {
                HookHandler._afterset_ItemList += value;
                HookHandler.Hookset_ItemList();
            }
            remove => HookHandler._afterset_ItemList -= value;
        }

        public static event Delegates.get_Index_NormalArgs get_Index
        {
            add
            {
                HookHandler._afterget_Index += value;
                HookHandler.Hookget_Index();
            }
            remove => HookHandler._afterget_Index -= value;
        }

        public static event Delegates.set_Index_NormalArgs set_Index
        {
            add
            {
                HookHandler._afterset_Index += value;
                HookHandler.Hookset_Index();
            }
            remove => HookHandler._afterset_Index -= value;
        }

        public static event Delegates.get_SelectedItem_NormalArgs get_SelectedItem
        {
            add
            {
                HookHandler._afterget_SelectedItem += value;
                HookHandler.Hookget_SelectedItem();
            }
            remove => HookHandler._afterget_SelectedItem -= value;
        }

        public static event Delegates.get_SendMessageTarget_NormalArgs get_SendMessageTarget
        {
            add
            {
                HookHandler._afterget_SendMessageTarget += value;
                HookHandler.Hookget_SendMessageTarget();
            }
            remove => HookHandler._afterget_SendMessageTarget -= value;
        }

        public static event Delegates.set_SendMessageTarget_NormalArgs set_SendMessageTarget
        {
            add
            {
                HookHandler._afterset_SendMessageTarget += value;
                HookHandler.Hookset_SendMessageTarget();
            }
            remove => HookHandler._afterset_SendMessageTarget -= value;
        }

        public static event Delegates.get_MenuLayoutItem_NormalArgs get_MenuLayoutItem
        {
            add
            {
                HookHandler._afterget_MenuLayoutItem += value;
                HookHandler.Hookget_MenuLayoutItem();
            }
            remove => HookHandler._afterget_MenuLayoutItem -= value;
        }

        public static event Delegates.set_MenuLayoutItem_NormalArgs set_MenuLayoutItem
        {
            add
            {
                HookHandler._afterset_MenuLayoutItem += value;
                HookHandler.Hookset_MenuLayoutItem();
            }
            remove => HookHandler._afterset_MenuLayoutItem -= value;
        }

        public static event Delegates.get_TemplateLayoutItem_NormalArgs get_TemplateLayoutItem
        {
            add
            {
                HookHandler._afterget_TemplateLayoutItem += value;
                HookHandler.Hookget_TemplateLayoutItem();
            }
            remove => HookHandler._afterget_TemplateLayoutItem -= value;
        }

        public static event Delegates.set_TemplateLayoutItem_NormalArgs set_TemplateLayoutItem
        {
            add
            {
                HookHandler._afterset_TemplateLayoutItem += value;
                HookHandler.Hookset_TemplateLayoutItem();
            }
            remove => HookHandler._afterset_TemplateLayoutItem -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.UpdateList_NormalArgs UpdateList
        {
            add
            {
                HookHandler._afterUpdateList += value;
                HookHandler.HookUpdateList();
            }
            remove => HookHandler._afterUpdateList -= value;
        }

        public static event Delegates.SetSelectedItem_NormalArgs SetSelectedItem
        {
            add
            {
                HookHandler._afterSetSelectedItem += value;
                HookHandler.HookSetSelectedItem();
            }
            remove => HookHandler._afterSetSelectedItem -= value;
        }

        public static event Delegates.CreateAnotherDropDownItem_NormalArgs CreateAnotherDropDownItem
        {
            add
            {
                HookHandler._afterCreateAnotherDropDownItem += value;
                HookHandler.HookCreateAnotherDropDownItem();
            }
            remove => HookHandler._afterCreateAnotherDropDownItem -= value;
        }

        public static event Delegates.ItemSelected_NormalArgs ItemSelected
        {
            add
            {
                HookHandler._afterItemSelected += value;
                HookHandler.HookItemSelected();
            }
            remove => HookHandler._afterItemSelected -= value;
        }

        public static event Delegates.ExpandButtonPressed_NormalArgs ExpandButtonPressed
        {
            add
            {
                HookHandler._afterExpandButtonPressed += value;
                HookHandler.HookExpandButtonPressed();
            }
            remove => HookHandler._afterExpandButtonPressed -= value;
        }

        public static event Delegates.ExpandList_NormalArgs ExpandList
        {
            add
            {
                HookHandler._afterExpandList += value;
                HookHandler.HookExpandList();
            }
            remove => HookHandler._afterExpandList -= value;
        }

        public static event Delegates.CollapseList_NormalArgs CollapseList
        {
            add
            {
                HookHandler._afterCollapseList += value;
                HookHandler.HookCollapseList();
            }
            remove => HookHandler._afterCollapseList -= value;
        }

        public static event Delegates.DropDownItemHoverBtnToggle_NormalArgs DropDownItemHoverBtnToggle
        {
            add
            {
                HookHandler._afterDropDownItemHoverBtnToggle += value;
                HookHandler.HookDropDownItemHoverBtnToggle();
            }
            remove => HookHandler._afterDropDownItemHoverBtnToggle -= value;
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_ItemList_NormalArgs get_ItemList
        {
            add => HookEndpointManager.Add<Delegates.get_ItemList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_ItemList"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ItemList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_ItemList"), value);
        }

        public static event Delegates.set_ItemList_NormalArgs set_ItemList
        {
            add => HookEndpointManager.Add<Delegates.set_ItemList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_ItemList"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ItemList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_ItemList"), value);
        }

        public static event Delegates.get_Index_NormalArgs get_Index
        {
            add => HookEndpointManager.Add<Delegates.get_Index_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_Index"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Index_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_Index"), value);
        }

        public static event Delegates.set_Index_NormalArgs set_Index
        {
            add => HookEndpointManager.Add<Delegates.set_Index_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_Index"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Index_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_Index"), value);
        }

        public static event Delegates.get_SelectedItem_NormalArgs get_SelectedItem
        {
            add => HookEndpointManager.Add<Delegates.get_SelectedItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_SelectedItem"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SelectedItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_SelectedItem"), value);
        }

        public static event Delegates.get_SendMessageTarget_NormalArgs get_SendMessageTarget
        {
            add => HookEndpointManager.Add<Delegates.get_SendMessageTarget_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_SendMessageTarget"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SendMessageTarget_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_SendMessageTarget"), value);
        }

        public static event Delegates.set_SendMessageTarget_NormalArgs set_SendMessageTarget
        {
            add => HookEndpointManager.Add<Delegates.set_SendMessageTarget_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_SendMessageTarget"), value);
            remove => HookEndpointManager.Remove<Delegates.set_SendMessageTarget_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_SendMessageTarget"), value);
        }

        public static event Delegates.get_MenuLayoutItem_NormalArgs get_MenuLayoutItem
        {
            add => HookEndpointManager.Add<Delegates.get_MenuLayoutItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_MenuLayoutItem"), value);
            remove => HookEndpointManager.Remove<Delegates.get_MenuLayoutItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_MenuLayoutItem"), value);
        }

        public static event Delegates.set_MenuLayoutItem_NormalArgs set_MenuLayoutItem
        {
            add => HookEndpointManager.Add<Delegates.set_MenuLayoutItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_MenuLayoutItem"), value);
            remove => HookEndpointManager.Remove<Delegates.set_MenuLayoutItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_MenuLayoutItem"), value);
        }

        public static event Delegates.get_TemplateLayoutItem_NormalArgs get_TemplateLayoutItem
        {
            add => HookEndpointManager.Add<Delegates.get_TemplateLayoutItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_TemplateLayoutItem"), value);
            remove => HookEndpointManager.Remove<Delegates.get_TemplateLayoutItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "get_TemplateLayoutItem"), value);
        }

        public static event Delegates.set_TemplateLayoutItem_NormalArgs set_TemplateLayoutItem
        {
            add => HookEndpointManager.Add<Delegates.set_TemplateLayoutItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_TemplateLayoutItem"), value);
            remove => HookEndpointManager.Remove<Delegates.set_TemplateLayoutItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIDropDownMenu), "set_TemplateLayoutItem"), value);
        }

        public static event On.tk2dUIDropDownMenu.hook_Awake Awake
        {
            add => On.tk2dUIDropDownMenu.Awake += value;
            remove => On.tk2dUIDropDownMenu.Awake -= value;
        }

        public static event On.tk2dUIDropDownMenu.hook_OnEnable OnEnable
        {
            add => On.tk2dUIDropDownMenu.OnEnable += value;
            remove => On.tk2dUIDropDownMenu.OnEnable -= value;
        }

        public static event On.tk2dUIDropDownMenu.hook_OnDisable OnDisable
        {
            add => On.tk2dUIDropDownMenu.OnDisable += value;
            remove => On.tk2dUIDropDownMenu.OnDisable -= value;
        }

        public static event On.tk2dUIDropDownMenu.hook_UpdateList UpdateList
        {
            add => On.tk2dUIDropDownMenu.UpdateList += value;
            remove => On.tk2dUIDropDownMenu.UpdateList -= value;
        }

        public static event On.tk2dUIDropDownMenu.hook_SetSelectedItem SetSelectedItem
        {
            add => On.tk2dUIDropDownMenu.SetSelectedItem += value;
            remove => On.tk2dUIDropDownMenu.SetSelectedItem -= value;
        }

        public static event On.tk2dUIDropDownMenu.hook_CreateAnotherDropDownItem CreateAnotherDropDownItem
        {
            add => On.tk2dUIDropDownMenu.CreateAnotherDropDownItem += value;
            remove => On.tk2dUIDropDownMenu.CreateAnotherDropDownItem -= value;
        }

        public static event On.tk2dUIDropDownMenu.hook_ItemSelected ItemSelected
        {
            add => On.tk2dUIDropDownMenu.ItemSelected += value;
            remove => On.tk2dUIDropDownMenu.ItemSelected -= value;
        }

        public static event On.tk2dUIDropDownMenu.hook_ExpandButtonPressed ExpandButtonPressed
        {
            add => On.tk2dUIDropDownMenu.ExpandButtonPressed += value;
            remove => On.tk2dUIDropDownMenu.ExpandButtonPressed -= value;
        }

        public static event On.tk2dUIDropDownMenu.hook_ExpandList ExpandList
        {
            add => On.tk2dUIDropDownMenu.ExpandList += value;
            remove => On.tk2dUIDropDownMenu.ExpandList -= value;
        }

        public static event On.tk2dUIDropDownMenu.hook_CollapseList CollapseList
        {
            add => On.tk2dUIDropDownMenu.CollapseList += value;
            remove => On.tk2dUIDropDownMenu.CollapseList -= value;
        }

        public static event On.tk2dUIDropDownMenu.hook_DropDownItemHoverBtnToggle DropDownItemHoverBtnToggle
        {
            add => On.tk2dUIDropDownMenu.DropDownItemHoverBtnToggle += value;
            remove => On.tk2dUIDropDownMenu.DropDownItemHoverBtnToggle -= value;
        }

        public static event On.tk2dUIDropDownMenu.hook_OnDestroy OnDestroy
        {
            add => On.tk2dUIDropDownMenu.OnDestroy += value;
            remove => On.tk2dUIDropDownMenu.OnDestroy -= value;
        }
    }
}