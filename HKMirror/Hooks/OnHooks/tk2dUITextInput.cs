using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for tk2dUITextInput class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUITextInput
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_LayoutItem()
{
if (!HookedList.Contains("get_LayoutItem"))
{
HookedList.Add("get_LayoutItem");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_LayoutItem", true), get_LayoutItem);

}
}
internal static event Delegates.get_LayoutItem_BeforeArgs _beforeget_LayoutItem;
internal static event Delegates.get_LayoutItem_AfterArgs _afterget_LayoutItem;
private static tk2dUILayout get_LayoutItem(Func<tk2dUITextInput, tk2dUILayout> orig, tk2dUITextInput self)
{
Delegates.Params_get_LayoutItem @params = new() 
{
self = self
};
if (_beforeget_LayoutItem != null)
{
foreach (Delegates.get_LayoutItem_BeforeArgs toInvoke in _beforeget_LayoutItem.GetInvocationList())
{
try
{
_beforeget_LayoutItem?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_LayoutItem != null)
{
foreach (Delegates.get_LayoutItem_AfterArgs toInvoke in _afterget_LayoutItem.GetInvocationList())
{
try
{
retVal = _afterget_LayoutItem.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_LayoutItem()
{
if (!HookedList.Contains("set_LayoutItem"))
{
HookedList.Add("set_LayoutItem");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "set_LayoutItem", true), set_LayoutItem);

}
}
internal static event Delegates.set_LayoutItem_BeforeArgs _beforeset_LayoutItem;
internal static event Delegates.set_LayoutItem_AfterArgs _afterset_LayoutItem;
private static void set_LayoutItem(Action<tk2dUITextInput,  tk2dUILayout> orig, tk2dUITextInput self,  tk2dUILayout value)
{
Delegates.Params_set_LayoutItem @params = new() 
{
self = self
, value = value
};
if (_beforeset_LayoutItem != null)
{
foreach (Delegates.set_LayoutItem_BeforeArgs toInvoke in _beforeset_LayoutItem.GetInvocationList())
{
try
{
_beforeset_LayoutItem?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_LayoutItem != null)
{
foreach (Delegates.set_LayoutItem_AfterArgs toInvoke in _afterset_LayoutItem.GetInvocationList())
{
try
{
_afterset_LayoutItem.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_SendMessageTarget()
{
if (!HookedList.Contains("get_SendMessageTarget"))
{
HookedList.Add("get_SendMessageTarget");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_SendMessageTarget", true), get_SendMessageTarget);

}
}
internal static event Delegates.get_SendMessageTarget_BeforeArgs _beforeget_SendMessageTarget;
internal static event Delegates.get_SendMessageTarget_AfterArgs _afterget_SendMessageTarget;
private static UnityEngine.GameObject get_SendMessageTarget(Func<tk2dUITextInput, UnityEngine.GameObject> orig, tk2dUITextInput self)
{
Delegates.Params_get_SendMessageTarget @params = new() 
{
self = self
};
if (_beforeget_SendMessageTarget != null)
{
foreach (Delegates.get_SendMessageTarget_BeforeArgs toInvoke in _beforeget_SendMessageTarget.GetInvocationList())
{
try
{
_beforeget_SendMessageTarget?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_SendMessageTarget != null)
{
foreach (Delegates.get_SendMessageTarget_AfterArgs toInvoke in _afterget_SendMessageTarget.GetInvocationList())
{
try
{
retVal = _afterget_SendMessageTarget.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_SendMessageTarget()
{
if (!HookedList.Contains("set_SendMessageTarget"))
{
HookedList.Add("set_SendMessageTarget");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "set_SendMessageTarget", true), set_SendMessageTarget);

}
}
internal static event Delegates.set_SendMessageTarget_BeforeArgs _beforeset_SendMessageTarget;
internal static event Delegates.set_SendMessageTarget_AfterArgs _afterset_SendMessageTarget;
private static void set_SendMessageTarget(Action<tk2dUITextInput,  UnityEngine.GameObject> orig, tk2dUITextInput self,  UnityEngine.GameObject value)
{
Delegates.Params_set_SendMessageTarget @params = new() 
{
self = self
, value = value
};
if (_beforeset_SendMessageTarget != null)
{
foreach (Delegates.set_SendMessageTarget_BeforeArgs toInvoke in _beforeset_SendMessageTarget.GetInvocationList())
{
try
{
_beforeset_SendMessageTarget?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_SendMessageTarget != null)
{
foreach (Delegates.set_SendMessageTarget_AfterArgs toInvoke in _afterset_SendMessageTarget.GetInvocationList())
{
try
{
_afterset_SendMessageTarget.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_IsFocus()
{
if (!HookedList.Contains("get_IsFocus"))
{
HookedList.Add("get_IsFocus");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_IsFocus", true), get_IsFocus);

}
}
internal static event Delegates.get_IsFocus_BeforeArgs _beforeget_IsFocus;
internal static event Delegates.get_IsFocus_AfterArgs _afterget_IsFocus;
private static bool get_IsFocus(Func<tk2dUITextInput, bool> orig, tk2dUITextInput self)
{
Delegates.Params_get_IsFocus @params = new() 
{
self = self
};
if (_beforeget_IsFocus != null)
{
foreach (Delegates.get_IsFocus_BeforeArgs toInvoke in _beforeget_IsFocus.GetInvocationList())
{
try
{
_beforeget_IsFocus?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_IsFocus != null)
{
foreach (Delegates.get_IsFocus_AfterArgs toInvoke in _afterget_IsFocus.GetInvocationList())
{
try
{
retVal = _afterget_IsFocus.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_Text()
{
if (!HookedList.Contains("get_Text"))
{
HookedList.Add("get_Text");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_Text", true), get_Text);

}
}
internal static event Delegates.get_Text_BeforeArgs _beforeget_Text;
internal static event Delegates.get_Text_AfterArgs _afterget_Text;
private static string get_Text(Func<tk2dUITextInput, string> orig, tk2dUITextInput self)
{
Delegates.Params_get_Text @params = new() 
{
self = self
};
if (_beforeget_Text != null)
{
foreach (Delegates.get_Text_BeforeArgs toInvoke in _beforeget_Text.GetInvocationList())
{
try
{
_beforeget_Text?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_Text != null)
{
foreach (Delegates.get_Text_AfterArgs toInvoke in _afterget_Text.GetInvocationList())
{
try
{
retVal = _afterget_Text.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_Text()
{
if (!HookedList.Contains("set_Text"))
{
HookedList.Add("set_Text");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "set_Text", true), set_Text);

}
}
internal static event Delegates.set_Text_BeforeArgs _beforeset_Text;
internal static event Delegates.set_Text_AfterArgs _afterset_Text;
private static void set_Text(Action<tk2dUITextInput,  string> orig, tk2dUITextInput self,  string value)
{
Delegates.Params_set_Text @params = new() 
{
self = self
, value = value
};
if (_beforeset_Text != null)
{
foreach (Delegates.set_Text_BeforeArgs toInvoke in _beforeset_Text.GetInvocationList())
{
try
{
_beforeset_Text?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_Text != null)
{
foreach (Delegates.set_Text_AfterArgs toInvoke in _afterset_Text.GetInvocationList())
{
try
{
_afterset_Text.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.tk2dUITextInput.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.tk2dUITextInput.orig_Awake orig,tk2dUITextInput self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.tk2dUITextInput.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.tk2dUITextInput.orig_Start orig,tk2dUITextInput self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
On.tk2dUITextInput.OnEnable += OnEnable;

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(On.tk2dUITextInput.orig_OnEnable orig,tk2dUITextInput self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDisable()
{
if (!HookedList.Contains("OnDisable"))
{
HookedList.Add("OnDisable");
On.tk2dUITextInput.OnDisable += OnDisable;

}
}
internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;
private static void OnDisable(On.tk2dUITextInput.orig_OnDisable orig,tk2dUITextInput self)
{
Delegates.Params_OnDisable @params = new() 
{
self = self
};
if (_beforeOnDisable != null)
{
foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
{
try
{
_beforeOnDisable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDisable != null)
{
foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
{
try
{
_afterOnDisable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetFocus()
{
if (!HookedList.Contains("SetFocus"))
{
HookedList.Add("SetFocus");
On.tk2dUITextInput.SetFocus += SetFocus;

}
}
internal static event Delegates.SetFocus_BeforeArgs _beforeSetFocus;
internal static event Delegates.SetFocus_AfterArgs _afterSetFocus;
private static void SetFocus(On.tk2dUITextInput.orig_SetFocus orig,tk2dUITextInput self)
{
Delegates.Params_SetFocus @params = new() 
{
self = self
};
if (_beforeSetFocus != null)
{
foreach (Delegates.SetFocus_BeforeArgs toInvoke in _beforeSetFocus.GetInvocationList())
{
try
{
_beforeSetFocus?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetFocus != null)
{
foreach (Delegates.SetFocus_AfterArgs toInvoke in _afterSetFocus.GetInvocationList())
{
try
{
_afterSetFocus.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetFocus_bool()
{
if (!HookedList.Contains("SetFocus_bool"))
{
HookedList.Add("SetFocus_bool");
On.tk2dUITextInput.SetFocus_bool += SetFocus_bool;

}
}
internal static event Delegates.SetFocus_bool_BeforeArgs _beforeSetFocus_bool;
internal static event Delegates.SetFocus_bool_AfterArgs _afterSetFocus_bool;
private static void SetFocus_bool(On.tk2dUITextInput.orig_SetFocus_bool orig,tk2dUITextInput self,  bool focus)
{
Delegates.Params_SetFocus_bool @params = new() 
{
self = self
, focus = focus
};
if (_beforeSetFocus_bool != null)
{
foreach (Delegates.SetFocus_bool_BeforeArgs toInvoke in _beforeSetFocus_bool.GetInvocationList())
{
try
{
_beforeSetFocus_bool?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
focus = @params.focus;
orig(self, focus);
if (_afterSetFocus_bool != null)
{
foreach (Delegates.SetFocus_bool_AfterArgs toInvoke in _afterSetFocus_bool.GetInvocationList())
{
try
{
_afterSetFocus_bool.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookFormatTextForDisplay()
{
if (!HookedList.Contains("FormatTextForDisplay"))
{
HookedList.Add("FormatTextForDisplay");
On.tk2dUITextInput.FormatTextForDisplay += FormatTextForDisplay;

}
}
internal static event Delegates.FormatTextForDisplay_BeforeArgs _beforeFormatTextForDisplay;
internal static event Delegates.FormatTextForDisplay_AfterArgs _afterFormatTextForDisplay;
private static void FormatTextForDisplay(On.tk2dUITextInput.orig_FormatTextForDisplay orig,tk2dUITextInput self,  string modifiedText)
{
Delegates.Params_FormatTextForDisplay @params = new() 
{
self = self
, modifiedText = modifiedText
};
if (_beforeFormatTextForDisplay != null)
{
foreach (Delegates.FormatTextForDisplay_BeforeArgs toInvoke in _beforeFormatTextForDisplay.GetInvocationList())
{
try
{
_beforeFormatTextForDisplay?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
modifiedText = @params.modifiedText;
orig(self, modifiedText);
if (_afterFormatTextForDisplay != null)
{
foreach (Delegates.FormatTextForDisplay_AfterArgs toInvoke in _afterFormatTextForDisplay.GetInvocationList())
{
try
{
_afterFormatTextForDisplay.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookListenForKeyboardTextUpdate()
{
if (!HookedList.Contains("ListenForKeyboardTextUpdate"))
{
HookedList.Add("ListenForKeyboardTextUpdate");
On.tk2dUITextInput.ListenForKeyboardTextUpdate += ListenForKeyboardTextUpdate;

}
}
internal static event Delegates.ListenForKeyboardTextUpdate_BeforeArgs _beforeListenForKeyboardTextUpdate;
internal static event Delegates.ListenForKeyboardTextUpdate_AfterArgs _afterListenForKeyboardTextUpdate;
private static void ListenForKeyboardTextUpdate(On.tk2dUITextInput.orig_ListenForKeyboardTextUpdate orig,tk2dUITextInput self)
{
Delegates.Params_ListenForKeyboardTextUpdate @params = new() 
{
self = self
};
if (_beforeListenForKeyboardTextUpdate != null)
{
foreach (Delegates.ListenForKeyboardTextUpdate_BeforeArgs toInvoke in _beforeListenForKeyboardTextUpdate.GetInvocationList())
{
try
{
_beforeListenForKeyboardTextUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterListenForKeyboardTextUpdate != null)
{
foreach (Delegates.ListenForKeyboardTextUpdate_AfterArgs toInvoke in _afterListenForKeyboardTextUpdate.GetInvocationList())
{
try
{
_afterListenForKeyboardTextUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookInputSelected()
{
if (!HookedList.Contains("InputSelected"))
{
HookedList.Add("InputSelected");
On.tk2dUITextInput.InputSelected += InputSelected;

}
}
internal static event Delegates.InputSelected_BeforeArgs _beforeInputSelected;
internal static event Delegates.InputSelected_AfterArgs _afterInputSelected;
private static void InputSelected(On.tk2dUITextInput.orig_InputSelected orig,tk2dUITextInput self)
{
Delegates.Params_InputSelected @params = new() 
{
self = self
};
if (_beforeInputSelected != null)
{
foreach (Delegates.InputSelected_BeforeArgs toInvoke in _beforeInputSelected.GetInvocationList())
{
try
{
_beforeInputSelected?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterInputSelected != null)
{
foreach (Delegates.InputSelected_AfterArgs toInvoke in _afterInputSelected.GetInvocationList())
{
try
{
_afterInputSelected.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookInputDeselected()
{
if (!HookedList.Contains("InputDeselected"))
{
HookedList.Add("InputDeselected");
On.tk2dUITextInput.InputDeselected += InputDeselected;

}
}
internal static event Delegates.InputDeselected_BeforeArgs _beforeInputDeselected;
internal static event Delegates.InputDeselected_AfterArgs _afterInputDeselected;
private static void InputDeselected(On.tk2dUITextInput.orig_InputDeselected orig,tk2dUITextInput self)
{
Delegates.Params_InputDeselected @params = new() 
{
self = self
};
if (_beforeInputDeselected != null)
{
foreach (Delegates.InputDeselected_BeforeArgs toInvoke in _beforeInputDeselected.GetInvocationList())
{
try
{
_beforeInputDeselected?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterInputDeselected != null)
{
foreach (Delegates.InputDeselected_AfterArgs toInvoke in _afterInputDeselected.GetInvocationList())
{
try
{
_afterInputDeselected.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAnyPress()
{
if (!HookedList.Contains("AnyPress"))
{
HookedList.Add("AnyPress");
On.tk2dUITextInput.AnyPress += AnyPress;

}
}
internal static event Delegates.AnyPress_BeforeArgs _beforeAnyPress;
internal static event Delegates.AnyPress_AfterArgs _afterAnyPress;
private static void AnyPress(On.tk2dUITextInput.orig_AnyPress orig,tk2dUITextInput self)
{
Delegates.Params_AnyPress @params = new() 
{
self = self
};
if (_beforeAnyPress != null)
{
foreach (Delegates.AnyPress_BeforeArgs toInvoke in _beforeAnyPress.GetInvocationList())
{
try
{
_beforeAnyPress?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAnyPress != null)
{
foreach (Delegates.AnyPress_AfterArgs toInvoke in _afterAnyPress.GetInvocationList())
{
try
{
_afterAnyPress.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetState()
{
if (!HookedList.Contains("SetState"))
{
HookedList.Add("SetState");
On.tk2dUITextInput.SetState += SetState;

}
}
internal static event Delegates.SetState_BeforeArgs _beforeSetState;
internal static event Delegates.SetState_AfterArgs _afterSetState;
private static void SetState(On.tk2dUITextInput.orig_SetState orig,tk2dUITextInput self)
{
Delegates.Params_SetState @params = new() 
{
self = self
};
if (_beforeSetState != null)
{
foreach (Delegates.SetState_BeforeArgs toInvoke in _beforeSetState.GetInvocationList())
{
try
{
_beforeSetState?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetState != null)
{
foreach (Delegates.SetState_AfterArgs toInvoke in _afterSetState.GetInvocationList())
{
try
{
_afterSetState.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetCursorPosition()
{
if (!HookedList.Contains("SetCursorPosition"))
{
HookedList.Add("SetCursorPosition");
On.tk2dUITextInput.SetCursorPosition += SetCursorPosition;

}
}
internal static event Delegates.SetCursorPosition_BeforeArgs _beforeSetCursorPosition;
internal static event Delegates.SetCursorPosition_AfterArgs _afterSetCursorPosition;
private static void SetCursorPosition(On.tk2dUITextInput.orig_SetCursorPosition orig,tk2dUITextInput self)
{
Delegates.Params_SetCursorPosition @params = new() 
{
self = self
};
if (_beforeSetCursorPosition != null)
{
foreach (Delegates.SetCursorPosition_BeforeArgs toInvoke in _beforeSetCursorPosition.GetInvocationList())
{
try
{
_beforeSetCursorPosition?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetCursorPosition != null)
{
foreach (Delegates.SetCursorPosition_AfterArgs toInvoke in _afterSetCursorPosition.GetInvocationList())
{
try
{
_afterSetCursorPosition.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookShowDisplayText()
{
if (!HookedList.Contains("ShowDisplayText"))
{
HookedList.Add("ShowDisplayText");
On.tk2dUITextInput.ShowDisplayText += ShowDisplayText;

}
}
internal static event Delegates.ShowDisplayText_BeforeArgs _beforeShowDisplayText;
internal static event Delegates.ShowDisplayText_AfterArgs _afterShowDisplayText;
private static void ShowDisplayText(On.tk2dUITextInput.orig_ShowDisplayText orig,tk2dUITextInput self)
{
Delegates.Params_ShowDisplayText @params = new() 
{
self = self
};
if (_beforeShowDisplayText != null)
{
foreach (Delegates.ShowDisplayText_BeforeArgs toInvoke in _beforeShowDisplayText.GetInvocationList())
{
try
{
_beforeShowDisplayText?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterShowDisplayText != null)
{
foreach (Delegates.ShowDisplayText_AfterArgs toInvoke in _afterShowDisplayText.GetInvocationList())
{
try
{
_afterShowDisplayText.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookHideDisplayText()
{
if (!HookedList.Contains("HideDisplayText"))
{
HookedList.Add("HideDisplayText");
On.tk2dUITextInput.HideDisplayText += HideDisplayText;

}
}
internal static event Delegates.HideDisplayText_BeforeArgs _beforeHideDisplayText;
internal static event Delegates.HideDisplayText_AfterArgs _afterHideDisplayText;
private static void HideDisplayText(On.tk2dUITextInput.orig_HideDisplayText orig,tk2dUITextInput self)
{
Delegates.Params_HideDisplayText @params = new() 
{
self = self
};
if (_beforeHideDisplayText != null)
{
foreach (Delegates.HideDisplayText_BeforeArgs toInvoke in _beforeHideDisplayText.GetInvocationList())
{
try
{
_beforeHideDisplayText?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterHideDisplayText != null)
{
foreach (Delegates.HideDisplayText_AfterArgs toInvoke in _afterHideDisplayText.GetInvocationList())
{
try
{
_afterHideDisplayText.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookLayoutReshaped()
{
if (!HookedList.Contains("LayoutReshaped"))
{
HookedList.Add("LayoutReshaped");
On.tk2dUITextInput.LayoutReshaped += LayoutReshaped;

}
}
internal static event Delegates.LayoutReshaped_BeforeArgs _beforeLayoutReshaped;
internal static event Delegates.LayoutReshaped_AfterArgs _afterLayoutReshaped;
private static void LayoutReshaped(On.tk2dUITextInput.orig_LayoutReshaped orig,tk2dUITextInput self,  UnityEngine.Vector3 dMin,  UnityEngine.Vector3 dMax)
{
Delegates.Params_LayoutReshaped @params = new() 
{
self = self
, dMin = dMin
, dMax = dMax
};
if (_beforeLayoutReshaped != null)
{
foreach (Delegates.LayoutReshaped_BeforeArgs toInvoke in _beforeLayoutReshaped.GetInvocationList())
{
try
{
_beforeLayoutReshaped?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
dMin = @params.dMin;
dMax = @params.dMax;
orig(self, dMin, dMax);
if (_afterLayoutReshaped != null)
{
foreach (Delegates.LayoutReshaped_AfterArgs toInvoke in _afterLayoutReshaped.GetInvocationList())
{
try
{
_afterLayoutReshaped.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_LayoutItem
{
public tk2dUITextInput self;
}
public delegate void get_LayoutItem_BeforeArgs(Params_get_LayoutItem args);
public delegate tk2dUILayout get_LayoutItem_AfterArgs(Params_get_LayoutItem args, tk2dUILayout ret);
public delegate tk2dUILayout get_LayoutItem_WithArgs (Func<tk2dUITextInput, tk2dUILayout> orig, tk2dUITextInput self);
public sealed class Params_set_LayoutItem
{
public tk2dUITextInput self;
public tk2dUILayout value;
}
public delegate void set_LayoutItem_BeforeArgs(Params_set_LayoutItem args);
public delegate void set_LayoutItem_AfterArgs(Params_set_LayoutItem args);
public delegate void set_LayoutItem_WithArgs (Action<tk2dUITextInput,  tk2dUILayout> orig, tk2dUITextInput self,  tk2dUILayout value);
public sealed class Params_get_SendMessageTarget
{
public tk2dUITextInput self;
}
public delegate void get_SendMessageTarget_BeforeArgs(Params_get_SendMessageTarget args);
public delegate UnityEngine.GameObject get_SendMessageTarget_AfterArgs(Params_get_SendMessageTarget args, UnityEngine.GameObject ret);
public delegate UnityEngine.GameObject get_SendMessageTarget_WithArgs (Func<tk2dUITextInput, UnityEngine.GameObject> orig, tk2dUITextInput self);
public sealed class Params_set_SendMessageTarget
{
public tk2dUITextInput self;
public UnityEngine.GameObject value;
}
public delegate void set_SendMessageTarget_BeforeArgs(Params_set_SendMessageTarget args);
public delegate void set_SendMessageTarget_AfterArgs(Params_set_SendMessageTarget args);
public delegate void set_SendMessageTarget_WithArgs (Action<tk2dUITextInput,  UnityEngine.GameObject> orig, tk2dUITextInput self,  UnityEngine.GameObject value);
public sealed class Params_get_IsFocus
{
public tk2dUITextInput self;
}
public delegate void get_IsFocus_BeforeArgs(Params_get_IsFocus args);
public delegate bool get_IsFocus_AfterArgs(Params_get_IsFocus args, bool ret);
public delegate bool get_IsFocus_WithArgs (Func<tk2dUITextInput, bool> orig, tk2dUITextInput self);
public sealed class Params_get_Text
{
public tk2dUITextInput self;
}
public delegate void get_Text_BeforeArgs(Params_get_Text args);
public delegate string get_Text_AfterArgs(Params_get_Text args, string ret);
public delegate string get_Text_WithArgs (Func<tk2dUITextInput, string> orig, tk2dUITextInput self);
public sealed class Params_set_Text
{
public tk2dUITextInput self;
public string value;
}
public delegate void set_Text_BeforeArgs(Params_set_Text args);
public delegate void set_Text_AfterArgs(Params_set_Text args);
public delegate void set_Text_WithArgs (Action<tk2dUITextInput,  string> orig, tk2dUITextInput self,  string value);
public sealed class Params_Awake
{
public tk2dUITextInput self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<tk2dUITextInput> orig, tk2dUITextInput self);
public sealed class Params_Start
{
public tk2dUITextInput self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<tk2dUITextInput> orig, tk2dUITextInput self);
public sealed class Params_OnEnable
{
public tk2dUITextInput self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<tk2dUITextInput> orig, tk2dUITextInput self);
public sealed class Params_OnDisable
{
public tk2dUITextInput self;
}
public delegate void OnDisable_BeforeArgs(Params_OnDisable args);
public delegate void OnDisable_AfterArgs(Params_OnDisable args);
public delegate void OnDisable_WithArgs (Action<tk2dUITextInput> orig, tk2dUITextInput self);
public sealed class Params_SetFocus
{
public tk2dUITextInput self;
}
public delegate void SetFocus_BeforeArgs(Params_SetFocus args);
public delegate void SetFocus_AfterArgs(Params_SetFocus args);
public delegate void SetFocus_WithArgs (Action<tk2dUITextInput> orig, tk2dUITextInput self);
public sealed class Params_SetFocus_bool
{
public tk2dUITextInput self;
public bool focus;
}
public delegate void SetFocus_bool_BeforeArgs(Params_SetFocus_bool args);
public delegate void SetFocus_bool_AfterArgs(Params_SetFocus_bool args);
public delegate void SetFocus_bool_WithArgs (Action<tk2dUITextInput,  bool> orig, tk2dUITextInput self,  bool focus);
public sealed class Params_FormatTextForDisplay
{
public tk2dUITextInput self;
public string modifiedText;
}
public delegate void FormatTextForDisplay_BeforeArgs(Params_FormatTextForDisplay args);
public delegate void FormatTextForDisplay_AfterArgs(Params_FormatTextForDisplay args);
public delegate void FormatTextForDisplay_WithArgs (Action<tk2dUITextInput,  string> orig, tk2dUITextInput self,  string modifiedText);
public sealed class Params_ListenForKeyboardTextUpdate
{
public tk2dUITextInput self;
}
public delegate void ListenForKeyboardTextUpdate_BeforeArgs(Params_ListenForKeyboardTextUpdate args);
public delegate void ListenForKeyboardTextUpdate_AfterArgs(Params_ListenForKeyboardTextUpdate args);
public delegate void ListenForKeyboardTextUpdate_WithArgs (Action<tk2dUITextInput> orig, tk2dUITextInput self);
public sealed class Params_InputSelected
{
public tk2dUITextInput self;
}
public delegate void InputSelected_BeforeArgs(Params_InputSelected args);
public delegate void InputSelected_AfterArgs(Params_InputSelected args);
public delegate void InputSelected_WithArgs (Action<tk2dUITextInput> orig, tk2dUITextInput self);
public sealed class Params_InputDeselected
{
public tk2dUITextInput self;
}
public delegate void InputDeselected_BeforeArgs(Params_InputDeselected args);
public delegate void InputDeselected_AfterArgs(Params_InputDeselected args);
public delegate void InputDeselected_WithArgs (Action<tk2dUITextInput> orig, tk2dUITextInput self);
public sealed class Params_AnyPress
{
public tk2dUITextInput self;
}
public delegate void AnyPress_BeforeArgs(Params_AnyPress args);
public delegate void AnyPress_AfterArgs(Params_AnyPress args);
public delegate void AnyPress_WithArgs (Action<tk2dUITextInput> orig, tk2dUITextInput self);
public sealed class Params_SetState
{
public tk2dUITextInput self;
}
public delegate void SetState_BeforeArgs(Params_SetState args);
public delegate void SetState_AfterArgs(Params_SetState args);
public delegate void SetState_WithArgs (Action<tk2dUITextInput> orig, tk2dUITextInput self);
public sealed class Params_SetCursorPosition
{
public tk2dUITextInput self;
}
public delegate void SetCursorPosition_BeforeArgs(Params_SetCursorPosition args);
public delegate void SetCursorPosition_AfterArgs(Params_SetCursorPosition args);
public delegate void SetCursorPosition_WithArgs (Action<tk2dUITextInput> orig, tk2dUITextInput self);
public sealed class Params_ShowDisplayText
{
public tk2dUITextInput self;
}
public delegate void ShowDisplayText_BeforeArgs(Params_ShowDisplayText args);
public delegate void ShowDisplayText_AfterArgs(Params_ShowDisplayText args);
public delegate void ShowDisplayText_WithArgs (Action<tk2dUITextInput> orig, tk2dUITextInput self);
public sealed class Params_HideDisplayText
{
public tk2dUITextInput self;
}
public delegate void HideDisplayText_BeforeArgs(Params_HideDisplayText args);
public delegate void HideDisplayText_AfterArgs(Params_HideDisplayText args);
public delegate void HideDisplayText_WithArgs (Action<tk2dUITextInput> orig, tk2dUITextInput self);
public sealed class Params_LayoutReshaped
{
public tk2dUITextInput self;
public UnityEngine.Vector3 dMin;
public UnityEngine.Vector3 dMax;
}
public delegate void LayoutReshaped_BeforeArgs(Params_LayoutReshaped args);
public delegate void LayoutReshaped_AfterArgs(Params_LayoutReshaped args);
public delegate void LayoutReshaped_WithArgs (Action<tk2dUITextInput,  UnityEngine.Vector3,  UnityEngine.Vector3> orig, tk2dUITextInput self,  UnityEngine.Vector3 dMin,  UnityEngine.Vector3 dMax);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_LayoutItem_BeforeArgs get_LayoutItem
{
add
{

HookHandler._beforeget_LayoutItem += value;
HookHandler.Hookget_LayoutItem();
}
remove => HookHandler._beforeget_LayoutItem -= value;
}
public static event Delegates.set_LayoutItem_BeforeArgs set_LayoutItem
{
add
{

HookHandler._beforeset_LayoutItem += value;
HookHandler.Hookset_LayoutItem();
}
remove => HookHandler._beforeset_LayoutItem -= value;
}
public static event Delegates.get_SendMessageTarget_BeforeArgs get_SendMessageTarget
{
add
{

HookHandler._beforeget_SendMessageTarget += value;
HookHandler.Hookget_SendMessageTarget();
}
remove => HookHandler._beforeget_SendMessageTarget -= value;
}
public static event Delegates.set_SendMessageTarget_BeforeArgs set_SendMessageTarget
{
add
{

HookHandler._beforeset_SendMessageTarget += value;
HookHandler.Hookset_SendMessageTarget();
}
remove => HookHandler._beforeset_SendMessageTarget -= value;
}
public static event Delegates.get_IsFocus_BeforeArgs get_IsFocus
{
add
{

HookHandler._beforeget_IsFocus += value;
HookHandler.Hookget_IsFocus();
}
remove => HookHandler._beforeget_IsFocus -= value;
}
public static event Delegates.get_Text_BeforeArgs get_Text
{
add
{

HookHandler._beforeget_Text += value;
HookHandler.Hookget_Text();
}
remove => HookHandler._beforeget_Text -= value;
}
public static event Delegates.set_Text_BeforeArgs set_Text
{
add
{

HookHandler._beforeset_Text += value;
HookHandler.Hookset_Text();
}
remove => HookHandler._beforeset_Text -= value;
}
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.OnDisable_BeforeArgs OnDisable
{
add
{

HookHandler._beforeOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._beforeOnDisable -= value;
}
public static event Delegates.SetFocus_BeforeArgs SetFocus
{
add
{

HookHandler._beforeSetFocus += value;
HookHandler.HookSetFocus();
}
remove => HookHandler._beforeSetFocus -= value;
}
public static event Delegates.SetFocus_bool_BeforeArgs SetFocus_bool
{
add
{

HookHandler._beforeSetFocus_bool += value;
HookHandler.HookSetFocus_bool();
}
remove => HookHandler._beforeSetFocus_bool -= value;
}
public static event Delegates.FormatTextForDisplay_BeforeArgs FormatTextForDisplay
{
add
{

HookHandler._beforeFormatTextForDisplay += value;
HookHandler.HookFormatTextForDisplay();
}
remove => HookHandler._beforeFormatTextForDisplay -= value;
}
public static event Delegates.ListenForKeyboardTextUpdate_BeforeArgs ListenForKeyboardTextUpdate
{
add
{

HookHandler._beforeListenForKeyboardTextUpdate += value;
HookHandler.HookListenForKeyboardTextUpdate();
}
remove => HookHandler._beforeListenForKeyboardTextUpdate -= value;
}
public static event Delegates.InputSelected_BeforeArgs InputSelected
{
add
{

HookHandler._beforeInputSelected += value;
HookHandler.HookInputSelected();
}
remove => HookHandler._beforeInputSelected -= value;
}
public static event Delegates.InputDeselected_BeforeArgs InputDeselected
{
add
{

HookHandler._beforeInputDeselected += value;
HookHandler.HookInputDeselected();
}
remove => HookHandler._beforeInputDeselected -= value;
}
public static event Delegates.AnyPress_BeforeArgs AnyPress
{
add
{

HookHandler._beforeAnyPress += value;
HookHandler.HookAnyPress();
}
remove => HookHandler._beforeAnyPress -= value;
}
public static event Delegates.SetState_BeforeArgs SetState
{
add
{

HookHandler._beforeSetState += value;
HookHandler.HookSetState();
}
remove => HookHandler._beforeSetState -= value;
}
public static event Delegates.SetCursorPosition_BeforeArgs SetCursorPosition
{
add
{

HookHandler._beforeSetCursorPosition += value;
HookHandler.HookSetCursorPosition();
}
remove => HookHandler._beforeSetCursorPosition -= value;
}
public static event Delegates.ShowDisplayText_BeforeArgs ShowDisplayText
{
add
{

HookHandler._beforeShowDisplayText += value;
HookHandler.HookShowDisplayText();
}
remove => HookHandler._beforeShowDisplayText -= value;
}
public static event Delegates.HideDisplayText_BeforeArgs HideDisplayText
{
add
{

HookHandler._beforeHideDisplayText += value;
HookHandler.HookHideDisplayText();
}
remove => HookHandler._beforeHideDisplayText -= value;
}
public static event Delegates.LayoutReshaped_BeforeArgs LayoutReshaped
{
add
{

HookHandler._beforeLayoutReshaped += value;
HookHandler.HookLayoutReshaped();
}
remove => HookHandler._beforeLayoutReshaped -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_LayoutItem_AfterArgs get_LayoutItem
{
add
{

HookHandler._afterget_LayoutItem += value;
HookHandler.Hookget_LayoutItem();
}
remove => HookHandler._afterget_LayoutItem -= value;
}
public static event Delegates.set_LayoutItem_AfterArgs set_LayoutItem
{
add
{

HookHandler._afterset_LayoutItem += value;
HookHandler.Hookset_LayoutItem();
}
remove => HookHandler._afterset_LayoutItem -= value;
}
public static event Delegates.get_SendMessageTarget_AfterArgs get_SendMessageTarget
{
add
{

HookHandler._afterget_SendMessageTarget += value;
HookHandler.Hookget_SendMessageTarget();
}
remove => HookHandler._afterget_SendMessageTarget -= value;
}
public static event Delegates.set_SendMessageTarget_AfterArgs set_SendMessageTarget
{
add
{

HookHandler._afterset_SendMessageTarget += value;
HookHandler.Hookset_SendMessageTarget();
}
remove => HookHandler._afterset_SendMessageTarget -= value;
}
public static event Delegates.get_IsFocus_AfterArgs get_IsFocus
{
add
{

HookHandler._afterget_IsFocus += value;
HookHandler.Hookget_IsFocus();
}
remove => HookHandler._afterget_IsFocus -= value;
}
public static event Delegates.get_Text_AfterArgs get_Text
{
add
{

HookHandler._afterget_Text += value;
HookHandler.Hookget_Text();
}
remove => HookHandler._afterget_Text -= value;
}
public static event Delegates.set_Text_AfterArgs set_Text
{
add
{

HookHandler._afterset_Text += value;
HookHandler.Hookset_Text();
}
remove => HookHandler._afterset_Text -= value;
}
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.OnDisable_AfterArgs OnDisable
{
add
{

HookHandler._afterOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._afterOnDisable -= value;
}
public static event Delegates.SetFocus_AfterArgs SetFocus
{
add
{

HookHandler._afterSetFocus += value;
HookHandler.HookSetFocus();
}
remove => HookHandler._afterSetFocus -= value;
}
public static event Delegates.SetFocus_bool_AfterArgs SetFocus_bool
{
add
{

HookHandler._afterSetFocus_bool += value;
HookHandler.HookSetFocus_bool();
}
remove => HookHandler._afterSetFocus_bool -= value;
}
public static event Delegates.FormatTextForDisplay_AfterArgs FormatTextForDisplay
{
add
{

HookHandler._afterFormatTextForDisplay += value;
HookHandler.HookFormatTextForDisplay();
}
remove => HookHandler._afterFormatTextForDisplay -= value;
}
public static event Delegates.ListenForKeyboardTextUpdate_AfterArgs ListenForKeyboardTextUpdate
{
add
{

HookHandler._afterListenForKeyboardTextUpdate += value;
HookHandler.HookListenForKeyboardTextUpdate();
}
remove => HookHandler._afterListenForKeyboardTextUpdate -= value;
}
public static event Delegates.InputSelected_AfterArgs InputSelected
{
add
{

HookHandler._afterInputSelected += value;
HookHandler.HookInputSelected();
}
remove => HookHandler._afterInputSelected -= value;
}
public static event Delegates.InputDeselected_AfterArgs InputDeselected
{
add
{

HookHandler._afterInputDeselected += value;
HookHandler.HookInputDeselected();
}
remove => HookHandler._afterInputDeselected -= value;
}
public static event Delegates.AnyPress_AfterArgs AnyPress
{
add
{

HookHandler._afterAnyPress += value;
HookHandler.HookAnyPress();
}
remove => HookHandler._afterAnyPress -= value;
}
public static event Delegates.SetState_AfterArgs SetState
{
add
{

HookHandler._afterSetState += value;
HookHandler.HookSetState();
}
remove => HookHandler._afterSetState -= value;
}
public static event Delegates.SetCursorPosition_AfterArgs SetCursorPosition
{
add
{

HookHandler._afterSetCursorPosition += value;
HookHandler.HookSetCursorPosition();
}
remove => HookHandler._afterSetCursorPosition -= value;
}
public static event Delegates.ShowDisplayText_AfterArgs ShowDisplayText
{
add
{

HookHandler._afterShowDisplayText += value;
HookHandler.HookShowDisplayText();
}
remove => HookHandler._afterShowDisplayText -= value;
}
public static event Delegates.HideDisplayText_AfterArgs HideDisplayText
{
add
{

HookHandler._afterHideDisplayText += value;
HookHandler.HookHideDisplayText();
}
remove => HookHandler._afterHideDisplayText -= value;
}
public static event Delegates.LayoutReshaped_AfterArgs LayoutReshaped
{
add
{

HookHandler._afterLayoutReshaped += value;
HookHandler.HookLayoutReshaped();
}
remove => HookHandler._afterLayoutReshaped -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_LayoutItem_WithArgs get_LayoutItem
{
add => HookEndpointManager.Add<Delegates.get_LayoutItem_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_LayoutItem", true), value);
remove => HookEndpointManager.Remove<Delegates.get_LayoutItem_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_LayoutItem", true), value);
}
public static event Delegates.set_LayoutItem_WithArgs set_LayoutItem
{
add => HookEndpointManager.Add<Delegates.set_LayoutItem_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "set_LayoutItem", true), value);
remove => HookEndpointManager.Remove<Delegates.set_LayoutItem_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "set_LayoutItem", true), value);
}
public static event Delegates.get_SendMessageTarget_WithArgs get_SendMessageTarget
{
add => HookEndpointManager.Add<Delegates.get_SendMessageTarget_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_SendMessageTarget", true), value);
remove => HookEndpointManager.Remove<Delegates.get_SendMessageTarget_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_SendMessageTarget", true), value);
}
public static event Delegates.set_SendMessageTarget_WithArgs set_SendMessageTarget
{
add => HookEndpointManager.Add<Delegates.set_SendMessageTarget_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "set_SendMessageTarget", true), value);
remove => HookEndpointManager.Remove<Delegates.set_SendMessageTarget_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "set_SendMessageTarget", true), value);
}
public static event Delegates.get_IsFocus_WithArgs get_IsFocus
{
add => HookEndpointManager.Add<Delegates.get_IsFocus_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_IsFocus", true), value);
remove => HookEndpointManager.Remove<Delegates.get_IsFocus_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_IsFocus", true), value);
}
public static event Delegates.get_Text_WithArgs get_Text
{
add => HookEndpointManager.Add<Delegates.get_Text_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_Text", true), value);
remove => HookEndpointManager.Remove<Delegates.get_Text_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_Text", true), value);
}
public static event Delegates.set_Text_WithArgs set_Text
{
add => HookEndpointManager.Add<Delegates.set_Text_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "set_Text", true), value);
remove => HookEndpointManager.Remove<Delegates.set_Text_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "set_Text", true), value);
}
public static event On.tk2dUITextInput.hook_Awake Awake
{
add => On.tk2dUITextInput.Awake += value;
remove => On.tk2dUITextInput.Awake -= value;
}
public static event On.tk2dUITextInput.hook_Start Start
{
add => On.tk2dUITextInput.Start += value;
remove => On.tk2dUITextInput.Start -= value;
}
public static event On.tk2dUITextInput.hook_OnEnable OnEnable
{
add => On.tk2dUITextInput.OnEnable += value;
remove => On.tk2dUITextInput.OnEnable -= value;
}
public static event On.tk2dUITextInput.hook_OnDisable OnDisable
{
add => On.tk2dUITextInput.OnDisable += value;
remove => On.tk2dUITextInput.OnDisable -= value;
}
public static event On.tk2dUITextInput.hook_SetFocus SetFocus
{
add => On.tk2dUITextInput.SetFocus += value;
remove => On.tk2dUITextInput.SetFocus -= value;
}
public static event On.tk2dUITextInput.hook_SetFocus_bool SetFocus_bool
{
add => On.tk2dUITextInput.SetFocus_bool += value;
remove => On.tk2dUITextInput.SetFocus_bool -= value;
}
public static event On.tk2dUITextInput.hook_FormatTextForDisplay FormatTextForDisplay
{
add => On.tk2dUITextInput.FormatTextForDisplay += value;
remove => On.tk2dUITextInput.FormatTextForDisplay -= value;
}
public static event On.tk2dUITextInput.hook_ListenForKeyboardTextUpdate ListenForKeyboardTextUpdate
{
add => On.tk2dUITextInput.ListenForKeyboardTextUpdate += value;
remove => On.tk2dUITextInput.ListenForKeyboardTextUpdate -= value;
}
public static event On.tk2dUITextInput.hook_InputSelected InputSelected
{
add => On.tk2dUITextInput.InputSelected += value;
remove => On.tk2dUITextInput.InputSelected -= value;
}
public static event On.tk2dUITextInput.hook_InputDeselected InputDeselected
{
add => On.tk2dUITextInput.InputDeselected += value;
remove => On.tk2dUITextInput.InputDeselected -= value;
}
public static event On.tk2dUITextInput.hook_AnyPress AnyPress
{
add => On.tk2dUITextInput.AnyPress += value;
remove => On.tk2dUITextInput.AnyPress -= value;
}
public static event On.tk2dUITextInput.hook_SetState SetState
{
add => On.tk2dUITextInput.SetState += value;
remove => On.tk2dUITextInput.SetState -= value;
}
public static event On.tk2dUITextInput.hook_SetCursorPosition SetCursorPosition
{
add => On.tk2dUITextInput.SetCursorPosition += value;
remove => On.tk2dUITextInput.SetCursorPosition -= value;
}
public static event On.tk2dUITextInput.hook_ShowDisplayText ShowDisplayText
{
add => On.tk2dUITextInput.ShowDisplayText += value;
remove => On.tk2dUITextInput.ShowDisplayText -= value;
}
public static event On.tk2dUITextInput.hook_HideDisplayText HideDisplayText
{
add => On.tk2dUITextInput.HideDisplayText += value;
remove => On.tk2dUITextInput.HideDisplayText -= value;
}
public static event On.tk2dUITextInput.hook_LayoutReshaped LayoutReshaped
{
add => On.tk2dUITextInput.LayoutReshaped += value;
remove => On.tk2dUITextInput.LayoutReshaped -= value;
}
}

}
