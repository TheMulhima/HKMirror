using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dUITextInput class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUITextInput
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_LayoutItem()
        {
            if (!HookedList.Contains("get_LayoutItem"))
            {
                HookedList.Add("get_LayoutItem");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_LayoutItem"), get_LayoutItem);
            }
        }

        internal static event Delegates.get_LayoutItem_BeforeArgs _beforeget_LayoutItem;
        internal static event Delegates.get_LayoutItem_NormalArgs _afterget_LayoutItem;

        private static tk2dUILayout get_LayoutItem(Func<tk2dUITextInput, tk2dUILayout> orig, tk2dUITextInput self)
        {
            Delegates.Params_get_LayoutItem @params = new()
            {
                self = self
            };
            _beforeget_LayoutItem?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LayoutItem != null) retVal = _afterget_LayoutItem.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_LayoutItem()
        {
            if (!HookedList.Contains("set_LayoutItem"))
            {
                HookedList.Add("set_LayoutItem");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "set_LayoutItem"), set_LayoutItem);
            }
        }

        internal static event Delegates.set_LayoutItem_BeforeArgs _beforeset_LayoutItem;
        internal static event Delegates.set_LayoutItem_NormalArgs _afterset_LayoutItem;

        private static void set_LayoutItem(Action<tk2dUITextInput, tk2dUILayout> orig, tk2dUITextInput self,
            tk2dUILayout value)
        {
            Delegates.Params_set_LayoutItem @params = new()
            {
                self = self, value = value
            };
            _beforeset_LayoutItem?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_LayoutItem != null) _afterset_LayoutItem.Invoke(@params);
        }

        internal static void Hookget_SendMessageTarget()
        {
            if (!HookedList.Contains("get_SendMessageTarget"))
            {
                HookedList.Add("get_SendMessageTarget");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_SendMessageTarget"),
                    get_SendMessageTarget);
            }
        }

        internal static event Delegates.get_SendMessageTarget_BeforeArgs _beforeget_SendMessageTarget;
        internal static event Delegates.get_SendMessageTarget_NormalArgs _afterget_SendMessageTarget;

        private static GameObject get_SendMessageTarget(Func<tk2dUITextInput, GameObject> orig, tk2dUITextInput self)
        {
            Delegates.Params_get_SendMessageTarget @params = new()
            {
                self = self
            };
            _beforeget_SendMessageTarget?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SendMessageTarget != null) retVal = _afterget_SendMessageTarget.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_SendMessageTarget()
        {
            if (!HookedList.Contains("set_SendMessageTarget"))
            {
                HookedList.Add("set_SendMessageTarget");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "set_SendMessageTarget"),
                    set_SendMessageTarget);
            }
        }

        internal static event Delegates.set_SendMessageTarget_BeforeArgs _beforeset_SendMessageTarget;
        internal static event Delegates.set_SendMessageTarget_NormalArgs _afterset_SendMessageTarget;

        private static void set_SendMessageTarget(Action<tk2dUITextInput, GameObject> orig, tk2dUITextInput self,
            GameObject value)
        {
            Delegates.Params_set_SendMessageTarget @params = new()
            {
                self = self, value = value
            };
            _beforeset_SendMessageTarget?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_SendMessageTarget != null) _afterset_SendMessageTarget.Invoke(@params);
        }

        internal static void Hookget_IsFocus()
        {
            if (!HookedList.Contains("get_IsFocus"))
            {
                HookedList.Add("get_IsFocus");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_IsFocus"), get_IsFocus);
            }
        }

        internal static event Delegates.get_IsFocus_BeforeArgs _beforeget_IsFocus;
        internal static event Delegates.get_IsFocus_NormalArgs _afterget_IsFocus;

        private static bool get_IsFocus(Func<tk2dUITextInput, bool> orig, tk2dUITextInput self)
        {
            Delegates.Params_get_IsFocus @params = new()
            {
                self = self
            };
            _beforeget_IsFocus?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsFocus != null) retVal = _afterget_IsFocus.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_Text()
        {
            if (!HookedList.Contains("get_Text"))
            {
                HookedList.Add("get_Text");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_Text"), get_Text);
            }
        }

        internal static event Delegates.get_Text_BeforeArgs _beforeget_Text;
        internal static event Delegates.get_Text_NormalArgs _afterget_Text;

        private static string get_Text(Func<tk2dUITextInput, string> orig, tk2dUITextInput self)
        {
            Delegates.Params_get_Text @params = new()
            {
                self = self
            };
            _beforeget_Text?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Text != null) retVal = _afterget_Text.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Text()
        {
            if (!HookedList.Contains("set_Text"))
            {
                HookedList.Add("set_Text");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "set_Text"), set_Text);
            }
        }

        internal static event Delegates.set_Text_BeforeArgs _beforeset_Text;
        internal static event Delegates.set_Text_NormalArgs _afterset_Text;

        private static void set_Text(Action<tk2dUITextInput, string> orig, tk2dUITextInput self, string value)
        {
            Delegates.Params_set_Text @params = new()
            {
                self = self, value = value
            };
            _beforeset_Text?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Text != null) _afterset_Text.Invoke(@params);
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.tk2dUITextInput.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.tk2dUITextInput.orig_Awake orig, tk2dUITextInput self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.tk2dUITextInput.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.tk2dUITextInput.orig_Start orig, tk2dUITextInput self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.tk2dUITextInput.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.tk2dUITextInput.orig_OnEnable orig, tk2dUITextInput self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.tk2dUITextInput.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.tk2dUITextInput.orig_OnDisable orig, tk2dUITextInput self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookSetFocus()
        {
            if (!HookedList.Contains("SetFocus"))
            {
                HookedList.Add("SetFocus");
                On.tk2dUITextInput.SetFocus += SetFocus;
            }
        }

        internal static event Delegates.SetFocus_BeforeArgs _beforeSetFocus;
        internal static event Delegates.SetFocus_NormalArgs _afterSetFocus;

        private static void SetFocus(On.tk2dUITextInput.orig_SetFocus orig, tk2dUITextInput self)
        {
            Delegates.Params_SetFocus @params = new()
            {
                self = self
            };
            _beforeSetFocus?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetFocus != null) _afterSetFocus.Invoke(@params);
        }

        internal static void HookSetFocus_bool()
        {
            if (!HookedList.Contains("SetFocus_bool"))
            {
                HookedList.Add("SetFocus_bool");
                On.tk2dUITextInput.SetFocus_bool += SetFocus_bool;
            }
        }

        internal static event Delegates.SetFocus_bool_BeforeArgs _beforeSetFocus_bool;
        internal static event Delegates.SetFocus_bool_NormalArgs _afterSetFocus_bool;

        private static void SetFocus_bool(On.tk2dUITextInput.orig_SetFocus_bool orig, tk2dUITextInput self, bool focus)
        {
            Delegates.Params_SetFocus_bool @params = new()
            {
                self = self, focus = focus
            };
            _beforeSetFocus_bool?.Invoke(@params);
            self = @params.self;
            focus = @params.focus;
            orig(self, focus);
            if (_afterSetFocus_bool != null) _afterSetFocus_bool.Invoke(@params);
        }

        internal static void HookFormatTextForDisplay()
        {
            if (!HookedList.Contains("FormatTextForDisplay"))
            {
                HookedList.Add("FormatTextForDisplay");
                On.tk2dUITextInput.FormatTextForDisplay += FormatTextForDisplay;
            }
        }

        internal static event Delegates.FormatTextForDisplay_BeforeArgs _beforeFormatTextForDisplay;
        internal static event Delegates.FormatTextForDisplay_NormalArgs _afterFormatTextForDisplay;

        private static void FormatTextForDisplay(On.tk2dUITextInput.orig_FormatTextForDisplay orig,
            tk2dUITextInput self, string modifiedText)
        {
            Delegates.Params_FormatTextForDisplay @params = new()
            {
                self = self, modifiedText = modifiedText
            };
            _beforeFormatTextForDisplay?.Invoke(@params);
            self = @params.self;
            modifiedText = @params.modifiedText;
            orig(self, modifiedText);
            if (_afterFormatTextForDisplay != null) _afterFormatTextForDisplay.Invoke(@params);
        }

        internal static void HookListenForKeyboardTextUpdate()
        {
            if (!HookedList.Contains("ListenForKeyboardTextUpdate"))
            {
                HookedList.Add("ListenForKeyboardTextUpdate");
                On.tk2dUITextInput.ListenForKeyboardTextUpdate += ListenForKeyboardTextUpdate;
            }
        }

        internal static event Delegates.ListenForKeyboardTextUpdate_BeforeArgs _beforeListenForKeyboardTextUpdate;
        internal static event Delegates.ListenForKeyboardTextUpdate_NormalArgs _afterListenForKeyboardTextUpdate;

        private static void ListenForKeyboardTextUpdate(On.tk2dUITextInput.orig_ListenForKeyboardTextUpdate orig,
            tk2dUITextInput self)
        {
            Delegates.Params_ListenForKeyboardTextUpdate @params = new()
            {
                self = self
            };
            _beforeListenForKeyboardTextUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterListenForKeyboardTextUpdate != null) _afterListenForKeyboardTextUpdate.Invoke(@params);
        }

        internal static void HookInputSelected()
        {
            if (!HookedList.Contains("InputSelected"))
            {
                HookedList.Add("InputSelected");
                On.tk2dUITextInput.InputSelected += InputSelected;
            }
        }

        internal static event Delegates.InputSelected_BeforeArgs _beforeInputSelected;
        internal static event Delegates.InputSelected_NormalArgs _afterInputSelected;

        private static void InputSelected(On.tk2dUITextInput.orig_InputSelected orig, tk2dUITextInput self)
        {
            Delegates.Params_InputSelected @params = new()
            {
                self = self
            };
            _beforeInputSelected?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterInputSelected != null) _afterInputSelected.Invoke(@params);
        }

        internal static void HookInputDeselected()
        {
            if (!HookedList.Contains("InputDeselected"))
            {
                HookedList.Add("InputDeselected");
                On.tk2dUITextInput.InputDeselected += InputDeselected;
            }
        }

        internal static event Delegates.InputDeselected_BeforeArgs _beforeInputDeselected;
        internal static event Delegates.InputDeselected_NormalArgs _afterInputDeselected;

        private static void InputDeselected(On.tk2dUITextInput.orig_InputDeselected orig, tk2dUITextInput self)
        {
            Delegates.Params_InputDeselected @params = new()
            {
                self = self
            };
            _beforeInputDeselected?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterInputDeselected != null) _afterInputDeselected.Invoke(@params);
        }

        internal static void HookAnyPress()
        {
            if (!HookedList.Contains("AnyPress"))
            {
                HookedList.Add("AnyPress");
                On.tk2dUITextInput.AnyPress += AnyPress;
            }
        }

        internal static event Delegates.AnyPress_BeforeArgs _beforeAnyPress;
        internal static event Delegates.AnyPress_NormalArgs _afterAnyPress;

        private static void AnyPress(On.tk2dUITextInput.orig_AnyPress orig, tk2dUITextInput self)
        {
            Delegates.Params_AnyPress @params = new()
            {
                self = self
            };
            _beforeAnyPress?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAnyPress != null) _afterAnyPress.Invoke(@params);
        }

        internal static void HookSetState()
        {
            if (!HookedList.Contains("SetState"))
            {
                HookedList.Add("SetState");
                On.tk2dUITextInput.SetState += SetState;
            }
        }

        internal static event Delegates.SetState_BeforeArgs _beforeSetState;
        internal static event Delegates.SetState_NormalArgs _afterSetState;

        private static void SetState(On.tk2dUITextInput.orig_SetState orig, tk2dUITextInput self)
        {
            Delegates.Params_SetState @params = new()
            {
                self = self
            };
            _beforeSetState?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetState != null) _afterSetState.Invoke(@params);
        }

        internal static void HookSetCursorPosition()
        {
            if (!HookedList.Contains("SetCursorPosition"))
            {
                HookedList.Add("SetCursorPosition");
                On.tk2dUITextInput.SetCursorPosition += SetCursorPosition;
            }
        }

        internal static event Delegates.SetCursorPosition_BeforeArgs _beforeSetCursorPosition;
        internal static event Delegates.SetCursorPosition_NormalArgs _afterSetCursorPosition;

        private static void SetCursorPosition(On.tk2dUITextInput.orig_SetCursorPosition orig, tk2dUITextInput self)
        {
            Delegates.Params_SetCursorPosition @params = new()
            {
                self = self
            };
            _beforeSetCursorPosition?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetCursorPosition != null) _afterSetCursorPosition.Invoke(@params);
        }

        internal static void HookShowDisplayText()
        {
            if (!HookedList.Contains("ShowDisplayText"))
            {
                HookedList.Add("ShowDisplayText");
                On.tk2dUITextInput.ShowDisplayText += ShowDisplayText;
            }
        }

        internal static event Delegates.ShowDisplayText_BeforeArgs _beforeShowDisplayText;
        internal static event Delegates.ShowDisplayText_NormalArgs _afterShowDisplayText;

        private static void ShowDisplayText(On.tk2dUITextInput.orig_ShowDisplayText orig, tk2dUITextInput self)
        {
            Delegates.Params_ShowDisplayText @params = new()
            {
                self = self
            };
            _beforeShowDisplayText?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterShowDisplayText != null) _afterShowDisplayText.Invoke(@params);
        }

        internal static void HookHideDisplayText()
        {
            if (!HookedList.Contains("HideDisplayText"))
            {
                HookedList.Add("HideDisplayText");
                On.tk2dUITextInput.HideDisplayText += HideDisplayText;
            }
        }

        internal static event Delegates.HideDisplayText_BeforeArgs _beforeHideDisplayText;
        internal static event Delegates.HideDisplayText_NormalArgs _afterHideDisplayText;

        private static void HideDisplayText(On.tk2dUITextInput.orig_HideDisplayText orig, tk2dUITextInput self)
        {
            Delegates.Params_HideDisplayText @params = new()
            {
                self = self
            };
            _beforeHideDisplayText?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterHideDisplayText != null) _afterHideDisplayText.Invoke(@params);
        }

        internal static void HookLayoutReshaped()
        {
            if (!HookedList.Contains("LayoutReshaped"))
            {
                HookedList.Add("LayoutReshaped");
                On.tk2dUITextInput.LayoutReshaped += LayoutReshaped;
            }
        }

        internal static event Delegates.LayoutReshaped_BeforeArgs _beforeLayoutReshaped;
        internal static event Delegates.LayoutReshaped_NormalArgs _afterLayoutReshaped;

        private static void LayoutReshaped(On.tk2dUITextInput.orig_LayoutReshaped orig, tk2dUITextInput self,
            Vector3 dMin, Vector3 dMax)
        {
            Delegates.Params_LayoutReshaped @params = new()
            {
                self = self, dMin = dMin, dMax = dMax
            };
            _beforeLayoutReshaped?.Invoke(@params);
            self = @params.self;
            dMin = @params.dMin;
            dMax = @params.dMax;
            orig(self, dMin, dMax);
            if (_afterLayoutReshaped != null) _afterLayoutReshaped.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AnyPress_BeforeArgs(Params_AnyPress args);

        public delegate void AnyPress_NormalArgs(Params_AnyPress args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void FormatTextForDisplay_BeforeArgs(Params_FormatTextForDisplay args);

        public delegate void FormatTextForDisplay_NormalArgs(Params_FormatTextForDisplay args);

        public delegate void get_IsFocus_BeforeArgs(Params_get_IsFocus args);

        public delegate bool get_IsFocus_NormalArgs(Params_get_IsFocus args);

        public delegate void get_LayoutItem_BeforeArgs(Params_get_LayoutItem args);

        public delegate tk2dUILayout get_LayoutItem_NormalArgs(Params_get_LayoutItem args);

        public delegate void get_SendMessageTarget_BeforeArgs(Params_get_SendMessageTarget args);

        public delegate GameObject get_SendMessageTarget_NormalArgs(Params_get_SendMessageTarget args);

        public delegate void get_Text_BeforeArgs(Params_get_Text args);

        public delegate string get_Text_NormalArgs(Params_get_Text args);

        public delegate void HideDisplayText_BeforeArgs(Params_HideDisplayText args);

        public delegate void HideDisplayText_NormalArgs(Params_HideDisplayText args);

        public delegate void InputDeselected_BeforeArgs(Params_InputDeselected args);

        public delegate void InputDeselected_NormalArgs(Params_InputDeselected args);

        public delegate void InputSelected_BeforeArgs(Params_InputSelected args);

        public delegate void InputSelected_NormalArgs(Params_InputSelected args);

        public delegate void LayoutReshaped_BeforeArgs(Params_LayoutReshaped args);

        public delegate void LayoutReshaped_NormalArgs(Params_LayoutReshaped args);

        public delegate void ListenForKeyboardTextUpdate_BeforeArgs(Params_ListenForKeyboardTextUpdate args);

        public delegate void ListenForKeyboardTextUpdate_NormalArgs(Params_ListenForKeyboardTextUpdate args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void set_LayoutItem_BeforeArgs(Params_set_LayoutItem args);

        public delegate void set_LayoutItem_NormalArgs(Params_set_LayoutItem args);

        public delegate void set_SendMessageTarget_BeforeArgs(Params_set_SendMessageTarget args);

        public delegate void set_SendMessageTarget_NormalArgs(Params_set_SendMessageTarget args);

        public delegate void set_Text_BeforeArgs(Params_set_Text args);

        public delegate void set_Text_NormalArgs(Params_set_Text args);

        public delegate void SetCursorPosition_BeforeArgs(Params_SetCursorPosition args);

        public delegate void SetCursorPosition_NormalArgs(Params_SetCursorPosition args);

        public delegate void SetFocus_BeforeArgs(Params_SetFocus args);

        public delegate void SetFocus_bool_BeforeArgs(Params_SetFocus_bool args);

        public delegate void SetFocus_bool_NormalArgs(Params_SetFocus_bool args);

        public delegate void SetFocus_NormalArgs(Params_SetFocus args);

        public delegate void SetState_BeforeArgs(Params_SetState args);

        public delegate void SetState_NormalArgs(Params_SetState args);

        public delegate void ShowDisplayText_BeforeArgs(Params_ShowDisplayText args);

        public delegate void ShowDisplayText_NormalArgs(Params_ShowDisplayText args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_get_LayoutItem
        {
            public tk2dUITextInput self;
        }

        public sealed class Params_set_LayoutItem
        {
            public tk2dUITextInput self;
            public tk2dUILayout value;
        }

        public sealed class Params_get_SendMessageTarget
        {
            public tk2dUITextInput self;
        }

        public sealed class Params_set_SendMessageTarget
        {
            public tk2dUITextInput self;
            public GameObject value;
        }

        public sealed class Params_get_IsFocus
        {
            public tk2dUITextInput self;
        }

        public sealed class Params_get_Text
        {
            public tk2dUITextInput self;
        }

        public sealed class Params_set_Text
        {
            public tk2dUITextInput self;
            public string value;
        }

        public sealed class Params_Awake
        {
            public tk2dUITextInput self;
        }

        public sealed class Params_Start
        {
            public tk2dUITextInput self;
        }

        public sealed class Params_OnEnable
        {
            public tk2dUITextInput self;
        }

        public sealed class Params_OnDisable
        {
            public tk2dUITextInput self;
        }

        public sealed class Params_SetFocus
        {
            public tk2dUITextInput self;
        }

        public sealed class Params_SetFocus_bool
        {
            public bool focus;
            public tk2dUITextInput self;
        }

        public sealed class Params_FormatTextForDisplay
        {
            public string modifiedText;
            public tk2dUITextInput self;
        }

        public sealed class Params_ListenForKeyboardTextUpdate
        {
            public tk2dUITextInput self;
        }

        public sealed class Params_InputSelected
        {
            public tk2dUITextInput self;
        }

        public sealed class Params_InputDeselected
        {
            public tk2dUITextInput self;
        }

        public sealed class Params_AnyPress
        {
            public tk2dUITextInput self;
        }

        public sealed class Params_SetState
        {
            public tk2dUITextInput self;
        }

        public sealed class Params_SetCursorPosition
        {
            public tk2dUITextInput self;
        }

        public sealed class Params_ShowDisplayText
        {
            public tk2dUITextInput self;
        }

        public sealed class Params_HideDisplayText
        {
            public tk2dUITextInput self;
        }

        public sealed class Params_LayoutReshaped
        {
            public Vector3 dMax;
            public Vector3 dMin;
            public tk2dUITextInput self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_LayoutItem_BeforeArgs get_LayoutItem
        {
            add
            {
                HookHandler._beforeget_LayoutItem += value;
                HookHandler.Hookget_LayoutItem();
            }
            remove => HookHandler._beforeget_LayoutItem -= value;
        }

        public static event Delegates.set_LayoutItem_BeforeArgs set_LayoutItem
        {
            add
            {
                HookHandler._beforeset_LayoutItem += value;
                HookHandler.Hookset_LayoutItem();
            }
            remove => HookHandler._beforeset_LayoutItem -= value;
        }

        public static event Delegates.get_SendMessageTarget_BeforeArgs get_SendMessageTarget
        {
            add
            {
                HookHandler._beforeget_SendMessageTarget += value;
                HookHandler.Hookget_SendMessageTarget();
            }
            remove => HookHandler._beforeget_SendMessageTarget -= value;
        }

        public static event Delegates.set_SendMessageTarget_BeforeArgs set_SendMessageTarget
        {
            add
            {
                HookHandler._beforeset_SendMessageTarget += value;
                HookHandler.Hookset_SendMessageTarget();
            }
            remove => HookHandler._beforeset_SendMessageTarget -= value;
        }

        public static event Delegates.get_IsFocus_BeforeArgs get_IsFocus
        {
            add
            {
                HookHandler._beforeget_IsFocus += value;
                HookHandler.Hookget_IsFocus();
            }
            remove => HookHandler._beforeget_IsFocus -= value;
        }

        public static event Delegates.get_Text_BeforeArgs get_Text
        {
            add
            {
                HookHandler._beforeget_Text += value;
                HookHandler.Hookget_Text();
            }
            remove => HookHandler._beforeget_Text -= value;
        }

        public static event Delegates.set_Text_BeforeArgs set_Text
        {
            add
            {
                HookHandler._beforeset_Text += value;
                HookHandler.Hookset_Text();
            }
            remove => HookHandler._beforeset_Text -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.SetFocus_BeforeArgs SetFocus
        {
            add
            {
                HookHandler._beforeSetFocus += value;
                HookHandler.HookSetFocus();
            }
            remove => HookHandler._beforeSetFocus -= value;
        }

        public static event Delegates.SetFocus_bool_BeforeArgs SetFocus_bool
        {
            add
            {
                HookHandler._beforeSetFocus_bool += value;
                HookHandler.HookSetFocus_bool();
            }
            remove => HookHandler._beforeSetFocus_bool -= value;
        }

        public static event Delegates.FormatTextForDisplay_BeforeArgs FormatTextForDisplay
        {
            add
            {
                HookHandler._beforeFormatTextForDisplay += value;
                HookHandler.HookFormatTextForDisplay();
            }
            remove => HookHandler._beforeFormatTextForDisplay -= value;
        }

        public static event Delegates.ListenForKeyboardTextUpdate_BeforeArgs ListenForKeyboardTextUpdate
        {
            add
            {
                HookHandler._beforeListenForKeyboardTextUpdate += value;
                HookHandler.HookListenForKeyboardTextUpdate();
            }
            remove => HookHandler._beforeListenForKeyboardTextUpdate -= value;
        }

        public static event Delegates.InputSelected_BeforeArgs InputSelected
        {
            add
            {
                HookHandler._beforeInputSelected += value;
                HookHandler.HookInputSelected();
            }
            remove => HookHandler._beforeInputSelected -= value;
        }

        public static event Delegates.InputDeselected_BeforeArgs InputDeselected
        {
            add
            {
                HookHandler._beforeInputDeselected += value;
                HookHandler.HookInputDeselected();
            }
            remove => HookHandler._beforeInputDeselected -= value;
        }

        public static event Delegates.AnyPress_BeforeArgs AnyPress
        {
            add
            {
                HookHandler._beforeAnyPress += value;
                HookHandler.HookAnyPress();
            }
            remove => HookHandler._beforeAnyPress -= value;
        }

        public static event Delegates.SetState_BeforeArgs SetState
        {
            add
            {
                HookHandler._beforeSetState += value;
                HookHandler.HookSetState();
            }
            remove => HookHandler._beforeSetState -= value;
        }

        public static event Delegates.SetCursorPosition_BeforeArgs SetCursorPosition
        {
            add
            {
                HookHandler._beforeSetCursorPosition += value;
                HookHandler.HookSetCursorPosition();
            }
            remove => HookHandler._beforeSetCursorPosition -= value;
        }

        public static event Delegates.ShowDisplayText_BeforeArgs ShowDisplayText
        {
            add
            {
                HookHandler._beforeShowDisplayText += value;
                HookHandler.HookShowDisplayText();
            }
            remove => HookHandler._beforeShowDisplayText -= value;
        }

        public static event Delegates.HideDisplayText_BeforeArgs HideDisplayText
        {
            add
            {
                HookHandler._beforeHideDisplayText += value;
                HookHandler.HookHideDisplayText();
            }
            remove => HookHandler._beforeHideDisplayText -= value;
        }

        public static event Delegates.LayoutReshaped_BeforeArgs LayoutReshaped
        {
            add
            {
                HookHandler._beforeLayoutReshaped += value;
                HookHandler.HookLayoutReshaped();
            }
            remove => HookHandler._beforeLayoutReshaped -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_LayoutItem_NormalArgs get_LayoutItem
        {
            add
            {
                HookHandler._afterget_LayoutItem += value;
                HookHandler.Hookget_LayoutItem();
            }
            remove => HookHandler._afterget_LayoutItem -= value;
        }

        public static event Delegates.set_LayoutItem_NormalArgs set_LayoutItem
        {
            add
            {
                HookHandler._afterset_LayoutItem += value;
                HookHandler.Hookset_LayoutItem();
            }
            remove => HookHandler._afterset_LayoutItem -= value;
        }

        public static event Delegates.get_SendMessageTarget_NormalArgs get_SendMessageTarget
        {
            add
            {
                HookHandler._afterget_SendMessageTarget += value;
                HookHandler.Hookget_SendMessageTarget();
            }
            remove => HookHandler._afterget_SendMessageTarget -= value;
        }

        public static event Delegates.set_SendMessageTarget_NormalArgs set_SendMessageTarget
        {
            add
            {
                HookHandler._afterset_SendMessageTarget += value;
                HookHandler.Hookset_SendMessageTarget();
            }
            remove => HookHandler._afterset_SendMessageTarget -= value;
        }

        public static event Delegates.get_IsFocus_NormalArgs get_IsFocus
        {
            add
            {
                HookHandler._afterget_IsFocus += value;
                HookHandler.Hookget_IsFocus();
            }
            remove => HookHandler._afterget_IsFocus -= value;
        }

        public static event Delegates.get_Text_NormalArgs get_Text
        {
            add
            {
                HookHandler._afterget_Text += value;
                HookHandler.Hookget_Text();
            }
            remove => HookHandler._afterget_Text -= value;
        }

        public static event Delegates.set_Text_NormalArgs set_Text
        {
            add
            {
                HookHandler._afterset_Text += value;
                HookHandler.Hookset_Text();
            }
            remove => HookHandler._afterset_Text -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.SetFocus_NormalArgs SetFocus
        {
            add
            {
                HookHandler._afterSetFocus += value;
                HookHandler.HookSetFocus();
            }
            remove => HookHandler._afterSetFocus -= value;
        }

        public static event Delegates.SetFocus_bool_NormalArgs SetFocus_bool
        {
            add
            {
                HookHandler._afterSetFocus_bool += value;
                HookHandler.HookSetFocus_bool();
            }
            remove => HookHandler._afterSetFocus_bool -= value;
        }

        public static event Delegates.FormatTextForDisplay_NormalArgs FormatTextForDisplay
        {
            add
            {
                HookHandler._afterFormatTextForDisplay += value;
                HookHandler.HookFormatTextForDisplay();
            }
            remove => HookHandler._afterFormatTextForDisplay -= value;
        }

        public static event Delegates.ListenForKeyboardTextUpdate_NormalArgs ListenForKeyboardTextUpdate
        {
            add
            {
                HookHandler._afterListenForKeyboardTextUpdate += value;
                HookHandler.HookListenForKeyboardTextUpdate();
            }
            remove => HookHandler._afterListenForKeyboardTextUpdate -= value;
        }

        public static event Delegates.InputSelected_NormalArgs InputSelected
        {
            add
            {
                HookHandler._afterInputSelected += value;
                HookHandler.HookInputSelected();
            }
            remove => HookHandler._afterInputSelected -= value;
        }

        public static event Delegates.InputDeselected_NormalArgs InputDeselected
        {
            add
            {
                HookHandler._afterInputDeselected += value;
                HookHandler.HookInputDeselected();
            }
            remove => HookHandler._afterInputDeselected -= value;
        }

        public static event Delegates.AnyPress_NormalArgs AnyPress
        {
            add
            {
                HookHandler._afterAnyPress += value;
                HookHandler.HookAnyPress();
            }
            remove => HookHandler._afterAnyPress -= value;
        }

        public static event Delegates.SetState_NormalArgs SetState
        {
            add
            {
                HookHandler._afterSetState += value;
                HookHandler.HookSetState();
            }
            remove => HookHandler._afterSetState -= value;
        }

        public static event Delegates.SetCursorPosition_NormalArgs SetCursorPosition
        {
            add
            {
                HookHandler._afterSetCursorPosition += value;
                HookHandler.HookSetCursorPosition();
            }
            remove => HookHandler._afterSetCursorPosition -= value;
        }

        public static event Delegates.ShowDisplayText_NormalArgs ShowDisplayText
        {
            add
            {
                HookHandler._afterShowDisplayText += value;
                HookHandler.HookShowDisplayText();
            }
            remove => HookHandler._afterShowDisplayText -= value;
        }

        public static event Delegates.HideDisplayText_NormalArgs HideDisplayText
        {
            add
            {
                HookHandler._afterHideDisplayText += value;
                HookHandler.HookHideDisplayText();
            }
            remove => HookHandler._afterHideDisplayText -= value;
        }

        public static event Delegates.LayoutReshaped_NormalArgs LayoutReshaped
        {
            add
            {
                HookHandler._afterLayoutReshaped += value;
                HookHandler.HookLayoutReshaped();
            }
            remove => HookHandler._afterLayoutReshaped -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_LayoutItem_NormalArgs get_LayoutItem
        {
            add => HookEndpointManager.Add<Delegates.get_LayoutItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_LayoutItem"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LayoutItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_LayoutItem"), value);
        }

        public static event Delegates.set_LayoutItem_NormalArgs set_LayoutItem
        {
            add => HookEndpointManager.Add<Delegates.set_LayoutItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "set_LayoutItem"), value);
            remove => HookEndpointManager.Remove<Delegates.set_LayoutItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "set_LayoutItem"), value);
        }

        public static event Delegates.get_SendMessageTarget_NormalArgs get_SendMessageTarget
        {
            add => HookEndpointManager.Add<Delegates.get_SendMessageTarget_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_SendMessageTarget"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SendMessageTarget_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_SendMessageTarget"), value);
        }

        public static event Delegates.set_SendMessageTarget_NormalArgs set_SendMessageTarget
        {
            add => HookEndpointManager.Add<Delegates.set_SendMessageTarget_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "set_SendMessageTarget"), value);
            remove => HookEndpointManager.Remove<Delegates.set_SendMessageTarget_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "set_SendMessageTarget"), value);
        }

        public static event Delegates.get_IsFocus_NormalArgs get_IsFocus
        {
            add => HookEndpointManager.Add<Delegates.get_IsFocus_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_IsFocus"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsFocus_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_IsFocus"), value);
        }

        public static event Delegates.get_Text_NormalArgs get_Text
        {
            add => HookEndpointManager.Add<Delegates.get_Text_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_Text"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Text_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "get_Text"), value);
        }

        public static event Delegates.set_Text_NormalArgs set_Text
        {
            add => HookEndpointManager.Add<Delegates.set_Text_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "set_Text"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Text_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUITextInput), "set_Text"), value);
        }

        public static event On.tk2dUITextInput.hook_Awake Awake
        {
            add => On.tk2dUITextInput.Awake += value;
            remove => On.tk2dUITextInput.Awake -= value;
        }

        public static event On.tk2dUITextInput.hook_Start Start
        {
            add => On.tk2dUITextInput.Start += value;
            remove => On.tk2dUITextInput.Start -= value;
        }

        public static event On.tk2dUITextInput.hook_OnEnable OnEnable
        {
            add => On.tk2dUITextInput.OnEnable += value;
            remove => On.tk2dUITextInput.OnEnable -= value;
        }

        public static event On.tk2dUITextInput.hook_OnDisable OnDisable
        {
            add => On.tk2dUITextInput.OnDisable += value;
            remove => On.tk2dUITextInput.OnDisable -= value;
        }

        public static event On.tk2dUITextInput.hook_SetFocus SetFocus
        {
            add => On.tk2dUITextInput.SetFocus += value;
            remove => On.tk2dUITextInput.SetFocus -= value;
        }

        public static event On.tk2dUITextInput.hook_SetFocus_bool SetFocus_bool
        {
            add => On.tk2dUITextInput.SetFocus_bool += value;
            remove => On.tk2dUITextInput.SetFocus_bool -= value;
        }

        public static event On.tk2dUITextInput.hook_FormatTextForDisplay FormatTextForDisplay
        {
            add => On.tk2dUITextInput.FormatTextForDisplay += value;
            remove => On.tk2dUITextInput.FormatTextForDisplay -= value;
        }

        public static event On.tk2dUITextInput.hook_ListenForKeyboardTextUpdate ListenForKeyboardTextUpdate
        {
            add => On.tk2dUITextInput.ListenForKeyboardTextUpdate += value;
            remove => On.tk2dUITextInput.ListenForKeyboardTextUpdate -= value;
        }

        public static event On.tk2dUITextInput.hook_InputSelected InputSelected
        {
            add => On.tk2dUITextInput.InputSelected += value;
            remove => On.tk2dUITextInput.InputSelected -= value;
        }

        public static event On.tk2dUITextInput.hook_InputDeselected InputDeselected
        {
            add => On.tk2dUITextInput.InputDeselected += value;
            remove => On.tk2dUITextInput.InputDeselected -= value;
        }

        public static event On.tk2dUITextInput.hook_AnyPress AnyPress
        {
            add => On.tk2dUITextInput.AnyPress += value;
            remove => On.tk2dUITextInput.AnyPress -= value;
        }

        public static event On.tk2dUITextInput.hook_SetState SetState
        {
            add => On.tk2dUITextInput.SetState += value;
            remove => On.tk2dUITextInput.SetState -= value;
        }

        public static event On.tk2dUITextInput.hook_SetCursorPosition SetCursorPosition
        {
            add => On.tk2dUITextInput.SetCursorPosition += value;
            remove => On.tk2dUITextInput.SetCursorPosition -= value;
        }

        public static event On.tk2dUITextInput.hook_ShowDisplayText ShowDisplayText
        {
            add => On.tk2dUITextInput.ShowDisplayText += value;
            remove => On.tk2dUITextInput.ShowDisplayText -= value;
        }

        public static event On.tk2dUITextInput.hook_HideDisplayText HideDisplayText
        {
            add => On.tk2dUITextInput.HideDisplayText += value;
            remove => On.tk2dUITextInput.HideDisplayText -= value;
        }

        public static event On.tk2dUITextInput.hook_LayoutReshaped LayoutReshaped
        {
            add => On.tk2dUITextInput.LayoutReshaped += value;
            remove => On.tk2dUITextInput.LayoutReshaped -= value;
        }
    }
}