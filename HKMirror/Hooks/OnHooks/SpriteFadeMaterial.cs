using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for SpriteFadeMaterial class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSpriteFadeMaterial
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.SpriteFadeMaterial.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.SpriteFadeMaterial.orig_Awake orig,SpriteFadeMaterial self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.SpriteFadeMaterial.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.SpriteFadeMaterial.orig_Start orig,SpriteFadeMaterial self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookFadeBack()
{
if (!HookedList.Contains("FadeBack"))
{
HookedList.Add("FadeBack");
On.SpriteFadeMaterial.FadeBack += FadeBack;

}
}
internal static event Delegates.FadeBack_BeforeArgs _beforeFadeBack;
internal static event Delegates.FadeBack_AfterArgs _afterFadeBack;
private static void FadeBack(On.SpriteFadeMaterial.orig_FadeBack orig,SpriteFadeMaterial self)
{
Delegates.Params_FadeBack @params = new() 
{
self = self
};
if (_beforeFadeBack != null)
{
foreach (Delegates.FadeBack_BeforeArgs toInvoke in _beforeFadeBack.GetInvocationList())
{
try
{
_beforeFadeBack?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterFadeBack != null)
{
foreach (Delegates.FadeBack_AfterArgs toInvoke in _afterFadeBack.GetInvocationList())
{
try
{
_afterFadeBack.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookFadeBackRoutine()
{
if (!HookedList.Contains("FadeBackRoutine"))
{
HookedList.Add("FadeBackRoutine");
On.SpriteFadeMaterial.FadeBackRoutine += FadeBackRoutine;

}
}
internal static event Delegates.FadeBackRoutine_BeforeArgs _beforeFadeBackRoutine;
private static System.Collections.IEnumerator FadeBackRoutine(On.SpriteFadeMaterial.orig_FadeBackRoutine orig,SpriteFadeMaterial self)
{
Delegates.Params_FadeBackRoutine @params = new() 
{
self = self
};
if (_beforeFadeBackRoutine != null)
{
foreach (Delegates.FadeBackRoutine_BeforeArgs toInvoke in _beforeFadeBackRoutine.GetInvocationList())
{
try
{
_beforeFadeBackRoutine?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Awake
{
public SpriteFadeMaterial self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<SpriteFadeMaterial> orig, SpriteFadeMaterial self);
public sealed class Params_Start
{
public SpriteFadeMaterial self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<SpriteFadeMaterial> orig, SpriteFadeMaterial self);
public sealed class Params_FadeBack
{
public SpriteFadeMaterial self;
}
public delegate void FadeBack_BeforeArgs(Params_FadeBack args);
public delegate void FadeBack_AfterArgs(Params_FadeBack args);
public delegate void FadeBack_WithArgs (Action<SpriteFadeMaterial> orig, SpriteFadeMaterial self);
public sealed class Params_FadeBackRoutine
{
public SpriteFadeMaterial self;
}
public delegate void FadeBackRoutine_BeforeArgs(Params_FadeBackRoutine args);
public delegate System.Collections.IEnumerator FadeBackRoutine_AfterArgs(Params_FadeBackRoutine args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator FadeBackRoutine_WithArgs (Func<SpriteFadeMaterial, System.Collections.IEnumerator> orig, SpriteFadeMaterial self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.FadeBack_BeforeArgs FadeBack
{
add
{

HookHandler._beforeFadeBack += value;
HookHandler.HookFadeBack();
}
remove => HookHandler._beforeFadeBack -= value;
}
public static event Delegates.FadeBackRoutine_BeforeArgs FadeBackRoutine
{
add
{

HookHandler._beforeFadeBackRoutine += value;
HookHandler.HookFadeBackRoutine();
}
remove => HookHandler._beforeFadeBackRoutine -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.FadeBack_AfterArgs FadeBack
{
add
{

HookHandler._afterFadeBack += value;
HookHandler.HookFadeBack();
}
remove => HookHandler._afterFadeBack -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.SpriteFadeMaterial.hook_Awake Awake
{
add => On.SpriteFadeMaterial.Awake += value;
remove => On.SpriteFadeMaterial.Awake -= value;
}
public static event On.SpriteFadeMaterial.hook_Start Start
{
add => On.SpriteFadeMaterial.Start += value;
remove => On.SpriteFadeMaterial.Start -= value;
}
public static event On.SpriteFadeMaterial.hook_FadeBack FadeBack
{
add => On.SpriteFadeMaterial.FadeBack += value;
remove => On.SpriteFadeMaterial.FadeBack -= value;
}
public static event On.SpriteFadeMaterial.hook_FadeBackRoutine FadeBackRoutine
{
add => On.SpriteFadeMaterial.FadeBackRoutine += value;
remove => On.SpriteFadeMaterial.FadeBackRoutine -= value;
}
}

}
