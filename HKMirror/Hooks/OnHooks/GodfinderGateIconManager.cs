using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for GodfinderGateIconManager class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGodfinderGateIconManager
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookOnValidate()
{
if (!HookedList.Contains("OnValidate"))
{
HookedList.Add("OnValidate");
On.GodfinderGateIconManager.OnValidate += OnValidate;

}
}
internal static event Delegates.OnValidate_BeforeArgs _beforeOnValidate;
internal static event Delegates.OnValidate_AfterArgs _afterOnValidate;
private static void OnValidate(On.GodfinderGateIconManager.orig_OnValidate orig,GodfinderGateIconManager self)
{
Delegates.Params_OnValidate @params = new() 
{
self = self
};
if (_beforeOnValidate != null)
{
foreach (Delegates.OnValidate_BeforeArgs toInvoke in _beforeOnValidate.GetInvocationList())
{
try
{
_beforeOnValidate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnValidate != null)
{
foreach (Delegates.OnValidate_AfterArgs toInvoke in _afterOnValidate.GetInvocationList())
{
try
{
_afterOnValidate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
On.GodfinderGateIconManager.OnEnable += OnEnable;

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(On.GodfinderGateIconManager.orig_OnEnable orig,GodfinderGateIconManager self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDoLayout()
{
if (!HookedList.Contains("DoLayout"))
{
HookedList.Add("DoLayout");
On.GodfinderGateIconManager.DoLayout += DoLayout;

}
}
internal static event Delegates.DoLayout_BeforeArgs _beforeDoLayout;
internal static event Delegates.DoLayout_AfterArgs _afterDoLayout;
private static void DoLayout(On.GodfinderGateIconManager.orig_DoLayout orig,GodfinderGateIconManager self)
{
Delegates.Params_DoLayout @params = new() 
{
self = self
};
if (_beforeDoLayout != null)
{
foreach (Delegates.DoLayout_BeforeArgs toInvoke in _beforeDoLayout.GetInvocationList())
{
try
{
_beforeDoLayout?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterDoLayout != null)
{
foreach (Delegates.DoLayout_AfterArgs toInvoke in _afterDoLayout.GetInvocationList())
{
try
{
_afterDoLayout.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_OnValidate
{
public GodfinderGateIconManager self;
}
public delegate void OnValidate_BeforeArgs(Params_OnValidate args);
public delegate void OnValidate_AfterArgs(Params_OnValidate args);
public delegate void OnValidate_WithArgs (Action<GodfinderGateIconManager> orig, GodfinderGateIconManager self);
public sealed class Params_OnEnable
{
public GodfinderGateIconManager self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<GodfinderGateIconManager> orig, GodfinderGateIconManager self);
public sealed class Params_DoLayout
{
public GodfinderGateIconManager self;
}
public delegate void DoLayout_BeforeArgs(Params_DoLayout args);
public delegate void DoLayout_AfterArgs(Params_DoLayout args);
public delegate void DoLayout_WithArgs (Action<GodfinderGateIconManager> orig, GodfinderGateIconManager self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.OnValidate_BeforeArgs OnValidate
{
add
{

HookHandler._beforeOnValidate += value;
HookHandler.HookOnValidate();
}
remove => HookHandler._beforeOnValidate -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.DoLayout_BeforeArgs DoLayout
{
add
{

HookHandler._beforeDoLayout += value;
HookHandler.HookDoLayout();
}
remove => HookHandler._beforeDoLayout -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.OnValidate_AfterArgs OnValidate
{
add
{

HookHandler._afterOnValidate += value;
HookHandler.HookOnValidate();
}
remove => HookHandler._afterOnValidate -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.DoLayout_AfterArgs DoLayout
{
add
{

HookHandler._afterDoLayout += value;
HookHandler.HookDoLayout();
}
remove => HookHandler._afterDoLayout -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.GodfinderGateIconManager.hook_OnValidate OnValidate
{
add => On.GodfinderGateIconManager.OnValidate += value;
remove => On.GodfinderGateIconManager.OnValidate -= value;
}
public static event On.GodfinderGateIconManager.hook_OnEnable OnEnable
{
add => On.GodfinderGateIconManager.OnEnable += value;
remove => On.GodfinderGateIconManager.OnEnable -= value;
}
public static event On.GodfinderGateIconManager.hook_DoLayout DoLayout
{
add => On.GodfinderGateIconManager.DoLayout += value;
remove => On.GodfinderGateIconManager.DoLayout -= value;
}
}

}
