using Modding.Menu;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ContentArea class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnContentArea
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_ContentObject()
        {
            if (!HookedList.Contains("get_ContentObject"))
            {
                HookedList.Add("get_ContentObject");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ContentArea), "get_ContentObject"), get_ContentObject);
            }
        }

        internal static event Delegates.get_ContentObject_BeforeArgs _beforeget_ContentObject;
        internal static event Delegates.get_ContentObject_NormalArgs _afterget_ContentObject;

        private static GameObject get_ContentObject(Func<ContentArea, GameObject> orig, ContentArea self)
        {
            Delegates.Params_get_ContentObject @params = new()
            {
                self = self
            };
            _beforeget_ContentObject?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ContentObject != null) retVal = _afterget_ContentObject.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_ContentObject()
        {
            if (!HookedList.Contains("set_ContentObject"))
            {
                HookedList.Add("set_ContentObject");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ContentArea), "set_ContentObject"), set_ContentObject);
            }
        }

        internal static event Delegates.set_ContentObject_BeforeArgs _beforeset_ContentObject;
        internal static event Delegates.set_ContentObject_NormalArgs _afterset_ContentObject;

        private static void set_ContentObject(Action<ContentArea, GameObject> orig, ContentArea self, GameObject value)
        {
            Delegates.Params_set_ContentObject @params = new()
            {
                self = self, value = value
            };
            _beforeset_ContentObject?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ContentObject != null) _afterset_ContentObject.Invoke(@params);
        }

        internal static void Hookget_Layout()
        {
            if (!HookedList.Contains("get_Layout"))
            {
                HookedList.Add("get_Layout");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ContentArea), "get_Layout"), get_Layout);
            }
        }

        internal static event Delegates.get_Layout_BeforeArgs _beforeget_Layout;
        internal static event Delegates.get_Layout_NormalArgs _afterget_Layout;

        private static IContentLayout get_Layout(Func<ContentArea, IContentLayout> orig, ContentArea self)
        {
            Delegates.Params_get_Layout @params = new()
            {
                self = self
            };
            _beforeget_Layout?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Layout != null) retVal = _afterget_Layout.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Layout()
        {
            if (!HookedList.Contains("set_Layout"))
            {
                HookedList.Add("set_Layout");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ContentArea), "set_Layout"), set_Layout);
            }
        }

        internal static event Delegates.set_Layout_BeforeArgs _beforeset_Layout;
        internal static event Delegates.set_Layout_NormalArgs _afterset_Layout;

        private static void set_Layout(Action<ContentArea, IContentLayout> orig, ContentArea self, IContentLayout value)
        {
            Delegates.Params_set_Layout @params = new()
            {
                self = self, value = value
            };
            _beforeset_Layout?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Layout != null) _afterset_Layout.Invoke(@params);
        }

        internal static void Hookget_NavGraph()
        {
            if (!HookedList.Contains("get_NavGraph"))
            {
                HookedList.Add("get_NavGraph");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ContentArea), "get_NavGraph"), get_NavGraph);
            }
        }

        internal static event Delegates.get_NavGraph_BeforeArgs _beforeget_NavGraph;
        internal static event Delegates.get_NavGraph_NormalArgs _afterget_NavGraph;

        private static INavigationGraph get_NavGraph(Func<ContentArea, INavigationGraph> orig, ContentArea self)
        {
            Delegates.Params_get_NavGraph @params = new()
            {
                self = self
            };
            _beforeget_NavGraph?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_NavGraph != null) retVal = _afterget_NavGraph.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_NavGraph()
        {
            if (!HookedList.Contains("set_NavGraph"))
            {
                HookedList.Add("set_NavGraph");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ContentArea), "set_NavGraph"), set_NavGraph);
            }
        }

        internal static event Delegates.set_NavGraph_BeforeArgs _beforeset_NavGraph;
        internal static event Delegates.set_NavGraph_NormalArgs _afterset_NavGraph;

        private static void set_NavGraph(Action<ContentArea, INavigationGraph> orig, ContentArea self,
            INavigationGraph value)
        {
            Delegates.Params_set_NavGraph @params = new()
            {
                self = self, value = value
            };
            _beforeset_NavGraph?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_NavGraph != null) _afterset_NavGraph.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_ContentObject_BeforeArgs(Params_get_ContentObject args);

        public delegate GameObject get_ContentObject_NormalArgs(Params_get_ContentObject args);

        public delegate void get_Layout_BeforeArgs(Params_get_Layout args);

        public delegate IContentLayout get_Layout_NormalArgs(Params_get_Layout args);

        public delegate void get_NavGraph_BeforeArgs(Params_get_NavGraph args);

        public delegate INavigationGraph get_NavGraph_NormalArgs(Params_get_NavGraph args);

        public delegate void set_ContentObject_BeforeArgs(Params_set_ContentObject args);

        public delegate void set_ContentObject_NormalArgs(Params_set_ContentObject args);

        public delegate void set_Layout_BeforeArgs(Params_set_Layout args);

        public delegate void set_Layout_NormalArgs(Params_set_Layout args);

        public delegate void set_NavGraph_BeforeArgs(Params_set_NavGraph args);

        public delegate void set_NavGraph_NormalArgs(Params_set_NavGraph args);

        public sealed class Params_get_ContentObject
        {
            public ContentArea self;
        }

        public sealed class Params_set_ContentObject
        {
            public ContentArea self;
            public GameObject value;
        }

        public sealed class Params_get_Layout
        {
            public ContentArea self;
        }

        public sealed class Params_set_Layout
        {
            public ContentArea self;
            public IContentLayout value;
        }

        public sealed class Params_get_NavGraph
        {
            public ContentArea self;
        }

        public sealed class Params_set_NavGraph
        {
            public ContentArea self;
            public INavigationGraph value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_ContentObject_BeforeArgs get_ContentObject
        {
            add
            {
                HookHandler._beforeget_ContentObject += value;
                HookHandler.Hookget_ContentObject();
            }
            remove => HookHandler._beforeget_ContentObject -= value;
        }

        public static event Delegates.set_ContentObject_BeforeArgs set_ContentObject
        {
            add
            {
                HookHandler._beforeset_ContentObject += value;
                HookHandler.Hookset_ContentObject();
            }
            remove => HookHandler._beforeset_ContentObject -= value;
        }

        public static event Delegates.get_Layout_BeforeArgs get_Layout
        {
            add
            {
                HookHandler._beforeget_Layout += value;
                HookHandler.Hookget_Layout();
            }
            remove => HookHandler._beforeget_Layout -= value;
        }

        public static event Delegates.set_Layout_BeforeArgs set_Layout
        {
            add
            {
                HookHandler._beforeset_Layout += value;
                HookHandler.Hookset_Layout();
            }
            remove => HookHandler._beforeset_Layout -= value;
        }

        public static event Delegates.get_NavGraph_BeforeArgs get_NavGraph
        {
            add
            {
                HookHandler._beforeget_NavGraph += value;
                HookHandler.Hookget_NavGraph();
            }
            remove => HookHandler._beforeget_NavGraph -= value;
        }

        public static event Delegates.set_NavGraph_BeforeArgs set_NavGraph
        {
            add
            {
                HookHandler._beforeset_NavGraph += value;
                HookHandler.Hookset_NavGraph();
            }
            remove => HookHandler._beforeset_NavGraph -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_ContentObject_NormalArgs get_ContentObject
        {
            add
            {
                HookHandler._afterget_ContentObject += value;
                HookHandler.Hookget_ContentObject();
            }
            remove => HookHandler._afterget_ContentObject -= value;
        }

        public static event Delegates.set_ContentObject_NormalArgs set_ContentObject
        {
            add
            {
                HookHandler._afterset_ContentObject += value;
                HookHandler.Hookset_ContentObject();
            }
            remove => HookHandler._afterset_ContentObject -= value;
        }

        public static event Delegates.get_Layout_NormalArgs get_Layout
        {
            add
            {
                HookHandler._afterget_Layout += value;
                HookHandler.Hookget_Layout();
            }
            remove => HookHandler._afterget_Layout -= value;
        }

        public static event Delegates.set_Layout_NormalArgs set_Layout
        {
            add
            {
                HookHandler._afterset_Layout += value;
                HookHandler.Hookset_Layout();
            }
            remove => HookHandler._afterset_Layout -= value;
        }

        public static event Delegates.get_NavGraph_NormalArgs get_NavGraph
        {
            add
            {
                HookHandler._afterget_NavGraph += value;
                HookHandler.Hookget_NavGraph();
            }
            remove => HookHandler._afterget_NavGraph -= value;
        }

        public static event Delegates.set_NavGraph_NormalArgs set_NavGraph
        {
            add
            {
                HookHandler._afterset_NavGraph += value;
                HookHandler.Hookset_NavGraph();
            }
            remove => HookHandler._afterset_NavGraph -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_ContentObject_NormalArgs get_ContentObject
        {
            add => HookEndpointManager.Add<Delegates.get_ContentObject_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ContentArea), "get_ContentObject"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ContentObject_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ContentArea), "get_ContentObject"), value);
        }

        public static event Delegates.set_ContentObject_NormalArgs set_ContentObject
        {
            add => HookEndpointManager.Add<Delegates.set_ContentObject_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ContentArea), "set_ContentObject"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ContentObject_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ContentArea), "set_ContentObject"), value);
        }

        public static event Delegates.get_Layout_NormalArgs get_Layout
        {
            add => HookEndpointManager.Add<Delegates.get_Layout_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ContentArea), "get_Layout"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Layout_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ContentArea), "get_Layout"), value);
        }

        public static event Delegates.set_Layout_NormalArgs set_Layout
        {
            add => HookEndpointManager.Add<Delegates.set_Layout_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ContentArea), "set_Layout"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Layout_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ContentArea), "set_Layout"), value);
        }

        public static event Delegates.get_NavGraph_NormalArgs get_NavGraph
        {
            add => HookEndpointManager.Add<Delegates.get_NavGraph_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ContentArea), "get_NavGraph"), value);
            remove => HookEndpointManager.Remove<Delegates.get_NavGraph_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ContentArea), "get_NavGraph"), value);
        }

        public static event Delegates.set_NavGraph_NormalArgs set_NavGraph
        {
            add => HookEndpointManager.Add<Delegates.set_NavGraph_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ContentArea), "set_NavGraph"), value);
            remove => HookEndpointManager.Remove<Delegates.set_NavGraph_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ContentArea), "set_NavGraph"), value);
        }
    }
}