namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for RemoteDisable class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnRemoteDisable
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookRemoteDisableObject()
        {
            if (!HookedList.Contains("RemoteDisableObject"))
            {
                HookedList.Add("RemoteDisableObject");
                On.RemoteDisable.RemoteDisableObject += RemoteDisableObject;
            }
        }

        internal static event Delegates.RemoteDisableObject_BeforeArgs _beforeRemoteDisableObject;
        internal static event Delegates.RemoteDisableObject_NormalArgs _afterRemoteDisableObject;

        private static void RemoteDisableObject(On.RemoteDisable.orig_RemoteDisableObject orig, RemoteDisable self)
        {
            Delegates.Params_RemoteDisableObject @params = new()
            {
                self = self
            };
            _beforeRemoteDisableObject?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRemoteDisableObject != null) _afterRemoteDisableObject.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void RemoteDisableObject_BeforeArgs(Params_RemoteDisableObject args);

        public delegate void RemoteDisableObject_NormalArgs(Params_RemoteDisableObject args);

        public sealed class Params_RemoteDisableObject
        {
            public RemoteDisable self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.RemoteDisableObject_BeforeArgs RemoteDisableObject
        {
            add
            {
                HookHandler._beforeRemoteDisableObject += value;
                HookHandler.HookRemoteDisableObject();
            }
            remove => HookHandler._beforeRemoteDisableObject -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.RemoteDisableObject_NormalArgs RemoteDisableObject
        {
            add
            {
                HookHandler._afterRemoteDisableObject += value;
                HookHandler.HookRemoteDisableObject();
            }
            remove => HookHandler._afterRemoteDisableObject -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.RemoteDisable.hook_RemoteDisableObject RemoteDisableObject
        {
            add => On.RemoteDisable.RemoteDisableObject += value;
            remove => On.RemoteDisable.RemoteDisableObject -= value;
        }
    }
}