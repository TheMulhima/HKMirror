namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for CursorHighlight class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCursorHighlight
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.CursorHighlight.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.CursorHighlight.orig_Awake orig, CursorHighlight self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.CursorHighlight.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.CursorHighlight.orig_Start orig, CursorHighlight self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.CursorHighlight.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.CursorHighlight.orig_Update orig, CursorHighlight self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookMoveCursor()
        {
            if (!HookedList.Contains("MoveCursor"))
            {
                HookedList.Add("MoveCursor");
                On.CursorHighlight.MoveCursor += MoveCursor;
            }
        }

        internal static event Delegates.MoveCursor_BeforeArgs _beforeMoveCursor;
        internal static event Delegates.MoveCursor_AfterArgs _afterMoveCursor;

        private static void MoveCursor(On.CursorHighlight.orig_MoveCursor orig, CursorHighlight self,
            RectTransform buttonRect)
        {
            Delegates.Params_MoveCursor @params = new()
            {
                self = self, buttonRect = buttonRect
            };
            if (_beforeMoveCursor != null)
                foreach (Delegates.MoveCursor_BeforeArgs toInvoke in _beforeMoveCursor.GetInvocationList())
                    try
                    {
                        _beforeMoveCursor?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            buttonRect = @params.buttonRect;
            orig(self, buttonRect);
            if (_afterMoveCursor != null)
                foreach (Delegates.MoveCursor_AfterArgs toInvoke in _afterMoveCursor.GetInvocationList())
                    try
                    {
                        _afterMoveCursor.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<CursorHighlight> orig, CursorHighlight self);

        public delegate void MoveCursor_AfterArgs(Params_MoveCursor args);

        public delegate void MoveCursor_BeforeArgs(Params_MoveCursor args);

        public delegate void MoveCursor_WithArgs(Action<CursorHighlight, RectTransform> orig, CursorHighlight self,
            RectTransform buttonRect);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<CursorHighlight> orig, CursorHighlight self);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<CursorHighlight> orig, CursorHighlight self);

        public sealed class Params_Awake
        {
            public CursorHighlight self;
        }

        public sealed class Params_Start
        {
            public CursorHighlight self;
        }

        public sealed class Params_Update
        {
            public CursorHighlight self;
        }

        public sealed class Params_MoveCursor
        {
            public RectTransform buttonRect;
            public CursorHighlight self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.MoveCursor_BeforeArgs MoveCursor
        {
            add
            {
                HookHandler._beforeMoveCursor += value;
                HookHandler.HookMoveCursor();
            }
            remove => HookHandler._beforeMoveCursor -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.MoveCursor_AfterArgs MoveCursor
        {
            add
            {
                HookHandler._afterMoveCursor += value;
                HookHandler.HookMoveCursor();
            }
            remove => HookHandler._afterMoveCursor -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.CursorHighlight.hook_Awake Awake
        {
            add => On.CursorHighlight.Awake += value;
            remove => On.CursorHighlight.Awake -= value;
        }

        public static event On.CursorHighlight.hook_Start Start
        {
            add => On.CursorHighlight.Start += value;
            remove => On.CursorHighlight.Start -= value;
        }

        public static event On.CursorHighlight.hook_Update Update
        {
            add => On.CursorHighlight.Update += value;
            remove => On.CursorHighlight.Update -= value;
        }

        public static event On.CursorHighlight.hook_MoveCursor MoveCursor
        {
            add => On.CursorHighlight.MoveCursor += value;
            remove => On.CursorHighlight.MoveCursor -= value;
        }
    }
}