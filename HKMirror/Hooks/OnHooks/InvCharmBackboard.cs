namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for InvCharmBackboard class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnInvCharmBackboard
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.InvCharmBackboard.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.InvCharmBackboard.orig_Awake orig, InvCharmBackboard self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.InvCharmBackboard.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.InvCharmBackboard.orig_OnEnable orig, InvCharmBackboard self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookSelectCharm()
        {
            if (!HookedList.Contains("SelectCharm"))
            {
                HookedList.Add("SelectCharm");
                On.InvCharmBackboard.SelectCharm += SelectCharm;
            }
        }

        internal static event Delegates.SelectCharm_BeforeArgs _beforeSelectCharm;
        internal static event Delegates.SelectCharm_NormalArgs _afterSelectCharm;

        private static void SelectCharm(On.InvCharmBackboard.orig_SelectCharm orig, InvCharmBackboard self)
        {
            Delegates.Params_SelectCharm @params = new()
            {
                self = self
            };
            _beforeSelectCharm?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSelectCharm != null) _afterSelectCharm.Invoke(@params);
        }

        internal static void HookGetCharmNum()
        {
            if (!HookedList.Contains("GetCharmNum"))
            {
                HookedList.Add("GetCharmNum");
                On.InvCharmBackboard.GetCharmNum += GetCharmNum;
            }
        }

        internal static event Delegates.GetCharmNum_BeforeArgs _beforeGetCharmNum;
        internal static event Delegates.GetCharmNum_NormalArgs _afterGetCharmNum;

        private static int GetCharmNum(On.InvCharmBackboard.orig_GetCharmNum orig, InvCharmBackboard self)
        {
            Delegates.Params_GetCharmNum @params = new()
            {
                self = self
            };
            _beforeGetCharmNum?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetCharmNum != null) retVal = _afterGetCharmNum.Invoke(@params);
            return retVal;
        }

        internal static void HookGetCharmString()
        {
            if (!HookedList.Contains("GetCharmString"))
            {
                HookedList.Add("GetCharmString");
                On.InvCharmBackboard.GetCharmString += GetCharmString;
            }
        }

        internal static event Delegates.GetCharmString_BeforeArgs _beforeGetCharmString;
        internal static event Delegates.GetCharmString_NormalArgs _afterGetCharmString;

        private static string GetCharmString(On.InvCharmBackboard.orig_GetCharmString orig, InvCharmBackboard self)
        {
            Delegates.Params_GetCharmString @params = new()
            {
                self = self
            };
            _beforeGetCharmString?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetCharmString != null) retVal = _afterGetCharmString.Invoke(@params);
            return retVal;
        }

        internal static void HookGetCharmNumString()
        {
            if (!HookedList.Contains("GetCharmNumString"))
            {
                HookedList.Add("GetCharmNumString");
                On.InvCharmBackboard.GetCharmNumString += GetCharmNumString;
            }
        }

        internal static event Delegates.GetCharmNumString_BeforeArgs _beforeGetCharmNumString;
        internal static event Delegates.GetCharmNumString_NormalArgs _afterGetCharmNumString;

        private static string GetCharmNumString(On.InvCharmBackboard.orig_GetCharmNumString orig,
            InvCharmBackboard self)
        {
            Delegates.Params_GetCharmNumString @params = new()
            {
                self = self
            };
            _beforeGetCharmNumString?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetCharmNumString != null) retVal = _afterGetCharmNumString.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void GetCharmNum_BeforeArgs(Params_GetCharmNum args);

        public delegate int GetCharmNum_NormalArgs(Params_GetCharmNum args);

        public delegate void GetCharmNumString_BeforeArgs(Params_GetCharmNumString args);

        public delegate string GetCharmNumString_NormalArgs(Params_GetCharmNumString args);

        public delegate void GetCharmString_BeforeArgs(Params_GetCharmString args);

        public delegate string GetCharmString_NormalArgs(Params_GetCharmString args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void SelectCharm_BeforeArgs(Params_SelectCharm args);

        public delegate void SelectCharm_NormalArgs(Params_SelectCharm args);

        public sealed class Params_Awake
        {
            public InvCharmBackboard self;
        }

        public sealed class Params_OnEnable
        {
            public InvCharmBackboard self;
        }

        public sealed class Params_SelectCharm
        {
            public InvCharmBackboard self;
        }

        public sealed class Params_GetCharmNum
        {
            public InvCharmBackboard self;
        }

        public sealed class Params_GetCharmString
        {
            public InvCharmBackboard self;
        }

        public sealed class Params_GetCharmNumString
        {
            public InvCharmBackboard self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.SelectCharm_BeforeArgs SelectCharm
        {
            add
            {
                HookHandler._beforeSelectCharm += value;
                HookHandler.HookSelectCharm();
            }
            remove => HookHandler._beforeSelectCharm -= value;
        }

        public static event Delegates.GetCharmNum_BeforeArgs GetCharmNum
        {
            add
            {
                HookHandler._beforeGetCharmNum += value;
                HookHandler.HookGetCharmNum();
            }
            remove => HookHandler._beforeGetCharmNum -= value;
        }

        public static event Delegates.GetCharmString_BeforeArgs GetCharmString
        {
            add
            {
                HookHandler._beforeGetCharmString += value;
                HookHandler.HookGetCharmString();
            }
            remove => HookHandler._beforeGetCharmString -= value;
        }

        public static event Delegates.GetCharmNumString_BeforeArgs GetCharmNumString
        {
            add
            {
                HookHandler._beforeGetCharmNumString += value;
                HookHandler.HookGetCharmNumString();
            }
            remove => HookHandler._beforeGetCharmNumString -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.SelectCharm_NormalArgs SelectCharm
        {
            add
            {
                HookHandler._afterSelectCharm += value;
                HookHandler.HookSelectCharm();
            }
            remove => HookHandler._afterSelectCharm -= value;
        }

        public static event Delegates.GetCharmNum_NormalArgs GetCharmNum
        {
            add
            {
                HookHandler._afterGetCharmNum += value;
                HookHandler.HookGetCharmNum();
            }
            remove => HookHandler._afterGetCharmNum -= value;
        }

        public static event Delegates.GetCharmString_NormalArgs GetCharmString
        {
            add
            {
                HookHandler._afterGetCharmString += value;
                HookHandler.HookGetCharmString();
            }
            remove => HookHandler._afterGetCharmString -= value;
        }

        public static event Delegates.GetCharmNumString_NormalArgs GetCharmNumString
        {
            add
            {
                HookHandler._afterGetCharmNumString += value;
                HookHandler.HookGetCharmNumString();
            }
            remove => HookHandler._afterGetCharmNumString -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.InvCharmBackboard.hook_Awake Awake
        {
            add => On.InvCharmBackboard.Awake += value;
            remove => On.InvCharmBackboard.Awake -= value;
        }

        public static event On.InvCharmBackboard.hook_OnEnable OnEnable
        {
            add => On.InvCharmBackboard.OnEnable += value;
            remove => On.InvCharmBackboard.OnEnable -= value;
        }

        public static event On.InvCharmBackboard.hook_SelectCharm SelectCharm
        {
            add => On.InvCharmBackboard.SelectCharm += value;
            remove => On.InvCharmBackboard.SelectCharm -= value;
        }

        public static event On.InvCharmBackboard.hook_GetCharmNum GetCharmNum
        {
            add => On.InvCharmBackboard.GetCharmNum += value;
            remove => On.InvCharmBackboard.GetCharmNum -= value;
        }

        public static event On.InvCharmBackboard.hook_GetCharmString GetCharmString
        {
            add => On.InvCharmBackboard.GetCharmString += value;
            remove => On.InvCharmBackboard.GetCharmString -= value;
        }

        public static event On.InvCharmBackboard.hook_GetCharmNumString GetCharmNumString
        {
            add => On.InvCharmBackboard.GetCharmNumString += value;
            remove => On.InvCharmBackboard.GetCharmNumString -= value;
        }
    }
}