using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for SceneData class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSceneData
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_instance()
        {
            if (!HookedList.Contains("get_instance"))
            {
                HookedList.Add("get_instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneData), "get_instance", false), get_instance);
            }
        }

        internal static event Delegates.get_instance_BeforeArgs _beforeget_instance;
        internal static event Delegates.get_instance_AfterArgs _afterget_instance;

        private static SceneData get_instance(Func<SceneData> orig)
        {
            if (_beforeget_instance != null)
                foreach (Delegates.get_instance_BeforeArgs toInvoke in _beforeget_instance.GetInvocationList())
                    try
                    {
                        _beforeget_instance?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_instance != null)
                foreach (Delegates.get_instance_AfterArgs toInvoke in _afterget_instance.GetInvocationList())
                    try
                    {
                        retVal = _afterget_instance.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_instance()
        {
            if (!HookedList.Contains("set_instance"))
            {
                HookedList.Add("set_instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneData), "set_instance", false), set_instance);
            }
        }

        internal static event Delegates.set_instance_BeforeArgs _beforeset_instance;
        internal static event Delegates.set_instance_AfterArgs _afterset_instance;

        private static void set_instance(Action<SceneData> orig, SceneData value)
        {
            Delegates.Params_set_instance @params = new()
            {
                value = value
            };
            if (_beforeset_instance != null)
                foreach (Delegates.set_instance_BeforeArgs toInvoke in _beforeset_instance.GetInvocationList())
                    try
                    {
                        _beforeset_instance?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_instance != null)
                foreach (Delegates.set_instance_AfterArgs toInvoke in _afterset_instance.GetInvocationList())
                    try
                    {
                        _afterset_instance.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                On.SceneData.Reset += Reset;
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_AfterArgs _afterReset;

        private static void Reset(On.SceneData.orig_Reset orig, SceneData self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            if (_beforeReset != null)
                foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
                    try
                    {
                        _beforeReset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterReset != null)
                foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
                    try
                    {
                        _afterReset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSaveMyState_GeoRockData()
        {
            if (!HookedList.Contains("SaveMyState_GeoRockData"))
            {
                HookedList.Add("SaveMyState_GeoRockData");
                On.SceneData.SaveMyState_GeoRockData += SaveMyState_GeoRockData;
            }
        }

        internal static event Delegates.SaveMyState_GeoRockData_BeforeArgs _beforeSaveMyState_GeoRockData;
        internal static event Delegates.SaveMyState_GeoRockData_AfterArgs _afterSaveMyState_GeoRockData;

        private static void SaveMyState_GeoRockData(On.SceneData.orig_SaveMyState_GeoRockData orig, SceneData self,
            GeoRockData geoRockData)
        {
            Delegates.Params_SaveMyState_GeoRockData @params = new()
            {
                self = self, geoRockData = geoRockData
            };
            if (_beforeSaveMyState_GeoRockData != null)
                foreach (Delegates.SaveMyState_GeoRockData_BeforeArgs toInvoke in _beforeSaveMyState_GeoRockData
                             .GetInvocationList())
                    try
                    {
                        _beforeSaveMyState_GeoRockData?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            geoRockData = @params.geoRockData;
            orig(self, geoRockData);
            if (_afterSaveMyState_GeoRockData != null)
                foreach (Delegates.SaveMyState_GeoRockData_AfterArgs toInvoke in _afterSaveMyState_GeoRockData
                             .GetInvocationList())
                    try
                    {
                        _afterSaveMyState_GeoRockData.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSaveMyState_PersistentBoolData()
        {
            if (!HookedList.Contains("SaveMyState_PersistentBoolData"))
            {
                HookedList.Add("SaveMyState_PersistentBoolData");
                On.SceneData.SaveMyState_PersistentBoolData += SaveMyState_PersistentBoolData;
            }
        }

        internal static event Delegates.SaveMyState_PersistentBoolData_BeforeArgs _beforeSaveMyState_PersistentBoolData;
        internal static event Delegates.SaveMyState_PersistentBoolData_AfterArgs _afterSaveMyState_PersistentBoolData;

        private static void SaveMyState_PersistentBoolData(On.SceneData.orig_SaveMyState_PersistentBoolData orig,
            SceneData self, PersistentBoolData persistentBoolData)
        {
            Delegates.Params_SaveMyState_PersistentBoolData @params = new()
            {
                self = self, persistentBoolData = persistentBoolData
            };
            if (_beforeSaveMyState_PersistentBoolData != null)
                foreach (Delegates.SaveMyState_PersistentBoolData_BeforeArgs toInvoke in
                         _beforeSaveMyState_PersistentBoolData.GetInvocationList())
                    try
                    {
                        _beforeSaveMyState_PersistentBoolData?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            persistentBoolData = @params.persistentBoolData;
            orig(self, persistentBoolData);
            if (_afterSaveMyState_PersistentBoolData != null)
                foreach (Delegates.SaveMyState_PersistentBoolData_AfterArgs toInvoke in
                         _afterSaveMyState_PersistentBoolData.GetInvocationList())
                    try
                    {
                        _afterSaveMyState_PersistentBoolData.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSaveMyState_PersistentIntData()
        {
            if (!HookedList.Contains("SaveMyState_PersistentIntData"))
            {
                HookedList.Add("SaveMyState_PersistentIntData");
                On.SceneData.SaveMyState_PersistentIntData += SaveMyState_PersistentIntData;
            }
        }

        internal static event Delegates.SaveMyState_PersistentIntData_BeforeArgs _beforeSaveMyState_PersistentIntData;
        internal static event Delegates.SaveMyState_PersistentIntData_AfterArgs _afterSaveMyState_PersistentIntData;

        private static void SaveMyState_PersistentIntData(On.SceneData.orig_SaveMyState_PersistentIntData orig,
            SceneData self, PersistentIntData persistentIntData)
        {
            Delegates.Params_SaveMyState_PersistentIntData @params = new()
            {
                self = self, persistentIntData = persistentIntData
            };
            if (_beforeSaveMyState_PersistentIntData != null)
                foreach (Delegates.SaveMyState_PersistentIntData_BeforeArgs toInvoke in
                         _beforeSaveMyState_PersistentIntData.GetInvocationList())
                    try
                    {
                        _beforeSaveMyState_PersistentIntData?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            persistentIntData = @params.persistentIntData;
            orig(self, persistentIntData);
            if (_afterSaveMyState_PersistentIntData != null)
                foreach (Delegates.SaveMyState_PersistentIntData_AfterArgs toInvoke in
                         _afterSaveMyState_PersistentIntData.GetInvocationList())
                    try
                    {
                        _afterSaveMyState_PersistentIntData.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookResetSemiPersistentItems()
        {
            if (!HookedList.Contains("ResetSemiPersistentItems"))
            {
                HookedList.Add("ResetSemiPersistentItems");
                On.SceneData.ResetSemiPersistentItems += ResetSemiPersistentItems;
            }
        }

        internal static event Delegates.ResetSemiPersistentItems_BeforeArgs _beforeResetSemiPersistentItems;
        internal static event Delegates.ResetSemiPersistentItems_AfterArgs _afterResetSemiPersistentItems;

        private static void ResetSemiPersistentItems(On.SceneData.orig_ResetSemiPersistentItems orig, SceneData self)
        {
            Delegates.Params_ResetSemiPersistentItems @params = new()
            {
                self = self
            };
            if (_beforeResetSemiPersistentItems != null)
                foreach (Delegates.ResetSemiPersistentItems_BeforeArgs toInvoke in _beforeResetSemiPersistentItems
                             .GetInvocationList())
                    try
                    {
                        _beforeResetSemiPersistentItems?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterResetSemiPersistentItems != null)
                foreach (Delegates.ResetSemiPersistentItems_AfterArgs toInvoke in _afterResetSemiPersistentItems
                             .GetInvocationList())
                    try
                    {
                        _afterResetSemiPersistentItems.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFindMyState_GeoRockData()
        {
            if (!HookedList.Contains("FindMyState_GeoRockData"))
            {
                HookedList.Add("FindMyState_GeoRockData");
                On.SceneData.FindMyState_GeoRockData += FindMyState_GeoRockData;
            }
        }

        internal static event Delegates.FindMyState_GeoRockData_BeforeArgs _beforeFindMyState_GeoRockData;
        internal static event Delegates.FindMyState_GeoRockData_AfterArgs _afterFindMyState_GeoRockData;

        private static GeoRockData FindMyState_GeoRockData(On.SceneData.orig_FindMyState_GeoRockData orig,
            SceneData self, GeoRockData grd)
        {
            Delegates.Params_FindMyState_GeoRockData @params = new()
            {
                self = self, grd = grd
            };
            if (_beforeFindMyState_GeoRockData != null)
                foreach (Delegates.FindMyState_GeoRockData_BeforeArgs toInvoke in _beforeFindMyState_GeoRockData
                             .GetInvocationList())
                    try
                    {
                        _beforeFindMyState_GeoRockData?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            grd = @params.grd;
            var retVal = orig(self, grd);
            if (_afterFindMyState_GeoRockData != null)
                foreach (Delegates.FindMyState_GeoRockData_AfterArgs toInvoke in _afterFindMyState_GeoRockData
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterFindMyState_GeoRockData.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookFindMyState_PersistentBoolData()
        {
            if (!HookedList.Contains("FindMyState_PersistentBoolData"))
            {
                HookedList.Add("FindMyState_PersistentBoolData");
                On.SceneData.FindMyState_PersistentBoolData += FindMyState_PersistentBoolData;
            }
        }

        internal static event Delegates.FindMyState_PersistentBoolData_BeforeArgs _beforeFindMyState_PersistentBoolData;
        internal static event Delegates.FindMyState_PersistentBoolData_AfterArgs _afterFindMyState_PersistentBoolData;

        private static PersistentBoolData FindMyState_PersistentBoolData(
            On.SceneData.orig_FindMyState_PersistentBoolData orig, SceneData self,
            PersistentBoolData persistentBoolData)
        {
            Delegates.Params_FindMyState_PersistentBoolData @params = new()
            {
                self = self, persistentBoolData = persistentBoolData
            };
            if (_beforeFindMyState_PersistentBoolData != null)
                foreach (Delegates.FindMyState_PersistentBoolData_BeforeArgs toInvoke in
                         _beforeFindMyState_PersistentBoolData.GetInvocationList())
                    try
                    {
                        _beforeFindMyState_PersistentBoolData?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            persistentBoolData = @params.persistentBoolData;
            var retVal = orig(self, persistentBoolData);
            if (_afterFindMyState_PersistentBoolData != null)
                foreach (Delegates.FindMyState_PersistentBoolData_AfterArgs toInvoke in
                         _afterFindMyState_PersistentBoolData.GetInvocationList())
                    try
                    {
                        retVal = _afterFindMyState_PersistentBoolData.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookFindMyState_PersistentIntData()
        {
            if (!HookedList.Contains("FindMyState_PersistentIntData"))
            {
                HookedList.Add("FindMyState_PersistentIntData");
                On.SceneData.FindMyState_PersistentIntData += FindMyState_PersistentIntData;
            }
        }

        internal static event Delegates.FindMyState_PersistentIntData_BeforeArgs _beforeFindMyState_PersistentIntData;
        internal static event Delegates.FindMyState_PersistentIntData_AfterArgs _afterFindMyState_PersistentIntData;

        private static PersistentIntData FindMyState_PersistentIntData(
            On.SceneData.orig_FindMyState_PersistentIntData orig, SceneData self, PersistentIntData persistentIntData)
        {
            Delegates.Params_FindMyState_PersistentIntData @params = new()
            {
                self = self, persistentIntData = persistentIntData
            };
            if (_beforeFindMyState_PersistentIntData != null)
                foreach (Delegates.FindMyState_PersistentIntData_BeforeArgs toInvoke in
                         _beforeFindMyState_PersistentIntData.GetInvocationList())
                    try
                    {
                        _beforeFindMyState_PersistentIntData?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            persistentIntData = @params.persistentIntData;
            var retVal = orig(self, persistentIntData);
            if (_afterFindMyState_PersistentIntData != null)
                foreach (Delegates.FindMyState_PersistentIntData_AfterArgs toInvoke in
                         _afterFindMyState_PersistentIntData.GetInvocationList())
                    try
                    {
                        retVal = _afterFindMyState_PersistentIntData.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetupNewSceneData()
        {
            if (!HookedList.Contains("SetupNewSceneData"))
            {
                HookedList.Add("SetupNewSceneData");
                On.SceneData.SetupNewSceneData += SetupNewSceneData;
            }
        }

        internal static event Delegates.SetupNewSceneData_BeforeArgs _beforeSetupNewSceneData;
        internal static event Delegates.SetupNewSceneData_AfterArgs _afterSetupNewSceneData;

        private static void SetupNewSceneData(On.SceneData.orig_SetupNewSceneData orig, SceneData self)
        {
            Delegates.Params_SetupNewSceneData @params = new()
            {
                self = self
            };
            if (_beforeSetupNewSceneData != null)
                foreach (Delegates.SetupNewSceneData_BeforeArgs toInvoke in
                         _beforeSetupNewSceneData.GetInvocationList())
                    try
                    {
                        _beforeSetupNewSceneData?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSetupNewSceneData != null)
                foreach (Delegates.SetupNewSceneData_AfterArgs toInvoke in _afterSetupNewSceneData.GetInvocationList())
                    try
                    {
                        _afterSetupNewSceneData.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFindGeoRockInList()
        {
            if (!HookedList.Contains("FindGeoRockInList"))
            {
                HookedList.Add("FindGeoRockInList");
                On.SceneData.FindGeoRockInList += FindGeoRockInList;
            }
        }

        internal static event Delegates.FindGeoRockInList_BeforeArgs _beforeFindGeoRockInList;
        internal static event Delegates.FindGeoRockInList_AfterArgs _afterFindGeoRockInList;

        private static int FindGeoRockInList(On.SceneData.orig_FindGeoRockInList orig, SceneData self, GeoRockData grd)
        {
            Delegates.Params_FindGeoRockInList @params = new()
            {
                self = self, grd = grd
            };
            if (_beforeFindGeoRockInList != null)
                foreach (Delegates.FindGeoRockInList_BeforeArgs toInvoke in
                         _beforeFindGeoRockInList.GetInvocationList())
                    try
                    {
                        _beforeFindGeoRockInList?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            grd = @params.grd;
            var retVal = orig(self, grd);
            if (_afterFindGeoRockInList != null)
                foreach (Delegates.FindGeoRockInList_AfterArgs toInvoke in _afterFindGeoRockInList.GetInvocationList())
                    try
                    {
                        retVal = _afterFindGeoRockInList.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookFindPersistentBoolItemInList()
        {
            if (!HookedList.Contains("FindPersistentBoolItemInList"))
            {
                HookedList.Add("FindPersistentBoolItemInList");
                On.SceneData.FindPersistentBoolItemInList += FindPersistentBoolItemInList;
            }
        }

        internal static event Delegates.FindPersistentBoolItemInList_BeforeArgs _beforeFindPersistentBoolItemInList;
        internal static event Delegates.FindPersistentBoolItemInList_AfterArgs _afterFindPersistentBoolItemInList;

        private static int FindPersistentBoolItemInList(On.SceneData.orig_FindPersistentBoolItemInList orig,
            SceneData self, PersistentBoolData pbd)
        {
            Delegates.Params_FindPersistentBoolItemInList @params = new()
            {
                self = self, pbd = pbd
            };
            if (_beforeFindPersistentBoolItemInList != null)
                foreach (Delegates.FindPersistentBoolItemInList_BeforeArgs toInvoke in
                         _beforeFindPersistentBoolItemInList.GetInvocationList())
                    try
                    {
                        _beforeFindPersistentBoolItemInList?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            pbd = @params.pbd;
            var retVal = orig(self, pbd);
            if (_afterFindPersistentBoolItemInList != null)
                foreach (Delegates.FindPersistentBoolItemInList_AfterArgs toInvoke in _afterFindPersistentBoolItemInList
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterFindPersistentBoolItemInList.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookFindPersistentIntItemInList()
        {
            if (!HookedList.Contains("FindPersistentIntItemInList"))
            {
                HookedList.Add("FindPersistentIntItemInList");
                On.SceneData.FindPersistentIntItemInList += FindPersistentIntItemInList;
            }
        }

        internal static event Delegates.FindPersistentIntItemInList_BeforeArgs _beforeFindPersistentIntItemInList;
        internal static event Delegates.FindPersistentIntItemInList_AfterArgs _afterFindPersistentIntItemInList;

        private static int FindPersistentIntItemInList(On.SceneData.orig_FindPersistentIntItemInList orig,
            SceneData self, PersistentIntData pid)
        {
            Delegates.Params_FindPersistentIntItemInList @params = new()
            {
                self = self, pid = pid
            };
            if (_beforeFindPersistentIntItemInList != null)
                foreach (Delegates.FindPersistentIntItemInList_BeforeArgs toInvoke in _beforeFindPersistentIntItemInList
                             .GetInvocationList())
                    try
                    {
                        _beforeFindPersistentIntItemInList?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            pid = @params.pid;
            var retVal = orig(self, pid);
            if (_afterFindPersistentIntItemInList != null)
                foreach (Delegates.FindPersistentIntItemInList_AfterArgs toInvoke in _afterFindPersistentIntItemInList
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterFindPersistentIntItemInList.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate int FindGeoRockInList_AfterArgs(Params_FindGeoRockInList args, int ret);

        public delegate void FindGeoRockInList_BeforeArgs(Params_FindGeoRockInList args);

        public delegate int FindGeoRockInList_WithArgs(Func<SceneData, GeoRockData, int> orig, SceneData self,
            GeoRockData grd);

        public delegate GeoRockData FindMyState_GeoRockData_AfterArgs(Params_FindMyState_GeoRockData args,
            GeoRockData ret);

        public delegate void FindMyState_GeoRockData_BeforeArgs(Params_FindMyState_GeoRockData args);

        public delegate GeoRockData FindMyState_GeoRockData_WithArgs(Func<SceneData, GeoRockData, GeoRockData> orig,
            SceneData self, GeoRockData grd);

        public delegate PersistentBoolData FindMyState_PersistentBoolData_AfterArgs(
            Params_FindMyState_PersistentBoolData args, PersistentBoolData ret);

        public delegate void FindMyState_PersistentBoolData_BeforeArgs(Params_FindMyState_PersistentBoolData args);

        public delegate PersistentBoolData FindMyState_PersistentBoolData_WithArgs(
            Func<SceneData, PersistentBoolData, PersistentBoolData> orig, SceneData self,
            PersistentBoolData persistentBoolData);

        public delegate PersistentIntData FindMyState_PersistentIntData_AfterArgs(
            Params_FindMyState_PersistentIntData args, PersistentIntData ret);

        public delegate void FindMyState_PersistentIntData_BeforeArgs(Params_FindMyState_PersistentIntData args);

        public delegate PersistentIntData FindMyState_PersistentIntData_WithArgs(
            Func<SceneData, PersistentIntData, PersistentIntData> orig, SceneData self,
            PersistentIntData persistentIntData);

        public delegate int FindPersistentBoolItemInList_AfterArgs(Params_FindPersistentBoolItemInList args, int ret);

        public delegate void FindPersistentBoolItemInList_BeforeArgs(Params_FindPersistentBoolItemInList args);

        public delegate int FindPersistentBoolItemInList_WithArgs(Func<SceneData, PersistentBoolData, int> orig,
            SceneData self, PersistentBoolData pbd);

        public delegate int FindPersistentIntItemInList_AfterArgs(Params_FindPersistentIntItemInList args, int ret);

        public delegate void FindPersistentIntItemInList_BeforeArgs(Params_FindPersistentIntItemInList args);

        public delegate int FindPersistentIntItemInList_WithArgs(Func<SceneData, PersistentIntData, int> orig,
            SceneData self, PersistentIntData pid);

        public delegate SceneData get_instance_AfterArgs(SceneData ret);

        public delegate void get_instance_BeforeArgs();

        public delegate SceneData get_instance_WithArgs(Func<SceneData> orig);

        public delegate void Reset_AfterArgs(Params_Reset args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_WithArgs(Action<SceneData> orig, SceneData self);

        public delegate void ResetSemiPersistentItems_AfterArgs(Params_ResetSemiPersistentItems args);

        public delegate void ResetSemiPersistentItems_BeforeArgs(Params_ResetSemiPersistentItems args);

        public delegate void ResetSemiPersistentItems_WithArgs(Action<SceneData> orig, SceneData self);

        public delegate void SaveMyState_GeoRockData_AfterArgs(Params_SaveMyState_GeoRockData args);

        public delegate void SaveMyState_GeoRockData_BeforeArgs(Params_SaveMyState_GeoRockData args);

        public delegate void SaveMyState_GeoRockData_WithArgs(Action<SceneData, GeoRockData> orig, SceneData self,
            GeoRockData geoRockData);

        public delegate void SaveMyState_PersistentBoolData_AfterArgs(Params_SaveMyState_PersistentBoolData args);

        public delegate void SaveMyState_PersistentBoolData_BeforeArgs(Params_SaveMyState_PersistentBoolData args);

        public delegate void SaveMyState_PersistentBoolData_WithArgs(Action<SceneData, PersistentBoolData> orig,
            SceneData self, PersistentBoolData persistentBoolData);

        public delegate void SaveMyState_PersistentIntData_AfterArgs(Params_SaveMyState_PersistentIntData args);

        public delegate void SaveMyState_PersistentIntData_BeforeArgs(Params_SaveMyState_PersistentIntData args);

        public delegate void SaveMyState_PersistentIntData_WithArgs(Action<SceneData, PersistentIntData> orig,
            SceneData self, PersistentIntData persistentIntData);

        public delegate void set_instance_AfterArgs(Params_set_instance args);

        public delegate void set_instance_BeforeArgs(Params_set_instance args);

        public delegate void set_instance_WithArgs(Action<SceneData> orig, SceneData value);

        public delegate void SetupNewSceneData_AfterArgs(Params_SetupNewSceneData args);

        public delegate void SetupNewSceneData_BeforeArgs(Params_SetupNewSceneData args);

        public delegate void SetupNewSceneData_WithArgs(Action<SceneData> orig, SceneData self);

        public sealed class Params_set_instance
        {
            public SceneData value;
        }

        public sealed class Params_Reset
        {
            public SceneData self;
        }

        public sealed class Params_SaveMyState_GeoRockData
        {
            public GeoRockData geoRockData;
            public SceneData self;
        }

        public sealed class Params_SaveMyState_PersistentBoolData
        {
            public PersistentBoolData persistentBoolData;
            public SceneData self;
        }

        public sealed class Params_SaveMyState_PersistentIntData
        {
            public PersistentIntData persistentIntData;
            public SceneData self;
        }

        public sealed class Params_ResetSemiPersistentItems
        {
            public SceneData self;
        }

        public sealed class Params_FindMyState_GeoRockData
        {
            public GeoRockData grd;
            public SceneData self;
        }

        public sealed class Params_FindMyState_PersistentBoolData
        {
            public PersistentBoolData persistentBoolData;
            public SceneData self;
        }

        public sealed class Params_FindMyState_PersistentIntData
        {
            public PersistentIntData persistentIntData;
            public SceneData self;
        }

        public sealed class Params_SetupNewSceneData
        {
            public SceneData self;
        }

        public sealed class Params_FindGeoRockInList
        {
            public GeoRockData grd;
            public SceneData self;
        }

        public sealed class Params_FindPersistentBoolItemInList
        {
            public PersistentBoolData pbd;
            public SceneData self;
        }

        public sealed class Params_FindPersistentIntItemInList
        {
            public PersistentIntData pid;
            public SceneData self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_instance_BeforeArgs get_instance
        {
            add
            {
                HookHandler._beforeget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._beforeget_instance -= value;
        }

        public static event Delegates.set_instance_BeforeArgs set_instance
        {
            add
            {
                HookHandler._beforeset_instance += value;
                HookHandler.Hookset_instance();
            }
            remove => HookHandler._beforeset_instance -= value;
        }

        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.SaveMyState_GeoRockData_BeforeArgs SaveMyState_GeoRockData
        {
            add
            {
                HookHandler._beforeSaveMyState_GeoRockData += value;
                HookHandler.HookSaveMyState_GeoRockData();
            }
            remove => HookHandler._beforeSaveMyState_GeoRockData -= value;
        }

        public static event Delegates.SaveMyState_PersistentBoolData_BeforeArgs SaveMyState_PersistentBoolData
        {
            add
            {
                HookHandler._beforeSaveMyState_PersistentBoolData += value;
                HookHandler.HookSaveMyState_PersistentBoolData();
            }
            remove => HookHandler._beforeSaveMyState_PersistentBoolData -= value;
        }

        public static event Delegates.SaveMyState_PersistentIntData_BeforeArgs SaveMyState_PersistentIntData
        {
            add
            {
                HookHandler._beforeSaveMyState_PersistentIntData += value;
                HookHandler.HookSaveMyState_PersistentIntData();
            }
            remove => HookHandler._beforeSaveMyState_PersistentIntData -= value;
        }

        public static event Delegates.ResetSemiPersistentItems_BeforeArgs ResetSemiPersistentItems
        {
            add
            {
                HookHandler._beforeResetSemiPersistentItems += value;
                HookHandler.HookResetSemiPersistentItems();
            }
            remove => HookHandler._beforeResetSemiPersistentItems -= value;
        }

        public static event Delegates.FindMyState_GeoRockData_BeforeArgs FindMyState_GeoRockData
        {
            add
            {
                HookHandler._beforeFindMyState_GeoRockData += value;
                HookHandler.HookFindMyState_GeoRockData();
            }
            remove => HookHandler._beforeFindMyState_GeoRockData -= value;
        }

        public static event Delegates.FindMyState_PersistentBoolData_BeforeArgs FindMyState_PersistentBoolData
        {
            add
            {
                HookHandler._beforeFindMyState_PersistentBoolData += value;
                HookHandler.HookFindMyState_PersistentBoolData();
            }
            remove => HookHandler._beforeFindMyState_PersistentBoolData -= value;
        }

        public static event Delegates.FindMyState_PersistentIntData_BeforeArgs FindMyState_PersistentIntData
        {
            add
            {
                HookHandler._beforeFindMyState_PersistentIntData += value;
                HookHandler.HookFindMyState_PersistentIntData();
            }
            remove => HookHandler._beforeFindMyState_PersistentIntData -= value;
        }

        public static event Delegates.SetupNewSceneData_BeforeArgs SetupNewSceneData
        {
            add
            {
                HookHandler._beforeSetupNewSceneData += value;
                HookHandler.HookSetupNewSceneData();
            }
            remove => HookHandler._beforeSetupNewSceneData -= value;
        }

        public static event Delegates.FindGeoRockInList_BeforeArgs FindGeoRockInList
        {
            add
            {
                HookHandler._beforeFindGeoRockInList += value;
                HookHandler.HookFindGeoRockInList();
            }
            remove => HookHandler._beforeFindGeoRockInList -= value;
        }

        public static event Delegates.FindPersistentBoolItemInList_BeforeArgs FindPersistentBoolItemInList
        {
            add
            {
                HookHandler._beforeFindPersistentBoolItemInList += value;
                HookHandler.HookFindPersistentBoolItemInList();
            }
            remove => HookHandler._beforeFindPersistentBoolItemInList -= value;
        }

        public static event Delegates.FindPersistentIntItemInList_BeforeArgs FindPersistentIntItemInList
        {
            add
            {
                HookHandler._beforeFindPersistentIntItemInList += value;
                HookHandler.HookFindPersistentIntItemInList();
            }
            remove => HookHandler._beforeFindPersistentIntItemInList -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_instance_AfterArgs get_instance
        {
            add
            {
                HookHandler._afterget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._afterget_instance -= value;
        }

        public static event Delegates.set_instance_AfterArgs set_instance
        {
            add
            {
                HookHandler._afterset_instance += value;
                HookHandler.Hookset_instance();
            }
            remove => HookHandler._afterset_instance -= value;
        }

        public static event Delegates.Reset_AfterArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.SaveMyState_GeoRockData_AfterArgs SaveMyState_GeoRockData
        {
            add
            {
                HookHandler._afterSaveMyState_GeoRockData += value;
                HookHandler.HookSaveMyState_GeoRockData();
            }
            remove => HookHandler._afterSaveMyState_GeoRockData -= value;
        }

        public static event Delegates.SaveMyState_PersistentBoolData_AfterArgs SaveMyState_PersistentBoolData
        {
            add
            {
                HookHandler._afterSaveMyState_PersistentBoolData += value;
                HookHandler.HookSaveMyState_PersistentBoolData();
            }
            remove => HookHandler._afterSaveMyState_PersistentBoolData -= value;
        }

        public static event Delegates.SaveMyState_PersistentIntData_AfterArgs SaveMyState_PersistentIntData
        {
            add
            {
                HookHandler._afterSaveMyState_PersistentIntData += value;
                HookHandler.HookSaveMyState_PersistentIntData();
            }
            remove => HookHandler._afterSaveMyState_PersistentIntData -= value;
        }

        public static event Delegates.ResetSemiPersistentItems_AfterArgs ResetSemiPersistentItems
        {
            add
            {
                HookHandler._afterResetSemiPersistentItems += value;
                HookHandler.HookResetSemiPersistentItems();
            }
            remove => HookHandler._afterResetSemiPersistentItems -= value;
        }

        public static event Delegates.FindMyState_GeoRockData_AfterArgs FindMyState_GeoRockData
        {
            add
            {
                HookHandler._afterFindMyState_GeoRockData += value;
                HookHandler.HookFindMyState_GeoRockData();
            }
            remove => HookHandler._afterFindMyState_GeoRockData -= value;
        }

        public static event Delegates.FindMyState_PersistentBoolData_AfterArgs FindMyState_PersistentBoolData
        {
            add
            {
                HookHandler._afterFindMyState_PersistentBoolData += value;
                HookHandler.HookFindMyState_PersistentBoolData();
            }
            remove => HookHandler._afterFindMyState_PersistentBoolData -= value;
        }

        public static event Delegates.FindMyState_PersistentIntData_AfterArgs FindMyState_PersistentIntData
        {
            add
            {
                HookHandler._afterFindMyState_PersistentIntData += value;
                HookHandler.HookFindMyState_PersistentIntData();
            }
            remove => HookHandler._afterFindMyState_PersistentIntData -= value;
        }

        public static event Delegates.SetupNewSceneData_AfterArgs SetupNewSceneData
        {
            add
            {
                HookHandler._afterSetupNewSceneData += value;
                HookHandler.HookSetupNewSceneData();
            }
            remove => HookHandler._afterSetupNewSceneData -= value;
        }

        public static event Delegates.FindGeoRockInList_AfterArgs FindGeoRockInList
        {
            add
            {
                HookHandler._afterFindGeoRockInList += value;
                HookHandler.HookFindGeoRockInList();
            }
            remove => HookHandler._afterFindGeoRockInList -= value;
        }

        public static event Delegates.FindPersistentBoolItemInList_AfterArgs FindPersistentBoolItemInList
        {
            add
            {
                HookHandler._afterFindPersistentBoolItemInList += value;
                HookHandler.HookFindPersistentBoolItemInList();
            }
            remove => HookHandler._afterFindPersistentBoolItemInList -= value;
        }

        public static event Delegates.FindPersistentIntItemInList_AfterArgs FindPersistentIntItemInList
        {
            add
            {
                HookHandler._afterFindPersistentIntItemInList += value;
                HookHandler.HookFindPersistentIntItemInList();
            }
            remove => HookHandler._afterFindPersistentIntItemInList -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_instance_WithArgs get_instance
        {
            add => HookEndpointManager.Add<Delegates.get_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneData), "get_instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneData), "get_instance", false), value);
        }

        public static event Delegates.set_instance_WithArgs set_instance
        {
            add => HookEndpointManager.Add<Delegates.set_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneData), "set_instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneData), "set_instance", false), value);
        }

        public static event On.SceneData.hook_Reset Reset
        {
            add => On.SceneData.Reset += value;
            remove => On.SceneData.Reset -= value;
        }

        public static event On.SceneData.hook_SaveMyState_GeoRockData SaveMyState_GeoRockData
        {
            add => On.SceneData.SaveMyState_GeoRockData += value;
            remove => On.SceneData.SaveMyState_GeoRockData -= value;
        }

        public static event On.SceneData.hook_SaveMyState_PersistentBoolData SaveMyState_PersistentBoolData
        {
            add => On.SceneData.SaveMyState_PersistentBoolData += value;
            remove => On.SceneData.SaveMyState_PersistentBoolData -= value;
        }

        public static event On.SceneData.hook_SaveMyState_PersistentIntData SaveMyState_PersistentIntData
        {
            add => On.SceneData.SaveMyState_PersistentIntData += value;
            remove => On.SceneData.SaveMyState_PersistentIntData -= value;
        }

        public static event On.SceneData.hook_ResetSemiPersistentItems ResetSemiPersistentItems
        {
            add => On.SceneData.ResetSemiPersistentItems += value;
            remove => On.SceneData.ResetSemiPersistentItems -= value;
        }

        public static event On.SceneData.hook_FindMyState_GeoRockData FindMyState_GeoRockData
        {
            add => On.SceneData.FindMyState_GeoRockData += value;
            remove => On.SceneData.FindMyState_GeoRockData -= value;
        }

        public static event On.SceneData.hook_FindMyState_PersistentBoolData FindMyState_PersistentBoolData
        {
            add => On.SceneData.FindMyState_PersistentBoolData += value;
            remove => On.SceneData.FindMyState_PersistentBoolData -= value;
        }

        public static event On.SceneData.hook_FindMyState_PersistentIntData FindMyState_PersistentIntData
        {
            add => On.SceneData.FindMyState_PersistentIntData += value;
            remove => On.SceneData.FindMyState_PersistentIntData -= value;
        }

        public static event On.SceneData.hook_SetupNewSceneData SetupNewSceneData
        {
            add => On.SceneData.SetupNewSceneData += value;
            remove => On.SceneData.SetupNewSceneData -= value;
        }

        public static event On.SceneData.hook_FindGeoRockInList FindGeoRockInList
        {
            add => On.SceneData.FindGeoRockInList += value;
            remove => On.SceneData.FindGeoRockInList -= value;
        }

        public static event On.SceneData.hook_FindPersistentBoolItemInList FindPersistentBoolItemInList
        {
            add => On.SceneData.FindPersistentBoolItemInList += value;
            remove => On.SceneData.FindPersistentBoolItemInList -= value;
        }

        public static event On.SceneData.hook_FindPersistentIntItemInList FindPersistentIntItemInList
        {
            add => On.SceneData.FindPersistentIntItemInList += value;
            remove => On.SceneData.FindPersistentIntItemInList -= value;
        }
    }
}