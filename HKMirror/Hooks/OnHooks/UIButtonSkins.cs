using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for UIButtonSkins class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnUIButtonSkins
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_listeningKey()
        {
            if (!HookedList.Contains("get_listeningKey"))
            {
                HookedList.Add("get_listeningKey");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "get_listeningKey"), get_listeningKey);
            }
        }

        internal static event Delegates.get_listeningKey_BeforeArgs _beforeget_listeningKey;
        internal static event Delegates.get_listeningKey_NormalArgs _afterget_listeningKey;

        private static MappableKey get_listeningKey(Func<UIButtonSkins, MappableKey> orig, UIButtonSkins self)
        {
            Delegates.Params_get_listeningKey @params = new()
            {
                self = self
            };
            _beforeget_listeningKey?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_listeningKey != null) retVal = _afterget_listeningKey.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_listeningKey()
        {
            if (!HookedList.Contains("set_listeningKey"))
            {
                HookedList.Add("set_listeningKey");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "set_listeningKey"), set_listeningKey);
            }
        }

        internal static event Delegates.set_listeningKey_BeforeArgs _beforeset_listeningKey;
        internal static event Delegates.set_listeningKey_NormalArgs _afterset_listeningKey;

        private static void set_listeningKey(Action<UIButtonSkins, MappableKey> orig, UIButtonSkins self,
            MappableKey value)
        {
            Delegates.Params_set_listeningKey @params = new()
            {
                self = self, value = value
            };
            _beforeset_listeningKey?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_listeningKey != null) _afterset_listeningKey.Invoke(@params);
        }

        internal static void Hookget_listeningButton()
        {
            if (!HookedList.Contains("get_listeningButton"))
            {
                HookedList.Add("get_listeningButton");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "get_listeningButton"),
                    get_listeningButton);
            }
        }

        internal static event Delegates.get_listeningButton_BeforeArgs _beforeget_listeningButton;
        internal static event Delegates.get_listeningButton_NormalArgs _afterget_listeningButton;

        private static MappableControllerButton get_listeningButton(Func<UIButtonSkins, MappableControllerButton> orig,
            UIButtonSkins self)
        {
            Delegates.Params_get_listeningButton @params = new()
            {
                self = self
            };
            _beforeget_listeningButton?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_listeningButton != null) retVal = _afterget_listeningButton.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_listeningButton()
        {
            if (!HookedList.Contains("set_listeningButton"))
            {
                HookedList.Add("set_listeningButton");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "set_listeningButton"),
                    set_listeningButton);
            }
        }

        internal static event Delegates.set_listeningButton_BeforeArgs _beforeset_listeningButton;
        internal static event Delegates.set_listeningButton_NormalArgs _afterset_listeningButton;

        private static void set_listeningButton(Action<UIButtonSkins, MappableControllerButton> orig,
            UIButtonSkins self, MappableControllerButton value)
        {
            Delegates.Params_set_listeningButton @params = new()
            {
                self = self, value = value
            };
            _beforeset_listeningButton?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_listeningButton != null) _afterset_listeningButton.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.UIButtonSkins.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.UIButtonSkins.orig_Start orig, UIButtonSkins self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.UIButtonSkins.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.UIButtonSkins.orig_OnEnable orig, UIButtonSkins self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookGetButtonSkinFor_PlayerAction()
        {
            if (!HookedList.Contains("GetButtonSkinFor_PlayerAction"))
            {
                HookedList.Add("GetButtonSkinFor_PlayerAction");
                On.UIButtonSkins.GetButtonSkinFor_PlayerAction += GetButtonSkinFor_PlayerAction;
            }
        }

        internal static event Delegates.GetButtonSkinFor_PlayerAction_BeforeArgs _beforeGetButtonSkinFor_PlayerAction;
        internal static event Delegates.GetButtonSkinFor_PlayerAction_NormalArgs _afterGetButtonSkinFor_PlayerAction;

        private static ButtonSkin GetButtonSkinFor_PlayerAction(
            On.UIButtonSkins.orig_GetButtonSkinFor_PlayerAction orig, UIButtonSkins self, PlayerAction action)
        {
            Delegates.Params_GetButtonSkinFor_PlayerAction @params = new()
            {
                self = self, action = action
            };
            _beforeGetButtonSkinFor_PlayerAction?.Invoke(@params);
            self = @params.self;
            action = @params.action;
            var retVal = orig(self, action);
            if (_afterGetButtonSkinFor_PlayerAction != null)
                retVal = _afterGetButtonSkinFor_PlayerAction.Invoke(@params);
            return retVal;
        }

        internal static void HookGetKeyboardSkinFor()
        {
            if (!HookedList.Contains("GetKeyboardSkinFor"))
            {
                HookedList.Add("GetKeyboardSkinFor");
                On.UIButtonSkins.GetKeyboardSkinFor += GetKeyboardSkinFor;
            }
        }

        internal static event Delegates.GetKeyboardSkinFor_BeforeArgs _beforeGetKeyboardSkinFor;
        internal static event Delegates.GetKeyboardSkinFor_NormalArgs _afterGetKeyboardSkinFor;

        private static ButtonSkin GetKeyboardSkinFor(On.UIButtonSkins.orig_GetKeyboardSkinFor orig, UIButtonSkins self,
            PlayerAction action)
        {
            Delegates.Params_GetKeyboardSkinFor @params = new()
            {
                self = self, action = action
            };
            _beforeGetKeyboardSkinFor?.Invoke(@params);
            self = @params.self;
            action = @params.action;
            var retVal = orig(self, action);
            if (_afterGetKeyboardSkinFor != null) retVal = _afterGetKeyboardSkinFor.Invoke(@params);
            return retVal;
        }

        internal static void HookGetControllerButtonSkinFor()
        {
            if (!HookedList.Contains("GetControllerButtonSkinFor"))
            {
                HookedList.Add("GetControllerButtonSkinFor");
                On.UIButtonSkins.GetControllerButtonSkinFor += GetControllerButtonSkinFor;
            }
        }

        internal static event Delegates.GetControllerButtonSkinFor_BeforeArgs _beforeGetControllerButtonSkinFor;
        internal static event Delegates.GetControllerButtonSkinFor_NormalArgs _afterGetControllerButtonSkinFor;

        private static ButtonSkin GetControllerButtonSkinFor(On.UIButtonSkins.orig_GetControllerButtonSkinFor orig,
            UIButtonSkins self, PlayerAction action)
        {
            Delegates.Params_GetControllerButtonSkinFor @params = new()
            {
                self = self, action = action
            };
            _beforeGetControllerButtonSkinFor?.Invoke(@params);
            self = @params.self;
            action = @params.action;
            var retVal = orig(self, action);
            if (_afterGetControllerButtonSkinFor != null) retVal = _afterGetControllerButtonSkinFor.Invoke(@params);
            return retVal;
        }

        internal static void HookGetButtonSkinFor_HeroActionButton()
        {
            if (!HookedList.Contains("GetButtonSkinFor_HeroActionButton"))
            {
                HookedList.Add("GetButtonSkinFor_HeroActionButton");
                On.UIButtonSkins.GetButtonSkinFor_HeroActionButton += GetButtonSkinFor_HeroActionButton;
            }
        }

        internal static event Delegates.GetButtonSkinFor_HeroActionButton_BeforeArgs
            _beforeGetButtonSkinFor_HeroActionButton;

        internal static event Delegates.GetButtonSkinFor_HeroActionButton_NormalArgs
            _afterGetButtonSkinFor_HeroActionButton;

        private static ButtonSkin GetButtonSkinFor_HeroActionButton(
            On.UIButtonSkins.orig_GetButtonSkinFor_HeroActionButton orig, UIButtonSkins self,
            HeroActionButton actionButton)
        {
            Delegates.Params_GetButtonSkinFor_HeroActionButton @params = new()
            {
                self = self, actionButton = actionButton
            };
            _beforeGetButtonSkinFor_HeroActionButton?.Invoke(@params);
            self = @params.self;
            actionButton = @params.actionButton;
            var retVal = orig(self, actionButton);
            if (_afterGetButtonSkinFor_HeroActionButton != null)
                retVal = _afterGetButtonSkinFor_HeroActionButton.Invoke(@params);
            return retVal;
        }

        internal static void HookShowCurrentKeyboardMappings()
        {
            if (!HookedList.Contains("ShowCurrentKeyboardMappings"))
            {
                HookedList.Add("ShowCurrentKeyboardMappings");
                On.UIButtonSkins.ShowCurrentKeyboardMappings += ShowCurrentKeyboardMappings;
            }
        }

        internal static event Delegates.ShowCurrentKeyboardMappings_BeforeArgs _beforeShowCurrentKeyboardMappings;

        private static IEnumerator ShowCurrentKeyboardMappings(On.UIButtonSkins.orig_ShowCurrentKeyboardMappings orig,
            UIButtonSkins self)
        {
            Delegates.Params_ShowCurrentKeyboardMappings @params = new()
            {
                self = self
            };
            _beforeShowCurrentKeyboardMappings?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookShowCurrentButtonMappings()
        {
            if (!HookedList.Contains("ShowCurrentButtonMappings"))
            {
                HookedList.Add("ShowCurrentButtonMappings");
                On.UIButtonSkins.ShowCurrentButtonMappings += ShowCurrentButtonMappings;
            }
        }

        internal static event Delegates.ShowCurrentButtonMappings_BeforeArgs _beforeShowCurrentButtonMappings;

        private static IEnumerator ShowCurrentButtonMappings(On.UIButtonSkins.orig_ShowCurrentButtonMappings orig,
            UIButtonSkins self)
        {
            Delegates.Params_ShowCurrentButtonMappings @params = new()
            {
                self = self
            };
            _beforeShowCurrentButtonMappings?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookRefreshKeyMappings()
        {
            if (!HookedList.Contains("RefreshKeyMappings"))
            {
                HookedList.Add("RefreshKeyMappings");
                On.UIButtonSkins.RefreshKeyMappings += RefreshKeyMappings;
            }
        }

        internal static event Delegates.RefreshKeyMappings_BeforeArgs _beforeRefreshKeyMappings;
        internal static event Delegates.RefreshKeyMappings_NormalArgs _afterRefreshKeyMappings;

        private static void RefreshKeyMappings(On.UIButtonSkins.orig_RefreshKeyMappings orig, UIButtonSkins self)
        {
            Delegates.Params_RefreshKeyMappings @params = new()
            {
                self = self
            };
            _beforeRefreshKeyMappings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRefreshKeyMappings != null) _afterRefreshKeyMappings.Invoke(@params);
        }

        internal static void HookRefreshButtonMappings()
        {
            if (!HookedList.Contains("RefreshButtonMappings"))
            {
                HookedList.Add("RefreshButtonMappings");
                On.UIButtonSkins.RefreshButtonMappings += RefreshButtonMappings;
            }
        }

        internal static event Delegates.RefreshButtonMappings_BeforeArgs _beforeRefreshButtonMappings;
        internal static event Delegates.RefreshButtonMappings_NormalArgs _afterRefreshButtonMappings;

        private static void RefreshButtonMappings(On.UIButtonSkins.orig_RefreshButtonMappings orig, UIButtonSkins self)
        {
            Delegates.Params_RefreshButtonMappings @params = new()
            {
                self = self
            };
            _beforeRefreshButtonMappings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRefreshButtonMappings != null) _afterRefreshButtonMappings.Invoke(@params);
        }

        internal static void HookListeningForKeyRebind()
        {
            if (!HookedList.Contains("ListeningForKeyRebind"))
            {
                HookedList.Add("ListeningForKeyRebind");
                On.UIButtonSkins.ListeningForKeyRebind += ListeningForKeyRebind;
            }
        }

        internal static event Delegates.ListeningForKeyRebind_BeforeArgs _beforeListeningForKeyRebind;
        internal static event Delegates.ListeningForKeyRebind_NormalArgs _afterListeningForKeyRebind;

        private static void ListeningForKeyRebind(On.UIButtonSkins.orig_ListeningForKeyRebind orig, UIButtonSkins self,
            MappableKey mappableKey)
        {
            Delegates.Params_ListeningForKeyRebind @params = new()
            {
                self = self, mappableKey = mappableKey
            };
            _beforeListeningForKeyRebind?.Invoke(@params);
            self = @params.self;
            mappableKey = @params.mappableKey;
            orig(self, mappableKey);
            if (_afterListeningForKeyRebind != null) _afterListeningForKeyRebind.Invoke(@params);
        }

        internal static void HookListeningForButtonRebind()
        {
            if (!HookedList.Contains("ListeningForButtonRebind"))
            {
                HookedList.Add("ListeningForButtonRebind");
                On.UIButtonSkins.ListeningForButtonRebind += ListeningForButtonRebind;
            }
        }

        internal static event Delegates.ListeningForButtonRebind_BeforeArgs _beforeListeningForButtonRebind;
        internal static event Delegates.ListeningForButtonRebind_NormalArgs _afterListeningForButtonRebind;

        private static void ListeningForButtonRebind(On.UIButtonSkins.orig_ListeningForButtonRebind orig,
            UIButtonSkins self, MappableControllerButton mappableButton)
        {
            Delegates.Params_ListeningForButtonRebind @params = new()
            {
                self = self, mappableButton = mappableButton
            };
            _beforeListeningForButtonRebind?.Invoke(@params);
            self = @params.self;
            mappableButton = @params.mappableButton;
            orig(self, mappableButton);
            if (_afterListeningForButtonRebind != null) _afterListeningForButtonRebind.Invoke(@params);
        }

        internal static void HookFinishedListeningForKey()
        {
            if (!HookedList.Contains("FinishedListeningForKey"))
            {
                HookedList.Add("FinishedListeningForKey");
                On.UIButtonSkins.FinishedListeningForKey += FinishedListeningForKey;
            }
        }

        internal static event Delegates.FinishedListeningForKey_BeforeArgs _beforeFinishedListeningForKey;
        internal static event Delegates.FinishedListeningForKey_NormalArgs _afterFinishedListeningForKey;

        private static void FinishedListeningForKey(On.UIButtonSkins.orig_FinishedListeningForKey orig,
            UIButtonSkins self)
        {
            Delegates.Params_FinishedListeningForKey @params = new()
            {
                self = self
            };
            _beforeFinishedListeningForKey?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFinishedListeningForKey != null) _afterFinishedListeningForKey.Invoke(@params);
        }

        internal static void HookFinishedListeningForButton()
        {
            if (!HookedList.Contains("FinishedListeningForButton"))
            {
                HookedList.Add("FinishedListeningForButton");
                On.UIButtonSkins.FinishedListeningForButton += FinishedListeningForButton;
            }
        }

        internal static event Delegates.FinishedListeningForButton_BeforeArgs _beforeFinishedListeningForButton;
        internal static event Delegates.FinishedListeningForButton_NormalArgs _afterFinishedListeningForButton;

        private static void FinishedListeningForButton(On.UIButtonSkins.orig_FinishedListeningForButton orig,
            UIButtonSkins self)
        {
            Delegates.Params_FinishedListeningForButton @params = new()
            {
                self = self
            };
            _beforeFinishedListeningForButton?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFinishedListeningForButton != null) _afterFinishedListeningForButton.Invoke(@params);
        }

        internal static void HookGetButtonSkinFor_InputControlType()
        {
            if (!HookedList.Contains("GetButtonSkinFor_InputControlType"))
            {
                HookedList.Add("GetButtonSkinFor_InputControlType");
                On.UIButtonSkins.GetButtonSkinFor_InputControlType += GetButtonSkinFor_InputControlType;
            }
        }

        internal static event Delegates.GetButtonSkinFor_InputControlType_BeforeArgs
            _beforeGetButtonSkinFor_InputControlType;

        internal static event Delegates.GetButtonSkinFor_InputControlType_NormalArgs
            _afterGetButtonSkinFor_InputControlType;

        private static ButtonSkin GetButtonSkinFor_InputControlType(
            On.UIButtonSkins.orig_GetButtonSkinFor_InputControlType orig, UIButtonSkins self,
            InputControlType inputControlType)
        {
            Delegates.Params_GetButtonSkinFor_InputControlType @params = new()
            {
                self = self, inputControlType = inputControlType
            };
            _beforeGetButtonSkinFor_InputControlType?.Invoke(@params);
            self = @params.self;
            inputControlType = @params.inputControlType;
            var retVal = orig(self, inputControlType);
            if (_afterGetButtonSkinFor_InputControlType != null)
                retVal = _afterGetButtonSkinFor_InputControlType.Invoke(@params);
            return retVal;
        }

        internal static void HookGetButtonSkinFor_string()
        {
            if (!HookedList.Contains("GetButtonSkinFor_string"))
            {
                HookedList.Add("GetButtonSkinFor_string");
                On.UIButtonSkins.GetButtonSkinFor_string += GetButtonSkinFor_string;
            }
        }

        internal static event Delegates.GetButtonSkinFor_string_BeforeArgs _beforeGetButtonSkinFor_string;
        internal static event Delegates.GetButtonSkinFor_string_NormalArgs _afterGetButtonSkinFor_string;

        private static ButtonSkin GetButtonSkinFor_string(On.UIButtonSkins.orig_GetButtonSkinFor_string orig,
            UIButtonSkins self, string buttonName)
        {
            Delegates.Params_GetButtonSkinFor_string @params = new()
            {
                self = self, buttonName = buttonName
            };
            _beforeGetButtonSkinFor_string?.Invoke(@params);
            self = @params.self;
            buttonName = @params.buttonName;
            var retVal = orig(self, buttonName);
            if (_afterGetButtonSkinFor_string != null) retVal = _afterGetButtonSkinFor_string.Invoke(@params);
            return retVal;
        }

        internal static void HookSetupRefs()
        {
            if (!HookedList.Contains("SetupRefs"))
            {
                HookedList.Add("SetupRefs");
                On.UIButtonSkins.SetupRefs += SetupRefs;
            }
        }

        internal static event Delegates.SetupRefs_BeforeArgs _beforeSetupRefs;
        internal static event Delegates.SetupRefs_NormalArgs _afterSetupRefs;

        private static void SetupRefs(On.UIButtonSkins.orig_SetupRefs orig, UIButtonSkins self)
        {
            Delegates.Params_SetupRefs @params = new()
            {
                self = self
            };
            _beforeSetupRefs?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetupRefs != null) _afterSetupRefs.Invoke(@params);
        }

        internal static void HookAddMappableKey()
        {
            if (!HookedList.Contains("AddMappableKey"))
            {
                HookedList.Add("AddMappableKey");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "AddMappableKey"), AddMappableKey);
            }
        }

        internal static event Delegates.AddMappableKey_BeforeArgs _beforeAddMappableKey;
        internal static event Delegates.AddMappableKey_NormalArgs _afterAddMappableKey;

        private static void AddMappableKey(Action<UIButtonSkins, MappableKey> orig, UIButtonSkins self, MappableKey b)
        {
            Delegates.Params_AddMappableKey @params = new()
            {
                self = self, b = b
            };
            _beforeAddMappableKey?.Invoke(@params);
            self = @params.self;
            b = @params.b;
            orig(self, b);
            if (_afterAddMappableKey != null) _afterAddMappableKey.Invoke(@params);
        }

        internal static void HookRemoveMappableKey()
        {
            if (!HookedList.Contains("RemoveMappableKey"))
            {
                HookedList.Add("RemoveMappableKey");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "RemoveMappableKey"), RemoveMappableKey);
            }
        }

        internal static event Delegates.RemoveMappableKey_BeforeArgs _beforeRemoveMappableKey;
        internal static event Delegates.RemoveMappableKey_NormalArgs _afterRemoveMappableKey;

        private static void RemoveMappableKey(Action<UIButtonSkins, MappableKey> orig, UIButtonSkins self,
            MappableKey b)
        {
            Delegates.Params_RemoveMappableKey @params = new()
            {
                self = self, b = b
            };
            _beforeRemoveMappableKey?.Invoke(@params);
            self = @params.self;
            b = @params.b;
            orig(self, b);
            if (_afterRemoveMappableKey != null) _afterRemoveMappableKey.Invoke(@params);
        }

        internal static void HookAddMappableControllerButton()
        {
            if (!HookedList.Contains("AddMappableControllerButton"))
            {
                HookedList.Add("AddMappableControllerButton");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "AddMappableControllerButton"),
                    AddMappableControllerButton);
            }
        }

        internal static event Delegates.AddMappableControllerButton_BeforeArgs _beforeAddMappableControllerButton;
        internal static event Delegates.AddMappableControllerButton_NormalArgs _afterAddMappableControllerButton;

        private static void AddMappableControllerButton(Action<UIButtonSkins, MappableControllerButton> orig,
            UIButtonSkins self, MappableControllerButton b)
        {
            Delegates.Params_AddMappableControllerButton @params = new()
            {
                self = self, b = b
            };
            _beforeAddMappableControllerButton?.Invoke(@params);
            self = @params.self;
            b = @params.b;
            orig(self, b);
            if (_afterAddMappableControllerButton != null) _afterAddMappableControllerButton.Invoke(@params);
        }

        internal static void HookRemoveMappableControllerButton()
        {
            if (!HookedList.Contains("RemoveMappableControllerButton"))
            {
                HookedList.Add("RemoveMappableControllerButton");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "RemoveMappableControllerButton"),
                    RemoveMappableControllerButton);
            }
        }

        internal static event Delegates.RemoveMappableControllerButton_BeforeArgs _beforeRemoveMappableControllerButton;
        internal static event Delegates.RemoveMappableControllerButton_NormalArgs _afterRemoveMappableControllerButton;

        private static void RemoveMappableControllerButton(Action<UIButtonSkins, MappableControllerButton> orig,
            UIButtonSkins self, MappableControllerButton b)
        {
            Delegates.Params_RemoveMappableControllerButton @params = new()
            {
                self = self, b = b
            };
            _beforeRemoveMappableControllerButton?.Invoke(@params);
            self = @params.self;
            b = @params.b;
            orig(self, b);
            if (_afterRemoveMappableControllerButton != null) _afterRemoveMappableControllerButton.Invoke(@params);
        }

        internal static void Hookorig_RefreshKeyMappings()
        {
            if (!HookedList.Contains("orig_RefreshKeyMappings"))
            {
                HookedList.Add("orig_RefreshKeyMappings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_RefreshKeyMappings"),
                    orig_RefreshKeyMappings);
            }
        }

        internal static event Delegates.orig_RefreshKeyMappings_BeforeArgs _beforeorig_RefreshKeyMappings;
        internal static event Delegates.orig_RefreshKeyMappings_NormalArgs _afterorig_RefreshKeyMappings;

        private static void orig_RefreshKeyMappings(Action<UIButtonSkins> orig, UIButtonSkins self)
        {
            Delegates.Params_orig_RefreshKeyMappings @params = new()
            {
                self = self
            };
            _beforeorig_RefreshKeyMappings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterorig_RefreshKeyMappings != null) _afterorig_RefreshKeyMappings.Invoke(@params);
        }

        internal static void Hookorig_ShowCurrentKeyboardMappings()
        {
            if (!HookedList.Contains("orig_ShowCurrentKeyboardMappings"))
            {
                HookedList.Add("orig_ShowCurrentKeyboardMappings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_ShowCurrentKeyboardMappings"),
                    orig_ShowCurrentKeyboardMappings);
            }
        }

        internal static event Delegates.orig_ShowCurrentKeyboardMappings_BeforeArgs
            _beforeorig_ShowCurrentKeyboardMappings;

        private static IEnumerator orig_ShowCurrentKeyboardMappings(Func<UIButtonSkins, IEnumerator> orig,
            UIButtonSkins self)
        {
            Delegates.Params_orig_ShowCurrentKeyboardMappings @params = new()
            {
                self = self
            };
            _beforeorig_ShowCurrentKeyboardMappings?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void Hookorig_RefreshButtonMappings()
        {
            if (!HookedList.Contains("orig_RefreshButtonMappings"))
            {
                HookedList.Add("orig_RefreshButtonMappings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_RefreshButtonMappings"),
                    orig_RefreshButtonMappings);
            }
        }

        internal static event Delegates.orig_RefreshButtonMappings_BeforeArgs _beforeorig_RefreshButtonMappings;
        internal static event Delegates.orig_RefreshButtonMappings_NormalArgs _afterorig_RefreshButtonMappings;

        private static void orig_RefreshButtonMappings(Action<UIButtonSkins> orig, UIButtonSkins self)
        {
            Delegates.Params_orig_RefreshButtonMappings @params = new()
            {
                self = self
            };
            _beforeorig_RefreshButtonMappings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterorig_RefreshButtonMappings != null) _afterorig_RefreshButtonMappings.Invoke(@params);
        }

        internal static void Hookorig_ShowCurrentButtonMappings()
        {
            if (!HookedList.Contains("orig_ShowCurrentButtonMappings"))
            {
                HookedList.Add("orig_ShowCurrentButtonMappings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_ShowCurrentButtonMappings"),
                    orig_ShowCurrentButtonMappings);
            }
        }

        internal static event Delegates.orig_ShowCurrentButtonMappings_BeforeArgs _beforeorig_ShowCurrentButtonMappings;

        private static IEnumerator orig_ShowCurrentButtonMappings(Func<UIButtonSkins, IEnumerator> orig,
            UIButtonSkins self)
        {
            Delegates.Params_orig_ShowCurrentButtonMappings @params = new()
            {
                self = self
            };
            _beforeorig_ShowCurrentButtonMappings?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void Hookorig_GetButtonSkinFor()
        {
            if (!HookedList.Contains("orig_GetButtonSkinFor"))
            {
                HookedList.Add("orig_GetButtonSkinFor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_GetButtonSkinFor"),
                    orig_GetButtonSkinFor);
            }
        }

        internal static event Delegates.orig_GetButtonSkinFor_BeforeArgs _beforeorig_GetButtonSkinFor;
        internal static event Delegates.orig_GetButtonSkinFor_NormalArgs _afterorig_GetButtonSkinFor;

        private static ButtonSkin orig_GetButtonSkinFor(Func<UIButtonSkins, InputControlType, ButtonSkin> orig,
            UIButtonSkins self, InputControlType inputControlType)
        {
            Delegates.Params_orig_GetButtonSkinFor @params = new()
            {
                self = self, inputControlType = inputControlType
            };
            _beforeorig_GetButtonSkinFor?.Invoke(@params);
            self = @params.self;
            inputControlType = @params.inputControlType;
            var retVal = orig(self, inputControlType);
            if (_afterorig_GetButtonSkinFor != null) retVal = _afterorig_GetButtonSkinFor.Invoke(@params);
            return retVal;
        }

        internal static void Hookorig_SetupRefs()
        {
            if (!HookedList.Contains("orig_SetupRefs"))
            {
                HookedList.Add("orig_SetupRefs");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_SetupRefs"), orig_SetupRefs);
            }
        }

        internal static event Delegates.orig_SetupRefs_BeforeArgs _beforeorig_SetupRefs;
        internal static event Delegates.orig_SetupRefs_NormalArgs _afterorig_SetupRefs;

        private static void orig_SetupRefs(Action<UIButtonSkins> orig, UIButtonSkins self)
        {
            Delegates.Params_orig_SetupRefs @params = new()
            {
                self = self
            };
            _beforeorig_SetupRefs?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterorig_SetupRefs != null) _afterorig_SetupRefs.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AddMappableControllerButton_BeforeArgs(Params_AddMappableControllerButton args);

        public delegate void AddMappableControllerButton_NormalArgs(Params_AddMappableControllerButton args);

        public delegate void AddMappableKey_BeforeArgs(Params_AddMappableKey args);

        public delegate void AddMappableKey_NormalArgs(Params_AddMappableKey args);

        public delegate void FinishedListeningForButton_BeforeArgs(Params_FinishedListeningForButton args);

        public delegate void FinishedListeningForButton_NormalArgs(Params_FinishedListeningForButton args);

        public delegate void FinishedListeningForKey_BeforeArgs(Params_FinishedListeningForKey args);

        public delegate void FinishedListeningForKey_NormalArgs(Params_FinishedListeningForKey args);

        public delegate void get_listeningButton_BeforeArgs(Params_get_listeningButton args);

        public delegate MappableControllerButton get_listeningButton_NormalArgs(Params_get_listeningButton args);

        public delegate void get_listeningKey_BeforeArgs(Params_get_listeningKey args);

        public delegate MappableKey get_listeningKey_NormalArgs(Params_get_listeningKey args);

        public delegate void
            GetButtonSkinFor_HeroActionButton_BeforeArgs(Params_GetButtonSkinFor_HeroActionButton args);

        public delegate ButtonSkin GetButtonSkinFor_HeroActionButton_NormalArgs(
            Params_GetButtonSkinFor_HeroActionButton args);

        public delegate void
            GetButtonSkinFor_InputControlType_BeforeArgs(Params_GetButtonSkinFor_InputControlType args);

        public delegate ButtonSkin GetButtonSkinFor_InputControlType_NormalArgs(
            Params_GetButtonSkinFor_InputControlType args);

        public delegate void GetButtonSkinFor_PlayerAction_BeforeArgs(Params_GetButtonSkinFor_PlayerAction args);

        public delegate ButtonSkin GetButtonSkinFor_PlayerAction_NormalArgs(Params_GetButtonSkinFor_PlayerAction args);

        public delegate void GetButtonSkinFor_string_BeforeArgs(Params_GetButtonSkinFor_string args);

        public delegate ButtonSkin GetButtonSkinFor_string_NormalArgs(Params_GetButtonSkinFor_string args);

        public delegate void GetControllerButtonSkinFor_BeforeArgs(Params_GetControllerButtonSkinFor args);

        public delegate ButtonSkin GetControllerButtonSkinFor_NormalArgs(Params_GetControllerButtonSkinFor args);

        public delegate void GetKeyboardSkinFor_BeforeArgs(Params_GetKeyboardSkinFor args);

        public delegate ButtonSkin GetKeyboardSkinFor_NormalArgs(Params_GetKeyboardSkinFor args);

        public delegate void ListeningForButtonRebind_BeforeArgs(Params_ListeningForButtonRebind args);

        public delegate void ListeningForButtonRebind_NormalArgs(Params_ListeningForButtonRebind args);

        public delegate void ListeningForKeyRebind_BeforeArgs(Params_ListeningForKeyRebind args);

        public delegate void ListeningForKeyRebind_NormalArgs(Params_ListeningForKeyRebind args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void orig_GetButtonSkinFor_BeforeArgs(Params_orig_GetButtonSkinFor args);

        public delegate ButtonSkin orig_GetButtonSkinFor_NormalArgs(Params_orig_GetButtonSkinFor args);

        public delegate void orig_RefreshButtonMappings_BeforeArgs(Params_orig_RefreshButtonMappings args);

        public delegate void orig_RefreshButtonMappings_NormalArgs(Params_orig_RefreshButtonMappings args);

        public delegate void orig_RefreshKeyMappings_BeforeArgs(Params_orig_RefreshKeyMappings args);

        public delegate void orig_RefreshKeyMappings_NormalArgs(Params_orig_RefreshKeyMappings args);

        public delegate void orig_SetupRefs_BeforeArgs(Params_orig_SetupRefs args);

        public delegate void orig_SetupRefs_NormalArgs(Params_orig_SetupRefs args);

        public delegate void orig_ShowCurrentButtonMappings_BeforeArgs(Params_orig_ShowCurrentButtonMappings args);

        public delegate IEnumerator orig_ShowCurrentButtonMappings_NormalArgs(
            Params_orig_ShowCurrentButtonMappings args);

        public delegate void orig_ShowCurrentKeyboardMappings_BeforeArgs(Params_orig_ShowCurrentKeyboardMappings args);

        public delegate IEnumerator orig_ShowCurrentKeyboardMappings_NormalArgs(
            Params_orig_ShowCurrentKeyboardMappings args);

        public delegate void RefreshButtonMappings_BeforeArgs(Params_RefreshButtonMappings args);

        public delegate void RefreshButtonMappings_NormalArgs(Params_RefreshButtonMappings args);

        public delegate void RefreshKeyMappings_BeforeArgs(Params_RefreshKeyMappings args);

        public delegate void RefreshKeyMappings_NormalArgs(Params_RefreshKeyMappings args);

        public delegate void RemoveMappableControllerButton_BeforeArgs(Params_RemoveMappableControllerButton args);

        public delegate void RemoveMappableControllerButton_NormalArgs(Params_RemoveMappableControllerButton args);

        public delegate void RemoveMappableKey_BeforeArgs(Params_RemoveMappableKey args);

        public delegate void RemoveMappableKey_NormalArgs(Params_RemoveMappableKey args);

        public delegate void set_listeningButton_BeforeArgs(Params_set_listeningButton args);

        public delegate void set_listeningButton_NormalArgs(Params_set_listeningButton args);

        public delegate void set_listeningKey_BeforeArgs(Params_set_listeningKey args);

        public delegate void set_listeningKey_NormalArgs(Params_set_listeningKey args);

        public delegate void SetupRefs_BeforeArgs(Params_SetupRefs args);

        public delegate void SetupRefs_NormalArgs(Params_SetupRefs args);

        public delegate void ShowCurrentButtonMappings_BeforeArgs(Params_ShowCurrentButtonMappings args);

        public delegate IEnumerator ShowCurrentButtonMappings_NormalArgs(Params_ShowCurrentButtonMappings args);

        public delegate void ShowCurrentKeyboardMappings_BeforeArgs(Params_ShowCurrentKeyboardMappings args);

        public delegate IEnumerator ShowCurrentKeyboardMappings_NormalArgs(Params_ShowCurrentKeyboardMappings args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_get_listeningKey
        {
            public UIButtonSkins self;
        }

        public sealed class Params_set_listeningKey
        {
            public UIButtonSkins self;
            public MappableKey value;
        }

        public sealed class Params_get_listeningButton
        {
            public UIButtonSkins self;
        }

        public sealed class Params_set_listeningButton
        {
            public UIButtonSkins self;
            public MappableControllerButton value;
        }

        public sealed class Params_Start
        {
            public UIButtonSkins self;
        }

        public sealed class Params_OnEnable
        {
            public UIButtonSkins self;
        }

        public sealed class Params_GetButtonSkinFor_PlayerAction
        {
            public PlayerAction action;
            public UIButtonSkins self;
        }

        public sealed class Params_GetKeyboardSkinFor
        {
            public PlayerAction action;
            public UIButtonSkins self;
        }

        public sealed class Params_GetControllerButtonSkinFor
        {
            public PlayerAction action;
            public UIButtonSkins self;
        }

        public sealed class Params_GetButtonSkinFor_HeroActionButton
        {
            public HeroActionButton actionButton;
            public UIButtonSkins self;
        }

        public sealed class Params_ShowCurrentKeyboardMappings
        {
            public UIButtonSkins self;
        }

        public sealed class Params_ShowCurrentButtonMappings
        {
            public UIButtonSkins self;
        }

        public sealed class Params_RefreshKeyMappings
        {
            public UIButtonSkins self;
        }

        public sealed class Params_RefreshButtonMappings
        {
            public UIButtonSkins self;
        }

        public sealed class Params_ListeningForKeyRebind
        {
            public MappableKey mappableKey;
            public UIButtonSkins self;
        }

        public sealed class Params_ListeningForButtonRebind
        {
            public MappableControllerButton mappableButton;
            public UIButtonSkins self;
        }

        public sealed class Params_FinishedListeningForKey
        {
            public UIButtonSkins self;
        }

        public sealed class Params_FinishedListeningForButton
        {
            public UIButtonSkins self;
        }

        public sealed class Params_GetButtonSkinFor_InputControlType
        {
            public InputControlType inputControlType;
            public UIButtonSkins self;
        }

        public sealed class Params_GetButtonSkinFor_string
        {
            public string buttonName;
            public UIButtonSkins self;
        }

        public sealed class Params_SetupRefs
        {
            public UIButtonSkins self;
        }

        public sealed class Params_AddMappableKey
        {
            public MappableKey b;
            public UIButtonSkins self;
        }

        public sealed class Params_RemoveMappableKey
        {
            public MappableKey b;
            public UIButtonSkins self;
        }

        public sealed class Params_AddMappableControllerButton
        {
            public MappableControllerButton b;
            public UIButtonSkins self;
        }

        public sealed class Params_RemoveMappableControllerButton
        {
            public MappableControllerButton b;
            public UIButtonSkins self;
        }

        public sealed class Params_orig_RefreshKeyMappings
        {
            public UIButtonSkins self;
        }

        public sealed class Params_orig_ShowCurrentKeyboardMappings
        {
            public UIButtonSkins self;
        }

        public sealed class Params_orig_RefreshButtonMappings
        {
            public UIButtonSkins self;
        }

        public sealed class Params_orig_ShowCurrentButtonMappings
        {
            public UIButtonSkins self;
        }

        public sealed class Params_orig_GetButtonSkinFor
        {
            public InputControlType inputControlType;
            public UIButtonSkins self;
        }

        public sealed class Params_orig_SetupRefs
        {
            public UIButtonSkins self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_listeningKey_BeforeArgs get_listeningKey
        {
            add
            {
                HookHandler._beforeget_listeningKey += value;
                HookHandler.Hookget_listeningKey();
            }
            remove => HookHandler._beforeget_listeningKey -= value;
        }

        public static event Delegates.set_listeningKey_BeforeArgs set_listeningKey
        {
            add
            {
                HookHandler._beforeset_listeningKey += value;
                HookHandler.Hookset_listeningKey();
            }
            remove => HookHandler._beforeset_listeningKey -= value;
        }

        public static event Delegates.get_listeningButton_BeforeArgs get_listeningButton
        {
            add
            {
                HookHandler._beforeget_listeningButton += value;
                HookHandler.Hookget_listeningButton();
            }
            remove => HookHandler._beforeget_listeningButton -= value;
        }

        public static event Delegates.set_listeningButton_BeforeArgs set_listeningButton
        {
            add
            {
                HookHandler._beforeset_listeningButton += value;
                HookHandler.Hookset_listeningButton();
            }
            remove => HookHandler._beforeset_listeningButton -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.GetButtonSkinFor_PlayerAction_BeforeArgs GetButtonSkinFor_PlayerAction
        {
            add
            {
                HookHandler._beforeGetButtonSkinFor_PlayerAction += value;
                HookHandler.HookGetButtonSkinFor_PlayerAction();
            }
            remove => HookHandler._beforeGetButtonSkinFor_PlayerAction -= value;
        }

        public static event Delegates.GetKeyboardSkinFor_BeforeArgs GetKeyboardSkinFor
        {
            add
            {
                HookHandler._beforeGetKeyboardSkinFor += value;
                HookHandler.HookGetKeyboardSkinFor();
            }
            remove => HookHandler._beforeGetKeyboardSkinFor -= value;
        }

        public static event Delegates.GetControllerButtonSkinFor_BeforeArgs GetControllerButtonSkinFor
        {
            add
            {
                HookHandler._beforeGetControllerButtonSkinFor += value;
                HookHandler.HookGetControllerButtonSkinFor();
            }
            remove => HookHandler._beforeGetControllerButtonSkinFor -= value;
        }

        public static event Delegates.GetButtonSkinFor_HeroActionButton_BeforeArgs GetButtonSkinFor_HeroActionButton
        {
            add
            {
                HookHandler._beforeGetButtonSkinFor_HeroActionButton += value;
                HookHandler.HookGetButtonSkinFor_HeroActionButton();
            }
            remove => HookHandler._beforeGetButtonSkinFor_HeroActionButton -= value;
        }

        public static event Delegates.ShowCurrentKeyboardMappings_BeforeArgs ShowCurrentKeyboardMappings
        {
            add
            {
                HookHandler._beforeShowCurrentKeyboardMappings += value;
                HookHandler.HookShowCurrentKeyboardMappings();
            }
            remove => HookHandler._beforeShowCurrentKeyboardMappings -= value;
        }

        public static event Delegates.ShowCurrentButtonMappings_BeforeArgs ShowCurrentButtonMappings
        {
            add
            {
                HookHandler._beforeShowCurrentButtonMappings += value;
                HookHandler.HookShowCurrentButtonMappings();
            }
            remove => HookHandler._beforeShowCurrentButtonMappings -= value;
        }

        public static event Delegates.RefreshKeyMappings_BeforeArgs RefreshKeyMappings
        {
            add
            {
                HookHandler._beforeRefreshKeyMappings += value;
                HookHandler.HookRefreshKeyMappings();
            }
            remove => HookHandler._beforeRefreshKeyMappings -= value;
        }

        public static event Delegates.RefreshButtonMappings_BeforeArgs RefreshButtonMappings
        {
            add
            {
                HookHandler._beforeRefreshButtonMappings += value;
                HookHandler.HookRefreshButtonMappings();
            }
            remove => HookHandler._beforeRefreshButtonMappings -= value;
        }

        public static event Delegates.ListeningForKeyRebind_BeforeArgs ListeningForKeyRebind
        {
            add
            {
                HookHandler._beforeListeningForKeyRebind += value;
                HookHandler.HookListeningForKeyRebind();
            }
            remove => HookHandler._beforeListeningForKeyRebind -= value;
        }

        public static event Delegates.ListeningForButtonRebind_BeforeArgs ListeningForButtonRebind
        {
            add
            {
                HookHandler._beforeListeningForButtonRebind += value;
                HookHandler.HookListeningForButtonRebind();
            }
            remove => HookHandler._beforeListeningForButtonRebind -= value;
        }

        public static event Delegates.FinishedListeningForKey_BeforeArgs FinishedListeningForKey
        {
            add
            {
                HookHandler._beforeFinishedListeningForKey += value;
                HookHandler.HookFinishedListeningForKey();
            }
            remove => HookHandler._beforeFinishedListeningForKey -= value;
        }

        public static event Delegates.FinishedListeningForButton_BeforeArgs FinishedListeningForButton
        {
            add
            {
                HookHandler._beforeFinishedListeningForButton += value;
                HookHandler.HookFinishedListeningForButton();
            }
            remove => HookHandler._beforeFinishedListeningForButton -= value;
        }

        public static event Delegates.GetButtonSkinFor_InputControlType_BeforeArgs GetButtonSkinFor_InputControlType
        {
            add
            {
                HookHandler._beforeGetButtonSkinFor_InputControlType += value;
                HookHandler.HookGetButtonSkinFor_InputControlType();
            }
            remove => HookHandler._beforeGetButtonSkinFor_InputControlType -= value;
        }

        public static event Delegates.GetButtonSkinFor_string_BeforeArgs GetButtonSkinFor_string
        {
            add
            {
                HookHandler._beforeGetButtonSkinFor_string += value;
                HookHandler.HookGetButtonSkinFor_string();
            }
            remove => HookHandler._beforeGetButtonSkinFor_string -= value;
        }

        public static event Delegates.SetupRefs_BeforeArgs SetupRefs
        {
            add
            {
                HookHandler._beforeSetupRefs += value;
                HookHandler.HookSetupRefs();
            }
            remove => HookHandler._beforeSetupRefs -= value;
        }

        public static event Delegates.AddMappableKey_BeforeArgs AddMappableKey
        {
            add
            {
                HookHandler._beforeAddMappableKey += value;
                HookHandler.HookAddMappableKey();
            }
            remove => HookHandler._beforeAddMappableKey -= value;
        }

        public static event Delegates.RemoveMappableKey_BeforeArgs RemoveMappableKey
        {
            add
            {
                HookHandler._beforeRemoveMappableKey += value;
                HookHandler.HookRemoveMappableKey();
            }
            remove => HookHandler._beforeRemoveMappableKey -= value;
        }

        public static event Delegates.AddMappableControllerButton_BeforeArgs AddMappableControllerButton
        {
            add
            {
                HookHandler._beforeAddMappableControllerButton += value;
                HookHandler.HookAddMappableControllerButton();
            }
            remove => HookHandler._beforeAddMappableControllerButton -= value;
        }

        public static event Delegates.RemoveMappableControllerButton_BeforeArgs RemoveMappableControllerButton
        {
            add
            {
                HookHandler._beforeRemoveMappableControllerButton += value;
                HookHandler.HookRemoveMappableControllerButton();
            }
            remove => HookHandler._beforeRemoveMappableControllerButton -= value;
        }

        public static event Delegates.orig_RefreshKeyMappings_BeforeArgs orig_RefreshKeyMappings
        {
            add
            {
                HookHandler._beforeorig_RefreshKeyMappings += value;
                HookHandler.Hookorig_RefreshKeyMappings();
            }
            remove => HookHandler._beforeorig_RefreshKeyMappings -= value;
        }

        public static event Delegates.orig_ShowCurrentKeyboardMappings_BeforeArgs orig_ShowCurrentKeyboardMappings
        {
            add
            {
                HookHandler._beforeorig_ShowCurrentKeyboardMappings += value;
                HookHandler.Hookorig_ShowCurrentKeyboardMappings();
            }
            remove => HookHandler._beforeorig_ShowCurrentKeyboardMappings -= value;
        }

        public static event Delegates.orig_RefreshButtonMappings_BeforeArgs orig_RefreshButtonMappings
        {
            add
            {
                HookHandler._beforeorig_RefreshButtonMappings += value;
                HookHandler.Hookorig_RefreshButtonMappings();
            }
            remove => HookHandler._beforeorig_RefreshButtonMappings -= value;
        }

        public static event Delegates.orig_ShowCurrentButtonMappings_BeforeArgs orig_ShowCurrentButtonMappings
        {
            add
            {
                HookHandler._beforeorig_ShowCurrentButtonMappings += value;
                HookHandler.Hookorig_ShowCurrentButtonMappings();
            }
            remove => HookHandler._beforeorig_ShowCurrentButtonMappings -= value;
        }

        public static event Delegates.orig_GetButtonSkinFor_BeforeArgs orig_GetButtonSkinFor
        {
            add
            {
                HookHandler._beforeorig_GetButtonSkinFor += value;
                HookHandler.Hookorig_GetButtonSkinFor();
            }
            remove => HookHandler._beforeorig_GetButtonSkinFor -= value;
        }

        public static event Delegates.orig_SetupRefs_BeforeArgs orig_SetupRefs
        {
            add
            {
                HookHandler._beforeorig_SetupRefs += value;
                HookHandler.Hookorig_SetupRefs();
            }
            remove => HookHandler._beforeorig_SetupRefs -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_listeningKey_NormalArgs get_listeningKey
        {
            add
            {
                HookHandler._afterget_listeningKey += value;
                HookHandler.Hookget_listeningKey();
            }
            remove => HookHandler._afterget_listeningKey -= value;
        }

        public static event Delegates.set_listeningKey_NormalArgs set_listeningKey
        {
            add
            {
                HookHandler._afterset_listeningKey += value;
                HookHandler.Hookset_listeningKey();
            }
            remove => HookHandler._afterset_listeningKey -= value;
        }

        public static event Delegates.get_listeningButton_NormalArgs get_listeningButton
        {
            add
            {
                HookHandler._afterget_listeningButton += value;
                HookHandler.Hookget_listeningButton();
            }
            remove => HookHandler._afterget_listeningButton -= value;
        }

        public static event Delegates.set_listeningButton_NormalArgs set_listeningButton
        {
            add
            {
                HookHandler._afterset_listeningButton += value;
                HookHandler.Hookset_listeningButton();
            }
            remove => HookHandler._afterset_listeningButton -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.GetButtonSkinFor_PlayerAction_NormalArgs GetButtonSkinFor_PlayerAction
        {
            add
            {
                HookHandler._afterGetButtonSkinFor_PlayerAction += value;
                HookHandler.HookGetButtonSkinFor_PlayerAction();
            }
            remove => HookHandler._afterGetButtonSkinFor_PlayerAction -= value;
        }

        public static event Delegates.GetKeyboardSkinFor_NormalArgs GetKeyboardSkinFor
        {
            add
            {
                HookHandler._afterGetKeyboardSkinFor += value;
                HookHandler.HookGetKeyboardSkinFor();
            }
            remove => HookHandler._afterGetKeyboardSkinFor -= value;
        }

        public static event Delegates.GetControllerButtonSkinFor_NormalArgs GetControllerButtonSkinFor
        {
            add
            {
                HookHandler._afterGetControllerButtonSkinFor += value;
                HookHandler.HookGetControllerButtonSkinFor();
            }
            remove => HookHandler._afterGetControllerButtonSkinFor -= value;
        }

        public static event Delegates.GetButtonSkinFor_HeroActionButton_NormalArgs GetButtonSkinFor_HeroActionButton
        {
            add
            {
                HookHandler._afterGetButtonSkinFor_HeroActionButton += value;
                HookHandler.HookGetButtonSkinFor_HeroActionButton();
            }
            remove => HookHandler._afterGetButtonSkinFor_HeroActionButton -= value;
        }

        public static event Delegates.RefreshKeyMappings_NormalArgs RefreshKeyMappings
        {
            add
            {
                HookHandler._afterRefreshKeyMappings += value;
                HookHandler.HookRefreshKeyMappings();
            }
            remove => HookHandler._afterRefreshKeyMappings -= value;
        }

        public static event Delegates.RefreshButtonMappings_NormalArgs RefreshButtonMappings
        {
            add
            {
                HookHandler._afterRefreshButtonMappings += value;
                HookHandler.HookRefreshButtonMappings();
            }
            remove => HookHandler._afterRefreshButtonMappings -= value;
        }

        public static event Delegates.ListeningForKeyRebind_NormalArgs ListeningForKeyRebind
        {
            add
            {
                HookHandler._afterListeningForKeyRebind += value;
                HookHandler.HookListeningForKeyRebind();
            }
            remove => HookHandler._afterListeningForKeyRebind -= value;
        }

        public static event Delegates.ListeningForButtonRebind_NormalArgs ListeningForButtonRebind
        {
            add
            {
                HookHandler._afterListeningForButtonRebind += value;
                HookHandler.HookListeningForButtonRebind();
            }
            remove => HookHandler._afterListeningForButtonRebind -= value;
        }

        public static event Delegates.FinishedListeningForKey_NormalArgs FinishedListeningForKey
        {
            add
            {
                HookHandler._afterFinishedListeningForKey += value;
                HookHandler.HookFinishedListeningForKey();
            }
            remove => HookHandler._afterFinishedListeningForKey -= value;
        }

        public static event Delegates.FinishedListeningForButton_NormalArgs FinishedListeningForButton
        {
            add
            {
                HookHandler._afterFinishedListeningForButton += value;
                HookHandler.HookFinishedListeningForButton();
            }
            remove => HookHandler._afterFinishedListeningForButton -= value;
        }

        public static event Delegates.GetButtonSkinFor_InputControlType_NormalArgs GetButtonSkinFor_InputControlType
        {
            add
            {
                HookHandler._afterGetButtonSkinFor_InputControlType += value;
                HookHandler.HookGetButtonSkinFor_InputControlType();
            }
            remove => HookHandler._afterGetButtonSkinFor_InputControlType -= value;
        }

        public static event Delegates.GetButtonSkinFor_string_NormalArgs GetButtonSkinFor_string
        {
            add
            {
                HookHandler._afterGetButtonSkinFor_string += value;
                HookHandler.HookGetButtonSkinFor_string();
            }
            remove => HookHandler._afterGetButtonSkinFor_string -= value;
        }

        public static event Delegates.SetupRefs_NormalArgs SetupRefs
        {
            add
            {
                HookHandler._afterSetupRefs += value;
                HookHandler.HookSetupRefs();
            }
            remove => HookHandler._afterSetupRefs -= value;
        }

        public static event Delegates.AddMappableKey_NormalArgs AddMappableKey
        {
            add
            {
                HookHandler._afterAddMappableKey += value;
                HookHandler.HookAddMappableKey();
            }
            remove => HookHandler._afterAddMappableKey -= value;
        }

        public static event Delegates.RemoveMappableKey_NormalArgs RemoveMappableKey
        {
            add
            {
                HookHandler._afterRemoveMappableKey += value;
                HookHandler.HookRemoveMappableKey();
            }
            remove => HookHandler._afterRemoveMappableKey -= value;
        }

        public static event Delegates.AddMappableControllerButton_NormalArgs AddMappableControllerButton
        {
            add
            {
                HookHandler._afterAddMappableControllerButton += value;
                HookHandler.HookAddMappableControllerButton();
            }
            remove => HookHandler._afterAddMappableControllerButton -= value;
        }

        public static event Delegates.RemoveMappableControllerButton_NormalArgs RemoveMappableControllerButton
        {
            add
            {
                HookHandler._afterRemoveMappableControllerButton += value;
                HookHandler.HookRemoveMappableControllerButton();
            }
            remove => HookHandler._afterRemoveMappableControllerButton -= value;
        }

        public static event Delegates.orig_RefreshKeyMappings_NormalArgs orig_RefreshKeyMappings
        {
            add
            {
                HookHandler._afterorig_RefreshKeyMappings += value;
                HookHandler.Hookorig_RefreshKeyMappings();
            }
            remove => HookHandler._afterorig_RefreshKeyMappings -= value;
        }

        public static event Delegates.orig_RefreshButtonMappings_NormalArgs orig_RefreshButtonMappings
        {
            add
            {
                HookHandler._afterorig_RefreshButtonMappings += value;
                HookHandler.Hookorig_RefreshButtonMappings();
            }
            remove => HookHandler._afterorig_RefreshButtonMappings -= value;
        }

        public static event Delegates.orig_GetButtonSkinFor_NormalArgs orig_GetButtonSkinFor
        {
            add
            {
                HookHandler._afterorig_GetButtonSkinFor += value;
                HookHandler.Hookorig_GetButtonSkinFor();
            }
            remove => HookHandler._afterorig_GetButtonSkinFor -= value;
        }

        public static event Delegates.orig_SetupRefs_NormalArgs orig_SetupRefs
        {
            add
            {
                HookHandler._afterorig_SetupRefs += value;
                HookHandler.Hookorig_SetupRefs();
            }
            remove => HookHandler._afterorig_SetupRefs -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_listeningKey_NormalArgs get_listeningKey
        {
            add => HookEndpointManager.Add<Delegates.get_listeningKey_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "get_listeningKey"), value);
            remove => HookEndpointManager.Remove<Delegates.get_listeningKey_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "get_listeningKey"), value);
        }

        public static event Delegates.set_listeningKey_NormalArgs set_listeningKey
        {
            add => HookEndpointManager.Add<Delegates.set_listeningKey_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "set_listeningKey"), value);
            remove => HookEndpointManager.Remove<Delegates.set_listeningKey_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "set_listeningKey"), value);
        }

        public static event Delegates.get_listeningButton_NormalArgs get_listeningButton
        {
            add => HookEndpointManager.Add<Delegates.get_listeningButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "get_listeningButton"), value);
            remove => HookEndpointManager.Remove<Delegates.get_listeningButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "get_listeningButton"), value);
        }

        public static event Delegates.set_listeningButton_NormalArgs set_listeningButton
        {
            add => HookEndpointManager.Add<Delegates.set_listeningButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "set_listeningButton"), value);
            remove => HookEndpointManager.Remove<Delegates.set_listeningButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "set_listeningButton"), value);
        }

        public static event On.UIButtonSkins.hook_Start Start
        {
            add => On.UIButtonSkins.Start += value;
            remove => On.UIButtonSkins.Start -= value;
        }

        public static event On.UIButtonSkins.hook_OnEnable OnEnable
        {
            add => On.UIButtonSkins.OnEnable += value;
            remove => On.UIButtonSkins.OnEnable -= value;
        }

        public static event On.UIButtonSkins.hook_GetButtonSkinFor_PlayerAction GetButtonSkinFor_PlayerAction
        {
            add => On.UIButtonSkins.GetButtonSkinFor_PlayerAction += value;
            remove => On.UIButtonSkins.GetButtonSkinFor_PlayerAction -= value;
        }

        public static event On.UIButtonSkins.hook_GetKeyboardSkinFor GetKeyboardSkinFor
        {
            add => On.UIButtonSkins.GetKeyboardSkinFor += value;
            remove => On.UIButtonSkins.GetKeyboardSkinFor -= value;
        }

        public static event On.UIButtonSkins.hook_GetControllerButtonSkinFor GetControllerButtonSkinFor
        {
            add => On.UIButtonSkins.GetControllerButtonSkinFor += value;
            remove => On.UIButtonSkins.GetControllerButtonSkinFor -= value;
        }

        public static event On.UIButtonSkins.hook_GetButtonSkinFor_HeroActionButton GetButtonSkinFor_HeroActionButton
        {
            add => On.UIButtonSkins.GetButtonSkinFor_HeroActionButton += value;
            remove => On.UIButtonSkins.GetButtonSkinFor_HeroActionButton -= value;
        }

        public static event On.UIButtonSkins.hook_ShowCurrentKeyboardMappings ShowCurrentKeyboardMappings
        {
            add => On.UIButtonSkins.ShowCurrentKeyboardMappings += value;
            remove => On.UIButtonSkins.ShowCurrentKeyboardMappings -= value;
        }

        public static event On.UIButtonSkins.hook_ShowCurrentButtonMappings ShowCurrentButtonMappings
        {
            add => On.UIButtonSkins.ShowCurrentButtonMappings += value;
            remove => On.UIButtonSkins.ShowCurrentButtonMappings -= value;
        }

        public static event On.UIButtonSkins.hook_RefreshKeyMappings RefreshKeyMappings
        {
            add => On.UIButtonSkins.RefreshKeyMappings += value;
            remove => On.UIButtonSkins.RefreshKeyMappings -= value;
        }

        public static event On.UIButtonSkins.hook_RefreshButtonMappings RefreshButtonMappings
        {
            add => On.UIButtonSkins.RefreshButtonMappings += value;
            remove => On.UIButtonSkins.RefreshButtonMappings -= value;
        }

        public static event On.UIButtonSkins.hook_ListeningForKeyRebind ListeningForKeyRebind
        {
            add => On.UIButtonSkins.ListeningForKeyRebind += value;
            remove => On.UIButtonSkins.ListeningForKeyRebind -= value;
        }

        public static event On.UIButtonSkins.hook_ListeningForButtonRebind ListeningForButtonRebind
        {
            add => On.UIButtonSkins.ListeningForButtonRebind += value;
            remove => On.UIButtonSkins.ListeningForButtonRebind -= value;
        }

        public static event On.UIButtonSkins.hook_FinishedListeningForKey FinishedListeningForKey
        {
            add => On.UIButtonSkins.FinishedListeningForKey += value;
            remove => On.UIButtonSkins.FinishedListeningForKey -= value;
        }

        public static event On.UIButtonSkins.hook_FinishedListeningForButton FinishedListeningForButton
        {
            add => On.UIButtonSkins.FinishedListeningForButton += value;
            remove => On.UIButtonSkins.FinishedListeningForButton -= value;
        }

        public static event On.UIButtonSkins.hook_GetButtonSkinFor_InputControlType GetButtonSkinFor_InputControlType
        {
            add => On.UIButtonSkins.GetButtonSkinFor_InputControlType += value;
            remove => On.UIButtonSkins.GetButtonSkinFor_InputControlType -= value;
        }

        public static event On.UIButtonSkins.hook_GetButtonSkinFor_string GetButtonSkinFor_string
        {
            add => On.UIButtonSkins.GetButtonSkinFor_string += value;
            remove => On.UIButtonSkins.GetButtonSkinFor_string -= value;
        }

        public static event On.UIButtonSkins.hook_SetupRefs SetupRefs
        {
            add => On.UIButtonSkins.SetupRefs += value;
            remove => On.UIButtonSkins.SetupRefs -= value;
        }

        public static event Delegates.AddMappableKey_NormalArgs AddMappableKey
        {
            add => HookEndpointManager.Add<Delegates.AddMappableKey_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "AddMappableKey"), value);
            remove => HookEndpointManager.Remove<Delegates.AddMappableKey_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "AddMappableKey"), value);
        }

        public static event Delegates.RemoveMappableKey_NormalArgs RemoveMappableKey
        {
            add => HookEndpointManager.Add<Delegates.RemoveMappableKey_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "RemoveMappableKey"), value);
            remove => HookEndpointManager.Remove<Delegates.RemoveMappableKey_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "RemoveMappableKey"), value);
        }

        public static event Delegates.AddMappableControllerButton_NormalArgs AddMappableControllerButton
        {
            add => HookEndpointManager.Add<Delegates.AddMappableControllerButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "AddMappableControllerButton"), value);
            remove => HookEndpointManager.Remove<Delegates.AddMappableControllerButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "AddMappableControllerButton"), value);
        }

        public static event Delegates.RemoveMappableControllerButton_NormalArgs RemoveMappableControllerButton
        {
            add => HookEndpointManager.Add<Delegates.RemoveMappableControllerButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "RemoveMappableControllerButton"), value);
            remove => HookEndpointManager.Remove<Delegates.RemoveMappableControllerButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "RemoveMappableControllerButton"), value);
        }

        public static event Delegates.orig_RefreshKeyMappings_NormalArgs orig_RefreshKeyMappings
        {
            add => HookEndpointManager.Add<Delegates.orig_RefreshKeyMappings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_RefreshKeyMappings"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_RefreshKeyMappings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_RefreshKeyMappings"), value);
        }

        public static event Delegates.orig_ShowCurrentKeyboardMappings_NormalArgs orig_ShowCurrentKeyboardMappings
        {
            add => HookEndpointManager.Add<Delegates.orig_ShowCurrentKeyboardMappings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_ShowCurrentKeyboardMappings"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_ShowCurrentKeyboardMappings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_ShowCurrentKeyboardMappings"), value);
        }

        public static event Delegates.orig_RefreshButtonMappings_NormalArgs orig_RefreshButtonMappings
        {
            add => HookEndpointManager.Add<Delegates.orig_RefreshButtonMappings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_RefreshButtonMappings"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_RefreshButtonMappings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_RefreshButtonMappings"), value);
        }

        public static event Delegates.orig_ShowCurrentButtonMappings_NormalArgs orig_ShowCurrentButtonMappings
        {
            add => HookEndpointManager.Add<Delegates.orig_ShowCurrentButtonMappings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_ShowCurrentButtonMappings"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_ShowCurrentButtonMappings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_ShowCurrentButtonMappings"), value);
        }

        public static event Delegates.orig_GetButtonSkinFor_NormalArgs orig_GetButtonSkinFor
        {
            add => HookEndpointManager.Add<Delegates.orig_GetButtonSkinFor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_GetButtonSkinFor"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_GetButtonSkinFor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_GetButtonSkinFor"), value);
        }

        public static event Delegates.orig_SetupRefs_NormalArgs orig_SetupRefs
        {
            add => HookEndpointManager.Add<Delegates.orig_SetupRefs_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_SetupRefs"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_SetupRefs_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_SetupRefs"), value);
        }
    }
}