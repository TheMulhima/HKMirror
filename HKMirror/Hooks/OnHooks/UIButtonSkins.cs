using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for UIButtonSkins class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnUIButtonSkins
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_listeningKey()
{
if (!HookedList.Contains("get_listeningKey"))
{
HookedList.Add("get_listeningKey");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "get_listeningKey", true), get_listeningKey);

}
}
internal static event Delegates.get_listeningKey_BeforeArgs _beforeget_listeningKey;
internal static event Delegates.get_listeningKey_AfterArgs _afterget_listeningKey;
private static MappableKey get_listeningKey(Func<UIButtonSkins, MappableKey> orig, UIButtonSkins self)
{
Delegates.Params_get_listeningKey @params = new() 
{
self = self
};
if (_beforeget_listeningKey != null)
{
foreach (Delegates.get_listeningKey_BeforeArgs toInvoke in _beforeget_listeningKey.GetInvocationList())
{
try
{
_beforeget_listeningKey?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_listeningKey != null)
{
foreach (Delegates.get_listeningKey_AfterArgs toInvoke in _afterget_listeningKey.GetInvocationList())
{
try
{
retVal = _afterget_listeningKey.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_listeningKey()
{
if (!HookedList.Contains("set_listeningKey"))
{
HookedList.Add("set_listeningKey");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "set_listeningKey", true), set_listeningKey);

}
}
internal static event Delegates.set_listeningKey_BeforeArgs _beforeset_listeningKey;
internal static event Delegates.set_listeningKey_AfterArgs _afterset_listeningKey;
private static void set_listeningKey(Action<UIButtonSkins,  MappableKey> orig, UIButtonSkins self,  MappableKey value)
{
Delegates.Params_set_listeningKey @params = new() 
{
self = self
, value = value
};
if (_beforeset_listeningKey != null)
{
foreach (Delegates.set_listeningKey_BeforeArgs toInvoke in _beforeset_listeningKey.GetInvocationList())
{
try
{
_beforeset_listeningKey?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_listeningKey != null)
{
foreach (Delegates.set_listeningKey_AfterArgs toInvoke in _afterset_listeningKey.GetInvocationList())
{
try
{
_afterset_listeningKey.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_listeningButton()
{
if (!HookedList.Contains("get_listeningButton"))
{
HookedList.Add("get_listeningButton");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "get_listeningButton", true), get_listeningButton);

}
}
internal static event Delegates.get_listeningButton_BeforeArgs _beforeget_listeningButton;
internal static event Delegates.get_listeningButton_AfterArgs _afterget_listeningButton;
private static MappableControllerButton get_listeningButton(Func<UIButtonSkins, MappableControllerButton> orig, UIButtonSkins self)
{
Delegates.Params_get_listeningButton @params = new() 
{
self = self
};
if (_beforeget_listeningButton != null)
{
foreach (Delegates.get_listeningButton_BeforeArgs toInvoke in _beforeget_listeningButton.GetInvocationList())
{
try
{
_beforeget_listeningButton?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_listeningButton != null)
{
foreach (Delegates.get_listeningButton_AfterArgs toInvoke in _afterget_listeningButton.GetInvocationList())
{
try
{
retVal = _afterget_listeningButton.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_listeningButton()
{
if (!HookedList.Contains("set_listeningButton"))
{
HookedList.Add("set_listeningButton");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "set_listeningButton", true), set_listeningButton);

}
}
internal static event Delegates.set_listeningButton_BeforeArgs _beforeset_listeningButton;
internal static event Delegates.set_listeningButton_AfterArgs _afterset_listeningButton;
private static void set_listeningButton(Action<UIButtonSkins,  MappableControllerButton> orig, UIButtonSkins self,  MappableControllerButton value)
{
Delegates.Params_set_listeningButton @params = new() 
{
self = self
, value = value
};
if (_beforeset_listeningButton != null)
{
foreach (Delegates.set_listeningButton_BeforeArgs toInvoke in _beforeset_listeningButton.GetInvocationList())
{
try
{
_beforeset_listeningButton?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_listeningButton != null)
{
foreach (Delegates.set_listeningButton_AfterArgs toInvoke in _afterset_listeningButton.GetInvocationList())
{
try
{
_afterset_listeningButton.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.UIButtonSkins.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.UIButtonSkins.orig_Start orig,UIButtonSkins self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
On.UIButtonSkins.OnEnable += OnEnable;

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(On.UIButtonSkins.orig_OnEnable orig,UIButtonSkins self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetButtonSkinFor_PlayerAction()
{
if (!HookedList.Contains("GetButtonSkinFor_PlayerAction"))
{
HookedList.Add("GetButtonSkinFor_PlayerAction");
On.UIButtonSkins.GetButtonSkinFor_PlayerAction += GetButtonSkinFor_PlayerAction;

}
}
internal static event Delegates.GetButtonSkinFor_PlayerAction_BeforeArgs _beforeGetButtonSkinFor_PlayerAction;
internal static event Delegates.GetButtonSkinFor_PlayerAction_AfterArgs _afterGetButtonSkinFor_PlayerAction;
private static ButtonSkin GetButtonSkinFor_PlayerAction(On.UIButtonSkins.orig_GetButtonSkinFor_PlayerAction orig,UIButtonSkins self,  InControl.PlayerAction action)
{
Delegates.Params_GetButtonSkinFor_PlayerAction @params = new() 
{
self = self
, action = action
};
if (_beforeGetButtonSkinFor_PlayerAction != null)
{
foreach (Delegates.GetButtonSkinFor_PlayerAction_BeforeArgs toInvoke in _beforeGetButtonSkinFor_PlayerAction.GetInvocationList())
{
try
{
_beforeGetButtonSkinFor_PlayerAction?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
action = @params.action;
var retVal = orig(self, action);
if (_afterGetButtonSkinFor_PlayerAction != null)
{
foreach (Delegates.GetButtonSkinFor_PlayerAction_AfterArgs toInvoke in _afterGetButtonSkinFor_PlayerAction.GetInvocationList())
{
try
{
retVal = _afterGetButtonSkinFor_PlayerAction.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetKeyboardSkinFor()
{
if (!HookedList.Contains("GetKeyboardSkinFor"))
{
HookedList.Add("GetKeyboardSkinFor");
On.UIButtonSkins.GetKeyboardSkinFor += GetKeyboardSkinFor;

}
}
internal static event Delegates.GetKeyboardSkinFor_BeforeArgs _beforeGetKeyboardSkinFor;
internal static event Delegates.GetKeyboardSkinFor_AfterArgs _afterGetKeyboardSkinFor;
private static ButtonSkin GetKeyboardSkinFor(On.UIButtonSkins.orig_GetKeyboardSkinFor orig,UIButtonSkins self,  InControl.PlayerAction action)
{
Delegates.Params_GetKeyboardSkinFor @params = new() 
{
self = self
, action = action
};
if (_beforeGetKeyboardSkinFor != null)
{
foreach (Delegates.GetKeyboardSkinFor_BeforeArgs toInvoke in _beforeGetKeyboardSkinFor.GetInvocationList())
{
try
{
_beforeGetKeyboardSkinFor?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
action = @params.action;
var retVal = orig(self, action);
if (_afterGetKeyboardSkinFor != null)
{
foreach (Delegates.GetKeyboardSkinFor_AfterArgs toInvoke in _afterGetKeyboardSkinFor.GetInvocationList())
{
try
{
retVal = _afterGetKeyboardSkinFor.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetControllerButtonSkinFor()
{
if (!HookedList.Contains("GetControllerButtonSkinFor"))
{
HookedList.Add("GetControllerButtonSkinFor");
On.UIButtonSkins.GetControllerButtonSkinFor += GetControllerButtonSkinFor;

}
}
internal static event Delegates.GetControllerButtonSkinFor_BeforeArgs _beforeGetControllerButtonSkinFor;
internal static event Delegates.GetControllerButtonSkinFor_AfterArgs _afterGetControllerButtonSkinFor;
private static ButtonSkin GetControllerButtonSkinFor(On.UIButtonSkins.orig_GetControllerButtonSkinFor orig,UIButtonSkins self,  InControl.PlayerAction action)
{
Delegates.Params_GetControllerButtonSkinFor @params = new() 
{
self = self
, action = action
};
if (_beforeGetControllerButtonSkinFor != null)
{
foreach (Delegates.GetControllerButtonSkinFor_BeforeArgs toInvoke in _beforeGetControllerButtonSkinFor.GetInvocationList())
{
try
{
_beforeGetControllerButtonSkinFor?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
action = @params.action;
var retVal = orig(self, action);
if (_afterGetControllerButtonSkinFor != null)
{
foreach (Delegates.GetControllerButtonSkinFor_AfterArgs toInvoke in _afterGetControllerButtonSkinFor.GetInvocationList())
{
try
{
retVal = _afterGetControllerButtonSkinFor.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetButtonSkinFor_HeroActionButton()
{
if (!HookedList.Contains("GetButtonSkinFor_HeroActionButton"))
{
HookedList.Add("GetButtonSkinFor_HeroActionButton");
On.UIButtonSkins.GetButtonSkinFor_HeroActionButton += GetButtonSkinFor_HeroActionButton;

}
}
internal static event Delegates.GetButtonSkinFor_HeroActionButton_BeforeArgs _beforeGetButtonSkinFor_HeroActionButton;
internal static event Delegates.GetButtonSkinFor_HeroActionButton_AfterArgs _afterGetButtonSkinFor_HeroActionButton;
private static ButtonSkin GetButtonSkinFor_HeroActionButton(On.UIButtonSkins.orig_GetButtonSkinFor_HeroActionButton orig,UIButtonSkins self,  GlobalEnums.HeroActionButton actionButton)
{
Delegates.Params_GetButtonSkinFor_HeroActionButton @params = new() 
{
self = self
, actionButton = actionButton
};
if (_beforeGetButtonSkinFor_HeroActionButton != null)
{
foreach (Delegates.GetButtonSkinFor_HeroActionButton_BeforeArgs toInvoke in _beforeGetButtonSkinFor_HeroActionButton.GetInvocationList())
{
try
{
_beforeGetButtonSkinFor_HeroActionButton?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
actionButton = @params.actionButton;
var retVal = orig(self, actionButton);
if (_afterGetButtonSkinFor_HeroActionButton != null)
{
foreach (Delegates.GetButtonSkinFor_HeroActionButton_AfterArgs toInvoke in _afterGetButtonSkinFor_HeroActionButton.GetInvocationList())
{
try
{
retVal = _afterGetButtonSkinFor_HeroActionButton.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookShowCurrentKeyboardMappings()
{
if (!HookedList.Contains("ShowCurrentKeyboardMappings"))
{
HookedList.Add("ShowCurrentKeyboardMappings");
On.UIButtonSkins.ShowCurrentKeyboardMappings += ShowCurrentKeyboardMappings;

}
}
internal static event Delegates.ShowCurrentKeyboardMappings_BeforeArgs _beforeShowCurrentKeyboardMappings;
private static System.Collections.IEnumerator ShowCurrentKeyboardMappings(On.UIButtonSkins.orig_ShowCurrentKeyboardMappings orig,UIButtonSkins self)
{
Delegates.Params_ShowCurrentKeyboardMappings @params = new() 
{
self = self
};
if (_beforeShowCurrentKeyboardMappings != null)
{
foreach (Delegates.ShowCurrentKeyboardMappings_BeforeArgs toInvoke in _beforeShowCurrentKeyboardMappings.GetInvocationList())
{
try
{
_beforeShowCurrentKeyboardMappings?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
internal static void HookShowCurrentButtonMappings()
{
if (!HookedList.Contains("ShowCurrentButtonMappings"))
{
HookedList.Add("ShowCurrentButtonMappings");
On.UIButtonSkins.ShowCurrentButtonMappings += ShowCurrentButtonMappings;

}
}
internal static event Delegates.ShowCurrentButtonMappings_BeforeArgs _beforeShowCurrentButtonMappings;
private static System.Collections.IEnumerator ShowCurrentButtonMappings(On.UIButtonSkins.orig_ShowCurrentButtonMappings orig,UIButtonSkins self)
{
Delegates.Params_ShowCurrentButtonMappings @params = new() 
{
self = self
};
if (_beforeShowCurrentButtonMappings != null)
{
foreach (Delegates.ShowCurrentButtonMappings_BeforeArgs toInvoke in _beforeShowCurrentButtonMappings.GetInvocationList())
{
try
{
_beforeShowCurrentButtonMappings?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
internal static void HookRefreshKeyMappings()
{
if (!HookedList.Contains("RefreshKeyMappings"))
{
HookedList.Add("RefreshKeyMappings");
On.UIButtonSkins.RefreshKeyMappings += RefreshKeyMappings;

}
}
internal static event Delegates.RefreshKeyMappings_BeforeArgs _beforeRefreshKeyMappings;
internal static event Delegates.RefreshKeyMappings_AfterArgs _afterRefreshKeyMappings;
private static void RefreshKeyMappings(On.UIButtonSkins.orig_RefreshKeyMappings orig,UIButtonSkins self)
{
Delegates.Params_RefreshKeyMappings @params = new() 
{
self = self
};
if (_beforeRefreshKeyMappings != null)
{
foreach (Delegates.RefreshKeyMappings_BeforeArgs toInvoke in _beforeRefreshKeyMappings.GetInvocationList())
{
try
{
_beforeRefreshKeyMappings?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterRefreshKeyMappings != null)
{
foreach (Delegates.RefreshKeyMappings_AfterArgs toInvoke in _afterRefreshKeyMappings.GetInvocationList())
{
try
{
_afterRefreshKeyMappings.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookRefreshButtonMappings()
{
if (!HookedList.Contains("RefreshButtonMappings"))
{
HookedList.Add("RefreshButtonMappings");
On.UIButtonSkins.RefreshButtonMappings += RefreshButtonMappings;

}
}
internal static event Delegates.RefreshButtonMappings_BeforeArgs _beforeRefreshButtonMappings;
internal static event Delegates.RefreshButtonMappings_AfterArgs _afterRefreshButtonMappings;
private static void RefreshButtonMappings(On.UIButtonSkins.orig_RefreshButtonMappings orig,UIButtonSkins self)
{
Delegates.Params_RefreshButtonMappings @params = new() 
{
self = self
};
if (_beforeRefreshButtonMappings != null)
{
foreach (Delegates.RefreshButtonMappings_BeforeArgs toInvoke in _beforeRefreshButtonMappings.GetInvocationList())
{
try
{
_beforeRefreshButtonMappings?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterRefreshButtonMappings != null)
{
foreach (Delegates.RefreshButtonMappings_AfterArgs toInvoke in _afterRefreshButtonMappings.GetInvocationList())
{
try
{
_afterRefreshButtonMappings.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookListeningForKeyRebind()
{
if (!HookedList.Contains("ListeningForKeyRebind"))
{
HookedList.Add("ListeningForKeyRebind");
On.UIButtonSkins.ListeningForKeyRebind += ListeningForKeyRebind;

}
}
internal static event Delegates.ListeningForKeyRebind_BeforeArgs _beforeListeningForKeyRebind;
internal static event Delegates.ListeningForKeyRebind_AfterArgs _afterListeningForKeyRebind;
private static void ListeningForKeyRebind(On.UIButtonSkins.orig_ListeningForKeyRebind orig,UIButtonSkins self,  MappableKey mappableKey)
{
Delegates.Params_ListeningForKeyRebind @params = new() 
{
self = self
, mappableKey = mappableKey
};
if (_beforeListeningForKeyRebind != null)
{
foreach (Delegates.ListeningForKeyRebind_BeforeArgs toInvoke in _beforeListeningForKeyRebind.GetInvocationList())
{
try
{
_beforeListeningForKeyRebind?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
mappableKey = @params.mappableKey;
orig(self, mappableKey);
if (_afterListeningForKeyRebind != null)
{
foreach (Delegates.ListeningForKeyRebind_AfterArgs toInvoke in _afterListeningForKeyRebind.GetInvocationList())
{
try
{
_afterListeningForKeyRebind.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookListeningForButtonRebind()
{
if (!HookedList.Contains("ListeningForButtonRebind"))
{
HookedList.Add("ListeningForButtonRebind");
On.UIButtonSkins.ListeningForButtonRebind += ListeningForButtonRebind;

}
}
internal static event Delegates.ListeningForButtonRebind_BeforeArgs _beforeListeningForButtonRebind;
internal static event Delegates.ListeningForButtonRebind_AfterArgs _afterListeningForButtonRebind;
private static void ListeningForButtonRebind(On.UIButtonSkins.orig_ListeningForButtonRebind orig,UIButtonSkins self,  MappableControllerButton mappableButton)
{
Delegates.Params_ListeningForButtonRebind @params = new() 
{
self = self
, mappableButton = mappableButton
};
if (_beforeListeningForButtonRebind != null)
{
foreach (Delegates.ListeningForButtonRebind_BeforeArgs toInvoke in _beforeListeningForButtonRebind.GetInvocationList())
{
try
{
_beforeListeningForButtonRebind?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
mappableButton = @params.mappableButton;
orig(self, mappableButton);
if (_afterListeningForButtonRebind != null)
{
foreach (Delegates.ListeningForButtonRebind_AfterArgs toInvoke in _afterListeningForButtonRebind.GetInvocationList())
{
try
{
_afterListeningForButtonRebind.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookFinishedListeningForKey()
{
if (!HookedList.Contains("FinishedListeningForKey"))
{
HookedList.Add("FinishedListeningForKey");
On.UIButtonSkins.FinishedListeningForKey += FinishedListeningForKey;

}
}
internal static event Delegates.FinishedListeningForKey_BeforeArgs _beforeFinishedListeningForKey;
internal static event Delegates.FinishedListeningForKey_AfterArgs _afterFinishedListeningForKey;
private static void FinishedListeningForKey(On.UIButtonSkins.orig_FinishedListeningForKey orig,UIButtonSkins self)
{
Delegates.Params_FinishedListeningForKey @params = new() 
{
self = self
};
if (_beforeFinishedListeningForKey != null)
{
foreach (Delegates.FinishedListeningForKey_BeforeArgs toInvoke in _beforeFinishedListeningForKey.GetInvocationList())
{
try
{
_beforeFinishedListeningForKey?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterFinishedListeningForKey != null)
{
foreach (Delegates.FinishedListeningForKey_AfterArgs toInvoke in _afterFinishedListeningForKey.GetInvocationList())
{
try
{
_afterFinishedListeningForKey.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookFinishedListeningForButton()
{
if (!HookedList.Contains("FinishedListeningForButton"))
{
HookedList.Add("FinishedListeningForButton");
On.UIButtonSkins.FinishedListeningForButton += FinishedListeningForButton;

}
}
internal static event Delegates.FinishedListeningForButton_BeforeArgs _beforeFinishedListeningForButton;
internal static event Delegates.FinishedListeningForButton_AfterArgs _afterFinishedListeningForButton;
private static void FinishedListeningForButton(On.UIButtonSkins.orig_FinishedListeningForButton orig,UIButtonSkins self)
{
Delegates.Params_FinishedListeningForButton @params = new() 
{
self = self
};
if (_beforeFinishedListeningForButton != null)
{
foreach (Delegates.FinishedListeningForButton_BeforeArgs toInvoke in _beforeFinishedListeningForButton.GetInvocationList())
{
try
{
_beforeFinishedListeningForButton?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterFinishedListeningForButton != null)
{
foreach (Delegates.FinishedListeningForButton_AfterArgs toInvoke in _afterFinishedListeningForButton.GetInvocationList())
{
try
{
_afterFinishedListeningForButton.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetButtonSkinFor_InputControlType()
{
if (!HookedList.Contains("GetButtonSkinFor_InputControlType"))
{
HookedList.Add("GetButtonSkinFor_InputControlType");
On.UIButtonSkins.GetButtonSkinFor_InputControlType += GetButtonSkinFor_InputControlType;

}
}
internal static event Delegates.GetButtonSkinFor_InputControlType_BeforeArgs _beforeGetButtonSkinFor_InputControlType;
internal static event Delegates.GetButtonSkinFor_InputControlType_AfterArgs _afterGetButtonSkinFor_InputControlType;
private static ButtonSkin GetButtonSkinFor_InputControlType(On.UIButtonSkins.orig_GetButtonSkinFor_InputControlType orig,UIButtonSkins self,  InControl.InputControlType inputControlType)
{
Delegates.Params_GetButtonSkinFor_InputControlType @params = new() 
{
self = self
, inputControlType = inputControlType
};
if (_beforeGetButtonSkinFor_InputControlType != null)
{
foreach (Delegates.GetButtonSkinFor_InputControlType_BeforeArgs toInvoke in _beforeGetButtonSkinFor_InputControlType.GetInvocationList())
{
try
{
_beforeGetButtonSkinFor_InputControlType?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
inputControlType = @params.inputControlType;
var retVal = orig(self, inputControlType);
if (_afterGetButtonSkinFor_InputControlType != null)
{
foreach (Delegates.GetButtonSkinFor_InputControlType_AfterArgs toInvoke in _afterGetButtonSkinFor_InputControlType.GetInvocationList())
{
try
{
retVal = _afterGetButtonSkinFor_InputControlType.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetButtonSkinFor_string()
{
if (!HookedList.Contains("GetButtonSkinFor_string"))
{
HookedList.Add("GetButtonSkinFor_string");
On.UIButtonSkins.GetButtonSkinFor_string += GetButtonSkinFor_string;

}
}
internal static event Delegates.GetButtonSkinFor_string_BeforeArgs _beforeGetButtonSkinFor_string;
internal static event Delegates.GetButtonSkinFor_string_AfterArgs _afterGetButtonSkinFor_string;
private static ButtonSkin GetButtonSkinFor_string(On.UIButtonSkins.orig_GetButtonSkinFor_string orig,UIButtonSkins self,  string buttonName)
{
Delegates.Params_GetButtonSkinFor_string @params = new() 
{
self = self
, buttonName = buttonName
};
if (_beforeGetButtonSkinFor_string != null)
{
foreach (Delegates.GetButtonSkinFor_string_BeforeArgs toInvoke in _beforeGetButtonSkinFor_string.GetInvocationList())
{
try
{
_beforeGetButtonSkinFor_string?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
buttonName = @params.buttonName;
var retVal = orig(self, buttonName);
if (_afterGetButtonSkinFor_string != null)
{
foreach (Delegates.GetButtonSkinFor_string_AfterArgs toInvoke in _afterGetButtonSkinFor_string.GetInvocationList())
{
try
{
retVal = _afterGetButtonSkinFor_string.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookSetupRefs()
{
if (!HookedList.Contains("SetupRefs"))
{
HookedList.Add("SetupRefs");
On.UIButtonSkins.SetupRefs += SetupRefs;

}
}
internal static event Delegates.SetupRefs_BeforeArgs _beforeSetupRefs;
internal static event Delegates.SetupRefs_AfterArgs _afterSetupRefs;
private static void SetupRefs(On.UIButtonSkins.orig_SetupRefs orig,UIButtonSkins self)
{
Delegates.Params_SetupRefs @params = new() 
{
self = self
};
if (_beforeSetupRefs != null)
{
foreach (Delegates.SetupRefs_BeforeArgs toInvoke in _beforeSetupRefs.GetInvocationList())
{
try
{
_beforeSetupRefs?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetupRefs != null)
{
foreach (Delegates.SetupRefs_AfterArgs toInvoke in _afterSetupRefs.GetInvocationList())
{
try
{
_afterSetupRefs.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAddMappableKey()
{
if (!HookedList.Contains("AddMappableKey"))
{
HookedList.Add("AddMappableKey");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "AddMappableKey", true), AddMappableKey);

}
}
internal static event Delegates.AddMappableKey_BeforeArgs _beforeAddMappableKey;
internal static event Delegates.AddMappableKey_AfterArgs _afterAddMappableKey;
private static void AddMappableKey(Action<UIButtonSkins,  MappableKey> orig, UIButtonSkins self,  MappableKey b)
{
Delegates.Params_AddMappableKey @params = new() 
{
self = self
, b = b
};
if (_beforeAddMappableKey != null)
{
foreach (Delegates.AddMappableKey_BeforeArgs toInvoke in _beforeAddMappableKey.GetInvocationList())
{
try
{
_beforeAddMappableKey?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
b = @params.b;
orig(self, b);
if (_afterAddMappableKey != null)
{
foreach (Delegates.AddMappableKey_AfterArgs toInvoke in _afterAddMappableKey.GetInvocationList())
{
try
{
_afterAddMappableKey.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookRemoveMappableKey()
{
if (!HookedList.Contains("RemoveMappableKey"))
{
HookedList.Add("RemoveMappableKey");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "RemoveMappableKey", true), RemoveMappableKey);

}
}
internal static event Delegates.RemoveMappableKey_BeforeArgs _beforeRemoveMappableKey;
internal static event Delegates.RemoveMappableKey_AfterArgs _afterRemoveMappableKey;
private static void RemoveMappableKey(Action<UIButtonSkins,  MappableKey> orig, UIButtonSkins self,  MappableKey b)
{
Delegates.Params_RemoveMappableKey @params = new() 
{
self = self
, b = b
};
if (_beforeRemoveMappableKey != null)
{
foreach (Delegates.RemoveMappableKey_BeforeArgs toInvoke in _beforeRemoveMappableKey.GetInvocationList())
{
try
{
_beforeRemoveMappableKey?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
b = @params.b;
orig(self, b);
if (_afterRemoveMappableKey != null)
{
foreach (Delegates.RemoveMappableKey_AfterArgs toInvoke in _afterRemoveMappableKey.GetInvocationList())
{
try
{
_afterRemoveMappableKey.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAddMappableControllerButton()
{
if (!HookedList.Contains("AddMappableControllerButton"))
{
HookedList.Add("AddMappableControllerButton");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "AddMappableControllerButton", true), AddMappableControllerButton);

}
}
internal static event Delegates.AddMappableControllerButton_BeforeArgs _beforeAddMappableControllerButton;
internal static event Delegates.AddMappableControllerButton_AfterArgs _afterAddMappableControllerButton;
private static void AddMappableControllerButton(Action<UIButtonSkins,  MappableControllerButton> orig, UIButtonSkins self,  MappableControllerButton b)
{
Delegates.Params_AddMappableControllerButton @params = new() 
{
self = self
, b = b
};
if (_beforeAddMappableControllerButton != null)
{
foreach (Delegates.AddMappableControllerButton_BeforeArgs toInvoke in _beforeAddMappableControllerButton.GetInvocationList())
{
try
{
_beforeAddMappableControllerButton?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
b = @params.b;
orig(self, b);
if (_afterAddMappableControllerButton != null)
{
foreach (Delegates.AddMappableControllerButton_AfterArgs toInvoke in _afterAddMappableControllerButton.GetInvocationList())
{
try
{
_afterAddMappableControllerButton.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookRemoveMappableControllerButton()
{
if (!HookedList.Contains("RemoveMappableControllerButton"))
{
HookedList.Add("RemoveMappableControllerButton");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "RemoveMappableControllerButton", true), RemoveMappableControllerButton);

}
}
internal static event Delegates.RemoveMappableControllerButton_BeforeArgs _beforeRemoveMappableControllerButton;
internal static event Delegates.RemoveMappableControllerButton_AfterArgs _afterRemoveMappableControllerButton;
private static void RemoveMappableControllerButton(Action<UIButtonSkins,  MappableControllerButton> orig, UIButtonSkins self,  MappableControllerButton b)
{
Delegates.Params_RemoveMappableControllerButton @params = new() 
{
self = self
, b = b
};
if (_beforeRemoveMappableControllerButton != null)
{
foreach (Delegates.RemoveMappableControllerButton_BeforeArgs toInvoke in _beforeRemoveMappableControllerButton.GetInvocationList())
{
try
{
_beforeRemoveMappableControllerButton?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
b = @params.b;
orig(self, b);
if (_afterRemoveMappableControllerButton != null)
{
foreach (Delegates.RemoveMappableControllerButton_AfterArgs toInvoke in _afterRemoveMappableControllerButton.GetInvocationList())
{
try
{
_afterRemoveMappableControllerButton.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookorig_RefreshKeyMappings()
{
if (!HookedList.Contains("orig_RefreshKeyMappings"))
{
HookedList.Add("orig_RefreshKeyMappings");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_RefreshKeyMappings", true), orig_RefreshKeyMappings);

}
}
internal static event Delegates.orig_RefreshKeyMappings_BeforeArgs _beforeorig_RefreshKeyMappings;
internal static event Delegates.orig_RefreshKeyMappings_AfterArgs _afterorig_RefreshKeyMappings;
private static void orig_RefreshKeyMappings(Action<UIButtonSkins> orig, UIButtonSkins self)
{
Delegates.Params_orig_RefreshKeyMappings @params = new() 
{
self = self
};
if (_beforeorig_RefreshKeyMappings != null)
{
foreach (Delegates.orig_RefreshKeyMappings_BeforeArgs toInvoke in _beforeorig_RefreshKeyMappings.GetInvocationList())
{
try
{
_beforeorig_RefreshKeyMappings?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterorig_RefreshKeyMappings != null)
{
foreach (Delegates.orig_RefreshKeyMappings_AfterArgs toInvoke in _afterorig_RefreshKeyMappings.GetInvocationList())
{
try
{
_afterorig_RefreshKeyMappings.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookorig_ShowCurrentKeyboardMappings()
{
if (!HookedList.Contains("orig_ShowCurrentKeyboardMappings"))
{
HookedList.Add("orig_ShowCurrentKeyboardMappings");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_ShowCurrentKeyboardMappings", true), orig_ShowCurrentKeyboardMappings);

}
}
internal static event Delegates.orig_ShowCurrentKeyboardMappings_BeforeArgs _beforeorig_ShowCurrentKeyboardMappings;
private static System.Collections.IEnumerator orig_ShowCurrentKeyboardMappings(Func<UIButtonSkins, System.Collections.IEnumerator> orig, UIButtonSkins self)
{
Delegates.Params_orig_ShowCurrentKeyboardMappings @params = new() 
{
self = self
};
if (_beforeorig_ShowCurrentKeyboardMappings != null)
{
foreach (Delegates.orig_ShowCurrentKeyboardMappings_BeforeArgs toInvoke in _beforeorig_ShowCurrentKeyboardMappings.GetInvocationList())
{
try
{
_beforeorig_ShowCurrentKeyboardMappings?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
internal static void Hookorig_RefreshButtonMappings()
{
if (!HookedList.Contains("orig_RefreshButtonMappings"))
{
HookedList.Add("orig_RefreshButtonMappings");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_RefreshButtonMappings", true), orig_RefreshButtonMappings);

}
}
internal static event Delegates.orig_RefreshButtonMappings_BeforeArgs _beforeorig_RefreshButtonMappings;
internal static event Delegates.orig_RefreshButtonMappings_AfterArgs _afterorig_RefreshButtonMappings;
private static void orig_RefreshButtonMappings(Action<UIButtonSkins> orig, UIButtonSkins self)
{
Delegates.Params_orig_RefreshButtonMappings @params = new() 
{
self = self
};
if (_beforeorig_RefreshButtonMappings != null)
{
foreach (Delegates.orig_RefreshButtonMappings_BeforeArgs toInvoke in _beforeorig_RefreshButtonMappings.GetInvocationList())
{
try
{
_beforeorig_RefreshButtonMappings?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterorig_RefreshButtonMappings != null)
{
foreach (Delegates.orig_RefreshButtonMappings_AfterArgs toInvoke in _afterorig_RefreshButtonMappings.GetInvocationList())
{
try
{
_afterorig_RefreshButtonMappings.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookorig_ShowCurrentButtonMappings()
{
if (!HookedList.Contains("orig_ShowCurrentButtonMappings"))
{
HookedList.Add("orig_ShowCurrentButtonMappings");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_ShowCurrentButtonMappings", true), orig_ShowCurrentButtonMappings);

}
}
internal static event Delegates.orig_ShowCurrentButtonMappings_BeforeArgs _beforeorig_ShowCurrentButtonMappings;
private static System.Collections.IEnumerator orig_ShowCurrentButtonMappings(Func<UIButtonSkins, System.Collections.IEnumerator> orig, UIButtonSkins self)
{
Delegates.Params_orig_ShowCurrentButtonMappings @params = new() 
{
self = self
};
if (_beforeorig_ShowCurrentButtonMappings != null)
{
foreach (Delegates.orig_ShowCurrentButtonMappings_BeforeArgs toInvoke in _beforeorig_ShowCurrentButtonMappings.GetInvocationList())
{
try
{
_beforeorig_ShowCurrentButtonMappings?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
internal static void Hookorig_GetButtonSkinFor()
{
if (!HookedList.Contains("orig_GetButtonSkinFor"))
{
HookedList.Add("orig_GetButtonSkinFor");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_GetButtonSkinFor", true), orig_GetButtonSkinFor);

}
}
internal static event Delegates.orig_GetButtonSkinFor_BeforeArgs _beforeorig_GetButtonSkinFor;
internal static event Delegates.orig_GetButtonSkinFor_AfterArgs _afterorig_GetButtonSkinFor;
private static ButtonSkin orig_GetButtonSkinFor(Func<UIButtonSkins,  InControl.InputControlType, ButtonSkin> orig, UIButtonSkins self,  InControl.InputControlType inputControlType)
{
Delegates.Params_orig_GetButtonSkinFor @params = new() 
{
self = self
, inputControlType = inputControlType
};
if (_beforeorig_GetButtonSkinFor != null)
{
foreach (Delegates.orig_GetButtonSkinFor_BeforeArgs toInvoke in _beforeorig_GetButtonSkinFor.GetInvocationList())
{
try
{
_beforeorig_GetButtonSkinFor?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
inputControlType = @params.inputControlType;
var retVal = orig(self, inputControlType);
if (_afterorig_GetButtonSkinFor != null)
{
foreach (Delegates.orig_GetButtonSkinFor_AfterArgs toInvoke in _afterorig_GetButtonSkinFor.GetInvocationList())
{
try
{
retVal = _afterorig_GetButtonSkinFor.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookorig_SetupRefs()
{
if (!HookedList.Contains("orig_SetupRefs"))
{
HookedList.Add("orig_SetupRefs");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_SetupRefs", true), orig_SetupRefs);

}
}
internal static event Delegates.orig_SetupRefs_BeforeArgs _beforeorig_SetupRefs;
internal static event Delegates.orig_SetupRefs_AfterArgs _afterorig_SetupRefs;
private static void orig_SetupRefs(Action<UIButtonSkins> orig, UIButtonSkins self)
{
Delegates.Params_orig_SetupRefs @params = new() 
{
self = self
};
if (_beforeorig_SetupRefs != null)
{
foreach (Delegates.orig_SetupRefs_BeforeArgs toInvoke in _beforeorig_SetupRefs.GetInvocationList())
{
try
{
_beforeorig_SetupRefs?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterorig_SetupRefs != null)
{
foreach (Delegates.orig_SetupRefs_AfterArgs toInvoke in _afterorig_SetupRefs.GetInvocationList())
{
try
{
_afterorig_SetupRefs.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_listeningKey
{
public UIButtonSkins self;
}
public delegate void get_listeningKey_BeforeArgs(Params_get_listeningKey args);
public delegate MappableKey get_listeningKey_AfterArgs(Params_get_listeningKey args, MappableKey ret);
public delegate MappableKey get_listeningKey_WithArgs (Func<UIButtonSkins, MappableKey> orig, UIButtonSkins self);
public sealed class Params_set_listeningKey
{
public UIButtonSkins self;
public MappableKey value;
}
public delegate void set_listeningKey_BeforeArgs(Params_set_listeningKey args);
public delegate void set_listeningKey_AfterArgs(Params_set_listeningKey args);
public delegate void set_listeningKey_WithArgs (Action<UIButtonSkins,  MappableKey> orig, UIButtonSkins self,  MappableKey value);
public sealed class Params_get_listeningButton
{
public UIButtonSkins self;
}
public delegate void get_listeningButton_BeforeArgs(Params_get_listeningButton args);
public delegate MappableControllerButton get_listeningButton_AfterArgs(Params_get_listeningButton args, MappableControllerButton ret);
public delegate MappableControllerButton get_listeningButton_WithArgs (Func<UIButtonSkins, MappableControllerButton> orig, UIButtonSkins self);
public sealed class Params_set_listeningButton
{
public UIButtonSkins self;
public MappableControllerButton value;
}
public delegate void set_listeningButton_BeforeArgs(Params_set_listeningButton args);
public delegate void set_listeningButton_AfterArgs(Params_set_listeningButton args);
public delegate void set_listeningButton_WithArgs (Action<UIButtonSkins,  MappableControllerButton> orig, UIButtonSkins self,  MappableControllerButton value);
public sealed class Params_Start
{
public UIButtonSkins self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<UIButtonSkins> orig, UIButtonSkins self);
public sealed class Params_OnEnable
{
public UIButtonSkins self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<UIButtonSkins> orig, UIButtonSkins self);
public sealed class Params_GetButtonSkinFor_PlayerAction
{
public UIButtonSkins self;
public InControl.PlayerAction action;
}
public delegate void GetButtonSkinFor_PlayerAction_BeforeArgs(Params_GetButtonSkinFor_PlayerAction args);
public delegate ButtonSkin GetButtonSkinFor_PlayerAction_AfterArgs(Params_GetButtonSkinFor_PlayerAction args, ButtonSkin ret);
public delegate ButtonSkin GetButtonSkinFor_PlayerAction_WithArgs (Func<UIButtonSkins,  InControl.PlayerAction, ButtonSkin> orig, UIButtonSkins self,  InControl.PlayerAction action);
public sealed class Params_GetKeyboardSkinFor
{
public UIButtonSkins self;
public InControl.PlayerAction action;
}
public delegate void GetKeyboardSkinFor_BeforeArgs(Params_GetKeyboardSkinFor args);
public delegate ButtonSkin GetKeyboardSkinFor_AfterArgs(Params_GetKeyboardSkinFor args, ButtonSkin ret);
public delegate ButtonSkin GetKeyboardSkinFor_WithArgs (Func<UIButtonSkins,  InControl.PlayerAction, ButtonSkin> orig, UIButtonSkins self,  InControl.PlayerAction action);
public sealed class Params_GetControllerButtonSkinFor
{
public UIButtonSkins self;
public InControl.PlayerAction action;
}
public delegate void GetControllerButtonSkinFor_BeforeArgs(Params_GetControllerButtonSkinFor args);
public delegate ButtonSkin GetControllerButtonSkinFor_AfterArgs(Params_GetControllerButtonSkinFor args, ButtonSkin ret);
public delegate ButtonSkin GetControllerButtonSkinFor_WithArgs (Func<UIButtonSkins,  InControl.PlayerAction, ButtonSkin> orig, UIButtonSkins self,  InControl.PlayerAction action);
public sealed class Params_GetButtonSkinFor_HeroActionButton
{
public UIButtonSkins self;
public GlobalEnums.HeroActionButton actionButton;
}
public delegate void GetButtonSkinFor_HeroActionButton_BeforeArgs(Params_GetButtonSkinFor_HeroActionButton args);
public delegate ButtonSkin GetButtonSkinFor_HeroActionButton_AfterArgs(Params_GetButtonSkinFor_HeroActionButton args, ButtonSkin ret);
public delegate ButtonSkin GetButtonSkinFor_HeroActionButton_WithArgs (Func<UIButtonSkins,  GlobalEnums.HeroActionButton, ButtonSkin> orig, UIButtonSkins self,  GlobalEnums.HeroActionButton actionButton);
public sealed class Params_ShowCurrentKeyboardMappings
{
public UIButtonSkins self;
}
public delegate void ShowCurrentKeyboardMappings_BeforeArgs(Params_ShowCurrentKeyboardMappings args);
public delegate System.Collections.IEnumerator ShowCurrentKeyboardMappings_AfterArgs(Params_ShowCurrentKeyboardMappings args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator ShowCurrentKeyboardMappings_WithArgs (Func<UIButtonSkins, System.Collections.IEnumerator> orig, UIButtonSkins self);
public sealed class Params_ShowCurrentButtonMappings
{
public UIButtonSkins self;
}
public delegate void ShowCurrentButtonMappings_BeforeArgs(Params_ShowCurrentButtonMappings args);
public delegate System.Collections.IEnumerator ShowCurrentButtonMappings_AfterArgs(Params_ShowCurrentButtonMappings args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator ShowCurrentButtonMappings_WithArgs (Func<UIButtonSkins, System.Collections.IEnumerator> orig, UIButtonSkins self);
public sealed class Params_RefreshKeyMappings
{
public UIButtonSkins self;
}
public delegate void RefreshKeyMappings_BeforeArgs(Params_RefreshKeyMappings args);
public delegate void RefreshKeyMappings_AfterArgs(Params_RefreshKeyMappings args);
public delegate void RefreshKeyMappings_WithArgs (Action<UIButtonSkins> orig, UIButtonSkins self);
public sealed class Params_RefreshButtonMappings
{
public UIButtonSkins self;
}
public delegate void RefreshButtonMappings_BeforeArgs(Params_RefreshButtonMappings args);
public delegate void RefreshButtonMappings_AfterArgs(Params_RefreshButtonMappings args);
public delegate void RefreshButtonMappings_WithArgs (Action<UIButtonSkins> orig, UIButtonSkins self);
public sealed class Params_ListeningForKeyRebind
{
public UIButtonSkins self;
public MappableKey mappableKey;
}
public delegate void ListeningForKeyRebind_BeforeArgs(Params_ListeningForKeyRebind args);
public delegate void ListeningForKeyRebind_AfterArgs(Params_ListeningForKeyRebind args);
public delegate void ListeningForKeyRebind_WithArgs (Action<UIButtonSkins,  MappableKey> orig, UIButtonSkins self,  MappableKey mappableKey);
public sealed class Params_ListeningForButtonRebind
{
public UIButtonSkins self;
public MappableControllerButton mappableButton;
}
public delegate void ListeningForButtonRebind_BeforeArgs(Params_ListeningForButtonRebind args);
public delegate void ListeningForButtonRebind_AfterArgs(Params_ListeningForButtonRebind args);
public delegate void ListeningForButtonRebind_WithArgs (Action<UIButtonSkins,  MappableControllerButton> orig, UIButtonSkins self,  MappableControllerButton mappableButton);
public sealed class Params_FinishedListeningForKey
{
public UIButtonSkins self;
}
public delegate void FinishedListeningForKey_BeforeArgs(Params_FinishedListeningForKey args);
public delegate void FinishedListeningForKey_AfterArgs(Params_FinishedListeningForKey args);
public delegate void FinishedListeningForKey_WithArgs (Action<UIButtonSkins> orig, UIButtonSkins self);
public sealed class Params_FinishedListeningForButton
{
public UIButtonSkins self;
}
public delegate void FinishedListeningForButton_BeforeArgs(Params_FinishedListeningForButton args);
public delegate void FinishedListeningForButton_AfterArgs(Params_FinishedListeningForButton args);
public delegate void FinishedListeningForButton_WithArgs (Action<UIButtonSkins> orig, UIButtonSkins self);
public sealed class Params_GetButtonSkinFor_InputControlType
{
public UIButtonSkins self;
public InControl.InputControlType inputControlType;
}
public delegate void GetButtonSkinFor_InputControlType_BeforeArgs(Params_GetButtonSkinFor_InputControlType args);
public delegate ButtonSkin GetButtonSkinFor_InputControlType_AfterArgs(Params_GetButtonSkinFor_InputControlType args, ButtonSkin ret);
public delegate ButtonSkin GetButtonSkinFor_InputControlType_WithArgs (Func<UIButtonSkins,  InControl.InputControlType, ButtonSkin> orig, UIButtonSkins self,  InControl.InputControlType inputControlType);
public sealed class Params_GetButtonSkinFor_string
{
public UIButtonSkins self;
public string buttonName;
}
public delegate void GetButtonSkinFor_string_BeforeArgs(Params_GetButtonSkinFor_string args);
public delegate ButtonSkin GetButtonSkinFor_string_AfterArgs(Params_GetButtonSkinFor_string args, ButtonSkin ret);
public delegate ButtonSkin GetButtonSkinFor_string_WithArgs (Func<UIButtonSkins,  string, ButtonSkin> orig, UIButtonSkins self,  string buttonName);
public sealed class Params_SetupRefs
{
public UIButtonSkins self;
}
public delegate void SetupRefs_BeforeArgs(Params_SetupRefs args);
public delegate void SetupRefs_AfterArgs(Params_SetupRefs args);
public delegate void SetupRefs_WithArgs (Action<UIButtonSkins> orig, UIButtonSkins self);
public sealed class Params_AddMappableKey
{
public UIButtonSkins self;
public MappableKey b;
}
public delegate void AddMappableKey_BeforeArgs(Params_AddMappableKey args);
public delegate void AddMappableKey_AfterArgs(Params_AddMappableKey args);
public delegate void AddMappableKey_WithArgs (Action<UIButtonSkins,  MappableKey> orig, UIButtonSkins self,  MappableKey b);
public sealed class Params_RemoveMappableKey
{
public UIButtonSkins self;
public MappableKey b;
}
public delegate void RemoveMappableKey_BeforeArgs(Params_RemoveMappableKey args);
public delegate void RemoveMappableKey_AfterArgs(Params_RemoveMappableKey args);
public delegate void RemoveMappableKey_WithArgs (Action<UIButtonSkins,  MappableKey> orig, UIButtonSkins self,  MappableKey b);
public sealed class Params_AddMappableControllerButton
{
public UIButtonSkins self;
public MappableControllerButton b;
}
public delegate void AddMappableControllerButton_BeforeArgs(Params_AddMappableControllerButton args);
public delegate void AddMappableControllerButton_AfterArgs(Params_AddMappableControllerButton args);
public delegate void AddMappableControllerButton_WithArgs (Action<UIButtonSkins,  MappableControllerButton> orig, UIButtonSkins self,  MappableControllerButton b);
public sealed class Params_RemoveMappableControllerButton
{
public UIButtonSkins self;
public MappableControllerButton b;
}
public delegate void RemoveMappableControllerButton_BeforeArgs(Params_RemoveMappableControllerButton args);
public delegate void RemoveMappableControllerButton_AfterArgs(Params_RemoveMappableControllerButton args);
public delegate void RemoveMappableControllerButton_WithArgs (Action<UIButtonSkins,  MappableControllerButton> orig, UIButtonSkins self,  MappableControllerButton b);
public sealed class Params_orig_RefreshKeyMappings
{
public UIButtonSkins self;
}
public delegate void orig_RefreshKeyMappings_BeforeArgs(Params_orig_RefreshKeyMappings args);
public delegate void orig_RefreshKeyMappings_AfterArgs(Params_orig_RefreshKeyMappings args);
public delegate void orig_RefreshKeyMappings_WithArgs (Action<UIButtonSkins> orig, UIButtonSkins self);
public sealed class Params_orig_ShowCurrentKeyboardMappings
{
public UIButtonSkins self;
}
public delegate void orig_ShowCurrentKeyboardMappings_BeforeArgs(Params_orig_ShowCurrentKeyboardMappings args);
public delegate System.Collections.IEnumerator orig_ShowCurrentKeyboardMappings_AfterArgs(Params_orig_ShowCurrentKeyboardMappings args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator orig_ShowCurrentKeyboardMappings_WithArgs (Func<UIButtonSkins, System.Collections.IEnumerator> orig, UIButtonSkins self);
public sealed class Params_orig_RefreshButtonMappings
{
public UIButtonSkins self;
}
public delegate void orig_RefreshButtonMappings_BeforeArgs(Params_orig_RefreshButtonMappings args);
public delegate void orig_RefreshButtonMappings_AfterArgs(Params_orig_RefreshButtonMappings args);
public delegate void orig_RefreshButtonMappings_WithArgs (Action<UIButtonSkins> orig, UIButtonSkins self);
public sealed class Params_orig_ShowCurrentButtonMappings
{
public UIButtonSkins self;
}
public delegate void orig_ShowCurrentButtonMappings_BeforeArgs(Params_orig_ShowCurrentButtonMappings args);
public delegate System.Collections.IEnumerator orig_ShowCurrentButtonMappings_AfterArgs(Params_orig_ShowCurrentButtonMappings args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator orig_ShowCurrentButtonMappings_WithArgs (Func<UIButtonSkins, System.Collections.IEnumerator> orig, UIButtonSkins self);
public sealed class Params_orig_GetButtonSkinFor
{
public UIButtonSkins self;
public InControl.InputControlType inputControlType;
}
public delegate void orig_GetButtonSkinFor_BeforeArgs(Params_orig_GetButtonSkinFor args);
public delegate ButtonSkin orig_GetButtonSkinFor_AfterArgs(Params_orig_GetButtonSkinFor args, ButtonSkin ret);
public delegate ButtonSkin orig_GetButtonSkinFor_WithArgs (Func<UIButtonSkins,  InControl.InputControlType, ButtonSkin> orig, UIButtonSkins self,  InControl.InputControlType inputControlType);
public sealed class Params_orig_SetupRefs
{
public UIButtonSkins self;
}
public delegate void orig_SetupRefs_BeforeArgs(Params_orig_SetupRefs args);
public delegate void orig_SetupRefs_AfterArgs(Params_orig_SetupRefs args);
public delegate void orig_SetupRefs_WithArgs (Action<UIButtonSkins> orig, UIButtonSkins self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_listeningKey_BeforeArgs get_listeningKey
{
add
{

HookHandler._beforeget_listeningKey += value;
HookHandler.Hookget_listeningKey();
}
remove => HookHandler._beforeget_listeningKey -= value;
}
public static event Delegates.set_listeningKey_BeforeArgs set_listeningKey
{
add
{

HookHandler._beforeset_listeningKey += value;
HookHandler.Hookset_listeningKey();
}
remove => HookHandler._beforeset_listeningKey -= value;
}
public static event Delegates.get_listeningButton_BeforeArgs get_listeningButton
{
add
{

HookHandler._beforeget_listeningButton += value;
HookHandler.Hookget_listeningButton();
}
remove => HookHandler._beforeget_listeningButton -= value;
}
public static event Delegates.set_listeningButton_BeforeArgs set_listeningButton
{
add
{

HookHandler._beforeset_listeningButton += value;
HookHandler.Hookset_listeningButton();
}
remove => HookHandler._beforeset_listeningButton -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.GetButtonSkinFor_PlayerAction_BeforeArgs GetButtonSkinFor_PlayerAction
{
add
{

HookHandler._beforeGetButtonSkinFor_PlayerAction += value;
HookHandler.HookGetButtonSkinFor_PlayerAction();
}
remove => HookHandler._beforeGetButtonSkinFor_PlayerAction -= value;
}
public static event Delegates.GetKeyboardSkinFor_BeforeArgs GetKeyboardSkinFor
{
add
{

HookHandler._beforeGetKeyboardSkinFor += value;
HookHandler.HookGetKeyboardSkinFor();
}
remove => HookHandler._beforeGetKeyboardSkinFor -= value;
}
public static event Delegates.GetControllerButtonSkinFor_BeforeArgs GetControllerButtonSkinFor
{
add
{

HookHandler._beforeGetControllerButtonSkinFor += value;
HookHandler.HookGetControllerButtonSkinFor();
}
remove => HookHandler._beforeGetControllerButtonSkinFor -= value;
}
public static event Delegates.GetButtonSkinFor_HeroActionButton_BeforeArgs GetButtonSkinFor_HeroActionButton
{
add
{

HookHandler._beforeGetButtonSkinFor_HeroActionButton += value;
HookHandler.HookGetButtonSkinFor_HeroActionButton();
}
remove => HookHandler._beforeGetButtonSkinFor_HeroActionButton -= value;
}
public static event Delegates.ShowCurrentKeyboardMappings_BeforeArgs ShowCurrentKeyboardMappings
{
add
{

HookHandler._beforeShowCurrentKeyboardMappings += value;
HookHandler.HookShowCurrentKeyboardMappings();
}
remove => HookHandler._beforeShowCurrentKeyboardMappings -= value;
}
public static event Delegates.ShowCurrentButtonMappings_BeforeArgs ShowCurrentButtonMappings
{
add
{

HookHandler._beforeShowCurrentButtonMappings += value;
HookHandler.HookShowCurrentButtonMappings();
}
remove => HookHandler._beforeShowCurrentButtonMappings -= value;
}
public static event Delegates.RefreshKeyMappings_BeforeArgs RefreshKeyMappings
{
add
{

HookHandler._beforeRefreshKeyMappings += value;
HookHandler.HookRefreshKeyMappings();
}
remove => HookHandler._beforeRefreshKeyMappings -= value;
}
public static event Delegates.RefreshButtonMappings_BeforeArgs RefreshButtonMappings
{
add
{

HookHandler._beforeRefreshButtonMappings += value;
HookHandler.HookRefreshButtonMappings();
}
remove => HookHandler._beforeRefreshButtonMappings -= value;
}
public static event Delegates.ListeningForKeyRebind_BeforeArgs ListeningForKeyRebind
{
add
{

HookHandler._beforeListeningForKeyRebind += value;
HookHandler.HookListeningForKeyRebind();
}
remove => HookHandler._beforeListeningForKeyRebind -= value;
}
public static event Delegates.ListeningForButtonRebind_BeforeArgs ListeningForButtonRebind
{
add
{

HookHandler._beforeListeningForButtonRebind += value;
HookHandler.HookListeningForButtonRebind();
}
remove => HookHandler._beforeListeningForButtonRebind -= value;
}
public static event Delegates.FinishedListeningForKey_BeforeArgs FinishedListeningForKey
{
add
{

HookHandler._beforeFinishedListeningForKey += value;
HookHandler.HookFinishedListeningForKey();
}
remove => HookHandler._beforeFinishedListeningForKey -= value;
}
public static event Delegates.FinishedListeningForButton_BeforeArgs FinishedListeningForButton
{
add
{

HookHandler._beforeFinishedListeningForButton += value;
HookHandler.HookFinishedListeningForButton();
}
remove => HookHandler._beforeFinishedListeningForButton -= value;
}
public static event Delegates.GetButtonSkinFor_InputControlType_BeforeArgs GetButtonSkinFor_InputControlType
{
add
{

HookHandler._beforeGetButtonSkinFor_InputControlType += value;
HookHandler.HookGetButtonSkinFor_InputControlType();
}
remove => HookHandler._beforeGetButtonSkinFor_InputControlType -= value;
}
public static event Delegates.GetButtonSkinFor_string_BeforeArgs GetButtonSkinFor_string
{
add
{

HookHandler._beforeGetButtonSkinFor_string += value;
HookHandler.HookGetButtonSkinFor_string();
}
remove => HookHandler._beforeGetButtonSkinFor_string -= value;
}
public static event Delegates.SetupRefs_BeforeArgs SetupRefs
{
add
{

HookHandler._beforeSetupRefs += value;
HookHandler.HookSetupRefs();
}
remove => HookHandler._beforeSetupRefs -= value;
}
public static event Delegates.AddMappableKey_BeforeArgs AddMappableKey
{
add
{

HookHandler._beforeAddMappableKey += value;
HookHandler.HookAddMappableKey();
}
remove => HookHandler._beforeAddMappableKey -= value;
}
public static event Delegates.RemoveMappableKey_BeforeArgs RemoveMappableKey
{
add
{

HookHandler._beforeRemoveMappableKey += value;
HookHandler.HookRemoveMappableKey();
}
remove => HookHandler._beforeRemoveMappableKey -= value;
}
public static event Delegates.AddMappableControllerButton_BeforeArgs AddMappableControllerButton
{
add
{

HookHandler._beforeAddMappableControllerButton += value;
HookHandler.HookAddMappableControllerButton();
}
remove => HookHandler._beforeAddMappableControllerButton -= value;
}
public static event Delegates.RemoveMappableControllerButton_BeforeArgs RemoveMappableControllerButton
{
add
{

HookHandler._beforeRemoveMappableControllerButton += value;
HookHandler.HookRemoveMappableControllerButton();
}
remove => HookHandler._beforeRemoveMappableControllerButton -= value;
}
public static event Delegates.orig_RefreshKeyMappings_BeforeArgs orig_RefreshKeyMappings
{
add
{

HookHandler._beforeorig_RefreshKeyMappings += value;
HookHandler.Hookorig_RefreshKeyMappings();
}
remove => HookHandler._beforeorig_RefreshKeyMappings -= value;
}
public static event Delegates.orig_ShowCurrentKeyboardMappings_BeforeArgs orig_ShowCurrentKeyboardMappings
{
add
{

HookHandler._beforeorig_ShowCurrentKeyboardMappings += value;
HookHandler.Hookorig_ShowCurrentKeyboardMappings();
}
remove => HookHandler._beforeorig_ShowCurrentKeyboardMappings -= value;
}
public static event Delegates.orig_RefreshButtonMappings_BeforeArgs orig_RefreshButtonMappings
{
add
{

HookHandler._beforeorig_RefreshButtonMappings += value;
HookHandler.Hookorig_RefreshButtonMappings();
}
remove => HookHandler._beforeorig_RefreshButtonMappings -= value;
}
public static event Delegates.orig_ShowCurrentButtonMappings_BeforeArgs orig_ShowCurrentButtonMappings
{
add
{

HookHandler._beforeorig_ShowCurrentButtonMappings += value;
HookHandler.Hookorig_ShowCurrentButtonMappings();
}
remove => HookHandler._beforeorig_ShowCurrentButtonMappings -= value;
}
public static event Delegates.orig_GetButtonSkinFor_BeforeArgs orig_GetButtonSkinFor
{
add
{

HookHandler._beforeorig_GetButtonSkinFor += value;
HookHandler.Hookorig_GetButtonSkinFor();
}
remove => HookHandler._beforeorig_GetButtonSkinFor -= value;
}
public static event Delegates.orig_SetupRefs_BeforeArgs orig_SetupRefs
{
add
{

HookHandler._beforeorig_SetupRefs += value;
HookHandler.Hookorig_SetupRefs();
}
remove => HookHandler._beforeorig_SetupRefs -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_listeningKey_AfterArgs get_listeningKey
{
add
{

HookHandler._afterget_listeningKey += value;
HookHandler.Hookget_listeningKey();
}
remove => HookHandler._afterget_listeningKey -= value;
}
public static event Delegates.set_listeningKey_AfterArgs set_listeningKey
{
add
{

HookHandler._afterset_listeningKey += value;
HookHandler.Hookset_listeningKey();
}
remove => HookHandler._afterset_listeningKey -= value;
}
public static event Delegates.get_listeningButton_AfterArgs get_listeningButton
{
add
{

HookHandler._afterget_listeningButton += value;
HookHandler.Hookget_listeningButton();
}
remove => HookHandler._afterget_listeningButton -= value;
}
public static event Delegates.set_listeningButton_AfterArgs set_listeningButton
{
add
{

HookHandler._afterset_listeningButton += value;
HookHandler.Hookset_listeningButton();
}
remove => HookHandler._afterset_listeningButton -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.GetButtonSkinFor_PlayerAction_AfterArgs GetButtonSkinFor_PlayerAction
{
add
{

HookHandler._afterGetButtonSkinFor_PlayerAction += value;
HookHandler.HookGetButtonSkinFor_PlayerAction();
}
remove => HookHandler._afterGetButtonSkinFor_PlayerAction -= value;
}
public static event Delegates.GetKeyboardSkinFor_AfterArgs GetKeyboardSkinFor
{
add
{

HookHandler._afterGetKeyboardSkinFor += value;
HookHandler.HookGetKeyboardSkinFor();
}
remove => HookHandler._afterGetKeyboardSkinFor -= value;
}
public static event Delegates.GetControllerButtonSkinFor_AfterArgs GetControllerButtonSkinFor
{
add
{

HookHandler._afterGetControllerButtonSkinFor += value;
HookHandler.HookGetControllerButtonSkinFor();
}
remove => HookHandler._afterGetControllerButtonSkinFor -= value;
}
public static event Delegates.GetButtonSkinFor_HeroActionButton_AfterArgs GetButtonSkinFor_HeroActionButton
{
add
{

HookHandler._afterGetButtonSkinFor_HeroActionButton += value;
HookHandler.HookGetButtonSkinFor_HeroActionButton();
}
remove => HookHandler._afterGetButtonSkinFor_HeroActionButton -= value;
}
public static event Delegates.RefreshKeyMappings_AfterArgs RefreshKeyMappings
{
add
{

HookHandler._afterRefreshKeyMappings += value;
HookHandler.HookRefreshKeyMappings();
}
remove => HookHandler._afterRefreshKeyMappings -= value;
}
public static event Delegates.RefreshButtonMappings_AfterArgs RefreshButtonMappings
{
add
{

HookHandler._afterRefreshButtonMappings += value;
HookHandler.HookRefreshButtonMappings();
}
remove => HookHandler._afterRefreshButtonMappings -= value;
}
public static event Delegates.ListeningForKeyRebind_AfterArgs ListeningForKeyRebind
{
add
{

HookHandler._afterListeningForKeyRebind += value;
HookHandler.HookListeningForKeyRebind();
}
remove => HookHandler._afterListeningForKeyRebind -= value;
}
public static event Delegates.ListeningForButtonRebind_AfterArgs ListeningForButtonRebind
{
add
{

HookHandler._afterListeningForButtonRebind += value;
HookHandler.HookListeningForButtonRebind();
}
remove => HookHandler._afterListeningForButtonRebind -= value;
}
public static event Delegates.FinishedListeningForKey_AfterArgs FinishedListeningForKey
{
add
{

HookHandler._afterFinishedListeningForKey += value;
HookHandler.HookFinishedListeningForKey();
}
remove => HookHandler._afterFinishedListeningForKey -= value;
}
public static event Delegates.FinishedListeningForButton_AfterArgs FinishedListeningForButton
{
add
{

HookHandler._afterFinishedListeningForButton += value;
HookHandler.HookFinishedListeningForButton();
}
remove => HookHandler._afterFinishedListeningForButton -= value;
}
public static event Delegates.GetButtonSkinFor_InputControlType_AfterArgs GetButtonSkinFor_InputControlType
{
add
{

HookHandler._afterGetButtonSkinFor_InputControlType += value;
HookHandler.HookGetButtonSkinFor_InputControlType();
}
remove => HookHandler._afterGetButtonSkinFor_InputControlType -= value;
}
public static event Delegates.GetButtonSkinFor_string_AfterArgs GetButtonSkinFor_string
{
add
{

HookHandler._afterGetButtonSkinFor_string += value;
HookHandler.HookGetButtonSkinFor_string();
}
remove => HookHandler._afterGetButtonSkinFor_string -= value;
}
public static event Delegates.SetupRefs_AfterArgs SetupRefs
{
add
{

HookHandler._afterSetupRefs += value;
HookHandler.HookSetupRefs();
}
remove => HookHandler._afterSetupRefs -= value;
}
public static event Delegates.AddMappableKey_AfterArgs AddMappableKey
{
add
{

HookHandler._afterAddMappableKey += value;
HookHandler.HookAddMappableKey();
}
remove => HookHandler._afterAddMappableKey -= value;
}
public static event Delegates.RemoveMappableKey_AfterArgs RemoveMappableKey
{
add
{

HookHandler._afterRemoveMappableKey += value;
HookHandler.HookRemoveMappableKey();
}
remove => HookHandler._afterRemoveMappableKey -= value;
}
public static event Delegates.AddMappableControllerButton_AfterArgs AddMappableControllerButton
{
add
{

HookHandler._afterAddMappableControllerButton += value;
HookHandler.HookAddMappableControllerButton();
}
remove => HookHandler._afterAddMappableControllerButton -= value;
}
public static event Delegates.RemoveMappableControllerButton_AfterArgs RemoveMappableControllerButton
{
add
{

HookHandler._afterRemoveMappableControllerButton += value;
HookHandler.HookRemoveMappableControllerButton();
}
remove => HookHandler._afterRemoveMappableControllerButton -= value;
}
public static event Delegates.orig_RefreshKeyMappings_AfterArgs orig_RefreshKeyMappings
{
add
{

HookHandler._afterorig_RefreshKeyMappings += value;
HookHandler.Hookorig_RefreshKeyMappings();
}
remove => HookHandler._afterorig_RefreshKeyMappings -= value;
}
public static event Delegates.orig_RefreshButtonMappings_AfterArgs orig_RefreshButtonMappings
{
add
{

HookHandler._afterorig_RefreshButtonMappings += value;
HookHandler.Hookorig_RefreshButtonMappings();
}
remove => HookHandler._afterorig_RefreshButtonMappings -= value;
}
public static event Delegates.orig_GetButtonSkinFor_AfterArgs orig_GetButtonSkinFor
{
add
{

HookHandler._afterorig_GetButtonSkinFor += value;
HookHandler.Hookorig_GetButtonSkinFor();
}
remove => HookHandler._afterorig_GetButtonSkinFor -= value;
}
public static event Delegates.orig_SetupRefs_AfterArgs orig_SetupRefs
{
add
{

HookHandler._afterorig_SetupRefs += value;
HookHandler.Hookorig_SetupRefs();
}
remove => HookHandler._afterorig_SetupRefs -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_listeningKey_WithArgs get_listeningKey
{
add => HookEndpointManager.Add<Delegates.get_listeningKey_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "get_listeningKey", true), value);
remove => HookEndpointManager.Remove<Delegates.get_listeningKey_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "get_listeningKey", true), value);
}
public static event Delegates.set_listeningKey_WithArgs set_listeningKey
{
add => HookEndpointManager.Add<Delegates.set_listeningKey_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "set_listeningKey", true), value);
remove => HookEndpointManager.Remove<Delegates.set_listeningKey_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "set_listeningKey", true), value);
}
public static event Delegates.get_listeningButton_WithArgs get_listeningButton
{
add => HookEndpointManager.Add<Delegates.get_listeningButton_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "get_listeningButton", true), value);
remove => HookEndpointManager.Remove<Delegates.get_listeningButton_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "get_listeningButton", true), value);
}
public static event Delegates.set_listeningButton_WithArgs set_listeningButton
{
add => HookEndpointManager.Add<Delegates.set_listeningButton_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "set_listeningButton", true), value);
remove => HookEndpointManager.Remove<Delegates.set_listeningButton_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "set_listeningButton", true), value);
}
public static event On.UIButtonSkins.hook_Start Start
{
add => On.UIButtonSkins.Start += value;
remove => On.UIButtonSkins.Start -= value;
}
public static event On.UIButtonSkins.hook_OnEnable OnEnable
{
add => On.UIButtonSkins.OnEnable += value;
remove => On.UIButtonSkins.OnEnable -= value;
}
public static event On.UIButtonSkins.hook_GetButtonSkinFor_PlayerAction GetButtonSkinFor_PlayerAction
{
add => On.UIButtonSkins.GetButtonSkinFor_PlayerAction += value;
remove => On.UIButtonSkins.GetButtonSkinFor_PlayerAction -= value;
}
public static event On.UIButtonSkins.hook_GetKeyboardSkinFor GetKeyboardSkinFor
{
add => On.UIButtonSkins.GetKeyboardSkinFor += value;
remove => On.UIButtonSkins.GetKeyboardSkinFor -= value;
}
public static event On.UIButtonSkins.hook_GetControllerButtonSkinFor GetControllerButtonSkinFor
{
add => On.UIButtonSkins.GetControllerButtonSkinFor += value;
remove => On.UIButtonSkins.GetControllerButtonSkinFor -= value;
}
public static event On.UIButtonSkins.hook_GetButtonSkinFor_HeroActionButton GetButtonSkinFor_HeroActionButton
{
add => On.UIButtonSkins.GetButtonSkinFor_HeroActionButton += value;
remove => On.UIButtonSkins.GetButtonSkinFor_HeroActionButton -= value;
}
public static event On.UIButtonSkins.hook_ShowCurrentKeyboardMappings ShowCurrentKeyboardMappings
{
add => On.UIButtonSkins.ShowCurrentKeyboardMappings += value;
remove => On.UIButtonSkins.ShowCurrentKeyboardMappings -= value;
}
public static event On.UIButtonSkins.hook_ShowCurrentButtonMappings ShowCurrentButtonMappings
{
add => On.UIButtonSkins.ShowCurrentButtonMappings += value;
remove => On.UIButtonSkins.ShowCurrentButtonMappings -= value;
}
public static event On.UIButtonSkins.hook_RefreshKeyMappings RefreshKeyMappings
{
add => On.UIButtonSkins.RefreshKeyMappings += value;
remove => On.UIButtonSkins.RefreshKeyMappings -= value;
}
public static event On.UIButtonSkins.hook_RefreshButtonMappings RefreshButtonMappings
{
add => On.UIButtonSkins.RefreshButtonMappings += value;
remove => On.UIButtonSkins.RefreshButtonMappings -= value;
}
public static event On.UIButtonSkins.hook_ListeningForKeyRebind ListeningForKeyRebind
{
add => On.UIButtonSkins.ListeningForKeyRebind += value;
remove => On.UIButtonSkins.ListeningForKeyRebind -= value;
}
public static event On.UIButtonSkins.hook_ListeningForButtonRebind ListeningForButtonRebind
{
add => On.UIButtonSkins.ListeningForButtonRebind += value;
remove => On.UIButtonSkins.ListeningForButtonRebind -= value;
}
public static event On.UIButtonSkins.hook_FinishedListeningForKey FinishedListeningForKey
{
add => On.UIButtonSkins.FinishedListeningForKey += value;
remove => On.UIButtonSkins.FinishedListeningForKey -= value;
}
public static event On.UIButtonSkins.hook_FinishedListeningForButton FinishedListeningForButton
{
add => On.UIButtonSkins.FinishedListeningForButton += value;
remove => On.UIButtonSkins.FinishedListeningForButton -= value;
}
public static event On.UIButtonSkins.hook_GetButtonSkinFor_InputControlType GetButtonSkinFor_InputControlType
{
add => On.UIButtonSkins.GetButtonSkinFor_InputControlType += value;
remove => On.UIButtonSkins.GetButtonSkinFor_InputControlType -= value;
}
public static event On.UIButtonSkins.hook_GetButtonSkinFor_string GetButtonSkinFor_string
{
add => On.UIButtonSkins.GetButtonSkinFor_string += value;
remove => On.UIButtonSkins.GetButtonSkinFor_string -= value;
}
public static event On.UIButtonSkins.hook_SetupRefs SetupRefs
{
add => On.UIButtonSkins.SetupRefs += value;
remove => On.UIButtonSkins.SetupRefs -= value;
}
public static event Delegates.AddMappableKey_WithArgs AddMappableKey
{
add => HookEndpointManager.Add<Delegates.AddMappableKey_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "AddMappableKey", true), value);
remove => HookEndpointManager.Remove<Delegates.AddMappableKey_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "AddMappableKey", true), value);
}
public static event Delegates.RemoveMappableKey_WithArgs RemoveMappableKey
{
add => HookEndpointManager.Add<Delegates.RemoveMappableKey_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "RemoveMappableKey", true), value);
remove => HookEndpointManager.Remove<Delegates.RemoveMappableKey_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "RemoveMappableKey", true), value);
}
public static event Delegates.AddMappableControllerButton_WithArgs AddMappableControllerButton
{
add => HookEndpointManager.Add<Delegates.AddMappableControllerButton_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "AddMappableControllerButton", true), value);
remove => HookEndpointManager.Remove<Delegates.AddMappableControllerButton_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "AddMappableControllerButton", true), value);
}
public static event Delegates.RemoveMappableControllerButton_WithArgs RemoveMappableControllerButton
{
add => HookEndpointManager.Add<Delegates.RemoveMappableControllerButton_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "RemoveMappableControllerButton", true), value);
remove => HookEndpointManager.Remove<Delegates.RemoveMappableControllerButton_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "RemoveMappableControllerButton", true), value);
}
public static event Delegates.orig_RefreshKeyMappings_WithArgs orig_RefreshKeyMappings
{
add => HookEndpointManager.Add<Delegates.orig_RefreshKeyMappings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_RefreshKeyMappings", true), value);
remove => HookEndpointManager.Remove<Delegates.orig_RefreshKeyMappings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_RefreshKeyMappings", true), value);
}
public static event Delegates.orig_ShowCurrentKeyboardMappings_WithArgs orig_ShowCurrentKeyboardMappings
{
add => HookEndpointManager.Add<Delegates.orig_ShowCurrentKeyboardMappings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_ShowCurrentKeyboardMappings", true), value);
remove => HookEndpointManager.Remove<Delegates.orig_ShowCurrentKeyboardMappings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_ShowCurrentKeyboardMappings", true), value);
}
public static event Delegates.orig_RefreshButtonMappings_WithArgs orig_RefreshButtonMappings
{
add => HookEndpointManager.Add<Delegates.orig_RefreshButtonMappings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_RefreshButtonMappings", true), value);
remove => HookEndpointManager.Remove<Delegates.orig_RefreshButtonMappings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_RefreshButtonMappings", true), value);
}
public static event Delegates.orig_ShowCurrentButtonMappings_WithArgs orig_ShowCurrentButtonMappings
{
add => HookEndpointManager.Add<Delegates.orig_ShowCurrentButtonMappings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_ShowCurrentButtonMappings", true), value);
remove => HookEndpointManager.Remove<Delegates.orig_ShowCurrentButtonMappings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_ShowCurrentButtonMappings", true), value);
}
public static event Delegates.orig_GetButtonSkinFor_WithArgs orig_GetButtonSkinFor
{
add => HookEndpointManager.Add<Delegates.orig_GetButtonSkinFor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_GetButtonSkinFor", true), value);
remove => HookEndpointManager.Remove<Delegates.orig_GetButtonSkinFor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_GetButtonSkinFor", true), value);
}
public static event Delegates.orig_SetupRefs_WithArgs orig_SetupRefs
{
add => HookEndpointManager.Add<Delegates.orig_SetupRefs_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_SetupRefs", true), value);
remove => HookEndpointManager.Remove<Delegates.orig_SetupRefs_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UIButtonSkins), "orig_SetupRefs", true), value);
}
}

}
