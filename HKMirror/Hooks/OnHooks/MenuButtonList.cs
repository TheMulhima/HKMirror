using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MenuButtonList class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuButtonList
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.MenuButtonList.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.MenuButtonList.orig_Awake orig, MenuButtonList self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.MenuButtonList.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.MenuButtonList.orig_Start orig, MenuButtonList self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.MenuButtonList.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.MenuButtonList.orig_OnEnable orig, MenuButtonList self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookDoSelect()
        {
            if (!HookedList.Contains("DoSelect"))
            {
                HookedList.Add("DoSelect");
                On.MenuButtonList.DoSelect += DoSelect;
            }
        }

        internal static event Delegates.DoSelect_BeforeArgs _beforeDoSelect;
        internal static event Delegates.DoSelect_NormalArgs _afterDoSelect;

        private static void DoSelect(On.MenuButtonList.orig_DoSelect orig, MenuButtonList self)
        {
            Delegates.Params_DoSelect @params = new()
            {
                self = self
            };
            _beforeDoSelect?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoSelect != null) _afterDoSelect.Invoke(@params);
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.MenuButtonList.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_NormalArgs _afterOnDestroy;

        private static void OnDestroy(On.MenuButtonList.orig_OnDestroy orig, MenuButtonList self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            _beforeOnDestroy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null) _afterOnDestroy.Invoke(@params);
        }

        internal static void HookSelectDelayed()
        {
            if (!HookedList.Contains("SelectDelayed"))
            {
                HookedList.Add("SelectDelayed");
                On.MenuButtonList.SelectDelayed += SelectDelayed;
            }
        }

        internal static event Delegates.SelectDelayed_BeforeArgs _beforeSelectDelayed;

        private static IEnumerator SelectDelayed(On.MenuButtonList.orig_SelectDelayed orig, MenuButtonList self,
            Selectable selectable)
        {
            Delegates.Params_SelectDelayed @params = new()
            {
                self = self, selectable = selectable
            };
            _beforeSelectDelayed?.Invoke(@params);
            self = @params.self;
            selectable = @params.selectable;
            return orig(self, selectable);
        }

        internal static void HookClearLastSelected()
        {
            if (!HookedList.Contains("ClearLastSelected"))
            {
                HookedList.Add("ClearLastSelected");
                On.MenuButtonList.ClearLastSelected += ClearLastSelected;
            }
        }

        internal static event Delegates.ClearLastSelected_BeforeArgs _beforeClearLastSelected;
        internal static event Delegates.ClearLastSelected_NormalArgs _afterClearLastSelected;

        private static void ClearLastSelected(On.MenuButtonList.orig_ClearLastSelected orig, MenuButtonList self)
        {
            Delegates.Params_ClearLastSelected @params = new()
            {
                self = self
            };
            _beforeClearLastSelected?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClearLastSelected != null) _afterClearLastSelected.Invoke(@params);
        }

        internal static void HookClearAllLastSelected()
        {
            if (!HookedList.Contains("ClearAllLastSelected"))
            {
                HookedList.Add("ClearAllLastSelected");
                On.MenuButtonList.ClearAllLastSelected += ClearAllLastSelected;
            }
        }

        internal static event Delegates.ClearAllLastSelected_BeforeArgs _beforeClearAllLastSelected;
        internal static event Delegates.ClearAllLastSelected_NormalArgs _afterClearAllLastSelected;

        private static void ClearAllLastSelected(On.MenuButtonList.orig_ClearAllLastSelected orig)
        {
            _beforeClearAllLastSelected?.Invoke();
            orig();
            if (_afterClearAllLastSelected != null) _afterClearAllLastSelected.Invoke();
        }

        internal static void HookAddSelectable_Selectable()
        {
            if (!HookedList.Contains("AddSelectable_Selectable"))
            {
                HookedList.Add("AddSelectable_Selectable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuButtonList), "AddSelectable_Selectable"),
                    AddSelectable_Selectable);
            }
        }

        internal static event Delegates.AddSelectable_Selectable_BeforeArgs _beforeAddSelectable_Selectable;
        internal static event Delegates.AddSelectable_Selectable_NormalArgs _afterAddSelectable_Selectable;

        private static void AddSelectable_Selectable(Action<MenuButtonList, Selectable> orig, MenuButtonList self,
            Selectable sel)
        {
            Delegates.Params_AddSelectable_Selectable @params = new()
            {
                self = self, sel = sel
            };
            _beforeAddSelectable_Selectable?.Invoke(@params);
            self = @params.self;
            sel = @params.sel;
            orig(self, sel);
            if (_afterAddSelectable_Selectable != null) _afterAddSelectable_Selectable.Invoke(@params);
        }

        internal static void HookAddSelectableEnd()
        {
            if (!HookedList.Contains("AddSelectableEnd"))
            {
                HookedList.Add("AddSelectableEnd");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuButtonList), "AddSelectableEnd"), AddSelectableEnd);
            }
        }

        internal static event Delegates.AddSelectableEnd_BeforeArgs _beforeAddSelectableEnd;
        internal static event Delegates.AddSelectableEnd_NormalArgs _afterAddSelectableEnd;

        private static void AddSelectableEnd(Action<MenuButtonList, Selectable, int> orig, MenuButtonList self,
            Selectable sel, int controlButtons)
        {
            Delegates.Params_AddSelectableEnd @params = new()
            {
                self = self, sel = sel, controlButtons = controlButtons
            };
            _beforeAddSelectableEnd?.Invoke(@params);
            self = @params.self;
            sel = @params.sel;
            controlButtons = @params.controlButtons;
            orig(self, sel, controlButtons);
            if (_afterAddSelectableEnd != null) _afterAddSelectableEnd.Invoke(@params);
        }

        internal static void HookAddSelectable_Selectable_int()
        {
            if (!HookedList.Contains("AddSelectable_Selectable_int"))
            {
                HookedList.Add("AddSelectable_Selectable_int");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuButtonList), "AddSelectable_Selectable_int"),
                    AddSelectable_Selectable_int);
            }
        }

        internal static event Delegates.AddSelectable_Selectable_int_BeforeArgs _beforeAddSelectable_Selectable_int;
        internal static event Delegates.AddSelectable_Selectable_int_NormalArgs _afterAddSelectable_Selectable_int;

        private static void AddSelectable_Selectable_int(Action<MenuButtonList, Selectable, int> orig,
            MenuButtonList self, Selectable sel, int index)
        {
            Delegates.Params_AddSelectable_Selectable_int @params = new()
            {
                self = self, sel = sel, index = index
            };
            _beforeAddSelectable_Selectable_int?.Invoke(@params);
            self = @params.self;
            sel = @params.sel;
            index = @params.index;
            orig(self, sel, index);
            if (_afterAddSelectable_Selectable_int != null) _afterAddSelectable_Selectable_int.Invoke(@params);
        }

        internal static void HookClearSelectables()
        {
            if (!HookedList.Contains("ClearSelectables"))
            {
                HookedList.Add("ClearSelectables");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuButtonList), "ClearSelectables"), ClearSelectables);
            }
        }

        internal static event Delegates.ClearSelectables_BeforeArgs _beforeClearSelectables;
        internal static event Delegates.ClearSelectables_NormalArgs _afterClearSelectables;

        private static void ClearSelectables(Action<MenuButtonList> orig, MenuButtonList self)
        {
            Delegates.Params_ClearSelectables @params = new()
            {
                self = self
            };
            _beforeClearSelectables?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClearSelectables != null) _afterClearSelectables.Invoke(@params);
        }

        internal static void HookRecalculateNavigation()
        {
            if (!HookedList.Contains("RecalculateNavigation"))
            {
                HookedList.Add("RecalculateNavigation");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuButtonList), "RecalculateNavigation"),
                    RecalculateNavigation);
            }
        }

        internal static event Delegates.RecalculateNavigation_BeforeArgs _beforeRecalculateNavigation;
        internal static event Delegates.RecalculateNavigation_NormalArgs _afterRecalculateNavigation;

        private static void RecalculateNavigation(Action<MenuButtonList> orig, MenuButtonList self)
        {
            Delegates.Params_RecalculateNavigation @params = new()
            {
                self = self
            };
            _beforeRecalculateNavigation?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRecalculateNavigation != null) _afterRecalculateNavigation.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AddSelectable_Selectable_BeforeArgs(Params_AddSelectable_Selectable args);

        public delegate void AddSelectable_Selectable_int_BeforeArgs(Params_AddSelectable_Selectable_int args);

        public delegate void AddSelectable_Selectable_int_NormalArgs(Params_AddSelectable_Selectable_int args);

        public delegate void AddSelectable_Selectable_NormalArgs(Params_AddSelectable_Selectable args);

        public delegate void AddSelectableEnd_BeforeArgs(Params_AddSelectableEnd args);

        public delegate void AddSelectableEnd_NormalArgs(Params_AddSelectableEnd args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void ClearAllLastSelected_BeforeArgs();

        public delegate void ClearAllLastSelected_NormalArgs();

        public delegate void ClearLastSelected_BeforeArgs(Params_ClearLastSelected args);

        public delegate void ClearLastSelected_NormalArgs(Params_ClearLastSelected args);

        public delegate void ClearSelectables_BeforeArgs(Params_ClearSelectables args);

        public delegate void ClearSelectables_NormalArgs(Params_ClearSelectables args);

        public delegate void DoSelect_BeforeArgs(Params_DoSelect args);

        public delegate void DoSelect_NormalArgs(Params_DoSelect args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_NormalArgs(Params_OnDestroy args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void RecalculateNavigation_BeforeArgs(Params_RecalculateNavigation args);

        public delegate void RecalculateNavigation_NormalArgs(Params_RecalculateNavigation args);

        public delegate void SelectDelayed_BeforeArgs(Params_SelectDelayed args);

        public delegate IEnumerator SelectDelayed_NormalArgs(Params_SelectDelayed args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Awake
        {
            public MenuButtonList self;
        }

        public sealed class Params_Start
        {
            public MenuButtonList self;
        }

        public sealed class Params_OnEnable
        {
            public MenuButtonList self;
        }

        public sealed class Params_DoSelect
        {
            public MenuButtonList self;
        }

        public sealed class Params_OnDestroy
        {
            public MenuButtonList self;
        }

        public sealed class Params_SelectDelayed
        {
            public Selectable selectable;
            public MenuButtonList self;
        }

        public sealed class Params_ClearLastSelected
        {
            public MenuButtonList self;
        }

        public sealed class Params_AddSelectable_Selectable
        {
            public Selectable sel;
            public MenuButtonList self;
        }

        public sealed class Params_AddSelectableEnd
        {
            public int controlButtons;
            public Selectable sel;
            public MenuButtonList self;
        }

        public sealed class Params_AddSelectable_Selectable_int
        {
            public int index;
            public Selectable sel;
            public MenuButtonList self;
        }

        public sealed class Params_ClearSelectables
        {
            public MenuButtonList self;
        }

        public sealed class Params_RecalculateNavigation
        {
            public MenuButtonList self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.DoSelect_BeforeArgs DoSelect
        {
            add
            {
                HookHandler._beforeDoSelect += value;
                HookHandler.HookDoSelect();
            }
            remove => HookHandler._beforeDoSelect -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.SelectDelayed_BeforeArgs SelectDelayed
        {
            add
            {
                HookHandler._beforeSelectDelayed += value;
                HookHandler.HookSelectDelayed();
            }
            remove => HookHandler._beforeSelectDelayed -= value;
        }

        public static event Delegates.ClearLastSelected_BeforeArgs ClearLastSelected
        {
            add
            {
                HookHandler._beforeClearLastSelected += value;
                HookHandler.HookClearLastSelected();
            }
            remove => HookHandler._beforeClearLastSelected -= value;
        }

        public static event Delegates.ClearAllLastSelected_BeforeArgs ClearAllLastSelected
        {
            add
            {
                HookHandler._beforeClearAllLastSelected += value;
                HookHandler.HookClearAllLastSelected();
            }
            remove => HookHandler._beforeClearAllLastSelected -= value;
        }

        public static event Delegates.AddSelectable_Selectable_BeforeArgs AddSelectable_Selectable
        {
            add
            {
                HookHandler._beforeAddSelectable_Selectable += value;
                HookHandler.HookAddSelectable_Selectable();
            }
            remove => HookHandler._beforeAddSelectable_Selectable -= value;
        }

        public static event Delegates.AddSelectableEnd_BeforeArgs AddSelectableEnd
        {
            add
            {
                HookHandler._beforeAddSelectableEnd += value;
                HookHandler.HookAddSelectableEnd();
            }
            remove => HookHandler._beforeAddSelectableEnd -= value;
        }

        public static event Delegates.AddSelectable_Selectable_int_BeforeArgs AddSelectable_Selectable_int
        {
            add
            {
                HookHandler._beforeAddSelectable_Selectable_int += value;
                HookHandler.HookAddSelectable_Selectable_int();
            }
            remove => HookHandler._beforeAddSelectable_Selectable_int -= value;
        }

        public static event Delegates.ClearSelectables_BeforeArgs ClearSelectables
        {
            add
            {
                HookHandler._beforeClearSelectables += value;
                HookHandler.HookClearSelectables();
            }
            remove => HookHandler._beforeClearSelectables -= value;
        }

        public static event Delegates.RecalculateNavigation_BeforeArgs RecalculateNavigation
        {
            add
            {
                HookHandler._beforeRecalculateNavigation += value;
                HookHandler.HookRecalculateNavigation();
            }
            remove => HookHandler._beforeRecalculateNavigation -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.DoSelect_NormalArgs DoSelect
        {
            add
            {
                HookHandler._afterDoSelect += value;
                HookHandler.HookDoSelect();
            }
            remove => HookHandler._afterDoSelect -= value;
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.ClearLastSelected_NormalArgs ClearLastSelected
        {
            add
            {
                HookHandler._afterClearLastSelected += value;
                HookHandler.HookClearLastSelected();
            }
            remove => HookHandler._afterClearLastSelected -= value;
        }

        public static event Delegates.ClearAllLastSelected_NormalArgs ClearAllLastSelected
        {
            add
            {
                HookHandler._afterClearAllLastSelected += value;
                HookHandler.HookClearAllLastSelected();
            }
            remove => HookHandler._afterClearAllLastSelected -= value;
        }

        public static event Delegates.AddSelectable_Selectable_NormalArgs AddSelectable_Selectable
        {
            add
            {
                HookHandler._afterAddSelectable_Selectable += value;
                HookHandler.HookAddSelectable_Selectable();
            }
            remove => HookHandler._afterAddSelectable_Selectable -= value;
        }

        public static event Delegates.AddSelectableEnd_NormalArgs AddSelectableEnd
        {
            add
            {
                HookHandler._afterAddSelectableEnd += value;
                HookHandler.HookAddSelectableEnd();
            }
            remove => HookHandler._afterAddSelectableEnd -= value;
        }

        public static event Delegates.AddSelectable_Selectable_int_NormalArgs AddSelectable_Selectable_int
        {
            add
            {
                HookHandler._afterAddSelectable_Selectable_int += value;
                HookHandler.HookAddSelectable_Selectable_int();
            }
            remove => HookHandler._afterAddSelectable_Selectable_int -= value;
        }

        public static event Delegates.ClearSelectables_NormalArgs ClearSelectables
        {
            add
            {
                HookHandler._afterClearSelectables += value;
                HookHandler.HookClearSelectables();
            }
            remove => HookHandler._afterClearSelectables -= value;
        }

        public static event Delegates.RecalculateNavigation_NormalArgs RecalculateNavigation
        {
            add
            {
                HookHandler._afterRecalculateNavigation += value;
                HookHandler.HookRecalculateNavigation();
            }
            remove => HookHandler._afterRecalculateNavigation -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.MenuButtonList.hook_Awake Awake
        {
            add => On.MenuButtonList.Awake += value;
            remove => On.MenuButtonList.Awake -= value;
        }

        public static event On.MenuButtonList.hook_Start Start
        {
            add => On.MenuButtonList.Start += value;
            remove => On.MenuButtonList.Start -= value;
        }

        public static event On.MenuButtonList.hook_OnEnable OnEnable
        {
            add => On.MenuButtonList.OnEnable += value;
            remove => On.MenuButtonList.OnEnable -= value;
        }

        public static event On.MenuButtonList.hook_DoSelect DoSelect
        {
            add => On.MenuButtonList.DoSelect += value;
            remove => On.MenuButtonList.DoSelect -= value;
        }

        public static event On.MenuButtonList.hook_OnDestroy OnDestroy
        {
            add => On.MenuButtonList.OnDestroy += value;
            remove => On.MenuButtonList.OnDestroy -= value;
        }

        public static event On.MenuButtonList.hook_SelectDelayed SelectDelayed
        {
            add => On.MenuButtonList.SelectDelayed += value;
            remove => On.MenuButtonList.SelectDelayed -= value;
        }

        public static event On.MenuButtonList.hook_ClearLastSelected ClearLastSelected
        {
            add => On.MenuButtonList.ClearLastSelected += value;
            remove => On.MenuButtonList.ClearLastSelected -= value;
        }

        public static event On.MenuButtonList.hook_ClearAllLastSelected ClearAllLastSelected
        {
            add => On.MenuButtonList.ClearAllLastSelected += value;
            remove => On.MenuButtonList.ClearAllLastSelected -= value;
        }

        public static event Delegates.AddSelectable_Selectable_NormalArgs AddSelectable_Selectable
        {
            add => HookEndpointManager.Add<Delegates.AddSelectable_Selectable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButtonList), "AddSelectable"), value);
            remove => HookEndpointManager.Remove<Delegates.AddSelectable_Selectable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButtonList), "AddSelectable"), value);
        }

        public static event Delegates.AddSelectableEnd_NormalArgs AddSelectableEnd
        {
            add => HookEndpointManager.Add<Delegates.AddSelectableEnd_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButtonList), "AddSelectableEnd"), value);
            remove => HookEndpointManager.Remove<Delegates.AddSelectableEnd_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButtonList), "AddSelectableEnd"), value);
        }

        public static event Delegates.AddSelectable_Selectable_int_NormalArgs AddSelectable_Selectable_int
        {
            add => HookEndpointManager.Add<Delegates.AddSelectable_Selectable_int_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButtonList), "AddSelectable"), value);
            remove => HookEndpointManager.Remove<Delegates.AddSelectable_Selectable_int_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButtonList), "AddSelectable"), value);
        }

        public static event Delegates.ClearSelectables_NormalArgs ClearSelectables
        {
            add => HookEndpointManager.Add<Delegates.ClearSelectables_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButtonList), "ClearSelectables"), value);
            remove => HookEndpointManager.Remove<Delegates.ClearSelectables_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButtonList), "ClearSelectables"), value);
        }

        public static event Delegates.RecalculateNavigation_NormalArgs RecalculateNavigation
        {
            add => HookEndpointManager.Add<Delegates.RecalculateNavigation_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButtonList), "RecalculateNavigation"), value);
            remove => HookEndpointManager.Remove<Delegates.RecalculateNavigation_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButtonList), "RecalculateNavigation"), value);
        }
    }
}