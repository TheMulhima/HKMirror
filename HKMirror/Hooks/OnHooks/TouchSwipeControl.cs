using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for TouchSwipeControl class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTouchSwipeControl
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookCreateControl()
{
if (!HookedList.Contains("CreateControl"))
{
HookedList.Add("CreateControl");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "CreateControl", true), CreateControl);

}
}
internal static event Delegates.CreateControl_BeforeArgs _beforeCreateControl;
internal static event Delegates.CreateControl_AfterArgs _afterCreateControl;
private static void CreateControl(Action<InControl.TouchSwipeControl> orig, InControl.TouchSwipeControl self)
{
Delegates.Params_CreateControl @params = new() 
{
self = self
};
if (_beforeCreateControl != null)
{
foreach (Delegates.CreateControl_BeforeArgs toInvoke in _beforeCreateControl.GetInvocationList())
{
try
{
_beforeCreateControl?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterCreateControl != null)
{
foreach (Delegates.CreateControl_AfterArgs toInvoke in _afterCreateControl.GetInvocationList())
{
try
{
_afterCreateControl.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDestroyControl()
{
if (!HookedList.Contains("DestroyControl"))
{
HookedList.Add("DestroyControl");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "DestroyControl", true), DestroyControl);

}
}
internal static event Delegates.DestroyControl_BeforeArgs _beforeDestroyControl;
internal static event Delegates.DestroyControl_AfterArgs _afterDestroyControl;
private static void DestroyControl(Action<InControl.TouchSwipeControl> orig, InControl.TouchSwipeControl self)
{
Delegates.Params_DestroyControl @params = new() 
{
self = self
};
if (_beforeDestroyControl != null)
{
foreach (Delegates.DestroyControl_BeforeArgs toInvoke in _beforeDestroyControl.GetInvocationList())
{
try
{
_beforeDestroyControl?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterDestroyControl != null)
{
foreach (Delegates.DestroyControl_AfterArgs toInvoke in _afterDestroyControl.GetInvocationList())
{
try
{
_afterDestroyControl.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookConfigureControl()
{
if (!HookedList.Contains("ConfigureControl"))
{
HookedList.Add("ConfigureControl");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "ConfigureControl", true), ConfigureControl);

}
}
internal static event Delegates.ConfigureControl_BeforeArgs _beforeConfigureControl;
internal static event Delegates.ConfigureControl_AfterArgs _afterConfigureControl;
private static void ConfigureControl(Action<InControl.TouchSwipeControl> orig, InControl.TouchSwipeControl self)
{
Delegates.Params_ConfigureControl @params = new() 
{
self = self
};
if (_beforeConfigureControl != null)
{
foreach (Delegates.ConfigureControl_BeforeArgs toInvoke in _beforeConfigureControl.GetInvocationList())
{
try
{
_beforeConfigureControl?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterConfigureControl != null)
{
foreach (Delegates.ConfigureControl_AfterArgs toInvoke in _afterConfigureControl.GetInvocationList())
{
try
{
_afterConfigureControl.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDrawGizmos()
{
if (!HookedList.Contains("DrawGizmos"))
{
HookedList.Add("DrawGizmos");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "DrawGizmos", true), DrawGizmos);

}
}
internal static event Delegates.DrawGizmos_BeforeArgs _beforeDrawGizmos;
internal static event Delegates.DrawGizmos_AfterArgs _afterDrawGizmos;
private static void DrawGizmos(Action<InControl.TouchSwipeControl> orig, InControl.TouchSwipeControl self)
{
Delegates.Params_DrawGizmos @params = new() 
{
self = self
};
if (_beforeDrawGizmos != null)
{
foreach (Delegates.DrawGizmos_BeforeArgs toInvoke in _beforeDrawGizmos.GetInvocationList())
{
try
{
_beforeDrawGizmos?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterDrawGizmos != null)
{
foreach (Delegates.DrawGizmos_AfterArgs toInvoke in _afterDrawGizmos.GetInvocationList())
{
try
{
_afterDrawGizmos.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdate()
{
if (!HookedList.Contains("Update"))
{
HookedList.Add("Update");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "Update", true), Update);

}
}
internal static event Delegates.Update_BeforeArgs _beforeUpdate;
internal static event Delegates.Update_AfterArgs _afterUpdate;
private static void Update(Action<InControl.TouchSwipeControl> orig, InControl.TouchSwipeControl self)
{
Delegates.Params_Update @params = new() 
{
self = self
};
if (_beforeUpdate != null)
{
foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
{
try
{
_beforeUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdate != null)
{
foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
{
try
{
_afterUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSubmitControlState()
{
if (!HookedList.Contains("SubmitControlState"))
{
HookedList.Add("SubmitControlState");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "SubmitControlState", true), SubmitControlState);

}
}
internal static event Delegates.SubmitControlState_BeforeArgs _beforeSubmitControlState;
internal static event Delegates.SubmitControlState_AfterArgs _afterSubmitControlState;
private static void SubmitControlState(Action<InControl.TouchSwipeControl,  ulong,  float> orig, InControl.TouchSwipeControl self,  ulong updateTick,  float deltaTime)
{
Delegates.Params_SubmitControlState @params = new() 
{
self = self
, updateTick = updateTick
, deltaTime = deltaTime
};
if (_beforeSubmitControlState != null)
{
foreach (Delegates.SubmitControlState_BeforeArgs toInvoke in _beforeSubmitControlState.GetInvocationList())
{
try
{
_beforeSubmitControlState?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
updateTick = @params.updateTick;
deltaTime = @params.deltaTime;
orig(self, updateTick, deltaTime);
if (_afterSubmitControlState != null)
{
foreach (Delegates.SubmitControlState_AfterArgs toInvoke in _afterSubmitControlState.GetInvocationList())
{
try
{
_afterSubmitControlState.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCommitControlState()
{
if (!HookedList.Contains("CommitControlState"))
{
HookedList.Add("CommitControlState");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "CommitControlState", true), CommitControlState);

}
}
internal static event Delegates.CommitControlState_BeforeArgs _beforeCommitControlState;
internal static event Delegates.CommitControlState_AfterArgs _afterCommitControlState;
private static void CommitControlState(Action<InControl.TouchSwipeControl,  ulong,  float> orig, InControl.TouchSwipeControl self,  ulong updateTick,  float deltaTime)
{
Delegates.Params_CommitControlState @params = new() 
{
self = self
, updateTick = updateTick
, deltaTime = deltaTime
};
if (_beforeCommitControlState != null)
{
foreach (Delegates.CommitControlState_BeforeArgs toInvoke in _beforeCommitControlState.GetInvocationList())
{
try
{
_beforeCommitControlState?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
updateTick = @params.updateTick;
deltaTime = @params.deltaTime;
orig(self, updateTick, deltaTime);
if (_afterCommitControlState != null)
{
foreach (Delegates.CommitControlState_AfterArgs toInvoke in _afterCommitControlState.GetInvocationList())
{
try
{
_afterCommitControlState.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookTouchBegan()
{
if (!HookedList.Contains("TouchBegan"))
{
HookedList.Add("TouchBegan");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "TouchBegan", true), TouchBegan);

}
}
internal static event Delegates.TouchBegan_BeforeArgs _beforeTouchBegan;
internal static event Delegates.TouchBegan_AfterArgs _afterTouchBegan;
private static void TouchBegan(Action<InControl.TouchSwipeControl,  InControl.Touch> orig, InControl.TouchSwipeControl self,  InControl.Touch touch)
{
Delegates.Params_TouchBegan @params = new() 
{
self = self
, touch = touch
};
if (_beforeTouchBegan != null)
{
foreach (Delegates.TouchBegan_BeforeArgs toInvoke in _beforeTouchBegan.GetInvocationList())
{
try
{
_beforeTouchBegan?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
touch = @params.touch;
orig(self, touch);
if (_afterTouchBegan != null)
{
foreach (Delegates.TouchBegan_AfterArgs toInvoke in _afterTouchBegan.GetInvocationList())
{
try
{
_afterTouchBegan.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookTouchMoved()
{
if (!HookedList.Contains("TouchMoved"))
{
HookedList.Add("TouchMoved");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "TouchMoved", true), TouchMoved);

}
}
internal static event Delegates.TouchMoved_BeforeArgs _beforeTouchMoved;
internal static event Delegates.TouchMoved_AfterArgs _afterTouchMoved;
private static void TouchMoved(Action<InControl.TouchSwipeControl,  InControl.Touch> orig, InControl.TouchSwipeControl self,  InControl.Touch touch)
{
Delegates.Params_TouchMoved @params = new() 
{
self = self
, touch = touch
};
if (_beforeTouchMoved != null)
{
foreach (Delegates.TouchMoved_BeforeArgs toInvoke in _beforeTouchMoved.GetInvocationList())
{
try
{
_beforeTouchMoved?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
touch = @params.touch;
orig(self, touch);
if (_afterTouchMoved != null)
{
foreach (Delegates.TouchMoved_AfterArgs toInvoke in _afterTouchMoved.GetInvocationList())
{
try
{
_afterTouchMoved.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookTouchEnded()
{
if (!HookedList.Contains("TouchEnded"))
{
HookedList.Add("TouchEnded");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "TouchEnded", true), TouchEnded);

}
}
internal static event Delegates.TouchEnded_BeforeArgs _beforeTouchEnded;
internal static event Delegates.TouchEnded_AfterArgs _afterTouchEnded;
private static void TouchEnded(Action<InControl.TouchSwipeControl,  InControl.Touch> orig, InControl.TouchSwipeControl self,  InControl.Touch touch)
{
Delegates.Params_TouchEnded @params = new() 
{
self = self
, touch = touch
};
if (_beforeTouchEnded != null)
{
foreach (Delegates.TouchEnded_BeforeArgs toInvoke in _beforeTouchEnded.GetInvocationList())
{
try
{
_beforeTouchEnded?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
touch = @params.touch;
orig(self, touch);
if (_afterTouchEnded != null)
{
foreach (Delegates.TouchEnded_AfterArgs toInvoke in _afterTouchEnded.GetInvocationList())
{
try
{
_afterTouchEnded.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_ActiveArea()
{
if (!HookedList.Contains("get_ActiveArea"))
{
HookedList.Add("get_ActiveArea");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "get_ActiveArea", true), get_ActiveArea);

}
}
internal static event Delegates.get_ActiveArea_BeforeArgs _beforeget_ActiveArea;
internal static event Delegates.get_ActiveArea_AfterArgs _afterget_ActiveArea;
private static UnityEngine.Rect get_ActiveArea(Func<InControl.TouchSwipeControl, UnityEngine.Rect> orig, InControl.TouchSwipeControl self)
{
Delegates.Params_get_ActiveArea @params = new() 
{
self = self
};
if (_beforeget_ActiveArea != null)
{
foreach (Delegates.get_ActiveArea_BeforeArgs toInvoke in _beforeget_ActiveArea.GetInvocationList())
{
try
{
_beforeget_ActiveArea?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_ActiveArea != null)
{
foreach (Delegates.get_ActiveArea_AfterArgs toInvoke in _afterget_ActiveArea.GetInvocationList())
{
try
{
retVal = _afterget_ActiveArea.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_ActiveArea()
{
if (!HookedList.Contains("set_ActiveArea"))
{
HookedList.Add("set_ActiveArea");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "set_ActiveArea", true), set_ActiveArea);

}
}
internal static event Delegates.set_ActiveArea_BeforeArgs _beforeset_ActiveArea;
internal static event Delegates.set_ActiveArea_AfterArgs _afterset_ActiveArea;
private static void set_ActiveArea(Action<InControl.TouchSwipeControl,  UnityEngine.Rect> orig, InControl.TouchSwipeControl self,  UnityEngine.Rect value)
{
Delegates.Params_set_ActiveArea @params = new() 
{
self = self
, value = value
};
if (_beforeset_ActiveArea != null)
{
foreach (Delegates.set_ActiveArea_BeforeArgs toInvoke in _beforeset_ActiveArea.GetInvocationList())
{
try
{
_beforeset_ActiveArea?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_ActiveArea != null)
{
foreach (Delegates.set_ActiveArea_AfterArgs toInvoke in _afterset_ActiveArea.GetInvocationList())
{
try
{
_afterset_ActiveArea.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_AreaUnitType()
{
if (!HookedList.Contains("get_AreaUnitType"))
{
HookedList.Add("get_AreaUnitType");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "get_AreaUnitType", true), get_AreaUnitType);

}
}
internal static event Delegates.get_AreaUnitType_BeforeArgs _beforeget_AreaUnitType;
internal static event Delegates.get_AreaUnitType_AfterArgs _afterget_AreaUnitType;
private static InControl.TouchUnitType get_AreaUnitType(Func<InControl.TouchSwipeControl, InControl.TouchUnitType> orig, InControl.TouchSwipeControl self)
{
Delegates.Params_get_AreaUnitType @params = new() 
{
self = self
};
if (_beforeget_AreaUnitType != null)
{
foreach (Delegates.get_AreaUnitType_BeforeArgs toInvoke in _beforeget_AreaUnitType.GetInvocationList())
{
try
{
_beforeget_AreaUnitType?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_AreaUnitType != null)
{
foreach (Delegates.get_AreaUnitType_AfterArgs toInvoke in _afterget_AreaUnitType.GetInvocationList())
{
try
{
retVal = _afterget_AreaUnitType.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_AreaUnitType()
{
if (!HookedList.Contains("set_AreaUnitType"))
{
HookedList.Add("set_AreaUnitType");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "set_AreaUnitType", true), set_AreaUnitType);

}
}
internal static event Delegates.set_AreaUnitType_BeforeArgs _beforeset_AreaUnitType;
internal static event Delegates.set_AreaUnitType_AfterArgs _afterset_AreaUnitType;
private static void set_AreaUnitType(Action<InControl.TouchSwipeControl,  InControl.TouchUnitType> orig, InControl.TouchSwipeControl self,  InControl.TouchUnitType value)
{
Delegates.Params_set_AreaUnitType @params = new() 
{
self = self
, value = value
};
if (_beforeset_AreaUnitType != null)
{
foreach (Delegates.set_AreaUnitType_BeforeArgs toInvoke in _beforeset_AreaUnitType.GetInvocationList())
{
try
{
_beforeset_AreaUnitType?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_AreaUnitType != null)
{
foreach (Delegates.set_AreaUnitType_AfterArgs toInvoke in _afterset_AreaUnitType.GetInvocationList())
{
try
{
_afterset_AreaUnitType.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_CreateControl
{
public InControl.TouchSwipeControl self;
}
public delegate void CreateControl_BeforeArgs(Params_CreateControl args);
public delegate void CreateControl_AfterArgs(Params_CreateControl args);
public delegate void CreateControl_WithArgs (Action<InControl.TouchSwipeControl> orig, InControl.TouchSwipeControl self);
public sealed class Params_DestroyControl
{
public InControl.TouchSwipeControl self;
}
public delegate void DestroyControl_BeforeArgs(Params_DestroyControl args);
public delegate void DestroyControl_AfterArgs(Params_DestroyControl args);
public delegate void DestroyControl_WithArgs (Action<InControl.TouchSwipeControl> orig, InControl.TouchSwipeControl self);
public sealed class Params_ConfigureControl
{
public InControl.TouchSwipeControl self;
}
public delegate void ConfigureControl_BeforeArgs(Params_ConfigureControl args);
public delegate void ConfigureControl_AfterArgs(Params_ConfigureControl args);
public delegate void ConfigureControl_WithArgs (Action<InControl.TouchSwipeControl> orig, InControl.TouchSwipeControl self);
public sealed class Params_DrawGizmos
{
public InControl.TouchSwipeControl self;
}
public delegate void DrawGizmos_BeforeArgs(Params_DrawGizmos args);
public delegate void DrawGizmos_AfterArgs(Params_DrawGizmos args);
public delegate void DrawGizmos_WithArgs (Action<InControl.TouchSwipeControl> orig, InControl.TouchSwipeControl self);
public sealed class Params_Update
{
public InControl.TouchSwipeControl self;
}
public delegate void Update_BeforeArgs(Params_Update args);
public delegate void Update_AfterArgs(Params_Update args);
public delegate void Update_WithArgs (Action<InControl.TouchSwipeControl> orig, InControl.TouchSwipeControl self);
public sealed class Params_SubmitControlState
{
public InControl.TouchSwipeControl self;
public ulong updateTick;
public float deltaTime;
}
public delegate void SubmitControlState_BeforeArgs(Params_SubmitControlState args);
public delegate void SubmitControlState_AfterArgs(Params_SubmitControlState args);
public delegate void SubmitControlState_WithArgs (Action<InControl.TouchSwipeControl,  ulong,  float> orig, InControl.TouchSwipeControl self,  ulong updateTick,  float deltaTime);
public sealed class Params_CommitControlState
{
public InControl.TouchSwipeControl self;
public ulong updateTick;
public float deltaTime;
}
public delegate void CommitControlState_BeforeArgs(Params_CommitControlState args);
public delegate void CommitControlState_AfterArgs(Params_CommitControlState args);
public delegate void CommitControlState_WithArgs (Action<InControl.TouchSwipeControl,  ulong,  float> orig, InControl.TouchSwipeControl self,  ulong updateTick,  float deltaTime);
public sealed class Params_TouchBegan
{
public InControl.TouchSwipeControl self;
public InControl.Touch touch;
}
public delegate void TouchBegan_BeforeArgs(Params_TouchBegan args);
public delegate void TouchBegan_AfterArgs(Params_TouchBegan args);
public delegate void TouchBegan_WithArgs (Action<InControl.TouchSwipeControl,  InControl.Touch> orig, InControl.TouchSwipeControl self,  InControl.Touch touch);
public sealed class Params_TouchMoved
{
public InControl.TouchSwipeControl self;
public InControl.Touch touch;
}
public delegate void TouchMoved_BeforeArgs(Params_TouchMoved args);
public delegate void TouchMoved_AfterArgs(Params_TouchMoved args);
public delegate void TouchMoved_WithArgs (Action<InControl.TouchSwipeControl,  InControl.Touch> orig, InControl.TouchSwipeControl self,  InControl.Touch touch);
public sealed class Params_TouchEnded
{
public InControl.TouchSwipeControl self;
public InControl.Touch touch;
}
public delegate void TouchEnded_BeforeArgs(Params_TouchEnded args);
public delegate void TouchEnded_AfterArgs(Params_TouchEnded args);
public delegate void TouchEnded_WithArgs (Action<InControl.TouchSwipeControl,  InControl.Touch> orig, InControl.TouchSwipeControl self,  InControl.Touch touch);
public sealed class Params_get_ActiveArea
{
public InControl.TouchSwipeControl self;
}
public delegate void get_ActiveArea_BeforeArgs(Params_get_ActiveArea args);
public delegate UnityEngine.Rect get_ActiveArea_AfterArgs(Params_get_ActiveArea args, UnityEngine.Rect ret);
public delegate UnityEngine.Rect get_ActiveArea_WithArgs (Func<InControl.TouchSwipeControl, UnityEngine.Rect> orig, InControl.TouchSwipeControl self);
public sealed class Params_set_ActiveArea
{
public InControl.TouchSwipeControl self;
public UnityEngine.Rect value;
}
public delegate void set_ActiveArea_BeforeArgs(Params_set_ActiveArea args);
public delegate void set_ActiveArea_AfterArgs(Params_set_ActiveArea args);
public delegate void set_ActiveArea_WithArgs (Action<InControl.TouchSwipeControl,  UnityEngine.Rect> orig, InControl.TouchSwipeControl self,  UnityEngine.Rect value);
public sealed class Params_get_AreaUnitType
{
public InControl.TouchSwipeControl self;
}
public delegate void get_AreaUnitType_BeforeArgs(Params_get_AreaUnitType args);
public delegate InControl.TouchUnitType get_AreaUnitType_AfterArgs(Params_get_AreaUnitType args, InControl.TouchUnitType ret);
public delegate InControl.TouchUnitType get_AreaUnitType_WithArgs (Func<InControl.TouchSwipeControl, InControl.TouchUnitType> orig, InControl.TouchSwipeControl self);
public sealed class Params_set_AreaUnitType
{
public InControl.TouchSwipeControl self;
public InControl.TouchUnitType value;
}
public delegate void set_AreaUnitType_BeforeArgs(Params_set_AreaUnitType args);
public delegate void set_AreaUnitType_AfterArgs(Params_set_AreaUnitType args);
public delegate void set_AreaUnitType_WithArgs (Action<InControl.TouchSwipeControl,  InControl.TouchUnitType> orig, InControl.TouchSwipeControl self,  InControl.TouchUnitType value);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.CreateControl_BeforeArgs CreateControl
{
add
{

HookHandler._beforeCreateControl += value;
HookHandler.HookCreateControl();
}
remove => HookHandler._beforeCreateControl -= value;
}
public static event Delegates.DestroyControl_BeforeArgs DestroyControl
{
add
{

HookHandler._beforeDestroyControl += value;
HookHandler.HookDestroyControl();
}
remove => HookHandler._beforeDestroyControl -= value;
}
public static event Delegates.ConfigureControl_BeforeArgs ConfigureControl
{
add
{

HookHandler._beforeConfigureControl += value;
HookHandler.HookConfigureControl();
}
remove => HookHandler._beforeConfigureControl -= value;
}
public static event Delegates.DrawGizmos_BeforeArgs DrawGizmos
{
add
{

HookHandler._beforeDrawGizmos += value;
HookHandler.HookDrawGizmos();
}
remove => HookHandler._beforeDrawGizmos -= value;
}
public static event Delegates.Update_BeforeArgs Update
{
add
{

HookHandler._beforeUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._beforeUpdate -= value;
}
public static event Delegates.SubmitControlState_BeforeArgs SubmitControlState
{
add
{

HookHandler._beforeSubmitControlState += value;
HookHandler.HookSubmitControlState();
}
remove => HookHandler._beforeSubmitControlState -= value;
}
public static event Delegates.CommitControlState_BeforeArgs CommitControlState
{
add
{

HookHandler._beforeCommitControlState += value;
HookHandler.HookCommitControlState();
}
remove => HookHandler._beforeCommitControlState -= value;
}
public static event Delegates.TouchBegan_BeforeArgs TouchBegan
{
add
{

HookHandler._beforeTouchBegan += value;
HookHandler.HookTouchBegan();
}
remove => HookHandler._beforeTouchBegan -= value;
}
public static event Delegates.TouchMoved_BeforeArgs TouchMoved
{
add
{

HookHandler._beforeTouchMoved += value;
HookHandler.HookTouchMoved();
}
remove => HookHandler._beforeTouchMoved -= value;
}
public static event Delegates.TouchEnded_BeforeArgs TouchEnded
{
add
{

HookHandler._beforeTouchEnded += value;
HookHandler.HookTouchEnded();
}
remove => HookHandler._beforeTouchEnded -= value;
}
public static event Delegates.get_ActiveArea_BeforeArgs get_ActiveArea
{
add
{

HookHandler._beforeget_ActiveArea += value;
HookHandler.Hookget_ActiveArea();
}
remove => HookHandler._beforeget_ActiveArea -= value;
}
public static event Delegates.set_ActiveArea_BeforeArgs set_ActiveArea
{
add
{

HookHandler._beforeset_ActiveArea += value;
HookHandler.Hookset_ActiveArea();
}
remove => HookHandler._beforeset_ActiveArea -= value;
}
public static event Delegates.get_AreaUnitType_BeforeArgs get_AreaUnitType
{
add
{

HookHandler._beforeget_AreaUnitType += value;
HookHandler.Hookget_AreaUnitType();
}
remove => HookHandler._beforeget_AreaUnitType -= value;
}
public static event Delegates.set_AreaUnitType_BeforeArgs set_AreaUnitType
{
add
{

HookHandler._beforeset_AreaUnitType += value;
HookHandler.Hookset_AreaUnitType();
}
remove => HookHandler._beforeset_AreaUnitType -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.CreateControl_AfterArgs CreateControl
{
add
{

HookHandler._afterCreateControl += value;
HookHandler.HookCreateControl();
}
remove => HookHandler._afterCreateControl -= value;
}
public static event Delegates.DestroyControl_AfterArgs DestroyControl
{
add
{

HookHandler._afterDestroyControl += value;
HookHandler.HookDestroyControl();
}
remove => HookHandler._afterDestroyControl -= value;
}
public static event Delegates.ConfigureControl_AfterArgs ConfigureControl
{
add
{

HookHandler._afterConfigureControl += value;
HookHandler.HookConfigureControl();
}
remove => HookHandler._afterConfigureControl -= value;
}
public static event Delegates.DrawGizmos_AfterArgs DrawGizmos
{
add
{

HookHandler._afterDrawGizmos += value;
HookHandler.HookDrawGizmos();
}
remove => HookHandler._afterDrawGizmos -= value;
}
public static event Delegates.Update_AfterArgs Update
{
add
{

HookHandler._afterUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._afterUpdate -= value;
}
public static event Delegates.SubmitControlState_AfterArgs SubmitControlState
{
add
{

HookHandler._afterSubmitControlState += value;
HookHandler.HookSubmitControlState();
}
remove => HookHandler._afterSubmitControlState -= value;
}
public static event Delegates.CommitControlState_AfterArgs CommitControlState
{
add
{

HookHandler._afterCommitControlState += value;
HookHandler.HookCommitControlState();
}
remove => HookHandler._afterCommitControlState -= value;
}
public static event Delegates.TouchBegan_AfterArgs TouchBegan
{
add
{

HookHandler._afterTouchBegan += value;
HookHandler.HookTouchBegan();
}
remove => HookHandler._afterTouchBegan -= value;
}
public static event Delegates.TouchMoved_AfterArgs TouchMoved
{
add
{

HookHandler._afterTouchMoved += value;
HookHandler.HookTouchMoved();
}
remove => HookHandler._afterTouchMoved -= value;
}
public static event Delegates.TouchEnded_AfterArgs TouchEnded
{
add
{

HookHandler._afterTouchEnded += value;
HookHandler.HookTouchEnded();
}
remove => HookHandler._afterTouchEnded -= value;
}
public static event Delegates.get_ActiveArea_AfterArgs get_ActiveArea
{
add
{

HookHandler._afterget_ActiveArea += value;
HookHandler.Hookget_ActiveArea();
}
remove => HookHandler._afterget_ActiveArea -= value;
}
public static event Delegates.set_ActiveArea_AfterArgs set_ActiveArea
{
add
{

HookHandler._afterset_ActiveArea += value;
HookHandler.Hookset_ActiveArea();
}
remove => HookHandler._afterset_ActiveArea -= value;
}
public static event Delegates.get_AreaUnitType_AfterArgs get_AreaUnitType
{
add
{

HookHandler._afterget_AreaUnitType += value;
HookHandler.Hookget_AreaUnitType();
}
remove => HookHandler._afterget_AreaUnitType -= value;
}
public static event Delegates.set_AreaUnitType_AfterArgs set_AreaUnitType
{
add
{

HookHandler._afterset_AreaUnitType += value;
HookHandler.Hookset_AreaUnitType();
}
remove => HookHandler._afterset_AreaUnitType -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.CreateControl_WithArgs CreateControl
{
add => HookEndpointManager.Add<Delegates.CreateControl_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "CreateControl", true), value);
remove => HookEndpointManager.Remove<Delegates.CreateControl_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "CreateControl", true), value);
}
public static event Delegates.DestroyControl_WithArgs DestroyControl
{
add => HookEndpointManager.Add<Delegates.DestroyControl_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "DestroyControl", true), value);
remove => HookEndpointManager.Remove<Delegates.DestroyControl_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "DestroyControl", true), value);
}
public static event Delegates.ConfigureControl_WithArgs ConfigureControl
{
add => HookEndpointManager.Add<Delegates.ConfigureControl_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "ConfigureControl", true), value);
remove => HookEndpointManager.Remove<Delegates.ConfigureControl_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "ConfigureControl", true), value);
}
public static event Delegates.DrawGizmos_WithArgs DrawGizmos
{
add => HookEndpointManager.Add<Delegates.DrawGizmos_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "DrawGizmos", true), value);
remove => HookEndpointManager.Remove<Delegates.DrawGizmos_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "DrawGizmos", true), value);
}
public static event Delegates.Update_WithArgs Update
{
add => HookEndpointManager.Add<Delegates.Update_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "Update", true), value);
remove => HookEndpointManager.Remove<Delegates.Update_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "Update", true), value);
}
public static event Delegates.SubmitControlState_WithArgs SubmitControlState
{
add => HookEndpointManager.Add<Delegates.SubmitControlState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "SubmitControlState", true), value);
remove => HookEndpointManager.Remove<Delegates.SubmitControlState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "SubmitControlState", true), value);
}
public static event Delegates.CommitControlState_WithArgs CommitControlState
{
add => HookEndpointManager.Add<Delegates.CommitControlState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "CommitControlState", true), value);
remove => HookEndpointManager.Remove<Delegates.CommitControlState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "CommitControlState", true), value);
}
public static event Delegates.TouchBegan_WithArgs TouchBegan
{
add => HookEndpointManager.Add<Delegates.TouchBegan_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "TouchBegan", true), value);
remove => HookEndpointManager.Remove<Delegates.TouchBegan_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "TouchBegan", true), value);
}
public static event Delegates.TouchMoved_WithArgs TouchMoved
{
add => HookEndpointManager.Add<Delegates.TouchMoved_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "TouchMoved", true), value);
remove => HookEndpointManager.Remove<Delegates.TouchMoved_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "TouchMoved", true), value);
}
public static event Delegates.TouchEnded_WithArgs TouchEnded
{
add => HookEndpointManager.Add<Delegates.TouchEnded_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "TouchEnded", true), value);
remove => HookEndpointManager.Remove<Delegates.TouchEnded_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "TouchEnded", true), value);
}
public static event Delegates.get_ActiveArea_WithArgs get_ActiveArea
{
add => HookEndpointManager.Add<Delegates.get_ActiveArea_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "get_ActiveArea", true), value);
remove => HookEndpointManager.Remove<Delegates.get_ActiveArea_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "get_ActiveArea", true), value);
}
public static event Delegates.set_ActiveArea_WithArgs set_ActiveArea
{
add => HookEndpointManager.Add<Delegates.set_ActiveArea_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "set_ActiveArea", true), value);
remove => HookEndpointManager.Remove<Delegates.set_ActiveArea_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "set_ActiveArea", true), value);
}
public static event Delegates.get_AreaUnitType_WithArgs get_AreaUnitType
{
add => HookEndpointManager.Add<Delegates.get_AreaUnitType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "get_AreaUnitType", true), value);
remove => HookEndpointManager.Remove<Delegates.get_AreaUnitType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "get_AreaUnitType", true), value);
}
public static event Delegates.set_AreaUnitType_WithArgs set_AreaUnitType
{
add => HookEndpointManager.Add<Delegates.set_AreaUnitType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "set_AreaUnitType", true), value);
remove => HookEndpointManager.Remove<Delegates.set_AreaUnitType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchSwipeControl), "set_AreaUnitType", true), value);
}
}

}
