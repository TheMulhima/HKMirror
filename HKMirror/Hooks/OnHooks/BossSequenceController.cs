using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for BossSequenceController class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBossSequenceController
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_BoundNail()
        {
            if (!HookedList.Contains("get_BoundNail"))
            {
                HookedList.Add("get_BoundNail");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BoundNail", false),
                    get_BoundNail);
            }
        }

        internal static event Delegates.get_BoundNail_BeforeArgs _beforeget_BoundNail;
        internal static event Delegates.get_BoundNail_AfterArgs _afterget_BoundNail;

        private static bool get_BoundNail(Func<bool> orig)
        {
            if (_beforeget_BoundNail != null)
                foreach (Delegates.get_BoundNail_BeforeArgs toInvoke in _beforeget_BoundNail.GetInvocationList())
                    try
                    {
                        _beforeget_BoundNail?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_BoundNail != null)
                foreach (Delegates.get_BoundNail_AfterArgs toInvoke in _afterget_BoundNail.GetInvocationList())
                    try
                    {
                        retVal = _afterget_BoundNail.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_BoundShell()
        {
            if (!HookedList.Contains("get_BoundShell"))
            {
                HookedList.Add("get_BoundShell");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BoundShell", false),
                    get_BoundShell);
            }
        }

        internal static event Delegates.get_BoundShell_BeforeArgs _beforeget_BoundShell;
        internal static event Delegates.get_BoundShell_AfterArgs _afterget_BoundShell;

        private static bool get_BoundShell(Func<bool> orig)
        {
            if (_beforeget_BoundShell != null)
                foreach (Delegates.get_BoundShell_BeforeArgs toInvoke in _beforeget_BoundShell.GetInvocationList())
                    try
                    {
                        _beforeget_BoundShell?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_BoundShell != null)
                foreach (Delegates.get_BoundShell_AfterArgs toInvoke in _afterget_BoundShell.GetInvocationList())
                    try
                    {
                        retVal = _afterget_BoundShell.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_BoundCharms()
        {
            if (!HookedList.Contains("get_BoundCharms"))
            {
                HookedList.Add("get_BoundCharms");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BoundCharms", false),
                    get_BoundCharms);
            }
        }

        internal static event Delegates.get_BoundCharms_BeforeArgs _beforeget_BoundCharms;
        internal static event Delegates.get_BoundCharms_AfterArgs _afterget_BoundCharms;

        private static bool get_BoundCharms(Func<bool> orig)
        {
            if (_beforeget_BoundCharms != null)
                foreach (Delegates.get_BoundCharms_BeforeArgs toInvoke in _beforeget_BoundCharms.GetInvocationList())
                    try
                    {
                        _beforeget_BoundCharms?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_BoundCharms != null)
                foreach (Delegates.get_BoundCharms_AfterArgs toInvoke in _afterget_BoundCharms.GetInvocationList())
                    try
                    {
                        retVal = _afterget_BoundCharms.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_BoundSoul()
        {
            if (!HookedList.Contains("get_BoundSoul"))
            {
                HookedList.Add("get_BoundSoul");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BoundSoul", false),
                    get_BoundSoul);
            }
        }

        internal static event Delegates.get_BoundSoul_BeforeArgs _beforeget_BoundSoul;
        internal static event Delegates.get_BoundSoul_AfterArgs _afterget_BoundSoul;

        private static bool get_BoundSoul(Func<bool> orig)
        {
            if (_beforeget_BoundSoul != null)
                foreach (Delegates.get_BoundSoul_BeforeArgs toInvoke in _beforeget_BoundSoul.GetInvocationList())
                    try
                    {
                        _beforeget_BoundSoul?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_BoundSoul != null)
                foreach (Delegates.get_BoundSoul_AfterArgs toInvoke in _afterget_BoundSoul.GetInvocationList())
                    try
                    {
                        retVal = _afterget_BoundSoul.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_KnightDamaged()
        {
            if (!HookedList.Contains("get_KnightDamaged"))
            {
                HookedList.Add("get_KnightDamaged");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_KnightDamaged", false),
                    get_KnightDamaged);
            }
        }

        internal static event Delegates.get_KnightDamaged_BeforeArgs _beforeget_KnightDamaged;
        internal static event Delegates.get_KnightDamaged_AfterArgs _afterget_KnightDamaged;

        private static bool get_KnightDamaged(Func<bool> orig)
        {
            if (_beforeget_KnightDamaged != null)
                foreach (Delegates.get_KnightDamaged_BeforeArgs toInvoke in
                         _beforeget_KnightDamaged.GetInvocationList())
                    try
                    {
                        _beforeget_KnightDamaged?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_KnightDamaged != null)
                foreach (Delegates.get_KnightDamaged_AfterArgs toInvoke in _afterget_KnightDamaged.GetInvocationList())
                    try
                    {
                        retVal = _afterget_KnightDamaged.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_KnightDamaged()
        {
            if (!HookedList.Contains("set_KnightDamaged"))
            {
                HookedList.Add("set_KnightDamaged");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "set_KnightDamaged", false),
                    set_KnightDamaged);
            }
        }

        internal static event Delegates.set_KnightDamaged_BeforeArgs _beforeset_KnightDamaged;
        internal static event Delegates.set_KnightDamaged_AfterArgs _afterset_KnightDamaged;

        private static void set_KnightDamaged(Action<bool> orig, bool value)
        {
            Delegates.Params_set_KnightDamaged @params = new()
            {
                value = value
            };
            if (_beforeset_KnightDamaged != null)
                foreach (Delegates.set_KnightDamaged_BeforeArgs toInvoke in
                         _beforeset_KnightDamaged.GetInvocationList())
                    try
                    {
                        _beforeset_KnightDamaged?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_KnightDamaged != null)
                foreach (Delegates.set_KnightDamaged_AfterArgs toInvoke in _afterset_KnightDamaged.GetInvocationList())
                    try
                    {
                        _afterset_KnightDamaged.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_Timer()
        {
            if (!HookedList.Contains("get_Timer"))
            {
                HookedList.Add("get_Timer");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_Timer", false), get_Timer);
            }
        }

        internal static event Delegates.get_Timer_BeforeArgs _beforeget_Timer;
        internal static event Delegates.get_Timer_AfterArgs _afterget_Timer;

        private static float get_Timer(Func<float> orig)
        {
            if (_beforeget_Timer != null)
                foreach (Delegates.get_Timer_BeforeArgs toInvoke in _beforeget_Timer.GetInvocationList())
                    try
                    {
                        _beforeget_Timer?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_Timer != null)
                foreach (Delegates.get_Timer_AfterArgs toInvoke in _afterget_Timer.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Timer.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Timer()
        {
            if (!HookedList.Contains("set_Timer"))
            {
                HookedList.Add("set_Timer");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "set_Timer", false), set_Timer);
            }
        }

        internal static event Delegates.set_Timer_BeforeArgs _beforeset_Timer;
        internal static event Delegates.set_Timer_AfterArgs _afterset_Timer;

        private static void set_Timer(Action<float> orig, float value)
        {
            Delegates.Params_set_Timer @params = new()
            {
                value = value
            };
            if (_beforeset_Timer != null)
                foreach (Delegates.set_Timer_BeforeArgs toInvoke in _beforeset_Timer.GetInvocationList())
                    try
                    {
                        _beforeset_Timer?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_Timer != null)
                foreach (Delegates.set_Timer_AfterArgs toInvoke in _afterset_Timer.GetInvocationList())
                    try
                    {
                        _afterset_Timer.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_WasCompleted()
        {
            if (!HookedList.Contains("get_WasCompleted"))
            {
                HookedList.Add("get_WasCompleted");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_WasCompleted", false),
                    get_WasCompleted);
            }
        }

        internal static event Delegates.get_WasCompleted_BeforeArgs _beforeget_WasCompleted;
        internal static event Delegates.get_WasCompleted_AfterArgs _afterget_WasCompleted;

        private static bool get_WasCompleted(Func<bool> orig)
        {
            if (_beforeget_WasCompleted != null)
                foreach (Delegates.get_WasCompleted_BeforeArgs toInvoke in _beforeget_WasCompleted.GetInvocationList())
                    try
                    {
                        _beforeget_WasCompleted?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_WasCompleted != null)
                foreach (Delegates.get_WasCompleted_AfterArgs toInvoke in _afterget_WasCompleted.GetInvocationList())
                    try
                    {
                        retVal = _afterget_WasCompleted.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_WasCompleted()
        {
            if (!HookedList.Contains("set_WasCompleted"))
            {
                HookedList.Add("set_WasCompleted");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "set_WasCompleted", false),
                    set_WasCompleted);
            }
        }

        internal static event Delegates.set_WasCompleted_BeforeArgs _beforeset_WasCompleted;
        internal static event Delegates.set_WasCompleted_AfterArgs _afterset_WasCompleted;

        private static void set_WasCompleted(Action<bool> orig, bool value)
        {
            Delegates.Params_set_WasCompleted @params = new()
            {
                value = value
            };
            if (_beforeset_WasCompleted != null)
                foreach (Delegates.set_WasCompleted_BeforeArgs toInvoke in _beforeset_WasCompleted.GetInvocationList())
                    try
                    {
                        _beforeset_WasCompleted?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_WasCompleted != null)
                foreach (Delegates.set_WasCompleted_AfterArgs toInvoke in _afterset_WasCompleted.GetInvocationList())
                    try
                    {
                        _afterset_WasCompleted.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_IsInSequence()
        {
            if (!HookedList.Contains("get_IsInSequence"))
            {
                HookedList.Add("get_IsInSequence");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_IsInSequence", false),
                    get_IsInSequence);
            }
        }

        internal static event Delegates.get_IsInSequence_BeforeArgs _beforeget_IsInSequence;
        internal static event Delegates.get_IsInSequence_AfterArgs _afterget_IsInSequence;

        private static bool get_IsInSequence(Func<bool> orig)
        {
            if (_beforeget_IsInSequence != null)
                foreach (Delegates.get_IsInSequence_BeforeArgs toInvoke in _beforeget_IsInSequence.GetInvocationList())
                    try
                    {
                        _beforeget_IsInSequence?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_IsInSequence != null)
                foreach (Delegates.get_IsInSequence_AfterArgs toInvoke in _afterget_IsInSequence.GetInvocationList())
                    try
                    {
                        retVal = _afterget_IsInSequence.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_IsLastBossScene()
        {
            if (!HookedList.Contains("get_IsLastBossScene"))
            {
                HookedList.Add("get_IsLastBossScene");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_IsLastBossScene", false),
                    get_IsLastBossScene);
            }
        }

        internal static event Delegates.get_IsLastBossScene_BeforeArgs _beforeget_IsLastBossScene;
        internal static event Delegates.get_IsLastBossScene_AfterArgs _afterget_IsLastBossScene;

        private static bool get_IsLastBossScene(Func<bool> orig)
        {
            if (_beforeget_IsLastBossScene != null)
                foreach (Delegates.get_IsLastBossScene_BeforeArgs toInvoke in _beforeget_IsLastBossScene
                             .GetInvocationList())
                    try
                    {
                        _beforeget_IsLastBossScene?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_IsLastBossScene != null)
                foreach (Delegates.get_IsLastBossScene_AfterArgs toInvoke in
                         _afterget_IsLastBossScene.GetInvocationList())
                    try
                    {
                        retVal = _afterget_IsLastBossScene.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_BossIndex()
        {
            if (!HookedList.Contains("get_BossIndex"))
            {
                HookedList.Add("get_BossIndex");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BossIndex", false),
                    get_BossIndex);
            }
        }

        internal static event Delegates.get_BossIndex_BeforeArgs _beforeget_BossIndex;
        internal static event Delegates.get_BossIndex_AfterArgs _afterget_BossIndex;

        private static int get_BossIndex(Func<int> orig)
        {
            if (_beforeget_BossIndex != null)
                foreach (Delegates.get_BossIndex_BeforeArgs toInvoke in _beforeget_BossIndex.GetInvocationList())
                    try
                    {
                        _beforeget_BossIndex?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_BossIndex != null)
                foreach (Delegates.get_BossIndex_AfterArgs toInvoke in _afterget_BossIndex.GetInvocationList())
                    try
                    {
                        retVal = _afterget_BossIndex.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_BossCount()
        {
            if (!HookedList.Contains("get_BossCount"))
            {
                HookedList.Add("get_BossCount");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BossCount", false),
                    get_BossCount);
            }
        }

        internal static event Delegates.get_BossCount_BeforeArgs _beforeget_BossCount;
        internal static event Delegates.get_BossCount_AfterArgs _afterget_BossCount;

        private static int get_BossCount(Func<int> orig)
        {
            if (_beforeget_BossCount != null)
                foreach (Delegates.get_BossCount_BeforeArgs toInvoke in _beforeget_BossCount.GetInvocationList())
                    try
                    {
                        _beforeget_BossCount?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_BossCount != null)
                foreach (Delegates.get_BossCount_AfterArgs toInvoke in _afterget_BossCount.GetInvocationList())
                    try
                    {
                        retVal = _afterget_BossCount.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_ShouldUnlockGGMode()
        {
            if (!HookedList.Contains("get_ShouldUnlockGGMode"))
            {
                HookedList.Add("get_ShouldUnlockGGMode");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_ShouldUnlockGGMode", false),
                    get_ShouldUnlockGGMode);
            }
        }

        internal static event Delegates.get_ShouldUnlockGGMode_BeforeArgs _beforeget_ShouldUnlockGGMode;
        internal static event Delegates.get_ShouldUnlockGGMode_AfterArgs _afterget_ShouldUnlockGGMode;

        private static bool get_ShouldUnlockGGMode(Func<bool> orig)
        {
            if (_beforeget_ShouldUnlockGGMode != null)
                foreach (Delegates.get_ShouldUnlockGGMode_BeforeArgs toInvoke in _beforeget_ShouldUnlockGGMode
                             .GetInvocationList())
                    try
                    {
                        _beforeget_ShouldUnlockGGMode?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_ShouldUnlockGGMode != null)
                foreach (Delegates.get_ShouldUnlockGGMode_AfterArgs toInvoke in _afterget_ShouldUnlockGGMode
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_ShouldUnlockGGMode.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_BoundMaxHealth()
        {
            if (!HookedList.Contains("get_BoundMaxHealth"))
            {
                HookedList.Add("get_BoundMaxHealth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BoundMaxHealth", false),
                    get_BoundMaxHealth);
            }
        }

        internal static event Delegates.get_BoundMaxHealth_BeforeArgs _beforeget_BoundMaxHealth;
        internal static event Delegates.get_BoundMaxHealth_AfterArgs _afterget_BoundMaxHealth;

        private static int get_BoundMaxHealth(Func<int> orig)
        {
            if (_beforeget_BoundMaxHealth != null)
                foreach (Delegates.get_BoundMaxHealth_BeforeArgs toInvoke in
                         _beforeget_BoundMaxHealth.GetInvocationList())
                    try
                    {
                        _beforeget_BoundMaxHealth?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_BoundMaxHealth != null)
                foreach (Delegates.get_BoundMaxHealth_AfterArgs toInvoke in
                         _afterget_BoundMaxHealth.GetInvocationList())
                    try
                    {
                        retVal = _afterget_BoundMaxHealth.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_BoundNailDamage()
        {
            if (!HookedList.Contains("get_BoundNailDamage"))
            {
                HookedList.Add("get_BoundNailDamage");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BoundNailDamage", false),
                    get_BoundNailDamage);
            }
        }

        internal static event Delegates.get_BoundNailDamage_BeforeArgs _beforeget_BoundNailDamage;
        internal static event Delegates.get_BoundNailDamage_AfterArgs _afterget_BoundNailDamage;

        private static int get_BoundNailDamage(Func<int> orig)
        {
            if (_beforeget_BoundNailDamage != null)
                foreach (Delegates.get_BoundNailDamage_BeforeArgs toInvoke in _beforeget_BoundNailDamage
                             .GetInvocationList())
                    try
                    {
                        _beforeget_BoundNailDamage?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_BoundNailDamage != null)
                foreach (Delegates.get_BoundNailDamage_AfterArgs toInvoke in
                         _afterget_BoundNailDamage.GetInvocationList())
                    try
                    {
                        retVal = _afterget_BoundNailDamage.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_ForceAssetUnload()
        {
            if (!HookedList.Contains("get_ForceAssetUnload"))
            {
                HookedList.Add("get_ForceAssetUnload");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_ForceAssetUnload", false),
                    get_ForceAssetUnload);
            }
        }

        internal static event Delegates.get_ForceAssetUnload_BeforeArgs _beforeget_ForceAssetUnload;
        internal static event Delegates.get_ForceAssetUnload_AfterArgs _afterget_ForceAssetUnload;

        private static bool get_ForceAssetUnload(Func<bool> orig)
        {
            if (_beforeget_ForceAssetUnload != null)
                foreach (Delegates.get_ForceAssetUnload_BeforeArgs toInvoke in _beforeget_ForceAssetUnload
                             .GetInvocationList())
                    try
                    {
                        _beforeget_ForceAssetUnload?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_ForceAssetUnload != null)
                foreach (Delegates.get_ForceAssetUnload_AfterArgs toInvoke in _afterget_ForceAssetUnload
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_ForceAssetUnload.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                On.BossSequenceController.Reset += Reset;
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_AfterArgs _afterReset;

        private static void Reset(On.BossSequenceController.orig_Reset orig)
        {
            if (_beforeReset != null)
                foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
                    try
                    {
                        _beforeReset?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterReset != null)
                foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
                    try
                    {
                        _afterReset.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckLoadSequence()
        {
            if (!HookedList.Contains("CheckLoadSequence"))
            {
                HookedList.Add("CheckLoadSequence");
                On.BossSequenceController.CheckLoadSequence += CheckLoadSequence;
            }
        }

        internal static event Delegates.CheckLoadSequence_BeforeArgs _beforeCheckLoadSequence;
        internal static event Delegates.CheckLoadSequence_AfterArgs _afterCheckLoadSequence;

        private static void CheckLoadSequence(On.BossSequenceController.orig_CheckLoadSequence orig,
            MonoBehaviour caller)
        {
            Delegates.Params_CheckLoadSequence @params = new()
            {
                caller = caller
            };
            if (_beforeCheckLoadSequence != null)
                foreach (Delegates.CheckLoadSequence_BeforeArgs toInvoke in
                         _beforeCheckLoadSequence.GetInvocationList())
                    try
                    {
                        _beforeCheckLoadSequence?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            caller = @params.caller;
            orig(caller);
            if (_afterCheckLoadSequence != null)
                foreach (Delegates.CheckLoadSequence_AfterArgs toInvoke in _afterCheckLoadSequence.GetInvocationList())
                    try
                    {
                        _afterCheckLoadSequence.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLoadCurrentSequence()
        {
            if (!HookedList.Contains("LoadCurrentSequence"))
            {
                HookedList.Add("LoadCurrentSequence");
                On.BossSequenceController.LoadCurrentSequence += LoadCurrentSequence;
            }
        }

        internal static event Delegates.LoadCurrentSequence_BeforeArgs _beforeLoadCurrentSequence;
        internal static event Delegates.LoadCurrentSequence_AfterArgs _afterLoadCurrentSequence;

        private static void LoadCurrentSequence(On.BossSequenceController.orig_LoadCurrentSequence orig,
            MonoBehaviour caller)
        {
            Delegates.Params_LoadCurrentSequence @params = new()
            {
                caller = caller
            };
            if (_beforeLoadCurrentSequence != null)
                foreach (Delegates.LoadCurrentSequence_BeforeArgs toInvoke in _beforeLoadCurrentSequence
                             .GetInvocationList())
                    try
                    {
                        _beforeLoadCurrentSequence?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            caller = @params.caller;
            orig(caller);
            if (_afterLoadCurrentSequence != null)
                foreach (Delegates.LoadCurrentSequence_AfterArgs toInvoke in
                         _afterLoadCurrentSequence.GetInvocationList())
                    try
                    {
                        _afterLoadCurrentSequence.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyBindings()
        {
            if (!HookedList.Contains("ApplyBindings"))
            {
                HookedList.Add("ApplyBindings");
                On.BossSequenceController.ApplyBindings += ApplyBindings;
            }
        }

        internal static event Delegates.ApplyBindings_BeforeArgs _beforeApplyBindings;
        internal static event Delegates.ApplyBindings_AfterArgs _afterApplyBindings;

        private static void ApplyBindings(On.BossSequenceController.orig_ApplyBindings orig)
        {
            if (_beforeApplyBindings != null)
                foreach (Delegates.ApplyBindings_BeforeArgs toInvoke in _beforeApplyBindings.GetInvocationList())
                    try
                    {
                        _beforeApplyBindings?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterApplyBindings != null)
                foreach (Delegates.ApplyBindings_AfterArgs toInvoke in _afterApplyBindings.GetInvocationList())
                    try
                    {
                        _afterApplyBindings.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRestoreBindings()
        {
            if (!HookedList.Contains("RestoreBindings"))
            {
                HookedList.Add("RestoreBindings");
                On.BossSequenceController.RestoreBindings += RestoreBindings;
            }
        }

        internal static event Delegates.RestoreBindings_BeforeArgs _beforeRestoreBindings;
        internal static event Delegates.RestoreBindings_AfterArgs _afterRestoreBindings;

        private static void RestoreBindings(On.BossSequenceController.orig_RestoreBindings orig)
        {
            if (_beforeRestoreBindings != null)
                foreach (Delegates.RestoreBindings_BeforeArgs toInvoke in _beforeRestoreBindings.GetInvocationList())
                    try
                    {
                        _beforeRestoreBindings?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterRestoreBindings != null)
                foreach (Delegates.RestoreBindings_AfterArgs toInvoke in _afterRestoreBindings.GetInvocationList())
                    try
                    {
                        _afterRestoreBindings.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookResetBindingDisplay()
        {
            if (!HookedList.Contains("ResetBindingDisplay"))
            {
                HookedList.Add("ResetBindingDisplay");
                On.BossSequenceController.ResetBindingDisplay += ResetBindingDisplay;
            }
        }

        internal static event Delegates.ResetBindingDisplay_BeforeArgs _beforeResetBindingDisplay;

        private static IEnumerator ResetBindingDisplay(On.BossSequenceController.orig_ResetBindingDisplay orig)
        {
            if (_beforeResetBindingDisplay != null)
                foreach (Delegates.ResetBindingDisplay_BeforeArgs toInvoke in _beforeResetBindingDisplay
                             .GetInvocationList())
                    try
                    {
                        _beforeResetBindingDisplay?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return orig();
        }

        internal static void HookSetupBossScene()
        {
            if (!HookedList.Contains("SetupBossScene"))
            {
                HookedList.Add("SetupBossScene");
                On.BossSequenceController.SetupBossScene += SetupBossScene;
            }
        }

        internal static event Delegates.SetupBossScene_BeforeArgs _beforeSetupBossScene;
        internal static event Delegates.SetupBossScene_AfterArgs _afterSetupBossScene;

        private static void SetupBossScene(On.BossSequenceController.orig_SetupBossScene orig)
        {
            if (_beforeSetupBossScene != null)
                foreach (Delegates.SetupBossScene_BeforeArgs toInvoke in _beforeSetupBossScene.GetInvocationList())
                    try
                    {
                        _beforeSetupBossScene?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterSetupBossScene != null)
                foreach (Delegates.SetupBossScene_AfterArgs toInvoke in _afterSetupBossScene.GetInvocationList())
                    try
                    {
                        _afterSetupBossScene.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookIncrementBossIndex()
        {
            if (!HookedList.Contains("IncrementBossIndex"))
            {
                HookedList.Add("IncrementBossIndex");
                On.BossSequenceController.IncrementBossIndex += IncrementBossIndex;
            }
        }

        internal static event Delegates.IncrementBossIndex_BeforeArgs _beforeIncrementBossIndex;
        internal static event Delegates.IncrementBossIndex_AfterArgs _afterIncrementBossIndex;

        private static void IncrementBossIndex(On.BossSequenceController.orig_IncrementBossIndex orig)
        {
            if (_beforeIncrementBossIndex != null)
                foreach (Delegates.IncrementBossIndex_BeforeArgs toInvoke in
                         _beforeIncrementBossIndex.GetInvocationList())
                    try
                    {
                        _beforeIncrementBossIndex?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterIncrementBossIndex != null)
                foreach (Delegates.IncrementBossIndex_AfterArgs toInvoke in
                         _afterIncrementBossIndex.GetInvocationList())
                    try
                    {
                        _afterIncrementBossIndex.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFinishLastBossScene()
        {
            if (!HookedList.Contains("FinishLastBossScene"))
            {
                HookedList.Add("FinishLastBossScene");
                On.BossSequenceController.FinishLastBossScene += FinishLastBossScene;
            }
        }

        internal static event Delegates.FinishLastBossScene_BeforeArgs _beforeFinishLastBossScene;
        internal static event Delegates.FinishLastBossScene_AfterArgs _afterFinishLastBossScene;

        private static void FinishLastBossScene(On.BossSequenceController.orig_FinishLastBossScene orig,
            BossSceneController self)
        {
            Delegates.Params_FinishLastBossScene @params = new()
            {
                self = self
            };
            if (_beforeFinishLastBossScene != null)
                foreach (Delegates.FinishLastBossScene_BeforeArgs toInvoke in _beforeFinishLastBossScene
                             .GetInvocationList())
                    try
                    {
                        _beforeFinishLastBossScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterFinishLastBossScene != null)
                foreach (Delegates.FinishLastBossScene_AfterArgs toInvoke in
                         _afterFinishLastBossScene.GetInvocationList())
                    try
                    {
                        _afterFinishLastBossScene.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckIfSequence()
        {
            if (!HookedList.Contains("CheckIfSequence"))
            {
                HookedList.Add("CheckIfSequence");
                On.BossSequenceController.CheckIfSequence += CheckIfSequence;
            }
        }

        internal static event Delegates.CheckIfSequence_BeforeArgs _beforeCheckIfSequence;
        internal static event Delegates.CheckIfSequence_AfterArgs _afterCheckIfSequence;

        private static bool CheckIfSequence(On.BossSequenceController.orig_CheckIfSequence orig, BossSequence sequence)
        {
            Delegates.Params_CheckIfSequence @params = new()
            {
                sequence = sequence
            };
            if (_beforeCheckIfSequence != null)
                foreach (Delegates.CheckIfSequence_BeforeArgs toInvoke in _beforeCheckIfSequence.GetInvocationList())
                    try
                    {
                        _beforeCheckIfSequence?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            sequence = @params.sequence;
            var retVal = orig(sequence);
            if (_afterCheckIfSequence != null)
                foreach (Delegates.CheckIfSequence_AfterArgs toInvoke in _afterCheckIfSequence.GetInvocationList())
                    try
                    {
                        retVal = _afterCheckIfSequence.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetMinValue()
        {
            if (!HookedList.Contains("SetMinValue"))
            {
                HookedList.Add("SetMinValue");
                On.BossSequenceController.SetMinValue += SetMinValue;
            }
        }

        internal static event Delegates.SetMinValue_BeforeArgs _beforeSetMinValue;
        internal static event Delegates.SetMinValue_AfterArgs _afterSetMinValue;

        private static void SetMinValue(On.BossSequenceController.orig_SetMinValue orig, ref int variable, int[] values)
        {
            Delegates.Params_SetMinValue @params = new()
            {
                variable = variable, values = values
            };
            if (_beforeSetMinValue != null)
                foreach (Delegates.SetMinValue_BeforeArgs toInvoke in _beforeSetMinValue.GetInvocationList())
                    try
                    {
                        _beforeSetMinValue?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            variable = @params.variable;
            values = @params.values;
            orig(ref variable, values);
            if (_afterSetMinValue != null)
                foreach (Delegates.SetMinValue_AfterArgs toInvoke in _afterSetMinValue.GetInvocationList())
                    try
                    {
                        _afterSetMinValue.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetCharmsEquipped()
        {
            if (!HookedList.Contains("SetCharmsEquipped"))
            {
                HookedList.Add("SetCharmsEquipped");
                On.BossSequenceController.SetCharmsEquipped += SetCharmsEquipped;
            }
        }

        internal static event Delegates.SetCharmsEquipped_BeforeArgs _beforeSetCharmsEquipped;
        internal static event Delegates.SetCharmsEquipped_AfterArgs _afterSetCharmsEquipped;

        private static void SetCharmsEquipped(On.BossSequenceController.orig_SetCharmsEquipped orig, bool value)
        {
            Delegates.Params_SetCharmsEquipped @params = new()
            {
                value = value
            };
            if (_beforeSetCharmsEquipped != null)
                foreach (Delegates.SetCharmsEquipped_BeforeArgs toInvoke in
                         _beforeSetCharmsEquipped.GetInvocationList())
                    try
                    {
                        _beforeSetCharmsEquipped?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterSetCharmsEquipped != null)
                foreach (Delegates.SetCharmsEquipped_AfterArgs toInvoke in _afterSetCharmsEquipped.GetInvocationList())
                    try
                    {
                        _afterSetCharmsEquipped.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ApplyBindings_AfterArgs();

        public delegate void ApplyBindings_BeforeArgs();

        public delegate void ApplyBindings_WithArgs(Action orig);

        public delegate bool CheckIfSequence_AfterArgs(Params_CheckIfSequence args, bool ret);

        public delegate void CheckIfSequence_BeforeArgs(Params_CheckIfSequence args);

        public delegate bool CheckIfSequence_WithArgs(Func<BossSequence, bool> orig, BossSequence sequence);

        public delegate void CheckLoadSequence_AfterArgs(Params_CheckLoadSequence args);

        public delegate void CheckLoadSequence_BeforeArgs(Params_CheckLoadSequence args);

        public delegate void CheckLoadSequence_WithArgs(Action<MonoBehaviour> orig, MonoBehaviour caller);

        public delegate void FinishLastBossScene_AfterArgs(Params_FinishLastBossScene args);

        public delegate void FinishLastBossScene_BeforeArgs(Params_FinishLastBossScene args);

        public delegate void FinishLastBossScene_WithArgs(Action<BossSceneController> orig, BossSceneController self);

        public delegate int get_BossCount_AfterArgs(int ret);

        public delegate void get_BossCount_BeforeArgs();

        public delegate int get_BossCount_WithArgs(Func<int> orig);

        public delegate int get_BossIndex_AfterArgs(int ret);

        public delegate void get_BossIndex_BeforeArgs();

        public delegate int get_BossIndex_WithArgs(Func<int> orig);

        public delegate bool get_BoundCharms_AfterArgs(bool ret);

        public delegate void get_BoundCharms_BeforeArgs();

        public delegate bool get_BoundCharms_WithArgs(Func<bool> orig);

        public delegate int get_BoundMaxHealth_AfterArgs(int ret);

        public delegate void get_BoundMaxHealth_BeforeArgs();

        public delegate int get_BoundMaxHealth_WithArgs(Func<int> orig);

        public delegate bool get_BoundNail_AfterArgs(bool ret);

        public delegate void get_BoundNail_BeforeArgs();

        public delegate bool get_BoundNail_WithArgs(Func<bool> orig);

        public delegate int get_BoundNailDamage_AfterArgs(int ret);

        public delegate void get_BoundNailDamage_BeforeArgs();

        public delegate int get_BoundNailDamage_WithArgs(Func<int> orig);

        public delegate bool get_BoundShell_AfterArgs(bool ret);

        public delegate void get_BoundShell_BeforeArgs();

        public delegate bool get_BoundShell_WithArgs(Func<bool> orig);

        public delegate bool get_BoundSoul_AfterArgs(bool ret);

        public delegate void get_BoundSoul_BeforeArgs();

        public delegate bool get_BoundSoul_WithArgs(Func<bool> orig);

        public delegate bool get_ForceAssetUnload_AfterArgs(bool ret);

        public delegate void get_ForceAssetUnload_BeforeArgs();

        public delegate bool get_ForceAssetUnload_WithArgs(Func<bool> orig);

        public delegate bool get_IsInSequence_AfterArgs(bool ret);

        public delegate void get_IsInSequence_BeforeArgs();

        public delegate bool get_IsInSequence_WithArgs(Func<bool> orig);

        public delegate bool get_IsLastBossScene_AfterArgs(bool ret);

        public delegate void get_IsLastBossScene_BeforeArgs();

        public delegate bool get_IsLastBossScene_WithArgs(Func<bool> orig);

        public delegate bool get_KnightDamaged_AfterArgs(bool ret);

        public delegate void get_KnightDamaged_BeforeArgs();

        public delegate bool get_KnightDamaged_WithArgs(Func<bool> orig);

        public delegate bool get_ShouldUnlockGGMode_AfterArgs(bool ret);

        public delegate void get_ShouldUnlockGGMode_BeforeArgs();

        public delegate bool get_ShouldUnlockGGMode_WithArgs(Func<bool> orig);

        public delegate float get_Timer_AfterArgs(float ret);

        public delegate void get_Timer_BeforeArgs();

        public delegate float get_Timer_WithArgs(Func<float> orig);

        public delegate bool get_WasCompleted_AfterArgs(bool ret);

        public delegate void get_WasCompleted_BeforeArgs();

        public delegate bool get_WasCompleted_WithArgs(Func<bool> orig);

        public delegate void IncrementBossIndex_AfterArgs();

        public delegate void IncrementBossIndex_BeforeArgs();

        public delegate void IncrementBossIndex_WithArgs(Action orig);

        public delegate void LoadCurrentSequence_AfterArgs(Params_LoadCurrentSequence args);

        public delegate void LoadCurrentSequence_BeforeArgs(Params_LoadCurrentSequence args);

        public delegate void LoadCurrentSequence_WithArgs(Action<MonoBehaviour> orig, MonoBehaviour caller);

        public delegate void Reset_AfterArgs();

        public delegate void Reset_BeforeArgs();

        public delegate void Reset_WithArgs(Action orig);

        public delegate IEnumerator ResetBindingDisplay_AfterArgs(IEnumerator ret);

        public delegate void ResetBindingDisplay_BeforeArgs();

        public delegate IEnumerator ResetBindingDisplay_WithArgs(Func<IEnumerator> orig);

        public delegate void RestoreBindings_AfterArgs();

        public delegate void RestoreBindings_BeforeArgs();

        public delegate void RestoreBindings_WithArgs(Action orig);

        public delegate void set_KnightDamaged_AfterArgs(Params_set_KnightDamaged args);

        public delegate void set_KnightDamaged_BeforeArgs(Params_set_KnightDamaged args);

        public delegate void set_KnightDamaged_WithArgs(Action<bool> orig, bool value);

        public delegate void set_Timer_AfterArgs(Params_set_Timer args);

        public delegate void set_Timer_BeforeArgs(Params_set_Timer args);

        public delegate void set_Timer_WithArgs(Action<float> orig, float value);

        public delegate void set_WasCompleted_AfterArgs(Params_set_WasCompleted args);

        public delegate void set_WasCompleted_BeforeArgs(Params_set_WasCompleted args);

        public delegate void set_WasCompleted_WithArgs(Action<bool> orig, bool value);

        public delegate void SetCharmsEquipped_AfterArgs(Params_SetCharmsEquipped args);

        public delegate void SetCharmsEquipped_BeforeArgs(Params_SetCharmsEquipped args);

        public delegate void SetCharmsEquipped_WithArgs(Action<bool> orig, bool value);

        public delegate void SetMinValue_AfterArgs(Params_SetMinValue args);

        public delegate void SetMinValue_BeforeArgs(Params_SetMinValue args);

        public delegate void SetMinValue_WithArgs(Action<int, int[]> orig, ref int variable, int[] values);

        public delegate void SetupBossScene_AfterArgs();

        public delegate void SetupBossScene_BeforeArgs();

        public delegate void SetupBossScene_WithArgs(Action orig);

        public sealed class Params_set_KnightDamaged
        {
            public bool value;
        }

        public sealed class Params_set_Timer
        {
            public float value;
        }

        public sealed class Params_set_WasCompleted
        {
            public bool value;
        }

        public sealed class Params_CheckLoadSequence
        {
            public MonoBehaviour caller;
        }

        public sealed class Params_LoadCurrentSequence
        {
            public MonoBehaviour caller;
        }

        public sealed class Params_FinishLastBossScene
        {
            public BossSceneController self;
        }

        public sealed class Params_CheckIfSequence
        {
            public BossSequence sequence;
        }

        public sealed class Params_SetMinValue
        {
            public int[] values;
            public int variable;
        }

        public sealed class Params_SetCharmsEquipped
        {
            public bool value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_BoundNail_BeforeArgs get_BoundNail
        {
            add
            {
                HookHandler._beforeget_BoundNail += value;
                HookHandler.Hookget_BoundNail();
            }
            remove => HookHandler._beforeget_BoundNail -= value;
        }

        public static event Delegates.get_BoundShell_BeforeArgs get_BoundShell
        {
            add
            {
                HookHandler._beforeget_BoundShell += value;
                HookHandler.Hookget_BoundShell();
            }
            remove => HookHandler._beforeget_BoundShell -= value;
        }

        public static event Delegates.get_BoundCharms_BeforeArgs get_BoundCharms
        {
            add
            {
                HookHandler._beforeget_BoundCharms += value;
                HookHandler.Hookget_BoundCharms();
            }
            remove => HookHandler._beforeget_BoundCharms -= value;
        }

        public static event Delegates.get_BoundSoul_BeforeArgs get_BoundSoul
        {
            add
            {
                HookHandler._beforeget_BoundSoul += value;
                HookHandler.Hookget_BoundSoul();
            }
            remove => HookHandler._beforeget_BoundSoul -= value;
        }

        public static event Delegates.get_KnightDamaged_BeforeArgs get_KnightDamaged
        {
            add
            {
                HookHandler._beforeget_KnightDamaged += value;
                HookHandler.Hookget_KnightDamaged();
            }
            remove => HookHandler._beforeget_KnightDamaged -= value;
        }

        public static event Delegates.set_KnightDamaged_BeforeArgs set_KnightDamaged
        {
            add
            {
                HookHandler._beforeset_KnightDamaged += value;
                HookHandler.Hookset_KnightDamaged();
            }
            remove => HookHandler._beforeset_KnightDamaged -= value;
        }

        public static event Delegates.get_Timer_BeforeArgs get_Timer
        {
            add
            {
                HookHandler._beforeget_Timer += value;
                HookHandler.Hookget_Timer();
            }
            remove => HookHandler._beforeget_Timer -= value;
        }

        public static event Delegates.set_Timer_BeforeArgs set_Timer
        {
            add
            {
                HookHandler._beforeset_Timer += value;
                HookHandler.Hookset_Timer();
            }
            remove => HookHandler._beforeset_Timer -= value;
        }

        public static event Delegates.get_WasCompleted_BeforeArgs get_WasCompleted
        {
            add
            {
                HookHandler._beforeget_WasCompleted += value;
                HookHandler.Hookget_WasCompleted();
            }
            remove => HookHandler._beforeget_WasCompleted -= value;
        }

        public static event Delegates.set_WasCompleted_BeforeArgs set_WasCompleted
        {
            add
            {
                HookHandler._beforeset_WasCompleted += value;
                HookHandler.Hookset_WasCompleted();
            }
            remove => HookHandler._beforeset_WasCompleted -= value;
        }

        public static event Delegates.get_IsInSequence_BeforeArgs get_IsInSequence
        {
            add
            {
                HookHandler._beforeget_IsInSequence += value;
                HookHandler.Hookget_IsInSequence();
            }
            remove => HookHandler._beforeget_IsInSequence -= value;
        }

        public static event Delegates.get_IsLastBossScene_BeforeArgs get_IsLastBossScene
        {
            add
            {
                HookHandler._beforeget_IsLastBossScene += value;
                HookHandler.Hookget_IsLastBossScene();
            }
            remove => HookHandler._beforeget_IsLastBossScene -= value;
        }

        public static event Delegates.get_BossIndex_BeforeArgs get_BossIndex
        {
            add
            {
                HookHandler._beforeget_BossIndex += value;
                HookHandler.Hookget_BossIndex();
            }
            remove => HookHandler._beforeget_BossIndex -= value;
        }

        public static event Delegates.get_BossCount_BeforeArgs get_BossCount
        {
            add
            {
                HookHandler._beforeget_BossCount += value;
                HookHandler.Hookget_BossCount();
            }
            remove => HookHandler._beforeget_BossCount -= value;
        }

        public static event Delegates.get_ShouldUnlockGGMode_BeforeArgs get_ShouldUnlockGGMode
        {
            add
            {
                HookHandler._beforeget_ShouldUnlockGGMode += value;
                HookHandler.Hookget_ShouldUnlockGGMode();
            }
            remove => HookHandler._beforeget_ShouldUnlockGGMode -= value;
        }

        public static event Delegates.get_BoundMaxHealth_BeforeArgs get_BoundMaxHealth
        {
            add
            {
                HookHandler._beforeget_BoundMaxHealth += value;
                HookHandler.Hookget_BoundMaxHealth();
            }
            remove => HookHandler._beforeget_BoundMaxHealth -= value;
        }

        public static event Delegates.get_BoundNailDamage_BeforeArgs get_BoundNailDamage
        {
            add
            {
                HookHandler._beforeget_BoundNailDamage += value;
                HookHandler.Hookget_BoundNailDamage();
            }
            remove => HookHandler._beforeget_BoundNailDamage -= value;
        }

        public static event Delegates.get_ForceAssetUnload_BeforeArgs get_ForceAssetUnload
        {
            add
            {
                HookHandler._beforeget_ForceAssetUnload += value;
                HookHandler.Hookget_ForceAssetUnload();
            }
            remove => HookHandler._beforeget_ForceAssetUnload -= value;
        }

        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.CheckLoadSequence_BeforeArgs CheckLoadSequence
        {
            add
            {
                HookHandler._beforeCheckLoadSequence += value;
                HookHandler.HookCheckLoadSequence();
            }
            remove => HookHandler._beforeCheckLoadSequence -= value;
        }

        public static event Delegates.LoadCurrentSequence_BeforeArgs LoadCurrentSequence
        {
            add
            {
                HookHandler._beforeLoadCurrentSequence += value;
                HookHandler.HookLoadCurrentSequence();
            }
            remove => HookHandler._beforeLoadCurrentSequence -= value;
        }

        public static event Delegates.ApplyBindings_BeforeArgs ApplyBindings
        {
            add
            {
                HookHandler._beforeApplyBindings += value;
                HookHandler.HookApplyBindings();
            }
            remove => HookHandler._beforeApplyBindings -= value;
        }

        public static event Delegates.RestoreBindings_BeforeArgs RestoreBindings
        {
            add
            {
                HookHandler._beforeRestoreBindings += value;
                HookHandler.HookRestoreBindings();
            }
            remove => HookHandler._beforeRestoreBindings -= value;
        }

        public static event Delegates.ResetBindingDisplay_BeforeArgs ResetBindingDisplay
        {
            add
            {
                HookHandler._beforeResetBindingDisplay += value;
                HookHandler.HookResetBindingDisplay();
            }
            remove => HookHandler._beforeResetBindingDisplay -= value;
        }

        public static event Delegates.SetupBossScene_BeforeArgs SetupBossScene
        {
            add
            {
                HookHandler._beforeSetupBossScene += value;
                HookHandler.HookSetupBossScene();
            }
            remove => HookHandler._beforeSetupBossScene -= value;
        }

        public static event Delegates.IncrementBossIndex_BeforeArgs IncrementBossIndex
        {
            add
            {
                HookHandler._beforeIncrementBossIndex += value;
                HookHandler.HookIncrementBossIndex();
            }
            remove => HookHandler._beforeIncrementBossIndex -= value;
        }

        public static event Delegates.FinishLastBossScene_BeforeArgs FinishLastBossScene
        {
            add
            {
                HookHandler._beforeFinishLastBossScene += value;
                HookHandler.HookFinishLastBossScene();
            }
            remove => HookHandler._beforeFinishLastBossScene -= value;
        }

        public static event Delegates.CheckIfSequence_BeforeArgs CheckIfSequence
        {
            add
            {
                HookHandler._beforeCheckIfSequence += value;
                HookHandler.HookCheckIfSequence();
            }
            remove => HookHandler._beforeCheckIfSequence -= value;
        }

        public static event Delegates.SetMinValue_BeforeArgs SetMinValue
        {
            add
            {
                HookHandler._beforeSetMinValue += value;
                HookHandler.HookSetMinValue();
            }
            remove => HookHandler._beforeSetMinValue -= value;
        }

        public static event Delegates.SetCharmsEquipped_BeforeArgs SetCharmsEquipped
        {
            add
            {
                HookHandler._beforeSetCharmsEquipped += value;
                HookHandler.HookSetCharmsEquipped();
            }
            remove => HookHandler._beforeSetCharmsEquipped -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_BoundNail_AfterArgs get_BoundNail
        {
            add
            {
                HookHandler._afterget_BoundNail += value;
                HookHandler.Hookget_BoundNail();
            }
            remove => HookHandler._afterget_BoundNail -= value;
        }

        public static event Delegates.get_BoundShell_AfterArgs get_BoundShell
        {
            add
            {
                HookHandler._afterget_BoundShell += value;
                HookHandler.Hookget_BoundShell();
            }
            remove => HookHandler._afterget_BoundShell -= value;
        }

        public static event Delegates.get_BoundCharms_AfterArgs get_BoundCharms
        {
            add
            {
                HookHandler._afterget_BoundCharms += value;
                HookHandler.Hookget_BoundCharms();
            }
            remove => HookHandler._afterget_BoundCharms -= value;
        }

        public static event Delegates.get_BoundSoul_AfterArgs get_BoundSoul
        {
            add
            {
                HookHandler._afterget_BoundSoul += value;
                HookHandler.Hookget_BoundSoul();
            }
            remove => HookHandler._afterget_BoundSoul -= value;
        }

        public static event Delegates.get_KnightDamaged_AfterArgs get_KnightDamaged
        {
            add
            {
                HookHandler._afterget_KnightDamaged += value;
                HookHandler.Hookget_KnightDamaged();
            }
            remove => HookHandler._afterget_KnightDamaged -= value;
        }

        public static event Delegates.set_KnightDamaged_AfterArgs set_KnightDamaged
        {
            add
            {
                HookHandler._afterset_KnightDamaged += value;
                HookHandler.Hookset_KnightDamaged();
            }
            remove => HookHandler._afterset_KnightDamaged -= value;
        }

        public static event Delegates.get_Timer_AfterArgs get_Timer
        {
            add
            {
                HookHandler._afterget_Timer += value;
                HookHandler.Hookget_Timer();
            }
            remove => HookHandler._afterget_Timer -= value;
        }

        public static event Delegates.set_Timer_AfterArgs set_Timer
        {
            add
            {
                HookHandler._afterset_Timer += value;
                HookHandler.Hookset_Timer();
            }
            remove => HookHandler._afterset_Timer -= value;
        }

        public static event Delegates.get_WasCompleted_AfterArgs get_WasCompleted
        {
            add
            {
                HookHandler._afterget_WasCompleted += value;
                HookHandler.Hookget_WasCompleted();
            }
            remove => HookHandler._afterget_WasCompleted -= value;
        }

        public static event Delegates.set_WasCompleted_AfterArgs set_WasCompleted
        {
            add
            {
                HookHandler._afterset_WasCompleted += value;
                HookHandler.Hookset_WasCompleted();
            }
            remove => HookHandler._afterset_WasCompleted -= value;
        }

        public static event Delegates.get_IsInSequence_AfterArgs get_IsInSequence
        {
            add
            {
                HookHandler._afterget_IsInSequence += value;
                HookHandler.Hookget_IsInSequence();
            }
            remove => HookHandler._afterget_IsInSequence -= value;
        }

        public static event Delegates.get_IsLastBossScene_AfterArgs get_IsLastBossScene
        {
            add
            {
                HookHandler._afterget_IsLastBossScene += value;
                HookHandler.Hookget_IsLastBossScene();
            }
            remove => HookHandler._afterget_IsLastBossScene -= value;
        }

        public static event Delegates.get_BossIndex_AfterArgs get_BossIndex
        {
            add
            {
                HookHandler._afterget_BossIndex += value;
                HookHandler.Hookget_BossIndex();
            }
            remove => HookHandler._afterget_BossIndex -= value;
        }

        public static event Delegates.get_BossCount_AfterArgs get_BossCount
        {
            add
            {
                HookHandler._afterget_BossCount += value;
                HookHandler.Hookget_BossCount();
            }
            remove => HookHandler._afterget_BossCount -= value;
        }

        public static event Delegates.get_ShouldUnlockGGMode_AfterArgs get_ShouldUnlockGGMode
        {
            add
            {
                HookHandler._afterget_ShouldUnlockGGMode += value;
                HookHandler.Hookget_ShouldUnlockGGMode();
            }
            remove => HookHandler._afterget_ShouldUnlockGGMode -= value;
        }

        public static event Delegates.get_BoundMaxHealth_AfterArgs get_BoundMaxHealth
        {
            add
            {
                HookHandler._afterget_BoundMaxHealth += value;
                HookHandler.Hookget_BoundMaxHealth();
            }
            remove => HookHandler._afterget_BoundMaxHealth -= value;
        }

        public static event Delegates.get_BoundNailDamage_AfterArgs get_BoundNailDamage
        {
            add
            {
                HookHandler._afterget_BoundNailDamage += value;
                HookHandler.Hookget_BoundNailDamage();
            }
            remove => HookHandler._afterget_BoundNailDamage -= value;
        }

        public static event Delegates.get_ForceAssetUnload_AfterArgs get_ForceAssetUnload
        {
            add
            {
                HookHandler._afterget_ForceAssetUnload += value;
                HookHandler.Hookget_ForceAssetUnload();
            }
            remove => HookHandler._afterget_ForceAssetUnload -= value;
        }

        public static event Delegates.Reset_AfterArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.CheckLoadSequence_AfterArgs CheckLoadSequence
        {
            add
            {
                HookHandler._afterCheckLoadSequence += value;
                HookHandler.HookCheckLoadSequence();
            }
            remove => HookHandler._afterCheckLoadSequence -= value;
        }

        public static event Delegates.LoadCurrentSequence_AfterArgs LoadCurrentSequence
        {
            add
            {
                HookHandler._afterLoadCurrentSequence += value;
                HookHandler.HookLoadCurrentSequence();
            }
            remove => HookHandler._afterLoadCurrentSequence -= value;
        }

        public static event Delegates.ApplyBindings_AfterArgs ApplyBindings
        {
            add
            {
                HookHandler._afterApplyBindings += value;
                HookHandler.HookApplyBindings();
            }
            remove => HookHandler._afterApplyBindings -= value;
        }

        public static event Delegates.RestoreBindings_AfterArgs RestoreBindings
        {
            add
            {
                HookHandler._afterRestoreBindings += value;
                HookHandler.HookRestoreBindings();
            }
            remove => HookHandler._afterRestoreBindings -= value;
        }

        public static event Delegates.SetupBossScene_AfterArgs SetupBossScene
        {
            add
            {
                HookHandler._afterSetupBossScene += value;
                HookHandler.HookSetupBossScene();
            }
            remove => HookHandler._afterSetupBossScene -= value;
        }

        public static event Delegates.IncrementBossIndex_AfterArgs IncrementBossIndex
        {
            add
            {
                HookHandler._afterIncrementBossIndex += value;
                HookHandler.HookIncrementBossIndex();
            }
            remove => HookHandler._afterIncrementBossIndex -= value;
        }

        public static event Delegates.FinishLastBossScene_AfterArgs FinishLastBossScene
        {
            add
            {
                HookHandler._afterFinishLastBossScene += value;
                HookHandler.HookFinishLastBossScene();
            }
            remove => HookHandler._afterFinishLastBossScene -= value;
        }

        public static event Delegates.CheckIfSequence_AfterArgs CheckIfSequence
        {
            add
            {
                HookHandler._afterCheckIfSequence += value;
                HookHandler.HookCheckIfSequence();
            }
            remove => HookHandler._afterCheckIfSequence -= value;
        }

        public static event Delegates.SetMinValue_AfterArgs SetMinValue
        {
            add
            {
                HookHandler._afterSetMinValue += value;
                HookHandler.HookSetMinValue();
            }
            remove => HookHandler._afterSetMinValue -= value;
        }

        public static event Delegates.SetCharmsEquipped_AfterArgs SetCharmsEquipped
        {
            add
            {
                HookHandler._afterSetCharmsEquipped += value;
                HookHandler.HookSetCharmsEquipped();
            }
            remove => HookHandler._afterSetCharmsEquipped -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_BoundNail_WithArgs get_BoundNail
        {
            add => HookEndpointManager.Add<Delegates.get_BoundNail_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BoundNail", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_BoundNail_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BoundNail", false), value);
        }

        public static event Delegates.get_BoundShell_WithArgs get_BoundShell
        {
            add => HookEndpointManager.Add<Delegates.get_BoundShell_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BoundShell", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_BoundShell_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BoundShell", false), value);
        }

        public static event Delegates.get_BoundCharms_WithArgs get_BoundCharms
        {
            add => HookEndpointManager.Add<Delegates.get_BoundCharms_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BoundCharms", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_BoundCharms_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BoundCharms", false), value);
        }

        public static event Delegates.get_BoundSoul_WithArgs get_BoundSoul
        {
            add => HookEndpointManager.Add<Delegates.get_BoundSoul_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BoundSoul", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_BoundSoul_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BoundSoul", false), value);
        }

        public static event Delegates.get_KnightDamaged_WithArgs get_KnightDamaged
        {
            add => HookEndpointManager.Add<Delegates.get_KnightDamaged_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_KnightDamaged", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_KnightDamaged_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_KnightDamaged", false), value);
        }

        public static event Delegates.set_KnightDamaged_WithArgs set_KnightDamaged
        {
            add => HookEndpointManager.Add<Delegates.set_KnightDamaged_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "set_KnightDamaged", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_KnightDamaged_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "set_KnightDamaged", false), value);
        }

        public static event Delegates.get_Timer_WithArgs get_Timer
        {
            add => HookEndpointManager.Add<Delegates.get_Timer_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_Timer", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_Timer_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_Timer", false), value);
        }

        public static event Delegates.set_Timer_WithArgs set_Timer
        {
            add => HookEndpointManager.Add<Delegates.set_Timer_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "set_Timer", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_Timer_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "set_Timer", false), value);
        }

        public static event Delegates.get_WasCompleted_WithArgs get_WasCompleted
        {
            add => HookEndpointManager.Add<Delegates.get_WasCompleted_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_WasCompleted", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_WasCompleted_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_WasCompleted", false), value);
        }

        public static event Delegates.set_WasCompleted_WithArgs set_WasCompleted
        {
            add => HookEndpointManager.Add<Delegates.set_WasCompleted_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "set_WasCompleted", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_WasCompleted_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "set_WasCompleted", false), value);
        }

        public static event Delegates.get_IsInSequence_WithArgs get_IsInSequence
        {
            add => HookEndpointManager.Add<Delegates.get_IsInSequence_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_IsInSequence", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsInSequence_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_IsInSequence", false), value);
        }

        public static event Delegates.get_IsLastBossScene_WithArgs get_IsLastBossScene
        {
            add => HookEndpointManager.Add<Delegates.get_IsLastBossScene_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_IsLastBossScene", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsLastBossScene_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_IsLastBossScene", false), value);
        }

        public static event Delegates.get_BossIndex_WithArgs get_BossIndex
        {
            add => HookEndpointManager.Add<Delegates.get_BossIndex_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BossIndex", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_BossIndex_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BossIndex", false), value);
        }

        public static event Delegates.get_BossCount_WithArgs get_BossCount
        {
            add => HookEndpointManager.Add<Delegates.get_BossCount_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BossCount", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_BossCount_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BossCount", false), value);
        }

        public static event Delegates.get_ShouldUnlockGGMode_WithArgs get_ShouldUnlockGGMode
        {
            add => HookEndpointManager.Add<Delegates.get_ShouldUnlockGGMode_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_ShouldUnlockGGMode", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_ShouldUnlockGGMode_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_ShouldUnlockGGMode", false), value);
        }

        public static event Delegates.get_BoundMaxHealth_WithArgs get_BoundMaxHealth
        {
            add => HookEndpointManager.Add<Delegates.get_BoundMaxHealth_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BoundMaxHealth", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_BoundMaxHealth_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BoundMaxHealth", false), value);
        }

        public static event Delegates.get_BoundNailDamage_WithArgs get_BoundNailDamage
        {
            add => HookEndpointManager.Add<Delegates.get_BoundNailDamage_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BoundNailDamage", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_BoundNailDamage_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_BoundNailDamage", false), value);
        }

        public static event Delegates.get_ForceAssetUnload_WithArgs get_ForceAssetUnload
        {
            add => HookEndpointManager.Add<Delegates.get_ForceAssetUnload_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_ForceAssetUnload", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_ForceAssetUnload_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequenceController), "get_ForceAssetUnload", false), value);
        }

        public static event On.BossSequenceController.hook_Reset Reset
        {
            add => On.BossSequenceController.Reset += value;
            remove => On.BossSequenceController.Reset -= value;
        }

        public static event On.BossSequenceController.hook_CheckLoadSequence CheckLoadSequence
        {
            add => On.BossSequenceController.CheckLoadSequence += value;
            remove => On.BossSequenceController.CheckLoadSequence -= value;
        }

        public static event On.BossSequenceController.hook_LoadCurrentSequence LoadCurrentSequence
        {
            add => On.BossSequenceController.LoadCurrentSequence += value;
            remove => On.BossSequenceController.LoadCurrentSequence -= value;
        }

        public static event On.BossSequenceController.hook_ApplyBindings ApplyBindings
        {
            add => On.BossSequenceController.ApplyBindings += value;
            remove => On.BossSequenceController.ApplyBindings -= value;
        }

        public static event On.BossSequenceController.hook_RestoreBindings RestoreBindings
        {
            add => On.BossSequenceController.RestoreBindings += value;
            remove => On.BossSequenceController.RestoreBindings -= value;
        }

        public static event On.BossSequenceController.hook_ResetBindingDisplay ResetBindingDisplay
        {
            add => On.BossSequenceController.ResetBindingDisplay += value;
            remove => On.BossSequenceController.ResetBindingDisplay -= value;
        }

        public static event On.BossSequenceController.hook_SetupBossScene SetupBossScene
        {
            add => On.BossSequenceController.SetupBossScene += value;
            remove => On.BossSequenceController.SetupBossScene -= value;
        }

        public static event On.BossSequenceController.hook_IncrementBossIndex IncrementBossIndex
        {
            add => On.BossSequenceController.IncrementBossIndex += value;
            remove => On.BossSequenceController.IncrementBossIndex -= value;
        }

        public static event On.BossSequenceController.hook_FinishLastBossScene FinishLastBossScene
        {
            add => On.BossSequenceController.FinishLastBossScene += value;
            remove => On.BossSequenceController.FinishLastBossScene -= value;
        }

        public static event On.BossSequenceController.hook_CheckIfSequence CheckIfSequence
        {
            add => On.BossSequenceController.CheckIfSequence += value;
            remove => On.BossSequenceController.CheckIfSequence -= value;
        }

        public static event On.BossSequenceController.hook_SetMinValue SetMinValue
        {
            add => On.BossSequenceController.SetMinValue += value;
            remove => On.BossSequenceController.SetMinValue -= value;
        }

        public static event On.BossSequenceController.hook_SetCharmsEquipped SetCharmsEquipped
        {
            add => On.BossSequenceController.SetCharmsEquipped += value;
            remove => On.BossSequenceController.SetCharmsEquipped -= value;
        }
    }
}