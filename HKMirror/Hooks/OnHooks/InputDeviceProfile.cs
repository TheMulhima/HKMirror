using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for InputDeviceProfile class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnInputDeviceProfile
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_ProfileType()
        {
            if (!HookedList.Contains("get_ProfileType"))
            {
                HookedList.Add("get_ProfileType");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_ProfileType"),
                    get_ProfileType);
            }
        }

        internal static event Delegates.get_ProfileType_BeforeArgs _beforeget_ProfileType;
        internal static event Delegates.get_ProfileType_NormalArgs _afterget_ProfileType;

        private static InputDeviceProfileType get_ProfileType(Func<InputDeviceProfile, InputDeviceProfileType> orig,
            InputDeviceProfile self)
        {
            Delegates.Params_get_ProfileType @params = new()
            {
                self = self
            };
            _beforeget_ProfileType?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ProfileType != null) retVal = _afterget_ProfileType.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_ProfileType()
        {
            if (!HookedList.Contains("set_ProfileType"))
            {
                HookedList.Add("set_ProfileType");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_ProfileType"),
                    set_ProfileType);
            }
        }

        internal static event Delegates.set_ProfileType_BeforeArgs _beforeset_ProfileType;
        internal static event Delegates.set_ProfileType_NormalArgs _afterset_ProfileType;

        private static void set_ProfileType(Action<InputDeviceProfile, InputDeviceProfileType> orig,
            InputDeviceProfile self, InputDeviceProfileType value)
        {
            Delegates.Params_set_ProfileType @params = new()
            {
                self = self, value = value
            };
            _beforeset_ProfileType?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ProfileType != null) _afterset_ProfileType.Invoke(@params);
        }

        internal static void Hookget_DeviceName()
        {
            if (!HookedList.Contains("get_DeviceName"))
            {
                HookedList.Add("get_DeviceName");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_DeviceName"), get_DeviceName);
            }
        }

        internal static event Delegates.get_DeviceName_BeforeArgs _beforeget_DeviceName;
        internal static event Delegates.get_DeviceName_NormalArgs _afterget_DeviceName;

        private static string get_DeviceName(Func<InputDeviceProfile, string> orig, InputDeviceProfile self)
        {
            Delegates.Params_get_DeviceName @params = new()
            {
                self = self
            };
            _beforeget_DeviceName?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DeviceName != null) retVal = _afterget_DeviceName.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_DeviceName()
        {
            if (!HookedList.Contains("set_DeviceName"))
            {
                HookedList.Add("set_DeviceName");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_DeviceName"), set_DeviceName);
            }
        }

        internal static event Delegates.set_DeviceName_BeforeArgs _beforeset_DeviceName;
        internal static event Delegates.set_DeviceName_NormalArgs _afterset_DeviceName;

        private static void set_DeviceName(Action<InputDeviceProfile, string> orig, InputDeviceProfile self,
            string value)
        {
            Delegates.Params_set_DeviceName @params = new()
            {
                self = self, value = value
            };
            _beforeset_DeviceName?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_DeviceName != null) _afterset_DeviceName.Invoke(@params);
        }

        internal static void Hookget_DeviceNotes()
        {
            if (!HookedList.Contains("get_DeviceNotes"))
            {
                HookedList.Add("get_DeviceNotes");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_DeviceNotes"),
                    get_DeviceNotes);
            }
        }

        internal static event Delegates.get_DeviceNotes_BeforeArgs _beforeget_DeviceNotes;
        internal static event Delegates.get_DeviceNotes_NormalArgs _afterget_DeviceNotes;

        private static string get_DeviceNotes(Func<InputDeviceProfile, string> orig, InputDeviceProfile self)
        {
            Delegates.Params_get_DeviceNotes @params = new()
            {
                self = self
            };
            _beforeget_DeviceNotes?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DeviceNotes != null) retVal = _afterget_DeviceNotes.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_DeviceNotes()
        {
            if (!HookedList.Contains("set_DeviceNotes"))
            {
                HookedList.Add("set_DeviceNotes");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_DeviceNotes"),
                    set_DeviceNotes);
            }
        }

        internal static event Delegates.set_DeviceNotes_BeforeArgs _beforeset_DeviceNotes;
        internal static event Delegates.set_DeviceNotes_NormalArgs _afterset_DeviceNotes;

        private static void set_DeviceNotes(Action<InputDeviceProfile, string> orig, InputDeviceProfile self,
            string value)
        {
            Delegates.Params_set_DeviceNotes @params = new()
            {
                self = self, value = value
            };
            _beforeset_DeviceNotes?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_DeviceNotes != null) _afterset_DeviceNotes.Invoke(@params);
        }

        internal static void Hookget_DeviceClass()
        {
            if (!HookedList.Contains("get_DeviceClass"))
            {
                HookedList.Add("get_DeviceClass");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_DeviceClass"),
                    get_DeviceClass);
            }
        }

        internal static event Delegates.get_DeviceClass_BeforeArgs _beforeget_DeviceClass;
        internal static event Delegates.get_DeviceClass_NormalArgs _afterget_DeviceClass;

        private static InputDeviceClass get_DeviceClass(Func<InputDeviceProfile, InputDeviceClass> orig,
            InputDeviceProfile self)
        {
            Delegates.Params_get_DeviceClass @params = new()
            {
                self = self
            };
            _beforeget_DeviceClass?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DeviceClass != null) retVal = _afterget_DeviceClass.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_DeviceClass()
        {
            if (!HookedList.Contains("set_DeviceClass"))
            {
                HookedList.Add("set_DeviceClass");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_DeviceClass"),
                    set_DeviceClass);
            }
        }

        internal static event Delegates.set_DeviceClass_BeforeArgs _beforeset_DeviceClass;
        internal static event Delegates.set_DeviceClass_NormalArgs _afterset_DeviceClass;

        private static void set_DeviceClass(Action<InputDeviceProfile, InputDeviceClass> orig, InputDeviceProfile self,
            InputDeviceClass value)
        {
            Delegates.Params_set_DeviceClass @params = new()
            {
                self = self, value = value
            };
            _beforeset_DeviceClass?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_DeviceClass != null) _afterset_DeviceClass.Invoke(@params);
        }

        internal static void Hookget_DeviceStyle()
        {
            if (!HookedList.Contains("get_DeviceStyle"))
            {
                HookedList.Add("get_DeviceStyle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_DeviceStyle"),
                    get_DeviceStyle);
            }
        }

        internal static event Delegates.get_DeviceStyle_BeforeArgs _beforeget_DeviceStyle;
        internal static event Delegates.get_DeviceStyle_NormalArgs _afterget_DeviceStyle;

        private static InputDeviceStyle get_DeviceStyle(Func<InputDeviceProfile, InputDeviceStyle> orig,
            InputDeviceProfile self)
        {
            Delegates.Params_get_DeviceStyle @params = new()
            {
                self = self
            };
            _beforeget_DeviceStyle?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DeviceStyle != null) retVal = _afterget_DeviceStyle.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_DeviceStyle()
        {
            if (!HookedList.Contains("set_DeviceStyle"))
            {
                HookedList.Add("set_DeviceStyle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_DeviceStyle"),
                    set_DeviceStyle);
            }
        }

        internal static event Delegates.set_DeviceStyle_BeforeArgs _beforeset_DeviceStyle;
        internal static event Delegates.set_DeviceStyle_NormalArgs _afterset_DeviceStyle;

        private static void set_DeviceStyle(Action<InputDeviceProfile, InputDeviceStyle> orig, InputDeviceProfile self,
            InputDeviceStyle value)
        {
            Delegates.Params_set_DeviceStyle @params = new()
            {
                self = self, value = value
            };
            _beforeset_DeviceStyle?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_DeviceStyle != null) _afterset_DeviceStyle.Invoke(@params);
        }

        internal static void Hookget_Sensitivity()
        {
            if (!HookedList.Contains("get_Sensitivity"))
            {
                HookedList.Add("get_Sensitivity");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_Sensitivity"),
                    get_Sensitivity);
            }
        }

        internal static event Delegates.get_Sensitivity_BeforeArgs _beforeget_Sensitivity;
        internal static event Delegates.get_Sensitivity_NormalArgs _afterget_Sensitivity;

        private static float get_Sensitivity(Func<InputDeviceProfile, float> orig, InputDeviceProfile self)
        {
            Delegates.Params_get_Sensitivity @params = new()
            {
                self = self
            };
            _beforeget_Sensitivity?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Sensitivity != null) retVal = _afterget_Sensitivity.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Sensitivity()
        {
            if (!HookedList.Contains("set_Sensitivity"))
            {
                HookedList.Add("set_Sensitivity");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_Sensitivity"),
                    set_Sensitivity);
            }
        }

        internal static event Delegates.set_Sensitivity_BeforeArgs _beforeset_Sensitivity;
        internal static event Delegates.set_Sensitivity_NormalArgs _afterset_Sensitivity;

        private static void set_Sensitivity(Action<InputDeviceProfile, float> orig, InputDeviceProfile self,
            float value)
        {
            Delegates.Params_set_Sensitivity @params = new()
            {
                self = self, value = value
            };
            _beforeset_Sensitivity?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Sensitivity != null) _afterset_Sensitivity.Invoke(@params);
        }

        internal static void Hookget_LowerDeadZone()
        {
            if (!HookedList.Contains("get_LowerDeadZone"))
            {
                HookedList.Add("get_LowerDeadZone");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_LowerDeadZone"),
                    get_LowerDeadZone);
            }
        }

        internal static event Delegates.get_LowerDeadZone_BeforeArgs _beforeget_LowerDeadZone;
        internal static event Delegates.get_LowerDeadZone_NormalArgs _afterget_LowerDeadZone;

        private static float get_LowerDeadZone(Func<InputDeviceProfile, float> orig, InputDeviceProfile self)
        {
            Delegates.Params_get_LowerDeadZone @params = new()
            {
                self = self
            };
            _beforeget_LowerDeadZone?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LowerDeadZone != null) retVal = _afterget_LowerDeadZone.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_LowerDeadZone()
        {
            if (!HookedList.Contains("set_LowerDeadZone"))
            {
                HookedList.Add("set_LowerDeadZone");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_LowerDeadZone"),
                    set_LowerDeadZone);
            }
        }

        internal static event Delegates.set_LowerDeadZone_BeforeArgs _beforeset_LowerDeadZone;
        internal static event Delegates.set_LowerDeadZone_NormalArgs _afterset_LowerDeadZone;

        private static void set_LowerDeadZone(Action<InputDeviceProfile, float> orig, InputDeviceProfile self,
            float value)
        {
            Delegates.Params_set_LowerDeadZone @params = new()
            {
                self = self, value = value
            };
            _beforeset_LowerDeadZone?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_LowerDeadZone != null) _afterset_LowerDeadZone.Invoke(@params);
        }

        internal static void Hookget_UpperDeadZone()
        {
            if (!HookedList.Contains("get_UpperDeadZone"))
            {
                HookedList.Add("get_UpperDeadZone");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_UpperDeadZone"),
                    get_UpperDeadZone);
            }
        }

        internal static event Delegates.get_UpperDeadZone_BeforeArgs _beforeget_UpperDeadZone;
        internal static event Delegates.get_UpperDeadZone_NormalArgs _afterget_UpperDeadZone;

        private static float get_UpperDeadZone(Func<InputDeviceProfile, float> orig, InputDeviceProfile self)
        {
            Delegates.Params_get_UpperDeadZone @params = new()
            {
                self = self
            };
            _beforeget_UpperDeadZone?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_UpperDeadZone != null) retVal = _afterget_UpperDeadZone.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_UpperDeadZone()
        {
            if (!HookedList.Contains("set_UpperDeadZone"))
            {
                HookedList.Add("set_UpperDeadZone");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_UpperDeadZone"),
                    set_UpperDeadZone);
            }
        }

        internal static event Delegates.set_UpperDeadZone_BeforeArgs _beforeset_UpperDeadZone;
        internal static event Delegates.set_UpperDeadZone_NormalArgs _afterset_UpperDeadZone;

        private static void set_UpperDeadZone(Action<InputDeviceProfile, float> orig, InputDeviceProfile self,
            float value)
        {
            Delegates.Params_set_UpperDeadZone @params = new()
            {
                self = self, value = value
            };
            _beforeset_UpperDeadZone?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_UpperDeadZone != null) _afterset_UpperDeadZone.Invoke(@params);
        }

        internal static void Hookget_AnalogMappings()
        {
            if (!HookedList.Contains("get_AnalogMappings"))
            {
                HookedList.Add("get_AnalogMappings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_AnalogMappings"),
                    get_AnalogMappings);
            }
        }

        internal static event Delegates.get_AnalogMappings_BeforeArgs _beforeget_AnalogMappings;
        internal static event Delegates.get_AnalogMappings_NormalArgs _afterget_AnalogMappings;

        private static InputControlMapping[] get_AnalogMappings(Func<InputDeviceProfile, InputControlMapping[]> orig,
            InputDeviceProfile self)
        {
            Delegates.Params_get_AnalogMappings @params = new()
            {
                self = self
            };
            _beforeget_AnalogMappings?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AnalogMappings != null) retVal = _afterget_AnalogMappings.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_AnalogMappings()
        {
            if (!HookedList.Contains("set_AnalogMappings"))
            {
                HookedList.Add("set_AnalogMappings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_AnalogMappings"),
                    set_AnalogMappings);
            }
        }

        internal static event Delegates.set_AnalogMappings_BeforeArgs _beforeset_AnalogMappings;
        internal static event Delegates.set_AnalogMappings_NormalArgs _afterset_AnalogMappings;

        private static void set_AnalogMappings(Action<InputDeviceProfile, InputControlMapping[]> orig,
            InputDeviceProfile self, InputControlMapping[] value)
        {
            Delegates.Params_set_AnalogMappings @params = new()
            {
                self = self, value = value
            };
            _beforeset_AnalogMappings?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_AnalogMappings != null) _afterset_AnalogMappings.Invoke(@params);
        }

        internal static void Hookget_ButtonMappings()
        {
            if (!HookedList.Contains("get_ButtonMappings"))
            {
                HookedList.Add("get_ButtonMappings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_ButtonMappings"),
                    get_ButtonMappings);
            }
        }

        internal static event Delegates.get_ButtonMappings_BeforeArgs _beforeget_ButtonMappings;
        internal static event Delegates.get_ButtonMappings_NormalArgs _afterget_ButtonMappings;

        private static InputControlMapping[] get_ButtonMappings(Func<InputDeviceProfile, InputControlMapping[]> orig,
            InputDeviceProfile self)
        {
            Delegates.Params_get_ButtonMappings @params = new()
            {
                self = self
            };
            _beforeget_ButtonMappings?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ButtonMappings != null) retVal = _afterget_ButtonMappings.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_ButtonMappings()
        {
            if (!HookedList.Contains("set_ButtonMappings"))
            {
                HookedList.Add("set_ButtonMappings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_ButtonMappings"),
                    set_ButtonMappings);
            }
        }

        internal static event Delegates.set_ButtonMappings_BeforeArgs _beforeset_ButtonMappings;
        internal static event Delegates.set_ButtonMappings_NormalArgs _afterset_ButtonMappings;

        private static void set_ButtonMappings(Action<InputDeviceProfile, InputControlMapping[]> orig,
            InputDeviceProfile self, InputControlMapping[] value)
        {
            Delegates.Params_set_ButtonMappings @params = new()
            {
                self = self, value = value
            };
            _beforeset_ButtonMappings?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ButtonMappings != null) _afterset_ButtonMappings.Invoke(@params);
        }

        internal static void Hookget_IncludePlatforms()
        {
            if (!HookedList.Contains("get_IncludePlatforms"))
            {
                HookedList.Add("get_IncludePlatforms");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_IncludePlatforms"),
                    get_IncludePlatforms);
            }
        }

        internal static event Delegates.get_IncludePlatforms_BeforeArgs _beforeget_IncludePlatforms;
        internal static event Delegates.get_IncludePlatforms_NormalArgs _afterget_IncludePlatforms;

        private static string[] get_IncludePlatforms(Func<InputDeviceProfile, string[]> orig, InputDeviceProfile self)
        {
            Delegates.Params_get_IncludePlatforms @params = new()
            {
                self = self
            };
            _beforeget_IncludePlatforms?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IncludePlatforms != null) retVal = _afterget_IncludePlatforms.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_IncludePlatforms()
        {
            if (!HookedList.Contains("set_IncludePlatforms"))
            {
                HookedList.Add("set_IncludePlatforms");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_IncludePlatforms"),
                    set_IncludePlatforms);
            }
        }

        internal static event Delegates.set_IncludePlatforms_BeforeArgs _beforeset_IncludePlatforms;
        internal static event Delegates.set_IncludePlatforms_NormalArgs _afterset_IncludePlatforms;

        private static void set_IncludePlatforms(Action<InputDeviceProfile, string[]> orig, InputDeviceProfile self,
            string[] value)
        {
            Delegates.Params_set_IncludePlatforms @params = new()
            {
                self = self, value = value
            };
            _beforeset_IncludePlatforms?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_IncludePlatforms != null) _afterset_IncludePlatforms.Invoke(@params);
        }

        internal static void Hookget_ExcludePlatforms()
        {
            if (!HookedList.Contains("get_ExcludePlatforms"))
            {
                HookedList.Add("get_ExcludePlatforms");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_ExcludePlatforms"),
                    get_ExcludePlatforms);
            }
        }

        internal static event Delegates.get_ExcludePlatforms_BeforeArgs _beforeget_ExcludePlatforms;
        internal static event Delegates.get_ExcludePlatforms_NormalArgs _afterget_ExcludePlatforms;

        private static string[] get_ExcludePlatforms(Func<InputDeviceProfile, string[]> orig, InputDeviceProfile self)
        {
            Delegates.Params_get_ExcludePlatforms @params = new()
            {
                self = self
            };
            _beforeget_ExcludePlatforms?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ExcludePlatforms != null) retVal = _afterget_ExcludePlatforms.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_ExcludePlatforms()
        {
            if (!HookedList.Contains("set_ExcludePlatforms"))
            {
                HookedList.Add("set_ExcludePlatforms");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_ExcludePlatforms"),
                    set_ExcludePlatforms);
            }
        }

        internal static event Delegates.set_ExcludePlatforms_BeforeArgs _beforeset_ExcludePlatforms;
        internal static event Delegates.set_ExcludePlatforms_NormalArgs _afterset_ExcludePlatforms;

        private static void set_ExcludePlatforms(Action<InputDeviceProfile, string[]> orig, InputDeviceProfile self,
            string[] value)
        {
            Delegates.Params_set_ExcludePlatforms @params = new()
            {
                self = self, value = value
            };
            _beforeset_ExcludePlatforms?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ExcludePlatforms != null) _afterset_ExcludePlatforms.Invoke(@params);
        }

        internal static void Hookget_MinSystemBuildNumber()
        {
            if (!HookedList.Contains("get_MinSystemBuildNumber"))
            {
                HookedList.Add("get_MinSystemBuildNumber");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_MinSystemBuildNumber"),
                    get_MinSystemBuildNumber);
            }
        }

        internal static event Delegates.get_MinSystemBuildNumber_BeforeArgs _beforeget_MinSystemBuildNumber;
        internal static event Delegates.get_MinSystemBuildNumber_NormalArgs _afterget_MinSystemBuildNumber;

        private static int get_MinSystemBuildNumber(Func<InputDeviceProfile, int> orig, InputDeviceProfile self)
        {
            Delegates.Params_get_MinSystemBuildNumber @params = new()
            {
                self = self
            };
            _beforeget_MinSystemBuildNumber?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_MinSystemBuildNumber != null) retVal = _afterget_MinSystemBuildNumber.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_MinSystemBuildNumber()
        {
            if (!HookedList.Contains("set_MinSystemBuildNumber"))
            {
                HookedList.Add("set_MinSystemBuildNumber");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_MinSystemBuildNumber"),
                    set_MinSystemBuildNumber);
            }
        }

        internal static event Delegates.set_MinSystemBuildNumber_BeforeArgs _beforeset_MinSystemBuildNumber;
        internal static event Delegates.set_MinSystemBuildNumber_NormalArgs _afterset_MinSystemBuildNumber;

        private static void set_MinSystemBuildNumber(Action<InputDeviceProfile, int> orig, InputDeviceProfile self,
            int value)
        {
            Delegates.Params_set_MinSystemBuildNumber @params = new()
            {
                self = self, value = value
            };
            _beforeset_MinSystemBuildNumber?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_MinSystemBuildNumber != null) _afterset_MinSystemBuildNumber.Invoke(@params);
        }

        internal static void Hookget_MaxSystemBuildNumber()
        {
            if (!HookedList.Contains("get_MaxSystemBuildNumber"))
            {
                HookedList.Add("get_MaxSystemBuildNumber");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_MaxSystemBuildNumber"),
                    get_MaxSystemBuildNumber);
            }
        }

        internal static event Delegates.get_MaxSystemBuildNumber_BeforeArgs _beforeget_MaxSystemBuildNumber;
        internal static event Delegates.get_MaxSystemBuildNumber_NormalArgs _afterget_MaxSystemBuildNumber;

        private static int get_MaxSystemBuildNumber(Func<InputDeviceProfile, int> orig, InputDeviceProfile self)
        {
            Delegates.Params_get_MaxSystemBuildNumber @params = new()
            {
                self = self
            };
            _beforeget_MaxSystemBuildNumber?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_MaxSystemBuildNumber != null) retVal = _afterget_MaxSystemBuildNumber.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_MaxSystemBuildNumber()
        {
            if (!HookedList.Contains("set_MaxSystemBuildNumber"))
            {
                HookedList.Add("set_MaxSystemBuildNumber");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_MaxSystemBuildNumber"),
                    set_MaxSystemBuildNumber);
            }
        }

        internal static event Delegates.set_MaxSystemBuildNumber_BeforeArgs _beforeset_MaxSystemBuildNumber;
        internal static event Delegates.set_MaxSystemBuildNumber_NormalArgs _afterset_MaxSystemBuildNumber;

        private static void set_MaxSystemBuildNumber(Action<InputDeviceProfile, int> orig, InputDeviceProfile self,
            int value)
        {
            Delegates.Params_set_MaxSystemBuildNumber @params = new()
            {
                self = self, value = value
            };
            _beforeset_MaxSystemBuildNumber?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_MaxSystemBuildNumber != null) _afterset_MaxSystemBuildNumber.Invoke(@params);
        }

        internal static void Hookget_MinUnityVersion()
        {
            if (!HookedList.Contains("get_MinUnityVersion"))
            {
                HookedList.Add("get_MinUnityVersion");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_MinUnityVersion"),
                    get_MinUnityVersion);
            }
        }

        internal static event Delegates.get_MinUnityVersion_BeforeArgs _beforeget_MinUnityVersion;
        internal static event Delegates.get_MinUnityVersion_NormalArgs _afterget_MinUnityVersion;

        private static VersionInfo get_MinUnityVersion(Func<InputDeviceProfile, VersionInfo> orig,
            InputDeviceProfile self)
        {
            Delegates.Params_get_MinUnityVersion @params = new()
            {
                self = self
            };
            _beforeget_MinUnityVersion?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_MinUnityVersion != null) retVal = _afterget_MinUnityVersion.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_MinUnityVersion()
        {
            if (!HookedList.Contains("set_MinUnityVersion"))
            {
                HookedList.Add("set_MinUnityVersion");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_MinUnityVersion"),
                    set_MinUnityVersion);
            }
        }

        internal static event Delegates.set_MinUnityVersion_BeforeArgs _beforeset_MinUnityVersion;
        internal static event Delegates.set_MinUnityVersion_NormalArgs _afterset_MinUnityVersion;

        private static void set_MinUnityVersion(Action<InputDeviceProfile, VersionInfo> orig, InputDeviceProfile self,
            VersionInfo value)
        {
            Delegates.Params_set_MinUnityVersion @params = new()
            {
                self = self, value = value
            };
            _beforeset_MinUnityVersion?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_MinUnityVersion != null) _afterset_MinUnityVersion.Invoke(@params);
        }

        internal static void Hookget_MaxUnityVersion()
        {
            if (!HookedList.Contains("get_MaxUnityVersion"))
            {
                HookedList.Add("get_MaxUnityVersion");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_MaxUnityVersion"),
                    get_MaxUnityVersion);
            }
        }

        internal static event Delegates.get_MaxUnityVersion_BeforeArgs _beforeget_MaxUnityVersion;
        internal static event Delegates.get_MaxUnityVersion_NormalArgs _afterget_MaxUnityVersion;

        private static VersionInfo get_MaxUnityVersion(Func<InputDeviceProfile, VersionInfo> orig,
            InputDeviceProfile self)
        {
            Delegates.Params_get_MaxUnityVersion @params = new()
            {
                self = self
            };
            _beforeget_MaxUnityVersion?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_MaxUnityVersion != null) retVal = _afterget_MaxUnityVersion.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_MaxUnityVersion()
        {
            if (!HookedList.Contains("set_MaxUnityVersion"))
            {
                HookedList.Add("set_MaxUnityVersion");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_MaxUnityVersion"),
                    set_MaxUnityVersion);
            }
        }

        internal static event Delegates.set_MaxUnityVersion_BeforeArgs _beforeset_MaxUnityVersion;
        internal static event Delegates.set_MaxUnityVersion_NormalArgs _afterset_MaxUnityVersion;

        private static void set_MaxUnityVersion(Action<InputDeviceProfile, VersionInfo> orig, InputDeviceProfile self,
            VersionInfo value)
        {
            Delegates.Params_set_MaxUnityVersion @params = new()
            {
                self = self, value = value
            };
            _beforeset_MaxUnityVersion?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_MaxUnityVersion != null) _afterset_MaxUnityVersion.Invoke(@params);
        }

        internal static void Hookget_Matchers()
        {
            if (!HookedList.Contains("get_Matchers"))
            {
                HookedList.Add("get_Matchers");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_Matchers"), get_Matchers);
            }
        }

        internal static event Delegates.get_Matchers_BeforeArgs _beforeget_Matchers;
        internal static event Delegates.get_Matchers_NormalArgs _afterget_Matchers;

        private static InputDeviceMatcher[] get_Matchers(Func<InputDeviceProfile, InputDeviceMatcher[]> orig,
            InputDeviceProfile self)
        {
            Delegates.Params_get_Matchers @params = new()
            {
                self = self
            };
            _beforeget_Matchers?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Matchers != null) retVal = _afterget_Matchers.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Matchers()
        {
            if (!HookedList.Contains("set_Matchers"))
            {
                HookedList.Add("set_Matchers");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_Matchers"), set_Matchers);
            }
        }

        internal static event Delegates.set_Matchers_BeforeArgs _beforeset_Matchers;
        internal static event Delegates.set_Matchers_NormalArgs _afterset_Matchers;

        private static void set_Matchers(Action<InputDeviceProfile, InputDeviceMatcher[]> orig, InputDeviceProfile self,
            InputDeviceMatcher[] value)
        {
            Delegates.Params_set_Matchers @params = new()
            {
                self = self, value = value
            };
            _beforeset_Matchers?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Matchers != null) _afterset_Matchers.Invoke(@params);
        }

        internal static void Hookget_LastResortMatchers()
        {
            if (!HookedList.Contains("get_LastResortMatchers"))
            {
                HookedList.Add("get_LastResortMatchers");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_LastResortMatchers"),
                    get_LastResortMatchers);
            }
        }

        internal static event Delegates.get_LastResortMatchers_BeforeArgs _beforeget_LastResortMatchers;
        internal static event Delegates.get_LastResortMatchers_NormalArgs _afterget_LastResortMatchers;

        private static InputDeviceMatcher[] get_LastResortMatchers(Func<InputDeviceProfile, InputDeviceMatcher[]> orig,
            InputDeviceProfile self)
        {
            Delegates.Params_get_LastResortMatchers @params = new()
            {
                self = self
            };
            _beforeget_LastResortMatchers?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LastResortMatchers != null) retVal = _afterget_LastResortMatchers.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_LastResortMatchers()
        {
            if (!HookedList.Contains("set_LastResortMatchers"))
            {
                HookedList.Add("set_LastResortMatchers");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_LastResortMatchers"),
                    set_LastResortMatchers);
            }
        }

        internal static event Delegates.set_LastResortMatchers_BeforeArgs _beforeset_LastResortMatchers;
        internal static event Delegates.set_LastResortMatchers_NormalArgs _afterset_LastResortMatchers;

        private static void set_LastResortMatchers(Action<InputDeviceProfile, InputDeviceMatcher[]> orig,
            InputDeviceProfile self, InputDeviceMatcher[] value)
        {
            Delegates.Params_set_LastResortMatchers @params = new()
            {
                self = self, value = value
            };
            _beforeset_LastResortMatchers?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_LastResortMatchers != null) _afterset_LastResortMatchers.Invoke(@params);
        }

        internal static void HookCreateInstanceOfType_Type()
        {
            if (!HookedList.Contains("CreateInstanceOfType_Type"))
            {
                HookedList.Add("CreateInstanceOfType_Type");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "CreateInstanceOfType_Type", false),
                    CreateInstanceOfType_Type);
            }
        }

        internal static event Delegates.CreateInstanceOfType_Type_BeforeArgs _beforeCreateInstanceOfType_Type;
        internal static event Delegates.CreateInstanceOfType_Type_NormalArgs _afterCreateInstanceOfType_Type;

        private static InputDeviceProfile CreateInstanceOfType_Type(Func<Type, InputDeviceProfile> orig, Type type)
        {
            Delegates.Params_CreateInstanceOfType_Type @params = new()
            {
                type = type
            };
            _beforeCreateInstanceOfType_Type?.Invoke(@params);
            type = @params.type;
            var retVal = orig(type);
            if (_afterCreateInstanceOfType_Type != null) retVal = _afterCreateInstanceOfType_Type.Invoke(@params);
            return retVal;
        }

        internal static void HookCreateInstanceOfType_string()
        {
            if (!HookedList.Contains("CreateInstanceOfType_string"))
            {
                HookedList.Add("CreateInstanceOfType_string");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "CreateInstanceOfType_string", false),
                    CreateInstanceOfType_string);
            }
        }

        internal static event Delegates.CreateInstanceOfType_string_BeforeArgs _beforeCreateInstanceOfType_string;
        internal static event Delegates.CreateInstanceOfType_string_NormalArgs _afterCreateInstanceOfType_string;

        private static InputDeviceProfile CreateInstanceOfType_string(Func<string, InputDeviceProfile> orig,
            string typeName)
        {
            Delegates.Params_CreateInstanceOfType_string @params = new()
            {
                typeName = typeName
            };
            _beforeCreateInstanceOfType_string?.Invoke(@params);
            typeName = @params.typeName;
            var retVal = orig(typeName);
            if (_afterCreateInstanceOfType_string != null) retVal = _afterCreateInstanceOfType_string.Invoke(@params);
            return retVal;
        }

        internal static void HookDefine()
        {
            if (!HookedList.Contains("Define"))
            {
                HookedList.Add("Define");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "Define"), Define);
            }
        }

        internal static event Delegates.Define_BeforeArgs _beforeDefine;
        internal static event Delegates.Define_NormalArgs _afterDefine;

        private static void Define(Action<InputDeviceProfile> orig, InputDeviceProfile self)
        {
            Delegates.Params_Define @params = new()
            {
                self = self
            };
            _beforeDefine?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDefine != null) _afterDefine.Invoke(@params);
        }

        internal static void HookMatches_InputDeviceInfo()
        {
            if (!HookedList.Contains("Matches_InputDeviceInfo"))
            {
                HookedList.Add("Matches_InputDeviceInfo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "Matches_InputDeviceInfo"),
                    Matches_InputDeviceInfo);
            }
        }

        internal static event Delegates.Matches_InputDeviceInfo_BeforeArgs _beforeMatches_InputDeviceInfo;
        internal static event Delegates.Matches_InputDeviceInfo_NormalArgs _afterMatches_InputDeviceInfo;

        private static bool Matches_InputDeviceInfo(Func<InputDeviceProfile, InputDeviceInfo, bool> orig,
            InputDeviceProfile self, InputDeviceInfo deviceInfo)
        {
            Delegates.Params_Matches_InputDeviceInfo @params = new()
            {
                self = self, deviceInfo = deviceInfo
            };
            _beforeMatches_InputDeviceInfo?.Invoke(@params);
            self = @params.self;
            deviceInfo = @params.deviceInfo;
            var retVal = orig(self, deviceInfo);
            if (_afterMatches_InputDeviceInfo != null) retVal = _afterMatches_InputDeviceInfo.Invoke(@params);
            return retVal;
        }

        internal static void HookLastResortMatches()
        {
            if (!HookedList.Contains("LastResortMatches"))
            {
                HookedList.Add("LastResortMatches");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LastResortMatches"),
                    LastResortMatches);
            }
        }

        internal static event Delegates.LastResortMatches_BeforeArgs _beforeLastResortMatches;
        internal static event Delegates.LastResortMatches_NormalArgs _afterLastResortMatches;

        private static bool LastResortMatches(Func<InputDeviceProfile, InputDeviceInfo, bool> orig,
            InputDeviceProfile self, InputDeviceInfo deviceInfo)
        {
            Delegates.Params_LastResortMatches @params = new()
            {
                self = self, deviceInfo = deviceInfo
            };
            _beforeLastResortMatches?.Invoke(@params);
            self = @params.self;
            deviceInfo = @params.deviceInfo;
            var retVal = orig(self, deviceInfo);
            if (_afterLastResortMatches != null) retVal = _afterLastResortMatches.Invoke(@params);
            return retVal;
        }

        internal static void HookMatches_InputDeviceInfo_Array()
        {
            if (!HookedList.Contains("Matches_InputDeviceInfo_Array"))
            {
                HookedList.Add("Matches_InputDeviceInfo_Array");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "Matches_InputDeviceInfo_Array"),
                    Matches_InputDeviceInfo_Array);
            }
        }

        internal static event Delegates.Matches_InputDeviceInfo_Array_BeforeArgs _beforeMatches_InputDeviceInfo_Array;
        internal static event Delegates.Matches_InputDeviceInfo_Array_NormalArgs _afterMatches_InputDeviceInfo_Array;

        private static bool Matches_InputDeviceInfo_Array(
            Func<InputDeviceProfile, InputDeviceInfo, InputDeviceMatcher[], bool> orig, InputDeviceProfile self,
            InputDeviceInfo deviceInfo, InputDeviceMatcher[] matchers)
        {
            Delegates.Params_Matches_InputDeviceInfo_Array @params = new()
            {
                self = self, deviceInfo = deviceInfo, matchers = matchers
            };
            _beforeMatches_InputDeviceInfo_Array?.Invoke(@params);
            self = @params.self;
            deviceInfo = @params.deviceInfo;
            matchers = @params.matchers;
            var retVal = orig(self, deviceInfo, matchers);
            if (_afterMatches_InputDeviceInfo_Array != null)
                retVal = _afterMatches_InputDeviceInfo_Array.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_IsSupportedOnThisPlatform()
        {
            if (!HookedList.Contains("get_IsSupportedOnThisPlatform"))
            {
                HookedList.Add("get_IsSupportedOnThisPlatform");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_IsSupportedOnThisPlatform"),
                    get_IsSupportedOnThisPlatform);
            }
        }

        internal static event Delegates.get_IsSupportedOnThisPlatform_BeforeArgs _beforeget_IsSupportedOnThisPlatform;
        internal static event Delegates.get_IsSupportedOnThisPlatform_NormalArgs _afterget_IsSupportedOnThisPlatform;

        private static bool get_IsSupportedOnThisPlatform(Func<InputDeviceProfile, bool> orig, InputDeviceProfile self)
        {
            Delegates.Params_get_IsSupportedOnThisPlatform @params = new()
            {
                self = self
            };
            _beforeget_IsSupportedOnThisPlatform?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsSupportedOnThisPlatform != null)
                retVal = _afterget_IsSupportedOnThisPlatform.Invoke(@params);
            return retVal;
        }

        internal static void HookHide()
        {
            if (!HookedList.Contains("Hide"))
            {
                HookedList.Add("Hide");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "Hide", false), Hide);
            }
        }

        internal static event Delegates.Hide_BeforeArgs _beforeHide;
        internal static event Delegates.Hide_NormalArgs _afterHide;

        private static void Hide(Action<Type> orig, Type type)
        {
            Delegates.Params_Hide @params = new()
            {
                type = type
            };
            _beforeHide?.Invoke(@params);
            type = @params.type;
            orig(type);
            if (_afterHide != null) _afterHide.Invoke(@params);
        }

        internal static void Hookget_IsHidden()
        {
            if (!HookedList.Contains("get_IsHidden"))
            {
                HookedList.Add("get_IsHidden");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_IsHidden"), get_IsHidden);
            }
        }

        internal static event Delegates.get_IsHidden_BeforeArgs _beforeget_IsHidden;
        internal static event Delegates.get_IsHidden_NormalArgs _afterget_IsHidden;

        private static bool get_IsHidden(Func<InputDeviceProfile, bool> orig, InputDeviceProfile self)
        {
            Delegates.Params_get_IsHidden @params = new()
            {
                self = self
            };
            _beforeget_IsHidden?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsHidden != null) retVal = _afterget_IsHidden.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_IsNotHidden()
        {
            if (!HookedList.Contains("get_IsNotHidden"))
            {
                HookedList.Add("get_IsNotHidden");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_IsNotHidden"),
                    get_IsNotHidden);
            }
        }

        internal static event Delegates.get_IsNotHidden_BeforeArgs _beforeget_IsNotHidden;
        internal static event Delegates.get_IsNotHidden_NormalArgs _afterget_IsNotHidden;

        private static bool get_IsNotHidden(Func<InputDeviceProfile, bool> orig, InputDeviceProfile self)
        {
            Delegates.Params_get_IsNotHidden @params = new()
            {
                self = self
            };
            _beforeget_IsNotHidden?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsNotHidden != null) retVal = _afterget_IsNotHidden.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_AnalogCount()
        {
            if (!HookedList.Contains("get_AnalogCount"))
            {
                HookedList.Add("get_AnalogCount");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_AnalogCount"),
                    get_AnalogCount);
            }
        }

        internal static event Delegates.get_AnalogCount_BeforeArgs _beforeget_AnalogCount;
        internal static event Delegates.get_AnalogCount_NormalArgs _afterget_AnalogCount;

        private static int get_AnalogCount(Func<InputDeviceProfile, int> orig, InputDeviceProfile self)
        {
            Delegates.Params_get_AnalogCount @params = new()
            {
                self = self
            };
            _beforeget_AnalogCount?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AnalogCount != null) retVal = _afterget_AnalogCount.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_ButtonCount()
        {
            if (!HookedList.Contains("get_ButtonCount"))
            {
                HookedList.Add("get_ButtonCount");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_ButtonCount"),
                    get_ButtonCount);
            }
        }

        internal static event Delegates.get_ButtonCount_BeforeArgs _beforeget_ButtonCount;
        internal static event Delegates.get_ButtonCount_NormalArgs _afterget_ButtonCount;

        private static int get_ButtonCount(Func<InputDeviceProfile, int> orig, InputDeviceProfile self)
        {
            Delegates.Params_get_ButtonCount @params = new()
            {
                self = self
            };
            _beforeget_ButtonCount?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ButtonCount != null) retVal = _afterget_ButtonCount.Invoke(@params);
            return retVal;
        }

        internal static void HookButton()
        {
            if (!HookedList.Contains("Button"))
            {
                HookedList.Add("Button");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "Button", false), Button);
            }
        }

        internal static event Delegates.Button_BeforeArgs _beforeButton;
        internal static event Delegates.Button_NormalArgs _afterButton;

        private static InputControlSource Button(Func<int, InputControlSource> orig, int index)
        {
            Delegates.Params_Button @params = new()
            {
                index = index
            };
            _beforeButton?.Invoke(@params);
            index = @params.index;
            var retVal = orig(index);
            if (_afterButton != null) retVal = _afterButton.Invoke(@params);
            return retVal;
        }

        internal static void HookAnalog()
        {
            if (!HookedList.Contains("Analog"))
            {
                HookedList.Add("Analog");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "Analog", false), Analog);
            }
        }

        internal static event Delegates.Analog_BeforeArgs _beforeAnalog;
        internal static event Delegates.Analog_NormalArgs _afterAnalog;

        private static InputControlSource Analog(Func<int, InputControlSource> orig, int index)
        {
            Delegates.Params_Analog @params = new()
            {
                index = index
            };
            _beforeAnalog?.Invoke(@params);
            index = @params.index;
            var retVal = orig(index);
            if (_afterAnalog != null) retVal = _afterAnalog.Invoke(@params);
            return retVal;
        }

        internal static void HookLeftStickLeftMapping()
        {
            if (!HookedList.Contains("LeftStickLeftMapping"))
            {
                HookedList.Add("LeftStickLeftMapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LeftStickLeftMapping", false),
                    LeftStickLeftMapping);
            }
        }

        internal static event Delegates.LeftStickLeftMapping_BeforeArgs _beforeLeftStickLeftMapping;
        internal static event Delegates.LeftStickLeftMapping_NormalArgs _afterLeftStickLeftMapping;

        private static InputControlMapping LeftStickLeftMapping(Func<int, InputControlMapping> orig, int analog)
        {
            Delegates.Params_LeftStickLeftMapping @params = new()
            {
                analog = analog
            };
            _beforeLeftStickLeftMapping?.Invoke(@params);
            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterLeftStickLeftMapping != null) retVal = _afterLeftStickLeftMapping.Invoke(@params);
            return retVal;
        }

        internal static void HookLeftStickRightMapping()
        {
            if (!HookedList.Contains("LeftStickRightMapping"))
            {
                HookedList.Add("LeftStickRightMapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LeftStickRightMapping", false),
                    LeftStickRightMapping);
            }
        }

        internal static event Delegates.LeftStickRightMapping_BeforeArgs _beforeLeftStickRightMapping;
        internal static event Delegates.LeftStickRightMapping_NormalArgs _afterLeftStickRightMapping;

        private static InputControlMapping LeftStickRightMapping(Func<int, InputControlMapping> orig, int analog)
        {
            Delegates.Params_LeftStickRightMapping @params = new()
            {
                analog = analog
            };
            _beforeLeftStickRightMapping?.Invoke(@params);
            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterLeftStickRightMapping != null) retVal = _afterLeftStickRightMapping.Invoke(@params);
            return retVal;
        }

        internal static void HookLeftStickUpMapping()
        {
            if (!HookedList.Contains("LeftStickUpMapping"))
            {
                HookedList.Add("LeftStickUpMapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LeftStickUpMapping", false),
                    LeftStickUpMapping);
            }
        }

        internal static event Delegates.LeftStickUpMapping_BeforeArgs _beforeLeftStickUpMapping;
        internal static event Delegates.LeftStickUpMapping_NormalArgs _afterLeftStickUpMapping;

        private static InputControlMapping LeftStickUpMapping(Func<int, InputControlMapping> orig, int analog)
        {
            Delegates.Params_LeftStickUpMapping @params = new()
            {
                analog = analog
            };
            _beforeLeftStickUpMapping?.Invoke(@params);
            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterLeftStickUpMapping != null) retVal = _afterLeftStickUpMapping.Invoke(@params);
            return retVal;
        }

        internal static void HookLeftStickDownMapping()
        {
            if (!HookedList.Contains("LeftStickDownMapping"))
            {
                HookedList.Add("LeftStickDownMapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LeftStickDownMapping", false),
                    LeftStickDownMapping);
            }
        }

        internal static event Delegates.LeftStickDownMapping_BeforeArgs _beforeLeftStickDownMapping;
        internal static event Delegates.LeftStickDownMapping_NormalArgs _afterLeftStickDownMapping;

        private static InputControlMapping LeftStickDownMapping(Func<int, InputControlMapping> orig, int analog)
        {
            Delegates.Params_LeftStickDownMapping @params = new()
            {
                analog = analog
            };
            _beforeLeftStickDownMapping?.Invoke(@params);
            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterLeftStickDownMapping != null) retVal = _afterLeftStickDownMapping.Invoke(@params);
            return retVal;
        }

        internal static void HookLeftStickUpMapping2()
        {
            if (!HookedList.Contains("LeftStickUpMapping2"))
            {
                HookedList.Add("LeftStickUpMapping2");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LeftStickUpMapping2", false),
                    LeftStickUpMapping2);
            }
        }

        internal static event Delegates.LeftStickUpMapping2_BeforeArgs _beforeLeftStickUpMapping2;
        internal static event Delegates.LeftStickUpMapping2_NormalArgs _afterLeftStickUpMapping2;

        private static InputControlMapping LeftStickUpMapping2(Func<int, InputControlMapping> orig, int analog)
        {
            Delegates.Params_LeftStickUpMapping2 @params = new()
            {
                analog = analog
            };
            _beforeLeftStickUpMapping2?.Invoke(@params);
            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterLeftStickUpMapping2 != null) retVal = _afterLeftStickUpMapping2.Invoke(@params);
            return retVal;
        }

        internal static void HookLeftStickDownMapping2()
        {
            if (!HookedList.Contains("LeftStickDownMapping2"))
            {
                HookedList.Add("LeftStickDownMapping2");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LeftStickDownMapping2", false),
                    LeftStickDownMapping2);
            }
        }

        internal static event Delegates.LeftStickDownMapping2_BeforeArgs _beforeLeftStickDownMapping2;
        internal static event Delegates.LeftStickDownMapping2_NormalArgs _afterLeftStickDownMapping2;

        private static InputControlMapping LeftStickDownMapping2(Func<int, InputControlMapping> orig, int analog)
        {
            Delegates.Params_LeftStickDownMapping2 @params = new()
            {
                analog = analog
            };
            _beforeLeftStickDownMapping2?.Invoke(@params);
            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterLeftStickDownMapping2 != null) retVal = _afterLeftStickDownMapping2.Invoke(@params);
            return retVal;
        }

        internal static void HookRightStickLeftMapping()
        {
            if (!HookedList.Contains("RightStickLeftMapping"))
            {
                HookedList.Add("RightStickLeftMapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "RightStickLeftMapping", false),
                    RightStickLeftMapping);
            }
        }

        internal static event Delegates.RightStickLeftMapping_BeforeArgs _beforeRightStickLeftMapping;
        internal static event Delegates.RightStickLeftMapping_NormalArgs _afterRightStickLeftMapping;

        private static InputControlMapping RightStickLeftMapping(Func<int, InputControlMapping> orig, int analog)
        {
            Delegates.Params_RightStickLeftMapping @params = new()
            {
                analog = analog
            };
            _beforeRightStickLeftMapping?.Invoke(@params);
            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterRightStickLeftMapping != null) retVal = _afterRightStickLeftMapping.Invoke(@params);
            return retVal;
        }

        internal static void HookRightStickRightMapping()
        {
            if (!HookedList.Contains("RightStickRightMapping"))
            {
                HookedList.Add("RightStickRightMapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "RightStickRightMapping", false),
                    RightStickRightMapping);
            }
        }

        internal static event Delegates.RightStickRightMapping_BeforeArgs _beforeRightStickRightMapping;
        internal static event Delegates.RightStickRightMapping_NormalArgs _afterRightStickRightMapping;

        private static InputControlMapping RightStickRightMapping(Func<int, InputControlMapping> orig, int analog)
        {
            Delegates.Params_RightStickRightMapping @params = new()
            {
                analog = analog
            };
            _beforeRightStickRightMapping?.Invoke(@params);
            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterRightStickRightMapping != null) retVal = _afterRightStickRightMapping.Invoke(@params);
            return retVal;
        }

        internal static void HookRightStickUpMapping()
        {
            if (!HookedList.Contains("RightStickUpMapping"))
            {
                HookedList.Add("RightStickUpMapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "RightStickUpMapping", false),
                    RightStickUpMapping);
            }
        }

        internal static event Delegates.RightStickUpMapping_BeforeArgs _beforeRightStickUpMapping;
        internal static event Delegates.RightStickUpMapping_NormalArgs _afterRightStickUpMapping;

        private static InputControlMapping RightStickUpMapping(Func<int, InputControlMapping> orig, int analog)
        {
            Delegates.Params_RightStickUpMapping @params = new()
            {
                analog = analog
            };
            _beforeRightStickUpMapping?.Invoke(@params);
            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterRightStickUpMapping != null) retVal = _afterRightStickUpMapping.Invoke(@params);
            return retVal;
        }

        internal static void HookRightStickDownMapping()
        {
            if (!HookedList.Contains("RightStickDownMapping"))
            {
                HookedList.Add("RightStickDownMapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "RightStickDownMapping", false),
                    RightStickDownMapping);
            }
        }

        internal static event Delegates.RightStickDownMapping_BeforeArgs _beforeRightStickDownMapping;
        internal static event Delegates.RightStickDownMapping_NormalArgs _afterRightStickDownMapping;

        private static InputControlMapping RightStickDownMapping(Func<int, InputControlMapping> orig, int analog)
        {
            Delegates.Params_RightStickDownMapping @params = new()
            {
                analog = analog
            };
            _beforeRightStickDownMapping?.Invoke(@params);
            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterRightStickDownMapping != null) retVal = _afterRightStickDownMapping.Invoke(@params);
            return retVal;
        }

        internal static void HookRightStickUpMapping2()
        {
            if (!HookedList.Contains("RightStickUpMapping2"))
            {
                HookedList.Add("RightStickUpMapping2");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "RightStickUpMapping2", false),
                    RightStickUpMapping2);
            }
        }

        internal static event Delegates.RightStickUpMapping2_BeforeArgs _beforeRightStickUpMapping2;
        internal static event Delegates.RightStickUpMapping2_NormalArgs _afterRightStickUpMapping2;

        private static InputControlMapping RightStickUpMapping2(Func<int, InputControlMapping> orig, int analog)
        {
            Delegates.Params_RightStickUpMapping2 @params = new()
            {
                analog = analog
            };
            _beforeRightStickUpMapping2?.Invoke(@params);
            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterRightStickUpMapping2 != null) retVal = _afterRightStickUpMapping2.Invoke(@params);
            return retVal;
        }

        internal static void HookRightStickDownMapping2()
        {
            if (!HookedList.Contains("RightStickDownMapping2"))
            {
                HookedList.Add("RightStickDownMapping2");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "RightStickDownMapping2", false),
                    RightStickDownMapping2);
            }
        }

        internal static event Delegates.RightStickDownMapping2_BeforeArgs _beforeRightStickDownMapping2;
        internal static event Delegates.RightStickDownMapping2_NormalArgs _afterRightStickDownMapping2;

        private static InputControlMapping RightStickDownMapping2(Func<int, InputControlMapping> orig, int analog)
        {
            Delegates.Params_RightStickDownMapping2 @params = new()
            {
                analog = analog
            };
            _beforeRightStickDownMapping2?.Invoke(@params);
            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterRightStickDownMapping2 != null) retVal = _afterRightStickDownMapping2.Invoke(@params);
            return retVal;
        }

        internal static void HookLeftTriggerMapping()
        {
            if (!HookedList.Contains("LeftTriggerMapping"))
            {
                HookedList.Add("LeftTriggerMapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LeftTriggerMapping", false),
                    LeftTriggerMapping);
            }
        }

        internal static event Delegates.LeftTriggerMapping_BeforeArgs _beforeLeftTriggerMapping;
        internal static event Delegates.LeftTriggerMapping_NormalArgs _afterLeftTriggerMapping;

        private static InputControlMapping LeftTriggerMapping(Func<int, InputControlMapping> orig, int analog)
        {
            Delegates.Params_LeftTriggerMapping @params = new()
            {
                analog = analog
            };
            _beforeLeftTriggerMapping?.Invoke(@params);
            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterLeftTriggerMapping != null) retVal = _afterLeftTriggerMapping.Invoke(@params);
            return retVal;
        }

        internal static void HookRightTriggerMapping()
        {
            if (!HookedList.Contains("RightTriggerMapping"))
            {
                HookedList.Add("RightTriggerMapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "RightTriggerMapping", false),
                    RightTriggerMapping);
            }
        }

        internal static event Delegates.RightTriggerMapping_BeforeArgs _beforeRightTriggerMapping;
        internal static event Delegates.RightTriggerMapping_NormalArgs _afterRightTriggerMapping;

        private static InputControlMapping RightTriggerMapping(Func<int, InputControlMapping> orig, int analog)
        {
            Delegates.Params_RightTriggerMapping @params = new()
            {
                analog = analog
            };
            _beforeRightTriggerMapping?.Invoke(@params);
            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterRightTriggerMapping != null) retVal = _afterRightTriggerMapping.Invoke(@params);
            return retVal;
        }

        internal static void HookDPadLeftMapping()
        {
            if (!HookedList.Contains("DPadLeftMapping"))
            {
                HookedList.Add("DPadLeftMapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "DPadLeftMapping", false),
                    DPadLeftMapping);
            }
        }

        internal static event Delegates.DPadLeftMapping_BeforeArgs _beforeDPadLeftMapping;
        internal static event Delegates.DPadLeftMapping_NormalArgs _afterDPadLeftMapping;

        private static InputControlMapping DPadLeftMapping(Func<int, InputControlMapping> orig, int analog)
        {
            Delegates.Params_DPadLeftMapping @params = new()
            {
                analog = analog
            };
            _beforeDPadLeftMapping?.Invoke(@params);
            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterDPadLeftMapping != null) retVal = _afterDPadLeftMapping.Invoke(@params);
            return retVal;
        }

        internal static void HookDPadRightMapping()
        {
            if (!HookedList.Contains("DPadRightMapping"))
            {
                HookedList.Add("DPadRightMapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "DPadRightMapping", false),
                    DPadRightMapping);
            }
        }

        internal static event Delegates.DPadRightMapping_BeforeArgs _beforeDPadRightMapping;
        internal static event Delegates.DPadRightMapping_NormalArgs _afterDPadRightMapping;

        private static InputControlMapping DPadRightMapping(Func<int, InputControlMapping> orig, int analog)
        {
            Delegates.Params_DPadRightMapping @params = new()
            {
                analog = analog
            };
            _beforeDPadRightMapping?.Invoke(@params);
            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterDPadRightMapping != null) retVal = _afterDPadRightMapping.Invoke(@params);
            return retVal;
        }

        internal static void HookDPadUpMapping()
        {
            if (!HookedList.Contains("DPadUpMapping"))
            {
                HookedList.Add("DPadUpMapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "DPadUpMapping", false),
                    DPadUpMapping);
            }
        }

        internal static event Delegates.DPadUpMapping_BeforeArgs _beforeDPadUpMapping;
        internal static event Delegates.DPadUpMapping_NormalArgs _afterDPadUpMapping;

        private static InputControlMapping DPadUpMapping(Func<int, InputControlMapping> orig, int analog)
        {
            Delegates.Params_DPadUpMapping @params = new()
            {
                analog = analog
            };
            _beforeDPadUpMapping?.Invoke(@params);
            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterDPadUpMapping != null) retVal = _afterDPadUpMapping.Invoke(@params);
            return retVal;
        }

        internal static void HookDPadDownMapping()
        {
            if (!HookedList.Contains("DPadDownMapping"))
            {
                HookedList.Add("DPadDownMapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "DPadDownMapping", false),
                    DPadDownMapping);
            }
        }

        internal static event Delegates.DPadDownMapping_BeforeArgs _beforeDPadDownMapping;
        internal static event Delegates.DPadDownMapping_NormalArgs _afterDPadDownMapping;

        private static InputControlMapping DPadDownMapping(Func<int, InputControlMapping> orig, int analog)
        {
            Delegates.Params_DPadDownMapping @params = new()
            {
                analog = analog
            };
            _beforeDPadDownMapping?.Invoke(@params);
            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterDPadDownMapping != null) retVal = _afterDPadDownMapping.Invoke(@params);
            return retVal;
        }

        internal static void HookDPadUpMapping2()
        {
            if (!HookedList.Contains("DPadUpMapping2"))
            {
                HookedList.Add("DPadUpMapping2");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "DPadUpMapping2", false),
                    DPadUpMapping2);
            }
        }

        internal static event Delegates.DPadUpMapping2_BeforeArgs _beforeDPadUpMapping2;
        internal static event Delegates.DPadUpMapping2_NormalArgs _afterDPadUpMapping2;

        private static InputControlMapping DPadUpMapping2(Func<int, InputControlMapping> orig, int analog)
        {
            Delegates.Params_DPadUpMapping2 @params = new()
            {
                analog = analog
            };
            _beforeDPadUpMapping2?.Invoke(@params);
            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterDPadUpMapping2 != null) retVal = _afterDPadUpMapping2.Invoke(@params);
            return retVal;
        }

        internal static void HookDPadDownMapping2()
        {
            if (!HookedList.Contains("DPadDownMapping2"))
            {
                HookedList.Add("DPadDownMapping2");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "DPadDownMapping2", false),
                    DPadDownMapping2);
            }
        }

        internal static event Delegates.DPadDownMapping2_BeforeArgs _beforeDPadDownMapping2;
        internal static event Delegates.DPadDownMapping2_NormalArgs _afterDPadDownMapping2;

        private static InputControlMapping DPadDownMapping2(Func<int, InputControlMapping> orig, int analog)
        {
            Delegates.Params_DPadDownMapping2 @params = new()
            {
                analog = analog
            };
            _beforeDPadDownMapping2?.Invoke(@params);
            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterDPadDownMapping2 != null) retVal = _afterDPadDownMapping2.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Analog_BeforeArgs(Params_Analog args);

        public delegate InputControlSource Analog_NormalArgs(Params_Analog args);

        public delegate void Button_BeforeArgs(Params_Button args);

        public delegate InputControlSource Button_NormalArgs(Params_Button args);

        public delegate void CreateInstanceOfType_string_BeforeArgs(Params_CreateInstanceOfType_string args);

        public delegate InputDeviceProfile CreateInstanceOfType_string_NormalArgs(
            Params_CreateInstanceOfType_string args);

        public delegate void CreateInstanceOfType_Type_BeforeArgs(Params_CreateInstanceOfType_Type args);

        public delegate InputDeviceProfile CreateInstanceOfType_Type_NormalArgs(Params_CreateInstanceOfType_Type args);

        public delegate void Define_BeforeArgs(Params_Define args);

        public delegate void Define_NormalArgs(Params_Define args);

        public delegate void DPadDownMapping_BeforeArgs(Params_DPadDownMapping args);

        public delegate InputControlMapping DPadDownMapping_NormalArgs(Params_DPadDownMapping args);

        public delegate void DPadDownMapping2_BeforeArgs(Params_DPadDownMapping2 args);

        public delegate InputControlMapping DPadDownMapping2_NormalArgs(Params_DPadDownMapping2 args);

        public delegate void DPadLeftMapping_BeforeArgs(Params_DPadLeftMapping args);

        public delegate InputControlMapping DPadLeftMapping_NormalArgs(Params_DPadLeftMapping args);

        public delegate void DPadRightMapping_BeforeArgs(Params_DPadRightMapping args);

        public delegate InputControlMapping DPadRightMapping_NormalArgs(Params_DPadRightMapping args);

        public delegate void DPadUpMapping_BeforeArgs(Params_DPadUpMapping args);

        public delegate InputControlMapping DPadUpMapping_NormalArgs(Params_DPadUpMapping args);

        public delegate void DPadUpMapping2_BeforeArgs(Params_DPadUpMapping2 args);

        public delegate InputControlMapping DPadUpMapping2_NormalArgs(Params_DPadUpMapping2 args);

        public delegate void get_AnalogCount_BeforeArgs(Params_get_AnalogCount args);

        public delegate int get_AnalogCount_NormalArgs(Params_get_AnalogCount args);

        public delegate void get_AnalogMappings_BeforeArgs(Params_get_AnalogMappings args);

        public delegate InputControlMapping[] get_AnalogMappings_NormalArgs(Params_get_AnalogMappings args);

        public delegate void get_ButtonCount_BeforeArgs(Params_get_ButtonCount args);

        public delegate int get_ButtonCount_NormalArgs(Params_get_ButtonCount args);

        public delegate void get_ButtonMappings_BeforeArgs(Params_get_ButtonMappings args);

        public delegate InputControlMapping[] get_ButtonMappings_NormalArgs(Params_get_ButtonMappings args);

        public delegate void get_DeviceClass_BeforeArgs(Params_get_DeviceClass args);

        public delegate InputDeviceClass get_DeviceClass_NormalArgs(Params_get_DeviceClass args);

        public delegate void get_DeviceName_BeforeArgs(Params_get_DeviceName args);

        public delegate string get_DeviceName_NormalArgs(Params_get_DeviceName args);

        public delegate void get_DeviceNotes_BeforeArgs(Params_get_DeviceNotes args);

        public delegate string get_DeviceNotes_NormalArgs(Params_get_DeviceNotes args);

        public delegate void get_DeviceStyle_BeforeArgs(Params_get_DeviceStyle args);

        public delegate InputDeviceStyle get_DeviceStyle_NormalArgs(Params_get_DeviceStyle args);

        public delegate void get_ExcludePlatforms_BeforeArgs(Params_get_ExcludePlatforms args);

        public delegate string[] get_ExcludePlatforms_NormalArgs(Params_get_ExcludePlatforms args);

        public delegate void get_IncludePlatforms_BeforeArgs(Params_get_IncludePlatforms args);

        public delegate string[] get_IncludePlatforms_NormalArgs(Params_get_IncludePlatforms args);

        public delegate void get_IsHidden_BeforeArgs(Params_get_IsHidden args);

        public delegate bool get_IsHidden_NormalArgs(Params_get_IsHidden args);

        public delegate void get_IsNotHidden_BeforeArgs(Params_get_IsNotHidden args);

        public delegate bool get_IsNotHidden_NormalArgs(Params_get_IsNotHidden args);

        public delegate void get_IsSupportedOnThisPlatform_BeforeArgs(Params_get_IsSupportedOnThisPlatform args);

        public delegate bool get_IsSupportedOnThisPlatform_NormalArgs(Params_get_IsSupportedOnThisPlatform args);

        public delegate void get_LastResortMatchers_BeforeArgs(Params_get_LastResortMatchers args);

        public delegate InputDeviceMatcher[] get_LastResortMatchers_NormalArgs(Params_get_LastResortMatchers args);

        public delegate void get_LowerDeadZone_BeforeArgs(Params_get_LowerDeadZone args);

        public delegate float get_LowerDeadZone_NormalArgs(Params_get_LowerDeadZone args);

        public delegate void get_Matchers_BeforeArgs(Params_get_Matchers args);

        public delegate InputDeviceMatcher[] get_Matchers_NormalArgs(Params_get_Matchers args);

        public delegate void get_MaxSystemBuildNumber_BeforeArgs(Params_get_MaxSystemBuildNumber args);

        public delegate int get_MaxSystemBuildNumber_NormalArgs(Params_get_MaxSystemBuildNumber args);

        public delegate void get_MaxUnityVersion_BeforeArgs(Params_get_MaxUnityVersion args);

        public delegate VersionInfo get_MaxUnityVersion_NormalArgs(Params_get_MaxUnityVersion args);

        public delegate void get_MinSystemBuildNumber_BeforeArgs(Params_get_MinSystemBuildNumber args);

        public delegate int get_MinSystemBuildNumber_NormalArgs(Params_get_MinSystemBuildNumber args);

        public delegate void get_MinUnityVersion_BeforeArgs(Params_get_MinUnityVersion args);

        public delegate VersionInfo get_MinUnityVersion_NormalArgs(Params_get_MinUnityVersion args);

        public delegate void get_ProfileType_BeforeArgs(Params_get_ProfileType args);

        public delegate InputDeviceProfileType get_ProfileType_NormalArgs(Params_get_ProfileType args);

        public delegate void get_Sensitivity_BeforeArgs(Params_get_Sensitivity args);

        public delegate float get_Sensitivity_NormalArgs(Params_get_Sensitivity args);

        public delegate void get_UpperDeadZone_BeforeArgs(Params_get_UpperDeadZone args);

        public delegate float get_UpperDeadZone_NormalArgs(Params_get_UpperDeadZone args);

        public delegate void Hide_BeforeArgs(Params_Hide args);

        public delegate void Hide_NormalArgs(Params_Hide args);

        public delegate void LastResortMatches_BeforeArgs(Params_LastResortMatches args);

        public delegate bool LastResortMatches_NormalArgs(Params_LastResortMatches args);

        public delegate void LeftStickDownMapping_BeforeArgs(Params_LeftStickDownMapping args);

        public delegate InputControlMapping LeftStickDownMapping_NormalArgs(Params_LeftStickDownMapping args);

        public delegate void LeftStickDownMapping2_BeforeArgs(Params_LeftStickDownMapping2 args);

        public delegate InputControlMapping LeftStickDownMapping2_NormalArgs(Params_LeftStickDownMapping2 args);

        public delegate void LeftStickLeftMapping_BeforeArgs(Params_LeftStickLeftMapping args);

        public delegate InputControlMapping LeftStickLeftMapping_NormalArgs(Params_LeftStickLeftMapping args);

        public delegate void LeftStickRightMapping_BeforeArgs(Params_LeftStickRightMapping args);

        public delegate InputControlMapping LeftStickRightMapping_NormalArgs(Params_LeftStickRightMapping args);

        public delegate void LeftStickUpMapping_BeforeArgs(Params_LeftStickUpMapping args);

        public delegate InputControlMapping LeftStickUpMapping_NormalArgs(Params_LeftStickUpMapping args);

        public delegate void LeftStickUpMapping2_BeforeArgs(Params_LeftStickUpMapping2 args);

        public delegate InputControlMapping LeftStickUpMapping2_NormalArgs(Params_LeftStickUpMapping2 args);

        public delegate void LeftTriggerMapping_BeforeArgs(Params_LeftTriggerMapping args);

        public delegate InputControlMapping LeftTriggerMapping_NormalArgs(Params_LeftTriggerMapping args);

        public delegate void Matches_InputDeviceInfo_Array_BeforeArgs(Params_Matches_InputDeviceInfo_Array args);

        public delegate bool Matches_InputDeviceInfo_Array_NormalArgs(Params_Matches_InputDeviceInfo_Array args);

        public delegate void Matches_InputDeviceInfo_BeforeArgs(Params_Matches_InputDeviceInfo args);

        public delegate bool Matches_InputDeviceInfo_NormalArgs(Params_Matches_InputDeviceInfo args);

        public delegate void RightStickDownMapping_BeforeArgs(Params_RightStickDownMapping args);

        public delegate InputControlMapping RightStickDownMapping_NormalArgs(Params_RightStickDownMapping args);

        public delegate void RightStickDownMapping2_BeforeArgs(Params_RightStickDownMapping2 args);

        public delegate InputControlMapping RightStickDownMapping2_NormalArgs(Params_RightStickDownMapping2 args);

        public delegate void RightStickLeftMapping_BeforeArgs(Params_RightStickLeftMapping args);

        public delegate InputControlMapping RightStickLeftMapping_NormalArgs(Params_RightStickLeftMapping args);

        public delegate void RightStickRightMapping_BeforeArgs(Params_RightStickRightMapping args);

        public delegate InputControlMapping RightStickRightMapping_NormalArgs(Params_RightStickRightMapping args);

        public delegate void RightStickUpMapping_BeforeArgs(Params_RightStickUpMapping args);

        public delegate InputControlMapping RightStickUpMapping_NormalArgs(Params_RightStickUpMapping args);

        public delegate void RightStickUpMapping2_BeforeArgs(Params_RightStickUpMapping2 args);

        public delegate InputControlMapping RightStickUpMapping2_NormalArgs(Params_RightStickUpMapping2 args);

        public delegate void RightTriggerMapping_BeforeArgs(Params_RightTriggerMapping args);

        public delegate InputControlMapping RightTriggerMapping_NormalArgs(Params_RightTriggerMapping args);

        public delegate void set_AnalogMappings_BeforeArgs(Params_set_AnalogMappings args);

        public delegate void set_AnalogMappings_NormalArgs(Params_set_AnalogMappings args);

        public delegate void set_ButtonMappings_BeforeArgs(Params_set_ButtonMappings args);

        public delegate void set_ButtonMappings_NormalArgs(Params_set_ButtonMappings args);

        public delegate void set_DeviceClass_BeforeArgs(Params_set_DeviceClass args);

        public delegate void set_DeviceClass_NormalArgs(Params_set_DeviceClass args);

        public delegate void set_DeviceName_BeforeArgs(Params_set_DeviceName args);

        public delegate void set_DeviceName_NormalArgs(Params_set_DeviceName args);

        public delegate void set_DeviceNotes_BeforeArgs(Params_set_DeviceNotes args);

        public delegate void set_DeviceNotes_NormalArgs(Params_set_DeviceNotes args);

        public delegate void set_DeviceStyle_BeforeArgs(Params_set_DeviceStyle args);

        public delegate void set_DeviceStyle_NormalArgs(Params_set_DeviceStyle args);

        public delegate void set_ExcludePlatforms_BeforeArgs(Params_set_ExcludePlatforms args);

        public delegate void set_ExcludePlatforms_NormalArgs(Params_set_ExcludePlatforms args);

        public delegate void set_IncludePlatforms_BeforeArgs(Params_set_IncludePlatforms args);

        public delegate void set_IncludePlatforms_NormalArgs(Params_set_IncludePlatforms args);

        public delegate void set_LastResortMatchers_BeforeArgs(Params_set_LastResortMatchers args);

        public delegate void set_LastResortMatchers_NormalArgs(Params_set_LastResortMatchers args);

        public delegate void set_LowerDeadZone_BeforeArgs(Params_set_LowerDeadZone args);

        public delegate void set_LowerDeadZone_NormalArgs(Params_set_LowerDeadZone args);

        public delegate void set_Matchers_BeforeArgs(Params_set_Matchers args);

        public delegate void set_Matchers_NormalArgs(Params_set_Matchers args);

        public delegate void set_MaxSystemBuildNumber_BeforeArgs(Params_set_MaxSystemBuildNumber args);

        public delegate void set_MaxSystemBuildNumber_NormalArgs(Params_set_MaxSystemBuildNumber args);

        public delegate void set_MaxUnityVersion_BeforeArgs(Params_set_MaxUnityVersion args);

        public delegate void set_MaxUnityVersion_NormalArgs(Params_set_MaxUnityVersion args);

        public delegate void set_MinSystemBuildNumber_BeforeArgs(Params_set_MinSystemBuildNumber args);

        public delegate void set_MinSystemBuildNumber_NormalArgs(Params_set_MinSystemBuildNumber args);

        public delegate void set_MinUnityVersion_BeforeArgs(Params_set_MinUnityVersion args);

        public delegate void set_MinUnityVersion_NormalArgs(Params_set_MinUnityVersion args);

        public delegate void set_ProfileType_BeforeArgs(Params_set_ProfileType args);

        public delegate void set_ProfileType_NormalArgs(Params_set_ProfileType args);

        public delegate void set_Sensitivity_BeforeArgs(Params_set_Sensitivity args);

        public delegate void set_Sensitivity_NormalArgs(Params_set_Sensitivity args);

        public delegate void set_UpperDeadZone_BeforeArgs(Params_set_UpperDeadZone args);

        public delegate void set_UpperDeadZone_NormalArgs(Params_set_UpperDeadZone args);

        public sealed class Params_get_ProfileType
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_set_ProfileType
        {
            public InputDeviceProfile self;
            public InputDeviceProfileType value;
        }

        public sealed class Params_get_DeviceName
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_set_DeviceName
        {
            public InputDeviceProfile self;
            public string value;
        }

        public sealed class Params_get_DeviceNotes
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_set_DeviceNotes
        {
            public InputDeviceProfile self;
            public string value;
        }

        public sealed class Params_get_DeviceClass
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_set_DeviceClass
        {
            public InputDeviceProfile self;
            public InputDeviceClass value;
        }

        public sealed class Params_get_DeviceStyle
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_set_DeviceStyle
        {
            public InputDeviceProfile self;
            public InputDeviceStyle value;
        }

        public sealed class Params_get_Sensitivity
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_set_Sensitivity
        {
            public InputDeviceProfile self;
            public float value;
        }

        public sealed class Params_get_LowerDeadZone
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_set_LowerDeadZone
        {
            public InputDeviceProfile self;
            public float value;
        }

        public sealed class Params_get_UpperDeadZone
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_set_UpperDeadZone
        {
            public InputDeviceProfile self;
            public float value;
        }

        public sealed class Params_get_AnalogMappings
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_set_AnalogMappings
        {
            public InputDeviceProfile self;
            public InputControlMapping[] value;
        }

        public sealed class Params_get_ButtonMappings
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_set_ButtonMappings
        {
            public InputDeviceProfile self;
            public InputControlMapping[] value;
        }

        public sealed class Params_get_IncludePlatforms
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_set_IncludePlatforms
        {
            public InputDeviceProfile self;
            public string[] value;
        }

        public sealed class Params_get_ExcludePlatforms
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_set_ExcludePlatforms
        {
            public InputDeviceProfile self;
            public string[] value;
        }

        public sealed class Params_get_MinSystemBuildNumber
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_set_MinSystemBuildNumber
        {
            public InputDeviceProfile self;
            public int value;
        }

        public sealed class Params_get_MaxSystemBuildNumber
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_set_MaxSystemBuildNumber
        {
            public InputDeviceProfile self;
            public int value;
        }

        public sealed class Params_get_MinUnityVersion
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_set_MinUnityVersion
        {
            public InputDeviceProfile self;
            public VersionInfo value;
        }

        public sealed class Params_get_MaxUnityVersion
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_set_MaxUnityVersion
        {
            public InputDeviceProfile self;
            public VersionInfo value;
        }

        public sealed class Params_get_Matchers
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_set_Matchers
        {
            public InputDeviceProfile self;
            public InputDeviceMatcher[] value;
        }

        public sealed class Params_get_LastResortMatchers
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_set_LastResortMatchers
        {
            public InputDeviceProfile self;
            public InputDeviceMatcher[] value;
        }

        public sealed class Params_CreateInstanceOfType_Type
        {
            public Type type;
        }

        public sealed class Params_CreateInstanceOfType_string
        {
            public string typeName;
        }

        public sealed class Params_Define
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_Matches_InputDeviceInfo
        {
            public InputDeviceInfo deviceInfo;
            public InputDeviceProfile self;
        }

        public sealed class Params_LastResortMatches
        {
            public InputDeviceInfo deviceInfo;
            public InputDeviceProfile self;
        }

        public sealed class Params_Matches_InputDeviceInfo_Array
        {
            public InputDeviceInfo deviceInfo;
            public InputDeviceMatcher[] matchers;
            public InputDeviceProfile self;
        }

        public sealed class Params_get_IsSupportedOnThisPlatform
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_Hide
        {
            public Type type;
        }

        public sealed class Params_get_IsHidden
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_get_IsNotHidden
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_get_AnalogCount
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_get_ButtonCount
        {
            public InputDeviceProfile self;
        }

        public sealed class Params_Button
        {
            public int index;
        }

        public sealed class Params_Analog
        {
            public int index;
        }

        public sealed class Params_LeftStickLeftMapping
        {
            public int analog;
        }

        public sealed class Params_LeftStickRightMapping
        {
            public int analog;
        }

        public sealed class Params_LeftStickUpMapping
        {
            public int analog;
        }

        public sealed class Params_LeftStickDownMapping
        {
            public int analog;
        }

        public sealed class Params_LeftStickUpMapping2
        {
            public int analog;
        }

        public sealed class Params_LeftStickDownMapping2
        {
            public int analog;
        }

        public sealed class Params_RightStickLeftMapping
        {
            public int analog;
        }

        public sealed class Params_RightStickRightMapping
        {
            public int analog;
        }

        public sealed class Params_RightStickUpMapping
        {
            public int analog;
        }

        public sealed class Params_RightStickDownMapping
        {
            public int analog;
        }

        public sealed class Params_RightStickUpMapping2
        {
            public int analog;
        }

        public sealed class Params_RightStickDownMapping2
        {
            public int analog;
        }

        public sealed class Params_LeftTriggerMapping
        {
            public int analog;
        }

        public sealed class Params_RightTriggerMapping
        {
            public int analog;
        }

        public sealed class Params_DPadLeftMapping
        {
            public int analog;
        }

        public sealed class Params_DPadRightMapping
        {
            public int analog;
        }

        public sealed class Params_DPadUpMapping
        {
            public int analog;
        }

        public sealed class Params_DPadDownMapping
        {
            public int analog;
        }

        public sealed class Params_DPadUpMapping2
        {
            public int analog;
        }

        public sealed class Params_DPadDownMapping2
        {
            public int analog;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_ProfileType_BeforeArgs get_ProfileType
        {
            add
            {
                HookHandler._beforeget_ProfileType += value;
                HookHandler.Hookget_ProfileType();
            }
            remove => HookHandler._beforeget_ProfileType -= value;
        }

        public static event Delegates.set_ProfileType_BeforeArgs set_ProfileType
        {
            add
            {
                HookHandler._beforeset_ProfileType += value;
                HookHandler.Hookset_ProfileType();
            }
            remove => HookHandler._beforeset_ProfileType -= value;
        }

        public static event Delegates.get_DeviceName_BeforeArgs get_DeviceName
        {
            add
            {
                HookHandler._beforeget_DeviceName += value;
                HookHandler.Hookget_DeviceName();
            }
            remove => HookHandler._beforeget_DeviceName -= value;
        }

        public static event Delegates.set_DeviceName_BeforeArgs set_DeviceName
        {
            add
            {
                HookHandler._beforeset_DeviceName += value;
                HookHandler.Hookset_DeviceName();
            }
            remove => HookHandler._beforeset_DeviceName -= value;
        }

        public static event Delegates.get_DeviceNotes_BeforeArgs get_DeviceNotes
        {
            add
            {
                HookHandler._beforeget_DeviceNotes += value;
                HookHandler.Hookget_DeviceNotes();
            }
            remove => HookHandler._beforeget_DeviceNotes -= value;
        }

        public static event Delegates.set_DeviceNotes_BeforeArgs set_DeviceNotes
        {
            add
            {
                HookHandler._beforeset_DeviceNotes += value;
                HookHandler.Hookset_DeviceNotes();
            }
            remove => HookHandler._beforeset_DeviceNotes -= value;
        }

        public static event Delegates.get_DeviceClass_BeforeArgs get_DeviceClass
        {
            add
            {
                HookHandler._beforeget_DeviceClass += value;
                HookHandler.Hookget_DeviceClass();
            }
            remove => HookHandler._beforeget_DeviceClass -= value;
        }

        public static event Delegates.set_DeviceClass_BeforeArgs set_DeviceClass
        {
            add
            {
                HookHandler._beforeset_DeviceClass += value;
                HookHandler.Hookset_DeviceClass();
            }
            remove => HookHandler._beforeset_DeviceClass -= value;
        }

        public static event Delegates.get_DeviceStyle_BeforeArgs get_DeviceStyle
        {
            add
            {
                HookHandler._beforeget_DeviceStyle += value;
                HookHandler.Hookget_DeviceStyle();
            }
            remove => HookHandler._beforeget_DeviceStyle -= value;
        }

        public static event Delegates.set_DeviceStyle_BeforeArgs set_DeviceStyle
        {
            add
            {
                HookHandler._beforeset_DeviceStyle += value;
                HookHandler.Hookset_DeviceStyle();
            }
            remove => HookHandler._beforeset_DeviceStyle -= value;
        }

        public static event Delegates.get_Sensitivity_BeforeArgs get_Sensitivity
        {
            add
            {
                HookHandler._beforeget_Sensitivity += value;
                HookHandler.Hookget_Sensitivity();
            }
            remove => HookHandler._beforeget_Sensitivity -= value;
        }

        public static event Delegates.set_Sensitivity_BeforeArgs set_Sensitivity
        {
            add
            {
                HookHandler._beforeset_Sensitivity += value;
                HookHandler.Hookset_Sensitivity();
            }
            remove => HookHandler._beforeset_Sensitivity -= value;
        }

        public static event Delegates.get_LowerDeadZone_BeforeArgs get_LowerDeadZone
        {
            add
            {
                HookHandler._beforeget_LowerDeadZone += value;
                HookHandler.Hookget_LowerDeadZone();
            }
            remove => HookHandler._beforeget_LowerDeadZone -= value;
        }

        public static event Delegates.set_LowerDeadZone_BeforeArgs set_LowerDeadZone
        {
            add
            {
                HookHandler._beforeset_LowerDeadZone += value;
                HookHandler.Hookset_LowerDeadZone();
            }
            remove => HookHandler._beforeset_LowerDeadZone -= value;
        }

        public static event Delegates.get_UpperDeadZone_BeforeArgs get_UpperDeadZone
        {
            add
            {
                HookHandler._beforeget_UpperDeadZone += value;
                HookHandler.Hookget_UpperDeadZone();
            }
            remove => HookHandler._beforeget_UpperDeadZone -= value;
        }

        public static event Delegates.set_UpperDeadZone_BeforeArgs set_UpperDeadZone
        {
            add
            {
                HookHandler._beforeset_UpperDeadZone += value;
                HookHandler.Hookset_UpperDeadZone();
            }
            remove => HookHandler._beforeset_UpperDeadZone -= value;
        }

        public static event Delegates.get_AnalogMappings_BeforeArgs get_AnalogMappings
        {
            add
            {
                HookHandler._beforeget_AnalogMappings += value;
                HookHandler.Hookget_AnalogMappings();
            }
            remove => HookHandler._beforeget_AnalogMappings -= value;
        }

        public static event Delegates.set_AnalogMappings_BeforeArgs set_AnalogMappings
        {
            add
            {
                HookHandler._beforeset_AnalogMappings += value;
                HookHandler.Hookset_AnalogMappings();
            }
            remove => HookHandler._beforeset_AnalogMappings -= value;
        }

        public static event Delegates.get_ButtonMappings_BeforeArgs get_ButtonMappings
        {
            add
            {
                HookHandler._beforeget_ButtonMappings += value;
                HookHandler.Hookget_ButtonMappings();
            }
            remove => HookHandler._beforeget_ButtonMappings -= value;
        }

        public static event Delegates.set_ButtonMappings_BeforeArgs set_ButtonMappings
        {
            add
            {
                HookHandler._beforeset_ButtonMappings += value;
                HookHandler.Hookset_ButtonMappings();
            }
            remove => HookHandler._beforeset_ButtonMappings -= value;
        }

        public static event Delegates.get_IncludePlatforms_BeforeArgs get_IncludePlatforms
        {
            add
            {
                HookHandler._beforeget_IncludePlatforms += value;
                HookHandler.Hookget_IncludePlatforms();
            }
            remove => HookHandler._beforeget_IncludePlatforms -= value;
        }

        public static event Delegates.set_IncludePlatforms_BeforeArgs set_IncludePlatforms
        {
            add
            {
                HookHandler._beforeset_IncludePlatforms += value;
                HookHandler.Hookset_IncludePlatforms();
            }
            remove => HookHandler._beforeset_IncludePlatforms -= value;
        }

        public static event Delegates.get_ExcludePlatforms_BeforeArgs get_ExcludePlatforms
        {
            add
            {
                HookHandler._beforeget_ExcludePlatforms += value;
                HookHandler.Hookget_ExcludePlatforms();
            }
            remove => HookHandler._beforeget_ExcludePlatforms -= value;
        }

        public static event Delegates.set_ExcludePlatforms_BeforeArgs set_ExcludePlatforms
        {
            add
            {
                HookHandler._beforeset_ExcludePlatforms += value;
                HookHandler.Hookset_ExcludePlatforms();
            }
            remove => HookHandler._beforeset_ExcludePlatforms -= value;
        }

        public static event Delegates.get_MinSystemBuildNumber_BeforeArgs get_MinSystemBuildNumber
        {
            add
            {
                HookHandler._beforeget_MinSystemBuildNumber += value;
                HookHandler.Hookget_MinSystemBuildNumber();
            }
            remove => HookHandler._beforeget_MinSystemBuildNumber -= value;
        }

        public static event Delegates.set_MinSystemBuildNumber_BeforeArgs set_MinSystemBuildNumber
        {
            add
            {
                HookHandler._beforeset_MinSystemBuildNumber += value;
                HookHandler.Hookset_MinSystemBuildNumber();
            }
            remove => HookHandler._beforeset_MinSystemBuildNumber -= value;
        }

        public static event Delegates.get_MaxSystemBuildNumber_BeforeArgs get_MaxSystemBuildNumber
        {
            add
            {
                HookHandler._beforeget_MaxSystemBuildNumber += value;
                HookHandler.Hookget_MaxSystemBuildNumber();
            }
            remove => HookHandler._beforeget_MaxSystemBuildNumber -= value;
        }

        public static event Delegates.set_MaxSystemBuildNumber_BeforeArgs set_MaxSystemBuildNumber
        {
            add
            {
                HookHandler._beforeset_MaxSystemBuildNumber += value;
                HookHandler.Hookset_MaxSystemBuildNumber();
            }
            remove => HookHandler._beforeset_MaxSystemBuildNumber -= value;
        }

        public static event Delegates.get_MinUnityVersion_BeforeArgs get_MinUnityVersion
        {
            add
            {
                HookHandler._beforeget_MinUnityVersion += value;
                HookHandler.Hookget_MinUnityVersion();
            }
            remove => HookHandler._beforeget_MinUnityVersion -= value;
        }

        public static event Delegates.set_MinUnityVersion_BeforeArgs set_MinUnityVersion
        {
            add
            {
                HookHandler._beforeset_MinUnityVersion += value;
                HookHandler.Hookset_MinUnityVersion();
            }
            remove => HookHandler._beforeset_MinUnityVersion -= value;
        }

        public static event Delegates.get_MaxUnityVersion_BeforeArgs get_MaxUnityVersion
        {
            add
            {
                HookHandler._beforeget_MaxUnityVersion += value;
                HookHandler.Hookget_MaxUnityVersion();
            }
            remove => HookHandler._beforeget_MaxUnityVersion -= value;
        }

        public static event Delegates.set_MaxUnityVersion_BeforeArgs set_MaxUnityVersion
        {
            add
            {
                HookHandler._beforeset_MaxUnityVersion += value;
                HookHandler.Hookset_MaxUnityVersion();
            }
            remove => HookHandler._beforeset_MaxUnityVersion -= value;
        }

        public static event Delegates.get_Matchers_BeforeArgs get_Matchers
        {
            add
            {
                HookHandler._beforeget_Matchers += value;
                HookHandler.Hookget_Matchers();
            }
            remove => HookHandler._beforeget_Matchers -= value;
        }

        public static event Delegates.set_Matchers_BeforeArgs set_Matchers
        {
            add
            {
                HookHandler._beforeset_Matchers += value;
                HookHandler.Hookset_Matchers();
            }
            remove => HookHandler._beforeset_Matchers -= value;
        }

        public static event Delegates.get_LastResortMatchers_BeforeArgs get_LastResortMatchers
        {
            add
            {
                HookHandler._beforeget_LastResortMatchers += value;
                HookHandler.Hookget_LastResortMatchers();
            }
            remove => HookHandler._beforeget_LastResortMatchers -= value;
        }

        public static event Delegates.set_LastResortMatchers_BeforeArgs set_LastResortMatchers
        {
            add
            {
                HookHandler._beforeset_LastResortMatchers += value;
                HookHandler.Hookset_LastResortMatchers();
            }
            remove => HookHandler._beforeset_LastResortMatchers -= value;
        }

        public static event Delegates.CreateInstanceOfType_Type_BeforeArgs CreateInstanceOfType_Type
        {
            add
            {
                HookHandler._beforeCreateInstanceOfType_Type += value;
                HookHandler.HookCreateInstanceOfType_Type();
            }
            remove => HookHandler._beforeCreateInstanceOfType_Type -= value;
        }

        public static event Delegates.CreateInstanceOfType_string_BeforeArgs CreateInstanceOfType_string
        {
            add
            {
                HookHandler._beforeCreateInstanceOfType_string += value;
                HookHandler.HookCreateInstanceOfType_string();
            }
            remove => HookHandler._beforeCreateInstanceOfType_string -= value;
        }

        public static event Delegates.Define_BeforeArgs Define
        {
            add
            {
                HookHandler._beforeDefine += value;
                HookHandler.HookDefine();
            }
            remove => HookHandler._beforeDefine -= value;
        }

        public static event Delegates.Matches_InputDeviceInfo_BeforeArgs Matches_InputDeviceInfo
        {
            add
            {
                HookHandler._beforeMatches_InputDeviceInfo += value;
                HookHandler.HookMatches_InputDeviceInfo();
            }
            remove => HookHandler._beforeMatches_InputDeviceInfo -= value;
        }

        public static event Delegates.LastResortMatches_BeforeArgs LastResortMatches
        {
            add
            {
                HookHandler._beforeLastResortMatches += value;
                HookHandler.HookLastResortMatches();
            }
            remove => HookHandler._beforeLastResortMatches -= value;
        }

        public static event Delegates.Matches_InputDeviceInfo_Array_BeforeArgs Matches_InputDeviceInfo_Array
        {
            add
            {
                HookHandler._beforeMatches_InputDeviceInfo_Array += value;
                HookHandler.HookMatches_InputDeviceInfo_Array();
            }
            remove => HookHandler._beforeMatches_InputDeviceInfo_Array -= value;
        }

        public static event Delegates.get_IsSupportedOnThisPlatform_BeforeArgs get_IsSupportedOnThisPlatform
        {
            add
            {
                HookHandler._beforeget_IsSupportedOnThisPlatform += value;
                HookHandler.Hookget_IsSupportedOnThisPlatform();
            }
            remove => HookHandler._beforeget_IsSupportedOnThisPlatform -= value;
        }

        public static event Delegates.Hide_BeforeArgs Hide
        {
            add
            {
                HookHandler._beforeHide += value;
                HookHandler.HookHide();
            }
            remove => HookHandler._beforeHide -= value;
        }

        public static event Delegates.get_IsHidden_BeforeArgs get_IsHidden
        {
            add
            {
                HookHandler._beforeget_IsHidden += value;
                HookHandler.Hookget_IsHidden();
            }
            remove => HookHandler._beforeget_IsHidden -= value;
        }

        public static event Delegates.get_IsNotHidden_BeforeArgs get_IsNotHidden
        {
            add
            {
                HookHandler._beforeget_IsNotHidden += value;
                HookHandler.Hookget_IsNotHidden();
            }
            remove => HookHandler._beforeget_IsNotHidden -= value;
        }

        public static event Delegates.get_AnalogCount_BeforeArgs get_AnalogCount
        {
            add
            {
                HookHandler._beforeget_AnalogCount += value;
                HookHandler.Hookget_AnalogCount();
            }
            remove => HookHandler._beforeget_AnalogCount -= value;
        }

        public static event Delegates.get_ButtonCount_BeforeArgs get_ButtonCount
        {
            add
            {
                HookHandler._beforeget_ButtonCount += value;
                HookHandler.Hookget_ButtonCount();
            }
            remove => HookHandler._beforeget_ButtonCount -= value;
        }

        public static event Delegates.Button_BeforeArgs Button
        {
            add
            {
                HookHandler._beforeButton += value;
                HookHandler.HookButton();
            }
            remove => HookHandler._beforeButton -= value;
        }

        public static event Delegates.Analog_BeforeArgs Analog
        {
            add
            {
                HookHandler._beforeAnalog += value;
                HookHandler.HookAnalog();
            }
            remove => HookHandler._beforeAnalog -= value;
        }

        public static event Delegates.LeftStickLeftMapping_BeforeArgs LeftStickLeftMapping
        {
            add
            {
                HookHandler._beforeLeftStickLeftMapping += value;
                HookHandler.HookLeftStickLeftMapping();
            }
            remove => HookHandler._beforeLeftStickLeftMapping -= value;
        }

        public static event Delegates.LeftStickRightMapping_BeforeArgs LeftStickRightMapping
        {
            add
            {
                HookHandler._beforeLeftStickRightMapping += value;
                HookHandler.HookLeftStickRightMapping();
            }
            remove => HookHandler._beforeLeftStickRightMapping -= value;
        }

        public static event Delegates.LeftStickUpMapping_BeforeArgs LeftStickUpMapping
        {
            add
            {
                HookHandler._beforeLeftStickUpMapping += value;
                HookHandler.HookLeftStickUpMapping();
            }
            remove => HookHandler._beforeLeftStickUpMapping -= value;
        }

        public static event Delegates.LeftStickDownMapping_BeforeArgs LeftStickDownMapping
        {
            add
            {
                HookHandler._beforeLeftStickDownMapping += value;
                HookHandler.HookLeftStickDownMapping();
            }
            remove => HookHandler._beforeLeftStickDownMapping -= value;
        }

        public static event Delegates.LeftStickUpMapping2_BeforeArgs LeftStickUpMapping2
        {
            add
            {
                HookHandler._beforeLeftStickUpMapping2 += value;
                HookHandler.HookLeftStickUpMapping2();
            }
            remove => HookHandler._beforeLeftStickUpMapping2 -= value;
        }

        public static event Delegates.LeftStickDownMapping2_BeforeArgs LeftStickDownMapping2
        {
            add
            {
                HookHandler._beforeLeftStickDownMapping2 += value;
                HookHandler.HookLeftStickDownMapping2();
            }
            remove => HookHandler._beforeLeftStickDownMapping2 -= value;
        }

        public static event Delegates.RightStickLeftMapping_BeforeArgs RightStickLeftMapping
        {
            add
            {
                HookHandler._beforeRightStickLeftMapping += value;
                HookHandler.HookRightStickLeftMapping();
            }
            remove => HookHandler._beforeRightStickLeftMapping -= value;
        }

        public static event Delegates.RightStickRightMapping_BeforeArgs RightStickRightMapping
        {
            add
            {
                HookHandler._beforeRightStickRightMapping += value;
                HookHandler.HookRightStickRightMapping();
            }
            remove => HookHandler._beforeRightStickRightMapping -= value;
        }

        public static event Delegates.RightStickUpMapping_BeforeArgs RightStickUpMapping
        {
            add
            {
                HookHandler._beforeRightStickUpMapping += value;
                HookHandler.HookRightStickUpMapping();
            }
            remove => HookHandler._beforeRightStickUpMapping -= value;
        }

        public static event Delegates.RightStickDownMapping_BeforeArgs RightStickDownMapping
        {
            add
            {
                HookHandler._beforeRightStickDownMapping += value;
                HookHandler.HookRightStickDownMapping();
            }
            remove => HookHandler._beforeRightStickDownMapping -= value;
        }

        public static event Delegates.RightStickUpMapping2_BeforeArgs RightStickUpMapping2
        {
            add
            {
                HookHandler._beforeRightStickUpMapping2 += value;
                HookHandler.HookRightStickUpMapping2();
            }
            remove => HookHandler._beforeRightStickUpMapping2 -= value;
        }

        public static event Delegates.RightStickDownMapping2_BeforeArgs RightStickDownMapping2
        {
            add
            {
                HookHandler._beforeRightStickDownMapping2 += value;
                HookHandler.HookRightStickDownMapping2();
            }
            remove => HookHandler._beforeRightStickDownMapping2 -= value;
        }

        public static event Delegates.LeftTriggerMapping_BeforeArgs LeftTriggerMapping
        {
            add
            {
                HookHandler._beforeLeftTriggerMapping += value;
                HookHandler.HookLeftTriggerMapping();
            }
            remove => HookHandler._beforeLeftTriggerMapping -= value;
        }

        public static event Delegates.RightTriggerMapping_BeforeArgs RightTriggerMapping
        {
            add
            {
                HookHandler._beforeRightTriggerMapping += value;
                HookHandler.HookRightTriggerMapping();
            }
            remove => HookHandler._beforeRightTriggerMapping -= value;
        }

        public static event Delegates.DPadLeftMapping_BeforeArgs DPadLeftMapping
        {
            add
            {
                HookHandler._beforeDPadLeftMapping += value;
                HookHandler.HookDPadLeftMapping();
            }
            remove => HookHandler._beforeDPadLeftMapping -= value;
        }

        public static event Delegates.DPadRightMapping_BeforeArgs DPadRightMapping
        {
            add
            {
                HookHandler._beforeDPadRightMapping += value;
                HookHandler.HookDPadRightMapping();
            }
            remove => HookHandler._beforeDPadRightMapping -= value;
        }

        public static event Delegates.DPadUpMapping_BeforeArgs DPadUpMapping
        {
            add
            {
                HookHandler._beforeDPadUpMapping += value;
                HookHandler.HookDPadUpMapping();
            }
            remove => HookHandler._beforeDPadUpMapping -= value;
        }

        public static event Delegates.DPadDownMapping_BeforeArgs DPadDownMapping
        {
            add
            {
                HookHandler._beforeDPadDownMapping += value;
                HookHandler.HookDPadDownMapping();
            }
            remove => HookHandler._beforeDPadDownMapping -= value;
        }

        public static event Delegates.DPadUpMapping2_BeforeArgs DPadUpMapping2
        {
            add
            {
                HookHandler._beforeDPadUpMapping2 += value;
                HookHandler.HookDPadUpMapping2();
            }
            remove => HookHandler._beforeDPadUpMapping2 -= value;
        }

        public static event Delegates.DPadDownMapping2_BeforeArgs DPadDownMapping2
        {
            add
            {
                HookHandler._beforeDPadDownMapping2 += value;
                HookHandler.HookDPadDownMapping2();
            }
            remove => HookHandler._beforeDPadDownMapping2 -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_ProfileType_NormalArgs get_ProfileType
        {
            add
            {
                HookHandler._afterget_ProfileType += value;
                HookHandler.Hookget_ProfileType();
            }
            remove => HookHandler._afterget_ProfileType -= value;
        }

        public static event Delegates.set_ProfileType_NormalArgs set_ProfileType
        {
            add
            {
                HookHandler._afterset_ProfileType += value;
                HookHandler.Hookset_ProfileType();
            }
            remove => HookHandler._afterset_ProfileType -= value;
        }

        public static event Delegates.get_DeviceName_NormalArgs get_DeviceName
        {
            add
            {
                HookHandler._afterget_DeviceName += value;
                HookHandler.Hookget_DeviceName();
            }
            remove => HookHandler._afterget_DeviceName -= value;
        }

        public static event Delegates.set_DeviceName_NormalArgs set_DeviceName
        {
            add
            {
                HookHandler._afterset_DeviceName += value;
                HookHandler.Hookset_DeviceName();
            }
            remove => HookHandler._afterset_DeviceName -= value;
        }

        public static event Delegates.get_DeviceNotes_NormalArgs get_DeviceNotes
        {
            add
            {
                HookHandler._afterget_DeviceNotes += value;
                HookHandler.Hookget_DeviceNotes();
            }
            remove => HookHandler._afterget_DeviceNotes -= value;
        }

        public static event Delegates.set_DeviceNotes_NormalArgs set_DeviceNotes
        {
            add
            {
                HookHandler._afterset_DeviceNotes += value;
                HookHandler.Hookset_DeviceNotes();
            }
            remove => HookHandler._afterset_DeviceNotes -= value;
        }

        public static event Delegates.get_DeviceClass_NormalArgs get_DeviceClass
        {
            add
            {
                HookHandler._afterget_DeviceClass += value;
                HookHandler.Hookget_DeviceClass();
            }
            remove => HookHandler._afterget_DeviceClass -= value;
        }

        public static event Delegates.set_DeviceClass_NormalArgs set_DeviceClass
        {
            add
            {
                HookHandler._afterset_DeviceClass += value;
                HookHandler.Hookset_DeviceClass();
            }
            remove => HookHandler._afterset_DeviceClass -= value;
        }

        public static event Delegates.get_DeviceStyle_NormalArgs get_DeviceStyle
        {
            add
            {
                HookHandler._afterget_DeviceStyle += value;
                HookHandler.Hookget_DeviceStyle();
            }
            remove => HookHandler._afterget_DeviceStyle -= value;
        }

        public static event Delegates.set_DeviceStyle_NormalArgs set_DeviceStyle
        {
            add
            {
                HookHandler._afterset_DeviceStyle += value;
                HookHandler.Hookset_DeviceStyle();
            }
            remove => HookHandler._afterset_DeviceStyle -= value;
        }

        public static event Delegates.get_Sensitivity_NormalArgs get_Sensitivity
        {
            add
            {
                HookHandler._afterget_Sensitivity += value;
                HookHandler.Hookget_Sensitivity();
            }
            remove => HookHandler._afterget_Sensitivity -= value;
        }

        public static event Delegates.set_Sensitivity_NormalArgs set_Sensitivity
        {
            add
            {
                HookHandler._afterset_Sensitivity += value;
                HookHandler.Hookset_Sensitivity();
            }
            remove => HookHandler._afterset_Sensitivity -= value;
        }

        public static event Delegates.get_LowerDeadZone_NormalArgs get_LowerDeadZone
        {
            add
            {
                HookHandler._afterget_LowerDeadZone += value;
                HookHandler.Hookget_LowerDeadZone();
            }
            remove => HookHandler._afterget_LowerDeadZone -= value;
        }

        public static event Delegates.set_LowerDeadZone_NormalArgs set_LowerDeadZone
        {
            add
            {
                HookHandler._afterset_LowerDeadZone += value;
                HookHandler.Hookset_LowerDeadZone();
            }
            remove => HookHandler._afterset_LowerDeadZone -= value;
        }

        public static event Delegates.get_UpperDeadZone_NormalArgs get_UpperDeadZone
        {
            add
            {
                HookHandler._afterget_UpperDeadZone += value;
                HookHandler.Hookget_UpperDeadZone();
            }
            remove => HookHandler._afterget_UpperDeadZone -= value;
        }

        public static event Delegates.set_UpperDeadZone_NormalArgs set_UpperDeadZone
        {
            add
            {
                HookHandler._afterset_UpperDeadZone += value;
                HookHandler.Hookset_UpperDeadZone();
            }
            remove => HookHandler._afterset_UpperDeadZone -= value;
        }

        public static event Delegates.get_AnalogMappings_NormalArgs get_AnalogMappings
        {
            add
            {
                HookHandler._afterget_AnalogMappings += value;
                HookHandler.Hookget_AnalogMappings();
            }
            remove => HookHandler._afterget_AnalogMappings -= value;
        }

        public static event Delegates.set_AnalogMappings_NormalArgs set_AnalogMappings
        {
            add
            {
                HookHandler._afterset_AnalogMappings += value;
                HookHandler.Hookset_AnalogMappings();
            }
            remove => HookHandler._afterset_AnalogMappings -= value;
        }

        public static event Delegates.get_ButtonMappings_NormalArgs get_ButtonMappings
        {
            add
            {
                HookHandler._afterget_ButtonMappings += value;
                HookHandler.Hookget_ButtonMappings();
            }
            remove => HookHandler._afterget_ButtonMappings -= value;
        }

        public static event Delegates.set_ButtonMappings_NormalArgs set_ButtonMappings
        {
            add
            {
                HookHandler._afterset_ButtonMappings += value;
                HookHandler.Hookset_ButtonMappings();
            }
            remove => HookHandler._afterset_ButtonMappings -= value;
        }

        public static event Delegates.get_IncludePlatforms_NormalArgs get_IncludePlatforms
        {
            add
            {
                HookHandler._afterget_IncludePlatforms += value;
                HookHandler.Hookget_IncludePlatforms();
            }
            remove => HookHandler._afterget_IncludePlatforms -= value;
        }

        public static event Delegates.set_IncludePlatforms_NormalArgs set_IncludePlatforms
        {
            add
            {
                HookHandler._afterset_IncludePlatforms += value;
                HookHandler.Hookset_IncludePlatforms();
            }
            remove => HookHandler._afterset_IncludePlatforms -= value;
        }

        public static event Delegates.get_ExcludePlatforms_NormalArgs get_ExcludePlatforms
        {
            add
            {
                HookHandler._afterget_ExcludePlatforms += value;
                HookHandler.Hookget_ExcludePlatforms();
            }
            remove => HookHandler._afterget_ExcludePlatforms -= value;
        }

        public static event Delegates.set_ExcludePlatforms_NormalArgs set_ExcludePlatforms
        {
            add
            {
                HookHandler._afterset_ExcludePlatforms += value;
                HookHandler.Hookset_ExcludePlatforms();
            }
            remove => HookHandler._afterset_ExcludePlatforms -= value;
        }

        public static event Delegates.get_MinSystemBuildNumber_NormalArgs get_MinSystemBuildNumber
        {
            add
            {
                HookHandler._afterget_MinSystemBuildNumber += value;
                HookHandler.Hookget_MinSystemBuildNumber();
            }
            remove => HookHandler._afterget_MinSystemBuildNumber -= value;
        }

        public static event Delegates.set_MinSystemBuildNumber_NormalArgs set_MinSystemBuildNumber
        {
            add
            {
                HookHandler._afterset_MinSystemBuildNumber += value;
                HookHandler.Hookset_MinSystemBuildNumber();
            }
            remove => HookHandler._afterset_MinSystemBuildNumber -= value;
        }

        public static event Delegates.get_MaxSystemBuildNumber_NormalArgs get_MaxSystemBuildNumber
        {
            add
            {
                HookHandler._afterget_MaxSystemBuildNumber += value;
                HookHandler.Hookget_MaxSystemBuildNumber();
            }
            remove => HookHandler._afterget_MaxSystemBuildNumber -= value;
        }

        public static event Delegates.set_MaxSystemBuildNumber_NormalArgs set_MaxSystemBuildNumber
        {
            add
            {
                HookHandler._afterset_MaxSystemBuildNumber += value;
                HookHandler.Hookset_MaxSystemBuildNumber();
            }
            remove => HookHandler._afterset_MaxSystemBuildNumber -= value;
        }

        public static event Delegates.get_MinUnityVersion_NormalArgs get_MinUnityVersion
        {
            add
            {
                HookHandler._afterget_MinUnityVersion += value;
                HookHandler.Hookget_MinUnityVersion();
            }
            remove => HookHandler._afterget_MinUnityVersion -= value;
        }

        public static event Delegates.set_MinUnityVersion_NormalArgs set_MinUnityVersion
        {
            add
            {
                HookHandler._afterset_MinUnityVersion += value;
                HookHandler.Hookset_MinUnityVersion();
            }
            remove => HookHandler._afterset_MinUnityVersion -= value;
        }

        public static event Delegates.get_MaxUnityVersion_NormalArgs get_MaxUnityVersion
        {
            add
            {
                HookHandler._afterget_MaxUnityVersion += value;
                HookHandler.Hookget_MaxUnityVersion();
            }
            remove => HookHandler._afterget_MaxUnityVersion -= value;
        }

        public static event Delegates.set_MaxUnityVersion_NormalArgs set_MaxUnityVersion
        {
            add
            {
                HookHandler._afterset_MaxUnityVersion += value;
                HookHandler.Hookset_MaxUnityVersion();
            }
            remove => HookHandler._afterset_MaxUnityVersion -= value;
        }

        public static event Delegates.get_Matchers_NormalArgs get_Matchers
        {
            add
            {
                HookHandler._afterget_Matchers += value;
                HookHandler.Hookget_Matchers();
            }
            remove => HookHandler._afterget_Matchers -= value;
        }

        public static event Delegates.set_Matchers_NormalArgs set_Matchers
        {
            add
            {
                HookHandler._afterset_Matchers += value;
                HookHandler.Hookset_Matchers();
            }
            remove => HookHandler._afterset_Matchers -= value;
        }

        public static event Delegates.get_LastResortMatchers_NormalArgs get_LastResortMatchers
        {
            add
            {
                HookHandler._afterget_LastResortMatchers += value;
                HookHandler.Hookget_LastResortMatchers();
            }
            remove => HookHandler._afterget_LastResortMatchers -= value;
        }

        public static event Delegates.set_LastResortMatchers_NormalArgs set_LastResortMatchers
        {
            add
            {
                HookHandler._afterset_LastResortMatchers += value;
                HookHandler.Hookset_LastResortMatchers();
            }
            remove => HookHandler._afterset_LastResortMatchers -= value;
        }

        public static event Delegates.CreateInstanceOfType_Type_NormalArgs CreateInstanceOfType_Type
        {
            add
            {
                HookHandler._afterCreateInstanceOfType_Type += value;
                HookHandler.HookCreateInstanceOfType_Type();
            }
            remove => HookHandler._afterCreateInstanceOfType_Type -= value;
        }

        public static event Delegates.CreateInstanceOfType_string_NormalArgs CreateInstanceOfType_string
        {
            add
            {
                HookHandler._afterCreateInstanceOfType_string += value;
                HookHandler.HookCreateInstanceOfType_string();
            }
            remove => HookHandler._afterCreateInstanceOfType_string -= value;
        }

        public static event Delegates.Define_NormalArgs Define
        {
            add
            {
                HookHandler._afterDefine += value;
                HookHandler.HookDefine();
            }
            remove => HookHandler._afterDefine -= value;
        }

        public static event Delegates.Matches_InputDeviceInfo_NormalArgs Matches_InputDeviceInfo
        {
            add
            {
                HookHandler._afterMatches_InputDeviceInfo += value;
                HookHandler.HookMatches_InputDeviceInfo();
            }
            remove => HookHandler._afterMatches_InputDeviceInfo -= value;
        }

        public static event Delegates.LastResortMatches_NormalArgs LastResortMatches
        {
            add
            {
                HookHandler._afterLastResortMatches += value;
                HookHandler.HookLastResortMatches();
            }
            remove => HookHandler._afterLastResortMatches -= value;
        }

        public static event Delegates.Matches_InputDeviceInfo_Array_NormalArgs Matches_InputDeviceInfo_Array
        {
            add
            {
                HookHandler._afterMatches_InputDeviceInfo_Array += value;
                HookHandler.HookMatches_InputDeviceInfo_Array();
            }
            remove => HookHandler._afterMatches_InputDeviceInfo_Array -= value;
        }

        public static event Delegates.get_IsSupportedOnThisPlatform_NormalArgs get_IsSupportedOnThisPlatform
        {
            add
            {
                HookHandler._afterget_IsSupportedOnThisPlatform += value;
                HookHandler.Hookget_IsSupportedOnThisPlatform();
            }
            remove => HookHandler._afterget_IsSupportedOnThisPlatform -= value;
        }

        public static event Delegates.Hide_NormalArgs Hide
        {
            add
            {
                HookHandler._afterHide += value;
                HookHandler.HookHide();
            }
            remove => HookHandler._afterHide -= value;
        }

        public static event Delegates.get_IsHidden_NormalArgs get_IsHidden
        {
            add
            {
                HookHandler._afterget_IsHidden += value;
                HookHandler.Hookget_IsHidden();
            }
            remove => HookHandler._afterget_IsHidden -= value;
        }

        public static event Delegates.get_IsNotHidden_NormalArgs get_IsNotHidden
        {
            add
            {
                HookHandler._afterget_IsNotHidden += value;
                HookHandler.Hookget_IsNotHidden();
            }
            remove => HookHandler._afterget_IsNotHidden -= value;
        }

        public static event Delegates.get_AnalogCount_NormalArgs get_AnalogCount
        {
            add
            {
                HookHandler._afterget_AnalogCount += value;
                HookHandler.Hookget_AnalogCount();
            }
            remove => HookHandler._afterget_AnalogCount -= value;
        }

        public static event Delegates.get_ButtonCount_NormalArgs get_ButtonCount
        {
            add
            {
                HookHandler._afterget_ButtonCount += value;
                HookHandler.Hookget_ButtonCount();
            }
            remove => HookHandler._afterget_ButtonCount -= value;
        }

        public static event Delegates.Button_NormalArgs Button
        {
            add
            {
                HookHandler._afterButton += value;
                HookHandler.HookButton();
            }
            remove => HookHandler._afterButton -= value;
        }

        public static event Delegates.Analog_NormalArgs Analog
        {
            add
            {
                HookHandler._afterAnalog += value;
                HookHandler.HookAnalog();
            }
            remove => HookHandler._afterAnalog -= value;
        }

        public static event Delegates.LeftStickLeftMapping_NormalArgs LeftStickLeftMapping
        {
            add
            {
                HookHandler._afterLeftStickLeftMapping += value;
                HookHandler.HookLeftStickLeftMapping();
            }
            remove => HookHandler._afterLeftStickLeftMapping -= value;
        }

        public static event Delegates.LeftStickRightMapping_NormalArgs LeftStickRightMapping
        {
            add
            {
                HookHandler._afterLeftStickRightMapping += value;
                HookHandler.HookLeftStickRightMapping();
            }
            remove => HookHandler._afterLeftStickRightMapping -= value;
        }

        public static event Delegates.LeftStickUpMapping_NormalArgs LeftStickUpMapping
        {
            add
            {
                HookHandler._afterLeftStickUpMapping += value;
                HookHandler.HookLeftStickUpMapping();
            }
            remove => HookHandler._afterLeftStickUpMapping -= value;
        }

        public static event Delegates.LeftStickDownMapping_NormalArgs LeftStickDownMapping
        {
            add
            {
                HookHandler._afterLeftStickDownMapping += value;
                HookHandler.HookLeftStickDownMapping();
            }
            remove => HookHandler._afterLeftStickDownMapping -= value;
        }

        public static event Delegates.LeftStickUpMapping2_NormalArgs LeftStickUpMapping2
        {
            add
            {
                HookHandler._afterLeftStickUpMapping2 += value;
                HookHandler.HookLeftStickUpMapping2();
            }
            remove => HookHandler._afterLeftStickUpMapping2 -= value;
        }

        public static event Delegates.LeftStickDownMapping2_NormalArgs LeftStickDownMapping2
        {
            add
            {
                HookHandler._afterLeftStickDownMapping2 += value;
                HookHandler.HookLeftStickDownMapping2();
            }
            remove => HookHandler._afterLeftStickDownMapping2 -= value;
        }

        public static event Delegates.RightStickLeftMapping_NormalArgs RightStickLeftMapping
        {
            add
            {
                HookHandler._afterRightStickLeftMapping += value;
                HookHandler.HookRightStickLeftMapping();
            }
            remove => HookHandler._afterRightStickLeftMapping -= value;
        }

        public static event Delegates.RightStickRightMapping_NormalArgs RightStickRightMapping
        {
            add
            {
                HookHandler._afterRightStickRightMapping += value;
                HookHandler.HookRightStickRightMapping();
            }
            remove => HookHandler._afterRightStickRightMapping -= value;
        }

        public static event Delegates.RightStickUpMapping_NormalArgs RightStickUpMapping
        {
            add
            {
                HookHandler._afterRightStickUpMapping += value;
                HookHandler.HookRightStickUpMapping();
            }
            remove => HookHandler._afterRightStickUpMapping -= value;
        }

        public static event Delegates.RightStickDownMapping_NormalArgs RightStickDownMapping
        {
            add
            {
                HookHandler._afterRightStickDownMapping += value;
                HookHandler.HookRightStickDownMapping();
            }
            remove => HookHandler._afterRightStickDownMapping -= value;
        }

        public static event Delegates.RightStickUpMapping2_NormalArgs RightStickUpMapping2
        {
            add
            {
                HookHandler._afterRightStickUpMapping2 += value;
                HookHandler.HookRightStickUpMapping2();
            }
            remove => HookHandler._afterRightStickUpMapping2 -= value;
        }

        public static event Delegates.RightStickDownMapping2_NormalArgs RightStickDownMapping2
        {
            add
            {
                HookHandler._afterRightStickDownMapping2 += value;
                HookHandler.HookRightStickDownMapping2();
            }
            remove => HookHandler._afterRightStickDownMapping2 -= value;
        }

        public static event Delegates.LeftTriggerMapping_NormalArgs LeftTriggerMapping
        {
            add
            {
                HookHandler._afterLeftTriggerMapping += value;
                HookHandler.HookLeftTriggerMapping();
            }
            remove => HookHandler._afterLeftTriggerMapping -= value;
        }

        public static event Delegates.RightTriggerMapping_NormalArgs RightTriggerMapping
        {
            add
            {
                HookHandler._afterRightTriggerMapping += value;
                HookHandler.HookRightTriggerMapping();
            }
            remove => HookHandler._afterRightTriggerMapping -= value;
        }

        public static event Delegates.DPadLeftMapping_NormalArgs DPadLeftMapping
        {
            add
            {
                HookHandler._afterDPadLeftMapping += value;
                HookHandler.HookDPadLeftMapping();
            }
            remove => HookHandler._afterDPadLeftMapping -= value;
        }

        public static event Delegates.DPadRightMapping_NormalArgs DPadRightMapping
        {
            add
            {
                HookHandler._afterDPadRightMapping += value;
                HookHandler.HookDPadRightMapping();
            }
            remove => HookHandler._afterDPadRightMapping -= value;
        }

        public static event Delegates.DPadUpMapping_NormalArgs DPadUpMapping
        {
            add
            {
                HookHandler._afterDPadUpMapping += value;
                HookHandler.HookDPadUpMapping();
            }
            remove => HookHandler._afterDPadUpMapping -= value;
        }

        public static event Delegates.DPadDownMapping_NormalArgs DPadDownMapping
        {
            add
            {
                HookHandler._afterDPadDownMapping += value;
                HookHandler.HookDPadDownMapping();
            }
            remove => HookHandler._afterDPadDownMapping -= value;
        }

        public static event Delegates.DPadUpMapping2_NormalArgs DPadUpMapping2
        {
            add
            {
                HookHandler._afterDPadUpMapping2 += value;
                HookHandler.HookDPadUpMapping2();
            }
            remove => HookHandler._afterDPadUpMapping2 -= value;
        }

        public static event Delegates.DPadDownMapping2_NormalArgs DPadDownMapping2
        {
            add
            {
                HookHandler._afterDPadDownMapping2 += value;
                HookHandler.HookDPadDownMapping2();
            }
            remove => HookHandler._afterDPadDownMapping2 -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_ProfileType_NormalArgs get_ProfileType
        {
            add => HookEndpointManager.Add<Delegates.get_ProfileType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_ProfileType"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ProfileType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_ProfileType"), value);
        }

        public static event Delegates.set_ProfileType_NormalArgs set_ProfileType
        {
            add => HookEndpointManager.Add<Delegates.set_ProfileType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_ProfileType"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ProfileType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_ProfileType"), value);
        }

        public static event Delegates.get_DeviceName_NormalArgs get_DeviceName
        {
            add => HookEndpointManager.Add<Delegates.get_DeviceName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_DeviceName"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DeviceName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_DeviceName"), value);
        }

        public static event Delegates.set_DeviceName_NormalArgs set_DeviceName
        {
            add => HookEndpointManager.Add<Delegates.set_DeviceName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_DeviceName"), value);
            remove => HookEndpointManager.Remove<Delegates.set_DeviceName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_DeviceName"), value);
        }

        public static event Delegates.get_DeviceNotes_NormalArgs get_DeviceNotes
        {
            add => HookEndpointManager.Add<Delegates.get_DeviceNotes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_DeviceNotes"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DeviceNotes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_DeviceNotes"), value);
        }

        public static event Delegates.set_DeviceNotes_NormalArgs set_DeviceNotes
        {
            add => HookEndpointManager.Add<Delegates.set_DeviceNotes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_DeviceNotes"), value);
            remove => HookEndpointManager.Remove<Delegates.set_DeviceNotes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_DeviceNotes"), value);
        }

        public static event Delegates.get_DeviceClass_NormalArgs get_DeviceClass
        {
            add => HookEndpointManager.Add<Delegates.get_DeviceClass_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_DeviceClass"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DeviceClass_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_DeviceClass"), value);
        }

        public static event Delegates.set_DeviceClass_NormalArgs set_DeviceClass
        {
            add => HookEndpointManager.Add<Delegates.set_DeviceClass_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_DeviceClass"), value);
            remove => HookEndpointManager.Remove<Delegates.set_DeviceClass_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_DeviceClass"), value);
        }

        public static event Delegates.get_DeviceStyle_NormalArgs get_DeviceStyle
        {
            add => HookEndpointManager.Add<Delegates.get_DeviceStyle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_DeviceStyle"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DeviceStyle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_DeviceStyle"), value);
        }

        public static event Delegates.set_DeviceStyle_NormalArgs set_DeviceStyle
        {
            add => HookEndpointManager.Add<Delegates.set_DeviceStyle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_DeviceStyle"), value);
            remove => HookEndpointManager.Remove<Delegates.set_DeviceStyle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_DeviceStyle"), value);
        }

        public static event Delegates.get_Sensitivity_NormalArgs get_Sensitivity
        {
            add => HookEndpointManager.Add<Delegates.get_Sensitivity_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_Sensitivity"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Sensitivity_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_Sensitivity"), value);
        }

        public static event Delegates.set_Sensitivity_NormalArgs set_Sensitivity
        {
            add => HookEndpointManager.Add<Delegates.set_Sensitivity_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_Sensitivity"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Sensitivity_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_Sensitivity"), value);
        }

        public static event Delegates.get_LowerDeadZone_NormalArgs get_LowerDeadZone
        {
            add => HookEndpointManager.Add<Delegates.get_LowerDeadZone_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_LowerDeadZone"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LowerDeadZone_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_LowerDeadZone"), value);
        }

        public static event Delegates.set_LowerDeadZone_NormalArgs set_LowerDeadZone
        {
            add => HookEndpointManager.Add<Delegates.set_LowerDeadZone_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_LowerDeadZone"), value);
            remove => HookEndpointManager.Remove<Delegates.set_LowerDeadZone_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_LowerDeadZone"), value);
        }

        public static event Delegates.get_UpperDeadZone_NormalArgs get_UpperDeadZone
        {
            add => HookEndpointManager.Add<Delegates.get_UpperDeadZone_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_UpperDeadZone"), value);
            remove => HookEndpointManager.Remove<Delegates.get_UpperDeadZone_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_UpperDeadZone"), value);
        }

        public static event Delegates.set_UpperDeadZone_NormalArgs set_UpperDeadZone
        {
            add => HookEndpointManager.Add<Delegates.set_UpperDeadZone_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_UpperDeadZone"), value);
            remove => HookEndpointManager.Remove<Delegates.set_UpperDeadZone_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_UpperDeadZone"), value);
        }

        public static event Delegates.get_AnalogMappings_NormalArgs get_AnalogMappings
        {
            add => HookEndpointManager.Add<Delegates.get_AnalogMappings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_AnalogMappings"), value);
            remove => HookEndpointManager.Remove<Delegates.get_AnalogMappings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_AnalogMappings"), value);
        }

        public static event Delegates.set_AnalogMappings_NormalArgs set_AnalogMappings
        {
            add => HookEndpointManager.Add<Delegates.set_AnalogMappings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_AnalogMappings"), value);
            remove => HookEndpointManager.Remove<Delegates.set_AnalogMappings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_AnalogMappings"), value);
        }

        public static event Delegates.get_ButtonMappings_NormalArgs get_ButtonMappings
        {
            add => HookEndpointManager.Add<Delegates.get_ButtonMappings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_ButtonMappings"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ButtonMappings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_ButtonMappings"), value);
        }

        public static event Delegates.set_ButtonMappings_NormalArgs set_ButtonMappings
        {
            add => HookEndpointManager.Add<Delegates.set_ButtonMappings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_ButtonMappings"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ButtonMappings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_ButtonMappings"), value);
        }

        public static event Delegates.get_IncludePlatforms_NormalArgs get_IncludePlatforms
        {
            add => HookEndpointManager.Add<Delegates.get_IncludePlatforms_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_IncludePlatforms"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IncludePlatforms_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_IncludePlatforms"), value);
        }

        public static event Delegates.set_IncludePlatforms_NormalArgs set_IncludePlatforms
        {
            add => HookEndpointManager.Add<Delegates.set_IncludePlatforms_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_IncludePlatforms"), value);
            remove => HookEndpointManager.Remove<Delegates.set_IncludePlatforms_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_IncludePlatforms"), value);
        }

        public static event Delegates.get_ExcludePlatforms_NormalArgs get_ExcludePlatforms
        {
            add => HookEndpointManager.Add<Delegates.get_ExcludePlatforms_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_ExcludePlatforms"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ExcludePlatforms_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_ExcludePlatforms"), value);
        }

        public static event Delegates.set_ExcludePlatforms_NormalArgs set_ExcludePlatforms
        {
            add => HookEndpointManager.Add<Delegates.set_ExcludePlatforms_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_ExcludePlatforms"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ExcludePlatforms_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_ExcludePlatforms"), value);
        }

        public static event Delegates.get_MinSystemBuildNumber_NormalArgs get_MinSystemBuildNumber
        {
            add => HookEndpointManager.Add<Delegates.get_MinSystemBuildNumber_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_MinSystemBuildNumber"), value);
            remove => HookEndpointManager.Remove<Delegates.get_MinSystemBuildNumber_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_MinSystemBuildNumber"), value);
        }

        public static event Delegates.set_MinSystemBuildNumber_NormalArgs set_MinSystemBuildNumber
        {
            add => HookEndpointManager.Add<Delegates.set_MinSystemBuildNumber_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_MinSystemBuildNumber"), value);
            remove => HookEndpointManager.Remove<Delegates.set_MinSystemBuildNumber_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_MinSystemBuildNumber"), value);
        }

        public static event Delegates.get_MaxSystemBuildNumber_NormalArgs get_MaxSystemBuildNumber
        {
            add => HookEndpointManager.Add<Delegates.get_MaxSystemBuildNumber_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_MaxSystemBuildNumber"), value);
            remove => HookEndpointManager.Remove<Delegates.get_MaxSystemBuildNumber_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_MaxSystemBuildNumber"), value);
        }

        public static event Delegates.set_MaxSystemBuildNumber_NormalArgs set_MaxSystemBuildNumber
        {
            add => HookEndpointManager.Add<Delegates.set_MaxSystemBuildNumber_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_MaxSystemBuildNumber"), value);
            remove => HookEndpointManager.Remove<Delegates.set_MaxSystemBuildNumber_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_MaxSystemBuildNumber"), value);
        }

        public static event Delegates.get_MinUnityVersion_NormalArgs get_MinUnityVersion
        {
            add => HookEndpointManager.Add<Delegates.get_MinUnityVersion_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_MinUnityVersion"), value);
            remove => HookEndpointManager.Remove<Delegates.get_MinUnityVersion_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_MinUnityVersion"), value);
        }

        public static event Delegates.set_MinUnityVersion_NormalArgs set_MinUnityVersion
        {
            add => HookEndpointManager.Add<Delegates.set_MinUnityVersion_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_MinUnityVersion"), value);
            remove => HookEndpointManager.Remove<Delegates.set_MinUnityVersion_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_MinUnityVersion"), value);
        }

        public static event Delegates.get_MaxUnityVersion_NormalArgs get_MaxUnityVersion
        {
            add => HookEndpointManager.Add<Delegates.get_MaxUnityVersion_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_MaxUnityVersion"), value);
            remove => HookEndpointManager.Remove<Delegates.get_MaxUnityVersion_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_MaxUnityVersion"), value);
        }

        public static event Delegates.set_MaxUnityVersion_NormalArgs set_MaxUnityVersion
        {
            add => HookEndpointManager.Add<Delegates.set_MaxUnityVersion_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_MaxUnityVersion"), value);
            remove => HookEndpointManager.Remove<Delegates.set_MaxUnityVersion_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_MaxUnityVersion"), value);
        }

        public static event Delegates.get_Matchers_NormalArgs get_Matchers
        {
            add => HookEndpointManager.Add<Delegates.get_Matchers_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_Matchers"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Matchers_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_Matchers"), value);
        }

        public static event Delegates.set_Matchers_NormalArgs set_Matchers
        {
            add => HookEndpointManager.Add<Delegates.set_Matchers_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_Matchers"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Matchers_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_Matchers"), value);
        }

        public static event Delegates.get_LastResortMatchers_NormalArgs get_LastResortMatchers
        {
            add => HookEndpointManager.Add<Delegates.get_LastResortMatchers_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_LastResortMatchers"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LastResortMatchers_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_LastResortMatchers"), value);
        }

        public static event Delegates.set_LastResortMatchers_NormalArgs set_LastResortMatchers
        {
            add => HookEndpointManager.Add<Delegates.set_LastResortMatchers_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_LastResortMatchers"), value);
            remove => HookEndpointManager.Remove<Delegates.set_LastResortMatchers_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "set_LastResortMatchers"), value);
        }

        public static event Delegates.CreateInstanceOfType_Type_NormalArgs CreateInstanceOfType_Type
        {
            add => HookEndpointManager.Add<Delegates.CreateInstanceOfType_Type_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "CreateInstanceOfType", false), value);
            remove => HookEndpointManager.Remove<Delegates.CreateInstanceOfType_Type_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "CreateInstanceOfType", false), value);
        }

        public static event Delegates.CreateInstanceOfType_string_NormalArgs CreateInstanceOfType_string
        {
            add => HookEndpointManager.Add<Delegates.CreateInstanceOfType_string_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "CreateInstanceOfType", false), value);
            remove => HookEndpointManager.Remove<Delegates.CreateInstanceOfType_string_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "CreateInstanceOfType", false), value);
        }

        public static event Delegates.Define_NormalArgs Define
        {
            add => HookEndpointManager.Add<Delegates.Define_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "Define"), value);
            remove => HookEndpointManager.Remove<Delegates.Define_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "Define"), value);
        }

        public static event Delegates.Matches_InputDeviceInfo_NormalArgs Matches_InputDeviceInfo
        {
            add => HookEndpointManager.Add<Delegates.Matches_InputDeviceInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "Matches"), value);
            remove => HookEndpointManager.Remove<Delegates.Matches_InputDeviceInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "Matches"), value);
        }

        public static event Delegates.LastResortMatches_NormalArgs LastResortMatches
        {
            add => HookEndpointManager.Add<Delegates.LastResortMatches_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LastResortMatches"), value);
            remove => HookEndpointManager.Remove<Delegates.LastResortMatches_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LastResortMatches"), value);
        }

        public static event Delegates.Matches_InputDeviceInfo_Array_NormalArgs Matches_InputDeviceInfo_Array
        {
            add => HookEndpointManager.Add<Delegates.Matches_InputDeviceInfo_Array_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "Matches"), value);
            remove => HookEndpointManager.Remove<Delegates.Matches_InputDeviceInfo_Array_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "Matches"), value);
        }

        public static event Delegates.get_IsSupportedOnThisPlatform_NormalArgs get_IsSupportedOnThisPlatform
        {
            add => HookEndpointManager.Add<Delegates.get_IsSupportedOnThisPlatform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_IsSupportedOnThisPlatform"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsSupportedOnThisPlatform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_IsSupportedOnThisPlatform"), value);
        }

        public static event Delegates.Hide_NormalArgs Hide
        {
            add => HookEndpointManager.Add<Delegates.Hide_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "Hide", false), value);
            remove => HookEndpointManager.Remove<Delegates.Hide_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "Hide", false), value);
        }

        public static event Delegates.get_IsHidden_NormalArgs get_IsHidden
        {
            add => HookEndpointManager.Add<Delegates.get_IsHidden_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_IsHidden"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsHidden_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_IsHidden"), value);
        }

        public static event Delegates.get_IsNotHidden_NormalArgs get_IsNotHidden
        {
            add => HookEndpointManager.Add<Delegates.get_IsNotHidden_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_IsNotHidden"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsNotHidden_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_IsNotHidden"), value);
        }

        public static event Delegates.get_AnalogCount_NormalArgs get_AnalogCount
        {
            add => HookEndpointManager.Add<Delegates.get_AnalogCount_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_AnalogCount"), value);
            remove => HookEndpointManager.Remove<Delegates.get_AnalogCount_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_AnalogCount"), value);
        }

        public static event Delegates.get_ButtonCount_NormalArgs get_ButtonCount
        {
            add => HookEndpointManager.Add<Delegates.get_ButtonCount_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_ButtonCount"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ButtonCount_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "get_ButtonCount"), value);
        }

        public static event Delegates.Button_NormalArgs Button
        {
            add => HookEndpointManager.Add<Delegates.Button_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "Button", false), value);
            remove => HookEndpointManager.Remove<Delegates.Button_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "Button", false), value);
        }

        public static event Delegates.Analog_NormalArgs Analog
        {
            add => HookEndpointManager.Add<Delegates.Analog_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "Analog", false), value);
            remove => HookEndpointManager.Remove<Delegates.Analog_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "Analog", false), value);
        }

        public static event Delegates.LeftStickLeftMapping_NormalArgs LeftStickLeftMapping
        {
            add => HookEndpointManager.Add<Delegates.LeftStickLeftMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LeftStickLeftMapping", false), value);
            remove => HookEndpointManager.Remove<Delegates.LeftStickLeftMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LeftStickLeftMapping", false), value);
        }

        public static event Delegates.LeftStickRightMapping_NormalArgs LeftStickRightMapping
        {
            add => HookEndpointManager.Add<Delegates.LeftStickRightMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LeftStickRightMapping", false), value);
            remove => HookEndpointManager.Remove<Delegates.LeftStickRightMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LeftStickRightMapping", false), value);
        }

        public static event Delegates.LeftStickUpMapping_NormalArgs LeftStickUpMapping
        {
            add => HookEndpointManager.Add<Delegates.LeftStickUpMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LeftStickUpMapping", false), value);
            remove => HookEndpointManager.Remove<Delegates.LeftStickUpMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LeftStickUpMapping", false), value);
        }

        public static event Delegates.LeftStickDownMapping_NormalArgs LeftStickDownMapping
        {
            add => HookEndpointManager.Add<Delegates.LeftStickDownMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LeftStickDownMapping", false), value);
            remove => HookEndpointManager.Remove<Delegates.LeftStickDownMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LeftStickDownMapping", false), value);
        }

        public static event Delegates.LeftStickUpMapping2_NormalArgs LeftStickUpMapping2
        {
            add => HookEndpointManager.Add<Delegates.LeftStickUpMapping2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LeftStickUpMapping2", false), value);
            remove => HookEndpointManager.Remove<Delegates.LeftStickUpMapping2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LeftStickUpMapping2", false), value);
        }

        public static event Delegates.LeftStickDownMapping2_NormalArgs LeftStickDownMapping2
        {
            add => HookEndpointManager.Add<Delegates.LeftStickDownMapping2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LeftStickDownMapping2", false), value);
            remove => HookEndpointManager.Remove<Delegates.LeftStickDownMapping2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LeftStickDownMapping2", false), value);
        }

        public static event Delegates.RightStickLeftMapping_NormalArgs RightStickLeftMapping
        {
            add => HookEndpointManager.Add<Delegates.RightStickLeftMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "RightStickLeftMapping", false), value);
            remove => HookEndpointManager.Remove<Delegates.RightStickLeftMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "RightStickLeftMapping", false), value);
        }

        public static event Delegates.RightStickRightMapping_NormalArgs RightStickRightMapping
        {
            add => HookEndpointManager.Add<Delegates.RightStickRightMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "RightStickRightMapping", false), value);
            remove => HookEndpointManager.Remove<Delegates.RightStickRightMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "RightStickRightMapping", false), value);
        }

        public static event Delegates.RightStickUpMapping_NormalArgs RightStickUpMapping
        {
            add => HookEndpointManager.Add<Delegates.RightStickUpMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "RightStickUpMapping", false), value);
            remove => HookEndpointManager.Remove<Delegates.RightStickUpMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "RightStickUpMapping", false), value);
        }

        public static event Delegates.RightStickDownMapping_NormalArgs RightStickDownMapping
        {
            add => HookEndpointManager.Add<Delegates.RightStickDownMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "RightStickDownMapping", false), value);
            remove => HookEndpointManager.Remove<Delegates.RightStickDownMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "RightStickDownMapping", false), value);
        }

        public static event Delegates.RightStickUpMapping2_NormalArgs RightStickUpMapping2
        {
            add => HookEndpointManager.Add<Delegates.RightStickUpMapping2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "RightStickUpMapping2", false), value);
            remove => HookEndpointManager.Remove<Delegates.RightStickUpMapping2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "RightStickUpMapping2", false), value);
        }

        public static event Delegates.RightStickDownMapping2_NormalArgs RightStickDownMapping2
        {
            add => HookEndpointManager.Add<Delegates.RightStickDownMapping2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "RightStickDownMapping2", false), value);
            remove => HookEndpointManager.Remove<Delegates.RightStickDownMapping2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "RightStickDownMapping2", false), value);
        }

        public static event Delegates.LeftTriggerMapping_NormalArgs LeftTriggerMapping
        {
            add => HookEndpointManager.Add<Delegates.LeftTriggerMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LeftTriggerMapping", false), value);
            remove => HookEndpointManager.Remove<Delegates.LeftTriggerMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "LeftTriggerMapping", false), value);
        }

        public static event Delegates.RightTriggerMapping_NormalArgs RightTriggerMapping
        {
            add => HookEndpointManager.Add<Delegates.RightTriggerMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "RightTriggerMapping", false), value);
            remove => HookEndpointManager.Remove<Delegates.RightTriggerMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "RightTriggerMapping", false), value);
        }

        public static event Delegates.DPadLeftMapping_NormalArgs DPadLeftMapping
        {
            add => HookEndpointManager.Add<Delegates.DPadLeftMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "DPadLeftMapping", false), value);
            remove => HookEndpointManager.Remove<Delegates.DPadLeftMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "DPadLeftMapping", false), value);
        }

        public static event Delegates.DPadRightMapping_NormalArgs DPadRightMapping
        {
            add => HookEndpointManager.Add<Delegates.DPadRightMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "DPadRightMapping", false), value);
            remove => HookEndpointManager.Remove<Delegates.DPadRightMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "DPadRightMapping", false), value);
        }

        public static event Delegates.DPadUpMapping_NormalArgs DPadUpMapping
        {
            add => HookEndpointManager.Add<Delegates.DPadUpMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "DPadUpMapping", false), value);
            remove => HookEndpointManager.Remove<Delegates.DPadUpMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "DPadUpMapping", false), value);
        }

        public static event Delegates.DPadDownMapping_NormalArgs DPadDownMapping
        {
            add => HookEndpointManager.Add<Delegates.DPadDownMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "DPadDownMapping", false), value);
            remove => HookEndpointManager.Remove<Delegates.DPadDownMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "DPadDownMapping", false), value);
        }

        public static event Delegates.DPadUpMapping2_NormalArgs DPadUpMapping2
        {
            add => HookEndpointManager.Add<Delegates.DPadUpMapping2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "DPadUpMapping2", false), value);
            remove => HookEndpointManager.Remove<Delegates.DPadUpMapping2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "DPadUpMapping2", false), value);
        }

        public static event Delegates.DPadDownMapping2_NormalArgs DPadDownMapping2
        {
            add => HookEndpointManager.Add<Delegates.DPadDownMapping2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "DPadDownMapping2", false), value);
            remove => HookEndpointManager.Remove<Delegates.DPadDownMapping2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDeviceProfile), "DPadDownMapping2", false), value);
        }
    }
}