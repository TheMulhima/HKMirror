using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for InputDeviceProfile class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnInputDeviceProfile
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_ProfileType()
        {
            if (!HookedList.Contains("get_ProfileType"))
            {
                HookedList.Add("get_ProfileType");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_ProfileType", true),
                    get_ProfileType);
            }
        }

        internal static event Delegates.get_ProfileType_BeforeArgs _beforeget_ProfileType;
        internal static event Delegates.get_ProfileType_AfterArgs _afterget_ProfileType;

        private static InControl.InputDeviceProfileType get_ProfileType(
            Func<InControl.InputDeviceProfile, InControl.InputDeviceProfileType> orig,
            InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_ProfileType @params = new()
            {
                self = self
            };
            if (_beforeget_ProfileType != null)
            {
                foreach (Delegates.get_ProfileType_BeforeArgs toInvoke in _beforeget_ProfileType.GetInvocationList())
                {
                    try
                    {
                        _beforeget_ProfileType?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ProfileType != null)
            {
                foreach (Delegates.get_ProfileType_AfterArgs toInvoke in _afterget_ProfileType.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_ProfileType.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_ProfileType()
        {
            if (!HookedList.Contains("set_ProfileType"))
            {
                HookedList.Add("set_ProfileType");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_ProfileType", true),
                    set_ProfileType);
            }
        }

        internal static event Delegates.set_ProfileType_BeforeArgs _beforeset_ProfileType;
        internal static event Delegates.set_ProfileType_AfterArgs _afterset_ProfileType;

        private static void set_ProfileType(Action<InControl.InputDeviceProfile, InControl.InputDeviceProfileType> orig,
            InControl.InputDeviceProfile self, InControl.InputDeviceProfileType value)
        {
            Delegates.Params_set_ProfileType @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_ProfileType != null)
            {
                foreach (Delegates.set_ProfileType_BeforeArgs toInvoke in _beforeset_ProfileType.GetInvocationList())
                {
                    try
                    {
                        _beforeset_ProfileType?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ProfileType != null)
            {
                foreach (Delegates.set_ProfileType_AfterArgs toInvoke in _afterset_ProfileType.GetInvocationList())
                {
                    try
                    {
                        _afterset_ProfileType.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_DeviceName()
        {
            if (!HookedList.Contains("get_DeviceName"))
            {
                HookedList.Add("get_DeviceName");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_DeviceName", true),
                    get_DeviceName);
            }
        }

        internal static event Delegates.get_DeviceName_BeforeArgs _beforeget_DeviceName;
        internal static event Delegates.get_DeviceName_AfterArgs _afterget_DeviceName;

        private static string get_DeviceName(Func<InControl.InputDeviceProfile, string> orig,
            InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_DeviceName @params = new()
            {
                self = self
            };
            if (_beforeget_DeviceName != null)
            {
                foreach (Delegates.get_DeviceName_BeforeArgs toInvoke in _beforeget_DeviceName.GetInvocationList())
                {
                    try
                    {
                        _beforeget_DeviceName?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DeviceName != null)
            {
                foreach (Delegates.get_DeviceName_AfterArgs toInvoke in _afterget_DeviceName.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_DeviceName.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_DeviceName()
        {
            if (!HookedList.Contains("set_DeviceName"))
            {
                HookedList.Add("set_DeviceName");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_DeviceName", true),
                    set_DeviceName);
            }
        }

        internal static event Delegates.set_DeviceName_BeforeArgs _beforeset_DeviceName;
        internal static event Delegates.set_DeviceName_AfterArgs _afterset_DeviceName;

        private static void set_DeviceName(Action<InControl.InputDeviceProfile, string> orig,
            InControl.InputDeviceProfile self, string value)
        {
            Delegates.Params_set_DeviceName @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_DeviceName != null)
            {
                foreach (Delegates.set_DeviceName_BeforeArgs toInvoke in _beforeset_DeviceName.GetInvocationList())
                {
                    try
                    {
                        _beforeset_DeviceName?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_DeviceName != null)
            {
                foreach (Delegates.set_DeviceName_AfterArgs toInvoke in _afterset_DeviceName.GetInvocationList())
                {
                    try
                    {
                        _afterset_DeviceName.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_DeviceNotes()
        {
            if (!HookedList.Contains("get_DeviceNotes"))
            {
                HookedList.Add("get_DeviceNotes");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_DeviceNotes", true),
                    get_DeviceNotes);
            }
        }

        internal static event Delegates.get_DeviceNotes_BeforeArgs _beforeget_DeviceNotes;
        internal static event Delegates.get_DeviceNotes_AfterArgs _afterget_DeviceNotes;

        private static string get_DeviceNotes(Func<InControl.InputDeviceProfile, string> orig,
            InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_DeviceNotes @params = new()
            {
                self = self
            };
            if (_beforeget_DeviceNotes != null)
            {
                foreach (Delegates.get_DeviceNotes_BeforeArgs toInvoke in _beforeget_DeviceNotes.GetInvocationList())
                {
                    try
                    {
                        _beforeget_DeviceNotes?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DeviceNotes != null)
            {
                foreach (Delegates.get_DeviceNotes_AfterArgs toInvoke in _afterget_DeviceNotes.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_DeviceNotes.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_DeviceNotes()
        {
            if (!HookedList.Contains("set_DeviceNotes"))
            {
                HookedList.Add("set_DeviceNotes");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_DeviceNotes", true),
                    set_DeviceNotes);
            }
        }

        internal static event Delegates.set_DeviceNotes_BeforeArgs _beforeset_DeviceNotes;
        internal static event Delegates.set_DeviceNotes_AfterArgs _afterset_DeviceNotes;

        private static void set_DeviceNotes(Action<InControl.InputDeviceProfile, string> orig,
            InControl.InputDeviceProfile self, string value)
        {
            Delegates.Params_set_DeviceNotes @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_DeviceNotes != null)
            {
                foreach (Delegates.set_DeviceNotes_BeforeArgs toInvoke in _beforeset_DeviceNotes.GetInvocationList())
                {
                    try
                    {
                        _beforeset_DeviceNotes?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_DeviceNotes != null)
            {
                foreach (Delegates.set_DeviceNotes_AfterArgs toInvoke in _afterset_DeviceNotes.GetInvocationList())
                {
                    try
                    {
                        _afterset_DeviceNotes.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_DeviceClass()
        {
            if (!HookedList.Contains("get_DeviceClass"))
            {
                HookedList.Add("get_DeviceClass");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_DeviceClass", true),
                    get_DeviceClass);
            }
        }

        internal static event Delegates.get_DeviceClass_BeforeArgs _beforeget_DeviceClass;
        internal static event Delegates.get_DeviceClass_AfterArgs _afterget_DeviceClass;

        private static InControl.InputDeviceClass get_DeviceClass(
            Func<InControl.InputDeviceProfile, InControl.InputDeviceClass> orig, InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_DeviceClass @params = new()
            {
                self = self
            };
            if (_beforeget_DeviceClass != null)
            {
                foreach (Delegates.get_DeviceClass_BeforeArgs toInvoke in _beforeget_DeviceClass.GetInvocationList())
                {
                    try
                    {
                        _beforeget_DeviceClass?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DeviceClass != null)
            {
                foreach (Delegates.get_DeviceClass_AfterArgs toInvoke in _afterget_DeviceClass.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_DeviceClass.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_DeviceClass()
        {
            if (!HookedList.Contains("set_DeviceClass"))
            {
                HookedList.Add("set_DeviceClass");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_DeviceClass", true),
                    set_DeviceClass);
            }
        }

        internal static event Delegates.set_DeviceClass_BeforeArgs _beforeset_DeviceClass;
        internal static event Delegates.set_DeviceClass_AfterArgs _afterset_DeviceClass;

        private static void set_DeviceClass(Action<InControl.InputDeviceProfile, InControl.InputDeviceClass> orig,
            InControl.InputDeviceProfile self, InControl.InputDeviceClass value)
        {
            Delegates.Params_set_DeviceClass @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_DeviceClass != null)
            {
                foreach (Delegates.set_DeviceClass_BeforeArgs toInvoke in _beforeset_DeviceClass.GetInvocationList())
                {
                    try
                    {
                        _beforeset_DeviceClass?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_DeviceClass != null)
            {
                foreach (Delegates.set_DeviceClass_AfterArgs toInvoke in _afterset_DeviceClass.GetInvocationList())
                {
                    try
                    {
                        _afterset_DeviceClass.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_DeviceStyle()
        {
            if (!HookedList.Contains("get_DeviceStyle"))
            {
                HookedList.Add("get_DeviceStyle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_DeviceStyle", true),
                    get_DeviceStyle);
            }
        }

        internal static event Delegates.get_DeviceStyle_BeforeArgs _beforeget_DeviceStyle;
        internal static event Delegates.get_DeviceStyle_AfterArgs _afterget_DeviceStyle;

        private static InControl.InputDeviceStyle get_DeviceStyle(
            Func<InControl.InputDeviceProfile, InControl.InputDeviceStyle> orig, InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_DeviceStyle @params = new()
            {
                self = self
            };
            if (_beforeget_DeviceStyle != null)
            {
                foreach (Delegates.get_DeviceStyle_BeforeArgs toInvoke in _beforeget_DeviceStyle.GetInvocationList())
                {
                    try
                    {
                        _beforeget_DeviceStyle?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DeviceStyle != null)
            {
                foreach (Delegates.get_DeviceStyle_AfterArgs toInvoke in _afterget_DeviceStyle.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_DeviceStyle.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_DeviceStyle()
        {
            if (!HookedList.Contains("set_DeviceStyle"))
            {
                HookedList.Add("set_DeviceStyle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_DeviceStyle", true),
                    set_DeviceStyle);
            }
        }

        internal static event Delegates.set_DeviceStyle_BeforeArgs _beforeset_DeviceStyle;
        internal static event Delegates.set_DeviceStyle_AfterArgs _afterset_DeviceStyle;

        private static void set_DeviceStyle(Action<InControl.InputDeviceProfile, InControl.InputDeviceStyle> orig,
            InControl.InputDeviceProfile self, InControl.InputDeviceStyle value)
        {
            Delegates.Params_set_DeviceStyle @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_DeviceStyle != null)
            {
                foreach (Delegates.set_DeviceStyle_BeforeArgs toInvoke in _beforeset_DeviceStyle.GetInvocationList())
                {
                    try
                    {
                        _beforeset_DeviceStyle?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_DeviceStyle != null)
            {
                foreach (Delegates.set_DeviceStyle_AfterArgs toInvoke in _afterset_DeviceStyle.GetInvocationList())
                {
                    try
                    {
                        _afterset_DeviceStyle.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_Sensitivity()
        {
            if (!HookedList.Contains("get_Sensitivity"))
            {
                HookedList.Add("get_Sensitivity");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_Sensitivity", true),
                    get_Sensitivity);
            }
        }

        internal static event Delegates.get_Sensitivity_BeforeArgs _beforeget_Sensitivity;
        internal static event Delegates.get_Sensitivity_AfterArgs _afterget_Sensitivity;

        private static float get_Sensitivity(Func<InControl.InputDeviceProfile, float> orig,
            InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_Sensitivity @params = new()
            {
                self = self
            };
            if (_beforeget_Sensitivity != null)
            {
                foreach (Delegates.get_Sensitivity_BeforeArgs toInvoke in _beforeget_Sensitivity.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Sensitivity?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Sensitivity != null)
            {
                foreach (Delegates.get_Sensitivity_AfterArgs toInvoke in _afterget_Sensitivity.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Sensitivity.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_Sensitivity()
        {
            if (!HookedList.Contains("set_Sensitivity"))
            {
                HookedList.Add("set_Sensitivity");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_Sensitivity", true),
                    set_Sensitivity);
            }
        }

        internal static event Delegates.set_Sensitivity_BeforeArgs _beforeset_Sensitivity;
        internal static event Delegates.set_Sensitivity_AfterArgs _afterset_Sensitivity;

        private static void set_Sensitivity(Action<InControl.InputDeviceProfile, float> orig,
            InControl.InputDeviceProfile self, float value)
        {
            Delegates.Params_set_Sensitivity @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Sensitivity != null)
            {
                foreach (Delegates.set_Sensitivity_BeforeArgs toInvoke in _beforeset_Sensitivity.GetInvocationList())
                {
                    try
                    {
                        _beforeset_Sensitivity?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Sensitivity != null)
            {
                foreach (Delegates.set_Sensitivity_AfterArgs toInvoke in _afterset_Sensitivity.GetInvocationList())
                {
                    try
                    {
                        _afterset_Sensitivity.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_LowerDeadZone()
        {
            if (!HookedList.Contains("get_LowerDeadZone"))
            {
                HookedList.Add("get_LowerDeadZone");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_LowerDeadZone", true),
                    get_LowerDeadZone);
            }
        }

        internal static event Delegates.get_LowerDeadZone_BeforeArgs _beforeget_LowerDeadZone;
        internal static event Delegates.get_LowerDeadZone_AfterArgs _afterget_LowerDeadZone;

        private static float get_LowerDeadZone(Func<InControl.InputDeviceProfile, float> orig,
            InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_LowerDeadZone @params = new()
            {
                self = self
            };
            if (_beforeget_LowerDeadZone != null)
            {
                foreach (Delegates.get_LowerDeadZone_BeforeArgs toInvoke in
                         _beforeget_LowerDeadZone.GetInvocationList())
                {
                    try
                    {
                        _beforeget_LowerDeadZone?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LowerDeadZone != null)
            {
                foreach (Delegates.get_LowerDeadZone_AfterArgs toInvoke in _afterget_LowerDeadZone.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_LowerDeadZone.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_LowerDeadZone()
        {
            if (!HookedList.Contains("set_LowerDeadZone"))
            {
                HookedList.Add("set_LowerDeadZone");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_LowerDeadZone", true),
                    set_LowerDeadZone);
            }
        }

        internal static event Delegates.set_LowerDeadZone_BeforeArgs _beforeset_LowerDeadZone;
        internal static event Delegates.set_LowerDeadZone_AfterArgs _afterset_LowerDeadZone;

        private static void set_LowerDeadZone(Action<InControl.InputDeviceProfile, float> orig,
            InControl.InputDeviceProfile self, float value)
        {
            Delegates.Params_set_LowerDeadZone @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_LowerDeadZone != null)
            {
                foreach (Delegates.set_LowerDeadZone_BeforeArgs toInvoke in
                         _beforeset_LowerDeadZone.GetInvocationList())
                {
                    try
                    {
                        _beforeset_LowerDeadZone?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_LowerDeadZone != null)
            {
                foreach (Delegates.set_LowerDeadZone_AfterArgs toInvoke in _afterset_LowerDeadZone.GetInvocationList())
                {
                    try
                    {
                        _afterset_LowerDeadZone.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_UpperDeadZone()
        {
            if (!HookedList.Contains("get_UpperDeadZone"))
            {
                HookedList.Add("get_UpperDeadZone");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_UpperDeadZone", true),
                    get_UpperDeadZone);
            }
        }

        internal static event Delegates.get_UpperDeadZone_BeforeArgs _beforeget_UpperDeadZone;
        internal static event Delegates.get_UpperDeadZone_AfterArgs _afterget_UpperDeadZone;

        private static float get_UpperDeadZone(Func<InControl.InputDeviceProfile, float> orig,
            InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_UpperDeadZone @params = new()
            {
                self = self
            };
            if (_beforeget_UpperDeadZone != null)
            {
                foreach (Delegates.get_UpperDeadZone_BeforeArgs toInvoke in
                         _beforeget_UpperDeadZone.GetInvocationList())
                {
                    try
                    {
                        _beforeget_UpperDeadZone?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_UpperDeadZone != null)
            {
                foreach (Delegates.get_UpperDeadZone_AfterArgs toInvoke in _afterget_UpperDeadZone.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_UpperDeadZone.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_UpperDeadZone()
        {
            if (!HookedList.Contains("set_UpperDeadZone"))
            {
                HookedList.Add("set_UpperDeadZone");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_UpperDeadZone", true),
                    set_UpperDeadZone);
            }
        }

        internal static event Delegates.set_UpperDeadZone_BeforeArgs _beforeset_UpperDeadZone;
        internal static event Delegates.set_UpperDeadZone_AfterArgs _afterset_UpperDeadZone;

        private static void set_UpperDeadZone(Action<InControl.InputDeviceProfile, float> orig,
            InControl.InputDeviceProfile self, float value)
        {
            Delegates.Params_set_UpperDeadZone @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_UpperDeadZone != null)
            {
                foreach (Delegates.set_UpperDeadZone_BeforeArgs toInvoke in
                         _beforeset_UpperDeadZone.GetInvocationList())
                {
                    try
                    {
                        _beforeset_UpperDeadZone?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_UpperDeadZone != null)
            {
                foreach (Delegates.set_UpperDeadZone_AfterArgs toInvoke in _afterset_UpperDeadZone.GetInvocationList())
                {
                    try
                    {
                        _afterset_UpperDeadZone.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_AnalogMappings()
        {
            if (!HookedList.Contains("get_AnalogMappings"))
            {
                HookedList.Add("get_AnalogMappings");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_AnalogMappings", true),
                    get_AnalogMappings);
            }
        }

        internal static event Delegates.get_AnalogMappings_BeforeArgs _beforeget_AnalogMappings;
        internal static event Delegates.get_AnalogMappings_AfterArgs _afterget_AnalogMappings;

        private static InControl.InputControlMapping[] get_AnalogMappings(
            Func<InControl.InputDeviceProfile, InControl.InputControlMapping[]> orig, InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_AnalogMappings @params = new()
            {
                self = self
            };
            if (_beforeget_AnalogMappings != null)
            {
                foreach (Delegates.get_AnalogMappings_BeforeArgs toInvoke in
                         _beforeget_AnalogMappings.GetInvocationList())
                {
                    try
                    {
                        _beforeget_AnalogMappings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AnalogMappings != null)
            {
                foreach (Delegates.get_AnalogMappings_AfterArgs toInvoke in
                         _afterget_AnalogMappings.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_AnalogMappings.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_AnalogMappings()
        {
            if (!HookedList.Contains("set_AnalogMappings"))
            {
                HookedList.Add("set_AnalogMappings");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_AnalogMappings", true),
                    set_AnalogMappings);
            }
        }

        internal static event Delegates.set_AnalogMappings_BeforeArgs _beforeset_AnalogMappings;
        internal static event Delegates.set_AnalogMappings_AfterArgs _afterset_AnalogMappings;

        private static void set_AnalogMappings(
            Action<InControl.InputDeviceProfile, InControl.InputControlMapping[]> orig,
            InControl.InputDeviceProfile self, InControl.InputControlMapping[] value)
        {
            Delegates.Params_set_AnalogMappings @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_AnalogMappings != null)
            {
                foreach (Delegates.set_AnalogMappings_BeforeArgs toInvoke in
                         _beforeset_AnalogMappings.GetInvocationList())
                {
                    try
                    {
                        _beforeset_AnalogMappings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_AnalogMappings != null)
            {
                foreach (Delegates.set_AnalogMappings_AfterArgs toInvoke in
                         _afterset_AnalogMappings.GetInvocationList())
                {
                    try
                    {
                        _afterset_AnalogMappings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_ButtonMappings()
        {
            if (!HookedList.Contains("get_ButtonMappings"))
            {
                HookedList.Add("get_ButtonMappings");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_ButtonMappings", true),
                    get_ButtonMappings);
            }
        }

        internal static event Delegates.get_ButtonMappings_BeforeArgs _beforeget_ButtonMappings;
        internal static event Delegates.get_ButtonMappings_AfterArgs _afterget_ButtonMappings;

        private static InControl.InputControlMapping[] get_ButtonMappings(
            Func<InControl.InputDeviceProfile, InControl.InputControlMapping[]> orig, InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_ButtonMappings @params = new()
            {
                self = self
            };
            if (_beforeget_ButtonMappings != null)
            {
                foreach (Delegates.get_ButtonMappings_BeforeArgs toInvoke in
                         _beforeget_ButtonMappings.GetInvocationList())
                {
                    try
                    {
                        _beforeget_ButtonMappings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ButtonMappings != null)
            {
                foreach (Delegates.get_ButtonMappings_AfterArgs toInvoke in
                         _afterget_ButtonMappings.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_ButtonMappings.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_ButtonMappings()
        {
            if (!HookedList.Contains("set_ButtonMappings"))
            {
                HookedList.Add("set_ButtonMappings");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_ButtonMappings", true),
                    set_ButtonMappings);
            }
        }

        internal static event Delegates.set_ButtonMappings_BeforeArgs _beforeset_ButtonMappings;
        internal static event Delegates.set_ButtonMappings_AfterArgs _afterset_ButtonMappings;

        private static void set_ButtonMappings(
            Action<InControl.InputDeviceProfile, InControl.InputControlMapping[]> orig,
            InControl.InputDeviceProfile self, InControl.InputControlMapping[] value)
        {
            Delegates.Params_set_ButtonMappings @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_ButtonMappings != null)
            {
                foreach (Delegates.set_ButtonMappings_BeforeArgs toInvoke in
                         _beforeset_ButtonMappings.GetInvocationList())
                {
                    try
                    {
                        _beforeset_ButtonMappings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ButtonMappings != null)
            {
                foreach (Delegates.set_ButtonMappings_AfterArgs toInvoke in
                         _afterset_ButtonMappings.GetInvocationList())
                {
                    try
                    {
                        _afterset_ButtonMappings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_IncludePlatforms()
        {
            if (!HookedList.Contains("get_IncludePlatforms"))
            {
                HookedList.Add("get_IncludePlatforms");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_IncludePlatforms", true),
                    get_IncludePlatforms);
            }
        }

        internal static event Delegates.get_IncludePlatforms_BeforeArgs _beforeget_IncludePlatforms;
        internal static event Delegates.get_IncludePlatforms_AfterArgs _afterget_IncludePlatforms;

        private static string[] get_IncludePlatforms(Func<InControl.InputDeviceProfile, string[]> orig,
            InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_IncludePlatforms @params = new()
            {
                self = self
            };
            if (_beforeget_IncludePlatforms != null)
            {
                foreach (Delegates.get_IncludePlatforms_BeforeArgs toInvoke in _beforeget_IncludePlatforms
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_IncludePlatforms?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IncludePlatforms != null)
            {
                foreach (Delegates.get_IncludePlatforms_AfterArgs toInvoke in _afterget_IncludePlatforms
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_IncludePlatforms.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_IncludePlatforms()
        {
            if (!HookedList.Contains("set_IncludePlatforms"))
            {
                HookedList.Add("set_IncludePlatforms");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_IncludePlatforms", true),
                    set_IncludePlatforms);
            }
        }

        internal static event Delegates.set_IncludePlatforms_BeforeArgs _beforeset_IncludePlatforms;
        internal static event Delegates.set_IncludePlatforms_AfterArgs _afterset_IncludePlatforms;

        private static void set_IncludePlatforms(Action<InControl.InputDeviceProfile, string[]> orig,
            InControl.InputDeviceProfile self, string[] value)
        {
            Delegates.Params_set_IncludePlatforms @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_IncludePlatforms != null)
            {
                foreach (Delegates.set_IncludePlatforms_BeforeArgs toInvoke in _beforeset_IncludePlatforms
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeset_IncludePlatforms?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_IncludePlatforms != null)
            {
                foreach (Delegates.set_IncludePlatforms_AfterArgs toInvoke in _afterset_IncludePlatforms
                             .GetInvocationList())
                {
                    try
                    {
                        _afterset_IncludePlatforms.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_ExcludePlatforms()
        {
            if (!HookedList.Contains("get_ExcludePlatforms"))
            {
                HookedList.Add("get_ExcludePlatforms");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_ExcludePlatforms", true),
                    get_ExcludePlatforms);
            }
        }

        internal static event Delegates.get_ExcludePlatforms_BeforeArgs _beforeget_ExcludePlatforms;
        internal static event Delegates.get_ExcludePlatforms_AfterArgs _afterget_ExcludePlatforms;

        private static string[] get_ExcludePlatforms(Func<InControl.InputDeviceProfile, string[]> orig,
            InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_ExcludePlatforms @params = new()
            {
                self = self
            };
            if (_beforeget_ExcludePlatforms != null)
            {
                foreach (Delegates.get_ExcludePlatforms_BeforeArgs toInvoke in _beforeget_ExcludePlatforms
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_ExcludePlatforms?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ExcludePlatforms != null)
            {
                foreach (Delegates.get_ExcludePlatforms_AfterArgs toInvoke in _afterget_ExcludePlatforms
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_ExcludePlatforms.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_ExcludePlatforms()
        {
            if (!HookedList.Contains("set_ExcludePlatforms"))
            {
                HookedList.Add("set_ExcludePlatforms");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_ExcludePlatforms", true),
                    set_ExcludePlatforms);
            }
        }

        internal static event Delegates.set_ExcludePlatforms_BeforeArgs _beforeset_ExcludePlatforms;
        internal static event Delegates.set_ExcludePlatforms_AfterArgs _afterset_ExcludePlatforms;

        private static void set_ExcludePlatforms(Action<InControl.InputDeviceProfile, string[]> orig,
            InControl.InputDeviceProfile self, string[] value)
        {
            Delegates.Params_set_ExcludePlatforms @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_ExcludePlatforms != null)
            {
                foreach (Delegates.set_ExcludePlatforms_BeforeArgs toInvoke in _beforeset_ExcludePlatforms
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeset_ExcludePlatforms?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ExcludePlatforms != null)
            {
                foreach (Delegates.set_ExcludePlatforms_AfterArgs toInvoke in _afterset_ExcludePlatforms
                             .GetInvocationList())
                {
                    try
                    {
                        _afterset_ExcludePlatforms.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_MinSystemBuildNumber()
        {
            if (!HookedList.Contains("get_MinSystemBuildNumber"))
            {
                HookedList.Add("get_MinSystemBuildNumber");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_MinSystemBuildNumber",
                        true), get_MinSystemBuildNumber);
            }
        }

        internal static event Delegates.get_MinSystemBuildNumber_BeforeArgs _beforeget_MinSystemBuildNumber;
        internal static event Delegates.get_MinSystemBuildNumber_AfterArgs _afterget_MinSystemBuildNumber;

        private static int get_MinSystemBuildNumber(Func<InControl.InputDeviceProfile, int> orig,
            InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_MinSystemBuildNumber @params = new()
            {
                self = self
            };
            if (_beforeget_MinSystemBuildNumber != null)
            {
                foreach (Delegates.get_MinSystemBuildNumber_BeforeArgs toInvoke in _beforeget_MinSystemBuildNumber
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_MinSystemBuildNumber?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_MinSystemBuildNumber != null)
            {
                foreach (Delegates.get_MinSystemBuildNumber_AfterArgs toInvoke in _afterget_MinSystemBuildNumber
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_MinSystemBuildNumber.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_MinSystemBuildNumber()
        {
            if (!HookedList.Contains("set_MinSystemBuildNumber"))
            {
                HookedList.Add("set_MinSystemBuildNumber");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_MinSystemBuildNumber",
                        true), set_MinSystemBuildNumber);
            }
        }

        internal static event Delegates.set_MinSystemBuildNumber_BeforeArgs _beforeset_MinSystemBuildNumber;
        internal static event Delegates.set_MinSystemBuildNumber_AfterArgs _afterset_MinSystemBuildNumber;

        private static void set_MinSystemBuildNumber(Action<InControl.InputDeviceProfile, int> orig,
            InControl.InputDeviceProfile self, int value)
        {
            Delegates.Params_set_MinSystemBuildNumber @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_MinSystemBuildNumber != null)
            {
                foreach (Delegates.set_MinSystemBuildNumber_BeforeArgs toInvoke in _beforeset_MinSystemBuildNumber
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeset_MinSystemBuildNumber?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_MinSystemBuildNumber != null)
            {
                foreach (Delegates.set_MinSystemBuildNumber_AfterArgs toInvoke in _afterset_MinSystemBuildNumber
                             .GetInvocationList())
                {
                    try
                    {
                        _afterset_MinSystemBuildNumber.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_MaxSystemBuildNumber()
        {
            if (!HookedList.Contains("get_MaxSystemBuildNumber"))
            {
                HookedList.Add("get_MaxSystemBuildNumber");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_MaxSystemBuildNumber",
                        true), get_MaxSystemBuildNumber);
            }
        }

        internal static event Delegates.get_MaxSystemBuildNumber_BeforeArgs _beforeget_MaxSystemBuildNumber;
        internal static event Delegates.get_MaxSystemBuildNumber_AfterArgs _afterget_MaxSystemBuildNumber;

        private static int get_MaxSystemBuildNumber(Func<InControl.InputDeviceProfile, int> orig,
            InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_MaxSystemBuildNumber @params = new()
            {
                self = self
            };
            if (_beforeget_MaxSystemBuildNumber != null)
            {
                foreach (Delegates.get_MaxSystemBuildNumber_BeforeArgs toInvoke in _beforeget_MaxSystemBuildNumber
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_MaxSystemBuildNumber?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_MaxSystemBuildNumber != null)
            {
                foreach (Delegates.get_MaxSystemBuildNumber_AfterArgs toInvoke in _afterget_MaxSystemBuildNumber
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_MaxSystemBuildNumber.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_MaxSystemBuildNumber()
        {
            if (!HookedList.Contains("set_MaxSystemBuildNumber"))
            {
                HookedList.Add("set_MaxSystemBuildNumber");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_MaxSystemBuildNumber",
                        true), set_MaxSystemBuildNumber);
            }
        }

        internal static event Delegates.set_MaxSystemBuildNumber_BeforeArgs _beforeset_MaxSystemBuildNumber;
        internal static event Delegates.set_MaxSystemBuildNumber_AfterArgs _afterset_MaxSystemBuildNumber;

        private static void set_MaxSystemBuildNumber(Action<InControl.InputDeviceProfile, int> orig,
            InControl.InputDeviceProfile self, int value)
        {
            Delegates.Params_set_MaxSystemBuildNumber @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_MaxSystemBuildNumber != null)
            {
                foreach (Delegates.set_MaxSystemBuildNumber_BeforeArgs toInvoke in _beforeset_MaxSystemBuildNumber
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeset_MaxSystemBuildNumber?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_MaxSystemBuildNumber != null)
            {
                foreach (Delegates.set_MaxSystemBuildNumber_AfterArgs toInvoke in _afterset_MaxSystemBuildNumber
                             .GetInvocationList())
                {
                    try
                    {
                        _afterset_MaxSystemBuildNumber.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_MinUnityVersion()
        {
            if (!HookedList.Contains("get_MinUnityVersion"))
            {
                HookedList.Add("get_MinUnityVersion");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_MinUnityVersion", true),
                    get_MinUnityVersion);
            }
        }

        internal static event Delegates.get_MinUnityVersion_BeforeArgs _beforeget_MinUnityVersion;
        internal static event Delegates.get_MinUnityVersion_AfterArgs _afterget_MinUnityVersion;

        private static InControl.VersionInfo get_MinUnityVersion(
            Func<InControl.InputDeviceProfile, InControl.VersionInfo> orig, InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_MinUnityVersion @params = new()
            {
                self = self
            };
            if (_beforeget_MinUnityVersion != null)
            {
                foreach (Delegates.get_MinUnityVersion_BeforeArgs toInvoke in _beforeget_MinUnityVersion
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_MinUnityVersion?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_MinUnityVersion != null)
            {
                foreach (Delegates.get_MinUnityVersion_AfterArgs toInvoke in
                         _afterget_MinUnityVersion.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_MinUnityVersion.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_MinUnityVersion()
        {
            if (!HookedList.Contains("set_MinUnityVersion"))
            {
                HookedList.Add("set_MinUnityVersion");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_MinUnityVersion", true),
                    set_MinUnityVersion);
            }
        }

        internal static event Delegates.set_MinUnityVersion_BeforeArgs _beforeset_MinUnityVersion;
        internal static event Delegates.set_MinUnityVersion_AfterArgs _afterset_MinUnityVersion;

        private static void set_MinUnityVersion(Action<InControl.InputDeviceProfile, InControl.VersionInfo> orig,
            InControl.InputDeviceProfile self, InControl.VersionInfo value)
        {
            Delegates.Params_set_MinUnityVersion @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_MinUnityVersion != null)
            {
                foreach (Delegates.set_MinUnityVersion_BeforeArgs toInvoke in _beforeset_MinUnityVersion
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeset_MinUnityVersion?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_MinUnityVersion != null)
            {
                foreach (Delegates.set_MinUnityVersion_AfterArgs toInvoke in
                         _afterset_MinUnityVersion.GetInvocationList())
                {
                    try
                    {
                        _afterset_MinUnityVersion.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_MaxUnityVersion()
        {
            if (!HookedList.Contains("get_MaxUnityVersion"))
            {
                HookedList.Add("get_MaxUnityVersion");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_MaxUnityVersion", true),
                    get_MaxUnityVersion);
            }
        }

        internal static event Delegates.get_MaxUnityVersion_BeforeArgs _beforeget_MaxUnityVersion;
        internal static event Delegates.get_MaxUnityVersion_AfterArgs _afterget_MaxUnityVersion;

        private static InControl.VersionInfo get_MaxUnityVersion(
            Func<InControl.InputDeviceProfile, InControl.VersionInfo> orig, InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_MaxUnityVersion @params = new()
            {
                self = self
            };
            if (_beforeget_MaxUnityVersion != null)
            {
                foreach (Delegates.get_MaxUnityVersion_BeforeArgs toInvoke in _beforeget_MaxUnityVersion
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_MaxUnityVersion?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_MaxUnityVersion != null)
            {
                foreach (Delegates.get_MaxUnityVersion_AfterArgs toInvoke in
                         _afterget_MaxUnityVersion.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_MaxUnityVersion.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_MaxUnityVersion()
        {
            if (!HookedList.Contains("set_MaxUnityVersion"))
            {
                HookedList.Add("set_MaxUnityVersion");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_MaxUnityVersion", true),
                    set_MaxUnityVersion);
            }
        }

        internal static event Delegates.set_MaxUnityVersion_BeforeArgs _beforeset_MaxUnityVersion;
        internal static event Delegates.set_MaxUnityVersion_AfterArgs _afterset_MaxUnityVersion;

        private static void set_MaxUnityVersion(Action<InControl.InputDeviceProfile, InControl.VersionInfo> orig,
            InControl.InputDeviceProfile self, InControl.VersionInfo value)
        {
            Delegates.Params_set_MaxUnityVersion @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_MaxUnityVersion != null)
            {
                foreach (Delegates.set_MaxUnityVersion_BeforeArgs toInvoke in _beforeset_MaxUnityVersion
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeset_MaxUnityVersion?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_MaxUnityVersion != null)
            {
                foreach (Delegates.set_MaxUnityVersion_AfterArgs toInvoke in
                         _afterset_MaxUnityVersion.GetInvocationList())
                {
                    try
                    {
                        _afterset_MaxUnityVersion.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_Matchers()
        {
            if (!HookedList.Contains("get_Matchers"))
            {
                HookedList.Add("get_Matchers");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_Matchers", true),
                    get_Matchers);
            }
        }

        internal static event Delegates.get_Matchers_BeforeArgs _beforeget_Matchers;
        internal static event Delegates.get_Matchers_AfterArgs _afterget_Matchers;

        private static InControl.InputDeviceMatcher[] get_Matchers(
            Func<InControl.InputDeviceProfile, InControl.InputDeviceMatcher[]> orig, InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_Matchers @params = new()
            {
                self = self
            };
            if (_beforeget_Matchers != null)
            {
                foreach (Delegates.get_Matchers_BeforeArgs toInvoke in _beforeget_Matchers.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Matchers?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Matchers != null)
            {
                foreach (Delegates.get_Matchers_AfterArgs toInvoke in _afterget_Matchers.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Matchers.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_Matchers()
        {
            if (!HookedList.Contains("set_Matchers"))
            {
                HookedList.Add("set_Matchers");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_Matchers", true),
                    set_Matchers);
            }
        }

        internal static event Delegates.set_Matchers_BeforeArgs _beforeset_Matchers;
        internal static event Delegates.set_Matchers_AfterArgs _afterset_Matchers;

        private static void set_Matchers(Action<InControl.InputDeviceProfile, InControl.InputDeviceMatcher[]> orig,
            InControl.InputDeviceProfile self, InControl.InputDeviceMatcher[] value)
        {
            Delegates.Params_set_Matchers @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Matchers != null)
            {
                foreach (Delegates.set_Matchers_BeforeArgs toInvoke in _beforeset_Matchers.GetInvocationList())
                {
                    try
                    {
                        _beforeset_Matchers?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Matchers != null)
            {
                foreach (Delegates.set_Matchers_AfterArgs toInvoke in _afterset_Matchers.GetInvocationList())
                {
                    try
                    {
                        _afterset_Matchers.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_LastResortMatchers()
        {
            if (!HookedList.Contains("get_LastResortMatchers"))
            {
                HookedList.Add("get_LastResortMatchers");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_LastResortMatchers",
                        true), get_LastResortMatchers);
            }
        }

        internal static event Delegates.get_LastResortMatchers_BeforeArgs _beforeget_LastResortMatchers;
        internal static event Delegates.get_LastResortMatchers_AfterArgs _afterget_LastResortMatchers;

        private static InControl.InputDeviceMatcher[] get_LastResortMatchers(
            Func<InControl.InputDeviceProfile, InControl.InputDeviceMatcher[]> orig, InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_LastResortMatchers @params = new()
            {
                self = self
            };
            if (_beforeget_LastResortMatchers != null)
            {
                foreach (Delegates.get_LastResortMatchers_BeforeArgs toInvoke in _beforeget_LastResortMatchers
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_LastResortMatchers?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LastResortMatchers != null)
            {
                foreach (Delegates.get_LastResortMatchers_AfterArgs toInvoke in _afterget_LastResortMatchers
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_LastResortMatchers.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_LastResortMatchers()
        {
            if (!HookedList.Contains("set_LastResortMatchers"))
            {
                HookedList.Add("set_LastResortMatchers");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_LastResortMatchers",
                        true), set_LastResortMatchers);
            }
        }

        internal static event Delegates.set_LastResortMatchers_BeforeArgs _beforeset_LastResortMatchers;
        internal static event Delegates.set_LastResortMatchers_AfterArgs _afterset_LastResortMatchers;

        private static void set_LastResortMatchers(
            Action<InControl.InputDeviceProfile, InControl.InputDeviceMatcher[]> orig,
            InControl.InputDeviceProfile self, InControl.InputDeviceMatcher[] value)
        {
            Delegates.Params_set_LastResortMatchers @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_LastResortMatchers != null)
            {
                foreach (Delegates.set_LastResortMatchers_BeforeArgs toInvoke in _beforeset_LastResortMatchers
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeset_LastResortMatchers?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_LastResortMatchers != null)
            {
                foreach (Delegates.set_LastResortMatchers_AfterArgs toInvoke in _afterset_LastResortMatchers
                             .GetInvocationList())
                {
                    try
                    {
                        _afterset_LastResortMatchers.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookCreateInstanceOfType_Type()
        {
            if (!HookedList.Contains("CreateInstanceOfType_Type"))
            {
                HookedList.Add("CreateInstanceOfType_Type");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "CreateInstanceOfType_Type",
                        false), CreateInstanceOfType_Type);
            }
        }

        internal static event Delegates.CreateInstanceOfType_Type_BeforeArgs _beforeCreateInstanceOfType_Type;
        internal static event Delegates.CreateInstanceOfType_Type_AfterArgs _afterCreateInstanceOfType_Type;

        private static InControl.InputDeviceProfile CreateInstanceOfType_Type(
            Func<System.Type, InControl.InputDeviceProfile> orig, System.Type type)
        {
            Delegates.Params_CreateInstanceOfType_Type @params = new()
            {
                type = type
            };
            if (_beforeCreateInstanceOfType_Type != null)
            {
                foreach (Delegates.CreateInstanceOfType_Type_BeforeArgs toInvoke in _beforeCreateInstanceOfType_Type
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeCreateInstanceOfType_Type?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            type = @params.type;
            var retVal = orig(type);
            if (_afterCreateInstanceOfType_Type != null)
            {
                foreach (Delegates.CreateInstanceOfType_Type_AfterArgs toInvoke in _afterCreateInstanceOfType_Type
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterCreateInstanceOfType_Type.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookCreateInstanceOfType_string()
        {
            if (!HookedList.Contains("CreateInstanceOfType_string"))
            {
                HookedList.Add("CreateInstanceOfType_string");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "CreateInstanceOfType_string",
                        false), CreateInstanceOfType_string);
            }
        }

        internal static event Delegates.CreateInstanceOfType_string_BeforeArgs _beforeCreateInstanceOfType_string;
        internal static event Delegates.CreateInstanceOfType_string_AfterArgs _afterCreateInstanceOfType_string;

        private static InControl.InputDeviceProfile CreateInstanceOfType_string(
            Func<string, InControl.InputDeviceProfile> orig, string typeName)
        {
            Delegates.Params_CreateInstanceOfType_string @params = new()
            {
                typeName = typeName
            };
            if (_beforeCreateInstanceOfType_string != null)
            {
                foreach (Delegates.CreateInstanceOfType_string_BeforeArgs toInvoke in _beforeCreateInstanceOfType_string
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeCreateInstanceOfType_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            typeName = @params.typeName;
            var retVal = orig(typeName);
            if (_afterCreateInstanceOfType_string != null)
            {
                foreach (Delegates.CreateInstanceOfType_string_AfterArgs toInvoke in _afterCreateInstanceOfType_string
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterCreateInstanceOfType_string.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookDefine()
        {
            if (!HookedList.Contains("Define"))
            {
                HookedList.Add("Define");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "Define", true), Define);
            }
        }

        internal static event Delegates.Define_BeforeArgs _beforeDefine;
        internal static event Delegates.Define_AfterArgs _afterDefine;

        private static void Define(Action<InControl.InputDeviceProfile> orig, InControl.InputDeviceProfile self)
        {
            Delegates.Params_Define @params = new()
            {
                self = self
            };
            if (_beforeDefine != null)
            {
                foreach (Delegates.Define_BeforeArgs toInvoke in _beforeDefine.GetInvocationList())
                {
                    try
                    {
                        _beforeDefine?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterDefine != null)
            {
                foreach (Delegates.Define_AfterArgs toInvoke in _afterDefine.GetInvocationList())
                {
                    try
                    {
                        _afterDefine.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookMatches_InputDeviceInfo()
        {
            if (!HookedList.Contains("Matches_InputDeviceInfo"))
            {
                HookedList.Add("Matches_InputDeviceInfo");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "Matches_InputDeviceInfo",
                        true), Matches_InputDeviceInfo);
            }
        }

        internal static event Delegates.Matches_InputDeviceInfo_BeforeArgs _beforeMatches_InputDeviceInfo;
        internal static event Delegates.Matches_InputDeviceInfo_AfterArgs _afterMatches_InputDeviceInfo;

        private static bool Matches_InputDeviceInfo(
            Func<InControl.InputDeviceProfile, InControl.InputDeviceInfo, bool> orig, InControl.InputDeviceProfile self,
            InControl.InputDeviceInfo deviceInfo)
        {
            Delegates.Params_Matches_InputDeviceInfo @params = new()
            {
                self = self, deviceInfo = deviceInfo
            };
            if (_beforeMatches_InputDeviceInfo != null)
            {
                foreach (Delegates.Matches_InputDeviceInfo_BeforeArgs toInvoke in _beforeMatches_InputDeviceInfo
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeMatches_InputDeviceInfo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            deviceInfo = @params.deviceInfo;
            var retVal = orig(self, deviceInfo);
            if (_afterMatches_InputDeviceInfo != null)
            {
                foreach (Delegates.Matches_InputDeviceInfo_AfterArgs toInvoke in _afterMatches_InputDeviceInfo
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterMatches_InputDeviceInfo.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookLastResortMatches()
        {
            if (!HookedList.Contains("LastResortMatches"))
            {
                HookedList.Add("LastResortMatches");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LastResortMatches", true),
                    LastResortMatches);
            }
        }

        internal static event Delegates.LastResortMatches_BeforeArgs _beforeLastResortMatches;
        internal static event Delegates.LastResortMatches_AfterArgs _afterLastResortMatches;

        private static bool LastResortMatches(Func<InControl.InputDeviceProfile, InControl.InputDeviceInfo, bool> orig,
            InControl.InputDeviceProfile self, InControl.InputDeviceInfo deviceInfo)
        {
            Delegates.Params_LastResortMatches @params = new()
            {
                self = self, deviceInfo = deviceInfo
            };
            if (_beforeLastResortMatches != null)
            {
                foreach (Delegates.LastResortMatches_BeforeArgs toInvoke in
                         _beforeLastResortMatches.GetInvocationList())
                {
                    try
                    {
                        _beforeLastResortMatches?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            deviceInfo = @params.deviceInfo;
            var retVal = orig(self, deviceInfo);
            if (_afterLastResortMatches != null)
            {
                foreach (Delegates.LastResortMatches_AfterArgs toInvoke in _afterLastResortMatches.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterLastResortMatches.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookMatches_InputDeviceInfo_Array()
        {
            if (!HookedList.Contains("Matches_InputDeviceInfo_Array"))
            {
                HookedList.Add("Matches_InputDeviceInfo_Array");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile),
                        "Matches_InputDeviceInfo_Array", true), Matches_InputDeviceInfo_Array);
            }
        }

        internal static event Delegates.Matches_InputDeviceInfo_Array_BeforeArgs _beforeMatches_InputDeviceInfo_Array;
        internal static event Delegates.Matches_InputDeviceInfo_Array_AfterArgs _afterMatches_InputDeviceInfo_Array;

        private static bool Matches_InputDeviceInfo_Array(
            Func<InControl.InputDeviceProfile, InControl.InputDeviceInfo, InControl.InputDeviceMatcher[], bool> orig,
            InControl.InputDeviceProfile self, InControl.InputDeviceInfo deviceInfo,
            InControl.InputDeviceMatcher[] matchers)
        {
            Delegates.Params_Matches_InputDeviceInfo_Array @params = new()
            {
                self = self, deviceInfo = deviceInfo, matchers = matchers
            };
            if (_beforeMatches_InputDeviceInfo_Array != null)
            {
                foreach (Delegates.Matches_InputDeviceInfo_Array_BeforeArgs toInvoke in
                         _beforeMatches_InputDeviceInfo_Array.GetInvocationList())
                {
                    try
                    {
                        _beforeMatches_InputDeviceInfo_Array?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            deviceInfo = @params.deviceInfo;
            matchers = @params.matchers;
            var retVal = orig(self, deviceInfo, matchers);
            if (_afterMatches_InputDeviceInfo_Array != null)
            {
                foreach (Delegates.Matches_InputDeviceInfo_Array_AfterArgs toInvoke in
                         _afterMatches_InputDeviceInfo_Array.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterMatches_InputDeviceInfo_Array.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_IsSupportedOnThisPlatform()
        {
            if (!HookedList.Contains("get_IsSupportedOnThisPlatform"))
            {
                HookedList.Add("get_IsSupportedOnThisPlatform");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile),
                        "get_IsSupportedOnThisPlatform", true), get_IsSupportedOnThisPlatform);
            }
        }

        internal static event Delegates.get_IsSupportedOnThisPlatform_BeforeArgs _beforeget_IsSupportedOnThisPlatform;
        internal static event Delegates.get_IsSupportedOnThisPlatform_AfterArgs _afterget_IsSupportedOnThisPlatform;

        private static bool get_IsSupportedOnThisPlatform(Func<InControl.InputDeviceProfile, bool> orig,
            InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_IsSupportedOnThisPlatform @params = new()
            {
                self = self
            };
            if (_beforeget_IsSupportedOnThisPlatform != null)
            {
                foreach (Delegates.get_IsSupportedOnThisPlatform_BeforeArgs toInvoke in
                         _beforeget_IsSupportedOnThisPlatform.GetInvocationList())
                {
                    try
                    {
                        _beforeget_IsSupportedOnThisPlatform?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsSupportedOnThisPlatform != null)
            {
                foreach (Delegates.get_IsSupportedOnThisPlatform_AfterArgs toInvoke in
                         _afterget_IsSupportedOnThisPlatform.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_IsSupportedOnThisPlatform.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookHide()
        {
            if (!HookedList.Contains("Hide"))
            {
                HookedList.Add("Hide");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "Hide", false), Hide);
            }
        }

        internal static event Delegates.Hide_BeforeArgs _beforeHide;
        internal static event Delegates.Hide_AfterArgs _afterHide;

        private static void Hide(Action<System.Type> orig, System.Type type)
        {
            Delegates.Params_Hide @params = new()
            {
                type = type
            };
            if (_beforeHide != null)
            {
                foreach (Delegates.Hide_BeforeArgs toInvoke in _beforeHide.GetInvocationList())
                {
                    try
                    {
                        _beforeHide?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            type = @params.type;
            orig(type);
            if (_afterHide != null)
            {
                foreach (Delegates.Hide_AfterArgs toInvoke in _afterHide.GetInvocationList())
                {
                    try
                    {
                        _afterHide.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_IsHidden()
        {
            if (!HookedList.Contains("get_IsHidden"))
            {
                HookedList.Add("get_IsHidden");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_IsHidden", true),
                    get_IsHidden);
            }
        }

        internal static event Delegates.get_IsHidden_BeforeArgs _beforeget_IsHidden;
        internal static event Delegates.get_IsHidden_AfterArgs _afterget_IsHidden;

        private static bool get_IsHidden(Func<InControl.InputDeviceProfile, bool> orig,
            InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_IsHidden @params = new()
            {
                self = self
            };
            if (_beforeget_IsHidden != null)
            {
                foreach (Delegates.get_IsHidden_BeforeArgs toInvoke in _beforeget_IsHidden.GetInvocationList())
                {
                    try
                    {
                        _beforeget_IsHidden?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsHidden != null)
            {
                foreach (Delegates.get_IsHidden_AfterArgs toInvoke in _afterget_IsHidden.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_IsHidden.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_IsNotHidden()
        {
            if (!HookedList.Contains("get_IsNotHidden"))
            {
                HookedList.Add("get_IsNotHidden");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_IsNotHidden", true),
                    get_IsNotHidden);
            }
        }

        internal static event Delegates.get_IsNotHidden_BeforeArgs _beforeget_IsNotHidden;
        internal static event Delegates.get_IsNotHidden_AfterArgs _afterget_IsNotHidden;

        private static bool get_IsNotHidden(Func<InControl.InputDeviceProfile, bool> orig,
            InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_IsNotHidden @params = new()
            {
                self = self
            };
            if (_beforeget_IsNotHidden != null)
            {
                foreach (Delegates.get_IsNotHidden_BeforeArgs toInvoke in _beforeget_IsNotHidden.GetInvocationList())
                {
                    try
                    {
                        _beforeget_IsNotHidden?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsNotHidden != null)
            {
                foreach (Delegates.get_IsNotHidden_AfterArgs toInvoke in _afterget_IsNotHidden.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_IsNotHidden.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_AnalogCount()
        {
            if (!HookedList.Contains("get_AnalogCount"))
            {
                HookedList.Add("get_AnalogCount");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_AnalogCount", true),
                    get_AnalogCount);
            }
        }

        internal static event Delegates.get_AnalogCount_BeforeArgs _beforeget_AnalogCount;
        internal static event Delegates.get_AnalogCount_AfterArgs _afterget_AnalogCount;

        private static int get_AnalogCount(Func<InControl.InputDeviceProfile, int> orig,
            InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_AnalogCount @params = new()
            {
                self = self
            };
            if (_beforeget_AnalogCount != null)
            {
                foreach (Delegates.get_AnalogCount_BeforeArgs toInvoke in _beforeget_AnalogCount.GetInvocationList())
                {
                    try
                    {
                        _beforeget_AnalogCount?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AnalogCount != null)
            {
                foreach (Delegates.get_AnalogCount_AfterArgs toInvoke in _afterget_AnalogCount.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_AnalogCount.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_ButtonCount()
        {
            if (!HookedList.Contains("get_ButtonCount"))
            {
                HookedList.Add("get_ButtonCount");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_ButtonCount", true),
                    get_ButtonCount);
            }
        }

        internal static event Delegates.get_ButtonCount_BeforeArgs _beforeget_ButtonCount;
        internal static event Delegates.get_ButtonCount_AfterArgs _afterget_ButtonCount;

        private static int get_ButtonCount(Func<InControl.InputDeviceProfile, int> orig,
            InControl.InputDeviceProfile self)
        {
            Delegates.Params_get_ButtonCount @params = new()
            {
                self = self
            };
            if (_beforeget_ButtonCount != null)
            {
                foreach (Delegates.get_ButtonCount_BeforeArgs toInvoke in _beforeget_ButtonCount.GetInvocationList())
                {
                    try
                    {
                        _beforeget_ButtonCount?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ButtonCount != null)
            {
                foreach (Delegates.get_ButtonCount_AfterArgs toInvoke in _afterget_ButtonCount.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_ButtonCount.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookButton()
        {
            if (!HookedList.Contains("Button"))
            {
                HookedList.Add("Button");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "Button", false), Button);
            }
        }

        internal static event Delegates.Button_BeforeArgs _beforeButton;
        internal static event Delegates.Button_AfterArgs _afterButton;

        private static InControl.InputControlSource Button(Func<int, InControl.InputControlSource> orig, int index)
        {
            Delegates.Params_Button @params = new()
            {
                index = index
            };
            if (_beforeButton != null)
            {
                foreach (Delegates.Button_BeforeArgs toInvoke in _beforeButton.GetInvocationList())
                {
                    try
                    {
                        _beforeButton?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            index = @params.index;
            var retVal = orig(index);
            if (_afterButton != null)
            {
                foreach (Delegates.Button_AfterArgs toInvoke in _afterButton.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterButton.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookAnalog()
        {
            if (!HookedList.Contains("Analog"))
            {
                HookedList.Add("Analog");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "Analog", false), Analog);
            }
        }

        internal static event Delegates.Analog_BeforeArgs _beforeAnalog;
        internal static event Delegates.Analog_AfterArgs _afterAnalog;

        private static InControl.InputControlSource Analog(Func<int, InControl.InputControlSource> orig, int index)
        {
            Delegates.Params_Analog @params = new()
            {
                index = index
            };
            if (_beforeAnalog != null)
            {
                foreach (Delegates.Analog_BeforeArgs toInvoke in _beforeAnalog.GetInvocationList())
                {
                    try
                    {
                        _beforeAnalog?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            index = @params.index;
            var retVal = orig(index);
            if (_afterAnalog != null)
            {
                foreach (Delegates.Analog_AfterArgs toInvoke in _afterAnalog.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterAnalog.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookLeftStickLeftMapping()
        {
            if (!HookedList.Contains("LeftStickLeftMapping"))
            {
                HookedList.Add("LeftStickLeftMapping");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LeftStickLeftMapping", false),
                    LeftStickLeftMapping);
            }
        }

        internal static event Delegates.LeftStickLeftMapping_BeforeArgs _beforeLeftStickLeftMapping;
        internal static event Delegates.LeftStickLeftMapping_AfterArgs _afterLeftStickLeftMapping;

        private static InControl.InputControlMapping LeftStickLeftMapping(Func<int, InControl.InputControlMapping> orig,
            int analog)
        {
            Delegates.Params_LeftStickLeftMapping @params = new()
            {
                analog = analog
            };
            if (_beforeLeftStickLeftMapping != null)
            {
                foreach (Delegates.LeftStickLeftMapping_BeforeArgs toInvoke in _beforeLeftStickLeftMapping
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeLeftStickLeftMapping?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterLeftStickLeftMapping != null)
            {
                foreach (Delegates.LeftStickLeftMapping_AfterArgs toInvoke in _afterLeftStickLeftMapping
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterLeftStickLeftMapping.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookLeftStickRightMapping()
        {
            if (!HookedList.Contains("LeftStickRightMapping"))
            {
                HookedList.Add("LeftStickRightMapping");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LeftStickRightMapping",
                        false), LeftStickRightMapping);
            }
        }

        internal static event Delegates.LeftStickRightMapping_BeforeArgs _beforeLeftStickRightMapping;
        internal static event Delegates.LeftStickRightMapping_AfterArgs _afterLeftStickRightMapping;

        private static InControl.InputControlMapping LeftStickRightMapping(
            Func<int, InControl.InputControlMapping> orig, int analog)
        {
            Delegates.Params_LeftStickRightMapping @params = new()
            {
                analog = analog
            };
            if (_beforeLeftStickRightMapping != null)
            {
                foreach (Delegates.LeftStickRightMapping_BeforeArgs toInvoke in _beforeLeftStickRightMapping
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeLeftStickRightMapping?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterLeftStickRightMapping != null)
            {
                foreach (Delegates.LeftStickRightMapping_AfterArgs toInvoke in _afterLeftStickRightMapping
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterLeftStickRightMapping.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookLeftStickUpMapping()
        {
            if (!HookedList.Contains("LeftStickUpMapping"))
            {
                HookedList.Add("LeftStickUpMapping");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LeftStickUpMapping", false),
                    LeftStickUpMapping);
            }
        }

        internal static event Delegates.LeftStickUpMapping_BeforeArgs _beforeLeftStickUpMapping;
        internal static event Delegates.LeftStickUpMapping_AfterArgs _afterLeftStickUpMapping;

        private static InControl.InputControlMapping LeftStickUpMapping(Func<int, InControl.InputControlMapping> orig,
            int analog)
        {
            Delegates.Params_LeftStickUpMapping @params = new()
            {
                analog = analog
            };
            if (_beforeLeftStickUpMapping != null)
            {
                foreach (Delegates.LeftStickUpMapping_BeforeArgs toInvoke in
                         _beforeLeftStickUpMapping.GetInvocationList())
                {
                    try
                    {
                        _beforeLeftStickUpMapping?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterLeftStickUpMapping != null)
            {
                foreach (Delegates.LeftStickUpMapping_AfterArgs toInvoke in
                         _afterLeftStickUpMapping.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterLeftStickUpMapping.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookLeftStickDownMapping()
        {
            if (!HookedList.Contains("LeftStickDownMapping"))
            {
                HookedList.Add("LeftStickDownMapping");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LeftStickDownMapping", false),
                    LeftStickDownMapping);
            }
        }

        internal static event Delegates.LeftStickDownMapping_BeforeArgs _beforeLeftStickDownMapping;
        internal static event Delegates.LeftStickDownMapping_AfterArgs _afterLeftStickDownMapping;

        private static InControl.InputControlMapping LeftStickDownMapping(Func<int, InControl.InputControlMapping> orig,
            int analog)
        {
            Delegates.Params_LeftStickDownMapping @params = new()
            {
                analog = analog
            };
            if (_beforeLeftStickDownMapping != null)
            {
                foreach (Delegates.LeftStickDownMapping_BeforeArgs toInvoke in _beforeLeftStickDownMapping
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeLeftStickDownMapping?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterLeftStickDownMapping != null)
            {
                foreach (Delegates.LeftStickDownMapping_AfterArgs toInvoke in _afterLeftStickDownMapping
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterLeftStickDownMapping.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookLeftStickUpMapping2()
        {
            if (!HookedList.Contains("LeftStickUpMapping2"))
            {
                HookedList.Add("LeftStickUpMapping2");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LeftStickUpMapping2", false),
                    LeftStickUpMapping2);
            }
        }

        internal static event Delegates.LeftStickUpMapping2_BeforeArgs _beforeLeftStickUpMapping2;
        internal static event Delegates.LeftStickUpMapping2_AfterArgs _afterLeftStickUpMapping2;

        private static InControl.InputControlMapping LeftStickUpMapping2(Func<int, InControl.InputControlMapping> orig,
            int analog)
        {
            Delegates.Params_LeftStickUpMapping2 @params = new()
            {
                analog = analog
            };
            if (_beforeLeftStickUpMapping2 != null)
            {
                foreach (Delegates.LeftStickUpMapping2_BeforeArgs toInvoke in _beforeLeftStickUpMapping2
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeLeftStickUpMapping2?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterLeftStickUpMapping2 != null)
            {
                foreach (Delegates.LeftStickUpMapping2_AfterArgs toInvoke in
                         _afterLeftStickUpMapping2.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterLeftStickUpMapping2.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookLeftStickDownMapping2()
        {
            if (!HookedList.Contains("LeftStickDownMapping2"))
            {
                HookedList.Add("LeftStickDownMapping2");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LeftStickDownMapping2",
                        false), LeftStickDownMapping2);
            }
        }

        internal static event Delegates.LeftStickDownMapping2_BeforeArgs _beforeLeftStickDownMapping2;
        internal static event Delegates.LeftStickDownMapping2_AfterArgs _afterLeftStickDownMapping2;

        private static InControl.InputControlMapping LeftStickDownMapping2(
            Func<int, InControl.InputControlMapping> orig, int analog)
        {
            Delegates.Params_LeftStickDownMapping2 @params = new()
            {
                analog = analog
            };
            if (_beforeLeftStickDownMapping2 != null)
            {
                foreach (Delegates.LeftStickDownMapping2_BeforeArgs toInvoke in _beforeLeftStickDownMapping2
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeLeftStickDownMapping2?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterLeftStickDownMapping2 != null)
            {
                foreach (Delegates.LeftStickDownMapping2_AfterArgs toInvoke in _afterLeftStickDownMapping2
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterLeftStickDownMapping2.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookRightStickLeftMapping()
        {
            if (!HookedList.Contains("RightStickLeftMapping"))
            {
                HookedList.Add("RightStickLeftMapping");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "RightStickLeftMapping",
                        false), RightStickLeftMapping);
            }
        }

        internal static event Delegates.RightStickLeftMapping_BeforeArgs _beforeRightStickLeftMapping;
        internal static event Delegates.RightStickLeftMapping_AfterArgs _afterRightStickLeftMapping;

        private static InControl.InputControlMapping RightStickLeftMapping(
            Func<int, InControl.InputControlMapping> orig, int analog)
        {
            Delegates.Params_RightStickLeftMapping @params = new()
            {
                analog = analog
            };
            if (_beforeRightStickLeftMapping != null)
            {
                foreach (Delegates.RightStickLeftMapping_BeforeArgs toInvoke in _beforeRightStickLeftMapping
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeRightStickLeftMapping?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterRightStickLeftMapping != null)
            {
                foreach (Delegates.RightStickLeftMapping_AfterArgs toInvoke in _afterRightStickLeftMapping
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterRightStickLeftMapping.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookRightStickRightMapping()
        {
            if (!HookedList.Contains("RightStickRightMapping"))
            {
                HookedList.Add("RightStickRightMapping");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "RightStickRightMapping",
                        false), RightStickRightMapping);
            }
        }

        internal static event Delegates.RightStickRightMapping_BeforeArgs _beforeRightStickRightMapping;
        internal static event Delegates.RightStickRightMapping_AfterArgs _afterRightStickRightMapping;

        private static InControl.InputControlMapping RightStickRightMapping(
            Func<int, InControl.InputControlMapping> orig, int analog)
        {
            Delegates.Params_RightStickRightMapping @params = new()
            {
                analog = analog
            };
            if (_beforeRightStickRightMapping != null)
            {
                foreach (Delegates.RightStickRightMapping_BeforeArgs toInvoke in _beforeRightStickRightMapping
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeRightStickRightMapping?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterRightStickRightMapping != null)
            {
                foreach (Delegates.RightStickRightMapping_AfterArgs toInvoke in _afterRightStickRightMapping
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterRightStickRightMapping.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookRightStickUpMapping()
        {
            if (!HookedList.Contains("RightStickUpMapping"))
            {
                HookedList.Add("RightStickUpMapping");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "RightStickUpMapping", false),
                    RightStickUpMapping);
            }
        }

        internal static event Delegates.RightStickUpMapping_BeforeArgs _beforeRightStickUpMapping;
        internal static event Delegates.RightStickUpMapping_AfterArgs _afterRightStickUpMapping;

        private static InControl.InputControlMapping RightStickUpMapping(Func<int, InControl.InputControlMapping> orig,
            int analog)
        {
            Delegates.Params_RightStickUpMapping @params = new()
            {
                analog = analog
            };
            if (_beforeRightStickUpMapping != null)
            {
                foreach (Delegates.RightStickUpMapping_BeforeArgs toInvoke in _beforeRightStickUpMapping
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeRightStickUpMapping?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterRightStickUpMapping != null)
            {
                foreach (Delegates.RightStickUpMapping_AfterArgs toInvoke in
                         _afterRightStickUpMapping.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterRightStickUpMapping.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookRightStickDownMapping()
        {
            if (!HookedList.Contains("RightStickDownMapping"))
            {
                HookedList.Add("RightStickDownMapping");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "RightStickDownMapping",
                        false), RightStickDownMapping);
            }
        }

        internal static event Delegates.RightStickDownMapping_BeforeArgs _beforeRightStickDownMapping;
        internal static event Delegates.RightStickDownMapping_AfterArgs _afterRightStickDownMapping;

        private static InControl.InputControlMapping RightStickDownMapping(
            Func<int, InControl.InputControlMapping> orig, int analog)
        {
            Delegates.Params_RightStickDownMapping @params = new()
            {
                analog = analog
            };
            if (_beforeRightStickDownMapping != null)
            {
                foreach (Delegates.RightStickDownMapping_BeforeArgs toInvoke in _beforeRightStickDownMapping
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeRightStickDownMapping?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterRightStickDownMapping != null)
            {
                foreach (Delegates.RightStickDownMapping_AfterArgs toInvoke in _afterRightStickDownMapping
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterRightStickDownMapping.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookRightStickUpMapping2()
        {
            if (!HookedList.Contains("RightStickUpMapping2"))
            {
                HookedList.Add("RightStickUpMapping2");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "RightStickUpMapping2", false),
                    RightStickUpMapping2);
            }
        }

        internal static event Delegates.RightStickUpMapping2_BeforeArgs _beforeRightStickUpMapping2;
        internal static event Delegates.RightStickUpMapping2_AfterArgs _afterRightStickUpMapping2;

        private static InControl.InputControlMapping RightStickUpMapping2(Func<int, InControl.InputControlMapping> orig,
            int analog)
        {
            Delegates.Params_RightStickUpMapping2 @params = new()
            {
                analog = analog
            };
            if (_beforeRightStickUpMapping2 != null)
            {
                foreach (Delegates.RightStickUpMapping2_BeforeArgs toInvoke in _beforeRightStickUpMapping2
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeRightStickUpMapping2?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterRightStickUpMapping2 != null)
            {
                foreach (Delegates.RightStickUpMapping2_AfterArgs toInvoke in _afterRightStickUpMapping2
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterRightStickUpMapping2.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookRightStickDownMapping2()
        {
            if (!HookedList.Contains("RightStickDownMapping2"))
            {
                HookedList.Add("RightStickDownMapping2");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "RightStickDownMapping2",
                        false), RightStickDownMapping2);
            }
        }

        internal static event Delegates.RightStickDownMapping2_BeforeArgs _beforeRightStickDownMapping2;
        internal static event Delegates.RightStickDownMapping2_AfterArgs _afterRightStickDownMapping2;

        private static InControl.InputControlMapping RightStickDownMapping2(
            Func<int, InControl.InputControlMapping> orig, int analog)
        {
            Delegates.Params_RightStickDownMapping2 @params = new()
            {
                analog = analog
            };
            if (_beforeRightStickDownMapping2 != null)
            {
                foreach (Delegates.RightStickDownMapping2_BeforeArgs toInvoke in _beforeRightStickDownMapping2
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeRightStickDownMapping2?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterRightStickDownMapping2 != null)
            {
                foreach (Delegates.RightStickDownMapping2_AfterArgs toInvoke in _afterRightStickDownMapping2
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterRightStickDownMapping2.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookLeftTriggerMapping()
        {
            if (!HookedList.Contains("LeftTriggerMapping"))
            {
                HookedList.Add("LeftTriggerMapping");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LeftTriggerMapping", false),
                    LeftTriggerMapping);
            }
        }

        internal static event Delegates.LeftTriggerMapping_BeforeArgs _beforeLeftTriggerMapping;
        internal static event Delegates.LeftTriggerMapping_AfterArgs _afterLeftTriggerMapping;

        private static InControl.InputControlMapping LeftTriggerMapping(Func<int, InControl.InputControlMapping> orig,
            int analog)
        {
            Delegates.Params_LeftTriggerMapping @params = new()
            {
                analog = analog
            };
            if (_beforeLeftTriggerMapping != null)
            {
                foreach (Delegates.LeftTriggerMapping_BeforeArgs toInvoke in
                         _beforeLeftTriggerMapping.GetInvocationList())
                {
                    try
                    {
                        _beforeLeftTriggerMapping?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterLeftTriggerMapping != null)
            {
                foreach (Delegates.LeftTriggerMapping_AfterArgs toInvoke in
                         _afterLeftTriggerMapping.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterLeftTriggerMapping.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookRightTriggerMapping()
        {
            if (!HookedList.Contains("RightTriggerMapping"))
            {
                HookedList.Add("RightTriggerMapping");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "RightTriggerMapping", false),
                    RightTriggerMapping);
            }
        }

        internal static event Delegates.RightTriggerMapping_BeforeArgs _beforeRightTriggerMapping;
        internal static event Delegates.RightTriggerMapping_AfterArgs _afterRightTriggerMapping;

        private static InControl.InputControlMapping RightTriggerMapping(Func<int, InControl.InputControlMapping> orig,
            int analog)
        {
            Delegates.Params_RightTriggerMapping @params = new()
            {
                analog = analog
            };
            if (_beforeRightTriggerMapping != null)
            {
                foreach (Delegates.RightTriggerMapping_BeforeArgs toInvoke in _beforeRightTriggerMapping
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeRightTriggerMapping?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterRightTriggerMapping != null)
            {
                foreach (Delegates.RightTriggerMapping_AfterArgs toInvoke in
                         _afterRightTriggerMapping.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterRightTriggerMapping.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookDPadLeftMapping()
        {
            if (!HookedList.Contains("DPadLeftMapping"))
            {
                HookedList.Add("DPadLeftMapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "DPadLeftMapping", false),
                    DPadLeftMapping);
            }
        }

        internal static event Delegates.DPadLeftMapping_BeforeArgs _beforeDPadLeftMapping;
        internal static event Delegates.DPadLeftMapping_AfterArgs _afterDPadLeftMapping;

        private static InControl.InputControlMapping DPadLeftMapping(Func<int, InControl.InputControlMapping> orig,
            int analog)
        {
            Delegates.Params_DPadLeftMapping @params = new()
            {
                analog = analog
            };
            if (_beforeDPadLeftMapping != null)
            {
                foreach (Delegates.DPadLeftMapping_BeforeArgs toInvoke in _beforeDPadLeftMapping.GetInvocationList())
                {
                    try
                    {
                        _beforeDPadLeftMapping?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterDPadLeftMapping != null)
            {
                foreach (Delegates.DPadLeftMapping_AfterArgs toInvoke in _afterDPadLeftMapping.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterDPadLeftMapping.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookDPadRightMapping()
        {
            if (!HookedList.Contains("DPadRightMapping"))
            {
                HookedList.Add("DPadRightMapping");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "DPadRightMapping", false),
                    DPadRightMapping);
            }
        }

        internal static event Delegates.DPadRightMapping_BeforeArgs _beforeDPadRightMapping;
        internal static event Delegates.DPadRightMapping_AfterArgs _afterDPadRightMapping;

        private static InControl.InputControlMapping DPadRightMapping(Func<int, InControl.InputControlMapping> orig,
            int analog)
        {
            Delegates.Params_DPadRightMapping @params = new()
            {
                analog = analog
            };
            if (_beforeDPadRightMapping != null)
            {
                foreach (Delegates.DPadRightMapping_BeforeArgs toInvoke in _beforeDPadRightMapping.GetInvocationList())
                {
                    try
                    {
                        _beforeDPadRightMapping?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterDPadRightMapping != null)
            {
                foreach (Delegates.DPadRightMapping_AfterArgs toInvoke in _afterDPadRightMapping.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterDPadRightMapping.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookDPadUpMapping()
        {
            if (!HookedList.Contains("DPadUpMapping"))
            {
                HookedList.Add("DPadUpMapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "DPadUpMapping", false),
                    DPadUpMapping);
            }
        }

        internal static event Delegates.DPadUpMapping_BeforeArgs _beforeDPadUpMapping;
        internal static event Delegates.DPadUpMapping_AfterArgs _afterDPadUpMapping;

        private static InControl.InputControlMapping DPadUpMapping(Func<int, InControl.InputControlMapping> orig,
            int analog)
        {
            Delegates.Params_DPadUpMapping @params = new()
            {
                analog = analog
            };
            if (_beforeDPadUpMapping != null)
            {
                foreach (Delegates.DPadUpMapping_BeforeArgs toInvoke in _beforeDPadUpMapping.GetInvocationList())
                {
                    try
                    {
                        _beforeDPadUpMapping?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterDPadUpMapping != null)
            {
                foreach (Delegates.DPadUpMapping_AfterArgs toInvoke in _afterDPadUpMapping.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterDPadUpMapping.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookDPadDownMapping()
        {
            if (!HookedList.Contains("DPadDownMapping"))
            {
                HookedList.Add("DPadDownMapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "DPadDownMapping", false),
                    DPadDownMapping);
            }
        }

        internal static event Delegates.DPadDownMapping_BeforeArgs _beforeDPadDownMapping;
        internal static event Delegates.DPadDownMapping_AfterArgs _afterDPadDownMapping;

        private static InControl.InputControlMapping DPadDownMapping(Func<int, InControl.InputControlMapping> orig,
            int analog)
        {
            Delegates.Params_DPadDownMapping @params = new()
            {
                analog = analog
            };
            if (_beforeDPadDownMapping != null)
            {
                foreach (Delegates.DPadDownMapping_BeforeArgs toInvoke in _beforeDPadDownMapping.GetInvocationList())
                {
                    try
                    {
                        _beforeDPadDownMapping?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterDPadDownMapping != null)
            {
                foreach (Delegates.DPadDownMapping_AfterArgs toInvoke in _afterDPadDownMapping.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterDPadDownMapping.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookDPadUpMapping2()
        {
            if (!HookedList.Contains("DPadUpMapping2"))
            {
                HookedList.Add("DPadUpMapping2");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "DPadUpMapping2", false),
                    DPadUpMapping2);
            }
        }

        internal static event Delegates.DPadUpMapping2_BeforeArgs _beforeDPadUpMapping2;
        internal static event Delegates.DPadUpMapping2_AfterArgs _afterDPadUpMapping2;

        private static InControl.InputControlMapping DPadUpMapping2(Func<int, InControl.InputControlMapping> orig,
            int analog)
        {
            Delegates.Params_DPadUpMapping2 @params = new()
            {
                analog = analog
            };
            if (_beforeDPadUpMapping2 != null)
            {
                foreach (Delegates.DPadUpMapping2_BeforeArgs toInvoke in _beforeDPadUpMapping2.GetInvocationList())
                {
                    try
                    {
                        _beforeDPadUpMapping2?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterDPadUpMapping2 != null)
            {
                foreach (Delegates.DPadUpMapping2_AfterArgs toInvoke in _afterDPadUpMapping2.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterDPadUpMapping2.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookDPadDownMapping2()
        {
            if (!HookedList.Contains("DPadDownMapping2"))
            {
                HookedList.Add("DPadDownMapping2");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "DPadDownMapping2", false),
                    DPadDownMapping2);
            }
        }

        internal static event Delegates.DPadDownMapping2_BeforeArgs _beforeDPadDownMapping2;
        internal static event Delegates.DPadDownMapping2_AfterArgs _afterDPadDownMapping2;

        private static InControl.InputControlMapping DPadDownMapping2(Func<int, InControl.InputControlMapping> orig,
            int analog)
        {
            Delegates.Params_DPadDownMapping2 @params = new()
            {
                analog = analog
            };
            if (_beforeDPadDownMapping2 != null)
            {
                foreach (Delegates.DPadDownMapping2_BeforeArgs toInvoke in _beforeDPadDownMapping2.GetInvocationList())
                {
                    try
                    {
                        _beforeDPadDownMapping2?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            analog = @params.analog;
            var retVal = orig(analog);
            if (_afterDPadDownMapping2 != null)
            {
                foreach (Delegates.DPadDownMapping2_AfterArgs toInvoke in _afterDPadDownMapping2.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterDPadDownMapping2.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_ProfileType
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_ProfileType_BeforeArgs(Params_get_ProfileType args);

        public delegate InControl.InputDeviceProfileType get_ProfileType_AfterArgs(Params_get_ProfileType args,
            InControl.InputDeviceProfileType ret);

        public delegate InControl.InputDeviceProfileType get_ProfileType_WithArgs(
            Func<InControl.InputDeviceProfile, InControl.InputDeviceProfileType> orig,
            InControl.InputDeviceProfile self);

        public sealed class Params_set_ProfileType
        {
            public InControl.InputDeviceProfile self;
            public InControl.InputDeviceProfileType value;
        }

        public delegate void set_ProfileType_BeforeArgs(Params_set_ProfileType args);

        public delegate void set_ProfileType_AfterArgs(Params_set_ProfileType args);

        public delegate void set_ProfileType_WithArgs(
            Action<InControl.InputDeviceProfile, InControl.InputDeviceProfileType> orig,
            InControl.InputDeviceProfile self, InControl.InputDeviceProfileType value);

        public sealed class Params_get_DeviceName
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_DeviceName_BeforeArgs(Params_get_DeviceName args);

        public delegate string get_DeviceName_AfterArgs(Params_get_DeviceName args, string ret);

        public delegate string get_DeviceName_WithArgs(Func<InControl.InputDeviceProfile, string> orig,
            InControl.InputDeviceProfile self);

        public sealed class Params_set_DeviceName
        {
            public InControl.InputDeviceProfile self;
            public string value;
        }

        public delegate void set_DeviceName_BeforeArgs(Params_set_DeviceName args);

        public delegate void set_DeviceName_AfterArgs(Params_set_DeviceName args);

        public delegate void set_DeviceName_WithArgs(Action<InControl.InputDeviceProfile, string> orig,
            InControl.InputDeviceProfile self, string value);

        public sealed class Params_get_DeviceNotes
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_DeviceNotes_BeforeArgs(Params_get_DeviceNotes args);

        public delegate string get_DeviceNotes_AfterArgs(Params_get_DeviceNotes args, string ret);

        public delegate string get_DeviceNotes_WithArgs(Func<InControl.InputDeviceProfile, string> orig,
            InControl.InputDeviceProfile self);

        public sealed class Params_set_DeviceNotes
        {
            public InControl.InputDeviceProfile self;
            public string value;
        }

        public delegate void set_DeviceNotes_BeforeArgs(Params_set_DeviceNotes args);

        public delegate void set_DeviceNotes_AfterArgs(Params_set_DeviceNotes args);

        public delegate void set_DeviceNotes_WithArgs(Action<InControl.InputDeviceProfile, string> orig,
            InControl.InputDeviceProfile self, string value);

        public sealed class Params_get_DeviceClass
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_DeviceClass_BeforeArgs(Params_get_DeviceClass args);

        public delegate InControl.InputDeviceClass get_DeviceClass_AfterArgs(Params_get_DeviceClass args,
            InControl.InputDeviceClass ret);

        public delegate InControl.InputDeviceClass get_DeviceClass_WithArgs(
            Func<InControl.InputDeviceProfile, InControl.InputDeviceClass> orig, InControl.InputDeviceProfile self);

        public sealed class Params_set_DeviceClass
        {
            public InControl.InputDeviceProfile self;
            public InControl.InputDeviceClass value;
        }

        public delegate void set_DeviceClass_BeforeArgs(Params_set_DeviceClass args);

        public delegate void set_DeviceClass_AfterArgs(Params_set_DeviceClass args);

        public delegate void set_DeviceClass_WithArgs(
            Action<InControl.InputDeviceProfile, InControl.InputDeviceClass> orig, InControl.InputDeviceProfile self,
            InControl.InputDeviceClass value);

        public sealed class Params_get_DeviceStyle
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_DeviceStyle_BeforeArgs(Params_get_DeviceStyle args);

        public delegate InControl.InputDeviceStyle get_DeviceStyle_AfterArgs(Params_get_DeviceStyle args,
            InControl.InputDeviceStyle ret);

        public delegate InControl.InputDeviceStyle get_DeviceStyle_WithArgs(
            Func<InControl.InputDeviceProfile, InControl.InputDeviceStyle> orig, InControl.InputDeviceProfile self);

        public sealed class Params_set_DeviceStyle
        {
            public InControl.InputDeviceProfile self;
            public InControl.InputDeviceStyle value;
        }

        public delegate void set_DeviceStyle_BeforeArgs(Params_set_DeviceStyle args);

        public delegate void set_DeviceStyle_AfterArgs(Params_set_DeviceStyle args);

        public delegate void set_DeviceStyle_WithArgs(
            Action<InControl.InputDeviceProfile, InControl.InputDeviceStyle> orig, InControl.InputDeviceProfile self,
            InControl.InputDeviceStyle value);

        public sealed class Params_get_Sensitivity
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_Sensitivity_BeforeArgs(Params_get_Sensitivity args);

        public delegate float get_Sensitivity_AfterArgs(Params_get_Sensitivity args, float ret);

        public delegate float get_Sensitivity_WithArgs(Func<InControl.InputDeviceProfile, float> orig,
            InControl.InputDeviceProfile self);

        public sealed class Params_set_Sensitivity
        {
            public InControl.InputDeviceProfile self;
            public float value;
        }

        public delegate void set_Sensitivity_BeforeArgs(Params_set_Sensitivity args);

        public delegate void set_Sensitivity_AfterArgs(Params_set_Sensitivity args);

        public delegate void set_Sensitivity_WithArgs(Action<InControl.InputDeviceProfile, float> orig,
            InControl.InputDeviceProfile self, float value);

        public sealed class Params_get_LowerDeadZone
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_LowerDeadZone_BeforeArgs(Params_get_LowerDeadZone args);

        public delegate float get_LowerDeadZone_AfterArgs(Params_get_LowerDeadZone args, float ret);

        public delegate float get_LowerDeadZone_WithArgs(Func<InControl.InputDeviceProfile, float> orig,
            InControl.InputDeviceProfile self);

        public sealed class Params_set_LowerDeadZone
        {
            public InControl.InputDeviceProfile self;
            public float value;
        }

        public delegate void set_LowerDeadZone_BeforeArgs(Params_set_LowerDeadZone args);

        public delegate void set_LowerDeadZone_AfterArgs(Params_set_LowerDeadZone args);

        public delegate void set_LowerDeadZone_WithArgs(Action<InControl.InputDeviceProfile, float> orig,
            InControl.InputDeviceProfile self, float value);

        public sealed class Params_get_UpperDeadZone
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_UpperDeadZone_BeforeArgs(Params_get_UpperDeadZone args);

        public delegate float get_UpperDeadZone_AfterArgs(Params_get_UpperDeadZone args, float ret);

        public delegate float get_UpperDeadZone_WithArgs(Func<InControl.InputDeviceProfile, float> orig,
            InControl.InputDeviceProfile self);

        public sealed class Params_set_UpperDeadZone
        {
            public InControl.InputDeviceProfile self;
            public float value;
        }

        public delegate void set_UpperDeadZone_BeforeArgs(Params_set_UpperDeadZone args);

        public delegate void set_UpperDeadZone_AfterArgs(Params_set_UpperDeadZone args);

        public delegate void set_UpperDeadZone_WithArgs(Action<InControl.InputDeviceProfile, float> orig,
            InControl.InputDeviceProfile self, float value);

        public sealed class Params_get_AnalogMappings
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_AnalogMappings_BeforeArgs(Params_get_AnalogMappings args);

        public delegate InControl.InputControlMapping[] get_AnalogMappings_AfterArgs(Params_get_AnalogMappings args,
            InControl.InputControlMapping[] ret);

        public delegate InControl.InputControlMapping[] get_AnalogMappings_WithArgs(
            Func<InControl.InputDeviceProfile, InControl.InputControlMapping[]> orig,
            InControl.InputDeviceProfile self);

        public sealed class Params_set_AnalogMappings
        {
            public InControl.InputDeviceProfile self;
            public InControl.InputControlMapping[] value;
        }

        public delegate void set_AnalogMappings_BeforeArgs(Params_set_AnalogMappings args);

        public delegate void set_AnalogMappings_AfterArgs(Params_set_AnalogMappings args);

        public delegate void set_AnalogMappings_WithArgs(
            Action<InControl.InputDeviceProfile, InControl.InputControlMapping[]> orig,
            InControl.InputDeviceProfile self, InControl.InputControlMapping[] value);

        public sealed class Params_get_ButtonMappings
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_ButtonMappings_BeforeArgs(Params_get_ButtonMappings args);

        public delegate InControl.InputControlMapping[] get_ButtonMappings_AfterArgs(Params_get_ButtonMappings args,
            InControl.InputControlMapping[] ret);

        public delegate InControl.InputControlMapping[] get_ButtonMappings_WithArgs(
            Func<InControl.InputDeviceProfile, InControl.InputControlMapping[]> orig,
            InControl.InputDeviceProfile self);

        public sealed class Params_set_ButtonMappings
        {
            public InControl.InputDeviceProfile self;
            public InControl.InputControlMapping[] value;
        }

        public delegate void set_ButtonMappings_BeforeArgs(Params_set_ButtonMappings args);

        public delegate void set_ButtonMappings_AfterArgs(Params_set_ButtonMappings args);

        public delegate void set_ButtonMappings_WithArgs(
            Action<InControl.InputDeviceProfile, InControl.InputControlMapping[]> orig,
            InControl.InputDeviceProfile self, InControl.InputControlMapping[] value);

        public sealed class Params_get_IncludePlatforms
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_IncludePlatforms_BeforeArgs(Params_get_IncludePlatforms args);

        public delegate string[] get_IncludePlatforms_AfterArgs(Params_get_IncludePlatforms args, string[] ret);

        public delegate string[] get_IncludePlatforms_WithArgs(Func<InControl.InputDeviceProfile, string[]> orig,
            InControl.InputDeviceProfile self);

        public sealed class Params_set_IncludePlatforms
        {
            public InControl.InputDeviceProfile self;
            public string[] value;
        }

        public delegate void set_IncludePlatforms_BeforeArgs(Params_set_IncludePlatforms args);

        public delegate void set_IncludePlatforms_AfterArgs(Params_set_IncludePlatforms args);

        public delegate void set_IncludePlatforms_WithArgs(Action<InControl.InputDeviceProfile, string[]> orig,
            InControl.InputDeviceProfile self, string[] value);

        public sealed class Params_get_ExcludePlatforms
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_ExcludePlatforms_BeforeArgs(Params_get_ExcludePlatforms args);

        public delegate string[] get_ExcludePlatforms_AfterArgs(Params_get_ExcludePlatforms args, string[] ret);

        public delegate string[] get_ExcludePlatforms_WithArgs(Func<InControl.InputDeviceProfile, string[]> orig,
            InControl.InputDeviceProfile self);

        public sealed class Params_set_ExcludePlatforms
        {
            public InControl.InputDeviceProfile self;
            public string[] value;
        }

        public delegate void set_ExcludePlatforms_BeforeArgs(Params_set_ExcludePlatforms args);

        public delegate void set_ExcludePlatforms_AfterArgs(Params_set_ExcludePlatforms args);

        public delegate void set_ExcludePlatforms_WithArgs(Action<InControl.InputDeviceProfile, string[]> orig,
            InControl.InputDeviceProfile self, string[] value);

        public sealed class Params_get_MinSystemBuildNumber
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_MinSystemBuildNumber_BeforeArgs(Params_get_MinSystemBuildNumber args);

        public delegate int get_MinSystemBuildNumber_AfterArgs(Params_get_MinSystemBuildNumber args, int ret);

        public delegate int get_MinSystemBuildNumber_WithArgs(Func<InControl.InputDeviceProfile, int> orig,
            InControl.InputDeviceProfile self);

        public sealed class Params_set_MinSystemBuildNumber
        {
            public InControl.InputDeviceProfile self;
            public int value;
        }

        public delegate void set_MinSystemBuildNumber_BeforeArgs(Params_set_MinSystemBuildNumber args);

        public delegate void set_MinSystemBuildNumber_AfterArgs(Params_set_MinSystemBuildNumber args);

        public delegate void set_MinSystemBuildNumber_WithArgs(Action<InControl.InputDeviceProfile, int> orig,
            InControl.InputDeviceProfile self, int value);

        public sealed class Params_get_MaxSystemBuildNumber
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_MaxSystemBuildNumber_BeforeArgs(Params_get_MaxSystemBuildNumber args);

        public delegate int get_MaxSystemBuildNumber_AfterArgs(Params_get_MaxSystemBuildNumber args, int ret);

        public delegate int get_MaxSystemBuildNumber_WithArgs(Func<InControl.InputDeviceProfile, int> orig,
            InControl.InputDeviceProfile self);

        public sealed class Params_set_MaxSystemBuildNumber
        {
            public InControl.InputDeviceProfile self;
            public int value;
        }

        public delegate void set_MaxSystemBuildNumber_BeforeArgs(Params_set_MaxSystemBuildNumber args);

        public delegate void set_MaxSystemBuildNumber_AfterArgs(Params_set_MaxSystemBuildNumber args);

        public delegate void set_MaxSystemBuildNumber_WithArgs(Action<InControl.InputDeviceProfile, int> orig,
            InControl.InputDeviceProfile self, int value);

        public sealed class Params_get_MinUnityVersion
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_MinUnityVersion_BeforeArgs(Params_get_MinUnityVersion args);

        public delegate InControl.VersionInfo get_MinUnityVersion_AfterArgs(Params_get_MinUnityVersion args,
            InControl.VersionInfo ret);

        public delegate InControl.VersionInfo get_MinUnityVersion_WithArgs(
            Func<InControl.InputDeviceProfile, InControl.VersionInfo> orig, InControl.InputDeviceProfile self);

        public sealed class Params_set_MinUnityVersion
        {
            public InControl.InputDeviceProfile self;
            public InControl.VersionInfo value;
        }

        public delegate void set_MinUnityVersion_BeforeArgs(Params_set_MinUnityVersion args);

        public delegate void set_MinUnityVersion_AfterArgs(Params_set_MinUnityVersion args);

        public delegate void set_MinUnityVersion_WithArgs(
            Action<InControl.InputDeviceProfile, InControl.VersionInfo> orig, InControl.InputDeviceProfile self,
            InControl.VersionInfo value);

        public sealed class Params_get_MaxUnityVersion
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_MaxUnityVersion_BeforeArgs(Params_get_MaxUnityVersion args);

        public delegate InControl.VersionInfo get_MaxUnityVersion_AfterArgs(Params_get_MaxUnityVersion args,
            InControl.VersionInfo ret);

        public delegate InControl.VersionInfo get_MaxUnityVersion_WithArgs(
            Func<InControl.InputDeviceProfile, InControl.VersionInfo> orig, InControl.InputDeviceProfile self);

        public sealed class Params_set_MaxUnityVersion
        {
            public InControl.InputDeviceProfile self;
            public InControl.VersionInfo value;
        }

        public delegate void set_MaxUnityVersion_BeforeArgs(Params_set_MaxUnityVersion args);

        public delegate void set_MaxUnityVersion_AfterArgs(Params_set_MaxUnityVersion args);

        public delegate void set_MaxUnityVersion_WithArgs(
            Action<InControl.InputDeviceProfile, InControl.VersionInfo> orig, InControl.InputDeviceProfile self,
            InControl.VersionInfo value);

        public sealed class Params_get_Matchers
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_Matchers_BeforeArgs(Params_get_Matchers args);

        public delegate InControl.InputDeviceMatcher[] get_Matchers_AfterArgs(Params_get_Matchers args,
            InControl.InputDeviceMatcher[] ret);

        public delegate InControl.InputDeviceMatcher[] get_Matchers_WithArgs(
            Func<InControl.InputDeviceProfile, InControl.InputDeviceMatcher[]> orig, InControl.InputDeviceProfile self);

        public sealed class Params_set_Matchers
        {
            public InControl.InputDeviceProfile self;
            public InControl.InputDeviceMatcher[] value;
        }

        public delegate void set_Matchers_BeforeArgs(Params_set_Matchers args);

        public delegate void set_Matchers_AfterArgs(Params_set_Matchers args);

        public delegate void set_Matchers_WithArgs(
            Action<InControl.InputDeviceProfile, InControl.InputDeviceMatcher[]> orig,
            InControl.InputDeviceProfile self, InControl.InputDeviceMatcher[] value);

        public sealed class Params_get_LastResortMatchers
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_LastResortMatchers_BeforeArgs(Params_get_LastResortMatchers args);

        public delegate InControl.InputDeviceMatcher[] get_LastResortMatchers_AfterArgs(
            Params_get_LastResortMatchers args, InControl.InputDeviceMatcher[] ret);

        public delegate InControl.InputDeviceMatcher[] get_LastResortMatchers_WithArgs(
            Func<InControl.InputDeviceProfile, InControl.InputDeviceMatcher[]> orig, InControl.InputDeviceProfile self);

        public sealed class Params_set_LastResortMatchers
        {
            public InControl.InputDeviceProfile self;
            public InControl.InputDeviceMatcher[] value;
        }

        public delegate void set_LastResortMatchers_BeforeArgs(Params_set_LastResortMatchers args);

        public delegate void set_LastResortMatchers_AfterArgs(Params_set_LastResortMatchers args);

        public delegate void set_LastResortMatchers_WithArgs(
            Action<InControl.InputDeviceProfile, InControl.InputDeviceMatcher[]> orig,
            InControl.InputDeviceProfile self, InControl.InputDeviceMatcher[] value);

        public sealed class Params_CreateInstanceOfType_Type
        {
            public System.Type type;
        }

        public delegate void CreateInstanceOfType_Type_BeforeArgs(Params_CreateInstanceOfType_Type args);

        public delegate InControl.InputDeviceProfile CreateInstanceOfType_Type_AfterArgs(
            Params_CreateInstanceOfType_Type args, InControl.InputDeviceProfile ret);

        public delegate InControl.InputDeviceProfile CreateInstanceOfType_Type_WithArgs(
            Func<System.Type, InControl.InputDeviceProfile> orig, System.Type type);

        public sealed class Params_CreateInstanceOfType_string
        {
            public string typeName;
        }

        public delegate void CreateInstanceOfType_string_BeforeArgs(Params_CreateInstanceOfType_string args);

        public delegate InControl.InputDeviceProfile CreateInstanceOfType_string_AfterArgs(
            Params_CreateInstanceOfType_string args, InControl.InputDeviceProfile ret);

        public delegate InControl.InputDeviceProfile CreateInstanceOfType_string_WithArgs(
            Func<string, InControl.InputDeviceProfile> orig, string typeName);

        public sealed class Params_Define
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void Define_BeforeArgs(Params_Define args);

        public delegate void Define_AfterArgs(Params_Define args);

        public delegate void Define_WithArgs(Action<InControl.InputDeviceProfile> orig,
            InControl.InputDeviceProfile self);

        public sealed class Params_Matches_InputDeviceInfo
        {
            public InControl.InputDeviceProfile self;
            public InControl.InputDeviceInfo deviceInfo;
        }

        public delegate void Matches_InputDeviceInfo_BeforeArgs(Params_Matches_InputDeviceInfo args);

        public delegate bool Matches_InputDeviceInfo_AfterArgs(Params_Matches_InputDeviceInfo args, bool ret);

        public delegate bool Matches_InputDeviceInfo_WithArgs(
            Func<InControl.InputDeviceProfile, InControl.InputDeviceInfo, bool> orig, InControl.InputDeviceProfile self,
            InControl.InputDeviceInfo deviceInfo);

        public sealed class Params_LastResortMatches
        {
            public InControl.InputDeviceProfile self;
            public InControl.InputDeviceInfo deviceInfo;
        }

        public delegate void LastResortMatches_BeforeArgs(Params_LastResortMatches args);

        public delegate bool LastResortMatches_AfterArgs(Params_LastResortMatches args, bool ret);

        public delegate bool LastResortMatches_WithArgs(
            Func<InControl.InputDeviceProfile, InControl.InputDeviceInfo, bool> orig, InControl.InputDeviceProfile self,
            InControl.InputDeviceInfo deviceInfo);

        public sealed class Params_Matches_InputDeviceInfo_Array
        {
            public InControl.InputDeviceProfile self;
            public InControl.InputDeviceInfo deviceInfo;
            public InControl.InputDeviceMatcher[] matchers;
        }

        public delegate void Matches_InputDeviceInfo_Array_BeforeArgs(Params_Matches_InputDeviceInfo_Array args);

        public delegate bool Matches_InputDeviceInfo_Array_AfterArgs(Params_Matches_InputDeviceInfo_Array args,
            bool ret);

        public delegate bool Matches_InputDeviceInfo_Array_WithArgs(
            Func<InControl.InputDeviceProfile, InControl.InputDeviceInfo, InControl.InputDeviceMatcher[], bool> orig,
            InControl.InputDeviceProfile self, InControl.InputDeviceInfo deviceInfo,
            InControl.InputDeviceMatcher[] matchers);

        public sealed class Params_get_IsSupportedOnThisPlatform
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_IsSupportedOnThisPlatform_BeforeArgs(Params_get_IsSupportedOnThisPlatform args);

        public delegate bool get_IsSupportedOnThisPlatform_AfterArgs(Params_get_IsSupportedOnThisPlatform args,
            bool ret);

        public delegate bool get_IsSupportedOnThisPlatform_WithArgs(Func<InControl.InputDeviceProfile, bool> orig,
            InControl.InputDeviceProfile self);

        public sealed class Params_Hide
        {
            public System.Type type;
        }

        public delegate void Hide_BeforeArgs(Params_Hide args);

        public delegate void Hide_AfterArgs(Params_Hide args);

        public delegate void Hide_WithArgs(Action<System.Type> orig, System.Type type);

        public sealed class Params_get_IsHidden
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_IsHidden_BeforeArgs(Params_get_IsHidden args);

        public delegate bool get_IsHidden_AfterArgs(Params_get_IsHidden args, bool ret);

        public delegate bool get_IsHidden_WithArgs(Func<InControl.InputDeviceProfile, bool> orig,
            InControl.InputDeviceProfile self);

        public sealed class Params_get_IsNotHidden
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_IsNotHidden_BeforeArgs(Params_get_IsNotHidden args);

        public delegate bool get_IsNotHidden_AfterArgs(Params_get_IsNotHidden args, bool ret);

        public delegate bool get_IsNotHidden_WithArgs(Func<InControl.InputDeviceProfile, bool> orig,
            InControl.InputDeviceProfile self);

        public sealed class Params_get_AnalogCount
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_AnalogCount_BeforeArgs(Params_get_AnalogCount args);

        public delegate int get_AnalogCount_AfterArgs(Params_get_AnalogCount args, int ret);

        public delegate int get_AnalogCount_WithArgs(Func<InControl.InputDeviceProfile, int> orig,
            InControl.InputDeviceProfile self);

        public sealed class Params_get_ButtonCount
        {
            public InControl.InputDeviceProfile self;
        }

        public delegate void get_ButtonCount_BeforeArgs(Params_get_ButtonCount args);

        public delegate int get_ButtonCount_AfterArgs(Params_get_ButtonCount args, int ret);

        public delegate int get_ButtonCount_WithArgs(Func<InControl.InputDeviceProfile, int> orig,
            InControl.InputDeviceProfile self);

        public sealed class Params_Button
        {
            public int index;
        }

        public delegate void Button_BeforeArgs(Params_Button args);

        public delegate InControl.InputControlSource Button_AfterArgs(Params_Button args,
            InControl.InputControlSource ret);

        public delegate InControl.InputControlSource Button_WithArgs(Func<int, InControl.InputControlSource> orig,
            int index);

        public sealed class Params_Analog
        {
            public int index;
        }

        public delegate void Analog_BeforeArgs(Params_Analog args);

        public delegate InControl.InputControlSource Analog_AfterArgs(Params_Analog args,
            InControl.InputControlSource ret);

        public delegate InControl.InputControlSource Analog_WithArgs(Func<int, InControl.InputControlSource> orig,
            int index);

        public sealed class Params_LeftStickLeftMapping
        {
            public int analog;
        }

        public delegate void LeftStickLeftMapping_BeforeArgs(Params_LeftStickLeftMapping args);

        public delegate InControl.InputControlMapping LeftStickLeftMapping_AfterArgs(Params_LeftStickLeftMapping args,
            InControl.InputControlMapping ret);

        public delegate InControl.InputControlMapping LeftStickLeftMapping_WithArgs(
            Func<int, InControl.InputControlMapping> orig, int analog);

        public sealed class Params_LeftStickRightMapping
        {
            public int analog;
        }

        public delegate void LeftStickRightMapping_BeforeArgs(Params_LeftStickRightMapping args);

        public delegate InControl.InputControlMapping LeftStickRightMapping_AfterArgs(Params_LeftStickRightMapping args,
            InControl.InputControlMapping ret);

        public delegate InControl.InputControlMapping LeftStickRightMapping_WithArgs(
            Func<int, InControl.InputControlMapping> orig, int analog);

        public sealed class Params_LeftStickUpMapping
        {
            public int analog;
        }

        public delegate void LeftStickUpMapping_BeforeArgs(Params_LeftStickUpMapping args);

        public delegate InControl.InputControlMapping LeftStickUpMapping_AfterArgs(Params_LeftStickUpMapping args,
            InControl.InputControlMapping ret);

        public delegate InControl.InputControlMapping LeftStickUpMapping_WithArgs(
            Func<int, InControl.InputControlMapping> orig, int analog);

        public sealed class Params_LeftStickDownMapping
        {
            public int analog;
        }

        public delegate void LeftStickDownMapping_BeforeArgs(Params_LeftStickDownMapping args);

        public delegate InControl.InputControlMapping LeftStickDownMapping_AfterArgs(Params_LeftStickDownMapping args,
            InControl.InputControlMapping ret);

        public delegate InControl.InputControlMapping LeftStickDownMapping_WithArgs(
            Func<int, InControl.InputControlMapping> orig, int analog);

        public sealed class Params_LeftStickUpMapping2
        {
            public int analog;
        }

        public delegate void LeftStickUpMapping2_BeforeArgs(Params_LeftStickUpMapping2 args);

        public delegate InControl.InputControlMapping LeftStickUpMapping2_AfterArgs(Params_LeftStickUpMapping2 args,
            InControl.InputControlMapping ret);

        public delegate InControl.InputControlMapping LeftStickUpMapping2_WithArgs(
            Func<int, InControl.InputControlMapping> orig, int analog);

        public sealed class Params_LeftStickDownMapping2
        {
            public int analog;
        }

        public delegate void LeftStickDownMapping2_BeforeArgs(Params_LeftStickDownMapping2 args);

        public delegate InControl.InputControlMapping LeftStickDownMapping2_AfterArgs(Params_LeftStickDownMapping2 args,
            InControl.InputControlMapping ret);

        public delegate InControl.InputControlMapping LeftStickDownMapping2_WithArgs(
            Func<int, InControl.InputControlMapping> orig, int analog);

        public sealed class Params_RightStickLeftMapping
        {
            public int analog;
        }

        public delegate void RightStickLeftMapping_BeforeArgs(Params_RightStickLeftMapping args);

        public delegate InControl.InputControlMapping RightStickLeftMapping_AfterArgs(Params_RightStickLeftMapping args,
            InControl.InputControlMapping ret);

        public delegate InControl.InputControlMapping RightStickLeftMapping_WithArgs(
            Func<int, InControl.InputControlMapping> orig, int analog);

        public sealed class Params_RightStickRightMapping
        {
            public int analog;
        }

        public delegate void RightStickRightMapping_BeforeArgs(Params_RightStickRightMapping args);

        public delegate InControl.InputControlMapping RightStickRightMapping_AfterArgs(
            Params_RightStickRightMapping args, InControl.InputControlMapping ret);

        public delegate InControl.InputControlMapping RightStickRightMapping_WithArgs(
            Func<int, InControl.InputControlMapping> orig, int analog);

        public sealed class Params_RightStickUpMapping
        {
            public int analog;
        }

        public delegate void RightStickUpMapping_BeforeArgs(Params_RightStickUpMapping args);

        public delegate InControl.InputControlMapping RightStickUpMapping_AfterArgs(Params_RightStickUpMapping args,
            InControl.InputControlMapping ret);

        public delegate InControl.InputControlMapping RightStickUpMapping_WithArgs(
            Func<int, InControl.InputControlMapping> orig, int analog);

        public sealed class Params_RightStickDownMapping
        {
            public int analog;
        }

        public delegate void RightStickDownMapping_BeforeArgs(Params_RightStickDownMapping args);

        public delegate InControl.InputControlMapping RightStickDownMapping_AfterArgs(Params_RightStickDownMapping args,
            InControl.InputControlMapping ret);

        public delegate InControl.InputControlMapping RightStickDownMapping_WithArgs(
            Func<int, InControl.InputControlMapping> orig, int analog);

        public sealed class Params_RightStickUpMapping2
        {
            public int analog;
        }

        public delegate void RightStickUpMapping2_BeforeArgs(Params_RightStickUpMapping2 args);

        public delegate InControl.InputControlMapping RightStickUpMapping2_AfterArgs(Params_RightStickUpMapping2 args,
            InControl.InputControlMapping ret);

        public delegate InControl.InputControlMapping RightStickUpMapping2_WithArgs(
            Func<int, InControl.InputControlMapping> orig, int analog);

        public sealed class Params_RightStickDownMapping2
        {
            public int analog;
        }

        public delegate void RightStickDownMapping2_BeforeArgs(Params_RightStickDownMapping2 args);

        public delegate InControl.InputControlMapping RightStickDownMapping2_AfterArgs(
            Params_RightStickDownMapping2 args, InControl.InputControlMapping ret);

        public delegate InControl.InputControlMapping RightStickDownMapping2_WithArgs(
            Func<int, InControl.InputControlMapping> orig, int analog);

        public sealed class Params_LeftTriggerMapping
        {
            public int analog;
        }

        public delegate void LeftTriggerMapping_BeforeArgs(Params_LeftTriggerMapping args);

        public delegate InControl.InputControlMapping LeftTriggerMapping_AfterArgs(Params_LeftTriggerMapping args,
            InControl.InputControlMapping ret);

        public delegate InControl.InputControlMapping LeftTriggerMapping_WithArgs(
            Func<int, InControl.InputControlMapping> orig, int analog);

        public sealed class Params_RightTriggerMapping
        {
            public int analog;
        }

        public delegate void RightTriggerMapping_BeforeArgs(Params_RightTriggerMapping args);

        public delegate InControl.InputControlMapping RightTriggerMapping_AfterArgs(Params_RightTriggerMapping args,
            InControl.InputControlMapping ret);

        public delegate InControl.InputControlMapping RightTriggerMapping_WithArgs(
            Func<int, InControl.InputControlMapping> orig, int analog);

        public sealed class Params_DPadLeftMapping
        {
            public int analog;
        }

        public delegate void DPadLeftMapping_BeforeArgs(Params_DPadLeftMapping args);

        public delegate InControl.InputControlMapping DPadLeftMapping_AfterArgs(Params_DPadLeftMapping args,
            InControl.InputControlMapping ret);

        public delegate InControl.InputControlMapping DPadLeftMapping_WithArgs(
            Func<int, InControl.InputControlMapping> orig, int analog);

        public sealed class Params_DPadRightMapping
        {
            public int analog;
        }

        public delegate void DPadRightMapping_BeforeArgs(Params_DPadRightMapping args);

        public delegate InControl.InputControlMapping DPadRightMapping_AfterArgs(Params_DPadRightMapping args,
            InControl.InputControlMapping ret);

        public delegate InControl.InputControlMapping DPadRightMapping_WithArgs(
            Func<int, InControl.InputControlMapping> orig, int analog);

        public sealed class Params_DPadUpMapping
        {
            public int analog;
        }

        public delegate void DPadUpMapping_BeforeArgs(Params_DPadUpMapping args);

        public delegate InControl.InputControlMapping DPadUpMapping_AfterArgs(Params_DPadUpMapping args,
            InControl.InputControlMapping ret);

        public delegate InControl.InputControlMapping DPadUpMapping_WithArgs(
            Func<int, InControl.InputControlMapping> orig, int analog);

        public sealed class Params_DPadDownMapping
        {
            public int analog;
        }

        public delegate void DPadDownMapping_BeforeArgs(Params_DPadDownMapping args);

        public delegate InControl.InputControlMapping DPadDownMapping_AfterArgs(Params_DPadDownMapping args,
            InControl.InputControlMapping ret);

        public delegate InControl.InputControlMapping DPadDownMapping_WithArgs(
            Func<int, InControl.InputControlMapping> orig, int analog);

        public sealed class Params_DPadUpMapping2
        {
            public int analog;
        }

        public delegate void DPadUpMapping2_BeforeArgs(Params_DPadUpMapping2 args);

        public delegate InControl.InputControlMapping DPadUpMapping2_AfterArgs(Params_DPadUpMapping2 args,
            InControl.InputControlMapping ret);

        public delegate InControl.InputControlMapping DPadUpMapping2_WithArgs(
            Func<int, InControl.InputControlMapping> orig, int analog);

        public sealed class Params_DPadDownMapping2
        {
            public int analog;
        }

        public delegate void DPadDownMapping2_BeforeArgs(Params_DPadDownMapping2 args);

        public delegate InControl.InputControlMapping DPadDownMapping2_AfterArgs(Params_DPadDownMapping2 args,
            InControl.InputControlMapping ret);

        public delegate InControl.InputControlMapping DPadDownMapping2_WithArgs(
            Func<int, InControl.InputControlMapping> orig, int analog);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_ProfileType_BeforeArgs get_ProfileType
        {
            add
            {
                HookHandler._beforeget_ProfileType += value;
                HookHandler.Hookget_ProfileType();
            }
            remove => HookHandler._beforeget_ProfileType -= value;
        }

        public static event Delegates.set_ProfileType_BeforeArgs set_ProfileType
        {
            add
            {
                HookHandler._beforeset_ProfileType += value;
                HookHandler.Hookset_ProfileType();
            }
            remove => HookHandler._beforeset_ProfileType -= value;
        }

        public static event Delegates.get_DeviceName_BeforeArgs get_DeviceName
        {
            add
            {
                HookHandler._beforeget_DeviceName += value;
                HookHandler.Hookget_DeviceName();
            }
            remove => HookHandler._beforeget_DeviceName -= value;
        }

        public static event Delegates.set_DeviceName_BeforeArgs set_DeviceName
        {
            add
            {
                HookHandler._beforeset_DeviceName += value;
                HookHandler.Hookset_DeviceName();
            }
            remove => HookHandler._beforeset_DeviceName -= value;
        }

        public static event Delegates.get_DeviceNotes_BeforeArgs get_DeviceNotes
        {
            add
            {
                HookHandler._beforeget_DeviceNotes += value;
                HookHandler.Hookget_DeviceNotes();
            }
            remove => HookHandler._beforeget_DeviceNotes -= value;
        }

        public static event Delegates.set_DeviceNotes_BeforeArgs set_DeviceNotes
        {
            add
            {
                HookHandler._beforeset_DeviceNotes += value;
                HookHandler.Hookset_DeviceNotes();
            }
            remove => HookHandler._beforeset_DeviceNotes -= value;
        }

        public static event Delegates.get_DeviceClass_BeforeArgs get_DeviceClass
        {
            add
            {
                HookHandler._beforeget_DeviceClass += value;
                HookHandler.Hookget_DeviceClass();
            }
            remove => HookHandler._beforeget_DeviceClass -= value;
        }

        public static event Delegates.set_DeviceClass_BeforeArgs set_DeviceClass
        {
            add
            {
                HookHandler._beforeset_DeviceClass += value;
                HookHandler.Hookset_DeviceClass();
            }
            remove => HookHandler._beforeset_DeviceClass -= value;
        }

        public static event Delegates.get_DeviceStyle_BeforeArgs get_DeviceStyle
        {
            add
            {
                HookHandler._beforeget_DeviceStyle += value;
                HookHandler.Hookget_DeviceStyle();
            }
            remove => HookHandler._beforeget_DeviceStyle -= value;
        }

        public static event Delegates.set_DeviceStyle_BeforeArgs set_DeviceStyle
        {
            add
            {
                HookHandler._beforeset_DeviceStyle += value;
                HookHandler.Hookset_DeviceStyle();
            }
            remove => HookHandler._beforeset_DeviceStyle -= value;
        }

        public static event Delegates.get_Sensitivity_BeforeArgs get_Sensitivity
        {
            add
            {
                HookHandler._beforeget_Sensitivity += value;
                HookHandler.Hookget_Sensitivity();
            }
            remove => HookHandler._beforeget_Sensitivity -= value;
        }

        public static event Delegates.set_Sensitivity_BeforeArgs set_Sensitivity
        {
            add
            {
                HookHandler._beforeset_Sensitivity += value;
                HookHandler.Hookset_Sensitivity();
            }
            remove => HookHandler._beforeset_Sensitivity -= value;
        }

        public static event Delegates.get_LowerDeadZone_BeforeArgs get_LowerDeadZone
        {
            add
            {
                HookHandler._beforeget_LowerDeadZone += value;
                HookHandler.Hookget_LowerDeadZone();
            }
            remove => HookHandler._beforeget_LowerDeadZone -= value;
        }

        public static event Delegates.set_LowerDeadZone_BeforeArgs set_LowerDeadZone
        {
            add
            {
                HookHandler._beforeset_LowerDeadZone += value;
                HookHandler.Hookset_LowerDeadZone();
            }
            remove => HookHandler._beforeset_LowerDeadZone -= value;
        }

        public static event Delegates.get_UpperDeadZone_BeforeArgs get_UpperDeadZone
        {
            add
            {
                HookHandler._beforeget_UpperDeadZone += value;
                HookHandler.Hookget_UpperDeadZone();
            }
            remove => HookHandler._beforeget_UpperDeadZone -= value;
        }

        public static event Delegates.set_UpperDeadZone_BeforeArgs set_UpperDeadZone
        {
            add
            {
                HookHandler._beforeset_UpperDeadZone += value;
                HookHandler.Hookset_UpperDeadZone();
            }
            remove => HookHandler._beforeset_UpperDeadZone -= value;
        }

        public static event Delegates.get_AnalogMappings_BeforeArgs get_AnalogMappings
        {
            add
            {
                HookHandler._beforeget_AnalogMappings += value;
                HookHandler.Hookget_AnalogMappings();
            }
            remove => HookHandler._beforeget_AnalogMappings -= value;
        }

        public static event Delegates.set_AnalogMappings_BeforeArgs set_AnalogMappings
        {
            add
            {
                HookHandler._beforeset_AnalogMappings += value;
                HookHandler.Hookset_AnalogMappings();
            }
            remove => HookHandler._beforeset_AnalogMappings -= value;
        }

        public static event Delegates.get_ButtonMappings_BeforeArgs get_ButtonMappings
        {
            add
            {
                HookHandler._beforeget_ButtonMappings += value;
                HookHandler.Hookget_ButtonMappings();
            }
            remove => HookHandler._beforeget_ButtonMappings -= value;
        }

        public static event Delegates.set_ButtonMappings_BeforeArgs set_ButtonMappings
        {
            add
            {
                HookHandler._beforeset_ButtonMappings += value;
                HookHandler.Hookset_ButtonMappings();
            }
            remove => HookHandler._beforeset_ButtonMappings -= value;
        }

        public static event Delegates.get_IncludePlatforms_BeforeArgs get_IncludePlatforms
        {
            add
            {
                HookHandler._beforeget_IncludePlatforms += value;
                HookHandler.Hookget_IncludePlatforms();
            }
            remove => HookHandler._beforeget_IncludePlatforms -= value;
        }

        public static event Delegates.set_IncludePlatforms_BeforeArgs set_IncludePlatforms
        {
            add
            {
                HookHandler._beforeset_IncludePlatforms += value;
                HookHandler.Hookset_IncludePlatforms();
            }
            remove => HookHandler._beforeset_IncludePlatforms -= value;
        }

        public static event Delegates.get_ExcludePlatforms_BeforeArgs get_ExcludePlatforms
        {
            add
            {
                HookHandler._beforeget_ExcludePlatforms += value;
                HookHandler.Hookget_ExcludePlatforms();
            }
            remove => HookHandler._beforeget_ExcludePlatforms -= value;
        }

        public static event Delegates.set_ExcludePlatforms_BeforeArgs set_ExcludePlatforms
        {
            add
            {
                HookHandler._beforeset_ExcludePlatforms += value;
                HookHandler.Hookset_ExcludePlatforms();
            }
            remove => HookHandler._beforeset_ExcludePlatforms -= value;
        }

        public static event Delegates.get_MinSystemBuildNumber_BeforeArgs get_MinSystemBuildNumber
        {
            add
            {
                HookHandler._beforeget_MinSystemBuildNumber += value;
                HookHandler.Hookget_MinSystemBuildNumber();
            }
            remove => HookHandler._beforeget_MinSystemBuildNumber -= value;
        }

        public static event Delegates.set_MinSystemBuildNumber_BeforeArgs set_MinSystemBuildNumber
        {
            add
            {
                HookHandler._beforeset_MinSystemBuildNumber += value;
                HookHandler.Hookset_MinSystemBuildNumber();
            }
            remove => HookHandler._beforeset_MinSystemBuildNumber -= value;
        }

        public static event Delegates.get_MaxSystemBuildNumber_BeforeArgs get_MaxSystemBuildNumber
        {
            add
            {
                HookHandler._beforeget_MaxSystemBuildNumber += value;
                HookHandler.Hookget_MaxSystemBuildNumber();
            }
            remove => HookHandler._beforeget_MaxSystemBuildNumber -= value;
        }

        public static event Delegates.set_MaxSystemBuildNumber_BeforeArgs set_MaxSystemBuildNumber
        {
            add
            {
                HookHandler._beforeset_MaxSystemBuildNumber += value;
                HookHandler.Hookset_MaxSystemBuildNumber();
            }
            remove => HookHandler._beforeset_MaxSystemBuildNumber -= value;
        }

        public static event Delegates.get_MinUnityVersion_BeforeArgs get_MinUnityVersion
        {
            add
            {
                HookHandler._beforeget_MinUnityVersion += value;
                HookHandler.Hookget_MinUnityVersion();
            }
            remove => HookHandler._beforeget_MinUnityVersion -= value;
        }

        public static event Delegates.set_MinUnityVersion_BeforeArgs set_MinUnityVersion
        {
            add
            {
                HookHandler._beforeset_MinUnityVersion += value;
                HookHandler.Hookset_MinUnityVersion();
            }
            remove => HookHandler._beforeset_MinUnityVersion -= value;
        }

        public static event Delegates.get_MaxUnityVersion_BeforeArgs get_MaxUnityVersion
        {
            add
            {
                HookHandler._beforeget_MaxUnityVersion += value;
                HookHandler.Hookget_MaxUnityVersion();
            }
            remove => HookHandler._beforeget_MaxUnityVersion -= value;
        }

        public static event Delegates.set_MaxUnityVersion_BeforeArgs set_MaxUnityVersion
        {
            add
            {
                HookHandler._beforeset_MaxUnityVersion += value;
                HookHandler.Hookset_MaxUnityVersion();
            }
            remove => HookHandler._beforeset_MaxUnityVersion -= value;
        }

        public static event Delegates.get_Matchers_BeforeArgs get_Matchers
        {
            add
            {
                HookHandler._beforeget_Matchers += value;
                HookHandler.Hookget_Matchers();
            }
            remove => HookHandler._beforeget_Matchers -= value;
        }

        public static event Delegates.set_Matchers_BeforeArgs set_Matchers
        {
            add
            {
                HookHandler._beforeset_Matchers += value;
                HookHandler.Hookset_Matchers();
            }
            remove => HookHandler._beforeset_Matchers -= value;
        }

        public static event Delegates.get_LastResortMatchers_BeforeArgs get_LastResortMatchers
        {
            add
            {
                HookHandler._beforeget_LastResortMatchers += value;
                HookHandler.Hookget_LastResortMatchers();
            }
            remove => HookHandler._beforeget_LastResortMatchers -= value;
        }

        public static event Delegates.set_LastResortMatchers_BeforeArgs set_LastResortMatchers
        {
            add
            {
                HookHandler._beforeset_LastResortMatchers += value;
                HookHandler.Hookset_LastResortMatchers();
            }
            remove => HookHandler._beforeset_LastResortMatchers -= value;
        }

        public static event Delegates.CreateInstanceOfType_Type_BeforeArgs CreateInstanceOfType_Type
        {
            add
            {
                HookHandler._beforeCreateInstanceOfType_Type += value;
                HookHandler.HookCreateInstanceOfType_Type();
            }
            remove => HookHandler._beforeCreateInstanceOfType_Type -= value;
        }

        public static event Delegates.CreateInstanceOfType_string_BeforeArgs CreateInstanceOfType_string
        {
            add
            {
                HookHandler._beforeCreateInstanceOfType_string += value;
                HookHandler.HookCreateInstanceOfType_string();
            }
            remove => HookHandler._beforeCreateInstanceOfType_string -= value;
        }

        public static event Delegates.Define_BeforeArgs Define
        {
            add
            {
                HookHandler._beforeDefine += value;
                HookHandler.HookDefine();
            }
            remove => HookHandler._beforeDefine -= value;
        }

        public static event Delegates.Matches_InputDeviceInfo_BeforeArgs Matches_InputDeviceInfo
        {
            add
            {
                HookHandler._beforeMatches_InputDeviceInfo += value;
                HookHandler.HookMatches_InputDeviceInfo();
            }
            remove => HookHandler._beforeMatches_InputDeviceInfo -= value;
        }

        public static event Delegates.LastResortMatches_BeforeArgs LastResortMatches
        {
            add
            {
                HookHandler._beforeLastResortMatches += value;
                HookHandler.HookLastResortMatches();
            }
            remove => HookHandler._beforeLastResortMatches -= value;
        }

        public static event Delegates.Matches_InputDeviceInfo_Array_BeforeArgs Matches_InputDeviceInfo_Array
        {
            add
            {
                HookHandler._beforeMatches_InputDeviceInfo_Array += value;
                HookHandler.HookMatches_InputDeviceInfo_Array();
            }
            remove => HookHandler._beforeMatches_InputDeviceInfo_Array -= value;
        }

        public static event Delegates.get_IsSupportedOnThisPlatform_BeforeArgs get_IsSupportedOnThisPlatform
        {
            add
            {
                HookHandler._beforeget_IsSupportedOnThisPlatform += value;
                HookHandler.Hookget_IsSupportedOnThisPlatform();
            }
            remove => HookHandler._beforeget_IsSupportedOnThisPlatform -= value;
        }

        public static event Delegates.Hide_BeforeArgs Hide
        {
            add
            {
                HookHandler._beforeHide += value;
                HookHandler.HookHide();
            }
            remove => HookHandler._beforeHide -= value;
        }

        public static event Delegates.get_IsHidden_BeforeArgs get_IsHidden
        {
            add
            {
                HookHandler._beforeget_IsHidden += value;
                HookHandler.Hookget_IsHidden();
            }
            remove => HookHandler._beforeget_IsHidden -= value;
        }

        public static event Delegates.get_IsNotHidden_BeforeArgs get_IsNotHidden
        {
            add
            {
                HookHandler._beforeget_IsNotHidden += value;
                HookHandler.Hookget_IsNotHidden();
            }
            remove => HookHandler._beforeget_IsNotHidden -= value;
        }

        public static event Delegates.get_AnalogCount_BeforeArgs get_AnalogCount
        {
            add
            {
                HookHandler._beforeget_AnalogCount += value;
                HookHandler.Hookget_AnalogCount();
            }
            remove => HookHandler._beforeget_AnalogCount -= value;
        }

        public static event Delegates.get_ButtonCount_BeforeArgs get_ButtonCount
        {
            add
            {
                HookHandler._beforeget_ButtonCount += value;
                HookHandler.Hookget_ButtonCount();
            }
            remove => HookHandler._beforeget_ButtonCount -= value;
        }

        public static event Delegates.Button_BeforeArgs Button
        {
            add
            {
                HookHandler._beforeButton += value;
                HookHandler.HookButton();
            }
            remove => HookHandler._beforeButton -= value;
        }

        public static event Delegates.Analog_BeforeArgs Analog
        {
            add
            {
                HookHandler._beforeAnalog += value;
                HookHandler.HookAnalog();
            }
            remove => HookHandler._beforeAnalog -= value;
        }

        public static event Delegates.LeftStickLeftMapping_BeforeArgs LeftStickLeftMapping
        {
            add
            {
                HookHandler._beforeLeftStickLeftMapping += value;
                HookHandler.HookLeftStickLeftMapping();
            }
            remove => HookHandler._beforeLeftStickLeftMapping -= value;
        }

        public static event Delegates.LeftStickRightMapping_BeforeArgs LeftStickRightMapping
        {
            add
            {
                HookHandler._beforeLeftStickRightMapping += value;
                HookHandler.HookLeftStickRightMapping();
            }
            remove => HookHandler._beforeLeftStickRightMapping -= value;
        }

        public static event Delegates.LeftStickUpMapping_BeforeArgs LeftStickUpMapping
        {
            add
            {
                HookHandler._beforeLeftStickUpMapping += value;
                HookHandler.HookLeftStickUpMapping();
            }
            remove => HookHandler._beforeLeftStickUpMapping -= value;
        }

        public static event Delegates.LeftStickDownMapping_BeforeArgs LeftStickDownMapping
        {
            add
            {
                HookHandler._beforeLeftStickDownMapping += value;
                HookHandler.HookLeftStickDownMapping();
            }
            remove => HookHandler._beforeLeftStickDownMapping -= value;
        }

        public static event Delegates.LeftStickUpMapping2_BeforeArgs LeftStickUpMapping2
        {
            add
            {
                HookHandler._beforeLeftStickUpMapping2 += value;
                HookHandler.HookLeftStickUpMapping2();
            }
            remove => HookHandler._beforeLeftStickUpMapping2 -= value;
        }

        public static event Delegates.LeftStickDownMapping2_BeforeArgs LeftStickDownMapping2
        {
            add
            {
                HookHandler._beforeLeftStickDownMapping2 += value;
                HookHandler.HookLeftStickDownMapping2();
            }
            remove => HookHandler._beforeLeftStickDownMapping2 -= value;
        }

        public static event Delegates.RightStickLeftMapping_BeforeArgs RightStickLeftMapping
        {
            add
            {
                HookHandler._beforeRightStickLeftMapping += value;
                HookHandler.HookRightStickLeftMapping();
            }
            remove => HookHandler._beforeRightStickLeftMapping -= value;
        }

        public static event Delegates.RightStickRightMapping_BeforeArgs RightStickRightMapping
        {
            add
            {
                HookHandler._beforeRightStickRightMapping += value;
                HookHandler.HookRightStickRightMapping();
            }
            remove => HookHandler._beforeRightStickRightMapping -= value;
        }

        public static event Delegates.RightStickUpMapping_BeforeArgs RightStickUpMapping
        {
            add
            {
                HookHandler._beforeRightStickUpMapping += value;
                HookHandler.HookRightStickUpMapping();
            }
            remove => HookHandler._beforeRightStickUpMapping -= value;
        }

        public static event Delegates.RightStickDownMapping_BeforeArgs RightStickDownMapping
        {
            add
            {
                HookHandler._beforeRightStickDownMapping += value;
                HookHandler.HookRightStickDownMapping();
            }
            remove => HookHandler._beforeRightStickDownMapping -= value;
        }

        public static event Delegates.RightStickUpMapping2_BeforeArgs RightStickUpMapping2
        {
            add
            {
                HookHandler._beforeRightStickUpMapping2 += value;
                HookHandler.HookRightStickUpMapping2();
            }
            remove => HookHandler._beforeRightStickUpMapping2 -= value;
        }

        public static event Delegates.RightStickDownMapping2_BeforeArgs RightStickDownMapping2
        {
            add
            {
                HookHandler._beforeRightStickDownMapping2 += value;
                HookHandler.HookRightStickDownMapping2();
            }
            remove => HookHandler._beforeRightStickDownMapping2 -= value;
        }

        public static event Delegates.LeftTriggerMapping_BeforeArgs LeftTriggerMapping
        {
            add
            {
                HookHandler._beforeLeftTriggerMapping += value;
                HookHandler.HookLeftTriggerMapping();
            }
            remove => HookHandler._beforeLeftTriggerMapping -= value;
        }

        public static event Delegates.RightTriggerMapping_BeforeArgs RightTriggerMapping
        {
            add
            {
                HookHandler._beforeRightTriggerMapping += value;
                HookHandler.HookRightTriggerMapping();
            }
            remove => HookHandler._beforeRightTriggerMapping -= value;
        }

        public static event Delegates.DPadLeftMapping_BeforeArgs DPadLeftMapping
        {
            add
            {
                HookHandler._beforeDPadLeftMapping += value;
                HookHandler.HookDPadLeftMapping();
            }
            remove => HookHandler._beforeDPadLeftMapping -= value;
        }

        public static event Delegates.DPadRightMapping_BeforeArgs DPadRightMapping
        {
            add
            {
                HookHandler._beforeDPadRightMapping += value;
                HookHandler.HookDPadRightMapping();
            }
            remove => HookHandler._beforeDPadRightMapping -= value;
        }

        public static event Delegates.DPadUpMapping_BeforeArgs DPadUpMapping
        {
            add
            {
                HookHandler._beforeDPadUpMapping += value;
                HookHandler.HookDPadUpMapping();
            }
            remove => HookHandler._beforeDPadUpMapping -= value;
        }

        public static event Delegates.DPadDownMapping_BeforeArgs DPadDownMapping
        {
            add
            {
                HookHandler._beforeDPadDownMapping += value;
                HookHandler.HookDPadDownMapping();
            }
            remove => HookHandler._beforeDPadDownMapping -= value;
        }

        public static event Delegates.DPadUpMapping2_BeforeArgs DPadUpMapping2
        {
            add
            {
                HookHandler._beforeDPadUpMapping2 += value;
                HookHandler.HookDPadUpMapping2();
            }
            remove => HookHandler._beforeDPadUpMapping2 -= value;
        }

        public static event Delegates.DPadDownMapping2_BeforeArgs DPadDownMapping2
        {
            add
            {
                HookHandler._beforeDPadDownMapping2 += value;
                HookHandler.HookDPadDownMapping2();
            }
            remove => HookHandler._beforeDPadDownMapping2 -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_ProfileType_AfterArgs get_ProfileType
        {
            add
            {
                HookHandler._afterget_ProfileType += value;
                HookHandler.Hookget_ProfileType();
            }
            remove => HookHandler._afterget_ProfileType -= value;
        }

        public static event Delegates.set_ProfileType_AfterArgs set_ProfileType
        {
            add
            {
                HookHandler._afterset_ProfileType += value;
                HookHandler.Hookset_ProfileType();
            }
            remove => HookHandler._afterset_ProfileType -= value;
        }

        public static event Delegates.get_DeviceName_AfterArgs get_DeviceName
        {
            add
            {
                HookHandler._afterget_DeviceName += value;
                HookHandler.Hookget_DeviceName();
            }
            remove => HookHandler._afterget_DeviceName -= value;
        }

        public static event Delegates.set_DeviceName_AfterArgs set_DeviceName
        {
            add
            {
                HookHandler._afterset_DeviceName += value;
                HookHandler.Hookset_DeviceName();
            }
            remove => HookHandler._afterset_DeviceName -= value;
        }

        public static event Delegates.get_DeviceNotes_AfterArgs get_DeviceNotes
        {
            add
            {
                HookHandler._afterget_DeviceNotes += value;
                HookHandler.Hookget_DeviceNotes();
            }
            remove => HookHandler._afterget_DeviceNotes -= value;
        }

        public static event Delegates.set_DeviceNotes_AfterArgs set_DeviceNotes
        {
            add
            {
                HookHandler._afterset_DeviceNotes += value;
                HookHandler.Hookset_DeviceNotes();
            }
            remove => HookHandler._afterset_DeviceNotes -= value;
        }

        public static event Delegates.get_DeviceClass_AfterArgs get_DeviceClass
        {
            add
            {
                HookHandler._afterget_DeviceClass += value;
                HookHandler.Hookget_DeviceClass();
            }
            remove => HookHandler._afterget_DeviceClass -= value;
        }

        public static event Delegates.set_DeviceClass_AfterArgs set_DeviceClass
        {
            add
            {
                HookHandler._afterset_DeviceClass += value;
                HookHandler.Hookset_DeviceClass();
            }
            remove => HookHandler._afterset_DeviceClass -= value;
        }

        public static event Delegates.get_DeviceStyle_AfterArgs get_DeviceStyle
        {
            add
            {
                HookHandler._afterget_DeviceStyle += value;
                HookHandler.Hookget_DeviceStyle();
            }
            remove => HookHandler._afterget_DeviceStyle -= value;
        }

        public static event Delegates.set_DeviceStyle_AfterArgs set_DeviceStyle
        {
            add
            {
                HookHandler._afterset_DeviceStyle += value;
                HookHandler.Hookset_DeviceStyle();
            }
            remove => HookHandler._afterset_DeviceStyle -= value;
        }

        public static event Delegates.get_Sensitivity_AfterArgs get_Sensitivity
        {
            add
            {
                HookHandler._afterget_Sensitivity += value;
                HookHandler.Hookget_Sensitivity();
            }
            remove => HookHandler._afterget_Sensitivity -= value;
        }

        public static event Delegates.set_Sensitivity_AfterArgs set_Sensitivity
        {
            add
            {
                HookHandler._afterset_Sensitivity += value;
                HookHandler.Hookset_Sensitivity();
            }
            remove => HookHandler._afterset_Sensitivity -= value;
        }

        public static event Delegates.get_LowerDeadZone_AfterArgs get_LowerDeadZone
        {
            add
            {
                HookHandler._afterget_LowerDeadZone += value;
                HookHandler.Hookget_LowerDeadZone();
            }
            remove => HookHandler._afterget_LowerDeadZone -= value;
        }

        public static event Delegates.set_LowerDeadZone_AfterArgs set_LowerDeadZone
        {
            add
            {
                HookHandler._afterset_LowerDeadZone += value;
                HookHandler.Hookset_LowerDeadZone();
            }
            remove => HookHandler._afterset_LowerDeadZone -= value;
        }

        public static event Delegates.get_UpperDeadZone_AfterArgs get_UpperDeadZone
        {
            add
            {
                HookHandler._afterget_UpperDeadZone += value;
                HookHandler.Hookget_UpperDeadZone();
            }
            remove => HookHandler._afterget_UpperDeadZone -= value;
        }

        public static event Delegates.set_UpperDeadZone_AfterArgs set_UpperDeadZone
        {
            add
            {
                HookHandler._afterset_UpperDeadZone += value;
                HookHandler.Hookset_UpperDeadZone();
            }
            remove => HookHandler._afterset_UpperDeadZone -= value;
        }

        public static event Delegates.get_AnalogMappings_AfterArgs get_AnalogMappings
        {
            add
            {
                HookHandler._afterget_AnalogMappings += value;
                HookHandler.Hookget_AnalogMappings();
            }
            remove => HookHandler._afterget_AnalogMappings -= value;
        }

        public static event Delegates.set_AnalogMappings_AfterArgs set_AnalogMappings
        {
            add
            {
                HookHandler._afterset_AnalogMappings += value;
                HookHandler.Hookset_AnalogMappings();
            }
            remove => HookHandler._afterset_AnalogMappings -= value;
        }

        public static event Delegates.get_ButtonMappings_AfterArgs get_ButtonMappings
        {
            add
            {
                HookHandler._afterget_ButtonMappings += value;
                HookHandler.Hookget_ButtonMappings();
            }
            remove => HookHandler._afterget_ButtonMappings -= value;
        }

        public static event Delegates.set_ButtonMappings_AfterArgs set_ButtonMappings
        {
            add
            {
                HookHandler._afterset_ButtonMappings += value;
                HookHandler.Hookset_ButtonMappings();
            }
            remove => HookHandler._afterset_ButtonMappings -= value;
        }

        public static event Delegates.get_IncludePlatforms_AfterArgs get_IncludePlatforms
        {
            add
            {
                HookHandler._afterget_IncludePlatforms += value;
                HookHandler.Hookget_IncludePlatforms();
            }
            remove => HookHandler._afterget_IncludePlatforms -= value;
        }

        public static event Delegates.set_IncludePlatforms_AfterArgs set_IncludePlatforms
        {
            add
            {
                HookHandler._afterset_IncludePlatforms += value;
                HookHandler.Hookset_IncludePlatforms();
            }
            remove => HookHandler._afterset_IncludePlatforms -= value;
        }

        public static event Delegates.get_ExcludePlatforms_AfterArgs get_ExcludePlatforms
        {
            add
            {
                HookHandler._afterget_ExcludePlatforms += value;
                HookHandler.Hookget_ExcludePlatforms();
            }
            remove => HookHandler._afterget_ExcludePlatforms -= value;
        }

        public static event Delegates.set_ExcludePlatforms_AfterArgs set_ExcludePlatforms
        {
            add
            {
                HookHandler._afterset_ExcludePlatforms += value;
                HookHandler.Hookset_ExcludePlatforms();
            }
            remove => HookHandler._afterset_ExcludePlatforms -= value;
        }

        public static event Delegates.get_MinSystemBuildNumber_AfterArgs get_MinSystemBuildNumber
        {
            add
            {
                HookHandler._afterget_MinSystemBuildNumber += value;
                HookHandler.Hookget_MinSystemBuildNumber();
            }
            remove => HookHandler._afterget_MinSystemBuildNumber -= value;
        }

        public static event Delegates.set_MinSystemBuildNumber_AfterArgs set_MinSystemBuildNumber
        {
            add
            {
                HookHandler._afterset_MinSystemBuildNumber += value;
                HookHandler.Hookset_MinSystemBuildNumber();
            }
            remove => HookHandler._afterset_MinSystemBuildNumber -= value;
        }

        public static event Delegates.get_MaxSystemBuildNumber_AfterArgs get_MaxSystemBuildNumber
        {
            add
            {
                HookHandler._afterget_MaxSystemBuildNumber += value;
                HookHandler.Hookget_MaxSystemBuildNumber();
            }
            remove => HookHandler._afterget_MaxSystemBuildNumber -= value;
        }

        public static event Delegates.set_MaxSystemBuildNumber_AfterArgs set_MaxSystemBuildNumber
        {
            add
            {
                HookHandler._afterset_MaxSystemBuildNumber += value;
                HookHandler.Hookset_MaxSystemBuildNumber();
            }
            remove => HookHandler._afterset_MaxSystemBuildNumber -= value;
        }

        public static event Delegates.get_MinUnityVersion_AfterArgs get_MinUnityVersion
        {
            add
            {
                HookHandler._afterget_MinUnityVersion += value;
                HookHandler.Hookget_MinUnityVersion();
            }
            remove => HookHandler._afterget_MinUnityVersion -= value;
        }

        public static event Delegates.set_MinUnityVersion_AfterArgs set_MinUnityVersion
        {
            add
            {
                HookHandler._afterset_MinUnityVersion += value;
                HookHandler.Hookset_MinUnityVersion();
            }
            remove => HookHandler._afterset_MinUnityVersion -= value;
        }

        public static event Delegates.get_MaxUnityVersion_AfterArgs get_MaxUnityVersion
        {
            add
            {
                HookHandler._afterget_MaxUnityVersion += value;
                HookHandler.Hookget_MaxUnityVersion();
            }
            remove => HookHandler._afterget_MaxUnityVersion -= value;
        }

        public static event Delegates.set_MaxUnityVersion_AfterArgs set_MaxUnityVersion
        {
            add
            {
                HookHandler._afterset_MaxUnityVersion += value;
                HookHandler.Hookset_MaxUnityVersion();
            }
            remove => HookHandler._afterset_MaxUnityVersion -= value;
        }

        public static event Delegates.get_Matchers_AfterArgs get_Matchers
        {
            add
            {
                HookHandler._afterget_Matchers += value;
                HookHandler.Hookget_Matchers();
            }
            remove => HookHandler._afterget_Matchers -= value;
        }

        public static event Delegates.set_Matchers_AfterArgs set_Matchers
        {
            add
            {
                HookHandler._afterset_Matchers += value;
                HookHandler.Hookset_Matchers();
            }
            remove => HookHandler._afterset_Matchers -= value;
        }

        public static event Delegates.get_LastResortMatchers_AfterArgs get_LastResortMatchers
        {
            add
            {
                HookHandler._afterget_LastResortMatchers += value;
                HookHandler.Hookget_LastResortMatchers();
            }
            remove => HookHandler._afterget_LastResortMatchers -= value;
        }

        public static event Delegates.set_LastResortMatchers_AfterArgs set_LastResortMatchers
        {
            add
            {
                HookHandler._afterset_LastResortMatchers += value;
                HookHandler.Hookset_LastResortMatchers();
            }
            remove => HookHandler._afterset_LastResortMatchers -= value;
        }

        public static event Delegates.CreateInstanceOfType_Type_AfterArgs CreateInstanceOfType_Type
        {
            add
            {
                HookHandler._afterCreateInstanceOfType_Type += value;
                HookHandler.HookCreateInstanceOfType_Type();
            }
            remove => HookHandler._afterCreateInstanceOfType_Type -= value;
        }

        public static event Delegates.CreateInstanceOfType_string_AfterArgs CreateInstanceOfType_string
        {
            add
            {
                HookHandler._afterCreateInstanceOfType_string += value;
                HookHandler.HookCreateInstanceOfType_string();
            }
            remove => HookHandler._afterCreateInstanceOfType_string -= value;
        }

        public static event Delegates.Define_AfterArgs Define
        {
            add
            {
                HookHandler._afterDefine += value;
                HookHandler.HookDefine();
            }
            remove => HookHandler._afterDefine -= value;
        }

        public static event Delegates.Matches_InputDeviceInfo_AfterArgs Matches_InputDeviceInfo
        {
            add
            {
                HookHandler._afterMatches_InputDeviceInfo += value;
                HookHandler.HookMatches_InputDeviceInfo();
            }
            remove => HookHandler._afterMatches_InputDeviceInfo -= value;
        }

        public static event Delegates.LastResortMatches_AfterArgs LastResortMatches
        {
            add
            {
                HookHandler._afterLastResortMatches += value;
                HookHandler.HookLastResortMatches();
            }
            remove => HookHandler._afterLastResortMatches -= value;
        }

        public static event Delegates.Matches_InputDeviceInfo_Array_AfterArgs Matches_InputDeviceInfo_Array
        {
            add
            {
                HookHandler._afterMatches_InputDeviceInfo_Array += value;
                HookHandler.HookMatches_InputDeviceInfo_Array();
            }
            remove => HookHandler._afterMatches_InputDeviceInfo_Array -= value;
        }

        public static event Delegates.get_IsSupportedOnThisPlatform_AfterArgs get_IsSupportedOnThisPlatform
        {
            add
            {
                HookHandler._afterget_IsSupportedOnThisPlatform += value;
                HookHandler.Hookget_IsSupportedOnThisPlatform();
            }
            remove => HookHandler._afterget_IsSupportedOnThisPlatform -= value;
        }

        public static event Delegates.Hide_AfterArgs Hide
        {
            add
            {
                HookHandler._afterHide += value;
                HookHandler.HookHide();
            }
            remove => HookHandler._afterHide -= value;
        }

        public static event Delegates.get_IsHidden_AfterArgs get_IsHidden
        {
            add
            {
                HookHandler._afterget_IsHidden += value;
                HookHandler.Hookget_IsHidden();
            }
            remove => HookHandler._afterget_IsHidden -= value;
        }

        public static event Delegates.get_IsNotHidden_AfterArgs get_IsNotHidden
        {
            add
            {
                HookHandler._afterget_IsNotHidden += value;
                HookHandler.Hookget_IsNotHidden();
            }
            remove => HookHandler._afterget_IsNotHidden -= value;
        }

        public static event Delegates.get_AnalogCount_AfterArgs get_AnalogCount
        {
            add
            {
                HookHandler._afterget_AnalogCount += value;
                HookHandler.Hookget_AnalogCount();
            }
            remove => HookHandler._afterget_AnalogCount -= value;
        }

        public static event Delegates.get_ButtonCount_AfterArgs get_ButtonCount
        {
            add
            {
                HookHandler._afterget_ButtonCount += value;
                HookHandler.Hookget_ButtonCount();
            }
            remove => HookHandler._afterget_ButtonCount -= value;
        }

        public static event Delegates.Button_AfterArgs Button
        {
            add
            {
                HookHandler._afterButton += value;
                HookHandler.HookButton();
            }
            remove => HookHandler._afterButton -= value;
        }

        public static event Delegates.Analog_AfterArgs Analog
        {
            add
            {
                HookHandler._afterAnalog += value;
                HookHandler.HookAnalog();
            }
            remove => HookHandler._afterAnalog -= value;
        }

        public static event Delegates.LeftStickLeftMapping_AfterArgs LeftStickLeftMapping
        {
            add
            {
                HookHandler._afterLeftStickLeftMapping += value;
                HookHandler.HookLeftStickLeftMapping();
            }
            remove => HookHandler._afterLeftStickLeftMapping -= value;
        }

        public static event Delegates.LeftStickRightMapping_AfterArgs LeftStickRightMapping
        {
            add
            {
                HookHandler._afterLeftStickRightMapping += value;
                HookHandler.HookLeftStickRightMapping();
            }
            remove => HookHandler._afterLeftStickRightMapping -= value;
        }

        public static event Delegates.LeftStickUpMapping_AfterArgs LeftStickUpMapping
        {
            add
            {
                HookHandler._afterLeftStickUpMapping += value;
                HookHandler.HookLeftStickUpMapping();
            }
            remove => HookHandler._afterLeftStickUpMapping -= value;
        }

        public static event Delegates.LeftStickDownMapping_AfterArgs LeftStickDownMapping
        {
            add
            {
                HookHandler._afterLeftStickDownMapping += value;
                HookHandler.HookLeftStickDownMapping();
            }
            remove => HookHandler._afterLeftStickDownMapping -= value;
        }

        public static event Delegates.LeftStickUpMapping2_AfterArgs LeftStickUpMapping2
        {
            add
            {
                HookHandler._afterLeftStickUpMapping2 += value;
                HookHandler.HookLeftStickUpMapping2();
            }
            remove => HookHandler._afterLeftStickUpMapping2 -= value;
        }

        public static event Delegates.LeftStickDownMapping2_AfterArgs LeftStickDownMapping2
        {
            add
            {
                HookHandler._afterLeftStickDownMapping2 += value;
                HookHandler.HookLeftStickDownMapping2();
            }
            remove => HookHandler._afterLeftStickDownMapping2 -= value;
        }

        public static event Delegates.RightStickLeftMapping_AfterArgs RightStickLeftMapping
        {
            add
            {
                HookHandler._afterRightStickLeftMapping += value;
                HookHandler.HookRightStickLeftMapping();
            }
            remove => HookHandler._afterRightStickLeftMapping -= value;
        }

        public static event Delegates.RightStickRightMapping_AfterArgs RightStickRightMapping
        {
            add
            {
                HookHandler._afterRightStickRightMapping += value;
                HookHandler.HookRightStickRightMapping();
            }
            remove => HookHandler._afterRightStickRightMapping -= value;
        }

        public static event Delegates.RightStickUpMapping_AfterArgs RightStickUpMapping
        {
            add
            {
                HookHandler._afterRightStickUpMapping += value;
                HookHandler.HookRightStickUpMapping();
            }
            remove => HookHandler._afterRightStickUpMapping -= value;
        }

        public static event Delegates.RightStickDownMapping_AfterArgs RightStickDownMapping
        {
            add
            {
                HookHandler._afterRightStickDownMapping += value;
                HookHandler.HookRightStickDownMapping();
            }
            remove => HookHandler._afterRightStickDownMapping -= value;
        }

        public static event Delegates.RightStickUpMapping2_AfterArgs RightStickUpMapping2
        {
            add
            {
                HookHandler._afterRightStickUpMapping2 += value;
                HookHandler.HookRightStickUpMapping2();
            }
            remove => HookHandler._afterRightStickUpMapping2 -= value;
        }

        public static event Delegates.RightStickDownMapping2_AfterArgs RightStickDownMapping2
        {
            add
            {
                HookHandler._afterRightStickDownMapping2 += value;
                HookHandler.HookRightStickDownMapping2();
            }
            remove => HookHandler._afterRightStickDownMapping2 -= value;
        }

        public static event Delegates.LeftTriggerMapping_AfterArgs LeftTriggerMapping
        {
            add
            {
                HookHandler._afterLeftTriggerMapping += value;
                HookHandler.HookLeftTriggerMapping();
            }
            remove => HookHandler._afterLeftTriggerMapping -= value;
        }

        public static event Delegates.RightTriggerMapping_AfterArgs RightTriggerMapping
        {
            add
            {
                HookHandler._afterRightTriggerMapping += value;
                HookHandler.HookRightTriggerMapping();
            }
            remove => HookHandler._afterRightTriggerMapping -= value;
        }

        public static event Delegates.DPadLeftMapping_AfterArgs DPadLeftMapping
        {
            add
            {
                HookHandler._afterDPadLeftMapping += value;
                HookHandler.HookDPadLeftMapping();
            }
            remove => HookHandler._afterDPadLeftMapping -= value;
        }

        public static event Delegates.DPadRightMapping_AfterArgs DPadRightMapping
        {
            add
            {
                HookHandler._afterDPadRightMapping += value;
                HookHandler.HookDPadRightMapping();
            }
            remove => HookHandler._afterDPadRightMapping -= value;
        }

        public static event Delegates.DPadUpMapping_AfterArgs DPadUpMapping
        {
            add
            {
                HookHandler._afterDPadUpMapping += value;
                HookHandler.HookDPadUpMapping();
            }
            remove => HookHandler._afterDPadUpMapping -= value;
        }

        public static event Delegates.DPadDownMapping_AfterArgs DPadDownMapping
        {
            add
            {
                HookHandler._afterDPadDownMapping += value;
                HookHandler.HookDPadDownMapping();
            }
            remove => HookHandler._afterDPadDownMapping -= value;
        }

        public static event Delegates.DPadUpMapping2_AfterArgs DPadUpMapping2
        {
            add
            {
                HookHandler._afterDPadUpMapping2 += value;
                HookHandler.HookDPadUpMapping2();
            }
            remove => HookHandler._afterDPadUpMapping2 -= value;
        }

        public static event Delegates.DPadDownMapping2_AfterArgs DPadDownMapping2
        {
            add
            {
                HookHandler._afterDPadDownMapping2 += value;
                HookHandler.HookDPadDownMapping2();
            }
            remove => HookHandler._afterDPadDownMapping2 -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_ProfileType_WithArgs get_ProfileType
        {
            add => HookEndpointManager.Add<Delegates.get_ProfileType_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_ProfileType", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_ProfileType_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_ProfileType", true), value);
        }

        public static event Delegates.set_ProfileType_WithArgs set_ProfileType
        {
            add => HookEndpointManager.Add<Delegates.set_ProfileType_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_ProfileType", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_ProfileType_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_ProfileType", true), value);
        }

        public static event Delegates.get_DeviceName_WithArgs get_DeviceName
        {
            add => HookEndpointManager.Add<Delegates.get_DeviceName_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_DeviceName", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_DeviceName_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_DeviceName", true), value);
        }

        public static event Delegates.set_DeviceName_WithArgs set_DeviceName
        {
            add => HookEndpointManager.Add<Delegates.set_DeviceName_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_DeviceName", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_DeviceName_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_DeviceName", true), value);
        }

        public static event Delegates.get_DeviceNotes_WithArgs get_DeviceNotes
        {
            add => HookEndpointManager.Add<Delegates.get_DeviceNotes_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_DeviceNotes", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_DeviceNotes_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_DeviceNotes", true), value);
        }

        public static event Delegates.set_DeviceNotes_WithArgs set_DeviceNotes
        {
            add => HookEndpointManager.Add<Delegates.set_DeviceNotes_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_DeviceNotes", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_DeviceNotes_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_DeviceNotes", true), value);
        }

        public static event Delegates.get_DeviceClass_WithArgs get_DeviceClass
        {
            add => HookEndpointManager.Add<Delegates.get_DeviceClass_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_DeviceClass", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_DeviceClass_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_DeviceClass", true), value);
        }

        public static event Delegates.set_DeviceClass_WithArgs set_DeviceClass
        {
            add => HookEndpointManager.Add<Delegates.set_DeviceClass_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_DeviceClass", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_DeviceClass_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_DeviceClass", true), value);
        }

        public static event Delegates.get_DeviceStyle_WithArgs get_DeviceStyle
        {
            add => HookEndpointManager.Add<Delegates.get_DeviceStyle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_DeviceStyle", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_DeviceStyle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_DeviceStyle", true), value);
        }

        public static event Delegates.set_DeviceStyle_WithArgs set_DeviceStyle
        {
            add => HookEndpointManager.Add<Delegates.set_DeviceStyle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_DeviceStyle", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_DeviceStyle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_DeviceStyle", true), value);
        }

        public static event Delegates.get_Sensitivity_WithArgs get_Sensitivity
        {
            add => HookEndpointManager.Add<Delegates.get_Sensitivity_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_Sensitivity", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_Sensitivity_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_Sensitivity", true), value);
        }

        public static event Delegates.set_Sensitivity_WithArgs set_Sensitivity
        {
            add => HookEndpointManager.Add<Delegates.set_Sensitivity_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_Sensitivity", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_Sensitivity_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_Sensitivity", true), value);
        }

        public static event Delegates.get_LowerDeadZone_WithArgs get_LowerDeadZone
        {
            add => HookEndpointManager.Add<Delegates.get_LowerDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_LowerDeadZone", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_LowerDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_LowerDeadZone", true), value);
        }

        public static event Delegates.set_LowerDeadZone_WithArgs set_LowerDeadZone
        {
            add => HookEndpointManager.Add<Delegates.set_LowerDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_LowerDeadZone", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_LowerDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_LowerDeadZone", true), value);
        }

        public static event Delegates.get_UpperDeadZone_WithArgs get_UpperDeadZone
        {
            add => HookEndpointManager.Add<Delegates.get_UpperDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_UpperDeadZone", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_UpperDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_UpperDeadZone", true), value);
        }

        public static event Delegates.set_UpperDeadZone_WithArgs set_UpperDeadZone
        {
            add => HookEndpointManager.Add<Delegates.set_UpperDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_UpperDeadZone", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_UpperDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_UpperDeadZone", true), value);
        }

        public static event Delegates.get_AnalogMappings_WithArgs get_AnalogMappings
        {
            add => HookEndpointManager.Add<Delegates.get_AnalogMappings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_AnalogMappings", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_AnalogMappings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_AnalogMappings", true),
                value);
        }

        public static event Delegates.set_AnalogMappings_WithArgs set_AnalogMappings
        {
            add => HookEndpointManager.Add<Delegates.set_AnalogMappings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_AnalogMappings", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.set_AnalogMappings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_AnalogMappings", true),
                value);
        }

        public static event Delegates.get_ButtonMappings_WithArgs get_ButtonMappings
        {
            add => HookEndpointManager.Add<Delegates.get_ButtonMappings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_ButtonMappings", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_ButtonMappings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_ButtonMappings", true),
                value);
        }

        public static event Delegates.set_ButtonMappings_WithArgs set_ButtonMappings
        {
            add => HookEndpointManager.Add<Delegates.set_ButtonMappings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_ButtonMappings", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.set_ButtonMappings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_ButtonMappings", true),
                value);
        }

        public static event Delegates.get_IncludePlatforms_WithArgs get_IncludePlatforms
        {
            add => HookEndpointManager.Add<Delegates.get_IncludePlatforms_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_IncludePlatforms", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_IncludePlatforms_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_IncludePlatforms", true),
                value);
        }

        public static event Delegates.set_IncludePlatforms_WithArgs set_IncludePlatforms
        {
            add => HookEndpointManager.Add<Delegates.set_IncludePlatforms_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_IncludePlatforms", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.set_IncludePlatforms_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_IncludePlatforms", true),
                value);
        }

        public static event Delegates.get_ExcludePlatforms_WithArgs get_ExcludePlatforms
        {
            add => HookEndpointManager.Add<Delegates.get_ExcludePlatforms_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_ExcludePlatforms", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_ExcludePlatforms_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_ExcludePlatforms", true),
                value);
        }

        public static event Delegates.set_ExcludePlatforms_WithArgs set_ExcludePlatforms
        {
            add => HookEndpointManager.Add<Delegates.set_ExcludePlatforms_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_ExcludePlatforms", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.set_ExcludePlatforms_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_ExcludePlatforms", true),
                value);
        }

        public static event Delegates.get_MinSystemBuildNumber_WithArgs get_MinSystemBuildNumber
        {
            add => HookEndpointManager.Add<Delegates.get_MinSystemBuildNumber_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_MinSystemBuildNumber", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_MinSystemBuildNumber_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_MinSystemBuildNumber", true),
                value);
        }

        public static event Delegates.set_MinSystemBuildNumber_WithArgs set_MinSystemBuildNumber
        {
            add => HookEndpointManager.Add<Delegates.set_MinSystemBuildNumber_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_MinSystemBuildNumber", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.set_MinSystemBuildNumber_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_MinSystemBuildNumber", true),
                value);
        }

        public static event Delegates.get_MaxSystemBuildNumber_WithArgs get_MaxSystemBuildNumber
        {
            add => HookEndpointManager.Add<Delegates.get_MaxSystemBuildNumber_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_MaxSystemBuildNumber", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_MaxSystemBuildNumber_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_MaxSystemBuildNumber", true),
                value);
        }

        public static event Delegates.set_MaxSystemBuildNumber_WithArgs set_MaxSystemBuildNumber
        {
            add => HookEndpointManager.Add<Delegates.set_MaxSystemBuildNumber_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_MaxSystemBuildNumber", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.set_MaxSystemBuildNumber_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_MaxSystemBuildNumber", true),
                value);
        }

        public static event Delegates.get_MinUnityVersion_WithArgs get_MinUnityVersion
        {
            add => HookEndpointManager.Add<Delegates.get_MinUnityVersion_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_MinUnityVersion", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_MinUnityVersion_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_MinUnityVersion", true),
                value);
        }

        public static event Delegates.set_MinUnityVersion_WithArgs set_MinUnityVersion
        {
            add => HookEndpointManager.Add<Delegates.set_MinUnityVersion_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_MinUnityVersion", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.set_MinUnityVersion_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_MinUnityVersion", true),
                value);
        }

        public static event Delegates.get_MaxUnityVersion_WithArgs get_MaxUnityVersion
        {
            add => HookEndpointManager.Add<Delegates.get_MaxUnityVersion_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_MaxUnityVersion", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_MaxUnityVersion_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_MaxUnityVersion", true),
                value);
        }

        public static event Delegates.set_MaxUnityVersion_WithArgs set_MaxUnityVersion
        {
            add => HookEndpointManager.Add<Delegates.set_MaxUnityVersion_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_MaxUnityVersion", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.set_MaxUnityVersion_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_MaxUnityVersion", true),
                value);
        }

        public static event Delegates.get_Matchers_WithArgs get_Matchers
        {
            add => HookEndpointManager.Add<Delegates.get_Matchers_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_Matchers", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_Matchers_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_Matchers", true), value);
        }

        public static event Delegates.set_Matchers_WithArgs set_Matchers
        {
            add => HookEndpointManager.Add<Delegates.set_Matchers_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_Matchers", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_Matchers_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_Matchers", true), value);
        }

        public static event Delegates.get_LastResortMatchers_WithArgs get_LastResortMatchers
        {
            add => HookEndpointManager.Add<Delegates.get_LastResortMatchers_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_LastResortMatchers", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_LastResortMatchers_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_LastResortMatchers", true),
                value);
        }

        public static event Delegates.set_LastResortMatchers_WithArgs set_LastResortMatchers
        {
            add => HookEndpointManager.Add<Delegates.set_LastResortMatchers_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_LastResortMatchers", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.set_LastResortMatchers_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "set_LastResortMatchers", true),
                value);
        }

        public static event Delegates.CreateInstanceOfType_Type_WithArgs CreateInstanceOfType_Type
        {
            add => HookEndpointManager.Add<Delegates.CreateInstanceOfType_Type_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "CreateInstanceOfType", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.CreateInstanceOfType_Type_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "CreateInstanceOfType", false),
                value);
        }

        public static event Delegates.CreateInstanceOfType_string_WithArgs CreateInstanceOfType_string
        {
            add => HookEndpointManager.Add<Delegates.CreateInstanceOfType_string_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "CreateInstanceOfType", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.CreateInstanceOfType_string_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "CreateInstanceOfType", false),
                value);
        }

        public static event Delegates.Define_WithArgs Define
        {
            add => HookEndpointManager.Add<Delegates.Define_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "Define", true), value);
            remove => HookEndpointManager.Remove<Delegates.Define_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "Define", true), value);
        }

        public static event Delegates.Matches_InputDeviceInfo_WithArgs Matches_InputDeviceInfo
        {
            add => HookEndpointManager.Add<Delegates.Matches_InputDeviceInfo_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "Matches", true), value);
            remove => HookEndpointManager.Remove<Delegates.Matches_InputDeviceInfo_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "Matches", true), value);
        }

        public static event Delegates.LastResortMatches_WithArgs LastResortMatches
        {
            add => HookEndpointManager.Add<Delegates.LastResortMatches_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LastResortMatches", true), value);
            remove => HookEndpointManager.Remove<Delegates.LastResortMatches_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LastResortMatches", true), value);
        }

        public static event Delegates.Matches_InputDeviceInfo_Array_WithArgs Matches_InputDeviceInfo_Array
        {
            add => HookEndpointManager.Add<Delegates.Matches_InputDeviceInfo_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "Matches", true), value);
            remove => HookEndpointManager.Remove<Delegates.Matches_InputDeviceInfo_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "Matches", true), value);
        }

        public static event Delegates.get_IsSupportedOnThisPlatform_WithArgs get_IsSupportedOnThisPlatform
        {
            add => HookEndpointManager.Add<Delegates.get_IsSupportedOnThisPlatform_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_IsSupportedOnThisPlatform",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsSupportedOnThisPlatform_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_IsSupportedOnThisPlatform",
                    true), value);
        }

        public static event Delegates.Hide_WithArgs Hide
        {
            add => HookEndpointManager.Add<Delegates.Hide_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "Hide", false), value);
            remove => HookEndpointManager.Remove<Delegates.Hide_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "Hide", false), value);
        }

        public static event Delegates.get_IsHidden_WithArgs get_IsHidden
        {
            add => HookEndpointManager.Add<Delegates.get_IsHidden_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_IsHidden", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsHidden_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_IsHidden", true), value);
        }

        public static event Delegates.get_IsNotHidden_WithArgs get_IsNotHidden
        {
            add => HookEndpointManager.Add<Delegates.get_IsNotHidden_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_IsNotHidden", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsNotHidden_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_IsNotHidden", true), value);
        }

        public static event Delegates.get_AnalogCount_WithArgs get_AnalogCount
        {
            add => HookEndpointManager.Add<Delegates.get_AnalogCount_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_AnalogCount", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_AnalogCount_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_AnalogCount", true), value);
        }

        public static event Delegates.get_ButtonCount_WithArgs get_ButtonCount
        {
            add => HookEndpointManager.Add<Delegates.get_ButtonCount_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_ButtonCount", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_ButtonCount_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "get_ButtonCount", true), value);
        }

        public static event Delegates.Button_WithArgs Button
        {
            add => HookEndpointManager.Add<Delegates.Button_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "Button", false), value);
            remove => HookEndpointManager.Remove<Delegates.Button_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "Button", false), value);
        }

        public static event Delegates.Analog_WithArgs Analog
        {
            add => HookEndpointManager.Add<Delegates.Analog_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "Analog", false), value);
            remove => HookEndpointManager.Remove<Delegates.Analog_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "Analog", false), value);
        }

        public static event Delegates.LeftStickLeftMapping_WithArgs LeftStickLeftMapping
        {
            add => HookEndpointManager.Add<Delegates.LeftStickLeftMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LeftStickLeftMapping", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.LeftStickLeftMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LeftStickLeftMapping", false),
                value);
        }

        public static event Delegates.LeftStickRightMapping_WithArgs LeftStickRightMapping
        {
            add => HookEndpointManager.Add<Delegates.LeftStickRightMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LeftStickRightMapping", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.LeftStickRightMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LeftStickRightMapping", false),
                value);
        }

        public static event Delegates.LeftStickUpMapping_WithArgs LeftStickUpMapping
        {
            add => HookEndpointManager.Add<Delegates.LeftStickUpMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LeftStickUpMapping", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.LeftStickUpMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LeftStickUpMapping", false),
                value);
        }

        public static event Delegates.LeftStickDownMapping_WithArgs LeftStickDownMapping
        {
            add => HookEndpointManager.Add<Delegates.LeftStickDownMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LeftStickDownMapping", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.LeftStickDownMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LeftStickDownMapping", false),
                value);
        }

        public static event Delegates.LeftStickUpMapping2_WithArgs LeftStickUpMapping2
        {
            add => HookEndpointManager.Add<Delegates.LeftStickUpMapping2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LeftStickUpMapping2", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.LeftStickUpMapping2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LeftStickUpMapping2", false),
                value);
        }

        public static event Delegates.LeftStickDownMapping2_WithArgs LeftStickDownMapping2
        {
            add => HookEndpointManager.Add<Delegates.LeftStickDownMapping2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LeftStickDownMapping2", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.LeftStickDownMapping2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LeftStickDownMapping2", false),
                value);
        }

        public static event Delegates.RightStickLeftMapping_WithArgs RightStickLeftMapping
        {
            add => HookEndpointManager.Add<Delegates.RightStickLeftMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "RightStickLeftMapping", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.RightStickLeftMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "RightStickLeftMapping", false),
                value);
        }

        public static event Delegates.RightStickRightMapping_WithArgs RightStickRightMapping
        {
            add => HookEndpointManager.Add<Delegates.RightStickRightMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "RightStickRightMapping", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.RightStickRightMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "RightStickRightMapping", false),
                value);
        }

        public static event Delegates.RightStickUpMapping_WithArgs RightStickUpMapping
        {
            add => HookEndpointManager.Add<Delegates.RightStickUpMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "RightStickUpMapping", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.RightStickUpMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "RightStickUpMapping", false),
                value);
        }

        public static event Delegates.RightStickDownMapping_WithArgs RightStickDownMapping
        {
            add => HookEndpointManager.Add<Delegates.RightStickDownMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "RightStickDownMapping", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.RightStickDownMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "RightStickDownMapping", false),
                value);
        }

        public static event Delegates.RightStickUpMapping2_WithArgs RightStickUpMapping2
        {
            add => HookEndpointManager.Add<Delegates.RightStickUpMapping2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "RightStickUpMapping2", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.RightStickUpMapping2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "RightStickUpMapping2", false),
                value);
        }

        public static event Delegates.RightStickDownMapping2_WithArgs RightStickDownMapping2
        {
            add => HookEndpointManager.Add<Delegates.RightStickDownMapping2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "RightStickDownMapping2", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.RightStickDownMapping2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "RightStickDownMapping2", false),
                value);
        }

        public static event Delegates.LeftTriggerMapping_WithArgs LeftTriggerMapping
        {
            add => HookEndpointManager.Add<Delegates.LeftTriggerMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LeftTriggerMapping", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.LeftTriggerMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "LeftTriggerMapping", false),
                value);
        }

        public static event Delegates.RightTriggerMapping_WithArgs RightTriggerMapping
        {
            add => HookEndpointManager.Add<Delegates.RightTriggerMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "RightTriggerMapping", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.RightTriggerMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "RightTriggerMapping", false),
                value);
        }

        public static event Delegates.DPadLeftMapping_WithArgs DPadLeftMapping
        {
            add => HookEndpointManager.Add<Delegates.DPadLeftMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "DPadLeftMapping", false), value);
            remove => HookEndpointManager.Remove<Delegates.DPadLeftMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "DPadLeftMapping", false), value);
        }

        public static event Delegates.DPadRightMapping_WithArgs DPadRightMapping
        {
            add => HookEndpointManager.Add<Delegates.DPadRightMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "DPadRightMapping", false), value);
            remove => HookEndpointManager.Remove<Delegates.DPadRightMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "DPadRightMapping", false), value);
        }

        public static event Delegates.DPadUpMapping_WithArgs DPadUpMapping
        {
            add => HookEndpointManager.Add<Delegates.DPadUpMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "DPadUpMapping", false), value);
            remove => HookEndpointManager.Remove<Delegates.DPadUpMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "DPadUpMapping", false), value);
        }

        public static event Delegates.DPadDownMapping_WithArgs DPadDownMapping
        {
            add => HookEndpointManager.Add<Delegates.DPadDownMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "DPadDownMapping", false), value);
            remove => HookEndpointManager.Remove<Delegates.DPadDownMapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "DPadDownMapping", false), value);
        }

        public static event Delegates.DPadUpMapping2_WithArgs DPadUpMapping2
        {
            add => HookEndpointManager.Add<Delegates.DPadUpMapping2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "DPadUpMapping2", false), value);
            remove => HookEndpointManager.Remove<Delegates.DPadUpMapping2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "DPadUpMapping2", false), value);
        }

        public static event Delegates.DPadDownMapping2_WithArgs DPadDownMapping2
        {
            add => HookEndpointManager.Add<Delegates.DPadDownMapping2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "DPadDownMapping2", false), value);
            remove => HookEndpointManager.Remove<Delegates.DPadDownMapping2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.InputDeviceProfile), "DPadDownMapping2", false), value);
        }
    }
}