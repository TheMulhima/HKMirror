using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for GrubBGControl class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGrubBGControl
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.GrubBGControl.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.GrubBGControl.orig_Awake orig,GrubBGControl self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.GrubBGControl.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.GrubBGControl.orig_Start orig,GrubBGControl self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookIdle()
{
if (!HookedList.Contains("Idle"))
{
HookedList.Add("Idle");
On.GrubBGControl.Idle += Idle;

}
}
internal static event Delegates.Idle_BeforeArgs _beforeIdle;
private static System.Collections.IEnumerator Idle(On.GrubBGControl.orig_Idle orig,GrubBGControl self)
{
Delegates.Params_Idle @params = new() 
{
self = self
};
if (_beforeIdle != null)
{
foreach (Delegates.Idle_BeforeArgs toInvoke in _beforeIdle.GetInvocationList())
{
try
{
_beforeIdle?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
internal static void HookWave()
{
if (!HookedList.Contains("Wave"))
{
HookedList.Add("Wave");
On.GrubBGControl.Wave += Wave;

}
}
internal static event Delegates.Wave_BeforeArgs _beforeWave;
private static System.Collections.IEnumerator Wave(On.GrubBGControl.orig_Wave orig,GrubBGControl self)
{
Delegates.Params_Wave @params = new() 
{
self = self
};
if (_beforeWave != null)
{
foreach (Delegates.Wave_BeforeArgs toInvoke in _beforeWave.GetInvocationList())
{
try
{
_beforeWave?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Awake
{
public GrubBGControl self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<GrubBGControl> orig, GrubBGControl self);
public sealed class Params_Start
{
public GrubBGControl self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<GrubBGControl> orig, GrubBGControl self);
public sealed class Params_Idle
{
public GrubBGControl self;
}
public delegate void Idle_BeforeArgs(Params_Idle args);
public delegate System.Collections.IEnumerator Idle_AfterArgs(Params_Idle args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator Idle_WithArgs (Func<GrubBGControl, System.Collections.IEnumerator> orig, GrubBGControl self);
public sealed class Params_Wave
{
public GrubBGControl self;
}
public delegate void Wave_BeforeArgs(Params_Wave args);
public delegate System.Collections.IEnumerator Wave_AfterArgs(Params_Wave args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator Wave_WithArgs (Func<GrubBGControl, System.Collections.IEnumerator> orig, GrubBGControl self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.Idle_BeforeArgs Idle
{
add
{

HookHandler._beforeIdle += value;
HookHandler.HookIdle();
}
remove => HookHandler._beforeIdle -= value;
}
public static event Delegates.Wave_BeforeArgs Wave
{
add
{

HookHandler._beforeWave += value;
HookHandler.HookWave();
}
remove => HookHandler._beforeWave -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.GrubBGControl.hook_Awake Awake
{
add => On.GrubBGControl.Awake += value;
remove => On.GrubBGControl.Awake -= value;
}
public static event On.GrubBGControl.hook_Start Start
{
add => On.GrubBGControl.Start += value;
remove => On.GrubBGControl.Start -= value;
}
public static event On.GrubBGControl.hook_Idle Idle
{
add => On.GrubBGControl.Idle += value;
remove => On.GrubBGControl.Idle -= value;
}
public static event On.GrubBGControl.hook_Wave Wave
{
add => On.GrubBGControl.Wave += value;
remove => On.GrubBGControl.Wave -= value;
}
}

}
