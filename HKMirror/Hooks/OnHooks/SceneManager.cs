using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for SceneManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSceneManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.SceneManager.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.SceneManager.orig_Start orig, SceneManager self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookSetLighting()
        {
            if (!HookedList.Contains("SetLighting"))
            {
                HookedList.Add("SetLighting");
                On.SceneManager.SetLighting += SetLighting;
            }
        }

        internal static event Delegates.SetLighting_BeforeArgs _beforeSetLighting;
        internal static event Delegates.SetLighting_NormalArgs _afterSetLighting;

        private static void SetLighting(On.SceneManager.orig_SetLighting orig, Color ambientLightColor,
            float ambientLightIntensity)
        {
            Delegates.Params_SetLighting @params = new()
            {
                ambientLightColor = ambientLightColor, ambientLightIntensity = ambientLightIntensity
            };
            _beforeSetLighting?.Invoke(@params);
            ambientLightColor = @params.ambientLightColor;
            ambientLightIntensity = @params.ambientLightIntensity;
            orig(ambientLightColor, ambientLightIntensity);
            if (_afterSetLighting != null) _afterSetLighting.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.SceneManager.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.SceneManager.orig_Update orig, SceneManager self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookGetDarknessLevel()
        {
            if (!HookedList.Contains("GetDarknessLevel"))
            {
                HookedList.Add("GetDarknessLevel");
                On.SceneManager.GetDarknessLevel += GetDarknessLevel;
            }
        }

        internal static event Delegates.GetDarknessLevel_BeforeArgs _beforeGetDarknessLevel;
        internal static event Delegates.GetDarknessLevel_NormalArgs _afterGetDarknessLevel;

        private static int GetDarknessLevel(On.SceneManager.orig_GetDarknessLevel orig, SceneManager self)
        {
            Delegates.Params_GetDarknessLevel @params = new()
            {
                self = self
            };
            _beforeGetDarknessLevel?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetDarknessLevel != null) retVal = _afterGetDarknessLevel.Invoke(@params);
            return retVal;
        }

        internal static void HookSetWindy()
        {
            if (!HookedList.Contains("SetWindy"))
            {
                HookedList.Add("SetWindy");
                On.SceneManager.SetWindy += SetWindy;
            }
        }

        internal static event Delegates.SetWindy_BeforeArgs _beforeSetWindy;
        internal static event Delegates.SetWindy_NormalArgs _afterSetWindy;

        private static void SetWindy(On.SceneManager.orig_SetWindy orig, SceneManager self, bool setting)
        {
            Delegates.Params_SetWindy @params = new()
            {
                self = self, setting = setting
            };
            _beforeSetWindy?.Invoke(@params);
            self = @params.self;
            setting = @params.setting;
            orig(self, setting);
            if (_afterSetWindy != null) _afterSetWindy.Invoke(@params);
        }

        internal static void HookAdjustSaturation()
        {
            if (!HookedList.Contains("AdjustSaturation"))
            {
                HookedList.Add("AdjustSaturation");
                On.SceneManager.AdjustSaturation += AdjustSaturation;
            }
        }

        internal static event Delegates.AdjustSaturation_BeforeArgs _beforeAdjustSaturation;
        internal static event Delegates.AdjustSaturation_NormalArgs _afterAdjustSaturation;

        private static float AdjustSaturation(On.SceneManager.orig_AdjustSaturation orig, SceneManager self,
            float originalSaturation)
        {
            Delegates.Params_AdjustSaturation @params = new()
            {
                self = self, originalSaturation = originalSaturation
            };
            _beforeAdjustSaturation?.Invoke(@params);
            self = @params.self;
            originalSaturation = @params.originalSaturation;
            var retVal = orig(self, originalSaturation);
            if (_afterAdjustSaturation != null) retVal = _afterAdjustSaturation.Invoke(@params);
            return retVal;
        }

        internal static void HookAdjustSaturationForPlatform()
        {
            if (!HookedList.Contains("AdjustSaturationForPlatform"))
            {
                HookedList.Add("AdjustSaturationForPlatform");
                On.SceneManager.AdjustSaturationForPlatform += AdjustSaturationForPlatform;
            }
        }

        internal static event Delegates.AdjustSaturationForPlatform_BeforeArgs _beforeAdjustSaturationForPlatform;
        internal static event Delegates.AdjustSaturationForPlatform_NormalArgs _afterAdjustSaturationForPlatform;

        private static float AdjustSaturationForPlatform(On.SceneManager.orig_AdjustSaturationForPlatform orig,
            float originalSaturation, MapZone? mapZone)
        {
            Delegates.Params_AdjustSaturationForPlatform @params = new()
            {
                originalSaturation = originalSaturation, mapZone = mapZone
            };
            _beforeAdjustSaturationForPlatform?.Invoke(@params);
            originalSaturation = @params.originalSaturation;
            mapZone = @params.mapZone;
            var retVal = orig(originalSaturation, mapZone);
            if (_afterAdjustSaturationForPlatform != null) retVal = _afterAdjustSaturationForPlatform.Invoke(@params);
            return retVal;
        }

        internal static void HookPrintDebugInfo()
        {
            if (!HookedList.Contains("PrintDebugInfo"))
            {
                HookedList.Add("PrintDebugInfo");
                On.SceneManager.PrintDebugInfo += PrintDebugInfo;
            }
        }

        internal static event Delegates.PrintDebugInfo_BeforeArgs _beforePrintDebugInfo;
        internal static event Delegates.PrintDebugInfo_NormalArgs _afterPrintDebugInfo;

        private static void PrintDebugInfo(On.SceneManager.orig_PrintDebugInfo orig, SceneManager self)
        {
            Delegates.Params_PrintDebugInfo @params = new()
            {
                self = self
            };
            _beforePrintDebugInfo?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPrintDebugInfo != null) _afterPrintDebugInfo.Invoke(@params);
        }

        internal static void HookDrawBlackBorders()
        {
            if (!HookedList.Contains("DrawBlackBorders"))
            {
                HookedList.Add("DrawBlackBorders");
                On.SceneManager.DrawBlackBorders += DrawBlackBorders;
            }
        }

        internal static event Delegates.DrawBlackBorders_BeforeArgs _beforeDrawBlackBorders;
        internal static event Delegates.DrawBlackBorders_NormalArgs _afterDrawBlackBorders;

        private static void DrawBlackBorders(On.SceneManager.orig_DrawBlackBorders orig, SceneManager self)
        {
            Delegates.Params_DrawBlackBorders @params = new()
            {
                self = self
            };
            _beforeDrawBlackBorders?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDrawBlackBorders != null) _afterDrawBlackBorders.Invoke(@params);
        }

        internal static void HookAddSceneMapped()
        {
            if (!HookedList.Contains("AddSceneMapped"))
            {
                HookedList.Add("AddSceneMapped");
                On.SceneManager.AddSceneMapped += AddSceneMapped;
            }
        }

        internal static event Delegates.AddSceneMapped_BeforeArgs _beforeAddSceneMapped;
        internal static event Delegates.AddSceneMapped_NormalArgs _afterAddSceneMapped;

        private static void AddSceneMapped(On.SceneManager.orig_AddSceneMapped orig, SceneManager self)
        {
            Delegates.Params_AddSceneMapped @params = new()
            {
                self = self
            };
            _beforeAddSceneMapped?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAddSceneMapped != null) _afterAddSceneMapped.Invoke(@params);
        }

        internal static void HookUpdateSceneSettings()
        {
            if (!HookedList.Contains("UpdateSceneSettings"))
            {
                HookedList.Add("UpdateSceneSettings");
                On.SceneManager.UpdateSceneSettings += UpdateSceneSettings;
            }
        }

        internal static event Delegates.UpdateSceneSettings_BeforeArgs _beforeUpdateSceneSettings;
        internal static event Delegates.UpdateSceneSettings_NormalArgs _afterUpdateSceneSettings;

        private static void UpdateSceneSettings(On.SceneManager.orig_UpdateSceneSettings orig, SceneManager self,
            SceneManagerSettings sms)
        {
            Delegates.Params_UpdateSceneSettings @params = new()
            {
                self = self, sms = sms
            };
            _beforeUpdateSceneSettings?.Invoke(@params);
            self = @params.self;
            sms = @params.sms;
            orig(self, sms);
            if (_afterUpdateSceneSettings != null) _afterUpdateSceneSettings.Invoke(@params);
        }

        internal static void Hookorig_Update()
        {
            if (!HookedList.Contains("orig_Update"))
            {
                HookedList.Add("orig_Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneManager), "orig_Update"), orig_Update);
            }
        }

        internal static event Delegates.orig_Update_BeforeArgs _beforeorig_Update;
        internal static event Delegates.orig_Update_NormalArgs _afterorig_Update;

        private static void orig_Update(Action<SceneManager> orig, SceneManager self)
        {
            Delegates.Params_orig_Update @params = new()
            {
                self = self
            };
            _beforeorig_Update?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterorig_Update != null) _afterorig_Update.Invoke(@params);
        }

        internal static void Hookorig_Start()
        {
            if (!HookedList.Contains("orig_Start"))
            {
                HookedList.Add("orig_Start");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneManager), "orig_Start"), orig_Start);
            }
        }

        internal static event Delegates.orig_Start_BeforeArgs _beforeorig_Start;
        internal static event Delegates.orig_Start_NormalArgs _afterorig_Start;

        private static void orig_Start(Action<SceneManager> orig, SceneManager self)
        {
            Delegates.Params_orig_Start @params = new()
            {
                self = self
            };
            _beforeorig_Start?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterorig_Start != null) _afterorig_Start.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AddSceneMapped_BeforeArgs(Params_AddSceneMapped args);

        public delegate void AddSceneMapped_NormalArgs(Params_AddSceneMapped args);

        public delegate void AdjustSaturation_BeforeArgs(Params_AdjustSaturation args);

        public delegate float AdjustSaturation_NormalArgs(Params_AdjustSaturation args);

        public delegate void AdjustSaturationForPlatform_BeforeArgs(Params_AdjustSaturationForPlatform args);

        public delegate float AdjustSaturationForPlatform_NormalArgs(Params_AdjustSaturationForPlatform args);

        public delegate void DrawBlackBorders_BeforeArgs(Params_DrawBlackBorders args);

        public delegate void DrawBlackBorders_NormalArgs(Params_DrawBlackBorders args);

        public delegate void GetDarknessLevel_BeforeArgs(Params_GetDarknessLevel args);

        public delegate int GetDarknessLevel_NormalArgs(Params_GetDarknessLevel args);

        public delegate void orig_Start_BeforeArgs(Params_orig_Start args);

        public delegate void orig_Start_NormalArgs(Params_orig_Start args);

        public delegate void orig_Update_BeforeArgs(Params_orig_Update args);

        public delegate void orig_Update_NormalArgs(Params_orig_Update args);

        public delegate void PrintDebugInfo_BeforeArgs(Params_PrintDebugInfo args);

        public delegate void PrintDebugInfo_NormalArgs(Params_PrintDebugInfo args);

        public delegate void SetLighting_BeforeArgs(Params_SetLighting args);

        public delegate void SetLighting_NormalArgs(Params_SetLighting args);

        public delegate void SetWindy_BeforeArgs(Params_SetWindy args);

        public delegate void SetWindy_NormalArgs(Params_SetWindy args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public delegate void UpdateSceneSettings_BeforeArgs(Params_UpdateSceneSettings args);

        public delegate void UpdateSceneSettings_NormalArgs(Params_UpdateSceneSettings args);

        public sealed class Params_Start
        {
            public SceneManager self;
        }

        public sealed class Params_SetLighting
        {
            public Color ambientLightColor;
            public float ambientLightIntensity;
        }

        public sealed class Params_Update
        {
            public SceneManager self;
        }

        public sealed class Params_GetDarknessLevel
        {
            public SceneManager self;
        }

        public sealed class Params_SetWindy
        {
            public SceneManager self;
            public bool setting;
        }

        public sealed class Params_AdjustSaturation
        {
            public float originalSaturation;
            public SceneManager self;
        }

        public sealed class Params_AdjustSaturationForPlatform
        {
            public MapZone? mapZone;
            public float originalSaturation;
        }

        public sealed class Params_PrintDebugInfo
        {
            public SceneManager self;
        }

        public sealed class Params_DrawBlackBorders
        {
            public SceneManager self;
        }

        public sealed class Params_AddSceneMapped
        {
            public SceneManager self;
        }

        public sealed class Params_UpdateSceneSettings
        {
            public SceneManager self;
            public SceneManagerSettings sms;
        }

        public sealed class Params_orig_Update
        {
            public SceneManager self;
        }

        public sealed class Params_orig_Start
        {
            public SceneManager self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.SetLighting_BeforeArgs SetLighting
        {
            add
            {
                HookHandler._beforeSetLighting += value;
                HookHandler.HookSetLighting();
            }
            remove => HookHandler._beforeSetLighting -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.GetDarknessLevel_BeforeArgs GetDarknessLevel
        {
            add
            {
                HookHandler._beforeGetDarknessLevel += value;
                HookHandler.HookGetDarknessLevel();
            }
            remove => HookHandler._beforeGetDarknessLevel -= value;
        }

        public static event Delegates.SetWindy_BeforeArgs SetWindy
        {
            add
            {
                HookHandler._beforeSetWindy += value;
                HookHandler.HookSetWindy();
            }
            remove => HookHandler._beforeSetWindy -= value;
        }

        public static event Delegates.AdjustSaturation_BeforeArgs AdjustSaturation
        {
            add
            {
                HookHandler._beforeAdjustSaturation += value;
                HookHandler.HookAdjustSaturation();
            }
            remove => HookHandler._beforeAdjustSaturation -= value;
        }

        public static event Delegates.AdjustSaturationForPlatform_BeforeArgs AdjustSaturationForPlatform
        {
            add
            {
                HookHandler._beforeAdjustSaturationForPlatform += value;
                HookHandler.HookAdjustSaturationForPlatform();
            }
            remove => HookHandler._beforeAdjustSaturationForPlatform -= value;
        }

        public static event Delegates.PrintDebugInfo_BeforeArgs PrintDebugInfo
        {
            add
            {
                HookHandler._beforePrintDebugInfo += value;
                HookHandler.HookPrintDebugInfo();
            }
            remove => HookHandler._beforePrintDebugInfo -= value;
        }

        public static event Delegates.DrawBlackBorders_BeforeArgs DrawBlackBorders
        {
            add
            {
                HookHandler._beforeDrawBlackBorders += value;
                HookHandler.HookDrawBlackBorders();
            }
            remove => HookHandler._beforeDrawBlackBorders -= value;
        }

        public static event Delegates.AddSceneMapped_BeforeArgs AddSceneMapped
        {
            add
            {
                HookHandler._beforeAddSceneMapped += value;
                HookHandler.HookAddSceneMapped();
            }
            remove => HookHandler._beforeAddSceneMapped -= value;
        }

        public static event Delegates.UpdateSceneSettings_BeforeArgs UpdateSceneSettings
        {
            add
            {
                HookHandler._beforeUpdateSceneSettings += value;
                HookHandler.HookUpdateSceneSettings();
            }
            remove => HookHandler._beforeUpdateSceneSettings -= value;
        }

        public static event Delegates.orig_Update_BeforeArgs orig_Update
        {
            add
            {
                HookHandler._beforeorig_Update += value;
                HookHandler.Hookorig_Update();
            }
            remove => HookHandler._beforeorig_Update -= value;
        }

        public static event Delegates.orig_Start_BeforeArgs orig_Start
        {
            add
            {
                HookHandler._beforeorig_Start += value;
                HookHandler.Hookorig_Start();
            }
            remove => HookHandler._beforeorig_Start -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.SetLighting_NormalArgs SetLighting
        {
            add
            {
                HookHandler._afterSetLighting += value;
                HookHandler.HookSetLighting();
            }
            remove => HookHandler._afterSetLighting -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.GetDarknessLevel_NormalArgs GetDarknessLevel
        {
            add
            {
                HookHandler._afterGetDarknessLevel += value;
                HookHandler.HookGetDarknessLevel();
            }
            remove => HookHandler._afterGetDarknessLevel -= value;
        }

        public static event Delegates.SetWindy_NormalArgs SetWindy
        {
            add
            {
                HookHandler._afterSetWindy += value;
                HookHandler.HookSetWindy();
            }
            remove => HookHandler._afterSetWindy -= value;
        }

        public static event Delegates.AdjustSaturation_NormalArgs AdjustSaturation
        {
            add
            {
                HookHandler._afterAdjustSaturation += value;
                HookHandler.HookAdjustSaturation();
            }
            remove => HookHandler._afterAdjustSaturation -= value;
        }

        public static event Delegates.AdjustSaturationForPlatform_NormalArgs AdjustSaturationForPlatform
        {
            add
            {
                HookHandler._afterAdjustSaturationForPlatform += value;
                HookHandler.HookAdjustSaturationForPlatform();
            }
            remove => HookHandler._afterAdjustSaturationForPlatform -= value;
        }

        public static event Delegates.PrintDebugInfo_NormalArgs PrintDebugInfo
        {
            add
            {
                HookHandler._afterPrintDebugInfo += value;
                HookHandler.HookPrintDebugInfo();
            }
            remove => HookHandler._afterPrintDebugInfo -= value;
        }

        public static event Delegates.DrawBlackBorders_NormalArgs DrawBlackBorders
        {
            add
            {
                HookHandler._afterDrawBlackBorders += value;
                HookHandler.HookDrawBlackBorders();
            }
            remove => HookHandler._afterDrawBlackBorders -= value;
        }

        public static event Delegates.AddSceneMapped_NormalArgs AddSceneMapped
        {
            add
            {
                HookHandler._afterAddSceneMapped += value;
                HookHandler.HookAddSceneMapped();
            }
            remove => HookHandler._afterAddSceneMapped -= value;
        }

        public static event Delegates.UpdateSceneSettings_NormalArgs UpdateSceneSettings
        {
            add
            {
                HookHandler._afterUpdateSceneSettings += value;
                HookHandler.HookUpdateSceneSettings();
            }
            remove => HookHandler._afterUpdateSceneSettings -= value;
        }

        public static event Delegates.orig_Update_NormalArgs orig_Update
        {
            add
            {
                HookHandler._afterorig_Update += value;
                HookHandler.Hookorig_Update();
            }
            remove => HookHandler._afterorig_Update -= value;
        }

        public static event Delegates.orig_Start_NormalArgs orig_Start
        {
            add
            {
                HookHandler._afterorig_Start += value;
                HookHandler.Hookorig_Start();
            }
            remove => HookHandler._afterorig_Start -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.SceneManager.hook_Start Start
        {
            add => On.SceneManager.Start += value;
            remove => On.SceneManager.Start -= value;
        }

        public static event On.SceneManager.hook_SetLighting SetLighting
        {
            add => On.SceneManager.SetLighting += value;
            remove => On.SceneManager.SetLighting -= value;
        }

        public static event On.SceneManager.hook_Update Update
        {
            add => On.SceneManager.Update += value;
            remove => On.SceneManager.Update -= value;
        }

        public static event On.SceneManager.hook_GetDarknessLevel GetDarknessLevel
        {
            add => On.SceneManager.GetDarknessLevel += value;
            remove => On.SceneManager.GetDarknessLevel -= value;
        }

        public static event On.SceneManager.hook_SetWindy SetWindy
        {
            add => On.SceneManager.SetWindy += value;
            remove => On.SceneManager.SetWindy -= value;
        }

        public static event On.SceneManager.hook_AdjustSaturation AdjustSaturation
        {
            add => On.SceneManager.AdjustSaturation += value;
            remove => On.SceneManager.AdjustSaturation -= value;
        }

        public static event On.SceneManager.hook_AdjustSaturationForPlatform AdjustSaturationForPlatform
        {
            add => On.SceneManager.AdjustSaturationForPlatform += value;
            remove => On.SceneManager.AdjustSaturationForPlatform -= value;
        }

        public static event On.SceneManager.hook_PrintDebugInfo PrintDebugInfo
        {
            add => On.SceneManager.PrintDebugInfo += value;
            remove => On.SceneManager.PrintDebugInfo -= value;
        }

        public static event On.SceneManager.hook_DrawBlackBorders DrawBlackBorders
        {
            add => On.SceneManager.DrawBlackBorders += value;
            remove => On.SceneManager.DrawBlackBorders -= value;
        }

        public static event On.SceneManager.hook_AddSceneMapped AddSceneMapped
        {
            add => On.SceneManager.AddSceneMapped += value;
            remove => On.SceneManager.AddSceneMapped -= value;
        }

        public static event On.SceneManager.hook_UpdateSceneSettings UpdateSceneSettings
        {
            add => On.SceneManager.UpdateSceneSettings += value;
            remove => On.SceneManager.UpdateSceneSettings -= value;
        }

        public static event Delegates.orig_Update_NormalArgs orig_Update
        {
            add => HookEndpointManager.Add<Delegates.orig_Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneManager), "orig_Update"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneManager), "orig_Update"), value);
        }

        public static event Delegates.orig_Start_NormalArgs orig_Start
        {
            add => HookEndpointManager.Add<Delegates.orig_Start_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneManager), "orig_Start"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_Start_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneManager), "orig_Start"), value);
        }
    }
}