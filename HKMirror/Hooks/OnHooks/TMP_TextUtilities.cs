using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TMP_TextUtilities class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTMP_TextUtilities
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookGetCursorInsertionIndex()
        {
            if (!HookedList.Contains("GetCursorInsertionIndex"))
            {
                HookedList.Add("GetCursorInsertionIndex");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "GetCursorInsertionIndex", false),
                    GetCursorInsertionIndex);
            }
        }

        internal static event Delegates.GetCursorInsertionIndex_BeforeArgs _beforeGetCursorInsertionIndex;
        internal static event Delegates.GetCursorInsertionIndex_AfterArgs _afterGetCursorInsertionIndex;

        private static CaretInfo GetCursorInsertionIndex(Func<TMP_Text, Vector3, Camera, CaretInfo> orig,
            TMP_Text textComponent, Vector3 position, Camera camera)
        {
            Delegates.Params_GetCursorInsertionIndex @params = new()
            {
                textComponent = textComponent, position = position, camera = camera
            };
            if (_beforeGetCursorInsertionIndex != null)
                foreach (Delegates.GetCursorInsertionIndex_BeforeArgs toInvoke in _beforeGetCursorInsertionIndex
                             .GetInvocationList())
                    try
                    {
                        _beforeGetCursorInsertionIndex?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            textComponent = @params.textComponent;
            position = @params.position;
            camera = @params.camera;
            var retVal = orig(textComponent, position, camera);
            if (_afterGetCursorInsertionIndex != null)
                foreach (Delegates.GetCursorInsertionIndex_AfterArgs toInvoke in _afterGetCursorInsertionIndex
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetCursorInsertionIndex.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetCursorIndexFromPosition_TMP_Text_Vector3_Camera()
        {
            if (!HookedList.Contains("GetCursorIndexFromPosition_TMP_Text_Vector3_Camera"))
            {
                HookedList.Add("GetCursorIndexFromPosition_TMP_Text_Vector3_Camera");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities),
                        "GetCursorIndexFromPosition_TMP_Text_Vector3_Camera", false),
                    GetCursorIndexFromPosition_TMP_Text_Vector3_Camera);
            }
        }

        internal static event Delegates.GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_BeforeArgs
            _beforeGetCursorIndexFromPosition_TMP_Text_Vector3_Camera;

        internal static event Delegates.GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_AfterArgs
            _afterGetCursorIndexFromPosition_TMP_Text_Vector3_Camera;

        private static int GetCursorIndexFromPosition_TMP_Text_Vector3_Camera(Func<TMP_Text, Vector3, Camera, int> orig,
            TMP_Text textComponent, Vector3 position, Camera camera)
        {
            Delegates.Params_GetCursorIndexFromPosition_TMP_Text_Vector3_Camera @params = new()
            {
                textComponent = textComponent, position = position, camera = camera
            };
            if (_beforeGetCursorIndexFromPosition_TMP_Text_Vector3_Camera != null)
                foreach (Delegates.GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_BeforeArgs toInvoke in
                         _beforeGetCursorIndexFromPosition_TMP_Text_Vector3_Camera.GetInvocationList())
                    try
                    {
                        _beforeGetCursorIndexFromPosition_TMP_Text_Vector3_Camera?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            textComponent = @params.textComponent;
            position = @params.position;
            camera = @params.camera;
            var retVal = orig(textComponent, position, camera);
            if (_afterGetCursorIndexFromPosition_TMP_Text_Vector3_Camera != null)
                foreach (Delegates.GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_AfterArgs toInvoke in
                         _afterGetCursorIndexFromPosition_TMP_Text_Vector3_Camera.GetInvocationList())
                    try
                    {
                        retVal = _afterGetCursorIndexFromPosition_TMP_Text_Vector3_Camera.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition()
        {
            if (!HookedList.Contains("GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition"))
            {
                HookedList.Add("GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities),
                        "GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition", false),
                    GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition);
            }
        }

        internal static event Delegates.GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition_BeforeArgs
            _beforeGetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition;

        internal static event Delegates.GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition_AfterArgs
            _afterGetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition;

        private static int GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition(
            Func<TMP_Text, Vector3, Camera, CaretPosition, int> orig, TMP_Text textComponent, Vector3 position,
            Camera camera, CaretPosition cursor)
        {
            Delegates.Params_GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition @params = new()
            {
                textComponent = textComponent, position = position, camera = camera, cursor = cursor
            };
            if (_beforeGetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition != null)
                foreach (Delegates.GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition_BeforeArgs toInvoke
                         in _beforeGetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition.GetInvocationList())
                    try
                    {
                        _beforeGetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            textComponent = @params.textComponent;
            position = @params.position;
            camera = @params.camera;
            cursor = @params.cursor;
            var retVal = orig(textComponent, position, camera, cursor);
            if (_afterGetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition != null)
                foreach (Delegates.GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition_AfterArgs toInvoke
                         in _afterGetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition.GetInvocationList())
                    try
                    {
                        retVal = _afterGetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition.Invoke(@params,
                            retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookIsIntersectingRectTransform()
        {
            if (!HookedList.Contains("IsIntersectingRectTransform"))
            {
                HookedList.Add("IsIntersectingRectTransform");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "IsIntersectingRectTransform", false),
                    IsIntersectingRectTransform);
            }
        }

        internal static event Delegates.IsIntersectingRectTransform_BeforeArgs _beforeIsIntersectingRectTransform;
        internal static event Delegates.IsIntersectingRectTransform_AfterArgs _afterIsIntersectingRectTransform;

        private static bool IsIntersectingRectTransform(Func<RectTransform, Vector3, Camera, bool> orig,
            RectTransform rectTransform, Vector3 position, Camera camera)
        {
            Delegates.Params_IsIntersectingRectTransform @params = new()
            {
                rectTransform = rectTransform, position = position, camera = camera
            };
            if (_beforeIsIntersectingRectTransform != null)
                foreach (Delegates.IsIntersectingRectTransform_BeforeArgs toInvoke in _beforeIsIntersectingRectTransform
                             .GetInvocationList())
                    try
                    {
                        _beforeIsIntersectingRectTransform?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            rectTransform = @params.rectTransform;
            position = @params.position;
            camera = @params.camera;
            var retVal = orig(rectTransform, position, camera);
            if (_afterIsIntersectingRectTransform != null)
                foreach (Delegates.IsIntersectingRectTransform_AfterArgs toInvoke in _afterIsIntersectingRectTransform
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterIsIntersectingRectTransform.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookFindIntersectingCharacter()
        {
            if (!HookedList.Contains("FindIntersectingCharacter"))
            {
                HookedList.Add("FindIntersectingCharacter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "FindIntersectingCharacter", false),
                    FindIntersectingCharacter);
            }
        }

        internal static event Delegates.FindIntersectingCharacter_BeforeArgs _beforeFindIntersectingCharacter;
        internal static event Delegates.FindIntersectingCharacter_AfterArgs _afterFindIntersectingCharacter;

        private static int FindIntersectingCharacter(Func<TMP_Text, Vector3, Camera, bool, int> orig, TMP_Text text,
            Vector3 position, Camera camera, bool visibleOnly)
        {
            Delegates.Params_FindIntersectingCharacter @params = new()
            {
                text = text, position = position, camera = camera, visibleOnly = visibleOnly
            };
            if (_beforeFindIntersectingCharacter != null)
                foreach (Delegates.FindIntersectingCharacter_BeforeArgs toInvoke in _beforeFindIntersectingCharacter
                             .GetInvocationList())
                    try
                    {
                        _beforeFindIntersectingCharacter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            text = @params.text;
            position = @params.position;
            camera = @params.camera;
            visibleOnly = @params.visibleOnly;
            var retVal = orig(text, position, camera, visibleOnly);
            if (_afterFindIntersectingCharacter != null)
                foreach (Delegates.FindIntersectingCharacter_AfterArgs toInvoke in _afterFindIntersectingCharacter
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterFindIntersectingCharacter.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookFindNearestCharacter()
        {
            if (!HookedList.Contains("FindNearestCharacter"))
            {
                HookedList.Add("FindNearestCharacter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "FindNearestCharacter", false),
                    FindNearestCharacter);
            }
        }

        internal static event Delegates.FindNearestCharacter_BeforeArgs _beforeFindNearestCharacter;
        internal static event Delegates.FindNearestCharacter_AfterArgs _afterFindNearestCharacter;

        private static int FindNearestCharacter(Func<TMP_Text, Vector3, Camera, bool, int> orig, TMP_Text text,
            Vector3 position, Camera camera, bool visibleOnly)
        {
            Delegates.Params_FindNearestCharacter @params = new()
            {
                text = text, position = position, camera = camera, visibleOnly = visibleOnly
            };
            if (_beforeFindNearestCharacter != null)
                foreach (Delegates.FindNearestCharacter_BeforeArgs toInvoke in _beforeFindNearestCharacter
                             .GetInvocationList())
                    try
                    {
                        _beforeFindNearestCharacter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            text = @params.text;
            position = @params.position;
            camera = @params.camera;
            visibleOnly = @params.visibleOnly;
            var retVal = orig(text, position, camera, visibleOnly);
            if (_afterFindNearestCharacter != null)
                foreach (Delegates.FindNearestCharacter_AfterArgs toInvoke in _afterFindNearestCharacter
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterFindNearestCharacter.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookFindIntersectingWord()
        {
            if (!HookedList.Contains("FindIntersectingWord"))
            {
                HookedList.Add("FindIntersectingWord");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "FindIntersectingWord", false),
                    FindIntersectingWord);
            }
        }

        internal static event Delegates.FindIntersectingWord_BeforeArgs _beforeFindIntersectingWord;
        internal static event Delegates.FindIntersectingWord_AfterArgs _afterFindIntersectingWord;

        private static int FindIntersectingWord(Func<TMP_Text, Vector3, Camera, int> orig, TMP_Text text,
            Vector3 position, Camera camera)
        {
            Delegates.Params_FindIntersectingWord @params = new()
            {
                text = text, position = position, camera = camera
            };
            if (_beforeFindIntersectingWord != null)
                foreach (Delegates.FindIntersectingWord_BeforeArgs toInvoke in _beforeFindIntersectingWord
                             .GetInvocationList())
                    try
                    {
                        _beforeFindIntersectingWord?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            text = @params.text;
            position = @params.position;
            camera = @params.camera;
            var retVal = orig(text, position, camera);
            if (_afterFindIntersectingWord != null)
                foreach (Delegates.FindIntersectingWord_AfterArgs toInvoke in _afterFindIntersectingWord
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterFindIntersectingWord.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookFindNearestWord()
        {
            if (!HookedList.Contains("FindNearestWord"))
            {
                HookedList.Add("FindNearestWord");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "FindNearestWord", false),
                    FindNearestWord);
            }
        }

        internal static event Delegates.FindNearestWord_BeforeArgs _beforeFindNearestWord;
        internal static event Delegates.FindNearestWord_AfterArgs _afterFindNearestWord;

        private static int FindNearestWord(Func<TMP_Text, Vector3, Camera, int> orig, TMP_Text text, Vector3 position,
            Camera camera)
        {
            Delegates.Params_FindNearestWord @params = new()
            {
                text = text, position = position, camera = camera
            };
            if (_beforeFindNearestWord != null)
                foreach (Delegates.FindNearestWord_BeforeArgs toInvoke in _beforeFindNearestWord.GetInvocationList())
                    try
                    {
                        _beforeFindNearestWord?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            text = @params.text;
            position = @params.position;
            camera = @params.camera;
            var retVal = orig(text, position, camera);
            if (_afterFindNearestWord != null)
                foreach (Delegates.FindNearestWord_AfterArgs toInvoke in _afterFindNearestWord.GetInvocationList())
                    try
                    {
                        retVal = _afterFindNearestWord.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookFindIntersectingLink()
        {
            if (!HookedList.Contains("FindIntersectingLink"))
            {
                HookedList.Add("FindIntersectingLink");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "FindIntersectingLink", false),
                    FindIntersectingLink);
            }
        }

        internal static event Delegates.FindIntersectingLink_BeforeArgs _beforeFindIntersectingLink;
        internal static event Delegates.FindIntersectingLink_AfterArgs _afterFindIntersectingLink;

        private static int FindIntersectingLink(Func<TMP_Text, Vector3, Camera, int> orig, TMP_Text text,
            Vector3 position, Camera camera)
        {
            Delegates.Params_FindIntersectingLink @params = new()
            {
                text = text, position = position, camera = camera
            };
            if (_beforeFindIntersectingLink != null)
                foreach (Delegates.FindIntersectingLink_BeforeArgs toInvoke in _beforeFindIntersectingLink
                             .GetInvocationList())
                    try
                    {
                        _beforeFindIntersectingLink?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            text = @params.text;
            position = @params.position;
            camera = @params.camera;
            var retVal = orig(text, position, camera);
            if (_afterFindIntersectingLink != null)
                foreach (Delegates.FindIntersectingLink_AfterArgs toInvoke in _afterFindIntersectingLink
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterFindIntersectingLink.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookFindNearestLink()
        {
            if (!HookedList.Contains("FindNearestLink"))
            {
                HookedList.Add("FindNearestLink");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "FindNearestLink", false),
                    FindNearestLink);
            }
        }

        internal static event Delegates.FindNearestLink_BeforeArgs _beforeFindNearestLink;
        internal static event Delegates.FindNearestLink_AfterArgs _afterFindNearestLink;

        private static int FindNearestLink(Func<TMP_Text, Vector3, Camera, int> orig, TMP_Text text, Vector3 position,
            Camera camera)
        {
            Delegates.Params_FindNearestLink @params = new()
            {
                text = text, position = position, camera = camera
            };
            if (_beforeFindNearestLink != null)
                foreach (Delegates.FindNearestLink_BeforeArgs toInvoke in _beforeFindNearestLink.GetInvocationList())
                    try
                    {
                        _beforeFindNearestLink?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            text = @params.text;
            position = @params.position;
            camera = @params.camera;
            var retVal = orig(text, position, camera);
            if (_afterFindNearestLink != null)
                foreach (Delegates.FindNearestLink_AfterArgs toInvoke in _afterFindNearestLink.GetInvocationList())
                    try
                    {
                        retVal = _afterFindNearestLink.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookPointIntersectRectangle()
        {
            if (!HookedList.Contains("PointIntersectRectangle"))
            {
                HookedList.Add("PointIntersectRectangle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "PointIntersectRectangle", false),
                    PointIntersectRectangle);
            }
        }

        internal static event Delegates.PointIntersectRectangle_BeforeArgs _beforePointIntersectRectangle;
        internal static event Delegates.PointIntersectRectangle_AfterArgs _afterPointIntersectRectangle;

        private static bool PointIntersectRectangle(Func<Vector3, Vector3, Vector3, Vector3, Vector3, bool> orig,
            Vector3 m, Vector3 a, Vector3 b, Vector3 c, Vector3 d)
        {
            Delegates.Params_PointIntersectRectangle @params = new()
            {
                m = m, a = a, b = b, c = c, d = d
            };
            if (_beforePointIntersectRectangle != null)
                foreach (Delegates.PointIntersectRectangle_BeforeArgs toInvoke in _beforePointIntersectRectangle
                             .GetInvocationList())
                    try
                    {
                        _beforePointIntersectRectangle?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            m = @params.m;
            a = @params.a;
            b = @params.b;
            c = @params.c;
            d = @params.d;
            var retVal = orig(m, a, b, c, d);
            if (_afterPointIntersectRectangle != null)
                foreach (Delegates.PointIntersectRectangle_AfterArgs toInvoke in _afterPointIntersectRectangle
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterPointIntersectRectangle.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookScreenPointToWorldPointInRectangle()
        {
            if (!HookedList.Contains("ScreenPointToWorldPointInRectangle"))
            {
                HookedList.Add("ScreenPointToWorldPointInRectangle");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "ScreenPointToWorldPointInRectangle",
                        false), ScreenPointToWorldPointInRectangle);
            }
        }

        internal static event Delegates.ScreenPointToWorldPointInRectangle_BeforeArgs
            _beforeScreenPointToWorldPointInRectangle;

        internal static event Delegates.ScreenPointToWorldPointInRectangle_AfterArgs
            _afterScreenPointToWorldPointInRectangle;

        private static bool ScreenPointToWorldPointInRectangle(Func<Transform, Vector2, Camera, Vector3, bool> orig,
            Transform transform, Vector2 screenPoint, Camera cam, Vector3 worldPoint)
        {
            Delegates.Params_ScreenPointToWorldPointInRectangle @params = new()
            {
                transform = transform, screenPoint = screenPoint, cam = cam, worldPoint = worldPoint
            };
            if (_beforeScreenPointToWorldPointInRectangle != null)
                foreach (Delegates.ScreenPointToWorldPointInRectangle_BeforeArgs toInvoke in
                         _beforeScreenPointToWorldPointInRectangle.GetInvocationList())
                    try
                    {
                        _beforeScreenPointToWorldPointInRectangle?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            transform = @params.transform;
            screenPoint = @params.screenPoint;
            cam = @params.cam;
            worldPoint = @params.worldPoint;
            var retVal = orig(transform, screenPoint, cam, worldPoint);
            if (_afterScreenPointToWorldPointInRectangle != null)
                foreach (Delegates.ScreenPointToWorldPointInRectangle_AfterArgs toInvoke in
                         _afterScreenPointToWorldPointInRectangle.GetInvocationList())
                    try
                    {
                        retVal = _afterScreenPointToWorldPointInRectangle.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookDistanceToLine()
        {
            if (!HookedList.Contains("DistanceToLine"))
            {
                HookedList.Add("DistanceToLine");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "DistanceToLine", false),
                    DistanceToLine);
            }
        }

        internal static event Delegates.DistanceToLine_BeforeArgs _beforeDistanceToLine;
        internal static event Delegates.DistanceToLine_AfterArgs _afterDistanceToLine;

        private static float DistanceToLine(Func<Vector3, Vector3, Vector3, float> orig, Vector3 a, Vector3 b,
            Vector3 point)
        {
            Delegates.Params_DistanceToLine @params = new()
            {
                a = a, b = b, point = point
            };
            if (_beforeDistanceToLine != null)
                foreach (Delegates.DistanceToLine_BeforeArgs toInvoke in _beforeDistanceToLine.GetInvocationList())
                    try
                    {
                        _beforeDistanceToLine?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            a = @params.a;
            b = @params.b;
            point = @params.point;
            var retVal = orig(a, b, point);
            if (_afterDistanceToLine != null)
                foreach (Delegates.DistanceToLine_AfterArgs toInvoke in _afterDistanceToLine.GetInvocationList())
                    try
                    {
                        retVal = _afterDistanceToLine.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookToLowerFast()
        {
            if (!HookedList.Contains("ToLowerFast"))
            {
                HookedList.Add("ToLowerFast");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "ToLowerFast", false), ToLowerFast);
            }
        }

        internal static event Delegates.ToLowerFast_BeforeArgs _beforeToLowerFast;
        internal static event Delegates.ToLowerFast_AfterArgs _afterToLowerFast;

        private static char ToLowerFast(Func<char, char> orig, char c)
        {
            Delegates.Params_ToLowerFast @params = new()
            {
                c = c
            };
            if (_beforeToLowerFast != null)
                foreach (Delegates.ToLowerFast_BeforeArgs toInvoke in _beforeToLowerFast.GetInvocationList())
                    try
                    {
                        _beforeToLowerFast?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            c = @params.c;
            var retVal = orig(c);
            if (_afterToLowerFast != null)
                foreach (Delegates.ToLowerFast_AfterArgs toInvoke in _afterToLowerFast.GetInvocationList())
                    try
                    {
                        retVal = _afterToLowerFast.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookToUpperFast()
        {
            if (!HookedList.Contains("ToUpperFast"))
            {
                HookedList.Add("ToUpperFast");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "ToUpperFast", false), ToUpperFast);
            }
        }

        internal static event Delegates.ToUpperFast_BeforeArgs _beforeToUpperFast;
        internal static event Delegates.ToUpperFast_AfterArgs _afterToUpperFast;

        private static char ToUpperFast(Func<char, char> orig, char c)
        {
            Delegates.Params_ToUpperFast @params = new()
            {
                c = c
            };
            if (_beforeToUpperFast != null)
                foreach (Delegates.ToUpperFast_BeforeArgs toInvoke in _beforeToUpperFast.GetInvocationList())
                    try
                    {
                        _beforeToUpperFast?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            c = @params.c;
            var retVal = orig(c);
            if (_afterToUpperFast != null)
                foreach (Delegates.ToUpperFast_AfterArgs toInvoke in _afterToUpperFast.GetInvocationList())
                    try
                    {
                        retVal = _afterToUpperFast.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetSimpleHashCode()
        {
            if (!HookedList.Contains("GetSimpleHashCode"))
            {
                HookedList.Add("GetSimpleHashCode");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "GetSimpleHashCode", false),
                    GetSimpleHashCode);
            }
        }

        internal static event Delegates.GetSimpleHashCode_BeforeArgs _beforeGetSimpleHashCode;
        internal static event Delegates.GetSimpleHashCode_AfterArgs _afterGetSimpleHashCode;

        private static int GetSimpleHashCode(Func<string, int> orig, string s)
        {
            Delegates.Params_GetSimpleHashCode @params = new()
            {
                s = s
            };
            if (_beforeGetSimpleHashCode != null)
                foreach (Delegates.GetSimpleHashCode_BeforeArgs toInvoke in
                         _beforeGetSimpleHashCode.GetInvocationList())
                    try
                    {
                        _beforeGetSimpleHashCode?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            s = @params.s;
            var retVal = orig(s);
            if (_afterGetSimpleHashCode != null)
                foreach (Delegates.GetSimpleHashCode_AfterArgs toInvoke in _afterGetSimpleHashCode.GetInvocationList())
                    try
                    {
                        retVal = _afterGetSimpleHashCode.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetSimpleHashCodeLowercase()
        {
            if (!HookedList.Contains("GetSimpleHashCodeLowercase"))
            {
                HookedList.Add("GetSimpleHashCodeLowercase");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "GetSimpleHashCodeLowercase", false),
                    GetSimpleHashCodeLowercase);
            }
        }

        internal static event Delegates.GetSimpleHashCodeLowercase_BeforeArgs _beforeGetSimpleHashCodeLowercase;
        internal static event Delegates.GetSimpleHashCodeLowercase_AfterArgs _afterGetSimpleHashCodeLowercase;

        private static uint GetSimpleHashCodeLowercase(Func<string, uint> orig, string s)
        {
            Delegates.Params_GetSimpleHashCodeLowercase @params = new()
            {
                s = s
            };
            if (_beforeGetSimpleHashCodeLowercase != null)
                foreach (Delegates.GetSimpleHashCodeLowercase_BeforeArgs toInvoke in _beforeGetSimpleHashCodeLowercase
                             .GetInvocationList())
                    try
                    {
                        _beforeGetSimpleHashCodeLowercase?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            s = @params.s;
            var retVal = orig(s);
            if (_afterGetSimpleHashCodeLowercase != null)
                foreach (Delegates.GetSimpleHashCodeLowercase_AfterArgs toInvoke in _afterGetSimpleHashCodeLowercase
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetSimpleHashCodeLowercase.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookHexToInt()
        {
            if (!HookedList.Contains("HexToInt"))
            {
                HookedList.Add("HexToInt");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "HexToInt", false), HexToInt);
            }
        }

        internal static event Delegates.HexToInt_BeforeArgs _beforeHexToInt;
        internal static event Delegates.HexToInt_AfterArgs _afterHexToInt;

        private static int HexToInt(Func<char, int> orig, char hex)
        {
            Delegates.Params_HexToInt @params = new()
            {
                hex = hex
            };
            if (_beforeHexToInt != null)
                foreach (Delegates.HexToInt_BeforeArgs toInvoke in _beforeHexToInt.GetInvocationList())
                    try
                    {
                        _beforeHexToInt?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            hex = @params.hex;
            var retVal = orig(hex);
            if (_afterHexToInt != null)
                foreach (Delegates.HexToInt_AfterArgs toInvoke in _afterHexToInt.GetInvocationList())
                    try
                    {
                        retVal = _afterHexToInt.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookStringToInt()
        {
            if (!HookedList.Contains("StringToInt"))
            {
                HookedList.Add("StringToInt");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "StringToInt", false), StringToInt);
            }
        }

        internal static event Delegates.StringToInt_BeforeArgs _beforeStringToInt;
        internal static event Delegates.StringToInt_AfterArgs _afterStringToInt;

        private static int StringToInt(Func<string, int> orig, string s)
        {
            Delegates.Params_StringToInt @params = new()
            {
                s = s
            };
            if (_beforeStringToInt != null)
                foreach (Delegates.StringToInt_BeforeArgs toInvoke in _beforeStringToInt.GetInvocationList())
                    try
                    {
                        _beforeStringToInt?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            s = @params.s;
            var retVal = orig(s);
            if (_afterStringToInt != null)
                foreach (Delegates.StringToInt_AfterArgs toInvoke in _afterStringToInt.GetInvocationList())
                    try
                    {
                        retVal = _afterStringToInt.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate float DistanceToLine_AfterArgs(Params_DistanceToLine args, float ret);

        public delegate void DistanceToLine_BeforeArgs(Params_DistanceToLine args);

        public delegate float DistanceToLine_WithArgs(Func<Vector3, Vector3, Vector3, float> orig, Vector3 a, Vector3 b,
            Vector3 point);

        public delegate int FindIntersectingCharacter_AfterArgs(Params_FindIntersectingCharacter args, int ret);

        public delegate void FindIntersectingCharacter_BeforeArgs(Params_FindIntersectingCharacter args);

        public delegate int FindIntersectingCharacter_WithArgs(Func<TMP_Text, Vector3, Camera, bool, int> orig,
            TMP_Text text, Vector3 position, Camera camera, bool visibleOnly);

        public delegate int FindIntersectingLink_AfterArgs(Params_FindIntersectingLink args, int ret);

        public delegate void FindIntersectingLink_BeforeArgs(Params_FindIntersectingLink args);

        public delegate int FindIntersectingLink_WithArgs(Func<TMP_Text, Vector3, Camera, int> orig, TMP_Text text,
            Vector3 position, Camera camera);

        public delegate int FindIntersectingWord_AfterArgs(Params_FindIntersectingWord args, int ret);

        public delegate void FindIntersectingWord_BeforeArgs(Params_FindIntersectingWord args);

        public delegate int FindIntersectingWord_WithArgs(Func<TMP_Text, Vector3, Camera, int> orig, TMP_Text text,
            Vector3 position, Camera camera);

        public delegate int FindNearestCharacter_AfterArgs(Params_FindNearestCharacter args, int ret);

        public delegate void FindNearestCharacter_BeforeArgs(Params_FindNearestCharacter args);

        public delegate int FindNearestCharacter_WithArgs(Func<TMP_Text, Vector3, Camera, bool, int> orig,
            TMP_Text text, Vector3 position, Camera camera, bool visibleOnly);

        public delegate int FindNearestLink_AfterArgs(Params_FindNearestLink args, int ret);

        public delegate void FindNearestLink_BeforeArgs(Params_FindNearestLink args);

        public delegate int FindNearestLink_WithArgs(Func<TMP_Text, Vector3, Camera, int> orig, TMP_Text text,
            Vector3 position, Camera camera);

        public delegate int FindNearestWord_AfterArgs(Params_FindNearestWord args, int ret);

        public delegate void FindNearestWord_BeforeArgs(Params_FindNearestWord args);

        public delegate int FindNearestWord_WithArgs(Func<TMP_Text, Vector3, Camera, int> orig, TMP_Text text,
            Vector3 position, Camera camera);

        public delegate int GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_AfterArgs(
            Params_GetCursorIndexFromPosition_TMP_Text_Vector3_Camera args, int ret);

        public delegate void GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_BeforeArgs(
            Params_GetCursorIndexFromPosition_TMP_Text_Vector3_Camera args);

        public delegate int GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition_AfterArgs(
            Params_GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition args, int ret);

        public delegate void GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition_BeforeArgs(
            Params_GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition args);

        public delegate int GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition_WithArgs(
            Func<TMP_Text, Vector3, Camera, CaretPosition, int> orig, TMP_Text textComponent, Vector3 position,
            Camera camera, CaretPosition cursor);

        public delegate int GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_WithArgs(
            Func<TMP_Text, Vector3, Camera, int> orig, TMP_Text textComponent, Vector3 position, Camera camera);

        public delegate CaretInfo GetCursorInsertionIndex_AfterArgs(Params_GetCursorInsertionIndex args, CaretInfo ret);

        public delegate void GetCursorInsertionIndex_BeforeArgs(Params_GetCursorInsertionIndex args);

        public delegate CaretInfo GetCursorInsertionIndex_WithArgs(Func<TMP_Text, Vector3, Camera, CaretInfo> orig,
            TMP_Text textComponent, Vector3 position, Camera camera);

        public delegate int GetSimpleHashCode_AfterArgs(Params_GetSimpleHashCode args, int ret);

        public delegate void GetSimpleHashCode_BeforeArgs(Params_GetSimpleHashCode args);

        public delegate int GetSimpleHashCode_WithArgs(Func<string, int> orig, string s);

        public delegate uint GetSimpleHashCodeLowercase_AfterArgs(Params_GetSimpleHashCodeLowercase args, uint ret);

        public delegate void GetSimpleHashCodeLowercase_BeforeArgs(Params_GetSimpleHashCodeLowercase args);

        public delegate uint GetSimpleHashCodeLowercase_WithArgs(Func<string, uint> orig, string s);

        public delegate int HexToInt_AfterArgs(Params_HexToInt args, int ret);

        public delegate void HexToInt_BeforeArgs(Params_HexToInt args);

        public delegate int HexToInt_WithArgs(Func<char, int> orig, char hex);

        public delegate bool IsIntersectingRectTransform_AfterArgs(Params_IsIntersectingRectTransform args, bool ret);

        public delegate void IsIntersectingRectTransform_BeforeArgs(Params_IsIntersectingRectTransform args);

        public delegate bool IsIntersectingRectTransform_WithArgs(Func<RectTransform, Vector3, Camera, bool> orig,
            RectTransform rectTransform, Vector3 position, Camera camera);

        public delegate bool PointIntersectRectangle_AfterArgs(Params_PointIntersectRectangle args, bool ret);

        public delegate void PointIntersectRectangle_BeforeArgs(Params_PointIntersectRectangle args);

        public delegate bool PointIntersectRectangle_WithArgs(
            Func<Vector3, Vector3, Vector3, Vector3, Vector3, bool> orig, Vector3 m, Vector3 a, Vector3 b, Vector3 c,
            Vector3 d);

        public delegate bool ScreenPointToWorldPointInRectangle_AfterArgs(
            Params_ScreenPointToWorldPointInRectangle args, bool ret);

        public delegate void ScreenPointToWorldPointInRectangle_BeforeArgs(
            Params_ScreenPointToWorldPointInRectangle args);

        public delegate bool ScreenPointToWorldPointInRectangle_WithArgs(
            Func<Transform, Vector2, Camera, Vector3, bool> orig, Transform transform, Vector2 screenPoint, Camera cam,
            Vector3 worldPoint);

        public delegate int StringToInt_AfterArgs(Params_StringToInt args, int ret);

        public delegate void StringToInt_BeforeArgs(Params_StringToInt args);

        public delegate int StringToInt_WithArgs(Func<string, int> orig, string s);

        public delegate char ToLowerFast_AfterArgs(Params_ToLowerFast args, char ret);

        public delegate void ToLowerFast_BeforeArgs(Params_ToLowerFast args);

        public delegate char ToLowerFast_WithArgs(Func<char, char> orig, char c);

        public delegate char ToUpperFast_AfterArgs(Params_ToUpperFast args, char ret);

        public delegate void ToUpperFast_BeforeArgs(Params_ToUpperFast args);

        public delegate char ToUpperFast_WithArgs(Func<char, char> orig, char c);

        public sealed class Params_GetCursorInsertionIndex
        {
            public Camera camera;
            public Vector3 position;
            public TMP_Text textComponent;
        }

        public sealed class Params_GetCursorIndexFromPosition_TMP_Text_Vector3_Camera
        {
            public Camera camera;
            public Vector3 position;
            public TMP_Text textComponent;
        }

        public sealed class Params_GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition
        {
            public Camera camera;
            public CaretPosition cursor;
            public Vector3 position;
            public TMP_Text textComponent;
        }

        public sealed class Params_IsIntersectingRectTransform
        {
            public Camera camera;
            public Vector3 position;
            public RectTransform rectTransform;
        }

        public sealed class Params_FindIntersectingCharacter
        {
            public Camera camera;
            public Vector3 position;
            public TMP_Text text;
            public bool visibleOnly;
        }

        public sealed class Params_FindNearestCharacter
        {
            public Camera camera;
            public Vector3 position;
            public TMP_Text text;
            public bool visibleOnly;
        }

        public sealed class Params_FindIntersectingWord
        {
            public Camera camera;
            public Vector3 position;
            public TMP_Text text;
        }

        public sealed class Params_FindNearestWord
        {
            public Camera camera;
            public Vector3 position;
            public TMP_Text text;
        }

        public sealed class Params_FindIntersectingLink
        {
            public Camera camera;
            public Vector3 position;
            public TMP_Text text;
        }

        public sealed class Params_FindNearestLink
        {
            public Camera camera;
            public Vector3 position;
            public TMP_Text text;
        }

        public sealed class Params_PointIntersectRectangle
        {
            public Vector3 a;
            public Vector3 b;
            public Vector3 c;
            public Vector3 d;
            public Vector3 m;
        }

        public sealed class Params_ScreenPointToWorldPointInRectangle
        {
            public Camera cam;
            public Vector2 screenPoint;
            public Transform transform;
            public Vector3 worldPoint;
        }

        public sealed class Params_DistanceToLine
        {
            public Vector3 a;
            public Vector3 b;
            public Vector3 point;
        }

        public sealed class Params_ToLowerFast
        {
            public char c;
        }

        public sealed class Params_ToUpperFast
        {
            public char c;
        }

        public sealed class Params_GetSimpleHashCode
        {
            public string s;
        }

        public sealed class Params_GetSimpleHashCodeLowercase
        {
            public string s;
        }

        public sealed class Params_HexToInt
        {
            public char hex;
        }

        public sealed class Params_StringToInt
        {
            public string s;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.GetCursorInsertionIndex_BeforeArgs GetCursorInsertionIndex
        {
            add
            {
                HookHandler._beforeGetCursorInsertionIndex += value;
                HookHandler.HookGetCursorInsertionIndex();
            }
            remove => HookHandler._beforeGetCursorInsertionIndex -= value;
        }

        public static event Delegates.GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_BeforeArgs
            GetCursorIndexFromPosition_TMP_Text_Vector3_Camera
            {
                add
                {
                    HookHandler._beforeGetCursorIndexFromPosition_TMP_Text_Vector3_Camera += value;
                    HookHandler.HookGetCursorIndexFromPosition_TMP_Text_Vector3_Camera();
                }
                remove => HookHandler._beforeGetCursorIndexFromPosition_TMP_Text_Vector3_Camera -= value;
            }

        public static event Delegates.GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition_BeforeArgs
            GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition
            {
                add
                {
                    HookHandler._beforeGetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition += value;
                    HookHandler.HookGetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition();
                }
                remove => HookHandler._beforeGetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition -= value;
            }

        public static event Delegates.IsIntersectingRectTransform_BeforeArgs IsIntersectingRectTransform
        {
            add
            {
                HookHandler._beforeIsIntersectingRectTransform += value;
                HookHandler.HookIsIntersectingRectTransform();
            }
            remove => HookHandler._beforeIsIntersectingRectTransform -= value;
        }

        public static event Delegates.FindIntersectingCharacter_BeforeArgs FindIntersectingCharacter
        {
            add
            {
                HookHandler._beforeFindIntersectingCharacter += value;
                HookHandler.HookFindIntersectingCharacter();
            }
            remove => HookHandler._beforeFindIntersectingCharacter -= value;
        }

        public static event Delegates.FindNearestCharacter_BeforeArgs FindNearestCharacter
        {
            add
            {
                HookHandler._beforeFindNearestCharacter += value;
                HookHandler.HookFindNearestCharacter();
            }
            remove => HookHandler._beforeFindNearestCharacter -= value;
        }

        public static event Delegates.FindIntersectingWord_BeforeArgs FindIntersectingWord
        {
            add
            {
                HookHandler._beforeFindIntersectingWord += value;
                HookHandler.HookFindIntersectingWord();
            }
            remove => HookHandler._beforeFindIntersectingWord -= value;
        }

        public static event Delegates.FindNearestWord_BeforeArgs FindNearestWord
        {
            add
            {
                HookHandler._beforeFindNearestWord += value;
                HookHandler.HookFindNearestWord();
            }
            remove => HookHandler._beforeFindNearestWord -= value;
        }

        public static event Delegates.FindIntersectingLink_BeforeArgs FindIntersectingLink
        {
            add
            {
                HookHandler._beforeFindIntersectingLink += value;
                HookHandler.HookFindIntersectingLink();
            }
            remove => HookHandler._beforeFindIntersectingLink -= value;
        }

        public static event Delegates.FindNearestLink_BeforeArgs FindNearestLink
        {
            add
            {
                HookHandler._beforeFindNearestLink += value;
                HookHandler.HookFindNearestLink();
            }
            remove => HookHandler._beforeFindNearestLink -= value;
        }

        public static event Delegates.PointIntersectRectangle_BeforeArgs PointIntersectRectangle
        {
            add
            {
                HookHandler._beforePointIntersectRectangle += value;
                HookHandler.HookPointIntersectRectangle();
            }
            remove => HookHandler._beforePointIntersectRectangle -= value;
        }

        public static event Delegates.ScreenPointToWorldPointInRectangle_BeforeArgs ScreenPointToWorldPointInRectangle
        {
            add
            {
                HookHandler._beforeScreenPointToWorldPointInRectangle += value;
                HookHandler.HookScreenPointToWorldPointInRectangle();
            }
            remove => HookHandler._beforeScreenPointToWorldPointInRectangle -= value;
        }

        public static event Delegates.DistanceToLine_BeforeArgs DistanceToLine
        {
            add
            {
                HookHandler._beforeDistanceToLine += value;
                HookHandler.HookDistanceToLine();
            }
            remove => HookHandler._beforeDistanceToLine -= value;
        }

        public static event Delegates.ToLowerFast_BeforeArgs ToLowerFast
        {
            add
            {
                HookHandler._beforeToLowerFast += value;
                HookHandler.HookToLowerFast();
            }
            remove => HookHandler._beforeToLowerFast -= value;
        }

        public static event Delegates.ToUpperFast_BeforeArgs ToUpperFast
        {
            add
            {
                HookHandler._beforeToUpperFast += value;
                HookHandler.HookToUpperFast();
            }
            remove => HookHandler._beforeToUpperFast -= value;
        }

        public static event Delegates.GetSimpleHashCode_BeforeArgs GetSimpleHashCode
        {
            add
            {
                HookHandler._beforeGetSimpleHashCode += value;
                HookHandler.HookGetSimpleHashCode();
            }
            remove => HookHandler._beforeGetSimpleHashCode -= value;
        }

        public static event Delegates.GetSimpleHashCodeLowercase_BeforeArgs GetSimpleHashCodeLowercase
        {
            add
            {
                HookHandler._beforeGetSimpleHashCodeLowercase += value;
                HookHandler.HookGetSimpleHashCodeLowercase();
            }
            remove => HookHandler._beforeGetSimpleHashCodeLowercase -= value;
        }

        public static event Delegates.HexToInt_BeforeArgs HexToInt
        {
            add
            {
                HookHandler._beforeHexToInt += value;
                HookHandler.HookHexToInt();
            }
            remove => HookHandler._beforeHexToInt -= value;
        }

        public static event Delegates.StringToInt_BeforeArgs StringToInt
        {
            add
            {
                HookHandler._beforeStringToInt += value;
                HookHandler.HookStringToInt();
            }
            remove => HookHandler._beforeStringToInt -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.GetCursorInsertionIndex_AfterArgs GetCursorInsertionIndex
        {
            add
            {
                HookHandler._afterGetCursorInsertionIndex += value;
                HookHandler.HookGetCursorInsertionIndex();
            }
            remove => HookHandler._afterGetCursorInsertionIndex -= value;
        }

        public static event Delegates.GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_AfterArgs
            GetCursorIndexFromPosition_TMP_Text_Vector3_Camera
            {
                add
                {
                    HookHandler._afterGetCursorIndexFromPosition_TMP_Text_Vector3_Camera += value;
                    HookHandler.HookGetCursorIndexFromPosition_TMP_Text_Vector3_Camera();
                }
                remove => HookHandler._afterGetCursorIndexFromPosition_TMP_Text_Vector3_Camera -= value;
            }

        public static event Delegates.GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition_AfterArgs
            GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition
            {
                add
                {
                    HookHandler._afterGetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition += value;
                    HookHandler.HookGetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition();
                }
                remove => HookHandler._afterGetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition -= value;
            }

        public static event Delegates.IsIntersectingRectTransform_AfterArgs IsIntersectingRectTransform
        {
            add
            {
                HookHandler._afterIsIntersectingRectTransform += value;
                HookHandler.HookIsIntersectingRectTransform();
            }
            remove => HookHandler._afterIsIntersectingRectTransform -= value;
        }

        public static event Delegates.FindIntersectingCharacter_AfterArgs FindIntersectingCharacter
        {
            add
            {
                HookHandler._afterFindIntersectingCharacter += value;
                HookHandler.HookFindIntersectingCharacter();
            }
            remove => HookHandler._afterFindIntersectingCharacter -= value;
        }

        public static event Delegates.FindNearestCharacter_AfterArgs FindNearestCharacter
        {
            add
            {
                HookHandler._afterFindNearestCharacter += value;
                HookHandler.HookFindNearestCharacter();
            }
            remove => HookHandler._afterFindNearestCharacter -= value;
        }

        public static event Delegates.FindIntersectingWord_AfterArgs FindIntersectingWord
        {
            add
            {
                HookHandler._afterFindIntersectingWord += value;
                HookHandler.HookFindIntersectingWord();
            }
            remove => HookHandler._afterFindIntersectingWord -= value;
        }

        public static event Delegates.FindNearestWord_AfterArgs FindNearestWord
        {
            add
            {
                HookHandler._afterFindNearestWord += value;
                HookHandler.HookFindNearestWord();
            }
            remove => HookHandler._afterFindNearestWord -= value;
        }

        public static event Delegates.FindIntersectingLink_AfterArgs FindIntersectingLink
        {
            add
            {
                HookHandler._afterFindIntersectingLink += value;
                HookHandler.HookFindIntersectingLink();
            }
            remove => HookHandler._afterFindIntersectingLink -= value;
        }

        public static event Delegates.FindNearestLink_AfterArgs FindNearestLink
        {
            add
            {
                HookHandler._afterFindNearestLink += value;
                HookHandler.HookFindNearestLink();
            }
            remove => HookHandler._afterFindNearestLink -= value;
        }

        public static event Delegates.PointIntersectRectangle_AfterArgs PointIntersectRectangle
        {
            add
            {
                HookHandler._afterPointIntersectRectangle += value;
                HookHandler.HookPointIntersectRectangle();
            }
            remove => HookHandler._afterPointIntersectRectangle -= value;
        }

        public static event Delegates.ScreenPointToWorldPointInRectangle_AfterArgs ScreenPointToWorldPointInRectangle
        {
            add
            {
                HookHandler._afterScreenPointToWorldPointInRectangle += value;
                HookHandler.HookScreenPointToWorldPointInRectangle();
            }
            remove => HookHandler._afterScreenPointToWorldPointInRectangle -= value;
        }

        public static event Delegates.DistanceToLine_AfterArgs DistanceToLine
        {
            add
            {
                HookHandler._afterDistanceToLine += value;
                HookHandler.HookDistanceToLine();
            }
            remove => HookHandler._afterDistanceToLine -= value;
        }

        public static event Delegates.ToLowerFast_AfterArgs ToLowerFast
        {
            add
            {
                HookHandler._afterToLowerFast += value;
                HookHandler.HookToLowerFast();
            }
            remove => HookHandler._afterToLowerFast -= value;
        }

        public static event Delegates.ToUpperFast_AfterArgs ToUpperFast
        {
            add
            {
                HookHandler._afterToUpperFast += value;
                HookHandler.HookToUpperFast();
            }
            remove => HookHandler._afterToUpperFast -= value;
        }

        public static event Delegates.GetSimpleHashCode_AfterArgs GetSimpleHashCode
        {
            add
            {
                HookHandler._afterGetSimpleHashCode += value;
                HookHandler.HookGetSimpleHashCode();
            }
            remove => HookHandler._afterGetSimpleHashCode -= value;
        }

        public static event Delegates.GetSimpleHashCodeLowercase_AfterArgs GetSimpleHashCodeLowercase
        {
            add
            {
                HookHandler._afterGetSimpleHashCodeLowercase += value;
                HookHandler.HookGetSimpleHashCodeLowercase();
            }
            remove => HookHandler._afterGetSimpleHashCodeLowercase -= value;
        }

        public static event Delegates.HexToInt_AfterArgs HexToInt
        {
            add
            {
                HookHandler._afterHexToInt += value;
                HookHandler.HookHexToInt();
            }
            remove => HookHandler._afterHexToInt -= value;
        }

        public static event Delegates.StringToInt_AfterArgs StringToInt
        {
            add
            {
                HookHandler._afterStringToInt += value;
                HookHandler.HookStringToInt();
            }
            remove => HookHandler._afterStringToInt -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.GetCursorInsertionIndex_WithArgs GetCursorInsertionIndex
        {
            add => HookEndpointManager.Add<Delegates.GetCursorInsertionIndex_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "GetCursorInsertionIndex", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetCursorInsertionIndex_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "GetCursorInsertionIndex", false), value);
        }

        public static event Delegates.GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_WithArgs
            GetCursorIndexFromPosition_TMP_Text_Vector3_Camera
            {
                add => HookEndpointManager.Add<Delegates.GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "GetCursorIndexFromPosition", false),
                    value);
                remove =>
                    HookEndpointManager.Remove<Delegates.GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "GetCursorIndexFromPosition", false),
                        value);
            }

        public static event Delegates.GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition_WithArgs
            GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition
            {
                add => HookEndpointManager
                    .Add<Delegates.GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "GetCursorIndexFromPosition", false),
                        value);
                remove =>
                    HookEndpointManager
                        .Remove<Delegates.GetCursorIndexFromPosition_TMP_Text_Vector3_Camera_CaretPosition_WithArgs>(
                            ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "GetCursorIndexFromPosition",
                                false), value);
            }

        public static event Delegates.IsIntersectingRectTransform_WithArgs IsIntersectingRectTransform
        {
            add => HookEndpointManager.Add<Delegates.IsIntersectingRectTransform_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "IsIntersectingRectTransform", false), value);
            remove => HookEndpointManager.Remove<Delegates.IsIntersectingRectTransform_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "IsIntersectingRectTransform", false), value);
        }

        public static event Delegates.FindIntersectingCharacter_WithArgs FindIntersectingCharacter
        {
            add => HookEndpointManager.Add<Delegates.FindIntersectingCharacter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "FindIntersectingCharacter", false), value);
            remove => HookEndpointManager.Remove<Delegates.FindIntersectingCharacter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "FindIntersectingCharacter", false), value);
        }

        public static event Delegates.FindNearestCharacter_WithArgs FindNearestCharacter
        {
            add => HookEndpointManager.Add<Delegates.FindNearestCharacter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "FindNearestCharacter", false), value);
            remove => HookEndpointManager.Remove<Delegates.FindNearestCharacter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "FindNearestCharacter", false), value);
        }

        public static event Delegates.FindIntersectingWord_WithArgs FindIntersectingWord
        {
            add => HookEndpointManager.Add<Delegates.FindIntersectingWord_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "FindIntersectingWord", false), value);
            remove => HookEndpointManager.Remove<Delegates.FindIntersectingWord_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "FindIntersectingWord", false), value);
        }

        public static event Delegates.FindNearestWord_WithArgs FindNearestWord
        {
            add => HookEndpointManager.Add<Delegates.FindNearestWord_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "FindNearestWord", false), value);
            remove => HookEndpointManager.Remove<Delegates.FindNearestWord_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "FindNearestWord", false), value);
        }

        public static event Delegates.FindIntersectingLink_WithArgs FindIntersectingLink
        {
            add => HookEndpointManager.Add<Delegates.FindIntersectingLink_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "FindIntersectingLink", false), value);
            remove => HookEndpointManager.Remove<Delegates.FindIntersectingLink_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "FindIntersectingLink", false), value);
        }

        public static event Delegates.FindNearestLink_WithArgs FindNearestLink
        {
            add => HookEndpointManager.Add<Delegates.FindNearestLink_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "FindNearestLink", false), value);
            remove => HookEndpointManager.Remove<Delegates.FindNearestLink_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "FindNearestLink", false), value);
        }

        public static event Delegates.PointIntersectRectangle_WithArgs PointIntersectRectangle
        {
            add => HookEndpointManager.Add<Delegates.PointIntersectRectangle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "PointIntersectRectangle", false), value);
            remove => HookEndpointManager.Remove<Delegates.PointIntersectRectangle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "PointIntersectRectangle", false), value);
        }

        public static event Delegates.ScreenPointToWorldPointInRectangle_WithArgs ScreenPointToWorldPointInRectangle
        {
            add => HookEndpointManager.Add<Delegates.ScreenPointToWorldPointInRectangle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "ScreenPointToWorldPointInRectangle", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.ScreenPointToWorldPointInRectangle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "ScreenPointToWorldPointInRectangle", false),
                value);
        }

        public static event Delegates.DistanceToLine_WithArgs DistanceToLine
        {
            add => HookEndpointManager.Add<Delegates.DistanceToLine_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "DistanceToLine", false), value);
            remove => HookEndpointManager.Remove<Delegates.DistanceToLine_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "DistanceToLine", false), value);
        }

        public static event Delegates.ToLowerFast_WithArgs ToLowerFast
        {
            add => HookEndpointManager.Add<Delegates.ToLowerFast_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "ToLowerFast", false), value);
            remove => HookEndpointManager.Remove<Delegates.ToLowerFast_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "ToLowerFast", false), value);
        }

        public static event Delegates.ToUpperFast_WithArgs ToUpperFast
        {
            add => HookEndpointManager.Add<Delegates.ToUpperFast_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "ToUpperFast", false), value);
            remove => HookEndpointManager.Remove<Delegates.ToUpperFast_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "ToUpperFast", false), value);
        }

        public static event Delegates.GetSimpleHashCode_WithArgs GetSimpleHashCode
        {
            add => HookEndpointManager.Add<Delegates.GetSimpleHashCode_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "GetSimpleHashCode", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetSimpleHashCode_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "GetSimpleHashCode", false), value);
        }

        public static event Delegates.GetSimpleHashCodeLowercase_WithArgs GetSimpleHashCodeLowercase
        {
            add => HookEndpointManager.Add<Delegates.GetSimpleHashCodeLowercase_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "GetSimpleHashCodeLowercase", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetSimpleHashCodeLowercase_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "GetSimpleHashCodeLowercase", false), value);
        }

        public static event Delegates.HexToInt_WithArgs HexToInt
        {
            add => HookEndpointManager.Add<Delegates.HexToInt_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "HexToInt", false), value);
            remove => HookEndpointManager.Remove<Delegates.HexToInt_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "HexToInt", false), value);
        }

        public static event Delegates.StringToInt_WithArgs StringToInt
        {
            add => HookEndpointManager.Add<Delegates.StringToInt_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "StringToInt", false), value);
            remove => HookEndpointManager.Remove<Delegates.StringToInt_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextUtilities), "StringToInt", false), value);
        }
    }
}