using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for PlayMakerHashTableProxy class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPlayMakerHashTableProxy
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_hashTable()
        {
            if (!HookedList.Contains("get_hashTable"))
            {
                HookedList.Add("get_hashTable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayMakerHashTableProxy), "get_hashTable"),
                    get_hashTable);
            }
        }

        internal static event Delegates.get_hashTable_BeforeArgs _beforeget_hashTable;
        internal static event Delegates.get_hashTable_AfterArgs _afterget_hashTable;

        private static Hashtable get_hashTable(Func<PlayMakerHashTableProxy, Hashtable> orig,
            PlayMakerHashTableProxy self)
        {
            Delegates.Params_get_hashTable @params = new()
            {
                self = self
            };
            if (_beforeget_hashTable != null)
                foreach (Delegates.get_hashTable_BeforeArgs toInvoke in _beforeget_hashTable.GetInvocationList())
                    try
                    {
                        _beforeget_hashTable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_hashTable != null)
                foreach (Delegates.get_hashTable_AfterArgs toInvoke in _afterget_hashTable.GetInvocationList())
                    try
                    {
                        retVal = _afterget_hashTable.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.PlayMakerHashTableProxy.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.PlayMakerHashTableProxy.orig_Awake orig, PlayMakerHashTableProxy self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookisCollectionDefined()
        {
            if (!HookedList.Contains("isCollectionDefined"))
            {
                HookedList.Add("isCollectionDefined");
                On.PlayMakerHashTableProxy.isCollectionDefined += isCollectionDefined;
            }
        }

        internal static event Delegates.isCollectionDefined_BeforeArgs _beforeisCollectionDefined;
        internal static event Delegates.isCollectionDefined_AfterArgs _afterisCollectionDefined;

        private static bool isCollectionDefined(On.PlayMakerHashTableProxy.orig_isCollectionDefined orig,
            PlayMakerHashTableProxy self)
        {
            Delegates.Params_isCollectionDefined @params = new()
            {
                self = self
            };
            if (_beforeisCollectionDefined != null)
                foreach (Delegates.isCollectionDefined_BeforeArgs toInvoke in _beforeisCollectionDefined
                             .GetInvocationList())
                    try
                    {
                        _beforeisCollectionDefined?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterisCollectionDefined != null)
                foreach (Delegates.isCollectionDefined_AfterArgs toInvoke in
                         _afterisCollectionDefined.GetInvocationList())
                    try
                    {
                        retVal = _afterisCollectionDefined.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookTakeSnapShot()
        {
            if (!HookedList.Contains("TakeSnapShot"))
            {
                HookedList.Add("TakeSnapShot");
                On.PlayMakerHashTableProxy.TakeSnapShot += TakeSnapShot;
            }
        }

        internal static event Delegates.TakeSnapShot_BeforeArgs _beforeTakeSnapShot;
        internal static event Delegates.TakeSnapShot_AfterArgs _afterTakeSnapShot;

        private static void TakeSnapShot(On.PlayMakerHashTableProxy.orig_TakeSnapShot orig,
            PlayMakerHashTableProxy self)
        {
            Delegates.Params_TakeSnapShot @params = new()
            {
                self = self
            };
            if (_beforeTakeSnapShot != null)
                foreach (Delegates.TakeSnapShot_BeforeArgs toInvoke in _beforeTakeSnapShot.GetInvocationList())
                    try
                    {
                        _beforeTakeSnapShot?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterTakeSnapShot != null)
                foreach (Delegates.TakeSnapShot_AfterArgs toInvoke in _afterTakeSnapShot.GetInvocationList())
                    try
                    {
                        _afterTakeSnapShot.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRevertToSnapShot()
        {
            if (!HookedList.Contains("RevertToSnapShot"))
            {
                HookedList.Add("RevertToSnapShot");
                On.PlayMakerHashTableProxy.RevertToSnapShot += RevertToSnapShot;
            }
        }

        internal static event Delegates.RevertToSnapShot_BeforeArgs _beforeRevertToSnapShot;
        internal static event Delegates.RevertToSnapShot_AfterArgs _afterRevertToSnapShot;

        private static void RevertToSnapShot(On.PlayMakerHashTableProxy.orig_RevertToSnapShot orig,
            PlayMakerHashTableProxy self)
        {
            Delegates.Params_RevertToSnapShot @params = new()
            {
                self = self
            };
            if (_beforeRevertToSnapShot != null)
                foreach (Delegates.RevertToSnapShot_BeforeArgs toInvoke in _beforeRevertToSnapShot.GetInvocationList())
                    try
                    {
                        _beforeRevertToSnapShot?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterRevertToSnapShot != null)
                foreach (Delegates.RevertToSnapShot_AfterArgs toInvoke in _afterRevertToSnapShot.GetInvocationList())
                    try
                    {
                        _afterRevertToSnapShot.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookInspectorEdit()
        {
            if (!HookedList.Contains("InspectorEdit"))
            {
                HookedList.Add("InspectorEdit");
                On.PlayMakerHashTableProxy.InspectorEdit += InspectorEdit;
            }
        }

        internal static event Delegates.InspectorEdit_BeforeArgs _beforeInspectorEdit;
        internal static event Delegates.InspectorEdit_AfterArgs _afterInspectorEdit;

        private static void InspectorEdit(On.PlayMakerHashTableProxy.orig_InspectorEdit orig,
            PlayMakerHashTableProxy self, int index)
        {
            Delegates.Params_InspectorEdit @params = new()
            {
                self = self, index = index
            };
            if (_beforeInspectorEdit != null)
                foreach (Delegates.InspectorEdit_BeforeArgs toInvoke in _beforeInspectorEdit.GetInvocationList())
                    try
                    {
                        _beforeInspectorEdit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            index = @params.index;
            orig(self, index);
            if (_afterInspectorEdit != null)
                foreach (Delegates.InspectorEdit_AfterArgs toInvoke in _afterInspectorEdit.GetInvocationList())
                    try
                    {
                        _afterInspectorEdit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPreFillHashTable()
        {
            if (!HookedList.Contains("PreFillHashTable"))
            {
                HookedList.Add("PreFillHashTable");
                On.PlayMakerHashTableProxy.PreFillHashTable += PreFillHashTable;
            }
        }

        internal static event Delegates.PreFillHashTable_BeforeArgs _beforePreFillHashTable;
        internal static event Delegates.PreFillHashTable_AfterArgs _afterPreFillHashTable;

        private static void PreFillHashTable(On.PlayMakerHashTableProxy.orig_PreFillHashTable orig,
            PlayMakerHashTableProxy self)
        {
            Delegates.Params_PreFillHashTable @params = new()
            {
                self = self
            };
            if (_beforePreFillHashTable != null)
                foreach (Delegates.PreFillHashTable_BeforeArgs toInvoke in _beforePreFillHashTable.GetInvocationList())
                    try
                    {
                        _beforePreFillHashTable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterPreFillHashTable != null)
                foreach (Delegates.PreFillHashTable_AfterArgs toInvoke in _afterPreFillHashTable.GetInvocationList())
                    try
                    {
                        _afterPreFillHashTable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<PlayMakerHashTableProxy> orig, PlayMakerHashTableProxy self);

        public delegate Hashtable get_hashTable_AfterArgs(Params_get_hashTable args, Hashtable ret);

        public delegate void get_hashTable_BeforeArgs(Params_get_hashTable args);

        public delegate Hashtable get_hashTable_WithArgs(Func<PlayMakerHashTableProxy, Hashtable> orig,
            PlayMakerHashTableProxy self);

        public delegate void InspectorEdit_AfterArgs(Params_InspectorEdit args);

        public delegate void InspectorEdit_BeforeArgs(Params_InspectorEdit args);

        public delegate void InspectorEdit_WithArgs(Action<PlayMakerHashTableProxy, int> orig,
            PlayMakerHashTableProxy self, int index);

        public delegate bool isCollectionDefined_AfterArgs(Params_isCollectionDefined args, bool ret);

        public delegate void isCollectionDefined_BeforeArgs(Params_isCollectionDefined args);

        public delegate bool isCollectionDefined_WithArgs(Func<PlayMakerHashTableProxy, bool> orig,
            PlayMakerHashTableProxy self);

        public delegate void PreFillHashTable_AfterArgs(Params_PreFillHashTable args);

        public delegate void PreFillHashTable_BeforeArgs(Params_PreFillHashTable args);

        public delegate void PreFillHashTable_WithArgs(Action<PlayMakerHashTableProxy> orig,
            PlayMakerHashTableProxy self);

        public delegate void RevertToSnapShot_AfterArgs(Params_RevertToSnapShot args);

        public delegate void RevertToSnapShot_BeforeArgs(Params_RevertToSnapShot args);

        public delegate void RevertToSnapShot_WithArgs(Action<PlayMakerHashTableProxy> orig,
            PlayMakerHashTableProxy self);

        public delegate void TakeSnapShot_AfterArgs(Params_TakeSnapShot args);

        public delegate void TakeSnapShot_BeforeArgs(Params_TakeSnapShot args);

        public delegate void TakeSnapShot_WithArgs(Action<PlayMakerHashTableProxy> orig, PlayMakerHashTableProxy self);

        public sealed class Params_get_hashTable
        {
            public PlayMakerHashTableProxy self;
        }

        public sealed class Params_Awake
        {
            public PlayMakerHashTableProxy self;
        }

        public sealed class Params_isCollectionDefined
        {
            public PlayMakerHashTableProxy self;
        }

        public sealed class Params_TakeSnapShot
        {
            public PlayMakerHashTableProxy self;
        }

        public sealed class Params_RevertToSnapShot
        {
            public PlayMakerHashTableProxy self;
        }

        public sealed class Params_InspectorEdit
        {
            public int index;
            public PlayMakerHashTableProxy self;
        }

        public sealed class Params_PreFillHashTable
        {
            public PlayMakerHashTableProxy self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_hashTable_BeforeArgs get_hashTable
        {
            add
            {
                HookHandler._beforeget_hashTable += value;
                HookHandler.Hookget_hashTable();
            }
            remove => HookHandler._beforeget_hashTable -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.isCollectionDefined_BeforeArgs isCollectionDefined
        {
            add
            {
                HookHandler._beforeisCollectionDefined += value;
                HookHandler.HookisCollectionDefined();
            }
            remove => HookHandler._beforeisCollectionDefined -= value;
        }

        public static event Delegates.TakeSnapShot_BeforeArgs TakeSnapShot
        {
            add
            {
                HookHandler._beforeTakeSnapShot += value;
                HookHandler.HookTakeSnapShot();
            }
            remove => HookHandler._beforeTakeSnapShot -= value;
        }

        public static event Delegates.RevertToSnapShot_BeforeArgs RevertToSnapShot
        {
            add
            {
                HookHandler._beforeRevertToSnapShot += value;
                HookHandler.HookRevertToSnapShot();
            }
            remove => HookHandler._beforeRevertToSnapShot -= value;
        }

        public static event Delegates.InspectorEdit_BeforeArgs InspectorEdit
        {
            add
            {
                HookHandler._beforeInspectorEdit += value;
                HookHandler.HookInspectorEdit();
            }
            remove => HookHandler._beforeInspectorEdit -= value;
        }

        public static event Delegates.PreFillHashTable_BeforeArgs PreFillHashTable
        {
            add
            {
                HookHandler._beforePreFillHashTable += value;
                HookHandler.HookPreFillHashTable();
            }
            remove => HookHandler._beforePreFillHashTable -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_hashTable_AfterArgs get_hashTable
        {
            add
            {
                HookHandler._afterget_hashTable += value;
                HookHandler.Hookget_hashTable();
            }
            remove => HookHandler._afterget_hashTable -= value;
        }

        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.isCollectionDefined_AfterArgs isCollectionDefined
        {
            add
            {
                HookHandler._afterisCollectionDefined += value;
                HookHandler.HookisCollectionDefined();
            }
            remove => HookHandler._afterisCollectionDefined -= value;
        }

        public static event Delegates.TakeSnapShot_AfterArgs TakeSnapShot
        {
            add
            {
                HookHandler._afterTakeSnapShot += value;
                HookHandler.HookTakeSnapShot();
            }
            remove => HookHandler._afterTakeSnapShot -= value;
        }

        public static event Delegates.RevertToSnapShot_AfterArgs RevertToSnapShot
        {
            add
            {
                HookHandler._afterRevertToSnapShot += value;
                HookHandler.HookRevertToSnapShot();
            }
            remove => HookHandler._afterRevertToSnapShot -= value;
        }

        public static event Delegates.InspectorEdit_AfterArgs InspectorEdit
        {
            add
            {
                HookHandler._afterInspectorEdit += value;
                HookHandler.HookInspectorEdit();
            }
            remove => HookHandler._afterInspectorEdit -= value;
        }

        public static event Delegates.PreFillHashTable_AfterArgs PreFillHashTable
        {
            add
            {
                HookHandler._afterPreFillHashTable += value;
                HookHandler.HookPreFillHashTable();
            }
            remove => HookHandler._afterPreFillHashTable -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_hashTable_WithArgs get_hashTable
        {
            add => HookEndpointManager.Add<Delegates.get_hashTable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayMakerHashTableProxy), "get_hashTable"), value);
            remove => HookEndpointManager.Remove<Delegates.get_hashTable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayMakerHashTableProxy), "get_hashTable"), value);
        }

        public static event On.PlayMakerHashTableProxy.hook_Awake Awake
        {
            add => On.PlayMakerHashTableProxy.Awake += value;
            remove => On.PlayMakerHashTableProxy.Awake -= value;
        }

        public static event On.PlayMakerHashTableProxy.hook_isCollectionDefined isCollectionDefined
        {
            add => On.PlayMakerHashTableProxy.isCollectionDefined += value;
            remove => On.PlayMakerHashTableProxy.isCollectionDefined -= value;
        }

        public static event On.PlayMakerHashTableProxy.hook_TakeSnapShot TakeSnapShot
        {
            add => On.PlayMakerHashTableProxy.TakeSnapShot += value;
            remove => On.PlayMakerHashTableProxy.TakeSnapShot -= value;
        }

        public static event On.PlayMakerHashTableProxy.hook_RevertToSnapShot RevertToSnapShot
        {
            add => On.PlayMakerHashTableProxy.RevertToSnapShot += value;
            remove => On.PlayMakerHashTableProxy.RevertToSnapShot -= value;
        }

        public static event On.PlayMakerHashTableProxy.hook_InspectorEdit InspectorEdit
        {
            add => On.PlayMakerHashTableProxy.InspectorEdit += value;
            remove => On.PlayMakerHashTableProxy.InspectorEdit -= value;
        }

        public static event On.PlayMakerHashTableProxy.hook_PreFillHashTable PreFillHashTable
        {
            add => On.PlayMakerHashTableProxy.PreFillHashTable += value;
            remove => On.PlayMakerHashTableProxy.PreFillHashTable -= value;
        }
    }
}