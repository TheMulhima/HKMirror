using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for InputHandler class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnInputHandler
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_mappableControllerActions()
        {
            if (!HookedList.Contains("get_mappableControllerActions"))
            {
                HookedList.Add("get_mappableControllerActions");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputHandler), "get_mappableControllerActions"),
                    get_mappableControllerActions);
            }
        }

        internal static event Delegates.get_mappableControllerActions_BeforeArgs _beforeget_mappableControllerActions;
        internal static event Delegates.get_mappableControllerActions_NormalArgs _afterget_mappableControllerActions;

        private static List<PlayerAction> get_mappableControllerActions(Func<InputHandler, List<PlayerAction>> orig,
            InputHandler self)
        {
            Delegates.Params_get_mappableControllerActions @params = new()
            {
                self = self
            };
            _beforeget_mappableControllerActions?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_mappableControllerActions != null)
                retVal = _afterget_mappableControllerActions.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_mappableControllerActions()
        {
            if (!HookedList.Contains("set_mappableControllerActions"))
            {
                HookedList.Add("set_mappableControllerActions");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputHandler), "set_mappableControllerActions"),
                    set_mappableControllerActions);
            }
        }

        internal static event Delegates.set_mappableControllerActions_BeforeArgs _beforeset_mappableControllerActions;
        internal static event Delegates.set_mappableControllerActions_NormalArgs _afterset_mappableControllerActions;

        private static void set_mappableControllerActions(Action<InputHandler, List<PlayerAction>> orig,
            InputHandler self, List<PlayerAction> value)
        {
            Delegates.Params_set_mappableControllerActions @params = new()
            {
                self = self, value = value
            };
            _beforeset_mappableControllerActions?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_mappableControllerActions != null) _afterset_mappableControllerActions.Invoke(@params);
        }

        internal static void Hookget_unmappedActions()
        {
            if (!HookedList.Contains("get_unmappedActions"))
            {
                HookedList.Add("get_unmappedActions");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputHandler), "get_unmappedActions"),
                    get_unmappedActions);
            }
        }

        internal static event Delegates.get_unmappedActions_BeforeArgs _beforeget_unmappedActions;
        internal static event Delegates.get_unmappedActions_NormalArgs _afterget_unmappedActions;

        private static List<PlayerAction> get_unmappedActions(Func<InputHandler, List<PlayerAction>> orig,
            InputHandler self)
        {
            Delegates.Params_get_unmappedActions @params = new()
            {
                self = self
            };
            _beforeget_unmappedActions?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_unmappedActions != null) retVal = _afterget_unmappedActions.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_unmappedActions()
        {
            if (!HookedList.Contains("set_unmappedActions"))
            {
                HookedList.Add("set_unmappedActions");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputHandler), "set_unmappedActions"),
                    set_unmappedActions);
            }
        }

        internal static event Delegates.set_unmappedActions_BeforeArgs _beforeset_unmappedActions;
        internal static event Delegates.set_unmappedActions_NormalArgs _afterset_unmappedActions;

        private static void set_unmappedActions(Action<InputHandler, List<PlayerAction>> orig, InputHandler self,
            List<PlayerAction> value)
        {
            Delegates.Params_set_unmappedActions @params = new()
            {
                self = self, value = value
            };
            _beforeset_unmappedActions?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_unmappedActions != null) _afterset_unmappedActions.Invoke(@params);
        }

        internal static void Hookget_pauseAllowed()
        {
            if (!HookedList.Contains("get_pauseAllowed"))
            {
                HookedList.Add("get_pauseAllowed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputHandler), "get_pauseAllowed"), get_pauseAllowed);
            }
        }

        internal static event Delegates.get_pauseAllowed_BeforeArgs _beforeget_pauseAllowed;
        internal static event Delegates.get_pauseAllowed_NormalArgs _afterget_pauseAllowed;

        private static bool get_pauseAllowed(Func<InputHandler, bool> orig, InputHandler self)
        {
            Delegates.Params_get_pauseAllowed @params = new()
            {
                self = self
            };
            _beforeget_pauseAllowed?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_pauseAllowed != null) retVal = _afterget_pauseAllowed.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_pauseAllowed()
        {
            if (!HookedList.Contains("set_pauseAllowed"))
            {
                HookedList.Add("set_pauseAllowed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputHandler), "set_pauseAllowed"), set_pauseAllowed);
            }
        }

        internal static event Delegates.set_pauseAllowed_BeforeArgs _beforeset_pauseAllowed;
        internal static event Delegates.set_pauseAllowed_NormalArgs _afterset_pauseAllowed;

        private static void set_pauseAllowed(Action<InputHandler, bool> orig, InputHandler self, bool value)
        {
            Delegates.Params_set_pauseAllowed @params = new()
            {
                self = self, value = value
            };
            _beforeset_pauseAllowed?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_pauseAllowed != null) _afterset_pauseAllowed.Invoke(@params);
        }

        internal static void Hookget_skipMode()
        {
            if (!HookedList.Contains("get_skipMode"))
            {
                HookedList.Add("get_skipMode");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputHandler), "get_skipMode"), get_skipMode);
            }
        }

        internal static event Delegates.get_skipMode_BeforeArgs _beforeget_skipMode;
        internal static event Delegates.get_skipMode_NormalArgs _afterget_skipMode;

        private static SkipPromptMode get_skipMode(Func<InputHandler, SkipPromptMode> orig, InputHandler self)
        {
            Delegates.Params_get_skipMode @params = new()
            {
                self = self
            };
            _beforeget_skipMode?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_skipMode != null) retVal = _afterget_skipMode.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_skipMode()
        {
            if (!HookedList.Contains("set_skipMode"))
            {
                HookedList.Add("set_skipMode");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputHandler), "set_skipMode"), set_skipMode);
            }
        }

        internal static event Delegates.set_skipMode_BeforeArgs _beforeset_skipMode;
        internal static event Delegates.set_skipMode_NormalArgs _afterset_skipMode;

        private static void set_skipMode(Action<InputHandler, SkipPromptMode> orig, InputHandler self,
            SkipPromptMode value)
        {
            Delegates.Params_set_skipMode @params = new()
            {
                self = self, value = value
            };
            _beforeset_skipMode?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_skipMode != null) _afterset_skipMode.Invoke(@params);
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.InputHandler.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.InputHandler.orig_Awake orig, InputHandler self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.InputHandler.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.InputHandler.orig_Start orig, InputHandler self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.InputHandler.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_NormalArgs _afterOnDestroy;

        private static void OnDestroy(On.InputHandler.orig_OnDestroy orig, InputHandler self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            _beforeOnDestroy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null) _afterOnDestroy.Invoke(@params);
        }

        internal static void HookSceneInit()
        {
            if (!HookedList.Contains("SceneInit"))
            {
                HookedList.Add("SceneInit");
                On.InputHandler.SceneInit += SceneInit;
            }
        }

        internal static event Delegates.SceneInit_BeforeArgs _beforeSceneInit;
        internal static event Delegates.SceneInit_NormalArgs _afterSceneInit;

        private static void SceneInit(On.InputHandler.orig_SceneInit orig, InputHandler self)
        {
            Delegates.Params_SceneInit @params = new()
            {
                self = self
            };
            _beforeSceneInit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSceneInit != null) _afterSceneInit.Invoke(@params);
        }

        internal static void HookOnGUI()
        {
            if (!HookedList.Contains("OnGUI"))
            {
                HookedList.Add("OnGUI");
                On.InputHandler.OnGUI += OnGUI;
            }
        }

        internal static event Delegates.OnGUI_BeforeArgs _beforeOnGUI;
        internal static event Delegates.OnGUI_NormalArgs _afterOnGUI;

        private static void OnGUI(On.InputHandler.orig_OnGUI orig, InputHandler self)
        {
            Delegates.Params_OnGUI @params = new()
            {
                self = self
            };
            _beforeOnGUI?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnGUI != null) _afterOnGUI.Invoke(@params);
        }

        internal static void HookSetCursorVisible()
        {
            if (!HookedList.Contains("SetCursorVisible"))
            {
                HookedList.Add("SetCursorVisible");
                On.InputHandler.SetCursorVisible += SetCursorVisible;
            }
        }

        internal static event Delegates.SetCursorVisible_BeforeArgs _beforeSetCursorVisible;
        internal static event Delegates.SetCursorVisible_NormalArgs _afterSetCursorVisible;

        private static void SetCursorVisible(On.InputHandler.orig_SetCursorVisible orig, InputHandler self, bool value)
        {
            Delegates.Params_SetCursorVisible @params = new()
            {
                self = self, value = value
            };
            _beforeSetCursorVisible?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterSetCursorVisible != null) _afterSetCursorVisible.Invoke(@params);
        }

        internal static void HookSetCursorEnabled()
        {
            if (!HookedList.Contains("SetCursorEnabled"))
            {
                HookedList.Add("SetCursorEnabled");
                On.InputHandler.SetCursorEnabled += SetCursorEnabled;
            }
        }

        internal static event Delegates.SetCursorEnabled_BeforeArgs _beforeSetCursorEnabled;
        internal static event Delegates.SetCursorEnabled_NormalArgs _afterSetCursorEnabled;

        private static void SetCursorEnabled(On.InputHandler.orig_SetCursorEnabled orig, bool isEnabled)
        {
            Delegates.Params_SetCursorEnabled @params = new()
            {
                isEnabled = isEnabled
            };
            _beforeSetCursorEnabled?.Invoke(@params);
            isEnabled = @params.isEnabled;
            orig(isEnabled);
            if (_afterSetCursorEnabled != null) _afterSetCursorEnabled.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.InputHandler.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.InputHandler.orig_Update orig, InputHandler self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookControllerAttached()
        {
            if (!HookedList.Contains("ControllerAttached"))
            {
                HookedList.Add("ControllerAttached");
                On.InputHandler.ControllerAttached += ControllerAttached;
            }
        }

        internal static event Delegates.ControllerAttached_BeforeArgs _beforeControllerAttached;
        internal static event Delegates.ControllerAttached_NormalArgs _afterControllerAttached;

        private static void ControllerAttached(On.InputHandler.orig_ControllerAttached orig, InputHandler self,
            InputDevice inputDevice)
        {
            Delegates.Params_ControllerAttached @params = new()
            {
                self = self, inputDevice = inputDevice
            };
            _beforeControllerAttached?.Invoke(@params);
            self = @params.self;
            inputDevice = @params.inputDevice;
            orig(self, inputDevice);
            if (_afterControllerAttached != null) _afterControllerAttached.Invoke(@params);
        }

        internal static void HookControllerActivated()
        {
            if (!HookedList.Contains("ControllerActivated"))
            {
                HookedList.Add("ControllerActivated");
                On.InputHandler.ControllerActivated += ControllerActivated;
            }
        }

        internal static event Delegates.ControllerActivated_BeforeArgs _beforeControllerActivated;
        internal static event Delegates.ControllerActivated_NormalArgs _afterControllerActivated;

        private static void ControllerActivated(On.InputHandler.orig_ControllerActivated orig, InputHandler self,
            InputDevice inputDevice)
        {
            Delegates.Params_ControllerActivated @params = new()
            {
                self = self, inputDevice = inputDevice
            };
            _beforeControllerActivated?.Invoke(@params);
            self = @params.self;
            inputDevice = @params.inputDevice;
            orig(self, inputDevice);
            if (_afterControllerActivated != null) _afterControllerActivated.Invoke(@params);
        }

        internal static void HookControllerDetached()
        {
            if (!HookedList.Contains("ControllerDetached"))
            {
                HookedList.Add("ControllerDetached");
                On.InputHandler.ControllerDetached += ControllerDetached;
            }
        }

        internal static event Delegates.ControllerDetached_BeforeArgs _beforeControllerDetached;
        internal static event Delegates.ControllerDetached_NormalArgs _afterControllerDetached;

        private static void ControllerDetached(On.InputHandler.orig_ControllerDetached orig, InputHandler self,
            InputDevice inputDevice)
        {
            Delegates.Params_ControllerDetached @params = new()
            {
                self = self, inputDevice = inputDevice
            };
            _beforeControllerDetached?.Invoke(@params);
            self = @params.self;
            inputDevice = @params.inputDevice;
            orig(self, inputDevice);
            if (_afterControllerDetached != null) _afterControllerDetached.Invoke(@params);
        }

        internal static void HookPlayingInput()
        {
            if (!HookedList.Contains("PlayingInput"))
            {
                HookedList.Add("PlayingInput");
                On.InputHandler.PlayingInput += PlayingInput;
            }
        }

        internal static event Delegates.PlayingInput_BeforeArgs _beforePlayingInput;
        internal static event Delegates.PlayingInput_NormalArgs _afterPlayingInput;

        private static void PlayingInput(On.InputHandler.orig_PlayingInput orig, InputHandler self)
        {
            Delegates.Params_PlayingInput @params = new()
            {
                self = self
            };
            _beforePlayingInput?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPlayingInput != null) _afterPlayingInput.Invoke(@params);
        }

        internal static void HookCutsceneInput()
        {
            if (!HookedList.Contains("CutsceneInput"))
            {
                HookedList.Add("CutsceneInput");
                On.InputHandler.CutsceneInput += CutsceneInput;
            }
        }

        internal static event Delegates.CutsceneInput_BeforeArgs _beforeCutsceneInput;
        internal static event Delegates.CutsceneInput_NormalArgs _afterCutsceneInput;

        private static void CutsceneInput(On.InputHandler.orig_CutsceneInput orig, InputHandler self)
        {
            Delegates.Params_CutsceneInput @params = new()
            {
                self = self
            };
            _beforeCutsceneInput?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCutsceneInput != null) _afterCutsceneInput.Invoke(@params);
        }

        internal static void HookStagCutsceneInput()
        {
            if (!HookedList.Contains("StagCutsceneInput"))
            {
                HookedList.Add("StagCutsceneInput");
                On.InputHandler.StagCutsceneInput += StagCutsceneInput;
            }
        }

        internal static event Delegates.StagCutsceneInput_BeforeArgs _beforeStagCutsceneInput;
        internal static event Delegates.StagCutsceneInput_NormalArgs _afterStagCutsceneInput;

        private static void StagCutsceneInput(On.InputHandler.orig_StagCutsceneInput orig, InputHandler self)
        {
            Delegates.Params_StagCutsceneInput @params = new()
            {
                self = self
            };
            _beforeStagCutsceneInput?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStagCutsceneInput != null) _afterStagCutsceneInput.Invoke(@params);
        }

        internal static void HookBetaEndInput()
        {
            if (!HookedList.Contains("BetaEndInput"))
            {
                HookedList.Add("BetaEndInput");
                On.InputHandler.BetaEndInput += BetaEndInput;
            }
        }

        internal static event Delegates.BetaEndInput_BeforeArgs _beforeBetaEndInput;
        internal static event Delegates.BetaEndInput_NormalArgs _afterBetaEndInput;

        private static void BetaEndInput(On.InputHandler.orig_BetaEndInput orig, InputHandler self)
        {
            Delegates.Params_BetaEndInput @params = new()
            {
                self = self
            };
            _beforeBetaEndInput?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBetaEndInput != null) _afterBetaEndInput.Invoke(@params);
        }

        internal static void HookAttachHeroController()
        {
            if (!HookedList.Contains("AttachHeroController"))
            {
                HookedList.Add("AttachHeroController");
                On.InputHandler.AttachHeroController += AttachHeroController;
            }
        }

        internal static event Delegates.AttachHeroController_BeforeArgs _beforeAttachHeroController;
        internal static event Delegates.AttachHeroController_NormalArgs _afterAttachHeroController;

        private static void AttachHeroController(On.InputHandler.orig_AttachHeroController orig, InputHandler self,
            HeroController heroController)
        {
            Delegates.Params_AttachHeroController @params = new()
            {
                self = self, heroController = heroController
            };
            _beforeAttachHeroController?.Invoke(@params);
            self = @params.self;
            heroController = @params.heroController;
            orig(self, heroController);
            if (_afterAttachHeroController != null) _afterAttachHeroController.Invoke(@params);
        }

        internal static void HookStopAcceptingInput()
        {
            if (!HookedList.Contains("StopAcceptingInput"))
            {
                HookedList.Add("StopAcceptingInput");
                On.InputHandler.StopAcceptingInput += StopAcceptingInput;
            }
        }

        internal static event Delegates.StopAcceptingInput_BeforeArgs _beforeStopAcceptingInput;
        internal static event Delegates.StopAcceptingInput_NormalArgs _afterStopAcceptingInput;

        private static void StopAcceptingInput(On.InputHandler.orig_StopAcceptingInput orig, InputHandler self)
        {
            Delegates.Params_StopAcceptingInput @params = new()
            {
                self = self
            };
            _beforeStopAcceptingInput?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStopAcceptingInput != null) _afterStopAcceptingInput.Invoke(@params);
        }

        internal static void HookStartAcceptingInput()
        {
            if (!HookedList.Contains("StartAcceptingInput"))
            {
                HookedList.Add("StartAcceptingInput");
                On.InputHandler.StartAcceptingInput += StartAcceptingInput;
            }
        }

        internal static event Delegates.StartAcceptingInput_BeforeArgs _beforeStartAcceptingInput;
        internal static event Delegates.StartAcceptingInput_NormalArgs _afterStartAcceptingInput;

        private static void StartAcceptingInput(On.InputHandler.orig_StartAcceptingInput orig, InputHandler self)
        {
            Delegates.Params_StartAcceptingInput @params = new()
            {
                self = self
            };
            _beforeStartAcceptingInput?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStartAcceptingInput != null) _afterStartAcceptingInput.Invoke(@params);
        }

        internal static void HookPreventPause()
        {
            if (!HookedList.Contains("PreventPause"))
            {
                HookedList.Add("PreventPause");
                On.InputHandler.PreventPause += PreventPause;
            }
        }

        internal static event Delegates.PreventPause_BeforeArgs _beforePreventPause;
        internal static event Delegates.PreventPause_NormalArgs _afterPreventPause;

        private static void PreventPause(On.InputHandler.orig_PreventPause orig, InputHandler self)
        {
            Delegates.Params_PreventPause @params = new()
            {
                self = self
            };
            _beforePreventPause?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPreventPause != null) _afterPreventPause.Invoke(@params);
        }

        internal static void HookAllowPause()
        {
            if (!HookedList.Contains("AllowPause"))
            {
                HookedList.Add("AllowPause");
                On.InputHandler.AllowPause += AllowPause;
            }
        }

        internal static event Delegates.AllowPause_BeforeArgs _beforeAllowPause;
        internal static event Delegates.AllowPause_NormalArgs _afterAllowPause;

        private static void AllowPause(On.InputHandler.orig_AllowPause orig, InputHandler self)
        {
            Delegates.Params_AllowPause @params = new()
            {
                self = self
            };
            _beforeAllowPause?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAllowPause != null) _afterAllowPause.Invoke(@params);
        }

        internal static void HookUpdateActiveController()
        {
            if (!HookedList.Contains("UpdateActiveController"))
            {
                HookedList.Add("UpdateActiveController");
                On.InputHandler.UpdateActiveController += UpdateActiveController;
            }
        }

        internal static event Delegates.UpdateActiveController_BeforeArgs _beforeUpdateActiveController;
        internal static event Delegates.UpdateActiveController_NormalArgs _afterUpdateActiveController;

        private static void UpdateActiveController(On.InputHandler.orig_UpdateActiveController orig, InputHandler self)
        {
            Delegates.Params_UpdateActiveController @params = new()
            {
                self = self
            };
            _beforeUpdateActiveController?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateActiveController != null) _afterUpdateActiveController.Invoke(@params);
        }

        internal static void HookStopUIInput()
        {
            if (!HookedList.Contains("StopUIInput"))
            {
                HookedList.Add("StopUIInput");
                On.InputHandler.StopUIInput += StopUIInput;
            }
        }

        internal static event Delegates.StopUIInput_BeforeArgs _beforeStopUIInput;
        internal static event Delegates.StopUIInput_NormalArgs _afterStopUIInput;

        private static void StopUIInput(On.InputHandler.orig_StopUIInput orig, InputHandler self)
        {
            Delegates.Params_StopUIInput @params = new()
            {
                self = self
            };
            _beforeStopUIInput?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStopUIInput != null) _afterStopUIInput.Invoke(@params);
        }

        internal static void HookStartUIInput()
        {
            if (!HookedList.Contains("StartUIInput"))
            {
                HookedList.Add("StartUIInput");
                On.InputHandler.StartUIInput += StartUIInput;
            }
        }

        internal static event Delegates.StartUIInput_BeforeArgs _beforeStartUIInput;
        internal static event Delegates.StartUIInput_NormalArgs _afterStartUIInput;

        private static void StartUIInput(On.InputHandler.orig_StartUIInput orig, InputHandler self)
        {
            Delegates.Params_StartUIInput @params = new()
            {
                self = self
            };
            _beforeStartUIInput?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStartUIInput != null) _afterStartUIInput.Invoke(@params);
        }

        internal static void HookStopMouseInput()
        {
            if (!HookedList.Contains("StopMouseInput"))
            {
                HookedList.Add("StopMouseInput");
                On.InputHandler.StopMouseInput += StopMouseInput;
            }
        }

        internal static event Delegates.StopMouseInput_BeforeArgs _beforeStopMouseInput;
        internal static event Delegates.StopMouseInput_NormalArgs _afterStopMouseInput;

        private static void StopMouseInput(On.InputHandler.orig_StopMouseInput orig, InputHandler self)
        {
            Delegates.Params_StopMouseInput @params = new()
            {
                self = self
            };
            _beforeStopMouseInput?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStopMouseInput != null) _afterStopMouseInput.Invoke(@params);
        }

        internal static void HookEnableMouseInput()
        {
            if (!HookedList.Contains("EnableMouseInput"))
            {
                HookedList.Add("EnableMouseInput");
                On.InputHandler.EnableMouseInput += EnableMouseInput;
            }
        }

        internal static event Delegates.EnableMouseInput_BeforeArgs _beforeEnableMouseInput;
        internal static event Delegates.EnableMouseInput_NormalArgs _afterEnableMouseInput;

        private static void EnableMouseInput(On.InputHandler.orig_EnableMouseInput orig, InputHandler self)
        {
            Delegates.Params_EnableMouseInput @params = new()
            {
                self = self
            };
            _beforeEnableMouseInput?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterEnableMouseInput != null) _afterEnableMouseInput.Invoke(@params);
        }

        internal static void HookSetSkipMode()
        {
            if (!HookedList.Contains("SetSkipMode"))
            {
                HookedList.Add("SetSkipMode");
                On.InputHandler.SetSkipMode += SetSkipMode;
            }
        }

        internal static event Delegates.SetSkipMode_BeforeArgs _beforeSetSkipMode;
        internal static event Delegates.SetSkipMode_NormalArgs _afterSetSkipMode;

        private static void SetSkipMode(On.InputHandler.orig_SetSkipMode orig, InputHandler self,
            SkipPromptMode newMode)
        {
            Delegates.Params_SetSkipMode @params = new()
            {
                self = self, newMode = newMode
            };
            _beforeSetSkipMode?.Invoke(@params);
            self = @params.self;
            newMode = @params.newMode;
            orig(self, newMode);
            if (_afterSetSkipMode != null) _afterSetSkipMode.Invoke(@params);
        }

        internal static void HookRefreshPlayerData()
        {
            if (!HookedList.Contains("RefreshPlayerData"))
            {
                HookedList.Add("RefreshPlayerData");
                On.InputHandler.RefreshPlayerData += RefreshPlayerData;
            }
        }

        internal static event Delegates.RefreshPlayerData_BeforeArgs _beforeRefreshPlayerData;
        internal static event Delegates.RefreshPlayerData_NormalArgs _afterRefreshPlayerData;

        private static void RefreshPlayerData(On.InputHandler.orig_RefreshPlayerData orig, InputHandler self)
        {
            Delegates.Params_RefreshPlayerData @params = new()
            {
                self = self
            };
            _beforeRefreshPlayerData?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRefreshPlayerData != null) _afterRefreshPlayerData.Invoke(@params);
        }

        internal static void HookResetDefaultKeyBindings()
        {
            if (!HookedList.Contains("ResetDefaultKeyBindings"))
            {
                HookedList.Add("ResetDefaultKeyBindings");
                On.InputHandler.ResetDefaultKeyBindings += ResetDefaultKeyBindings;
            }
        }

        internal static event Delegates.ResetDefaultKeyBindings_BeforeArgs _beforeResetDefaultKeyBindings;
        internal static event Delegates.ResetDefaultKeyBindings_NormalArgs _afterResetDefaultKeyBindings;

        private static void ResetDefaultKeyBindings(On.InputHandler.orig_ResetDefaultKeyBindings orig,
            InputHandler self)
        {
            Delegates.Params_ResetDefaultKeyBindings @params = new()
            {
                self = self
            };
            _beforeResetDefaultKeyBindings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetDefaultKeyBindings != null) _afterResetDefaultKeyBindings.Invoke(@params);
        }

        internal static void HookResetDefaultControllerButtonBindings()
        {
            if (!HookedList.Contains("ResetDefaultControllerButtonBindings"))
            {
                HookedList.Add("ResetDefaultControllerButtonBindings");
                On.InputHandler.ResetDefaultControllerButtonBindings += ResetDefaultControllerButtonBindings;
            }
        }

        internal static event Delegates.ResetDefaultControllerButtonBindings_BeforeArgs
            _beforeResetDefaultControllerButtonBindings;

        internal static event Delegates.ResetDefaultControllerButtonBindings_NormalArgs
            _afterResetDefaultControllerButtonBindings;

        private static void ResetDefaultControllerButtonBindings(
            On.InputHandler.orig_ResetDefaultControllerButtonBindings orig, InputHandler self)
        {
            Delegates.Params_ResetDefaultControllerButtonBindings @params = new()
            {
                self = self
            };
            _beforeResetDefaultControllerButtonBindings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetDefaultControllerButtonBindings != null)
                _afterResetDefaultControllerButtonBindings.Invoke(@params);
        }

        internal static void HookResetAllControllerButtonBindings()
        {
            if (!HookedList.Contains("ResetAllControllerButtonBindings"))
            {
                HookedList.Add("ResetAllControllerButtonBindings");
                On.InputHandler.ResetAllControllerButtonBindings += ResetAllControllerButtonBindings;
            }
        }

        internal static event Delegates.ResetAllControllerButtonBindings_BeforeArgs
            _beforeResetAllControllerButtonBindings;

        internal static event Delegates.ResetAllControllerButtonBindings_NormalArgs
            _afterResetAllControllerButtonBindings;

        private static void ResetAllControllerButtonBindings(On.InputHandler.orig_ResetAllControllerButtonBindings orig,
            InputHandler self)
        {
            Delegates.Params_ResetAllControllerButtonBindings @params = new()
            {
                self = self
            };
            _beforeResetAllControllerButtonBindings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetAllControllerButtonBindings != null) _afterResetAllControllerButtonBindings.Invoke(@params);
        }

        internal static void HookSendKeyBindingsToGameSettings()
        {
            if (!HookedList.Contains("SendKeyBindingsToGameSettings"))
            {
                HookedList.Add("SendKeyBindingsToGameSettings");
                On.InputHandler.SendKeyBindingsToGameSettings += SendKeyBindingsToGameSettings;
            }
        }

        internal static event Delegates.SendKeyBindingsToGameSettings_BeforeArgs _beforeSendKeyBindingsToGameSettings;
        internal static event Delegates.SendKeyBindingsToGameSettings_NormalArgs _afterSendKeyBindingsToGameSettings;

        private static void SendKeyBindingsToGameSettings(On.InputHandler.orig_SendKeyBindingsToGameSettings orig,
            InputHandler self)
        {
            Delegates.Params_SendKeyBindingsToGameSettings @params = new()
            {
                self = self
            };
            _beforeSendKeyBindingsToGameSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSendKeyBindingsToGameSettings != null) _afterSendKeyBindingsToGameSettings.Invoke(@params);
        }

        internal static void HookSendButtonBindingsToGameSettings()
        {
            if (!HookedList.Contains("SendButtonBindingsToGameSettings"))
            {
                HookedList.Add("SendButtonBindingsToGameSettings");
                On.InputHandler.SendButtonBindingsToGameSettings += SendButtonBindingsToGameSettings;
            }
        }

        internal static event Delegates.SendButtonBindingsToGameSettings_BeforeArgs
            _beforeSendButtonBindingsToGameSettings;

        internal static event Delegates.SendButtonBindingsToGameSettings_NormalArgs
            _afterSendButtonBindingsToGameSettings;

        private static void SendButtonBindingsToGameSettings(On.InputHandler.orig_SendButtonBindingsToGameSettings orig,
            InputHandler self)
        {
            Delegates.Params_SendButtonBindingsToGameSettings @params = new()
            {
                self = self
            };
            _beforeSendButtonBindingsToGameSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSendButtonBindingsToGameSettings != null) _afterSendButtonBindingsToGameSettings.Invoke(@params);
        }

        internal static void HookMapControllerButtons()
        {
            if (!HookedList.Contains("MapControllerButtons"))
            {
                HookedList.Add("MapControllerButtons");
                On.InputHandler.MapControllerButtons += MapControllerButtons;
            }
        }

        internal static event Delegates.MapControllerButtons_BeforeArgs _beforeMapControllerButtons;
        internal static event Delegates.MapControllerButtons_NormalArgs _afterMapControllerButtons;

        private static void MapControllerButtons(On.InputHandler.orig_MapControllerButtons orig, InputHandler self,
            GamepadType gamePadType)
        {
            Delegates.Params_MapControllerButtons @params = new()
            {
                self = self, gamePadType = gamePadType
            };
            _beforeMapControllerButtons?.Invoke(@params);
            self = @params.self;
            gamePadType = @params.gamePadType;
            orig(self, gamePadType);
            if (_afterMapControllerButtons != null) _afterMapControllerButtons.Invoke(@params);
        }

        internal static void HookRemapUIButtons()
        {
            if (!HookedList.Contains("RemapUIButtons"))
            {
                HookedList.Add("RemapUIButtons");
                On.InputHandler.RemapUIButtons += RemapUIButtons;
            }
        }

        internal static event Delegates.RemapUIButtons_BeforeArgs _beforeRemapUIButtons;
        internal static event Delegates.RemapUIButtons_NormalArgs _afterRemapUIButtons;

        private static void RemapUIButtons(On.InputHandler.orig_RemapUIButtons orig, InputHandler self)
        {
            Delegates.Params_RemapUIButtons @params = new()
            {
                self = self
            };
            _beforeRemapUIButtons?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRemapUIButtons != null) _afterRemapUIButtons.Invoke(@params);
        }

        internal static void HookActionButtonToPlayerAction()
        {
            if (!HookedList.Contains("ActionButtonToPlayerAction"))
            {
                HookedList.Add("ActionButtonToPlayerAction");
                On.InputHandler.ActionButtonToPlayerAction += ActionButtonToPlayerAction;
            }
        }

        internal static event Delegates.ActionButtonToPlayerAction_BeforeArgs _beforeActionButtonToPlayerAction;
        internal static event Delegates.ActionButtonToPlayerAction_NormalArgs _afterActionButtonToPlayerAction;

        private static PlayerAction ActionButtonToPlayerAction(On.InputHandler.orig_ActionButtonToPlayerAction orig,
            InputHandler self, HeroActionButton actionButtonType)
        {
            Delegates.Params_ActionButtonToPlayerAction @params = new()
            {
                self = self, actionButtonType = actionButtonType
            };
            _beforeActionButtonToPlayerAction?.Invoke(@params);
            self = @params.self;
            actionButtonType = @params.actionButtonType;
            var retVal = orig(self, actionButtonType);
            if (_afterActionButtonToPlayerAction != null) retVal = _afterActionButtonToPlayerAction.Invoke(@params);
            return retVal;
        }

        internal static void HookGetButtonBindingForAction()
        {
            if (!HookedList.Contains("GetButtonBindingForAction"))
            {
                HookedList.Add("GetButtonBindingForAction");
                On.InputHandler.GetButtonBindingForAction += GetButtonBindingForAction;
            }
        }

        internal static event Delegates.GetButtonBindingForAction_BeforeArgs _beforeGetButtonBindingForAction;
        internal static event Delegates.GetButtonBindingForAction_NormalArgs _afterGetButtonBindingForAction;

        private static InputControlType GetButtonBindingForAction(On.InputHandler.orig_GetButtonBindingForAction orig,
            InputHandler self, PlayerAction action)
        {
            Delegates.Params_GetButtonBindingForAction @params = new()
            {
                self = self, action = action
            };
            _beforeGetButtonBindingForAction?.Invoke(@params);
            self = @params.self;
            action = @params.action;
            var retVal = orig(self, action);
            if (_afterGetButtonBindingForAction != null) retVal = _afterGetButtonBindingForAction.Invoke(@params);
            return retVal;
        }

        internal static void HookGetActionForMappableControllerButton()
        {
            if (!HookedList.Contains("GetActionForMappableControllerButton"))
            {
                HookedList.Add("GetActionForMappableControllerButton");
                On.InputHandler.GetActionForMappableControllerButton += GetActionForMappableControllerButton;
            }
        }

        internal static event Delegates.GetActionForMappableControllerButton_BeforeArgs
            _beforeGetActionForMappableControllerButton;

        internal static event Delegates.GetActionForMappableControllerButton_NormalArgs
            _afterGetActionForMappableControllerButton;

        private static PlayerAction GetActionForMappableControllerButton(
            On.InputHandler.orig_GetActionForMappableControllerButton orig, InputHandler self, InputControlType button)
        {
            Delegates.Params_GetActionForMappableControllerButton @params = new()
            {
                self = self, button = button
            };
            _beforeGetActionForMappableControllerButton?.Invoke(@params);
            self = @params.self;
            button = @params.button;
            var retVal = orig(self, button);
            if (_afterGetActionForMappableControllerButton != null)
                retVal = _afterGetActionForMappableControllerButton.Invoke(@params);
            return retVal;
        }

        internal static void HookGetActionForDefaultControllerButton()
        {
            if (!HookedList.Contains("GetActionForDefaultControllerButton"))
            {
                HookedList.Add("GetActionForDefaultControllerButton");
                On.InputHandler.GetActionForDefaultControllerButton += GetActionForDefaultControllerButton;
            }
        }

        internal static event Delegates.GetActionForDefaultControllerButton_BeforeArgs
            _beforeGetActionForDefaultControllerButton;

        internal static event Delegates.GetActionForDefaultControllerButton_NormalArgs
            _afterGetActionForDefaultControllerButton;

        private static PlayerAction GetActionForDefaultControllerButton(
            On.InputHandler.orig_GetActionForDefaultControllerButton orig, InputHandler self, InputControlType button)
        {
            Delegates.Params_GetActionForDefaultControllerButton @params = new()
            {
                self = self, button = button
            };
            _beforeGetActionForDefaultControllerButton?.Invoke(@params);
            self = @params.self;
            button = @params.button;
            var retVal = orig(self, button);
            if (_afterGetActionForDefaultControllerButton != null)
                retVal = _afterGetActionForDefaultControllerButton.Invoke(@params);
            return retVal;
        }

        internal static void HookPrintMappings()
        {
            if (!HookedList.Contains("PrintMappings"))
            {
                HookedList.Add("PrintMappings");
                On.InputHandler.PrintMappings += PrintMappings;
            }
        }

        internal static event Delegates.PrintMappings_BeforeArgs _beforePrintMappings;
        internal static event Delegates.PrintMappings_NormalArgs _afterPrintMappings;

        private static void PrintMappings(On.InputHandler.orig_PrintMappings orig, InputHandler self,
            PlayerAction action)
        {
            Delegates.Params_PrintMappings @params = new()
            {
                self = self, action = action
            };
            _beforePrintMappings?.Invoke(@params);
            self = @params.self;
            action = @params.action;
            orig(self, action);
            if (_afterPrintMappings != null) _afterPrintMappings.Invoke(@params);
        }

        internal static void HookActionButtonLocalizedKey_PlayerAction()
        {
            if (!HookedList.Contains("ActionButtonLocalizedKey_PlayerAction"))
            {
                HookedList.Add("ActionButtonLocalizedKey_PlayerAction");
                On.InputHandler.ActionButtonLocalizedKey_PlayerAction += ActionButtonLocalizedKey_PlayerAction;
            }
        }

        internal static event Delegates.ActionButtonLocalizedKey_PlayerAction_BeforeArgs
            _beforeActionButtonLocalizedKey_PlayerAction;

        internal static event Delegates.ActionButtonLocalizedKey_PlayerAction_NormalArgs
            _afterActionButtonLocalizedKey_PlayerAction;

        private static string ActionButtonLocalizedKey_PlayerAction(
            On.InputHandler.orig_ActionButtonLocalizedKey_PlayerAction orig, InputHandler self, PlayerAction action)
        {
            Delegates.Params_ActionButtonLocalizedKey_PlayerAction @params = new()
            {
                self = self, action = action
            };
            _beforeActionButtonLocalizedKey_PlayerAction?.Invoke(@params);
            self = @params.self;
            action = @params.action;
            var retVal = orig(self, action);
            if (_afterActionButtonLocalizedKey_PlayerAction != null)
                retVal = _afterActionButtonLocalizedKey_PlayerAction.Invoke(@params);
            return retVal;
        }

        internal static void HookActionButtonLocalizedKey_string()
        {
            if (!HookedList.Contains("ActionButtonLocalizedKey_string"))
            {
                HookedList.Add("ActionButtonLocalizedKey_string");
                On.InputHandler.ActionButtonLocalizedKey_string += ActionButtonLocalizedKey_string;
            }
        }

        internal static event Delegates.ActionButtonLocalizedKey_string_BeforeArgs
            _beforeActionButtonLocalizedKey_string;

        internal static event Delegates.ActionButtonLocalizedKey_string_NormalArgs
            _afterActionButtonLocalizedKey_string;

        private static string ActionButtonLocalizedKey_string(On.InputHandler.orig_ActionButtonLocalizedKey_string orig,
            InputHandler self, string actionName)
        {
            Delegates.Params_ActionButtonLocalizedKey_string @params = new()
            {
                self = self, actionName = actionName
            };
            _beforeActionButtonLocalizedKey_string?.Invoke(@params);
            self = @params.self;
            actionName = @params.actionName;
            var retVal = orig(self, actionName);
            if (_afterActionButtonLocalizedKey_string != null)
                retVal = _afterActionButtonLocalizedKey_string.Invoke(@params);
            return retVal;
        }

        internal static void HookStopCutsceneInput()
        {
            if (!HookedList.Contains("StopCutsceneInput"))
            {
                HookedList.Add("StopCutsceneInput");
                On.InputHandler.StopCutsceneInput += StopCutsceneInput;
            }
        }

        internal static event Delegates.StopCutsceneInput_BeforeArgs _beforeStopCutsceneInput;
        internal static event Delegates.StopCutsceneInput_NormalArgs _afterStopCutsceneInput;

        private static void StopCutsceneInput(On.InputHandler.orig_StopCutsceneInput orig, InputHandler self)
        {
            Delegates.Params_StopCutsceneInput @params = new()
            {
                self = self
            };
            _beforeStopCutsceneInput?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStopCutsceneInput != null) _afterStopCutsceneInput.Invoke(@params);
        }

        internal static void HookUnlockStagInput()
        {
            if (!HookedList.Contains("UnlockStagInput"))
            {
                HookedList.Add("UnlockStagInput");
                On.InputHandler.UnlockStagInput += UnlockStagInput;
            }
        }

        internal static event Delegates.UnlockStagInput_BeforeArgs _beforeUnlockStagInput;
        internal static event Delegates.UnlockStagInput_NormalArgs _afterUnlockStagInput;

        private static void UnlockStagInput(On.InputHandler.orig_UnlockStagInput orig, InputHandler self)
        {
            Delegates.Params_UnlockStagInput @params = new()
            {
                self = self
            };
            _beforeUnlockStagInput?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUnlockStagInput != null) _afterUnlockStagInput.Invoke(@params);
        }

        internal static void HookSetupGamepadUIInputActions()
        {
            if (!HookedList.Contains("SetupGamepadUIInputActions"))
            {
                HookedList.Add("SetupGamepadUIInputActions");
                On.InputHandler.SetupGamepadUIInputActions += SetupGamepadUIInputActions;
            }
        }

        internal static event Delegates.SetupGamepadUIInputActions_BeforeArgs _beforeSetupGamepadUIInputActions;

        private static IEnumerator SetupGamepadUIInputActions(On.InputHandler.orig_SetupGamepadUIInputActions orig,
            InputHandler self)
        {
            Delegates.Params_SetupGamepadUIInputActions @params = new()
            {
                self = self
            };
            _beforeSetupGamepadUIInputActions?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookRemoveGamepadUIInputActions()
        {
            if (!HookedList.Contains("RemoveGamepadUIInputActions"))
            {
                HookedList.Add("RemoveGamepadUIInputActions");
                On.InputHandler.RemoveGamepadUIInputActions += RemoveGamepadUIInputActions;
            }
        }

        internal static event Delegates.RemoveGamepadUIInputActions_BeforeArgs _beforeRemoveGamepadUIInputActions;
        internal static event Delegates.RemoveGamepadUIInputActions_NormalArgs _afterRemoveGamepadUIInputActions;

        private static void RemoveGamepadUIInputActions(On.InputHandler.orig_RemoveGamepadUIInputActions orig,
            InputHandler self)
        {
            Delegates.Params_RemoveGamepadUIInputActions @params = new()
            {
                self = self
            };
            _beforeRemoveGamepadUIInputActions?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRemoveGamepadUIInputActions != null) _afterRemoveGamepadUIInputActions.Invoke(@params);
        }

        internal static void HookDestroyCurrentActionSet()
        {
            if (!HookedList.Contains("DestroyCurrentActionSet"))
            {
                HookedList.Add("DestroyCurrentActionSet");
                On.InputHandler.DestroyCurrentActionSet += DestroyCurrentActionSet;
            }
        }

        internal static event Delegates.DestroyCurrentActionSet_BeforeArgs _beforeDestroyCurrentActionSet;
        internal static event Delegates.DestroyCurrentActionSet_NormalArgs _afterDestroyCurrentActionSet;

        private static void DestroyCurrentActionSet(On.InputHandler.orig_DestroyCurrentActionSet orig,
            InputHandler self)
        {
            Delegates.Params_DestroyCurrentActionSet @params = new()
            {
                self = self
            };
            _beforeDestroyCurrentActionSet?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDestroyCurrentActionSet != null) _afterDestroyCurrentActionSet.Invoke(@params);
        }

        internal static void HookSetActiveGamepadType()
        {
            if (!HookedList.Contains("SetActiveGamepadType"))
            {
                HookedList.Add("SetActiveGamepadType");
                On.InputHandler.SetActiveGamepadType += SetActiveGamepadType;
            }
        }

        internal static event Delegates.SetActiveGamepadType_BeforeArgs _beforeSetActiveGamepadType;
        internal static event Delegates.SetActiveGamepadType_NormalArgs _afterSetActiveGamepadType;

        private static void SetActiveGamepadType(On.InputHandler.orig_SetActiveGamepadType orig, InputHandler self,
            InputDevice inputDevice)
        {
            Delegates.Params_SetActiveGamepadType @params = new()
            {
                self = self, inputDevice = inputDevice
            };
            _beforeSetActiveGamepadType?.Invoke(@params);
            self = @params.self;
            inputDevice = @params.inputDevice;
            orig(self, inputDevice);
            if (_afterSetActiveGamepadType != null) _afterSetActiveGamepadType.Invoke(@params);
        }

        internal static void HookMapDefaultKeyboardLayout()
        {
            if (!HookedList.Contains("MapDefaultKeyboardLayout"))
            {
                HookedList.Add("MapDefaultKeyboardLayout");
                On.InputHandler.MapDefaultKeyboardLayout += MapDefaultKeyboardLayout;
            }
        }

        internal static event Delegates.MapDefaultKeyboardLayout_BeforeArgs _beforeMapDefaultKeyboardLayout;
        internal static event Delegates.MapDefaultKeyboardLayout_NormalArgs _afterMapDefaultKeyboardLayout;

        private static void MapDefaultKeyboardLayout(On.InputHandler.orig_MapDefaultKeyboardLayout orig,
            InputHandler self)
        {
            Delegates.Params_MapDefaultKeyboardLayout @params = new()
            {
                self = self
            };
            _beforeMapDefaultKeyboardLayout?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterMapDefaultKeyboardLayout != null) _afterMapDefaultKeyboardLayout.Invoke(@params);
        }

        internal static void HookMapKeyboardLayoutFromGameSettings()
        {
            if (!HookedList.Contains("MapKeyboardLayoutFromGameSettings"))
            {
                HookedList.Add("MapKeyboardLayoutFromGameSettings");
                On.InputHandler.MapKeyboardLayoutFromGameSettings += MapKeyboardLayoutFromGameSettings;
            }
        }

        internal static event Delegates.MapKeyboardLayoutFromGameSettings_BeforeArgs
            _beforeMapKeyboardLayoutFromGameSettings;

        internal static event Delegates.MapKeyboardLayoutFromGameSettings_NormalArgs
            _afterMapKeyboardLayoutFromGameSettings;

        private static void MapKeyboardLayoutFromGameSettings(
            On.InputHandler.orig_MapKeyboardLayoutFromGameSettings orig, InputHandler self)
        {
            Delegates.Params_MapKeyboardLayoutFromGameSettings @params = new()
            {
                self = self
            };
            _beforeMapKeyboardLayoutFromGameSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterMapKeyboardLayoutFromGameSettings != null)
                _afterMapKeyboardLayoutFromGameSettings.Invoke(@params);
        }

        internal static void HookAddKeyBinding()
        {
            if (!HookedList.Contains("AddKeyBinding"))
            {
                HookedList.Add("AddKeyBinding");
                On.InputHandler.AddKeyBinding += AddKeyBinding;
            }
        }

        internal static event Delegates.AddKeyBinding_BeforeArgs _beforeAddKeyBinding;
        internal static event Delegates.AddKeyBinding_NormalArgs _afterAddKeyBinding;

        private static void AddKeyBinding(On.InputHandler.orig_AddKeyBinding orig, PlayerAction action,
            string savedBinding)
        {
            Delegates.Params_AddKeyBinding @params = new()
            {
                action = action, savedBinding = savedBinding
            };
            _beforeAddKeyBinding?.Invoke(@params);
            action = @params.action;
            savedBinding = @params.savedBinding;
            orig(action, savedBinding);
            if (_afterAddKeyBinding != null) _afterAddKeyBinding.Invoke(@params);
        }

        internal static void HookSetupNonMappableBindings()
        {
            if (!HookedList.Contains("SetupNonMappableBindings"))
            {
                HookedList.Add("SetupNonMappableBindings");
                On.InputHandler.SetupNonMappableBindings += SetupNonMappableBindings;
            }
        }

        internal static event Delegates.SetupNonMappableBindings_BeforeArgs _beforeSetupNonMappableBindings;
        internal static event Delegates.SetupNonMappableBindings_NormalArgs _afterSetupNonMappableBindings;

        private static void SetupNonMappableBindings(On.InputHandler.orig_SetupNonMappableBindings orig,
            InputHandler self)
        {
            Delegates.Params_SetupNonMappableBindings @params = new()
            {
                self = self
            };
            _beforeSetupNonMappableBindings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetupNonMappableBindings != null) _afterSetupNonMappableBindings.Invoke(@params);
        }

        internal static void HookSetupMappableControllerBindingsList()
        {
            if (!HookedList.Contains("SetupMappableControllerBindingsList"))
            {
                HookedList.Add("SetupMappableControllerBindingsList");
                On.InputHandler.SetupMappableControllerBindingsList += SetupMappableControllerBindingsList;
            }
        }

        internal static event Delegates.SetupMappableControllerBindingsList_BeforeArgs
            _beforeSetupMappableControllerBindingsList;

        internal static event Delegates.SetupMappableControllerBindingsList_NormalArgs
            _afterSetupMappableControllerBindingsList;

        private static void SetupMappableControllerBindingsList(
            On.InputHandler.orig_SetupMappableControllerBindingsList orig, InputHandler self)
        {
            Delegates.Params_SetupMappableControllerBindingsList @params = new()
            {
                self = self
            };
            _beforeSetupMappableControllerBindingsList?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetupMappableControllerBindingsList != null)
                _afterSetupMappableControllerBindingsList.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ActionButtonLocalizedKey_PlayerAction_BeforeArgs(
            Params_ActionButtonLocalizedKey_PlayerAction args);

        public delegate string ActionButtonLocalizedKey_PlayerAction_NormalArgs(
            Params_ActionButtonLocalizedKey_PlayerAction args);

        public delegate void ActionButtonLocalizedKey_string_BeforeArgs(Params_ActionButtonLocalizedKey_string args);

        public delegate string ActionButtonLocalizedKey_string_NormalArgs(Params_ActionButtonLocalizedKey_string args);

        public delegate void ActionButtonToPlayerAction_BeforeArgs(Params_ActionButtonToPlayerAction args);

        public delegate PlayerAction ActionButtonToPlayerAction_NormalArgs(Params_ActionButtonToPlayerAction args);

        public delegate void AddKeyBinding_BeforeArgs(Params_AddKeyBinding args);

        public delegate void AddKeyBinding_NormalArgs(Params_AddKeyBinding args);

        public delegate void AllowPause_BeforeArgs(Params_AllowPause args);

        public delegate void AllowPause_NormalArgs(Params_AllowPause args);

        public delegate void AttachHeroController_BeforeArgs(Params_AttachHeroController args);

        public delegate void AttachHeroController_NormalArgs(Params_AttachHeroController args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void BetaEndInput_BeforeArgs(Params_BetaEndInput args);

        public delegate void BetaEndInput_NormalArgs(Params_BetaEndInput args);

        public delegate void ControllerActivated_BeforeArgs(Params_ControllerActivated args);

        public delegate void ControllerActivated_NormalArgs(Params_ControllerActivated args);

        public delegate void ControllerAttached_BeforeArgs(Params_ControllerAttached args);

        public delegate void ControllerAttached_NormalArgs(Params_ControllerAttached args);

        public delegate void ControllerDetached_BeforeArgs(Params_ControllerDetached args);

        public delegate void ControllerDetached_NormalArgs(Params_ControllerDetached args);

        public delegate void CutsceneInput_BeforeArgs(Params_CutsceneInput args);

        public delegate void CutsceneInput_NormalArgs(Params_CutsceneInput args);

        public delegate void DestroyCurrentActionSet_BeforeArgs(Params_DestroyCurrentActionSet args);

        public delegate void DestroyCurrentActionSet_NormalArgs(Params_DestroyCurrentActionSet args);

        public delegate void EnableMouseInput_BeforeArgs(Params_EnableMouseInput args);

        public delegate void EnableMouseInput_NormalArgs(Params_EnableMouseInput args);

        public delegate void get_mappableControllerActions_BeforeArgs(Params_get_mappableControllerActions args);

        public delegate List<PlayerAction> get_mappableControllerActions_NormalArgs(
            Params_get_mappableControllerActions args);

        public delegate void get_pauseAllowed_BeforeArgs(Params_get_pauseAllowed args);

        public delegate bool get_pauseAllowed_NormalArgs(Params_get_pauseAllowed args);

        public delegate void get_skipMode_BeforeArgs(Params_get_skipMode args);

        public delegate SkipPromptMode get_skipMode_NormalArgs(Params_get_skipMode args);

        public delegate void get_unmappedActions_BeforeArgs(Params_get_unmappedActions args);

        public delegate List<PlayerAction> get_unmappedActions_NormalArgs(Params_get_unmappedActions args);

        public delegate void GetActionForDefaultControllerButton_BeforeArgs(
            Params_GetActionForDefaultControllerButton args);

        public delegate PlayerAction GetActionForDefaultControllerButton_NormalArgs(
            Params_GetActionForDefaultControllerButton args);

        public delegate void GetActionForMappableControllerButton_BeforeArgs(
            Params_GetActionForMappableControllerButton args);

        public delegate PlayerAction GetActionForMappableControllerButton_NormalArgs(
            Params_GetActionForMappableControllerButton args);

        public delegate void GetButtonBindingForAction_BeforeArgs(Params_GetButtonBindingForAction args);

        public delegate InputControlType GetButtonBindingForAction_NormalArgs(Params_GetButtonBindingForAction args);

        public delegate void MapControllerButtons_BeforeArgs(Params_MapControllerButtons args);

        public delegate void MapControllerButtons_NormalArgs(Params_MapControllerButtons args);

        public delegate void MapDefaultKeyboardLayout_BeforeArgs(Params_MapDefaultKeyboardLayout args);

        public delegate void MapDefaultKeyboardLayout_NormalArgs(Params_MapDefaultKeyboardLayout args);

        public delegate void
            MapKeyboardLayoutFromGameSettings_BeforeArgs(Params_MapKeyboardLayoutFromGameSettings args);

        public delegate void
            MapKeyboardLayoutFromGameSettings_NormalArgs(Params_MapKeyboardLayoutFromGameSettings args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_NormalArgs(Params_OnDestroy args);

        public delegate void OnGUI_BeforeArgs(Params_OnGUI args);

        public delegate void OnGUI_NormalArgs(Params_OnGUI args);

        public delegate void PlayingInput_BeforeArgs(Params_PlayingInput args);

        public delegate void PlayingInput_NormalArgs(Params_PlayingInput args);

        public delegate void PreventPause_BeforeArgs(Params_PreventPause args);

        public delegate void PreventPause_NormalArgs(Params_PreventPause args);

        public delegate void PrintMappings_BeforeArgs(Params_PrintMappings args);

        public delegate void PrintMappings_NormalArgs(Params_PrintMappings args);

        public delegate void RefreshPlayerData_BeforeArgs(Params_RefreshPlayerData args);

        public delegate void RefreshPlayerData_NormalArgs(Params_RefreshPlayerData args);

        public delegate void RemapUIButtons_BeforeArgs(Params_RemapUIButtons args);

        public delegate void RemapUIButtons_NormalArgs(Params_RemapUIButtons args);

        public delegate void RemoveGamepadUIInputActions_BeforeArgs(Params_RemoveGamepadUIInputActions args);

        public delegate void RemoveGamepadUIInputActions_NormalArgs(Params_RemoveGamepadUIInputActions args);

        public delegate void ResetAllControllerButtonBindings_BeforeArgs(Params_ResetAllControllerButtonBindings args);

        public delegate void ResetAllControllerButtonBindings_NormalArgs(Params_ResetAllControllerButtonBindings args);

        public delegate void ResetDefaultControllerButtonBindings_BeforeArgs(
            Params_ResetDefaultControllerButtonBindings args);

        public delegate void ResetDefaultControllerButtonBindings_NormalArgs(
            Params_ResetDefaultControllerButtonBindings args);

        public delegate void ResetDefaultKeyBindings_BeforeArgs(Params_ResetDefaultKeyBindings args);

        public delegate void ResetDefaultKeyBindings_NormalArgs(Params_ResetDefaultKeyBindings args);

        public delegate void SceneInit_BeforeArgs(Params_SceneInit args);

        public delegate void SceneInit_NormalArgs(Params_SceneInit args);

        public delegate void SendButtonBindingsToGameSettings_BeforeArgs(Params_SendButtonBindingsToGameSettings args);

        public delegate void SendButtonBindingsToGameSettings_NormalArgs(Params_SendButtonBindingsToGameSettings args);

        public delegate void SendKeyBindingsToGameSettings_BeforeArgs(Params_SendKeyBindingsToGameSettings args);

        public delegate void SendKeyBindingsToGameSettings_NormalArgs(Params_SendKeyBindingsToGameSettings args);

        public delegate void set_mappableControllerActions_BeforeArgs(Params_set_mappableControllerActions args);

        public delegate void set_mappableControllerActions_NormalArgs(Params_set_mappableControllerActions args);

        public delegate void set_pauseAllowed_BeforeArgs(Params_set_pauseAllowed args);

        public delegate void set_pauseAllowed_NormalArgs(Params_set_pauseAllowed args);

        public delegate void set_skipMode_BeforeArgs(Params_set_skipMode args);

        public delegate void set_skipMode_NormalArgs(Params_set_skipMode args);

        public delegate void set_unmappedActions_BeforeArgs(Params_set_unmappedActions args);

        public delegate void set_unmappedActions_NormalArgs(Params_set_unmappedActions args);

        public delegate void SetActiveGamepadType_BeforeArgs(Params_SetActiveGamepadType args);

        public delegate void SetActiveGamepadType_NormalArgs(Params_SetActiveGamepadType args);

        public delegate void SetCursorEnabled_BeforeArgs(Params_SetCursorEnabled args);

        public delegate void SetCursorEnabled_NormalArgs(Params_SetCursorEnabled args);

        public delegate void SetCursorVisible_BeforeArgs(Params_SetCursorVisible args);

        public delegate void SetCursorVisible_NormalArgs(Params_SetCursorVisible args);

        public delegate void SetSkipMode_BeforeArgs(Params_SetSkipMode args);

        public delegate void SetSkipMode_NormalArgs(Params_SetSkipMode args);

        public delegate void SetupGamepadUIInputActions_BeforeArgs(Params_SetupGamepadUIInputActions args);

        public delegate IEnumerator SetupGamepadUIInputActions_NormalArgs(Params_SetupGamepadUIInputActions args);

        public delegate void SetupMappableControllerBindingsList_BeforeArgs(
            Params_SetupMappableControllerBindingsList args);

        public delegate void SetupMappableControllerBindingsList_NormalArgs(
            Params_SetupMappableControllerBindingsList args);

        public delegate void SetupNonMappableBindings_BeforeArgs(Params_SetupNonMappableBindings args);

        public delegate void SetupNonMappableBindings_NormalArgs(Params_SetupNonMappableBindings args);

        public delegate void StagCutsceneInput_BeforeArgs(Params_StagCutsceneInput args);

        public delegate void StagCutsceneInput_NormalArgs(Params_StagCutsceneInput args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void StartAcceptingInput_BeforeArgs(Params_StartAcceptingInput args);

        public delegate void StartAcceptingInput_NormalArgs(Params_StartAcceptingInput args);

        public delegate void StartUIInput_BeforeArgs(Params_StartUIInput args);

        public delegate void StartUIInput_NormalArgs(Params_StartUIInput args);

        public delegate void StopAcceptingInput_BeforeArgs(Params_StopAcceptingInput args);

        public delegate void StopAcceptingInput_NormalArgs(Params_StopAcceptingInput args);

        public delegate void StopCutsceneInput_BeforeArgs(Params_StopCutsceneInput args);

        public delegate void StopCutsceneInput_NormalArgs(Params_StopCutsceneInput args);

        public delegate void StopMouseInput_BeforeArgs(Params_StopMouseInput args);

        public delegate void StopMouseInput_NormalArgs(Params_StopMouseInput args);

        public delegate void StopUIInput_BeforeArgs(Params_StopUIInput args);

        public delegate void StopUIInput_NormalArgs(Params_StopUIInput args);

        public delegate void UnlockStagInput_BeforeArgs(Params_UnlockStagInput args);

        public delegate void UnlockStagInput_NormalArgs(Params_UnlockStagInput args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public delegate void UpdateActiveController_BeforeArgs(Params_UpdateActiveController args);

        public delegate void UpdateActiveController_NormalArgs(Params_UpdateActiveController args);

        public sealed class Params_get_mappableControllerActions
        {
            public InputHandler self;
        }

        public sealed class Params_set_mappableControllerActions
        {
            public InputHandler self;
            public List<PlayerAction> value;
        }

        public sealed class Params_get_unmappedActions
        {
            public InputHandler self;
        }

        public sealed class Params_set_unmappedActions
        {
            public InputHandler self;
            public List<PlayerAction> value;
        }

        public sealed class Params_get_pauseAllowed
        {
            public InputHandler self;
        }

        public sealed class Params_set_pauseAllowed
        {
            public InputHandler self;
            public bool value;
        }

        public sealed class Params_get_skipMode
        {
            public InputHandler self;
        }

        public sealed class Params_set_skipMode
        {
            public InputHandler self;
            public SkipPromptMode value;
        }

        public sealed class Params_Awake
        {
            public InputHandler self;
        }

        public sealed class Params_Start
        {
            public InputHandler self;
        }

        public sealed class Params_OnDestroy
        {
            public InputHandler self;
        }

        public sealed class Params_SceneInit
        {
            public InputHandler self;
        }

        public sealed class Params_OnGUI
        {
            public InputHandler self;
        }

        public sealed class Params_SetCursorVisible
        {
            public InputHandler self;
            public bool value;
        }

        public sealed class Params_SetCursorEnabled
        {
            public bool isEnabled;
        }

        public sealed class Params_Update
        {
            public InputHandler self;
        }

        public sealed class Params_ControllerAttached
        {
            public InputDevice inputDevice;
            public InputHandler self;
        }

        public sealed class Params_ControllerActivated
        {
            public InputDevice inputDevice;
            public InputHandler self;
        }

        public sealed class Params_ControllerDetached
        {
            public InputDevice inputDevice;
            public InputHandler self;
        }

        public sealed class Params_PlayingInput
        {
            public InputHandler self;
        }

        public sealed class Params_CutsceneInput
        {
            public InputHandler self;
        }

        public sealed class Params_StagCutsceneInput
        {
            public InputHandler self;
        }

        public sealed class Params_BetaEndInput
        {
            public InputHandler self;
        }

        public sealed class Params_AttachHeroController
        {
            public HeroController heroController;
            public InputHandler self;
        }

        public sealed class Params_StopAcceptingInput
        {
            public InputHandler self;
        }

        public sealed class Params_StartAcceptingInput
        {
            public InputHandler self;
        }

        public sealed class Params_PreventPause
        {
            public InputHandler self;
        }

        public sealed class Params_AllowPause
        {
            public InputHandler self;
        }

        public sealed class Params_UpdateActiveController
        {
            public InputHandler self;
        }

        public sealed class Params_StopUIInput
        {
            public InputHandler self;
        }

        public sealed class Params_StartUIInput
        {
            public InputHandler self;
        }

        public sealed class Params_StopMouseInput
        {
            public InputHandler self;
        }

        public sealed class Params_EnableMouseInput
        {
            public InputHandler self;
        }

        public sealed class Params_SetSkipMode
        {
            public SkipPromptMode newMode;
            public InputHandler self;
        }

        public sealed class Params_RefreshPlayerData
        {
            public InputHandler self;
        }

        public sealed class Params_ResetDefaultKeyBindings
        {
            public InputHandler self;
        }

        public sealed class Params_ResetDefaultControllerButtonBindings
        {
            public InputHandler self;
        }

        public sealed class Params_ResetAllControllerButtonBindings
        {
            public InputHandler self;
        }

        public sealed class Params_SendKeyBindingsToGameSettings
        {
            public InputHandler self;
        }

        public sealed class Params_SendButtonBindingsToGameSettings
        {
            public InputHandler self;
        }

        public sealed class Params_MapControllerButtons
        {
            public GamepadType gamePadType;
            public InputHandler self;
        }

        public sealed class Params_RemapUIButtons
        {
            public InputHandler self;
        }

        public sealed class Params_ActionButtonToPlayerAction
        {
            public HeroActionButton actionButtonType;
            public InputHandler self;
        }

        public sealed class Params_GetButtonBindingForAction
        {
            public PlayerAction action;
            public InputHandler self;
        }

        public sealed class Params_GetActionForMappableControllerButton
        {
            public InputControlType button;
            public InputHandler self;
        }

        public sealed class Params_GetActionForDefaultControllerButton
        {
            public InputControlType button;
            public InputHandler self;
        }

        public sealed class Params_PrintMappings
        {
            public PlayerAction action;
            public InputHandler self;
        }

        public sealed class Params_ActionButtonLocalizedKey_PlayerAction
        {
            public PlayerAction action;
            public InputHandler self;
        }

        public sealed class Params_ActionButtonLocalizedKey_string
        {
            public string actionName;
            public InputHandler self;
        }

        public sealed class Params_StopCutsceneInput
        {
            public InputHandler self;
        }

        public sealed class Params_UnlockStagInput
        {
            public InputHandler self;
        }

        public sealed class Params_SetupGamepadUIInputActions
        {
            public InputHandler self;
        }

        public sealed class Params_RemoveGamepadUIInputActions
        {
            public InputHandler self;
        }

        public sealed class Params_DestroyCurrentActionSet
        {
            public InputHandler self;
        }

        public sealed class Params_SetActiveGamepadType
        {
            public InputDevice inputDevice;
            public InputHandler self;
        }

        public sealed class Params_MapDefaultKeyboardLayout
        {
            public InputHandler self;
        }

        public sealed class Params_MapKeyboardLayoutFromGameSettings
        {
            public InputHandler self;
        }

        public sealed class Params_AddKeyBinding
        {
            public PlayerAction action;
            public string savedBinding;
        }

        public sealed class Params_SetupNonMappableBindings
        {
            public InputHandler self;
        }

        public sealed class Params_SetupMappableControllerBindingsList
        {
            public InputHandler self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_mappableControllerActions_BeforeArgs get_mappableControllerActions
        {
            add
            {
                HookHandler._beforeget_mappableControllerActions += value;
                HookHandler.Hookget_mappableControllerActions();
            }
            remove => HookHandler._beforeget_mappableControllerActions -= value;
        }

        public static event Delegates.set_mappableControllerActions_BeforeArgs set_mappableControllerActions
        {
            add
            {
                HookHandler._beforeset_mappableControllerActions += value;
                HookHandler.Hookset_mappableControllerActions();
            }
            remove => HookHandler._beforeset_mappableControllerActions -= value;
        }

        public static event Delegates.get_unmappedActions_BeforeArgs get_unmappedActions
        {
            add
            {
                HookHandler._beforeget_unmappedActions += value;
                HookHandler.Hookget_unmappedActions();
            }
            remove => HookHandler._beforeget_unmappedActions -= value;
        }

        public static event Delegates.set_unmappedActions_BeforeArgs set_unmappedActions
        {
            add
            {
                HookHandler._beforeset_unmappedActions += value;
                HookHandler.Hookset_unmappedActions();
            }
            remove => HookHandler._beforeset_unmappedActions -= value;
        }

        public static event Delegates.get_pauseAllowed_BeforeArgs get_pauseAllowed
        {
            add
            {
                HookHandler._beforeget_pauseAllowed += value;
                HookHandler.Hookget_pauseAllowed();
            }
            remove => HookHandler._beforeget_pauseAllowed -= value;
        }

        public static event Delegates.set_pauseAllowed_BeforeArgs set_pauseAllowed
        {
            add
            {
                HookHandler._beforeset_pauseAllowed += value;
                HookHandler.Hookset_pauseAllowed();
            }
            remove => HookHandler._beforeset_pauseAllowed -= value;
        }

        public static event Delegates.get_skipMode_BeforeArgs get_skipMode
        {
            add
            {
                HookHandler._beforeget_skipMode += value;
                HookHandler.Hookget_skipMode();
            }
            remove => HookHandler._beforeget_skipMode -= value;
        }

        public static event Delegates.set_skipMode_BeforeArgs set_skipMode
        {
            add
            {
                HookHandler._beforeset_skipMode += value;
                HookHandler.Hookset_skipMode();
            }
            remove => HookHandler._beforeset_skipMode -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.SceneInit_BeforeArgs SceneInit
        {
            add
            {
                HookHandler._beforeSceneInit += value;
                HookHandler.HookSceneInit();
            }
            remove => HookHandler._beforeSceneInit -= value;
        }

        public static event Delegates.OnGUI_BeforeArgs OnGUI
        {
            add
            {
                HookHandler._beforeOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._beforeOnGUI -= value;
        }

        public static event Delegates.SetCursorVisible_BeforeArgs SetCursorVisible
        {
            add
            {
                HookHandler._beforeSetCursorVisible += value;
                HookHandler.HookSetCursorVisible();
            }
            remove => HookHandler._beforeSetCursorVisible -= value;
        }

        public static event Delegates.SetCursorEnabled_BeforeArgs SetCursorEnabled
        {
            add
            {
                HookHandler._beforeSetCursorEnabled += value;
                HookHandler.HookSetCursorEnabled();
            }
            remove => HookHandler._beforeSetCursorEnabled -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.ControllerAttached_BeforeArgs ControllerAttached
        {
            add
            {
                HookHandler._beforeControllerAttached += value;
                HookHandler.HookControllerAttached();
            }
            remove => HookHandler._beforeControllerAttached -= value;
        }

        public static event Delegates.ControllerActivated_BeforeArgs ControllerActivated
        {
            add
            {
                HookHandler._beforeControllerActivated += value;
                HookHandler.HookControllerActivated();
            }
            remove => HookHandler._beforeControllerActivated -= value;
        }

        public static event Delegates.ControllerDetached_BeforeArgs ControllerDetached
        {
            add
            {
                HookHandler._beforeControllerDetached += value;
                HookHandler.HookControllerDetached();
            }
            remove => HookHandler._beforeControllerDetached -= value;
        }

        public static event Delegates.PlayingInput_BeforeArgs PlayingInput
        {
            add
            {
                HookHandler._beforePlayingInput += value;
                HookHandler.HookPlayingInput();
            }
            remove => HookHandler._beforePlayingInput -= value;
        }

        public static event Delegates.CutsceneInput_BeforeArgs CutsceneInput
        {
            add
            {
                HookHandler._beforeCutsceneInput += value;
                HookHandler.HookCutsceneInput();
            }
            remove => HookHandler._beforeCutsceneInput -= value;
        }

        public static event Delegates.StagCutsceneInput_BeforeArgs StagCutsceneInput
        {
            add
            {
                HookHandler._beforeStagCutsceneInput += value;
                HookHandler.HookStagCutsceneInput();
            }
            remove => HookHandler._beforeStagCutsceneInput -= value;
        }

        public static event Delegates.BetaEndInput_BeforeArgs BetaEndInput
        {
            add
            {
                HookHandler._beforeBetaEndInput += value;
                HookHandler.HookBetaEndInput();
            }
            remove => HookHandler._beforeBetaEndInput -= value;
        }

        public static event Delegates.AttachHeroController_BeforeArgs AttachHeroController
        {
            add
            {
                HookHandler._beforeAttachHeroController += value;
                HookHandler.HookAttachHeroController();
            }
            remove => HookHandler._beforeAttachHeroController -= value;
        }

        public static event Delegates.StopAcceptingInput_BeforeArgs StopAcceptingInput
        {
            add
            {
                HookHandler._beforeStopAcceptingInput += value;
                HookHandler.HookStopAcceptingInput();
            }
            remove => HookHandler._beforeStopAcceptingInput -= value;
        }

        public static event Delegates.StartAcceptingInput_BeforeArgs StartAcceptingInput
        {
            add
            {
                HookHandler._beforeStartAcceptingInput += value;
                HookHandler.HookStartAcceptingInput();
            }
            remove => HookHandler._beforeStartAcceptingInput -= value;
        }

        public static event Delegates.PreventPause_BeforeArgs PreventPause
        {
            add
            {
                HookHandler._beforePreventPause += value;
                HookHandler.HookPreventPause();
            }
            remove => HookHandler._beforePreventPause -= value;
        }

        public static event Delegates.AllowPause_BeforeArgs AllowPause
        {
            add
            {
                HookHandler._beforeAllowPause += value;
                HookHandler.HookAllowPause();
            }
            remove => HookHandler._beforeAllowPause -= value;
        }

        public static event Delegates.UpdateActiveController_BeforeArgs UpdateActiveController
        {
            add
            {
                HookHandler._beforeUpdateActiveController += value;
                HookHandler.HookUpdateActiveController();
            }
            remove => HookHandler._beforeUpdateActiveController -= value;
        }

        public static event Delegates.StopUIInput_BeforeArgs StopUIInput
        {
            add
            {
                HookHandler._beforeStopUIInput += value;
                HookHandler.HookStopUIInput();
            }
            remove => HookHandler._beforeStopUIInput -= value;
        }

        public static event Delegates.StartUIInput_BeforeArgs StartUIInput
        {
            add
            {
                HookHandler._beforeStartUIInput += value;
                HookHandler.HookStartUIInput();
            }
            remove => HookHandler._beforeStartUIInput -= value;
        }

        public static event Delegates.StopMouseInput_BeforeArgs StopMouseInput
        {
            add
            {
                HookHandler._beforeStopMouseInput += value;
                HookHandler.HookStopMouseInput();
            }
            remove => HookHandler._beforeStopMouseInput -= value;
        }

        public static event Delegates.EnableMouseInput_BeforeArgs EnableMouseInput
        {
            add
            {
                HookHandler._beforeEnableMouseInput += value;
                HookHandler.HookEnableMouseInput();
            }
            remove => HookHandler._beforeEnableMouseInput -= value;
        }

        public static event Delegates.SetSkipMode_BeforeArgs SetSkipMode
        {
            add
            {
                HookHandler._beforeSetSkipMode += value;
                HookHandler.HookSetSkipMode();
            }
            remove => HookHandler._beforeSetSkipMode -= value;
        }

        public static event Delegates.RefreshPlayerData_BeforeArgs RefreshPlayerData
        {
            add
            {
                HookHandler._beforeRefreshPlayerData += value;
                HookHandler.HookRefreshPlayerData();
            }
            remove => HookHandler._beforeRefreshPlayerData -= value;
        }

        public static event Delegates.ResetDefaultKeyBindings_BeforeArgs ResetDefaultKeyBindings
        {
            add
            {
                HookHandler._beforeResetDefaultKeyBindings += value;
                HookHandler.HookResetDefaultKeyBindings();
            }
            remove => HookHandler._beforeResetDefaultKeyBindings -= value;
        }

        public static event Delegates.ResetDefaultControllerButtonBindings_BeforeArgs
            ResetDefaultControllerButtonBindings
            {
                add
                {
                    HookHandler._beforeResetDefaultControllerButtonBindings += value;
                    HookHandler.HookResetDefaultControllerButtonBindings();
                }
                remove => HookHandler._beforeResetDefaultControllerButtonBindings -= value;
            }

        public static event Delegates.ResetAllControllerButtonBindings_BeforeArgs ResetAllControllerButtonBindings
        {
            add
            {
                HookHandler._beforeResetAllControllerButtonBindings += value;
                HookHandler.HookResetAllControllerButtonBindings();
            }
            remove => HookHandler._beforeResetAllControllerButtonBindings -= value;
        }

        public static event Delegates.SendKeyBindingsToGameSettings_BeforeArgs SendKeyBindingsToGameSettings
        {
            add
            {
                HookHandler._beforeSendKeyBindingsToGameSettings += value;
                HookHandler.HookSendKeyBindingsToGameSettings();
            }
            remove => HookHandler._beforeSendKeyBindingsToGameSettings -= value;
        }

        public static event Delegates.SendButtonBindingsToGameSettings_BeforeArgs SendButtonBindingsToGameSettings
        {
            add
            {
                HookHandler._beforeSendButtonBindingsToGameSettings += value;
                HookHandler.HookSendButtonBindingsToGameSettings();
            }
            remove => HookHandler._beforeSendButtonBindingsToGameSettings -= value;
        }

        public static event Delegates.MapControllerButtons_BeforeArgs MapControllerButtons
        {
            add
            {
                HookHandler._beforeMapControllerButtons += value;
                HookHandler.HookMapControllerButtons();
            }
            remove => HookHandler._beforeMapControllerButtons -= value;
        }

        public static event Delegates.RemapUIButtons_BeforeArgs RemapUIButtons
        {
            add
            {
                HookHandler._beforeRemapUIButtons += value;
                HookHandler.HookRemapUIButtons();
            }
            remove => HookHandler._beforeRemapUIButtons -= value;
        }

        public static event Delegates.ActionButtonToPlayerAction_BeforeArgs ActionButtonToPlayerAction
        {
            add
            {
                HookHandler._beforeActionButtonToPlayerAction += value;
                HookHandler.HookActionButtonToPlayerAction();
            }
            remove => HookHandler._beforeActionButtonToPlayerAction -= value;
        }

        public static event Delegates.GetButtonBindingForAction_BeforeArgs GetButtonBindingForAction
        {
            add
            {
                HookHandler._beforeGetButtonBindingForAction += value;
                HookHandler.HookGetButtonBindingForAction();
            }
            remove => HookHandler._beforeGetButtonBindingForAction -= value;
        }

        public static event Delegates.GetActionForMappableControllerButton_BeforeArgs
            GetActionForMappableControllerButton
            {
                add
                {
                    HookHandler._beforeGetActionForMappableControllerButton += value;
                    HookHandler.HookGetActionForMappableControllerButton();
                }
                remove => HookHandler._beforeGetActionForMappableControllerButton -= value;
            }

        public static event Delegates.GetActionForDefaultControllerButton_BeforeArgs GetActionForDefaultControllerButton
        {
            add
            {
                HookHandler._beforeGetActionForDefaultControllerButton += value;
                HookHandler.HookGetActionForDefaultControllerButton();
            }
            remove => HookHandler._beforeGetActionForDefaultControllerButton -= value;
        }

        public static event Delegates.PrintMappings_BeforeArgs PrintMappings
        {
            add
            {
                HookHandler._beforePrintMappings += value;
                HookHandler.HookPrintMappings();
            }
            remove => HookHandler._beforePrintMappings -= value;
        }

        public static event Delegates.ActionButtonLocalizedKey_PlayerAction_BeforeArgs
            ActionButtonLocalizedKey_PlayerAction
            {
                add
                {
                    HookHandler._beforeActionButtonLocalizedKey_PlayerAction += value;
                    HookHandler.HookActionButtonLocalizedKey_PlayerAction();
                }
                remove => HookHandler._beforeActionButtonLocalizedKey_PlayerAction -= value;
            }

        public static event Delegates.ActionButtonLocalizedKey_string_BeforeArgs ActionButtonLocalizedKey_string
        {
            add
            {
                HookHandler._beforeActionButtonLocalizedKey_string += value;
                HookHandler.HookActionButtonLocalizedKey_string();
            }
            remove => HookHandler._beforeActionButtonLocalizedKey_string -= value;
        }

        public static event Delegates.StopCutsceneInput_BeforeArgs StopCutsceneInput
        {
            add
            {
                HookHandler._beforeStopCutsceneInput += value;
                HookHandler.HookStopCutsceneInput();
            }
            remove => HookHandler._beforeStopCutsceneInput -= value;
        }

        public static event Delegates.UnlockStagInput_BeforeArgs UnlockStagInput
        {
            add
            {
                HookHandler._beforeUnlockStagInput += value;
                HookHandler.HookUnlockStagInput();
            }
            remove => HookHandler._beforeUnlockStagInput -= value;
        }

        public static event Delegates.SetupGamepadUIInputActions_BeforeArgs SetupGamepadUIInputActions
        {
            add
            {
                HookHandler._beforeSetupGamepadUIInputActions += value;
                HookHandler.HookSetupGamepadUIInputActions();
            }
            remove => HookHandler._beforeSetupGamepadUIInputActions -= value;
        }

        public static event Delegates.RemoveGamepadUIInputActions_BeforeArgs RemoveGamepadUIInputActions
        {
            add
            {
                HookHandler._beforeRemoveGamepadUIInputActions += value;
                HookHandler.HookRemoveGamepadUIInputActions();
            }
            remove => HookHandler._beforeRemoveGamepadUIInputActions -= value;
        }

        public static event Delegates.DestroyCurrentActionSet_BeforeArgs DestroyCurrentActionSet
        {
            add
            {
                HookHandler._beforeDestroyCurrentActionSet += value;
                HookHandler.HookDestroyCurrentActionSet();
            }
            remove => HookHandler._beforeDestroyCurrentActionSet -= value;
        }

        public static event Delegates.SetActiveGamepadType_BeforeArgs SetActiveGamepadType
        {
            add
            {
                HookHandler._beforeSetActiveGamepadType += value;
                HookHandler.HookSetActiveGamepadType();
            }
            remove => HookHandler._beforeSetActiveGamepadType -= value;
        }

        public static event Delegates.MapDefaultKeyboardLayout_BeforeArgs MapDefaultKeyboardLayout
        {
            add
            {
                HookHandler._beforeMapDefaultKeyboardLayout += value;
                HookHandler.HookMapDefaultKeyboardLayout();
            }
            remove => HookHandler._beforeMapDefaultKeyboardLayout -= value;
        }

        public static event Delegates.MapKeyboardLayoutFromGameSettings_BeforeArgs MapKeyboardLayoutFromGameSettings
        {
            add
            {
                HookHandler._beforeMapKeyboardLayoutFromGameSettings += value;
                HookHandler.HookMapKeyboardLayoutFromGameSettings();
            }
            remove => HookHandler._beforeMapKeyboardLayoutFromGameSettings -= value;
        }

        public static event Delegates.AddKeyBinding_BeforeArgs AddKeyBinding
        {
            add
            {
                HookHandler._beforeAddKeyBinding += value;
                HookHandler.HookAddKeyBinding();
            }
            remove => HookHandler._beforeAddKeyBinding -= value;
        }

        public static event Delegates.SetupNonMappableBindings_BeforeArgs SetupNonMappableBindings
        {
            add
            {
                HookHandler._beforeSetupNonMappableBindings += value;
                HookHandler.HookSetupNonMappableBindings();
            }
            remove => HookHandler._beforeSetupNonMappableBindings -= value;
        }

        public static event Delegates.SetupMappableControllerBindingsList_BeforeArgs SetupMappableControllerBindingsList
        {
            add
            {
                HookHandler._beforeSetupMappableControllerBindingsList += value;
                HookHandler.HookSetupMappableControllerBindingsList();
            }
            remove => HookHandler._beforeSetupMappableControllerBindingsList -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_mappableControllerActions_NormalArgs get_mappableControllerActions
        {
            add
            {
                HookHandler._afterget_mappableControllerActions += value;
                HookHandler.Hookget_mappableControllerActions();
            }
            remove => HookHandler._afterget_mappableControllerActions -= value;
        }

        public static event Delegates.set_mappableControllerActions_NormalArgs set_mappableControllerActions
        {
            add
            {
                HookHandler._afterset_mappableControllerActions += value;
                HookHandler.Hookset_mappableControllerActions();
            }
            remove => HookHandler._afterset_mappableControllerActions -= value;
        }

        public static event Delegates.get_unmappedActions_NormalArgs get_unmappedActions
        {
            add
            {
                HookHandler._afterget_unmappedActions += value;
                HookHandler.Hookget_unmappedActions();
            }
            remove => HookHandler._afterget_unmappedActions -= value;
        }

        public static event Delegates.set_unmappedActions_NormalArgs set_unmappedActions
        {
            add
            {
                HookHandler._afterset_unmappedActions += value;
                HookHandler.Hookset_unmappedActions();
            }
            remove => HookHandler._afterset_unmappedActions -= value;
        }

        public static event Delegates.get_pauseAllowed_NormalArgs get_pauseAllowed
        {
            add
            {
                HookHandler._afterget_pauseAllowed += value;
                HookHandler.Hookget_pauseAllowed();
            }
            remove => HookHandler._afterget_pauseAllowed -= value;
        }

        public static event Delegates.set_pauseAllowed_NormalArgs set_pauseAllowed
        {
            add
            {
                HookHandler._afterset_pauseAllowed += value;
                HookHandler.Hookset_pauseAllowed();
            }
            remove => HookHandler._afterset_pauseAllowed -= value;
        }

        public static event Delegates.get_skipMode_NormalArgs get_skipMode
        {
            add
            {
                HookHandler._afterget_skipMode += value;
                HookHandler.Hookget_skipMode();
            }
            remove => HookHandler._afterget_skipMode -= value;
        }

        public static event Delegates.set_skipMode_NormalArgs set_skipMode
        {
            add
            {
                HookHandler._afterset_skipMode += value;
                HookHandler.Hookset_skipMode();
            }
            remove => HookHandler._afterset_skipMode -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.SceneInit_NormalArgs SceneInit
        {
            add
            {
                HookHandler._afterSceneInit += value;
                HookHandler.HookSceneInit();
            }
            remove => HookHandler._afterSceneInit -= value;
        }

        public static event Delegates.OnGUI_NormalArgs OnGUI
        {
            add
            {
                HookHandler._afterOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._afterOnGUI -= value;
        }

        public static event Delegates.SetCursorVisible_NormalArgs SetCursorVisible
        {
            add
            {
                HookHandler._afterSetCursorVisible += value;
                HookHandler.HookSetCursorVisible();
            }
            remove => HookHandler._afterSetCursorVisible -= value;
        }

        public static event Delegates.SetCursorEnabled_NormalArgs SetCursorEnabled
        {
            add
            {
                HookHandler._afterSetCursorEnabled += value;
                HookHandler.HookSetCursorEnabled();
            }
            remove => HookHandler._afterSetCursorEnabled -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.ControllerAttached_NormalArgs ControllerAttached
        {
            add
            {
                HookHandler._afterControllerAttached += value;
                HookHandler.HookControllerAttached();
            }
            remove => HookHandler._afterControllerAttached -= value;
        }

        public static event Delegates.ControllerActivated_NormalArgs ControllerActivated
        {
            add
            {
                HookHandler._afterControllerActivated += value;
                HookHandler.HookControllerActivated();
            }
            remove => HookHandler._afterControllerActivated -= value;
        }

        public static event Delegates.ControllerDetached_NormalArgs ControllerDetached
        {
            add
            {
                HookHandler._afterControllerDetached += value;
                HookHandler.HookControllerDetached();
            }
            remove => HookHandler._afterControllerDetached -= value;
        }

        public static event Delegates.PlayingInput_NormalArgs PlayingInput
        {
            add
            {
                HookHandler._afterPlayingInput += value;
                HookHandler.HookPlayingInput();
            }
            remove => HookHandler._afterPlayingInput -= value;
        }

        public static event Delegates.CutsceneInput_NormalArgs CutsceneInput
        {
            add
            {
                HookHandler._afterCutsceneInput += value;
                HookHandler.HookCutsceneInput();
            }
            remove => HookHandler._afterCutsceneInput -= value;
        }

        public static event Delegates.StagCutsceneInput_NormalArgs StagCutsceneInput
        {
            add
            {
                HookHandler._afterStagCutsceneInput += value;
                HookHandler.HookStagCutsceneInput();
            }
            remove => HookHandler._afterStagCutsceneInput -= value;
        }

        public static event Delegates.BetaEndInput_NormalArgs BetaEndInput
        {
            add
            {
                HookHandler._afterBetaEndInput += value;
                HookHandler.HookBetaEndInput();
            }
            remove => HookHandler._afterBetaEndInput -= value;
        }

        public static event Delegates.AttachHeroController_NormalArgs AttachHeroController
        {
            add
            {
                HookHandler._afterAttachHeroController += value;
                HookHandler.HookAttachHeroController();
            }
            remove => HookHandler._afterAttachHeroController -= value;
        }

        public static event Delegates.StopAcceptingInput_NormalArgs StopAcceptingInput
        {
            add
            {
                HookHandler._afterStopAcceptingInput += value;
                HookHandler.HookStopAcceptingInput();
            }
            remove => HookHandler._afterStopAcceptingInput -= value;
        }

        public static event Delegates.StartAcceptingInput_NormalArgs StartAcceptingInput
        {
            add
            {
                HookHandler._afterStartAcceptingInput += value;
                HookHandler.HookStartAcceptingInput();
            }
            remove => HookHandler._afterStartAcceptingInput -= value;
        }

        public static event Delegates.PreventPause_NormalArgs PreventPause
        {
            add
            {
                HookHandler._afterPreventPause += value;
                HookHandler.HookPreventPause();
            }
            remove => HookHandler._afterPreventPause -= value;
        }

        public static event Delegates.AllowPause_NormalArgs AllowPause
        {
            add
            {
                HookHandler._afterAllowPause += value;
                HookHandler.HookAllowPause();
            }
            remove => HookHandler._afterAllowPause -= value;
        }

        public static event Delegates.UpdateActiveController_NormalArgs UpdateActiveController
        {
            add
            {
                HookHandler._afterUpdateActiveController += value;
                HookHandler.HookUpdateActiveController();
            }
            remove => HookHandler._afterUpdateActiveController -= value;
        }

        public static event Delegates.StopUIInput_NormalArgs StopUIInput
        {
            add
            {
                HookHandler._afterStopUIInput += value;
                HookHandler.HookStopUIInput();
            }
            remove => HookHandler._afterStopUIInput -= value;
        }

        public static event Delegates.StartUIInput_NormalArgs StartUIInput
        {
            add
            {
                HookHandler._afterStartUIInput += value;
                HookHandler.HookStartUIInput();
            }
            remove => HookHandler._afterStartUIInput -= value;
        }

        public static event Delegates.StopMouseInput_NormalArgs StopMouseInput
        {
            add
            {
                HookHandler._afterStopMouseInput += value;
                HookHandler.HookStopMouseInput();
            }
            remove => HookHandler._afterStopMouseInput -= value;
        }

        public static event Delegates.EnableMouseInput_NormalArgs EnableMouseInput
        {
            add
            {
                HookHandler._afterEnableMouseInput += value;
                HookHandler.HookEnableMouseInput();
            }
            remove => HookHandler._afterEnableMouseInput -= value;
        }

        public static event Delegates.SetSkipMode_NormalArgs SetSkipMode
        {
            add
            {
                HookHandler._afterSetSkipMode += value;
                HookHandler.HookSetSkipMode();
            }
            remove => HookHandler._afterSetSkipMode -= value;
        }

        public static event Delegates.RefreshPlayerData_NormalArgs RefreshPlayerData
        {
            add
            {
                HookHandler._afterRefreshPlayerData += value;
                HookHandler.HookRefreshPlayerData();
            }
            remove => HookHandler._afterRefreshPlayerData -= value;
        }

        public static event Delegates.ResetDefaultKeyBindings_NormalArgs ResetDefaultKeyBindings
        {
            add
            {
                HookHandler._afterResetDefaultKeyBindings += value;
                HookHandler.HookResetDefaultKeyBindings();
            }
            remove => HookHandler._afterResetDefaultKeyBindings -= value;
        }

        public static event Delegates.ResetDefaultControllerButtonBindings_NormalArgs
            ResetDefaultControllerButtonBindings
            {
                add
                {
                    HookHandler._afterResetDefaultControllerButtonBindings += value;
                    HookHandler.HookResetDefaultControllerButtonBindings();
                }
                remove => HookHandler._afterResetDefaultControllerButtonBindings -= value;
            }

        public static event Delegates.ResetAllControllerButtonBindings_NormalArgs ResetAllControllerButtonBindings
        {
            add
            {
                HookHandler._afterResetAllControllerButtonBindings += value;
                HookHandler.HookResetAllControllerButtonBindings();
            }
            remove => HookHandler._afterResetAllControllerButtonBindings -= value;
        }

        public static event Delegates.SendKeyBindingsToGameSettings_NormalArgs SendKeyBindingsToGameSettings
        {
            add
            {
                HookHandler._afterSendKeyBindingsToGameSettings += value;
                HookHandler.HookSendKeyBindingsToGameSettings();
            }
            remove => HookHandler._afterSendKeyBindingsToGameSettings -= value;
        }

        public static event Delegates.SendButtonBindingsToGameSettings_NormalArgs SendButtonBindingsToGameSettings
        {
            add
            {
                HookHandler._afterSendButtonBindingsToGameSettings += value;
                HookHandler.HookSendButtonBindingsToGameSettings();
            }
            remove => HookHandler._afterSendButtonBindingsToGameSettings -= value;
        }

        public static event Delegates.MapControllerButtons_NormalArgs MapControllerButtons
        {
            add
            {
                HookHandler._afterMapControllerButtons += value;
                HookHandler.HookMapControllerButtons();
            }
            remove => HookHandler._afterMapControllerButtons -= value;
        }

        public static event Delegates.RemapUIButtons_NormalArgs RemapUIButtons
        {
            add
            {
                HookHandler._afterRemapUIButtons += value;
                HookHandler.HookRemapUIButtons();
            }
            remove => HookHandler._afterRemapUIButtons -= value;
        }

        public static event Delegates.ActionButtonToPlayerAction_NormalArgs ActionButtonToPlayerAction
        {
            add
            {
                HookHandler._afterActionButtonToPlayerAction += value;
                HookHandler.HookActionButtonToPlayerAction();
            }
            remove => HookHandler._afterActionButtonToPlayerAction -= value;
        }

        public static event Delegates.GetButtonBindingForAction_NormalArgs GetButtonBindingForAction
        {
            add
            {
                HookHandler._afterGetButtonBindingForAction += value;
                HookHandler.HookGetButtonBindingForAction();
            }
            remove => HookHandler._afterGetButtonBindingForAction -= value;
        }

        public static event Delegates.GetActionForMappableControllerButton_NormalArgs
            GetActionForMappableControllerButton
            {
                add
                {
                    HookHandler._afterGetActionForMappableControllerButton += value;
                    HookHandler.HookGetActionForMappableControllerButton();
                }
                remove => HookHandler._afterGetActionForMappableControllerButton -= value;
            }

        public static event Delegates.GetActionForDefaultControllerButton_NormalArgs GetActionForDefaultControllerButton
        {
            add
            {
                HookHandler._afterGetActionForDefaultControllerButton += value;
                HookHandler.HookGetActionForDefaultControllerButton();
            }
            remove => HookHandler._afterGetActionForDefaultControllerButton -= value;
        }

        public static event Delegates.PrintMappings_NormalArgs PrintMappings
        {
            add
            {
                HookHandler._afterPrintMappings += value;
                HookHandler.HookPrintMappings();
            }
            remove => HookHandler._afterPrintMappings -= value;
        }

        public static event Delegates.ActionButtonLocalizedKey_PlayerAction_NormalArgs
            ActionButtonLocalizedKey_PlayerAction
            {
                add
                {
                    HookHandler._afterActionButtonLocalizedKey_PlayerAction += value;
                    HookHandler.HookActionButtonLocalizedKey_PlayerAction();
                }
                remove => HookHandler._afterActionButtonLocalizedKey_PlayerAction -= value;
            }

        public static event Delegates.ActionButtonLocalizedKey_string_NormalArgs ActionButtonLocalizedKey_string
        {
            add
            {
                HookHandler._afterActionButtonLocalizedKey_string += value;
                HookHandler.HookActionButtonLocalizedKey_string();
            }
            remove => HookHandler._afterActionButtonLocalizedKey_string -= value;
        }

        public static event Delegates.StopCutsceneInput_NormalArgs StopCutsceneInput
        {
            add
            {
                HookHandler._afterStopCutsceneInput += value;
                HookHandler.HookStopCutsceneInput();
            }
            remove => HookHandler._afterStopCutsceneInput -= value;
        }

        public static event Delegates.UnlockStagInput_NormalArgs UnlockStagInput
        {
            add
            {
                HookHandler._afterUnlockStagInput += value;
                HookHandler.HookUnlockStagInput();
            }
            remove => HookHandler._afterUnlockStagInput -= value;
        }

        public static event Delegates.RemoveGamepadUIInputActions_NormalArgs RemoveGamepadUIInputActions
        {
            add
            {
                HookHandler._afterRemoveGamepadUIInputActions += value;
                HookHandler.HookRemoveGamepadUIInputActions();
            }
            remove => HookHandler._afterRemoveGamepadUIInputActions -= value;
        }

        public static event Delegates.DestroyCurrentActionSet_NormalArgs DestroyCurrentActionSet
        {
            add
            {
                HookHandler._afterDestroyCurrentActionSet += value;
                HookHandler.HookDestroyCurrentActionSet();
            }
            remove => HookHandler._afterDestroyCurrentActionSet -= value;
        }

        public static event Delegates.SetActiveGamepadType_NormalArgs SetActiveGamepadType
        {
            add
            {
                HookHandler._afterSetActiveGamepadType += value;
                HookHandler.HookSetActiveGamepadType();
            }
            remove => HookHandler._afterSetActiveGamepadType -= value;
        }

        public static event Delegates.MapDefaultKeyboardLayout_NormalArgs MapDefaultKeyboardLayout
        {
            add
            {
                HookHandler._afterMapDefaultKeyboardLayout += value;
                HookHandler.HookMapDefaultKeyboardLayout();
            }
            remove => HookHandler._afterMapDefaultKeyboardLayout -= value;
        }

        public static event Delegates.MapKeyboardLayoutFromGameSettings_NormalArgs MapKeyboardLayoutFromGameSettings
        {
            add
            {
                HookHandler._afterMapKeyboardLayoutFromGameSettings += value;
                HookHandler.HookMapKeyboardLayoutFromGameSettings();
            }
            remove => HookHandler._afterMapKeyboardLayoutFromGameSettings -= value;
        }

        public static event Delegates.AddKeyBinding_NormalArgs AddKeyBinding
        {
            add
            {
                HookHandler._afterAddKeyBinding += value;
                HookHandler.HookAddKeyBinding();
            }
            remove => HookHandler._afterAddKeyBinding -= value;
        }

        public static event Delegates.SetupNonMappableBindings_NormalArgs SetupNonMappableBindings
        {
            add
            {
                HookHandler._afterSetupNonMappableBindings += value;
                HookHandler.HookSetupNonMappableBindings();
            }
            remove => HookHandler._afterSetupNonMappableBindings -= value;
        }

        public static event Delegates.SetupMappableControllerBindingsList_NormalArgs SetupMappableControllerBindingsList
        {
            add
            {
                HookHandler._afterSetupMappableControllerBindingsList += value;
                HookHandler.HookSetupMappableControllerBindingsList();
            }
            remove => HookHandler._afterSetupMappableControllerBindingsList -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_mappableControllerActions_NormalArgs get_mappableControllerActions
        {
            add => HookEndpointManager.Add<Delegates.get_mappableControllerActions_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputHandler), "get_mappableControllerActions"), value);
            remove => HookEndpointManager.Remove<Delegates.get_mappableControllerActions_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputHandler), "get_mappableControllerActions"), value);
        }

        public static event Delegates.set_mappableControllerActions_NormalArgs set_mappableControllerActions
        {
            add => HookEndpointManager.Add<Delegates.set_mappableControllerActions_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputHandler), "set_mappableControllerActions"), value);
            remove => HookEndpointManager.Remove<Delegates.set_mappableControllerActions_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputHandler), "set_mappableControllerActions"), value);
        }

        public static event Delegates.get_unmappedActions_NormalArgs get_unmappedActions
        {
            add => HookEndpointManager.Add<Delegates.get_unmappedActions_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputHandler), "get_unmappedActions"), value);
            remove => HookEndpointManager.Remove<Delegates.get_unmappedActions_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputHandler), "get_unmappedActions"), value);
        }

        public static event Delegates.set_unmappedActions_NormalArgs set_unmappedActions
        {
            add => HookEndpointManager.Add<Delegates.set_unmappedActions_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputHandler), "set_unmappedActions"), value);
            remove => HookEndpointManager.Remove<Delegates.set_unmappedActions_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputHandler), "set_unmappedActions"), value);
        }

        public static event Delegates.get_pauseAllowed_NormalArgs get_pauseAllowed
        {
            add => HookEndpointManager.Add<Delegates.get_pauseAllowed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputHandler), "get_pauseAllowed"), value);
            remove => HookEndpointManager.Remove<Delegates.get_pauseAllowed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputHandler), "get_pauseAllowed"), value);
        }

        public static event Delegates.set_pauseAllowed_NormalArgs set_pauseAllowed
        {
            add => HookEndpointManager.Add<Delegates.set_pauseAllowed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputHandler), "set_pauseAllowed"), value);
            remove => HookEndpointManager.Remove<Delegates.set_pauseAllowed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputHandler), "set_pauseAllowed"), value);
        }

        public static event Delegates.get_skipMode_NormalArgs get_skipMode
        {
            add => HookEndpointManager.Add<Delegates.get_skipMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputHandler), "get_skipMode"), value);
            remove => HookEndpointManager.Remove<Delegates.get_skipMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputHandler), "get_skipMode"), value);
        }

        public static event Delegates.set_skipMode_NormalArgs set_skipMode
        {
            add => HookEndpointManager.Add<Delegates.set_skipMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputHandler), "set_skipMode"), value);
            remove => HookEndpointManager.Remove<Delegates.set_skipMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputHandler), "set_skipMode"), value);
        }

        public static event On.InputHandler.hook_Awake Awake
        {
            add => On.InputHandler.Awake += value;
            remove => On.InputHandler.Awake -= value;
        }

        public static event On.InputHandler.hook_Start Start
        {
            add => On.InputHandler.Start += value;
            remove => On.InputHandler.Start -= value;
        }

        public static event On.InputHandler.hook_OnDestroy OnDestroy
        {
            add => On.InputHandler.OnDestroy += value;
            remove => On.InputHandler.OnDestroy -= value;
        }

        public static event On.InputHandler.hook_SceneInit SceneInit
        {
            add => On.InputHandler.SceneInit += value;
            remove => On.InputHandler.SceneInit -= value;
        }

        public static event On.InputHandler.hook_OnGUI OnGUI
        {
            add => On.InputHandler.OnGUI += value;
            remove => On.InputHandler.OnGUI -= value;
        }

        public static event On.InputHandler.hook_SetCursorVisible SetCursorVisible
        {
            add => On.InputHandler.SetCursorVisible += value;
            remove => On.InputHandler.SetCursorVisible -= value;
        }

        public static event On.InputHandler.hook_SetCursorEnabled SetCursorEnabled
        {
            add => On.InputHandler.SetCursorEnabled += value;
            remove => On.InputHandler.SetCursorEnabled -= value;
        }

        public static event On.InputHandler.hook_Update Update
        {
            add => On.InputHandler.Update += value;
            remove => On.InputHandler.Update -= value;
        }

        public static event On.InputHandler.hook_ControllerAttached ControllerAttached
        {
            add => On.InputHandler.ControllerAttached += value;
            remove => On.InputHandler.ControllerAttached -= value;
        }

        public static event On.InputHandler.hook_ControllerActivated ControllerActivated
        {
            add => On.InputHandler.ControllerActivated += value;
            remove => On.InputHandler.ControllerActivated -= value;
        }

        public static event On.InputHandler.hook_ControllerDetached ControllerDetached
        {
            add => On.InputHandler.ControllerDetached += value;
            remove => On.InputHandler.ControllerDetached -= value;
        }

        public static event On.InputHandler.hook_PlayingInput PlayingInput
        {
            add => On.InputHandler.PlayingInput += value;
            remove => On.InputHandler.PlayingInput -= value;
        }

        public static event On.InputHandler.hook_CutsceneInput CutsceneInput
        {
            add => On.InputHandler.CutsceneInput += value;
            remove => On.InputHandler.CutsceneInput -= value;
        }

        public static event On.InputHandler.hook_StagCutsceneInput StagCutsceneInput
        {
            add => On.InputHandler.StagCutsceneInput += value;
            remove => On.InputHandler.StagCutsceneInput -= value;
        }

        public static event On.InputHandler.hook_BetaEndInput BetaEndInput
        {
            add => On.InputHandler.BetaEndInput += value;
            remove => On.InputHandler.BetaEndInput -= value;
        }

        public static event On.InputHandler.hook_AttachHeroController AttachHeroController
        {
            add => On.InputHandler.AttachHeroController += value;
            remove => On.InputHandler.AttachHeroController -= value;
        }

        public static event On.InputHandler.hook_StopAcceptingInput StopAcceptingInput
        {
            add => On.InputHandler.StopAcceptingInput += value;
            remove => On.InputHandler.StopAcceptingInput -= value;
        }

        public static event On.InputHandler.hook_StartAcceptingInput StartAcceptingInput
        {
            add => On.InputHandler.StartAcceptingInput += value;
            remove => On.InputHandler.StartAcceptingInput -= value;
        }

        public static event On.InputHandler.hook_PreventPause PreventPause
        {
            add => On.InputHandler.PreventPause += value;
            remove => On.InputHandler.PreventPause -= value;
        }

        public static event On.InputHandler.hook_AllowPause AllowPause
        {
            add => On.InputHandler.AllowPause += value;
            remove => On.InputHandler.AllowPause -= value;
        }

        public static event On.InputHandler.hook_UpdateActiveController UpdateActiveController
        {
            add => On.InputHandler.UpdateActiveController += value;
            remove => On.InputHandler.UpdateActiveController -= value;
        }

        public static event On.InputHandler.hook_StopUIInput StopUIInput
        {
            add => On.InputHandler.StopUIInput += value;
            remove => On.InputHandler.StopUIInput -= value;
        }

        public static event On.InputHandler.hook_StartUIInput StartUIInput
        {
            add => On.InputHandler.StartUIInput += value;
            remove => On.InputHandler.StartUIInput -= value;
        }

        public static event On.InputHandler.hook_StopMouseInput StopMouseInput
        {
            add => On.InputHandler.StopMouseInput += value;
            remove => On.InputHandler.StopMouseInput -= value;
        }

        public static event On.InputHandler.hook_EnableMouseInput EnableMouseInput
        {
            add => On.InputHandler.EnableMouseInput += value;
            remove => On.InputHandler.EnableMouseInput -= value;
        }

        public static event On.InputHandler.hook_SetSkipMode SetSkipMode
        {
            add => On.InputHandler.SetSkipMode += value;
            remove => On.InputHandler.SetSkipMode -= value;
        }

        public static event On.InputHandler.hook_RefreshPlayerData RefreshPlayerData
        {
            add => On.InputHandler.RefreshPlayerData += value;
            remove => On.InputHandler.RefreshPlayerData -= value;
        }

        public static event On.InputHandler.hook_ResetDefaultKeyBindings ResetDefaultKeyBindings
        {
            add => On.InputHandler.ResetDefaultKeyBindings += value;
            remove => On.InputHandler.ResetDefaultKeyBindings -= value;
        }

        public static event On.InputHandler.hook_ResetDefaultControllerButtonBindings
            ResetDefaultControllerButtonBindings
            {
                add => On.InputHandler.ResetDefaultControllerButtonBindings += value;
                remove => On.InputHandler.ResetDefaultControllerButtonBindings -= value;
            }

        public static event On.InputHandler.hook_ResetAllControllerButtonBindings ResetAllControllerButtonBindings
        {
            add => On.InputHandler.ResetAllControllerButtonBindings += value;
            remove => On.InputHandler.ResetAllControllerButtonBindings -= value;
        }

        public static event On.InputHandler.hook_SendKeyBindingsToGameSettings SendKeyBindingsToGameSettings
        {
            add => On.InputHandler.SendKeyBindingsToGameSettings += value;
            remove => On.InputHandler.SendKeyBindingsToGameSettings -= value;
        }

        public static event On.InputHandler.hook_SendButtonBindingsToGameSettings SendButtonBindingsToGameSettings
        {
            add => On.InputHandler.SendButtonBindingsToGameSettings += value;
            remove => On.InputHandler.SendButtonBindingsToGameSettings -= value;
        }

        public static event On.InputHandler.hook_MapControllerButtons MapControllerButtons
        {
            add => On.InputHandler.MapControllerButtons += value;
            remove => On.InputHandler.MapControllerButtons -= value;
        }

        public static event On.InputHandler.hook_RemapUIButtons RemapUIButtons
        {
            add => On.InputHandler.RemapUIButtons += value;
            remove => On.InputHandler.RemapUIButtons -= value;
        }

        public static event On.InputHandler.hook_ActionButtonToPlayerAction ActionButtonToPlayerAction
        {
            add => On.InputHandler.ActionButtonToPlayerAction += value;
            remove => On.InputHandler.ActionButtonToPlayerAction -= value;
        }

        public static event On.InputHandler.hook_GetButtonBindingForAction GetButtonBindingForAction
        {
            add => On.InputHandler.GetButtonBindingForAction += value;
            remove => On.InputHandler.GetButtonBindingForAction -= value;
        }

        public static event On.InputHandler.hook_GetActionForMappableControllerButton
            GetActionForMappableControllerButton
            {
                add => On.InputHandler.GetActionForMappableControllerButton += value;
                remove => On.InputHandler.GetActionForMappableControllerButton -= value;
            }

        public static event On.InputHandler.hook_GetActionForDefaultControllerButton GetActionForDefaultControllerButton
        {
            add => On.InputHandler.GetActionForDefaultControllerButton += value;
            remove => On.InputHandler.GetActionForDefaultControllerButton -= value;
        }

        public static event On.InputHandler.hook_PrintMappings PrintMappings
        {
            add => On.InputHandler.PrintMappings += value;
            remove => On.InputHandler.PrintMappings -= value;
        }

        public static event On.InputHandler.hook_ActionButtonLocalizedKey_PlayerAction
            ActionButtonLocalizedKey_PlayerAction
            {
                add => On.InputHandler.ActionButtonLocalizedKey_PlayerAction += value;
                remove => On.InputHandler.ActionButtonLocalizedKey_PlayerAction -= value;
            }

        public static event On.InputHandler.hook_ActionButtonLocalizedKey_string ActionButtonLocalizedKey_string
        {
            add => On.InputHandler.ActionButtonLocalizedKey_string += value;
            remove => On.InputHandler.ActionButtonLocalizedKey_string -= value;
        }

        public static event On.InputHandler.hook_StopCutsceneInput StopCutsceneInput
        {
            add => On.InputHandler.StopCutsceneInput += value;
            remove => On.InputHandler.StopCutsceneInput -= value;
        }

        public static event On.InputHandler.hook_UnlockStagInput UnlockStagInput
        {
            add => On.InputHandler.UnlockStagInput += value;
            remove => On.InputHandler.UnlockStagInput -= value;
        }

        public static event On.InputHandler.hook_SetupGamepadUIInputActions SetupGamepadUIInputActions
        {
            add => On.InputHandler.SetupGamepadUIInputActions += value;
            remove => On.InputHandler.SetupGamepadUIInputActions -= value;
        }

        public static event On.InputHandler.hook_RemoveGamepadUIInputActions RemoveGamepadUIInputActions
        {
            add => On.InputHandler.RemoveGamepadUIInputActions += value;
            remove => On.InputHandler.RemoveGamepadUIInputActions -= value;
        }

        public static event On.InputHandler.hook_DestroyCurrentActionSet DestroyCurrentActionSet
        {
            add => On.InputHandler.DestroyCurrentActionSet += value;
            remove => On.InputHandler.DestroyCurrentActionSet -= value;
        }

        public static event On.InputHandler.hook_SetActiveGamepadType SetActiveGamepadType
        {
            add => On.InputHandler.SetActiveGamepadType += value;
            remove => On.InputHandler.SetActiveGamepadType -= value;
        }

        public static event On.InputHandler.hook_MapDefaultKeyboardLayout MapDefaultKeyboardLayout
        {
            add => On.InputHandler.MapDefaultKeyboardLayout += value;
            remove => On.InputHandler.MapDefaultKeyboardLayout -= value;
        }

        public static event On.InputHandler.hook_MapKeyboardLayoutFromGameSettings MapKeyboardLayoutFromGameSettings
        {
            add => On.InputHandler.MapKeyboardLayoutFromGameSettings += value;
            remove => On.InputHandler.MapKeyboardLayoutFromGameSettings -= value;
        }

        public static event On.InputHandler.hook_AddKeyBinding AddKeyBinding
        {
            add => On.InputHandler.AddKeyBinding += value;
            remove => On.InputHandler.AddKeyBinding -= value;
        }

        public static event On.InputHandler.hook_SetupNonMappableBindings SetupNonMappableBindings
        {
            add => On.InputHandler.SetupNonMappableBindings += value;
            remove => On.InputHandler.SetupNonMappableBindings -= value;
        }

        public static event On.InputHandler.hook_SetupMappableControllerBindingsList SetupMappableControllerBindingsList
        {
            add => On.InputHandler.SetupMappableControllerBindingsList += value;
            remove => On.InputHandler.SetupMappableControllerBindingsList -= value;
        }
    }
}