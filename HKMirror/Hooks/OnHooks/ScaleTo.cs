using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ScaleTo class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnScaleTo
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<ScaleTo> orig, ScaleTo self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "OnEnter"), OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_NormalArgs _afterOnEnter;

        private static void OnEnter(Action<ScaleTo> orig, ScaleTo self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            _beforeOnEnter?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnter != null) _afterOnEnter.Invoke(@params);
        }

        internal static void HookOnUpdate()
        {
            if (!HookedList.Contains("OnUpdate"))
            {
                HookedList.Add("OnUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "OnUpdate"), OnUpdate);
            }
        }

        internal static event Delegates.OnUpdate_BeforeArgs _beforeOnUpdate;
        internal static event Delegates.OnUpdate_NormalArgs _afterOnUpdate;

        private static void OnUpdate(Action<ScaleTo> orig, ScaleTo self)
        {
            Delegates.Params_OnUpdate @params = new()
            {
                self = self
            };
            _beforeOnUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnUpdate != null) _afterOnUpdate.Invoke(@params);
        }

        internal static void HookUpdateScaling()
        {
            if (!HookedList.Contains("UpdateScaling"))
            {
                HookedList.Add("UpdateScaling");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "UpdateScaling"), UpdateScaling);
            }
        }

        internal static event Delegates.UpdateScaling_BeforeArgs _beforeUpdateScaling;
        internal static event Delegates.UpdateScaling_NormalArgs _afterUpdateScaling;

        private static void UpdateScaling(Action<ScaleTo> orig, ScaleTo self)
        {
            Delegates.Params_UpdateScaling @params = new()
            {
                self = self
            };
            _beforeUpdateScaling?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateScaling != null) _afterUpdateScaling.Invoke(@params);
        }

        internal static void HookGetCurved()
        {
            if (!HookedList.Contains("GetCurved"))
            {
                HookedList.Add("GetCurved");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "GetCurved", false), GetCurved);
            }
        }

        internal static event Delegates.GetCurved_BeforeArgs _beforeGetCurved;
        internal static event Delegates.GetCurved_NormalArgs _afterGetCurved;

        private static float GetCurved(Func<float, ScaleToCurves, float> orig, float val, ScaleToCurves curve)
        {
            Delegates.Params_GetCurved @params = new()
            {
                val = val, curve = curve
            };
            _beforeGetCurved?.Invoke(@params);
            val = @params.val;
            curve = @params.curve;
            var retVal = orig(val, curve);
            if (_afterGetCurved != null) retVal = _afterGetCurved.Invoke(@params);
            return retVal;
        }

        internal static void HookLinear()
        {
            if (!HookedList.Contains("Linear"))
            {
                HookedList.Add("Linear");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "Linear", false), Linear);
            }
        }

        internal static event Delegates.Linear_BeforeArgs _beforeLinear;
        internal static event Delegates.Linear_NormalArgs _afterLinear;

        private static float Linear(Func<float, float> orig, float val)
        {
            Delegates.Params_Linear @params = new()
            {
                val = val
            };
            _beforeLinear?.Invoke(@params);
            val = @params.val;
            var retVal = orig(val);
            if (_afterLinear != null) retVal = _afterLinear.Invoke(@params);
            return retVal;
        }

        internal static void HookQuadraticOut()
        {
            if (!HookedList.Contains("QuadraticOut"))
            {
                HookedList.Add("QuadraticOut");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "QuadraticOut", false), QuadraticOut);
            }
        }

        internal static event Delegates.QuadraticOut_BeforeArgs _beforeQuadraticOut;
        internal static event Delegates.QuadraticOut_NormalArgs _afterQuadraticOut;

        private static float QuadraticOut(Func<float, float> orig, float val)
        {
            Delegates.Params_QuadraticOut @params = new()
            {
                val = val
            };
            _beforeQuadraticOut?.Invoke(@params);
            val = @params.val;
            var retVal = orig(val);
            if (_afterQuadraticOut != null) retVal = _afterQuadraticOut.Invoke(@params);
            return retVal;
        }

        internal static void HookSinusoidalOut()
        {
            if (!HookedList.Contains("SinusoidalOut"))
            {
                HookedList.Add("SinusoidalOut");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "SinusoidalOut", false), SinusoidalOut);
            }
        }

        internal static event Delegates.SinusoidalOut_BeforeArgs _beforeSinusoidalOut;
        internal static event Delegates.SinusoidalOut_NormalArgs _afterSinusoidalOut;

        private static float SinusoidalOut(Func<float, float> orig, float val)
        {
            Delegates.Params_SinusoidalOut @params = new()
            {
                val = val
            };
            _beforeSinusoidalOut?.Invoke(@params);
            val = @params.val;
            var retVal = orig(val);
            if (_afterSinusoidalOut != null) retVal = _afterSinusoidalOut.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void GetCurved_BeforeArgs(Params_GetCurved args);

        public delegate float GetCurved_NormalArgs(Params_GetCurved args);

        public delegate void Linear_BeforeArgs(Params_Linear args);

        public delegate float Linear_NormalArgs(Params_Linear args);

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_NormalArgs(Params_OnEnter args);

        public delegate void OnUpdate_BeforeArgs(Params_OnUpdate args);

        public delegate void OnUpdate_NormalArgs(Params_OnUpdate args);

        public delegate void QuadraticOut_BeforeArgs(Params_QuadraticOut args);

        public delegate float QuadraticOut_NormalArgs(Params_QuadraticOut args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public delegate void SinusoidalOut_BeforeArgs(Params_SinusoidalOut args);

        public delegate float SinusoidalOut_NormalArgs(Params_SinusoidalOut args);

        public delegate void UpdateScaling_BeforeArgs(Params_UpdateScaling args);

        public delegate void UpdateScaling_NormalArgs(Params_UpdateScaling args);

        public sealed class Params_Reset
        {
            public ScaleTo self;
        }

        public sealed class Params_OnEnter
        {
            public ScaleTo self;
        }

        public sealed class Params_OnUpdate
        {
            public ScaleTo self;
        }

        public sealed class Params_UpdateScaling
        {
            public ScaleTo self;
        }

        public sealed class Params_GetCurved
        {
            public ScaleToCurves curve;
            public float val;
        }

        public sealed class Params_Linear
        {
            public float val;
        }

        public sealed class Params_QuadraticOut
        {
            public float val;
        }

        public sealed class Params_SinusoidalOut
        {
            public float val;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.OnUpdate_BeforeArgs OnUpdate
        {
            add
            {
                HookHandler._beforeOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._beforeOnUpdate -= value;
        }

        public static event Delegates.UpdateScaling_BeforeArgs UpdateScaling
        {
            add
            {
                HookHandler._beforeUpdateScaling += value;
                HookHandler.HookUpdateScaling();
            }
            remove => HookHandler._beforeUpdateScaling -= value;
        }

        public static event Delegates.GetCurved_BeforeArgs GetCurved
        {
            add
            {
                HookHandler._beforeGetCurved += value;
                HookHandler.HookGetCurved();
            }
            remove => HookHandler._beforeGetCurved -= value;
        }

        public static event Delegates.Linear_BeforeArgs Linear
        {
            add
            {
                HookHandler._beforeLinear += value;
                HookHandler.HookLinear();
            }
            remove => HookHandler._beforeLinear -= value;
        }

        public static event Delegates.QuadraticOut_BeforeArgs QuadraticOut
        {
            add
            {
                HookHandler._beforeQuadraticOut += value;
                HookHandler.HookQuadraticOut();
            }
            remove => HookHandler._beforeQuadraticOut -= value;
        }

        public static event Delegates.SinusoidalOut_BeforeArgs SinusoidalOut
        {
            add
            {
                HookHandler._beforeSinusoidalOut += value;
                HookHandler.HookSinusoidalOut();
            }
            remove => HookHandler._beforeSinusoidalOut -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.OnUpdate_NormalArgs OnUpdate
        {
            add
            {
                HookHandler._afterOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._afterOnUpdate -= value;
        }

        public static event Delegates.UpdateScaling_NormalArgs UpdateScaling
        {
            add
            {
                HookHandler._afterUpdateScaling += value;
                HookHandler.HookUpdateScaling();
            }
            remove => HookHandler._afterUpdateScaling -= value;
        }

        public static event Delegates.GetCurved_NormalArgs GetCurved
        {
            add
            {
                HookHandler._afterGetCurved += value;
                HookHandler.HookGetCurved();
            }
            remove => HookHandler._afterGetCurved -= value;
        }

        public static event Delegates.Linear_NormalArgs Linear
        {
            add
            {
                HookHandler._afterLinear += value;
                HookHandler.HookLinear();
            }
            remove => HookHandler._afterLinear -= value;
        }

        public static event Delegates.QuadraticOut_NormalArgs QuadraticOut
        {
            add
            {
                HookHandler._afterQuadraticOut += value;
                HookHandler.HookQuadraticOut();
            }
            remove => HookHandler._afterQuadraticOut -= value;
        }

        public static event Delegates.SinusoidalOut_NormalArgs SinusoidalOut
        {
            add
            {
                HookHandler._afterSinusoidalOut += value;
                HookHandler.HookSinusoidalOut();
            }
            remove => HookHandler._afterSinusoidalOut -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "Reset"), value);
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "OnEnter"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "OnEnter"), value);
        }

        public static event Delegates.OnUpdate_NormalArgs OnUpdate
        {
            add => HookEndpointManager.Add<Delegates.OnUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "OnUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.OnUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "OnUpdate"), value);
        }

        public static event Delegates.UpdateScaling_NormalArgs UpdateScaling
        {
            add => HookEndpointManager.Add<Delegates.UpdateScaling_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "UpdateScaling"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateScaling_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "UpdateScaling"), value);
        }

        public static event Delegates.GetCurved_NormalArgs GetCurved
        {
            add => HookEndpointManager.Add<Delegates.GetCurved_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "GetCurved", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetCurved_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "GetCurved", false), value);
        }

        public static event Delegates.Linear_NormalArgs Linear
        {
            add => HookEndpointManager.Add<Delegates.Linear_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "Linear", false), value);
            remove => HookEndpointManager.Remove<Delegates.Linear_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "Linear", false), value);
        }

        public static event Delegates.QuadraticOut_NormalArgs QuadraticOut
        {
            add => HookEndpointManager.Add<Delegates.QuadraticOut_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "QuadraticOut", false), value);
            remove => HookEndpointManager.Remove<Delegates.QuadraticOut_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "QuadraticOut", false), value);
        }

        public static event Delegates.SinusoidalOut_NormalArgs SinusoidalOut
        {
            add => HookEndpointManager.Add<Delegates.SinusoidalOut_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "SinusoidalOut", false), value);
            remove => HookEndpointManager.Remove<Delegates.SinusoidalOut_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScaleTo), "SinusoidalOut", false), value);
        }
    }
}