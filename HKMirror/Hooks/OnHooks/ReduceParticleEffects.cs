using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for ReduceParticleEffects class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnReduceParticleEffects
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.ReduceParticleEffects.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.ReduceParticleEffects.orig_Start orig, ReduceParticleEffects self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetEmission()
        {
            if (!HookedList.Contains("SetEmission"))
            {
                HookedList.Add("SetEmission");
                On.ReduceParticleEffects.SetEmission += SetEmission;
            }
        }

        internal static event Delegates.SetEmission_BeforeArgs _beforeSetEmission;
        internal static event Delegates.SetEmission_AfterArgs _afterSetEmission;

        private static void SetEmission(On.ReduceParticleEffects.orig_SetEmission orig, ReduceParticleEffects self)
        {
            Delegates.Params_SetEmission @params = new()
            {
                self = self
            };
            if (_beforeSetEmission != null)
            {
                foreach (Delegates.SetEmission_BeforeArgs toInvoke in _beforeSetEmission.GetInvocationList())
                {
                    try
                    {
                        _beforeSetEmission?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterSetEmission != null)
            {
                foreach (Delegates.SetEmission_AfterArgs toInvoke in _afterSetEmission.GetInvocationList())
                {
                    try
                    {
                        _afterSetEmission.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.ReduceParticleEffects.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.ReduceParticleEffects.orig_OnEnable orig, ReduceParticleEffects self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
            {
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
            {
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.ReduceParticleEffects.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(On.ReduceParticleEffects.orig_OnDisable orig, ReduceParticleEffects self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
            {
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
            {
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                {
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Start
        {
            public ReduceParticleEffects self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<ReduceParticleEffects> orig, ReduceParticleEffects self);

        public sealed class Params_SetEmission
        {
            public ReduceParticleEffects self;
        }

        public delegate void SetEmission_BeforeArgs(Params_SetEmission args);

        public delegate void SetEmission_AfterArgs(Params_SetEmission args);

        public delegate void SetEmission_WithArgs(Action<ReduceParticleEffects> orig, ReduceParticleEffects self);

        public sealed class Params_OnEnable
        {
            public ReduceParticleEffects self;
        }

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<ReduceParticleEffects> orig, ReduceParticleEffects self);

        public sealed class Params_OnDisable
        {
            public ReduceParticleEffects self;
        }

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<ReduceParticleEffects> orig, ReduceParticleEffects self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.SetEmission_BeforeArgs SetEmission
        {
            add
            {
                HookHandler._beforeSetEmission += value;
                HookHandler.HookSetEmission();
            }
            remove => HookHandler._beforeSetEmission -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.SetEmission_AfterArgs SetEmission
        {
            add
            {
                HookHandler._afterSetEmission += value;
                HookHandler.HookSetEmission();
            }
            remove => HookHandler._afterSetEmission -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.ReduceParticleEffects.hook_Start Start
        {
            add => On.ReduceParticleEffects.Start += value;
            remove => On.ReduceParticleEffects.Start -= value;
        }

        public static event On.ReduceParticleEffects.hook_SetEmission SetEmission
        {
            add => On.ReduceParticleEffects.SetEmission += value;
            remove => On.ReduceParticleEffects.SetEmission -= value;
        }

        public static event On.ReduceParticleEffects.hook_OnEnable OnEnable
        {
            add => On.ReduceParticleEffects.OnEnable += value;
            remove => On.ReduceParticleEffects.OnEnable -= value;
        }

        public static event On.ReduceParticleEffects.hook_OnDisable OnDisable
        {
            add => On.ReduceParticleEffects.OnDisable += value;
            remove => On.ReduceParticleEffects.OnDisable -= value;
        }
    }
}