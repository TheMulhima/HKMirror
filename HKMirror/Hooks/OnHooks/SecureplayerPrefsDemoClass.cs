using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for SecureplayerPrefsDemoClass class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSecureplayerPrefsDemoClass
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_playID()
        {
            if (!HookedList.Contains("get_playID"))
            {
                HookedList.Add("get_playID");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecureplayerPrefsDemoClass), "get_playID", true),
                    get_playID);
            }
        }

        internal static event Delegates.get_playID_BeforeArgs _beforeget_playID;
        internal static event Delegates.get_playID_AfterArgs _afterget_playID;

        private static string get_playID(Func<SecureplayerPrefsDemoClass, string> orig, SecureplayerPrefsDemoClass self)
        {
            Delegates.Params_get_playID @params = new()
            {
                self = self
            };
            if (_beforeget_playID != null)
            {
                foreach (Delegates.get_playID_BeforeArgs toInvoke in _beforeget_playID.GetInvocationList())
                {
                    try
                    {
                        _beforeget_playID?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_playID != null)
            {
                foreach (Delegates.get_playID_AfterArgs toInvoke in _afterget_playID.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_playID.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_playID()
        {
            if (!HookedList.Contains("set_playID"))
            {
                HookedList.Add("set_playID");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecureplayerPrefsDemoClass), "set_playID", true),
                    set_playID);
            }
        }

        internal static event Delegates.set_playID_BeforeArgs _beforeset_playID;
        internal static event Delegates.set_playID_AfterArgs _afterset_playID;

        private static void set_playID(Action<SecureplayerPrefsDemoClass, string> orig, SecureplayerPrefsDemoClass self,
            string value)
        {
            Delegates.Params_set_playID @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_playID != null)
            {
                foreach (Delegates.set_playID_BeforeArgs toInvoke in _beforeset_playID.GetInvocationList())
                {
                    try
                    {
                        _beforeset_playID?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_playID != null)
            {
                foreach (Delegates.set_playID_AfterArgs toInvoke in _afterset_playID.GetInvocationList())
                {
                    try
                    {
                        _afterset_playID.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_type()
        {
            if (!HookedList.Contains("get_type"))
            {
                HookedList.Add("get_type");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecureplayerPrefsDemoClass), "get_type", true),
                    get_type);
            }
        }

        internal static event Delegates.get_type_BeforeArgs _beforeget_type;
        internal static event Delegates.get_type_AfterArgs _afterget_type;

        private static int get_type(Func<SecureplayerPrefsDemoClass, int> orig, SecureplayerPrefsDemoClass self)
        {
            Delegates.Params_get_type @params = new()
            {
                self = self
            };
            if (_beforeget_type != null)
            {
                foreach (Delegates.get_type_BeforeArgs toInvoke in _beforeget_type.GetInvocationList())
                {
                    try
                    {
                        _beforeget_type?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_type != null)
            {
                foreach (Delegates.get_type_AfterArgs toInvoke in _afterget_type.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_type.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_type()
        {
            if (!HookedList.Contains("set_type"))
            {
                HookedList.Add("set_type");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecureplayerPrefsDemoClass), "set_type", true),
                    set_type);
            }
        }

        internal static event Delegates.set_type_BeforeArgs _beforeset_type;
        internal static event Delegates.set_type_AfterArgs _afterset_type;

        private static void set_type(Action<SecureplayerPrefsDemoClass, int> orig, SecureplayerPrefsDemoClass self,
            int value)
        {
            Delegates.Params_set_type @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_type != null)
            {
                foreach (Delegates.set_type_BeforeArgs toInvoke in _beforeset_type.GetInvocationList())
                {
                    try
                    {
                        _beforeset_type?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_type != null)
            {
                foreach (Delegates.set_type_AfterArgs toInvoke in _afterset_type.GetInvocationList())
                {
                    try
                    {
                        _afterset_type.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_incremental()
        {
            if (!HookedList.Contains("get_incremental"))
            {
                HookedList.Add("get_incremental");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecureplayerPrefsDemoClass), "get_incremental", true),
                    get_incremental);
            }
        }

        internal static event Delegates.get_incremental_BeforeArgs _beforeget_incremental;
        internal static event Delegates.get_incremental_AfterArgs _afterget_incremental;

        private static bool get_incremental(Func<SecureplayerPrefsDemoClass, bool> orig,
            SecureplayerPrefsDemoClass self)
        {
            Delegates.Params_get_incremental @params = new()
            {
                self = self
            };
            if (_beforeget_incremental != null)
            {
                foreach (Delegates.get_incremental_BeforeArgs toInvoke in _beforeget_incremental.GetInvocationList())
                {
                    try
                    {
                        _beforeget_incremental?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_incremental != null)
            {
                foreach (Delegates.get_incremental_AfterArgs toInvoke in _afterget_incremental.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_incremental.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_incremental()
        {
            if (!HookedList.Contains("set_incremental"))
            {
                HookedList.Add("set_incremental");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SecureplayerPrefsDemoClass), "set_incremental", true),
                    set_incremental);
            }
        }

        internal static event Delegates.set_incremental_BeforeArgs _beforeset_incremental;
        internal static event Delegates.set_incremental_AfterArgs _afterset_incremental;

        private static void set_incremental(Action<SecureplayerPrefsDemoClass, bool> orig,
            SecureplayerPrefsDemoClass self, bool value)
        {
            Delegates.Params_set_incremental @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_incremental != null)
            {
                foreach (Delegates.set_incremental_BeforeArgs toInvoke in _beforeset_incremental.GetInvocationList())
                {
                    try
                    {
                        _beforeset_incremental?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_incremental != null)
            {
                foreach (Delegates.set_incremental_AfterArgs toInvoke in _afterset_incremental.GetInvocationList())
                {
                    try
                    {
                        _afterset_incremental.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_playID
        {
            public SecureplayerPrefsDemoClass self;
        }

        public delegate void get_playID_BeforeArgs(Params_get_playID args);

        public delegate string get_playID_AfterArgs(Params_get_playID args, string ret);

        public delegate string get_playID_WithArgs(Func<SecureplayerPrefsDemoClass, string> orig,
            SecureplayerPrefsDemoClass self);

        public sealed class Params_set_playID
        {
            public SecureplayerPrefsDemoClass self;
            public string value;
        }

        public delegate void set_playID_BeforeArgs(Params_set_playID args);

        public delegate void set_playID_AfterArgs(Params_set_playID args);

        public delegate void set_playID_WithArgs(Action<SecureplayerPrefsDemoClass, string> orig,
            SecureplayerPrefsDemoClass self, string value);

        public sealed class Params_get_type
        {
            public SecureplayerPrefsDemoClass self;
        }

        public delegate void get_type_BeforeArgs(Params_get_type args);

        public delegate int get_type_AfterArgs(Params_get_type args, int ret);

        public delegate int get_type_WithArgs(Func<SecureplayerPrefsDemoClass, int> orig,
            SecureplayerPrefsDemoClass self);

        public sealed class Params_set_type
        {
            public SecureplayerPrefsDemoClass self;
            public int value;
        }

        public delegate void set_type_BeforeArgs(Params_set_type args);

        public delegate void set_type_AfterArgs(Params_set_type args);

        public delegate void set_type_WithArgs(Action<SecureplayerPrefsDemoClass, int> orig,
            SecureplayerPrefsDemoClass self, int value);

        public sealed class Params_get_incremental
        {
            public SecureplayerPrefsDemoClass self;
        }

        public delegate void get_incremental_BeforeArgs(Params_get_incremental args);

        public delegate bool get_incremental_AfterArgs(Params_get_incremental args, bool ret);

        public delegate bool get_incremental_WithArgs(Func<SecureplayerPrefsDemoClass, bool> orig,
            SecureplayerPrefsDemoClass self);

        public sealed class Params_set_incremental
        {
            public SecureplayerPrefsDemoClass self;
            public bool value;
        }

        public delegate void set_incremental_BeforeArgs(Params_set_incremental args);

        public delegate void set_incremental_AfterArgs(Params_set_incremental args);

        public delegate void set_incremental_WithArgs(Action<SecureplayerPrefsDemoClass, bool> orig,
            SecureplayerPrefsDemoClass self, bool value);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_playID_BeforeArgs get_playID
        {
            add
            {
                HookHandler._beforeget_playID += value;
                HookHandler.Hookget_playID();
            }
            remove => HookHandler._beforeget_playID -= value;
        }

        public static event Delegates.set_playID_BeforeArgs set_playID
        {
            add
            {
                HookHandler._beforeset_playID += value;
                HookHandler.Hookset_playID();
            }
            remove => HookHandler._beforeset_playID -= value;
        }

        public static event Delegates.get_type_BeforeArgs get_type
        {
            add
            {
                HookHandler._beforeget_type += value;
                HookHandler.Hookget_type();
            }
            remove => HookHandler._beforeget_type -= value;
        }

        public static event Delegates.set_type_BeforeArgs set_type
        {
            add
            {
                HookHandler._beforeset_type += value;
                HookHandler.Hookset_type();
            }
            remove => HookHandler._beforeset_type -= value;
        }

        public static event Delegates.get_incremental_BeforeArgs get_incremental
        {
            add
            {
                HookHandler._beforeget_incremental += value;
                HookHandler.Hookget_incremental();
            }
            remove => HookHandler._beforeget_incremental -= value;
        }

        public static event Delegates.set_incremental_BeforeArgs set_incremental
        {
            add
            {
                HookHandler._beforeset_incremental += value;
                HookHandler.Hookset_incremental();
            }
            remove => HookHandler._beforeset_incremental -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_playID_AfterArgs get_playID
        {
            add
            {
                HookHandler._afterget_playID += value;
                HookHandler.Hookget_playID();
            }
            remove => HookHandler._afterget_playID -= value;
        }

        public static event Delegates.set_playID_AfterArgs set_playID
        {
            add
            {
                HookHandler._afterset_playID += value;
                HookHandler.Hookset_playID();
            }
            remove => HookHandler._afterset_playID -= value;
        }

        public static event Delegates.get_type_AfterArgs get_type
        {
            add
            {
                HookHandler._afterget_type += value;
                HookHandler.Hookget_type();
            }
            remove => HookHandler._afterget_type -= value;
        }

        public static event Delegates.set_type_AfterArgs set_type
        {
            add
            {
                HookHandler._afterset_type += value;
                HookHandler.Hookset_type();
            }
            remove => HookHandler._afterset_type -= value;
        }

        public static event Delegates.get_incremental_AfterArgs get_incremental
        {
            add
            {
                HookHandler._afterget_incremental += value;
                HookHandler.Hookget_incremental();
            }
            remove => HookHandler._afterget_incremental -= value;
        }

        public static event Delegates.set_incremental_AfterArgs set_incremental
        {
            add
            {
                HookHandler._afterset_incremental += value;
                HookHandler.Hookset_incremental();
            }
            remove => HookHandler._afterset_incremental -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_playID_WithArgs get_playID
        {
            add => HookEndpointManager.Add<Delegates.get_playID_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecureplayerPrefsDemoClass), "get_playID", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_playID_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecureplayerPrefsDemoClass), "get_playID", true), value);
        }

        public static event Delegates.set_playID_WithArgs set_playID
        {
            add => HookEndpointManager.Add<Delegates.set_playID_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecureplayerPrefsDemoClass), "set_playID", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_playID_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecureplayerPrefsDemoClass), "set_playID", true), value);
        }

        public static event Delegates.get_type_WithArgs get_type
        {
            add => HookEndpointManager.Add<Delegates.get_type_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecureplayerPrefsDemoClass), "get_type", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_type_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecureplayerPrefsDemoClass), "get_type", true), value);
        }

        public static event Delegates.set_type_WithArgs set_type
        {
            add => HookEndpointManager.Add<Delegates.set_type_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecureplayerPrefsDemoClass), "set_type", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_type_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecureplayerPrefsDemoClass), "set_type", true), value);
        }

        public static event Delegates.get_incremental_WithArgs get_incremental
        {
            add => HookEndpointManager.Add<Delegates.get_incremental_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecureplayerPrefsDemoClass), "get_incremental", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_incremental_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecureplayerPrefsDemoClass), "get_incremental", true), value);
        }

        public static event Delegates.set_incremental_WithArgs set_incremental
        {
            add => HookEndpointManager.Add<Delegates.set_incremental_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecureplayerPrefsDemoClass), "set_incremental", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_incremental_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SecureplayerPrefsDemoClass), "set_incremental", true), value);
        }
    }
}