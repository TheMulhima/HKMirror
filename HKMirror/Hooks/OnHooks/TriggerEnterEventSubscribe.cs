namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TriggerEnterEventSubscribe class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTriggerEnterEventSubscribe
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                On.TriggerEnterEventSubscribe.Reset += Reset;
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_AfterArgs _afterReset;

        private static void Reset(On.TriggerEnterEventSubscribe.orig_Reset orig, TriggerEnterEventSubscribe self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            if (_beforeReset != null)
                foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
                    try
                    {
                        _beforeReset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterReset != null)
                foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
                    try
                    {
                        _afterReset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                On.TriggerEnterEventSubscribe.OnEnter += OnEnter;
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_AfterArgs _afterOnEnter;

        private static void OnEnter(On.TriggerEnterEventSubscribe.orig_OnEnter orig, TriggerEnterEventSubscribe self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            if (_beforeOnEnter != null)
                foreach (Delegates.OnEnter_BeforeArgs toInvoke in _beforeOnEnter.GetInvocationList())
                    try
                    {
                        _beforeOnEnter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnter != null)
                foreach (Delegates.OnEnter_AfterArgs toInvoke in _afterOnEnter.GetInvocationList())
                    try
                    {
                        _afterOnEnter.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnExit()
        {
            if (!HookedList.Contains("OnExit"))
            {
                HookedList.Add("OnExit");
                On.TriggerEnterEventSubscribe.OnExit += OnExit;
            }
        }

        internal static event Delegates.OnExit_BeforeArgs _beforeOnExit;
        internal static event Delegates.OnExit_AfterArgs _afterOnExit;

        private static void OnExit(On.TriggerEnterEventSubscribe.orig_OnExit orig, TriggerEnterEventSubscribe self)
        {
            Delegates.Params_OnExit @params = new()
            {
                self = self
            };
            if (_beforeOnExit != null)
                foreach (Delegates.OnExit_BeforeArgs toInvoke in _beforeOnExit.GetInvocationList())
                    try
                    {
                        _beforeOnExit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnExit != null)
                foreach (Delegates.OnExit_AfterArgs toInvoke in _afterOnExit.GetInvocationList())
                    try
                    {
                        _afterOnExit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSendEnteredEvent()
        {
            if (!HookedList.Contains("SendEnteredEvent"))
            {
                HookedList.Add("SendEnteredEvent");
                On.TriggerEnterEventSubscribe.SendEnteredEvent += SendEnteredEvent;
            }
        }

        internal static event Delegates.SendEnteredEvent_BeforeArgs _beforeSendEnteredEvent;
        internal static event Delegates.SendEnteredEvent_AfterArgs _afterSendEnteredEvent;

        private static void SendEnteredEvent(On.TriggerEnterEventSubscribe.orig_SendEnteredEvent orig,
            TriggerEnterEventSubscribe self, Collider2D collider, GameObject sender)
        {
            Delegates.Params_SendEnteredEvent @params = new()
            {
                self = self, collider = collider, sender = sender
            };
            if (_beforeSendEnteredEvent != null)
                foreach (Delegates.SendEnteredEvent_BeforeArgs toInvoke in _beforeSendEnteredEvent.GetInvocationList())
                    try
                    {
                        _beforeSendEnteredEvent?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            collider = @params.collider;
            sender = @params.sender;
            orig(self, collider, sender);
            if (_afterSendEnteredEvent != null)
                foreach (Delegates.SendEnteredEvent_AfterArgs toInvoke in _afterSendEnteredEvent.GetInvocationList())
                    try
                    {
                        _afterSendEnteredEvent.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSendExitedEvent()
        {
            if (!HookedList.Contains("SendExitedEvent"))
            {
                HookedList.Add("SendExitedEvent");
                On.TriggerEnterEventSubscribe.SendExitedEvent += SendExitedEvent;
            }
        }

        internal static event Delegates.SendExitedEvent_BeforeArgs _beforeSendExitedEvent;
        internal static event Delegates.SendExitedEvent_AfterArgs _afterSendExitedEvent;

        private static void SendExitedEvent(On.TriggerEnterEventSubscribe.orig_SendExitedEvent orig,
            TriggerEnterEventSubscribe self, Collider2D collider, GameObject sender)
        {
            Delegates.Params_SendExitedEvent @params = new()
            {
                self = self, collider = collider, sender = sender
            };
            if (_beforeSendExitedEvent != null)
                foreach (Delegates.SendExitedEvent_BeforeArgs toInvoke in _beforeSendExitedEvent.GetInvocationList())
                    try
                    {
                        _beforeSendExitedEvent?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            collider = @params.collider;
            sender = @params.sender;
            orig(self, collider, sender);
            if (_afterSendExitedEvent != null)
                foreach (Delegates.SendExitedEvent_AfterArgs toInvoke in _afterSendExitedEvent.GetInvocationList())
                    try
                    {
                        _afterSendExitedEvent.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSendStayedEvent()
        {
            if (!HookedList.Contains("SendStayedEvent"))
            {
                HookedList.Add("SendStayedEvent");
                On.TriggerEnterEventSubscribe.SendStayedEvent += SendStayedEvent;
            }
        }

        internal static event Delegates.SendStayedEvent_BeforeArgs _beforeSendStayedEvent;
        internal static event Delegates.SendStayedEvent_AfterArgs _afterSendStayedEvent;

        private static void SendStayedEvent(On.TriggerEnterEventSubscribe.orig_SendStayedEvent orig,
            TriggerEnterEventSubscribe self, Collider2D collider, GameObject sender)
        {
            Delegates.Params_SendStayedEvent @params = new()
            {
                self = self, collider = collider, sender = sender
            };
            if (_beforeSendStayedEvent != null)
                foreach (Delegates.SendStayedEvent_BeforeArgs toInvoke in _beforeSendStayedEvent.GetInvocationList())
                    try
                    {
                        _beforeSendStayedEvent?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            collider = @params.collider;
            sender = @params.sender;
            orig(self, collider, sender);
            if (_afterSendStayedEvent != null)
                foreach (Delegates.SendStayedEvent_AfterArgs toInvoke in _afterSendStayedEvent.GetInvocationList())
                    try
                    {
                        _afterSendStayedEvent.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void OnEnter_AfterArgs(Params_OnEnter args);

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_WithArgs(Action<TriggerEnterEventSubscribe> orig, TriggerEnterEventSubscribe self);

        public delegate void OnExit_AfterArgs(Params_OnExit args);

        public delegate void OnExit_BeforeArgs(Params_OnExit args);

        public delegate void OnExit_WithArgs(Action<TriggerEnterEventSubscribe> orig, TriggerEnterEventSubscribe self);

        public delegate void Reset_AfterArgs(Params_Reset args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_WithArgs(Action<TriggerEnterEventSubscribe> orig, TriggerEnterEventSubscribe self);

        public delegate void SendEnteredEvent_AfterArgs(Params_SendEnteredEvent args);

        public delegate void SendEnteredEvent_BeforeArgs(Params_SendEnteredEvent args);

        public delegate void SendEnteredEvent_WithArgs(Action<TriggerEnterEventSubscribe, Collider2D, GameObject> orig,
            TriggerEnterEventSubscribe self, Collider2D collider, GameObject sender);

        public delegate void SendExitedEvent_AfterArgs(Params_SendExitedEvent args);

        public delegate void SendExitedEvent_BeforeArgs(Params_SendExitedEvent args);

        public delegate void SendExitedEvent_WithArgs(Action<TriggerEnterEventSubscribe, Collider2D, GameObject> orig,
            TriggerEnterEventSubscribe self, Collider2D collider, GameObject sender);

        public delegate void SendStayedEvent_AfterArgs(Params_SendStayedEvent args);

        public delegate void SendStayedEvent_BeforeArgs(Params_SendStayedEvent args);

        public delegate void SendStayedEvent_WithArgs(Action<TriggerEnterEventSubscribe, Collider2D, GameObject> orig,
            TriggerEnterEventSubscribe self, Collider2D collider, GameObject sender);

        public sealed class Params_Reset
        {
            public TriggerEnterEventSubscribe self;
        }

        public sealed class Params_OnEnter
        {
            public TriggerEnterEventSubscribe self;
        }

        public sealed class Params_OnExit
        {
            public TriggerEnterEventSubscribe self;
        }

        public sealed class Params_SendEnteredEvent
        {
            public Collider2D collider;
            public TriggerEnterEventSubscribe self;
            public GameObject sender;
        }

        public sealed class Params_SendExitedEvent
        {
            public Collider2D collider;
            public TriggerEnterEventSubscribe self;
            public GameObject sender;
        }

        public sealed class Params_SendStayedEvent
        {
            public Collider2D collider;
            public TriggerEnterEventSubscribe self;
            public GameObject sender;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.OnExit_BeforeArgs OnExit
        {
            add
            {
                HookHandler._beforeOnExit += value;
                HookHandler.HookOnExit();
            }
            remove => HookHandler._beforeOnExit -= value;
        }

        public static event Delegates.SendEnteredEvent_BeforeArgs SendEnteredEvent
        {
            add
            {
                HookHandler._beforeSendEnteredEvent += value;
                HookHandler.HookSendEnteredEvent();
            }
            remove => HookHandler._beforeSendEnteredEvent -= value;
        }

        public static event Delegates.SendExitedEvent_BeforeArgs SendExitedEvent
        {
            add
            {
                HookHandler._beforeSendExitedEvent += value;
                HookHandler.HookSendExitedEvent();
            }
            remove => HookHandler._beforeSendExitedEvent -= value;
        }

        public static event Delegates.SendStayedEvent_BeforeArgs SendStayedEvent
        {
            add
            {
                HookHandler._beforeSendStayedEvent += value;
                HookHandler.HookSendStayedEvent();
            }
            remove => HookHandler._beforeSendStayedEvent -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_AfterArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_AfterArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.OnExit_AfterArgs OnExit
        {
            add
            {
                HookHandler._afterOnExit += value;
                HookHandler.HookOnExit();
            }
            remove => HookHandler._afterOnExit -= value;
        }

        public static event Delegates.SendEnteredEvent_AfterArgs SendEnteredEvent
        {
            add
            {
                HookHandler._afterSendEnteredEvent += value;
                HookHandler.HookSendEnteredEvent();
            }
            remove => HookHandler._afterSendEnteredEvent -= value;
        }

        public static event Delegates.SendExitedEvent_AfterArgs SendExitedEvent
        {
            add
            {
                HookHandler._afterSendExitedEvent += value;
                HookHandler.HookSendExitedEvent();
            }
            remove => HookHandler._afterSendExitedEvent -= value;
        }

        public static event Delegates.SendStayedEvent_AfterArgs SendStayedEvent
        {
            add
            {
                HookHandler._afterSendStayedEvent += value;
                HookHandler.HookSendStayedEvent();
            }
            remove => HookHandler._afterSendStayedEvent -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.TriggerEnterEventSubscribe.hook_Reset Reset
        {
            add => On.TriggerEnterEventSubscribe.Reset += value;
            remove => On.TriggerEnterEventSubscribe.Reset -= value;
        }

        public static event On.TriggerEnterEventSubscribe.hook_OnEnter OnEnter
        {
            add => On.TriggerEnterEventSubscribe.OnEnter += value;
            remove => On.TriggerEnterEventSubscribe.OnEnter -= value;
        }

        public static event On.TriggerEnterEventSubscribe.hook_OnExit OnExit
        {
            add => On.TriggerEnterEventSubscribe.OnExit += value;
            remove => On.TriggerEnterEventSubscribe.OnExit -= value;
        }

        public static event On.TriggerEnterEventSubscribe.hook_SendEnteredEvent SendEnteredEvent
        {
            add => On.TriggerEnterEventSubscribe.SendEnteredEvent += value;
            remove => On.TriggerEnterEventSubscribe.SendEnteredEvent -= value;
        }

        public static event On.TriggerEnterEventSubscribe.hook_SendExitedEvent SendExitedEvent
        {
            add => On.TriggerEnterEventSubscribe.SendExitedEvent += value;
            remove => On.TriggerEnterEventSubscribe.SendExitedEvent -= value;
        }

        public static event On.TriggerEnterEventSubscribe.hook_SendStayedEvent SendStayedEvent
        {
            add => On.TriggerEnterEventSubscribe.SendStayedEvent += value;
            remove => On.TriggerEnterEventSubscribe.SendStayedEvent -= value;
        }
    }
}