using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GameManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGameManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_TimeSlowed()
        {
            if (!HookedList.Contains("get_TimeSlowed"))
            {
                HookedList.Add("get_TimeSlowed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_TimeSlowed"), get_TimeSlowed);
            }
        }

        internal static event Delegates.get_TimeSlowed_BeforeArgs _beforeget_TimeSlowed;
        internal static event Delegates.get_TimeSlowed_AfterArgs _afterget_TimeSlowed;

        private static bool get_TimeSlowed(Func<GameManager, bool> orig, GameManager self)
        {
            Delegates.Params_get_TimeSlowed @params = new()
            {
                self = self
            };
            if (_beforeget_TimeSlowed != null)
                foreach (Delegates.get_TimeSlowed_BeforeArgs toInvoke in _beforeget_TimeSlowed.GetInvocationList())
                    try
                    {
                        _beforeget_TimeSlowed?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_TimeSlowed != null)
                foreach (Delegates.get_TimeSlowed_AfterArgs toInvoke in _afterget_TimeSlowed.GetInvocationList())
                    try
                    {
                        retVal = _afterget_TimeSlowed.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_inputHandler()
        {
            if (!HookedList.Contains("get_inputHandler"))
            {
                HookedList.Add("get_inputHandler");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_inputHandler"), get_inputHandler);
            }
        }

        internal static event Delegates.get_inputHandler_BeforeArgs _beforeget_inputHandler;
        internal static event Delegates.get_inputHandler_AfterArgs _afterget_inputHandler;

        private static InputHandler get_inputHandler(Func<GameManager, InputHandler> orig, GameManager self)
        {
            Delegates.Params_get_inputHandler @params = new()
            {
                self = self
            };
            if (_beforeget_inputHandler != null)
                foreach (Delegates.get_inputHandler_BeforeArgs toInvoke in _beforeget_inputHandler.GetInvocationList())
                    try
                    {
                        _beforeget_inputHandler?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_inputHandler != null)
                foreach (Delegates.get_inputHandler_AfterArgs toInvoke in _afterget_inputHandler.GetInvocationList())
                    try
                    {
                        retVal = _afterget_inputHandler.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_inputHandler()
        {
            if (!HookedList.Contains("set_inputHandler"))
            {
                HookedList.Add("set_inputHandler");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_inputHandler"), set_inputHandler);
            }
        }

        internal static event Delegates.set_inputHandler_BeforeArgs _beforeset_inputHandler;
        internal static event Delegates.set_inputHandler_AfterArgs _afterset_inputHandler;

        private static void set_inputHandler(Action<GameManager, InputHandler> orig, GameManager self,
            InputHandler value)
        {
            Delegates.Params_set_inputHandler @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_inputHandler != null)
                foreach (Delegates.set_inputHandler_BeforeArgs toInvoke in _beforeset_inputHandler.GetInvocationList())
                    try
                    {
                        _beforeset_inputHandler?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_inputHandler != null)
                foreach (Delegates.set_inputHandler_AfterArgs toInvoke in _afterset_inputHandler.GetInvocationList())
                    try
                    {
                        _afterset_inputHandler.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_achievementHandler()
        {
            if (!HookedList.Contains("get_achievementHandler"))
            {
                HookedList.Add("get_achievementHandler");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_achievementHandler"),
                    get_achievementHandler);
            }
        }

        internal static event Delegates.get_achievementHandler_BeforeArgs _beforeget_achievementHandler;
        internal static event Delegates.get_achievementHandler_AfterArgs _afterget_achievementHandler;

        private static AchievementHandler get_achievementHandler(Func<GameManager, AchievementHandler> orig,
            GameManager self)
        {
            Delegates.Params_get_achievementHandler @params = new()
            {
                self = self
            };
            if (_beforeget_achievementHandler != null)
                foreach (Delegates.get_achievementHandler_BeforeArgs toInvoke in _beforeget_achievementHandler
                             .GetInvocationList())
                    try
                    {
                        _beforeget_achievementHandler?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_achievementHandler != null)
                foreach (Delegates.get_achievementHandler_AfterArgs toInvoke in _afterget_achievementHandler
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_achievementHandler.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_achievementHandler()
        {
            if (!HookedList.Contains("set_achievementHandler"))
            {
                HookedList.Add("set_achievementHandler");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_achievementHandler"),
                    set_achievementHandler);
            }
        }

        internal static event Delegates.set_achievementHandler_BeforeArgs _beforeset_achievementHandler;
        internal static event Delegates.set_achievementHandler_AfterArgs _afterset_achievementHandler;

        private static void set_achievementHandler(Action<GameManager, AchievementHandler> orig, GameManager self,
            AchievementHandler value)
        {
            Delegates.Params_set_achievementHandler @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_achievementHandler != null)
                foreach (Delegates.set_achievementHandler_BeforeArgs toInvoke in _beforeset_achievementHandler
                             .GetInvocationList())
                    try
                    {
                        _beforeset_achievementHandler?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_achievementHandler != null)
                foreach (Delegates.set_achievementHandler_AfterArgs toInvoke in _afterset_achievementHandler
                             .GetInvocationList())
                    try
                    {
                        _afterset_achievementHandler.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_AudioManager()
        {
            if (!HookedList.Contains("get_AudioManager"))
            {
                HookedList.Add("get_AudioManager");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_AudioManager"), get_AudioManager);
            }
        }

        internal static event Delegates.get_AudioManager_BeforeArgs _beforeget_AudioManager;
        internal static event Delegates.get_AudioManager_AfterArgs _afterget_AudioManager;

        private static AudioManager get_AudioManager(Func<GameManager, AudioManager> orig, GameManager self)
        {
            Delegates.Params_get_AudioManager @params = new()
            {
                self = self
            };
            if (_beforeget_AudioManager != null)
                foreach (Delegates.get_AudioManager_BeforeArgs toInvoke in _beforeget_AudioManager.GetInvocationList())
                    try
                    {
                        _beforeget_AudioManager?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AudioManager != null)
                foreach (Delegates.get_AudioManager_AfterArgs toInvoke in _afterget_AudioManager.GetInvocationList())
                    try
                    {
                        retVal = _afterget_AudioManager.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_cameraCtrl()
        {
            if (!HookedList.Contains("get_cameraCtrl"))
            {
                HookedList.Add("get_cameraCtrl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_cameraCtrl"), get_cameraCtrl);
            }
        }

        internal static event Delegates.get_cameraCtrl_BeforeArgs _beforeget_cameraCtrl;
        internal static event Delegates.get_cameraCtrl_AfterArgs _afterget_cameraCtrl;

        private static CameraController get_cameraCtrl(Func<GameManager, CameraController> orig, GameManager self)
        {
            Delegates.Params_get_cameraCtrl @params = new()
            {
                self = self
            };
            if (_beforeget_cameraCtrl != null)
                foreach (Delegates.get_cameraCtrl_BeforeArgs toInvoke in _beforeget_cameraCtrl.GetInvocationList())
                    try
                    {
                        _beforeget_cameraCtrl?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_cameraCtrl != null)
                foreach (Delegates.get_cameraCtrl_AfterArgs toInvoke in _afterget_cameraCtrl.GetInvocationList())
                    try
                    {
                        retVal = _afterget_cameraCtrl.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_cameraCtrl()
        {
            if (!HookedList.Contains("set_cameraCtrl"))
            {
                HookedList.Add("set_cameraCtrl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_cameraCtrl"), set_cameraCtrl);
            }
        }

        internal static event Delegates.set_cameraCtrl_BeforeArgs _beforeset_cameraCtrl;
        internal static event Delegates.set_cameraCtrl_AfterArgs _afterset_cameraCtrl;

        private static void set_cameraCtrl(Action<GameManager, CameraController> orig, GameManager self,
            CameraController value)
        {
            Delegates.Params_set_cameraCtrl @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_cameraCtrl != null)
                foreach (Delegates.set_cameraCtrl_BeforeArgs toInvoke in _beforeset_cameraCtrl.GetInvocationList())
                    try
                    {
                        _beforeset_cameraCtrl?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_cameraCtrl != null)
                foreach (Delegates.set_cameraCtrl_AfterArgs toInvoke in _afterset_cameraCtrl.GetInvocationList())
                    try
                    {
                        _afterset_cameraCtrl.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_hero_ctrl()
        {
            if (!HookedList.Contains("get_hero_ctrl"))
            {
                HookedList.Add("get_hero_ctrl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_hero_ctrl"), get_hero_ctrl);
            }
        }

        internal static event Delegates.get_hero_ctrl_BeforeArgs _beforeget_hero_ctrl;
        internal static event Delegates.get_hero_ctrl_AfterArgs _afterget_hero_ctrl;

        private static HeroController get_hero_ctrl(Func<GameManager, HeroController> orig, GameManager self)
        {
            Delegates.Params_get_hero_ctrl @params = new()
            {
                self = self
            };
            if (_beforeget_hero_ctrl != null)
                foreach (Delegates.get_hero_ctrl_BeforeArgs toInvoke in _beforeget_hero_ctrl.GetInvocationList())
                    try
                    {
                        _beforeget_hero_ctrl?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_hero_ctrl != null)
                foreach (Delegates.get_hero_ctrl_AfterArgs toInvoke in _afterget_hero_ctrl.GetInvocationList())
                    try
                    {
                        retVal = _afterget_hero_ctrl.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_hero_ctrl()
        {
            if (!HookedList.Contains("set_hero_ctrl"))
            {
                HookedList.Add("set_hero_ctrl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_hero_ctrl"), set_hero_ctrl);
            }
        }

        internal static event Delegates.set_hero_ctrl_BeforeArgs _beforeset_hero_ctrl;
        internal static event Delegates.set_hero_ctrl_AfterArgs _afterset_hero_ctrl;

        private static void set_hero_ctrl(Action<GameManager, HeroController> orig, GameManager self,
            HeroController value)
        {
            Delegates.Params_set_hero_ctrl @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_hero_ctrl != null)
                foreach (Delegates.set_hero_ctrl_BeforeArgs toInvoke in _beforeset_hero_ctrl.GetInvocationList())
                    try
                    {
                        _beforeset_hero_ctrl?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_hero_ctrl != null)
                foreach (Delegates.set_hero_ctrl_AfterArgs toInvoke in _afterset_hero_ctrl.GetInvocationList())
                    try
                    {
                        _afterset_hero_ctrl.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_heroLight()
        {
            if (!HookedList.Contains("get_heroLight"))
            {
                HookedList.Add("get_heroLight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_heroLight"), get_heroLight);
            }
        }

        internal static event Delegates.get_heroLight_BeforeArgs _beforeget_heroLight;
        internal static event Delegates.get_heroLight_AfterArgs _afterget_heroLight;

        private static SpriteRenderer get_heroLight(Func<GameManager, SpriteRenderer> orig, GameManager self)
        {
            Delegates.Params_get_heroLight @params = new()
            {
                self = self
            };
            if (_beforeget_heroLight != null)
                foreach (Delegates.get_heroLight_BeforeArgs toInvoke in _beforeget_heroLight.GetInvocationList())
                    try
                    {
                        _beforeget_heroLight?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_heroLight != null)
                foreach (Delegates.get_heroLight_AfterArgs toInvoke in _afterget_heroLight.GetInvocationList())
                    try
                    {
                        retVal = _afterget_heroLight.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_heroLight()
        {
            if (!HookedList.Contains("set_heroLight"))
            {
                HookedList.Add("set_heroLight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_heroLight"), set_heroLight);
            }
        }

        internal static event Delegates.set_heroLight_BeforeArgs _beforeset_heroLight;
        internal static event Delegates.set_heroLight_AfterArgs _afterset_heroLight;

        private static void set_heroLight(Action<GameManager, SpriteRenderer> orig, GameManager self,
            SpriteRenderer value)
        {
            Delegates.Params_set_heroLight @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_heroLight != null)
                foreach (Delegates.set_heroLight_BeforeArgs toInvoke in _beforeset_heroLight.GetInvocationList())
                    try
                    {
                        _beforeset_heroLight?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_heroLight != null)
                foreach (Delegates.set_heroLight_AfterArgs toInvoke in _afterset_heroLight.GetInvocationList())
                    try
                    {
                        _afterset_heroLight.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_sm()
        {
            if (!HookedList.Contains("get_sm"))
            {
                HookedList.Add("get_sm");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_sm"), get_sm);
            }
        }

        internal static event Delegates.get_sm_BeforeArgs _beforeget_sm;
        internal static event Delegates.get_sm_AfterArgs _afterget_sm;

        private static SceneManager get_sm(Func<GameManager, SceneManager> orig, GameManager self)
        {
            Delegates.Params_get_sm @params = new()
            {
                self = self
            };
            if (_beforeget_sm != null)
                foreach (Delegates.get_sm_BeforeArgs toInvoke in _beforeget_sm.GetInvocationList())
                    try
                    {
                        _beforeget_sm?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_sm != null)
                foreach (Delegates.get_sm_AfterArgs toInvoke in _afterget_sm.GetInvocationList())
                    try
                    {
                        retVal = _afterget_sm.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_sm()
        {
            if (!HookedList.Contains("set_sm"))
            {
                HookedList.Add("set_sm");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_sm"), set_sm);
            }
        }

        internal static event Delegates.set_sm_BeforeArgs _beforeset_sm;
        internal static event Delegates.set_sm_AfterArgs _afterset_sm;

        private static void set_sm(Action<GameManager, SceneManager> orig, GameManager self, SceneManager value)
        {
            Delegates.Params_set_sm @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_sm != null)
                foreach (Delegates.set_sm_BeforeArgs toInvoke in _beforeset_sm.GetInvocationList())
                    try
                    {
                        _beforeset_sm?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_sm != null)
                foreach (Delegates.set_sm_AfterArgs toInvoke in _afterset_sm.GetInvocationList())
                    try
                    {
                        _afterset_sm.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_ui()
        {
            if (!HookedList.Contains("get_ui"))
            {
                HookedList.Add("get_ui");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_ui"), get_ui);
            }
        }

        internal static event Delegates.get_ui_BeforeArgs _beforeget_ui;
        internal static event Delegates.get_ui_AfterArgs _afterget_ui;

        private static UIManager get_ui(Func<GameManager, UIManager> orig, GameManager self)
        {
            Delegates.Params_get_ui @params = new()
            {
                self = self
            };
            if (_beforeget_ui != null)
                foreach (Delegates.get_ui_BeforeArgs toInvoke in _beforeget_ui.GetInvocationList())
                    try
                    {
                        _beforeget_ui?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ui != null)
                foreach (Delegates.get_ui_AfterArgs toInvoke in _afterget_ui.GetInvocationList())
                    try
                    {
                        retVal = _afterget_ui.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_ui()
        {
            if (!HookedList.Contains("set_ui"))
            {
                HookedList.Add("set_ui");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_ui"), set_ui);
            }
        }

        internal static event Delegates.set_ui_BeforeArgs _beforeset_ui;
        internal static event Delegates.set_ui_AfterArgs _afterset_ui;

        private static void set_ui(Action<GameManager, UIManager> orig, GameManager self, UIManager value)
        {
            Delegates.Params_set_ui @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_ui != null)
                foreach (Delegates.set_ui_BeforeArgs toInvoke in _beforeset_ui.GetInvocationList())
                    try
                    {
                        _beforeset_ui?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ui != null)
                foreach (Delegates.set_ui_AfterArgs toInvoke in _afterset_ui.GetInvocationList())
                    try
                    {
                        _afterset_ui.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_tilemap()
        {
            if (!HookedList.Contains("get_tilemap"))
            {
                HookedList.Add("get_tilemap");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_tilemap"), get_tilemap);
            }
        }

        internal static event Delegates.get_tilemap_BeforeArgs _beforeget_tilemap;
        internal static event Delegates.get_tilemap_AfterArgs _afterget_tilemap;

        private static tk2dTileMap get_tilemap(Func<GameManager, tk2dTileMap> orig, GameManager self)
        {
            Delegates.Params_get_tilemap @params = new()
            {
                self = self
            };
            if (_beforeget_tilemap != null)
                foreach (Delegates.get_tilemap_BeforeArgs toInvoke in _beforeget_tilemap.GetInvocationList())
                    try
                    {
                        _beforeget_tilemap?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_tilemap != null)
                foreach (Delegates.get_tilemap_AfterArgs toInvoke in _afterget_tilemap.GetInvocationList())
                    try
                    {
                        retVal = _afterget_tilemap.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_tilemap()
        {
            if (!HookedList.Contains("set_tilemap"))
            {
                HookedList.Add("set_tilemap");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_tilemap"), set_tilemap);
            }
        }

        internal static event Delegates.set_tilemap_BeforeArgs _beforeset_tilemap;
        internal static event Delegates.set_tilemap_AfterArgs _afterset_tilemap;

        private static void set_tilemap(Action<GameManager, tk2dTileMap> orig, GameManager self, tk2dTileMap value)
        {
            Delegates.Params_set_tilemap @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_tilemap != null)
                foreach (Delegates.set_tilemap_BeforeArgs toInvoke in _beforeset_tilemap.GetInvocationList())
                    try
                    {
                        _beforeset_tilemap?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_tilemap != null)
                foreach (Delegates.set_tilemap_AfterArgs toInvoke in _afterset_tilemap.GetInvocationList())
                    try
                    {
                        _afterset_tilemap.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_soulOrb_fsm()
        {
            if (!HookedList.Contains("get_soulOrb_fsm"))
            {
                HookedList.Add("get_soulOrb_fsm");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_soulOrb_fsm"), get_soulOrb_fsm);
            }
        }

        internal static event Delegates.get_soulOrb_fsm_BeforeArgs _beforeget_soulOrb_fsm;
        internal static event Delegates.get_soulOrb_fsm_AfterArgs _afterget_soulOrb_fsm;

        private static PlayMakerFSM get_soulOrb_fsm(Func<GameManager, PlayMakerFSM> orig, GameManager self)
        {
            Delegates.Params_get_soulOrb_fsm @params = new()
            {
                self = self
            };
            if (_beforeget_soulOrb_fsm != null)
                foreach (Delegates.get_soulOrb_fsm_BeforeArgs toInvoke in _beforeget_soulOrb_fsm.GetInvocationList())
                    try
                    {
                        _beforeget_soulOrb_fsm?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_soulOrb_fsm != null)
                foreach (Delegates.get_soulOrb_fsm_AfterArgs toInvoke in _afterget_soulOrb_fsm.GetInvocationList())
                    try
                    {
                        retVal = _afterget_soulOrb_fsm.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_soulOrb_fsm()
        {
            if (!HookedList.Contains("set_soulOrb_fsm"))
            {
                HookedList.Add("set_soulOrb_fsm");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_soulOrb_fsm"), set_soulOrb_fsm);
            }
        }

        internal static event Delegates.set_soulOrb_fsm_BeforeArgs _beforeset_soulOrb_fsm;
        internal static event Delegates.set_soulOrb_fsm_AfterArgs _afterset_soulOrb_fsm;

        private static void set_soulOrb_fsm(Action<GameManager, PlayMakerFSM> orig, GameManager self,
            PlayMakerFSM value)
        {
            Delegates.Params_set_soulOrb_fsm @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_soulOrb_fsm != null)
                foreach (Delegates.set_soulOrb_fsm_BeforeArgs toInvoke in _beforeset_soulOrb_fsm.GetInvocationList())
                    try
                    {
                        _beforeset_soulOrb_fsm?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_soulOrb_fsm != null)
                foreach (Delegates.set_soulOrb_fsm_AfterArgs toInvoke in _afterset_soulOrb_fsm.GetInvocationList())
                    try
                    {
                        _afterset_soulOrb_fsm.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_soulVessel_fsm()
        {
            if (!HookedList.Contains("get_soulVessel_fsm"))
            {
                HookedList.Add("get_soulVessel_fsm");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_soulVessel_fsm"), get_soulVessel_fsm);
            }
        }

        internal static event Delegates.get_soulVessel_fsm_BeforeArgs _beforeget_soulVessel_fsm;
        internal static event Delegates.get_soulVessel_fsm_AfterArgs _afterget_soulVessel_fsm;

        private static PlayMakerFSM get_soulVessel_fsm(Func<GameManager, PlayMakerFSM> orig, GameManager self)
        {
            Delegates.Params_get_soulVessel_fsm @params = new()
            {
                self = self
            };
            if (_beforeget_soulVessel_fsm != null)
                foreach (Delegates.get_soulVessel_fsm_BeforeArgs toInvoke in
                         _beforeget_soulVessel_fsm.GetInvocationList())
                    try
                    {
                        _beforeget_soulVessel_fsm?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_soulVessel_fsm != null)
                foreach (Delegates.get_soulVessel_fsm_AfterArgs toInvoke in
                         _afterget_soulVessel_fsm.GetInvocationList())
                    try
                    {
                        retVal = _afterget_soulVessel_fsm.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_soulVessel_fsm()
        {
            if (!HookedList.Contains("set_soulVessel_fsm"))
            {
                HookedList.Add("set_soulVessel_fsm");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_soulVessel_fsm"), set_soulVessel_fsm);
            }
        }

        internal static event Delegates.set_soulVessel_fsm_BeforeArgs _beforeset_soulVessel_fsm;
        internal static event Delegates.set_soulVessel_fsm_AfterArgs _afterset_soulVessel_fsm;

        private static void set_soulVessel_fsm(Action<GameManager, PlayMakerFSM> orig, GameManager self,
            PlayMakerFSM value)
        {
            Delegates.Params_set_soulVessel_fsm @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_soulVessel_fsm != null)
                foreach (Delegates.set_soulVessel_fsm_BeforeArgs toInvoke in
                         _beforeset_soulVessel_fsm.GetInvocationList())
                    try
                    {
                        _beforeset_soulVessel_fsm?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_soulVessel_fsm != null)
                foreach (Delegates.set_soulVessel_fsm_AfterArgs toInvoke in
                         _afterset_soulVessel_fsm.GetInvocationList())
                    try
                    {
                        _afterset_soulVessel_fsm.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_PlayTime()
        {
            if (!HookedList.Contains("get_PlayTime"))
            {
                HookedList.Add("get_PlayTime");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_PlayTime"), get_PlayTime);
            }
        }

        internal static event Delegates.get_PlayTime_BeforeArgs _beforeget_PlayTime;
        internal static event Delegates.get_PlayTime_AfterArgs _afterget_PlayTime;

        private static float get_PlayTime(Func<GameManager, float> orig, GameManager self)
        {
            Delegates.Params_get_PlayTime @params = new()
            {
                self = self
            };
            if (_beforeget_PlayTime != null)
                foreach (Delegates.get_PlayTime_BeforeArgs toInvoke in _beforeget_PlayTime.GetInvocationList())
                    try
                    {
                        _beforeget_PlayTime?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_PlayTime != null)
                foreach (Delegates.get_PlayTime_AfterArgs toInvoke in _afterget_PlayTime.GetInvocationList())
                    try
                    {
                        retVal = _afterget_PlayTime.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_RespawningHero()
        {
            if (!HookedList.Contains("get_RespawningHero"))
            {
                HookedList.Add("get_RespawningHero");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_RespawningHero"), get_RespawningHero);
            }
        }

        internal static event Delegates.get_RespawningHero_BeforeArgs _beforeget_RespawningHero;
        internal static event Delegates.get_RespawningHero_AfterArgs _afterget_RespawningHero;

        private static bool get_RespawningHero(Func<GameManager, bool> orig, GameManager self)
        {
            Delegates.Params_get_RespawningHero @params = new()
            {
                self = self
            };
            if (_beforeget_RespawningHero != null)
                foreach (Delegates.get_RespawningHero_BeforeArgs toInvoke in
                         _beforeget_RespawningHero.GetInvocationList())
                    try
                    {
                        _beforeget_RespawningHero?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_RespawningHero != null)
                foreach (Delegates.get_RespawningHero_AfterArgs toInvoke in
                         _afterget_RespawningHero.GetInvocationList())
                    try
                    {
                        retVal = _afterget_RespawningHero.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_RespawningHero()
        {
            if (!HookedList.Contains("set_RespawningHero"))
            {
                HookedList.Add("set_RespawningHero");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_RespawningHero"), set_RespawningHero);
            }
        }

        internal static event Delegates.set_RespawningHero_BeforeArgs _beforeset_RespawningHero;
        internal static event Delegates.set_RespawningHero_AfterArgs _afterset_RespawningHero;

        private static void set_RespawningHero(Action<GameManager, bool> orig, GameManager self, bool value)
        {
            Delegates.Params_set_RespawningHero @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_RespawningHero != null)
                foreach (Delegates.set_RespawningHero_BeforeArgs toInvoke in
                         _beforeset_RespawningHero.GetInvocationList())
                    try
                    {
                        _beforeset_RespawningHero?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_RespawningHero != null)
                foreach (Delegates.set_RespawningHero_AfterArgs toInvoke in
                         _afterset_RespawningHero.GetInvocationList())
                    try
                    {
                        _afterset_RespawningHero.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_IsInSceneTransition()
        {
            if (!HookedList.Contains("get_IsInSceneTransition"))
            {
                HookedList.Add("get_IsInSceneTransition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_IsInSceneTransition"),
                    get_IsInSceneTransition);
            }
        }

        internal static event Delegates.get_IsInSceneTransition_BeforeArgs _beforeget_IsInSceneTransition;
        internal static event Delegates.get_IsInSceneTransition_AfterArgs _afterget_IsInSceneTransition;

        private static bool get_IsInSceneTransition(Func<GameManager, bool> orig, GameManager self)
        {
            Delegates.Params_get_IsInSceneTransition @params = new()
            {
                self = self
            };
            if (_beforeget_IsInSceneTransition != null)
                foreach (Delegates.get_IsInSceneTransition_BeforeArgs toInvoke in _beforeget_IsInSceneTransition
                             .GetInvocationList())
                    try
                    {
                        _beforeget_IsInSceneTransition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsInSceneTransition != null)
                foreach (Delegates.get_IsInSceneTransition_AfterArgs toInvoke in _afterget_IsInSceneTransition
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_IsInSceneTransition.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_IsInSceneTransition()
        {
            if (!HookedList.Contains("set_IsInSceneTransition"))
            {
                HookedList.Add("set_IsInSceneTransition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_IsInSceneTransition"),
                    set_IsInSceneTransition);
            }
        }

        internal static event Delegates.set_IsInSceneTransition_BeforeArgs _beforeset_IsInSceneTransition;
        internal static event Delegates.set_IsInSceneTransition_AfterArgs _afterset_IsInSceneTransition;

        private static void set_IsInSceneTransition(Action<GameManager, bool> orig, GameManager self, bool value)
        {
            Delegates.Params_set_IsInSceneTransition @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_IsInSceneTransition != null)
                foreach (Delegates.set_IsInSceneTransition_BeforeArgs toInvoke in _beforeset_IsInSceneTransition
                             .GetInvocationList())
                    try
                    {
                        _beforeset_IsInSceneTransition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_IsInSceneTransition != null)
                foreach (Delegates.set_IsInSceneTransition_AfterArgs toInvoke in _afterset_IsInSceneTransition
                             .GetInvocationList())
                    try
                    {
                        _afterset_IsInSceneTransition.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_HasFinishedEnteringScene()
        {
            if (!HookedList.Contains("get_HasFinishedEnteringScene"))
            {
                HookedList.Add("get_HasFinishedEnteringScene");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_HasFinishedEnteringScene"),
                    get_HasFinishedEnteringScene);
            }
        }

        internal static event Delegates.get_HasFinishedEnteringScene_BeforeArgs _beforeget_HasFinishedEnteringScene;
        internal static event Delegates.get_HasFinishedEnteringScene_AfterArgs _afterget_HasFinishedEnteringScene;

        private static bool get_HasFinishedEnteringScene(Func<GameManager, bool> orig, GameManager self)
        {
            Delegates.Params_get_HasFinishedEnteringScene @params = new()
            {
                self = self
            };
            if (_beforeget_HasFinishedEnteringScene != null)
                foreach (Delegates.get_HasFinishedEnteringScene_BeforeArgs toInvoke in
                         _beforeget_HasFinishedEnteringScene.GetInvocationList())
                    try
                    {
                        _beforeget_HasFinishedEnteringScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_HasFinishedEnteringScene != null)
                foreach (Delegates.get_HasFinishedEnteringScene_AfterArgs toInvoke in _afterget_HasFinishedEnteringScene
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_HasFinishedEnteringScene.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_WorldInfo()
        {
            if (!HookedList.Contains("get_WorldInfo"))
            {
                HookedList.Add("get_WorldInfo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_WorldInfo"), get_WorldInfo);
            }
        }

        internal static event Delegates.get_WorldInfo_BeforeArgs _beforeget_WorldInfo;
        internal static event Delegates.get_WorldInfo_AfterArgs _afterget_WorldInfo;

        private static WorldInfo get_WorldInfo(Func<GameManager, WorldInfo> orig, GameManager self)
        {
            Delegates.Params_get_WorldInfo @params = new()
            {
                self = self
            };
            if (_beforeget_WorldInfo != null)
                foreach (Delegates.get_WorldInfo_BeforeArgs toInvoke in _beforeget_WorldInfo.GetInvocationList())
                    try
                    {
                        _beforeget_WorldInfo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_WorldInfo != null)
                foreach (Delegates.get_WorldInfo_AfterArgs toInvoke in _afterget_WorldInfo.GetInvocationList())
                    try
                    {
                        retVal = _afterget_WorldInfo.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_IsLoadingSceneTransition()
        {
            if (!HookedList.Contains("get_IsLoadingSceneTransition"))
            {
                HookedList.Add("get_IsLoadingSceneTransition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_IsLoadingSceneTransition"),
                    get_IsLoadingSceneTransition);
            }
        }

        internal static event Delegates.get_IsLoadingSceneTransition_BeforeArgs _beforeget_IsLoadingSceneTransition;
        internal static event Delegates.get_IsLoadingSceneTransition_AfterArgs _afterget_IsLoadingSceneTransition;

        private static bool get_IsLoadingSceneTransition(Func<GameManager, bool> orig, GameManager self)
        {
            Delegates.Params_get_IsLoadingSceneTransition @params = new()
            {
                self = self
            };
            if (_beforeget_IsLoadingSceneTransition != null)
                foreach (Delegates.get_IsLoadingSceneTransition_BeforeArgs toInvoke in
                         _beforeget_IsLoadingSceneTransition.GetInvocationList())
                    try
                    {
                        _beforeget_IsLoadingSceneTransition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsLoadingSceneTransition != null)
                foreach (Delegates.get_IsLoadingSceneTransition_AfterArgs toInvoke in _afterget_IsLoadingSceneTransition
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_IsLoadingSceneTransition.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_CurrentLoadDuration()
        {
            if (!HookedList.Contains("get_CurrentLoadDuration"))
            {
                HookedList.Add("get_CurrentLoadDuration");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_CurrentLoadDuration"),
                    get_CurrentLoadDuration);
            }
        }

        internal static event Delegates.get_CurrentLoadDuration_BeforeArgs _beforeget_CurrentLoadDuration;
        internal static event Delegates.get_CurrentLoadDuration_AfterArgs _afterget_CurrentLoadDuration;

        private static float get_CurrentLoadDuration(Func<GameManager, float> orig, GameManager self)
        {
            Delegates.Params_get_CurrentLoadDuration @params = new()
            {
                self = self
            };
            if (_beforeget_CurrentLoadDuration != null)
                foreach (Delegates.get_CurrentLoadDuration_BeforeArgs toInvoke in _beforeget_CurrentLoadDuration
                             .GetInvocationList())
                    try
                    {
                        _beforeget_CurrentLoadDuration?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_CurrentLoadDuration != null)
                foreach (Delegates.get_CurrentLoadDuration_AfterArgs toInvoke in _afterget_CurrentLoadDuration
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_CurrentLoadDuration.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_IsUsingCustomLoadAnimation()
        {
            if (!HookedList.Contains("get_IsUsingCustomLoadAnimation"))
            {
                HookedList.Add("get_IsUsingCustomLoadAnimation");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_IsUsingCustomLoadAnimation"),
                    get_IsUsingCustomLoadAnimation);
            }
        }

        internal static event Delegates.get_IsUsingCustomLoadAnimation_BeforeArgs _beforeget_IsUsingCustomLoadAnimation;
        internal static event Delegates.get_IsUsingCustomLoadAnimation_AfterArgs _afterget_IsUsingCustomLoadAnimation;

        private static bool get_IsUsingCustomLoadAnimation(Func<GameManager, bool> orig, GameManager self)
        {
            Delegates.Params_get_IsUsingCustomLoadAnimation @params = new()
            {
                self = self
            };
            if (_beforeget_IsUsingCustomLoadAnimation != null)
                foreach (Delegates.get_IsUsingCustomLoadAnimation_BeforeArgs toInvoke in
                         _beforeget_IsUsingCustomLoadAnimation.GetInvocationList())
                    try
                    {
                        _beforeget_IsUsingCustomLoadAnimation?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsUsingCustomLoadAnimation != null)
                foreach (Delegates.get_IsUsingCustomLoadAnimation_AfterArgs toInvoke in
                         _afterget_IsUsingCustomLoadAnimation.GetInvocationList())
                    try
                    {
                        retVal = _afterget_IsUsingCustomLoadAnimation.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_instance()
        {
            if (!HookedList.Contains("get_instance"))
            {
                HookedList.Add("get_instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_instance", false), get_instance);
            }
        }

        internal static event Delegates.get_instance_BeforeArgs _beforeget_instance;
        internal static event Delegates.get_instance_AfterArgs _afterget_instance;

        private static GameManager get_instance(Func<GameManager> orig)
        {
            if (_beforeget_instance != null)
                foreach (Delegates.get_instance_BeforeArgs toInvoke in _beforeget_instance.GetInvocationList())
                    try
                    {
                        _beforeget_instance?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_instance != null)
                foreach (Delegates.get_instance_AfterArgs toInvoke in _afterget_instance.GetInvocationList())
                    try
                    {
                        retVal = _afterget_instance.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_UnsafeInstance()
        {
            if (!HookedList.Contains("get_UnsafeInstance"))
            {
                HookedList.Add("get_UnsafeInstance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_UnsafeInstance", false),
                    get_UnsafeInstance);
            }
        }

        internal static event Delegates.get_UnsafeInstance_BeforeArgs _beforeget_UnsafeInstance;
        internal static event Delegates.get_UnsafeInstance_AfterArgs _afterget_UnsafeInstance;

        private static GameManager get_UnsafeInstance(Func<GameManager> orig)
        {
            if (_beforeget_UnsafeInstance != null)
                foreach (Delegates.get_UnsafeInstance_BeforeArgs toInvoke in
                         _beforeget_UnsafeInstance.GetInvocationList())
                    try
                    {
                        _beforeget_UnsafeInstance?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_UnsafeInstance != null)
                foreach (Delegates.get_UnsafeInstance_AfterArgs toInvoke in
                         _afterget_UnsafeInstance.GetInvocationList())
                    try
                    {
                        retVal = _afterget_UnsafeInstance.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.GameManager.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.GameManager.orig_Awake orig, GameManager self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.GameManager.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.GameManager.orig_Start orig, GameManager self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.GameManager.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.GameManager.orig_Update orig, GameManager self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateEngagement()
        {
            if (!HookedList.Contains("UpdateEngagement"))
            {
                HookedList.Add("UpdateEngagement");
                On.GameManager.UpdateEngagement += UpdateEngagement;
            }
        }

        internal static event Delegates.UpdateEngagement_BeforeArgs _beforeUpdateEngagement;
        internal static event Delegates.UpdateEngagement_AfterArgs _afterUpdateEngagement;

        private static void UpdateEngagement(On.GameManager.orig_UpdateEngagement orig, GameManager self)
        {
            Delegates.Params_UpdateEngagement @params = new()
            {
                self = self
            };
            if (_beforeUpdateEngagement != null)
                foreach (Delegates.UpdateEngagement_BeforeArgs toInvoke in _beforeUpdateEngagement.GetInvocationList())
                    try
                    {
                        _beforeUpdateEngagement?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateEngagement != null)
                foreach (Delegates.UpdateEngagement_AfterArgs toInvoke in _afterUpdateEngagement.GetInvocationList())
                    try
                    {
                        _afterUpdateEngagement.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLevelActivated()
        {
            if (!HookedList.Contains("LevelActivated"))
            {
                HookedList.Add("LevelActivated");
                On.GameManager.LevelActivated += LevelActivated;
            }
        }

        internal static event Delegates.LevelActivated_BeforeArgs _beforeLevelActivated;
        internal static event Delegates.LevelActivated_AfterArgs _afterLevelActivated;

        private static void LevelActivated(On.GameManager.orig_LevelActivated orig, GameManager self, Scene sceneFrom,
            Scene sceneTo)
        {
            Delegates.Params_LevelActivated @params = new()
            {
                self = self, sceneFrom = sceneFrom, sceneTo = sceneTo
            };
            if (_beforeLevelActivated != null)
                foreach (Delegates.LevelActivated_BeforeArgs toInvoke in _beforeLevelActivated.GetInvocationList())
                    try
                    {
                        _beforeLevelActivated?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            sceneFrom = @params.sceneFrom;
            sceneTo = @params.sceneTo;
            orig(self, sceneFrom, sceneTo);
            if (_afterLevelActivated != null)
                foreach (Delegates.LevelActivated_AfterArgs toInvoke in _afterLevelActivated.GetInvocationList())
                    try
                    {
                        _afterLevelActivated.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.GameManager.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(On.GameManager.orig_OnDisable orig, GameManager self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnApplicationQuit()
        {
            if (!HookedList.Contains("OnApplicationQuit"))
            {
                HookedList.Add("OnApplicationQuit");
                On.GameManager.OnApplicationQuit += OnApplicationQuit;
            }
        }

        internal static event Delegates.OnApplicationQuit_BeforeArgs _beforeOnApplicationQuit;
        internal static event Delegates.OnApplicationQuit_AfterArgs _afterOnApplicationQuit;

        private static void OnApplicationQuit(On.GameManager.orig_OnApplicationQuit orig, GameManager self)
        {
            Delegates.Params_OnApplicationQuit @params = new()
            {
                self = self
            };
            if (_beforeOnApplicationQuit != null)
                foreach (Delegates.OnApplicationQuit_BeforeArgs toInvoke in
                         _beforeOnApplicationQuit.GetInvocationList())
                    try
                    {
                        _beforeOnApplicationQuit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnApplicationQuit != null)
                foreach (Delegates.OnApplicationQuit_AfterArgs toInvoke in _afterOnApplicationQuit.GetInvocationList())
                    try
                    {
                        _afterOnApplicationQuit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookTransitionScene()
        {
            if (!HookedList.Contains("TransitionScene"))
            {
                HookedList.Add("TransitionScene");
                On.GameManager.TransitionScene += TransitionScene;
            }
        }

        internal static event Delegates.TransitionScene_BeforeArgs _beforeTransitionScene;

        private static IEnumerator TransitionScene(On.GameManager.orig_TransitionScene orig, GameManager self,
            TransitionPoint gate)
        {
            Delegates.Params_TransitionScene @params = new()
            {
                self = self, gate = gate
            };
            if (_beforeTransitionScene != null)
                foreach (Delegates.TransitionScene_BeforeArgs toInvoke in _beforeTransitionScene.GetInvocationList())
                    try
                    {
                        _beforeTransitionScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            gate = @params.gate;
            return orig(self, gate);
        }

        internal static void HookChangeToScene()
        {
            if (!HookedList.Contains("ChangeToScene"))
            {
                HookedList.Add("ChangeToScene");
                On.GameManager.ChangeToScene += ChangeToScene;
            }
        }

        internal static event Delegates.ChangeToScene_BeforeArgs _beforeChangeToScene;
        internal static event Delegates.ChangeToScene_AfterArgs _afterChangeToScene;

        private static void ChangeToScene(On.GameManager.orig_ChangeToScene orig, GameManager self, string targetScene,
            string entryGateName, float pauseBeforeEnter)
        {
            Delegates.Params_ChangeToScene @params = new()
            {
                self = self, targetScene = targetScene, entryGateName = entryGateName,
                pauseBeforeEnter = pauseBeforeEnter
            };
            if (_beforeChangeToScene != null)
                foreach (Delegates.ChangeToScene_BeforeArgs toInvoke in _beforeChangeToScene.GetInvocationList())
                    try
                    {
                        _beforeChangeToScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            targetScene = @params.targetScene;
            entryGateName = @params.entryGateName;
            pauseBeforeEnter = @params.pauseBeforeEnter;
            orig(self, targetScene, entryGateName, pauseBeforeEnter);
            if (_afterChangeToScene != null)
                foreach (Delegates.ChangeToScene_AfterArgs toInvoke in _afterChangeToScene.GetInvocationList())
                    try
                    {
                        _afterChangeToScene.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookWarpToDreamGate()
        {
            if (!HookedList.Contains("WarpToDreamGate"))
            {
                HookedList.Add("WarpToDreamGate");
                On.GameManager.WarpToDreamGate += WarpToDreamGate;
            }
        }

        internal static event Delegates.WarpToDreamGate_BeforeArgs _beforeWarpToDreamGate;
        internal static event Delegates.WarpToDreamGate_AfterArgs _afterWarpToDreamGate;

        private static void WarpToDreamGate(On.GameManager.orig_WarpToDreamGate orig, GameManager self)
        {
            Delegates.Params_WarpToDreamGate @params = new()
            {
                self = self
            };
            if (_beforeWarpToDreamGate != null)
                foreach (Delegates.WarpToDreamGate_BeforeArgs toInvoke in _beforeWarpToDreamGate.GetInvocationList())
                    try
                    {
                        _beforeWarpToDreamGate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterWarpToDreamGate != null)
                foreach (Delegates.WarpToDreamGate_AfterArgs toInvoke in _afterWarpToDreamGate.GetInvocationList())
                    try
                    {
                        _afterWarpToDreamGate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLeftScene()
        {
            if (!HookedList.Contains("LeftScene"))
            {
                HookedList.Add("LeftScene");
                On.GameManager.LeftScene += LeftScene;
            }
        }

        internal static event Delegates.LeftScene_BeforeArgs _beforeLeftScene;
        internal static event Delegates.LeftScene_AfterArgs _afterLeftScene;

        private static void LeftScene(On.GameManager.orig_LeftScene orig, GameManager self, bool doAdditiveLoad)
        {
            Delegates.Params_LeftScene @params = new()
            {
                self = self, doAdditiveLoad = doAdditiveLoad
            };
            if (_beforeLeftScene != null)
                foreach (Delegates.LeftScene_BeforeArgs toInvoke in _beforeLeftScene.GetInvocationList())
                    try
                    {
                        _beforeLeftScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            doAdditiveLoad = @params.doAdditiveLoad;
            orig(self, doAdditiveLoad);
            if (_afterLeftScene != null)
                foreach (Delegates.LeftScene_AfterArgs toInvoke in _afterLeftScene.GetInvocationList())
                    try
                    {
                        _afterLeftScene.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPlayerDead()
        {
            if (!HookedList.Contains("PlayerDead"))
            {
                HookedList.Add("PlayerDead");
                On.GameManager.PlayerDead += PlayerDead;
            }
        }

        internal static event Delegates.PlayerDead_BeforeArgs _beforePlayerDead;

        private static IEnumerator PlayerDead(On.GameManager.orig_PlayerDead orig, GameManager self, float waitTime)
        {
            Delegates.Params_PlayerDead @params = new()
            {
                self = self, waitTime = waitTime
            };
            if (_beforePlayerDead != null)
                foreach (Delegates.PlayerDead_BeforeArgs toInvoke in _beforePlayerDead.GetInvocationList())
                    try
                    {
                        _beforePlayerDead?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            waitTime = @params.waitTime;
            return orig(self, waitTime);
        }

        internal static void HookPlayerDeadFromHazard()
        {
            if (!HookedList.Contains("PlayerDeadFromHazard"))
            {
                HookedList.Add("PlayerDeadFromHazard");
                On.GameManager.PlayerDeadFromHazard += PlayerDeadFromHazard;
            }
        }

        internal static event Delegates.PlayerDeadFromHazard_BeforeArgs _beforePlayerDeadFromHazard;

        private static IEnumerator PlayerDeadFromHazard(On.GameManager.orig_PlayerDeadFromHazard orig, GameManager self,
            float waitTime)
        {
            Delegates.Params_PlayerDeadFromHazard @params = new()
            {
                self = self, waitTime = waitTime
            };
            if (_beforePlayerDeadFromHazard != null)
                foreach (Delegates.PlayerDeadFromHazard_BeforeArgs toInvoke in _beforePlayerDeadFromHazard
                             .GetInvocationList())
                    try
                    {
                        _beforePlayerDeadFromHazard?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            waitTime = @params.waitTime;
            return orig(self, waitTime);
        }

        internal static void HookReadyForRespawn()
        {
            if (!HookedList.Contains("ReadyForRespawn"))
            {
                HookedList.Add("ReadyForRespawn");
                On.GameManager.ReadyForRespawn += ReadyForRespawn;
            }
        }

        internal static event Delegates.ReadyForRespawn_BeforeArgs _beforeReadyForRespawn;
        internal static event Delegates.ReadyForRespawn_AfterArgs _afterReadyForRespawn;

        private static void ReadyForRespawn(On.GameManager.orig_ReadyForRespawn orig, GameManager self,
            bool isFirstLevelForPlayer)
        {
            Delegates.Params_ReadyForRespawn @params = new()
            {
                self = self, isFirstLevelForPlayer = isFirstLevelForPlayer
            };
            if (_beforeReadyForRespawn != null)
                foreach (Delegates.ReadyForRespawn_BeforeArgs toInvoke in _beforeReadyForRespawn.GetInvocationList())
                    try
                    {
                        _beforeReadyForRespawn?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            isFirstLevelForPlayer = @params.isFirstLevelForPlayer;
            orig(self, isFirstLevelForPlayer);
            if (_afterReadyForRespawn != null)
                foreach (Delegates.ReadyForRespawn_AfterArgs toInvoke in _afterReadyForRespawn.GetInvocationList())
                    try
                    {
                        _afterReadyForRespawn.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookHazardRespawn()
        {
            if (!HookedList.Contains("HazardRespawn"))
            {
                HookedList.Add("HazardRespawn");
                On.GameManager.HazardRespawn += HazardRespawn;
            }
        }

        internal static event Delegates.HazardRespawn_BeforeArgs _beforeHazardRespawn;
        internal static event Delegates.HazardRespawn_AfterArgs _afterHazardRespawn;

        private static void HazardRespawn(On.GameManager.orig_HazardRespawn orig, GameManager self)
        {
            Delegates.Params_HazardRespawn @params = new()
            {
                self = self
            };
            if (_beforeHazardRespawn != null)
                foreach (Delegates.HazardRespawn_BeforeArgs toInvoke in _beforeHazardRespawn.GetInvocationList())
                    try
                    {
                        _beforeHazardRespawn?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterHazardRespawn != null)
                foreach (Delegates.HazardRespawn_AfterArgs toInvoke in _afterHazardRespawn.GetInvocationList())
                    try
                    {
                        _afterHazardRespawn.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookTimePasses()
        {
            if (!HookedList.Contains("TimePasses"))
            {
                HookedList.Add("TimePasses");
                On.GameManager.TimePasses += TimePasses;
            }
        }

        internal static event Delegates.TimePasses_BeforeArgs _beforeTimePasses;
        internal static event Delegates.TimePasses_AfterArgs _afterTimePasses;

        private static void TimePasses(On.GameManager.orig_TimePasses orig, GameManager self)
        {
            Delegates.Params_TimePasses @params = new()
            {
                self = self
            };
            if (_beforeTimePasses != null)
                foreach (Delegates.TimePasses_BeforeArgs toInvoke in _beforeTimePasses.GetInvocationList())
                    try
                    {
                        _beforeTimePasses?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterTimePasses != null)
                foreach (Delegates.TimePasses_AfterArgs toInvoke in _afterTimePasses.GetInvocationList())
                    try
                    {
                        _afterTimePasses.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFadeSceneIn()
        {
            if (!HookedList.Contains("FadeSceneIn"))
            {
                HookedList.Add("FadeSceneIn");
                On.GameManager.FadeSceneIn += FadeSceneIn;
            }
        }

        internal static event Delegates.FadeSceneIn_BeforeArgs _beforeFadeSceneIn;
        internal static event Delegates.FadeSceneIn_AfterArgs _afterFadeSceneIn;

        private static void FadeSceneIn(On.GameManager.orig_FadeSceneIn orig, GameManager self)
        {
            Delegates.Params_FadeSceneIn @params = new()
            {
                self = self
            };
            if (_beforeFadeSceneIn != null)
                foreach (Delegates.FadeSceneIn_BeforeArgs toInvoke in _beforeFadeSceneIn.GetInvocationList())
                    try
                    {
                        _beforeFadeSceneIn?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterFadeSceneIn != null)
                foreach (Delegates.FadeSceneIn_AfterArgs toInvoke in _afterFadeSceneIn.GetInvocationList())
                    try
                    {
                        _afterFadeSceneIn.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFadeSceneInWithDelay()
        {
            if (!HookedList.Contains("FadeSceneInWithDelay"))
            {
                HookedList.Add("FadeSceneInWithDelay");
                On.GameManager.FadeSceneInWithDelay += FadeSceneInWithDelay;
            }
        }

        internal static event Delegates.FadeSceneInWithDelay_BeforeArgs _beforeFadeSceneInWithDelay;

        private static IEnumerator FadeSceneInWithDelay(On.GameManager.orig_FadeSceneInWithDelay orig, GameManager self,
            float delay)
        {
            Delegates.Params_FadeSceneInWithDelay @params = new()
            {
                self = self, delay = delay
            };
            if (_beforeFadeSceneInWithDelay != null)
                foreach (Delegates.FadeSceneInWithDelay_BeforeArgs toInvoke in _beforeFadeSceneInWithDelay
                             .GetInvocationList())
                    try
                    {
                        _beforeFadeSceneInWithDelay?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            delay = @params.delay;
            return orig(self, delay);
        }

        internal static void HookIsGamePaused()
        {
            if (!HookedList.Contains("IsGamePaused"))
            {
                HookedList.Add("IsGamePaused");
                On.GameManager.IsGamePaused += IsGamePaused;
            }
        }

        internal static event Delegates.IsGamePaused_BeforeArgs _beforeIsGamePaused;
        internal static event Delegates.IsGamePaused_AfterArgs _afterIsGamePaused;

        private static bool IsGamePaused(On.GameManager.orig_IsGamePaused orig, GameManager self)
        {
            Delegates.Params_IsGamePaused @params = new()
            {
                self = self
            };
            if (_beforeIsGamePaused != null)
                foreach (Delegates.IsGamePaused_BeforeArgs toInvoke in _beforeIsGamePaused.GetInvocationList())
                    try
                    {
                        _beforeIsGamePaused?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterIsGamePaused != null)
                foreach (Delegates.IsGamePaused_AfterArgs toInvoke in _afterIsGamePaused.GetInvocationList())
                    try
                    {
                        retVal = _afterIsGamePaused.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetGameMap()
        {
            if (!HookedList.Contains("SetGameMap"))
            {
                HookedList.Add("SetGameMap");
                On.GameManager.SetGameMap += SetGameMap;
            }
        }

        internal static event Delegates.SetGameMap_BeforeArgs _beforeSetGameMap;
        internal static event Delegates.SetGameMap_AfterArgs _afterSetGameMap;

        private static void SetGameMap(On.GameManager.orig_SetGameMap orig, GameManager self, GameObject go_gameMap)
        {
            Delegates.Params_SetGameMap @params = new()
            {
                self = self, go_gameMap = go_gameMap
            };
            if (_beforeSetGameMap != null)
                foreach (Delegates.SetGameMap_BeforeArgs toInvoke in _beforeSetGameMap.GetInvocationList())
                    try
                    {
                        _beforeSetGameMap?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            go_gameMap = @params.go_gameMap;
            orig(self, go_gameMap);
            if (_afterSetGameMap != null)
                foreach (Delegates.SetGameMap_AfterArgs toInvoke in _afterSetGameMap.GetInvocationList())
                    try
                    {
                        _afterSetGameMap.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCalculateNotchesUsed()
        {
            if (!HookedList.Contains("CalculateNotchesUsed"))
            {
                HookedList.Add("CalculateNotchesUsed");
                On.GameManager.CalculateNotchesUsed += CalculateNotchesUsed;
            }
        }

        internal static event Delegates.CalculateNotchesUsed_BeforeArgs _beforeCalculateNotchesUsed;
        internal static event Delegates.CalculateNotchesUsed_AfterArgs _afterCalculateNotchesUsed;

        private static void CalculateNotchesUsed(On.GameManager.orig_CalculateNotchesUsed orig, GameManager self)
        {
            Delegates.Params_CalculateNotchesUsed @params = new()
            {
                self = self
            };
            if (_beforeCalculateNotchesUsed != null)
                foreach (Delegates.CalculateNotchesUsed_BeforeArgs toInvoke in _beforeCalculateNotchesUsed
                             .GetInvocationList())
                    try
                    {
                        _beforeCalculateNotchesUsed?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCalculateNotchesUsed != null)
                foreach (Delegates.CalculateNotchesUsed_AfterArgs toInvoke in _afterCalculateNotchesUsed
                             .GetInvocationList())
                    try
                    {
                        _afterCalculateNotchesUsed.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetLanguageAsString()
        {
            if (!HookedList.Contains("GetLanguageAsString"))
            {
                HookedList.Add("GetLanguageAsString");
                On.GameManager.GetLanguageAsString += GetLanguageAsString;
            }
        }

        internal static event Delegates.GetLanguageAsString_BeforeArgs _beforeGetLanguageAsString;
        internal static event Delegates.GetLanguageAsString_AfterArgs _afterGetLanguageAsString;

        private static string GetLanguageAsString(On.GameManager.orig_GetLanguageAsString orig, GameManager self)
        {
            Delegates.Params_GetLanguageAsString @params = new()
            {
                self = self
            };
            if (_beforeGetLanguageAsString != null)
                foreach (Delegates.GetLanguageAsString_BeforeArgs toInvoke in _beforeGetLanguageAsString
                             .GetInvocationList())
                    try
                    {
                        _beforeGetLanguageAsString?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetLanguageAsString != null)
                foreach (Delegates.GetLanguageAsString_AfterArgs toInvoke in
                         _afterGetLanguageAsString.GetInvocationList())
                    try
                    {
                        retVal = _afterGetLanguageAsString.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetEntryGateName()
        {
            if (!HookedList.Contains("GetEntryGateName"))
            {
                HookedList.Add("GetEntryGateName");
                On.GameManager.GetEntryGateName += GetEntryGateName;
            }
        }

        internal static event Delegates.GetEntryGateName_BeforeArgs _beforeGetEntryGateName;
        internal static event Delegates.GetEntryGateName_AfterArgs _afterGetEntryGateName;

        private static string GetEntryGateName(On.GameManager.orig_GetEntryGateName orig, GameManager self)
        {
            Delegates.Params_GetEntryGateName @params = new()
            {
                self = self
            };
            if (_beforeGetEntryGateName != null)
                foreach (Delegates.GetEntryGateName_BeforeArgs toInvoke in _beforeGetEntryGateName.GetInvocationList())
                    try
                    {
                        _beforeGetEntryGateName?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetEntryGateName != null)
                foreach (Delegates.GetEntryGateName_AfterArgs toInvoke in _afterGetEntryGateName.GetInvocationList())
                    try
                    {
                        retVal = _afterGetEntryGateName.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetPlayerDataBool()
        {
            if (!HookedList.Contains("SetPlayerDataBool"))
            {
                HookedList.Add("SetPlayerDataBool");
                On.GameManager.SetPlayerDataBool += SetPlayerDataBool;
            }
        }

        internal static event Delegates.SetPlayerDataBool_BeforeArgs _beforeSetPlayerDataBool;
        internal static event Delegates.SetPlayerDataBool_AfterArgs _afterSetPlayerDataBool;

        private static void SetPlayerDataBool(On.GameManager.orig_SetPlayerDataBool orig, GameManager self,
            string boolName, bool value)
        {
            Delegates.Params_SetPlayerDataBool @params = new()
            {
                self = self, boolName = boolName, value = value
            };
            if (_beforeSetPlayerDataBool != null)
                foreach (Delegates.SetPlayerDataBool_BeforeArgs toInvoke in
                         _beforeSetPlayerDataBool.GetInvocationList())
                    try
                    {
                        _beforeSetPlayerDataBool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            boolName = @params.boolName;
            value = @params.value;
            orig(self, boolName, value);
            if (_afterSetPlayerDataBool != null)
                foreach (Delegates.SetPlayerDataBool_AfterArgs toInvoke in _afterSetPlayerDataBool.GetInvocationList())
                    try
                    {
                        _afterSetPlayerDataBool.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetPlayerDataInt()
        {
            if (!HookedList.Contains("SetPlayerDataInt"))
            {
                HookedList.Add("SetPlayerDataInt");
                On.GameManager.SetPlayerDataInt += SetPlayerDataInt;
            }
        }

        internal static event Delegates.SetPlayerDataInt_BeforeArgs _beforeSetPlayerDataInt;
        internal static event Delegates.SetPlayerDataInt_AfterArgs _afterSetPlayerDataInt;

        private static void SetPlayerDataInt(On.GameManager.orig_SetPlayerDataInt orig, GameManager self,
            string intName, int value)
        {
            Delegates.Params_SetPlayerDataInt @params = new()
            {
                self = self, intName = intName, value = value
            };
            if (_beforeSetPlayerDataInt != null)
                foreach (Delegates.SetPlayerDataInt_BeforeArgs toInvoke in _beforeSetPlayerDataInt.GetInvocationList())
                    try
                    {
                        _beforeSetPlayerDataInt?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            intName = @params.intName;
            value = @params.value;
            orig(self, intName, value);
            if (_afterSetPlayerDataInt != null)
                foreach (Delegates.SetPlayerDataInt_AfterArgs toInvoke in _afterSetPlayerDataInt.GetInvocationList())
                    try
                    {
                        _afterSetPlayerDataInt.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetPlayerDataFloat()
        {
            if (!HookedList.Contains("SetPlayerDataFloat"))
            {
                HookedList.Add("SetPlayerDataFloat");
                On.GameManager.SetPlayerDataFloat += SetPlayerDataFloat;
            }
        }

        internal static event Delegates.SetPlayerDataFloat_BeforeArgs _beforeSetPlayerDataFloat;
        internal static event Delegates.SetPlayerDataFloat_AfterArgs _afterSetPlayerDataFloat;

        private static void SetPlayerDataFloat(On.GameManager.orig_SetPlayerDataFloat orig, GameManager self,
            string floatName, float value)
        {
            Delegates.Params_SetPlayerDataFloat @params = new()
            {
                self = self, floatName = floatName, value = value
            };
            if (_beforeSetPlayerDataFloat != null)
                foreach (Delegates.SetPlayerDataFloat_BeforeArgs toInvoke in
                         _beforeSetPlayerDataFloat.GetInvocationList())
                    try
                    {
                        _beforeSetPlayerDataFloat?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            floatName = @params.floatName;
            value = @params.value;
            orig(self, floatName, value);
            if (_afterSetPlayerDataFloat != null)
                foreach (Delegates.SetPlayerDataFloat_AfterArgs toInvoke in
                         _afterSetPlayerDataFloat.GetInvocationList())
                    try
                    {
                        _afterSetPlayerDataFloat.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetPlayerDataString()
        {
            if (!HookedList.Contains("SetPlayerDataString"))
            {
                HookedList.Add("SetPlayerDataString");
                On.GameManager.SetPlayerDataString += SetPlayerDataString;
            }
        }

        internal static event Delegates.SetPlayerDataString_BeforeArgs _beforeSetPlayerDataString;
        internal static event Delegates.SetPlayerDataString_AfterArgs _afterSetPlayerDataString;

        private static void SetPlayerDataString(On.GameManager.orig_SetPlayerDataString orig, GameManager self,
            string stringName, string value)
        {
            Delegates.Params_SetPlayerDataString @params = new()
            {
                self = self, stringName = stringName, value = value
            };
            if (_beforeSetPlayerDataString != null)
                foreach (Delegates.SetPlayerDataString_BeforeArgs toInvoke in _beforeSetPlayerDataString
                             .GetInvocationList())
                    try
                    {
                        _beforeSetPlayerDataString?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            stringName = @params.stringName;
            value = @params.value;
            orig(self, stringName, value);
            if (_afterSetPlayerDataString != null)
                foreach (Delegates.SetPlayerDataString_AfterArgs toInvoke in
                         _afterSetPlayerDataString.GetInvocationList())
                    try
                    {
                        _afterSetPlayerDataString.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookIncrementPlayerDataInt()
        {
            if (!HookedList.Contains("IncrementPlayerDataInt"))
            {
                HookedList.Add("IncrementPlayerDataInt");
                On.GameManager.IncrementPlayerDataInt += IncrementPlayerDataInt;
            }
        }

        internal static event Delegates.IncrementPlayerDataInt_BeforeArgs _beforeIncrementPlayerDataInt;
        internal static event Delegates.IncrementPlayerDataInt_AfterArgs _afterIncrementPlayerDataInt;

        private static void IncrementPlayerDataInt(On.GameManager.orig_IncrementPlayerDataInt orig, GameManager self,
            string intName)
        {
            Delegates.Params_IncrementPlayerDataInt @params = new()
            {
                self = self, intName = intName
            };
            if (_beforeIncrementPlayerDataInt != null)
                foreach (Delegates.IncrementPlayerDataInt_BeforeArgs toInvoke in _beforeIncrementPlayerDataInt
                             .GetInvocationList())
                    try
                    {
                        _beforeIncrementPlayerDataInt?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            intName = @params.intName;
            orig(self, intName);
            if (_afterIncrementPlayerDataInt != null)
                foreach (Delegates.IncrementPlayerDataInt_AfterArgs toInvoke in _afterIncrementPlayerDataInt
                             .GetInvocationList())
                    try
                    {
                        _afterIncrementPlayerDataInt.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDecrementPlayerDataInt()
        {
            if (!HookedList.Contains("DecrementPlayerDataInt"))
            {
                HookedList.Add("DecrementPlayerDataInt");
                On.GameManager.DecrementPlayerDataInt += DecrementPlayerDataInt;
            }
        }

        internal static event Delegates.DecrementPlayerDataInt_BeforeArgs _beforeDecrementPlayerDataInt;
        internal static event Delegates.DecrementPlayerDataInt_AfterArgs _afterDecrementPlayerDataInt;

        private static void DecrementPlayerDataInt(On.GameManager.orig_DecrementPlayerDataInt orig, GameManager self,
            string intName)
        {
            Delegates.Params_DecrementPlayerDataInt @params = new()
            {
                self = self, intName = intName
            };
            if (_beforeDecrementPlayerDataInt != null)
                foreach (Delegates.DecrementPlayerDataInt_BeforeArgs toInvoke in _beforeDecrementPlayerDataInt
                             .GetInvocationList())
                    try
                    {
                        _beforeDecrementPlayerDataInt?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            intName = @params.intName;
            orig(self, intName);
            if (_afterDecrementPlayerDataInt != null)
                foreach (Delegates.DecrementPlayerDataInt_AfterArgs toInvoke in _afterDecrementPlayerDataInt
                             .GetInvocationList())
                    try
                    {
                        _afterDecrementPlayerDataInt.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookIntAdd()
        {
            if (!HookedList.Contains("IntAdd"))
            {
                HookedList.Add("IntAdd");
                On.GameManager.IntAdd += IntAdd;
            }
        }

        internal static event Delegates.IntAdd_BeforeArgs _beforeIntAdd;
        internal static event Delegates.IntAdd_AfterArgs _afterIntAdd;

        private static void IntAdd(On.GameManager.orig_IntAdd orig, GameManager self, string intName, int amount)
        {
            Delegates.Params_IntAdd @params = new()
            {
                self = self, intName = intName, amount = amount
            };
            if (_beforeIntAdd != null)
                foreach (Delegates.IntAdd_BeforeArgs toInvoke in _beforeIntAdd.GetInvocationList())
                    try
                    {
                        _beforeIntAdd?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            intName = @params.intName;
            amount = @params.amount;
            orig(self, intName, amount);
            if (_afterIntAdd != null)
                foreach (Delegates.IntAdd_AfterArgs toInvoke in _afterIntAdd.GetInvocationList())
                    try
                    {
                        _afterIntAdd.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetPlayerDataBool()
        {
            if (!HookedList.Contains("GetPlayerDataBool"))
            {
                HookedList.Add("GetPlayerDataBool");
                On.GameManager.GetPlayerDataBool += GetPlayerDataBool;
            }
        }

        internal static event Delegates.GetPlayerDataBool_BeforeArgs _beforeGetPlayerDataBool;
        internal static event Delegates.GetPlayerDataBool_AfterArgs _afterGetPlayerDataBool;

        private static bool GetPlayerDataBool(On.GameManager.orig_GetPlayerDataBool orig, GameManager self,
            string boolName)
        {
            Delegates.Params_GetPlayerDataBool @params = new()
            {
                self = self, boolName = boolName
            };
            if (_beforeGetPlayerDataBool != null)
                foreach (Delegates.GetPlayerDataBool_BeforeArgs toInvoke in
                         _beforeGetPlayerDataBool.GetInvocationList())
                    try
                    {
                        _beforeGetPlayerDataBool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            boolName = @params.boolName;
            var retVal = orig(self, boolName);
            if (_afterGetPlayerDataBool != null)
                foreach (Delegates.GetPlayerDataBool_AfterArgs toInvoke in _afterGetPlayerDataBool.GetInvocationList())
                    try
                    {
                        retVal = _afterGetPlayerDataBool.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetPlayerDataInt()
        {
            if (!HookedList.Contains("GetPlayerDataInt"))
            {
                HookedList.Add("GetPlayerDataInt");
                On.GameManager.GetPlayerDataInt += GetPlayerDataInt;
            }
        }

        internal static event Delegates.GetPlayerDataInt_BeforeArgs _beforeGetPlayerDataInt;
        internal static event Delegates.GetPlayerDataInt_AfterArgs _afterGetPlayerDataInt;

        private static int GetPlayerDataInt(On.GameManager.orig_GetPlayerDataInt orig, GameManager self, string intName)
        {
            Delegates.Params_GetPlayerDataInt @params = new()
            {
                self = self, intName = intName
            };
            if (_beforeGetPlayerDataInt != null)
                foreach (Delegates.GetPlayerDataInt_BeforeArgs toInvoke in _beforeGetPlayerDataInt.GetInvocationList())
                    try
                    {
                        _beforeGetPlayerDataInt?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            intName = @params.intName;
            var retVal = orig(self, intName);
            if (_afterGetPlayerDataInt != null)
                foreach (Delegates.GetPlayerDataInt_AfterArgs toInvoke in _afterGetPlayerDataInt.GetInvocationList())
                    try
                    {
                        retVal = _afterGetPlayerDataInt.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetPlayerDataFloat()
        {
            if (!HookedList.Contains("GetPlayerDataFloat"))
            {
                HookedList.Add("GetPlayerDataFloat");
                On.GameManager.GetPlayerDataFloat += GetPlayerDataFloat;
            }
        }

        internal static event Delegates.GetPlayerDataFloat_BeforeArgs _beforeGetPlayerDataFloat;
        internal static event Delegates.GetPlayerDataFloat_AfterArgs _afterGetPlayerDataFloat;

        private static float GetPlayerDataFloat(On.GameManager.orig_GetPlayerDataFloat orig, GameManager self,
            string floatName)
        {
            Delegates.Params_GetPlayerDataFloat @params = new()
            {
                self = self, floatName = floatName
            };
            if (_beforeGetPlayerDataFloat != null)
                foreach (Delegates.GetPlayerDataFloat_BeforeArgs toInvoke in
                         _beforeGetPlayerDataFloat.GetInvocationList())
                    try
                    {
                        _beforeGetPlayerDataFloat?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            floatName = @params.floatName;
            var retVal = orig(self, floatName);
            if (_afterGetPlayerDataFloat != null)
                foreach (Delegates.GetPlayerDataFloat_AfterArgs toInvoke in
                         _afterGetPlayerDataFloat.GetInvocationList())
                    try
                    {
                        retVal = _afterGetPlayerDataFloat.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetPlayerDataString()
        {
            if (!HookedList.Contains("GetPlayerDataString"))
            {
                HookedList.Add("GetPlayerDataString");
                On.GameManager.GetPlayerDataString += GetPlayerDataString;
            }
        }

        internal static event Delegates.GetPlayerDataString_BeforeArgs _beforeGetPlayerDataString;
        internal static event Delegates.GetPlayerDataString_AfterArgs _afterGetPlayerDataString;

        private static string GetPlayerDataString(On.GameManager.orig_GetPlayerDataString orig, GameManager self,
            string stringName)
        {
            Delegates.Params_GetPlayerDataString @params = new()
            {
                self = self, stringName = stringName
            };
            if (_beforeGetPlayerDataString != null)
                foreach (Delegates.GetPlayerDataString_BeforeArgs toInvoke in _beforeGetPlayerDataString
                             .GetInvocationList())
                    try
                    {
                        _beforeGetPlayerDataString?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            stringName = @params.stringName;
            var retVal = orig(self, stringName);
            if (_afterGetPlayerDataString != null)
                foreach (Delegates.GetPlayerDataString_AfterArgs toInvoke in
                         _afterGetPlayerDataString.GetInvocationList())
                    try
                    {
                        retVal = _afterGetPlayerDataString.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetPlayerDataVector3()
        {
            if (!HookedList.Contains("SetPlayerDataVector3"))
            {
                HookedList.Add("SetPlayerDataVector3");
                On.GameManager.SetPlayerDataVector3 += SetPlayerDataVector3;
            }
        }

        internal static event Delegates.SetPlayerDataVector3_BeforeArgs _beforeSetPlayerDataVector3;
        internal static event Delegates.SetPlayerDataVector3_AfterArgs _afterSetPlayerDataVector3;

        private static void SetPlayerDataVector3(On.GameManager.orig_SetPlayerDataVector3 orig, GameManager self,
            string vectorName, Vector3 value)
        {
            Delegates.Params_SetPlayerDataVector3 @params = new()
            {
                self = self, vectorName = vectorName, value = value
            };
            if (_beforeSetPlayerDataVector3 != null)
                foreach (Delegates.SetPlayerDataVector3_BeforeArgs toInvoke in _beforeSetPlayerDataVector3
                             .GetInvocationList())
                    try
                    {
                        _beforeSetPlayerDataVector3?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            vectorName = @params.vectorName;
            value = @params.value;
            orig(self, vectorName, value);
            if (_afterSetPlayerDataVector3 != null)
                foreach (Delegates.SetPlayerDataVector3_AfterArgs toInvoke in _afterSetPlayerDataVector3
                             .GetInvocationList())
                    try
                    {
                        _afterSetPlayerDataVector3.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetPlayerDataVector3()
        {
            if (!HookedList.Contains("GetPlayerDataVector3"))
            {
                HookedList.Add("GetPlayerDataVector3");
                On.GameManager.GetPlayerDataVector3 += GetPlayerDataVector3;
            }
        }

        internal static event Delegates.GetPlayerDataVector3_BeforeArgs _beforeGetPlayerDataVector3;
        internal static event Delegates.GetPlayerDataVector3_AfterArgs _afterGetPlayerDataVector3;

        private static Vector3 GetPlayerDataVector3(On.GameManager.orig_GetPlayerDataVector3 orig, GameManager self,
            string vectorName)
        {
            Delegates.Params_GetPlayerDataVector3 @params = new()
            {
                self = self, vectorName = vectorName
            };
            if (_beforeGetPlayerDataVector3 != null)
                foreach (Delegates.GetPlayerDataVector3_BeforeArgs toInvoke in _beforeGetPlayerDataVector3
                             .GetInvocationList())
                    try
                    {
                        _beforeGetPlayerDataVector3?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            vectorName = @params.vectorName;
            var retVal = orig(self, vectorName);
            if (_afterGetPlayerDataVector3 != null)
                foreach (Delegates.GetPlayerDataVector3_AfterArgs toInvoke in _afterGetPlayerDataVector3
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetPlayerDataVector3.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookEquipCharm()
        {
            if (!HookedList.Contains("EquipCharm"))
            {
                HookedList.Add("EquipCharm");
                On.GameManager.EquipCharm += EquipCharm;
            }
        }

        internal static event Delegates.EquipCharm_BeforeArgs _beforeEquipCharm;
        internal static event Delegates.EquipCharm_AfterArgs _afterEquipCharm;

        private static void EquipCharm(On.GameManager.orig_EquipCharm orig, GameManager self, int charmNum)
        {
            Delegates.Params_EquipCharm @params = new()
            {
                self = self, charmNum = charmNum
            };
            if (_beforeEquipCharm != null)
                foreach (Delegates.EquipCharm_BeforeArgs toInvoke in _beforeEquipCharm.GetInvocationList())
                    try
                    {
                        _beforeEquipCharm?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            charmNum = @params.charmNum;
            orig(self, charmNum);
            if (_afterEquipCharm != null)
                foreach (Delegates.EquipCharm_AfterArgs toInvoke in _afterEquipCharm.GetInvocationList())
                    try
                    {
                        _afterEquipCharm.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUnequipCharm()
        {
            if (!HookedList.Contains("UnequipCharm"))
            {
                HookedList.Add("UnequipCharm");
                On.GameManager.UnequipCharm += UnequipCharm;
            }
        }

        internal static event Delegates.UnequipCharm_BeforeArgs _beforeUnequipCharm;
        internal static event Delegates.UnequipCharm_AfterArgs _afterUnequipCharm;

        private static void UnequipCharm(On.GameManager.orig_UnequipCharm orig, GameManager self, int charmNum)
        {
            Delegates.Params_UnequipCharm @params = new()
            {
                self = self, charmNum = charmNum
            };
            if (_beforeUnequipCharm != null)
                foreach (Delegates.UnequipCharm_BeforeArgs toInvoke in _beforeUnequipCharm.GetInvocationList())
                    try
                    {
                        _beforeUnequipCharm?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            charmNum = @params.charmNum;
            orig(self, charmNum);
            if (_afterUnequipCharm != null)
                foreach (Delegates.UnequipCharm_AfterArgs toInvoke in _afterUnequipCharm.GetInvocationList())
                    try
                    {
                        _afterUnequipCharm.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRefreshOvercharm()
        {
            if (!HookedList.Contains("RefreshOvercharm"))
            {
                HookedList.Add("RefreshOvercharm");
                On.GameManager.RefreshOvercharm += RefreshOvercharm;
            }
        }

        internal static event Delegates.RefreshOvercharm_BeforeArgs _beforeRefreshOvercharm;
        internal static event Delegates.RefreshOvercharm_AfterArgs _afterRefreshOvercharm;

        private static void RefreshOvercharm(On.GameManager.orig_RefreshOvercharm orig, GameManager self)
        {
            Delegates.Params_RefreshOvercharm @params = new()
            {
                self = self
            };
            if (_beforeRefreshOvercharm != null)
                foreach (Delegates.RefreshOvercharm_BeforeArgs toInvoke in _beforeRefreshOvercharm.GetInvocationList())
                    try
                    {
                        _beforeRefreshOvercharm?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterRefreshOvercharm != null)
                foreach (Delegates.RefreshOvercharm_AfterArgs toInvoke in _afterRefreshOvercharm.GetInvocationList())
                    try
                    {
                        _afterRefreshOvercharm.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateBlueHealth()
        {
            if (!HookedList.Contains("UpdateBlueHealth"))
            {
                HookedList.Add("UpdateBlueHealth");
                On.GameManager.UpdateBlueHealth += UpdateBlueHealth;
            }
        }

        internal static event Delegates.UpdateBlueHealth_BeforeArgs _beforeUpdateBlueHealth;
        internal static event Delegates.UpdateBlueHealth_AfterArgs _afterUpdateBlueHealth;

        private static void UpdateBlueHealth(On.GameManager.orig_UpdateBlueHealth orig, GameManager self)
        {
            Delegates.Params_UpdateBlueHealth @params = new()
            {
                self = self
            };
            if (_beforeUpdateBlueHealth != null)
                foreach (Delegates.UpdateBlueHealth_BeforeArgs toInvoke in _beforeUpdateBlueHealth.GetInvocationList())
                    try
                    {
                        _beforeUpdateBlueHealth?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateBlueHealth != null)
                foreach (Delegates.UpdateBlueHealth_AfterArgs toInvoke in _afterUpdateBlueHealth.GetInvocationList())
                    try
                    {
                        _afterUpdateBlueHealth.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetCurrentMapZoneAsRespawn()
        {
            if (!HookedList.Contains("SetCurrentMapZoneAsRespawn"))
            {
                HookedList.Add("SetCurrentMapZoneAsRespawn");
                On.GameManager.SetCurrentMapZoneAsRespawn += SetCurrentMapZoneAsRespawn;
            }
        }

        internal static event Delegates.SetCurrentMapZoneAsRespawn_BeforeArgs _beforeSetCurrentMapZoneAsRespawn;
        internal static event Delegates.SetCurrentMapZoneAsRespawn_AfterArgs _afterSetCurrentMapZoneAsRespawn;

        private static void SetCurrentMapZoneAsRespawn(On.GameManager.orig_SetCurrentMapZoneAsRespawn orig,
            GameManager self)
        {
            Delegates.Params_SetCurrentMapZoneAsRespawn @params = new()
            {
                self = self
            };
            if (_beforeSetCurrentMapZoneAsRespawn != null)
                foreach (Delegates.SetCurrentMapZoneAsRespawn_BeforeArgs toInvoke in _beforeSetCurrentMapZoneAsRespawn
                             .GetInvocationList())
                    try
                    {
                        _beforeSetCurrentMapZoneAsRespawn?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSetCurrentMapZoneAsRespawn != null)
                foreach (Delegates.SetCurrentMapZoneAsRespawn_AfterArgs toInvoke in _afterSetCurrentMapZoneAsRespawn
                             .GetInvocationList())
                    try
                    {
                        _afterSetCurrentMapZoneAsRespawn.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetMapZoneToSpecific()
        {
            if (!HookedList.Contains("SetMapZoneToSpecific"))
            {
                HookedList.Add("SetMapZoneToSpecific");
                On.GameManager.SetMapZoneToSpecific += SetMapZoneToSpecific;
            }
        }

        internal static event Delegates.SetMapZoneToSpecific_BeforeArgs _beforeSetMapZoneToSpecific;
        internal static event Delegates.SetMapZoneToSpecific_AfterArgs _afterSetMapZoneToSpecific;

        private static void SetMapZoneToSpecific(On.GameManager.orig_SetMapZoneToSpecific orig, GameManager self,
            string mapZone)
        {
            Delegates.Params_SetMapZoneToSpecific @params = new()
            {
                self = self, mapZone = mapZone
            };
            if (_beforeSetMapZoneToSpecific != null)
                foreach (Delegates.SetMapZoneToSpecific_BeforeArgs toInvoke in _beforeSetMapZoneToSpecific
                             .GetInvocationList())
                    try
                    {
                        _beforeSetMapZoneToSpecific?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            mapZone = @params.mapZone;
            orig(self, mapZone);
            if (_afterSetMapZoneToSpecific != null)
                foreach (Delegates.SetMapZoneToSpecific_AfterArgs toInvoke in _afterSetMapZoneToSpecific
                             .GetInvocationList())
                    try
                    {
                        _afterSetMapZoneToSpecific.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStartSoulLimiter()
        {
            if (!HookedList.Contains("StartSoulLimiter"))
            {
                HookedList.Add("StartSoulLimiter");
                On.GameManager.StartSoulLimiter += StartSoulLimiter;
            }
        }

        internal static event Delegates.StartSoulLimiter_BeforeArgs _beforeStartSoulLimiter;
        internal static event Delegates.StartSoulLimiter_AfterArgs _afterStartSoulLimiter;

        private static void StartSoulLimiter(On.GameManager.orig_StartSoulLimiter orig, GameManager self)
        {
            Delegates.Params_StartSoulLimiter @params = new()
            {
                self = self
            };
            if (_beforeStartSoulLimiter != null)
                foreach (Delegates.StartSoulLimiter_BeforeArgs toInvoke in _beforeStartSoulLimiter.GetInvocationList())
                    try
                    {
                        _beforeStartSoulLimiter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStartSoulLimiter != null)
                foreach (Delegates.StartSoulLimiter_AfterArgs toInvoke in _afterStartSoulLimiter.GetInvocationList())
                    try
                    {
                        _afterStartSoulLimiter.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookEndSoulLimiter()
        {
            if (!HookedList.Contains("EndSoulLimiter"))
            {
                HookedList.Add("EndSoulLimiter");
                On.GameManager.EndSoulLimiter += EndSoulLimiter;
            }
        }

        internal static event Delegates.EndSoulLimiter_BeforeArgs _beforeEndSoulLimiter;
        internal static event Delegates.EndSoulLimiter_AfterArgs _afterEndSoulLimiter;

        private static void EndSoulLimiter(On.GameManager.orig_EndSoulLimiter orig, GameManager self)
        {
            Delegates.Params_EndSoulLimiter @params = new()
            {
                self = self
            };
            if (_beforeEndSoulLimiter != null)
                foreach (Delegates.EndSoulLimiter_BeforeArgs toInvoke in _beforeEndSoulLimiter.GetInvocationList())
                    try
                    {
                        _beforeEndSoulLimiter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterEndSoulLimiter != null)
                foreach (Delegates.EndSoulLimiter_AfterArgs toInvoke in _afterEndSoulLimiter.GetInvocationList())
                    try
                    {
                        _afterEndSoulLimiter.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateGameMap()
        {
            if (!HookedList.Contains("UpdateGameMap"))
            {
                HookedList.Add("UpdateGameMap");
                On.GameManager.UpdateGameMap += UpdateGameMap;
            }
        }

        internal static event Delegates.UpdateGameMap_BeforeArgs _beforeUpdateGameMap;
        internal static event Delegates.UpdateGameMap_AfterArgs _afterUpdateGameMap;

        private static bool UpdateGameMap(On.GameManager.orig_UpdateGameMap orig, GameManager self)
        {
            Delegates.Params_UpdateGameMap @params = new()
            {
                self = self
            };
            if (_beforeUpdateGameMap != null)
                foreach (Delegates.UpdateGameMap_BeforeArgs toInvoke in _beforeUpdateGameMap.GetInvocationList())
                    try
                    {
                        _beforeUpdateGameMap?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterUpdateGameMap != null)
                foreach (Delegates.UpdateGameMap_AfterArgs toInvoke in _afterUpdateGameMap.GetInvocationList())
                    try
                    {
                        retVal = _afterUpdateGameMap.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCheckAllMaps()
        {
            if (!HookedList.Contains("CheckAllMaps"))
            {
                HookedList.Add("CheckAllMaps");
                On.GameManager.CheckAllMaps += CheckAllMaps;
            }
        }

        internal static event Delegates.CheckAllMaps_BeforeArgs _beforeCheckAllMaps;
        internal static event Delegates.CheckAllMaps_AfterArgs _afterCheckAllMaps;

        private static void CheckAllMaps(On.GameManager.orig_CheckAllMaps orig, GameManager self)
        {
            Delegates.Params_CheckAllMaps @params = new()
            {
                self = self
            };
            if (_beforeCheckAllMaps != null)
                foreach (Delegates.CheckAllMaps_BeforeArgs toInvoke in _beforeCheckAllMaps.GetInvocationList())
                    try
                    {
                        _beforeCheckAllMaps?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCheckAllMaps != null)
                foreach (Delegates.CheckAllMaps_AfterArgs toInvoke in _afterCheckAllMaps.GetInvocationList())
                    try
                    {
                        _afterCheckAllMaps.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAddToScenesVisited()
        {
            if (!HookedList.Contains("AddToScenesVisited"))
            {
                HookedList.Add("AddToScenesVisited");
                On.GameManager.AddToScenesVisited += AddToScenesVisited;
            }
        }

        internal static event Delegates.AddToScenesVisited_BeforeArgs _beforeAddToScenesVisited;
        internal static event Delegates.AddToScenesVisited_AfterArgs _afterAddToScenesVisited;

        private static void AddToScenesVisited(On.GameManager.orig_AddToScenesVisited orig, GameManager self,
            string scene)
        {
            Delegates.Params_AddToScenesVisited @params = new()
            {
                self = self, scene = scene
            };
            if (_beforeAddToScenesVisited != null)
                foreach (Delegates.AddToScenesVisited_BeforeArgs toInvoke in
                         _beforeAddToScenesVisited.GetInvocationList())
                    try
                    {
                        _beforeAddToScenesVisited?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            scene = @params.scene;
            orig(self, scene);
            if (_afterAddToScenesVisited != null)
                foreach (Delegates.AddToScenesVisited_AfterArgs toInvoke in
                         _afterAddToScenesVisited.GetInvocationList())
                    try
                    {
                        _afterAddToScenesVisited.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetIsSceneVisited()
        {
            if (!HookedList.Contains("GetIsSceneVisited"))
            {
                HookedList.Add("GetIsSceneVisited");
                On.GameManager.GetIsSceneVisited += GetIsSceneVisited;
            }
        }

        internal static event Delegates.GetIsSceneVisited_BeforeArgs _beforeGetIsSceneVisited;
        internal static event Delegates.GetIsSceneVisited_AfterArgs _afterGetIsSceneVisited;

        private static bool GetIsSceneVisited(On.GameManager.orig_GetIsSceneVisited orig, GameManager self,
            string scene)
        {
            Delegates.Params_GetIsSceneVisited @params = new()
            {
                self = self, scene = scene
            };
            if (_beforeGetIsSceneVisited != null)
                foreach (Delegates.GetIsSceneVisited_BeforeArgs toInvoke in
                         _beforeGetIsSceneVisited.GetInvocationList())
                    try
                    {
                        _beforeGetIsSceneVisited?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            scene = @params.scene;
            var retVal = orig(self, scene);
            if (_afterGetIsSceneVisited != null)
                foreach (Delegates.GetIsSceneVisited_AfterArgs toInvoke in _afterGetIsSceneVisited.GetInvocationList())
                    try
                    {
                        retVal = _afterGetIsSceneVisited.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAddToBenchList()
        {
            if (!HookedList.Contains("AddToBenchList"))
            {
                HookedList.Add("AddToBenchList");
                On.GameManager.AddToBenchList += AddToBenchList;
            }
        }

        internal static event Delegates.AddToBenchList_BeforeArgs _beforeAddToBenchList;
        internal static event Delegates.AddToBenchList_AfterArgs _afterAddToBenchList;

        private static void AddToBenchList(On.GameManager.orig_AddToBenchList orig, GameManager self)
        {
            Delegates.Params_AddToBenchList @params = new()
            {
                self = self
            };
            if (_beforeAddToBenchList != null)
                foreach (Delegates.AddToBenchList_BeforeArgs toInvoke in _beforeAddToBenchList.GetInvocationList())
                    try
                    {
                        _beforeAddToBenchList?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAddToBenchList != null)
                foreach (Delegates.AddToBenchList_AfterArgs toInvoke in _afterAddToBenchList.GetInvocationList())
                    try
                    {
                        _afterAddToBenchList.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAddToGrubList()
        {
            if (!HookedList.Contains("AddToGrubList"))
            {
                HookedList.Add("AddToGrubList");
                On.GameManager.AddToGrubList += AddToGrubList;
            }
        }

        internal static event Delegates.AddToGrubList_BeforeArgs _beforeAddToGrubList;
        internal static event Delegates.AddToGrubList_AfterArgs _afterAddToGrubList;

        private static void AddToGrubList(On.GameManager.orig_AddToGrubList orig, GameManager self)
        {
            Delegates.Params_AddToGrubList @params = new()
            {
                self = self
            };
            if (_beforeAddToGrubList != null)
                foreach (Delegates.AddToGrubList_BeforeArgs toInvoke in _beforeAddToGrubList.GetInvocationList())
                    try
                    {
                        _beforeAddToGrubList?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAddToGrubList != null)
                foreach (Delegates.AddToGrubList_AfterArgs toInvoke in _afterAddToGrubList.GetInvocationList())
                    try
                    {
                        _afterAddToGrubList.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAddToFlameList()
        {
            if (!HookedList.Contains("AddToFlameList"))
            {
                HookedList.Add("AddToFlameList");
                On.GameManager.AddToFlameList += AddToFlameList;
            }
        }

        internal static event Delegates.AddToFlameList_BeforeArgs _beforeAddToFlameList;
        internal static event Delegates.AddToFlameList_AfterArgs _afterAddToFlameList;

        private static void AddToFlameList(On.GameManager.orig_AddToFlameList orig, GameManager self)
        {
            Delegates.Params_AddToFlameList @params = new()
            {
                self = self
            };
            if (_beforeAddToFlameList != null)
                foreach (Delegates.AddToFlameList_BeforeArgs toInvoke in _beforeAddToFlameList.GetInvocationList())
                    try
                    {
                        _beforeAddToFlameList?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAddToFlameList != null)
                foreach (Delegates.AddToFlameList_AfterArgs toInvoke in _afterAddToFlameList.GetInvocationList())
                    try
                    {
                        _afterAddToFlameList.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAddToCocoonList()
        {
            if (!HookedList.Contains("AddToCocoonList"))
            {
                HookedList.Add("AddToCocoonList");
                On.GameManager.AddToCocoonList += AddToCocoonList;
            }
        }

        internal static event Delegates.AddToCocoonList_BeforeArgs _beforeAddToCocoonList;
        internal static event Delegates.AddToCocoonList_AfterArgs _afterAddToCocoonList;

        private static void AddToCocoonList(On.GameManager.orig_AddToCocoonList orig, GameManager self)
        {
            Delegates.Params_AddToCocoonList @params = new()
            {
                self = self
            };
            if (_beforeAddToCocoonList != null)
                foreach (Delegates.AddToCocoonList_BeforeArgs toInvoke in _beforeAddToCocoonList.GetInvocationList())
                    try
                    {
                        _beforeAddToCocoonList?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAddToCocoonList != null)
                foreach (Delegates.AddToCocoonList_AfterArgs toInvoke in _afterAddToCocoonList.GetInvocationList())
                    try
                    {
                        _afterAddToCocoonList.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAddToDreamPlantList()
        {
            if (!HookedList.Contains("AddToDreamPlantList"))
            {
                HookedList.Add("AddToDreamPlantList");
                On.GameManager.AddToDreamPlantList += AddToDreamPlantList;
            }
        }

        internal static event Delegates.AddToDreamPlantList_BeforeArgs _beforeAddToDreamPlantList;
        internal static event Delegates.AddToDreamPlantList_AfterArgs _afterAddToDreamPlantList;

        private static void AddToDreamPlantList(On.GameManager.orig_AddToDreamPlantList orig, GameManager self)
        {
            Delegates.Params_AddToDreamPlantList @params = new()
            {
                self = self
            };
            if (_beforeAddToDreamPlantList != null)
                foreach (Delegates.AddToDreamPlantList_BeforeArgs toInvoke in _beforeAddToDreamPlantList
                             .GetInvocationList())
                    try
                    {
                        _beforeAddToDreamPlantList?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAddToDreamPlantList != null)
                foreach (Delegates.AddToDreamPlantList_AfterArgs toInvoke in
                         _afterAddToDreamPlantList.GetInvocationList())
                    try
                    {
                        _afterAddToDreamPlantList.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAddToDreamPlantCList()
        {
            if (!HookedList.Contains("AddToDreamPlantCList"))
            {
                HookedList.Add("AddToDreamPlantCList");
                On.GameManager.AddToDreamPlantCList += AddToDreamPlantCList;
            }
        }

        internal static event Delegates.AddToDreamPlantCList_BeforeArgs _beforeAddToDreamPlantCList;
        internal static event Delegates.AddToDreamPlantCList_AfterArgs _afterAddToDreamPlantCList;

        private static void AddToDreamPlantCList(On.GameManager.orig_AddToDreamPlantCList orig, GameManager self)
        {
            Delegates.Params_AddToDreamPlantCList @params = new()
            {
                self = self
            };
            if (_beforeAddToDreamPlantCList != null)
                foreach (Delegates.AddToDreamPlantCList_BeforeArgs toInvoke in _beforeAddToDreamPlantCList
                             .GetInvocationList())
                    try
                    {
                        _beforeAddToDreamPlantCList?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAddToDreamPlantCList != null)
                foreach (Delegates.AddToDreamPlantCList_AfterArgs toInvoke in _afterAddToDreamPlantCList
                             .GetInvocationList())
                    try
                    {
                        _afterAddToDreamPlantCList.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCountGameCompletion()
        {
            if (!HookedList.Contains("CountGameCompletion"))
            {
                HookedList.Add("CountGameCompletion");
                On.GameManager.CountGameCompletion += CountGameCompletion;
            }
        }

        internal static event Delegates.CountGameCompletion_BeforeArgs _beforeCountGameCompletion;
        internal static event Delegates.CountGameCompletion_AfterArgs _afterCountGameCompletion;

        private static void CountGameCompletion(On.GameManager.orig_CountGameCompletion orig, GameManager self)
        {
            Delegates.Params_CountGameCompletion @params = new()
            {
                self = self
            };
            if (_beforeCountGameCompletion != null)
                foreach (Delegates.CountGameCompletion_BeforeArgs toInvoke in _beforeCountGameCompletion
                             .GetInvocationList())
                    try
                    {
                        _beforeCountGameCompletion?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCountGameCompletion != null)
                foreach (Delegates.CountGameCompletion_AfterArgs toInvoke in
                         _afterCountGameCompletion.GetInvocationList())
                    try
                    {
                        _afterCountGameCompletion.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCountCharms()
        {
            if (!HookedList.Contains("CountCharms"))
            {
                HookedList.Add("CountCharms");
                On.GameManager.CountCharms += CountCharms;
            }
        }

        internal static event Delegates.CountCharms_BeforeArgs _beforeCountCharms;
        internal static event Delegates.CountCharms_AfterArgs _afterCountCharms;

        private static void CountCharms(On.GameManager.orig_CountCharms orig, GameManager self)
        {
            Delegates.Params_CountCharms @params = new()
            {
                self = self
            };
            if (_beforeCountCharms != null)
                foreach (Delegates.CountCharms_BeforeArgs toInvoke in _beforeCountCharms.GetInvocationList())
                    try
                    {
                        _beforeCountCharms?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCountCharms != null)
                foreach (Delegates.CountCharms_AfterArgs toInvoke in _afterCountCharms.GetInvocationList())
                    try
                    {
                        _afterCountCharms.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCountJournalEntries()
        {
            if (!HookedList.Contains("CountJournalEntries"))
            {
                HookedList.Add("CountJournalEntries");
                On.GameManager.CountJournalEntries += CountJournalEntries;
            }
        }

        internal static event Delegates.CountJournalEntries_BeforeArgs _beforeCountJournalEntries;
        internal static event Delegates.CountJournalEntries_AfterArgs _afterCountJournalEntries;

        private static void CountJournalEntries(On.GameManager.orig_CountJournalEntries orig, GameManager self)
        {
            Delegates.Params_CountJournalEntries @params = new()
            {
                self = self
            };
            if (_beforeCountJournalEntries != null)
                foreach (Delegates.CountJournalEntries_BeforeArgs toInvoke in _beforeCountJournalEntries
                             .GetInvocationList())
                    try
                    {
                        _beforeCountJournalEntries?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCountJournalEntries != null)
                foreach (Delegates.CountJournalEntries_AfterArgs toInvoke in
                         _afterCountJournalEntries.GetInvocationList())
                    try
                    {
                        _afterCountJournalEntries.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookActivateTestingCheats()
        {
            if (!HookedList.Contains("ActivateTestingCheats"))
            {
                HookedList.Add("ActivateTestingCheats");
                On.GameManager.ActivateTestingCheats += ActivateTestingCheats;
            }
        }

        internal static event Delegates.ActivateTestingCheats_BeforeArgs _beforeActivateTestingCheats;
        internal static event Delegates.ActivateTestingCheats_AfterArgs _afterActivateTestingCheats;

        private static void ActivateTestingCheats(On.GameManager.orig_ActivateTestingCheats orig, GameManager self)
        {
            Delegates.Params_ActivateTestingCheats @params = new()
            {
                self = self
            };
            if (_beforeActivateTestingCheats != null)
                foreach (Delegates.ActivateTestingCheats_BeforeArgs toInvoke in _beforeActivateTestingCheats
                             .GetInvocationList())
                    try
                    {
                        _beforeActivateTestingCheats?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterActivateTestingCheats != null)
                foreach (Delegates.ActivateTestingCheats_AfterArgs toInvoke in _afterActivateTestingCheats
                             .GetInvocationList())
                    try
                    {
                        _afterActivateTestingCheats.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetAllPowerups()
        {
            if (!HookedList.Contains("GetAllPowerups"))
            {
                HookedList.Add("GetAllPowerups");
                On.GameManager.GetAllPowerups += GetAllPowerups;
            }
        }

        internal static event Delegates.GetAllPowerups_BeforeArgs _beforeGetAllPowerups;
        internal static event Delegates.GetAllPowerups_AfterArgs _afterGetAllPowerups;

        private static void GetAllPowerups(On.GameManager.orig_GetAllPowerups orig, GameManager self)
        {
            Delegates.Params_GetAllPowerups @params = new()
            {
                self = self
            };
            if (_beforeGetAllPowerups != null)
                foreach (Delegates.GetAllPowerups_BeforeArgs toInvoke in _beforeGetAllPowerups.GetInvocationList())
                    try
                    {
                        _beforeGetAllPowerups?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGetAllPowerups != null)
                foreach (Delegates.GetAllPowerups_AfterArgs toInvoke in _afterGetAllPowerups.GetInvocationList())
                    try
                    {
                        _afterGetAllPowerups.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_death()
        {
            if (!HookedList.Contains("StoryRecord_death"))
            {
                HookedList.Add("StoryRecord_death");
                On.GameManager.StoryRecord_death += StoryRecord_death;
            }
        }

        internal static event Delegates.StoryRecord_death_BeforeArgs _beforeStoryRecord_death;
        internal static event Delegates.StoryRecord_death_AfterArgs _afterStoryRecord_death;

        private static void StoryRecord_death(On.GameManager.orig_StoryRecord_death orig, GameManager self)
        {
            Delegates.Params_StoryRecord_death @params = new()
            {
                self = self
            };
            if (_beforeStoryRecord_death != null)
                foreach (Delegates.StoryRecord_death_BeforeArgs toInvoke in
                         _beforeStoryRecord_death.GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_death?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStoryRecord_death != null)
                foreach (Delegates.StoryRecord_death_AfterArgs toInvoke in _afterStoryRecord_death.GetInvocationList())
                    try
                    {
                        _afterStoryRecord_death.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_rescueGrub()
        {
            if (!HookedList.Contains("StoryRecord_rescueGrub"))
            {
                HookedList.Add("StoryRecord_rescueGrub");
                On.GameManager.StoryRecord_rescueGrub += StoryRecord_rescueGrub;
            }
        }

        internal static event Delegates.StoryRecord_rescueGrub_BeforeArgs _beforeStoryRecord_rescueGrub;
        internal static event Delegates.StoryRecord_rescueGrub_AfterArgs _afterStoryRecord_rescueGrub;

        private static void StoryRecord_rescueGrub(On.GameManager.orig_StoryRecord_rescueGrub orig, GameManager self)
        {
            Delegates.Params_StoryRecord_rescueGrub @params = new()
            {
                self = self
            };
            if (_beforeStoryRecord_rescueGrub != null)
                foreach (Delegates.StoryRecord_rescueGrub_BeforeArgs toInvoke in _beforeStoryRecord_rescueGrub
                             .GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_rescueGrub?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStoryRecord_rescueGrub != null)
                foreach (Delegates.StoryRecord_rescueGrub_AfterArgs toInvoke in _afterStoryRecord_rescueGrub
                             .GetInvocationList())
                    try
                    {
                        _afterStoryRecord_rescueGrub.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_defeatedShade()
        {
            if (!HookedList.Contains("StoryRecord_defeatedShade"))
            {
                HookedList.Add("StoryRecord_defeatedShade");
                On.GameManager.StoryRecord_defeatedShade += StoryRecord_defeatedShade;
            }
        }

        internal static event Delegates.StoryRecord_defeatedShade_BeforeArgs _beforeStoryRecord_defeatedShade;
        internal static event Delegates.StoryRecord_defeatedShade_AfterArgs _afterStoryRecord_defeatedShade;

        private static void StoryRecord_defeatedShade(On.GameManager.orig_StoryRecord_defeatedShade orig,
            GameManager self)
        {
            Delegates.Params_StoryRecord_defeatedShade @params = new()
            {
                self = self
            };
            if (_beforeStoryRecord_defeatedShade != null)
                foreach (Delegates.StoryRecord_defeatedShade_BeforeArgs toInvoke in _beforeStoryRecord_defeatedShade
                             .GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_defeatedShade?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStoryRecord_defeatedShade != null)
                foreach (Delegates.StoryRecord_defeatedShade_AfterArgs toInvoke in _afterStoryRecord_defeatedShade
                             .GetInvocationList())
                    try
                    {
                        _afterStoryRecord_defeatedShade.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_discoveredArea()
        {
            if (!HookedList.Contains("StoryRecord_discoveredArea"))
            {
                HookedList.Add("StoryRecord_discoveredArea");
                On.GameManager.StoryRecord_discoveredArea += StoryRecord_discoveredArea;
            }
        }

        internal static event Delegates.StoryRecord_discoveredArea_BeforeArgs _beforeStoryRecord_discoveredArea;
        internal static event Delegates.StoryRecord_discoveredArea_AfterArgs _afterStoryRecord_discoveredArea;

        private static void StoryRecord_discoveredArea(On.GameManager.orig_StoryRecord_discoveredArea orig,
            GameManager self, string areaName)
        {
            Delegates.Params_StoryRecord_discoveredArea @params = new()
            {
                self = self, areaName = areaName
            };
            if (_beforeStoryRecord_discoveredArea != null)
                foreach (Delegates.StoryRecord_discoveredArea_BeforeArgs toInvoke in _beforeStoryRecord_discoveredArea
                             .GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_discoveredArea?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            areaName = @params.areaName;
            orig(self, areaName);
            if (_afterStoryRecord_discoveredArea != null)
                foreach (Delegates.StoryRecord_discoveredArea_AfterArgs toInvoke in _afterStoryRecord_discoveredArea
                             .GetInvocationList())
                    try
                    {
                        _afterStoryRecord_discoveredArea.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_travelledToArea()
        {
            if (!HookedList.Contains("StoryRecord_travelledToArea"))
            {
                HookedList.Add("StoryRecord_travelledToArea");
                On.GameManager.StoryRecord_travelledToArea += StoryRecord_travelledToArea;
            }
        }

        internal static event Delegates.StoryRecord_travelledToArea_BeforeArgs _beforeStoryRecord_travelledToArea;
        internal static event Delegates.StoryRecord_travelledToArea_AfterArgs _afterStoryRecord_travelledToArea;

        private static void StoryRecord_travelledToArea(On.GameManager.orig_StoryRecord_travelledToArea orig,
            GameManager self, string areaName)
        {
            Delegates.Params_StoryRecord_travelledToArea @params = new()
            {
                self = self, areaName = areaName
            };
            if (_beforeStoryRecord_travelledToArea != null)
                foreach (Delegates.StoryRecord_travelledToArea_BeforeArgs toInvoke in _beforeStoryRecord_travelledToArea
                             .GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_travelledToArea?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            areaName = @params.areaName;
            orig(self, areaName);
            if (_afterStoryRecord_travelledToArea != null)
                foreach (Delegates.StoryRecord_travelledToArea_AfterArgs toInvoke in _afterStoryRecord_travelledToArea
                             .GetInvocationList())
                    try
                    {
                        _afterStoryRecord_travelledToArea.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_bankDeposit()
        {
            if (!HookedList.Contains("StoryRecord_bankDeposit"))
            {
                HookedList.Add("StoryRecord_bankDeposit");
                On.GameManager.StoryRecord_bankDeposit += StoryRecord_bankDeposit;
            }
        }

        internal static event Delegates.StoryRecord_bankDeposit_BeforeArgs _beforeStoryRecord_bankDeposit;
        internal static event Delegates.StoryRecord_bankDeposit_AfterArgs _afterStoryRecord_bankDeposit;

        private static void StoryRecord_bankDeposit(On.GameManager.orig_StoryRecord_bankDeposit orig, GameManager self,
            int amount)
        {
            Delegates.Params_StoryRecord_bankDeposit @params = new()
            {
                self = self, amount = amount
            };
            if (_beforeStoryRecord_bankDeposit != null)
                foreach (Delegates.StoryRecord_bankDeposit_BeforeArgs toInvoke in _beforeStoryRecord_bankDeposit
                             .GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_bankDeposit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterStoryRecord_bankDeposit != null)
                foreach (Delegates.StoryRecord_bankDeposit_AfterArgs toInvoke in _afterStoryRecord_bankDeposit
                             .GetInvocationList())
                    try
                    {
                        _afterStoryRecord_bankDeposit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_bankWithdraw()
        {
            if (!HookedList.Contains("StoryRecord_bankWithdraw"))
            {
                HookedList.Add("StoryRecord_bankWithdraw");
                On.GameManager.StoryRecord_bankWithdraw += StoryRecord_bankWithdraw;
            }
        }

        internal static event Delegates.StoryRecord_bankWithdraw_BeforeArgs _beforeStoryRecord_bankWithdraw;
        internal static event Delegates.StoryRecord_bankWithdraw_AfterArgs _afterStoryRecord_bankWithdraw;

        private static void StoryRecord_bankWithdraw(On.GameManager.orig_StoryRecord_bankWithdraw orig,
            GameManager self, int amount)
        {
            Delegates.Params_StoryRecord_bankWithdraw @params = new()
            {
                self = self, amount = amount
            };
            if (_beforeStoryRecord_bankWithdraw != null)
                foreach (Delegates.StoryRecord_bankWithdraw_BeforeArgs toInvoke in _beforeStoryRecord_bankWithdraw
                             .GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_bankWithdraw?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterStoryRecord_bankWithdraw != null)
                foreach (Delegates.StoryRecord_bankWithdraw_AfterArgs toInvoke in _afterStoryRecord_bankWithdraw
                             .GetInvocationList())
                    try
                    {
                        _afterStoryRecord_bankWithdraw.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_boughtCorniferMap()
        {
            if (!HookedList.Contains("StoryRecord_boughtCorniferMap"))
            {
                HookedList.Add("StoryRecord_boughtCorniferMap");
                On.GameManager.StoryRecord_boughtCorniferMap += StoryRecord_boughtCorniferMap;
            }
        }

        internal static event Delegates.StoryRecord_boughtCorniferMap_BeforeArgs _beforeStoryRecord_boughtCorniferMap;
        internal static event Delegates.StoryRecord_boughtCorniferMap_AfterArgs _afterStoryRecord_boughtCorniferMap;

        private static void StoryRecord_boughtCorniferMap(On.GameManager.orig_StoryRecord_boughtCorniferMap orig,
            GameManager self, string map)
        {
            Delegates.Params_StoryRecord_boughtCorniferMap @params = new()
            {
                self = self, map = map
            };
            if (_beforeStoryRecord_boughtCorniferMap != null)
                foreach (Delegates.StoryRecord_boughtCorniferMap_BeforeArgs toInvoke in
                         _beforeStoryRecord_boughtCorniferMap.GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_boughtCorniferMap?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            map = @params.map;
            orig(self, map);
            if (_afterStoryRecord_boughtCorniferMap != null)
                foreach (Delegates.StoryRecord_boughtCorniferMap_AfterArgs toInvoke in
                         _afterStoryRecord_boughtCorniferMap.GetInvocationList())
                    try
                    {
                        _afterStoryRecord_boughtCorniferMap.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_visited()
        {
            if (!HookedList.Contains("StoryRecord_visited"))
            {
                HookedList.Add("StoryRecord_visited");
                On.GameManager.StoryRecord_visited += StoryRecord_visited;
            }
        }

        internal static event Delegates.StoryRecord_visited_BeforeArgs _beforeStoryRecord_visited;
        internal static event Delegates.StoryRecord_visited_AfterArgs _afterStoryRecord_visited;

        private static void StoryRecord_visited(On.GameManager.orig_StoryRecord_visited orig, GameManager self,
            string visited)
        {
            Delegates.Params_StoryRecord_visited @params = new()
            {
                self = self, visited = visited
            };
            if (_beforeStoryRecord_visited != null)
                foreach (Delegates.StoryRecord_visited_BeforeArgs toInvoke in _beforeStoryRecord_visited
                             .GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_visited?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            visited = @params.visited;
            orig(self, visited);
            if (_afterStoryRecord_visited != null)
                foreach (Delegates.StoryRecord_visited_AfterArgs toInvoke in
                         _afterStoryRecord_visited.GetInvocationList())
                    try
                    {
                        _afterStoryRecord_visited.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_defeated()
        {
            if (!HookedList.Contains("StoryRecord_defeated"))
            {
                HookedList.Add("StoryRecord_defeated");
                On.GameManager.StoryRecord_defeated += StoryRecord_defeated;
            }
        }

        internal static event Delegates.StoryRecord_defeated_BeforeArgs _beforeStoryRecord_defeated;
        internal static event Delegates.StoryRecord_defeated_AfterArgs _afterStoryRecord_defeated;

        private static void StoryRecord_defeated(On.GameManager.orig_StoryRecord_defeated orig, GameManager self,
            string defeated)
        {
            Delegates.Params_StoryRecord_defeated @params = new()
            {
                self = self, defeated = defeated
            };
            if (_beforeStoryRecord_defeated != null)
                foreach (Delegates.StoryRecord_defeated_BeforeArgs toInvoke in _beforeStoryRecord_defeated
                             .GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_defeated?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            defeated = @params.defeated;
            orig(self, defeated);
            if (_afterStoryRecord_defeated != null)
                foreach (Delegates.StoryRecord_defeated_AfterArgs toInvoke in _afterStoryRecord_defeated
                             .GetInvocationList())
                    try
                    {
                        _afterStoryRecord_defeated.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_jiji()
        {
            if (!HookedList.Contains("StoryRecord_jiji"))
            {
                HookedList.Add("StoryRecord_jiji");
                On.GameManager.StoryRecord_jiji += StoryRecord_jiji;
            }
        }

        internal static event Delegates.StoryRecord_jiji_BeforeArgs _beforeStoryRecord_jiji;
        internal static event Delegates.StoryRecord_jiji_AfterArgs _afterStoryRecord_jiji;

        private static void StoryRecord_jiji(On.GameManager.orig_StoryRecord_jiji orig, GameManager self)
        {
            Delegates.Params_StoryRecord_jiji @params = new()
            {
                self = self
            };
            if (_beforeStoryRecord_jiji != null)
                foreach (Delegates.StoryRecord_jiji_BeforeArgs toInvoke in _beforeStoryRecord_jiji.GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_jiji?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStoryRecord_jiji != null)
                foreach (Delegates.StoryRecord_jiji_AfterArgs toInvoke in _afterStoryRecord_jiji.GetInvocationList())
                    try
                    {
                        _afterStoryRecord_jiji.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_rodeStag()
        {
            if (!HookedList.Contains("StoryRecord_rodeStag"))
            {
                HookedList.Add("StoryRecord_rodeStag");
                On.GameManager.StoryRecord_rodeStag += StoryRecord_rodeStag;
            }
        }

        internal static event Delegates.StoryRecord_rodeStag_BeforeArgs _beforeStoryRecord_rodeStag;
        internal static event Delegates.StoryRecord_rodeStag_AfterArgs _afterStoryRecord_rodeStag;

        private static void StoryRecord_rodeStag(On.GameManager.orig_StoryRecord_rodeStag orig, GameManager self,
            string dest)
        {
            Delegates.Params_StoryRecord_rodeStag @params = new()
            {
                self = self, dest = dest
            };
            if (_beforeStoryRecord_rodeStag != null)
                foreach (Delegates.StoryRecord_rodeStag_BeforeArgs toInvoke in _beforeStoryRecord_rodeStag
                             .GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_rodeStag?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            dest = @params.dest;
            orig(self, dest);
            if (_afterStoryRecord_rodeStag != null)
                foreach (Delegates.StoryRecord_rodeStag_AfterArgs toInvoke in _afterStoryRecord_rodeStag
                             .GetInvocationList())
                    try
                    {
                        _afterStoryRecord_rodeStag.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_acquired()
        {
            if (!HookedList.Contains("StoryRecord_acquired"))
            {
                HookedList.Add("StoryRecord_acquired");
                On.GameManager.StoryRecord_acquired += StoryRecord_acquired;
            }
        }

        internal static event Delegates.StoryRecord_acquired_BeforeArgs _beforeStoryRecord_acquired;
        internal static event Delegates.StoryRecord_acquired_AfterArgs _afterStoryRecord_acquired;

        private static void StoryRecord_acquired(On.GameManager.orig_StoryRecord_acquired orig, GameManager self,
            string item)
        {
            Delegates.Params_StoryRecord_acquired @params = new()
            {
                self = self, item = item
            };
            if (_beforeStoryRecord_acquired != null)
                foreach (Delegates.StoryRecord_acquired_BeforeArgs toInvoke in _beforeStoryRecord_acquired
                             .GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_acquired?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            item = @params.item;
            orig(self, item);
            if (_afterStoryRecord_acquired != null)
                foreach (Delegates.StoryRecord_acquired_AfterArgs toInvoke in _afterStoryRecord_acquired
                             .GetInvocationList())
                    try
                    {
                        _afterStoryRecord_acquired.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_bought()
        {
            if (!HookedList.Contains("StoryRecord_bought"))
            {
                HookedList.Add("StoryRecord_bought");
                On.GameManager.StoryRecord_bought += StoryRecord_bought;
            }
        }

        internal static event Delegates.StoryRecord_bought_BeforeArgs _beforeStoryRecord_bought;
        internal static event Delegates.StoryRecord_bought_AfterArgs _afterStoryRecord_bought;

        private static void StoryRecord_bought(On.GameManager.orig_StoryRecord_bought orig, GameManager self,
            string item)
        {
            Delegates.Params_StoryRecord_bought @params = new()
            {
                self = self, item = item
            };
            if (_beforeStoryRecord_bought != null)
                foreach (Delegates.StoryRecord_bought_BeforeArgs toInvoke in
                         _beforeStoryRecord_bought.GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_bought?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            item = @params.item;
            orig(self, item);
            if (_afterStoryRecord_bought != null)
                foreach (Delegates.StoryRecord_bought_AfterArgs toInvoke in
                         _afterStoryRecord_bought.GetInvocationList())
                    try
                    {
                        _afterStoryRecord_bought.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_quit()
        {
            if (!HookedList.Contains("StoryRecord_quit"))
            {
                HookedList.Add("StoryRecord_quit");
                On.GameManager.StoryRecord_quit += StoryRecord_quit;
            }
        }

        internal static event Delegates.StoryRecord_quit_BeforeArgs _beforeStoryRecord_quit;
        internal static event Delegates.StoryRecord_quit_AfterArgs _afterStoryRecord_quit;

        private static void StoryRecord_quit(On.GameManager.orig_StoryRecord_quit orig, GameManager self)
        {
            Delegates.Params_StoryRecord_quit @params = new()
            {
                self = self
            };
            if (_beforeStoryRecord_quit != null)
                foreach (Delegates.StoryRecord_quit_BeforeArgs toInvoke in _beforeStoryRecord_quit.GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_quit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStoryRecord_quit != null)
                foreach (Delegates.StoryRecord_quit_AfterArgs toInvoke in _afterStoryRecord_quit.GetInvocationList())
                    try
                    {
                        _afterStoryRecord_quit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_rest()
        {
            if (!HookedList.Contains("StoryRecord_rest"))
            {
                HookedList.Add("StoryRecord_rest");
                On.GameManager.StoryRecord_rest += StoryRecord_rest;
            }
        }

        internal static event Delegates.StoryRecord_rest_BeforeArgs _beforeStoryRecord_rest;
        internal static event Delegates.StoryRecord_rest_AfterArgs _afterStoryRecord_rest;

        private static void StoryRecord_rest(On.GameManager.orig_StoryRecord_rest orig, GameManager self)
        {
            Delegates.Params_StoryRecord_rest @params = new()
            {
                self = self
            };
            if (_beforeStoryRecord_rest != null)
                foreach (Delegates.StoryRecord_rest_BeforeArgs toInvoke in _beforeStoryRecord_rest.GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_rest?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStoryRecord_rest != null)
                foreach (Delegates.StoryRecord_rest_AfterArgs toInvoke in _afterStoryRecord_rest.GetInvocationList())
                    try
                    {
                        _afterStoryRecord_rest.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_upgradeNail()
        {
            if (!HookedList.Contains("StoryRecord_upgradeNail"))
            {
                HookedList.Add("StoryRecord_upgradeNail");
                On.GameManager.StoryRecord_upgradeNail += StoryRecord_upgradeNail;
            }
        }

        internal static event Delegates.StoryRecord_upgradeNail_BeforeArgs _beforeStoryRecord_upgradeNail;
        internal static event Delegates.StoryRecord_upgradeNail_AfterArgs _afterStoryRecord_upgradeNail;

        private static void StoryRecord_upgradeNail(On.GameManager.orig_StoryRecord_upgradeNail orig, GameManager self)
        {
            Delegates.Params_StoryRecord_upgradeNail @params = new()
            {
                self = self
            };
            if (_beforeStoryRecord_upgradeNail != null)
                foreach (Delegates.StoryRecord_upgradeNail_BeforeArgs toInvoke in _beforeStoryRecord_upgradeNail
                             .GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_upgradeNail?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStoryRecord_upgradeNail != null)
                foreach (Delegates.StoryRecord_upgradeNail_AfterArgs toInvoke in _afterStoryRecord_upgradeNail
                             .GetInvocationList())
                    try
                    {
                        _afterStoryRecord_upgradeNail.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_heartPiece()
        {
            if (!HookedList.Contains("StoryRecord_heartPiece"))
            {
                HookedList.Add("StoryRecord_heartPiece");
                On.GameManager.StoryRecord_heartPiece += StoryRecord_heartPiece;
            }
        }

        internal static event Delegates.StoryRecord_heartPiece_BeforeArgs _beforeStoryRecord_heartPiece;
        internal static event Delegates.StoryRecord_heartPiece_AfterArgs _afterStoryRecord_heartPiece;

        private static void StoryRecord_heartPiece(On.GameManager.orig_StoryRecord_heartPiece orig, GameManager self)
        {
            Delegates.Params_StoryRecord_heartPiece @params = new()
            {
                self = self
            };
            if (_beforeStoryRecord_heartPiece != null)
                foreach (Delegates.StoryRecord_heartPiece_BeforeArgs toInvoke in _beforeStoryRecord_heartPiece
                             .GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_heartPiece?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStoryRecord_heartPiece != null)
                foreach (Delegates.StoryRecord_heartPiece_AfterArgs toInvoke in _afterStoryRecord_heartPiece
                             .GetInvocationList())
                    try
                    {
                        _afterStoryRecord_heartPiece.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_maxHealthUp()
        {
            if (!HookedList.Contains("StoryRecord_maxHealthUp"))
            {
                HookedList.Add("StoryRecord_maxHealthUp");
                On.GameManager.StoryRecord_maxHealthUp += StoryRecord_maxHealthUp;
            }
        }

        internal static event Delegates.StoryRecord_maxHealthUp_BeforeArgs _beforeStoryRecord_maxHealthUp;
        internal static event Delegates.StoryRecord_maxHealthUp_AfterArgs _afterStoryRecord_maxHealthUp;

        private static void StoryRecord_maxHealthUp(On.GameManager.orig_StoryRecord_maxHealthUp orig, GameManager self)
        {
            Delegates.Params_StoryRecord_maxHealthUp @params = new()
            {
                self = self
            };
            if (_beforeStoryRecord_maxHealthUp != null)
                foreach (Delegates.StoryRecord_maxHealthUp_BeforeArgs toInvoke in _beforeStoryRecord_maxHealthUp
                             .GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_maxHealthUp?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStoryRecord_maxHealthUp != null)
                foreach (Delegates.StoryRecord_maxHealthUp_AfterArgs toInvoke in _afterStoryRecord_maxHealthUp
                             .GetInvocationList())
                    try
                    {
                        _afterStoryRecord_maxHealthUp.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_soulPiece()
        {
            if (!HookedList.Contains("StoryRecord_soulPiece"))
            {
                HookedList.Add("StoryRecord_soulPiece");
                On.GameManager.StoryRecord_soulPiece += StoryRecord_soulPiece;
            }
        }

        internal static event Delegates.StoryRecord_soulPiece_BeforeArgs _beforeStoryRecord_soulPiece;
        internal static event Delegates.StoryRecord_soulPiece_AfterArgs _afterStoryRecord_soulPiece;

        private static void StoryRecord_soulPiece(On.GameManager.orig_StoryRecord_soulPiece orig, GameManager self)
        {
            Delegates.Params_StoryRecord_soulPiece @params = new()
            {
                self = self
            };
            if (_beforeStoryRecord_soulPiece != null)
                foreach (Delegates.StoryRecord_soulPiece_BeforeArgs toInvoke in _beforeStoryRecord_soulPiece
                             .GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_soulPiece?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStoryRecord_soulPiece != null)
                foreach (Delegates.StoryRecord_soulPiece_AfterArgs toInvoke in _afterStoryRecord_soulPiece
                             .GetInvocationList())
                    try
                    {
                        _afterStoryRecord_soulPiece.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_maxSoulUp()
        {
            if (!HookedList.Contains("StoryRecord_maxSoulUp"))
            {
                HookedList.Add("StoryRecord_maxSoulUp");
                On.GameManager.StoryRecord_maxSoulUp += StoryRecord_maxSoulUp;
            }
        }

        internal static event Delegates.StoryRecord_maxSoulUp_BeforeArgs _beforeStoryRecord_maxSoulUp;
        internal static event Delegates.StoryRecord_maxSoulUp_AfterArgs _afterStoryRecord_maxSoulUp;

        private static void StoryRecord_maxSoulUp(On.GameManager.orig_StoryRecord_maxSoulUp orig, GameManager self)
        {
            Delegates.Params_StoryRecord_maxSoulUp @params = new()
            {
                self = self
            };
            if (_beforeStoryRecord_maxSoulUp != null)
                foreach (Delegates.StoryRecord_maxSoulUp_BeforeArgs toInvoke in _beforeStoryRecord_maxSoulUp
                             .GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_maxSoulUp?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStoryRecord_maxSoulUp != null)
                foreach (Delegates.StoryRecord_maxSoulUp_AfterArgs toInvoke in _afterStoryRecord_maxSoulUp
                             .GetInvocationList())
                    try
                    {
                        _afterStoryRecord_maxSoulUp.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_charmsChanged()
        {
            if (!HookedList.Contains("StoryRecord_charmsChanged"))
            {
                HookedList.Add("StoryRecord_charmsChanged");
                On.GameManager.StoryRecord_charmsChanged += StoryRecord_charmsChanged;
            }
        }

        internal static event Delegates.StoryRecord_charmsChanged_BeforeArgs _beforeStoryRecord_charmsChanged;
        internal static event Delegates.StoryRecord_charmsChanged_AfterArgs _afterStoryRecord_charmsChanged;

        private static void StoryRecord_charmsChanged(On.GameManager.orig_StoryRecord_charmsChanged orig,
            GameManager self)
        {
            Delegates.Params_StoryRecord_charmsChanged @params = new()
            {
                self = self
            };
            if (_beforeStoryRecord_charmsChanged != null)
                foreach (Delegates.StoryRecord_charmsChanged_BeforeArgs toInvoke in _beforeStoryRecord_charmsChanged
                             .GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_charmsChanged?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStoryRecord_charmsChanged != null)
                foreach (Delegates.StoryRecord_charmsChanged_AfterArgs toInvoke in _afterStoryRecord_charmsChanged
                             .GetInvocationList())
                    try
                    {
                        _afterStoryRecord_charmsChanged.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_charmEquipped()
        {
            if (!HookedList.Contains("StoryRecord_charmEquipped"))
            {
                HookedList.Add("StoryRecord_charmEquipped");
                On.GameManager.StoryRecord_charmEquipped += StoryRecord_charmEquipped;
            }
        }

        internal static event Delegates.StoryRecord_charmEquipped_BeforeArgs _beforeStoryRecord_charmEquipped;
        internal static event Delegates.StoryRecord_charmEquipped_AfterArgs _afterStoryRecord_charmEquipped;

        private static void StoryRecord_charmEquipped(On.GameManager.orig_StoryRecord_charmEquipped orig,
            GameManager self, string charmName)
        {
            Delegates.Params_StoryRecord_charmEquipped @params = new()
            {
                self = self, charmName = charmName
            };
            if (_beforeStoryRecord_charmEquipped != null)
                foreach (Delegates.StoryRecord_charmEquipped_BeforeArgs toInvoke in _beforeStoryRecord_charmEquipped
                             .GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_charmEquipped?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            charmName = @params.charmName;
            orig(self, charmName);
            if (_afterStoryRecord_charmEquipped != null)
                foreach (Delegates.StoryRecord_charmEquipped_AfterArgs toInvoke in _afterStoryRecord_charmEquipped
                             .GetInvocationList())
                    try
                    {
                        _afterStoryRecord_charmEquipped.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStoryRecord_start()
        {
            if (!HookedList.Contains("StoryRecord_start"))
            {
                HookedList.Add("StoryRecord_start");
                On.GameManager.StoryRecord_start += StoryRecord_start;
            }
        }

        internal static event Delegates.StoryRecord_start_BeforeArgs _beforeStoryRecord_start;
        internal static event Delegates.StoryRecord_start_AfterArgs _afterStoryRecord_start;

        private static void StoryRecord_start(On.GameManager.orig_StoryRecord_start orig, GameManager self)
        {
            Delegates.Params_StoryRecord_start @params = new()
            {
                self = self
            };
            if (_beforeStoryRecord_start != null)
                foreach (Delegates.StoryRecord_start_BeforeArgs toInvoke in
                         _beforeStoryRecord_start.GetInvocationList())
                    try
                    {
                        _beforeStoryRecord_start?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStoryRecord_start != null)
                foreach (Delegates.StoryRecord_start_AfterArgs toInvoke in _afterStoryRecord_start.GetInvocationList())
                    try
                    {
                        _afterStoryRecord_start.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAwardAchievement()
        {
            if (!HookedList.Contains("AwardAchievement"))
            {
                HookedList.Add("AwardAchievement");
                On.GameManager.AwardAchievement += AwardAchievement;
            }
        }

        internal static event Delegates.AwardAchievement_BeforeArgs _beforeAwardAchievement;
        internal static event Delegates.AwardAchievement_AfterArgs _afterAwardAchievement;

        private static void AwardAchievement(On.GameManager.orig_AwardAchievement orig, GameManager self, string key)
        {
            Delegates.Params_AwardAchievement @params = new()
            {
                self = self, key = key
            };
            if (_beforeAwardAchievement != null)
                foreach (Delegates.AwardAchievement_BeforeArgs toInvoke in _beforeAwardAchievement.GetInvocationList())
                    try
                    {
                        _beforeAwardAchievement?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            key = @params.key;
            orig(self, key);
            if (_afterAwardAchievement != null)
                foreach (Delegates.AwardAchievement_AfterArgs toInvoke in _afterAwardAchievement.GetInvocationList())
                    try
                    {
                        _afterAwardAchievement.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookQueueAchievement()
        {
            if (!HookedList.Contains("QueueAchievement"))
            {
                HookedList.Add("QueueAchievement");
                On.GameManager.QueueAchievement += QueueAchievement;
            }
        }

        internal static event Delegates.QueueAchievement_BeforeArgs _beforeQueueAchievement;
        internal static event Delegates.QueueAchievement_AfterArgs _afterQueueAchievement;

        private static void QueueAchievement(On.GameManager.orig_QueueAchievement orig, GameManager self, string key)
        {
            Delegates.Params_QueueAchievement @params = new()
            {
                self = self, key = key
            };
            if (_beforeQueueAchievement != null)
                foreach (Delegates.QueueAchievement_BeforeArgs toInvoke in _beforeQueueAchievement.GetInvocationList())
                    try
                    {
                        _beforeQueueAchievement?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            key = @params.key;
            orig(self, key);
            if (_afterQueueAchievement != null)
                foreach (Delegates.QueueAchievement_AfterArgs toInvoke in _afterQueueAchievement.GetInvocationList())
                    try
                    {
                        _afterQueueAchievement.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAwardQueuedAchievements()
        {
            if (!HookedList.Contains("AwardQueuedAchievements"))
            {
                HookedList.Add("AwardQueuedAchievements");
                On.GameManager.AwardQueuedAchievements += AwardQueuedAchievements;
            }
        }

        internal static event Delegates.AwardQueuedAchievements_BeforeArgs _beforeAwardQueuedAchievements;
        internal static event Delegates.AwardQueuedAchievements_AfterArgs _afterAwardQueuedAchievements;

        private static void AwardQueuedAchievements(On.GameManager.orig_AwardQueuedAchievements orig, GameManager self)
        {
            Delegates.Params_AwardQueuedAchievements @params = new()
            {
                self = self
            };
            if (_beforeAwardQueuedAchievements != null)
                foreach (Delegates.AwardQueuedAchievements_BeforeArgs toInvoke in _beforeAwardQueuedAchievements
                             .GetInvocationList())
                    try
                    {
                        _beforeAwardQueuedAchievements?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwardQueuedAchievements != null)
                foreach (Delegates.AwardQueuedAchievements_AfterArgs toInvoke in _afterAwardQueuedAchievements
                             .GetInvocationList())
                    try
                    {
                        _afterAwardQueuedAchievements.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookIsAchievementAwarded()
        {
            if (!HookedList.Contains("IsAchievementAwarded"))
            {
                HookedList.Add("IsAchievementAwarded");
                On.GameManager.IsAchievementAwarded += IsAchievementAwarded;
            }
        }

        internal static event Delegates.IsAchievementAwarded_BeforeArgs _beforeIsAchievementAwarded;
        internal static event Delegates.IsAchievementAwarded_AfterArgs _afterIsAchievementAwarded;

        private static bool IsAchievementAwarded(On.GameManager.orig_IsAchievementAwarded orig, GameManager self,
            string key)
        {
            Delegates.Params_IsAchievementAwarded @params = new()
            {
                self = self, key = key
            };
            if (_beforeIsAchievementAwarded != null)
                foreach (Delegates.IsAchievementAwarded_BeforeArgs toInvoke in _beforeIsAchievementAwarded
                             .GetInvocationList())
                    try
                    {
                        _beforeIsAchievementAwarded?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            key = @params.key;
            var retVal = orig(self, key);
            if (_afterIsAchievementAwarded != null)
                foreach (Delegates.IsAchievementAwarded_AfterArgs toInvoke in _afterIsAchievementAwarded
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterIsAchievementAwarded.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookClearAllAchievements()
        {
            if (!HookedList.Contains("ClearAllAchievements"))
            {
                HookedList.Add("ClearAllAchievements");
                On.GameManager.ClearAllAchievements += ClearAllAchievements;
            }
        }

        internal static event Delegates.ClearAllAchievements_BeforeArgs _beforeClearAllAchievements;
        internal static event Delegates.ClearAllAchievements_AfterArgs _afterClearAllAchievements;

        private static void ClearAllAchievements(On.GameManager.orig_ClearAllAchievements orig, GameManager self)
        {
            Delegates.Params_ClearAllAchievements @params = new()
            {
                self = self
            };
            if (_beforeClearAllAchievements != null)
                foreach (Delegates.ClearAllAchievements_BeforeArgs toInvoke in _beforeClearAllAchievements
                             .GetInvocationList())
                    try
                    {
                        _beforeClearAllAchievements?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterClearAllAchievements != null)
                foreach (Delegates.ClearAllAchievements_AfterArgs toInvoke in _afterClearAllAchievements
                             .GetInvocationList())
                    try
                    {
                        _afterClearAllAchievements.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckCharmAchievements()
        {
            if (!HookedList.Contains("CheckCharmAchievements"))
            {
                HookedList.Add("CheckCharmAchievements");
                On.GameManager.CheckCharmAchievements += CheckCharmAchievements;
            }
        }

        internal static event Delegates.CheckCharmAchievements_BeforeArgs _beforeCheckCharmAchievements;
        internal static event Delegates.CheckCharmAchievements_AfterArgs _afterCheckCharmAchievements;

        private static void CheckCharmAchievements(On.GameManager.orig_CheckCharmAchievements orig, GameManager self)
        {
            Delegates.Params_CheckCharmAchievements @params = new()
            {
                self = self
            };
            if (_beforeCheckCharmAchievements != null)
                foreach (Delegates.CheckCharmAchievements_BeforeArgs toInvoke in _beforeCheckCharmAchievements
                             .GetInvocationList())
                    try
                    {
                        _beforeCheckCharmAchievements?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCheckCharmAchievements != null)
                foreach (Delegates.CheckCharmAchievements_AfterArgs toInvoke in _afterCheckCharmAchievements
                             .GetInvocationList())
                    try
                    {
                        _afterCheckCharmAchievements.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckGrubAchievements()
        {
            if (!HookedList.Contains("CheckGrubAchievements"))
            {
                HookedList.Add("CheckGrubAchievements");
                On.GameManager.CheckGrubAchievements += CheckGrubAchievements;
            }
        }

        internal static event Delegates.CheckGrubAchievements_BeforeArgs _beforeCheckGrubAchievements;
        internal static event Delegates.CheckGrubAchievements_AfterArgs _afterCheckGrubAchievements;

        private static void CheckGrubAchievements(On.GameManager.orig_CheckGrubAchievements orig, GameManager self)
        {
            Delegates.Params_CheckGrubAchievements @params = new()
            {
                self = self
            };
            if (_beforeCheckGrubAchievements != null)
                foreach (Delegates.CheckGrubAchievements_BeforeArgs toInvoke in _beforeCheckGrubAchievements
                             .GetInvocationList())
                    try
                    {
                        _beforeCheckGrubAchievements?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCheckGrubAchievements != null)
                foreach (Delegates.CheckGrubAchievements_AfterArgs toInvoke in _afterCheckGrubAchievements
                             .GetInvocationList())
                    try
                    {
                        _afterCheckGrubAchievements.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckStagStationAchievements()
        {
            if (!HookedList.Contains("CheckStagStationAchievements"))
            {
                HookedList.Add("CheckStagStationAchievements");
                On.GameManager.CheckStagStationAchievements += CheckStagStationAchievements;
            }
        }

        internal static event Delegates.CheckStagStationAchievements_BeforeArgs _beforeCheckStagStationAchievements;
        internal static event Delegates.CheckStagStationAchievements_AfterArgs _afterCheckStagStationAchievements;

        private static void CheckStagStationAchievements(On.GameManager.orig_CheckStagStationAchievements orig,
            GameManager self)
        {
            Delegates.Params_CheckStagStationAchievements @params = new()
            {
                self = self
            };
            if (_beforeCheckStagStationAchievements != null)
                foreach (Delegates.CheckStagStationAchievements_BeforeArgs toInvoke in
                         _beforeCheckStagStationAchievements.GetInvocationList())
                    try
                    {
                        _beforeCheckStagStationAchievements?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCheckStagStationAchievements != null)
                foreach (Delegates.CheckStagStationAchievements_AfterArgs toInvoke in _afterCheckStagStationAchievements
                             .GetInvocationList())
                    try
                    {
                        _afterCheckStagStationAchievements.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckMapAchievement()
        {
            if (!HookedList.Contains("CheckMapAchievement"))
            {
                HookedList.Add("CheckMapAchievement");
                On.GameManager.CheckMapAchievement += CheckMapAchievement;
            }
        }

        internal static event Delegates.CheckMapAchievement_BeforeArgs _beforeCheckMapAchievement;
        internal static event Delegates.CheckMapAchievement_AfterArgs _afterCheckMapAchievement;

        private static void CheckMapAchievement(On.GameManager.orig_CheckMapAchievement orig, GameManager self)
        {
            Delegates.Params_CheckMapAchievement @params = new()
            {
                self = self
            };
            if (_beforeCheckMapAchievement != null)
                foreach (Delegates.CheckMapAchievement_BeforeArgs toInvoke in _beforeCheckMapAchievement
                             .GetInvocationList())
                    try
                    {
                        _beforeCheckMapAchievement?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCheckMapAchievement != null)
                foreach (Delegates.CheckMapAchievement_AfterArgs toInvoke in
                         _afterCheckMapAchievement.GetInvocationList())
                    try
                    {
                        _afterCheckMapAchievement.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckJournalAchievements()
        {
            if (!HookedList.Contains("CheckJournalAchievements"))
            {
                HookedList.Add("CheckJournalAchievements");
                On.GameManager.CheckJournalAchievements += CheckJournalAchievements;
            }
        }

        internal static event Delegates.CheckJournalAchievements_BeforeArgs _beforeCheckJournalAchievements;
        internal static event Delegates.CheckJournalAchievements_AfterArgs _afterCheckJournalAchievements;

        private static void CheckJournalAchievements(On.GameManager.orig_CheckJournalAchievements orig,
            GameManager self)
        {
            Delegates.Params_CheckJournalAchievements @params = new()
            {
                self = self
            };
            if (_beforeCheckJournalAchievements != null)
                foreach (Delegates.CheckJournalAchievements_BeforeArgs toInvoke in _beforeCheckJournalAchievements
                             .GetInvocationList())
                    try
                    {
                        _beforeCheckJournalAchievements?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCheckJournalAchievements != null)
                foreach (Delegates.CheckJournalAchievements_AfterArgs toInvoke in _afterCheckJournalAchievements
                             .GetInvocationList())
                    try
                    {
                        _afterCheckJournalAchievements.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckAllAchievements()
        {
            if (!HookedList.Contains("CheckAllAchievements"))
            {
                HookedList.Add("CheckAllAchievements");
                On.GameManager.CheckAllAchievements += CheckAllAchievements;
            }
        }

        internal static event Delegates.CheckAllAchievements_BeforeArgs _beforeCheckAllAchievements;
        internal static event Delegates.CheckAllAchievements_AfterArgs _afterCheckAllAchievements;

        private static void CheckAllAchievements(On.GameManager.orig_CheckAllAchievements orig, GameManager self)
        {
            Delegates.Params_CheckAllAchievements @params = new()
            {
                self = self
            };
            if (_beforeCheckAllAchievements != null)
                foreach (Delegates.CheckAllAchievements_BeforeArgs toInvoke in _beforeCheckAllAchievements
                             .GetInvocationList())
                    try
                    {
                        _beforeCheckAllAchievements?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCheckAllAchievements != null)
                foreach (Delegates.CheckAllAchievements_AfterArgs toInvoke in _afterCheckAllAchievements
                             .GetInvocationList())
                    try
                    {
                        _afterCheckAllAchievements.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckBanishmentAchievement()
        {
            if (!HookedList.Contains("CheckBanishmentAchievement"))
            {
                HookedList.Add("CheckBanishmentAchievement");
                On.GameManager.CheckBanishmentAchievement += CheckBanishmentAchievement;
            }
        }

        internal static event Delegates.CheckBanishmentAchievement_BeforeArgs _beforeCheckBanishmentAchievement;
        internal static event Delegates.CheckBanishmentAchievement_AfterArgs _afterCheckBanishmentAchievement;

        private static void CheckBanishmentAchievement(On.GameManager.orig_CheckBanishmentAchievement orig,
            GameManager self)
        {
            Delegates.Params_CheckBanishmentAchievement @params = new()
            {
                self = self
            };
            if (_beforeCheckBanishmentAchievement != null)
                foreach (Delegates.CheckBanishmentAchievement_BeforeArgs toInvoke in _beforeCheckBanishmentAchievement
                             .GetInvocationList())
                    try
                    {
                        _beforeCheckBanishmentAchievement?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCheckBanishmentAchievement != null)
                foreach (Delegates.CheckBanishmentAchievement_AfterArgs toInvoke in _afterCheckBanishmentAchievement
                             .GetInvocationList())
                    try
                    {
                        _afterCheckBanishmentAchievement.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetStatusRecordInt()
        {
            if (!HookedList.Contains("SetStatusRecordInt"))
            {
                HookedList.Add("SetStatusRecordInt");
                On.GameManager.SetStatusRecordInt += SetStatusRecordInt;
            }
        }

        internal static event Delegates.SetStatusRecordInt_BeforeArgs _beforeSetStatusRecordInt;
        internal static event Delegates.SetStatusRecordInt_AfterArgs _afterSetStatusRecordInt;

        private static void SetStatusRecordInt(On.GameManager.orig_SetStatusRecordInt orig, GameManager self,
            string key, int value)
        {
            Delegates.Params_SetStatusRecordInt @params = new()
            {
                self = self, key = key, value = value
            };
            if (_beforeSetStatusRecordInt != null)
                foreach (Delegates.SetStatusRecordInt_BeforeArgs toInvoke in
                         _beforeSetStatusRecordInt.GetInvocationList())
                    try
                    {
                        _beforeSetStatusRecordInt?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            key = @params.key;
            value = @params.value;
            orig(self, key, value);
            if (_afterSetStatusRecordInt != null)
                foreach (Delegates.SetStatusRecordInt_AfterArgs toInvoke in
                         _afterSetStatusRecordInt.GetInvocationList())
                    try
                    {
                        _afterSetStatusRecordInt.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetStatusRecordInt()
        {
            if (!HookedList.Contains("GetStatusRecordInt"))
            {
                HookedList.Add("GetStatusRecordInt");
                On.GameManager.GetStatusRecordInt += GetStatusRecordInt;
            }
        }

        internal static event Delegates.GetStatusRecordInt_BeforeArgs _beforeGetStatusRecordInt;
        internal static event Delegates.GetStatusRecordInt_AfterArgs _afterGetStatusRecordInt;

        private static int GetStatusRecordInt(On.GameManager.orig_GetStatusRecordInt orig, GameManager self, string key)
        {
            Delegates.Params_GetStatusRecordInt @params = new()
            {
                self = self, key = key
            };
            if (_beforeGetStatusRecordInt != null)
                foreach (Delegates.GetStatusRecordInt_BeforeArgs toInvoke in
                         _beforeGetStatusRecordInt.GetInvocationList())
                    try
                    {
                        _beforeGetStatusRecordInt?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            key = @params.key;
            var retVal = orig(self, key);
            if (_afterGetStatusRecordInt != null)
                foreach (Delegates.GetStatusRecordInt_AfterArgs toInvoke in
                         _afterGetStatusRecordInt.GetInvocationList())
                    try
                    {
                        retVal = _afterGetStatusRecordInt.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookResetStatusRecords()
        {
            if (!HookedList.Contains("ResetStatusRecords"))
            {
                HookedList.Add("ResetStatusRecords");
                On.GameManager.ResetStatusRecords += ResetStatusRecords;
            }
        }

        internal static event Delegates.ResetStatusRecords_BeforeArgs _beforeResetStatusRecords;
        internal static event Delegates.ResetStatusRecords_AfterArgs _afterResetStatusRecords;

        private static void ResetStatusRecords(On.GameManager.orig_ResetStatusRecords orig, GameManager self)
        {
            Delegates.Params_ResetStatusRecords @params = new()
            {
                self = self
            };
            if (_beforeResetStatusRecords != null)
                foreach (Delegates.ResetStatusRecords_BeforeArgs toInvoke in
                         _beforeResetStatusRecords.GetInvocationList())
                    try
                    {
                        _beforeResetStatusRecords?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterResetStatusRecords != null)
                foreach (Delegates.ResetStatusRecords_AfterArgs toInvoke in
                         _afterResetStatusRecords.GetInvocationList())
                    try
                    {
                        _afterResetStatusRecords.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSaveStatusRecords()
        {
            if (!HookedList.Contains("SaveStatusRecords"))
            {
                HookedList.Add("SaveStatusRecords");
                On.GameManager.SaveStatusRecords += SaveStatusRecords;
            }
        }

        internal static event Delegates.SaveStatusRecords_BeforeArgs _beforeSaveStatusRecords;
        internal static event Delegates.SaveStatusRecords_AfterArgs _afterSaveStatusRecords;

        private static void SaveStatusRecords(On.GameManager.orig_SaveStatusRecords orig, GameManager self)
        {
            Delegates.Params_SaveStatusRecords @params = new()
            {
                self = self
            };
            if (_beforeSaveStatusRecords != null)
                foreach (Delegates.SaveStatusRecords_BeforeArgs toInvoke in
                         _beforeSaveStatusRecords.GetInvocationList())
                    try
                    {
                        _beforeSaveStatusRecords?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSaveStatusRecords != null)
                foreach (Delegates.SaveStatusRecords_AfterArgs toInvoke in _afterSaveStatusRecords.GetInvocationList())
                    try
                    {
                        _afterSaveStatusRecords.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetState()
        {
            if (!HookedList.Contains("SetState"))
            {
                HookedList.Add("SetState");
                On.GameManager.SetState += SetState;
            }
        }

        internal static event Delegates.SetState_BeforeArgs _beforeSetState;
        internal static event Delegates.SetState_AfterArgs _afterSetState;

        private static void SetState(On.GameManager.orig_SetState orig, GameManager self, GameState newState)
        {
            Delegates.Params_SetState @params = new()
            {
                self = self, newState = newState
            };
            if (_beforeSetState != null)
                foreach (Delegates.SetState_BeforeArgs toInvoke in _beforeSetState.GetInvocationList())
                    try
                    {
                        _beforeSetState?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            newState = @params.newState;
            orig(self, newState);
            if (_afterSetState != null)
                foreach (Delegates.SetState_AfterArgs toInvoke in _afterSetState.GetInvocationList())
                    try
                    {
                        _afterSetState.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLoadScene()
        {
            if (!HookedList.Contains("LoadScene"))
            {
                HookedList.Add("LoadScene");
                On.GameManager.LoadScene += LoadScene;
            }
        }

        internal static event Delegates.LoadScene_BeforeArgs _beforeLoadScene;
        internal static event Delegates.LoadScene_AfterArgs _afterLoadScene;

        private static void LoadScene(On.GameManager.orig_LoadScene orig, GameManager self, string destScene)
        {
            Delegates.Params_LoadScene @params = new()
            {
                self = self, destScene = destScene
            };
            if (_beforeLoadScene != null)
                foreach (Delegates.LoadScene_BeforeArgs toInvoke in _beforeLoadScene.GetInvocationList())
                    try
                    {
                        _beforeLoadScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            destScene = @params.destScene;
            orig(self, destScene);
            if (_afterLoadScene != null)
                foreach (Delegates.LoadScene_AfterArgs toInvoke in _afterLoadScene.GetInvocationList())
                    try
                    {
                        _afterLoadScene.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLoadSceneAdditive()
        {
            if (!HookedList.Contains("LoadSceneAdditive"))
            {
                HookedList.Add("LoadSceneAdditive");
                On.GameManager.LoadSceneAdditive += LoadSceneAdditive;
            }
        }

        internal static event Delegates.LoadSceneAdditive_BeforeArgs _beforeLoadSceneAdditive;

        private static IEnumerator LoadSceneAdditive(On.GameManager.orig_LoadSceneAdditive orig, GameManager self,
            string destScene)
        {
            Delegates.Params_LoadSceneAdditive @params = new()
            {
                self = self, destScene = destScene
            };
            if (_beforeLoadSceneAdditive != null)
                foreach (Delegates.LoadSceneAdditive_BeforeArgs toInvoke in
                         _beforeLoadSceneAdditive.GetInvocationList())
                    try
                    {
                        _beforeLoadSceneAdditive?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            destScene = @params.destScene;
            return orig(self, destScene);
        }

        internal static void HookOnNextLevelReady()
        {
            if (!HookedList.Contains("OnNextLevelReady"))
            {
                HookedList.Add("OnNextLevelReady");
                On.GameManager.OnNextLevelReady += OnNextLevelReady;
            }
        }

        internal static event Delegates.OnNextLevelReady_BeforeArgs _beforeOnNextLevelReady;
        internal static event Delegates.OnNextLevelReady_AfterArgs _afterOnNextLevelReady;

        private static void OnNextLevelReady(On.GameManager.orig_OnNextLevelReady orig, GameManager self)
        {
            Delegates.Params_OnNextLevelReady @params = new()
            {
                self = self
            };
            if (_beforeOnNextLevelReady != null)
                foreach (Delegates.OnNextLevelReady_BeforeArgs toInvoke in _beforeOnNextLevelReady.GetInvocationList())
                    try
                    {
                        _beforeOnNextLevelReady?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnNextLevelReady != null)
                foreach (Delegates.OnNextLevelReady_AfterArgs toInvoke in _afterOnNextLevelReady.GetInvocationList())
                    try
                    {
                        _afterOnNextLevelReady.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnWillActivateFirstLevel()
        {
            if (!HookedList.Contains("OnWillActivateFirstLevel"))
            {
                HookedList.Add("OnWillActivateFirstLevel");
                On.GameManager.OnWillActivateFirstLevel += OnWillActivateFirstLevel;
            }
        }

        internal static event Delegates.OnWillActivateFirstLevel_BeforeArgs _beforeOnWillActivateFirstLevel;
        internal static event Delegates.OnWillActivateFirstLevel_AfterArgs _afterOnWillActivateFirstLevel;

        private static void OnWillActivateFirstLevel(On.GameManager.orig_OnWillActivateFirstLevel orig,
            GameManager self)
        {
            Delegates.Params_OnWillActivateFirstLevel @params = new()
            {
                self = self
            };
            if (_beforeOnWillActivateFirstLevel != null)
                foreach (Delegates.OnWillActivateFirstLevel_BeforeArgs toInvoke in _beforeOnWillActivateFirstLevel
                             .GetInvocationList())
                    try
                    {
                        _beforeOnWillActivateFirstLevel?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnWillActivateFirstLevel != null)
                foreach (Delegates.OnWillActivateFirstLevel_AfterArgs toInvoke in _afterOnWillActivateFirstLevel
                             .GetInvocationList())
                    try
                    {
                        _afterOnWillActivateFirstLevel.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLoadFirstScene()
        {
            if (!HookedList.Contains("LoadFirstScene"))
            {
                HookedList.Add("LoadFirstScene");
                On.GameManager.LoadFirstScene += LoadFirstScene;
            }
        }

        internal static event Delegates.LoadFirstScene_BeforeArgs _beforeLoadFirstScene;

        private static IEnumerator LoadFirstScene(On.GameManager.orig_LoadFirstScene orig, GameManager self)
        {
            Delegates.Params_LoadFirstScene @params = new()
            {
                self = self
            };
            if (_beforeLoadFirstScene != null)
                foreach (Delegates.LoadFirstScene_BeforeArgs toInvoke in _beforeLoadFirstScene.GetInvocationList())
                    try
                    {
                        _beforeLoadFirstScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookLoadPermadeathUnlockScene()
        {
            if (!HookedList.Contains("LoadPermadeathUnlockScene"))
            {
                HookedList.Add("LoadPermadeathUnlockScene");
                On.GameManager.LoadPermadeathUnlockScene += LoadPermadeathUnlockScene;
            }
        }

        internal static event Delegates.LoadPermadeathUnlockScene_BeforeArgs _beforeLoadPermadeathUnlockScene;
        internal static event Delegates.LoadPermadeathUnlockScene_AfterArgs _afterLoadPermadeathUnlockScene;

        private static void LoadPermadeathUnlockScene(On.GameManager.orig_LoadPermadeathUnlockScene orig,
            GameManager self)
        {
            Delegates.Params_LoadPermadeathUnlockScene @params = new()
            {
                self = self
            };
            if (_beforeLoadPermadeathUnlockScene != null)
                foreach (Delegates.LoadPermadeathUnlockScene_BeforeArgs toInvoke in _beforeLoadPermadeathUnlockScene
                             .GetInvocationList())
                    try
                    {
                        _beforeLoadPermadeathUnlockScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterLoadPermadeathUnlockScene != null)
                foreach (Delegates.LoadPermadeathUnlockScene_AfterArgs toInvoke in _afterLoadPermadeathUnlockScene
                             .GetInvocationList())
                    try
                    {
                        _afterLoadPermadeathUnlockScene.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLoadMrMushromScene()
        {
            if (!HookedList.Contains("LoadMrMushromScene"))
            {
                HookedList.Add("LoadMrMushromScene");
                On.GameManager.LoadMrMushromScene += LoadMrMushromScene;
            }
        }

        internal static event Delegates.LoadMrMushromScene_BeforeArgs _beforeLoadMrMushromScene;
        internal static event Delegates.LoadMrMushromScene_AfterArgs _afterLoadMrMushromScene;

        private static void LoadMrMushromScene(On.GameManager.orig_LoadMrMushromScene orig, GameManager self)
        {
            Delegates.Params_LoadMrMushromScene @params = new()
            {
                self = self
            };
            if (_beforeLoadMrMushromScene != null)
                foreach (Delegates.LoadMrMushromScene_BeforeArgs toInvoke in
                         _beforeLoadMrMushromScene.GetInvocationList())
                    try
                    {
                        _beforeLoadMrMushromScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterLoadMrMushromScene != null)
                foreach (Delegates.LoadMrMushromScene_AfterArgs toInvoke in
                         _afterLoadMrMushromScene.GetInvocationList())
                    try
                    {
                        _afterLoadMrMushromScene.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLoadOpeningCinematic()
        {
            if (!HookedList.Contains("LoadOpeningCinematic"))
            {
                HookedList.Add("LoadOpeningCinematic");
                On.GameManager.LoadOpeningCinematic += LoadOpeningCinematic;
            }
        }

        internal static event Delegates.LoadOpeningCinematic_BeforeArgs _beforeLoadOpeningCinematic;
        internal static event Delegates.LoadOpeningCinematic_AfterArgs _afterLoadOpeningCinematic;

        private static void LoadOpeningCinematic(On.GameManager.orig_LoadOpeningCinematic orig, GameManager self)
        {
            Delegates.Params_LoadOpeningCinematic @params = new()
            {
                self = self
            };
            if (_beforeLoadOpeningCinematic != null)
                foreach (Delegates.LoadOpeningCinematic_BeforeArgs toInvoke in _beforeLoadOpeningCinematic
                             .GetInvocationList())
                    try
                    {
                        _beforeLoadOpeningCinematic?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterLoadOpeningCinematic != null)
                foreach (Delegates.LoadOpeningCinematic_AfterArgs toInvoke in _afterLoadOpeningCinematic
                             .GetInvocationList())
                    try
                    {
                        _afterLoadOpeningCinematic.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPositionHeroAtSceneEntrance()
        {
            if (!HookedList.Contains("PositionHeroAtSceneEntrance"))
            {
                HookedList.Add("PositionHeroAtSceneEntrance");
                On.GameManager.PositionHeroAtSceneEntrance += PositionHeroAtSceneEntrance;
            }
        }

        internal static event Delegates.PositionHeroAtSceneEntrance_BeforeArgs _beforePositionHeroAtSceneEntrance;
        internal static event Delegates.PositionHeroAtSceneEntrance_AfterArgs _afterPositionHeroAtSceneEntrance;

        private static void PositionHeroAtSceneEntrance(On.GameManager.orig_PositionHeroAtSceneEntrance orig,
            GameManager self)
        {
            Delegates.Params_PositionHeroAtSceneEntrance @params = new()
            {
                self = self
            };
            if (_beforePositionHeroAtSceneEntrance != null)
                foreach (Delegates.PositionHeroAtSceneEntrance_BeforeArgs toInvoke in _beforePositionHeroAtSceneEntrance
                             .GetInvocationList())
                    try
                    {
                        _beforePositionHeroAtSceneEntrance?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterPositionHeroAtSceneEntrance != null)
                foreach (Delegates.PositionHeroAtSceneEntrance_AfterArgs toInvoke in _afterPositionHeroAtSceneEntrance
                             .GetInvocationList())
                    try
                    {
                        _afterPositionHeroAtSceneEntrance.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFindEntryPoint()
        {
            if (!HookedList.Contains("FindEntryPoint"))
            {
                HookedList.Add("FindEntryPoint");
                On.GameManager.FindEntryPoint += FindEntryPoint;
            }
        }

        internal static event Delegates.FindEntryPoint_BeforeArgs _beforeFindEntryPoint;
        internal static event Delegates.FindEntryPoint_AfterArgs _afterFindEntryPoint;

        private static Vector2? FindEntryPoint(On.GameManager.orig_FindEntryPoint orig, GameManager self,
            string entryPointName, Scene filterScene)
        {
            Delegates.Params_FindEntryPoint @params = new()
            {
                self = self, entryPointName = entryPointName, filterScene = filterScene
            };
            if (_beforeFindEntryPoint != null)
                foreach (Delegates.FindEntryPoint_BeforeArgs toInvoke in _beforeFindEntryPoint.GetInvocationList())
                    try
                    {
                        _beforeFindEntryPoint?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            entryPointName = @params.entryPointName;
            filterScene = @params.filterScene;
            var retVal = orig(self, entryPointName, filterScene);
            if (_afterFindEntryPoint != null)
                foreach (Delegates.FindEntryPoint_AfterArgs toInvoke in _afterFindEntryPoint.GetInvocationList())
                    try
                    {
                        retVal = _afterFindEntryPoint.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookFindTransitionPoint()
        {
            if (!HookedList.Contains("FindTransitionPoint"))
            {
                HookedList.Add("FindTransitionPoint");
                On.GameManager.FindTransitionPoint += FindTransitionPoint;
            }
        }

        internal static event Delegates.FindTransitionPoint_BeforeArgs _beforeFindTransitionPoint;
        internal static event Delegates.FindTransitionPoint_AfterArgs _afterFindTransitionPoint;

        private static TransitionPoint FindTransitionPoint(On.GameManager.orig_FindTransitionPoint orig,
            GameManager self, string entryPointName, Scene filterScene, bool fallbackToAnyAvailable)
        {
            Delegates.Params_FindTransitionPoint @params = new()
            {
                self = self, entryPointName = entryPointName, filterScene = filterScene,
                fallbackToAnyAvailable = fallbackToAnyAvailable
            };
            if (_beforeFindTransitionPoint != null)
                foreach (Delegates.FindTransitionPoint_BeforeArgs toInvoke in _beforeFindTransitionPoint
                             .GetInvocationList())
                    try
                    {
                        _beforeFindTransitionPoint?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            entryPointName = @params.entryPointName;
            filterScene = @params.filterScene;
            fallbackToAnyAvailable = @params.fallbackToAnyAvailable;
            var retVal = orig(self, entryPointName, filterScene, fallbackToAnyAvailable);
            if (_afterFindTransitionPoint != null)
                foreach (Delegates.FindTransitionPoint_AfterArgs toInvoke in
                         _afterFindTransitionPoint.GetInvocationList())
                    try
                    {
                        retVal = _afterFindTransitionPoint.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookEnterHero()
        {
            if (!HookedList.Contains("EnterHero"))
            {
                HookedList.Add("EnterHero");
                On.GameManager.EnterHero += EnterHero;
            }
        }

        internal static event Delegates.EnterHero_BeforeArgs _beforeEnterHero;
        internal static event Delegates.EnterHero_AfterArgs _afterEnterHero;

        private static void EnterHero(On.GameManager.orig_EnterHero orig, GameManager self, bool additiveGateSearch)
        {
            Delegates.Params_EnterHero @params = new()
            {
                self = self, additiveGateSearch = additiveGateSearch
            };
            if (_beforeEnterHero != null)
                foreach (Delegates.EnterHero_BeforeArgs toInvoke in _beforeEnterHero.GetInvocationList())
                    try
                    {
                        _beforeEnterHero?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            additiveGateSearch = @params.additiveGateSearch;
            orig(self, additiveGateSearch);
            if (_afterEnterHero != null)
                foreach (Delegates.EnterHero_AfterArgs toInvoke in _afterEnterHero.GetInvocationList())
                    try
                    {
                        _afterEnterHero.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFinishedEnteringScene()
        {
            if (!HookedList.Contains("FinishedEnteringScene"))
            {
                HookedList.Add("FinishedEnteringScene");
                On.GameManager.FinishedEnteringScene += FinishedEnteringScene;
            }
        }

        internal static event Delegates.FinishedEnteringScene_BeforeArgs _beforeFinishedEnteringScene;
        internal static event Delegates.FinishedEnteringScene_AfterArgs _afterFinishedEnteringScene;

        private static void FinishedEnteringScene(On.GameManager.orig_FinishedEnteringScene orig, GameManager self)
        {
            Delegates.Params_FinishedEnteringScene @params = new()
            {
                self = self
            };
            if (_beforeFinishedEnteringScene != null)
                foreach (Delegates.FinishedEnteringScene_BeforeArgs toInvoke in _beforeFinishedEnteringScene
                             .GetInvocationList())
                    try
                    {
                        _beforeFinishedEnteringScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterFinishedEnteringScene != null)
                foreach (Delegates.FinishedEnteringScene_AfterArgs toInvoke in _afterFinishedEnteringScene
                             .GetInvocationList())
                    try
                    {
                        _afterFinishedEnteringScene.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetupGameRefs()
        {
            if (!HookedList.Contains("SetupGameRefs"))
            {
                HookedList.Add("SetupGameRefs");
                On.GameManager.SetupGameRefs += SetupGameRefs;
            }
        }

        internal static event Delegates.SetupGameRefs_BeforeArgs _beforeSetupGameRefs;
        internal static event Delegates.SetupGameRefs_AfterArgs _afterSetupGameRefs;

        private static void SetupGameRefs(On.GameManager.orig_SetupGameRefs orig, GameManager self)
        {
            Delegates.Params_SetupGameRefs @params = new()
            {
                self = self
            };
            if (_beforeSetupGameRefs != null)
                foreach (Delegates.SetupGameRefs_BeforeArgs toInvoke in _beforeSetupGameRefs.GetInvocationList())
                    try
                    {
                        _beforeSetupGameRefs?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSetupGameRefs != null)
                foreach (Delegates.SetupGameRefs_AfterArgs toInvoke in _afterSetupGameRefs.GetInvocationList())
                    try
                    {
                        _afterSetupGameRefs.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetupSceneRefs()
        {
            if (!HookedList.Contains("SetupSceneRefs"))
            {
                HookedList.Add("SetupSceneRefs");
                On.GameManager.SetupSceneRefs += SetupSceneRefs;
            }
        }

        internal static event Delegates.SetupSceneRefs_BeforeArgs _beforeSetupSceneRefs;
        internal static event Delegates.SetupSceneRefs_AfterArgs _afterSetupSceneRefs;

        private static void SetupSceneRefs(On.GameManager.orig_SetupSceneRefs orig, GameManager self,
            bool refreshTilemapInfo)
        {
            Delegates.Params_SetupSceneRefs @params = new()
            {
                self = self, refreshTilemapInfo = refreshTilemapInfo
            };
            if (_beforeSetupSceneRefs != null)
                foreach (Delegates.SetupSceneRefs_BeforeArgs toInvoke in _beforeSetupSceneRefs.GetInvocationList())
                    try
                    {
                        _beforeSetupSceneRefs?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            refreshTilemapInfo = @params.refreshTilemapInfo;
            orig(self, refreshTilemapInfo);
            if (_afterSetupSceneRefs != null)
                foreach (Delegates.SetupSceneRefs_AfterArgs toInvoke in _afterSetupSceneRefs.GetInvocationList())
                    try
                    {
                        _afterSetupSceneRefs.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetupHeroRefs()
        {
            if (!HookedList.Contains("SetupHeroRefs"))
            {
                HookedList.Add("SetupHeroRefs");
                On.GameManager.SetupHeroRefs += SetupHeroRefs;
            }
        }

        internal static event Delegates.SetupHeroRefs_BeforeArgs _beforeSetupHeroRefs;
        internal static event Delegates.SetupHeroRefs_AfterArgs _afterSetupHeroRefs;

        private static void SetupHeroRefs(On.GameManager.orig_SetupHeroRefs orig, GameManager self)
        {
            Delegates.Params_SetupHeroRefs @params = new()
            {
                self = self
            };
            if (_beforeSetupHeroRefs != null)
                foreach (Delegates.SetupHeroRefs_BeforeArgs toInvoke in _beforeSetupHeroRefs.GetInvocationList())
                    try
                    {
                        _beforeSetupHeroRefs?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSetupHeroRefs != null)
                foreach (Delegates.SetupHeroRefs_AfterArgs toInvoke in _afterSetupHeroRefs.GetInvocationList())
                    try
                    {
                        _afterSetupHeroRefs.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookBeginScene()
        {
            if (!HookedList.Contains("BeginScene"))
            {
                HookedList.Add("BeginScene");
                On.GameManager.BeginScene += BeginScene;
            }
        }

        internal static event Delegates.BeginScene_BeforeArgs _beforeBeginScene;
        internal static event Delegates.BeginScene_AfterArgs _afterBeginScene;

        private static void BeginScene(On.GameManager.orig_BeginScene orig, GameManager self)
        {
            Delegates.Params_BeginScene @params = new()
            {
                self = self
            };
            if (_beforeBeginScene != null)
                foreach (Delegates.BeginScene_BeforeArgs toInvoke in _beforeBeginScene.GetInvocationList())
                    try
                    {
                        _beforeBeginScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterBeginScene != null)
                foreach (Delegates.BeginScene_AfterArgs toInvoke in _afterBeginScene.GetInvocationList())
                    try
                    {
                        _afterBeginScene.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateUIStateFromGameState()
        {
            if (!HookedList.Contains("UpdateUIStateFromGameState"))
            {
                HookedList.Add("UpdateUIStateFromGameState");
                On.GameManager.UpdateUIStateFromGameState += UpdateUIStateFromGameState;
            }
        }

        internal static event Delegates.UpdateUIStateFromGameState_BeforeArgs _beforeUpdateUIStateFromGameState;
        internal static event Delegates.UpdateUIStateFromGameState_AfterArgs _afterUpdateUIStateFromGameState;

        private static void UpdateUIStateFromGameState(On.GameManager.orig_UpdateUIStateFromGameState orig,
            GameManager self)
        {
            Delegates.Params_UpdateUIStateFromGameState @params = new()
            {
                self = self
            };
            if (_beforeUpdateUIStateFromGameState != null)
                foreach (Delegates.UpdateUIStateFromGameState_BeforeArgs toInvoke in _beforeUpdateUIStateFromGameState
                             .GetInvocationList())
                    try
                    {
                        _beforeUpdateUIStateFromGameState?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateUIStateFromGameState != null)
                foreach (Delegates.UpdateUIStateFromGameState_AfterArgs toInvoke in _afterUpdateUIStateFromGameState
                             .GetInvocationList())
                    try
                    {
                        _afterUpdateUIStateFromGameState.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSkipCutscene()
        {
            if (!HookedList.Contains("SkipCutscene"))
            {
                HookedList.Add("SkipCutscene");
                On.GameManager.SkipCutscene += SkipCutscene;
            }
        }

        internal static event Delegates.SkipCutscene_BeforeArgs _beforeSkipCutscene;
        internal static event Delegates.SkipCutscene_AfterArgs _afterSkipCutscene;

        private static void SkipCutscene(On.GameManager.orig_SkipCutscene orig, GameManager self)
        {
            Delegates.Params_SkipCutscene @params = new()
            {
                self = self
            };
            if (_beforeSkipCutscene != null)
                foreach (Delegates.SkipCutscene_BeforeArgs toInvoke in _beforeSkipCutscene.GetInvocationList())
                    try
                    {
                        _beforeSkipCutscene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSkipCutscene != null)
                foreach (Delegates.SkipCutscene_AfterArgs toInvoke in _afterSkipCutscene.GetInvocationList())
                    try
                    {
                        _afterSkipCutscene.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSkipCutsceneNoMash()
        {
            if (!HookedList.Contains("SkipCutsceneNoMash"))
            {
                HookedList.Add("SkipCutsceneNoMash");
                On.GameManager.SkipCutsceneNoMash += SkipCutsceneNoMash;
            }
        }

        internal static event Delegates.SkipCutsceneNoMash_BeforeArgs _beforeSkipCutsceneNoMash;

        private static IEnumerator SkipCutsceneNoMash(On.GameManager.orig_SkipCutsceneNoMash orig, GameManager self)
        {
            Delegates.Params_SkipCutsceneNoMash @params = new()
            {
                self = self
            };
            if (_beforeSkipCutsceneNoMash != null)
                foreach (Delegates.SkipCutsceneNoMash_BeforeArgs toInvoke in
                         _beforeSkipCutsceneNoMash.GetInvocationList())
                    try
                    {
                        _beforeSkipCutsceneNoMash?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookNoLongerFirstGame()
        {
            if (!HookedList.Contains("NoLongerFirstGame"))
            {
                HookedList.Add("NoLongerFirstGame");
                On.GameManager.NoLongerFirstGame += NoLongerFirstGame;
            }
        }

        internal static event Delegates.NoLongerFirstGame_BeforeArgs _beforeNoLongerFirstGame;
        internal static event Delegates.NoLongerFirstGame_AfterArgs _afterNoLongerFirstGame;

        private static void NoLongerFirstGame(On.GameManager.orig_NoLongerFirstGame orig, GameManager self)
        {
            Delegates.Params_NoLongerFirstGame @params = new()
            {
                self = self
            };
            if (_beforeNoLongerFirstGame != null)
                foreach (Delegates.NoLongerFirstGame_BeforeArgs toInvoke in
                         _beforeNoLongerFirstGame.GetInvocationList())
                    try
                    {
                        _beforeNoLongerFirstGame?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterNoLongerFirstGame != null)
                foreach (Delegates.NoLongerFirstGame_AfterArgs toInvoke in _afterNoLongerFirstGame.GetInvocationList())
                    try
                    {
                        _afterNoLongerFirstGame.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetupStatusModifiers()
        {
            if (!HookedList.Contains("SetupStatusModifiers"))
            {
                HookedList.Add("SetupStatusModifiers");
                On.GameManager.SetupStatusModifiers += SetupStatusModifiers;
            }
        }

        internal static event Delegates.SetupStatusModifiers_BeforeArgs _beforeSetupStatusModifiers;
        internal static event Delegates.SetupStatusModifiers_AfterArgs _afterSetupStatusModifiers;

        private static void SetupStatusModifiers(On.GameManager.orig_SetupStatusModifiers orig, GameManager self)
        {
            Delegates.Params_SetupStatusModifiers @params = new()
            {
                self = self
            };
            if (_beforeSetupStatusModifiers != null)
                foreach (Delegates.SetupStatusModifiers_BeforeArgs toInvoke in _beforeSetupStatusModifiers
                             .GetInvocationList())
                    try
                    {
                        _beforeSetupStatusModifiers?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSetupStatusModifiers != null)
                foreach (Delegates.SetupStatusModifiers_AfterArgs toInvoke in _afterSetupStatusModifiers
                             .GetInvocationList())
                    try
                    {
                        _afterSetupStatusModifiers.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookMatchBackerCreditsSetting()
        {
            if (!HookedList.Contains("MatchBackerCreditsSetting"))
            {
                HookedList.Add("MatchBackerCreditsSetting");
                On.GameManager.MatchBackerCreditsSetting += MatchBackerCreditsSetting;
            }
        }

        internal static event Delegates.MatchBackerCreditsSetting_BeforeArgs _beforeMatchBackerCreditsSetting;
        internal static event Delegates.MatchBackerCreditsSetting_AfterArgs _afterMatchBackerCreditsSetting;

        private static void MatchBackerCreditsSetting(On.GameManager.orig_MatchBackerCreditsSetting orig,
            GameManager self)
        {
            Delegates.Params_MatchBackerCreditsSetting @params = new()
            {
                self = self
            };
            if (_beforeMatchBackerCreditsSetting != null)
                foreach (Delegates.MatchBackerCreditsSetting_BeforeArgs toInvoke in _beforeMatchBackerCreditsSetting
                             .GetInvocationList())
                    try
                    {
                        _beforeMatchBackerCreditsSetting?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterMatchBackerCreditsSetting != null)
                foreach (Delegates.MatchBackerCreditsSetting_AfterArgs toInvoke in _afterMatchBackerCreditsSetting
                             .GetInvocationList())
                    try
                    {
                        _afterMatchBackerCreditsSetting.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRefreshLocalization()
        {
            if (!HookedList.Contains("RefreshLocalization"))
            {
                HookedList.Add("RefreshLocalization");
                On.GameManager.RefreshLocalization += RefreshLocalization;
            }
        }

        internal static event Delegates.RefreshLocalization_BeforeArgs _beforeRefreshLocalization;
        internal static event Delegates.RefreshLocalization_AfterArgs _afterRefreshLocalization;

        private static void RefreshLocalization(On.GameManager.orig_RefreshLocalization orig, GameManager self)
        {
            Delegates.Params_RefreshLocalization @params = new()
            {
                self = self
            };
            if (_beforeRefreshLocalization != null)
                foreach (Delegates.RefreshLocalization_BeforeArgs toInvoke in _beforeRefreshLocalization
                             .GetInvocationList())
                    try
                    {
                        _beforeRefreshLocalization?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterRefreshLocalization != null)
                foreach (Delegates.RefreshLocalization_AfterArgs toInvoke in
                         _afterRefreshLocalization.GetInvocationList())
                    try
                    {
                        _afterRefreshLocalization.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRefreshParticleSystems()
        {
            if (!HookedList.Contains("RefreshParticleSystems"))
            {
                HookedList.Add("RefreshParticleSystems");
                On.GameManager.RefreshParticleSystems += RefreshParticleSystems;
            }
        }

        internal static event Delegates.RefreshParticleSystems_BeforeArgs _beforeRefreshParticleSystems;
        internal static event Delegates.RefreshParticleSystems_AfterArgs _afterRefreshParticleSystems;

        private static void RefreshParticleSystems(On.GameManager.orig_RefreshParticleSystems orig, GameManager self)
        {
            Delegates.Params_RefreshParticleSystems @params = new()
            {
                self = self
            };
            if (_beforeRefreshParticleSystems != null)
                foreach (Delegates.RefreshParticleSystems_BeforeArgs toInvoke in _beforeRefreshParticleSystems
                             .GetInvocationList())
                    try
                    {
                        _beforeRefreshParticleSystems?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterRefreshParticleSystems != null)
                foreach (Delegates.RefreshParticleSystems_AfterArgs toInvoke in _afterRefreshParticleSystems
                             .GetInvocationList())
                    try
                    {
                        _afterRefreshParticleSystems.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyNativeInput()
        {
            if (!HookedList.Contains("ApplyNativeInput"))
            {
                HookedList.Add("ApplyNativeInput");
                On.GameManager.ApplyNativeInput += ApplyNativeInput;
            }
        }

        internal static event Delegates.ApplyNativeInput_BeforeArgs _beforeApplyNativeInput;
        internal static event Delegates.ApplyNativeInput_AfterArgs _afterApplyNativeInput;

        private static void ApplyNativeInput(On.GameManager.orig_ApplyNativeInput orig, GameManager self)
        {
            Delegates.Params_ApplyNativeInput @params = new()
            {
                self = self
            };
            if (_beforeApplyNativeInput != null)
                foreach (Delegates.ApplyNativeInput_BeforeArgs toInvoke in _beforeApplyNativeInput.GetInvocationList())
                    try
                    {
                        _beforeApplyNativeInput?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyNativeInput != null)
                foreach (Delegates.ApplyNativeInput_AfterArgs toInvoke in _afterApplyNativeInput.GetInvocationList())
                    try
                    {
                        _afterApplyNativeInput.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookEnablePermadeathMode()
        {
            if (!HookedList.Contains("EnablePermadeathMode"))
            {
                HookedList.Add("EnablePermadeathMode");
                On.GameManager.EnablePermadeathMode += EnablePermadeathMode;
            }
        }

        internal static event Delegates.EnablePermadeathMode_BeforeArgs _beforeEnablePermadeathMode;
        internal static event Delegates.EnablePermadeathMode_AfterArgs _afterEnablePermadeathMode;

        private static void EnablePermadeathMode(On.GameManager.orig_EnablePermadeathMode orig, GameManager self)
        {
            Delegates.Params_EnablePermadeathMode @params = new()
            {
                self = self
            };
            if (_beforeEnablePermadeathMode != null)
                foreach (Delegates.EnablePermadeathMode_BeforeArgs toInvoke in _beforeEnablePermadeathMode
                             .GetInvocationList())
                    try
                    {
                        _beforeEnablePermadeathMode?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterEnablePermadeathMode != null)
                foreach (Delegates.EnablePermadeathMode_AfterArgs toInvoke in _afterEnablePermadeathMode
                             .GetInvocationList())
                    try
                    {
                        _afterEnablePermadeathMode.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetCurrentMapZone()
        {
            if (!HookedList.Contains("GetCurrentMapZone"))
            {
                HookedList.Add("GetCurrentMapZone");
                On.GameManager.GetCurrentMapZone += GetCurrentMapZone;
            }
        }

        internal static event Delegates.GetCurrentMapZone_BeforeArgs _beforeGetCurrentMapZone;
        internal static event Delegates.GetCurrentMapZone_AfterArgs _afterGetCurrentMapZone;

        private static string GetCurrentMapZone(On.GameManager.orig_GetCurrentMapZone orig, GameManager self)
        {
            Delegates.Params_GetCurrentMapZone @params = new()
            {
                self = self
            };
            if (_beforeGetCurrentMapZone != null)
                foreach (Delegates.GetCurrentMapZone_BeforeArgs toInvoke in
                         _beforeGetCurrentMapZone.GetInvocationList())
                    try
                    {
                        _beforeGetCurrentMapZone?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetCurrentMapZone != null)
                foreach (Delegates.GetCurrentMapZone_AfterArgs toInvoke in _afterGetCurrentMapZone.GetInvocationList())
                    try
                    {
                        retVal = _afterGetCurrentMapZone.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetSceneWidth()
        {
            if (!HookedList.Contains("GetSceneWidth"))
            {
                HookedList.Add("GetSceneWidth");
                On.GameManager.GetSceneWidth += GetSceneWidth;
            }
        }

        internal static event Delegates.GetSceneWidth_BeforeArgs _beforeGetSceneWidth;
        internal static event Delegates.GetSceneWidth_AfterArgs _afterGetSceneWidth;

        private static float GetSceneWidth(On.GameManager.orig_GetSceneWidth orig, GameManager self)
        {
            Delegates.Params_GetSceneWidth @params = new()
            {
                self = self
            };
            if (_beforeGetSceneWidth != null)
                foreach (Delegates.GetSceneWidth_BeforeArgs toInvoke in _beforeGetSceneWidth.GetInvocationList())
                    try
                    {
                        _beforeGetSceneWidth?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetSceneWidth != null)
                foreach (Delegates.GetSceneWidth_AfterArgs toInvoke in _afterGetSceneWidth.GetInvocationList())
                    try
                    {
                        retVal = _afterGetSceneWidth.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetSceneHeight()
        {
            if (!HookedList.Contains("GetSceneHeight"))
            {
                HookedList.Add("GetSceneHeight");
                On.GameManager.GetSceneHeight += GetSceneHeight;
            }
        }

        internal static event Delegates.GetSceneHeight_BeforeArgs _beforeGetSceneHeight;
        internal static event Delegates.GetSceneHeight_AfterArgs _afterGetSceneHeight;

        private static float GetSceneHeight(On.GameManager.orig_GetSceneHeight orig, GameManager self)
        {
            Delegates.Params_GetSceneHeight @params = new()
            {
                self = self
            };
            if (_beforeGetSceneHeight != null)
                foreach (Delegates.GetSceneHeight_BeforeArgs toInvoke in _beforeGetSceneHeight.GetInvocationList())
                    try
                    {
                        _beforeGetSceneHeight?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetSceneHeight != null)
                foreach (Delegates.GetSceneHeight_AfterArgs toInvoke in _afterGetSceneHeight.GetInvocationList())
                    try
                    {
                        retVal = _afterGetSceneHeight.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetSceneManager()
        {
            if (!HookedList.Contains("GetSceneManager"))
            {
                HookedList.Add("GetSceneManager");
                On.GameManager.GetSceneManager += GetSceneManager;
            }
        }

        internal static event Delegates.GetSceneManager_BeforeArgs _beforeGetSceneManager;
        internal static event Delegates.GetSceneManager_AfterArgs _afterGetSceneManager;

        private static GameObject GetSceneManager(On.GameManager.orig_GetSceneManager orig, GameManager self)
        {
            Delegates.Params_GetSceneManager @params = new()
            {
                self = self
            };
            if (_beforeGetSceneManager != null)
                foreach (Delegates.GetSceneManager_BeforeArgs toInvoke in _beforeGetSceneManager.GetInvocationList())
                    try
                    {
                        _beforeGetSceneManager?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetSceneManager != null)
                foreach (Delegates.GetSceneManager_AfterArgs toInvoke in _afterGetSceneManager.GetInvocationList())
                    try
                    {
                        retVal = _afterGetSceneManager.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetFormattedMapZoneString()
        {
            if (!HookedList.Contains("GetFormattedMapZoneString"))
            {
                HookedList.Add("GetFormattedMapZoneString");
                On.GameManager.GetFormattedMapZoneString += GetFormattedMapZoneString;
            }
        }

        internal static event Delegates.GetFormattedMapZoneString_BeforeArgs _beforeGetFormattedMapZoneString;
        internal static event Delegates.GetFormattedMapZoneString_AfterArgs _afterGetFormattedMapZoneString;

        private static string GetFormattedMapZoneString(On.GameManager.orig_GetFormattedMapZoneString orig,
            GameManager self, MapZone mapZone)
        {
            Delegates.Params_GetFormattedMapZoneString @params = new()
            {
                self = self, mapZone = mapZone
            };
            if (_beforeGetFormattedMapZoneString != null)
                foreach (Delegates.GetFormattedMapZoneString_BeforeArgs toInvoke in _beforeGetFormattedMapZoneString
                             .GetInvocationList())
                    try
                    {
                        _beforeGetFormattedMapZoneString?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            mapZone = @params.mapZone;
            var retVal = orig(self, mapZone);
            if (_afterGetFormattedMapZoneString != null)
                foreach (Delegates.GetFormattedMapZoneString_AfterArgs toInvoke in _afterGetFormattedMapZoneString
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetFormattedMapZoneString.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookUpdateSceneName()
        {
            if (!HookedList.Contains("UpdateSceneName"))
            {
                HookedList.Add("UpdateSceneName");
                On.GameManager.UpdateSceneName += UpdateSceneName;
            }
        }

        internal static event Delegates.UpdateSceneName_BeforeArgs _beforeUpdateSceneName;
        internal static event Delegates.UpdateSceneName_AfterArgs _afterUpdateSceneName;

        private static void UpdateSceneName(On.GameManager.orig_UpdateSceneName orig, GameManager self)
        {
            Delegates.Params_UpdateSceneName @params = new()
            {
                self = self
            };
            if (_beforeUpdateSceneName != null)
                foreach (Delegates.UpdateSceneName_BeforeArgs toInvoke in _beforeUpdateSceneName.GetInvocationList())
                    try
                    {
                        _beforeUpdateSceneName?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateSceneName != null)
                foreach (Delegates.UpdateSceneName_AfterArgs toInvoke in _afterUpdateSceneName.GetInvocationList())
                    try
                    {
                        _afterUpdateSceneName.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetBaseSceneName()
        {
            if (!HookedList.Contains("GetBaseSceneName"))
            {
                HookedList.Add("GetBaseSceneName");
                On.GameManager.GetBaseSceneName += GetBaseSceneName;
            }
        }

        internal static event Delegates.GetBaseSceneName_BeforeArgs _beforeGetBaseSceneName;
        internal static event Delegates.GetBaseSceneName_AfterArgs _afterGetBaseSceneName;

        private static string GetBaseSceneName(On.GameManager.orig_GetBaseSceneName orig, string fullSceneName)
        {
            Delegates.Params_GetBaseSceneName @params = new()
            {
                fullSceneName = fullSceneName
            };
            if (_beforeGetBaseSceneName != null)
                foreach (Delegates.GetBaseSceneName_BeforeArgs toInvoke in _beforeGetBaseSceneName.GetInvocationList())
                    try
                    {
                        _beforeGetBaseSceneName?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fullSceneName = @params.fullSceneName;
            var retVal = orig(fullSceneName);
            if (_afterGetBaseSceneName != null)
                foreach (Delegates.GetBaseSceneName_AfterArgs toInvoke in _afterGetBaseSceneName.GetInvocationList())
                    try
                    {
                        retVal = _afterGetBaseSceneName.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetSceneNameString()
        {
            if (!HookedList.Contains("GetSceneNameString"))
            {
                HookedList.Add("GetSceneNameString");
                On.GameManager.GetSceneNameString += GetSceneNameString;
            }
        }

        internal static event Delegates.GetSceneNameString_BeforeArgs _beforeGetSceneNameString;
        internal static event Delegates.GetSceneNameString_AfterArgs _afterGetSceneNameString;

        private static string GetSceneNameString(On.GameManager.orig_GetSceneNameString orig, GameManager self)
        {
            Delegates.Params_GetSceneNameString @params = new()
            {
                self = self
            };
            if (_beforeGetSceneNameString != null)
                foreach (Delegates.GetSceneNameString_BeforeArgs toInvoke in
                         _beforeGetSceneNameString.GetInvocationList())
                    try
                    {
                        _beforeGetSceneNameString?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetSceneNameString != null)
                foreach (Delegates.GetSceneNameString_AfterArgs toInvoke in
                         _afterGetSceneNameString.GetInvocationList())
                    try
                    {
                        retVal = _afterGetSceneNameString.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetTileMap()
        {
            if (!HookedList.Contains("GetTileMap"))
            {
                HookedList.Add("GetTileMap");
                On.GameManager.GetTileMap += GetTileMap;
            }
        }

        internal static event Delegates.GetTileMap_BeforeArgs _beforeGetTileMap;
        internal static event Delegates.GetTileMap_AfterArgs _afterGetTileMap;

        private static tk2dTileMap GetTileMap(On.GameManager.orig_GetTileMap orig, GameObject gameObject)
        {
            Delegates.Params_GetTileMap @params = new()
            {
                gameObject = gameObject
            };
            if (_beforeGetTileMap != null)
                foreach (Delegates.GetTileMap_BeforeArgs toInvoke in _beforeGetTileMap.GetInvocationList())
                    try
                    {
                        _beforeGetTileMap?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            gameObject = @params.gameObject;
            var retVal = orig(gameObject);
            if (_afterGetTileMap != null)
                foreach (Delegates.GetTileMap_AfterArgs toInvoke in _afterGetTileMap.GetInvocationList())
                    try
                    {
                        retVal = _afterGetTileMap.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookRefreshTilemapInfo()
        {
            if (!HookedList.Contains("RefreshTilemapInfo"))
            {
                HookedList.Add("RefreshTilemapInfo");
                On.GameManager.RefreshTilemapInfo += RefreshTilemapInfo;
            }
        }

        internal static event Delegates.RefreshTilemapInfo_BeforeArgs _beforeRefreshTilemapInfo;
        internal static event Delegates.RefreshTilemapInfo_AfterArgs _afterRefreshTilemapInfo;

        private static void RefreshTilemapInfo(On.GameManager.orig_RefreshTilemapInfo orig, GameManager self,
            string targetScene)
        {
            Delegates.Params_RefreshTilemapInfo @params = new()
            {
                self = self, targetScene = targetScene
            };
            if (_beforeRefreshTilemapInfo != null)
                foreach (Delegates.RefreshTilemapInfo_BeforeArgs toInvoke in
                         _beforeRefreshTilemapInfo.GetInvocationList())
                    try
                    {
                        _beforeRefreshTilemapInfo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            targetScene = @params.targetScene;
            orig(self, targetScene);
            if (_afterRefreshTilemapInfo != null)
                foreach (Delegates.RefreshTilemapInfo_AfterArgs toInvoke in
                         _afterRefreshTilemapInfo.GetInvocationList())
                    try
                    {
                        _afterRefreshTilemapInfo.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSaveLevelState()
        {
            if (!HookedList.Contains("SaveLevelState"))
            {
                HookedList.Add("SaveLevelState");
                On.GameManager.SaveLevelState += SaveLevelState;
            }
        }

        internal static event Delegates.SaveLevelState_BeforeArgs _beforeSaveLevelState;
        internal static event Delegates.SaveLevelState_AfterArgs _afterSaveLevelState;

        private static void SaveLevelState(On.GameManager.orig_SaveLevelState orig, GameManager self)
        {
            Delegates.Params_SaveLevelState @params = new()
            {
                self = self
            };
            if (_beforeSaveLevelState != null)
                foreach (Delegates.SaveLevelState_BeforeArgs toInvoke in _beforeSaveLevelState.GetInvocationList())
                    try
                    {
                        _beforeSaveLevelState?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSaveLevelState != null)
                foreach (Delegates.SaveLevelState_AfterArgs toInvoke in _afterSaveLevelState.GetInvocationList())
                    try
                    {
                        _afterSaveLevelState.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookResetSemiPersistentItems()
        {
            if (!HookedList.Contains("ResetSemiPersistentItems"))
            {
                HookedList.Add("ResetSemiPersistentItems");
                On.GameManager.ResetSemiPersistentItems += ResetSemiPersistentItems;
            }
        }

        internal static event Delegates.ResetSemiPersistentItems_BeforeArgs _beforeResetSemiPersistentItems;
        internal static event Delegates.ResetSemiPersistentItems_AfterArgs _afterResetSemiPersistentItems;

        private static void ResetSemiPersistentItems(On.GameManager.orig_ResetSemiPersistentItems orig,
            GameManager self)
        {
            Delegates.Params_ResetSemiPersistentItems @params = new()
            {
                self = self
            };
            if (_beforeResetSemiPersistentItems != null)
                foreach (Delegates.ResetSemiPersistentItems_BeforeArgs toInvoke in _beforeResetSemiPersistentItems
                             .GetInvocationList())
                    try
                    {
                        _beforeResetSemiPersistentItems?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterResetSemiPersistentItems != null)
                foreach (Delegates.ResetSemiPersistentItems_AfterArgs toInvoke in _afterResetSemiPersistentItems
                             .GetInvocationList())
                    try
                    {
                        _afterResetSemiPersistentItems.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookIsMenuScene()
        {
            if (!HookedList.Contains("IsMenuScene"))
            {
                HookedList.Add("IsMenuScene");
                On.GameManager.IsMenuScene += IsMenuScene;
            }
        }

        internal static event Delegates.IsMenuScene_BeforeArgs _beforeIsMenuScene;
        internal static event Delegates.IsMenuScene_AfterArgs _afterIsMenuScene;

        private static bool IsMenuScene(On.GameManager.orig_IsMenuScene orig, GameManager self)
        {
            Delegates.Params_IsMenuScene @params = new()
            {
                self = self
            };
            if (_beforeIsMenuScene != null)
                foreach (Delegates.IsMenuScene_BeforeArgs toInvoke in _beforeIsMenuScene.GetInvocationList())
                    try
                    {
                        _beforeIsMenuScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterIsMenuScene != null)
                foreach (Delegates.IsMenuScene_AfterArgs toInvoke in _afterIsMenuScene.GetInvocationList())
                    try
                    {
                        retVal = _afterIsMenuScene.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookIsTitleScreenScene()
        {
            if (!HookedList.Contains("IsTitleScreenScene"))
            {
                HookedList.Add("IsTitleScreenScene");
                On.GameManager.IsTitleScreenScene += IsTitleScreenScene;
            }
        }

        internal static event Delegates.IsTitleScreenScene_BeforeArgs _beforeIsTitleScreenScene;
        internal static event Delegates.IsTitleScreenScene_AfterArgs _afterIsTitleScreenScene;

        private static bool IsTitleScreenScene(On.GameManager.orig_IsTitleScreenScene orig, GameManager self)
        {
            Delegates.Params_IsTitleScreenScene @params = new()
            {
                self = self
            };
            if (_beforeIsTitleScreenScene != null)
                foreach (Delegates.IsTitleScreenScene_BeforeArgs toInvoke in
                         _beforeIsTitleScreenScene.GetInvocationList())
                    try
                    {
                        _beforeIsTitleScreenScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterIsTitleScreenScene != null)
                foreach (Delegates.IsTitleScreenScene_AfterArgs toInvoke in
                         _afterIsTitleScreenScene.GetInvocationList())
                    try
                    {
                        retVal = _afterIsTitleScreenScene.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookIsGameplayScene()
        {
            if (!HookedList.Contains("IsGameplayScene"))
            {
                HookedList.Add("IsGameplayScene");
                On.GameManager.IsGameplayScene += IsGameplayScene;
            }
        }

        internal static event Delegates.IsGameplayScene_BeforeArgs _beforeIsGameplayScene;
        internal static event Delegates.IsGameplayScene_AfterArgs _afterIsGameplayScene;

        private static bool IsGameplayScene(On.GameManager.orig_IsGameplayScene orig, GameManager self)
        {
            Delegates.Params_IsGameplayScene @params = new()
            {
                self = self
            };
            if (_beforeIsGameplayScene != null)
                foreach (Delegates.IsGameplayScene_BeforeArgs toInvoke in _beforeIsGameplayScene.GetInvocationList())
                    try
                    {
                        _beforeIsGameplayScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterIsGameplayScene != null)
                foreach (Delegates.IsGameplayScene_AfterArgs toInvoke in _afterIsGameplayScene.GetInvocationList())
                    try
                    {
                        retVal = _afterIsGameplayScene.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookIsNonGameplayScene()
        {
            if (!HookedList.Contains("IsNonGameplayScene"))
            {
                HookedList.Add("IsNonGameplayScene");
                On.GameManager.IsNonGameplayScene += IsNonGameplayScene;
            }
        }

        internal static event Delegates.IsNonGameplayScene_BeforeArgs _beforeIsNonGameplayScene;
        internal static event Delegates.IsNonGameplayScene_AfterArgs _afterIsNonGameplayScene;

        private static bool IsNonGameplayScene(On.GameManager.orig_IsNonGameplayScene orig, GameManager self)
        {
            Delegates.Params_IsNonGameplayScene @params = new()
            {
                self = self
            };
            if (_beforeIsNonGameplayScene != null)
                foreach (Delegates.IsNonGameplayScene_BeforeArgs toInvoke in
                         _beforeIsNonGameplayScene.GetInvocationList())
                    try
                    {
                        _beforeIsNonGameplayScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterIsNonGameplayScene != null)
                foreach (Delegates.IsNonGameplayScene_AfterArgs toInvoke in
                         _afterIsNonGameplayScene.GetInvocationList())
                    try
                    {
                        retVal = _afterIsNonGameplayScene.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookIsCinematicScene()
        {
            if (!HookedList.Contains("IsCinematicScene"))
            {
                HookedList.Add("IsCinematicScene");
                On.GameManager.IsCinematicScene += IsCinematicScene;
            }
        }

        internal static event Delegates.IsCinematicScene_BeforeArgs _beforeIsCinematicScene;
        internal static event Delegates.IsCinematicScene_AfterArgs _afterIsCinematicScene;

        private static bool IsCinematicScene(On.GameManager.orig_IsCinematicScene orig, GameManager self)
        {
            Delegates.Params_IsCinematicScene @params = new()
            {
                self = self
            };
            if (_beforeIsCinematicScene != null)
                foreach (Delegates.IsCinematicScene_BeforeArgs toInvoke in _beforeIsCinematicScene.GetInvocationList())
                    try
                    {
                        _beforeIsCinematicScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterIsCinematicScene != null)
                foreach (Delegates.IsCinematicScene_AfterArgs toInvoke in _afterIsCinematicScene.GetInvocationList())
                    try
                    {
                        retVal = _afterIsCinematicScene.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookIsStagTravelScene()
        {
            if (!HookedList.Contains("IsStagTravelScene"))
            {
                HookedList.Add("IsStagTravelScene");
                On.GameManager.IsStagTravelScene += IsStagTravelScene;
            }
        }

        internal static event Delegates.IsStagTravelScene_BeforeArgs _beforeIsStagTravelScene;
        internal static event Delegates.IsStagTravelScene_AfterArgs _afterIsStagTravelScene;

        private static bool IsStagTravelScene(On.GameManager.orig_IsStagTravelScene orig, GameManager self)
        {
            Delegates.Params_IsStagTravelScene @params = new()
            {
                self = self
            };
            if (_beforeIsStagTravelScene != null)
                foreach (Delegates.IsStagTravelScene_BeforeArgs toInvoke in
                         _beforeIsStagTravelScene.GetInvocationList())
                    try
                    {
                        _beforeIsStagTravelScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterIsStagTravelScene != null)
                foreach (Delegates.IsStagTravelScene_AfterArgs toInvoke in _afterIsStagTravelScene.GetInvocationList())
                    try
                    {
                        retVal = _afterIsStagTravelScene.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookIsBetaEndScene()
        {
            if (!HookedList.Contains("IsBetaEndScene"))
            {
                HookedList.Add("IsBetaEndScene");
                On.GameManager.IsBetaEndScene += IsBetaEndScene;
            }
        }

        internal static event Delegates.IsBetaEndScene_BeforeArgs _beforeIsBetaEndScene;
        internal static event Delegates.IsBetaEndScene_AfterArgs _afterIsBetaEndScene;

        private static bool IsBetaEndScene(On.GameManager.orig_IsBetaEndScene orig, GameManager self)
        {
            Delegates.Params_IsBetaEndScene @params = new()
            {
                self = self
            };
            if (_beforeIsBetaEndScene != null)
                foreach (Delegates.IsBetaEndScene_BeforeArgs toInvoke in _beforeIsBetaEndScene.GetInvocationList())
                    try
                    {
                        _beforeIsBetaEndScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterIsBetaEndScene != null)
                foreach (Delegates.IsBetaEndScene_AfterArgs toInvoke in _afterIsBetaEndScene.GetInvocationList())
                    try
                    {
                        retVal = _afterIsBetaEndScene.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookIsTutorialScene()
        {
            if (!HookedList.Contains("IsTutorialScene"))
            {
                HookedList.Add("IsTutorialScene");
                On.GameManager.IsTutorialScene += IsTutorialScene;
            }
        }

        internal static event Delegates.IsTutorialScene_BeforeArgs _beforeIsTutorialScene;
        internal static event Delegates.IsTutorialScene_AfterArgs _afterIsTutorialScene;

        private static bool IsTutorialScene(On.GameManager.orig_IsTutorialScene orig, GameManager self)
        {
            Delegates.Params_IsTutorialScene @params = new()
            {
                self = self
            };
            if (_beforeIsTutorialScene != null)
                foreach (Delegates.IsTutorialScene_BeforeArgs toInvoke in _beforeIsTutorialScene.GetInvocationList())
                    try
                    {
                        _beforeIsTutorialScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterIsTutorialScene != null)
                foreach (Delegates.IsTutorialScene_AfterArgs toInvoke in _afterIsTutorialScene.GetInvocationList())
                    try
                    {
                        retVal = _afterIsTutorialScene.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookIsTestScene()
        {
            if (!HookedList.Contains("IsTestScene"))
            {
                HookedList.Add("IsTestScene");
                On.GameManager.IsTestScene += IsTestScene;
            }
        }

        internal static event Delegates.IsTestScene_BeforeArgs _beforeIsTestScene;
        internal static event Delegates.IsTestScene_AfterArgs _afterIsTestScene;

        private static bool IsTestScene(On.GameManager.orig_IsTestScene orig, GameManager self)
        {
            Delegates.Params_IsTestScene @params = new()
            {
                self = self
            };
            if (_beforeIsTestScene != null)
                foreach (Delegates.IsTestScene_BeforeArgs toInvoke in _beforeIsTestScene.GetInvocationList())
                    try
                    {
                        _beforeIsTestScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterIsTestScene != null)
                foreach (Delegates.IsTestScene_AfterArgs toInvoke in _afterIsTestScene.GetInvocationList())
                    try
                    {
                        retVal = _afterIsTestScene.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookIsBossDoorScene()
        {
            if (!HookedList.Contains("IsBossDoorScene"))
            {
                HookedList.Add("IsBossDoorScene");
                On.GameManager.IsBossDoorScene += IsBossDoorScene;
            }
        }

        internal static event Delegates.IsBossDoorScene_BeforeArgs _beforeIsBossDoorScene;
        internal static event Delegates.IsBossDoorScene_AfterArgs _afterIsBossDoorScene;

        private static bool IsBossDoorScene(On.GameManager.orig_IsBossDoorScene orig, GameManager self)
        {
            Delegates.Params_IsBossDoorScene @params = new()
            {
                self = self
            };
            if (_beforeIsBossDoorScene != null)
                foreach (Delegates.IsBossDoorScene_BeforeArgs toInvoke in _beforeIsBossDoorScene.GetInvocationList())
                    try
                    {
                        _beforeIsBossDoorScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterIsBossDoorScene != null)
                foreach (Delegates.IsBossDoorScene_AfterArgs toInvoke in _afterIsBossDoorScene.GetInvocationList())
                    try
                    {
                        retVal = _afterIsBossDoorScene.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookShouldKeepHUDCameraActive()
        {
            if (!HookedList.Contains("ShouldKeepHUDCameraActive"))
            {
                HookedList.Add("ShouldKeepHUDCameraActive");
                On.GameManager.ShouldKeepHUDCameraActive += ShouldKeepHUDCameraActive;
            }
        }

        internal static event Delegates.ShouldKeepHUDCameraActive_BeforeArgs _beforeShouldKeepHUDCameraActive;
        internal static event Delegates.ShouldKeepHUDCameraActive_AfterArgs _afterShouldKeepHUDCameraActive;

        private static bool ShouldKeepHUDCameraActive(On.GameManager.orig_ShouldKeepHUDCameraActive orig,
            GameManager self)
        {
            Delegates.Params_ShouldKeepHUDCameraActive @params = new()
            {
                self = self
            };
            if (_beforeShouldKeepHUDCameraActive != null)
                foreach (Delegates.ShouldKeepHUDCameraActive_BeforeArgs toInvoke in _beforeShouldKeepHUDCameraActive
                             .GetInvocationList())
                    try
                    {
                        _beforeShouldKeepHUDCameraActive?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterShouldKeepHUDCameraActive != null)
                foreach (Delegates.ShouldKeepHUDCameraActive_AfterArgs toInvoke in _afterShouldKeepHUDCameraActive
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterShouldKeepHUDCameraActive.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetSceneZoneName()
        {
            if (!HookedList.Contains("GetSceneZoneName"))
            {
                HookedList.Add("GetSceneZoneName");
                On.GameManager.GetSceneZoneName += GetSceneZoneName;
            }
        }

        internal static event Delegates.GetSceneZoneName_BeforeArgs _beforeGetSceneZoneName;
        internal static event Delegates.GetSceneZoneName_AfterArgs _afterGetSceneZoneName;

        private static string GetSceneZoneName(On.GameManager.orig_GetSceneZoneName orig, string str)
        {
            Delegates.Params_GetSceneZoneName @params = new()
            {
                str = str
            };
            if (_beforeGetSceneZoneName != null)
                foreach (Delegates.GetSceneZoneName_BeforeArgs toInvoke in _beforeGetSceneZoneName.GetInvocationList())
                    try
                    {
                        _beforeGetSceneZoneName?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            str = @params.str;
            var retVal = orig(str);
            if (_afterGetSceneZoneName != null)
                foreach (Delegates.GetSceneZoneName_AfterArgs toInvoke in _afterGetSceneZoneName.GetInvocationList())
                    try
                    {
                        retVal = _afterGetSceneZoneName.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCountBits()
        {
            if (!HookedList.Contains("CountBits"))
            {
                HookedList.Add("CountBits");
                On.GameManager.CountBits += CountBits;
            }
        }

        internal static event Delegates.CountBits_BeforeArgs _beforeCountBits;
        internal static event Delegates.CountBits_AfterArgs _afterCountBits;

        private static int CountBits(On.GameManager.orig_CountBits orig, int val)
        {
            Delegates.Params_CountBits @params = new()
            {
                val = val
            };
            if (_beforeCountBits != null)
                foreach (Delegates.CountBits_BeforeArgs toInvoke in _beforeCountBits.GetInvocationList())
                    try
                    {
                        _beforeCountBits?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            val = @params.val;
            var retVal = orig(val);
            if (_afterCountBits != null)
                foreach (Delegates.CountBits_AfterArgs toInvoke in _afterCountBits.GetInvocationList())
                    try
                    {
                        retVal = _afterCountBits.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookIsUnloadAssetsRequired()
        {
            if (!HookedList.Contains("IsUnloadAssetsRequired"))
            {
                HookedList.Add("IsUnloadAssetsRequired");
                On.GameManager.IsUnloadAssetsRequired += IsUnloadAssetsRequired;
            }
        }

        internal static event Delegates.IsUnloadAssetsRequired_BeforeArgs _beforeIsUnloadAssetsRequired;
        internal static event Delegates.IsUnloadAssetsRequired_AfterArgs _afterIsUnloadAssetsRequired;

        private static bool IsUnloadAssetsRequired(On.GameManager.orig_IsUnloadAssetsRequired orig, GameManager self,
            string sourceSceneName, string destinationSceneName)
        {
            Delegates.Params_IsUnloadAssetsRequired @params = new()
            {
                self = self, sourceSceneName = sourceSceneName, destinationSceneName = destinationSceneName
            };
            if (_beforeIsUnloadAssetsRequired != null)
                foreach (Delegates.IsUnloadAssetsRequired_BeforeArgs toInvoke in _beforeIsUnloadAssetsRequired
                             .GetInvocationList())
                    try
                    {
                        _beforeIsUnloadAssetsRequired?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            sourceSceneName = @params.sourceSceneName;
            destinationSceneName = @params.destinationSceneName;
            var retVal = orig(self, sourceSceneName, destinationSceneName);
            if (_afterIsUnloadAssetsRequired != null)
                foreach (Delegates.IsUnloadAssetsRequired_AfterArgs toInvoke in _afterIsUnloadAssetsRequired
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterIsUnloadAssetsRequired.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookHasSaveFile()
        {
            if (!HookedList.Contains("HasSaveFile"))
            {
                HookedList.Add("HasSaveFile");
                On.GameManager.HasSaveFile += HasSaveFile;
            }
        }

        internal static event Delegates.HasSaveFile_BeforeArgs _beforeHasSaveFile;
        internal static event Delegates.HasSaveFile_AfterArgs _afterHasSaveFile;

        private static void HasSaveFile(On.GameManager.orig_HasSaveFile orig, GameManager self, int saveSlot,
            Action<bool> callback)
        {
            Delegates.Params_HasSaveFile @params = new()
            {
                self = self, saveSlot = saveSlot, callback = callback
            };
            if (_beforeHasSaveFile != null)
                foreach (Delegates.HasSaveFile_BeforeArgs toInvoke in _beforeHasSaveFile.GetInvocationList())
                    try
                    {
                        _beforeHasSaveFile?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            saveSlot = @params.saveSlot;
            callback = @params.callback;
            orig(self, saveSlot, callback);
            if (_afterHasSaveFile != null)
                foreach (Delegates.HasSaveFile_AfterArgs toInvoke in _afterHasSaveFile.GetInvocationList())
                    try
                    {
                        _afterHasSaveFile.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSaveGame()
        {
            if (!HookedList.Contains("SaveGame"))
            {
                HookedList.Add("SaveGame");
                On.GameManager.SaveGame += SaveGame;
            }
        }

        internal static event Delegates.SaveGame_BeforeArgs _beforeSaveGame;
        internal static event Delegates.SaveGame_AfterArgs _afterSaveGame;

        private static void SaveGame(On.GameManager.orig_SaveGame orig, GameManager self)
        {
            Delegates.Params_SaveGame @params = new()
            {
                self = self
            };
            if (_beforeSaveGame != null)
                foreach (Delegates.SaveGame_BeforeArgs toInvoke in _beforeSaveGame.GetInvocationList())
                    try
                    {
                        _beforeSaveGame?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSaveGame != null)
                foreach (Delegates.SaveGame_AfterArgs toInvoke in _afterSaveGame.GetInvocationList())
                    try
                    {
                        _afterSaveGame.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookShowSaveIcon()
        {
            if (!HookedList.Contains("ShowSaveIcon"))
            {
                HookedList.Add("ShowSaveIcon");
                On.GameManager.ShowSaveIcon += ShowSaveIcon;
            }
        }

        internal static event Delegates.ShowSaveIcon_BeforeArgs _beforeShowSaveIcon;
        internal static event Delegates.ShowSaveIcon_AfterArgs _afterShowSaveIcon;

        private static void ShowSaveIcon(On.GameManager.orig_ShowSaveIcon orig, GameManager self)
        {
            Delegates.Params_ShowSaveIcon @params = new()
            {
                self = self
            };
            if (_beforeShowSaveIcon != null)
                foreach (Delegates.ShowSaveIcon_BeforeArgs toInvoke in _beforeShowSaveIcon.GetInvocationList())
                    try
                    {
                        _beforeShowSaveIcon?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterShowSaveIcon != null)
                foreach (Delegates.ShowSaveIcon_AfterArgs toInvoke in _afterShowSaveIcon.GetInvocationList())
                    try
                    {
                        _afterShowSaveIcon.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookHideSaveIcon()
        {
            if (!HookedList.Contains("HideSaveIcon"))
            {
                HookedList.Add("HideSaveIcon");
                On.GameManager.HideSaveIcon += HideSaveIcon;
            }
        }

        internal static event Delegates.HideSaveIcon_BeforeArgs _beforeHideSaveIcon;
        internal static event Delegates.HideSaveIcon_AfterArgs _afterHideSaveIcon;

        private static void HideSaveIcon(On.GameManager.orig_HideSaveIcon orig, GameManager self)
        {
            Delegates.Params_HideSaveIcon @params = new()
            {
                self = self
            };
            if (_beforeHideSaveIcon != null)
                foreach (Delegates.HideSaveIcon_BeforeArgs toInvoke in _beforeHideSaveIcon.GetInvocationList())
                    try
                    {
                        _beforeHideSaveIcon?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterHideSaveIcon != null)
                foreach (Delegates.HideSaveIcon_AfterArgs toInvoke in _afterHideSaveIcon.GetInvocationList())
                    try
                    {
                        _afterHideSaveIcon.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSaveGame_Action()
        {
            if (!HookedList.Contains("SaveGame_Action"))
            {
                HookedList.Add("SaveGame_Action");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "SaveGame_Action"), SaveGame_Action);
            }
        }

        internal static event Delegates.SaveGame_Action_BeforeArgs _beforeSaveGame_Action;
        internal static event Delegates.SaveGame_Action_AfterArgs _afterSaveGame_Action;

        private static void SaveGame_Action(Action<GameManager, Action<bool>> orig, GameManager self,
            Action<bool> callback)
        {
            Delegates.Params_SaveGame_Action @params = new()
            {
                self = self, callback = callback
            };
            if (_beforeSaveGame_Action != null)
                foreach (Delegates.SaveGame_Action_BeforeArgs toInvoke in _beforeSaveGame_Action.GetInvocationList())
                    try
                    {
                        _beforeSaveGame_Action?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            callback = @params.callback;
            orig(self, callback);
            if (_afterSaveGame_Action != null)
                foreach (Delegates.SaveGame_Action_AfterArgs toInvoke in _afterSaveGame_Action.GetInvocationList())
                    try
                    {
                        _afterSaveGame_Action.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookResetGameTimer()
        {
            if (!HookedList.Contains("ResetGameTimer"))
            {
                HookedList.Add("ResetGameTimer");
                On.GameManager.ResetGameTimer += ResetGameTimer;
            }
        }

        internal static event Delegates.ResetGameTimer_BeforeArgs _beforeResetGameTimer;
        internal static event Delegates.ResetGameTimer_AfterArgs _afterResetGameTimer;

        private static void ResetGameTimer(On.GameManager.orig_ResetGameTimer orig, GameManager self)
        {
            Delegates.Params_ResetGameTimer @params = new()
            {
                self = self
            };
            if (_beforeResetGameTimer != null)
                foreach (Delegates.ResetGameTimer_BeforeArgs toInvoke in _beforeResetGameTimer.GetInvocationList())
                    try
                    {
                        _beforeResetGameTimer?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterResetGameTimer != null)
                foreach (Delegates.ResetGameTimer_AfterArgs toInvoke in _afterResetGameTimer.GetInvocationList())
                    try
                    {
                        _afterResetGameTimer.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookIncreaseGameTimer()
        {
            if (!HookedList.Contains("IncreaseGameTimer"))
            {
                HookedList.Add("IncreaseGameTimer");
                On.GameManager.IncreaseGameTimer += IncreaseGameTimer;
            }
        }

        internal static event Delegates.IncreaseGameTimer_BeforeArgs _beforeIncreaseGameTimer;
        internal static event Delegates.IncreaseGameTimer_AfterArgs _afterIncreaseGameTimer;

        private static void IncreaseGameTimer(On.GameManager.orig_IncreaseGameTimer orig, GameManager self,
            ref float timer)
        {
            Delegates.Params_IncreaseGameTimer @params = new()
            {
                self = self, timer = timer
            };
            if (_beforeIncreaseGameTimer != null)
                foreach (Delegates.IncreaseGameTimer_BeforeArgs toInvoke in
                         _beforeIncreaseGameTimer.GetInvocationList())
                    try
                    {
                        _beforeIncreaseGameTimer?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            timer = @params.timer;
            orig(self, ref timer);
            if (_afterIncreaseGameTimer != null)
                foreach (Delegates.IncreaseGameTimer_AfterArgs toInvoke in _afterIncreaseGameTimer.GetInvocationList())
                    try
                    {
                        _afterIncreaseGameTimer.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSaveGame_int_Action()
        {
            if (!HookedList.Contains("SaveGame_int_Action"))
            {
                HookedList.Add("SaveGame_int_Action");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "SaveGame_int_Action"),
                    SaveGame_int_Action);
            }
        }

        internal static event Delegates.SaveGame_int_Action_BeforeArgs _beforeSaveGame_int_Action;
        internal static event Delegates.SaveGame_int_Action_AfterArgs _afterSaveGame_int_Action;

        private static void SaveGame_int_Action(Action<GameManager, int, Action<bool>> orig, GameManager self,
            int saveSlot, Action<bool> callback)
        {
            Delegates.Params_SaveGame_int_Action @params = new()
            {
                self = self, saveSlot = saveSlot, callback = callback
            };
            if (_beforeSaveGame_int_Action != null)
                foreach (Delegates.SaveGame_int_Action_BeforeArgs toInvoke in _beforeSaveGame_int_Action
                             .GetInvocationList())
                    try
                    {
                        _beforeSaveGame_int_Action?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            saveSlot = @params.saveSlot;
            callback = @params.callback;
            orig(self, saveSlot, callback);
            if (_afterSaveGame_int_Action != null)
                foreach (Delegates.SaveGame_int_Action_AfterArgs toInvoke in
                         _afterSaveGame_int_Action.GetInvocationList())
                    try
                    {
                        _afterSaveGame_int_Action.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLoadGameFromUI()
        {
            if (!HookedList.Contains("LoadGameFromUI"))
            {
                HookedList.Add("LoadGameFromUI");
                On.GameManager.LoadGameFromUI += LoadGameFromUI;
            }
        }

        internal static event Delegates.LoadGameFromUI_BeforeArgs _beforeLoadGameFromUI;
        internal static event Delegates.LoadGameFromUI_AfterArgs _afterLoadGameFromUI;

        private static void LoadGameFromUI(On.GameManager.orig_LoadGameFromUI orig, GameManager self, int saveSlot)
        {
            Delegates.Params_LoadGameFromUI @params = new()
            {
                self = self, saveSlot = saveSlot
            };
            if (_beforeLoadGameFromUI != null)
                foreach (Delegates.LoadGameFromUI_BeforeArgs toInvoke in _beforeLoadGameFromUI.GetInvocationList())
                    try
                    {
                        _beforeLoadGameFromUI?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            saveSlot = @params.saveSlot;
            orig(self, saveSlot);
            if (_afterLoadGameFromUI != null)
                foreach (Delegates.LoadGameFromUI_AfterArgs toInvoke in _afterLoadGameFromUI.GetInvocationList())
                    try
                    {
                        _afterLoadGameFromUI.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLoadGameFromUIRoutine()
        {
            if (!HookedList.Contains("LoadGameFromUIRoutine"))
            {
                HookedList.Add("LoadGameFromUIRoutine");
                On.GameManager.LoadGameFromUIRoutine += LoadGameFromUIRoutine;
            }
        }

        internal static event Delegates.LoadGameFromUIRoutine_BeforeArgs _beforeLoadGameFromUIRoutine;

        private static IEnumerator LoadGameFromUIRoutine(On.GameManager.orig_LoadGameFromUIRoutine orig,
            GameManager self, int saveSlot)
        {
            Delegates.Params_LoadGameFromUIRoutine @params = new()
            {
                self = self, saveSlot = saveSlot
            };
            if (_beforeLoadGameFromUIRoutine != null)
                foreach (Delegates.LoadGameFromUIRoutine_BeforeArgs toInvoke in _beforeLoadGameFromUIRoutine
                             .GetInvocationList())
                    try
                    {
                        _beforeLoadGameFromUIRoutine?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            saveSlot = @params.saveSlot;
            return orig(self, saveSlot);
        }

        internal static void HookLoadGame()
        {
            if (!HookedList.Contains("LoadGame"))
            {
                HookedList.Add("LoadGame");
                On.GameManager.LoadGame += LoadGame;
            }
        }

        internal static event Delegates.LoadGame_BeforeArgs _beforeLoadGame;
        internal static event Delegates.LoadGame_AfterArgs _afterLoadGame;

        private static void LoadGame(On.GameManager.orig_LoadGame orig, GameManager self, int saveSlot,
            Action<bool> callback)
        {
            Delegates.Params_LoadGame @params = new()
            {
                self = self, saveSlot = saveSlot, callback = callback
            };
            if (_beforeLoadGame != null)
                foreach (Delegates.LoadGame_BeforeArgs toInvoke in _beforeLoadGame.GetInvocationList())
                    try
                    {
                        _beforeLoadGame?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            saveSlot = @params.saveSlot;
            callback = @params.callback;
            orig(self, saveSlot, callback);
            if (_afterLoadGame != null)
                foreach (Delegates.LoadGame_AfterArgs toInvoke in _afterLoadGame.GetInvocationList())
                    try
                    {
                        _afterLoadGame.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookClearSaveFile()
        {
            if (!HookedList.Contains("ClearSaveFile"))
            {
                HookedList.Add("ClearSaveFile");
                On.GameManager.ClearSaveFile += ClearSaveFile;
            }
        }

        internal static event Delegates.ClearSaveFile_BeforeArgs _beforeClearSaveFile;
        internal static event Delegates.ClearSaveFile_AfterArgs _afterClearSaveFile;

        private static void ClearSaveFile(On.GameManager.orig_ClearSaveFile orig, GameManager self, int saveSlot,
            Action<bool> callback)
        {
            Delegates.Params_ClearSaveFile @params = new()
            {
                self = self, saveSlot = saveSlot, callback = callback
            };
            if (_beforeClearSaveFile != null)
                foreach (Delegates.ClearSaveFile_BeforeArgs toInvoke in _beforeClearSaveFile.GetInvocationList())
                    try
                    {
                        _beforeClearSaveFile?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            saveSlot = @params.saveSlot;
            callback = @params.callback;
            orig(self, saveSlot, callback);
            if (_afterClearSaveFile != null)
                foreach (Delegates.ClearSaveFile_AfterArgs toInvoke in _afterClearSaveFile.GetInvocationList())
                    try
                    {
                        _afterClearSaveFile.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetSaveStatsForSlot()
        {
            if (!HookedList.Contains("GetSaveStatsForSlot"))
            {
                HookedList.Add("GetSaveStatsForSlot");
                On.GameManager.GetSaveStatsForSlot += GetSaveStatsForSlot;
            }
        }

        internal static event Delegates.GetSaveStatsForSlot_BeforeArgs _beforeGetSaveStatsForSlot;
        internal static event Delegates.GetSaveStatsForSlot_AfterArgs _afterGetSaveStatsForSlot;

        private static void GetSaveStatsForSlot(On.GameManager.orig_GetSaveStatsForSlot orig, GameManager self,
            int saveSlot, Action<SaveStats> callback)
        {
            Delegates.Params_GetSaveStatsForSlot @params = new()
            {
                self = self, saveSlot = saveSlot, callback = callback
            };
            if (_beforeGetSaveStatsForSlot != null)
                foreach (Delegates.GetSaveStatsForSlot_BeforeArgs toInvoke in _beforeGetSaveStatsForSlot
                             .GetInvocationList())
                    try
                    {
                        _beforeGetSaveStatsForSlot?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            saveSlot = @params.saveSlot;
            callback = @params.callback;
            orig(self, saveSlot, callback);
            if (_afterGetSaveStatsForSlot != null)
                foreach (Delegates.GetSaveStatsForSlot_AfterArgs toInvoke in
                         _afterGetSaveStatsForSlot.GetInvocationList())
                    try
                    {
                        _afterGetSaveStatsForSlot.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPauseGameToggleByMenu()
        {
            if (!HookedList.Contains("PauseGameToggleByMenu"))
            {
                HookedList.Add("PauseGameToggleByMenu");
                On.GameManager.PauseGameToggleByMenu += PauseGameToggleByMenu;
            }
        }

        internal static event Delegates.PauseGameToggleByMenu_BeforeArgs _beforePauseGameToggleByMenu;

        private static IEnumerator PauseGameToggleByMenu(On.GameManager.orig_PauseGameToggleByMenu orig,
            GameManager self)
        {
            Delegates.Params_PauseGameToggleByMenu @params = new()
            {
                self = self
            };
            if (_beforePauseGameToggleByMenu != null)
                foreach (Delegates.PauseGameToggleByMenu_BeforeArgs toInvoke in _beforePauseGameToggleByMenu
                             .GetInvocationList())
                    try
                    {
                        _beforePauseGameToggleByMenu?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookPauseGameToggle()
        {
            if (!HookedList.Contains("PauseGameToggle"))
            {
                HookedList.Add("PauseGameToggle");
                On.GameManager.PauseGameToggle += PauseGameToggle;
            }
        }

        internal static event Delegates.PauseGameToggle_BeforeArgs _beforePauseGameToggle;

        private static IEnumerator PauseGameToggle(On.GameManager.orig_PauseGameToggle orig, GameManager self)
        {
            Delegates.Params_PauseGameToggle @params = new()
            {
                self = self
            };
            if (_beforePauseGameToggle != null)
                foreach (Delegates.PauseGameToggle_BeforeArgs toInvoke in _beforePauseGameToggle.GetInvocationList())
                    try
                    {
                        _beforePauseGameToggle?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookSetTimeScale_float_float()
        {
            if (!HookedList.Contains("SetTimeScale_float_float"))
            {
                HookedList.Add("SetTimeScale_float_float");
                On.GameManager.SetTimeScale_float_float += SetTimeScale_float_float;
            }
        }

        internal static event Delegates.SetTimeScale_float_float_BeforeArgs _beforeSetTimeScale_float_float;

        private static IEnumerator SetTimeScale_float_float(On.GameManager.orig_SetTimeScale_float_float orig,
            GameManager self, float newTimeScale, float duration)
        {
            Delegates.Params_SetTimeScale_float_float @params = new()
            {
                self = self, newTimeScale = newTimeScale, duration = duration
            };
            if (_beforeSetTimeScale_float_float != null)
                foreach (Delegates.SetTimeScale_float_float_BeforeArgs toInvoke in _beforeSetTimeScale_float_float
                             .GetInvocationList())
                    try
                    {
                        _beforeSetTimeScale_float_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            newTimeScale = @params.newTimeScale;
            duration = @params.duration;
            return orig(self, newTimeScale, duration);
        }

        internal static void HookSetTimeScale_float()
        {
            if (!HookedList.Contains("SetTimeScale_float"))
            {
                HookedList.Add("SetTimeScale_float");
                On.GameManager.SetTimeScale_float += SetTimeScale_float;
            }
        }

        internal static event Delegates.SetTimeScale_float_BeforeArgs _beforeSetTimeScale_float;
        internal static event Delegates.SetTimeScale_float_AfterArgs _afterSetTimeScale_float;

        private static void SetTimeScale_float(On.GameManager.orig_SetTimeScale_float orig, GameManager self,
            float newTimeScale)
        {
            Delegates.Params_SetTimeScale_float @params = new()
            {
                self = self, newTimeScale = newTimeScale
            };
            if (_beforeSetTimeScale_float != null)
                foreach (Delegates.SetTimeScale_float_BeforeArgs toInvoke in
                         _beforeSetTimeScale_float.GetInvocationList())
                    try
                    {
                        _beforeSetTimeScale_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            newTimeScale = @params.newTimeScale;
            orig(self, newTimeScale);
            if (_afterSetTimeScale_float != null)
                foreach (Delegates.SetTimeScale_float_AfterArgs toInvoke in
                         _afterSetTimeScale_float.GetInvocationList())
                    try
                    {
                        _afterSetTimeScale_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFreezeMoment_int()
        {
            if (!HookedList.Contains("FreezeMoment_int"))
            {
                HookedList.Add("FreezeMoment_int");
                On.GameManager.FreezeMoment_int += FreezeMoment_int;
            }
        }

        internal static event Delegates.FreezeMoment_int_BeforeArgs _beforeFreezeMoment_int;
        internal static event Delegates.FreezeMoment_int_AfterArgs _afterFreezeMoment_int;

        private static void FreezeMoment_int(On.GameManager.orig_FreezeMoment_int orig, GameManager self, int type)
        {
            Delegates.Params_FreezeMoment_int @params = new()
            {
                self = self, type = type
            };
            if (_beforeFreezeMoment_int != null)
                foreach (Delegates.FreezeMoment_int_BeforeArgs toInvoke in _beforeFreezeMoment_int.GetInvocationList())
                    try
                    {
                        _beforeFreezeMoment_int?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            type = @params.type;
            orig(self, type);
            if (_afterFreezeMoment_int != null)
                foreach (Delegates.FreezeMoment_int_AfterArgs toInvoke in _afterFreezeMoment_int.GetInvocationList())
                    try
                    {
                        _afterFreezeMoment_int.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFreezeMoment_float_float_float_float()
        {
            if (!HookedList.Contains("FreezeMoment_float_float_float_float"))
            {
                HookedList.Add("FreezeMoment_float_float_float_float");
                On.GameManager.FreezeMoment_float_float_float_float += FreezeMoment_float_float_float_float;
            }
        }

        internal static event Delegates.FreezeMoment_float_float_float_float_BeforeArgs
            _beforeFreezeMoment_float_float_float_float;

        private static IEnumerator FreezeMoment_float_float_float_float(
            On.GameManager.orig_FreezeMoment_float_float_float_float orig, GameManager self, float rampDownTime,
            float waitTime, float rampUpTime, float targetSpeed)
        {
            Delegates.Params_FreezeMoment_float_float_float_float @params = new()
            {
                self = self, rampDownTime = rampDownTime, waitTime = waitTime, rampUpTime = rampUpTime,
                targetSpeed = targetSpeed
            };
            if (_beforeFreezeMoment_float_float_float_float != null)
                foreach (Delegates.FreezeMoment_float_float_float_float_BeforeArgs toInvoke in
                         _beforeFreezeMoment_float_float_float_float.GetInvocationList())
                    try
                    {
                        _beforeFreezeMoment_float_float_float_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            rampDownTime = @params.rampDownTime;
            waitTime = @params.waitTime;
            rampUpTime = @params.rampUpTime;
            targetSpeed = @params.targetSpeed;
            return orig(self, rampDownTime, waitTime, rampUpTime, targetSpeed);
        }

        internal static void HookFreezeMomentGC()
        {
            if (!HookedList.Contains("FreezeMomentGC"))
            {
                HookedList.Add("FreezeMomentGC");
                On.GameManager.FreezeMomentGC += FreezeMomentGC;
            }
        }

        internal static event Delegates.FreezeMomentGC_BeforeArgs _beforeFreezeMomentGC;

        private static IEnumerator FreezeMomentGC(On.GameManager.orig_FreezeMomentGC orig, GameManager self,
            float rampDownTime, float waitTime, float rampUpTime, float targetSpeed)
        {
            Delegates.Params_FreezeMomentGC @params = new()
            {
                self = self, rampDownTime = rampDownTime, waitTime = waitTime, rampUpTime = rampUpTime,
                targetSpeed = targetSpeed
            };
            if (_beforeFreezeMomentGC != null)
                foreach (Delegates.FreezeMomentGC_BeforeArgs toInvoke in _beforeFreezeMomentGC.GetInvocationList())
                    try
                    {
                        _beforeFreezeMomentGC?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            rampDownTime = @params.rampDownTime;
            waitTime = @params.waitTime;
            rampUpTime = @params.rampUpTime;
            targetSpeed = @params.targetSpeed;
            return orig(self, rampDownTime, waitTime, rampUpTime, targetSpeed);
        }

        internal static void HookFreezeMoment_float_float_float_bool()
        {
            if (!HookedList.Contains("FreezeMoment_float_float_float_bool"))
            {
                HookedList.Add("FreezeMoment_float_float_float_bool");
                On.GameManager.FreezeMoment_float_float_float_bool += FreezeMoment_float_float_float_bool;
            }
        }

        internal static event Delegates.FreezeMoment_float_float_float_bool_BeforeArgs
            _beforeFreezeMoment_float_float_float_bool;

        private static IEnumerator FreezeMoment_float_float_float_bool(
            On.GameManager.orig_FreezeMoment_float_float_float_bool orig, GameManager self, float rampDownTime,
            float waitTime, float rampUpTime, bool runGc)
        {
            Delegates.Params_FreezeMoment_float_float_float_bool @params = new()
            {
                self = self, rampDownTime = rampDownTime, waitTime = waitTime, rampUpTime = rampUpTime, runGc = runGc
            };
            if (_beforeFreezeMoment_float_float_float_bool != null)
                foreach (Delegates.FreezeMoment_float_float_float_bool_BeforeArgs toInvoke in
                         _beforeFreezeMoment_float_float_float_bool.GetInvocationList())
                    try
                    {
                        _beforeFreezeMoment_float_float_float_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            rampDownTime = @params.rampDownTime;
            waitTime = @params.waitTime;
            rampUpTime = @params.rampUpTime;
            runGc = @params.runGc;
            return orig(self, rampDownTime, waitTime, rampUpTime, runGc);
        }

        internal static void HookEnsureSaveSlotSpace()
        {
            if (!HookedList.Contains("EnsureSaveSlotSpace"))
            {
                HookedList.Add("EnsureSaveSlotSpace");
                On.GameManager.EnsureSaveSlotSpace += EnsureSaveSlotSpace;
            }
        }

        internal static event Delegates.EnsureSaveSlotSpace_BeforeArgs _beforeEnsureSaveSlotSpace;
        internal static event Delegates.EnsureSaveSlotSpace_AfterArgs _afterEnsureSaveSlotSpace;

        private static void EnsureSaveSlotSpace(On.GameManager.orig_EnsureSaveSlotSpace orig, GameManager self,
            Action<bool> callback)
        {
            Delegates.Params_EnsureSaveSlotSpace @params = new()
            {
                self = self, callback = callback
            };
            if (_beforeEnsureSaveSlotSpace != null)
                foreach (Delegates.EnsureSaveSlotSpace_BeforeArgs toInvoke in _beforeEnsureSaveSlotSpace
                             .GetInvocationList())
                    try
                    {
                        _beforeEnsureSaveSlotSpace?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            callback = @params.callback;
            orig(self, callback);
            if (_afterEnsureSaveSlotSpace != null)
                foreach (Delegates.EnsureSaveSlotSpace_AfterArgs toInvoke in
                         _afterEnsureSaveSlotSpace.GetInvocationList())
                    try
                    {
                        _afterEnsureSaveSlotSpace.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStartNewGame()
        {
            if (!HookedList.Contains("StartNewGame"))
            {
                HookedList.Add("StartNewGame");
                On.GameManager.StartNewGame += StartNewGame;
            }
        }

        internal static event Delegates.StartNewGame_BeforeArgs _beforeStartNewGame;
        internal static event Delegates.StartNewGame_AfterArgs _afterStartNewGame;

        private static void StartNewGame(On.GameManager.orig_StartNewGame orig, GameManager self, bool permadeathMode,
            bool bossRushMode)
        {
            Delegates.Params_StartNewGame @params = new()
            {
                self = self, permadeathMode = permadeathMode, bossRushMode = bossRushMode
            };
            if (_beforeStartNewGame != null)
                foreach (Delegates.StartNewGame_BeforeArgs toInvoke in _beforeStartNewGame.GetInvocationList())
                    try
                    {
                        _beforeStartNewGame?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            permadeathMode = @params.permadeathMode;
            bossRushMode = @params.bossRushMode;
            orig(self, permadeathMode, bossRushMode);
            if (_afterStartNewGame != null)
                foreach (Delegates.StartNewGame_AfterArgs toInvoke in _afterStartNewGame.GetInvocationList())
                    try
                    {
                        _afterStartNewGame.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRunStartNewGame()
        {
            if (!HookedList.Contains("RunStartNewGame"))
            {
                HookedList.Add("RunStartNewGame");
                On.GameManager.RunStartNewGame += RunStartNewGame;
            }
        }

        internal static event Delegates.RunStartNewGame_BeforeArgs _beforeRunStartNewGame;

        private static IEnumerator RunStartNewGame(On.GameManager.orig_RunStartNewGame orig, GameManager self)
        {
            Delegates.Params_RunStartNewGame @params = new()
            {
                self = self
            };
            if (_beforeRunStartNewGame != null)
                foreach (Delegates.RunStartNewGame_BeforeArgs toInvoke in _beforeRunStartNewGame.GetInvocationList())
                    try
                    {
                        _beforeRunStartNewGame?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookContinueGame()
        {
            if (!HookedList.Contains("ContinueGame"))
            {
                HookedList.Add("ContinueGame");
                On.GameManager.ContinueGame += ContinueGame;
            }
        }

        internal static event Delegates.ContinueGame_BeforeArgs _beforeContinueGame;
        internal static event Delegates.ContinueGame_AfterArgs _afterContinueGame;

        private static void ContinueGame(On.GameManager.orig_ContinueGame orig, GameManager self)
        {
            Delegates.Params_ContinueGame @params = new()
            {
                self = self
            };
            if (_beforeContinueGame != null)
                foreach (Delegates.ContinueGame_BeforeArgs toInvoke in _beforeContinueGame.GetInvocationList())
                    try
                    {
                        _beforeContinueGame?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterContinueGame != null)
                foreach (Delegates.ContinueGame_AfterArgs toInvoke in _afterContinueGame.GetInvocationList())
                    try
                    {
                        _afterContinueGame.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRunContinueGame()
        {
            if (!HookedList.Contains("RunContinueGame"))
            {
                HookedList.Add("RunContinueGame");
                On.GameManager.RunContinueGame += RunContinueGame;
            }
        }

        internal static event Delegates.RunContinueGame_BeforeArgs _beforeRunContinueGame;

        private static IEnumerator RunContinueGame(On.GameManager.orig_RunContinueGame orig, GameManager self)
        {
            Delegates.Params_RunContinueGame @params = new()
            {
                self = self
            };
            if (_beforeRunContinueGame != null)
                foreach (Delegates.RunContinueGame_BeforeArgs toInvoke in _beforeRunContinueGame.GetInvocationList())
                    try
                    {
                        _beforeRunContinueGame?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookWillTerminateInBackground()
        {
            if (!HookedList.Contains("WillTerminateInBackground"))
            {
                HookedList.Add("WillTerminateInBackground");
                On.GameManager.WillTerminateInBackground += WillTerminateInBackground;
            }
        }

        internal static event Delegates.WillTerminateInBackground_BeforeArgs _beforeWillTerminateInBackground;
        internal static event Delegates.WillTerminateInBackground_AfterArgs _afterWillTerminateInBackground;

        private static void WillTerminateInBackground(On.GameManager.orig_WillTerminateInBackground orig,
            GameManager self)
        {
            Delegates.Params_WillTerminateInBackground @params = new()
            {
                self = self
            };
            if (_beforeWillTerminateInBackground != null)
                foreach (Delegates.WillTerminateInBackground_BeforeArgs toInvoke in _beforeWillTerminateInBackground
                             .GetInvocationList())
                    try
                    {
                        _beforeWillTerminateInBackground?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterWillTerminateInBackground != null)
                foreach (Delegates.WillTerminateInBackground_AfterArgs toInvoke in _afterWillTerminateInBackground
                             .GetInvocationList())
                    try
                    {
                        _afterWillTerminateInBackground.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnDisengage()
        {
            if (!HookedList.Contains("OnDisengage"))
            {
                HookedList.Add("OnDisengage");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "OnDisengage"), OnDisengage);
            }
        }

        internal static event Delegates.OnDisengage_BeforeArgs _beforeOnDisengage;
        internal static event Delegates.OnDisengage_AfterArgs _afterOnDisengage;

        private static void OnDisengage(Action<GameManager, Action> orig, GameManager self, Action next)
        {
            Delegates.Params_OnDisengage @params = new()
            {
                self = self, next = next
            };
            if (_beforeOnDisengage != null)
                foreach (Delegates.OnDisengage_BeforeArgs toInvoke in _beforeOnDisengage.GetInvocationList())
                    try
                    {
                        _beforeOnDisengage?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            next = @params.next;
            orig(self, next);
            if (_afterOnDisengage != null)
                foreach (Delegates.OnDisengage_AfterArgs toInvoke in _afterOnDisengage.GetInvocationList())
                    try
                    {
                        _afterOnDisengage.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookEmergencyReturnToMenu()
        {
            if (!HookedList.Contains("EmergencyReturnToMenu"))
            {
                HookedList.Add("EmergencyReturnToMenu");
                On.GameManager.EmergencyReturnToMenu += EmergencyReturnToMenu;
            }
        }

        internal static event Delegates.EmergencyReturnToMenu_BeforeArgs _beforeEmergencyReturnToMenu;
        internal static event Delegates.EmergencyReturnToMenu_AfterArgs _afterEmergencyReturnToMenu;

        private static void EmergencyReturnToMenu(On.GameManager.orig_EmergencyReturnToMenu orig, GameManager self,
            Action callback)
        {
            Delegates.Params_EmergencyReturnToMenu @params = new()
            {
                self = self, callback = callback
            };
            if (_beforeEmergencyReturnToMenu != null)
                foreach (Delegates.EmergencyReturnToMenu_BeforeArgs toInvoke in _beforeEmergencyReturnToMenu
                             .GetInvocationList())
                    try
                    {
                        _beforeEmergencyReturnToMenu?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            callback = @params.callback;
            orig(self, callback);
            if (_afterEmergencyReturnToMenu != null)
                foreach (Delegates.EmergencyReturnToMenu_AfterArgs toInvoke in _afterEmergencyReturnToMenu
                             .GetInvocationList())
                    try
                    {
                        _afterEmergencyReturnToMenu.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookQuitGame()
        {
            if (!HookedList.Contains("QuitGame"))
            {
                HookedList.Add("QuitGame");
                On.GameManager.QuitGame += QuitGame;
            }
        }

        internal static event Delegates.QuitGame_BeforeArgs _beforeQuitGame;

        private static IEnumerator QuitGame(On.GameManager.orig_QuitGame orig, GameManager self)
        {
            Delegates.Params_QuitGame @params = new()
            {
                self = self
            };
            if (_beforeQuitGame != null)
                foreach (Delegates.QuitGame_BeforeArgs toInvoke in _beforeQuitGame.GetInvocationList())
                    try
                    {
                        _beforeQuitGame?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookLoadedBoss()
        {
            if (!HookedList.Contains("LoadedBoss"))
            {
                HookedList.Add("LoadedBoss");
                On.GameManager.LoadedBoss += LoadedBoss;
            }
        }

        internal static event Delegates.LoadedBoss_BeforeArgs _beforeLoadedBoss;
        internal static event Delegates.LoadedBoss_AfterArgs _afterLoadedBoss;

        private static void LoadedBoss(On.GameManager.orig_LoadedBoss orig, GameManager self)
        {
            Delegates.Params_LoadedBoss @params = new()
            {
                self = self
            };
            if (_beforeLoadedBoss != null)
                foreach (Delegates.LoadedBoss_BeforeArgs toInvoke in _beforeLoadedBoss.GetInvocationList())
                    try
                    {
                        _beforeLoadedBoss?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterLoadedBoss != null)
                foreach (Delegates.LoadedBoss_AfterArgs toInvoke in _afterLoadedBoss.GetInvocationList())
                    try
                    {
                        _afterLoadedBoss.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDoDestroyPersonalPools()
        {
            if (!HookedList.Contains("DoDestroyPersonalPools"))
            {
                HookedList.Add("DoDestroyPersonalPools");
                On.GameManager.DoDestroyPersonalPools += DoDestroyPersonalPools;
            }
        }

        internal static event Delegates.DoDestroyPersonalPools_BeforeArgs _beforeDoDestroyPersonalPools;
        internal static event Delegates.DoDestroyPersonalPools_AfterArgs _afterDoDestroyPersonalPools;

        private static void DoDestroyPersonalPools(On.GameManager.orig_DoDestroyPersonalPools orig, GameManager self)
        {
            Delegates.Params_DoDestroyPersonalPools @params = new()
            {
                self = self
            };
            if (_beforeDoDestroyPersonalPools != null)
                foreach (Delegates.DoDestroyPersonalPools_BeforeArgs toInvoke in _beforeDoDestroyPersonalPools
                             .GetInvocationList())
                    try
                    {
                        _beforeDoDestroyPersonalPools?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterDoDestroyPersonalPools != null)
                foreach (Delegates.DoDestroyPersonalPools_AfterArgs toInvoke in _afterDoDestroyPersonalPools
                             .GetInvocationList())
                    try
                    {
                        _afterDoDestroyPersonalPools.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetImplicitCinematicVolume()
        {
            if (!HookedList.Contains("GetImplicitCinematicVolume"))
            {
                HookedList.Add("GetImplicitCinematicVolume");
                On.GameManager.GetImplicitCinematicVolume += GetImplicitCinematicVolume;
            }
        }

        internal static event Delegates.GetImplicitCinematicVolume_BeforeArgs _beforeGetImplicitCinematicVolume;
        internal static event Delegates.GetImplicitCinematicVolume_AfterArgs _afterGetImplicitCinematicVolume;

        private static float GetImplicitCinematicVolume(On.GameManager.orig_GetImplicitCinematicVolume orig,
            GameManager self)
        {
            Delegates.Params_GetImplicitCinematicVolume @params = new()
            {
                self = self
            };
            if (_beforeGetImplicitCinematicVolume != null)
                foreach (Delegates.GetImplicitCinematicVolume_BeforeArgs toInvoke in _beforeGetImplicitCinematicVolume
                             .GetInvocationList())
                    try
                    {
                        _beforeGetImplicitCinematicVolume?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetImplicitCinematicVolume != null)
                foreach (Delegates.GetImplicitCinematicVolume_AfterArgs toInvoke in _afterGetImplicitCinematicVolume
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetImplicitCinematicVolume.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookorig_get_ui()
        {
            if (!HookedList.Contains("orig_get_ui"))
            {
                HookedList.Add("orig_get_ui");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_get_ui"), orig_get_ui);
            }
        }

        internal static event Delegates.orig_get_ui_BeforeArgs _beforeorig_get_ui;
        internal static event Delegates.orig_get_ui_AfterArgs _afterorig_get_ui;

        private static UIManager orig_get_ui(Func<GameManager, UIManager> orig, GameManager self)
        {
            Delegates.Params_orig_get_ui @params = new()
            {
                self = self
            };
            if (_beforeorig_get_ui != null)
                foreach (Delegates.orig_get_ui_BeforeArgs toInvoke in _beforeorig_get_ui.GetInvocationList())
                    try
                    {
                        _beforeorig_get_ui?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterorig_get_ui != null)
                foreach (Delegates.orig_get_ui_AfterArgs toInvoke in _afterorig_get_ui.GetInvocationList())
                    try
                    {
                        retVal = _afterorig_get_ui.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookorig_set_ui()
        {
            if (!HookedList.Contains("orig_set_ui"))
            {
                HookedList.Add("orig_set_ui");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_set_ui"), orig_set_ui);
            }
        }

        internal static event Delegates.orig_set_ui_BeforeArgs _beforeorig_set_ui;
        internal static event Delegates.orig_set_ui_AfterArgs _afterorig_set_ui;

        private static void orig_set_ui(Action<GameManager, UIManager> orig, GameManager self, UIManager value)
        {
            Delegates.Params_orig_set_ui @params = new()
            {
                self = self, value = value
            };
            if (_beforeorig_set_ui != null)
                foreach (Delegates.orig_set_ui_BeforeArgs toInvoke in _beforeorig_set_ui.GetInvocationList())
                    try
                    {
                        _beforeorig_set_ui?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterorig_set_ui != null)
                foreach (Delegates.orig_set_ui_AfterArgs toInvoke in _afterorig_set_ui.GetInvocationList())
                    try
                    {
                        _afterorig_set_ui.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookorig_OnApplicationQuit()
        {
            if (!HookedList.Contains("orig_OnApplicationQuit"))
            {
                HookedList.Add("orig_OnApplicationQuit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_OnApplicationQuit"),
                    orig_OnApplicationQuit);
            }
        }

        internal static event Delegates.orig_OnApplicationQuit_BeforeArgs _beforeorig_OnApplicationQuit;
        internal static event Delegates.orig_OnApplicationQuit_AfterArgs _afterorig_OnApplicationQuit;

        private static void orig_OnApplicationQuit(Action<GameManager> orig, GameManager self)
        {
            Delegates.Params_orig_OnApplicationQuit @params = new()
            {
                self = self
            };
            if (_beforeorig_OnApplicationQuit != null)
                foreach (Delegates.orig_OnApplicationQuit_BeforeArgs toInvoke in _beforeorig_OnApplicationQuit
                             .GetInvocationList())
                    try
                    {
                        _beforeorig_OnApplicationQuit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterorig_OnApplicationQuit != null)
                foreach (Delegates.orig_OnApplicationQuit_AfterArgs toInvoke in _afterorig_OnApplicationQuit
                             .GetInvocationList())
                    try
                    {
                        _afterorig_OnApplicationQuit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookorig_LoadScene()
        {
            if (!HookedList.Contains("orig_LoadScene"))
            {
                HookedList.Add("orig_LoadScene");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_LoadScene"), orig_LoadScene);
            }
        }

        internal static event Delegates.orig_LoadScene_BeforeArgs _beforeorig_LoadScene;
        internal static event Delegates.orig_LoadScene_AfterArgs _afterorig_LoadScene;

        private static void orig_LoadScene(Action<GameManager, string> orig, GameManager self, string destScene)
        {
            Delegates.Params_orig_LoadScene @params = new()
            {
                self = self, destScene = destScene
            };
            if (_beforeorig_LoadScene != null)
                foreach (Delegates.orig_LoadScene_BeforeArgs toInvoke in _beforeorig_LoadScene.GetInvocationList())
                    try
                    {
                        _beforeorig_LoadScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            destScene = @params.destScene;
            orig(self, destScene);
            if (_afterorig_LoadScene != null)
                foreach (Delegates.orig_LoadScene_AfterArgs toInvoke in _afterorig_LoadScene.GetInvocationList())
                    try
                    {
                        _afterorig_LoadScene.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookorig_ClearSaveFile()
        {
            if (!HookedList.Contains("orig_ClearSaveFile"))
            {
                HookedList.Add("orig_ClearSaveFile");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_ClearSaveFile"), orig_ClearSaveFile);
            }
        }

        internal static event Delegates.orig_ClearSaveFile_BeforeArgs _beforeorig_ClearSaveFile;
        internal static event Delegates.orig_ClearSaveFile_AfterArgs _afterorig_ClearSaveFile;

        private static void orig_ClearSaveFile(Action<GameManager, int, Action<bool>> orig, GameManager self,
            int saveSlot, Action<bool> callback)
        {
            Delegates.Params_orig_ClearSaveFile @params = new()
            {
                self = self, saveSlot = saveSlot, callback = callback
            };
            if (_beforeorig_ClearSaveFile != null)
                foreach (Delegates.orig_ClearSaveFile_BeforeArgs toInvoke in
                         _beforeorig_ClearSaveFile.GetInvocationList())
                    try
                    {
                        _beforeorig_ClearSaveFile?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            saveSlot = @params.saveSlot;
            callback = @params.callback;
            orig(self, saveSlot, callback);
            if (_afterorig_ClearSaveFile != null)
                foreach (Delegates.orig_ClearSaveFile_AfterArgs toInvoke in
                         _afterorig_ClearSaveFile.GetInvocationList())
                    try
                    {
                        _afterorig_ClearSaveFile.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookorig_PlayerDead()
        {
            if (!HookedList.Contains("orig_PlayerDead"))
            {
                HookedList.Add("orig_PlayerDead");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_PlayerDead"), orig_PlayerDead);
            }
        }

        internal static event Delegates.orig_PlayerDead_BeforeArgs _beforeorig_PlayerDead;

        private static IEnumerator orig_PlayerDead(Func<GameManager, float, IEnumerator> orig, GameManager self,
            float waitTime)
        {
            Delegates.Params_orig_PlayerDead @params = new()
            {
                self = self, waitTime = waitTime
            };
            if (_beforeorig_PlayerDead != null)
                foreach (Delegates.orig_PlayerDead_BeforeArgs toInvoke in _beforeorig_PlayerDead.GetInvocationList())
                    try
                    {
                        _beforeorig_PlayerDead?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            waitTime = @params.waitTime;
            return orig(self, waitTime);
        }

        internal static void HookModdedSavePath()
        {
            if (!HookedList.Contains("ModdedSavePath"))
            {
                HookedList.Add("ModdedSavePath");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "ModdedSavePath", false), ModdedSavePath);
            }
        }

        internal static event Delegates.ModdedSavePath_BeforeArgs _beforeModdedSavePath;
        internal static event Delegates.ModdedSavePath_AfterArgs _afterModdedSavePath;

        private static string ModdedSavePath(Func<int, string> orig, int slot)
        {
            Delegates.Params_ModdedSavePath @params = new()
            {
                slot = slot
            };
            if (_beforeModdedSavePath != null)
                foreach (Delegates.ModdedSavePath_BeforeArgs toInvoke in _beforeModdedSavePath.GetInvocationList())
                    try
                    {
                        _beforeModdedSavePath?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            slot = @params.slot;
            var retVal = orig(slot);
            if (_afterModdedSavePath != null)
                foreach (Delegates.ModdedSavePath_AfterArgs toInvoke in _afterModdedSavePath.GetInvocationList())
                    try
                    {
                        retVal = _afterModdedSavePath.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookorig_SetupSceneRefs()
        {
            if (!HookedList.Contains("orig_SetupSceneRefs"))
            {
                HookedList.Add("orig_SetupSceneRefs");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_SetupSceneRefs"),
                    orig_SetupSceneRefs);
            }
        }

        internal static event Delegates.orig_SetupSceneRefs_BeforeArgs _beforeorig_SetupSceneRefs;
        internal static event Delegates.orig_SetupSceneRefs_AfterArgs _afterorig_SetupSceneRefs;

        private static void orig_SetupSceneRefs(Action<GameManager, bool> orig, GameManager self,
            bool refreshTilemapInfo)
        {
            Delegates.Params_orig_SetupSceneRefs @params = new()
            {
                self = self, refreshTilemapInfo = refreshTilemapInfo
            };
            if (_beforeorig_SetupSceneRefs != null)
                foreach (Delegates.orig_SetupSceneRefs_BeforeArgs toInvoke in _beforeorig_SetupSceneRefs
                             .GetInvocationList())
                    try
                    {
                        _beforeorig_SetupSceneRefs?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            refreshTilemapInfo = @params.refreshTilemapInfo;
            orig(self, refreshTilemapInfo);
            if (_afterorig_SetupSceneRefs != null)
                foreach (Delegates.orig_SetupSceneRefs_AfterArgs toInvoke in
                         _afterorig_SetupSceneRefs.GetInvocationList())
                    try
                    {
                        _afterorig_SetupSceneRefs.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookorig_OnWillActivateFirstLevel()
        {
            if (!HookedList.Contains("orig_OnWillActivateFirstLevel"))
            {
                HookedList.Add("orig_OnWillActivateFirstLevel");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_OnWillActivateFirstLevel"),
                    orig_OnWillActivateFirstLevel);
            }
        }

        internal static event Delegates.orig_OnWillActivateFirstLevel_BeforeArgs _beforeorig_OnWillActivateFirstLevel;
        internal static event Delegates.orig_OnWillActivateFirstLevel_AfterArgs _afterorig_OnWillActivateFirstLevel;

        private static void orig_OnWillActivateFirstLevel(Action<GameManager> orig, GameManager self)
        {
            Delegates.Params_orig_OnWillActivateFirstLevel @params = new()
            {
                self = self
            };
            if (_beforeorig_OnWillActivateFirstLevel != null)
                foreach (Delegates.orig_OnWillActivateFirstLevel_BeforeArgs toInvoke in
                         _beforeorig_OnWillActivateFirstLevel.GetInvocationList())
                    try
                    {
                        _beforeorig_OnWillActivateFirstLevel?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterorig_OnWillActivateFirstLevel != null)
                foreach (Delegates.orig_OnWillActivateFirstLevel_AfterArgs toInvoke in
                         _afterorig_OnWillActivateFirstLevel.GetInvocationList())
                    try
                    {
                        _afterorig_OnWillActivateFirstLevel.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPauseToggleDynamicMenu()
        {
            if (!HookedList.Contains("PauseToggleDynamicMenu"))
            {
                HookedList.Add("PauseToggleDynamicMenu");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GameManager), "PauseToggleDynamicMenu"),
                    PauseToggleDynamicMenu);
            }
        }

        internal static event Delegates.PauseToggleDynamicMenu_BeforeArgs _beforePauseToggleDynamicMenu;

        private static IEnumerator PauseToggleDynamicMenu(Func<GameManager, MenuScreen, bool, IEnumerator> orig,
            GameManager self, MenuScreen screen, bool allowUnpause)
        {
            Delegates.Params_PauseToggleDynamicMenu @params = new()
            {
                self = self, screen = screen, allowUnpause = allowUnpause
            };
            if (_beforePauseToggleDynamicMenu != null)
                foreach (Delegates.PauseToggleDynamicMenu_BeforeArgs toInvoke in _beforePauseToggleDynamicMenu
                             .GetInvocationList())
                    try
                    {
                        _beforePauseToggleDynamicMenu?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            screen = @params.screen;
            allowUnpause = @params.allowUnpause;
            return orig(self, screen, allowUnpause);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ActivateTestingCheats_AfterArgs(Params_ActivateTestingCheats args);

        public delegate void ActivateTestingCheats_BeforeArgs(Params_ActivateTestingCheats args);

        public delegate void ActivateTestingCheats_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void AddToBenchList_AfterArgs(Params_AddToBenchList args);

        public delegate void AddToBenchList_BeforeArgs(Params_AddToBenchList args);

        public delegate void AddToBenchList_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void AddToCocoonList_AfterArgs(Params_AddToCocoonList args);

        public delegate void AddToCocoonList_BeforeArgs(Params_AddToCocoonList args);

        public delegate void AddToCocoonList_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void AddToDreamPlantCList_AfterArgs(Params_AddToDreamPlantCList args);

        public delegate void AddToDreamPlantCList_BeforeArgs(Params_AddToDreamPlantCList args);

        public delegate void AddToDreamPlantCList_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void AddToDreamPlantList_AfterArgs(Params_AddToDreamPlantList args);

        public delegate void AddToDreamPlantList_BeforeArgs(Params_AddToDreamPlantList args);

        public delegate void AddToDreamPlantList_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void AddToFlameList_AfterArgs(Params_AddToFlameList args);

        public delegate void AddToFlameList_BeforeArgs(Params_AddToFlameList args);

        public delegate void AddToFlameList_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void AddToGrubList_AfterArgs(Params_AddToGrubList args);

        public delegate void AddToGrubList_BeforeArgs(Params_AddToGrubList args);

        public delegate void AddToGrubList_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void AddToScenesVisited_AfterArgs(Params_AddToScenesVisited args);

        public delegate void AddToScenesVisited_BeforeArgs(Params_AddToScenesVisited args);

        public delegate void AddToScenesVisited_WithArgs(Action<GameManager, string> orig, GameManager self,
            string scene);

        public delegate void ApplyNativeInput_AfterArgs(Params_ApplyNativeInput args);

        public delegate void ApplyNativeInput_BeforeArgs(Params_ApplyNativeInput args);

        public delegate void ApplyNativeInput_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void AwardAchievement_AfterArgs(Params_AwardAchievement args);

        public delegate void AwardAchievement_BeforeArgs(Params_AwardAchievement args);

        public delegate void AwardAchievement_WithArgs(Action<GameManager, string> orig, GameManager self, string key);

        public delegate void AwardQueuedAchievements_AfterArgs(Params_AwardQueuedAchievements args);

        public delegate void AwardQueuedAchievements_BeforeArgs(Params_AwardQueuedAchievements args);

        public delegate void AwardQueuedAchievements_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void BeginScene_AfterArgs(Params_BeginScene args);

        public delegate void BeginScene_BeforeArgs(Params_BeginScene args);

        public delegate void BeginScene_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void CalculateNotchesUsed_AfterArgs(Params_CalculateNotchesUsed args);

        public delegate void CalculateNotchesUsed_BeforeArgs(Params_CalculateNotchesUsed args);

        public delegate void CalculateNotchesUsed_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void ChangeToScene_AfterArgs(Params_ChangeToScene args);

        public delegate void ChangeToScene_BeforeArgs(Params_ChangeToScene args);

        public delegate void ChangeToScene_WithArgs(Action<GameManager, string, string, float> orig, GameManager self,
            string targetScene, string entryGateName, float pauseBeforeEnter);

        public delegate void CheckAllAchievements_AfterArgs(Params_CheckAllAchievements args);

        public delegate void CheckAllAchievements_BeforeArgs(Params_CheckAllAchievements args);

        public delegate void CheckAllAchievements_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void CheckAllMaps_AfterArgs(Params_CheckAllMaps args);

        public delegate void CheckAllMaps_BeforeArgs(Params_CheckAllMaps args);

        public delegate void CheckAllMaps_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void CheckBanishmentAchievement_AfterArgs(Params_CheckBanishmentAchievement args);

        public delegate void CheckBanishmentAchievement_BeforeArgs(Params_CheckBanishmentAchievement args);

        public delegate void CheckBanishmentAchievement_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void CheckCharmAchievements_AfterArgs(Params_CheckCharmAchievements args);

        public delegate void CheckCharmAchievements_BeforeArgs(Params_CheckCharmAchievements args);

        public delegate void CheckCharmAchievements_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void CheckGrubAchievements_AfterArgs(Params_CheckGrubAchievements args);

        public delegate void CheckGrubAchievements_BeforeArgs(Params_CheckGrubAchievements args);

        public delegate void CheckGrubAchievements_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void CheckJournalAchievements_AfterArgs(Params_CheckJournalAchievements args);

        public delegate void CheckJournalAchievements_BeforeArgs(Params_CheckJournalAchievements args);

        public delegate void CheckJournalAchievements_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void CheckMapAchievement_AfterArgs(Params_CheckMapAchievement args);

        public delegate void CheckMapAchievement_BeforeArgs(Params_CheckMapAchievement args);

        public delegate void CheckMapAchievement_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void CheckStagStationAchievements_AfterArgs(Params_CheckStagStationAchievements args);

        public delegate void CheckStagStationAchievements_BeforeArgs(Params_CheckStagStationAchievements args);

        public delegate void CheckStagStationAchievements_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void ClearAllAchievements_AfterArgs(Params_ClearAllAchievements args);

        public delegate void ClearAllAchievements_BeforeArgs(Params_ClearAllAchievements args);

        public delegate void ClearAllAchievements_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void ClearSaveFile_AfterArgs(Params_ClearSaveFile args);

        public delegate void ClearSaveFile_BeforeArgs(Params_ClearSaveFile args);

        public delegate void ClearSaveFile_WithArgs(Action<GameManager, int, Action<bool>> orig, GameManager self,
            int saveSlot, Action<bool> callback);

        public delegate void ContinueGame_AfterArgs(Params_ContinueGame args);

        public delegate void ContinueGame_BeforeArgs(Params_ContinueGame args);

        public delegate void ContinueGame_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate int CountBits_AfterArgs(Params_CountBits args, int ret);

        public delegate void CountBits_BeforeArgs(Params_CountBits args);

        public delegate int CountBits_WithArgs(Func<int, int> orig, int val);

        public delegate void CountCharms_AfterArgs(Params_CountCharms args);

        public delegate void CountCharms_BeforeArgs(Params_CountCharms args);

        public delegate void CountCharms_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void CountGameCompletion_AfterArgs(Params_CountGameCompletion args);

        public delegate void CountGameCompletion_BeforeArgs(Params_CountGameCompletion args);

        public delegate void CountGameCompletion_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void CountJournalEntries_AfterArgs(Params_CountJournalEntries args);

        public delegate void CountJournalEntries_BeforeArgs(Params_CountJournalEntries args);

        public delegate void CountJournalEntries_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void DecrementPlayerDataInt_AfterArgs(Params_DecrementPlayerDataInt args);

        public delegate void DecrementPlayerDataInt_BeforeArgs(Params_DecrementPlayerDataInt args);

        public delegate void DecrementPlayerDataInt_WithArgs(Action<GameManager, string> orig, GameManager self,
            string intName);

        public delegate void DoDestroyPersonalPools_AfterArgs(Params_DoDestroyPersonalPools args);

        public delegate void DoDestroyPersonalPools_BeforeArgs(Params_DoDestroyPersonalPools args);

        public delegate void DoDestroyPersonalPools_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void EmergencyReturnToMenu_AfterArgs(Params_EmergencyReturnToMenu args);

        public delegate void EmergencyReturnToMenu_BeforeArgs(Params_EmergencyReturnToMenu args);

        public delegate void EmergencyReturnToMenu_WithArgs(Action<GameManager, Action> orig, GameManager self,
            Action callback);

        public delegate void EnablePermadeathMode_AfterArgs(Params_EnablePermadeathMode args);

        public delegate void EnablePermadeathMode_BeforeArgs(Params_EnablePermadeathMode args);

        public delegate void EnablePermadeathMode_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void EndSoulLimiter_AfterArgs(Params_EndSoulLimiter args);

        public delegate void EndSoulLimiter_BeforeArgs(Params_EndSoulLimiter args);

        public delegate void EndSoulLimiter_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void EnsureSaveSlotSpace_AfterArgs(Params_EnsureSaveSlotSpace args);

        public delegate void EnsureSaveSlotSpace_BeforeArgs(Params_EnsureSaveSlotSpace args);

        public delegate void EnsureSaveSlotSpace_WithArgs(Action<GameManager, Action<bool>> orig, GameManager self,
            Action<bool> callback);

        public delegate void EnterHero_AfterArgs(Params_EnterHero args);

        public delegate void EnterHero_BeforeArgs(Params_EnterHero args);

        public delegate void EnterHero_WithArgs(Action<GameManager, bool> orig, GameManager self,
            bool additiveGateSearch);

        public delegate void EquipCharm_AfterArgs(Params_EquipCharm args);

        public delegate void EquipCharm_BeforeArgs(Params_EquipCharm args);

        public delegate void EquipCharm_WithArgs(Action<GameManager, int> orig, GameManager self, int charmNum);

        public delegate void FadeSceneIn_AfterArgs(Params_FadeSceneIn args);

        public delegate void FadeSceneIn_BeforeArgs(Params_FadeSceneIn args);

        public delegate void FadeSceneIn_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate IEnumerator FadeSceneInWithDelay_AfterArgs(Params_FadeSceneInWithDelay args, IEnumerator ret);

        public delegate void FadeSceneInWithDelay_BeforeArgs(Params_FadeSceneInWithDelay args);

        public delegate IEnumerator FadeSceneInWithDelay_WithArgs(Func<GameManager, float, IEnumerator> orig,
            GameManager self, float delay);

        public delegate Vector2? FindEntryPoint_AfterArgs(Params_FindEntryPoint args, Vector2? ret);

        public delegate void FindEntryPoint_BeforeArgs(Params_FindEntryPoint args);

        public delegate Vector2? FindEntryPoint_WithArgs(Func<GameManager, string, Scene, Vector2?> orig,
            GameManager self, string entryPointName, Scene filterScene);

        public delegate TransitionPoint FindTransitionPoint_AfterArgs(Params_FindTransitionPoint args,
            TransitionPoint ret);

        public delegate void FindTransitionPoint_BeforeArgs(Params_FindTransitionPoint args);

        public delegate TransitionPoint FindTransitionPoint_WithArgs(
            Func<GameManager, string, Scene, bool, TransitionPoint> orig, GameManager self, string entryPointName,
            Scene filterScene, bool fallbackToAnyAvailable);

        public delegate void FinishedEnteringScene_AfterArgs(Params_FinishedEnteringScene args);

        public delegate void FinishedEnteringScene_BeforeArgs(Params_FinishedEnteringScene args);

        public delegate void FinishedEnteringScene_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate IEnumerator FreezeMoment_float_float_float_bool_AfterArgs(
            Params_FreezeMoment_float_float_float_bool args, IEnumerator ret);

        public delegate void FreezeMoment_float_float_float_bool_BeforeArgs(
            Params_FreezeMoment_float_float_float_bool args);

        public delegate IEnumerator FreezeMoment_float_float_float_bool_WithArgs(
            Func<GameManager, float, float, float, bool, IEnumerator> orig, GameManager self, float rampDownTime,
            float waitTime, float rampUpTime, bool runGc);

        public delegate IEnumerator FreezeMoment_float_float_float_float_AfterArgs(
            Params_FreezeMoment_float_float_float_float args, IEnumerator ret);

        public delegate void FreezeMoment_float_float_float_float_BeforeArgs(
            Params_FreezeMoment_float_float_float_float args);

        public delegate IEnumerator FreezeMoment_float_float_float_float_WithArgs(
            Func<GameManager, float, float, float, float, IEnumerator> orig, GameManager self, float rampDownTime,
            float waitTime, float rampUpTime, float targetSpeed);

        public delegate void FreezeMoment_int_AfterArgs(Params_FreezeMoment_int args);

        public delegate void FreezeMoment_int_BeforeArgs(Params_FreezeMoment_int args);

        public delegate void FreezeMoment_int_WithArgs(Action<GameManager, int> orig, GameManager self, int type);

        public delegate IEnumerator FreezeMomentGC_AfterArgs(Params_FreezeMomentGC args, IEnumerator ret);

        public delegate void FreezeMomentGC_BeforeArgs(Params_FreezeMomentGC args);

        public delegate IEnumerator FreezeMomentGC_WithArgs(
            Func<GameManager, float, float, float, float, IEnumerator> orig, GameManager self, float rampDownTime,
            float waitTime, float rampUpTime, float targetSpeed);

        public delegate AchievementHandler get_achievementHandler_AfterArgs(Params_get_achievementHandler args,
            AchievementHandler ret);

        public delegate void get_achievementHandler_BeforeArgs(Params_get_achievementHandler args);

        public delegate AchievementHandler get_achievementHandler_WithArgs(Func<GameManager, AchievementHandler> orig,
            GameManager self);

        public delegate AudioManager get_AudioManager_AfterArgs(Params_get_AudioManager args, AudioManager ret);

        public delegate void get_AudioManager_BeforeArgs(Params_get_AudioManager args);

        public delegate AudioManager get_AudioManager_WithArgs(Func<GameManager, AudioManager> orig, GameManager self);

        public delegate CameraController get_cameraCtrl_AfterArgs(Params_get_cameraCtrl args, CameraController ret);

        public delegate void get_cameraCtrl_BeforeArgs(Params_get_cameraCtrl args);

        public delegate CameraController get_cameraCtrl_WithArgs(Func<GameManager, CameraController> orig,
            GameManager self);

        public delegate float get_CurrentLoadDuration_AfterArgs(Params_get_CurrentLoadDuration args, float ret);

        public delegate void get_CurrentLoadDuration_BeforeArgs(Params_get_CurrentLoadDuration args);

        public delegate float get_CurrentLoadDuration_WithArgs(Func<GameManager, float> orig, GameManager self);

        public delegate bool get_HasFinishedEnteringScene_AfterArgs(Params_get_HasFinishedEnteringScene args, bool ret);

        public delegate void get_HasFinishedEnteringScene_BeforeArgs(Params_get_HasFinishedEnteringScene args);

        public delegate bool get_HasFinishedEnteringScene_WithArgs(Func<GameManager, bool> orig, GameManager self);

        public delegate HeroController get_hero_ctrl_AfterArgs(Params_get_hero_ctrl args, HeroController ret);

        public delegate void get_hero_ctrl_BeforeArgs(Params_get_hero_ctrl args);

        public delegate HeroController get_hero_ctrl_WithArgs(Func<GameManager, HeroController> orig, GameManager self);

        public delegate SpriteRenderer get_heroLight_AfterArgs(Params_get_heroLight args, SpriteRenderer ret);

        public delegate void get_heroLight_BeforeArgs(Params_get_heroLight args);

        public delegate SpriteRenderer get_heroLight_WithArgs(Func<GameManager, SpriteRenderer> orig, GameManager self);

        public delegate InputHandler get_inputHandler_AfterArgs(Params_get_inputHandler args, InputHandler ret);

        public delegate void get_inputHandler_BeforeArgs(Params_get_inputHandler args);

        public delegate InputHandler get_inputHandler_WithArgs(Func<GameManager, InputHandler> orig, GameManager self);

        public delegate GameManager get_instance_AfterArgs(GameManager ret);

        public delegate void get_instance_BeforeArgs();

        public delegate GameManager get_instance_WithArgs(Func<GameManager> orig);

        public delegate bool get_IsInSceneTransition_AfterArgs(Params_get_IsInSceneTransition args, bool ret);

        public delegate void get_IsInSceneTransition_BeforeArgs(Params_get_IsInSceneTransition args);

        public delegate bool get_IsInSceneTransition_WithArgs(Func<GameManager, bool> orig, GameManager self);

        public delegate bool get_IsLoadingSceneTransition_AfterArgs(Params_get_IsLoadingSceneTransition args, bool ret);

        public delegate void get_IsLoadingSceneTransition_BeforeArgs(Params_get_IsLoadingSceneTransition args);

        public delegate bool get_IsLoadingSceneTransition_WithArgs(Func<GameManager, bool> orig, GameManager self);

        public delegate bool get_IsUsingCustomLoadAnimation_AfterArgs(Params_get_IsUsingCustomLoadAnimation args,
            bool ret);

        public delegate void get_IsUsingCustomLoadAnimation_BeforeArgs(Params_get_IsUsingCustomLoadAnimation args);

        public delegate bool get_IsUsingCustomLoadAnimation_WithArgs(Func<GameManager, bool> orig, GameManager self);

        public delegate float get_PlayTime_AfterArgs(Params_get_PlayTime args, float ret);

        public delegate void get_PlayTime_BeforeArgs(Params_get_PlayTime args);

        public delegate float get_PlayTime_WithArgs(Func<GameManager, float> orig, GameManager self);

        public delegate bool get_RespawningHero_AfterArgs(Params_get_RespawningHero args, bool ret);

        public delegate void get_RespawningHero_BeforeArgs(Params_get_RespawningHero args);

        public delegate bool get_RespawningHero_WithArgs(Func<GameManager, bool> orig, GameManager self);

        public delegate SceneManager get_sm_AfterArgs(Params_get_sm args, SceneManager ret);

        public delegate void get_sm_BeforeArgs(Params_get_sm args);

        public delegate SceneManager get_sm_WithArgs(Func<GameManager, SceneManager> orig, GameManager self);

        public delegate PlayMakerFSM get_soulOrb_fsm_AfterArgs(Params_get_soulOrb_fsm args, PlayMakerFSM ret);

        public delegate void get_soulOrb_fsm_BeforeArgs(Params_get_soulOrb_fsm args);

        public delegate PlayMakerFSM get_soulOrb_fsm_WithArgs(Func<GameManager, PlayMakerFSM> orig, GameManager self);

        public delegate PlayMakerFSM get_soulVessel_fsm_AfterArgs(Params_get_soulVessel_fsm args, PlayMakerFSM ret);

        public delegate void get_soulVessel_fsm_BeforeArgs(Params_get_soulVessel_fsm args);

        public delegate PlayMakerFSM
            get_soulVessel_fsm_WithArgs(Func<GameManager, PlayMakerFSM> orig, GameManager self);

        public delegate tk2dTileMap get_tilemap_AfterArgs(Params_get_tilemap args, tk2dTileMap ret);

        public delegate void get_tilemap_BeforeArgs(Params_get_tilemap args);

        public delegate tk2dTileMap get_tilemap_WithArgs(Func<GameManager, tk2dTileMap> orig, GameManager self);

        public delegate bool get_TimeSlowed_AfterArgs(Params_get_TimeSlowed args, bool ret);

        public delegate void get_TimeSlowed_BeforeArgs(Params_get_TimeSlowed args);

        public delegate bool get_TimeSlowed_WithArgs(Func<GameManager, bool> orig, GameManager self);

        public delegate UIManager get_ui_AfterArgs(Params_get_ui args, UIManager ret);

        public delegate void get_ui_BeforeArgs(Params_get_ui args);

        public delegate UIManager get_ui_WithArgs(Func<GameManager, UIManager> orig, GameManager self);

        public delegate GameManager get_UnsafeInstance_AfterArgs(GameManager ret);

        public delegate void get_UnsafeInstance_BeforeArgs();

        public delegate GameManager get_UnsafeInstance_WithArgs(Func<GameManager> orig);

        public delegate WorldInfo get_WorldInfo_AfterArgs(Params_get_WorldInfo args, WorldInfo ret);

        public delegate void get_WorldInfo_BeforeArgs(Params_get_WorldInfo args);

        public delegate WorldInfo get_WorldInfo_WithArgs(Func<GameManager, WorldInfo> orig, GameManager self);

        public delegate void GetAllPowerups_AfterArgs(Params_GetAllPowerups args);

        public delegate void GetAllPowerups_BeforeArgs(Params_GetAllPowerups args);

        public delegate void GetAllPowerups_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate string GetBaseSceneName_AfterArgs(Params_GetBaseSceneName args, string ret);

        public delegate void GetBaseSceneName_BeforeArgs(Params_GetBaseSceneName args);

        public delegate string GetBaseSceneName_WithArgs(Func<string, string> orig, string fullSceneName);

        public delegate string GetCurrentMapZone_AfterArgs(Params_GetCurrentMapZone args, string ret);

        public delegate void GetCurrentMapZone_BeforeArgs(Params_GetCurrentMapZone args);

        public delegate string GetCurrentMapZone_WithArgs(Func<GameManager, string> orig, GameManager self);

        public delegate string GetEntryGateName_AfterArgs(Params_GetEntryGateName args, string ret);

        public delegate void GetEntryGateName_BeforeArgs(Params_GetEntryGateName args);

        public delegate string GetEntryGateName_WithArgs(Func<GameManager, string> orig, GameManager self);

        public delegate string GetFormattedMapZoneString_AfterArgs(Params_GetFormattedMapZoneString args, string ret);

        public delegate void GetFormattedMapZoneString_BeforeArgs(Params_GetFormattedMapZoneString args);

        public delegate string GetFormattedMapZoneString_WithArgs(Func<GameManager, MapZone, string> orig,
            GameManager self, MapZone mapZone);

        public delegate float GetImplicitCinematicVolume_AfterArgs(Params_GetImplicitCinematicVolume args, float ret);

        public delegate void GetImplicitCinematicVolume_BeforeArgs(Params_GetImplicitCinematicVolume args);

        public delegate float GetImplicitCinematicVolume_WithArgs(Func<GameManager, float> orig, GameManager self);

        public delegate bool GetIsSceneVisited_AfterArgs(Params_GetIsSceneVisited args, bool ret);

        public delegate void GetIsSceneVisited_BeforeArgs(Params_GetIsSceneVisited args);

        public delegate bool GetIsSceneVisited_WithArgs(Func<GameManager, string, bool> orig, GameManager self,
            string scene);

        public delegate string GetLanguageAsString_AfterArgs(Params_GetLanguageAsString args, string ret);

        public delegate void GetLanguageAsString_BeforeArgs(Params_GetLanguageAsString args);

        public delegate string GetLanguageAsString_WithArgs(Func<GameManager, string> orig, GameManager self);

        public delegate bool GetPlayerDataBool_AfterArgs(Params_GetPlayerDataBool args, bool ret);

        public delegate void GetPlayerDataBool_BeforeArgs(Params_GetPlayerDataBool args);

        public delegate bool GetPlayerDataBool_WithArgs(Func<GameManager, string, bool> orig, GameManager self,
            string boolName);

        public delegate float GetPlayerDataFloat_AfterArgs(Params_GetPlayerDataFloat args, float ret);

        public delegate void GetPlayerDataFloat_BeforeArgs(Params_GetPlayerDataFloat args);

        public delegate float GetPlayerDataFloat_WithArgs(Func<GameManager, string, float> orig, GameManager self,
            string floatName);

        public delegate int GetPlayerDataInt_AfterArgs(Params_GetPlayerDataInt args, int ret);

        public delegate void GetPlayerDataInt_BeforeArgs(Params_GetPlayerDataInt args);

        public delegate int GetPlayerDataInt_WithArgs(Func<GameManager, string, int> orig, GameManager self,
            string intName);

        public delegate string GetPlayerDataString_AfterArgs(Params_GetPlayerDataString args, string ret);

        public delegate void GetPlayerDataString_BeforeArgs(Params_GetPlayerDataString args);

        public delegate string GetPlayerDataString_WithArgs(Func<GameManager, string, string> orig, GameManager self,
            string stringName);

        public delegate Vector3 GetPlayerDataVector3_AfterArgs(Params_GetPlayerDataVector3 args, Vector3 ret);

        public delegate void GetPlayerDataVector3_BeforeArgs(Params_GetPlayerDataVector3 args);

        public delegate Vector3 GetPlayerDataVector3_WithArgs(Func<GameManager, string, Vector3> orig, GameManager self,
            string vectorName);

        public delegate void GetSaveStatsForSlot_AfterArgs(Params_GetSaveStatsForSlot args);

        public delegate void GetSaveStatsForSlot_BeforeArgs(Params_GetSaveStatsForSlot args);

        public delegate void GetSaveStatsForSlot_WithArgs(Action<GameManager, int, Action<SaveStats>> orig,
            GameManager self, int saveSlot, Action<SaveStats> callback);

        public delegate float GetSceneHeight_AfterArgs(Params_GetSceneHeight args, float ret);

        public delegate void GetSceneHeight_BeforeArgs(Params_GetSceneHeight args);

        public delegate float GetSceneHeight_WithArgs(Func<GameManager, float> orig, GameManager self);

        public delegate GameObject GetSceneManager_AfterArgs(Params_GetSceneManager args, GameObject ret);

        public delegate void GetSceneManager_BeforeArgs(Params_GetSceneManager args);

        public delegate GameObject GetSceneManager_WithArgs(Func<GameManager, GameObject> orig, GameManager self);

        public delegate string GetSceneNameString_AfterArgs(Params_GetSceneNameString args, string ret);

        public delegate void GetSceneNameString_BeforeArgs(Params_GetSceneNameString args);

        public delegate string GetSceneNameString_WithArgs(Func<GameManager, string> orig, GameManager self);

        public delegate float GetSceneWidth_AfterArgs(Params_GetSceneWidth args, float ret);

        public delegate void GetSceneWidth_BeforeArgs(Params_GetSceneWidth args);

        public delegate float GetSceneWidth_WithArgs(Func<GameManager, float> orig, GameManager self);

        public delegate string GetSceneZoneName_AfterArgs(Params_GetSceneZoneName args, string ret);

        public delegate void GetSceneZoneName_BeforeArgs(Params_GetSceneZoneName args);

        public delegate string GetSceneZoneName_WithArgs(Func<string, string> orig, string str);

        public delegate int GetStatusRecordInt_AfterArgs(Params_GetStatusRecordInt args, int ret);

        public delegate void GetStatusRecordInt_BeforeArgs(Params_GetStatusRecordInt args);

        public delegate int GetStatusRecordInt_WithArgs(Func<GameManager, string, int> orig, GameManager self,
            string key);

        public delegate tk2dTileMap GetTileMap_AfterArgs(Params_GetTileMap args, tk2dTileMap ret);

        public delegate void GetTileMap_BeforeArgs(Params_GetTileMap args);

        public delegate tk2dTileMap GetTileMap_WithArgs(Func<GameObject, tk2dTileMap> orig, GameObject gameObject);

        public delegate void HasSaveFile_AfterArgs(Params_HasSaveFile args);

        public delegate void HasSaveFile_BeforeArgs(Params_HasSaveFile args);

        public delegate void HasSaveFile_WithArgs(Action<GameManager, int, Action<bool>> orig, GameManager self,
            int saveSlot, Action<bool> callback);

        public delegate void HazardRespawn_AfterArgs(Params_HazardRespawn args);

        public delegate void HazardRespawn_BeforeArgs(Params_HazardRespawn args);

        public delegate void HazardRespawn_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void HideSaveIcon_AfterArgs(Params_HideSaveIcon args);

        public delegate void HideSaveIcon_BeforeArgs(Params_HideSaveIcon args);

        public delegate void HideSaveIcon_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void IncreaseGameTimer_AfterArgs(Params_IncreaseGameTimer args);

        public delegate void IncreaseGameTimer_BeforeArgs(Params_IncreaseGameTimer args);

        public delegate void IncreaseGameTimer_WithArgs(Action<GameManager, float> orig, GameManager self,
            ref float timer);

        public delegate void IncrementPlayerDataInt_AfterArgs(Params_IncrementPlayerDataInt args);

        public delegate void IncrementPlayerDataInt_BeforeArgs(Params_IncrementPlayerDataInt args);

        public delegate void IncrementPlayerDataInt_WithArgs(Action<GameManager, string> orig, GameManager self,
            string intName);

        public delegate void IntAdd_AfterArgs(Params_IntAdd args);

        public delegate void IntAdd_BeforeArgs(Params_IntAdd args);

        public delegate void IntAdd_WithArgs(Action<GameManager, string, int> orig, GameManager self, string intName,
            int amount);

        public delegate bool IsAchievementAwarded_AfterArgs(Params_IsAchievementAwarded args, bool ret);

        public delegate void IsAchievementAwarded_BeforeArgs(Params_IsAchievementAwarded args);

        public delegate bool IsAchievementAwarded_WithArgs(Func<GameManager, string, bool> orig, GameManager self,
            string key);

        public delegate bool IsBetaEndScene_AfterArgs(Params_IsBetaEndScene args, bool ret);

        public delegate void IsBetaEndScene_BeforeArgs(Params_IsBetaEndScene args);

        public delegate bool IsBetaEndScene_WithArgs(Func<GameManager, bool> orig, GameManager self);

        public delegate bool IsBossDoorScene_AfterArgs(Params_IsBossDoorScene args, bool ret);

        public delegate void IsBossDoorScene_BeforeArgs(Params_IsBossDoorScene args);

        public delegate bool IsBossDoorScene_WithArgs(Func<GameManager, bool> orig, GameManager self);

        public delegate bool IsCinematicScene_AfterArgs(Params_IsCinematicScene args, bool ret);

        public delegate void IsCinematicScene_BeforeArgs(Params_IsCinematicScene args);

        public delegate bool IsCinematicScene_WithArgs(Func<GameManager, bool> orig, GameManager self);

        public delegate bool IsGamePaused_AfterArgs(Params_IsGamePaused args, bool ret);

        public delegate void IsGamePaused_BeforeArgs(Params_IsGamePaused args);

        public delegate bool IsGamePaused_WithArgs(Func<GameManager, bool> orig, GameManager self);

        public delegate bool IsGameplayScene_AfterArgs(Params_IsGameplayScene args, bool ret);

        public delegate void IsGameplayScene_BeforeArgs(Params_IsGameplayScene args);

        public delegate bool IsGameplayScene_WithArgs(Func<GameManager, bool> orig, GameManager self);

        public delegate bool IsMenuScene_AfterArgs(Params_IsMenuScene args, bool ret);

        public delegate void IsMenuScene_BeforeArgs(Params_IsMenuScene args);

        public delegate bool IsMenuScene_WithArgs(Func<GameManager, bool> orig, GameManager self);

        public delegate bool IsNonGameplayScene_AfterArgs(Params_IsNonGameplayScene args, bool ret);

        public delegate void IsNonGameplayScene_BeforeArgs(Params_IsNonGameplayScene args);

        public delegate bool IsNonGameplayScene_WithArgs(Func<GameManager, bool> orig, GameManager self);

        public delegate bool IsStagTravelScene_AfterArgs(Params_IsStagTravelScene args, bool ret);

        public delegate void IsStagTravelScene_BeforeArgs(Params_IsStagTravelScene args);

        public delegate bool IsStagTravelScene_WithArgs(Func<GameManager, bool> orig, GameManager self);

        public delegate bool IsTestScene_AfterArgs(Params_IsTestScene args, bool ret);

        public delegate void IsTestScene_BeforeArgs(Params_IsTestScene args);

        public delegate bool IsTestScene_WithArgs(Func<GameManager, bool> orig, GameManager self);

        public delegate bool IsTitleScreenScene_AfterArgs(Params_IsTitleScreenScene args, bool ret);

        public delegate void IsTitleScreenScene_BeforeArgs(Params_IsTitleScreenScene args);

        public delegate bool IsTitleScreenScene_WithArgs(Func<GameManager, bool> orig, GameManager self);

        public delegate bool IsTutorialScene_AfterArgs(Params_IsTutorialScene args, bool ret);

        public delegate void IsTutorialScene_BeforeArgs(Params_IsTutorialScene args);

        public delegate bool IsTutorialScene_WithArgs(Func<GameManager, bool> orig, GameManager self);

        public delegate bool IsUnloadAssetsRequired_AfterArgs(Params_IsUnloadAssetsRequired args, bool ret);

        public delegate void IsUnloadAssetsRequired_BeforeArgs(Params_IsUnloadAssetsRequired args);

        public delegate bool IsUnloadAssetsRequired_WithArgs(Func<GameManager, string, string, bool> orig,
            GameManager self, string sourceSceneName, string destinationSceneName);

        public delegate void LeftScene_AfterArgs(Params_LeftScene args);

        public delegate void LeftScene_BeforeArgs(Params_LeftScene args);

        public delegate void LeftScene_WithArgs(Action<GameManager, bool> orig, GameManager self, bool doAdditiveLoad);

        public delegate void LevelActivated_AfterArgs(Params_LevelActivated args);

        public delegate void LevelActivated_BeforeArgs(Params_LevelActivated args);

        public delegate void LevelActivated_WithArgs(Action<GameManager, Scene, Scene> orig, GameManager self,
            Scene sceneFrom, Scene sceneTo);

        public delegate void LoadedBoss_AfterArgs(Params_LoadedBoss args);

        public delegate void LoadedBoss_BeforeArgs(Params_LoadedBoss args);

        public delegate void LoadedBoss_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate IEnumerator LoadFirstScene_AfterArgs(Params_LoadFirstScene args, IEnumerator ret);

        public delegate void LoadFirstScene_BeforeArgs(Params_LoadFirstScene args);

        public delegate IEnumerator LoadFirstScene_WithArgs(Func<GameManager, IEnumerator> orig, GameManager self);

        public delegate void LoadGame_AfterArgs(Params_LoadGame args);

        public delegate void LoadGame_BeforeArgs(Params_LoadGame args);

        public delegate void LoadGame_WithArgs(Action<GameManager, int, Action<bool>> orig, GameManager self,
            int saveSlot, Action<bool> callback);

        public delegate void LoadGameFromUI_AfterArgs(Params_LoadGameFromUI args);

        public delegate void LoadGameFromUI_BeforeArgs(Params_LoadGameFromUI args);

        public delegate void LoadGameFromUI_WithArgs(Action<GameManager, int> orig, GameManager self, int saveSlot);

        public delegate IEnumerator LoadGameFromUIRoutine_AfterArgs(Params_LoadGameFromUIRoutine args, IEnumerator ret);

        public delegate void LoadGameFromUIRoutine_BeforeArgs(Params_LoadGameFromUIRoutine args);

        public delegate IEnumerator LoadGameFromUIRoutine_WithArgs(Func<GameManager, int, IEnumerator> orig,
            GameManager self, int saveSlot);

        public delegate void LoadMrMushromScene_AfterArgs(Params_LoadMrMushromScene args);

        public delegate void LoadMrMushromScene_BeforeArgs(Params_LoadMrMushromScene args);

        public delegate void LoadMrMushromScene_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void LoadOpeningCinematic_AfterArgs(Params_LoadOpeningCinematic args);

        public delegate void LoadOpeningCinematic_BeforeArgs(Params_LoadOpeningCinematic args);

        public delegate void LoadOpeningCinematic_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void LoadPermadeathUnlockScene_AfterArgs(Params_LoadPermadeathUnlockScene args);

        public delegate void LoadPermadeathUnlockScene_BeforeArgs(Params_LoadPermadeathUnlockScene args);

        public delegate void LoadPermadeathUnlockScene_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void LoadScene_AfterArgs(Params_LoadScene args);

        public delegate void LoadScene_BeforeArgs(Params_LoadScene args);

        public delegate void LoadScene_WithArgs(Action<GameManager, string> orig, GameManager self, string destScene);

        public delegate IEnumerator LoadSceneAdditive_AfterArgs(Params_LoadSceneAdditive args, IEnumerator ret);

        public delegate void LoadSceneAdditive_BeforeArgs(Params_LoadSceneAdditive args);

        public delegate IEnumerator LoadSceneAdditive_WithArgs(Func<GameManager, string, IEnumerator> orig,
            GameManager self, string destScene);

        public delegate void MatchBackerCreditsSetting_AfterArgs(Params_MatchBackerCreditsSetting args);

        public delegate void MatchBackerCreditsSetting_BeforeArgs(Params_MatchBackerCreditsSetting args);

        public delegate void MatchBackerCreditsSetting_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate string ModdedSavePath_AfterArgs(Params_ModdedSavePath args, string ret);

        public delegate void ModdedSavePath_BeforeArgs(Params_ModdedSavePath args);

        public delegate string ModdedSavePath_WithArgs(Func<int, string> orig, int slot);

        public delegate void NoLongerFirstGame_AfterArgs(Params_NoLongerFirstGame args);

        public delegate void NoLongerFirstGame_BeforeArgs(Params_NoLongerFirstGame args);

        public delegate void NoLongerFirstGame_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void OnApplicationQuit_AfterArgs(Params_OnApplicationQuit args);

        public delegate void OnApplicationQuit_BeforeArgs(Params_OnApplicationQuit args);

        public delegate void OnApplicationQuit_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void OnDisengage_AfterArgs(Params_OnDisengage args);

        public delegate void OnDisengage_BeforeArgs(Params_OnDisengage args);

        public delegate void OnDisengage_WithArgs(Action<GameManager, Action> orig, GameManager self, Action next);

        public delegate void OnNextLevelReady_AfterArgs(Params_OnNextLevelReady args);

        public delegate void OnNextLevelReady_BeforeArgs(Params_OnNextLevelReady args);

        public delegate void OnNextLevelReady_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void OnWillActivateFirstLevel_AfterArgs(Params_OnWillActivateFirstLevel args);

        public delegate void OnWillActivateFirstLevel_BeforeArgs(Params_OnWillActivateFirstLevel args);

        public delegate void OnWillActivateFirstLevel_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void orig_ClearSaveFile_AfterArgs(Params_orig_ClearSaveFile args);

        public delegate void orig_ClearSaveFile_BeforeArgs(Params_orig_ClearSaveFile args);

        public delegate void orig_ClearSaveFile_WithArgs(Action<GameManager, int, Action<bool>> orig, GameManager self,
            int saveSlot, Action<bool> callback);

        public delegate UIManager orig_get_ui_AfterArgs(Params_orig_get_ui args, UIManager ret);

        public delegate void orig_get_ui_BeforeArgs(Params_orig_get_ui args);

        public delegate UIManager orig_get_ui_WithArgs(Func<GameManager, UIManager> orig, GameManager self);

        public delegate void orig_LoadScene_AfterArgs(Params_orig_LoadScene args);

        public delegate void orig_LoadScene_BeforeArgs(Params_orig_LoadScene args);

        public delegate void orig_LoadScene_WithArgs(Action<GameManager, string> orig, GameManager self,
            string destScene);

        public delegate void orig_OnApplicationQuit_AfterArgs(Params_orig_OnApplicationQuit args);

        public delegate void orig_OnApplicationQuit_BeforeArgs(Params_orig_OnApplicationQuit args);

        public delegate void orig_OnApplicationQuit_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void orig_OnWillActivateFirstLevel_AfterArgs(Params_orig_OnWillActivateFirstLevel args);

        public delegate void orig_OnWillActivateFirstLevel_BeforeArgs(Params_orig_OnWillActivateFirstLevel args);

        public delegate void orig_OnWillActivateFirstLevel_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate IEnumerator orig_PlayerDead_AfterArgs(Params_orig_PlayerDead args, IEnumerator ret);

        public delegate void orig_PlayerDead_BeforeArgs(Params_orig_PlayerDead args);

        public delegate IEnumerator orig_PlayerDead_WithArgs(Func<GameManager, float, IEnumerator> orig,
            GameManager self, float waitTime);

        public delegate void orig_set_ui_AfterArgs(Params_orig_set_ui args);

        public delegate void orig_set_ui_BeforeArgs(Params_orig_set_ui args);

        public delegate void orig_set_ui_WithArgs(Action<GameManager, UIManager> orig, GameManager self,
            UIManager value);

        public delegate void orig_SetupSceneRefs_AfterArgs(Params_orig_SetupSceneRefs args);

        public delegate void orig_SetupSceneRefs_BeforeArgs(Params_orig_SetupSceneRefs args);

        public delegate void orig_SetupSceneRefs_WithArgs(Action<GameManager, bool> orig, GameManager self,
            bool refreshTilemapInfo);

        public delegate IEnumerator PauseGameToggle_AfterArgs(Params_PauseGameToggle args, IEnumerator ret);

        public delegate void PauseGameToggle_BeforeArgs(Params_PauseGameToggle args);

        public delegate IEnumerator PauseGameToggle_WithArgs(Func<GameManager, IEnumerator> orig, GameManager self);

        public delegate IEnumerator PauseGameToggleByMenu_AfterArgs(Params_PauseGameToggleByMenu args, IEnumerator ret);

        public delegate void PauseGameToggleByMenu_BeforeArgs(Params_PauseGameToggleByMenu args);

        public delegate IEnumerator PauseGameToggleByMenu_WithArgs(Func<GameManager, IEnumerator> orig,
            GameManager self);

        public delegate IEnumerator PauseToggleDynamicMenu_AfterArgs(Params_PauseToggleDynamicMenu args,
            IEnumerator ret);

        public delegate void PauseToggleDynamicMenu_BeforeArgs(Params_PauseToggleDynamicMenu args);

        public delegate IEnumerator PauseToggleDynamicMenu_WithArgs(
            Func<GameManager, MenuScreen, bool, IEnumerator> orig, GameManager self, MenuScreen screen,
            bool allowUnpause);

        public delegate IEnumerator PlayerDead_AfterArgs(Params_PlayerDead args, IEnumerator ret);

        public delegate void PlayerDead_BeforeArgs(Params_PlayerDead args);

        public delegate IEnumerator PlayerDead_WithArgs(Func<GameManager, float, IEnumerator> orig, GameManager self,
            float waitTime);

        public delegate IEnumerator PlayerDeadFromHazard_AfterArgs(Params_PlayerDeadFromHazard args, IEnumerator ret);

        public delegate void PlayerDeadFromHazard_BeforeArgs(Params_PlayerDeadFromHazard args);

        public delegate IEnumerator PlayerDeadFromHazard_WithArgs(Func<GameManager, float, IEnumerator> orig,
            GameManager self, float waitTime);

        public delegate void PositionHeroAtSceneEntrance_AfterArgs(Params_PositionHeroAtSceneEntrance args);

        public delegate void PositionHeroAtSceneEntrance_BeforeArgs(Params_PositionHeroAtSceneEntrance args);

        public delegate void PositionHeroAtSceneEntrance_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void QueueAchievement_AfterArgs(Params_QueueAchievement args);

        public delegate void QueueAchievement_BeforeArgs(Params_QueueAchievement args);

        public delegate void QueueAchievement_WithArgs(Action<GameManager, string> orig, GameManager self, string key);

        public delegate IEnumerator QuitGame_AfterArgs(Params_QuitGame args, IEnumerator ret);

        public delegate void QuitGame_BeforeArgs(Params_QuitGame args);

        public delegate IEnumerator QuitGame_WithArgs(Func<GameManager, IEnumerator> orig, GameManager self);

        public delegate void ReadyForRespawn_AfterArgs(Params_ReadyForRespawn args);

        public delegate void ReadyForRespawn_BeforeArgs(Params_ReadyForRespawn args);

        public delegate void ReadyForRespawn_WithArgs(Action<GameManager, bool> orig, GameManager self,
            bool isFirstLevelForPlayer);

        public delegate void RefreshLocalization_AfterArgs(Params_RefreshLocalization args);

        public delegate void RefreshLocalization_BeforeArgs(Params_RefreshLocalization args);

        public delegate void RefreshLocalization_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void RefreshOvercharm_AfterArgs(Params_RefreshOvercharm args);

        public delegate void RefreshOvercharm_BeforeArgs(Params_RefreshOvercharm args);

        public delegate void RefreshOvercharm_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void RefreshParticleSystems_AfterArgs(Params_RefreshParticleSystems args);

        public delegate void RefreshParticleSystems_BeforeArgs(Params_RefreshParticleSystems args);

        public delegate void RefreshParticleSystems_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void RefreshTilemapInfo_AfterArgs(Params_RefreshTilemapInfo args);

        public delegate void RefreshTilemapInfo_BeforeArgs(Params_RefreshTilemapInfo args);

        public delegate void RefreshTilemapInfo_WithArgs(Action<GameManager, string> orig, GameManager self,
            string targetScene);

        public delegate void ResetGameTimer_AfterArgs(Params_ResetGameTimer args);

        public delegate void ResetGameTimer_BeforeArgs(Params_ResetGameTimer args);

        public delegate void ResetGameTimer_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void ResetSemiPersistentItems_AfterArgs(Params_ResetSemiPersistentItems args);

        public delegate void ResetSemiPersistentItems_BeforeArgs(Params_ResetSemiPersistentItems args);

        public delegate void ResetSemiPersistentItems_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void ResetStatusRecords_AfterArgs(Params_ResetStatusRecords args);

        public delegate void ResetStatusRecords_BeforeArgs(Params_ResetStatusRecords args);

        public delegate void ResetStatusRecords_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate IEnumerator RunContinueGame_AfterArgs(Params_RunContinueGame args, IEnumerator ret);

        public delegate void RunContinueGame_BeforeArgs(Params_RunContinueGame args);

        public delegate IEnumerator RunContinueGame_WithArgs(Func<GameManager, IEnumerator> orig, GameManager self);

        public delegate IEnumerator RunStartNewGame_AfterArgs(Params_RunStartNewGame args, IEnumerator ret);

        public delegate void RunStartNewGame_BeforeArgs(Params_RunStartNewGame args);

        public delegate IEnumerator RunStartNewGame_WithArgs(Func<GameManager, IEnumerator> orig, GameManager self);

        public delegate void SaveGame_Action_AfterArgs(Params_SaveGame_Action args);

        public delegate void SaveGame_Action_BeforeArgs(Params_SaveGame_Action args);

        public delegate void SaveGame_Action_WithArgs(Action<GameManager, Action<bool>> orig, GameManager self,
            Action<bool> callback);

        public delegate void SaveGame_AfterArgs(Params_SaveGame args);

        public delegate void SaveGame_BeforeArgs(Params_SaveGame args);

        public delegate void SaveGame_int_Action_AfterArgs(Params_SaveGame_int_Action args);

        public delegate void SaveGame_int_Action_BeforeArgs(Params_SaveGame_int_Action args);

        public delegate void SaveGame_int_Action_WithArgs(Action<GameManager, int, Action<bool>> orig, GameManager self,
            int saveSlot, Action<bool> callback);

        public delegate void SaveGame_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void SaveLevelState_AfterArgs(Params_SaveLevelState args);

        public delegate void SaveLevelState_BeforeArgs(Params_SaveLevelState args);

        public delegate void SaveLevelState_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void SaveStatusRecords_AfterArgs(Params_SaveStatusRecords args);

        public delegate void SaveStatusRecords_BeforeArgs(Params_SaveStatusRecords args);

        public delegate void SaveStatusRecords_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void set_achievementHandler_AfterArgs(Params_set_achievementHandler args);

        public delegate void set_achievementHandler_BeforeArgs(Params_set_achievementHandler args);

        public delegate void set_achievementHandler_WithArgs(Action<GameManager, AchievementHandler> orig,
            GameManager self, AchievementHandler value);

        public delegate void set_cameraCtrl_AfterArgs(Params_set_cameraCtrl args);

        public delegate void set_cameraCtrl_BeforeArgs(Params_set_cameraCtrl args);

        public delegate void set_cameraCtrl_WithArgs(Action<GameManager, CameraController> orig, GameManager self,
            CameraController value);

        public delegate void set_hero_ctrl_AfterArgs(Params_set_hero_ctrl args);

        public delegate void set_hero_ctrl_BeforeArgs(Params_set_hero_ctrl args);

        public delegate void set_hero_ctrl_WithArgs(Action<GameManager, HeroController> orig, GameManager self,
            HeroController value);

        public delegate void set_heroLight_AfterArgs(Params_set_heroLight args);

        public delegate void set_heroLight_BeforeArgs(Params_set_heroLight args);

        public delegate void set_heroLight_WithArgs(Action<GameManager, SpriteRenderer> orig, GameManager self,
            SpriteRenderer value);

        public delegate void set_inputHandler_AfterArgs(Params_set_inputHandler args);

        public delegate void set_inputHandler_BeforeArgs(Params_set_inputHandler args);

        public delegate void set_inputHandler_WithArgs(Action<GameManager, InputHandler> orig, GameManager self,
            InputHandler value);

        public delegate void set_IsInSceneTransition_AfterArgs(Params_set_IsInSceneTransition args);

        public delegate void set_IsInSceneTransition_BeforeArgs(Params_set_IsInSceneTransition args);

        public delegate void set_IsInSceneTransition_WithArgs(Action<GameManager, bool> orig, GameManager self,
            bool value);

        public delegate void set_RespawningHero_AfterArgs(Params_set_RespawningHero args);

        public delegate void set_RespawningHero_BeforeArgs(Params_set_RespawningHero args);

        public delegate void set_RespawningHero_WithArgs(Action<GameManager, bool> orig, GameManager self, bool value);

        public delegate void set_sm_AfterArgs(Params_set_sm args);

        public delegate void set_sm_BeforeArgs(Params_set_sm args);

        public delegate void set_sm_WithArgs(Action<GameManager, SceneManager> orig, GameManager self,
            SceneManager value);

        public delegate void set_soulOrb_fsm_AfterArgs(Params_set_soulOrb_fsm args);

        public delegate void set_soulOrb_fsm_BeforeArgs(Params_set_soulOrb_fsm args);

        public delegate void set_soulOrb_fsm_WithArgs(Action<GameManager, PlayMakerFSM> orig, GameManager self,
            PlayMakerFSM value);

        public delegate void set_soulVessel_fsm_AfterArgs(Params_set_soulVessel_fsm args);

        public delegate void set_soulVessel_fsm_BeforeArgs(Params_set_soulVessel_fsm args);

        public delegate void set_soulVessel_fsm_WithArgs(Action<GameManager, PlayMakerFSM> orig, GameManager self,
            PlayMakerFSM value);

        public delegate void set_tilemap_AfterArgs(Params_set_tilemap args);

        public delegate void set_tilemap_BeforeArgs(Params_set_tilemap args);

        public delegate void set_tilemap_WithArgs(Action<GameManager, tk2dTileMap> orig, GameManager self,
            tk2dTileMap value);

        public delegate void set_ui_AfterArgs(Params_set_ui args);

        public delegate void set_ui_BeforeArgs(Params_set_ui args);

        public delegate void set_ui_WithArgs(Action<GameManager, UIManager> orig, GameManager self, UIManager value);

        public delegate void SetCurrentMapZoneAsRespawn_AfterArgs(Params_SetCurrentMapZoneAsRespawn args);

        public delegate void SetCurrentMapZoneAsRespawn_BeforeArgs(Params_SetCurrentMapZoneAsRespawn args);

        public delegate void SetCurrentMapZoneAsRespawn_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void SetGameMap_AfterArgs(Params_SetGameMap args);

        public delegate void SetGameMap_BeforeArgs(Params_SetGameMap args);

        public delegate void SetGameMap_WithArgs(Action<GameManager, GameObject> orig, GameManager self,
            GameObject go_gameMap);

        public delegate void SetMapZoneToSpecific_AfterArgs(Params_SetMapZoneToSpecific args);

        public delegate void SetMapZoneToSpecific_BeforeArgs(Params_SetMapZoneToSpecific args);

        public delegate void SetMapZoneToSpecific_WithArgs(Action<GameManager, string> orig, GameManager self,
            string mapZone);

        public delegate void SetPlayerDataBool_AfterArgs(Params_SetPlayerDataBool args);

        public delegate void SetPlayerDataBool_BeforeArgs(Params_SetPlayerDataBool args);

        public delegate void SetPlayerDataBool_WithArgs(Action<GameManager, string, bool> orig, GameManager self,
            string boolName, bool value);

        public delegate void SetPlayerDataFloat_AfterArgs(Params_SetPlayerDataFloat args);

        public delegate void SetPlayerDataFloat_BeforeArgs(Params_SetPlayerDataFloat args);

        public delegate void SetPlayerDataFloat_WithArgs(Action<GameManager, string, float> orig, GameManager self,
            string floatName, float value);

        public delegate void SetPlayerDataInt_AfterArgs(Params_SetPlayerDataInt args);

        public delegate void SetPlayerDataInt_BeforeArgs(Params_SetPlayerDataInt args);

        public delegate void SetPlayerDataInt_WithArgs(Action<GameManager, string, int> orig, GameManager self,
            string intName, int value);

        public delegate void SetPlayerDataString_AfterArgs(Params_SetPlayerDataString args);

        public delegate void SetPlayerDataString_BeforeArgs(Params_SetPlayerDataString args);

        public delegate void SetPlayerDataString_WithArgs(Action<GameManager, string, string> orig, GameManager self,
            string stringName, string value);

        public delegate void SetPlayerDataVector3_AfterArgs(Params_SetPlayerDataVector3 args);

        public delegate void SetPlayerDataVector3_BeforeArgs(Params_SetPlayerDataVector3 args);

        public delegate void SetPlayerDataVector3_WithArgs(Action<GameManager, string, Vector3> orig, GameManager self,
            string vectorName, Vector3 value);

        public delegate void SetState_AfterArgs(Params_SetState args);

        public delegate void SetState_BeforeArgs(Params_SetState args);

        public delegate void SetState_WithArgs(Action<GameManager, GameState> orig, GameManager self,
            GameState newState);

        public delegate void SetStatusRecordInt_AfterArgs(Params_SetStatusRecordInt args);

        public delegate void SetStatusRecordInt_BeforeArgs(Params_SetStatusRecordInt args);

        public delegate void SetStatusRecordInt_WithArgs(Action<GameManager, string, int> orig, GameManager self,
            string key, int value);

        public delegate void SetTimeScale_float_AfterArgs(Params_SetTimeScale_float args);

        public delegate void SetTimeScale_float_BeforeArgs(Params_SetTimeScale_float args);

        public delegate IEnumerator SetTimeScale_float_float_AfterArgs(Params_SetTimeScale_float_float args,
            IEnumerator ret);

        public delegate void SetTimeScale_float_float_BeforeArgs(Params_SetTimeScale_float_float args);

        public delegate IEnumerator SetTimeScale_float_float_WithArgs(Func<GameManager, float, float, IEnumerator> orig,
            GameManager self, float newTimeScale, float duration);

        public delegate void SetTimeScale_float_WithArgs(Action<GameManager, float> orig, GameManager self,
            float newTimeScale);

        public delegate void SetupGameRefs_AfterArgs(Params_SetupGameRefs args);

        public delegate void SetupGameRefs_BeforeArgs(Params_SetupGameRefs args);

        public delegate void SetupGameRefs_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void SetupHeroRefs_AfterArgs(Params_SetupHeroRefs args);

        public delegate void SetupHeroRefs_BeforeArgs(Params_SetupHeroRefs args);

        public delegate void SetupHeroRefs_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void SetupSceneRefs_AfterArgs(Params_SetupSceneRefs args);

        public delegate void SetupSceneRefs_BeforeArgs(Params_SetupSceneRefs args);

        public delegate void SetupSceneRefs_WithArgs(Action<GameManager, bool> orig, GameManager self,
            bool refreshTilemapInfo);

        public delegate void SetupStatusModifiers_AfterArgs(Params_SetupStatusModifiers args);

        public delegate void SetupStatusModifiers_BeforeArgs(Params_SetupStatusModifiers args);

        public delegate void SetupStatusModifiers_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate bool ShouldKeepHUDCameraActive_AfterArgs(Params_ShouldKeepHUDCameraActive args, bool ret);

        public delegate void ShouldKeepHUDCameraActive_BeforeArgs(Params_ShouldKeepHUDCameraActive args);

        public delegate bool ShouldKeepHUDCameraActive_WithArgs(Func<GameManager, bool> orig, GameManager self);

        public delegate void ShowSaveIcon_AfterArgs(Params_ShowSaveIcon args);

        public delegate void ShowSaveIcon_BeforeArgs(Params_ShowSaveIcon args);

        public delegate void ShowSaveIcon_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void SkipCutscene_AfterArgs(Params_SkipCutscene args);

        public delegate void SkipCutscene_BeforeArgs(Params_SkipCutscene args);

        public delegate void SkipCutscene_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate IEnumerator SkipCutsceneNoMash_AfterArgs(Params_SkipCutsceneNoMash args, IEnumerator ret);

        public delegate void SkipCutsceneNoMash_BeforeArgs(Params_SkipCutsceneNoMash args);

        public delegate IEnumerator SkipCutsceneNoMash_WithArgs(Func<GameManager, IEnumerator> orig, GameManager self);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void StartNewGame_AfterArgs(Params_StartNewGame args);

        public delegate void StartNewGame_BeforeArgs(Params_StartNewGame args);

        public delegate void StartNewGame_WithArgs(Action<GameManager, bool, bool> orig, GameManager self,
            bool permadeathMode, bool bossRushMode);

        public delegate void StartSoulLimiter_AfterArgs(Params_StartSoulLimiter args);

        public delegate void StartSoulLimiter_BeforeArgs(Params_StartSoulLimiter args);

        public delegate void StartSoulLimiter_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void StoryRecord_acquired_AfterArgs(Params_StoryRecord_acquired args);

        public delegate void StoryRecord_acquired_BeforeArgs(Params_StoryRecord_acquired args);

        public delegate void StoryRecord_acquired_WithArgs(Action<GameManager, string> orig, GameManager self,
            string item);

        public delegate void StoryRecord_bankDeposit_AfterArgs(Params_StoryRecord_bankDeposit args);

        public delegate void StoryRecord_bankDeposit_BeforeArgs(Params_StoryRecord_bankDeposit args);

        public delegate void StoryRecord_bankDeposit_WithArgs(Action<GameManager, int> orig, GameManager self,
            int amount);

        public delegate void StoryRecord_bankWithdraw_AfterArgs(Params_StoryRecord_bankWithdraw args);

        public delegate void StoryRecord_bankWithdraw_BeforeArgs(Params_StoryRecord_bankWithdraw args);

        public delegate void StoryRecord_bankWithdraw_WithArgs(Action<GameManager, int> orig, GameManager self,
            int amount);

        public delegate void StoryRecord_bought_AfterArgs(Params_StoryRecord_bought args);

        public delegate void StoryRecord_bought_BeforeArgs(Params_StoryRecord_bought args);

        public delegate void StoryRecord_bought_WithArgs(Action<GameManager, string> orig, GameManager self,
            string item);

        public delegate void StoryRecord_boughtCorniferMap_AfterArgs(Params_StoryRecord_boughtCorniferMap args);

        public delegate void StoryRecord_boughtCorniferMap_BeforeArgs(Params_StoryRecord_boughtCorniferMap args);

        public delegate void StoryRecord_boughtCorniferMap_WithArgs(Action<GameManager, string> orig, GameManager self,
            string map);

        public delegate void StoryRecord_charmEquipped_AfterArgs(Params_StoryRecord_charmEquipped args);

        public delegate void StoryRecord_charmEquipped_BeforeArgs(Params_StoryRecord_charmEquipped args);

        public delegate void StoryRecord_charmEquipped_WithArgs(Action<GameManager, string> orig, GameManager self,
            string charmName);

        public delegate void StoryRecord_charmsChanged_AfterArgs(Params_StoryRecord_charmsChanged args);

        public delegate void StoryRecord_charmsChanged_BeforeArgs(Params_StoryRecord_charmsChanged args);

        public delegate void StoryRecord_charmsChanged_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void StoryRecord_death_AfterArgs(Params_StoryRecord_death args);

        public delegate void StoryRecord_death_BeforeArgs(Params_StoryRecord_death args);

        public delegate void StoryRecord_death_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void StoryRecord_defeated_AfterArgs(Params_StoryRecord_defeated args);

        public delegate void StoryRecord_defeated_BeforeArgs(Params_StoryRecord_defeated args);

        public delegate void StoryRecord_defeated_WithArgs(Action<GameManager, string> orig, GameManager self,
            string defeated);

        public delegate void StoryRecord_defeatedShade_AfterArgs(Params_StoryRecord_defeatedShade args);

        public delegate void StoryRecord_defeatedShade_BeforeArgs(Params_StoryRecord_defeatedShade args);

        public delegate void StoryRecord_defeatedShade_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void StoryRecord_discoveredArea_AfterArgs(Params_StoryRecord_discoveredArea args);

        public delegate void StoryRecord_discoveredArea_BeforeArgs(Params_StoryRecord_discoveredArea args);

        public delegate void StoryRecord_discoveredArea_WithArgs(Action<GameManager, string> orig, GameManager self,
            string areaName);

        public delegate void StoryRecord_heartPiece_AfterArgs(Params_StoryRecord_heartPiece args);

        public delegate void StoryRecord_heartPiece_BeforeArgs(Params_StoryRecord_heartPiece args);

        public delegate void StoryRecord_heartPiece_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void StoryRecord_jiji_AfterArgs(Params_StoryRecord_jiji args);

        public delegate void StoryRecord_jiji_BeforeArgs(Params_StoryRecord_jiji args);

        public delegate void StoryRecord_jiji_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void StoryRecord_maxHealthUp_AfterArgs(Params_StoryRecord_maxHealthUp args);

        public delegate void StoryRecord_maxHealthUp_BeforeArgs(Params_StoryRecord_maxHealthUp args);

        public delegate void StoryRecord_maxHealthUp_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void StoryRecord_maxSoulUp_AfterArgs(Params_StoryRecord_maxSoulUp args);

        public delegate void StoryRecord_maxSoulUp_BeforeArgs(Params_StoryRecord_maxSoulUp args);

        public delegate void StoryRecord_maxSoulUp_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void StoryRecord_quit_AfterArgs(Params_StoryRecord_quit args);

        public delegate void StoryRecord_quit_BeforeArgs(Params_StoryRecord_quit args);

        public delegate void StoryRecord_quit_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void StoryRecord_rescueGrub_AfterArgs(Params_StoryRecord_rescueGrub args);

        public delegate void StoryRecord_rescueGrub_BeforeArgs(Params_StoryRecord_rescueGrub args);

        public delegate void StoryRecord_rescueGrub_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void StoryRecord_rest_AfterArgs(Params_StoryRecord_rest args);

        public delegate void StoryRecord_rest_BeforeArgs(Params_StoryRecord_rest args);

        public delegate void StoryRecord_rest_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void StoryRecord_rodeStag_AfterArgs(Params_StoryRecord_rodeStag args);

        public delegate void StoryRecord_rodeStag_BeforeArgs(Params_StoryRecord_rodeStag args);

        public delegate void StoryRecord_rodeStag_WithArgs(Action<GameManager, string> orig, GameManager self,
            string dest);

        public delegate void StoryRecord_soulPiece_AfterArgs(Params_StoryRecord_soulPiece args);

        public delegate void StoryRecord_soulPiece_BeforeArgs(Params_StoryRecord_soulPiece args);

        public delegate void StoryRecord_soulPiece_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void StoryRecord_start_AfterArgs(Params_StoryRecord_start args);

        public delegate void StoryRecord_start_BeforeArgs(Params_StoryRecord_start args);

        public delegate void StoryRecord_start_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void StoryRecord_travelledToArea_AfterArgs(Params_StoryRecord_travelledToArea args);

        public delegate void StoryRecord_travelledToArea_BeforeArgs(Params_StoryRecord_travelledToArea args);

        public delegate void StoryRecord_travelledToArea_WithArgs(Action<GameManager, string> orig, GameManager self,
            string areaName);

        public delegate void StoryRecord_upgradeNail_AfterArgs(Params_StoryRecord_upgradeNail args);

        public delegate void StoryRecord_upgradeNail_BeforeArgs(Params_StoryRecord_upgradeNail args);

        public delegate void StoryRecord_upgradeNail_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void StoryRecord_visited_AfterArgs(Params_StoryRecord_visited args);

        public delegate void StoryRecord_visited_BeforeArgs(Params_StoryRecord_visited args);

        public delegate void StoryRecord_visited_WithArgs(Action<GameManager, string> orig, GameManager self,
            string visited);

        public delegate void TimePasses_AfterArgs(Params_TimePasses args);

        public delegate void TimePasses_BeforeArgs(Params_TimePasses args);

        public delegate void TimePasses_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate IEnumerator TransitionScene_AfterArgs(Params_TransitionScene args, IEnumerator ret);

        public delegate void TransitionScene_BeforeArgs(Params_TransitionScene args);

        public delegate IEnumerator TransitionScene_WithArgs(Func<GameManager, TransitionPoint, IEnumerator> orig,
            GameManager self, TransitionPoint gate);

        public delegate void UnequipCharm_AfterArgs(Params_UnequipCharm args);

        public delegate void UnequipCharm_BeforeArgs(Params_UnequipCharm args);

        public delegate void UnequipCharm_WithArgs(Action<GameManager, int> orig, GameManager self, int charmNum);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void UpdateBlueHealth_AfterArgs(Params_UpdateBlueHealth args);

        public delegate void UpdateBlueHealth_BeforeArgs(Params_UpdateBlueHealth args);

        public delegate void UpdateBlueHealth_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void UpdateEngagement_AfterArgs(Params_UpdateEngagement args);

        public delegate void UpdateEngagement_BeforeArgs(Params_UpdateEngagement args);

        public delegate void UpdateEngagement_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate bool UpdateGameMap_AfterArgs(Params_UpdateGameMap args, bool ret);

        public delegate void UpdateGameMap_BeforeArgs(Params_UpdateGameMap args);

        public delegate bool UpdateGameMap_WithArgs(Func<GameManager, bool> orig, GameManager self);

        public delegate void UpdateSceneName_AfterArgs(Params_UpdateSceneName args);

        public delegate void UpdateSceneName_BeforeArgs(Params_UpdateSceneName args);

        public delegate void UpdateSceneName_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void UpdateUIStateFromGameState_AfterArgs(Params_UpdateUIStateFromGameState args);

        public delegate void UpdateUIStateFromGameState_BeforeArgs(Params_UpdateUIStateFromGameState args);

        public delegate void UpdateUIStateFromGameState_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void WarpToDreamGate_AfterArgs(Params_WarpToDreamGate args);

        public delegate void WarpToDreamGate_BeforeArgs(Params_WarpToDreamGate args);

        public delegate void WarpToDreamGate_WithArgs(Action<GameManager> orig, GameManager self);

        public delegate void WillTerminateInBackground_AfterArgs(Params_WillTerminateInBackground args);

        public delegate void WillTerminateInBackground_BeforeArgs(Params_WillTerminateInBackground args);

        public delegate void WillTerminateInBackground_WithArgs(Action<GameManager> orig, GameManager self);

        public sealed class Params_get_TimeSlowed
        {
            public GameManager self;
        }

        public sealed class Params_get_inputHandler
        {
            public GameManager self;
        }

        public sealed class Params_set_inputHandler
        {
            public GameManager self;
            public InputHandler value;
        }

        public sealed class Params_get_achievementHandler
        {
            public GameManager self;
        }

        public sealed class Params_set_achievementHandler
        {
            public GameManager self;
            public AchievementHandler value;
        }

        public sealed class Params_get_AudioManager
        {
            public GameManager self;
        }

        public sealed class Params_get_cameraCtrl
        {
            public GameManager self;
        }

        public sealed class Params_set_cameraCtrl
        {
            public GameManager self;
            public CameraController value;
        }

        public sealed class Params_get_hero_ctrl
        {
            public GameManager self;
        }

        public sealed class Params_set_hero_ctrl
        {
            public GameManager self;
            public HeroController value;
        }

        public sealed class Params_get_heroLight
        {
            public GameManager self;
        }

        public sealed class Params_set_heroLight
        {
            public GameManager self;
            public SpriteRenderer value;
        }

        public sealed class Params_get_sm
        {
            public GameManager self;
        }

        public sealed class Params_set_sm
        {
            public GameManager self;
            public SceneManager value;
        }

        public sealed class Params_get_ui
        {
            public GameManager self;
        }

        public sealed class Params_set_ui
        {
            public GameManager self;
            public UIManager value;
        }

        public sealed class Params_get_tilemap
        {
            public GameManager self;
        }

        public sealed class Params_set_tilemap
        {
            public GameManager self;
            public tk2dTileMap value;
        }

        public sealed class Params_get_soulOrb_fsm
        {
            public GameManager self;
        }

        public sealed class Params_set_soulOrb_fsm
        {
            public GameManager self;
            public PlayMakerFSM value;
        }

        public sealed class Params_get_soulVessel_fsm
        {
            public GameManager self;
        }

        public sealed class Params_set_soulVessel_fsm
        {
            public GameManager self;
            public PlayMakerFSM value;
        }

        public sealed class Params_get_PlayTime
        {
            public GameManager self;
        }

        public sealed class Params_get_RespawningHero
        {
            public GameManager self;
        }

        public sealed class Params_set_RespawningHero
        {
            public GameManager self;
            public bool value;
        }

        public sealed class Params_get_IsInSceneTransition
        {
            public GameManager self;
        }

        public sealed class Params_set_IsInSceneTransition
        {
            public GameManager self;
            public bool value;
        }

        public sealed class Params_get_HasFinishedEnteringScene
        {
            public GameManager self;
        }

        public sealed class Params_get_WorldInfo
        {
            public GameManager self;
        }

        public sealed class Params_get_IsLoadingSceneTransition
        {
            public GameManager self;
        }

        public sealed class Params_get_CurrentLoadDuration
        {
            public GameManager self;
        }

        public sealed class Params_get_IsUsingCustomLoadAnimation
        {
            public GameManager self;
        }

        public sealed class Params_Awake
        {
            public GameManager self;
        }

        public sealed class Params_Start
        {
            public GameManager self;
        }

        public sealed class Params_Update
        {
            public GameManager self;
        }

        public sealed class Params_UpdateEngagement
        {
            public GameManager self;
        }

        public sealed class Params_LevelActivated
        {
            public Scene sceneFrom;
            public Scene sceneTo;
            public GameManager self;
        }

        public sealed class Params_OnDisable
        {
            public GameManager self;
        }

        public sealed class Params_OnApplicationQuit
        {
            public GameManager self;
        }

        public sealed class Params_TransitionScene
        {
            public TransitionPoint gate;
            public GameManager self;
        }

        public sealed class Params_ChangeToScene
        {
            public string entryGateName;
            public float pauseBeforeEnter;
            public GameManager self;
            public string targetScene;
        }

        public sealed class Params_WarpToDreamGate
        {
            public GameManager self;
        }

        public sealed class Params_LeftScene
        {
            public bool doAdditiveLoad;
            public GameManager self;
        }

        public sealed class Params_PlayerDead
        {
            public GameManager self;
            public float waitTime;
        }

        public sealed class Params_PlayerDeadFromHazard
        {
            public GameManager self;
            public float waitTime;
        }

        public sealed class Params_ReadyForRespawn
        {
            public bool isFirstLevelForPlayer;
            public GameManager self;
        }

        public sealed class Params_HazardRespawn
        {
            public GameManager self;
        }

        public sealed class Params_TimePasses
        {
            public GameManager self;
        }

        public sealed class Params_FadeSceneIn
        {
            public GameManager self;
        }

        public sealed class Params_FadeSceneInWithDelay
        {
            public float delay;
            public GameManager self;
        }

        public sealed class Params_IsGamePaused
        {
            public GameManager self;
        }

        public sealed class Params_SetGameMap
        {
            public GameObject go_gameMap;
            public GameManager self;
        }

        public sealed class Params_CalculateNotchesUsed
        {
            public GameManager self;
        }

        public sealed class Params_GetLanguageAsString
        {
            public GameManager self;
        }

        public sealed class Params_GetEntryGateName
        {
            public GameManager self;
        }

        public sealed class Params_SetPlayerDataBool
        {
            public string boolName;
            public GameManager self;
            public bool value;
        }

        public sealed class Params_SetPlayerDataInt
        {
            public string intName;
            public GameManager self;
            public int value;
        }

        public sealed class Params_SetPlayerDataFloat
        {
            public string floatName;
            public GameManager self;
            public float value;
        }

        public sealed class Params_SetPlayerDataString
        {
            public GameManager self;
            public string stringName;
            public string value;
        }

        public sealed class Params_IncrementPlayerDataInt
        {
            public string intName;
            public GameManager self;
        }

        public sealed class Params_DecrementPlayerDataInt
        {
            public string intName;
            public GameManager self;
        }

        public sealed class Params_IntAdd
        {
            public int amount;
            public string intName;
            public GameManager self;
        }

        public sealed class Params_GetPlayerDataBool
        {
            public string boolName;
            public GameManager self;
        }

        public sealed class Params_GetPlayerDataInt
        {
            public string intName;
            public GameManager self;
        }

        public sealed class Params_GetPlayerDataFloat
        {
            public string floatName;
            public GameManager self;
        }

        public sealed class Params_GetPlayerDataString
        {
            public GameManager self;
            public string stringName;
        }

        public sealed class Params_SetPlayerDataVector3
        {
            public GameManager self;
            public Vector3 value;
            public string vectorName;
        }

        public sealed class Params_GetPlayerDataVector3
        {
            public GameManager self;
            public string vectorName;
        }

        public sealed class Params_EquipCharm
        {
            public int charmNum;
            public GameManager self;
        }

        public sealed class Params_UnequipCharm
        {
            public int charmNum;
            public GameManager self;
        }

        public sealed class Params_RefreshOvercharm
        {
            public GameManager self;
        }

        public sealed class Params_UpdateBlueHealth
        {
            public GameManager self;
        }

        public sealed class Params_SetCurrentMapZoneAsRespawn
        {
            public GameManager self;
        }

        public sealed class Params_SetMapZoneToSpecific
        {
            public string mapZone;
            public GameManager self;
        }

        public sealed class Params_StartSoulLimiter
        {
            public GameManager self;
        }

        public sealed class Params_EndSoulLimiter
        {
            public GameManager self;
        }

        public sealed class Params_UpdateGameMap
        {
            public GameManager self;
        }

        public sealed class Params_CheckAllMaps
        {
            public GameManager self;
        }

        public sealed class Params_AddToScenesVisited
        {
            public string scene;
            public GameManager self;
        }

        public sealed class Params_GetIsSceneVisited
        {
            public string scene;
            public GameManager self;
        }

        public sealed class Params_AddToBenchList
        {
            public GameManager self;
        }

        public sealed class Params_AddToGrubList
        {
            public GameManager self;
        }

        public sealed class Params_AddToFlameList
        {
            public GameManager self;
        }

        public sealed class Params_AddToCocoonList
        {
            public GameManager self;
        }

        public sealed class Params_AddToDreamPlantList
        {
            public GameManager self;
        }

        public sealed class Params_AddToDreamPlantCList
        {
            public GameManager self;
        }

        public sealed class Params_CountGameCompletion
        {
            public GameManager self;
        }

        public sealed class Params_CountCharms
        {
            public GameManager self;
        }

        public sealed class Params_CountJournalEntries
        {
            public GameManager self;
        }

        public sealed class Params_ActivateTestingCheats
        {
            public GameManager self;
        }

        public sealed class Params_GetAllPowerups
        {
            public GameManager self;
        }

        public sealed class Params_StoryRecord_death
        {
            public GameManager self;
        }

        public sealed class Params_StoryRecord_rescueGrub
        {
            public GameManager self;
        }

        public sealed class Params_StoryRecord_defeatedShade
        {
            public GameManager self;
        }

        public sealed class Params_StoryRecord_discoveredArea
        {
            public string areaName;
            public GameManager self;
        }

        public sealed class Params_StoryRecord_travelledToArea
        {
            public string areaName;
            public GameManager self;
        }

        public sealed class Params_StoryRecord_bankDeposit
        {
            public int amount;
            public GameManager self;
        }

        public sealed class Params_StoryRecord_bankWithdraw
        {
            public int amount;
            public GameManager self;
        }

        public sealed class Params_StoryRecord_boughtCorniferMap
        {
            public string map;
            public GameManager self;
        }

        public sealed class Params_StoryRecord_visited
        {
            public GameManager self;
            public string visited;
        }

        public sealed class Params_StoryRecord_defeated
        {
            public string defeated;
            public GameManager self;
        }

        public sealed class Params_StoryRecord_jiji
        {
            public GameManager self;
        }

        public sealed class Params_StoryRecord_rodeStag
        {
            public string dest;
            public GameManager self;
        }

        public sealed class Params_StoryRecord_acquired
        {
            public string item;
            public GameManager self;
        }

        public sealed class Params_StoryRecord_bought
        {
            public string item;
            public GameManager self;
        }

        public sealed class Params_StoryRecord_quit
        {
            public GameManager self;
        }

        public sealed class Params_StoryRecord_rest
        {
            public GameManager self;
        }

        public sealed class Params_StoryRecord_upgradeNail
        {
            public GameManager self;
        }

        public sealed class Params_StoryRecord_heartPiece
        {
            public GameManager self;
        }

        public sealed class Params_StoryRecord_maxHealthUp
        {
            public GameManager self;
        }

        public sealed class Params_StoryRecord_soulPiece
        {
            public GameManager self;
        }

        public sealed class Params_StoryRecord_maxSoulUp
        {
            public GameManager self;
        }

        public sealed class Params_StoryRecord_charmsChanged
        {
            public GameManager self;
        }

        public sealed class Params_StoryRecord_charmEquipped
        {
            public string charmName;
            public GameManager self;
        }

        public sealed class Params_StoryRecord_start
        {
            public GameManager self;
        }

        public sealed class Params_AwardAchievement
        {
            public string key;
            public GameManager self;
        }

        public sealed class Params_QueueAchievement
        {
            public string key;
            public GameManager self;
        }

        public sealed class Params_AwardQueuedAchievements
        {
            public GameManager self;
        }

        public sealed class Params_IsAchievementAwarded
        {
            public string key;
            public GameManager self;
        }

        public sealed class Params_ClearAllAchievements
        {
            public GameManager self;
        }

        public sealed class Params_CheckCharmAchievements
        {
            public GameManager self;
        }

        public sealed class Params_CheckGrubAchievements
        {
            public GameManager self;
        }

        public sealed class Params_CheckStagStationAchievements
        {
            public GameManager self;
        }

        public sealed class Params_CheckMapAchievement
        {
            public GameManager self;
        }

        public sealed class Params_CheckJournalAchievements
        {
            public GameManager self;
        }

        public sealed class Params_CheckAllAchievements
        {
            public GameManager self;
        }

        public sealed class Params_CheckBanishmentAchievement
        {
            public GameManager self;
        }

        public sealed class Params_SetStatusRecordInt
        {
            public string key;
            public GameManager self;
            public int value;
        }

        public sealed class Params_GetStatusRecordInt
        {
            public string key;
            public GameManager self;
        }

        public sealed class Params_ResetStatusRecords
        {
            public GameManager self;
        }

        public sealed class Params_SaveStatusRecords
        {
            public GameManager self;
        }

        public sealed class Params_SetState
        {
            public GameState newState;
            public GameManager self;
        }

        public sealed class Params_LoadScene
        {
            public string destScene;
            public GameManager self;
        }

        public sealed class Params_LoadSceneAdditive
        {
            public string destScene;
            public GameManager self;
        }

        public sealed class Params_OnNextLevelReady
        {
            public GameManager self;
        }

        public sealed class Params_OnWillActivateFirstLevel
        {
            public GameManager self;
        }

        public sealed class Params_LoadFirstScene
        {
            public GameManager self;
        }

        public sealed class Params_LoadPermadeathUnlockScene
        {
            public GameManager self;
        }

        public sealed class Params_LoadMrMushromScene
        {
            public GameManager self;
        }

        public sealed class Params_LoadOpeningCinematic
        {
            public GameManager self;
        }

        public sealed class Params_PositionHeroAtSceneEntrance
        {
            public GameManager self;
        }

        public sealed class Params_FindEntryPoint
        {
            public string entryPointName;
            public Scene filterScene;
            public GameManager self;
        }

        public sealed class Params_FindTransitionPoint
        {
            public string entryPointName;
            public bool fallbackToAnyAvailable;
            public Scene filterScene;
            public GameManager self;
        }

        public sealed class Params_EnterHero
        {
            public bool additiveGateSearch;
            public GameManager self;
        }

        public sealed class Params_FinishedEnteringScene
        {
            public GameManager self;
        }

        public sealed class Params_SetupGameRefs
        {
            public GameManager self;
        }

        public sealed class Params_SetupSceneRefs
        {
            public bool refreshTilemapInfo;
            public GameManager self;
        }

        public sealed class Params_SetupHeroRefs
        {
            public GameManager self;
        }

        public sealed class Params_BeginScene
        {
            public GameManager self;
        }

        public sealed class Params_UpdateUIStateFromGameState
        {
            public GameManager self;
        }

        public sealed class Params_SkipCutscene
        {
            public GameManager self;
        }

        public sealed class Params_SkipCutsceneNoMash
        {
            public GameManager self;
        }

        public sealed class Params_NoLongerFirstGame
        {
            public GameManager self;
        }

        public sealed class Params_SetupStatusModifiers
        {
            public GameManager self;
        }

        public sealed class Params_MatchBackerCreditsSetting
        {
            public GameManager self;
        }

        public sealed class Params_RefreshLocalization
        {
            public GameManager self;
        }

        public sealed class Params_RefreshParticleSystems
        {
            public GameManager self;
        }

        public sealed class Params_ApplyNativeInput
        {
            public GameManager self;
        }

        public sealed class Params_EnablePermadeathMode
        {
            public GameManager self;
        }

        public sealed class Params_GetCurrentMapZone
        {
            public GameManager self;
        }

        public sealed class Params_GetSceneWidth
        {
            public GameManager self;
        }

        public sealed class Params_GetSceneHeight
        {
            public GameManager self;
        }

        public sealed class Params_GetSceneManager
        {
            public GameManager self;
        }

        public sealed class Params_GetFormattedMapZoneString
        {
            public MapZone mapZone;
            public GameManager self;
        }

        public sealed class Params_UpdateSceneName
        {
            public GameManager self;
        }

        public sealed class Params_GetBaseSceneName
        {
            public string fullSceneName;
        }

        public sealed class Params_GetSceneNameString
        {
            public GameManager self;
        }

        public sealed class Params_GetTileMap
        {
            public GameObject gameObject;
        }

        public sealed class Params_RefreshTilemapInfo
        {
            public GameManager self;
            public string targetScene;
        }

        public sealed class Params_SaveLevelState
        {
            public GameManager self;
        }

        public sealed class Params_ResetSemiPersistentItems
        {
            public GameManager self;
        }

        public sealed class Params_IsMenuScene
        {
            public GameManager self;
        }

        public sealed class Params_IsTitleScreenScene
        {
            public GameManager self;
        }

        public sealed class Params_IsGameplayScene
        {
            public GameManager self;
        }

        public sealed class Params_IsNonGameplayScene
        {
            public GameManager self;
        }

        public sealed class Params_IsCinematicScene
        {
            public GameManager self;
        }

        public sealed class Params_IsStagTravelScene
        {
            public GameManager self;
        }

        public sealed class Params_IsBetaEndScene
        {
            public GameManager self;
        }

        public sealed class Params_IsTutorialScene
        {
            public GameManager self;
        }

        public sealed class Params_IsTestScene
        {
            public GameManager self;
        }

        public sealed class Params_IsBossDoorScene
        {
            public GameManager self;
        }

        public sealed class Params_ShouldKeepHUDCameraActive
        {
            public GameManager self;
        }

        public sealed class Params_GetSceneZoneName
        {
            public string str;
        }

        public sealed class Params_CountBits
        {
            public int val;
        }

        public sealed class Params_IsUnloadAssetsRequired
        {
            public string destinationSceneName;
            public GameManager self;
            public string sourceSceneName;
        }

        public sealed class Params_HasSaveFile
        {
            public Action<bool> callback;
            public int saveSlot;
            public GameManager self;
        }

        public sealed class Params_SaveGame
        {
            public GameManager self;
        }

        public sealed class Params_ShowSaveIcon
        {
            public GameManager self;
        }

        public sealed class Params_HideSaveIcon
        {
            public GameManager self;
        }

        public sealed class Params_SaveGame_Action
        {
            public Action<bool> callback;
            public GameManager self;
        }

        public sealed class Params_ResetGameTimer
        {
            public GameManager self;
        }

        public sealed class Params_IncreaseGameTimer
        {
            public GameManager self;
            public float timer;
        }

        public sealed class Params_SaveGame_int_Action
        {
            public Action<bool> callback;
            public int saveSlot;
            public GameManager self;
        }

        public sealed class Params_LoadGameFromUI
        {
            public int saveSlot;
            public GameManager self;
        }

        public sealed class Params_LoadGameFromUIRoutine
        {
            public int saveSlot;
            public GameManager self;
        }

        public sealed class Params_LoadGame
        {
            public Action<bool> callback;
            public int saveSlot;
            public GameManager self;
        }

        public sealed class Params_ClearSaveFile
        {
            public Action<bool> callback;
            public int saveSlot;
            public GameManager self;
        }

        public sealed class Params_GetSaveStatsForSlot
        {
            public Action<SaveStats> callback;
            public int saveSlot;
            public GameManager self;
        }

        public sealed class Params_PauseGameToggleByMenu
        {
            public GameManager self;
        }

        public sealed class Params_PauseGameToggle
        {
            public GameManager self;
        }

        public sealed class Params_SetTimeScale_float_float
        {
            public float duration;
            public float newTimeScale;
            public GameManager self;
        }

        public sealed class Params_SetTimeScale_float
        {
            public float newTimeScale;
            public GameManager self;
        }

        public sealed class Params_FreezeMoment_int
        {
            public GameManager self;
            public int type;
        }

        public sealed class Params_FreezeMoment_float_float_float_float
        {
            public float rampDownTime;
            public float rampUpTime;
            public GameManager self;
            public float targetSpeed;
            public float waitTime;
        }

        public sealed class Params_FreezeMomentGC
        {
            public float rampDownTime;
            public float rampUpTime;
            public GameManager self;
            public float targetSpeed;
            public float waitTime;
        }

        public sealed class Params_FreezeMoment_float_float_float_bool
        {
            public float rampDownTime;
            public float rampUpTime;
            public bool runGc;
            public GameManager self;
            public float waitTime;
        }

        public sealed class Params_EnsureSaveSlotSpace
        {
            public Action<bool> callback;
            public GameManager self;
        }

        public sealed class Params_StartNewGame
        {
            public bool bossRushMode;
            public bool permadeathMode;
            public GameManager self;
        }

        public sealed class Params_RunStartNewGame
        {
            public GameManager self;
        }

        public sealed class Params_ContinueGame
        {
            public GameManager self;
        }

        public sealed class Params_RunContinueGame
        {
            public GameManager self;
        }

        public sealed class Params_WillTerminateInBackground
        {
            public GameManager self;
        }

        public sealed class Params_OnDisengage
        {
            public Action next;
            public GameManager self;
        }

        public sealed class Params_EmergencyReturnToMenu
        {
            public Action callback;
            public GameManager self;
        }

        public sealed class Params_QuitGame
        {
            public GameManager self;
        }

        public sealed class Params_LoadedBoss
        {
            public GameManager self;
        }

        public sealed class Params_DoDestroyPersonalPools
        {
            public GameManager self;
        }

        public sealed class Params_GetImplicitCinematicVolume
        {
            public GameManager self;
        }

        public sealed class Params_orig_get_ui
        {
            public GameManager self;
        }

        public sealed class Params_orig_set_ui
        {
            public GameManager self;
            public UIManager value;
        }

        public sealed class Params_orig_OnApplicationQuit
        {
            public GameManager self;
        }

        public sealed class Params_orig_LoadScene
        {
            public string destScene;
            public GameManager self;
        }

        public sealed class Params_orig_ClearSaveFile
        {
            public Action<bool> callback;
            public int saveSlot;
            public GameManager self;
        }

        public sealed class Params_orig_PlayerDead
        {
            public GameManager self;
            public float waitTime;
        }

        public sealed class Params_ModdedSavePath
        {
            public int slot;
        }

        public sealed class Params_orig_SetupSceneRefs
        {
            public bool refreshTilemapInfo;
            public GameManager self;
        }

        public sealed class Params_orig_OnWillActivateFirstLevel
        {
            public GameManager self;
        }

        public sealed class Params_PauseToggleDynamicMenu
        {
            public bool allowUnpause;
            public MenuScreen screen;
            public GameManager self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_TimeSlowed_BeforeArgs get_TimeSlowed
        {
            add
            {
                HookHandler._beforeget_TimeSlowed += value;
                HookHandler.Hookget_TimeSlowed();
            }
            remove => HookHandler._beforeget_TimeSlowed -= value;
        }

        public static event Delegates.get_inputHandler_BeforeArgs get_inputHandler
        {
            add
            {
                HookHandler._beforeget_inputHandler += value;
                HookHandler.Hookget_inputHandler();
            }
            remove => HookHandler._beforeget_inputHandler -= value;
        }

        public static event Delegates.set_inputHandler_BeforeArgs set_inputHandler
        {
            add
            {
                HookHandler._beforeset_inputHandler += value;
                HookHandler.Hookset_inputHandler();
            }
            remove => HookHandler._beforeset_inputHandler -= value;
        }

        public static event Delegates.get_achievementHandler_BeforeArgs get_achievementHandler
        {
            add
            {
                HookHandler._beforeget_achievementHandler += value;
                HookHandler.Hookget_achievementHandler();
            }
            remove => HookHandler._beforeget_achievementHandler -= value;
        }

        public static event Delegates.set_achievementHandler_BeforeArgs set_achievementHandler
        {
            add
            {
                HookHandler._beforeset_achievementHandler += value;
                HookHandler.Hookset_achievementHandler();
            }
            remove => HookHandler._beforeset_achievementHandler -= value;
        }

        public static event Delegates.get_AudioManager_BeforeArgs get_AudioManager
        {
            add
            {
                HookHandler._beforeget_AudioManager += value;
                HookHandler.Hookget_AudioManager();
            }
            remove => HookHandler._beforeget_AudioManager -= value;
        }

        public static event Delegates.get_cameraCtrl_BeforeArgs get_cameraCtrl
        {
            add
            {
                HookHandler._beforeget_cameraCtrl += value;
                HookHandler.Hookget_cameraCtrl();
            }
            remove => HookHandler._beforeget_cameraCtrl -= value;
        }

        public static event Delegates.set_cameraCtrl_BeforeArgs set_cameraCtrl
        {
            add
            {
                HookHandler._beforeset_cameraCtrl += value;
                HookHandler.Hookset_cameraCtrl();
            }
            remove => HookHandler._beforeset_cameraCtrl -= value;
        }

        public static event Delegates.get_hero_ctrl_BeforeArgs get_hero_ctrl
        {
            add
            {
                HookHandler._beforeget_hero_ctrl += value;
                HookHandler.Hookget_hero_ctrl();
            }
            remove => HookHandler._beforeget_hero_ctrl -= value;
        }

        public static event Delegates.set_hero_ctrl_BeforeArgs set_hero_ctrl
        {
            add
            {
                HookHandler._beforeset_hero_ctrl += value;
                HookHandler.Hookset_hero_ctrl();
            }
            remove => HookHandler._beforeset_hero_ctrl -= value;
        }

        public static event Delegates.get_heroLight_BeforeArgs get_heroLight
        {
            add
            {
                HookHandler._beforeget_heroLight += value;
                HookHandler.Hookget_heroLight();
            }
            remove => HookHandler._beforeget_heroLight -= value;
        }

        public static event Delegates.set_heroLight_BeforeArgs set_heroLight
        {
            add
            {
                HookHandler._beforeset_heroLight += value;
                HookHandler.Hookset_heroLight();
            }
            remove => HookHandler._beforeset_heroLight -= value;
        }

        public static event Delegates.get_sm_BeforeArgs get_sm
        {
            add
            {
                HookHandler._beforeget_sm += value;
                HookHandler.Hookget_sm();
            }
            remove => HookHandler._beforeget_sm -= value;
        }

        public static event Delegates.set_sm_BeforeArgs set_sm
        {
            add
            {
                HookHandler._beforeset_sm += value;
                HookHandler.Hookset_sm();
            }
            remove => HookHandler._beforeset_sm -= value;
        }

        public static event Delegates.get_ui_BeforeArgs get_ui
        {
            add
            {
                HookHandler._beforeget_ui += value;
                HookHandler.Hookget_ui();
            }
            remove => HookHandler._beforeget_ui -= value;
        }

        public static event Delegates.set_ui_BeforeArgs set_ui
        {
            add
            {
                HookHandler._beforeset_ui += value;
                HookHandler.Hookset_ui();
            }
            remove => HookHandler._beforeset_ui -= value;
        }

        public static event Delegates.get_tilemap_BeforeArgs get_tilemap
        {
            add
            {
                HookHandler._beforeget_tilemap += value;
                HookHandler.Hookget_tilemap();
            }
            remove => HookHandler._beforeget_tilemap -= value;
        }

        public static event Delegates.set_tilemap_BeforeArgs set_tilemap
        {
            add
            {
                HookHandler._beforeset_tilemap += value;
                HookHandler.Hookset_tilemap();
            }
            remove => HookHandler._beforeset_tilemap -= value;
        }

        public static event Delegates.get_soulOrb_fsm_BeforeArgs get_soulOrb_fsm
        {
            add
            {
                HookHandler._beforeget_soulOrb_fsm += value;
                HookHandler.Hookget_soulOrb_fsm();
            }
            remove => HookHandler._beforeget_soulOrb_fsm -= value;
        }

        public static event Delegates.set_soulOrb_fsm_BeforeArgs set_soulOrb_fsm
        {
            add
            {
                HookHandler._beforeset_soulOrb_fsm += value;
                HookHandler.Hookset_soulOrb_fsm();
            }
            remove => HookHandler._beforeset_soulOrb_fsm -= value;
        }

        public static event Delegates.get_soulVessel_fsm_BeforeArgs get_soulVessel_fsm
        {
            add
            {
                HookHandler._beforeget_soulVessel_fsm += value;
                HookHandler.Hookget_soulVessel_fsm();
            }
            remove => HookHandler._beforeget_soulVessel_fsm -= value;
        }

        public static event Delegates.set_soulVessel_fsm_BeforeArgs set_soulVessel_fsm
        {
            add
            {
                HookHandler._beforeset_soulVessel_fsm += value;
                HookHandler.Hookset_soulVessel_fsm();
            }
            remove => HookHandler._beforeset_soulVessel_fsm -= value;
        }

        public static event Delegates.get_PlayTime_BeforeArgs get_PlayTime
        {
            add
            {
                HookHandler._beforeget_PlayTime += value;
                HookHandler.Hookget_PlayTime();
            }
            remove => HookHandler._beforeget_PlayTime -= value;
        }

        public static event Delegates.get_RespawningHero_BeforeArgs get_RespawningHero
        {
            add
            {
                HookHandler._beforeget_RespawningHero += value;
                HookHandler.Hookget_RespawningHero();
            }
            remove => HookHandler._beforeget_RespawningHero -= value;
        }

        public static event Delegates.set_RespawningHero_BeforeArgs set_RespawningHero
        {
            add
            {
                HookHandler._beforeset_RespawningHero += value;
                HookHandler.Hookset_RespawningHero();
            }
            remove => HookHandler._beforeset_RespawningHero -= value;
        }

        public static event Delegates.get_IsInSceneTransition_BeforeArgs get_IsInSceneTransition
        {
            add
            {
                HookHandler._beforeget_IsInSceneTransition += value;
                HookHandler.Hookget_IsInSceneTransition();
            }
            remove => HookHandler._beforeget_IsInSceneTransition -= value;
        }

        public static event Delegates.set_IsInSceneTransition_BeforeArgs set_IsInSceneTransition
        {
            add
            {
                HookHandler._beforeset_IsInSceneTransition += value;
                HookHandler.Hookset_IsInSceneTransition();
            }
            remove => HookHandler._beforeset_IsInSceneTransition -= value;
        }

        public static event Delegates.get_HasFinishedEnteringScene_BeforeArgs get_HasFinishedEnteringScene
        {
            add
            {
                HookHandler._beforeget_HasFinishedEnteringScene += value;
                HookHandler.Hookget_HasFinishedEnteringScene();
            }
            remove => HookHandler._beforeget_HasFinishedEnteringScene -= value;
        }

        public static event Delegates.get_WorldInfo_BeforeArgs get_WorldInfo
        {
            add
            {
                HookHandler._beforeget_WorldInfo += value;
                HookHandler.Hookget_WorldInfo();
            }
            remove => HookHandler._beforeget_WorldInfo -= value;
        }

        public static event Delegates.get_IsLoadingSceneTransition_BeforeArgs get_IsLoadingSceneTransition
        {
            add
            {
                HookHandler._beforeget_IsLoadingSceneTransition += value;
                HookHandler.Hookget_IsLoadingSceneTransition();
            }
            remove => HookHandler._beforeget_IsLoadingSceneTransition -= value;
        }

        public static event Delegates.get_CurrentLoadDuration_BeforeArgs get_CurrentLoadDuration
        {
            add
            {
                HookHandler._beforeget_CurrentLoadDuration += value;
                HookHandler.Hookget_CurrentLoadDuration();
            }
            remove => HookHandler._beforeget_CurrentLoadDuration -= value;
        }

        public static event Delegates.get_IsUsingCustomLoadAnimation_BeforeArgs get_IsUsingCustomLoadAnimation
        {
            add
            {
                HookHandler._beforeget_IsUsingCustomLoadAnimation += value;
                HookHandler.Hookget_IsUsingCustomLoadAnimation();
            }
            remove => HookHandler._beforeget_IsUsingCustomLoadAnimation -= value;
        }

        public static event Delegates.get_instance_BeforeArgs get_instance
        {
            add
            {
                HookHandler._beforeget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._beforeget_instance -= value;
        }

        public static event Delegates.get_UnsafeInstance_BeforeArgs get_UnsafeInstance
        {
            add
            {
                HookHandler._beforeget_UnsafeInstance += value;
                HookHandler.Hookget_UnsafeInstance();
            }
            remove => HookHandler._beforeget_UnsafeInstance -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.UpdateEngagement_BeforeArgs UpdateEngagement
        {
            add
            {
                HookHandler._beforeUpdateEngagement += value;
                HookHandler.HookUpdateEngagement();
            }
            remove => HookHandler._beforeUpdateEngagement -= value;
        }

        public static event Delegates.LevelActivated_BeforeArgs LevelActivated
        {
            add
            {
                HookHandler._beforeLevelActivated += value;
                HookHandler.HookLevelActivated();
            }
            remove => HookHandler._beforeLevelActivated -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.OnApplicationQuit_BeforeArgs OnApplicationQuit
        {
            add
            {
                HookHandler._beforeOnApplicationQuit += value;
                HookHandler.HookOnApplicationQuit();
            }
            remove => HookHandler._beforeOnApplicationQuit -= value;
        }

        public static event Delegates.TransitionScene_BeforeArgs TransitionScene
        {
            add
            {
                HookHandler._beforeTransitionScene += value;
                HookHandler.HookTransitionScene();
            }
            remove => HookHandler._beforeTransitionScene -= value;
        }

        public static event Delegates.ChangeToScene_BeforeArgs ChangeToScene
        {
            add
            {
                HookHandler._beforeChangeToScene += value;
                HookHandler.HookChangeToScene();
            }
            remove => HookHandler._beforeChangeToScene -= value;
        }

        public static event Delegates.WarpToDreamGate_BeforeArgs WarpToDreamGate
        {
            add
            {
                HookHandler._beforeWarpToDreamGate += value;
                HookHandler.HookWarpToDreamGate();
            }
            remove => HookHandler._beforeWarpToDreamGate -= value;
        }

        public static event Delegates.LeftScene_BeforeArgs LeftScene
        {
            add
            {
                HookHandler._beforeLeftScene += value;
                HookHandler.HookLeftScene();
            }
            remove => HookHandler._beforeLeftScene -= value;
        }

        public static event Delegates.PlayerDead_BeforeArgs PlayerDead
        {
            add
            {
                HookHandler._beforePlayerDead += value;
                HookHandler.HookPlayerDead();
            }
            remove => HookHandler._beforePlayerDead -= value;
        }

        public static event Delegates.PlayerDeadFromHazard_BeforeArgs PlayerDeadFromHazard
        {
            add
            {
                HookHandler._beforePlayerDeadFromHazard += value;
                HookHandler.HookPlayerDeadFromHazard();
            }
            remove => HookHandler._beforePlayerDeadFromHazard -= value;
        }

        public static event Delegates.ReadyForRespawn_BeforeArgs ReadyForRespawn
        {
            add
            {
                HookHandler._beforeReadyForRespawn += value;
                HookHandler.HookReadyForRespawn();
            }
            remove => HookHandler._beforeReadyForRespawn -= value;
        }

        public static event Delegates.HazardRespawn_BeforeArgs HazardRespawn
        {
            add
            {
                HookHandler._beforeHazardRespawn += value;
                HookHandler.HookHazardRespawn();
            }
            remove => HookHandler._beforeHazardRespawn -= value;
        }

        public static event Delegates.TimePasses_BeforeArgs TimePasses
        {
            add
            {
                HookHandler._beforeTimePasses += value;
                HookHandler.HookTimePasses();
            }
            remove => HookHandler._beforeTimePasses -= value;
        }

        public static event Delegates.FadeSceneIn_BeforeArgs FadeSceneIn
        {
            add
            {
                HookHandler._beforeFadeSceneIn += value;
                HookHandler.HookFadeSceneIn();
            }
            remove => HookHandler._beforeFadeSceneIn -= value;
        }

        public static event Delegates.FadeSceneInWithDelay_BeforeArgs FadeSceneInWithDelay
        {
            add
            {
                HookHandler._beforeFadeSceneInWithDelay += value;
                HookHandler.HookFadeSceneInWithDelay();
            }
            remove => HookHandler._beforeFadeSceneInWithDelay -= value;
        }

        public static event Delegates.IsGamePaused_BeforeArgs IsGamePaused
        {
            add
            {
                HookHandler._beforeIsGamePaused += value;
                HookHandler.HookIsGamePaused();
            }
            remove => HookHandler._beforeIsGamePaused -= value;
        }

        public static event Delegates.SetGameMap_BeforeArgs SetGameMap
        {
            add
            {
                HookHandler._beforeSetGameMap += value;
                HookHandler.HookSetGameMap();
            }
            remove => HookHandler._beforeSetGameMap -= value;
        }

        public static event Delegates.CalculateNotchesUsed_BeforeArgs CalculateNotchesUsed
        {
            add
            {
                HookHandler._beforeCalculateNotchesUsed += value;
                HookHandler.HookCalculateNotchesUsed();
            }
            remove => HookHandler._beforeCalculateNotchesUsed -= value;
        }

        public static event Delegates.GetLanguageAsString_BeforeArgs GetLanguageAsString
        {
            add
            {
                HookHandler._beforeGetLanguageAsString += value;
                HookHandler.HookGetLanguageAsString();
            }
            remove => HookHandler._beforeGetLanguageAsString -= value;
        }

        public static event Delegates.GetEntryGateName_BeforeArgs GetEntryGateName
        {
            add
            {
                HookHandler._beforeGetEntryGateName += value;
                HookHandler.HookGetEntryGateName();
            }
            remove => HookHandler._beforeGetEntryGateName -= value;
        }

        public static event Delegates.SetPlayerDataBool_BeforeArgs SetPlayerDataBool
        {
            add
            {
                HookHandler._beforeSetPlayerDataBool += value;
                HookHandler.HookSetPlayerDataBool();
            }
            remove => HookHandler._beforeSetPlayerDataBool -= value;
        }

        public static event Delegates.SetPlayerDataInt_BeforeArgs SetPlayerDataInt
        {
            add
            {
                HookHandler._beforeSetPlayerDataInt += value;
                HookHandler.HookSetPlayerDataInt();
            }
            remove => HookHandler._beforeSetPlayerDataInt -= value;
        }

        public static event Delegates.SetPlayerDataFloat_BeforeArgs SetPlayerDataFloat
        {
            add
            {
                HookHandler._beforeSetPlayerDataFloat += value;
                HookHandler.HookSetPlayerDataFloat();
            }
            remove => HookHandler._beforeSetPlayerDataFloat -= value;
        }

        public static event Delegates.SetPlayerDataString_BeforeArgs SetPlayerDataString
        {
            add
            {
                HookHandler._beforeSetPlayerDataString += value;
                HookHandler.HookSetPlayerDataString();
            }
            remove => HookHandler._beforeSetPlayerDataString -= value;
        }

        public static event Delegates.IncrementPlayerDataInt_BeforeArgs IncrementPlayerDataInt
        {
            add
            {
                HookHandler._beforeIncrementPlayerDataInt += value;
                HookHandler.HookIncrementPlayerDataInt();
            }
            remove => HookHandler._beforeIncrementPlayerDataInt -= value;
        }

        public static event Delegates.DecrementPlayerDataInt_BeforeArgs DecrementPlayerDataInt
        {
            add
            {
                HookHandler._beforeDecrementPlayerDataInt += value;
                HookHandler.HookDecrementPlayerDataInt();
            }
            remove => HookHandler._beforeDecrementPlayerDataInt -= value;
        }

        public static event Delegates.IntAdd_BeforeArgs IntAdd
        {
            add
            {
                HookHandler._beforeIntAdd += value;
                HookHandler.HookIntAdd();
            }
            remove => HookHandler._beforeIntAdd -= value;
        }

        public static event Delegates.GetPlayerDataBool_BeforeArgs GetPlayerDataBool
        {
            add
            {
                HookHandler._beforeGetPlayerDataBool += value;
                HookHandler.HookGetPlayerDataBool();
            }
            remove => HookHandler._beforeGetPlayerDataBool -= value;
        }

        public static event Delegates.GetPlayerDataInt_BeforeArgs GetPlayerDataInt
        {
            add
            {
                HookHandler._beforeGetPlayerDataInt += value;
                HookHandler.HookGetPlayerDataInt();
            }
            remove => HookHandler._beforeGetPlayerDataInt -= value;
        }

        public static event Delegates.GetPlayerDataFloat_BeforeArgs GetPlayerDataFloat
        {
            add
            {
                HookHandler._beforeGetPlayerDataFloat += value;
                HookHandler.HookGetPlayerDataFloat();
            }
            remove => HookHandler._beforeGetPlayerDataFloat -= value;
        }

        public static event Delegates.GetPlayerDataString_BeforeArgs GetPlayerDataString
        {
            add
            {
                HookHandler._beforeGetPlayerDataString += value;
                HookHandler.HookGetPlayerDataString();
            }
            remove => HookHandler._beforeGetPlayerDataString -= value;
        }

        public static event Delegates.SetPlayerDataVector3_BeforeArgs SetPlayerDataVector3
        {
            add
            {
                HookHandler._beforeSetPlayerDataVector3 += value;
                HookHandler.HookSetPlayerDataVector3();
            }
            remove => HookHandler._beforeSetPlayerDataVector3 -= value;
        }

        public static event Delegates.GetPlayerDataVector3_BeforeArgs GetPlayerDataVector3
        {
            add
            {
                HookHandler._beforeGetPlayerDataVector3 += value;
                HookHandler.HookGetPlayerDataVector3();
            }
            remove => HookHandler._beforeGetPlayerDataVector3 -= value;
        }

        public static event Delegates.EquipCharm_BeforeArgs EquipCharm
        {
            add
            {
                HookHandler._beforeEquipCharm += value;
                HookHandler.HookEquipCharm();
            }
            remove => HookHandler._beforeEquipCharm -= value;
        }

        public static event Delegates.UnequipCharm_BeforeArgs UnequipCharm
        {
            add
            {
                HookHandler._beforeUnequipCharm += value;
                HookHandler.HookUnequipCharm();
            }
            remove => HookHandler._beforeUnequipCharm -= value;
        }

        public static event Delegates.RefreshOvercharm_BeforeArgs RefreshOvercharm
        {
            add
            {
                HookHandler._beforeRefreshOvercharm += value;
                HookHandler.HookRefreshOvercharm();
            }
            remove => HookHandler._beforeRefreshOvercharm -= value;
        }

        public static event Delegates.UpdateBlueHealth_BeforeArgs UpdateBlueHealth
        {
            add
            {
                HookHandler._beforeUpdateBlueHealth += value;
                HookHandler.HookUpdateBlueHealth();
            }
            remove => HookHandler._beforeUpdateBlueHealth -= value;
        }

        public static event Delegates.SetCurrentMapZoneAsRespawn_BeforeArgs SetCurrentMapZoneAsRespawn
        {
            add
            {
                HookHandler._beforeSetCurrentMapZoneAsRespawn += value;
                HookHandler.HookSetCurrentMapZoneAsRespawn();
            }
            remove => HookHandler._beforeSetCurrentMapZoneAsRespawn -= value;
        }

        public static event Delegates.SetMapZoneToSpecific_BeforeArgs SetMapZoneToSpecific
        {
            add
            {
                HookHandler._beforeSetMapZoneToSpecific += value;
                HookHandler.HookSetMapZoneToSpecific();
            }
            remove => HookHandler._beforeSetMapZoneToSpecific -= value;
        }

        public static event Delegates.StartSoulLimiter_BeforeArgs StartSoulLimiter
        {
            add
            {
                HookHandler._beforeStartSoulLimiter += value;
                HookHandler.HookStartSoulLimiter();
            }
            remove => HookHandler._beforeStartSoulLimiter -= value;
        }

        public static event Delegates.EndSoulLimiter_BeforeArgs EndSoulLimiter
        {
            add
            {
                HookHandler._beforeEndSoulLimiter += value;
                HookHandler.HookEndSoulLimiter();
            }
            remove => HookHandler._beforeEndSoulLimiter -= value;
        }

        public static event Delegates.UpdateGameMap_BeforeArgs UpdateGameMap
        {
            add
            {
                HookHandler._beforeUpdateGameMap += value;
                HookHandler.HookUpdateGameMap();
            }
            remove => HookHandler._beforeUpdateGameMap -= value;
        }

        public static event Delegates.CheckAllMaps_BeforeArgs CheckAllMaps
        {
            add
            {
                HookHandler._beforeCheckAllMaps += value;
                HookHandler.HookCheckAllMaps();
            }
            remove => HookHandler._beforeCheckAllMaps -= value;
        }

        public static event Delegates.AddToScenesVisited_BeforeArgs AddToScenesVisited
        {
            add
            {
                HookHandler._beforeAddToScenesVisited += value;
                HookHandler.HookAddToScenesVisited();
            }
            remove => HookHandler._beforeAddToScenesVisited -= value;
        }

        public static event Delegates.GetIsSceneVisited_BeforeArgs GetIsSceneVisited
        {
            add
            {
                HookHandler._beforeGetIsSceneVisited += value;
                HookHandler.HookGetIsSceneVisited();
            }
            remove => HookHandler._beforeGetIsSceneVisited -= value;
        }

        public static event Delegates.AddToBenchList_BeforeArgs AddToBenchList
        {
            add
            {
                HookHandler._beforeAddToBenchList += value;
                HookHandler.HookAddToBenchList();
            }
            remove => HookHandler._beforeAddToBenchList -= value;
        }

        public static event Delegates.AddToGrubList_BeforeArgs AddToGrubList
        {
            add
            {
                HookHandler._beforeAddToGrubList += value;
                HookHandler.HookAddToGrubList();
            }
            remove => HookHandler._beforeAddToGrubList -= value;
        }

        public static event Delegates.AddToFlameList_BeforeArgs AddToFlameList
        {
            add
            {
                HookHandler._beforeAddToFlameList += value;
                HookHandler.HookAddToFlameList();
            }
            remove => HookHandler._beforeAddToFlameList -= value;
        }

        public static event Delegates.AddToCocoonList_BeforeArgs AddToCocoonList
        {
            add
            {
                HookHandler._beforeAddToCocoonList += value;
                HookHandler.HookAddToCocoonList();
            }
            remove => HookHandler._beforeAddToCocoonList -= value;
        }

        public static event Delegates.AddToDreamPlantList_BeforeArgs AddToDreamPlantList
        {
            add
            {
                HookHandler._beforeAddToDreamPlantList += value;
                HookHandler.HookAddToDreamPlantList();
            }
            remove => HookHandler._beforeAddToDreamPlantList -= value;
        }

        public static event Delegates.AddToDreamPlantCList_BeforeArgs AddToDreamPlantCList
        {
            add
            {
                HookHandler._beforeAddToDreamPlantCList += value;
                HookHandler.HookAddToDreamPlantCList();
            }
            remove => HookHandler._beforeAddToDreamPlantCList -= value;
        }

        public static event Delegates.CountGameCompletion_BeforeArgs CountGameCompletion
        {
            add
            {
                HookHandler._beforeCountGameCompletion += value;
                HookHandler.HookCountGameCompletion();
            }
            remove => HookHandler._beforeCountGameCompletion -= value;
        }

        public static event Delegates.CountCharms_BeforeArgs CountCharms
        {
            add
            {
                HookHandler._beforeCountCharms += value;
                HookHandler.HookCountCharms();
            }
            remove => HookHandler._beforeCountCharms -= value;
        }

        public static event Delegates.CountJournalEntries_BeforeArgs CountJournalEntries
        {
            add
            {
                HookHandler._beforeCountJournalEntries += value;
                HookHandler.HookCountJournalEntries();
            }
            remove => HookHandler._beforeCountJournalEntries -= value;
        }

        public static event Delegates.ActivateTestingCheats_BeforeArgs ActivateTestingCheats
        {
            add
            {
                HookHandler._beforeActivateTestingCheats += value;
                HookHandler.HookActivateTestingCheats();
            }
            remove => HookHandler._beforeActivateTestingCheats -= value;
        }

        public static event Delegates.GetAllPowerups_BeforeArgs GetAllPowerups
        {
            add
            {
                HookHandler._beforeGetAllPowerups += value;
                HookHandler.HookGetAllPowerups();
            }
            remove => HookHandler._beforeGetAllPowerups -= value;
        }

        public static event Delegates.StoryRecord_death_BeforeArgs StoryRecord_death
        {
            add
            {
                HookHandler._beforeStoryRecord_death += value;
                HookHandler.HookStoryRecord_death();
            }
            remove => HookHandler._beforeStoryRecord_death -= value;
        }

        public static event Delegates.StoryRecord_rescueGrub_BeforeArgs StoryRecord_rescueGrub
        {
            add
            {
                HookHandler._beforeStoryRecord_rescueGrub += value;
                HookHandler.HookStoryRecord_rescueGrub();
            }
            remove => HookHandler._beforeStoryRecord_rescueGrub -= value;
        }

        public static event Delegates.StoryRecord_defeatedShade_BeforeArgs StoryRecord_defeatedShade
        {
            add
            {
                HookHandler._beforeStoryRecord_defeatedShade += value;
                HookHandler.HookStoryRecord_defeatedShade();
            }
            remove => HookHandler._beforeStoryRecord_defeatedShade -= value;
        }

        public static event Delegates.StoryRecord_discoveredArea_BeforeArgs StoryRecord_discoveredArea
        {
            add
            {
                HookHandler._beforeStoryRecord_discoveredArea += value;
                HookHandler.HookStoryRecord_discoveredArea();
            }
            remove => HookHandler._beforeStoryRecord_discoveredArea -= value;
        }

        public static event Delegates.StoryRecord_travelledToArea_BeforeArgs StoryRecord_travelledToArea
        {
            add
            {
                HookHandler._beforeStoryRecord_travelledToArea += value;
                HookHandler.HookStoryRecord_travelledToArea();
            }
            remove => HookHandler._beforeStoryRecord_travelledToArea -= value;
        }

        public static event Delegates.StoryRecord_bankDeposit_BeforeArgs StoryRecord_bankDeposit
        {
            add
            {
                HookHandler._beforeStoryRecord_bankDeposit += value;
                HookHandler.HookStoryRecord_bankDeposit();
            }
            remove => HookHandler._beforeStoryRecord_bankDeposit -= value;
        }

        public static event Delegates.StoryRecord_bankWithdraw_BeforeArgs StoryRecord_bankWithdraw
        {
            add
            {
                HookHandler._beforeStoryRecord_bankWithdraw += value;
                HookHandler.HookStoryRecord_bankWithdraw();
            }
            remove => HookHandler._beforeStoryRecord_bankWithdraw -= value;
        }

        public static event Delegates.StoryRecord_boughtCorniferMap_BeforeArgs StoryRecord_boughtCorniferMap
        {
            add
            {
                HookHandler._beforeStoryRecord_boughtCorniferMap += value;
                HookHandler.HookStoryRecord_boughtCorniferMap();
            }
            remove => HookHandler._beforeStoryRecord_boughtCorniferMap -= value;
        }

        public static event Delegates.StoryRecord_visited_BeforeArgs StoryRecord_visited
        {
            add
            {
                HookHandler._beforeStoryRecord_visited += value;
                HookHandler.HookStoryRecord_visited();
            }
            remove => HookHandler._beforeStoryRecord_visited -= value;
        }

        public static event Delegates.StoryRecord_defeated_BeforeArgs StoryRecord_defeated
        {
            add
            {
                HookHandler._beforeStoryRecord_defeated += value;
                HookHandler.HookStoryRecord_defeated();
            }
            remove => HookHandler._beforeStoryRecord_defeated -= value;
        }

        public static event Delegates.StoryRecord_jiji_BeforeArgs StoryRecord_jiji
        {
            add
            {
                HookHandler._beforeStoryRecord_jiji += value;
                HookHandler.HookStoryRecord_jiji();
            }
            remove => HookHandler._beforeStoryRecord_jiji -= value;
        }

        public static event Delegates.StoryRecord_rodeStag_BeforeArgs StoryRecord_rodeStag
        {
            add
            {
                HookHandler._beforeStoryRecord_rodeStag += value;
                HookHandler.HookStoryRecord_rodeStag();
            }
            remove => HookHandler._beforeStoryRecord_rodeStag -= value;
        }

        public static event Delegates.StoryRecord_acquired_BeforeArgs StoryRecord_acquired
        {
            add
            {
                HookHandler._beforeStoryRecord_acquired += value;
                HookHandler.HookStoryRecord_acquired();
            }
            remove => HookHandler._beforeStoryRecord_acquired -= value;
        }

        public static event Delegates.StoryRecord_bought_BeforeArgs StoryRecord_bought
        {
            add
            {
                HookHandler._beforeStoryRecord_bought += value;
                HookHandler.HookStoryRecord_bought();
            }
            remove => HookHandler._beforeStoryRecord_bought -= value;
        }

        public static event Delegates.StoryRecord_quit_BeforeArgs StoryRecord_quit
        {
            add
            {
                HookHandler._beforeStoryRecord_quit += value;
                HookHandler.HookStoryRecord_quit();
            }
            remove => HookHandler._beforeStoryRecord_quit -= value;
        }

        public static event Delegates.StoryRecord_rest_BeforeArgs StoryRecord_rest
        {
            add
            {
                HookHandler._beforeStoryRecord_rest += value;
                HookHandler.HookStoryRecord_rest();
            }
            remove => HookHandler._beforeStoryRecord_rest -= value;
        }

        public static event Delegates.StoryRecord_upgradeNail_BeforeArgs StoryRecord_upgradeNail
        {
            add
            {
                HookHandler._beforeStoryRecord_upgradeNail += value;
                HookHandler.HookStoryRecord_upgradeNail();
            }
            remove => HookHandler._beforeStoryRecord_upgradeNail -= value;
        }

        public static event Delegates.StoryRecord_heartPiece_BeforeArgs StoryRecord_heartPiece
        {
            add
            {
                HookHandler._beforeStoryRecord_heartPiece += value;
                HookHandler.HookStoryRecord_heartPiece();
            }
            remove => HookHandler._beforeStoryRecord_heartPiece -= value;
        }

        public static event Delegates.StoryRecord_maxHealthUp_BeforeArgs StoryRecord_maxHealthUp
        {
            add
            {
                HookHandler._beforeStoryRecord_maxHealthUp += value;
                HookHandler.HookStoryRecord_maxHealthUp();
            }
            remove => HookHandler._beforeStoryRecord_maxHealthUp -= value;
        }

        public static event Delegates.StoryRecord_soulPiece_BeforeArgs StoryRecord_soulPiece
        {
            add
            {
                HookHandler._beforeStoryRecord_soulPiece += value;
                HookHandler.HookStoryRecord_soulPiece();
            }
            remove => HookHandler._beforeStoryRecord_soulPiece -= value;
        }

        public static event Delegates.StoryRecord_maxSoulUp_BeforeArgs StoryRecord_maxSoulUp
        {
            add
            {
                HookHandler._beforeStoryRecord_maxSoulUp += value;
                HookHandler.HookStoryRecord_maxSoulUp();
            }
            remove => HookHandler._beforeStoryRecord_maxSoulUp -= value;
        }

        public static event Delegates.StoryRecord_charmsChanged_BeforeArgs StoryRecord_charmsChanged
        {
            add
            {
                HookHandler._beforeStoryRecord_charmsChanged += value;
                HookHandler.HookStoryRecord_charmsChanged();
            }
            remove => HookHandler._beforeStoryRecord_charmsChanged -= value;
        }

        public static event Delegates.StoryRecord_charmEquipped_BeforeArgs StoryRecord_charmEquipped
        {
            add
            {
                HookHandler._beforeStoryRecord_charmEquipped += value;
                HookHandler.HookStoryRecord_charmEquipped();
            }
            remove => HookHandler._beforeStoryRecord_charmEquipped -= value;
        }

        public static event Delegates.StoryRecord_start_BeforeArgs StoryRecord_start
        {
            add
            {
                HookHandler._beforeStoryRecord_start += value;
                HookHandler.HookStoryRecord_start();
            }
            remove => HookHandler._beforeStoryRecord_start -= value;
        }

        public static event Delegates.AwardAchievement_BeforeArgs AwardAchievement
        {
            add
            {
                HookHandler._beforeAwardAchievement += value;
                HookHandler.HookAwardAchievement();
            }
            remove => HookHandler._beforeAwardAchievement -= value;
        }

        public static event Delegates.QueueAchievement_BeforeArgs QueueAchievement
        {
            add
            {
                HookHandler._beforeQueueAchievement += value;
                HookHandler.HookQueueAchievement();
            }
            remove => HookHandler._beforeQueueAchievement -= value;
        }

        public static event Delegates.AwardQueuedAchievements_BeforeArgs AwardQueuedAchievements
        {
            add
            {
                HookHandler._beforeAwardQueuedAchievements += value;
                HookHandler.HookAwardQueuedAchievements();
            }
            remove => HookHandler._beforeAwardQueuedAchievements -= value;
        }

        public static event Delegates.IsAchievementAwarded_BeforeArgs IsAchievementAwarded
        {
            add
            {
                HookHandler._beforeIsAchievementAwarded += value;
                HookHandler.HookIsAchievementAwarded();
            }
            remove => HookHandler._beforeIsAchievementAwarded -= value;
        }

        public static event Delegates.ClearAllAchievements_BeforeArgs ClearAllAchievements
        {
            add
            {
                HookHandler._beforeClearAllAchievements += value;
                HookHandler.HookClearAllAchievements();
            }
            remove => HookHandler._beforeClearAllAchievements -= value;
        }

        public static event Delegates.CheckCharmAchievements_BeforeArgs CheckCharmAchievements
        {
            add
            {
                HookHandler._beforeCheckCharmAchievements += value;
                HookHandler.HookCheckCharmAchievements();
            }
            remove => HookHandler._beforeCheckCharmAchievements -= value;
        }

        public static event Delegates.CheckGrubAchievements_BeforeArgs CheckGrubAchievements
        {
            add
            {
                HookHandler._beforeCheckGrubAchievements += value;
                HookHandler.HookCheckGrubAchievements();
            }
            remove => HookHandler._beforeCheckGrubAchievements -= value;
        }

        public static event Delegates.CheckStagStationAchievements_BeforeArgs CheckStagStationAchievements
        {
            add
            {
                HookHandler._beforeCheckStagStationAchievements += value;
                HookHandler.HookCheckStagStationAchievements();
            }
            remove => HookHandler._beforeCheckStagStationAchievements -= value;
        }

        public static event Delegates.CheckMapAchievement_BeforeArgs CheckMapAchievement
        {
            add
            {
                HookHandler._beforeCheckMapAchievement += value;
                HookHandler.HookCheckMapAchievement();
            }
            remove => HookHandler._beforeCheckMapAchievement -= value;
        }

        public static event Delegates.CheckJournalAchievements_BeforeArgs CheckJournalAchievements
        {
            add
            {
                HookHandler._beforeCheckJournalAchievements += value;
                HookHandler.HookCheckJournalAchievements();
            }
            remove => HookHandler._beforeCheckJournalAchievements -= value;
        }

        public static event Delegates.CheckAllAchievements_BeforeArgs CheckAllAchievements
        {
            add
            {
                HookHandler._beforeCheckAllAchievements += value;
                HookHandler.HookCheckAllAchievements();
            }
            remove => HookHandler._beforeCheckAllAchievements -= value;
        }

        public static event Delegates.CheckBanishmentAchievement_BeforeArgs CheckBanishmentAchievement
        {
            add
            {
                HookHandler._beforeCheckBanishmentAchievement += value;
                HookHandler.HookCheckBanishmentAchievement();
            }
            remove => HookHandler._beforeCheckBanishmentAchievement -= value;
        }

        public static event Delegates.SetStatusRecordInt_BeforeArgs SetStatusRecordInt
        {
            add
            {
                HookHandler._beforeSetStatusRecordInt += value;
                HookHandler.HookSetStatusRecordInt();
            }
            remove => HookHandler._beforeSetStatusRecordInt -= value;
        }

        public static event Delegates.GetStatusRecordInt_BeforeArgs GetStatusRecordInt
        {
            add
            {
                HookHandler._beforeGetStatusRecordInt += value;
                HookHandler.HookGetStatusRecordInt();
            }
            remove => HookHandler._beforeGetStatusRecordInt -= value;
        }

        public static event Delegates.ResetStatusRecords_BeforeArgs ResetStatusRecords
        {
            add
            {
                HookHandler._beforeResetStatusRecords += value;
                HookHandler.HookResetStatusRecords();
            }
            remove => HookHandler._beforeResetStatusRecords -= value;
        }

        public static event Delegates.SaveStatusRecords_BeforeArgs SaveStatusRecords
        {
            add
            {
                HookHandler._beforeSaveStatusRecords += value;
                HookHandler.HookSaveStatusRecords();
            }
            remove => HookHandler._beforeSaveStatusRecords -= value;
        }

        public static event Delegates.SetState_BeforeArgs SetState
        {
            add
            {
                HookHandler._beforeSetState += value;
                HookHandler.HookSetState();
            }
            remove => HookHandler._beforeSetState -= value;
        }

        public static event Delegates.LoadScene_BeforeArgs LoadScene
        {
            add
            {
                HookHandler._beforeLoadScene += value;
                HookHandler.HookLoadScene();
            }
            remove => HookHandler._beforeLoadScene -= value;
        }

        public static event Delegates.LoadSceneAdditive_BeforeArgs LoadSceneAdditive
        {
            add
            {
                HookHandler._beforeLoadSceneAdditive += value;
                HookHandler.HookLoadSceneAdditive();
            }
            remove => HookHandler._beforeLoadSceneAdditive -= value;
        }

        public static event Delegates.OnNextLevelReady_BeforeArgs OnNextLevelReady
        {
            add
            {
                HookHandler._beforeOnNextLevelReady += value;
                HookHandler.HookOnNextLevelReady();
            }
            remove => HookHandler._beforeOnNextLevelReady -= value;
        }

        public static event Delegates.OnWillActivateFirstLevel_BeforeArgs OnWillActivateFirstLevel
        {
            add
            {
                HookHandler._beforeOnWillActivateFirstLevel += value;
                HookHandler.HookOnWillActivateFirstLevel();
            }
            remove => HookHandler._beforeOnWillActivateFirstLevel -= value;
        }

        public static event Delegates.LoadFirstScene_BeforeArgs LoadFirstScene
        {
            add
            {
                HookHandler._beforeLoadFirstScene += value;
                HookHandler.HookLoadFirstScene();
            }
            remove => HookHandler._beforeLoadFirstScene -= value;
        }

        public static event Delegates.LoadPermadeathUnlockScene_BeforeArgs LoadPermadeathUnlockScene
        {
            add
            {
                HookHandler._beforeLoadPermadeathUnlockScene += value;
                HookHandler.HookLoadPermadeathUnlockScene();
            }
            remove => HookHandler._beforeLoadPermadeathUnlockScene -= value;
        }

        public static event Delegates.LoadMrMushromScene_BeforeArgs LoadMrMushromScene
        {
            add
            {
                HookHandler._beforeLoadMrMushromScene += value;
                HookHandler.HookLoadMrMushromScene();
            }
            remove => HookHandler._beforeLoadMrMushromScene -= value;
        }

        public static event Delegates.LoadOpeningCinematic_BeforeArgs LoadOpeningCinematic
        {
            add
            {
                HookHandler._beforeLoadOpeningCinematic += value;
                HookHandler.HookLoadOpeningCinematic();
            }
            remove => HookHandler._beforeLoadOpeningCinematic -= value;
        }

        public static event Delegates.PositionHeroAtSceneEntrance_BeforeArgs PositionHeroAtSceneEntrance
        {
            add
            {
                HookHandler._beforePositionHeroAtSceneEntrance += value;
                HookHandler.HookPositionHeroAtSceneEntrance();
            }
            remove => HookHandler._beforePositionHeroAtSceneEntrance -= value;
        }

        public static event Delegates.FindEntryPoint_BeforeArgs FindEntryPoint
        {
            add
            {
                HookHandler._beforeFindEntryPoint += value;
                HookHandler.HookFindEntryPoint();
            }
            remove => HookHandler._beforeFindEntryPoint -= value;
        }

        public static event Delegates.FindTransitionPoint_BeforeArgs FindTransitionPoint
        {
            add
            {
                HookHandler._beforeFindTransitionPoint += value;
                HookHandler.HookFindTransitionPoint();
            }
            remove => HookHandler._beforeFindTransitionPoint -= value;
        }

        public static event Delegates.EnterHero_BeforeArgs EnterHero
        {
            add
            {
                HookHandler._beforeEnterHero += value;
                HookHandler.HookEnterHero();
            }
            remove => HookHandler._beforeEnterHero -= value;
        }

        public static event Delegates.FinishedEnteringScene_BeforeArgs FinishedEnteringScene
        {
            add
            {
                HookHandler._beforeFinishedEnteringScene += value;
                HookHandler.HookFinishedEnteringScene();
            }
            remove => HookHandler._beforeFinishedEnteringScene -= value;
        }

        public static event Delegates.SetupGameRefs_BeforeArgs SetupGameRefs
        {
            add
            {
                HookHandler._beforeSetupGameRefs += value;
                HookHandler.HookSetupGameRefs();
            }
            remove => HookHandler._beforeSetupGameRefs -= value;
        }

        public static event Delegates.SetupSceneRefs_BeforeArgs SetupSceneRefs
        {
            add
            {
                HookHandler._beforeSetupSceneRefs += value;
                HookHandler.HookSetupSceneRefs();
            }
            remove => HookHandler._beforeSetupSceneRefs -= value;
        }

        public static event Delegates.SetupHeroRefs_BeforeArgs SetupHeroRefs
        {
            add
            {
                HookHandler._beforeSetupHeroRefs += value;
                HookHandler.HookSetupHeroRefs();
            }
            remove => HookHandler._beforeSetupHeroRefs -= value;
        }

        public static event Delegates.BeginScene_BeforeArgs BeginScene
        {
            add
            {
                HookHandler._beforeBeginScene += value;
                HookHandler.HookBeginScene();
            }
            remove => HookHandler._beforeBeginScene -= value;
        }

        public static event Delegates.UpdateUIStateFromGameState_BeforeArgs UpdateUIStateFromGameState
        {
            add
            {
                HookHandler._beforeUpdateUIStateFromGameState += value;
                HookHandler.HookUpdateUIStateFromGameState();
            }
            remove => HookHandler._beforeUpdateUIStateFromGameState -= value;
        }

        public static event Delegates.SkipCutscene_BeforeArgs SkipCutscene
        {
            add
            {
                HookHandler._beforeSkipCutscene += value;
                HookHandler.HookSkipCutscene();
            }
            remove => HookHandler._beforeSkipCutscene -= value;
        }

        public static event Delegates.SkipCutsceneNoMash_BeforeArgs SkipCutsceneNoMash
        {
            add
            {
                HookHandler._beforeSkipCutsceneNoMash += value;
                HookHandler.HookSkipCutsceneNoMash();
            }
            remove => HookHandler._beforeSkipCutsceneNoMash -= value;
        }

        public static event Delegates.NoLongerFirstGame_BeforeArgs NoLongerFirstGame
        {
            add
            {
                HookHandler._beforeNoLongerFirstGame += value;
                HookHandler.HookNoLongerFirstGame();
            }
            remove => HookHandler._beforeNoLongerFirstGame -= value;
        }

        public static event Delegates.SetupStatusModifiers_BeforeArgs SetupStatusModifiers
        {
            add
            {
                HookHandler._beforeSetupStatusModifiers += value;
                HookHandler.HookSetupStatusModifiers();
            }
            remove => HookHandler._beforeSetupStatusModifiers -= value;
        }

        public static event Delegates.MatchBackerCreditsSetting_BeforeArgs MatchBackerCreditsSetting
        {
            add
            {
                HookHandler._beforeMatchBackerCreditsSetting += value;
                HookHandler.HookMatchBackerCreditsSetting();
            }
            remove => HookHandler._beforeMatchBackerCreditsSetting -= value;
        }

        public static event Delegates.RefreshLocalization_BeforeArgs RefreshLocalization
        {
            add
            {
                HookHandler._beforeRefreshLocalization += value;
                HookHandler.HookRefreshLocalization();
            }
            remove => HookHandler._beforeRefreshLocalization -= value;
        }

        public static event Delegates.RefreshParticleSystems_BeforeArgs RefreshParticleSystems
        {
            add
            {
                HookHandler._beforeRefreshParticleSystems += value;
                HookHandler.HookRefreshParticleSystems();
            }
            remove => HookHandler._beforeRefreshParticleSystems -= value;
        }

        public static event Delegates.ApplyNativeInput_BeforeArgs ApplyNativeInput
        {
            add
            {
                HookHandler._beforeApplyNativeInput += value;
                HookHandler.HookApplyNativeInput();
            }
            remove => HookHandler._beforeApplyNativeInput -= value;
        }

        public static event Delegates.EnablePermadeathMode_BeforeArgs EnablePermadeathMode
        {
            add
            {
                HookHandler._beforeEnablePermadeathMode += value;
                HookHandler.HookEnablePermadeathMode();
            }
            remove => HookHandler._beforeEnablePermadeathMode -= value;
        }

        public static event Delegates.GetCurrentMapZone_BeforeArgs GetCurrentMapZone
        {
            add
            {
                HookHandler._beforeGetCurrentMapZone += value;
                HookHandler.HookGetCurrentMapZone();
            }
            remove => HookHandler._beforeGetCurrentMapZone -= value;
        }

        public static event Delegates.GetSceneWidth_BeforeArgs GetSceneWidth
        {
            add
            {
                HookHandler._beforeGetSceneWidth += value;
                HookHandler.HookGetSceneWidth();
            }
            remove => HookHandler._beforeGetSceneWidth -= value;
        }

        public static event Delegates.GetSceneHeight_BeforeArgs GetSceneHeight
        {
            add
            {
                HookHandler._beforeGetSceneHeight += value;
                HookHandler.HookGetSceneHeight();
            }
            remove => HookHandler._beforeGetSceneHeight -= value;
        }

        public static event Delegates.GetSceneManager_BeforeArgs GetSceneManager
        {
            add
            {
                HookHandler._beforeGetSceneManager += value;
                HookHandler.HookGetSceneManager();
            }
            remove => HookHandler._beforeGetSceneManager -= value;
        }

        public static event Delegates.GetFormattedMapZoneString_BeforeArgs GetFormattedMapZoneString
        {
            add
            {
                HookHandler._beforeGetFormattedMapZoneString += value;
                HookHandler.HookGetFormattedMapZoneString();
            }
            remove => HookHandler._beforeGetFormattedMapZoneString -= value;
        }

        public static event Delegates.UpdateSceneName_BeforeArgs UpdateSceneName
        {
            add
            {
                HookHandler._beforeUpdateSceneName += value;
                HookHandler.HookUpdateSceneName();
            }
            remove => HookHandler._beforeUpdateSceneName -= value;
        }

        public static event Delegates.GetBaseSceneName_BeforeArgs GetBaseSceneName
        {
            add
            {
                HookHandler._beforeGetBaseSceneName += value;
                HookHandler.HookGetBaseSceneName();
            }
            remove => HookHandler._beforeGetBaseSceneName -= value;
        }

        public static event Delegates.GetSceneNameString_BeforeArgs GetSceneNameString
        {
            add
            {
                HookHandler._beforeGetSceneNameString += value;
                HookHandler.HookGetSceneNameString();
            }
            remove => HookHandler._beforeGetSceneNameString -= value;
        }

        public static event Delegates.GetTileMap_BeforeArgs GetTileMap
        {
            add
            {
                HookHandler._beforeGetTileMap += value;
                HookHandler.HookGetTileMap();
            }
            remove => HookHandler._beforeGetTileMap -= value;
        }

        public static event Delegates.RefreshTilemapInfo_BeforeArgs RefreshTilemapInfo
        {
            add
            {
                HookHandler._beforeRefreshTilemapInfo += value;
                HookHandler.HookRefreshTilemapInfo();
            }
            remove => HookHandler._beforeRefreshTilemapInfo -= value;
        }

        public static event Delegates.SaveLevelState_BeforeArgs SaveLevelState
        {
            add
            {
                HookHandler._beforeSaveLevelState += value;
                HookHandler.HookSaveLevelState();
            }
            remove => HookHandler._beforeSaveLevelState -= value;
        }

        public static event Delegates.ResetSemiPersistentItems_BeforeArgs ResetSemiPersistentItems
        {
            add
            {
                HookHandler._beforeResetSemiPersistentItems += value;
                HookHandler.HookResetSemiPersistentItems();
            }
            remove => HookHandler._beforeResetSemiPersistentItems -= value;
        }

        public static event Delegates.IsMenuScene_BeforeArgs IsMenuScene
        {
            add
            {
                HookHandler._beforeIsMenuScene += value;
                HookHandler.HookIsMenuScene();
            }
            remove => HookHandler._beforeIsMenuScene -= value;
        }

        public static event Delegates.IsTitleScreenScene_BeforeArgs IsTitleScreenScene
        {
            add
            {
                HookHandler._beforeIsTitleScreenScene += value;
                HookHandler.HookIsTitleScreenScene();
            }
            remove => HookHandler._beforeIsTitleScreenScene -= value;
        }

        public static event Delegates.IsGameplayScene_BeforeArgs IsGameplayScene
        {
            add
            {
                HookHandler._beforeIsGameplayScene += value;
                HookHandler.HookIsGameplayScene();
            }
            remove => HookHandler._beforeIsGameplayScene -= value;
        }

        public static event Delegates.IsNonGameplayScene_BeforeArgs IsNonGameplayScene
        {
            add
            {
                HookHandler._beforeIsNonGameplayScene += value;
                HookHandler.HookIsNonGameplayScene();
            }
            remove => HookHandler._beforeIsNonGameplayScene -= value;
        }

        public static event Delegates.IsCinematicScene_BeforeArgs IsCinematicScene
        {
            add
            {
                HookHandler._beforeIsCinematicScene += value;
                HookHandler.HookIsCinematicScene();
            }
            remove => HookHandler._beforeIsCinematicScene -= value;
        }

        public static event Delegates.IsStagTravelScene_BeforeArgs IsStagTravelScene
        {
            add
            {
                HookHandler._beforeIsStagTravelScene += value;
                HookHandler.HookIsStagTravelScene();
            }
            remove => HookHandler._beforeIsStagTravelScene -= value;
        }

        public static event Delegates.IsBetaEndScene_BeforeArgs IsBetaEndScene
        {
            add
            {
                HookHandler._beforeIsBetaEndScene += value;
                HookHandler.HookIsBetaEndScene();
            }
            remove => HookHandler._beforeIsBetaEndScene -= value;
        }

        public static event Delegates.IsTutorialScene_BeforeArgs IsTutorialScene
        {
            add
            {
                HookHandler._beforeIsTutorialScene += value;
                HookHandler.HookIsTutorialScene();
            }
            remove => HookHandler._beforeIsTutorialScene -= value;
        }

        public static event Delegates.IsTestScene_BeforeArgs IsTestScene
        {
            add
            {
                HookHandler._beforeIsTestScene += value;
                HookHandler.HookIsTestScene();
            }
            remove => HookHandler._beforeIsTestScene -= value;
        }

        public static event Delegates.IsBossDoorScene_BeforeArgs IsBossDoorScene
        {
            add
            {
                HookHandler._beforeIsBossDoorScene += value;
                HookHandler.HookIsBossDoorScene();
            }
            remove => HookHandler._beforeIsBossDoorScene -= value;
        }

        public static event Delegates.ShouldKeepHUDCameraActive_BeforeArgs ShouldKeepHUDCameraActive
        {
            add
            {
                HookHandler._beforeShouldKeepHUDCameraActive += value;
                HookHandler.HookShouldKeepHUDCameraActive();
            }
            remove => HookHandler._beforeShouldKeepHUDCameraActive -= value;
        }

        public static event Delegates.GetSceneZoneName_BeforeArgs GetSceneZoneName
        {
            add
            {
                HookHandler._beforeGetSceneZoneName += value;
                HookHandler.HookGetSceneZoneName();
            }
            remove => HookHandler._beforeGetSceneZoneName -= value;
        }

        public static event Delegates.CountBits_BeforeArgs CountBits
        {
            add
            {
                HookHandler._beforeCountBits += value;
                HookHandler.HookCountBits();
            }
            remove => HookHandler._beforeCountBits -= value;
        }

        public static event Delegates.IsUnloadAssetsRequired_BeforeArgs IsUnloadAssetsRequired
        {
            add
            {
                HookHandler._beforeIsUnloadAssetsRequired += value;
                HookHandler.HookIsUnloadAssetsRequired();
            }
            remove => HookHandler._beforeIsUnloadAssetsRequired -= value;
        }

        public static event Delegates.HasSaveFile_BeforeArgs HasSaveFile
        {
            add
            {
                HookHandler._beforeHasSaveFile += value;
                HookHandler.HookHasSaveFile();
            }
            remove => HookHandler._beforeHasSaveFile -= value;
        }

        public static event Delegates.SaveGame_BeforeArgs SaveGame
        {
            add
            {
                HookHandler._beforeSaveGame += value;
                HookHandler.HookSaveGame();
            }
            remove => HookHandler._beforeSaveGame -= value;
        }

        public static event Delegates.ShowSaveIcon_BeforeArgs ShowSaveIcon
        {
            add
            {
                HookHandler._beforeShowSaveIcon += value;
                HookHandler.HookShowSaveIcon();
            }
            remove => HookHandler._beforeShowSaveIcon -= value;
        }

        public static event Delegates.HideSaveIcon_BeforeArgs HideSaveIcon
        {
            add
            {
                HookHandler._beforeHideSaveIcon += value;
                HookHandler.HookHideSaveIcon();
            }
            remove => HookHandler._beforeHideSaveIcon -= value;
        }

        public static event Delegates.SaveGame_Action_BeforeArgs SaveGame_Action
        {
            add
            {
                HookHandler._beforeSaveGame_Action += value;
                HookHandler.HookSaveGame_Action();
            }
            remove => HookHandler._beforeSaveGame_Action -= value;
        }

        public static event Delegates.ResetGameTimer_BeforeArgs ResetGameTimer
        {
            add
            {
                HookHandler._beforeResetGameTimer += value;
                HookHandler.HookResetGameTimer();
            }
            remove => HookHandler._beforeResetGameTimer -= value;
        }

        public static event Delegates.IncreaseGameTimer_BeforeArgs IncreaseGameTimer
        {
            add
            {
                HookHandler._beforeIncreaseGameTimer += value;
                HookHandler.HookIncreaseGameTimer();
            }
            remove => HookHandler._beforeIncreaseGameTimer -= value;
        }

        public static event Delegates.SaveGame_int_Action_BeforeArgs SaveGame_int_Action
        {
            add
            {
                HookHandler._beforeSaveGame_int_Action += value;
                HookHandler.HookSaveGame_int_Action();
            }
            remove => HookHandler._beforeSaveGame_int_Action -= value;
        }

        public static event Delegates.LoadGameFromUI_BeforeArgs LoadGameFromUI
        {
            add
            {
                HookHandler._beforeLoadGameFromUI += value;
                HookHandler.HookLoadGameFromUI();
            }
            remove => HookHandler._beforeLoadGameFromUI -= value;
        }

        public static event Delegates.LoadGameFromUIRoutine_BeforeArgs LoadGameFromUIRoutine
        {
            add
            {
                HookHandler._beforeLoadGameFromUIRoutine += value;
                HookHandler.HookLoadGameFromUIRoutine();
            }
            remove => HookHandler._beforeLoadGameFromUIRoutine -= value;
        }

        public static event Delegates.LoadGame_BeforeArgs LoadGame
        {
            add
            {
                HookHandler._beforeLoadGame += value;
                HookHandler.HookLoadGame();
            }
            remove => HookHandler._beforeLoadGame -= value;
        }

        public static event Delegates.ClearSaveFile_BeforeArgs ClearSaveFile
        {
            add
            {
                HookHandler._beforeClearSaveFile += value;
                HookHandler.HookClearSaveFile();
            }
            remove => HookHandler._beforeClearSaveFile -= value;
        }

        public static event Delegates.GetSaveStatsForSlot_BeforeArgs GetSaveStatsForSlot
        {
            add
            {
                HookHandler._beforeGetSaveStatsForSlot += value;
                HookHandler.HookGetSaveStatsForSlot();
            }
            remove => HookHandler._beforeGetSaveStatsForSlot -= value;
        }

        public static event Delegates.PauseGameToggleByMenu_BeforeArgs PauseGameToggleByMenu
        {
            add
            {
                HookHandler._beforePauseGameToggleByMenu += value;
                HookHandler.HookPauseGameToggleByMenu();
            }
            remove => HookHandler._beforePauseGameToggleByMenu -= value;
        }

        public static event Delegates.PauseGameToggle_BeforeArgs PauseGameToggle
        {
            add
            {
                HookHandler._beforePauseGameToggle += value;
                HookHandler.HookPauseGameToggle();
            }
            remove => HookHandler._beforePauseGameToggle -= value;
        }

        public static event Delegates.SetTimeScale_float_float_BeforeArgs SetTimeScale_float_float
        {
            add
            {
                HookHandler._beforeSetTimeScale_float_float += value;
                HookHandler.HookSetTimeScale_float_float();
            }
            remove => HookHandler._beforeSetTimeScale_float_float -= value;
        }

        public static event Delegates.SetTimeScale_float_BeforeArgs SetTimeScale_float
        {
            add
            {
                HookHandler._beforeSetTimeScale_float += value;
                HookHandler.HookSetTimeScale_float();
            }
            remove => HookHandler._beforeSetTimeScale_float -= value;
        }

        public static event Delegates.FreezeMoment_int_BeforeArgs FreezeMoment_int
        {
            add
            {
                HookHandler._beforeFreezeMoment_int += value;
                HookHandler.HookFreezeMoment_int();
            }
            remove => HookHandler._beforeFreezeMoment_int -= value;
        }

        public static event Delegates.FreezeMoment_float_float_float_float_BeforeArgs
            FreezeMoment_float_float_float_float
            {
                add
                {
                    HookHandler._beforeFreezeMoment_float_float_float_float += value;
                    HookHandler.HookFreezeMoment_float_float_float_float();
                }
                remove => HookHandler._beforeFreezeMoment_float_float_float_float -= value;
            }

        public static event Delegates.FreezeMomentGC_BeforeArgs FreezeMomentGC
        {
            add
            {
                HookHandler._beforeFreezeMomentGC += value;
                HookHandler.HookFreezeMomentGC();
            }
            remove => HookHandler._beforeFreezeMomentGC -= value;
        }

        public static event Delegates.FreezeMoment_float_float_float_bool_BeforeArgs FreezeMoment_float_float_float_bool
        {
            add
            {
                HookHandler._beforeFreezeMoment_float_float_float_bool += value;
                HookHandler.HookFreezeMoment_float_float_float_bool();
            }
            remove => HookHandler._beforeFreezeMoment_float_float_float_bool -= value;
        }

        public static event Delegates.EnsureSaveSlotSpace_BeforeArgs EnsureSaveSlotSpace
        {
            add
            {
                HookHandler._beforeEnsureSaveSlotSpace += value;
                HookHandler.HookEnsureSaveSlotSpace();
            }
            remove => HookHandler._beforeEnsureSaveSlotSpace -= value;
        }

        public static event Delegates.StartNewGame_BeforeArgs StartNewGame
        {
            add
            {
                HookHandler._beforeStartNewGame += value;
                HookHandler.HookStartNewGame();
            }
            remove => HookHandler._beforeStartNewGame -= value;
        }

        public static event Delegates.RunStartNewGame_BeforeArgs RunStartNewGame
        {
            add
            {
                HookHandler._beforeRunStartNewGame += value;
                HookHandler.HookRunStartNewGame();
            }
            remove => HookHandler._beforeRunStartNewGame -= value;
        }

        public static event Delegates.ContinueGame_BeforeArgs ContinueGame
        {
            add
            {
                HookHandler._beforeContinueGame += value;
                HookHandler.HookContinueGame();
            }
            remove => HookHandler._beforeContinueGame -= value;
        }

        public static event Delegates.RunContinueGame_BeforeArgs RunContinueGame
        {
            add
            {
                HookHandler._beforeRunContinueGame += value;
                HookHandler.HookRunContinueGame();
            }
            remove => HookHandler._beforeRunContinueGame -= value;
        }

        public static event Delegates.WillTerminateInBackground_BeforeArgs WillTerminateInBackground
        {
            add
            {
                HookHandler._beforeWillTerminateInBackground += value;
                HookHandler.HookWillTerminateInBackground();
            }
            remove => HookHandler._beforeWillTerminateInBackground -= value;
        }

        public static event Delegates.OnDisengage_BeforeArgs OnDisengage
        {
            add
            {
                HookHandler._beforeOnDisengage += value;
                HookHandler.HookOnDisengage();
            }
            remove => HookHandler._beforeOnDisengage -= value;
        }

        public static event Delegates.EmergencyReturnToMenu_BeforeArgs EmergencyReturnToMenu
        {
            add
            {
                HookHandler._beforeEmergencyReturnToMenu += value;
                HookHandler.HookEmergencyReturnToMenu();
            }
            remove => HookHandler._beforeEmergencyReturnToMenu -= value;
        }

        public static event Delegates.QuitGame_BeforeArgs QuitGame
        {
            add
            {
                HookHandler._beforeQuitGame += value;
                HookHandler.HookQuitGame();
            }
            remove => HookHandler._beforeQuitGame -= value;
        }

        public static event Delegates.LoadedBoss_BeforeArgs LoadedBoss
        {
            add
            {
                HookHandler._beforeLoadedBoss += value;
                HookHandler.HookLoadedBoss();
            }
            remove => HookHandler._beforeLoadedBoss -= value;
        }

        public static event Delegates.DoDestroyPersonalPools_BeforeArgs DoDestroyPersonalPools
        {
            add
            {
                HookHandler._beforeDoDestroyPersonalPools += value;
                HookHandler.HookDoDestroyPersonalPools();
            }
            remove => HookHandler._beforeDoDestroyPersonalPools -= value;
        }

        public static event Delegates.GetImplicitCinematicVolume_BeforeArgs GetImplicitCinematicVolume
        {
            add
            {
                HookHandler._beforeGetImplicitCinematicVolume += value;
                HookHandler.HookGetImplicitCinematicVolume();
            }
            remove => HookHandler._beforeGetImplicitCinematicVolume -= value;
        }

        public static event Delegates.orig_get_ui_BeforeArgs orig_get_ui
        {
            add
            {
                HookHandler._beforeorig_get_ui += value;
                HookHandler.Hookorig_get_ui();
            }
            remove => HookHandler._beforeorig_get_ui -= value;
        }

        public static event Delegates.orig_set_ui_BeforeArgs orig_set_ui
        {
            add
            {
                HookHandler._beforeorig_set_ui += value;
                HookHandler.Hookorig_set_ui();
            }
            remove => HookHandler._beforeorig_set_ui -= value;
        }

        public static event Delegates.orig_OnApplicationQuit_BeforeArgs orig_OnApplicationQuit
        {
            add
            {
                HookHandler._beforeorig_OnApplicationQuit += value;
                HookHandler.Hookorig_OnApplicationQuit();
            }
            remove => HookHandler._beforeorig_OnApplicationQuit -= value;
        }

        public static event Delegates.orig_LoadScene_BeforeArgs orig_LoadScene
        {
            add
            {
                HookHandler._beforeorig_LoadScene += value;
                HookHandler.Hookorig_LoadScene();
            }
            remove => HookHandler._beforeorig_LoadScene -= value;
        }

        public static event Delegates.orig_ClearSaveFile_BeforeArgs orig_ClearSaveFile
        {
            add
            {
                HookHandler._beforeorig_ClearSaveFile += value;
                HookHandler.Hookorig_ClearSaveFile();
            }
            remove => HookHandler._beforeorig_ClearSaveFile -= value;
        }

        public static event Delegates.orig_PlayerDead_BeforeArgs orig_PlayerDead
        {
            add
            {
                HookHandler._beforeorig_PlayerDead += value;
                HookHandler.Hookorig_PlayerDead();
            }
            remove => HookHandler._beforeorig_PlayerDead -= value;
        }

        public static event Delegates.ModdedSavePath_BeforeArgs ModdedSavePath
        {
            add
            {
                HookHandler._beforeModdedSavePath += value;
                HookHandler.HookModdedSavePath();
            }
            remove => HookHandler._beforeModdedSavePath -= value;
        }

        public static event Delegates.orig_SetupSceneRefs_BeforeArgs orig_SetupSceneRefs
        {
            add
            {
                HookHandler._beforeorig_SetupSceneRefs += value;
                HookHandler.Hookorig_SetupSceneRefs();
            }
            remove => HookHandler._beforeorig_SetupSceneRefs -= value;
        }

        public static event Delegates.orig_OnWillActivateFirstLevel_BeforeArgs orig_OnWillActivateFirstLevel
        {
            add
            {
                HookHandler._beforeorig_OnWillActivateFirstLevel += value;
                HookHandler.Hookorig_OnWillActivateFirstLevel();
            }
            remove => HookHandler._beforeorig_OnWillActivateFirstLevel -= value;
        }

        public static event Delegates.PauseToggleDynamicMenu_BeforeArgs PauseToggleDynamicMenu
        {
            add
            {
                HookHandler._beforePauseToggleDynamicMenu += value;
                HookHandler.HookPauseToggleDynamicMenu();
            }
            remove => HookHandler._beforePauseToggleDynamicMenu -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_TimeSlowed_AfterArgs get_TimeSlowed
        {
            add
            {
                HookHandler._afterget_TimeSlowed += value;
                HookHandler.Hookget_TimeSlowed();
            }
            remove => HookHandler._afterget_TimeSlowed -= value;
        }

        public static event Delegates.get_inputHandler_AfterArgs get_inputHandler
        {
            add
            {
                HookHandler._afterget_inputHandler += value;
                HookHandler.Hookget_inputHandler();
            }
            remove => HookHandler._afterget_inputHandler -= value;
        }

        public static event Delegates.set_inputHandler_AfterArgs set_inputHandler
        {
            add
            {
                HookHandler._afterset_inputHandler += value;
                HookHandler.Hookset_inputHandler();
            }
            remove => HookHandler._afterset_inputHandler -= value;
        }

        public static event Delegates.get_achievementHandler_AfterArgs get_achievementHandler
        {
            add
            {
                HookHandler._afterget_achievementHandler += value;
                HookHandler.Hookget_achievementHandler();
            }
            remove => HookHandler._afterget_achievementHandler -= value;
        }

        public static event Delegates.set_achievementHandler_AfterArgs set_achievementHandler
        {
            add
            {
                HookHandler._afterset_achievementHandler += value;
                HookHandler.Hookset_achievementHandler();
            }
            remove => HookHandler._afterset_achievementHandler -= value;
        }

        public static event Delegates.get_AudioManager_AfterArgs get_AudioManager
        {
            add
            {
                HookHandler._afterget_AudioManager += value;
                HookHandler.Hookget_AudioManager();
            }
            remove => HookHandler._afterget_AudioManager -= value;
        }

        public static event Delegates.get_cameraCtrl_AfterArgs get_cameraCtrl
        {
            add
            {
                HookHandler._afterget_cameraCtrl += value;
                HookHandler.Hookget_cameraCtrl();
            }
            remove => HookHandler._afterget_cameraCtrl -= value;
        }

        public static event Delegates.set_cameraCtrl_AfterArgs set_cameraCtrl
        {
            add
            {
                HookHandler._afterset_cameraCtrl += value;
                HookHandler.Hookset_cameraCtrl();
            }
            remove => HookHandler._afterset_cameraCtrl -= value;
        }

        public static event Delegates.get_hero_ctrl_AfterArgs get_hero_ctrl
        {
            add
            {
                HookHandler._afterget_hero_ctrl += value;
                HookHandler.Hookget_hero_ctrl();
            }
            remove => HookHandler._afterget_hero_ctrl -= value;
        }

        public static event Delegates.set_hero_ctrl_AfterArgs set_hero_ctrl
        {
            add
            {
                HookHandler._afterset_hero_ctrl += value;
                HookHandler.Hookset_hero_ctrl();
            }
            remove => HookHandler._afterset_hero_ctrl -= value;
        }

        public static event Delegates.get_heroLight_AfterArgs get_heroLight
        {
            add
            {
                HookHandler._afterget_heroLight += value;
                HookHandler.Hookget_heroLight();
            }
            remove => HookHandler._afterget_heroLight -= value;
        }

        public static event Delegates.set_heroLight_AfterArgs set_heroLight
        {
            add
            {
                HookHandler._afterset_heroLight += value;
                HookHandler.Hookset_heroLight();
            }
            remove => HookHandler._afterset_heroLight -= value;
        }

        public static event Delegates.get_sm_AfterArgs get_sm
        {
            add
            {
                HookHandler._afterget_sm += value;
                HookHandler.Hookget_sm();
            }
            remove => HookHandler._afterget_sm -= value;
        }

        public static event Delegates.set_sm_AfterArgs set_sm
        {
            add
            {
                HookHandler._afterset_sm += value;
                HookHandler.Hookset_sm();
            }
            remove => HookHandler._afterset_sm -= value;
        }

        public static event Delegates.get_ui_AfterArgs get_ui
        {
            add
            {
                HookHandler._afterget_ui += value;
                HookHandler.Hookget_ui();
            }
            remove => HookHandler._afterget_ui -= value;
        }

        public static event Delegates.set_ui_AfterArgs set_ui
        {
            add
            {
                HookHandler._afterset_ui += value;
                HookHandler.Hookset_ui();
            }
            remove => HookHandler._afterset_ui -= value;
        }

        public static event Delegates.get_tilemap_AfterArgs get_tilemap
        {
            add
            {
                HookHandler._afterget_tilemap += value;
                HookHandler.Hookget_tilemap();
            }
            remove => HookHandler._afterget_tilemap -= value;
        }

        public static event Delegates.set_tilemap_AfterArgs set_tilemap
        {
            add
            {
                HookHandler._afterset_tilemap += value;
                HookHandler.Hookset_tilemap();
            }
            remove => HookHandler._afterset_tilemap -= value;
        }

        public static event Delegates.get_soulOrb_fsm_AfterArgs get_soulOrb_fsm
        {
            add
            {
                HookHandler._afterget_soulOrb_fsm += value;
                HookHandler.Hookget_soulOrb_fsm();
            }
            remove => HookHandler._afterget_soulOrb_fsm -= value;
        }

        public static event Delegates.set_soulOrb_fsm_AfterArgs set_soulOrb_fsm
        {
            add
            {
                HookHandler._afterset_soulOrb_fsm += value;
                HookHandler.Hookset_soulOrb_fsm();
            }
            remove => HookHandler._afterset_soulOrb_fsm -= value;
        }

        public static event Delegates.get_soulVessel_fsm_AfterArgs get_soulVessel_fsm
        {
            add
            {
                HookHandler._afterget_soulVessel_fsm += value;
                HookHandler.Hookget_soulVessel_fsm();
            }
            remove => HookHandler._afterget_soulVessel_fsm -= value;
        }

        public static event Delegates.set_soulVessel_fsm_AfterArgs set_soulVessel_fsm
        {
            add
            {
                HookHandler._afterset_soulVessel_fsm += value;
                HookHandler.Hookset_soulVessel_fsm();
            }
            remove => HookHandler._afterset_soulVessel_fsm -= value;
        }

        public static event Delegates.get_PlayTime_AfterArgs get_PlayTime
        {
            add
            {
                HookHandler._afterget_PlayTime += value;
                HookHandler.Hookget_PlayTime();
            }
            remove => HookHandler._afterget_PlayTime -= value;
        }

        public static event Delegates.get_RespawningHero_AfterArgs get_RespawningHero
        {
            add
            {
                HookHandler._afterget_RespawningHero += value;
                HookHandler.Hookget_RespawningHero();
            }
            remove => HookHandler._afterget_RespawningHero -= value;
        }

        public static event Delegates.set_RespawningHero_AfterArgs set_RespawningHero
        {
            add
            {
                HookHandler._afterset_RespawningHero += value;
                HookHandler.Hookset_RespawningHero();
            }
            remove => HookHandler._afterset_RespawningHero -= value;
        }

        public static event Delegates.get_IsInSceneTransition_AfterArgs get_IsInSceneTransition
        {
            add
            {
                HookHandler._afterget_IsInSceneTransition += value;
                HookHandler.Hookget_IsInSceneTransition();
            }
            remove => HookHandler._afterget_IsInSceneTransition -= value;
        }

        public static event Delegates.set_IsInSceneTransition_AfterArgs set_IsInSceneTransition
        {
            add
            {
                HookHandler._afterset_IsInSceneTransition += value;
                HookHandler.Hookset_IsInSceneTransition();
            }
            remove => HookHandler._afterset_IsInSceneTransition -= value;
        }

        public static event Delegates.get_HasFinishedEnteringScene_AfterArgs get_HasFinishedEnteringScene
        {
            add
            {
                HookHandler._afterget_HasFinishedEnteringScene += value;
                HookHandler.Hookget_HasFinishedEnteringScene();
            }
            remove => HookHandler._afterget_HasFinishedEnteringScene -= value;
        }

        public static event Delegates.get_WorldInfo_AfterArgs get_WorldInfo
        {
            add
            {
                HookHandler._afterget_WorldInfo += value;
                HookHandler.Hookget_WorldInfo();
            }
            remove => HookHandler._afterget_WorldInfo -= value;
        }

        public static event Delegates.get_IsLoadingSceneTransition_AfterArgs get_IsLoadingSceneTransition
        {
            add
            {
                HookHandler._afterget_IsLoadingSceneTransition += value;
                HookHandler.Hookget_IsLoadingSceneTransition();
            }
            remove => HookHandler._afterget_IsLoadingSceneTransition -= value;
        }

        public static event Delegates.get_CurrentLoadDuration_AfterArgs get_CurrentLoadDuration
        {
            add
            {
                HookHandler._afterget_CurrentLoadDuration += value;
                HookHandler.Hookget_CurrentLoadDuration();
            }
            remove => HookHandler._afterget_CurrentLoadDuration -= value;
        }

        public static event Delegates.get_IsUsingCustomLoadAnimation_AfterArgs get_IsUsingCustomLoadAnimation
        {
            add
            {
                HookHandler._afterget_IsUsingCustomLoadAnimation += value;
                HookHandler.Hookget_IsUsingCustomLoadAnimation();
            }
            remove => HookHandler._afterget_IsUsingCustomLoadAnimation -= value;
        }

        public static event Delegates.get_instance_AfterArgs get_instance
        {
            add
            {
                HookHandler._afterget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._afterget_instance -= value;
        }

        public static event Delegates.get_UnsafeInstance_AfterArgs get_UnsafeInstance
        {
            add
            {
                HookHandler._afterget_UnsafeInstance += value;
                HookHandler.Hookget_UnsafeInstance();
            }
            remove => HookHandler._afterget_UnsafeInstance -= value;
        }

        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.UpdateEngagement_AfterArgs UpdateEngagement
        {
            add
            {
                HookHandler._afterUpdateEngagement += value;
                HookHandler.HookUpdateEngagement();
            }
            remove => HookHandler._afterUpdateEngagement -= value;
        }

        public static event Delegates.LevelActivated_AfterArgs LevelActivated
        {
            add
            {
                HookHandler._afterLevelActivated += value;
                HookHandler.HookLevelActivated();
            }
            remove => HookHandler._afterLevelActivated -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.OnApplicationQuit_AfterArgs OnApplicationQuit
        {
            add
            {
                HookHandler._afterOnApplicationQuit += value;
                HookHandler.HookOnApplicationQuit();
            }
            remove => HookHandler._afterOnApplicationQuit -= value;
        }

        public static event Delegates.ChangeToScene_AfterArgs ChangeToScene
        {
            add
            {
                HookHandler._afterChangeToScene += value;
                HookHandler.HookChangeToScene();
            }
            remove => HookHandler._afterChangeToScene -= value;
        }

        public static event Delegates.WarpToDreamGate_AfterArgs WarpToDreamGate
        {
            add
            {
                HookHandler._afterWarpToDreamGate += value;
                HookHandler.HookWarpToDreamGate();
            }
            remove => HookHandler._afterWarpToDreamGate -= value;
        }

        public static event Delegates.LeftScene_AfterArgs LeftScene
        {
            add
            {
                HookHandler._afterLeftScene += value;
                HookHandler.HookLeftScene();
            }
            remove => HookHandler._afterLeftScene -= value;
        }

        public static event Delegates.ReadyForRespawn_AfterArgs ReadyForRespawn
        {
            add
            {
                HookHandler._afterReadyForRespawn += value;
                HookHandler.HookReadyForRespawn();
            }
            remove => HookHandler._afterReadyForRespawn -= value;
        }

        public static event Delegates.HazardRespawn_AfterArgs HazardRespawn
        {
            add
            {
                HookHandler._afterHazardRespawn += value;
                HookHandler.HookHazardRespawn();
            }
            remove => HookHandler._afterHazardRespawn -= value;
        }

        public static event Delegates.TimePasses_AfterArgs TimePasses
        {
            add
            {
                HookHandler._afterTimePasses += value;
                HookHandler.HookTimePasses();
            }
            remove => HookHandler._afterTimePasses -= value;
        }

        public static event Delegates.FadeSceneIn_AfterArgs FadeSceneIn
        {
            add
            {
                HookHandler._afterFadeSceneIn += value;
                HookHandler.HookFadeSceneIn();
            }
            remove => HookHandler._afterFadeSceneIn -= value;
        }

        public static event Delegates.IsGamePaused_AfterArgs IsGamePaused
        {
            add
            {
                HookHandler._afterIsGamePaused += value;
                HookHandler.HookIsGamePaused();
            }
            remove => HookHandler._afterIsGamePaused -= value;
        }

        public static event Delegates.SetGameMap_AfterArgs SetGameMap
        {
            add
            {
                HookHandler._afterSetGameMap += value;
                HookHandler.HookSetGameMap();
            }
            remove => HookHandler._afterSetGameMap -= value;
        }

        public static event Delegates.CalculateNotchesUsed_AfterArgs CalculateNotchesUsed
        {
            add
            {
                HookHandler._afterCalculateNotchesUsed += value;
                HookHandler.HookCalculateNotchesUsed();
            }
            remove => HookHandler._afterCalculateNotchesUsed -= value;
        }

        public static event Delegates.GetLanguageAsString_AfterArgs GetLanguageAsString
        {
            add
            {
                HookHandler._afterGetLanguageAsString += value;
                HookHandler.HookGetLanguageAsString();
            }
            remove => HookHandler._afterGetLanguageAsString -= value;
        }

        public static event Delegates.GetEntryGateName_AfterArgs GetEntryGateName
        {
            add
            {
                HookHandler._afterGetEntryGateName += value;
                HookHandler.HookGetEntryGateName();
            }
            remove => HookHandler._afterGetEntryGateName -= value;
        }

        public static event Delegates.SetPlayerDataBool_AfterArgs SetPlayerDataBool
        {
            add
            {
                HookHandler._afterSetPlayerDataBool += value;
                HookHandler.HookSetPlayerDataBool();
            }
            remove => HookHandler._afterSetPlayerDataBool -= value;
        }

        public static event Delegates.SetPlayerDataInt_AfterArgs SetPlayerDataInt
        {
            add
            {
                HookHandler._afterSetPlayerDataInt += value;
                HookHandler.HookSetPlayerDataInt();
            }
            remove => HookHandler._afterSetPlayerDataInt -= value;
        }

        public static event Delegates.SetPlayerDataFloat_AfterArgs SetPlayerDataFloat
        {
            add
            {
                HookHandler._afterSetPlayerDataFloat += value;
                HookHandler.HookSetPlayerDataFloat();
            }
            remove => HookHandler._afterSetPlayerDataFloat -= value;
        }

        public static event Delegates.SetPlayerDataString_AfterArgs SetPlayerDataString
        {
            add
            {
                HookHandler._afterSetPlayerDataString += value;
                HookHandler.HookSetPlayerDataString();
            }
            remove => HookHandler._afterSetPlayerDataString -= value;
        }

        public static event Delegates.IncrementPlayerDataInt_AfterArgs IncrementPlayerDataInt
        {
            add
            {
                HookHandler._afterIncrementPlayerDataInt += value;
                HookHandler.HookIncrementPlayerDataInt();
            }
            remove => HookHandler._afterIncrementPlayerDataInt -= value;
        }

        public static event Delegates.DecrementPlayerDataInt_AfterArgs DecrementPlayerDataInt
        {
            add
            {
                HookHandler._afterDecrementPlayerDataInt += value;
                HookHandler.HookDecrementPlayerDataInt();
            }
            remove => HookHandler._afterDecrementPlayerDataInt -= value;
        }

        public static event Delegates.IntAdd_AfterArgs IntAdd
        {
            add
            {
                HookHandler._afterIntAdd += value;
                HookHandler.HookIntAdd();
            }
            remove => HookHandler._afterIntAdd -= value;
        }

        public static event Delegates.GetPlayerDataBool_AfterArgs GetPlayerDataBool
        {
            add
            {
                HookHandler._afterGetPlayerDataBool += value;
                HookHandler.HookGetPlayerDataBool();
            }
            remove => HookHandler._afterGetPlayerDataBool -= value;
        }

        public static event Delegates.GetPlayerDataInt_AfterArgs GetPlayerDataInt
        {
            add
            {
                HookHandler._afterGetPlayerDataInt += value;
                HookHandler.HookGetPlayerDataInt();
            }
            remove => HookHandler._afterGetPlayerDataInt -= value;
        }

        public static event Delegates.GetPlayerDataFloat_AfterArgs GetPlayerDataFloat
        {
            add
            {
                HookHandler._afterGetPlayerDataFloat += value;
                HookHandler.HookGetPlayerDataFloat();
            }
            remove => HookHandler._afterGetPlayerDataFloat -= value;
        }

        public static event Delegates.GetPlayerDataString_AfterArgs GetPlayerDataString
        {
            add
            {
                HookHandler._afterGetPlayerDataString += value;
                HookHandler.HookGetPlayerDataString();
            }
            remove => HookHandler._afterGetPlayerDataString -= value;
        }

        public static event Delegates.SetPlayerDataVector3_AfterArgs SetPlayerDataVector3
        {
            add
            {
                HookHandler._afterSetPlayerDataVector3 += value;
                HookHandler.HookSetPlayerDataVector3();
            }
            remove => HookHandler._afterSetPlayerDataVector3 -= value;
        }

        public static event Delegates.GetPlayerDataVector3_AfterArgs GetPlayerDataVector3
        {
            add
            {
                HookHandler._afterGetPlayerDataVector3 += value;
                HookHandler.HookGetPlayerDataVector3();
            }
            remove => HookHandler._afterGetPlayerDataVector3 -= value;
        }

        public static event Delegates.EquipCharm_AfterArgs EquipCharm
        {
            add
            {
                HookHandler._afterEquipCharm += value;
                HookHandler.HookEquipCharm();
            }
            remove => HookHandler._afterEquipCharm -= value;
        }

        public static event Delegates.UnequipCharm_AfterArgs UnequipCharm
        {
            add
            {
                HookHandler._afterUnequipCharm += value;
                HookHandler.HookUnequipCharm();
            }
            remove => HookHandler._afterUnequipCharm -= value;
        }

        public static event Delegates.RefreshOvercharm_AfterArgs RefreshOvercharm
        {
            add
            {
                HookHandler._afterRefreshOvercharm += value;
                HookHandler.HookRefreshOvercharm();
            }
            remove => HookHandler._afterRefreshOvercharm -= value;
        }

        public static event Delegates.UpdateBlueHealth_AfterArgs UpdateBlueHealth
        {
            add
            {
                HookHandler._afterUpdateBlueHealth += value;
                HookHandler.HookUpdateBlueHealth();
            }
            remove => HookHandler._afterUpdateBlueHealth -= value;
        }

        public static event Delegates.SetCurrentMapZoneAsRespawn_AfterArgs SetCurrentMapZoneAsRespawn
        {
            add
            {
                HookHandler._afterSetCurrentMapZoneAsRespawn += value;
                HookHandler.HookSetCurrentMapZoneAsRespawn();
            }
            remove => HookHandler._afterSetCurrentMapZoneAsRespawn -= value;
        }

        public static event Delegates.SetMapZoneToSpecific_AfterArgs SetMapZoneToSpecific
        {
            add
            {
                HookHandler._afterSetMapZoneToSpecific += value;
                HookHandler.HookSetMapZoneToSpecific();
            }
            remove => HookHandler._afterSetMapZoneToSpecific -= value;
        }

        public static event Delegates.StartSoulLimiter_AfterArgs StartSoulLimiter
        {
            add
            {
                HookHandler._afterStartSoulLimiter += value;
                HookHandler.HookStartSoulLimiter();
            }
            remove => HookHandler._afterStartSoulLimiter -= value;
        }

        public static event Delegates.EndSoulLimiter_AfterArgs EndSoulLimiter
        {
            add
            {
                HookHandler._afterEndSoulLimiter += value;
                HookHandler.HookEndSoulLimiter();
            }
            remove => HookHandler._afterEndSoulLimiter -= value;
        }

        public static event Delegates.UpdateGameMap_AfterArgs UpdateGameMap
        {
            add
            {
                HookHandler._afterUpdateGameMap += value;
                HookHandler.HookUpdateGameMap();
            }
            remove => HookHandler._afterUpdateGameMap -= value;
        }

        public static event Delegates.CheckAllMaps_AfterArgs CheckAllMaps
        {
            add
            {
                HookHandler._afterCheckAllMaps += value;
                HookHandler.HookCheckAllMaps();
            }
            remove => HookHandler._afterCheckAllMaps -= value;
        }

        public static event Delegates.AddToScenesVisited_AfterArgs AddToScenesVisited
        {
            add
            {
                HookHandler._afterAddToScenesVisited += value;
                HookHandler.HookAddToScenesVisited();
            }
            remove => HookHandler._afterAddToScenesVisited -= value;
        }

        public static event Delegates.GetIsSceneVisited_AfterArgs GetIsSceneVisited
        {
            add
            {
                HookHandler._afterGetIsSceneVisited += value;
                HookHandler.HookGetIsSceneVisited();
            }
            remove => HookHandler._afterGetIsSceneVisited -= value;
        }

        public static event Delegates.AddToBenchList_AfterArgs AddToBenchList
        {
            add
            {
                HookHandler._afterAddToBenchList += value;
                HookHandler.HookAddToBenchList();
            }
            remove => HookHandler._afterAddToBenchList -= value;
        }

        public static event Delegates.AddToGrubList_AfterArgs AddToGrubList
        {
            add
            {
                HookHandler._afterAddToGrubList += value;
                HookHandler.HookAddToGrubList();
            }
            remove => HookHandler._afterAddToGrubList -= value;
        }

        public static event Delegates.AddToFlameList_AfterArgs AddToFlameList
        {
            add
            {
                HookHandler._afterAddToFlameList += value;
                HookHandler.HookAddToFlameList();
            }
            remove => HookHandler._afterAddToFlameList -= value;
        }

        public static event Delegates.AddToCocoonList_AfterArgs AddToCocoonList
        {
            add
            {
                HookHandler._afterAddToCocoonList += value;
                HookHandler.HookAddToCocoonList();
            }
            remove => HookHandler._afterAddToCocoonList -= value;
        }

        public static event Delegates.AddToDreamPlantList_AfterArgs AddToDreamPlantList
        {
            add
            {
                HookHandler._afterAddToDreamPlantList += value;
                HookHandler.HookAddToDreamPlantList();
            }
            remove => HookHandler._afterAddToDreamPlantList -= value;
        }

        public static event Delegates.AddToDreamPlantCList_AfterArgs AddToDreamPlantCList
        {
            add
            {
                HookHandler._afterAddToDreamPlantCList += value;
                HookHandler.HookAddToDreamPlantCList();
            }
            remove => HookHandler._afterAddToDreamPlantCList -= value;
        }

        public static event Delegates.CountGameCompletion_AfterArgs CountGameCompletion
        {
            add
            {
                HookHandler._afterCountGameCompletion += value;
                HookHandler.HookCountGameCompletion();
            }
            remove => HookHandler._afterCountGameCompletion -= value;
        }

        public static event Delegates.CountCharms_AfterArgs CountCharms
        {
            add
            {
                HookHandler._afterCountCharms += value;
                HookHandler.HookCountCharms();
            }
            remove => HookHandler._afterCountCharms -= value;
        }

        public static event Delegates.CountJournalEntries_AfterArgs CountJournalEntries
        {
            add
            {
                HookHandler._afterCountJournalEntries += value;
                HookHandler.HookCountJournalEntries();
            }
            remove => HookHandler._afterCountJournalEntries -= value;
        }

        public static event Delegates.ActivateTestingCheats_AfterArgs ActivateTestingCheats
        {
            add
            {
                HookHandler._afterActivateTestingCheats += value;
                HookHandler.HookActivateTestingCheats();
            }
            remove => HookHandler._afterActivateTestingCheats -= value;
        }

        public static event Delegates.GetAllPowerups_AfterArgs GetAllPowerups
        {
            add
            {
                HookHandler._afterGetAllPowerups += value;
                HookHandler.HookGetAllPowerups();
            }
            remove => HookHandler._afterGetAllPowerups -= value;
        }

        public static event Delegates.StoryRecord_death_AfterArgs StoryRecord_death
        {
            add
            {
                HookHandler._afterStoryRecord_death += value;
                HookHandler.HookStoryRecord_death();
            }
            remove => HookHandler._afterStoryRecord_death -= value;
        }

        public static event Delegates.StoryRecord_rescueGrub_AfterArgs StoryRecord_rescueGrub
        {
            add
            {
                HookHandler._afterStoryRecord_rescueGrub += value;
                HookHandler.HookStoryRecord_rescueGrub();
            }
            remove => HookHandler._afterStoryRecord_rescueGrub -= value;
        }

        public static event Delegates.StoryRecord_defeatedShade_AfterArgs StoryRecord_defeatedShade
        {
            add
            {
                HookHandler._afterStoryRecord_defeatedShade += value;
                HookHandler.HookStoryRecord_defeatedShade();
            }
            remove => HookHandler._afterStoryRecord_defeatedShade -= value;
        }

        public static event Delegates.StoryRecord_discoveredArea_AfterArgs StoryRecord_discoveredArea
        {
            add
            {
                HookHandler._afterStoryRecord_discoveredArea += value;
                HookHandler.HookStoryRecord_discoveredArea();
            }
            remove => HookHandler._afterStoryRecord_discoveredArea -= value;
        }

        public static event Delegates.StoryRecord_travelledToArea_AfterArgs StoryRecord_travelledToArea
        {
            add
            {
                HookHandler._afterStoryRecord_travelledToArea += value;
                HookHandler.HookStoryRecord_travelledToArea();
            }
            remove => HookHandler._afterStoryRecord_travelledToArea -= value;
        }

        public static event Delegates.StoryRecord_bankDeposit_AfterArgs StoryRecord_bankDeposit
        {
            add
            {
                HookHandler._afterStoryRecord_bankDeposit += value;
                HookHandler.HookStoryRecord_bankDeposit();
            }
            remove => HookHandler._afterStoryRecord_bankDeposit -= value;
        }

        public static event Delegates.StoryRecord_bankWithdraw_AfterArgs StoryRecord_bankWithdraw
        {
            add
            {
                HookHandler._afterStoryRecord_bankWithdraw += value;
                HookHandler.HookStoryRecord_bankWithdraw();
            }
            remove => HookHandler._afterStoryRecord_bankWithdraw -= value;
        }

        public static event Delegates.StoryRecord_boughtCorniferMap_AfterArgs StoryRecord_boughtCorniferMap
        {
            add
            {
                HookHandler._afterStoryRecord_boughtCorniferMap += value;
                HookHandler.HookStoryRecord_boughtCorniferMap();
            }
            remove => HookHandler._afterStoryRecord_boughtCorniferMap -= value;
        }

        public static event Delegates.StoryRecord_visited_AfterArgs StoryRecord_visited
        {
            add
            {
                HookHandler._afterStoryRecord_visited += value;
                HookHandler.HookStoryRecord_visited();
            }
            remove => HookHandler._afterStoryRecord_visited -= value;
        }

        public static event Delegates.StoryRecord_defeated_AfterArgs StoryRecord_defeated
        {
            add
            {
                HookHandler._afterStoryRecord_defeated += value;
                HookHandler.HookStoryRecord_defeated();
            }
            remove => HookHandler._afterStoryRecord_defeated -= value;
        }

        public static event Delegates.StoryRecord_jiji_AfterArgs StoryRecord_jiji
        {
            add
            {
                HookHandler._afterStoryRecord_jiji += value;
                HookHandler.HookStoryRecord_jiji();
            }
            remove => HookHandler._afterStoryRecord_jiji -= value;
        }

        public static event Delegates.StoryRecord_rodeStag_AfterArgs StoryRecord_rodeStag
        {
            add
            {
                HookHandler._afterStoryRecord_rodeStag += value;
                HookHandler.HookStoryRecord_rodeStag();
            }
            remove => HookHandler._afterStoryRecord_rodeStag -= value;
        }

        public static event Delegates.StoryRecord_acquired_AfterArgs StoryRecord_acquired
        {
            add
            {
                HookHandler._afterStoryRecord_acquired += value;
                HookHandler.HookStoryRecord_acquired();
            }
            remove => HookHandler._afterStoryRecord_acquired -= value;
        }

        public static event Delegates.StoryRecord_bought_AfterArgs StoryRecord_bought
        {
            add
            {
                HookHandler._afterStoryRecord_bought += value;
                HookHandler.HookStoryRecord_bought();
            }
            remove => HookHandler._afterStoryRecord_bought -= value;
        }

        public static event Delegates.StoryRecord_quit_AfterArgs StoryRecord_quit
        {
            add
            {
                HookHandler._afterStoryRecord_quit += value;
                HookHandler.HookStoryRecord_quit();
            }
            remove => HookHandler._afterStoryRecord_quit -= value;
        }

        public static event Delegates.StoryRecord_rest_AfterArgs StoryRecord_rest
        {
            add
            {
                HookHandler._afterStoryRecord_rest += value;
                HookHandler.HookStoryRecord_rest();
            }
            remove => HookHandler._afterStoryRecord_rest -= value;
        }

        public static event Delegates.StoryRecord_upgradeNail_AfterArgs StoryRecord_upgradeNail
        {
            add
            {
                HookHandler._afterStoryRecord_upgradeNail += value;
                HookHandler.HookStoryRecord_upgradeNail();
            }
            remove => HookHandler._afterStoryRecord_upgradeNail -= value;
        }

        public static event Delegates.StoryRecord_heartPiece_AfterArgs StoryRecord_heartPiece
        {
            add
            {
                HookHandler._afterStoryRecord_heartPiece += value;
                HookHandler.HookStoryRecord_heartPiece();
            }
            remove => HookHandler._afterStoryRecord_heartPiece -= value;
        }

        public static event Delegates.StoryRecord_maxHealthUp_AfterArgs StoryRecord_maxHealthUp
        {
            add
            {
                HookHandler._afterStoryRecord_maxHealthUp += value;
                HookHandler.HookStoryRecord_maxHealthUp();
            }
            remove => HookHandler._afterStoryRecord_maxHealthUp -= value;
        }

        public static event Delegates.StoryRecord_soulPiece_AfterArgs StoryRecord_soulPiece
        {
            add
            {
                HookHandler._afterStoryRecord_soulPiece += value;
                HookHandler.HookStoryRecord_soulPiece();
            }
            remove => HookHandler._afterStoryRecord_soulPiece -= value;
        }

        public static event Delegates.StoryRecord_maxSoulUp_AfterArgs StoryRecord_maxSoulUp
        {
            add
            {
                HookHandler._afterStoryRecord_maxSoulUp += value;
                HookHandler.HookStoryRecord_maxSoulUp();
            }
            remove => HookHandler._afterStoryRecord_maxSoulUp -= value;
        }

        public static event Delegates.StoryRecord_charmsChanged_AfterArgs StoryRecord_charmsChanged
        {
            add
            {
                HookHandler._afterStoryRecord_charmsChanged += value;
                HookHandler.HookStoryRecord_charmsChanged();
            }
            remove => HookHandler._afterStoryRecord_charmsChanged -= value;
        }

        public static event Delegates.StoryRecord_charmEquipped_AfterArgs StoryRecord_charmEquipped
        {
            add
            {
                HookHandler._afterStoryRecord_charmEquipped += value;
                HookHandler.HookStoryRecord_charmEquipped();
            }
            remove => HookHandler._afterStoryRecord_charmEquipped -= value;
        }

        public static event Delegates.StoryRecord_start_AfterArgs StoryRecord_start
        {
            add
            {
                HookHandler._afterStoryRecord_start += value;
                HookHandler.HookStoryRecord_start();
            }
            remove => HookHandler._afterStoryRecord_start -= value;
        }

        public static event Delegates.AwardAchievement_AfterArgs AwardAchievement
        {
            add
            {
                HookHandler._afterAwardAchievement += value;
                HookHandler.HookAwardAchievement();
            }
            remove => HookHandler._afterAwardAchievement -= value;
        }

        public static event Delegates.QueueAchievement_AfterArgs QueueAchievement
        {
            add
            {
                HookHandler._afterQueueAchievement += value;
                HookHandler.HookQueueAchievement();
            }
            remove => HookHandler._afterQueueAchievement -= value;
        }

        public static event Delegates.AwardQueuedAchievements_AfterArgs AwardQueuedAchievements
        {
            add
            {
                HookHandler._afterAwardQueuedAchievements += value;
                HookHandler.HookAwardQueuedAchievements();
            }
            remove => HookHandler._afterAwardQueuedAchievements -= value;
        }

        public static event Delegates.IsAchievementAwarded_AfterArgs IsAchievementAwarded
        {
            add
            {
                HookHandler._afterIsAchievementAwarded += value;
                HookHandler.HookIsAchievementAwarded();
            }
            remove => HookHandler._afterIsAchievementAwarded -= value;
        }

        public static event Delegates.ClearAllAchievements_AfterArgs ClearAllAchievements
        {
            add
            {
                HookHandler._afterClearAllAchievements += value;
                HookHandler.HookClearAllAchievements();
            }
            remove => HookHandler._afterClearAllAchievements -= value;
        }

        public static event Delegates.CheckCharmAchievements_AfterArgs CheckCharmAchievements
        {
            add
            {
                HookHandler._afterCheckCharmAchievements += value;
                HookHandler.HookCheckCharmAchievements();
            }
            remove => HookHandler._afterCheckCharmAchievements -= value;
        }

        public static event Delegates.CheckGrubAchievements_AfterArgs CheckGrubAchievements
        {
            add
            {
                HookHandler._afterCheckGrubAchievements += value;
                HookHandler.HookCheckGrubAchievements();
            }
            remove => HookHandler._afterCheckGrubAchievements -= value;
        }

        public static event Delegates.CheckStagStationAchievements_AfterArgs CheckStagStationAchievements
        {
            add
            {
                HookHandler._afterCheckStagStationAchievements += value;
                HookHandler.HookCheckStagStationAchievements();
            }
            remove => HookHandler._afterCheckStagStationAchievements -= value;
        }

        public static event Delegates.CheckMapAchievement_AfterArgs CheckMapAchievement
        {
            add
            {
                HookHandler._afterCheckMapAchievement += value;
                HookHandler.HookCheckMapAchievement();
            }
            remove => HookHandler._afterCheckMapAchievement -= value;
        }

        public static event Delegates.CheckJournalAchievements_AfterArgs CheckJournalAchievements
        {
            add
            {
                HookHandler._afterCheckJournalAchievements += value;
                HookHandler.HookCheckJournalAchievements();
            }
            remove => HookHandler._afterCheckJournalAchievements -= value;
        }

        public static event Delegates.CheckAllAchievements_AfterArgs CheckAllAchievements
        {
            add
            {
                HookHandler._afterCheckAllAchievements += value;
                HookHandler.HookCheckAllAchievements();
            }
            remove => HookHandler._afterCheckAllAchievements -= value;
        }

        public static event Delegates.CheckBanishmentAchievement_AfterArgs CheckBanishmentAchievement
        {
            add
            {
                HookHandler._afterCheckBanishmentAchievement += value;
                HookHandler.HookCheckBanishmentAchievement();
            }
            remove => HookHandler._afterCheckBanishmentAchievement -= value;
        }

        public static event Delegates.SetStatusRecordInt_AfterArgs SetStatusRecordInt
        {
            add
            {
                HookHandler._afterSetStatusRecordInt += value;
                HookHandler.HookSetStatusRecordInt();
            }
            remove => HookHandler._afterSetStatusRecordInt -= value;
        }

        public static event Delegates.GetStatusRecordInt_AfterArgs GetStatusRecordInt
        {
            add
            {
                HookHandler._afterGetStatusRecordInt += value;
                HookHandler.HookGetStatusRecordInt();
            }
            remove => HookHandler._afterGetStatusRecordInt -= value;
        }

        public static event Delegates.ResetStatusRecords_AfterArgs ResetStatusRecords
        {
            add
            {
                HookHandler._afterResetStatusRecords += value;
                HookHandler.HookResetStatusRecords();
            }
            remove => HookHandler._afterResetStatusRecords -= value;
        }

        public static event Delegates.SaveStatusRecords_AfterArgs SaveStatusRecords
        {
            add
            {
                HookHandler._afterSaveStatusRecords += value;
                HookHandler.HookSaveStatusRecords();
            }
            remove => HookHandler._afterSaveStatusRecords -= value;
        }

        public static event Delegates.SetState_AfterArgs SetState
        {
            add
            {
                HookHandler._afterSetState += value;
                HookHandler.HookSetState();
            }
            remove => HookHandler._afterSetState -= value;
        }

        public static event Delegates.LoadScene_AfterArgs LoadScene
        {
            add
            {
                HookHandler._afterLoadScene += value;
                HookHandler.HookLoadScene();
            }
            remove => HookHandler._afterLoadScene -= value;
        }

        public static event Delegates.OnNextLevelReady_AfterArgs OnNextLevelReady
        {
            add
            {
                HookHandler._afterOnNextLevelReady += value;
                HookHandler.HookOnNextLevelReady();
            }
            remove => HookHandler._afterOnNextLevelReady -= value;
        }

        public static event Delegates.OnWillActivateFirstLevel_AfterArgs OnWillActivateFirstLevel
        {
            add
            {
                HookHandler._afterOnWillActivateFirstLevel += value;
                HookHandler.HookOnWillActivateFirstLevel();
            }
            remove => HookHandler._afterOnWillActivateFirstLevel -= value;
        }

        public static event Delegates.LoadPermadeathUnlockScene_AfterArgs LoadPermadeathUnlockScene
        {
            add
            {
                HookHandler._afterLoadPermadeathUnlockScene += value;
                HookHandler.HookLoadPermadeathUnlockScene();
            }
            remove => HookHandler._afterLoadPermadeathUnlockScene -= value;
        }

        public static event Delegates.LoadMrMushromScene_AfterArgs LoadMrMushromScene
        {
            add
            {
                HookHandler._afterLoadMrMushromScene += value;
                HookHandler.HookLoadMrMushromScene();
            }
            remove => HookHandler._afterLoadMrMushromScene -= value;
        }

        public static event Delegates.LoadOpeningCinematic_AfterArgs LoadOpeningCinematic
        {
            add
            {
                HookHandler._afterLoadOpeningCinematic += value;
                HookHandler.HookLoadOpeningCinematic();
            }
            remove => HookHandler._afterLoadOpeningCinematic -= value;
        }

        public static event Delegates.PositionHeroAtSceneEntrance_AfterArgs PositionHeroAtSceneEntrance
        {
            add
            {
                HookHandler._afterPositionHeroAtSceneEntrance += value;
                HookHandler.HookPositionHeroAtSceneEntrance();
            }
            remove => HookHandler._afterPositionHeroAtSceneEntrance -= value;
        }

        public static event Delegates.FindEntryPoint_AfterArgs FindEntryPoint
        {
            add
            {
                HookHandler._afterFindEntryPoint += value;
                HookHandler.HookFindEntryPoint();
            }
            remove => HookHandler._afterFindEntryPoint -= value;
        }

        public static event Delegates.FindTransitionPoint_AfterArgs FindTransitionPoint
        {
            add
            {
                HookHandler._afterFindTransitionPoint += value;
                HookHandler.HookFindTransitionPoint();
            }
            remove => HookHandler._afterFindTransitionPoint -= value;
        }

        public static event Delegates.EnterHero_AfterArgs EnterHero
        {
            add
            {
                HookHandler._afterEnterHero += value;
                HookHandler.HookEnterHero();
            }
            remove => HookHandler._afterEnterHero -= value;
        }

        public static event Delegates.FinishedEnteringScene_AfterArgs FinishedEnteringScene
        {
            add
            {
                HookHandler._afterFinishedEnteringScene += value;
                HookHandler.HookFinishedEnteringScene();
            }
            remove => HookHandler._afterFinishedEnteringScene -= value;
        }

        public static event Delegates.SetupGameRefs_AfterArgs SetupGameRefs
        {
            add
            {
                HookHandler._afterSetupGameRefs += value;
                HookHandler.HookSetupGameRefs();
            }
            remove => HookHandler._afterSetupGameRefs -= value;
        }

        public static event Delegates.SetupSceneRefs_AfterArgs SetupSceneRefs
        {
            add
            {
                HookHandler._afterSetupSceneRefs += value;
                HookHandler.HookSetupSceneRefs();
            }
            remove => HookHandler._afterSetupSceneRefs -= value;
        }

        public static event Delegates.SetupHeroRefs_AfterArgs SetupHeroRefs
        {
            add
            {
                HookHandler._afterSetupHeroRefs += value;
                HookHandler.HookSetupHeroRefs();
            }
            remove => HookHandler._afterSetupHeroRefs -= value;
        }

        public static event Delegates.BeginScene_AfterArgs BeginScene
        {
            add
            {
                HookHandler._afterBeginScene += value;
                HookHandler.HookBeginScene();
            }
            remove => HookHandler._afterBeginScene -= value;
        }

        public static event Delegates.UpdateUIStateFromGameState_AfterArgs UpdateUIStateFromGameState
        {
            add
            {
                HookHandler._afterUpdateUIStateFromGameState += value;
                HookHandler.HookUpdateUIStateFromGameState();
            }
            remove => HookHandler._afterUpdateUIStateFromGameState -= value;
        }

        public static event Delegates.SkipCutscene_AfterArgs SkipCutscene
        {
            add
            {
                HookHandler._afterSkipCutscene += value;
                HookHandler.HookSkipCutscene();
            }
            remove => HookHandler._afterSkipCutscene -= value;
        }

        public static event Delegates.NoLongerFirstGame_AfterArgs NoLongerFirstGame
        {
            add
            {
                HookHandler._afterNoLongerFirstGame += value;
                HookHandler.HookNoLongerFirstGame();
            }
            remove => HookHandler._afterNoLongerFirstGame -= value;
        }

        public static event Delegates.SetupStatusModifiers_AfterArgs SetupStatusModifiers
        {
            add
            {
                HookHandler._afterSetupStatusModifiers += value;
                HookHandler.HookSetupStatusModifiers();
            }
            remove => HookHandler._afterSetupStatusModifiers -= value;
        }

        public static event Delegates.MatchBackerCreditsSetting_AfterArgs MatchBackerCreditsSetting
        {
            add
            {
                HookHandler._afterMatchBackerCreditsSetting += value;
                HookHandler.HookMatchBackerCreditsSetting();
            }
            remove => HookHandler._afterMatchBackerCreditsSetting -= value;
        }

        public static event Delegates.RefreshLocalization_AfterArgs RefreshLocalization
        {
            add
            {
                HookHandler._afterRefreshLocalization += value;
                HookHandler.HookRefreshLocalization();
            }
            remove => HookHandler._afterRefreshLocalization -= value;
        }

        public static event Delegates.RefreshParticleSystems_AfterArgs RefreshParticleSystems
        {
            add
            {
                HookHandler._afterRefreshParticleSystems += value;
                HookHandler.HookRefreshParticleSystems();
            }
            remove => HookHandler._afterRefreshParticleSystems -= value;
        }

        public static event Delegates.ApplyNativeInput_AfterArgs ApplyNativeInput
        {
            add
            {
                HookHandler._afterApplyNativeInput += value;
                HookHandler.HookApplyNativeInput();
            }
            remove => HookHandler._afterApplyNativeInput -= value;
        }

        public static event Delegates.EnablePermadeathMode_AfterArgs EnablePermadeathMode
        {
            add
            {
                HookHandler._afterEnablePermadeathMode += value;
                HookHandler.HookEnablePermadeathMode();
            }
            remove => HookHandler._afterEnablePermadeathMode -= value;
        }

        public static event Delegates.GetCurrentMapZone_AfterArgs GetCurrentMapZone
        {
            add
            {
                HookHandler._afterGetCurrentMapZone += value;
                HookHandler.HookGetCurrentMapZone();
            }
            remove => HookHandler._afterGetCurrentMapZone -= value;
        }

        public static event Delegates.GetSceneWidth_AfterArgs GetSceneWidth
        {
            add
            {
                HookHandler._afterGetSceneWidth += value;
                HookHandler.HookGetSceneWidth();
            }
            remove => HookHandler._afterGetSceneWidth -= value;
        }

        public static event Delegates.GetSceneHeight_AfterArgs GetSceneHeight
        {
            add
            {
                HookHandler._afterGetSceneHeight += value;
                HookHandler.HookGetSceneHeight();
            }
            remove => HookHandler._afterGetSceneHeight -= value;
        }

        public static event Delegates.GetSceneManager_AfterArgs GetSceneManager
        {
            add
            {
                HookHandler._afterGetSceneManager += value;
                HookHandler.HookGetSceneManager();
            }
            remove => HookHandler._afterGetSceneManager -= value;
        }

        public static event Delegates.GetFormattedMapZoneString_AfterArgs GetFormattedMapZoneString
        {
            add
            {
                HookHandler._afterGetFormattedMapZoneString += value;
                HookHandler.HookGetFormattedMapZoneString();
            }
            remove => HookHandler._afterGetFormattedMapZoneString -= value;
        }

        public static event Delegates.UpdateSceneName_AfterArgs UpdateSceneName
        {
            add
            {
                HookHandler._afterUpdateSceneName += value;
                HookHandler.HookUpdateSceneName();
            }
            remove => HookHandler._afterUpdateSceneName -= value;
        }

        public static event Delegates.GetBaseSceneName_AfterArgs GetBaseSceneName
        {
            add
            {
                HookHandler._afterGetBaseSceneName += value;
                HookHandler.HookGetBaseSceneName();
            }
            remove => HookHandler._afterGetBaseSceneName -= value;
        }

        public static event Delegates.GetSceneNameString_AfterArgs GetSceneNameString
        {
            add
            {
                HookHandler._afterGetSceneNameString += value;
                HookHandler.HookGetSceneNameString();
            }
            remove => HookHandler._afterGetSceneNameString -= value;
        }

        public static event Delegates.GetTileMap_AfterArgs GetTileMap
        {
            add
            {
                HookHandler._afterGetTileMap += value;
                HookHandler.HookGetTileMap();
            }
            remove => HookHandler._afterGetTileMap -= value;
        }

        public static event Delegates.RefreshTilemapInfo_AfterArgs RefreshTilemapInfo
        {
            add
            {
                HookHandler._afterRefreshTilemapInfo += value;
                HookHandler.HookRefreshTilemapInfo();
            }
            remove => HookHandler._afterRefreshTilemapInfo -= value;
        }

        public static event Delegates.SaveLevelState_AfterArgs SaveLevelState
        {
            add
            {
                HookHandler._afterSaveLevelState += value;
                HookHandler.HookSaveLevelState();
            }
            remove => HookHandler._afterSaveLevelState -= value;
        }

        public static event Delegates.ResetSemiPersistentItems_AfterArgs ResetSemiPersistentItems
        {
            add
            {
                HookHandler._afterResetSemiPersistentItems += value;
                HookHandler.HookResetSemiPersistentItems();
            }
            remove => HookHandler._afterResetSemiPersistentItems -= value;
        }

        public static event Delegates.IsMenuScene_AfterArgs IsMenuScene
        {
            add
            {
                HookHandler._afterIsMenuScene += value;
                HookHandler.HookIsMenuScene();
            }
            remove => HookHandler._afterIsMenuScene -= value;
        }

        public static event Delegates.IsTitleScreenScene_AfterArgs IsTitleScreenScene
        {
            add
            {
                HookHandler._afterIsTitleScreenScene += value;
                HookHandler.HookIsTitleScreenScene();
            }
            remove => HookHandler._afterIsTitleScreenScene -= value;
        }

        public static event Delegates.IsGameplayScene_AfterArgs IsGameplayScene
        {
            add
            {
                HookHandler._afterIsGameplayScene += value;
                HookHandler.HookIsGameplayScene();
            }
            remove => HookHandler._afterIsGameplayScene -= value;
        }

        public static event Delegates.IsNonGameplayScene_AfterArgs IsNonGameplayScene
        {
            add
            {
                HookHandler._afterIsNonGameplayScene += value;
                HookHandler.HookIsNonGameplayScene();
            }
            remove => HookHandler._afterIsNonGameplayScene -= value;
        }

        public static event Delegates.IsCinematicScene_AfterArgs IsCinematicScene
        {
            add
            {
                HookHandler._afterIsCinematicScene += value;
                HookHandler.HookIsCinematicScene();
            }
            remove => HookHandler._afterIsCinematicScene -= value;
        }

        public static event Delegates.IsStagTravelScene_AfterArgs IsStagTravelScene
        {
            add
            {
                HookHandler._afterIsStagTravelScene += value;
                HookHandler.HookIsStagTravelScene();
            }
            remove => HookHandler._afterIsStagTravelScene -= value;
        }

        public static event Delegates.IsBetaEndScene_AfterArgs IsBetaEndScene
        {
            add
            {
                HookHandler._afterIsBetaEndScene += value;
                HookHandler.HookIsBetaEndScene();
            }
            remove => HookHandler._afterIsBetaEndScene -= value;
        }

        public static event Delegates.IsTutorialScene_AfterArgs IsTutorialScene
        {
            add
            {
                HookHandler._afterIsTutorialScene += value;
                HookHandler.HookIsTutorialScene();
            }
            remove => HookHandler._afterIsTutorialScene -= value;
        }

        public static event Delegates.IsTestScene_AfterArgs IsTestScene
        {
            add
            {
                HookHandler._afterIsTestScene += value;
                HookHandler.HookIsTestScene();
            }
            remove => HookHandler._afterIsTestScene -= value;
        }

        public static event Delegates.IsBossDoorScene_AfterArgs IsBossDoorScene
        {
            add
            {
                HookHandler._afterIsBossDoorScene += value;
                HookHandler.HookIsBossDoorScene();
            }
            remove => HookHandler._afterIsBossDoorScene -= value;
        }

        public static event Delegates.ShouldKeepHUDCameraActive_AfterArgs ShouldKeepHUDCameraActive
        {
            add
            {
                HookHandler._afterShouldKeepHUDCameraActive += value;
                HookHandler.HookShouldKeepHUDCameraActive();
            }
            remove => HookHandler._afterShouldKeepHUDCameraActive -= value;
        }

        public static event Delegates.GetSceneZoneName_AfterArgs GetSceneZoneName
        {
            add
            {
                HookHandler._afterGetSceneZoneName += value;
                HookHandler.HookGetSceneZoneName();
            }
            remove => HookHandler._afterGetSceneZoneName -= value;
        }

        public static event Delegates.CountBits_AfterArgs CountBits
        {
            add
            {
                HookHandler._afterCountBits += value;
                HookHandler.HookCountBits();
            }
            remove => HookHandler._afterCountBits -= value;
        }

        public static event Delegates.IsUnloadAssetsRequired_AfterArgs IsUnloadAssetsRequired
        {
            add
            {
                HookHandler._afterIsUnloadAssetsRequired += value;
                HookHandler.HookIsUnloadAssetsRequired();
            }
            remove => HookHandler._afterIsUnloadAssetsRequired -= value;
        }

        public static event Delegates.HasSaveFile_AfterArgs HasSaveFile
        {
            add
            {
                HookHandler._afterHasSaveFile += value;
                HookHandler.HookHasSaveFile();
            }
            remove => HookHandler._afterHasSaveFile -= value;
        }

        public static event Delegates.SaveGame_AfterArgs SaveGame
        {
            add
            {
                HookHandler._afterSaveGame += value;
                HookHandler.HookSaveGame();
            }
            remove => HookHandler._afterSaveGame -= value;
        }

        public static event Delegates.ShowSaveIcon_AfterArgs ShowSaveIcon
        {
            add
            {
                HookHandler._afterShowSaveIcon += value;
                HookHandler.HookShowSaveIcon();
            }
            remove => HookHandler._afterShowSaveIcon -= value;
        }

        public static event Delegates.HideSaveIcon_AfterArgs HideSaveIcon
        {
            add
            {
                HookHandler._afterHideSaveIcon += value;
                HookHandler.HookHideSaveIcon();
            }
            remove => HookHandler._afterHideSaveIcon -= value;
        }

        public static event Delegates.SaveGame_Action_AfterArgs SaveGame_Action
        {
            add
            {
                HookHandler._afterSaveGame_Action += value;
                HookHandler.HookSaveGame_Action();
            }
            remove => HookHandler._afterSaveGame_Action -= value;
        }

        public static event Delegates.ResetGameTimer_AfterArgs ResetGameTimer
        {
            add
            {
                HookHandler._afterResetGameTimer += value;
                HookHandler.HookResetGameTimer();
            }
            remove => HookHandler._afterResetGameTimer -= value;
        }

        public static event Delegates.IncreaseGameTimer_AfterArgs IncreaseGameTimer
        {
            add
            {
                HookHandler._afterIncreaseGameTimer += value;
                HookHandler.HookIncreaseGameTimer();
            }
            remove => HookHandler._afterIncreaseGameTimer -= value;
        }

        public static event Delegates.SaveGame_int_Action_AfterArgs SaveGame_int_Action
        {
            add
            {
                HookHandler._afterSaveGame_int_Action += value;
                HookHandler.HookSaveGame_int_Action();
            }
            remove => HookHandler._afterSaveGame_int_Action -= value;
        }

        public static event Delegates.LoadGameFromUI_AfterArgs LoadGameFromUI
        {
            add
            {
                HookHandler._afterLoadGameFromUI += value;
                HookHandler.HookLoadGameFromUI();
            }
            remove => HookHandler._afterLoadGameFromUI -= value;
        }

        public static event Delegates.LoadGame_AfterArgs LoadGame
        {
            add
            {
                HookHandler._afterLoadGame += value;
                HookHandler.HookLoadGame();
            }
            remove => HookHandler._afterLoadGame -= value;
        }

        public static event Delegates.ClearSaveFile_AfterArgs ClearSaveFile
        {
            add
            {
                HookHandler._afterClearSaveFile += value;
                HookHandler.HookClearSaveFile();
            }
            remove => HookHandler._afterClearSaveFile -= value;
        }

        public static event Delegates.GetSaveStatsForSlot_AfterArgs GetSaveStatsForSlot
        {
            add
            {
                HookHandler._afterGetSaveStatsForSlot += value;
                HookHandler.HookGetSaveStatsForSlot();
            }
            remove => HookHandler._afterGetSaveStatsForSlot -= value;
        }

        public static event Delegates.SetTimeScale_float_AfterArgs SetTimeScale_float
        {
            add
            {
                HookHandler._afterSetTimeScale_float += value;
                HookHandler.HookSetTimeScale_float();
            }
            remove => HookHandler._afterSetTimeScale_float -= value;
        }

        public static event Delegates.FreezeMoment_int_AfterArgs FreezeMoment_int
        {
            add
            {
                HookHandler._afterFreezeMoment_int += value;
                HookHandler.HookFreezeMoment_int();
            }
            remove => HookHandler._afterFreezeMoment_int -= value;
        }

        public static event Delegates.EnsureSaveSlotSpace_AfterArgs EnsureSaveSlotSpace
        {
            add
            {
                HookHandler._afterEnsureSaveSlotSpace += value;
                HookHandler.HookEnsureSaveSlotSpace();
            }
            remove => HookHandler._afterEnsureSaveSlotSpace -= value;
        }

        public static event Delegates.StartNewGame_AfterArgs StartNewGame
        {
            add
            {
                HookHandler._afterStartNewGame += value;
                HookHandler.HookStartNewGame();
            }
            remove => HookHandler._afterStartNewGame -= value;
        }

        public static event Delegates.ContinueGame_AfterArgs ContinueGame
        {
            add
            {
                HookHandler._afterContinueGame += value;
                HookHandler.HookContinueGame();
            }
            remove => HookHandler._afterContinueGame -= value;
        }

        public static event Delegates.WillTerminateInBackground_AfterArgs WillTerminateInBackground
        {
            add
            {
                HookHandler._afterWillTerminateInBackground += value;
                HookHandler.HookWillTerminateInBackground();
            }
            remove => HookHandler._afterWillTerminateInBackground -= value;
        }

        public static event Delegates.OnDisengage_AfterArgs OnDisengage
        {
            add
            {
                HookHandler._afterOnDisengage += value;
                HookHandler.HookOnDisengage();
            }
            remove => HookHandler._afterOnDisengage -= value;
        }

        public static event Delegates.EmergencyReturnToMenu_AfterArgs EmergencyReturnToMenu
        {
            add
            {
                HookHandler._afterEmergencyReturnToMenu += value;
                HookHandler.HookEmergencyReturnToMenu();
            }
            remove => HookHandler._afterEmergencyReturnToMenu -= value;
        }

        public static event Delegates.LoadedBoss_AfterArgs LoadedBoss
        {
            add
            {
                HookHandler._afterLoadedBoss += value;
                HookHandler.HookLoadedBoss();
            }
            remove => HookHandler._afterLoadedBoss -= value;
        }

        public static event Delegates.DoDestroyPersonalPools_AfterArgs DoDestroyPersonalPools
        {
            add
            {
                HookHandler._afterDoDestroyPersonalPools += value;
                HookHandler.HookDoDestroyPersonalPools();
            }
            remove => HookHandler._afterDoDestroyPersonalPools -= value;
        }

        public static event Delegates.GetImplicitCinematicVolume_AfterArgs GetImplicitCinematicVolume
        {
            add
            {
                HookHandler._afterGetImplicitCinematicVolume += value;
                HookHandler.HookGetImplicitCinematicVolume();
            }
            remove => HookHandler._afterGetImplicitCinematicVolume -= value;
        }

        public static event Delegates.orig_get_ui_AfterArgs orig_get_ui
        {
            add
            {
                HookHandler._afterorig_get_ui += value;
                HookHandler.Hookorig_get_ui();
            }
            remove => HookHandler._afterorig_get_ui -= value;
        }

        public static event Delegates.orig_set_ui_AfterArgs orig_set_ui
        {
            add
            {
                HookHandler._afterorig_set_ui += value;
                HookHandler.Hookorig_set_ui();
            }
            remove => HookHandler._afterorig_set_ui -= value;
        }

        public static event Delegates.orig_OnApplicationQuit_AfterArgs orig_OnApplicationQuit
        {
            add
            {
                HookHandler._afterorig_OnApplicationQuit += value;
                HookHandler.Hookorig_OnApplicationQuit();
            }
            remove => HookHandler._afterorig_OnApplicationQuit -= value;
        }

        public static event Delegates.orig_LoadScene_AfterArgs orig_LoadScene
        {
            add
            {
                HookHandler._afterorig_LoadScene += value;
                HookHandler.Hookorig_LoadScene();
            }
            remove => HookHandler._afterorig_LoadScene -= value;
        }

        public static event Delegates.orig_ClearSaveFile_AfterArgs orig_ClearSaveFile
        {
            add
            {
                HookHandler._afterorig_ClearSaveFile += value;
                HookHandler.Hookorig_ClearSaveFile();
            }
            remove => HookHandler._afterorig_ClearSaveFile -= value;
        }

        public static event Delegates.ModdedSavePath_AfterArgs ModdedSavePath
        {
            add
            {
                HookHandler._afterModdedSavePath += value;
                HookHandler.HookModdedSavePath();
            }
            remove => HookHandler._afterModdedSavePath -= value;
        }

        public static event Delegates.orig_SetupSceneRefs_AfterArgs orig_SetupSceneRefs
        {
            add
            {
                HookHandler._afterorig_SetupSceneRefs += value;
                HookHandler.Hookorig_SetupSceneRefs();
            }
            remove => HookHandler._afterorig_SetupSceneRefs -= value;
        }

        public static event Delegates.orig_OnWillActivateFirstLevel_AfterArgs orig_OnWillActivateFirstLevel
        {
            add
            {
                HookHandler._afterorig_OnWillActivateFirstLevel += value;
                HookHandler.Hookorig_OnWillActivateFirstLevel();
            }
            remove => HookHandler._afterorig_OnWillActivateFirstLevel -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_TimeSlowed_WithArgs get_TimeSlowed
        {
            add => HookEndpointManager.Add<Delegates.get_TimeSlowed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_TimeSlowed"), value);
            remove => HookEndpointManager.Remove<Delegates.get_TimeSlowed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_TimeSlowed"), value);
        }

        public static event Delegates.get_inputHandler_WithArgs get_inputHandler
        {
            add => HookEndpointManager.Add<Delegates.get_inputHandler_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_inputHandler"), value);
            remove => HookEndpointManager.Remove<Delegates.get_inputHandler_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_inputHandler"), value);
        }

        public static event Delegates.set_inputHandler_WithArgs set_inputHandler
        {
            add => HookEndpointManager.Add<Delegates.set_inputHandler_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_inputHandler"), value);
            remove => HookEndpointManager.Remove<Delegates.set_inputHandler_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_inputHandler"), value);
        }

        public static event Delegates.get_achievementHandler_WithArgs get_achievementHandler
        {
            add => HookEndpointManager.Add<Delegates.get_achievementHandler_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_achievementHandler"), value);
            remove => HookEndpointManager.Remove<Delegates.get_achievementHandler_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_achievementHandler"), value);
        }

        public static event Delegates.set_achievementHandler_WithArgs set_achievementHandler
        {
            add => HookEndpointManager.Add<Delegates.set_achievementHandler_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_achievementHandler"), value);
            remove => HookEndpointManager.Remove<Delegates.set_achievementHandler_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_achievementHandler"), value);
        }

        public static event Delegates.get_AudioManager_WithArgs get_AudioManager
        {
            add => HookEndpointManager.Add<Delegates.get_AudioManager_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_AudioManager"), value);
            remove => HookEndpointManager.Remove<Delegates.get_AudioManager_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_AudioManager"), value);
        }

        public static event Delegates.get_cameraCtrl_WithArgs get_cameraCtrl
        {
            add => HookEndpointManager.Add<Delegates.get_cameraCtrl_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_cameraCtrl"), value);
            remove => HookEndpointManager.Remove<Delegates.get_cameraCtrl_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_cameraCtrl"), value);
        }

        public static event Delegates.set_cameraCtrl_WithArgs set_cameraCtrl
        {
            add => HookEndpointManager.Add<Delegates.set_cameraCtrl_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_cameraCtrl"), value);
            remove => HookEndpointManager.Remove<Delegates.set_cameraCtrl_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_cameraCtrl"), value);
        }

        public static event Delegates.get_hero_ctrl_WithArgs get_hero_ctrl
        {
            add => HookEndpointManager.Add<Delegates.get_hero_ctrl_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_hero_ctrl"), value);
            remove => HookEndpointManager.Remove<Delegates.get_hero_ctrl_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_hero_ctrl"), value);
        }

        public static event Delegates.set_hero_ctrl_WithArgs set_hero_ctrl
        {
            add => HookEndpointManager.Add<Delegates.set_hero_ctrl_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_hero_ctrl"), value);
            remove => HookEndpointManager.Remove<Delegates.set_hero_ctrl_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_hero_ctrl"), value);
        }

        public static event Delegates.get_heroLight_WithArgs get_heroLight
        {
            add => HookEndpointManager.Add<Delegates.get_heroLight_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_heroLight"), value);
            remove => HookEndpointManager.Remove<Delegates.get_heroLight_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_heroLight"), value);
        }

        public static event Delegates.set_heroLight_WithArgs set_heroLight
        {
            add => HookEndpointManager.Add<Delegates.set_heroLight_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_heroLight"), value);
            remove => HookEndpointManager.Remove<Delegates.set_heroLight_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_heroLight"), value);
        }

        public static event Delegates.get_sm_WithArgs get_sm
        {
            add => HookEndpointManager.Add<Delegates.get_sm_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_sm"), value);
            remove => HookEndpointManager.Remove<Delegates.get_sm_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_sm"), value);
        }

        public static event Delegates.set_sm_WithArgs set_sm
        {
            add => HookEndpointManager.Add<Delegates.set_sm_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_sm"), value);
            remove => HookEndpointManager.Remove<Delegates.set_sm_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_sm"), value);
        }

        public static event Delegates.get_ui_WithArgs get_ui
        {
            add => HookEndpointManager.Add<Delegates.get_ui_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_ui"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ui_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_ui"), value);
        }

        public static event Delegates.set_ui_WithArgs set_ui
        {
            add => HookEndpointManager.Add<Delegates.set_ui_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_ui"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ui_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_ui"), value);
        }

        public static event Delegates.get_tilemap_WithArgs get_tilemap
        {
            add => HookEndpointManager.Add<Delegates.get_tilemap_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_tilemap"), value);
            remove => HookEndpointManager.Remove<Delegates.get_tilemap_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_tilemap"), value);
        }

        public static event Delegates.set_tilemap_WithArgs set_tilemap
        {
            add => HookEndpointManager.Add<Delegates.set_tilemap_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_tilemap"), value);
            remove => HookEndpointManager.Remove<Delegates.set_tilemap_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_tilemap"), value);
        }

        public static event Delegates.get_soulOrb_fsm_WithArgs get_soulOrb_fsm
        {
            add => HookEndpointManager.Add<Delegates.get_soulOrb_fsm_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_soulOrb_fsm"), value);
            remove => HookEndpointManager.Remove<Delegates.get_soulOrb_fsm_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_soulOrb_fsm"), value);
        }

        public static event Delegates.set_soulOrb_fsm_WithArgs set_soulOrb_fsm
        {
            add => HookEndpointManager.Add<Delegates.set_soulOrb_fsm_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_soulOrb_fsm"), value);
            remove => HookEndpointManager.Remove<Delegates.set_soulOrb_fsm_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_soulOrb_fsm"), value);
        }

        public static event Delegates.get_soulVessel_fsm_WithArgs get_soulVessel_fsm
        {
            add => HookEndpointManager.Add<Delegates.get_soulVessel_fsm_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_soulVessel_fsm"), value);
            remove => HookEndpointManager.Remove<Delegates.get_soulVessel_fsm_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_soulVessel_fsm"), value);
        }

        public static event Delegates.set_soulVessel_fsm_WithArgs set_soulVessel_fsm
        {
            add => HookEndpointManager.Add<Delegates.set_soulVessel_fsm_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_soulVessel_fsm"), value);
            remove => HookEndpointManager.Remove<Delegates.set_soulVessel_fsm_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_soulVessel_fsm"), value);
        }

        public static event Delegates.get_PlayTime_WithArgs get_PlayTime
        {
            add => HookEndpointManager.Add<Delegates.get_PlayTime_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_PlayTime"), value);
            remove => HookEndpointManager.Remove<Delegates.get_PlayTime_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_PlayTime"), value);
        }

        public static event Delegates.get_RespawningHero_WithArgs get_RespawningHero
        {
            add => HookEndpointManager.Add<Delegates.get_RespawningHero_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_RespawningHero"), value);
            remove => HookEndpointManager.Remove<Delegates.get_RespawningHero_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_RespawningHero"), value);
        }

        public static event Delegates.set_RespawningHero_WithArgs set_RespawningHero
        {
            add => HookEndpointManager.Add<Delegates.set_RespawningHero_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_RespawningHero"), value);
            remove => HookEndpointManager.Remove<Delegates.set_RespawningHero_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_RespawningHero"), value);
        }

        public static event Delegates.get_IsInSceneTransition_WithArgs get_IsInSceneTransition
        {
            add => HookEndpointManager.Add<Delegates.get_IsInSceneTransition_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_IsInSceneTransition"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsInSceneTransition_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_IsInSceneTransition"), value);
        }

        public static event Delegates.set_IsInSceneTransition_WithArgs set_IsInSceneTransition
        {
            add => HookEndpointManager.Add<Delegates.set_IsInSceneTransition_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_IsInSceneTransition"), value);
            remove => HookEndpointManager.Remove<Delegates.set_IsInSceneTransition_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "set_IsInSceneTransition"), value);
        }

        public static event Delegates.get_HasFinishedEnteringScene_WithArgs get_HasFinishedEnteringScene
        {
            add => HookEndpointManager.Add<Delegates.get_HasFinishedEnteringScene_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_HasFinishedEnteringScene"), value);
            remove => HookEndpointManager.Remove<Delegates.get_HasFinishedEnteringScene_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_HasFinishedEnteringScene"), value);
        }

        public static event Delegates.get_WorldInfo_WithArgs get_WorldInfo
        {
            add => HookEndpointManager.Add<Delegates.get_WorldInfo_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_WorldInfo"), value);
            remove => HookEndpointManager.Remove<Delegates.get_WorldInfo_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_WorldInfo"), value);
        }

        public static event Delegates.get_IsLoadingSceneTransition_WithArgs get_IsLoadingSceneTransition
        {
            add => HookEndpointManager.Add<Delegates.get_IsLoadingSceneTransition_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_IsLoadingSceneTransition"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsLoadingSceneTransition_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_IsLoadingSceneTransition"), value);
        }

        public static event Delegates.get_CurrentLoadDuration_WithArgs get_CurrentLoadDuration
        {
            add => HookEndpointManager.Add<Delegates.get_CurrentLoadDuration_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_CurrentLoadDuration"), value);
            remove => HookEndpointManager.Remove<Delegates.get_CurrentLoadDuration_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_CurrentLoadDuration"), value);
        }

        public static event Delegates.get_IsUsingCustomLoadAnimation_WithArgs get_IsUsingCustomLoadAnimation
        {
            add => HookEndpointManager.Add<Delegates.get_IsUsingCustomLoadAnimation_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_IsUsingCustomLoadAnimation"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsUsingCustomLoadAnimation_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_IsUsingCustomLoadAnimation"), value);
        }

        public static event Delegates.get_instance_WithArgs get_instance
        {
            add => HookEndpointManager.Add<Delegates.get_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_instance", false), value);
        }

        public static event Delegates.get_UnsafeInstance_WithArgs get_UnsafeInstance
        {
            add => HookEndpointManager.Add<Delegates.get_UnsafeInstance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_UnsafeInstance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_UnsafeInstance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "get_UnsafeInstance", false), value);
        }

        public static event On.GameManager.hook_Awake Awake
        {
            add => On.GameManager.Awake += value;
            remove => On.GameManager.Awake -= value;
        }

        public static event On.GameManager.hook_Start Start
        {
            add => On.GameManager.Start += value;
            remove => On.GameManager.Start -= value;
        }

        public static event On.GameManager.hook_Update Update
        {
            add => On.GameManager.Update += value;
            remove => On.GameManager.Update -= value;
        }

        public static event On.GameManager.hook_UpdateEngagement UpdateEngagement
        {
            add => On.GameManager.UpdateEngagement += value;
            remove => On.GameManager.UpdateEngagement -= value;
        }

        public static event On.GameManager.hook_LevelActivated LevelActivated
        {
            add => On.GameManager.LevelActivated += value;
            remove => On.GameManager.LevelActivated -= value;
        }

        public static event On.GameManager.hook_OnDisable OnDisable
        {
            add => On.GameManager.OnDisable += value;
            remove => On.GameManager.OnDisable -= value;
        }

        public static event On.GameManager.hook_OnApplicationQuit OnApplicationQuit
        {
            add => On.GameManager.OnApplicationQuit += value;
            remove => On.GameManager.OnApplicationQuit -= value;
        }

        public static event On.GameManager.hook_TransitionScene TransitionScene
        {
            add => On.GameManager.TransitionScene += value;
            remove => On.GameManager.TransitionScene -= value;
        }

        public static event On.GameManager.hook_ChangeToScene ChangeToScene
        {
            add => On.GameManager.ChangeToScene += value;
            remove => On.GameManager.ChangeToScene -= value;
        }

        public static event On.GameManager.hook_WarpToDreamGate WarpToDreamGate
        {
            add => On.GameManager.WarpToDreamGate += value;
            remove => On.GameManager.WarpToDreamGate -= value;
        }

        public static event On.GameManager.hook_LeftScene LeftScene
        {
            add => On.GameManager.LeftScene += value;
            remove => On.GameManager.LeftScene -= value;
        }

        public static event On.GameManager.hook_PlayerDead PlayerDead
        {
            add => On.GameManager.PlayerDead += value;
            remove => On.GameManager.PlayerDead -= value;
        }

        public static event On.GameManager.hook_PlayerDeadFromHazard PlayerDeadFromHazard
        {
            add => On.GameManager.PlayerDeadFromHazard += value;
            remove => On.GameManager.PlayerDeadFromHazard -= value;
        }

        public static event On.GameManager.hook_ReadyForRespawn ReadyForRespawn
        {
            add => On.GameManager.ReadyForRespawn += value;
            remove => On.GameManager.ReadyForRespawn -= value;
        }

        public static event On.GameManager.hook_HazardRespawn HazardRespawn
        {
            add => On.GameManager.HazardRespawn += value;
            remove => On.GameManager.HazardRespawn -= value;
        }

        public static event On.GameManager.hook_TimePasses TimePasses
        {
            add => On.GameManager.TimePasses += value;
            remove => On.GameManager.TimePasses -= value;
        }

        public static event On.GameManager.hook_FadeSceneIn FadeSceneIn
        {
            add => On.GameManager.FadeSceneIn += value;
            remove => On.GameManager.FadeSceneIn -= value;
        }

        public static event On.GameManager.hook_FadeSceneInWithDelay FadeSceneInWithDelay
        {
            add => On.GameManager.FadeSceneInWithDelay += value;
            remove => On.GameManager.FadeSceneInWithDelay -= value;
        }

        public static event On.GameManager.hook_IsGamePaused IsGamePaused
        {
            add => On.GameManager.IsGamePaused += value;
            remove => On.GameManager.IsGamePaused -= value;
        }

        public static event On.GameManager.hook_SetGameMap SetGameMap
        {
            add => On.GameManager.SetGameMap += value;
            remove => On.GameManager.SetGameMap -= value;
        }

        public static event On.GameManager.hook_CalculateNotchesUsed CalculateNotchesUsed
        {
            add => On.GameManager.CalculateNotchesUsed += value;
            remove => On.GameManager.CalculateNotchesUsed -= value;
        }

        public static event On.GameManager.hook_GetLanguageAsString GetLanguageAsString
        {
            add => On.GameManager.GetLanguageAsString += value;
            remove => On.GameManager.GetLanguageAsString -= value;
        }

        public static event On.GameManager.hook_GetEntryGateName GetEntryGateName
        {
            add => On.GameManager.GetEntryGateName += value;
            remove => On.GameManager.GetEntryGateName -= value;
        }

        public static event On.GameManager.hook_SetPlayerDataBool SetPlayerDataBool
        {
            add => On.GameManager.SetPlayerDataBool += value;
            remove => On.GameManager.SetPlayerDataBool -= value;
        }

        public static event On.GameManager.hook_SetPlayerDataInt SetPlayerDataInt
        {
            add => On.GameManager.SetPlayerDataInt += value;
            remove => On.GameManager.SetPlayerDataInt -= value;
        }

        public static event On.GameManager.hook_SetPlayerDataFloat SetPlayerDataFloat
        {
            add => On.GameManager.SetPlayerDataFloat += value;
            remove => On.GameManager.SetPlayerDataFloat -= value;
        }

        public static event On.GameManager.hook_SetPlayerDataString SetPlayerDataString
        {
            add => On.GameManager.SetPlayerDataString += value;
            remove => On.GameManager.SetPlayerDataString -= value;
        }

        public static event On.GameManager.hook_IncrementPlayerDataInt IncrementPlayerDataInt
        {
            add => On.GameManager.IncrementPlayerDataInt += value;
            remove => On.GameManager.IncrementPlayerDataInt -= value;
        }

        public static event On.GameManager.hook_DecrementPlayerDataInt DecrementPlayerDataInt
        {
            add => On.GameManager.DecrementPlayerDataInt += value;
            remove => On.GameManager.DecrementPlayerDataInt -= value;
        }

        public static event On.GameManager.hook_IntAdd IntAdd
        {
            add => On.GameManager.IntAdd += value;
            remove => On.GameManager.IntAdd -= value;
        }

        public static event On.GameManager.hook_GetPlayerDataBool GetPlayerDataBool
        {
            add => On.GameManager.GetPlayerDataBool += value;
            remove => On.GameManager.GetPlayerDataBool -= value;
        }

        public static event On.GameManager.hook_GetPlayerDataInt GetPlayerDataInt
        {
            add => On.GameManager.GetPlayerDataInt += value;
            remove => On.GameManager.GetPlayerDataInt -= value;
        }

        public static event On.GameManager.hook_GetPlayerDataFloat GetPlayerDataFloat
        {
            add => On.GameManager.GetPlayerDataFloat += value;
            remove => On.GameManager.GetPlayerDataFloat -= value;
        }

        public static event On.GameManager.hook_GetPlayerDataString GetPlayerDataString
        {
            add => On.GameManager.GetPlayerDataString += value;
            remove => On.GameManager.GetPlayerDataString -= value;
        }

        public static event On.GameManager.hook_SetPlayerDataVector3 SetPlayerDataVector3
        {
            add => On.GameManager.SetPlayerDataVector3 += value;
            remove => On.GameManager.SetPlayerDataVector3 -= value;
        }

        public static event On.GameManager.hook_GetPlayerDataVector3 GetPlayerDataVector3
        {
            add => On.GameManager.GetPlayerDataVector3 += value;
            remove => On.GameManager.GetPlayerDataVector3 -= value;
        }

        public static event On.GameManager.hook_EquipCharm EquipCharm
        {
            add => On.GameManager.EquipCharm += value;
            remove => On.GameManager.EquipCharm -= value;
        }

        public static event On.GameManager.hook_UnequipCharm UnequipCharm
        {
            add => On.GameManager.UnequipCharm += value;
            remove => On.GameManager.UnequipCharm -= value;
        }

        public static event On.GameManager.hook_RefreshOvercharm RefreshOvercharm
        {
            add => On.GameManager.RefreshOvercharm += value;
            remove => On.GameManager.RefreshOvercharm -= value;
        }

        public static event On.GameManager.hook_UpdateBlueHealth UpdateBlueHealth
        {
            add => On.GameManager.UpdateBlueHealth += value;
            remove => On.GameManager.UpdateBlueHealth -= value;
        }

        public static event On.GameManager.hook_SetCurrentMapZoneAsRespawn SetCurrentMapZoneAsRespawn
        {
            add => On.GameManager.SetCurrentMapZoneAsRespawn += value;
            remove => On.GameManager.SetCurrentMapZoneAsRespawn -= value;
        }

        public static event On.GameManager.hook_SetMapZoneToSpecific SetMapZoneToSpecific
        {
            add => On.GameManager.SetMapZoneToSpecific += value;
            remove => On.GameManager.SetMapZoneToSpecific -= value;
        }

        public static event On.GameManager.hook_StartSoulLimiter StartSoulLimiter
        {
            add => On.GameManager.StartSoulLimiter += value;
            remove => On.GameManager.StartSoulLimiter -= value;
        }

        public static event On.GameManager.hook_EndSoulLimiter EndSoulLimiter
        {
            add => On.GameManager.EndSoulLimiter += value;
            remove => On.GameManager.EndSoulLimiter -= value;
        }

        public static event On.GameManager.hook_UpdateGameMap UpdateGameMap
        {
            add => On.GameManager.UpdateGameMap += value;
            remove => On.GameManager.UpdateGameMap -= value;
        }

        public static event On.GameManager.hook_CheckAllMaps CheckAllMaps
        {
            add => On.GameManager.CheckAllMaps += value;
            remove => On.GameManager.CheckAllMaps -= value;
        }

        public static event On.GameManager.hook_AddToScenesVisited AddToScenesVisited
        {
            add => On.GameManager.AddToScenesVisited += value;
            remove => On.GameManager.AddToScenesVisited -= value;
        }

        public static event On.GameManager.hook_GetIsSceneVisited GetIsSceneVisited
        {
            add => On.GameManager.GetIsSceneVisited += value;
            remove => On.GameManager.GetIsSceneVisited -= value;
        }

        public static event On.GameManager.hook_AddToBenchList AddToBenchList
        {
            add => On.GameManager.AddToBenchList += value;
            remove => On.GameManager.AddToBenchList -= value;
        }

        public static event On.GameManager.hook_AddToGrubList AddToGrubList
        {
            add => On.GameManager.AddToGrubList += value;
            remove => On.GameManager.AddToGrubList -= value;
        }

        public static event On.GameManager.hook_AddToFlameList AddToFlameList
        {
            add => On.GameManager.AddToFlameList += value;
            remove => On.GameManager.AddToFlameList -= value;
        }

        public static event On.GameManager.hook_AddToCocoonList AddToCocoonList
        {
            add => On.GameManager.AddToCocoonList += value;
            remove => On.GameManager.AddToCocoonList -= value;
        }

        public static event On.GameManager.hook_AddToDreamPlantList AddToDreamPlantList
        {
            add => On.GameManager.AddToDreamPlantList += value;
            remove => On.GameManager.AddToDreamPlantList -= value;
        }

        public static event On.GameManager.hook_AddToDreamPlantCList AddToDreamPlantCList
        {
            add => On.GameManager.AddToDreamPlantCList += value;
            remove => On.GameManager.AddToDreamPlantCList -= value;
        }

        public static event On.GameManager.hook_CountGameCompletion CountGameCompletion
        {
            add => On.GameManager.CountGameCompletion += value;
            remove => On.GameManager.CountGameCompletion -= value;
        }

        public static event On.GameManager.hook_CountCharms CountCharms
        {
            add => On.GameManager.CountCharms += value;
            remove => On.GameManager.CountCharms -= value;
        }

        public static event On.GameManager.hook_CountJournalEntries CountJournalEntries
        {
            add => On.GameManager.CountJournalEntries += value;
            remove => On.GameManager.CountJournalEntries -= value;
        }

        public static event On.GameManager.hook_ActivateTestingCheats ActivateTestingCheats
        {
            add => On.GameManager.ActivateTestingCheats += value;
            remove => On.GameManager.ActivateTestingCheats -= value;
        }

        public static event On.GameManager.hook_GetAllPowerups GetAllPowerups
        {
            add => On.GameManager.GetAllPowerups += value;
            remove => On.GameManager.GetAllPowerups -= value;
        }

        public static event On.GameManager.hook_StoryRecord_death StoryRecord_death
        {
            add => On.GameManager.StoryRecord_death += value;
            remove => On.GameManager.StoryRecord_death -= value;
        }

        public static event On.GameManager.hook_StoryRecord_rescueGrub StoryRecord_rescueGrub
        {
            add => On.GameManager.StoryRecord_rescueGrub += value;
            remove => On.GameManager.StoryRecord_rescueGrub -= value;
        }

        public static event On.GameManager.hook_StoryRecord_defeatedShade StoryRecord_defeatedShade
        {
            add => On.GameManager.StoryRecord_defeatedShade += value;
            remove => On.GameManager.StoryRecord_defeatedShade -= value;
        }

        public static event On.GameManager.hook_StoryRecord_discoveredArea StoryRecord_discoveredArea
        {
            add => On.GameManager.StoryRecord_discoveredArea += value;
            remove => On.GameManager.StoryRecord_discoveredArea -= value;
        }

        public static event On.GameManager.hook_StoryRecord_travelledToArea StoryRecord_travelledToArea
        {
            add => On.GameManager.StoryRecord_travelledToArea += value;
            remove => On.GameManager.StoryRecord_travelledToArea -= value;
        }

        public static event On.GameManager.hook_StoryRecord_bankDeposit StoryRecord_bankDeposit
        {
            add => On.GameManager.StoryRecord_bankDeposit += value;
            remove => On.GameManager.StoryRecord_bankDeposit -= value;
        }

        public static event On.GameManager.hook_StoryRecord_bankWithdraw StoryRecord_bankWithdraw
        {
            add => On.GameManager.StoryRecord_bankWithdraw += value;
            remove => On.GameManager.StoryRecord_bankWithdraw -= value;
        }

        public static event On.GameManager.hook_StoryRecord_boughtCorniferMap StoryRecord_boughtCorniferMap
        {
            add => On.GameManager.StoryRecord_boughtCorniferMap += value;
            remove => On.GameManager.StoryRecord_boughtCorniferMap -= value;
        }

        public static event On.GameManager.hook_StoryRecord_visited StoryRecord_visited
        {
            add => On.GameManager.StoryRecord_visited += value;
            remove => On.GameManager.StoryRecord_visited -= value;
        }

        public static event On.GameManager.hook_StoryRecord_defeated StoryRecord_defeated
        {
            add => On.GameManager.StoryRecord_defeated += value;
            remove => On.GameManager.StoryRecord_defeated -= value;
        }

        public static event On.GameManager.hook_StoryRecord_jiji StoryRecord_jiji
        {
            add => On.GameManager.StoryRecord_jiji += value;
            remove => On.GameManager.StoryRecord_jiji -= value;
        }

        public static event On.GameManager.hook_StoryRecord_rodeStag StoryRecord_rodeStag
        {
            add => On.GameManager.StoryRecord_rodeStag += value;
            remove => On.GameManager.StoryRecord_rodeStag -= value;
        }

        public static event On.GameManager.hook_StoryRecord_acquired StoryRecord_acquired
        {
            add => On.GameManager.StoryRecord_acquired += value;
            remove => On.GameManager.StoryRecord_acquired -= value;
        }

        public static event On.GameManager.hook_StoryRecord_bought StoryRecord_bought
        {
            add => On.GameManager.StoryRecord_bought += value;
            remove => On.GameManager.StoryRecord_bought -= value;
        }

        public static event On.GameManager.hook_StoryRecord_quit StoryRecord_quit
        {
            add => On.GameManager.StoryRecord_quit += value;
            remove => On.GameManager.StoryRecord_quit -= value;
        }

        public static event On.GameManager.hook_StoryRecord_rest StoryRecord_rest
        {
            add => On.GameManager.StoryRecord_rest += value;
            remove => On.GameManager.StoryRecord_rest -= value;
        }

        public static event On.GameManager.hook_StoryRecord_upgradeNail StoryRecord_upgradeNail
        {
            add => On.GameManager.StoryRecord_upgradeNail += value;
            remove => On.GameManager.StoryRecord_upgradeNail -= value;
        }

        public static event On.GameManager.hook_StoryRecord_heartPiece StoryRecord_heartPiece
        {
            add => On.GameManager.StoryRecord_heartPiece += value;
            remove => On.GameManager.StoryRecord_heartPiece -= value;
        }

        public static event On.GameManager.hook_StoryRecord_maxHealthUp StoryRecord_maxHealthUp
        {
            add => On.GameManager.StoryRecord_maxHealthUp += value;
            remove => On.GameManager.StoryRecord_maxHealthUp -= value;
        }

        public static event On.GameManager.hook_StoryRecord_soulPiece StoryRecord_soulPiece
        {
            add => On.GameManager.StoryRecord_soulPiece += value;
            remove => On.GameManager.StoryRecord_soulPiece -= value;
        }

        public static event On.GameManager.hook_StoryRecord_maxSoulUp StoryRecord_maxSoulUp
        {
            add => On.GameManager.StoryRecord_maxSoulUp += value;
            remove => On.GameManager.StoryRecord_maxSoulUp -= value;
        }

        public static event On.GameManager.hook_StoryRecord_charmsChanged StoryRecord_charmsChanged
        {
            add => On.GameManager.StoryRecord_charmsChanged += value;
            remove => On.GameManager.StoryRecord_charmsChanged -= value;
        }

        public static event On.GameManager.hook_StoryRecord_charmEquipped StoryRecord_charmEquipped
        {
            add => On.GameManager.StoryRecord_charmEquipped += value;
            remove => On.GameManager.StoryRecord_charmEquipped -= value;
        }

        public static event On.GameManager.hook_StoryRecord_start StoryRecord_start
        {
            add => On.GameManager.StoryRecord_start += value;
            remove => On.GameManager.StoryRecord_start -= value;
        }

        public static event On.GameManager.hook_AwardAchievement AwardAchievement
        {
            add => On.GameManager.AwardAchievement += value;
            remove => On.GameManager.AwardAchievement -= value;
        }

        public static event On.GameManager.hook_QueueAchievement QueueAchievement
        {
            add => On.GameManager.QueueAchievement += value;
            remove => On.GameManager.QueueAchievement -= value;
        }

        public static event On.GameManager.hook_AwardQueuedAchievements AwardQueuedAchievements
        {
            add => On.GameManager.AwardQueuedAchievements += value;
            remove => On.GameManager.AwardQueuedAchievements -= value;
        }

        public static event On.GameManager.hook_IsAchievementAwarded IsAchievementAwarded
        {
            add => On.GameManager.IsAchievementAwarded += value;
            remove => On.GameManager.IsAchievementAwarded -= value;
        }

        public static event On.GameManager.hook_ClearAllAchievements ClearAllAchievements
        {
            add => On.GameManager.ClearAllAchievements += value;
            remove => On.GameManager.ClearAllAchievements -= value;
        }

        public static event On.GameManager.hook_CheckCharmAchievements CheckCharmAchievements
        {
            add => On.GameManager.CheckCharmAchievements += value;
            remove => On.GameManager.CheckCharmAchievements -= value;
        }

        public static event On.GameManager.hook_CheckGrubAchievements CheckGrubAchievements
        {
            add => On.GameManager.CheckGrubAchievements += value;
            remove => On.GameManager.CheckGrubAchievements -= value;
        }

        public static event On.GameManager.hook_CheckStagStationAchievements CheckStagStationAchievements
        {
            add => On.GameManager.CheckStagStationAchievements += value;
            remove => On.GameManager.CheckStagStationAchievements -= value;
        }

        public static event On.GameManager.hook_CheckMapAchievement CheckMapAchievement
        {
            add => On.GameManager.CheckMapAchievement += value;
            remove => On.GameManager.CheckMapAchievement -= value;
        }

        public static event On.GameManager.hook_CheckJournalAchievements CheckJournalAchievements
        {
            add => On.GameManager.CheckJournalAchievements += value;
            remove => On.GameManager.CheckJournalAchievements -= value;
        }

        public static event On.GameManager.hook_CheckAllAchievements CheckAllAchievements
        {
            add => On.GameManager.CheckAllAchievements += value;
            remove => On.GameManager.CheckAllAchievements -= value;
        }

        public static event On.GameManager.hook_CheckBanishmentAchievement CheckBanishmentAchievement
        {
            add => On.GameManager.CheckBanishmentAchievement += value;
            remove => On.GameManager.CheckBanishmentAchievement -= value;
        }

        public static event On.GameManager.hook_SetStatusRecordInt SetStatusRecordInt
        {
            add => On.GameManager.SetStatusRecordInt += value;
            remove => On.GameManager.SetStatusRecordInt -= value;
        }

        public static event On.GameManager.hook_GetStatusRecordInt GetStatusRecordInt
        {
            add => On.GameManager.GetStatusRecordInt += value;
            remove => On.GameManager.GetStatusRecordInt -= value;
        }

        public static event On.GameManager.hook_ResetStatusRecords ResetStatusRecords
        {
            add => On.GameManager.ResetStatusRecords += value;
            remove => On.GameManager.ResetStatusRecords -= value;
        }

        public static event On.GameManager.hook_SaveStatusRecords SaveStatusRecords
        {
            add => On.GameManager.SaveStatusRecords += value;
            remove => On.GameManager.SaveStatusRecords -= value;
        }

        public static event On.GameManager.hook_SetState SetState
        {
            add => On.GameManager.SetState += value;
            remove => On.GameManager.SetState -= value;
        }

        public static event On.GameManager.hook_LoadScene LoadScene
        {
            add => On.GameManager.LoadScene += value;
            remove => On.GameManager.LoadScene -= value;
        }

        public static event On.GameManager.hook_LoadSceneAdditive LoadSceneAdditive
        {
            add => On.GameManager.LoadSceneAdditive += value;
            remove => On.GameManager.LoadSceneAdditive -= value;
        }

        public static event On.GameManager.hook_OnNextLevelReady OnNextLevelReady
        {
            add => On.GameManager.OnNextLevelReady += value;
            remove => On.GameManager.OnNextLevelReady -= value;
        }

        public static event On.GameManager.hook_OnWillActivateFirstLevel OnWillActivateFirstLevel
        {
            add => On.GameManager.OnWillActivateFirstLevel += value;
            remove => On.GameManager.OnWillActivateFirstLevel -= value;
        }

        public static event On.GameManager.hook_LoadFirstScene LoadFirstScene
        {
            add => On.GameManager.LoadFirstScene += value;
            remove => On.GameManager.LoadFirstScene -= value;
        }

        public static event On.GameManager.hook_LoadPermadeathUnlockScene LoadPermadeathUnlockScene
        {
            add => On.GameManager.LoadPermadeathUnlockScene += value;
            remove => On.GameManager.LoadPermadeathUnlockScene -= value;
        }

        public static event On.GameManager.hook_LoadMrMushromScene LoadMrMushromScene
        {
            add => On.GameManager.LoadMrMushromScene += value;
            remove => On.GameManager.LoadMrMushromScene -= value;
        }

        public static event On.GameManager.hook_LoadOpeningCinematic LoadOpeningCinematic
        {
            add => On.GameManager.LoadOpeningCinematic += value;
            remove => On.GameManager.LoadOpeningCinematic -= value;
        }

        public static event On.GameManager.hook_PositionHeroAtSceneEntrance PositionHeroAtSceneEntrance
        {
            add => On.GameManager.PositionHeroAtSceneEntrance += value;
            remove => On.GameManager.PositionHeroAtSceneEntrance -= value;
        }

        public static event On.GameManager.hook_FindEntryPoint FindEntryPoint
        {
            add => On.GameManager.FindEntryPoint += value;
            remove => On.GameManager.FindEntryPoint -= value;
        }

        public static event On.GameManager.hook_FindTransitionPoint FindTransitionPoint
        {
            add => On.GameManager.FindTransitionPoint += value;
            remove => On.GameManager.FindTransitionPoint -= value;
        }

        public static event On.GameManager.hook_EnterHero EnterHero
        {
            add => On.GameManager.EnterHero += value;
            remove => On.GameManager.EnterHero -= value;
        }

        public static event On.GameManager.hook_FinishedEnteringScene FinishedEnteringScene
        {
            add => On.GameManager.FinishedEnteringScene += value;
            remove => On.GameManager.FinishedEnteringScene -= value;
        }

        public static event On.GameManager.hook_SetupGameRefs SetupGameRefs
        {
            add => On.GameManager.SetupGameRefs += value;
            remove => On.GameManager.SetupGameRefs -= value;
        }

        public static event On.GameManager.hook_SetupSceneRefs SetupSceneRefs
        {
            add => On.GameManager.SetupSceneRefs += value;
            remove => On.GameManager.SetupSceneRefs -= value;
        }

        public static event On.GameManager.hook_SetupHeroRefs SetupHeroRefs
        {
            add => On.GameManager.SetupHeroRefs += value;
            remove => On.GameManager.SetupHeroRefs -= value;
        }

        public static event On.GameManager.hook_BeginScene BeginScene
        {
            add => On.GameManager.BeginScene += value;
            remove => On.GameManager.BeginScene -= value;
        }

        public static event On.GameManager.hook_UpdateUIStateFromGameState UpdateUIStateFromGameState
        {
            add => On.GameManager.UpdateUIStateFromGameState += value;
            remove => On.GameManager.UpdateUIStateFromGameState -= value;
        }

        public static event On.GameManager.hook_SkipCutscene SkipCutscene
        {
            add => On.GameManager.SkipCutscene += value;
            remove => On.GameManager.SkipCutscene -= value;
        }

        public static event On.GameManager.hook_SkipCutsceneNoMash SkipCutsceneNoMash
        {
            add => On.GameManager.SkipCutsceneNoMash += value;
            remove => On.GameManager.SkipCutsceneNoMash -= value;
        }

        public static event On.GameManager.hook_NoLongerFirstGame NoLongerFirstGame
        {
            add => On.GameManager.NoLongerFirstGame += value;
            remove => On.GameManager.NoLongerFirstGame -= value;
        }

        public static event On.GameManager.hook_SetupStatusModifiers SetupStatusModifiers
        {
            add => On.GameManager.SetupStatusModifiers += value;
            remove => On.GameManager.SetupStatusModifiers -= value;
        }

        public static event On.GameManager.hook_MatchBackerCreditsSetting MatchBackerCreditsSetting
        {
            add => On.GameManager.MatchBackerCreditsSetting += value;
            remove => On.GameManager.MatchBackerCreditsSetting -= value;
        }

        public static event On.GameManager.hook_RefreshLocalization RefreshLocalization
        {
            add => On.GameManager.RefreshLocalization += value;
            remove => On.GameManager.RefreshLocalization -= value;
        }

        public static event On.GameManager.hook_RefreshParticleSystems RefreshParticleSystems
        {
            add => On.GameManager.RefreshParticleSystems += value;
            remove => On.GameManager.RefreshParticleSystems -= value;
        }

        public static event On.GameManager.hook_ApplyNativeInput ApplyNativeInput
        {
            add => On.GameManager.ApplyNativeInput += value;
            remove => On.GameManager.ApplyNativeInput -= value;
        }

        public static event On.GameManager.hook_EnablePermadeathMode EnablePermadeathMode
        {
            add => On.GameManager.EnablePermadeathMode += value;
            remove => On.GameManager.EnablePermadeathMode -= value;
        }

        public static event On.GameManager.hook_GetCurrentMapZone GetCurrentMapZone
        {
            add => On.GameManager.GetCurrentMapZone += value;
            remove => On.GameManager.GetCurrentMapZone -= value;
        }

        public static event On.GameManager.hook_GetSceneWidth GetSceneWidth
        {
            add => On.GameManager.GetSceneWidth += value;
            remove => On.GameManager.GetSceneWidth -= value;
        }

        public static event On.GameManager.hook_GetSceneHeight GetSceneHeight
        {
            add => On.GameManager.GetSceneHeight += value;
            remove => On.GameManager.GetSceneHeight -= value;
        }

        public static event On.GameManager.hook_GetSceneManager GetSceneManager
        {
            add => On.GameManager.GetSceneManager += value;
            remove => On.GameManager.GetSceneManager -= value;
        }

        public static event On.GameManager.hook_GetFormattedMapZoneString GetFormattedMapZoneString
        {
            add => On.GameManager.GetFormattedMapZoneString += value;
            remove => On.GameManager.GetFormattedMapZoneString -= value;
        }

        public static event On.GameManager.hook_UpdateSceneName UpdateSceneName
        {
            add => On.GameManager.UpdateSceneName += value;
            remove => On.GameManager.UpdateSceneName -= value;
        }

        public static event On.GameManager.hook_GetBaseSceneName GetBaseSceneName
        {
            add => On.GameManager.GetBaseSceneName += value;
            remove => On.GameManager.GetBaseSceneName -= value;
        }

        public static event On.GameManager.hook_GetSceneNameString GetSceneNameString
        {
            add => On.GameManager.GetSceneNameString += value;
            remove => On.GameManager.GetSceneNameString -= value;
        }

        public static event On.GameManager.hook_GetTileMap GetTileMap
        {
            add => On.GameManager.GetTileMap += value;
            remove => On.GameManager.GetTileMap -= value;
        }

        public static event On.GameManager.hook_RefreshTilemapInfo RefreshTilemapInfo
        {
            add => On.GameManager.RefreshTilemapInfo += value;
            remove => On.GameManager.RefreshTilemapInfo -= value;
        }

        public static event On.GameManager.hook_SaveLevelState SaveLevelState
        {
            add => On.GameManager.SaveLevelState += value;
            remove => On.GameManager.SaveLevelState -= value;
        }

        public static event On.GameManager.hook_ResetSemiPersistentItems ResetSemiPersistentItems
        {
            add => On.GameManager.ResetSemiPersistentItems += value;
            remove => On.GameManager.ResetSemiPersistentItems -= value;
        }

        public static event On.GameManager.hook_IsMenuScene IsMenuScene
        {
            add => On.GameManager.IsMenuScene += value;
            remove => On.GameManager.IsMenuScene -= value;
        }

        public static event On.GameManager.hook_IsTitleScreenScene IsTitleScreenScene
        {
            add => On.GameManager.IsTitleScreenScene += value;
            remove => On.GameManager.IsTitleScreenScene -= value;
        }

        public static event On.GameManager.hook_IsGameplayScene IsGameplayScene
        {
            add => On.GameManager.IsGameplayScene += value;
            remove => On.GameManager.IsGameplayScene -= value;
        }

        public static event On.GameManager.hook_IsNonGameplayScene IsNonGameplayScene
        {
            add => On.GameManager.IsNonGameplayScene += value;
            remove => On.GameManager.IsNonGameplayScene -= value;
        }

        public static event On.GameManager.hook_IsCinematicScene IsCinematicScene
        {
            add => On.GameManager.IsCinematicScene += value;
            remove => On.GameManager.IsCinematicScene -= value;
        }

        public static event On.GameManager.hook_IsStagTravelScene IsStagTravelScene
        {
            add => On.GameManager.IsStagTravelScene += value;
            remove => On.GameManager.IsStagTravelScene -= value;
        }

        public static event On.GameManager.hook_IsBetaEndScene IsBetaEndScene
        {
            add => On.GameManager.IsBetaEndScene += value;
            remove => On.GameManager.IsBetaEndScene -= value;
        }

        public static event On.GameManager.hook_IsTutorialScene IsTutorialScene
        {
            add => On.GameManager.IsTutorialScene += value;
            remove => On.GameManager.IsTutorialScene -= value;
        }

        public static event On.GameManager.hook_IsTestScene IsTestScene
        {
            add => On.GameManager.IsTestScene += value;
            remove => On.GameManager.IsTestScene -= value;
        }

        public static event On.GameManager.hook_IsBossDoorScene IsBossDoorScene
        {
            add => On.GameManager.IsBossDoorScene += value;
            remove => On.GameManager.IsBossDoorScene -= value;
        }

        public static event On.GameManager.hook_ShouldKeepHUDCameraActive ShouldKeepHUDCameraActive
        {
            add => On.GameManager.ShouldKeepHUDCameraActive += value;
            remove => On.GameManager.ShouldKeepHUDCameraActive -= value;
        }

        public static event On.GameManager.hook_GetSceneZoneName GetSceneZoneName
        {
            add => On.GameManager.GetSceneZoneName += value;
            remove => On.GameManager.GetSceneZoneName -= value;
        }

        public static event On.GameManager.hook_CountBits CountBits
        {
            add => On.GameManager.CountBits += value;
            remove => On.GameManager.CountBits -= value;
        }

        public static event On.GameManager.hook_IsUnloadAssetsRequired IsUnloadAssetsRequired
        {
            add => On.GameManager.IsUnloadAssetsRequired += value;
            remove => On.GameManager.IsUnloadAssetsRequired -= value;
        }

        public static event On.GameManager.hook_HasSaveFile HasSaveFile
        {
            add => On.GameManager.HasSaveFile += value;
            remove => On.GameManager.HasSaveFile -= value;
        }

        public static event On.GameManager.hook_SaveGame SaveGame
        {
            add => On.GameManager.SaveGame += value;
            remove => On.GameManager.SaveGame -= value;
        }

        public static event On.GameManager.hook_ShowSaveIcon ShowSaveIcon
        {
            add => On.GameManager.ShowSaveIcon += value;
            remove => On.GameManager.ShowSaveIcon -= value;
        }

        public static event On.GameManager.hook_HideSaveIcon HideSaveIcon
        {
            add => On.GameManager.HideSaveIcon += value;
            remove => On.GameManager.HideSaveIcon -= value;
        }

        public static event Delegates.SaveGame_Action_WithArgs SaveGame_Action
        {
            add => HookEndpointManager.Add<Delegates.SaveGame_Action_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "SaveGame"), value);
            remove => HookEndpointManager.Remove<Delegates.SaveGame_Action_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "SaveGame"), value);
        }

        public static event On.GameManager.hook_ResetGameTimer ResetGameTimer
        {
            add => On.GameManager.ResetGameTimer += value;
            remove => On.GameManager.ResetGameTimer -= value;
        }

        public static event On.GameManager.hook_IncreaseGameTimer IncreaseGameTimer
        {
            add => On.GameManager.IncreaseGameTimer += value;
            remove => On.GameManager.IncreaseGameTimer -= value;
        }

        public static event Delegates.SaveGame_int_Action_WithArgs SaveGame_int_Action
        {
            add => HookEndpointManager.Add<Delegates.SaveGame_int_Action_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "SaveGame"), value);
            remove => HookEndpointManager.Remove<Delegates.SaveGame_int_Action_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "SaveGame"), value);
        }

        public static event On.GameManager.hook_LoadGameFromUI LoadGameFromUI
        {
            add => On.GameManager.LoadGameFromUI += value;
            remove => On.GameManager.LoadGameFromUI -= value;
        }

        public static event On.GameManager.hook_LoadGameFromUIRoutine LoadGameFromUIRoutine
        {
            add => On.GameManager.LoadGameFromUIRoutine += value;
            remove => On.GameManager.LoadGameFromUIRoutine -= value;
        }

        public static event On.GameManager.hook_LoadGame LoadGame
        {
            add => On.GameManager.LoadGame += value;
            remove => On.GameManager.LoadGame -= value;
        }

        public static event On.GameManager.hook_ClearSaveFile ClearSaveFile
        {
            add => On.GameManager.ClearSaveFile += value;
            remove => On.GameManager.ClearSaveFile -= value;
        }

        public static event On.GameManager.hook_GetSaveStatsForSlot GetSaveStatsForSlot
        {
            add => On.GameManager.GetSaveStatsForSlot += value;
            remove => On.GameManager.GetSaveStatsForSlot -= value;
        }

        public static event On.GameManager.hook_PauseGameToggleByMenu PauseGameToggleByMenu
        {
            add => On.GameManager.PauseGameToggleByMenu += value;
            remove => On.GameManager.PauseGameToggleByMenu -= value;
        }

        public static event On.GameManager.hook_PauseGameToggle PauseGameToggle
        {
            add => On.GameManager.PauseGameToggle += value;
            remove => On.GameManager.PauseGameToggle -= value;
        }

        public static event On.GameManager.hook_SetTimeScale_float_float SetTimeScale_float_float
        {
            add => On.GameManager.SetTimeScale_float_float += value;
            remove => On.GameManager.SetTimeScale_float_float -= value;
        }

        public static event On.GameManager.hook_SetTimeScale_float SetTimeScale_float
        {
            add => On.GameManager.SetTimeScale_float += value;
            remove => On.GameManager.SetTimeScale_float -= value;
        }

        public static event On.GameManager.hook_FreezeMoment_int FreezeMoment_int
        {
            add => On.GameManager.FreezeMoment_int += value;
            remove => On.GameManager.FreezeMoment_int -= value;
        }

        public static event On.GameManager.hook_FreezeMoment_float_float_float_float
            FreezeMoment_float_float_float_float
            {
                add => On.GameManager.FreezeMoment_float_float_float_float += value;
                remove => On.GameManager.FreezeMoment_float_float_float_float -= value;
            }

        public static event On.GameManager.hook_FreezeMomentGC FreezeMomentGC
        {
            add => On.GameManager.FreezeMomentGC += value;
            remove => On.GameManager.FreezeMomentGC -= value;
        }

        public static event On.GameManager.hook_FreezeMoment_float_float_float_bool FreezeMoment_float_float_float_bool
        {
            add => On.GameManager.FreezeMoment_float_float_float_bool += value;
            remove => On.GameManager.FreezeMoment_float_float_float_bool -= value;
        }

        public static event On.GameManager.hook_EnsureSaveSlotSpace EnsureSaveSlotSpace
        {
            add => On.GameManager.EnsureSaveSlotSpace += value;
            remove => On.GameManager.EnsureSaveSlotSpace -= value;
        }

        public static event On.GameManager.hook_StartNewGame StartNewGame
        {
            add => On.GameManager.StartNewGame += value;
            remove => On.GameManager.StartNewGame -= value;
        }

        public static event On.GameManager.hook_RunStartNewGame RunStartNewGame
        {
            add => On.GameManager.RunStartNewGame += value;
            remove => On.GameManager.RunStartNewGame -= value;
        }

        public static event On.GameManager.hook_ContinueGame ContinueGame
        {
            add => On.GameManager.ContinueGame += value;
            remove => On.GameManager.ContinueGame -= value;
        }

        public static event On.GameManager.hook_RunContinueGame RunContinueGame
        {
            add => On.GameManager.RunContinueGame += value;
            remove => On.GameManager.RunContinueGame -= value;
        }

        public static event On.GameManager.hook_WillTerminateInBackground WillTerminateInBackground
        {
            add => On.GameManager.WillTerminateInBackground += value;
            remove => On.GameManager.WillTerminateInBackground -= value;
        }

        public static event Delegates.OnDisengage_WithArgs OnDisengage
        {
            add => HookEndpointManager.Add<Delegates.OnDisengage_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "Platform.IDisengageHandler.OnDisengage"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDisengage_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "Platform.IDisengageHandler.OnDisengage"), value);
        }

        public static event On.GameManager.hook_EmergencyReturnToMenu EmergencyReturnToMenu
        {
            add => On.GameManager.EmergencyReturnToMenu += value;
            remove => On.GameManager.EmergencyReturnToMenu -= value;
        }

        public static event On.GameManager.hook_QuitGame QuitGame
        {
            add => On.GameManager.QuitGame += value;
            remove => On.GameManager.QuitGame -= value;
        }

        public static event On.GameManager.hook_LoadedBoss LoadedBoss
        {
            add => On.GameManager.LoadedBoss += value;
            remove => On.GameManager.LoadedBoss -= value;
        }

        public static event On.GameManager.hook_DoDestroyPersonalPools DoDestroyPersonalPools
        {
            add => On.GameManager.DoDestroyPersonalPools += value;
            remove => On.GameManager.DoDestroyPersonalPools -= value;
        }

        public static event On.GameManager.hook_GetImplicitCinematicVolume GetImplicitCinematicVolume
        {
            add => On.GameManager.GetImplicitCinematicVolume += value;
            remove => On.GameManager.GetImplicitCinematicVolume -= value;
        }

        public static event Delegates.orig_get_ui_WithArgs orig_get_ui
        {
            add => HookEndpointManager.Add<Delegates.orig_get_ui_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_get_ui"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_get_ui_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_get_ui"), value);
        }

        public static event Delegates.orig_set_ui_WithArgs orig_set_ui
        {
            add => HookEndpointManager.Add<Delegates.orig_set_ui_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_set_ui"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_set_ui_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_set_ui"), value);
        }

        public static event Delegates.orig_OnApplicationQuit_WithArgs orig_OnApplicationQuit
        {
            add => HookEndpointManager.Add<Delegates.orig_OnApplicationQuit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_OnApplicationQuit"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_OnApplicationQuit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_OnApplicationQuit"), value);
        }

        public static event Delegates.orig_LoadScene_WithArgs orig_LoadScene
        {
            add => HookEndpointManager.Add<Delegates.orig_LoadScene_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_LoadScene"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_LoadScene_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_LoadScene"), value);
        }

        public static event Delegates.orig_ClearSaveFile_WithArgs orig_ClearSaveFile
        {
            add => HookEndpointManager.Add<Delegates.orig_ClearSaveFile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_ClearSaveFile"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_ClearSaveFile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_ClearSaveFile"), value);
        }

        public static event Delegates.orig_PlayerDead_WithArgs orig_PlayerDead
        {
            add => HookEndpointManager.Add<Delegates.orig_PlayerDead_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_PlayerDead"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_PlayerDead_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_PlayerDead"), value);
        }

        public static event Delegates.ModdedSavePath_WithArgs ModdedSavePath
        {
            add => HookEndpointManager.Add<Delegates.ModdedSavePath_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "ModdedSavePath", false), value);
            remove => HookEndpointManager.Remove<Delegates.ModdedSavePath_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "ModdedSavePath", false), value);
        }

        public static event Delegates.orig_SetupSceneRefs_WithArgs orig_SetupSceneRefs
        {
            add => HookEndpointManager.Add<Delegates.orig_SetupSceneRefs_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_SetupSceneRefs"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_SetupSceneRefs_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_SetupSceneRefs"), value);
        }

        public static event Delegates.orig_OnWillActivateFirstLevel_WithArgs orig_OnWillActivateFirstLevel
        {
            add => HookEndpointManager.Add<Delegates.orig_OnWillActivateFirstLevel_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_OnWillActivateFirstLevel"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_OnWillActivateFirstLevel_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "orig_OnWillActivateFirstLevel"), value);
        }

        public static event Delegates.PauseToggleDynamicMenu_WithArgs PauseToggleDynamicMenu
        {
            add => HookEndpointManager.Add<Delegates.PauseToggleDynamicMenu_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "PauseToggleDynamicMenu"), value);
            remove => HookEndpointManager.Remove<Delegates.PauseToggleDynamicMenu_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GameManager), "PauseToggleDynamicMenu"), value);
        }
    }
}