namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for StaticVariableList class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnStaticVariableList
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookClear()
        {
            if (!HookedList.Contains("Clear"))
            {
                HookedList.Add("Clear");
                On.StaticVariableList.Clear += Clear;
            }
        }

        internal static event Delegates.Clear_BeforeArgs _beforeClear;
        internal static event Delegates.Clear_AfterArgs _afterClear;

        private static void Clear(On.StaticVariableList.orig_Clear orig)
        {
            if (_beforeClear != null)
                foreach (Delegates.Clear_BeforeArgs toInvoke in _beforeClear.GetInvocationList())
                    try
                    {
                        _beforeClear?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterClear != null)
                foreach (Delegates.Clear_AfterArgs toInvoke in _afterClear.GetInvocationList())
                    try
                    {
                        _afterClear.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookExists()
        {
            if (!HookedList.Contains("Exists"))
            {
                HookedList.Add("Exists");
                On.StaticVariableList.Exists += Exists;
            }
        }

        internal static event Delegates.Exists_BeforeArgs _beforeExists;
        internal static event Delegates.Exists_AfterArgs _afterExists;

        private static bool Exists(On.StaticVariableList.orig_Exists orig, string variableName)
        {
            Delegates.Params_Exists @params = new()
            {
                variableName = variableName
            };
            if (_beforeExists != null)
                foreach (Delegates.Exists_BeforeArgs toInvoke in _beforeExists.GetInvocationList())
                    try
                    {
                        _beforeExists?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            variableName = @params.variableName;
            var retVal = orig(variableName);
            if (_afterExists != null)
                foreach (Delegates.Exists_AfterArgs toInvoke in _afterExists.GetInvocationList())
                    try
                    {
                        retVal = _afterExists.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Clear_AfterArgs();

        public delegate void Clear_BeforeArgs();

        public delegate void Clear_WithArgs(Action orig);

        public delegate bool Exists_AfterArgs(Params_Exists args, bool ret);

        public delegate void Exists_BeforeArgs(Params_Exists args);

        public delegate bool Exists_WithArgs(Func<string, bool> orig, string variableName);

        public sealed class Params_Exists
        {
            public string variableName;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Clear_BeforeArgs Clear
        {
            add
            {
                HookHandler._beforeClear += value;
                HookHandler.HookClear();
            }
            remove => HookHandler._beforeClear -= value;
        }

        public static event Delegates.Exists_BeforeArgs Exists
        {
            add
            {
                HookHandler._beforeExists += value;
                HookHandler.HookExists();
            }
            remove => HookHandler._beforeExists -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Clear_AfterArgs Clear
        {
            add
            {
                HookHandler._afterClear += value;
                HookHandler.HookClear();
            }
            remove => HookHandler._afterClear -= value;
        }

        public static event Delegates.Exists_AfterArgs Exists
        {
            add
            {
                HookHandler._afterExists += value;
                HookHandler.HookExists();
            }
            remove => HookHandler._afterExists -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.StaticVariableList.hook_Clear Clear
        {
            add => On.StaticVariableList.Clear += value;
            remove => On.StaticVariableList.Clear -= value;
        }

        public static event On.StaticVariableList.hook_Exists Exists
        {
            add => On.StaticVariableList.Exists += value;
            remove => On.StaticVariableList.Exists -= value;
        }
    }
}