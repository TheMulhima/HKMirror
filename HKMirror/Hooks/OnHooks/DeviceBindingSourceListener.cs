using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for DeviceBindingSourceListener class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnDeviceBindingSourceListener
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookReset()
{
if (!HookedList.Contains("Reset"))
{
HookedList.Add("Reset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.DeviceBindingSourceListener), "Reset", true), Reset);

}
}
internal static event Delegates.Reset_BeforeArgs _beforeReset;
internal static event Delegates.Reset_AfterArgs _afterReset;
private static void Reset(Action<InControl.DeviceBindingSourceListener> orig, InControl.DeviceBindingSourceListener self)
{
Delegates.Params_Reset @params = new() 
{
self = self
};
if (_beforeReset != null)
{
foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
{
try
{
_beforeReset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterReset != null)
{
foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
{
try
{
_afterReset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookListen()
{
if (!HookedList.Contains("Listen"))
{
HookedList.Add("Listen");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.DeviceBindingSourceListener), "Listen", true), Listen);

}
}
internal static event Delegates.Listen_BeforeArgs _beforeListen;
internal static event Delegates.Listen_AfterArgs _afterListen;
private static InControl.BindingSource Listen(Func<InControl.DeviceBindingSourceListener,  InControl.BindingListenOptions,  InControl.InputDevice, InControl.BindingSource> orig, InControl.DeviceBindingSourceListener self,  InControl.BindingListenOptions listenOptions,  InControl.InputDevice device)
{
Delegates.Params_Listen @params = new() 
{
self = self
, listenOptions = listenOptions
, device = device
};
if (_beforeListen != null)
{
foreach (Delegates.Listen_BeforeArgs toInvoke in _beforeListen.GetInvocationList())
{
try
{
_beforeListen?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
listenOptions = @params.listenOptions;
device = @params.device;
var retVal = orig(self, listenOptions, device);
if (_afterListen != null)
{
foreach (Delegates.Listen_AfterArgs toInvoke in _afterListen.GetInvocationList())
{
try
{
retVal = _afterListen.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookIsPressed_InputControl()
{
if (!HookedList.Contains("IsPressed_InputControl"))
{
HookedList.Add("IsPressed_InputControl");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.DeviceBindingSourceListener), "IsPressed_InputControl", true), IsPressed_InputControl);

}
}
internal static event Delegates.IsPressed_InputControl_BeforeArgs _beforeIsPressed_InputControl;
internal static event Delegates.IsPressed_InputControl_AfterArgs _afterIsPressed_InputControl;
private static bool IsPressed_InputControl(Func<InControl.DeviceBindingSourceListener,  InControl.InputControl, bool> orig, InControl.DeviceBindingSourceListener self,  InControl.InputControl control)
{
Delegates.Params_IsPressed_InputControl @params = new() 
{
self = self
, control = control
};
if (_beforeIsPressed_InputControl != null)
{
foreach (Delegates.IsPressed_InputControl_BeforeArgs toInvoke in _beforeIsPressed_InputControl.GetInvocationList())
{
try
{
_beforeIsPressed_InputControl?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
control = @params.control;
var retVal = orig(self, control);
if (_afterIsPressed_InputControl != null)
{
foreach (Delegates.IsPressed_InputControl_AfterArgs toInvoke in _afterIsPressed_InputControl.GetInvocationList())
{
try
{
retVal = _afterIsPressed_InputControl.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookIsPressed_InputControlType_InputDevice()
{
if (!HookedList.Contains("IsPressed_InputControlType_InputDevice"))
{
HookedList.Add("IsPressed_InputControlType_InputDevice");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.DeviceBindingSourceListener), "IsPressed_InputControlType_InputDevice", true), IsPressed_InputControlType_InputDevice);

}
}
internal static event Delegates.IsPressed_InputControlType_InputDevice_BeforeArgs _beforeIsPressed_InputControlType_InputDevice;
internal static event Delegates.IsPressed_InputControlType_InputDevice_AfterArgs _afterIsPressed_InputControlType_InputDevice;
private static bool IsPressed_InputControlType_InputDevice(Func<InControl.DeviceBindingSourceListener,  InControl.InputControlType,  InControl.InputDevice, bool> orig, InControl.DeviceBindingSourceListener self,  InControl.InputControlType control,  InControl.InputDevice device)
{
Delegates.Params_IsPressed_InputControlType_InputDevice @params = new() 
{
self = self
, control = control
, device = device
};
if (_beforeIsPressed_InputControlType_InputDevice != null)
{
foreach (Delegates.IsPressed_InputControlType_InputDevice_BeforeArgs toInvoke in _beforeIsPressed_InputControlType_InputDevice.GetInvocationList())
{
try
{
_beforeIsPressed_InputControlType_InputDevice?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
control = @params.control;
device = @params.device;
var retVal = orig(self, control, device);
if (_afterIsPressed_InputControlType_InputDevice != null)
{
foreach (Delegates.IsPressed_InputControlType_InputDevice_AfterArgs toInvoke in _afterIsPressed_InputControlType_InputDevice.GetInvocationList())
{
try
{
retVal = _afterIsPressed_InputControlType_InputDevice.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookListenForControl()
{
if (!HookedList.Contains("ListenForControl"))
{
HookedList.Add("ListenForControl");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.DeviceBindingSourceListener), "ListenForControl", true), ListenForControl);

}
}
internal static event Delegates.ListenForControl_BeforeArgs _beforeListenForControl;
internal static event Delegates.ListenForControl_AfterArgs _afterListenForControl;
private static InControl.InputControlType ListenForControl(Func<InControl.DeviceBindingSourceListener,  InControl.BindingListenOptions,  InControl.InputDevice, InControl.InputControlType> orig, InControl.DeviceBindingSourceListener self,  InControl.BindingListenOptions listenOptions,  InControl.InputDevice device)
{
Delegates.Params_ListenForControl @params = new() 
{
self = self
, listenOptions = listenOptions
, device = device
};
if (_beforeListenForControl != null)
{
foreach (Delegates.ListenForControl_BeforeArgs toInvoke in _beforeListenForControl.GetInvocationList())
{
try
{
_beforeListenForControl?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
listenOptions = @params.listenOptions;
device = @params.device;
var retVal = orig(self, listenOptions, device);
if (_afterListenForControl != null)
{
foreach (Delegates.ListenForControl_AfterArgs toInvoke in _afterListenForControl.GetInvocationList())
{
try
{
retVal = _afterListenForControl.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Reset
{
public InControl.DeviceBindingSourceListener self;
}
public delegate void Reset_BeforeArgs(Params_Reset args);
public delegate void Reset_AfterArgs(Params_Reset args);
public delegate void Reset_WithArgs (Action<InControl.DeviceBindingSourceListener> orig, InControl.DeviceBindingSourceListener self);
public sealed class Params_Listen
{
public InControl.DeviceBindingSourceListener self;
public InControl.BindingListenOptions listenOptions;
public InControl.InputDevice device;
}
public delegate void Listen_BeforeArgs(Params_Listen args);
public delegate InControl.BindingSource Listen_AfterArgs(Params_Listen args, InControl.BindingSource ret);
public delegate InControl.BindingSource Listen_WithArgs (Func<InControl.DeviceBindingSourceListener,  InControl.BindingListenOptions,  InControl.InputDevice, InControl.BindingSource> orig, InControl.DeviceBindingSourceListener self,  InControl.BindingListenOptions listenOptions,  InControl.InputDevice device);
public sealed class Params_IsPressed_InputControl
{
public InControl.DeviceBindingSourceListener self;
public InControl.InputControl control;
}
public delegate void IsPressed_InputControl_BeforeArgs(Params_IsPressed_InputControl args);
public delegate bool IsPressed_InputControl_AfterArgs(Params_IsPressed_InputControl args, bool ret);
public delegate bool IsPressed_InputControl_WithArgs (Func<InControl.DeviceBindingSourceListener,  InControl.InputControl, bool> orig, InControl.DeviceBindingSourceListener self,  InControl.InputControl control);
public sealed class Params_IsPressed_InputControlType_InputDevice
{
public InControl.DeviceBindingSourceListener self;
public InControl.InputControlType control;
public InControl.InputDevice device;
}
public delegate void IsPressed_InputControlType_InputDevice_BeforeArgs(Params_IsPressed_InputControlType_InputDevice args);
public delegate bool IsPressed_InputControlType_InputDevice_AfterArgs(Params_IsPressed_InputControlType_InputDevice args, bool ret);
public delegate bool IsPressed_InputControlType_InputDevice_WithArgs (Func<InControl.DeviceBindingSourceListener,  InControl.InputControlType,  InControl.InputDevice, bool> orig, InControl.DeviceBindingSourceListener self,  InControl.InputControlType control,  InControl.InputDevice device);
public sealed class Params_ListenForControl
{
public InControl.DeviceBindingSourceListener self;
public InControl.BindingListenOptions listenOptions;
public InControl.InputDevice device;
}
public delegate void ListenForControl_BeforeArgs(Params_ListenForControl args);
public delegate InControl.InputControlType ListenForControl_AfterArgs(Params_ListenForControl args, InControl.InputControlType ret);
public delegate InControl.InputControlType ListenForControl_WithArgs (Func<InControl.DeviceBindingSourceListener,  InControl.BindingListenOptions,  InControl.InputDevice, InControl.InputControlType> orig, InControl.DeviceBindingSourceListener self,  InControl.BindingListenOptions listenOptions,  InControl.InputDevice device);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Reset_BeforeArgs Reset
{
add
{

HookHandler._beforeReset += value;
HookHandler.HookReset();
}
remove => HookHandler._beforeReset -= value;
}
public static event Delegates.Listen_BeforeArgs Listen
{
add
{

HookHandler._beforeListen += value;
HookHandler.HookListen();
}
remove => HookHandler._beforeListen -= value;
}
public static event Delegates.IsPressed_InputControl_BeforeArgs IsPressed_InputControl
{
add
{

HookHandler._beforeIsPressed_InputControl += value;
HookHandler.HookIsPressed_InputControl();
}
remove => HookHandler._beforeIsPressed_InputControl -= value;
}
public static event Delegates.IsPressed_InputControlType_InputDevice_BeforeArgs IsPressed_InputControlType_InputDevice
{
add
{

HookHandler._beforeIsPressed_InputControlType_InputDevice += value;
HookHandler.HookIsPressed_InputControlType_InputDevice();
}
remove => HookHandler._beforeIsPressed_InputControlType_InputDevice -= value;
}
public static event Delegates.ListenForControl_BeforeArgs ListenForControl
{
add
{

HookHandler._beforeListenForControl += value;
HookHandler.HookListenForControl();
}
remove => HookHandler._beforeListenForControl -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Reset_AfterArgs Reset
{
add
{

HookHandler._afterReset += value;
HookHandler.HookReset();
}
remove => HookHandler._afterReset -= value;
}
public static event Delegates.Listen_AfterArgs Listen
{
add
{

HookHandler._afterListen += value;
HookHandler.HookListen();
}
remove => HookHandler._afterListen -= value;
}
public static event Delegates.IsPressed_InputControl_AfterArgs IsPressed_InputControl
{
add
{

HookHandler._afterIsPressed_InputControl += value;
HookHandler.HookIsPressed_InputControl();
}
remove => HookHandler._afterIsPressed_InputControl -= value;
}
public static event Delegates.IsPressed_InputControlType_InputDevice_AfterArgs IsPressed_InputControlType_InputDevice
{
add
{

HookHandler._afterIsPressed_InputControlType_InputDevice += value;
HookHandler.HookIsPressed_InputControlType_InputDevice();
}
remove => HookHandler._afterIsPressed_InputControlType_InputDevice -= value;
}
public static event Delegates.ListenForControl_AfterArgs ListenForControl
{
add
{

HookHandler._afterListenForControl += value;
HookHandler.HookListenForControl();
}
remove => HookHandler._afterListenForControl -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.Reset_WithArgs Reset
{
add => HookEndpointManager.Add<Delegates.Reset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.DeviceBindingSourceListener), "Reset", true), value);
remove => HookEndpointManager.Remove<Delegates.Reset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.DeviceBindingSourceListener), "Reset", true), value);
}
public static event Delegates.Listen_WithArgs Listen
{
add => HookEndpointManager.Add<Delegates.Listen_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.DeviceBindingSourceListener), "Listen", true), value);
remove => HookEndpointManager.Remove<Delegates.Listen_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.DeviceBindingSourceListener), "Listen", true), value);
}
public static event Delegates.IsPressed_InputControl_WithArgs IsPressed_InputControl
{
add => HookEndpointManager.Add<Delegates.IsPressed_InputControl_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.DeviceBindingSourceListener), "IsPressed", true), value);
remove => HookEndpointManager.Remove<Delegates.IsPressed_InputControl_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.DeviceBindingSourceListener), "IsPressed", true), value);
}
public static event Delegates.IsPressed_InputControlType_InputDevice_WithArgs IsPressed_InputControlType_InputDevice
{
add => HookEndpointManager.Add<Delegates.IsPressed_InputControlType_InputDevice_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.DeviceBindingSourceListener), "IsPressed", true), value);
remove => HookEndpointManager.Remove<Delegates.IsPressed_InputControlType_InputDevice_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.DeviceBindingSourceListener), "IsPressed", true), value);
}
public static event Delegates.ListenForControl_WithArgs ListenForControl
{
add => HookEndpointManager.Add<Delegates.ListenForControl_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.DeviceBindingSourceListener), "ListenForControl", true), value);
remove => HookEndpointManager.Remove<Delegates.ListenForControl_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.DeviceBindingSourceListener), "ListenForControl", true), value);
}
}

}
