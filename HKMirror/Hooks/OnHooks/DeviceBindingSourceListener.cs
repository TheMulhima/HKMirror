using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for DeviceBindingSourceListener class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnDeviceBindingSourceListener
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(DeviceBindingSourceListener), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<DeviceBindingSourceListener> orig, DeviceBindingSourceListener self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookListen()
        {
            if (!HookedList.Contains("Listen"))
            {
                HookedList.Add("Listen");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(DeviceBindingSourceListener), "Listen"), Listen);
            }
        }

        internal static event Delegates.Listen_BeforeArgs _beforeListen;
        internal static event Delegates.Listen_NormalArgs _afterListen;

        private static BindingSource Listen(
            Func<DeviceBindingSourceListener, BindingListenOptions, InputDevice, BindingSource> orig,
            DeviceBindingSourceListener self, BindingListenOptions listenOptions, InputDevice device)
        {
            Delegates.Params_Listen @params = new()
            {
                self = self, listenOptions = listenOptions, device = device
            };
            _beforeListen?.Invoke(@params);
            self = @params.self;
            listenOptions = @params.listenOptions;
            device = @params.device;
            var retVal = orig(self, listenOptions, device);
            if (_afterListen != null) retVal = _afterListen.Invoke(@params);
            return retVal;
        }

        internal static void HookIsPressed_InputControl()
        {
            if (!HookedList.Contains("IsPressed_InputControl"))
            {
                HookedList.Add("IsPressed_InputControl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(DeviceBindingSourceListener), "IsPressed_InputControl"),
                    IsPressed_InputControl);
            }
        }

        internal static event Delegates.IsPressed_InputControl_BeforeArgs _beforeIsPressed_InputControl;
        internal static event Delegates.IsPressed_InputControl_NormalArgs _afterIsPressed_InputControl;

        private static bool IsPressed_InputControl(Func<DeviceBindingSourceListener, InputControl, bool> orig,
            DeviceBindingSourceListener self, InputControl control)
        {
            Delegates.Params_IsPressed_InputControl @params = new()
            {
                self = self, control = control
            };
            _beforeIsPressed_InputControl?.Invoke(@params);
            self = @params.self;
            control = @params.control;
            var retVal = orig(self, control);
            if (_afterIsPressed_InputControl != null) retVal = _afterIsPressed_InputControl.Invoke(@params);
            return retVal;
        }

        internal static void HookIsPressed_InputControlType_InputDevice()
        {
            if (!HookedList.Contains("IsPressed_InputControlType_InputDevice"))
            {
                HookedList.Add("IsPressed_InputControlType_InputDevice");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(DeviceBindingSourceListener),
                        "IsPressed_InputControlType_InputDevice"), IsPressed_InputControlType_InputDevice);
            }
        }

        internal static event Delegates.IsPressed_InputControlType_InputDevice_BeforeArgs
            _beforeIsPressed_InputControlType_InputDevice;

        internal static event Delegates.IsPressed_InputControlType_InputDevice_NormalArgs
            _afterIsPressed_InputControlType_InputDevice;

        private static bool IsPressed_InputControlType_InputDevice(
            Func<DeviceBindingSourceListener, InputControlType, InputDevice, bool> orig,
            DeviceBindingSourceListener self, InputControlType control, InputDevice device)
        {
            Delegates.Params_IsPressed_InputControlType_InputDevice @params = new()
            {
                self = self, control = control, device = device
            };
            _beforeIsPressed_InputControlType_InputDevice?.Invoke(@params);
            self = @params.self;
            control = @params.control;
            device = @params.device;
            var retVal = orig(self, control, device);
            if (_afterIsPressed_InputControlType_InputDevice != null)
                retVal = _afterIsPressed_InputControlType_InputDevice.Invoke(@params);
            return retVal;
        }

        internal static void HookListenForControl()
        {
            if (!HookedList.Contains("ListenForControl"))
            {
                HookedList.Add("ListenForControl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(DeviceBindingSourceListener), "ListenForControl"),
                    ListenForControl);
            }
        }

        internal static event Delegates.ListenForControl_BeforeArgs _beforeListenForControl;
        internal static event Delegates.ListenForControl_NormalArgs _afterListenForControl;

        private static InputControlType ListenForControl(
            Func<DeviceBindingSourceListener, BindingListenOptions, InputDevice, InputControlType> orig,
            DeviceBindingSourceListener self, BindingListenOptions listenOptions, InputDevice device)
        {
            Delegates.Params_ListenForControl @params = new()
            {
                self = self, listenOptions = listenOptions, device = device
            };
            _beforeListenForControl?.Invoke(@params);
            self = @params.self;
            listenOptions = @params.listenOptions;
            device = @params.device;
            var retVal = orig(self, listenOptions, device);
            if (_afterListenForControl != null) retVal = _afterListenForControl.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void IsPressed_InputControl_BeforeArgs(Params_IsPressed_InputControl args);

        public delegate bool IsPressed_InputControl_NormalArgs(Params_IsPressed_InputControl args);

        public delegate void IsPressed_InputControlType_InputDevice_BeforeArgs(
            Params_IsPressed_InputControlType_InputDevice args);

        public delegate bool IsPressed_InputControlType_InputDevice_NormalArgs(
            Params_IsPressed_InputControlType_InputDevice args);

        public delegate void Listen_BeforeArgs(Params_Listen args);

        public delegate BindingSource Listen_NormalArgs(Params_Listen args);

        public delegate void ListenForControl_BeforeArgs(Params_ListenForControl args);

        public delegate InputControlType ListenForControl_NormalArgs(Params_ListenForControl args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public sealed class Params_Reset
        {
            public DeviceBindingSourceListener self;
        }

        public sealed class Params_Listen
        {
            public InputDevice device;
            public BindingListenOptions listenOptions;
            public DeviceBindingSourceListener self;
        }

        public sealed class Params_IsPressed_InputControl
        {
            public InputControl control;
            public DeviceBindingSourceListener self;
        }

        public sealed class Params_IsPressed_InputControlType_InputDevice
        {
            public InputControlType control;
            public InputDevice device;
            public DeviceBindingSourceListener self;
        }

        public sealed class Params_ListenForControl
        {
            public InputDevice device;
            public BindingListenOptions listenOptions;
            public DeviceBindingSourceListener self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.Listen_BeforeArgs Listen
        {
            add
            {
                HookHandler._beforeListen += value;
                HookHandler.HookListen();
            }
            remove => HookHandler._beforeListen -= value;
        }

        public static event Delegates.IsPressed_InputControl_BeforeArgs IsPressed_InputControl
        {
            add
            {
                HookHandler._beforeIsPressed_InputControl += value;
                HookHandler.HookIsPressed_InputControl();
            }
            remove => HookHandler._beforeIsPressed_InputControl -= value;
        }

        public static event Delegates.IsPressed_InputControlType_InputDevice_BeforeArgs
            IsPressed_InputControlType_InputDevice
            {
                add
                {
                    HookHandler._beforeIsPressed_InputControlType_InputDevice += value;
                    HookHandler.HookIsPressed_InputControlType_InputDevice();
                }
                remove => HookHandler._beforeIsPressed_InputControlType_InputDevice -= value;
            }

        public static event Delegates.ListenForControl_BeforeArgs ListenForControl
        {
            add
            {
                HookHandler._beforeListenForControl += value;
                HookHandler.HookListenForControl();
            }
            remove => HookHandler._beforeListenForControl -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.Listen_NormalArgs Listen
        {
            add
            {
                HookHandler._afterListen += value;
                HookHandler.HookListen();
            }
            remove => HookHandler._afterListen -= value;
        }

        public static event Delegates.IsPressed_InputControl_NormalArgs IsPressed_InputControl
        {
            add
            {
                HookHandler._afterIsPressed_InputControl += value;
                HookHandler.HookIsPressed_InputControl();
            }
            remove => HookHandler._afterIsPressed_InputControl -= value;
        }

        public static event Delegates.IsPressed_InputControlType_InputDevice_NormalArgs
            IsPressed_InputControlType_InputDevice
            {
                add
                {
                    HookHandler._afterIsPressed_InputControlType_InputDevice += value;
                    HookHandler.HookIsPressed_InputControlType_InputDevice();
                }
                remove => HookHandler._afterIsPressed_InputControlType_InputDevice -= value;
            }

        public static event Delegates.ListenForControl_NormalArgs ListenForControl
        {
            add
            {
                HookHandler._afterListenForControl += value;
                HookHandler.HookListenForControl();
            }
            remove => HookHandler._afterListenForControl -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DeviceBindingSourceListener), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DeviceBindingSourceListener), "Reset"), value);
        }

        public static event Delegates.Listen_NormalArgs Listen
        {
            add => HookEndpointManager.Add<Delegates.Listen_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DeviceBindingSourceListener), "Listen"), value);
            remove => HookEndpointManager.Remove<Delegates.Listen_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DeviceBindingSourceListener), "Listen"), value);
        }

        public static event Delegates.IsPressed_InputControl_NormalArgs IsPressed_InputControl
        {
            add => HookEndpointManager.Add<Delegates.IsPressed_InputControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DeviceBindingSourceListener), "IsPressed"), value);
            remove => HookEndpointManager.Remove<Delegates.IsPressed_InputControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DeviceBindingSourceListener), "IsPressed"), value);
        }

        public static event Delegates.IsPressed_InputControlType_InputDevice_NormalArgs
            IsPressed_InputControlType_InputDevice
            {
                add => HookEndpointManager.Add<Delegates.IsPressed_InputControlType_InputDevice_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(DeviceBindingSourceListener), "IsPressed"), value);
                remove => HookEndpointManager.Remove<Delegates.IsPressed_InputControlType_InputDevice_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(DeviceBindingSourceListener), "IsPressed"), value);
            }

        public static event Delegates.ListenForControl_NormalArgs ListenForControl
        {
            add => HookEndpointManager.Add<Delegates.ListenForControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DeviceBindingSourceListener), "ListenForControl"), value);
            remove => HookEndpointManager.Remove<Delegates.ListenForControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DeviceBindingSourceListener), "ListenForControl"), value);
        }
    }
}