using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ObjectPoolExtensions class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnObjectPoolExtensions
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookCreatePool_GameObject()
        {
            if (!HookedList.Contains("CreatePool_GameObject"))
            {
                HookedList.Add("CreatePool_GameObject");
                On.ObjectPoolExtensions.CreatePool_GameObject += CreatePool_GameObject;
            }
        }

        internal static event Delegates.CreatePool_GameObject_BeforeArgs _beforeCreatePool_GameObject;
        internal static event Delegates.CreatePool_GameObject_AfterArgs _afterCreatePool_GameObject;

        private static void CreatePool_GameObject(On.ObjectPoolExtensions.orig_CreatePool_GameObject orig,
            GameObject prefab)
        {
            Delegates.Params_CreatePool_GameObject @params = new()
            {
                prefab = prefab
            };
            if (_beforeCreatePool_GameObject != null)
                foreach (Delegates.CreatePool_GameObject_BeforeArgs toInvoke in _beforeCreatePool_GameObject
                             .GetInvocationList())
                    try
                    {
                        _beforeCreatePool_GameObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            prefab = @params.prefab;
            orig(prefab);
            if (_afterCreatePool_GameObject != null)
                foreach (Delegates.CreatePool_GameObject_AfterArgs toInvoke in _afterCreatePool_GameObject
                             .GetInvocationList())
                    try
                    {
                        _afterCreatePool_GameObject.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCreatePool_GameObject_int()
        {
            if (!HookedList.Contains("CreatePool_GameObject_int"))
            {
                HookedList.Add("CreatePool_GameObject_int");
                On.ObjectPoolExtensions.CreatePool_GameObject_int += CreatePool_GameObject_int;
            }
        }

        internal static event Delegates.CreatePool_GameObject_int_BeforeArgs _beforeCreatePool_GameObject_int;
        internal static event Delegates.CreatePool_GameObject_int_AfterArgs _afterCreatePool_GameObject_int;

        private static void CreatePool_GameObject_int(On.ObjectPoolExtensions.orig_CreatePool_GameObject_int orig,
            GameObject prefab, int initialPoolSize)
        {
            Delegates.Params_CreatePool_GameObject_int @params = new()
            {
                prefab = prefab, initialPoolSize = initialPoolSize
            };
            if (_beforeCreatePool_GameObject_int != null)
                foreach (Delegates.CreatePool_GameObject_int_BeforeArgs toInvoke in _beforeCreatePool_GameObject_int
                             .GetInvocationList())
                    try
                    {
                        _beforeCreatePool_GameObject_int?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            prefab = @params.prefab;
            initialPoolSize = @params.initialPoolSize;
            orig(prefab, initialPoolSize);
            if (_afterCreatePool_GameObject_int != null)
                foreach (Delegates.CreatePool_GameObject_int_AfterArgs toInvoke in _afterCreatePool_GameObject_int
                             .GetInvocationList())
                    try
                    {
                        _afterCreatePool_GameObject_int.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSpawn_GameObject_Transform_Vector3_Quaternion()
        {
            if (!HookedList.Contains("Spawn_GameObject_Transform_Vector3_Quaternion"))
            {
                HookedList.Add("Spawn_GameObject_Transform_Vector3_Quaternion");
                On.ObjectPoolExtensions.Spawn_GameObject_Transform_Vector3_Quaternion +=
                    Spawn_GameObject_Transform_Vector3_Quaternion;
            }
        }

        internal static event Delegates.Spawn_GameObject_Transform_Vector3_Quaternion_BeforeArgs
            _beforeSpawn_GameObject_Transform_Vector3_Quaternion;

        internal static event Delegates.Spawn_GameObject_Transform_Vector3_Quaternion_AfterArgs
            _afterSpawn_GameObject_Transform_Vector3_Quaternion;

        private static GameObject Spawn_GameObject_Transform_Vector3_Quaternion(
            On.ObjectPoolExtensions.orig_Spawn_GameObject_Transform_Vector3_Quaternion orig, GameObject prefab,
            Transform parent, Vector3 position, Quaternion rotation)
        {
            Delegates.Params_Spawn_GameObject_Transform_Vector3_Quaternion @params = new()
            {
                prefab = prefab, parent = parent, position = position, rotation = rotation
            };
            if (_beforeSpawn_GameObject_Transform_Vector3_Quaternion != null)
                foreach (Delegates.Spawn_GameObject_Transform_Vector3_Quaternion_BeforeArgs toInvoke in
                         _beforeSpawn_GameObject_Transform_Vector3_Quaternion.GetInvocationList())
                    try
                    {
                        _beforeSpawn_GameObject_Transform_Vector3_Quaternion?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            prefab = @params.prefab;
            parent = @params.parent;
            position = @params.position;
            rotation = @params.rotation;
            var retVal = orig(prefab, parent, position, rotation);
            if (_afterSpawn_GameObject_Transform_Vector3_Quaternion != null)
                foreach (Delegates.Spawn_GameObject_Transform_Vector3_Quaternion_AfterArgs toInvoke in
                         _afterSpawn_GameObject_Transform_Vector3_Quaternion.GetInvocationList())
                    try
                    {
                        retVal = _afterSpawn_GameObject_Transform_Vector3_Quaternion.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSpawn_GameObject_Vector3_Quaternion()
        {
            if (!HookedList.Contains("Spawn_GameObject_Vector3_Quaternion"))
            {
                HookedList.Add("Spawn_GameObject_Vector3_Quaternion");
                On.ObjectPoolExtensions.Spawn_GameObject_Vector3_Quaternion += Spawn_GameObject_Vector3_Quaternion;
            }
        }

        internal static event Delegates.Spawn_GameObject_Vector3_Quaternion_BeforeArgs
            _beforeSpawn_GameObject_Vector3_Quaternion;

        internal static event Delegates.Spawn_GameObject_Vector3_Quaternion_AfterArgs
            _afterSpawn_GameObject_Vector3_Quaternion;

        private static GameObject Spawn_GameObject_Vector3_Quaternion(
            On.ObjectPoolExtensions.orig_Spawn_GameObject_Vector3_Quaternion orig, GameObject prefab, Vector3 position,
            Quaternion rotation)
        {
            Delegates.Params_Spawn_GameObject_Vector3_Quaternion @params = new()
            {
                prefab = prefab, position = position, rotation = rotation
            };
            if (_beforeSpawn_GameObject_Vector3_Quaternion != null)
                foreach (Delegates.Spawn_GameObject_Vector3_Quaternion_BeforeArgs toInvoke in
                         _beforeSpawn_GameObject_Vector3_Quaternion.GetInvocationList())
                    try
                    {
                        _beforeSpawn_GameObject_Vector3_Quaternion?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            prefab = @params.prefab;
            position = @params.position;
            rotation = @params.rotation;
            var retVal = orig(prefab, position, rotation);
            if (_afterSpawn_GameObject_Vector3_Quaternion != null)
                foreach (Delegates.Spawn_GameObject_Vector3_Quaternion_AfterArgs toInvoke in
                         _afterSpawn_GameObject_Vector3_Quaternion.GetInvocationList())
                    try
                    {
                        retVal = _afterSpawn_GameObject_Vector3_Quaternion.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSpawn_GameObject_Transform_Vector3()
        {
            if (!HookedList.Contains("Spawn_GameObject_Transform_Vector3"))
            {
                HookedList.Add("Spawn_GameObject_Transform_Vector3");
                On.ObjectPoolExtensions.Spawn_GameObject_Transform_Vector3 += Spawn_GameObject_Transform_Vector3;
            }
        }

        internal static event Delegates.Spawn_GameObject_Transform_Vector3_BeforeArgs
            _beforeSpawn_GameObject_Transform_Vector3;

        internal static event Delegates.Spawn_GameObject_Transform_Vector3_AfterArgs
            _afterSpawn_GameObject_Transform_Vector3;

        private static GameObject Spawn_GameObject_Transform_Vector3(
            On.ObjectPoolExtensions.orig_Spawn_GameObject_Transform_Vector3 orig, GameObject prefab, Transform parent,
            Vector3 position)
        {
            Delegates.Params_Spawn_GameObject_Transform_Vector3 @params = new()
            {
                prefab = prefab, parent = parent, position = position
            };
            if (_beforeSpawn_GameObject_Transform_Vector3 != null)
                foreach (Delegates.Spawn_GameObject_Transform_Vector3_BeforeArgs toInvoke in
                         _beforeSpawn_GameObject_Transform_Vector3.GetInvocationList())
                    try
                    {
                        _beforeSpawn_GameObject_Transform_Vector3?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            prefab = @params.prefab;
            parent = @params.parent;
            position = @params.position;
            var retVal = orig(prefab, parent, position);
            if (_afterSpawn_GameObject_Transform_Vector3 != null)
                foreach (Delegates.Spawn_GameObject_Transform_Vector3_AfterArgs toInvoke in
                         _afterSpawn_GameObject_Transform_Vector3.GetInvocationList())
                    try
                    {
                        retVal = _afterSpawn_GameObject_Transform_Vector3.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSpawn_GameObject_Vector3()
        {
            if (!HookedList.Contains("Spawn_GameObject_Vector3"))
            {
                HookedList.Add("Spawn_GameObject_Vector3");
                On.ObjectPoolExtensions.Spawn_GameObject_Vector3 += Spawn_GameObject_Vector3;
            }
        }

        internal static event Delegates.Spawn_GameObject_Vector3_BeforeArgs _beforeSpawn_GameObject_Vector3;
        internal static event Delegates.Spawn_GameObject_Vector3_AfterArgs _afterSpawn_GameObject_Vector3;

        private static GameObject Spawn_GameObject_Vector3(On.ObjectPoolExtensions.orig_Spawn_GameObject_Vector3 orig,
            GameObject prefab, Vector3 position)
        {
            Delegates.Params_Spawn_GameObject_Vector3 @params = new()
            {
                prefab = prefab, position = position
            };
            if (_beforeSpawn_GameObject_Vector3 != null)
                foreach (Delegates.Spawn_GameObject_Vector3_BeforeArgs toInvoke in _beforeSpawn_GameObject_Vector3
                             .GetInvocationList())
                    try
                    {
                        _beforeSpawn_GameObject_Vector3?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            prefab = @params.prefab;
            position = @params.position;
            var retVal = orig(prefab, position);
            if (_afterSpawn_GameObject_Vector3 != null)
                foreach (Delegates.Spawn_GameObject_Vector3_AfterArgs toInvoke in _afterSpawn_GameObject_Vector3
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterSpawn_GameObject_Vector3.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSpawn_GameObject_Transform()
        {
            if (!HookedList.Contains("Spawn_GameObject_Transform"))
            {
                HookedList.Add("Spawn_GameObject_Transform");
                On.ObjectPoolExtensions.Spawn_GameObject_Transform += Spawn_GameObject_Transform;
            }
        }

        internal static event Delegates.Spawn_GameObject_Transform_BeforeArgs _beforeSpawn_GameObject_Transform;
        internal static event Delegates.Spawn_GameObject_Transform_AfterArgs _afterSpawn_GameObject_Transform;

        private static GameObject Spawn_GameObject_Transform(
            On.ObjectPoolExtensions.orig_Spawn_GameObject_Transform orig, GameObject prefab, Transform parent)
        {
            Delegates.Params_Spawn_GameObject_Transform @params = new()
            {
                prefab = prefab, parent = parent
            };
            if (_beforeSpawn_GameObject_Transform != null)
                foreach (Delegates.Spawn_GameObject_Transform_BeforeArgs toInvoke in _beforeSpawn_GameObject_Transform
                             .GetInvocationList())
                    try
                    {
                        _beforeSpawn_GameObject_Transform?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            prefab = @params.prefab;
            parent = @params.parent;
            var retVal = orig(prefab, parent);
            if (_afterSpawn_GameObject_Transform != null)
                foreach (Delegates.Spawn_GameObject_Transform_AfterArgs toInvoke in _afterSpawn_GameObject_Transform
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterSpawn_GameObject_Transform.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSpawn_GameObject()
        {
            if (!HookedList.Contains("Spawn_GameObject"))
            {
                HookedList.Add("Spawn_GameObject");
                On.ObjectPoolExtensions.Spawn_GameObject += Spawn_GameObject;
            }
        }

        internal static event Delegates.Spawn_GameObject_BeforeArgs _beforeSpawn_GameObject;
        internal static event Delegates.Spawn_GameObject_AfterArgs _afterSpawn_GameObject;

        private static GameObject Spawn_GameObject(On.ObjectPoolExtensions.orig_Spawn_GameObject orig,
            GameObject prefab)
        {
            Delegates.Params_Spawn_GameObject @params = new()
            {
                prefab = prefab
            };
            if (_beforeSpawn_GameObject != null)
                foreach (Delegates.Spawn_GameObject_BeforeArgs toInvoke in _beforeSpawn_GameObject.GetInvocationList())
                    try
                    {
                        _beforeSpawn_GameObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            prefab = @params.prefab;
            var retVal = orig(prefab);
            if (_afterSpawn_GameObject != null)
                foreach (Delegates.Spawn_GameObject_AfterArgs toInvoke in _afterSpawn_GameObject.GetInvocationList())
                    try
                    {
                        retVal = _afterSpawn_GameObject.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookRecycle()
        {
            if (!HookedList.Contains("Recycle"))
            {
                HookedList.Add("Recycle");
                On.ObjectPoolExtensions.Recycle += Recycle;
            }
        }

        internal static event Delegates.Recycle_BeforeArgs _beforeRecycle;
        internal static event Delegates.Recycle_AfterArgs _afterRecycle;

        private static void Recycle(On.ObjectPoolExtensions.orig_Recycle orig, GameObject obj)
        {
            Delegates.Params_Recycle @params = new()
            {
                obj = obj
            };
            if (_beforeRecycle != null)
                foreach (Delegates.Recycle_BeforeArgs toInvoke in _beforeRecycle.GetInvocationList())
                    try
                    {
                        _beforeRecycle?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            obj = @params.obj;
            orig(obj);
            if (_afterRecycle != null)
                foreach (Delegates.Recycle_AfterArgs toInvoke in _afterRecycle.GetInvocationList())
                    try
                    {
                        _afterRecycle.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRecycleAll()
        {
            if (!HookedList.Contains("RecycleAll"))
            {
                HookedList.Add("RecycleAll");
                On.ObjectPoolExtensions.RecycleAll += RecycleAll;
            }
        }

        internal static event Delegates.RecycleAll_BeforeArgs _beforeRecycleAll;
        internal static event Delegates.RecycleAll_AfterArgs _afterRecycleAll;

        private static void RecycleAll(On.ObjectPoolExtensions.orig_RecycleAll orig, GameObject prefab)
        {
            Delegates.Params_RecycleAll @params = new()
            {
                prefab = prefab
            };
            if (_beforeRecycleAll != null)
                foreach (Delegates.RecycleAll_BeforeArgs toInvoke in _beforeRecycleAll.GetInvocationList())
                    try
                    {
                        _beforeRecycleAll?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            prefab = @params.prefab;
            orig(prefab);
            if (_afterRecycleAll != null)
                foreach (Delegates.RecycleAll_AfterArgs toInvoke in _afterRecycleAll.GetInvocationList())
                    try
                    {
                        _afterRecycleAll.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCountPooled()
        {
            if (!HookedList.Contains("CountPooled"))
            {
                HookedList.Add("CountPooled");
                On.ObjectPoolExtensions.CountPooled += CountPooled;
            }
        }

        internal static event Delegates.CountPooled_BeforeArgs _beforeCountPooled;
        internal static event Delegates.CountPooled_AfterArgs _afterCountPooled;

        private static int CountPooled(On.ObjectPoolExtensions.orig_CountPooled orig, GameObject prefab)
        {
            Delegates.Params_CountPooled @params = new()
            {
                prefab = prefab
            };
            if (_beforeCountPooled != null)
                foreach (Delegates.CountPooled_BeforeArgs toInvoke in _beforeCountPooled.GetInvocationList())
                    try
                    {
                        _beforeCountPooled?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            prefab = @params.prefab;
            var retVal = orig(prefab);
            if (_afterCountPooled != null)
                foreach (Delegates.CountPooled_AfterArgs toInvoke in _afterCountPooled.GetInvocationList())
                    try
                    {
                        retVal = _afterCountPooled.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCountSpawned()
        {
            if (!HookedList.Contains("CountSpawned"))
            {
                HookedList.Add("CountSpawned");
                On.ObjectPoolExtensions.CountSpawned += CountSpawned;
            }
        }

        internal static event Delegates.CountSpawned_BeforeArgs _beforeCountSpawned;
        internal static event Delegates.CountSpawned_AfterArgs _afterCountSpawned;

        private static int CountSpawned(On.ObjectPoolExtensions.orig_CountSpawned orig, GameObject prefab)
        {
            Delegates.Params_CountSpawned @params = new()
            {
                prefab = prefab
            };
            if (_beforeCountSpawned != null)
                foreach (Delegates.CountSpawned_BeforeArgs toInvoke in _beforeCountSpawned.GetInvocationList())
                    try
                    {
                        _beforeCountSpawned?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            prefab = @params.prefab;
            var retVal = orig(prefab);
            if (_afterCountSpawned != null)
                foreach (Delegates.CountSpawned_AfterArgs toInvoke in _afterCountSpawned.GetInvocationList())
                    try
                    {
                        retVal = _afterCountSpawned.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetSpawned_GameObject_GameObject_bool()
        {
            if (!HookedList.Contains("GetSpawned_GameObject_GameObject_bool"))
            {
                HookedList.Add("GetSpawned_GameObject_GameObject_bool");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(ObjectPoolExtensions),
                        "GetSpawned_GameObject_GameObject_bool", false), GetSpawned_GameObject_GameObject_bool);
            }
        }

        internal static event Delegates.GetSpawned_GameObject_GameObject_bool_BeforeArgs
            _beforeGetSpawned_GameObject_GameObject_bool;

        internal static event Delegates.GetSpawned_GameObject_GameObject_bool_AfterArgs
            _afterGetSpawned_GameObject_GameObject_bool;

        private static List<GameObject> GetSpawned_GameObject_GameObject_bool(
            Func<GameObject, List<GameObject>, bool, List<GameObject>> orig, GameObject prefab, List<GameObject> list,
            bool appendList)
        {
            Delegates.Params_GetSpawned_GameObject_GameObject_bool @params = new()
            {
                prefab = prefab, list = list, appendList = appendList
            };
            if (_beforeGetSpawned_GameObject_GameObject_bool != null)
                foreach (Delegates.GetSpawned_GameObject_GameObject_bool_BeforeArgs toInvoke in
                         _beforeGetSpawned_GameObject_GameObject_bool.GetInvocationList())
                    try
                    {
                        _beforeGetSpawned_GameObject_GameObject_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            prefab = @params.prefab;
            list = @params.list;
            appendList = @params.appendList;
            var retVal = orig(prefab, list, appendList);
            if (_afterGetSpawned_GameObject_GameObject_bool != null)
                foreach (Delegates.GetSpawned_GameObject_GameObject_bool_AfterArgs toInvoke in
                         _afterGetSpawned_GameObject_GameObject_bool.GetInvocationList())
                    try
                    {
                        retVal = _afterGetSpawned_GameObject_GameObject_bool.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetSpawned_GameObject_GameObject()
        {
            if (!HookedList.Contains("GetSpawned_GameObject_GameObject"))
            {
                HookedList.Add("GetSpawned_GameObject_GameObject");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(ObjectPoolExtensions), "GetSpawned_GameObject_GameObject",
                        false), GetSpawned_GameObject_GameObject);
            }
        }

        internal static event Delegates.GetSpawned_GameObject_GameObject_BeforeArgs
            _beforeGetSpawned_GameObject_GameObject;

        internal static event Delegates.GetSpawned_GameObject_GameObject_AfterArgs
            _afterGetSpawned_GameObject_GameObject;

        private static List<GameObject> GetSpawned_GameObject_GameObject(
            Func<GameObject, List<GameObject>, List<GameObject>> orig, GameObject prefab, List<GameObject> list)
        {
            Delegates.Params_GetSpawned_GameObject_GameObject @params = new()
            {
                prefab = prefab, list = list
            };
            if (_beforeGetSpawned_GameObject_GameObject != null)
                foreach (Delegates.GetSpawned_GameObject_GameObject_BeforeArgs toInvoke in
                         _beforeGetSpawned_GameObject_GameObject.GetInvocationList())
                    try
                    {
                        _beforeGetSpawned_GameObject_GameObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            prefab = @params.prefab;
            list = @params.list;
            var retVal = orig(prefab, list);
            if (_afterGetSpawned_GameObject_GameObject != null)
                foreach (Delegates.GetSpawned_GameObject_GameObject_AfterArgs toInvoke in
                         _afterGetSpawned_GameObject_GameObject.GetInvocationList())
                    try
                    {
                        retVal = _afterGetSpawned_GameObject_GameObject.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetSpawned_GameObject()
        {
            if (!HookedList.Contains("GetSpawned_GameObject"))
            {
                HookedList.Add("GetSpawned_GameObject");
                On.ObjectPoolExtensions.GetSpawned_GameObject += GetSpawned_GameObject;
            }
        }

        internal static event Delegates.GetSpawned_GameObject_BeforeArgs _beforeGetSpawned_GameObject;
        internal static event Delegates.GetSpawned_GameObject_AfterArgs _afterGetSpawned_GameObject;

        private static List<GameObject> GetSpawned_GameObject(On.ObjectPoolExtensions.orig_GetSpawned_GameObject orig,
            GameObject prefab)
        {
            Delegates.Params_GetSpawned_GameObject @params = new()
            {
                prefab = prefab
            };
            if (_beforeGetSpawned_GameObject != null)
                foreach (Delegates.GetSpawned_GameObject_BeforeArgs toInvoke in _beforeGetSpawned_GameObject
                             .GetInvocationList())
                    try
                    {
                        _beforeGetSpawned_GameObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            prefab = @params.prefab;
            var retVal = orig(prefab);
            if (_afterGetSpawned_GameObject != null)
                foreach (Delegates.GetSpawned_GameObject_AfterArgs toInvoke in _afterGetSpawned_GameObject
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetSpawned_GameObject.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetPooled_GameObject_GameObject_bool()
        {
            if (!HookedList.Contains("GetPooled_GameObject_GameObject_bool"))
            {
                HookedList.Add("GetPooled_GameObject_GameObject_bool");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(ObjectPoolExtensions), "GetPooled_GameObject_GameObject_bool",
                        false), GetPooled_GameObject_GameObject_bool);
            }
        }

        internal static event Delegates.GetPooled_GameObject_GameObject_bool_BeforeArgs
            _beforeGetPooled_GameObject_GameObject_bool;

        internal static event Delegates.GetPooled_GameObject_GameObject_bool_AfterArgs
            _afterGetPooled_GameObject_GameObject_bool;

        private static List<GameObject> GetPooled_GameObject_GameObject_bool(
            Func<GameObject, List<GameObject>, bool, List<GameObject>> orig, GameObject prefab, List<GameObject> list,
            bool appendList)
        {
            Delegates.Params_GetPooled_GameObject_GameObject_bool @params = new()
            {
                prefab = prefab, list = list, appendList = appendList
            };
            if (_beforeGetPooled_GameObject_GameObject_bool != null)
                foreach (Delegates.GetPooled_GameObject_GameObject_bool_BeforeArgs toInvoke in
                         _beforeGetPooled_GameObject_GameObject_bool.GetInvocationList())
                    try
                    {
                        _beforeGetPooled_GameObject_GameObject_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            prefab = @params.prefab;
            list = @params.list;
            appendList = @params.appendList;
            var retVal = orig(prefab, list, appendList);
            if (_afterGetPooled_GameObject_GameObject_bool != null)
                foreach (Delegates.GetPooled_GameObject_GameObject_bool_AfterArgs toInvoke in
                         _afterGetPooled_GameObject_GameObject_bool.GetInvocationList())
                    try
                    {
                        retVal = _afterGetPooled_GameObject_GameObject_bool.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetPooled_GameObject_GameObject()
        {
            if (!HookedList.Contains("GetPooled_GameObject_GameObject"))
            {
                HookedList.Add("GetPooled_GameObject_GameObject");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(ObjectPoolExtensions), "GetPooled_GameObject_GameObject",
                        false), GetPooled_GameObject_GameObject);
            }
        }

        internal static event Delegates.GetPooled_GameObject_GameObject_BeforeArgs
            _beforeGetPooled_GameObject_GameObject;

        internal static event Delegates.GetPooled_GameObject_GameObject_AfterArgs _afterGetPooled_GameObject_GameObject;

        private static List<GameObject> GetPooled_GameObject_GameObject(
            Func<GameObject, List<GameObject>, List<GameObject>> orig, GameObject prefab, List<GameObject> list)
        {
            Delegates.Params_GetPooled_GameObject_GameObject @params = new()
            {
                prefab = prefab, list = list
            };
            if (_beforeGetPooled_GameObject_GameObject != null)
                foreach (Delegates.GetPooled_GameObject_GameObject_BeforeArgs toInvoke in
                         _beforeGetPooled_GameObject_GameObject.GetInvocationList())
                    try
                    {
                        _beforeGetPooled_GameObject_GameObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            prefab = @params.prefab;
            list = @params.list;
            var retVal = orig(prefab, list);
            if (_afterGetPooled_GameObject_GameObject != null)
                foreach (Delegates.GetPooled_GameObject_GameObject_AfterArgs toInvoke in
                         _afterGetPooled_GameObject_GameObject.GetInvocationList())
                    try
                    {
                        retVal = _afterGetPooled_GameObject_GameObject.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetPooled_GameObject()
        {
            if (!HookedList.Contains("GetPooled_GameObject"))
            {
                HookedList.Add("GetPooled_GameObject");
                On.ObjectPoolExtensions.GetPooled_GameObject += GetPooled_GameObject;
            }
        }

        internal static event Delegates.GetPooled_GameObject_BeforeArgs _beforeGetPooled_GameObject;
        internal static event Delegates.GetPooled_GameObject_AfterArgs _afterGetPooled_GameObject;

        private static List<GameObject> GetPooled_GameObject(On.ObjectPoolExtensions.orig_GetPooled_GameObject orig,
            GameObject prefab)
        {
            Delegates.Params_GetPooled_GameObject @params = new()
            {
                prefab = prefab
            };
            if (_beforeGetPooled_GameObject != null)
                foreach (Delegates.GetPooled_GameObject_BeforeArgs toInvoke in _beforeGetPooled_GameObject
                             .GetInvocationList())
                    try
                    {
                        _beforeGetPooled_GameObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            prefab = @params.prefab;
            var retVal = orig(prefab);
            if (_afterGetPooled_GameObject != null)
                foreach (Delegates.GetPooled_GameObject_AfterArgs toInvoke in _afterGetPooled_GameObject
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetPooled_GameObject.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookDestroyPooled()
        {
            if (!HookedList.Contains("DestroyPooled"))
            {
                HookedList.Add("DestroyPooled");
                On.ObjectPoolExtensions.DestroyPooled += DestroyPooled;
            }
        }

        internal static event Delegates.DestroyPooled_BeforeArgs _beforeDestroyPooled;
        internal static event Delegates.DestroyPooled_AfterArgs _afterDestroyPooled;

        private static void DestroyPooled(On.ObjectPoolExtensions.orig_DestroyPooled orig, GameObject prefab)
        {
            Delegates.Params_DestroyPooled @params = new()
            {
                prefab = prefab
            };
            if (_beforeDestroyPooled != null)
                foreach (Delegates.DestroyPooled_BeforeArgs toInvoke in _beforeDestroyPooled.GetInvocationList())
                    try
                    {
                        _beforeDestroyPooled?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            prefab = @params.prefab;
            orig(prefab);
            if (_afterDestroyPooled != null)
                foreach (Delegates.DestroyPooled_AfterArgs toInvoke in _afterDestroyPooled.GetInvocationList())
                    try
                    {
                        _afterDestroyPooled.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDestroyAll()
        {
            if (!HookedList.Contains("DestroyAll"))
            {
                HookedList.Add("DestroyAll");
                On.ObjectPoolExtensions.DestroyAll += DestroyAll;
            }
        }

        internal static event Delegates.DestroyAll_BeforeArgs _beforeDestroyAll;
        internal static event Delegates.DestroyAll_AfterArgs _afterDestroyAll;

        private static void DestroyAll(On.ObjectPoolExtensions.orig_DestroyAll orig, GameObject prefab)
        {
            Delegates.Params_DestroyAll @params = new()
            {
                prefab = prefab
            };
            if (_beforeDestroyAll != null)
                foreach (Delegates.DestroyAll_BeforeArgs toInvoke in _beforeDestroyAll.GetInvocationList())
                    try
                    {
                        _beforeDestroyAll?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            prefab = @params.prefab;
            orig(prefab);
            if (_afterDestroyAll != null)
                foreach (Delegates.DestroyAll_AfterArgs toInvoke in _afterDestroyAll.GetInvocationList())
                    try
                    {
                        _afterDestroyAll.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate int CountPooled_AfterArgs(Params_CountPooled args, int ret);

        public delegate void CountPooled_BeforeArgs(Params_CountPooled args);

        public delegate int CountPooled_WithArgs(Func<GameObject, int> orig, GameObject prefab);

        public delegate int CountSpawned_AfterArgs(Params_CountSpawned args, int ret);

        public delegate void CountSpawned_BeforeArgs(Params_CountSpawned args);

        public delegate int CountSpawned_WithArgs(Func<GameObject, int> orig, GameObject prefab);

        public delegate void CreatePool_GameObject_AfterArgs(Params_CreatePool_GameObject args);

        public delegate void CreatePool_GameObject_BeforeArgs(Params_CreatePool_GameObject args);

        public delegate void CreatePool_GameObject_int_AfterArgs(Params_CreatePool_GameObject_int args);

        public delegate void CreatePool_GameObject_int_BeforeArgs(Params_CreatePool_GameObject_int args);

        public delegate void CreatePool_GameObject_int_WithArgs(Action<GameObject, int> orig, GameObject prefab,
            int initialPoolSize);

        public delegate void CreatePool_GameObject_WithArgs(Action<GameObject> orig, GameObject prefab);

        public delegate void DestroyAll_AfterArgs(Params_DestroyAll args);

        public delegate void DestroyAll_BeforeArgs(Params_DestroyAll args);

        public delegate void DestroyAll_WithArgs(Action<GameObject> orig, GameObject prefab);

        public delegate void DestroyPooled_AfterArgs(Params_DestroyPooled args);

        public delegate void DestroyPooled_BeforeArgs(Params_DestroyPooled args);

        public delegate void DestroyPooled_WithArgs(Action<GameObject> orig, GameObject prefab);

        public delegate List<GameObject> GetPooled_GameObject_AfterArgs(Params_GetPooled_GameObject args,
            List<GameObject> ret);

        public delegate void GetPooled_GameObject_BeforeArgs(Params_GetPooled_GameObject args);

        public delegate List<GameObject> GetPooled_GameObject_GameObject_AfterArgs(
            Params_GetPooled_GameObject_GameObject args, List<GameObject> ret);

        public delegate void GetPooled_GameObject_GameObject_BeforeArgs(Params_GetPooled_GameObject_GameObject args);

        public delegate List<GameObject> GetPooled_GameObject_GameObject_bool_AfterArgs(
            Params_GetPooled_GameObject_GameObject_bool args, List<GameObject> ret);

        public delegate void GetPooled_GameObject_GameObject_bool_BeforeArgs(
            Params_GetPooled_GameObject_GameObject_bool args);

        public delegate List<GameObject> GetPooled_GameObject_GameObject_bool_WithArgs(
            Func<GameObject, List<GameObject>, bool, List<GameObject>> orig, GameObject prefab, List<GameObject> list,
            bool appendList);

        public delegate List<GameObject> GetPooled_GameObject_GameObject_WithArgs(
            Func<GameObject, List<GameObject>, List<GameObject>> orig, GameObject prefab, List<GameObject> list);

        public delegate List<GameObject> GetPooled_GameObject_WithArgs(Func<GameObject, List<GameObject>> orig,
            GameObject prefab);

        public delegate List<GameObject> GetSpawned_GameObject_AfterArgs(Params_GetSpawned_GameObject args,
            List<GameObject> ret);

        public delegate void GetSpawned_GameObject_BeforeArgs(Params_GetSpawned_GameObject args);

        public delegate List<GameObject> GetSpawned_GameObject_GameObject_AfterArgs(
            Params_GetSpawned_GameObject_GameObject args, List<GameObject> ret);

        public delegate void GetSpawned_GameObject_GameObject_BeforeArgs(Params_GetSpawned_GameObject_GameObject args);

        public delegate List<GameObject> GetSpawned_GameObject_GameObject_bool_AfterArgs(
            Params_GetSpawned_GameObject_GameObject_bool args, List<GameObject> ret);

        public delegate void GetSpawned_GameObject_GameObject_bool_BeforeArgs(
            Params_GetSpawned_GameObject_GameObject_bool args);

        public delegate List<GameObject> GetSpawned_GameObject_GameObject_bool_WithArgs(
            Func<GameObject, List<GameObject>, bool, List<GameObject>> orig, GameObject prefab, List<GameObject> list,
            bool appendList);

        public delegate List<GameObject> GetSpawned_GameObject_GameObject_WithArgs(
            Func<GameObject, List<GameObject>, List<GameObject>> orig, GameObject prefab, List<GameObject> list);

        public delegate List<GameObject> GetSpawned_GameObject_WithArgs(Func<GameObject, List<GameObject>> orig,
            GameObject prefab);

        public delegate void Recycle_AfterArgs(Params_Recycle args);

        public delegate void Recycle_BeforeArgs(Params_Recycle args);

        public delegate void Recycle_WithArgs(Action<GameObject> orig, GameObject obj);

        public delegate void RecycleAll_AfterArgs(Params_RecycleAll args);

        public delegate void RecycleAll_BeforeArgs(Params_RecycleAll args);

        public delegate void RecycleAll_WithArgs(Action<GameObject> orig, GameObject prefab);

        public delegate GameObject Spawn_GameObject_AfterArgs(Params_Spawn_GameObject args, GameObject ret);

        public delegate void Spawn_GameObject_BeforeArgs(Params_Spawn_GameObject args);

        public delegate GameObject Spawn_GameObject_Transform_AfterArgs(Params_Spawn_GameObject_Transform args,
            GameObject ret);

        public delegate void Spawn_GameObject_Transform_BeforeArgs(Params_Spawn_GameObject_Transform args);

        public delegate GameObject Spawn_GameObject_Transform_Vector3_AfterArgs(
            Params_Spawn_GameObject_Transform_Vector3 args, GameObject ret);

        public delegate void Spawn_GameObject_Transform_Vector3_BeforeArgs(
            Params_Spawn_GameObject_Transform_Vector3 args);

        public delegate GameObject Spawn_GameObject_Transform_Vector3_Quaternion_AfterArgs(
            Params_Spawn_GameObject_Transform_Vector3_Quaternion args, GameObject ret);

        public delegate void Spawn_GameObject_Transform_Vector3_Quaternion_BeforeArgs(
            Params_Spawn_GameObject_Transform_Vector3_Quaternion args);

        public delegate GameObject Spawn_GameObject_Transform_Vector3_Quaternion_WithArgs(
            Func<GameObject, Transform, Vector3, Quaternion, GameObject> orig, GameObject prefab, Transform parent,
            Vector3 position, Quaternion rotation);

        public delegate GameObject Spawn_GameObject_Transform_Vector3_WithArgs(
            Func<GameObject, Transform, Vector3, GameObject> orig, GameObject prefab, Transform parent,
            Vector3 position);

        public delegate GameObject Spawn_GameObject_Transform_WithArgs(Func<GameObject, Transform, GameObject> orig,
            GameObject prefab, Transform parent);

        public delegate GameObject Spawn_GameObject_Vector3_AfterArgs(Params_Spawn_GameObject_Vector3 args,
            GameObject ret);

        public delegate void Spawn_GameObject_Vector3_BeforeArgs(Params_Spawn_GameObject_Vector3 args);

        public delegate GameObject Spawn_GameObject_Vector3_Quaternion_AfterArgs(
            Params_Spawn_GameObject_Vector3_Quaternion args, GameObject ret);

        public delegate void Spawn_GameObject_Vector3_Quaternion_BeforeArgs(
            Params_Spawn_GameObject_Vector3_Quaternion args);

        public delegate GameObject Spawn_GameObject_Vector3_Quaternion_WithArgs(
            Func<GameObject, Vector3, Quaternion, GameObject> orig, GameObject prefab, Vector3 position,
            Quaternion rotation);

        public delegate GameObject Spawn_GameObject_Vector3_WithArgs(Func<GameObject, Vector3, GameObject> orig,
            GameObject prefab, Vector3 position);

        public delegate GameObject Spawn_GameObject_WithArgs(Func<GameObject, GameObject> orig, GameObject prefab);

        public sealed class Params_CreatePool_GameObject
        {
            public GameObject prefab;
        }

        public sealed class Params_CreatePool_GameObject_int
        {
            public int initialPoolSize;
            public GameObject prefab;
        }

        public sealed class Params_Spawn_GameObject_Transform_Vector3_Quaternion
        {
            public Transform parent;
            public Vector3 position;
            public GameObject prefab;
            public Quaternion rotation;
        }

        public sealed class Params_Spawn_GameObject_Vector3_Quaternion
        {
            public Vector3 position;
            public GameObject prefab;
            public Quaternion rotation;
        }

        public sealed class Params_Spawn_GameObject_Transform_Vector3
        {
            public Transform parent;
            public Vector3 position;
            public GameObject prefab;
        }

        public sealed class Params_Spawn_GameObject_Vector3
        {
            public Vector3 position;
            public GameObject prefab;
        }

        public sealed class Params_Spawn_GameObject_Transform
        {
            public Transform parent;
            public GameObject prefab;
        }

        public sealed class Params_Spawn_GameObject
        {
            public GameObject prefab;
        }

        public sealed class Params_Recycle
        {
            public GameObject obj;
        }

        public sealed class Params_RecycleAll
        {
            public GameObject prefab;
        }

        public sealed class Params_CountPooled
        {
            public GameObject prefab;
        }

        public sealed class Params_CountSpawned
        {
            public GameObject prefab;
        }

        public sealed class Params_GetSpawned_GameObject_GameObject_bool
        {
            public bool appendList;
            public List<GameObject> list;
            public GameObject prefab;
        }

        public sealed class Params_GetSpawned_GameObject_GameObject
        {
            public List<GameObject> list;
            public GameObject prefab;
        }

        public sealed class Params_GetSpawned_GameObject
        {
            public GameObject prefab;
        }

        public sealed class Params_GetPooled_GameObject_GameObject_bool
        {
            public bool appendList;
            public List<GameObject> list;
            public GameObject prefab;
        }

        public sealed class Params_GetPooled_GameObject_GameObject
        {
            public List<GameObject> list;
            public GameObject prefab;
        }

        public sealed class Params_GetPooled_GameObject
        {
            public GameObject prefab;
        }

        public sealed class Params_DestroyPooled
        {
            public GameObject prefab;
        }

        public sealed class Params_DestroyAll
        {
            public GameObject prefab;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.CreatePool_GameObject_BeforeArgs CreatePool_GameObject
        {
            add
            {
                HookHandler._beforeCreatePool_GameObject += value;
                HookHandler.HookCreatePool_GameObject();
            }
            remove => HookHandler._beforeCreatePool_GameObject -= value;
        }

        public static event Delegates.CreatePool_GameObject_int_BeforeArgs CreatePool_GameObject_int
        {
            add
            {
                HookHandler._beforeCreatePool_GameObject_int += value;
                HookHandler.HookCreatePool_GameObject_int();
            }
            remove => HookHandler._beforeCreatePool_GameObject_int -= value;
        }

        public static event Delegates.Spawn_GameObject_Transform_Vector3_Quaternion_BeforeArgs
            Spawn_GameObject_Transform_Vector3_Quaternion
            {
                add
                {
                    HookHandler._beforeSpawn_GameObject_Transform_Vector3_Quaternion += value;
                    HookHandler.HookSpawn_GameObject_Transform_Vector3_Quaternion();
                }
                remove => HookHandler._beforeSpawn_GameObject_Transform_Vector3_Quaternion -= value;
            }

        public static event Delegates.Spawn_GameObject_Vector3_Quaternion_BeforeArgs Spawn_GameObject_Vector3_Quaternion
        {
            add
            {
                HookHandler._beforeSpawn_GameObject_Vector3_Quaternion += value;
                HookHandler.HookSpawn_GameObject_Vector3_Quaternion();
            }
            remove => HookHandler._beforeSpawn_GameObject_Vector3_Quaternion -= value;
        }

        public static event Delegates.Spawn_GameObject_Transform_Vector3_BeforeArgs Spawn_GameObject_Transform_Vector3
        {
            add
            {
                HookHandler._beforeSpawn_GameObject_Transform_Vector3 += value;
                HookHandler.HookSpawn_GameObject_Transform_Vector3();
            }
            remove => HookHandler._beforeSpawn_GameObject_Transform_Vector3 -= value;
        }

        public static event Delegates.Spawn_GameObject_Vector3_BeforeArgs Spawn_GameObject_Vector3
        {
            add
            {
                HookHandler._beforeSpawn_GameObject_Vector3 += value;
                HookHandler.HookSpawn_GameObject_Vector3();
            }
            remove => HookHandler._beforeSpawn_GameObject_Vector3 -= value;
        }

        public static event Delegates.Spawn_GameObject_Transform_BeforeArgs Spawn_GameObject_Transform
        {
            add
            {
                HookHandler._beforeSpawn_GameObject_Transform += value;
                HookHandler.HookSpawn_GameObject_Transform();
            }
            remove => HookHandler._beforeSpawn_GameObject_Transform -= value;
        }

        public static event Delegates.Spawn_GameObject_BeforeArgs Spawn_GameObject
        {
            add
            {
                HookHandler._beforeSpawn_GameObject += value;
                HookHandler.HookSpawn_GameObject();
            }
            remove => HookHandler._beforeSpawn_GameObject -= value;
        }

        public static event Delegates.Recycle_BeforeArgs Recycle
        {
            add
            {
                HookHandler._beforeRecycle += value;
                HookHandler.HookRecycle();
            }
            remove => HookHandler._beforeRecycle -= value;
        }

        public static event Delegates.RecycleAll_BeforeArgs RecycleAll
        {
            add
            {
                HookHandler._beforeRecycleAll += value;
                HookHandler.HookRecycleAll();
            }
            remove => HookHandler._beforeRecycleAll -= value;
        }

        public static event Delegates.CountPooled_BeforeArgs CountPooled
        {
            add
            {
                HookHandler._beforeCountPooled += value;
                HookHandler.HookCountPooled();
            }
            remove => HookHandler._beforeCountPooled -= value;
        }

        public static event Delegates.CountSpawned_BeforeArgs CountSpawned
        {
            add
            {
                HookHandler._beforeCountSpawned += value;
                HookHandler.HookCountSpawned();
            }
            remove => HookHandler._beforeCountSpawned -= value;
        }

        public static event Delegates.GetSpawned_GameObject_GameObject_bool_BeforeArgs
            GetSpawned_GameObject_GameObject_bool
            {
                add
                {
                    HookHandler._beforeGetSpawned_GameObject_GameObject_bool += value;
                    HookHandler.HookGetSpawned_GameObject_GameObject_bool();
                }
                remove => HookHandler._beforeGetSpawned_GameObject_GameObject_bool -= value;
            }

        public static event Delegates.GetSpawned_GameObject_GameObject_BeforeArgs GetSpawned_GameObject_GameObject
        {
            add
            {
                HookHandler._beforeGetSpawned_GameObject_GameObject += value;
                HookHandler.HookGetSpawned_GameObject_GameObject();
            }
            remove => HookHandler._beforeGetSpawned_GameObject_GameObject -= value;
        }

        public static event Delegates.GetSpawned_GameObject_BeforeArgs GetSpawned_GameObject
        {
            add
            {
                HookHandler._beforeGetSpawned_GameObject += value;
                HookHandler.HookGetSpawned_GameObject();
            }
            remove => HookHandler._beforeGetSpawned_GameObject -= value;
        }

        public static event Delegates.GetPooled_GameObject_GameObject_bool_BeforeArgs
            GetPooled_GameObject_GameObject_bool
            {
                add
                {
                    HookHandler._beforeGetPooled_GameObject_GameObject_bool += value;
                    HookHandler.HookGetPooled_GameObject_GameObject_bool();
                }
                remove => HookHandler._beforeGetPooled_GameObject_GameObject_bool -= value;
            }

        public static event Delegates.GetPooled_GameObject_GameObject_BeforeArgs GetPooled_GameObject_GameObject
        {
            add
            {
                HookHandler._beforeGetPooled_GameObject_GameObject += value;
                HookHandler.HookGetPooled_GameObject_GameObject();
            }
            remove => HookHandler._beforeGetPooled_GameObject_GameObject -= value;
        }

        public static event Delegates.GetPooled_GameObject_BeforeArgs GetPooled_GameObject
        {
            add
            {
                HookHandler._beforeGetPooled_GameObject += value;
                HookHandler.HookGetPooled_GameObject();
            }
            remove => HookHandler._beforeGetPooled_GameObject -= value;
        }

        public static event Delegates.DestroyPooled_BeforeArgs DestroyPooled
        {
            add
            {
                HookHandler._beforeDestroyPooled += value;
                HookHandler.HookDestroyPooled();
            }
            remove => HookHandler._beforeDestroyPooled -= value;
        }

        public static event Delegates.DestroyAll_BeforeArgs DestroyAll
        {
            add
            {
                HookHandler._beforeDestroyAll += value;
                HookHandler.HookDestroyAll();
            }
            remove => HookHandler._beforeDestroyAll -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.CreatePool_GameObject_AfterArgs CreatePool_GameObject
        {
            add
            {
                HookHandler._afterCreatePool_GameObject += value;
                HookHandler.HookCreatePool_GameObject();
            }
            remove => HookHandler._afterCreatePool_GameObject -= value;
        }

        public static event Delegates.CreatePool_GameObject_int_AfterArgs CreatePool_GameObject_int
        {
            add
            {
                HookHandler._afterCreatePool_GameObject_int += value;
                HookHandler.HookCreatePool_GameObject_int();
            }
            remove => HookHandler._afterCreatePool_GameObject_int -= value;
        }

        public static event Delegates.Spawn_GameObject_Transform_Vector3_Quaternion_AfterArgs
            Spawn_GameObject_Transform_Vector3_Quaternion
            {
                add
                {
                    HookHandler._afterSpawn_GameObject_Transform_Vector3_Quaternion += value;
                    HookHandler.HookSpawn_GameObject_Transform_Vector3_Quaternion();
                }
                remove => HookHandler._afterSpawn_GameObject_Transform_Vector3_Quaternion -= value;
            }

        public static event Delegates.Spawn_GameObject_Vector3_Quaternion_AfterArgs Spawn_GameObject_Vector3_Quaternion
        {
            add
            {
                HookHandler._afterSpawn_GameObject_Vector3_Quaternion += value;
                HookHandler.HookSpawn_GameObject_Vector3_Quaternion();
            }
            remove => HookHandler._afterSpawn_GameObject_Vector3_Quaternion -= value;
        }

        public static event Delegates.Spawn_GameObject_Transform_Vector3_AfterArgs Spawn_GameObject_Transform_Vector3
        {
            add
            {
                HookHandler._afterSpawn_GameObject_Transform_Vector3 += value;
                HookHandler.HookSpawn_GameObject_Transform_Vector3();
            }
            remove => HookHandler._afterSpawn_GameObject_Transform_Vector3 -= value;
        }

        public static event Delegates.Spawn_GameObject_Vector3_AfterArgs Spawn_GameObject_Vector3
        {
            add
            {
                HookHandler._afterSpawn_GameObject_Vector3 += value;
                HookHandler.HookSpawn_GameObject_Vector3();
            }
            remove => HookHandler._afterSpawn_GameObject_Vector3 -= value;
        }

        public static event Delegates.Spawn_GameObject_Transform_AfterArgs Spawn_GameObject_Transform
        {
            add
            {
                HookHandler._afterSpawn_GameObject_Transform += value;
                HookHandler.HookSpawn_GameObject_Transform();
            }
            remove => HookHandler._afterSpawn_GameObject_Transform -= value;
        }

        public static event Delegates.Spawn_GameObject_AfterArgs Spawn_GameObject
        {
            add
            {
                HookHandler._afterSpawn_GameObject += value;
                HookHandler.HookSpawn_GameObject();
            }
            remove => HookHandler._afterSpawn_GameObject -= value;
        }

        public static event Delegates.Recycle_AfterArgs Recycle
        {
            add
            {
                HookHandler._afterRecycle += value;
                HookHandler.HookRecycle();
            }
            remove => HookHandler._afterRecycle -= value;
        }

        public static event Delegates.RecycleAll_AfterArgs RecycleAll
        {
            add
            {
                HookHandler._afterRecycleAll += value;
                HookHandler.HookRecycleAll();
            }
            remove => HookHandler._afterRecycleAll -= value;
        }

        public static event Delegates.CountPooled_AfterArgs CountPooled
        {
            add
            {
                HookHandler._afterCountPooled += value;
                HookHandler.HookCountPooled();
            }
            remove => HookHandler._afterCountPooled -= value;
        }

        public static event Delegates.CountSpawned_AfterArgs CountSpawned
        {
            add
            {
                HookHandler._afterCountSpawned += value;
                HookHandler.HookCountSpawned();
            }
            remove => HookHandler._afterCountSpawned -= value;
        }

        public static event Delegates.GetSpawned_GameObject_GameObject_bool_AfterArgs
            GetSpawned_GameObject_GameObject_bool
            {
                add
                {
                    HookHandler._afterGetSpawned_GameObject_GameObject_bool += value;
                    HookHandler.HookGetSpawned_GameObject_GameObject_bool();
                }
                remove => HookHandler._afterGetSpawned_GameObject_GameObject_bool -= value;
            }

        public static event Delegates.GetSpawned_GameObject_GameObject_AfterArgs GetSpawned_GameObject_GameObject
        {
            add
            {
                HookHandler._afterGetSpawned_GameObject_GameObject += value;
                HookHandler.HookGetSpawned_GameObject_GameObject();
            }
            remove => HookHandler._afterGetSpawned_GameObject_GameObject -= value;
        }

        public static event Delegates.GetSpawned_GameObject_AfterArgs GetSpawned_GameObject
        {
            add
            {
                HookHandler._afterGetSpawned_GameObject += value;
                HookHandler.HookGetSpawned_GameObject();
            }
            remove => HookHandler._afterGetSpawned_GameObject -= value;
        }

        public static event Delegates.GetPooled_GameObject_GameObject_bool_AfterArgs
            GetPooled_GameObject_GameObject_bool
            {
                add
                {
                    HookHandler._afterGetPooled_GameObject_GameObject_bool += value;
                    HookHandler.HookGetPooled_GameObject_GameObject_bool();
                }
                remove => HookHandler._afterGetPooled_GameObject_GameObject_bool -= value;
            }

        public static event Delegates.GetPooled_GameObject_GameObject_AfterArgs GetPooled_GameObject_GameObject
        {
            add
            {
                HookHandler._afterGetPooled_GameObject_GameObject += value;
                HookHandler.HookGetPooled_GameObject_GameObject();
            }
            remove => HookHandler._afterGetPooled_GameObject_GameObject -= value;
        }

        public static event Delegates.GetPooled_GameObject_AfterArgs GetPooled_GameObject
        {
            add
            {
                HookHandler._afterGetPooled_GameObject += value;
                HookHandler.HookGetPooled_GameObject();
            }
            remove => HookHandler._afterGetPooled_GameObject -= value;
        }

        public static event Delegates.DestroyPooled_AfterArgs DestroyPooled
        {
            add
            {
                HookHandler._afterDestroyPooled += value;
                HookHandler.HookDestroyPooled();
            }
            remove => HookHandler._afterDestroyPooled -= value;
        }

        public static event Delegates.DestroyAll_AfterArgs DestroyAll
        {
            add
            {
                HookHandler._afterDestroyAll += value;
                HookHandler.HookDestroyAll();
            }
            remove => HookHandler._afterDestroyAll -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.ObjectPoolExtensions.hook_CreatePool_GameObject CreatePool_GameObject
        {
            add => On.ObjectPoolExtensions.CreatePool_GameObject += value;
            remove => On.ObjectPoolExtensions.CreatePool_GameObject -= value;
        }

        public static event On.ObjectPoolExtensions.hook_CreatePool_GameObject_int CreatePool_GameObject_int
        {
            add => On.ObjectPoolExtensions.CreatePool_GameObject_int += value;
            remove => On.ObjectPoolExtensions.CreatePool_GameObject_int -= value;
        }

        public static event On.ObjectPoolExtensions.hook_Spawn_GameObject_Transform_Vector3_Quaternion
            Spawn_GameObject_Transform_Vector3_Quaternion
            {
                add => On.ObjectPoolExtensions.Spawn_GameObject_Transform_Vector3_Quaternion += value;
                remove => On.ObjectPoolExtensions.Spawn_GameObject_Transform_Vector3_Quaternion -= value;
            }

        public static event On.ObjectPoolExtensions.hook_Spawn_GameObject_Vector3_Quaternion
            Spawn_GameObject_Vector3_Quaternion
            {
                add => On.ObjectPoolExtensions.Spawn_GameObject_Vector3_Quaternion += value;
                remove => On.ObjectPoolExtensions.Spawn_GameObject_Vector3_Quaternion -= value;
            }

        public static event On.ObjectPoolExtensions.hook_Spawn_GameObject_Transform_Vector3
            Spawn_GameObject_Transform_Vector3
            {
                add => On.ObjectPoolExtensions.Spawn_GameObject_Transform_Vector3 += value;
                remove => On.ObjectPoolExtensions.Spawn_GameObject_Transform_Vector3 -= value;
            }

        public static event On.ObjectPoolExtensions.hook_Spawn_GameObject_Vector3 Spawn_GameObject_Vector3
        {
            add => On.ObjectPoolExtensions.Spawn_GameObject_Vector3 += value;
            remove => On.ObjectPoolExtensions.Spawn_GameObject_Vector3 -= value;
        }

        public static event On.ObjectPoolExtensions.hook_Spawn_GameObject_Transform Spawn_GameObject_Transform
        {
            add => On.ObjectPoolExtensions.Spawn_GameObject_Transform += value;
            remove => On.ObjectPoolExtensions.Spawn_GameObject_Transform -= value;
        }

        public static event On.ObjectPoolExtensions.hook_Spawn_GameObject Spawn_GameObject
        {
            add => On.ObjectPoolExtensions.Spawn_GameObject += value;
            remove => On.ObjectPoolExtensions.Spawn_GameObject -= value;
        }

        public static event On.ObjectPoolExtensions.hook_Recycle Recycle
        {
            add => On.ObjectPoolExtensions.Recycle += value;
            remove => On.ObjectPoolExtensions.Recycle -= value;
        }

        public static event On.ObjectPoolExtensions.hook_RecycleAll RecycleAll
        {
            add => On.ObjectPoolExtensions.RecycleAll += value;
            remove => On.ObjectPoolExtensions.RecycleAll -= value;
        }

        public static event On.ObjectPoolExtensions.hook_CountPooled CountPooled
        {
            add => On.ObjectPoolExtensions.CountPooled += value;
            remove => On.ObjectPoolExtensions.CountPooled -= value;
        }

        public static event On.ObjectPoolExtensions.hook_CountSpawned CountSpawned
        {
            add => On.ObjectPoolExtensions.CountSpawned += value;
            remove => On.ObjectPoolExtensions.CountSpawned -= value;
        }

        public static event Delegates.GetSpawned_GameObject_GameObject_bool_WithArgs
            GetSpawned_GameObject_GameObject_bool
            {
                add => HookEndpointManager.Add<Delegates.GetSpawned_GameObject_GameObject_bool_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(ObjectPoolExtensions), "GetSpawned", false), value);
                remove => HookEndpointManager.Remove<Delegates.GetSpawned_GameObject_GameObject_bool_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(ObjectPoolExtensions), "GetSpawned", false), value);
            }

        public static event Delegates.GetSpawned_GameObject_GameObject_WithArgs GetSpawned_GameObject_GameObject
        {
            add => HookEndpointManager.Add<Delegates.GetSpawned_GameObject_GameObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ObjectPoolExtensions), "GetSpawned", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetSpawned_GameObject_GameObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ObjectPoolExtensions), "GetSpawned", false), value);
        }

        public static event On.ObjectPoolExtensions.hook_GetSpawned_GameObject GetSpawned_GameObject
        {
            add => On.ObjectPoolExtensions.GetSpawned_GameObject += value;
            remove => On.ObjectPoolExtensions.GetSpawned_GameObject -= value;
        }

        public static event Delegates.GetPooled_GameObject_GameObject_bool_WithArgs GetPooled_GameObject_GameObject_bool
        {
            add => HookEndpointManager.Add<Delegates.GetPooled_GameObject_GameObject_bool_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ObjectPoolExtensions), "GetPooled", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetPooled_GameObject_GameObject_bool_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ObjectPoolExtensions), "GetPooled", false), value);
        }

        public static event Delegates.GetPooled_GameObject_GameObject_WithArgs GetPooled_GameObject_GameObject
        {
            add => HookEndpointManager.Add<Delegates.GetPooled_GameObject_GameObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ObjectPoolExtensions), "GetPooled", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetPooled_GameObject_GameObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ObjectPoolExtensions), "GetPooled", false), value);
        }

        public static event On.ObjectPoolExtensions.hook_GetPooled_GameObject GetPooled_GameObject
        {
            add => On.ObjectPoolExtensions.GetPooled_GameObject += value;
            remove => On.ObjectPoolExtensions.GetPooled_GameObject -= value;
        }

        public static event On.ObjectPoolExtensions.hook_DestroyPooled DestroyPooled
        {
            add => On.ObjectPoolExtensions.DestroyPooled += value;
            remove => On.ObjectPoolExtensions.DestroyPooled -= value;
        }

        public static event On.ObjectPoolExtensions.hook_DestroyAll DestroyAll
        {
            add => On.ObjectPoolExtensions.DestroyAll += value;
            remove => On.ObjectPoolExtensions.DestroyAll -= value;
        }
    }
}