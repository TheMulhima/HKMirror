using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using Touch = InControl.Touch;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TouchSprite class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTouchSprite
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Dirty()
        {
            if (!HookedList.Contains("get_Dirty"))
            {
                HookedList.Add("get_Dirty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_Dirty"), get_Dirty);
            }
        }

        internal static event Delegates.get_Dirty_BeforeArgs _beforeget_Dirty;
        internal static event Delegates.get_Dirty_AfterArgs _afterget_Dirty;

        private static bool get_Dirty(Func<TouchSprite, bool> orig, TouchSprite self)
        {
            Delegates.Params_get_Dirty @params = new()
            {
                self = self
            };
            if (_beforeget_Dirty != null)
                foreach (Delegates.get_Dirty_BeforeArgs toInvoke in _beforeget_Dirty.GetInvocationList())
                    try
                    {
                        _beforeget_Dirty?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Dirty != null)
                foreach (Delegates.get_Dirty_AfterArgs toInvoke in _afterget_Dirty.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Dirty.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Dirty()
        {
            if (!HookedList.Contains("set_Dirty"))
            {
                HookedList.Add("set_Dirty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_Dirty"), set_Dirty);
            }
        }

        internal static event Delegates.set_Dirty_BeforeArgs _beforeset_Dirty;
        internal static event Delegates.set_Dirty_AfterArgs _afterset_Dirty;

        private static void set_Dirty(Action<TouchSprite, bool> orig, TouchSprite self, bool value)
        {
            Delegates.Params_set_Dirty @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Dirty != null)
                foreach (Delegates.set_Dirty_BeforeArgs toInvoke in _beforeset_Dirty.GetInvocationList())
                    try
                    {
                        _beforeset_Dirty?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Dirty != null)
                foreach (Delegates.set_Dirty_AfterArgs toInvoke in _afterset_Dirty.GetInvocationList())
                    try
                    {
                        _afterset_Dirty.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_Ready()
        {
            if (!HookedList.Contains("get_Ready"))
            {
                HookedList.Add("get_Ready");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_Ready"), get_Ready);
            }
        }

        internal static event Delegates.get_Ready_BeforeArgs _beforeget_Ready;
        internal static event Delegates.get_Ready_AfterArgs _afterget_Ready;

        private static bool get_Ready(Func<TouchSprite, bool> orig, TouchSprite self)
        {
            Delegates.Params_get_Ready @params = new()
            {
                self = self
            };
            if (_beforeget_Ready != null)
                foreach (Delegates.get_Ready_BeforeArgs toInvoke in _beforeget_Ready.GetInvocationList())
                    try
                    {
                        _beforeget_Ready?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Ready != null)
                foreach (Delegates.get_Ready_AfterArgs toInvoke in _afterget_Ready.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Ready.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Ready()
        {
            if (!HookedList.Contains("set_Ready"))
            {
                HookedList.Add("set_Ready");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_Ready"), set_Ready);
            }
        }

        internal static event Delegates.set_Ready_BeforeArgs _beforeset_Ready;
        internal static event Delegates.set_Ready_AfterArgs _afterset_Ready;

        private static void set_Ready(Action<TouchSprite, bool> orig, TouchSprite self, bool value)
        {
            Delegates.Params_set_Ready @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Ready != null)
                foreach (Delegates.set_Ready_BeforeArgs toInvoke in _beforeset_Ready.GetInvocationList())
                    try
                    {
                        _beforeset_Ready?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Ready != null)
                foreach (Delegates.set_Ready_AfterArgs toInvoke in _afterset_Ready.GetInvocationList())
                    try
                    {
                        _afterset_Ready.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCreate()
        {
            if (!HookedList.Contains("Create"))
            {
                HookedList.Add("Create");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "Create"), Create);
            }
        }

        internal static event Delegates.Create_BeforeArgs _beforeCreate;
        internal static event Delegates.Create_AfterArgs _afterCreate;

        private static void Create(Action<TouchSprite, string, Transform, int> orig, TouchSprite self,
            string gameObjectName, Transform parentTransform, int sortingOrder)
        {
            Delegates.Params_Create @params = new()
            {
                self = self, gameObjectName = gameObjectName, parentTransform = parentTransform,
                sortingOrder = sortingOrder
            };
            if (_beforeCreate != null)
                foreach (Delegates.Create_BeforeArgs toInvoke in _beforeCreate.GetInvocationList())
                    try
                    {
                        _beforeCreate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            gameObjectName = @params.gameObjectName;
            parentTransform = @params.parentTransform;
            sortingOrder = @params.sortingOrder;
            orig(self, gameObjectName, parentTransform, sortingOrder);
            if (_afterCreate != null)
                foreach (Delegates.Create_AfterArgs toInvoke in _afterCreate.GetInvocationList())
                    try
                    {
                        _afterCreate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDelete()
        {
            if (!HookedList.Contains("Delete"))
            {
                HookedList.Add("Delete");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "Delete"), Delete);
            }
        }

        internal static event Delegates.Delete_BeforeArgs _beforeDelete;
        internal static event Delegates.Delete_AfterArgs _afterDelete;

        private static void Delete(Action<TouchSprite> orig, TouchSprite self)
        {
            Delegates.Params_Delete @params = new()
            {
                self = self
            };
            if (_beforeDelete != null)
                foreach (Delegates.Delete_BeforeArgs toInvoke in _beforeDelete.GetInvocationList())
                    try
                    {
                        _beforeDelete?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterDelete != null)
                foreach (Delegates.Delete_AfterArgs toInvoke in _afterDelete.GetInvocationList())
                    try
                    {
                        _afterDelete.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "Update"), Update);
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(Action<TouchSprite> orig, TouchSprite self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdate_bool()
        {
            if (!HookedList.Contains("Update_bool"))
            {
                HookedList.Add("Update_bool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "Update_bool"), Update_bool);
            }
        }

        internal static event Delegates.Update_bool_BeforeArgs _beforeUpdate_bool;
        internal static event Delegates.Update_bool_AfterArgs _afterUpdate_bool;

        private static void Update_bool(Action<TouchSprite, bool> orig, TouchSprite self, bool forceUpdate)
        {
            Delegates.Params_Update_bool @params = new()
            {
                self = self, forceUpdate = forceUpdate
            };
            if (_beforeUpdate_bool != null)
                foreach (Delegates.Update_bool_BeforeArgs toInvoke in _beforeUpdate_bool.GetInvocationList())
                    try
                    {
                        _beforeUpdate_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            forceUpdate = @params.forceUpdate;
            orig(self, forceUpdate);
            if (_afterUpdate_bool != null)
                foreach (Delegates.Update_bool_AfterArgs toInvoke in _afterUpdate_bool.GetInvocationList())
                    try
                    {
                        _afterUpdate_bool.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCreateSpriteGameObject()
        {
            if (!HookedList.Contains("CreateSpriteGameObject"))
            {
                HookedList.Add("CreateSpriteGameObject");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "CreateSpriteGameObject"),
                    CreateSpriteGameObject);
            }
        }

        internal static event Delegates.CreateSpriteGameObject_BeforeArgs _beforeCreateSpriteGameObject;
        internal static event Delegates.CreateSpriteGameObject_AfterArgs _afterCreateSpriteGameObject;

        private static GameObject CreateSpriteGameObject(Func<TouchSprite, string, Transform, GameObject> orig,
            TouchSprite self, string name, Transform parentTransform)
        {
            Delegates.Params_CreateSpriteGameObject @params = new()
            {
                self = self, name = name, parentTransform = parentTransform
            };
            if (_beforeCreateSpriteGameObject != null)
                foreach (Delegates.CreateSpriteGameObject_BeforeArgs toInvoke in _beforeCreateSpriteGameObject
                             .GetInvocationList())
                    try
                    {
                        _beforeCreateSpriteGameObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            name = @params.name;
            parentTransform = @params.parentTransform;
            var retVal = orig(self, name, parentTransform);
            if (_afterCreateSpriteGameObject != null)
                foreach (Delegates.CreateSpriteGameObject_AfterArgs toInvoke in _afterCreateSpriteGameObject
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterCreateSpriteGameObject.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCreateSpriteRenderer()
        {
            if (!HookedList.Contains("CreateSpriteRenderer"))
            {
                HookedList.Add("CreateSpriteRenderer");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "CreateSpriteRenderer"),
                    CreateSpriteRenderer);
            }
        }

        internal static event Delegates.CreateSpriteRenderer_BeforeArgs _beforeCreateSpriteRenderer;
        internal static event Delegates.CreateSpriteRenderer_AfterArgs _afterCreateSpriteRenderer;

        private static SpriteRenderer CreateSpriteRenderer(
            Func<TouchSprite, GameObject, Sprite, int, SpriteRenderer> orig, TouchSprite self,
            GameObject spriteGameObject, Sprite sprite, int sortingOrder)
        {
            Delegates.Params_CreateSpriteRenderer @params = new()
            {
                self = self, spriteGameObject = spriteGameObject, sprite = sprite, sortingOrder = sortingOrder
            };
            if (_beforeCreateSpriteRenderer != null)
                foreach (Delegates.CreateSpriteRenderer_BeforeArgs toInvoke in _beforeCreateSpriteRenderer
                             .GetInvocationList())
                    try
                    {
                        _beforeCreateSpriteRenderer?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            spriteGameObject = @params.spriteGameObject;
            sprite = @params.sprite;
            sortingOrder = @params.sortingOrder;
            var retVal = orig(self, spriteGameObject, sprite, sortingOrder);
            if (_afterCreateSpriteRenderer != null)
                foreach (Delegates.CreateSpriteRenderer_AfterArgs toInvoke in _afterCreateSpriteRenderer
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterCreateSpriteRenderer.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookScaleSpriteInPixels()
        {
            if (!HookedList.Contains("ScaleSpriteInPixels"))
            {
                HookedList.Add("ScaleSpriteInPixels");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "ScaleSpriteInPixels"),
                    ScaleSpriteInPixels);
            }
        }

        internal static event Delegates.ScaleSpriteInPixels_BeforeArgs _beforeScaleSpriteInPixels;
        internal static event Delegates.ScaleSpriteInPixels_AfterArgs _afterScaleSpriteInPixels;

        private static void ScaleSpriteInPixels(Action<TouchSprite, GameObject, SpriteRenderer, Vector2> orig,
            TouchSprite self, GameObject spriteGameObject, SpriteRenderer spriteRenderer, Vector2 size)
        {
            Delegates.Params_ScaleSpriteInPixels @params = new()
            {
                self = self, spriteGameObject = spriteGameObject, spriteRenderer = spriteRenderer, size = size
            };
            if (_beforeScaleSpriteInPixels != null)
                foreach (Delegates.ScaleSpriteInPixels_BeforeArgs toInvoke in _beforeScaleSpriteInPixels
                             .GetInvocationList())
                    try
                    {
                        _beforeScaleSpriteInPixels?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            spriteGameObject = @params.spriteGameObject;
            spriteRenderer = @params.spriteRenderer;
            size = @params.size;
            orig(self, spriteGameObject, spriteRenderer, size);
            if (_afterScaleSpriteInPixels != null)
                foreach (Delegates.ScaleSpriteInPixels_AfterArgs toInvoke in
                         _afterScaleSpriteInPixels.GetInvocationList())
                    try
                    {
                        _afterScaleSpriteInPixels.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScaleSpriteInPercent()
        {
            if (!HookedList.Contains("ScaleSpriteInPercent"))
            {
                HookedList.Add("ScaleSpriteInPercent");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "ScaleSpriteInPercent"),
                    ScaleSpriteInPercent);
            }
        }

        internal static event Delegates.ScaleSpriteInPercent_BeforeArgs _beforeScaleSpriteInPercent;
        internal static event Delegates.ScaleSpriteInPercent_AfterArgs _afterScaleSpriteInPercent;

        private static void ScaleSpriteInPercent(Action<TouchSprite, GameObject, SpriteRenderer, Vector2> orig,
            TouchSprite self, GameObject spriteGameObject, SpriteRenderer spriteRenderer, Vector2 size)
        {
            Delegates.Params_ScaleSpriteInPercent @params = new()
            {
                self = self, spriteGameObject = spriteGameObject, spriteRenderer = spriteRenderer, size = size
            };
            if (_beforeScaleSpriteInPercent != null)
                foreach (Delegates.ScaleSpriteInPercent_BeforeArgs toInvoke in _beforeScaleSpriteInPercent
                             .GetInvocationList())
                    try
                    {
                        _beforeScaleSpriteInPercent?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            spriteGameObject = @params.spriteGameObject;
            spriteRenderer = @params.spriteRenderer;
            size = @params.size;
            orig(self, spriteGameObject, spriteRenderer, size);
            if (_afterScaleSpriteInPercent != null)
                foreach (Delegates.ScaleSpriteInPercent_AfterArgs toInvoke in _afterScaleSpriteInPercent
                             .GetInvocationList())
                    try
                    {
                        _afterScaleSpriteInPercent.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookContains_Vector2()
        {
            if (!HookedList.Contains("Contains_Vector2"))
            {
                HookedList.Add("Contains_Vector2");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "Contains_Vector2"), Contains_Vector2);
            }
        }

        internal static event Delegates.Contains_Vector2_BeforeArgs _beforeContains_Vector2;
        internal static event Delegates.Contains_Vector2_AfterArgs _afterContains_Vector2;

        private static bool Contains_Vector2(Func<TouchSprite, Vector2, bool> orig, TouchSprite self,
            Vector2 testWorldPoint)
        {
            Delegates.Params_Contains_Vector2 @params = new()
            {
                self = self, testWorldPoint = testWorldPoint
            };
            if (_beforeContains_Vector2 != null)
                foreach (Delegates.Contains_Vector2_BeforeArgs toInvoke in _beforeContains_Vector2.GetInvocationList())
                    try
                    {
                        _beforeContains_Vector2?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            testWorldPoint = @params.testWorldPoint;
            var retVal = orig(self, testWorldPoint);
            if (_afterContains_Vector2 != null)
                foreach (Delegates.Contains_Vector2_AfterArgs toInvoke in _afterContains_Vector2.GetInvocationList())
                    try
                    {
                        retVal = _afterContains_Vector2.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookContains_Touch()
        {
            if (!HookedList.Contains("Contains_Touch"))
            {
                HookedList.Add("Contains_Touch");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "Contains_Touch"), Contains_Touch);
            }
        }

        internal static event Delegates.Contains_Touch_BeforeArgs _beforeContains_Touch;
        internal static event Delegates.Contains_Touch_AfterArgs _afterContains_Touch;

        private static bool Contains_Touch(Func<TouchSprite, Touch, bool> orig, TouchSprite self, Touch touch)
        {
            Delegates.Params_Contains_Touch @params = new()
            {
                self = self, touch = touch
            };
            if (_beforeContains_Touch != null)
                foreach (Delegates.Contains_Touch_BeforeArgs toInvoke in _beforeContains_Touch.GetInvocationList())
                    try
                    {
                        _beforeContains_Touch?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            touch = @params.touch;
            var retVal = orig(self, touch);
            if (_afterContains_Touch != null)
                foreach (Delegates.Contains_Touch_AfterArgs toInvoke in _afterContains_Touch.GetInvocationList())
                    try
                    {
                        retVal = _afterContains_Touch.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookDrawGizmos()
        {
            if (!HookedList.Contains("DrawGizmos"))
            {
                HookedList.Add("DrawGizmos");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "DrawGizmos"), DrawGizmos);
            }
        }

        internal static event Delegates.DrawGizmos_BeforeArgs _beforeDrawGizmos;
        internal static event Delegates.DrawGizmos_AfterArgs _afterDrawGizmos;

        private static void DrawGizmos(Action<TouchSprite, Vector3, Color> orig, TouchSprite self, Vector3 position,
            Color color)
        {
            Delegates.Params_DrawGizmos @params = new()
            {
                self = self, position = position, color = color
            };
            if (_beforeDrawGizmos != null)
                foreach (Delegates.DrawGizmos_BeforeArgs toInvoke in _beforeDrawGizmos.GetInvocationList())
                    try
                    {
                        _beforeDrawGizmos?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            position = @params.position;
            color = @params.color;
            orig(self, position, color);
            if (_afterDrawGizmos != null)
                foreach (Delegates.DrawGizmos_AfterArgs toInvoke in _afterDrawGizmos.GetInvocationList())
                    try
                    {
                        _afterDrawGizmos.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_State()
        {
            if (!HookedList.Contains("get_State"))
            {
                HookedList.Add("get_State");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_State"), get_State);
            }
        }

        internal static event Delegates.get_State_BeforeArgs _beforeget_State;
        internal static event Delegates.get_State_AfterArgs _afterget_State;

        private static bool get_State(Func<TouchSprite, bool> orig, TouchSprite self)
        {
            Delegates.Params_get_State @params = new()
            {
                self = self
            };
            if (_beforeget_State != null)
                foreach (Delegates.get_State_BeforeArgs toInvoke in _beforeget_State.GetInvocationList())
                    try
                    {
                        _beforeget_State?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_State != null)
                foreach (Delegates.get_State_AfterArgs toInvoke in _afterget_State.GetInvocationList())
                    try
                    {
                        retVal = _afterget_State.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_State()
        {
            if (!HookedList.Contains("set_State"))
            {
                HookedList.Add("set_State");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_State"), set_State);
            }
        }

        internal static event Delegates.set_State_BeforeArgs _beforeset_State;
        internal static event Delegates.set_State_AfterArgs _afterset_State;

        private static void set_State(Action<TouchSprite, bool> orig, TouchSprite self, bool value)
        {
            Delegates.Params_set_State @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_State != null)
                foreach (Delegates.set_State_BeforeArgs toInvoke in _beforeset_State.GetInvocationList())
                    try
                    {
                        _beforeset_State?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_State != null)
                foreach (Delegates.set_State_AfterArgs toInvoke in _afterset_State.GetInvocationList())
                    try
                    {
                        _afterset_State.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_BusySprite()
        {
            if (!HookedList.Contains("get_BusySprite"))
            {
                HookedList.Add("get_BusySprite");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_BusySprite"), get_BusySprite);
            }
        }

        internal static event Delegates.get_BusySprite_BeforeArgs _beforeget_BusySprite;
        internal static event Delegates.get_BusySprite_AfterArgs _afterget_BusySprite;

        private static Sprite get_BusySprite(Func<TouchSprite, Sprite> orig, TouchSprite self)
        {
            Delegates.Params_get_BusySprite @params = new()
            {
                self = self
            };
            if (_beforeget_BusySprite != null)
                foreach (Delegates.get_BusySprite_BeforeArgs toInvoke in _beforeget_BusySprite.GetInvocationList())
                    try
                    {
                        _beforeget_BusySprite?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_BusySprite != null)
                foreach (Delegates.get_BusySprite_AfterArgs toInvoke in _afterget_BusySprite.GetInvocationList())
                    try
                    {
                        retVal = _afterget_BusySprite.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_BusySprite()
        {
            if (!HookedList.Contains("set_BusySprite"))
            {
                HookedList.Add("set_BusySprite");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_BusySprite"), set_BusySprite);
            }
        }

        internal static event Delegates.set_BusySprite_BeforeArgs _beforeset_BusySprite;
        internal static event Delegates.set_BusySprite_AfterArgs _afterset_BusySprite;

        private static void set_BusySprite(Action<TouchSprite, Sprite> orig, TouchSprite self, Sprite value)
        {
            Delegates.Params_set_BusySprite @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_BusySprite != null)
                foreach (Delegates.set_BusySprite_BeforeArgs toInvoke in _beforeset_BusySprite.GetInvocationList())
                    try
                    {
                        _beforeset_BusySprite?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_BusySprite != null)
                foreach (Delegates.set_BusySprite_AfterArgs toInvoke in _afterset_BusySprite.GetInvocationList())
                    try
                    {
                        _afterset_BusySprite.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_IdleSprite()
        {
            if (!HookedList.Contains("get_IdleSprite"))
            {
                HookedList.Add("get_IdleSprite");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_IdleSprite"), get_IdleSprite);
            }
        }

        internal static event Delegates.get_IdleSprite_BeforeArgs _beforeget_IdleSprite;
        internal static event Delegates.get_IdleSprite_AfterArgs _afterget_IdleSprite;

        private static Sprite get_IdleSprite(Func<TouchSprite, Sprite> orig, TouchSprite self)
        {
            Delegates.Params_get_IdleSprite @params = new()
            {
                self = self
            };
            if (_beforeget_IdleSprite != null)
                foreach (Delegates.get_IdleSprite_BeforeArgs toInvoke in _beforeget_IdleSprite.GetInvocationList())
                    try
                    {
                        _beforeget_IdleSprite?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IdleSprite != null)
                foreach (Delegates.get_IdleSprite_AfterArgs toInvoke in _afterget_IdleSprite.GetInvocationList())
                    try
                    {
                        retVal = _afterget_IdleSprite.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_IdleSprite()
        {
            if (!HookedList.Contains("set_IdleSprite"))
            {
                HookedList.Add("set_IdleSprite");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_IdleSprite"), set_IdleSprite);
            }
        }

        internal static event Delegates.set_IdleSprite_BeforeArgs _beforeset_IdleSprite;
        internal static event Delegates.set_IdleSprite_AfterArgs _afterset_IdleSprite;

        private static void set_IdleSprite(Action<TouchSprite, Sprite> orig, TouchSprite self, Sprite value)
        {
            Delegates.Params_set_IdleSprite @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_IdleSprite != null)
                foreach (Delegates.set_IdleSprite_BeforeArgs toInvoke in _beforeset_IdleSprite.GetInvocationList())
                    try
                    {
                        _beforeset_IdleSprite?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_IdleSprite != null)
                foreach (Delegates.set_IdleSprite_AfterArgs toInvoke in _afterset_IdleSprite.GetInvocationList())
                    try
                    {
                        _afterset_IdleSprite.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookset_Sprite()
        {
            if (!HookedList.Contains("set_Sprite"))
            {
                HookedList.Add("set_Sprite");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_Sprite"), set_Sprite);
            }
        }

        internal static event Delegates.set_Sprite_BeforeArgs _beforeset_Sprite;
        internal static event Delegates.set_Sprite_AfterArgs _afterset_Sprite;

        private static void set_Sprite(Action<TouchSprite, Sprite> orig, TouchSprite self, Sprite value)
        {
            Delegates.Params_set_Sprite @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Sprite != null)
                foreach (Delegates.set_Sprite_BeforeArgs toInvoke in _beforeset_Sprite.GetInvocationList())
                    try
                    {
                        _beforeset_Sprite?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Sprite != null)
                foreach (Delegates.set_Sprite_AfterArgs toInvoke in _afterset_Sprite.GetInvocationList())
                    try
                    {
                        _afterset_Sprite.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_BusyColor()
        {
            if (!HookedList.Contains("get_BusyColor"))
            {
                HookedList.Add("get_BusyColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_BusyColor"), get_BusyColor);
            }
        }

        internal static event Delegates.get_BusyColor_BeforeArgs _beforeget_BusyColor;
        internal static event Delegates.get_BusyColor_AfterArgs _afterget_BusyColor;

        private static Color get_BusyColor(Func<TouchSprite, Color> orig, TouchSprite self)
        {
            Delegates.Params_get_BusyColor @params = new()
            {
                self = self
            };
            if (_beforeget_BusyColor != null)
                foreach (Delegates.get_BusyColor_BeforeArgs toInvoke in _beforeget_BusyColor.GetInvocationList())
                    try
                    {
                        _beforeget_BusyColor?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_BusyColor != null)
                foreach (Delegates.get_BusyColor_AfterArgs toInvoke in _afterget_BusyColor.GetInvocationList())
                    try
                    {
                        retVal = _afterget_BusyColor.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_BusyColor()
        {
            if (!HookedList.Contains("set_BusyColor"))
            {
                HookedList.Add("set_BusyColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_BusyColor"), set_BusyColor);
            }
        }

        internal static event Delegates.set_BusyColor_BeforeArgs _beforeset_BusyColor;
        internal static event Delegates.set_BusyColor_AfterArgs _afterset_BusyColor;

        private static void set_BusyColor(Action<TouchSprite, Color> orig, TouchSprite self, Color value)
        {
            Delegates.Params_set_BusyColor @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_BusyColor != null)
                foreach (Delegates.set_BusyColor_BeforeArgs toInvoke in _beforeset_BusyColor.GetInvocationList())
                    try
                    {
                        _beforeset_BusyColor?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_BusyColor != null)
                foreach (Delegates.set_BusyColor_AfterArgs toInvoke in _afterset_BusyColor.GetInvocationList())
                    try
                    {
                        _afterset_BusyColor.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_IdleColor()
        {
            if (!HookedList.Contains("get_IdleColor"))
            {
                HookedList.Add("get_IdleColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_IdleColor"), get_IdleColor);
            }
        }

        internal static event Delegates.get_IdleColor_BeforeArgs _beforeget_IdleColor;
        internal static event Delegates.get_IdleColor_AfterArgs _afterget_IdleColor;

        private static Color get_IdleColor(Func<TouchSprite, Color> orig, TouchSprite self)
        {
            Delegates.Params_get_IdleColor @params = new()
            {
                self = self
            };
            if (_beforeget_IdleColor != null)
                foreach (Delegates.get_IdleColor_BeforeArgs toInvoke in _beforeget_IdleColor.GetInvocationList())
                    try
                    {
                        _beforeget_IdleColor?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IdleColor != null)
                foreach (Delegates.get_IdleColor_AfterArgs toInvoke in _afterget_IdleColor.GetInvocationList())
                    try
                    {
                        retVal = _afterget_IdleColor.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_IdleColor()
        {
            if (!HookedList.Contains("set_IdleColor"))
            {
                HookedList.Add("set_IdleColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_IdleColor"), set_IdleColor);
            }
        }

        internal static event Delegates.set_IdleColor_BeforeArgs _beforeset_IdleColor;
        internal static event Delegates.set_IdleColor_AfterArgs _afterset_IdleColor;

        private static void set_IdleColor(Action<TouchSprite, Color> orig, TouchSprite self, Color value)
        {
            Delegates.Params_set_IdleColor @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_IdleColor != null)
                foreach (Delegates.set_IdleColor_BeforeArgs toInvoke in _beforeset_IdleColor.GetInvocationList())
                    try
                    {
                        _beforeset_IdleColor?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_IdleColor != null)
                foreach (Delegates.set_IdleColor_AfterArgs toInvoke in _afterset_IdleColor.GetInvocationList())
                    try
                    {
                        _afterset_IdleColor.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_Shape()
        {
            if (!HookedList.Contains("get_Shape"))
            {
                HookedList.Add("get_Shape");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_Shape"), get_Shape);
            }
        }

        internal static event Delegates.get_Shape_BeforeArgs _beforeget_Shape;
        internal static event Delegates.get_Shape_AfterArgs _afterget_Shape;

        private static TouchSpriteShape get_Shape(Func<TouchSprite, TouchSpriteShape> orig, TouchSprite self)
        {
            Delegates.Params_get_Shape @params = new()
            {
                self = self
            };
            if (_beforeget_Shape != null)
                foreach (Delegates.get_Shape_BeforeArgs toInvoke in _beforeget_Shape.GetInvocationList())
                    try
                    {
                        _beforeget_Shape?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Shape != null)
                foreach (Delegates.get_Shape_AfterArgs toInvoke in _afterget_Shape.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Shape.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Shape()
        {
            if (!HookedList.Contains("set_Shape"))
            {
                HookedList.Add("set_Shape");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_Shape"), set_Shape);
            }
        }

        internal static event Delegates.set_Shape_BeforeArgs _beforeset_Shape;
        internal static event Delegates.set_Shape_AfterArgs _afterset_Shape;

        private static void set_Shape(Action<TouchSprite, TouchSpriteShape> orig, TouchSprite self,
            TouchSpriteShape value)
        {
            Delegates.Params_set_Shape @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Shape != null)
                foreach (Delegates.set_Shape_BeforeArgs toInvoke in _beforeset_Shape.GetInvocationList())
                    try
                    {
                        _beforeset_Shape?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Shape != null)
                foreach (Delegates.set_Shape_AfterArgs toInvoke in _afterset_Shape.GetInvocationList())
                    try
                    {
                        _afterset_Shape.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_SizeUnitType()
        {
            if (!HookedList.Contains("get_SizeUnitType"))
            {
                HookedList.Add("get_SizeUnitType");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_SizeUnitType"), get_SizeUnitType);
            }
        }

        internal static event Delegates.get_SizeUnitType_BeforeArgs _beforeget_SizeUnitType;
        internal static event Delegates.get_SizeUnitType_AfterArgs _afterget_SizeUnitType;

        private static TouchUnitType get_SizeUnitType(Func<TouchSprite, TouchUnitType> orig, TouchSprite self)
        {
            Delegates.Params_get_SizeUnitType @params = new()
            {
                self = self
            };
            if (_beforeget_SizeUnitType != null)
                foreach (Delegates.get_SizeUnitType_BeforeArgs toInvoke in _beforeget_SizeUnitType.GetInvocationList())
                    try
                    {
                        _beforeget_SizeUnitType?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SizeUnitType != null)
                foreach (Delegates.get_SizeUnitType_AfterArgs toInvoke in _afterget_SizeUnitType.GetInvocationList())
                    try
                    {
                        retVal = _afterget_SizeUnitType.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_SizeUnitType()
        {
            if (!HookedList.Contains("set_SizeUnitType"))
            {
                HookedList.Add("set_SizeUnitType");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_SizeUnitType"), set_SizeUnitType);
            }
        }

        internal static event Delegates.set_SizeUnitType_BeforeArgs _beforeset_SizeUnitType;
        internal static event Delegates.set_SizeUnitType_AfterArgs _afterset_SizeUnitType;

        private static void set_SizeUnitType(Action<TouchSprite, TouchUnitType> orig, TouchSprite self,
            TouchUnitType value)
        {
            Delegates.Params_set_SizeUnitType @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_SizeUnitType != null)
                foreach (Delegates.set_SizeUnitType_BeforeArgs toInvoke in _beforeset_SizeUnitType.GetInvocationList())
                    try
                    {
                        _beforeset_SizeUnitType?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_SizeUnitType != null)
                foreach (Delegates.set_SizeUnitType_AfterArgs toInvoke in _afterset_SizeUnitType.GetInvocationList())
                    try
                    {
                        _afterset_SizeUnitType.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_Size()
        {
            if (!HookedList.Contains("get_Size"))
            {
                HookedList.Add("get_Size");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_Size"), get_Size);
            }
        }

        internal static event Delegates.get_Size_BeforeArgs _beforeget_Size;
        internal static event Delegates.get_Size_AfterArgs _afterget_Size;

        private static Vector2 get_Size(Func<TouchSprite, Vector2> orig, TouchSprite self)
        {
            Delegates.Params_get_Size @params = new()
            {
                self = self
            };
            if (_beforeget_Size != null)
                foreach (Delegates.get_Size_BeforeArgs toInvoke in _beforeget_Size.GetInvocationList())
                    try
                    {
                        _beforeget_Size?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Size != null)
                foreach (Delegates.get_Size_AfterArgs toInvoke in _afterget_Size.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Size.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Size()
        {
            if (!HookedList.Contains("set_Size"))
            {
                HookedList.Add("set_Size");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_Size"), set_Size);
            }
        }

        internal static event Delegates.set_Size_BeforeArgs _beforeset_Size;
        internal static event Delegates.set_Size_AfterArgs _afterset_Size;

        private static void set_Size(Action<TouchSprite, Vector2> orig, TouchSprite self, Vector2 value)
        {
            Delegates.Params_set_Size @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Size != null)
                foreach (Delegates.set_Size_BeforeArgs toInvoke in _beforeset_Size.GetInvocationList())
                    try
                    {
                        _beforeset_Size?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Size != null)
                foreach (Delegates.set_Size_AfterArgs toInvoke in _afterset_Size.GetInvocationList())
                    try
                    {
                        _afterset_Size.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_WorldSize()
        {
            if (!HookedList.Contains("get_WorldSize"))
            {
                HookedList.Add("get_WorldSize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_WorldSize"), get_WorldSize);
            }
        }

        internal static event Delegates.get_WorldSize_BeforeArgs _beforeget_WorldSize;
        internal static event Delegates.get_WorldSize_AfterArgs _afterget_WorldSize;

        private static Vector2 get_WorldSize(Func<TouchSprite, Vector2> orig, TouchSprite self)
        {
            Delegates.Params_get_WorldSize @params = new()
            {
                self = self
            };
            if (_beforeget_WorldSize != null)
                foreach (Delegates.get_WorldSize_BeforeArgs toInvoke in _beforeget_WorldSize.GetInvocationList())
                    try
                    {
                        _beforeget_WorldSize?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_WorldSize != null)
                foreach (Delegates.get_WorldSize_AfterArgs toInvoke in _afterget_WorldSize.GetInvocationList())
                    try
                    {
                        retVal = _afterget_WorldSize.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_Position()
        {
            if (!HookedList.Contains("get_Position"))
            {
                HookedList.Add("get_Position");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_Position"), get_Position);
            }
        }

        internal static event Delegates.get_Position_BeforeArgs _beforeget_Position;
        internal static event Delegates.get_Position_AfterArgs _afterget_Position;

        private static Vector3 get_Position(Func<TouchSprite, Vector3> orig, TouchSprite self)
        {
            Delegates.Params_get_Position @params = new()
            {
                self = self
            };
            if (_beforeget_Position != null)
                foreach (Delegates.get_Position_BeforeArgs toInvoke in _beforeget_Position.GetInvocationList())
                    try
                    {
                        _beforeget_Position?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Position != null)
                foreach (Delegates.get_Position_AfterArgs toInvoke in _afterget_Position.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Position.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Position()
        {
            if (!HookedList.Contains("set_Position"))
            {
                HookedList.Add("set_Position");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_Position"), set_Position);
            }
        }

        internal static event Delegates.set_Position_BeforeArgs _beforeset_Position;
        internal static event Delegates.set_Position_AfterArgs _afterset_Position;

        private static void set_Position(Action<TouchSprite, Vector3> orig, TouchSprite self, Vector3 value)
        {
            Delegates.Params_set_Position @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Position != null)
                foreach (Delegates.set_Position_BeforeArgs toInvoke in _beforeset_Position.GetInvocationList())
                    try
                    {
                        _beforeset_Position?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Position != null)
                foreach (Delegates.set_Position_AfterArgs toInvoke in _afterset_Position.GetInvocationList())
                    try
                    {
                        _afterset_Position.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate bool Contains_Touch_AfterArgs(Params_Contains_Touch args, bool ret);

        public delegate void Contains_Touch_BeforeArgs(Params_Contains_Touch args);

        public delegate bool Contains_Touch_WithArgs(Func<TouchSprite, Touch, bool> orig, TouchSprite self,
            Touch touch);

        public delegate bool Contains_Vector2_AfterArgs(Params_Contains_Vector2 args, bool ret);

        public delegate void Contains_Vector2_BeforeArgs(Params_Contains_Vector2 args);

        public delegate bool Contains_Vector2_WithArgs(Func<TouchSprite, Vector2, bool> orig, TouchSprite self,
            Vector2 testWorldPoint);

        public delegate void Create_AfterArgs(Params_Create args);

        public delegate void Create_BeforeArgs(Params_Create args);

        public delegate void Create_WithArgs(Action<TouchSprite, string, Transform, int> orig, TouchSprite self,
            string gameObjectName, Transform parentTransform, int sortingOrder);

        public delegate GameObject CreateSpriteGameObject_AfterArgs(Params_CreateSpriteGameObject args, GameObject ret);

        public delegate void CreateSpriteGameObject_BeforeArgs(Params_CreateSpriteGameObject args);

        public delegate GameObject CreateSpriteGameObject_WithArgs(
            Func<TouchSprite, string, Transform, GameObject> orig, TouchSprite self, string name,
            Transform parentTransform);

        public delegate SpriteRenderer CreateSpriteRenderer_AfterArgs(Params_CreateSpriteRenderer args,
            SpriteRenderer ret);

        public delegate void CreateSpriteRenderer_BeforeArgs(Params_CreateSpriteRenderer args);

        public delegate SpriteRenderer CreateSpriteRenderer_WithArgs(
            Func<TouchSprite, GameObject, Sprite, int, SpriteRenderer> orig, TouchSprite self,
            GameObject spriteGameObject, Sprite sprite, int sortingOrder);

        public delegate void Delete_AfterArgs(Params_Delete args);

        public delegate void Delete_BeforeArgs(Params_Delete args);

        public delegate void Delete_WithArgs(Action<TouchSprite> orig, TouchSprite self);

        public delegate void DrawGizmos_AfterArgs(Params_DrawGizmos args);

        public delegate void DrawGizmos_BeforeArgs(Params_DrawGizmos args);

        public delegate void DrawGizmos_WithArgs(Action<TouchSprite, Vector3, Color> orig, TouchSprite self,
            Vector3 position, Color color);

        public delegate Color get_BusyColor_AfterArgs(Params_get_BusyColor args, Color ret);

        public delegate void get_BusyColor_BeforeArgs(Params_get_BusyColor args);

        public delegate Color get_BusyColor_WithArgs(Func<TouchSprite, Color> orig, TouchSprite self);

        public delegate Sprite get_BusySprite_AfterArgs(Params_get_BusySprite args, Sprite ret);

        public delegate void get_BusySprite_BeforeArgs(Params_get_BusySprite args);

        public delegate Sprite get_BusySprite_WithArgs(Func<TouchSprite, Sprite> orig, TouchSprite self);

        public delegate bool get_Dirty_AfterArgs(Params_get_Dirty args, bool ret);

        public delegate void get_Dirty_BeforeArgs(Params_get_Dirty args);

        public delegate bool get_Dirty_WithArgs(Func<TouchSprite, bool> orig, TouchSprite self);

        public delegate Color get_IdleColor_AfterArgs(Params_get_IdleColor args, Color ret);

        public delegate void get_IdleColor_BeforeArgs(Params_get_IdleColor args);

        public delegate Color get_IdleColor_WithArgs(Func<TouchSprite, Color> orig, TouchSprite self);

        public delegate Sprite get_IdleSprite_AfterArgs(Params_get_IdleSprite args, Sprite ret);

        public delegate void get_IdleSprite_BeforeArgs(Params_get_IdleSprite args);

        public delegate Sprite get_IdleSprite_WithArgs(Func<TouchSprite, Sprite> orig, TouchSprite self);

        public delegate Vector3 get_Position_AfterArgs(Params_get_Position args, Vector3 ret);

        public delegate void get_Position_BeforeArgs(Params_get_Position args);

        public delegate Vector3 get_Position_WithArgs(Func<TouchSprite, Vector3> orig, TouchSprite self);

        public delegate bool get_Ready_AfterArgs(Params_get_Ready args, bool ret);

        public delegate void get_Ready_BeforeArgs(Params_get_Ready args);

        public delegate bool get_Ready_WithArgs(Func<TouchSprite, bool> orig, TouchSprite self);

        public delegate TouchSpriteShape get_Shape_AfterArgs(Params_get_Shape args, TouchSpriteShape ret);

        public delegate void get_Shape_BeforeArgs(Params_get_Shape args);

        public delegate TouchSpriteShape get_Shape_WithArgs(Func<TouchSprite, TouchSpriteShape> orig, TouchSprite self);

        public delegate Vector2 get_Size_AfterArgs(Params_get_Size args, Vector2 ret);

        public delegate void get_Size_BeforeArgs(Params_get_Size args);

        public delegate Vector2 get_Size_WithArgs(Func<TouchSprite, Vector2> orig, TouchSprite self);

        public delegate TouchUnitType get_SizeUnitType_AfterArgs(Params_get_SizeUnitType args, TouchUnitType ret);

        public delegate void get_SizeUnitType_BeforeArgs(Params_get_SizeUnitType args);

        public delegate TouchUnitType
            get_SizeUnitType_WithArgs(Func<TouchSprite, TouchUnitType> orig, TouchSprite self);

        public delegate bool get_State_AfterArgs(Params_get_State args, bool ret);

        public delegate void get_State_BeforeArgs(Params_get_State args);

        public delegate bool get_State_WithArgs(Func<TouchSprite, bool> orig, TouchSprite self);

        public delegate Vector2 get_WorldSize_AfterArgs(Params_get_WorldSize args, Vector2 ret);

        public delegate void get_WorldSize_BeforeArgs(Params_get_WorldSize args);

        public delegate Vector2 get_WorldSize_WithArgs(Func<TouchSprite, Vector2> orig, TouchSprite self);

        public delegate void ScaleSpriteInPercent_AfterArgs(Params_ScaleSpriteInPercent args);

        public delegate void ScaleSpriteInPercent_BeforeArgs(Params_ScaleSpriteInPercent args);

        public delegate void ScaleSpriteInPercent_WithArgs(
            Action<TouchSprite, GameObject, SpriteRenderer, Vector2> orig, TouchSprite self,
            GameObject spriteGameObject, SpriteRenderer spriteRenderer, Vector2 size);

        public delegate void ScaleSpriteInPixels_AfterArgs(Params_ScaleSpriteInPixels args);

        public delegate void ScaleSpriteInPixels_BeforeArgs(Params_ScaleSpriteInPixels args);

        public delegate void ScaleSpriteInPixels_WithArgs(Action<TouchSprite, GameObject, SpriteRenderer, Vector2> orig,
            TouchSprite self, GameObject spriteGameObject, SpriteRenderer spriteRenderer, Vector2 size);

        public delegate void set_BusyColor_AfterArgs(Params_set_BusyColor args);

        public delegate void set_BusyColor_BeforeArgs(Params_set_BusyColor args);

        public delegate void set_BusyColor_WithArgs(Action<TouchSprite, Color> orig, TouchSprite self, Color value);

        public delegate void set_BusySprite_AfterArgs(Params_set_BusySprite args);

        public delegate void set_BusySprite_BeforeArgs(Params_set_BusySprite args);

        public delegate void set_BusySprite_WithArgs(Action<TouchSprite, Sprite> orig, TouchSprite self, Sprite value);

        public delegate void set_Dirty_AfterArgs(Params_set_Dirty args);

        public delegate void set_Dirty_BeforeArgs(Params_set_Dirty args);

        public delegate void set_Dirty_WithArgs(Action<TouchSprite, bool> orig, TouchSprite self, bool value);

        public delegate void set_IdleColor_AfterArgs(Params_set_IdleColor args);

        public delegate void set_IdleColor_BeforeArgs(Params_set_IdleColor args);

        public delegate void set_IdleColor_WithArgs(Action<TouchSprite, Color> orig, TouchSprite self, Color value);

        public delegate void set_IdleSprite_AfterArgs(Params_set_IdleSprite args);

        public delegate void set_IdleSprite_BeforeArgs(Params_set_IdleSprite args);

        public delegate void set_IdleSprite_WithArgs(Action<TouchSprite, Sprite> orig, TouchSprite self, Sprite value);

        public delegate void set_Position_AfterArgs(Params_set_Position args);

        public delegate void set_Position_BeforeArgs(Params_set_Position args);

        public delegate void set_Position_WithArgs(Action<TouchSprite, Vector3> orig, TouchSprite self, Vector3 value);

        public delegate void set_Ready_AfterArgs(Params_set_Ready args);

        public delegate void set_Ready_BeforeArgs(Params_set_Ready args);

        public delegate void set_Ready_WithArgs(Action<TouchSprite, bool> orig, TouchSprite self, bool value);

        public delegate void set_Shape_AfterArgs(Params_set_Shape args);

        public delegate void set_Shape_BeforeArgs(Params_set_Shape args);

        public delegate void set_Shape_WithArgs(Action<TouchSprite, TouchSpriteShape> orig, TouchSprite self,
            TouchSpriteShape value);

        public delegate void set_Size_AfterArgs(Params_set_Size args);

        public delegate void set_Size_BeforeArgs(Params_set_Size args);

        public delegate void set_Size_WithArgs(Action<TouchSprite, Vector2> orig, TouchSprite self, Vector2 value);

        public delegate void set_SizeUnitType_AfterArgs(Params_set_SizeUnitType args);

        public delegate void set_SizeUnitType_BeforeArgs(Params_set_SizeUnitType args);

        public delegate void set_SizeUnitType_WithArgs(Action<TouchSprite, TouchUnitType> orig, TouchSprite self,
            TouchUnitType value);

        public delegate void set_Sprite_AfterArgs(Params_set_Sprite args);

        public delegate void set_Sprite_BeforeArgs(Params_set_Sprite args);

        public delegate void set_Sprite_WithArgs(Action<TouchSprite, Sprite> orig, TouchSprite self, Sprite value);

        public delegate void set_State_AfterArgs(Params_set_State args);

        public delegate void set_State_BeforeArgs(Params_set_State args);

        public delegate void set_State_WithArgs(Action<TouchSprite, bool> orig, TouchSprite self, bool value);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_bool_AfterArgs(Params_Update_bool args);

        public delegate void Update_bool_BeforeArgs(Params_Update_bool args);

        public delegate void Update_bool_WithArgs(Action<TouchSprite, bool> orig, TouchSprite self, bool forceUpdate);

        public delegate void Update_WithArgs(Action<TouchSprite> orig, TouchSprite self);

        public sealed class Params_get_Dirty
        {
            public TouchSprite self;
        }

        public sealed class Params_set_Dirty
        {
            public TouchSprite self;
            public bool value;
        }

        public sealed class Params_get_Ready
        {
            public TouchSprite self;
        }

        public sealed class Params_set_Ready
        {
            public TouchSprite self;
            public bool value;
        }

        public sealed class Params_Create
        {
            public string gameObjectName;
            public Transform parentTransform;
            public TouchSprite self;
            public int sortingOrder;
        }

        public sealed class Params_Delete
        {
            public TouchSprite self;
        }

        public sealed class Params_Update
        {
            public TouchSprite self;
        }

        public sealed class Params_Update_bool
        {
            public bool forceUpdate;
            public TouchSprite self;
        }

        public sealed class Params_CreateSpriteGameObject
        {
            public string name;
            public Transform parentTransform;
            public TouchSprite self;
        }

        public sealed class Params_CreateSpriteRenderer
        {
            public TouchSprite self;
            public int sortingOrder;
            public Sprite sprite;
            public GameObject spriteGameObject;
        }

        public sealed class Params_ScaleSpriteInPixels
        {
            public TouchSprite self;
            public Vector2 size;
            public GameObject spriteGameObject;
            public SpriteRenderer spriteRenderer;
        }

        public sealed class Params_ScaleSpriteInPercent
        {
            public TouchSprite self;
            public Vector2 size;
            public GameObject spriteGameObject;
            public SpriteRenderer spriteRenderer;
        }

        public sealed class Params_Contains_Vector2
        {
            public TouchSprite self;
            public Vector2 testWorldPoint;
        }

        public sealed class Params_Contains_Touch
        {
            public TouchSprite self;
            public Touch touch;
        }

        public sealed class Params_DrawGizmos
        {
            public Color color;
            public Vector3 position;
            public TouchSprite self;
        }

        public sealed class Params_get_State
        {
            public TouchSprite self;
        }

        public sealed class Params_set_State
        {
            public TouchSprite self;
            public bool value;
        }

        public sealed class Params_get_BusySprite
        {
            public TouchSprite self;
        }

        public sealed class Params_set_BusySprite
        {
            public TouchSprite self;
            public Sprite value;
        }

        public sealed class Params_get_IdleSprite
        {
            public TouchSprite self;
        }

        public sealed class Params_set_IdleSprite
        {
            public TouchSprite self;
            public Sprite value;
        }

        public sealed class Params_set_Sprite
        {
            public TouchSprite self;
            public Sprite value;
        }

        public sealed class Params_get_BusyColor
        {
            public TouchSprite self;
        }

        public sealed class Params_set_BusyColor
        {
            public TouchSprite self;
            public Color value;
        }

        public sealed class Params_get_IdleColor
        {
            public TouchSprite self;
        }

        public sealed class Params_set_IdleColor
        {
            public TouchSprite self;
            public Color value;
        }

        public sealed class Params_get_Shape
        {
            public TouchSprite self;
        }

        public sealed class Params_set_Shape
        {
            public TouchSprite self;
            public TouchSpriteShape value;
        }

        public sealed class Params_get_SizeUnitType
        {
            public TouchSprite self;
        }

        public sealed class Params_set_SizeUnitType
        {
            public TouchSprite self;
            public TouchUnitType value;
        }

        public sealed class Params_get_Size
        {
            public TouchSprite self;
        }

        public sealed class Params_set_Size
        {
            public TouchSprite self;
            public Vector2 value;
        }

        public sealed class Params_get_WorldSize
        {
            public TouchSprite self;
        }

        public sealed class Params_get_Position
        {
            public TouchSprite self;
        }

        public sealed class Params_set_Position
        {
            public TouchSprite self;
            public Vector3 value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Dirty_BeforeArgs get_Dirty
        {
            add
            {
                HookHandler._beforeget_Dirty += value;
                HookHandler.Hookget_Dirty();
            }
            remove => HookHandler._beforeget_Dirty -= value;
        }

        public static event Delegates.set_Dirty_BeforeArgs set_Dirty
        {
            add
            {
                HookHandler._beforeset_Dirty += value;
                HookHandler.Hookset_Dirty();
            }
            remove => HookHandler._beforeset_Dirty -= value;
        }

        public static event Delegates.get_Ready_BeforeArgs get_Ready
        {
            add
            {
                HookHandler._beforeget_Ready += value;
                HookHandler.Hookget_Ready();
            }
            remove => HookHandler._beforeget_Ready -= value;
        }

        public static event Delegates.set_Ready_BeforeArgs set_Ready
        {
            add
            {
                HookHandler._beforeset_Ready += value;
                HookHandler.Hookset_Ready();
            }
            remove => HookHandler._beforeset_Ready -= value;
        }

        public static event Delegates.Create_BeforeArgs Create
        {
            add
            {
                HookHandler._beforeCreate += value;
                HookHandler.HookCreate();
            }
            remove => HookHandler._beforeCreate -= value;
        }

        public static event Delegates.Delete_BeforeArgs Delete
        {
            add
            {
                HookHandler._beforeDelete += value;
                HookHandler.HookDelete();
            }
            remove => HookHandler._beforeDelete -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.Update_bool_BeforeArgs Update_bool
        {
            add
            {
                HookHandler._beforeUpdate_bool += value;
                HookHandler.HookUpdate_bool();
            }
            remove => HookHandler._beforeUpdate_bool -= value;
        }

        public static event Delegates.CreateSpriteGameObject_BeforeArgs CreateSpriteGameObject
        {
            add
            {
                HookHandler._beforeCreateSpriteGameObject += value;
                HookHandler.HookCreateSpriteGameObject();
            }
            remove => HookHandler._beforeCreateSpriteGameObject -= value;
        }

        public static event Delegates.CreateSpriteRenderer_BeforeArgs CreateSpriteRenderer
        {
            add
            {
                HookHandler._beforeCreateSpriteRenderer += value;
                HookHandler.HookCreateSpriteRenderer();
            }
            remove => HookHandler._beforeCreateSpriteRenderer -= value;
        }

        public static event Delegates.ScaleSpriteInPixels_BeforeArgs ScaleSpriteInPixels
        {
            add
            {
                HookHandler._beforeScaleSpriteInPixels += value;
                HookHandler.HookScaleSpriteInPixels();
            }
            remove => HookHandler._beforeScaleSpriteInPixels -= value;
        }

        public static event Delegates.ScaleSpriteInPercent_BeforeArgs ScaleSpriteInPercent
        {
            add
            {
                HookHandler._beforeScaleSpriteInPercent += value;
                HookHandler.HookScaleSpriteInPercent();
            }
            remove => HookHandler._beforeScaleSpriteInPercent -= value;
        }

        public static event Delegates.Contains_Vector2_BeforeArgs Contains_Vector2
        {
            add
            {
                HookHandler._beforeContains_Vector2 += value;
                HookHandler.HookContains_Vector2();
            }
            remove => HookHandler._beforeContains_Vector2 -= value;
        }

        public static event Delegates.Contains_Touch_BeforeArgs Contains_Touch
        {
            add
            {
                HookHandler._beforeContains_Touch += value;
                HookHandler.HookContains_Touch();
            }
            remove => HookHandler._beforeContains_Touch -= value;
        }

        public static event Delegates.DrawGizmos_BeforeArgs DrawGizmos
        {
            add
            {
                HookHandler._beforeDrawGizmos += value;
                HookHandler.HookDrawGizmos();
            }
            remove => HookHandler._beforeDrawGizmos -= value;
        }

        public static event Delegates.get_State_BeforeArgs get_State
        {
            add
            {
                HookHandler._beforeget_State += value;
                HookHandler.Hookget_State();
            }
            remove => HookHandler._beforeget_State -= value;
        }

        public static event Delegates.set_State_BeforeArgs set_State
        {
            add
            {
                HookHandler._beforeset_State += value;
                HookHandler.Hookset_State();
            }
            remove => HookHandler._beforeset_State -= value;
        }

        public static event Delegates.get_BusySprite_BeforeArgs get_BusySprite
        {
            add
            {
                HookHandler._beforeget_BusySprite += value;
                HookHandler.Hookget_BusySprite();
            }
            remove => HookHandler._beforeget_BusySprite -= value;
        }

        public static event Delegates.set_BusySprite_BeforeArgs set_BusySprite
        {
            add
            {
                HookHandler._beforeset_BusySprite += value;
                HookHandler.Hookset_BusySprite();
            }
            remove => HookHandler._beforeset_BusySprite -= value;
        }

        public static event Delegates.get_IdleSprite_BeforeArgs get_IdleSprite
        {
            add
            {
                HookHandler._beforeget_IdleSprite += value;
                HookHandler.Hookget_IdleSprite();
            }
            remove => HookHandler._beforeget_IdleSprite -= value;
        }

        public static event Delegates.set_IdleSprite_BeforeArgs set_IdleSprite
        {
            add
            {
                HookHandler._beforeset_IdleSprite += value;
                HookHandler.Hookset_IdleSprite();
            }
            remove => HookHandler._beforeset_IdleSprite -= value;
        }

        public static event Delegates.set_Sprite_BeforeArgs set_Sprite
        {
            add
            {
                HookHandler._beforeset_Sprite += value;
                HookHandler.Hookset_Sprite();
            }
            remove => HookHandler._beforeset_Sprite -= value;
        }

        public static event Delegates.get_BusyColor_BeforeArgs get_BusyColor
        {
            add
            {
                HookHandler._beforeget_BusyColor += value;
                HookHandler.Hookget_BusyColor();
            }
            remove => HookHandler._beforeget_BusyColor -= value;
        }

        public static event Delegates.set_BusyColor_BeforeArgs set_BusyColor
        {
            add
            {
                HookHandler._beforeset_BusyColor += value;
                HookHandler.Hookset_BusyColor();
            }
            remove => HookHandler._beforeset_BusyColor -= value;
        }

        public static event Delegates.get_IdleColor_BeforeArgs get_IdleColor
        {
            add
            {
                HookHandler._beforeget_IdleColor += value;
                HookHandler.Hookget_IdleColor();
            }
            remove => HookHandler._beforeget_IdleColor -= value;
        }

        public static event Delegates.set_IdleColor_BeforeArgs set_IdleColor
        {
            add
            {
                HookHandler._beforeset_IdleColor += value;
                HookHandler.Hookset_IdleColor();
            }
            remove => HookHandler._beforeset_IdleColor -= value;
        }

        public static event Delegates.get_Shape_BeforeArgs get_Shape
        {
            add
            {
                HookHandler._beforeget_Shape += value;
                HookHandler.Hookget_Shape();
            }
            remove => HookHandler._beforeget_Shape -= value;
        }

        public static event Delegates.set_Shape_BeforeArgs set_Shape
        {
            add
            {
                HookHandler._beforeset_Shape += value;
                HookHandler.Hookset_Shape();
            }
            remove => HookHandler._beforeset_Shape -= value;
        }

        public static event Delegates.get_SizeUnitType_BeforeArgs get_SizeUnitType
        {
            add
            {
                HookHandler._beforeget_SizeUnitType += value;
                HookHandler.Hookget_SizeUnitType();
            }
            remove => HookHandler._beforeget_SizeUnitType -= value;
        }

        public static event Delegates.set_SizeUnitType_BeforeArgs set_SizeUnitType
        {
            add
            {
                HookHandler._beforeset_SizeUnitType += value;
                HookHandler.Hookset_SizeUnitType();
            }
            remove => HookHandler._beforeset_SizeUnitType -= value;
        }

        public static event Delegates.get_Size_BeforeArgs get_Size
        {
            add
            {
                HookHandler._beforeget_Size += value;
                HookHandler.Hookget_Size();
            }
            remove => HookHandler._beforeget_Size -= value;
        }

        public static event Delegates.set_Size_BeforeArgs set_Size
        {
            add
            {
                HookHandler._beforeset_Size += value;
                HookHandler.Hookset_Size();
            }
            remove => HookHandler._beforeset_Size -= value;
        }

        public static event Delegates.get_WorldSize_BeforeArgs get_WorldSize
        {
            add
            {
                HookHandler._beforeget_WorldSize += value;
                HookHandler.Hookget_WorldSize();
            }
            remove => HookHandler._beforeget_WorldSize -= value;
        }

        public static event Delegates.get_Position_BeforeArgs get_Position
        {
            add
            {
                HookHandler._beforeget_Position += value;
                HookHandler.Hookget_Position();
            }
            remove => HookHandler._beforeget_Position -= value;
        }

        public static event Delegates.set_Position_BeforeArgs set_Position
        {
            add
            {
                HookHandler._beforeset_Position += value;
                HookHandler.Hookset_Position();
            }
            remove => HookHandler._beforeset_Position -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Dirty_AfterArgs get_Dirty
        {
            add
            {
                HookHandler._afterget_Dirty += value;
                HookHandler.Hookget_Dirty();
            }
            remove => HookHandler._afterget_Dirty -= value;
        }

        public static event Delegates.set_Dirty_AfterArgs set_Dirty
        {
            add
            {
                HookHandler._afterset_Dirty += value;
                HookHandler.Hookset_Dirty();
            }
            remove => HookHandler._afterset_Dirty -= value;
        }

        public static event Delegates.get_Ready_AfterArgs get_Ready
        {
            add
            {
                HookHandler._afterget_Ready += value;
                HookHandler.Hookget_Ready();
            }
            remove => HookHandler._afterget_Ready -= value;
        }

        public static event Delegates.set_Ready_AfterArgs set_Ready
        {
            add
            {
                HookHandler._afterset_Ready += value;
                HookHandler.Hookset_Ready();
            }
            remove => HookHandler._afterset_Ready -= value;
        }

        public static event Delegates.Create_AfterArgs Create
        {
            add
            {
                HookHandler._afterCreate += value;
                HookHandler.HookCreate();
            }
            remove => HookHandler._afterCreate -= value;
        }

        public static event Delegates.Delete_AfterArgs Delete
        {
            add
            {
                HookHandler._afterDelete += value;
                HookHandler.HookDelete();
            }
            remove => HookHandler._afterDelete -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.Update_bool_AfterArgs Update_bool
        {
            add
            {
                HookHandler._afterUpdate_bool += value;
                HookHandler.HookUpdate_bool();
            }
            remove => HookHandler._afterUpdate_bool -= value;
        }

        public static event Delegates.CreateSpriteGameObject_AfterArgs CreateSpriteGameObject
        {
            add
            {
                HookHandler._afterCreateSpriteGameObject += value;
                HookHandler.HookCreateSpriteGameObject();
            }
            remove => HookHandler._afterCreateSpriteGameObject -= value;
        }

        public static event Delegates.CreateSpriteRenderer_AfterArgs CreateSpriteRenderer
        {
            add
            {
                HookHandler._afterCreateSpriteRenderer += value;
                HookHandler.HookCreateSpriteRenderer();
            }
            remove => HookHandler._afterCreateSpriteRenderer -= value;
        }

        public static event Delegates.ScaleSpriteInPixels_AfterArgs ScaleSpriteInPixels
        {
            add
            {
                HookHandler._afterScaleSpriteInPixels += value;
                HookHandler.HookScaleSpriteInPixels();
            }
            remove => HookHandler._afterScaleSpriteInPixels -= value;
        }

        public static event Delegates.ScaleSpriteInPercent_AfterArgs ScaleSpriteInPercent
        {
            add
            {
                HookHandler._afterScaleSpriteInPercent += value;
                HookHandler.HookScaleSpriteInPercent();
            }
            remove => HookHandler._afterScaleSpriteInPercent -= value;
        }

        public static event Delegates.Contains_Vector2_AfterArgs Contains_Vector2
        {
            add
            {
                HookHandler._afterContains_Vector2 += value;
                HookHandler.HookContains_Vector2();
            }
            remove => HookHandler._afterContains_Vector2 -= value;
        }

        public static event Delegates.Contains_Touch_AfterArgs Contains_Touch
        {
            add
            {
                HookHandler._afterContains_Touch += value;
                HookHandler.HookContains_Touch();
            }
            remove => HookHandler._afterContains_Touch -= value;
        }

        public static event Delegates.DrawGizmos_AfterArgs DrawGizmos
        {
            add
            {
                HookHandler._afterDrawGizmos += value;
                HookHandler.HookDrawGizmos();
            }
            remove => HookHandler._afterDrawGizmos -= value;
        }

        public static event Delegates.get_State_AfterArgs get_State
        {
            add
            {
                HookHandler._afterget_State += value;
                HookHandler.Hookget_State();
            }
            remove => HookHandler._afterget_State -= value;
        }

        public static event Delegates.set_State_AfterArgs set_State
        {
            add
            {
                HookHandler._afterset_State += value;
                HookHandler.Hookset_State();
            }
            remove => HookHandler._afterset_State -= value;
        }

        public static event Delegates.get_BusySprite_AfterArgs get_BusySprite
        {
            add
            {
                HookHandler._afterget_BusySprite += value;
                HookHandler.Hookget_BusySprite();
            }
            remove => HookHandler._afterget_BusySprite -= value;
        }

        public static event Delegates.set_BusySprite_AfterArgs set_BusySprite
        {
            add
            {
                HookHandler._afterset_BusySprite += value;
                HookHandler.Hookset_BusySprite();
            }
            remove => HookHandler._afterset_BusySprite -= value;
        }

        public static event Delegates.get_IdleSprite_AfterArgs get_IdleSprite
        {
            add
            {
                HookHandler._afterget_IdleSprite += value;
                HookHandler.Hookget_IdleSprite();
            }
            remove => HookHandler._afterget_IdleSprite -= value;
        }

        public static event Delegates.set_IdleSprite_AfterArgs set_IdleSprite
        {
            add
            {
                HookHandler._afterset_IdleSprite += value;
                HookHandler.Hookset_IdleSprite();
            }
            remove => HookHandler._afterset_IdleSprite -= value;
        }

        public static event Delegates.set_Sprite_AfterArgs set_Sprite
        {
            add
            {
                HookHandler._afterset_Sprite += value;
                HookHandler.Hookset_Sprite();
            }
            remove => HookHandler._afterset_Sprite -= value;
        }

        public static event Delegates.get_BusyColor_AfterArgs get_BusyColor
        {
            add
            {
                HookHandler._afterget_BusyColor += value;
                HookHandler.Hookget_BusyColor();
            }
            remove => HookHandler._afterget_BusyColor -= value;
        }

        public static event Delegates.set_BusyColor_AfterArgs set_BusyColor
        {
            add
            {
                HookHandler._afterset_BusyColor += value;
                HookHandler.Hookset_BusyColor();
            }
            remove => HookHandler._afterset_BusyColor -= value;
        }

        public static event Delegates.get_IdleColor_AfterArgs get_IdleColor
        {
            add
            {
                HookHandler._afterget_IdleColor += value;
                HookHandler.Hookget_IdleColor();
            }
            remove => HookHandler._afterget_IdleColor -= value;
        }

        public static event Delegates.set_IdleColor_AfterArgs set_IdleColor
        {
            add
            {
                HookHandler._afterset_IdleColor += value;
                HookHandler.Hookset_IdleColor();
            }
            remove => HookHandler._afterset_IdleColor -= value;
        }

        public static event Delegates.get_Shape_AfterArgs get_Shape
        {
            add
            {
                HookHandler._afterget_Shape += value;
                HookHandler.Hookget_Shape();
            }
            remove => HookHandler._afterget_Shape -= value;
        }

        public static event Delegates.set_Shape_AfterArgs set_Shape
        {
            add
            {
                HookHandler._afterset_Shape += value;
                HookHandler.Hookset_Shape();
            }
            remove => HookHandler._afterset_Shape -= value;
        }

        public static event Delegates.get_SizeUnitType_AfterArgs get_SizeUnitType
        {
            add
            {
                HookHandler._afterget_SizeUnitType += value;
                HookHandler.Hookget_SizeUnitType();
            }
            remove => HookHandler._afterget_SizeUnitType -= value;
        }

        public static event Delegates.set_SizeUnitType_AfterArgs set_SizeUnitType
        {
            add
            {
                HookHandler._afterset_SizeUnitType += value;
                HookHandler.Hookset_SizeUnitType();
            }
            remove => HookHandler._afterset_SizeUnitType -= value;
        }

        public static event Delegates.get_Size_AfterArgs get_Size
        {
            add
            {
                HookHandler._afterget_Size += value;
                HookHandler.Hookget_Size();
            }
            remove => HookHandler._afterget_Size -= value;
        }

        public static event Delegates.set_Size_AfterArgs set_Size
        {
            add
            {
                HookHandler._afterset_Size += value;
                HookHandler.Hookset_Size();
            }
            remove => HookHandler._afterset_Size -= value;
        }

        public static event Delegates.get_WorldSize_AfterArgs get_WorldSize
        {
            add
            {
                HookHandler._afterget_WorldSize += value;
                HookHandler.Hookget_WorldSize();
            }
            remove => HookHandler._afterget_WorldSize -= value;
        }

        public static event Delegates.get_Position_AfterArgs get_Position
        {
            add
            {
                HookHandler._afterget_Position += value;
                HookHandler.Hookget_Position();
            }
            remove => HookHandler._afterget_Position -= value;
        }

        public static event Delegates.set_Position_AfterArgs set_Position
        {
            add
            {
                HookHandler._afterset_Position += value;
                HookHandler.Hookset_Position();
            }
            remove => HookHandler._afterset_Position -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Dirty_WithArgs get_Dirty
        {
            add => HookEndpointManager.Add<Delegates.get_Dirty_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_Dirty"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Dirty_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_Dirty"), value);
        }

        public static event Delegates.set_Dirty_WithArgs set_Dirty
        {
            add => HookEndpointManager.Add<Delegates.set_Dirty_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_Dirty"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Dirty_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_Dirty"), value);
        }

        public static event Delegates.get_Ready_WithArgs get_Ready
        {
            add => HookEndpointManager.Add<Delegates.get_Ready_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_Ready"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Ready_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_Ready"), value);
        }

        public static event Delegates.set_Ready_WithArgs set_Ready
        {
            add => HookEndpointManager.Add<Delegates.set_Ready_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_Ready"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Ready_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_Ready"), value);
        }

        public static event Delegates.Create_WithArgs Create
        {
            add => HookEndpointManager.Add<Delegates.Create_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "Create"), value);
            remove => HookEndpointManager.Remove<Delegates.Create_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "Create"), value);
        }

        public static event Delegates.Delete_WithArgs Delete
        {
            add => HookEndpointManager.Add<Delegates.Delete_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "Delete"), value);
            remove => HookEndpointManager.Remove<Delegates.Delete_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "Delete"), value);
        }

        public static event Delegates.Update_WithArgs Update
        {
            add => HookEndpointManager.Add<Delegates.Update_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "Update"), value);
            remove => HookEndpointManager.Remove<Delegates.Update_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "Update"), value);
        }

        public static event Delegates.Update_bool_WithArgs Update_bool
        {
            add => HookEndpointManager.Add<Delegates.Update_bool_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "Update"), value);
            remove => HookEndpointManager.Remove<Delegates.Update_bool_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "Update"), value);
        }

        public static event Delegates.CreateSpriteGameObject_WithArgs CreateSpriteGameObject
        {
            add => HookEndpointManager.Add<Delegates.CreateSpriteGameObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "CreateSpriteGameObject"), value);
            remove => HookEndpointManager.Remove<Delegates.CreateSpriteGameObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "CreateSpriteGameObject"), value);
        }

        public static event Delegates.CreateSpriteRenderer_WithArgs CreateSpriteRenderer
        {
            add => HookEndpointManager.Add<Delegates.CreateSpriteRenderer_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "CreateSpriteRenderer"), value);
            remove => HookEndpointManager.Remove<Delegates.CreateSpriteRenderer_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "CreateSpriteRenderer"), value);
        }

        public static event Delegates.ScaleSpriteInPixels_WithArgs ScaleSpriteInPixels
        {
            add => HookEndpointManager.Add<Delegates.ScaleSpriteInPixels_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "ScaleSpriteInPixels"), value);
            remove => HookEndpointManager.Remove<Delegates.ScaleSpriteInPixels_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "ScaleSpriteInPixels"), value);
        }

        public static event Delegates.ScaleSpriteInPercent_WithArgs ScaleSpriteInPercent
        {
            add => HookEndpointManager.Add<Delegates.ScaleSpriteInPercent_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "ScaleSpriteInPercent"), value);
            remove => HookEndpointManager.Remove<Delegates.ScaleSpriteInPercent_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "ScaleSpriteInPercent"), value);
        }

        public static event Delegates.Contains_Vector2_WithArgs Contains_Vector2
        {
            add => HookEndpointManager.Add<Delegates.Contains_Vector2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "Contains"), value);
            remove => HookEndpointManager.Remove<Delegates.Contains_Vector2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "Contains"), value);
        }

        public static event Delegates.Contains_Touch_WithArgs Contains_Touch
        {
            add => HookEndpointManager.Add<Delegates.Contains_Touch_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "Contains"), value);
            remove => HookEndpointManager.Remove<Delegates.Contains_Touch_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "Contains"), value);
        }

        public static event Delegates.DrawGizmos_WithArgs DrawGizmos
        {
            add => HookEndpointManager.Add<Delegates.DrawGizmos_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "DrawGizmos"), value);
            remove => HookEndpointManager.Remove<Delegates.DrawGizmos_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "DrawGizmos"), value);
        }

        public static event Delegates.get_State_WithArgs get_State
        {
            add => HookEndpointManager.Add<Delegates.get_State_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_State"), value);
            remove => HookEndpointManager.Remove<Delegates.get_State_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_State"), value);
        }

        public static event Delegates.set_State_WithArgs set_State
        {
            add => HookEndpointManager.Add<Delegates.set_State_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_State"), value);
            remove => HookEndpointManager.Remove<Delegates.set_State_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_State"), value);
        }

        public static event Delegates.get_BusySprite_WithArgs get_BusySprite
        {
            add => HookEndpointManager.Add<Delegates.get_BusySprite_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_BusySprite"), value);
            remove => HookEndpointManager.Remove<Delegates.get_BusySprite_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_BusySprite"), value);
        }

        public static event Delegates.set_BusySprite_WithArgs set_BusySprite
        {
            add => HookEndpointManager.Add<Delegates.set_BusySprite_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_BusySprite"), value);
            remove => HookEndpointManager.Remove<Delegates.set_BusySprite_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_BusySprite"), value);
        }

        public static event Delegates.get_IdleSprite_WithArgs get_IdleSprite
        {
            add => HookEndpointManager.Add<Delegates.get_IdleSprite_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_IdleSprite"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IdleSprite_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_IdleSprite"), value);
        }

        public static event Delegates.set_IdleSprite_WithArgs set_IdleSprite
        {
            add => HookEndpointManager.Add<Delegates.set_IdleSprite_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_IdleSprite"), value);
            remove => HookEndpointManager.Remove<Delegates.set_IdleSprite_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_IdleSprite"), value);
        }

        public static event Delegates.set_Sprite_WithArgs set_Sprite
        {
            add => HookEndpointManager.Add<Delegates.set_Sprite_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_Sprite"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Sprite_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_Sprite"), value);
        }

        public static event Delegates.get_BusyColor_WithArgs get_BusyColor
        {
            add => HookEndpointManager.Add<Delegates.get_BusyColor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_BusyColor"), value);
            remove => HookEndpointManager.Remove<Delegates.get_BusyColor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_BusyColor"), value);
        }

        public static event Delegates.set_BusyColor_WithArgs set_BusyColor
        {
            add => HookEndpointManager.Add<Delegates.set_BusyColor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_BusyColor"), value);
            remove => HookEndpointManager.Remove<Delegates.set_BusyColor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_BusyColor"), value);
        }

        public static event Delegates.get_IdleColor_WithArgs get_IdleColor
        {
            add => HookEndpointManager.Add<Delegates.get_IdleColor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_IdleColor"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IdleColor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_IdleColor"), value);
        }

        public static event Delegates.set_IdleColor_WithArgs set_IdleColor
        {
            add => HookEndpointManager.Add<Delegates.set_IdleColor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_IdleColor"), value);
            remove => HookEndpointManager.Remove<Delegates.set_IdleColor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_IdleColor"), value);
        }

        public static event Delegates.get_Shape_WithArgs get_Shape
        {
            add => HookEndpointManager.Add<Delegates.get_Shape_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_Shape"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Shape_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_Shape"), value);
        }

        public static event Delegates.set_Shape_WithArgs set_Shape
        {
            add => HookEndpointManager.Add<Delegates.set_Shape_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_Shape"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Shape_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_Shape"), value);
        }

        public static event Delegates.get_SizeUnitType_WithArgs get_SizeUnitType
        {
            add => HookEndpointManager.Add<Delegates.get_SizeUnitType_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_SizeUnitType"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SizeUnitType_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_SizeUnitType"), value);
        }

        public static event Delegates.set_SizeUnitType_WithArgs set_SizeUnitType
        {
            add => HookEndpointManager.Add<Delegates.set_SizeUnitType_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_SizeUnitType"), value);
            remove => HookEndpointManager.Remove<Delegates.set_SizeUnitType_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_SizeUnitType"), value);
        }

        public static event Delegates.get_Size_WithArgs get_Size
        {
            add => HookEndpointManager.Add<Delegates.get_Size_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_Size"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Size_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_Size"), value);
        }

        public static event Delegates.set_Size_WithArgs set_Size
        {
            add => HookEndpointManager.Add<Delegates.set_Size_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_Size"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Size_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_Size"), value);
        }

        public static event Delegates.get_WorldSize_WithArgs get_WorldSize
        {
            add => HookEndpointManager.Add<Delegates.get_WorldSize_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_WorldSize"), value);
            remove => HookEndpointManager.Remove<Delegates.get_WorldSize_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_WorldSize"), value);
        }

        public static event Delegates.get_Position_WithArgs get_Position
        {
            add => HookEndpointManager.Add<Delegates.get_Position_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_Position"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Position_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "get_Position"), value);
        }

        public static event Delegates.set_Position_WithArgs set_Position
        {
            add => HookEndpointManager.Add<Delegates.set_Position_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_Position"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Position_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchSprite), "set_Position"), value);
        }
    }
}