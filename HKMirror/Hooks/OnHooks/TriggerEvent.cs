using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TriggerEvent class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTriggerEvent
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TriggerEvent), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<TriggerEvent> orig, TriggerEvent self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookOnPreprocess()
        {
            if (!HookedList.Contains("OnPreprocess"))
            {
                HookedList.Add("OnPreprocess");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TriggerEvent), "OnPreprocess"), OnPreprocess);
            }
        }

        internal static event Delegates.OnPreprocess_BeforeArgs _beforeOnPreprocess;
        internal static event Delegates.OnPreprocess_NormalArgs _afterOnPreprocess;

        private static void OnPreprocess(Action<TriggerEvent> orig, TriggerEvent self)
        {
            Delegates.Params_OnPreprocess @params = new()
            {
                self = self
            };
            _beforeOnPreprocess?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnPreprocess != null) _afterOnPreprocess.Invoke(@params);
        }

        internal static void HookStoreCollisionInfo()
        {
            if (!HookedList.Contains("StoreCollisionInfo"))
            {
                HookedList.Add("StoreCollisionInfo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TriggerEvent), "StoreCollisionInfo"),
                    StoreCollisionInfo);
            }
        }

        internal static event Delegates.StoreCollisionInfo_BeforeArgs _beforeStoreCollisionInfo;
        internal static event Delegates.StoreCollisionInfo_NormalArgs _afterStoreCollisionInfo;

        private static void StoreCollisionInfo(Action<TriggerEvent, Collider> orig, TriggerEvent self,
            Collider collisionInfo)
        {
            Delegates.Params_StoreCollisionInfo @params = new()
            {
                self = self, collisionInfo = collisionInfo
            };
            _beforeStoreCollisionInfo?.Invoke(@params);
            self = @params.self;
            collisionInfo = @params.collisionInfo;
            orig(self, collisionInfo);
            if (_afterStoreCollisionInfo != null) _afterStoreCollisionInfo.Invoke(@params);
        }

        internal static void HookDoTriggerEnter()
        {
            if (!HookedList.Contains("DoTriggerEnter"))
            {
                HookedList.Add("DoTriggerEnter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TriggerEvent), "DoTriggerEnter"), DoTriggerEnter);
            }
        }

        internal static event Delegates.DoTriggerEnter_BeforeArgs _beforeDoTriggerEnter;
        internal static event Delegates.DoTriggerEnter_NormalArgs _afterDoTriggerEnter;

        private static void DoTriggerEnter(Action<TriggerEvent, Collider> orig, TriggerEvent self, Collider other)
        {
            Delegates.Params_DoTriggerEnter @params = new()
            {
                self = self, other = other
            };
            _beforeDoTriggerEnter?.Invoke(@params);
            self = @params.self;
            other = @params.other;
            orig(self, other);
            if (_afterDoTriggerEnter != null) _afterDoTriggerEnter.Invoke(@params);
        }

        internal static void HookDoTriggerStay()
        {
            if (!HookedList.Contains("DoTriggerStay"))
            {
                HookedList.Add("DoTriggerStay");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TriggerEvent), "DoTriggerStay"), DoTriggerStay);
            }
        }

        internal static event Delegates.DoTriggerStay_BeforeArgs _beforeDoTriggerStay;
        internal static event Delegates.DoTriggerStay_NormalArgs _afterDoTriggerStay;

        private static void DoTriggerStay(Action<TriggerEvent, Collider> orig, TriggerEvent self, Collider other)
        {
            Delegates.Params_DoTriggerStay @params = new()
            {
                self = self, other = other
            };
            _beforeDoTriggerStay?.Invoke(@params);
            self = @params.self;
            other = @params.other;
            orig(self, other);
            if (_afterDoTriggerStay != null) _afterDoTriggerStay.Invoke(@params);
        }

        internal static void HookDoTriggerExit()
        {
            if (!HookedList.Contains("DoTriggerExit"))
            {
                HookedList.Add("DoTriggerExit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TriggerEvent), "DoTriggerExit"), DoTriggerExit);
            }
        }

        internal static event Delegates.DoTriggerExit_BeforeArgs _beforeDoTriggerExit;
        internal static event Delegates.DoTriggerExit_NormalArgs _afterDoTriggerExit;

        private static void DoTriggerExit(Action<TriggerEvent, Collider> orig, TriggerEvent self, Collider other)
        {
            Delegates.Params_DoTriggerExit @params = new()
            {
                self = self, other = other
            };
            _beforeDoTriggerExit?.Invoke(@params);
            self = @params.self;
            other = @params.other;
            orig(self, other);
            if (_afterDoTriggerExit != null) _afterDoTriggerExit.Invoke(@params);
        }

        internal static void HookErrorCheck()
        {
            if (!HookedList.Contains("ErrorCheck"))
            {
                HookedList.Add("ErrorCheck");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TriggerEvent), "ErrorCheck"), ErrorCheck);
            }
        }

        internal static event Delegates.ErrorCheck_BeforeArgs _beforeErrorCheck;
        internal static event Delegates.ErrorCheck_NormalArgs _afterErrorCheck;

        private static string ErrorCheck(Func<TriggerEvent, string> orig, TriggerEvent self)
        {
            Delegates.Params_ErrorCheck @params = new()
            {
                self = self
            };
            _beforeErrorCheck?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterErrorCheck != null) retVal = _afterErrorCheck.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void DoTriggerEnter_BeforeArgs(Params_DoTriggerEnter args);

        public delegate void DoTriggerEnter_NormalArgs(Params_DoTriggerEnter args);

        public delegate void DoTriggerExit_BeforeArgs(Params_DoTriggerExit args);

        public delegate void DoTriggerExit_NormalArgs(Params_DoTriggerExit args);

        public delegate void DoTriggerStay_BeforeArgs(Params_DoTriggerStay args);

        public delegate void DoTriggerStay_NormalArgs(Params_DoTriggerStay args);

        public delegate void ErrorCheck_BeforeArgs(Params_ErrorCheck args);

        public delegate string ErrorCheck_NormalArgs(Params_ErrorCheck args);

        public delegate void OnPreprocess_BeforeArgs(Params_OnPreprocess args);

        public delegate void OnPreprocess_NormalArgs(Params_OnPreprocess args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public delegate void StoreCollisionInfo_BeforeArgs(Params_StoreCollisionInfo args);

        public delegate void StoreCollisionInfo_NormalArgs(Params_StoreCollisionInfo args);

        public sealed class Params_Reset
        {
            public TriggerEvent self;
        }

        public sealed class Params_OnPreprocess
        {
            public TriggerEvent self;
        }

        public sealed class Params_StoreCollisionInfo
        {
            public Collider collisionInfo;
            public TriggerEvent self;
        }

        public sealed class Params_DoTriggerEnter
        {
            public Collider other;
            public TriggerEvent self;
        }

        public sealed class Params_DoTriggerStay
        {
            public Collider other;
            public TriggerEvent self;
        }

        public sealed class Params_DoTriggerExit
        {
            public Collider other;
            public TriggerEvent self;
        }

        public sealed class Params_ErrorCheck
        {
            public TriggerEvent self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnPreprocess_BeforeArgs OnPreprocess
        {
            add
            {
                HookHandler._beforeOnPreprocess += value;
                HookHandler.HookOnPreprocess();
            }
            remove => HookHandler._beforeOnPreprocess -= value;
        }

        public static event Delegates.StoreCollisionInfo_BeforeArgs StoreCollisionInfo
        {
            add
            {
                HookHandler._beforeStoreCollisionInfo += value;
                HookHandler.HookStoreCollisionInfo();
            }
            remove => HookHandler._beforeStoreCollisionInfo -= value;
        }

        public static event Delegates.DoTriggerEnter_BeforeArgs DoTriggerEnter
        {
            add
            {
                HookHandler._beforeDoTriggerEnter += value;
                HookHandler.HookDoTriggerEnter();
            }
            remove => HookHandler._beforeDoTriggerEnter -= value;
        }

        public static event Delegates.DoTriggerStay_BeforeArgs DoTriggerStay
        {
            add
            {
                HookHandler._beforeDoTriggerStay += value;
                HookHandler.HookDoTriggerStay();
            }
            remove => HookHandler._beforeDoTriggerStay -= value;
        }

        public static event Delegates.DoTriggerExit_BeforeArgs DoTriggerExit
        {
            add
            {
                HookHandler._beforeDoTriggerExit += value;
                HookHandler.HookDoTriggerExit();
            }
            remove => HookHandler._beforeDoTriggerExit -= value;
        }

        public static event Delegates.ErrorCheck_BeforeArgs ErrorCheck
        {
            add
            {
                HookHandler._beforeErrorCheck += value;
                HookHandler.HookErrorCheck();
            }
            remove => HookHandler._beforeErrorCheck -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnPreprocess_NormalArgs OnPreprocess
        {
            add
            {
                HookHandler._afterOnPreprocess += value;
                HookHandler.HookOnPreprocess();
            }
            remove => HookHandler._afterOnPreprocess -= value;
        }

        public static event Delegates.StoreCollisionInfo_NormalArgs StoreCollisionInfo
        {
            add
            {
                HookHandler._afterStoreCollisionInfo += value;
                HookHandler.HookStoreCollisionInfo();
            }
            remove => HookHandler._afterStoreCollisionInfo -= value;
        }

        public static event Delegates.DoTriggerEnter_NormalArgs DoTriggerEnter
        {
            add
            {
                HookHandler._afterDoTriggerEnter += value;
                HookHandler.HookDoTriggerEnter();
            }
            remove => HookHandler._afterDoTriggerEnter -= value;
        }

        public static event Delegates.DoTriggerStay_NormalArgs DoTriggerStay
        {
            add
            {
                HookHandler._afterDoTriggerStay += value;
                HookHandler.HookDoTriggerStay();
            }
            remove => HookHandler._afterDoTriggerStay -= value;
        }

        public static event Delegates.DoTriggerExit_NormalArgs DoTriggerExit
        {
            add
            {
                HookHandler._afterDoTriggerExit += value;
                HookHandler.HookDoTriggerExit();
            }
            remove => HookHandler._afterDoTriggerExit -= value;
        }

        public static event Delegates.ErrorCheck_NormalArgs ErrorCheck
        {
            add
            {
                HookHandler._afterErrorCheck += value;
                HookHandler.HookErrorCheck();
            }
            remove => HookHandler._afterErrorCheck -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TriggerEvent), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TriggerEvent), "Reset"), value);
        }

        public static event Delegates.OnPreprocess_NormalArgs OnPreprocess
        {
            add => HookEndpointManager.Add<Delegates.OnPreprocess_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TriggerEvent), "OnPreprocess"), value);
            remove => HookEndpointManager.Remove<Delegates.OnPreprocess_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TriggerEvent), "OnPreprocess"), value);
        }

        public static event Delegates.StoreCollisionInfo_NormalArgs StoreCollisionInfo
        {
            add => HookEndpointManager.Add<Delegates.StoreCollisionInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TriggerEvent), "StoreCollisionInfo"), value);
            remove => HookEndpointManager.Remove<Delegates.StoreCollisionInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TriggerEvent), "StoreCollisionInfo"), value);
        }

        public static event Delegates.DoTriggerEnter_NormalArgs DoTriggerEnter
        {
            add => HookEndpointManager.Add<Delegates.DoTriggerEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TriggerEvent), "DoTriggerEnter"), value);
            remove => HookEndpointManager.Remove<Delegates.DoTriggerEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TriggerEvent), "DoTriggerEnter"), value);
        }

        public static event Delegates.DoTriggerStay_NormalArgs DoTriggerStay
        {
            add => HookEndpointManager.Add<Delegates.DoTriggerStay_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TriggerEvent), "DoTriggerStay"), value);
            remove => HookEndpointManager.Remove<Delegates.DoTriggerStay_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TriggerEvent), "DoTriggerStay"), value);
        }

        public static event Delegates.DoTriggerExit_NormalArgs DoTriggerExit
        {
            add => HookEndpointManager.Add<Delegates.DoTriggerExit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TriggerEvent), "DoTriggerExit"), value);
            remove => HookEndpointManager.Remove<Delegates.DoTriggerExit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TriggerEvent), "DoTriggerExit"), value);
        }

        public static event Delegates.ErrorCheck_NormalArgs ErrorCheck
        {
            add => HookEndpointManager.Add<Delegates.ErrorCheck_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TriggerEvent), "ErrorCheck"), value);
            remove => HookEndpointManager.Remove<Delegates.ErrorCheck_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TriggerEvent), "ErrorCheck"), value);
        }
    }
}