using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TMP_SubMesh class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTMP_SubMesh
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_fontAsset()
        {
            if (!HookedList.Contains("get_fontAsset"))
            {
                HookedList.Add("get_fontAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_fontAsset"), get_fontAsset);
            }
        }

        internal static event Delegates.get_fontAsset_BeforeArgs _beforeget_fontAsset;
        internal static event Delegates.get_fontAsset_AfterArgs _afterget_fontAsset;

        private static TMP_FontAsset get_fontAsset(Func<TMP_SubMesh, TMP_FontAsset> orig, TMP_SubMesh self)
        {
            Delegates.Params_get_fontAsset @params = new()
            {
                self = self
            };
            if (_beforeget_fontAsset != null)
                foreach (Delegates.get_fontAsset_BeforeArgs toInvoke in _beforeget_fontAsset.GetInvocationList())
                    try
                    {
                        _beforeget_fontAsset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_fontAsset != null)
                foreach (Delegates.get_fontAsset_AfterArgs toInvoke in _afterget_fontAsset.GetInvocationList())
                    try
                    {
                        retVal = _afterget_fontAsset.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_fontAsset()
        {
            if (!HookedList.Contains("set_fontAsset"))
            {
                HookedList.Add("set_fontAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_fontAsset"), set_fontAsset);
            }
        }

        internal static event Delegates.set_fontAsset_BeforeArgs _beforeset_fontAsset;
        internal static event Delegates.set_fontAsset_AfterArgs _afterset_fontAsset;

        private static void set_fontAsset(Action<TMP_SubMesh, TMP_FontAsset> orig, TMP_SubMesh self,
            TMP_FontAsset value)
        {
            Delegates.Params_set_fontAsset @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_fontAsset != null)
                foreach (Delegates.set_fontAsset_BeforeArgs toInvoke in _beforeset_fontAsset.GetInvocationList())
                    try
                    {
                        _beforeset_fontAsset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_fontAsset != null)
                foreach (Delegates.set_fontAsset_AfterArgs toInvoke in _afterset_fontAsset.GetInvocationList())
                    try
                    {
                        _afterset_fontAsset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_spriteAsset()
        {
            if (!HookedList.Contains("get_spriteAsset"))
            {
                HookedList.Add("get_spriteAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_spriteAsset"), get_spriteAsset);
            }
        }

        internal static event Delegates.get_spriteAsset_BeforeArgs _beforeget_spriteAsset;
        internal static event Delegates.get_spriteAsset_AfterArgs _afterget_spriteAsset;

        private static TMP_SpriteAsset get_spriteAsset(Func<TMP_SubMesh, TMP_SpriteAsset> orig, TMP_SubMesh self)
        {
            Delegates.Params_get_spriteAsset @params = new()
            {
                self = self
            };
            if (_beforeget_spriteAsset != null)
                foreach (Delegates.get_spriteAsset_BeforeArgs toInvoke in _beforeget_spriteAsset.GetInvocationList())
                    try
                    {
                        _beforeget_spriteAsset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_spriteAsset != null)
                foreach (Delegates.get_spriteAsset_AfterArgs toInvoke in _afterget_spriteAsset.GetInvocationList())
                    try
                    {
                        retVal = _afterget_spriteAsset.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_spriteAsset()
        {
            if (!HookedList.Contains("set_spriteAsset"))
            {
                HookedList.Add("set_spriteAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_spriteAsset"), set_spriteAsset);
            }
        }

        internal static event Delegates.set_spriteAsset_BeforeArgs _beforeset_spriteAsset;
        internal static event Delegates.set_spriteAsset_AfterArgs _afterset_spriteAsset;

        private static void set_spriteAsset(Action<TMP_SubMesh, TMP_SpriteAsset> orig, TMP_SubMesh self,
            TMP_SpriteAsset value)
        {
            Delegates.Params_set_spriteAsset @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_spriteAsset != null)
                foreach (Delegates.set_spriteAsset_BeforeArgs toInvoke in _beforeset_spriteAsset.GetInvocationList())
                    try
                    {
                        _beforeset_spriteAsset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_spriteAsset != null)
                foreach (Delegates.set_spriteAsset_AfterArgs toInvoke in _afterset_spriteAsset.GetInvocationList())
                    try
                    {
                        _afterset_spriteAsset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_material()
        {
            if (!HookedList.Contains("get_material"))
            {
                HookedList.Add("get_material");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_material"), get_material);
            }
        }

        internal static event Delegates.get_material_BeforeArgs _beforeget_material;
        internal static event Delegates.get_material_AfterArgs _afterget_material;

        private static Material get_material(Func<TMP_SubMesh, Material> orig, TMP_SubMesh self)
        {
            Delegates.Params_get_material @params = new()
            {
                self = self
            };
            if (_beforeget_material != null)
                foreach (Delegates.get_material_BeforeArgs toInvoke in _beforeget_material.GetInvocationList())
                    try
                    {
                        _beforeget_material?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_material != null)
                foreach (Delegates.get_material_AfterArgs toInvoke in _afterget_material.GetInvocationList())
                    try
                    {
                        retVal = _afterget_material.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_material()
        {
            if (!HookedList.Contains("set_material"))
            {
                HookedList.Add("set_material");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_material"), set_material);
            }
        }

        internal static event Delegates.set_material_BeforeArgs _beforeset_material;
        internal static event Delegates.set_material_AfterArgs _afterset_material;

        private static void set_material(Action<TMP_SubMesh, Material> orig, TMP_SubMesh self, Material value)
        {
            Delegates.Params_set_material @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_material != null)
                foreach (Delegates.set_material_BeforeArgs toInvoke in _beforeset_material.GetInvocationList())
                    try
                    {
                        _beforeset_material?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_material != null)
                foreach (Delegates.set_material_AfterArgs toInvoke in _afterset_material.GetInvocationList())
                    try
                    {
                        _afterset_material.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_sharedMaterial()
        {
            if (!HookedList.Contains("get_sharedMaterial"))
            {
                HookedList.Add("get_sharedMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_sharedMaterial"), get_sharedMaterial);
            }
        }

        internal static event Delegates.get_sharedMaterial_BeforeArgs _beforeget_sharedMaterial;
        internal static event Delegates.get_sharedMaterial_AfterArgs _afterget_sharedMaterial;

        private static Material get_sharedMaterial(Func<TMP_SubMesh, Material> orig, TMP_SubMesh self)
        {
            Delegates.Params_get_sharedMaterial @params = new()
            {
                self = self
            };
            if (_beforeget_sharedMaterial != null)
                foreach (Delegates.get_sharedMaterial_BeforeArgs toInvoke in
                         _beforeget_sharedMaterial.GetInvocationList())
                    try
                    {
                        _beforeget_sharedMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_sharedMaterial != null)
                foreach (Delegates.get_sharedMaterial_AfterArgs toInvoke in
                         _afterget_sharedMaterial.GetInvocationList())
                    try
                    {
                        retVal = _afterget_sharedMaterial.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_sharedMaterial()
        {
            if (!HookedList.Contains("set_sharedMaterial"))
            {
                HookedList.Add("set_sharedMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_sharedMaterial"), set_sharedMaterial);
            }
        }

        internal static event Delegates.set_sharedMaterial_BeforeArgs _beforeset_sharedMaterial;
        internal static event Delegates.set_sharedMaterial_AfterArgs _afterset_sharedMaterial;

        private static void set_sharedMaterial(Action<TMP_SubMesh, Material> orig, TMP_SubMesh self, Material value)
        {
            Delegates.Params_set_sharedMaterial @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_sharedMaterial != null)
                foreach (Delegates.set_sharedMaterial_BeforeArgs toInvoke in
                         _beforeset_sharedMaterial.GetInvocationList())
                    try
                    {
                        _beforeset_sharedMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_sharedMaterial != null)
                foreach (Delegates.set_sharedMaterial_AfterArgs toInvoke in
                         _afterset_sharedMaterial.GetInvocationList())
                    try
                    {
                        _afterset_sharedMaterial.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_fallbackMaterial()
        {
            if (!HookedList.Contains("get_fallbackMaterial"))
            {
                HookedList.Add("get_fallbackMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_fallbackMaterial"),
                    get_fallbackMaterial);
            }
        }

        internal static event Delegates.get_fallbackMaterial_BeforeArgs _beforeget_fallbackMaterial;
        internal static event Delegates.get_fallbackMaterial_AfterArgs _afterget_fallbackMaterial;

        private static Material get_fallbackMaterial(Func<TMP_SubMesh, Material> orig, TMP_SubMesh self)
        {
            Delegates.Params_get_fallbackMaterial @params = new()
            {
                self = self
            };
            if (_beforeget_fallbackMaterial != null)
                foreach (Delegates.get_fallbackMaterial_BeforeArgs toInvoke in _beforeget_fallbackMaterial
                             .GetInvocationList())
                    try
                    {
                        _beforeget_fallbackMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_fallbackMaterial != null)
                foreach (Delegates.get_fallbackMaterial_AfterArgs toInvoke in _afterget_fallbackMaterial
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_fallbackMaterial.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_fallbackMaterial()
        {
            if (!HookedList.Contains("set_fallbackMaterial"))
            {
                HookedList.Add("set_fallbackMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_fallbackMaterial"),
                    set_fallbackMaterial);
            }
        }

        internal static event Delegates.set_fallbackMaterial_BeforeArgs _beforeset_fallbackMaterial;
        internal static event Delegates.set_fallbackMaterial_AfterArgs _afterset_fallbackMaterial;

        private static void set_fallbackMaterial(Action<TMP_SubMesh, Material> orig, TMP_SubMesh self, Material value)
        {
            Delegates.Params_set_fallbackMaterial @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_fallbackMaterial != null)
                foreach (Delegates.set_fallbackMaterial_BeforeArgs toInvoke in _beforeset_fallbackMaterial
                             .GetInvocationList())
                    try
                    {
                        _beforeset_fallbackMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_fallbackMaterial != null)
                foreach (Delegates.set_fallbackMaterial_AfterArgs toInvoke in _afterset_fallbackMaterial
                             .GetInvocationList())
                    try
                    {
                        _afterset_fallbackMaterial.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_fallbackSourceMaterial()
        {
            if (!HookedList.Contains("get_fallbackSourceMaterial"))
            {
                HookedList.Add("get_fallbackSourceMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_fallbackSourceMaterial"),
                    get_fallbackSourceMaterial);
            }
        }

        internal static event Delegates.get_fallbackSourceMaterial_BeforeArgs _beforeget_fallbackSourceMaterial;
        internal static event Delegates.get_fallbackSourceMaterial_AfterArgs _afterget_fallbackSourceMaterial;

        private static Material get_fallbackSourceMaterial(Func<TMP_SubMesh, Material> orig, TMP_SubMesh self)
        {
            Delegates.Params_get_fallbackSourceMaterial @params = new()
            {
                self = self
            };
            if (_beforeget_fallbackSourceMaterial != null)
                foreach (Delegates.get_fallbackSourceMaterial_BeforeArgs toInvoke in _beforeget_fallbackSourceMaterial
                             .GetInvocationList())
                    try
                    {
                        _beforeget_fallbackSourceMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_fallbackSourceMaterial != null)
                foreach (Delegates.get_fallbackSourceMaterial_AfterArgs toInvoke in _afterget_fallbackSourceMaterial
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_fallbackSourceMaterial.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_fallbackSourceMaterial()
        {
            if (!HookedList.Contains("set_fallbackSourceMaterial"))
            {
                HookedList.Add("set_fallbackSourceMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_fallbackSourceMaterial"),
                    set_fallbackSourceMaterial);
            }
        }

        internal static event Delegates.set_fallbackSourceMaterial_BeforeArgs _beforeset_fallbackSourceMaterial;
        internal static event Delegates.set_fallbackSourceMaterial_AfterArgs _afterset_fallbackSourceMaterial;

        private static void set_fallbackSourceMaterial(Action<TMP_SubMesh, Material> orig, TMP_SubMesh self,
            Material value)
        {
            Delegates.Params_set_fallbackSourceMaterial @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_fallbackSourceMaterial != null)
                foreach (Delegates.set_fallbackSourceMaterial_BeforeArgs toInvoke in _beforeset_fallbackSourceMaterial
                             .GetInvocationList())
                    try
                    {
                        _beforeset_fallbackSourceMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_fallbackSourceMaterial != null)
                foreach (Delegates.set_fallbackSourceMaterial_AfterArgs toInvoke in _afterset_fallbackSourceMaterial
                             .GetInvocationList())
                    try
                    {
                        _afterset_fallbackSourceMaterial.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_isDefaultMaterial()
        {
            if (!HookedList.Contains("get_isDefaultMaterial"))
            {
                HookedList.Add("get_isDefaultMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_isDefaultMaterial"),
                    get_isDefaultMaterial);
            }
        }

        internal static event Delegates.get_isDefaultMaterial_BeforeArgs _beforeget_isDefaultMaterial;
        internal static event Delegates.get_isDefaultMaterial_AfterArgs _afterget_isDefaultMaterial;

        private static bool get_isDefaultMaterial(Func<TMP_SubMesh, bool> orig, TMP_SubMesh self)
        {
            Delegates.Params_get_isDefaultMaterial @params = new()
            {
                self = self
            };
            if (_beforeget_isDefaultMaterial != null)
                foreach (Delegates.get_isDefaultMaterial_BeforeArgs toInvoke in _beforeget_isDefaultMaterial
                             .GetInvocationList())
                    try
                    {
                        _beforeget_isDefaultMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_isDefaultMaterial != null)
                foreach (Delegates.get_isDefaultMaterial_AfterArgs toInvoke in _afterget_isDefaultMaterial
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_isDefaultMaterial.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_isDefaultMaterial()
        {
            if (!HookedList.Contains("set_isDefaultMaterial"))
            {
                HookedList.Add("set_isDefaultMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_isDefaultMaterial"),
                    set_isDefaultMaterial);
            }
        }

        internal static event Delegates.set_isDefaultMaterial_BeforeArgs _beforeset_isDefaultMaterial;
        internal static event Delegates.set_isDefaultMaterial_AfterArgs _afterset_isDefaultMaterial;

        private static void set_isDefaultMaterial(Action<TMP_SubMesh, bool> orig, TMP_SubMesh self, bool value)
        {
            Delegates.Params_set_isDefaultMaterial @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_isDefaultMaterial != null)
                foreach (Delegates.set_isDefaultMaterial_BeforeArgs toInvoke in _beforeset_isDefaultMaterial
                             .GetInvocationList())
                    try
                    {
                        _beforeset_isDefaultMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_isDefaultMaterial != null)
                foreach (Delegates.set_isDefaultMaterial_AfterArgs toInvoke in _afterset_isDefaultMaterial
                             .GetInvocationList())
                    try
                    {
                        _afterset_isDefaultMaterial.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_padding()
        {
            if (!HookedList.Contains("get_padding"))
            {
                HookedList.Add("get_padding");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_padding"), get_padding);
            }
        }

        internal static event Delegates.get_padding_BeforeArgs _beforeget_padding;
        internal static event Delegates.get_padding_AfterArgs _afterget_padding;

        private static float get_padding(Func<TMP_SubMesh, float> orig, TMP_SubMesh self)
        {
            Delegates.Params_get_padding @params = new()
            {
                self = self
            };
            if (_beforeget_padding != null)
                foreach (Delegates.get_padding_BeforeArgs toInvoke in _beforeget_padding.GetInvocationList())
                    try
                    {
                        _beforeget_padding?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_padding != null)
                foreach (Delegates.get_padding_AfterArgs toInvoke in _afterget_padding.GetInvocationList())
                    try
                    {
                        retVal = _afterget_padding.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_padding()
        {
            if (!HookedList.Contains("set_padding"))
            {
                HookedList.Add("set_padding");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_padding"), set_padding);
            }
        }

        internal static event Delegates.set_padding_BeforeArgs _beforeset_padding;
        internal static event Delegates.set_padding_AfterArgs _afterset_padding;

        private static void set_padding(Action<TMP_SubMesh, float> orig, TMP_SubMesh self, float value)
        {
            Delegates.Params_set_padding @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_padding != null)
                foreach (Delegates.set_padding_BeforeArgs toInvoke in _beforeset_padding.GetInvocationList())
                    try
                    {
                        _beforeset_padding?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_padding != null)
                foreach (Delegates.set_padding_AfterArgs toInvoke in _afterset_padding.GetInvocationList())
                    try
                    {
                        _afterset_padding.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_renderer()
        {
            if (!HookedList.Contains("get_renderer"))
            {
                HookedList.Add("get_renderer");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_renderer"), get_renderer);
            }
        }

        internal static event Delegates.get_renderer_BeforeArgs _beforeget_renderer;
        internal static event Delegates.get_renderer_AfterArgs _afterget_renderer;

        private static Renderer get_renderer(Func<TMP_SubMesh, Renderer> orig, TMP_SubMesh self)
        {
            Delegates.Params_get_renderer @params = new()
            {
                self = self
            };
            if (_beforeget_renderer != null)
                foreach (Delegates.get_renderer_BeforeArgs toInvoke in _beforeget_renderer.GetInvocationList())
                    try
                    {
                        _beforeget_renderer?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_renderer != null)
                foreach (Delegates.get_renderer_AfterArgs toInvoke in _afterget_renderer.GetInvocationList())
                    try
                    {
                        retVal = _afterget_renderer.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_meshFilter()
        {
            if (!HookedList.Contains("get_meshFilter"))
            {
                HookedList.Add("get_meshFilter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_meshFilter"), get_meshFilter);
            }
        }

        internal static event Delegates.get_meshFilter_BeforeArgs _beforeget_meshFilter;
        internal static event Delegates.get_meshFilter_AfterArgs _afterget_meshFilter;

        private static MeshFilter get_meshFilter(Func<TMP_SubMesh, MeshFilter> orig, TMP_SubMesh self)
        {
            Delegates.Params_get_meshFilter @params = new()
            {
                self = self
            };
            if (_beforeget_meshFilter != null)
                foreach (Delegates.get_meshFilter_BeforeArgs toInvoke in _beforeget_meshFilter.GetInvocationList())
                    try
                    {
                        _beforeget_meshFilter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_meshFilter != null)
                foreach (Delegates.get_meshFilter_AfterArgs toInvoke in _afterget_meshFilter.GetInvocationList())
                    try
                    {
                        retVal = _afterget_meshFilter.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_mesh()
        {
            if (!HookedList.Contains("get_mesh"))
            {
                HookedList.Add("get_mesh");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_mesh"), get_mesh);
            }
        }

        internal static event Delegates.get_mesh_BeforeArgs _beforeget_mesh;
        internal static event Delegates.get_mesh_AfterArgs _afterget_mesh;

        private static Mesh get_mesh(Func<TMP_SubMesh, Mesh> orig, TMP_SubMesh self)
        {
            Delegates.Params_get_mesh @params = new()
            {
                self = self
            };
            if (_beforeget_mesh != null)
                foreach (Delegates.get_mesh_BeforeArgs toInvoke in _beforeget_mesh.GetInvocationList())
                    try
                    {
                        _beforeget_mesh?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_mesh != null)
                foreach (Delegates.get_mesh_AfterArgs toInvoke in _afterget_mesh.GetInvocationList())
                    try
                    {
                        retVal = _afterget_mesh.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_mesh()
        {
            if (!HookedList.Contains("set_mesh"))
            {
                HookedList.Add("set_mesh");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_mesh"), set_mesh);
            }
        }

        internal static event Delegates.set_mesh_BeforeArgs _beforeset_mesh;
        internal static event Delegates.set_mesh_AfterArgs _afterset_mesh;

        private static void set_mesh(Action<TMP_SubMesh, Mesh> orig, TMP_SubMesh self, Mesh value)
        {
            Delegates.Params_set_mesh @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_mesh != null)
                foreach (Delegates.set_mesh_BeforeArgs toInvoke in _beforeset_mesh.GetInvocationList())
                    try
                    {
                        _beforeset_mesh?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_mesh != null)
                foreach (Delegates.set_mesh_AfterArgs toInvoke in _afterset_mesh.GetInvocationList())
                    try
                    {
                        _afterset_mesh.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "OnEnable"), OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(Action<TMP_SubMesh> orig, TMP_SubMesh self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "OnDisable"), OnDisable);
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(Action<TMP_SubMesh> orig, TMP_SubMesh self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "OnDestroy"), OnDestroy);
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_AfterArgs _afterOnDestroy;

        private static void OnDestroy(Action<TMP_SubMesh> orig, TMP_SubMesh self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            if (_beforeOnDestroy != null)
                foreach (Delegates.OnDestroy_BeforeArgs toInvoke in _beforeOnDestroy.GetInvocationList())
                    try
                    {
                        _beforeOnDestroy?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null)
                foreach (Delegates.OnDestroy_AfterArgs toInvoke in _afterOnDestroy.GetInvocationList())
                    try
                    {
                        _afterOnDestroy.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAddSubTextObject()
        {
            if (!HookedList.Contains("AddSubTextObject"))
            {
                HookedList.Add("AddSubTextObject");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "AddSubTextObject", false),
                    AddSubTextObject);
            }
        }

        internal static event Delegates.AddSubTextObject_BeforeArgs _beforeAddSubTextObject;
        internal static event Delegates.AddSubTextObject_AfterArgs _afterAddSubTextObject;

        private static TMP_SubMesh AddSubTextObject(Func<TextMeshPro, MaterialReference, TMP_SubMesh> orig,
            TextMeshPro textComponent, MaterialReference materialReference)
        {
            Delegates.Params_AddSubTextObject @params = new()
            {
                textComponent = textComponent, materialReference = materialReference
            };
            if (_beforeAddSubTextObject != null)
                foreach (Delegates.AddSubTextObject_BeforeArgs toInvoke in _beforeAddSubTextObject.GetInvocationList())
                    try
                    {
                        _beforeAddSubTextObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            textComponent = @params.textComponent;
            materialReference = @params.materialReference;
            var retVal = orig(textComponent, materialReference);
            if (_afterAddSubTextObject != null)
                foreach (Delegates.AddSubTextObject_AfterArgs toInvoke in _afterAddSubTextObject.GetInvocationList())
                    try
                    {
                        retVal = _afterAddSubTextObject.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookDestroySelf()
        {
            if (!HookedList.Contains("DestroySelf"))
            {
                HookedList.Add("DestroySelf");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "DestroySelf"), DestroySelf);
            }
        }

        internal static event Delegates.DestroySelf_BeforeArgs _beforeDestroySelf;
        internal static event Delegates.DestroySelf_AfterArgs _afterDestroySelf;

        private static void DestroySelf(Action<TMP_SubMesh> orig, TMP_SubMesh self)
        {
            Delegates.Params_DestroySelf @params = new()
            {
                self = self
            };
            if (_beforeDestroySelf != null)
                foreach (Delegates.DestroySelf_BeforeArgs toInvoke in _beforeDestroySelf.GetInvocationList())
                    try
                    {
                        _beforeDestroySelf?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterDestroySelf != null)
                foreach (Delegates.DestroySelf_AfterArgs toInvoke in _afterDestroySelf.GetInvocationList())
                    try
                    {
                        _afterDestroySelf.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetMaterial()
        {
            if (!HookedList.Contains("GetMaterial"))
            {
                HookedList.Add("GetMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "GetMaterial"), GetMaterial);
            }
        }

        internal static event Delegates.GetMaterial_BeforeArgs _beforeGetMaterial;
        internal static event Delegates.GetMaterial_AfterArgs _afterGetMaterial;

        private static Material GetMaterial(Func<TMP_SubMesh, Material, Material> orig, TMP_SubMesh self, Material mat)
        {
            Delegates.Params_GetMaterial @params = new()
            {
                self = self, mat = mat
            };
            if (_beforeGetMaterial != null)
                foreach (Delegates.GetMaterial_BeforeArgs toInvoke in _beforeGetMaterial.GetInvocationList())
                    try
                    {
                        _beforeGetMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            mat = @params.mat;
            var retVal = orig(self, mat);
            if (_afterGetMaterial != null)
                foreach (Delegates.GetMaterial_AfterArgs toInvoke in _afterGetMaterial.GetInvocationList())
                    try
                    {
                        retVal = _afterGetMaterial.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCreateMaterialInstance()
        {
            if (!HookedList.Contains("CreateMaterialInstance"))
            {
                HookedList.Add("CreateMaterialInstance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "CreateMaterialInstance"),
                    CreateMaterialInstance);
            }
        }

        internal static event Delegates.CreateMaterialInstance_BeforeArgs _beforeCreateMaterialInstance;
        internal static event Delegates.CreateMaterialInstance_AfterArgs _afterCreateMaterialInstance;

        private static Material CreateMaterialInstance(Func<TMP_SubMesh, Material, Material> orig, TMP_SubMesh self,
            Material source)
        {
            Delegates.Params_CreateMaterialInstance @params = new()
            {
                self = self, source = source
            };
            if (_beforeCreateMaterialInstance != null)
                foreach (Delegates.CreateMaterialInstance_BeforeArgs toInvoke in _beforeCreateMaterialInstance
                             .GetInvocationList())
                    try
                    {
                        _beforeCreateMaterialInstance?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            source = @params.source;
            var retVal = orig(self, source);
            if (_afterCreateMaterialInstance != null)
                foreach (Delegates.CreateMaterialInstance_AfterArgs toInvoke in _afterCreateMaterialInstance
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterCreateMaterialInstance.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetSharedMaterial()
        {
            if (!HookedList.Contains("GetSharedMaterial"))
            {
                HookedList.Add("GetSharedMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "GetSharedMaterial"), GetSharedMaterial);
            }
        }

        internal static event Delegates.GetSharedMaterial_BeforeArgs _beforeGetSharedMaterial;
        internal static event Delegates.GetSharedMaterial_AfterArgs _afterGetSharedMaterial;

        private static Material GetSharedMaterial(Func<TMP_SubMesh, Material> orig, TMP_SubMesh self)
        {
            Delegates.Params_GetSharedMaterial @params = new()
            {
                self = self
            };
            if (_beforeGetSharedMaterial != null)
                foreach (Delegates.GetSharedMaterial_BeforeArgs toInvoke in
                         _beforeGetSharedMaterial.GetInvocationList())
                    try
                    {
                        _beforeGetSharedMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetSharedMaterial != null)
                foreach (Delegates.GetSharedMaterial_AfterArgs toInvoke in _afterGetSharedMaterial.GetInvocationList())
                    try
                    {
                        retVal = _afterGetSharedMaterial.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetSharedMaterial()
        {
            if (!HookedList.Contains("SetSharedMaterial"))
            {
                HookedList.Add("SetSharedMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "SetSharedMaterial"), SetSharedMaterial);
            }
        }

        internal static event Delegates.SetSharedMaterial_BeforeArgs _beforeSetSharedMaterial;
        internal static event Delegates.SetSharedMaterial_AfterArgs _afterSetSharedMaterial;

        private static void SetSharedMaterial(Action<TMP_SubMesh, Material> orig, TMP_SubMesh self, Material mat)
        {
            Delegates.Params_SetSharedMaterial @params = new()
            {
                self = self, mat = mat
            };
            if (_beforeSetSharedMaterial != null)
                foreach (Delegates.SetSharedMaterial_BeforeArgs toInvoke in
                         _beforeSetSharedMaterial.GetInvocationList())
                    try
                    {
                        _beforeSetSharedMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            mat = @params.mat;
            orig(self, mat);
            if (_afterSetSharedMaterial != null)
                foreach (Delegates.SetSharedMaterial_AfterArgs toInvoke in _afterSetSharedMaterial.GetInvocationList())
                    try
                    {
                        _afterSetSharedMaterial.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetPaddingForMaterial()
        {
            if (!HookedList.Contains("GetPaddingForMaterial"))
            {
                HookedList.Add("GetPaddingForMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "GetPaddingForMaterial"),
                    GetPaddingForMaterial);
            }
        }

        internal static event Delegates.GetPaddingForMaterial_BeforeArgs _beforeGetPaddingForMaterial;
        internal static event Delegates.GetPaddingForMaterial_AfterArgs _afterGetPaddingForMaterial;

        private static float GetPaddingForMaterial(Func<TMP_SubMesh, float> orig, TMP_SubMesh self)
        {
            Delegates.Params_GetPaddingForMaterial @params = new()
            {
                self = self
            };
            if (_beforeGetPaddingForMaterial != null)
                foreach (Delegates.GetPaddingForMaterial_BeforeArgs toInvoke in _beforeGetPaddingForMaterial
                             .GetInvocationList())
                    try
                    {
                        _beforeGetPaddingForMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetPaddingForMaterial != null)
                foreach (Delegates.GetPaddingForMaterial_AfterArgs toInvoke in _afterGetPaddingForMaterial
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetPaddingForMaterial.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookUpdateMeshPadding()
        {
            if (!HookedList.Contains("UpdateMeshPadding"))
            {
                HookedList.Add("UpdateMeshPadding");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "UpdateMeshPadding"), UpdateMeshPadding);
            }
        }

        internal static event Delegates.UpdateMeshPadding_BeforeArgs _beforeUpdateMeshPadding;
        internal static event Delegates.UpdateMeshPadding_AfterArgs _afterUpdateMeshPadding;

        private static void UpdateMeshPadding(Action<TMP_SubMesh, bool, bool> orig, TMP_SubMesh self,
            bool isExtraPadding, bool isUsingBold)
        {
            Delegates.Params_UpdateMeshPadding @params = new()
            {
                self = self, isExtraPadding = isExtraPadding, isUsingBold = isUsingBold
            };
            if (_beforeUpdateMeshPadding != null)
                foreach (Delegates.UpdateMeshPadding_BeforeArgs toInvoke in
                         _beforeUpdateMeshPadding.GetInvocationList())
                    try
                    {
                        _beforeUpdateMeshPadding?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            isExtraPadding = @params.isExtraPadding;
            isUsingBold = @params.isUsingBold;
            orig(self, isExtraPadding, isUsingBold);
            if (_afterUpdateMeshPadding != null)
                foreach (Delegates.UpdateMeshPadding_AfterArgs toInvoke in _afterUpdateMeshPadding.GetInvocationList())
                    try
                    {
                        _afterUpdateMeshPadding.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetVerticesDirty()
        {
            if (!HookedList.Contains("SetVerticesDirty"))
            {
                HookedList.Add("SetVerticesDirty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "SetVerticesDirty"), SetVerticesDirty);
            }
        }

        internal static event Delegates.SetVerticesDirty_BeforeArgs _beforeSetVerticesDirty;
        internal static event Delegates.SetVerticesDirty_AfterArgs _afterSetVerticesDirty;

        private static void SetVerticesDirty(Action<TMP_SubMesh> orig, TMP_SubMesh self)
        {
            Delegates.Params_SetVerticesDirty @params = new()
            {
                self = self
            };
            if (_beforeSetVerticesDirty != null)
                foreach (Delegates.SetVerticesDirty_BeforeArgs toInvoke in _beforeSetVerticesDirty.GetInvocationList())
                    try
                    {
                        _beforeSetVerticesDirty?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSetVerticesDirty != null)
                foreach (Delegates.SetVerticesDirty_AfterArgs toInvoke in _afterSetVerticesDirty.GetInvocationList())
                    try
                    {
                        _afterSetVerticesDirty.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetMaterialDirty()
        {
            if (!HookedList.Contains("SetMaterialDirty"))
            {
                HookedList.Add("SetMaterialDirty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "SetMaterialDirty"), SetMaterialDirty);
            }
        }

        internal static event Delegates.SetMaterialDirty_BeforeArgs _beforeSetMaterialDirty;
        internal static event Delegates.SetMaterialDirty_AfterArgs _afterSetMaterialDirty;

        private static void SetMaterialDirty(Action<TMP_SubMesh> orig, TMP_SubMesh self)
        {
            Delegates.Params_SetMaterialDirty @params = new()
            {
                self = self
            };
            if (_beforeSetMaterialDirty != null)
                foreach (Delegates.SetMaterialDirty_BeforeArgs toInvoke in _beforeSetMaterialDirty.GetInvocationList())
                    try
                    {
                        _beforeSetMaterialDirty?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSetMaterialDirty != null)
                foreach (Delegates.SetMaterialDirty_AfterArgs toInvoke in _afterSetMaterialDirty.GetInvocationList())
                    try
                    {
                        _afterSetMaterialDirty.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateMaterial()
        {
            if (!HookedList.Contains("UpdateMaterial"))
            {
                HookedList.Add("UpdateMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "UpdateMaterial"), UpdateMaterial);
            }
        }

        internal static event Delegates.UpdateMaterial_BeforeArgs _beforeUpdateMaterial;
        internal static event Delegates.UpdateMaterial_AfterArgs _afterUpdateMaterial;

        private static void UpdateMaterial(Action<TMP_SubMesh> orig, TMP_SubMesh self)
        {
            Delegates.Params_UpdateMaterial @params = new()
            {
                self = self
            };
            if (_beforeUpdateMaterial != null)
                foreach (Delegates.UpdateMaterial_BeforeArgs toInvoke in _beforeUpdateMaterial.GetInvocationList())
                    try
                    {
                        _beforeUpdateMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateMaterial != null)
                foreach (Delegates.UpdateMaterial_AfterArgs toInvoke in _afterUpdateMaterial.GetInvocationList())
                    try
                    {
                        _afterUpdateMaterial.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate TMP_SubMesh AddSubTextObject_AfterArgs(Params_AddSubTextObject args, TMP_SubMesh ret);

        public delegate void AddSubTextObject_BeforeArgs(Params_AddSubTextObject args);

        public delegate TMP_SubMesh AddSubTextObject_WithArgs(Func<TextMeshPro, MaterialReference, TMP_SubMesh> orig,
            TextMeshPro textComponent, MaterialReference materialReference);

        public delegate Material CreateMaterialInstance_AfterArgs(Params_CreateMaterialInstance args, Material ret);

        public delegate void CreateMaterialInstance_BeforeArgs(Params_CreateMaterialInstance args);

        public delegate Material CreateMaterialInstance_WithArgs(Func<TMP_SubMesh, Material, Material> orig,
            TMP_SubMesh self, Material source);

        public delegate void DestroySelf_AfterArgs(Params_DestroySelf args);

        public delegate void DestroySelf_BeforeArgs(Params_DestroySelf args);

        public delegate void DestroySelf_WithArgs(Action<TMP_SubMesh> orig, TMP_SubMesh self);

        public delegate Material get_fallbackMaterial_AfterArgs(Params_get_fallbackMaterial args, Material ret);

        public delegate void get_fallbackMaterial_BeforeArgs(Params_get_fallbackMaterial args);

        public delegate Material get_fallbackMaterial_WithArgs(Func<TMP_SubMesh, Material> orig, TMP_SubMesh self);

        public delegate Material get_fallbackSourceMaterial_AfterArgs(Params_get_fallbackSourceMaterial args,
            Material ret);

        public delegate void get_fallbackSourceMaterial_BeforeArgs(Params_get_fallbackSourceMaterial args);

        public delegate Material
            get_fallbackSourceMaterial_WithArgs(Func<TMP_SubMesh, Material> orig, TMP_SubMesh self);

        public delegate TMP_FontAsset get_fontAsset_AfterArgs(Params_get_fontAsset args, TMP_FontAsset ret);

        public delegate void get_fontAsset_BeforeArgs(Params_get_fontAsset args);

        public delegate TMP_FontAsset get_fontAsset_WithArgs(Func<TMP_SubMesh, TMP_FontAsset> orig, TMP_SubMesh self);

        public delegate bool get_isDefaultMaterial_AfterArgs(Params_get_isDefaultMaterial args, bool ret);

        public delegate void get_isDefaultMaterial_BeforeArgs(Params_get_isDefaultMaterial args);

        public delegate bool get_isDefaultMaterial_WithArgs(Func<TMP_SubMesh, bool> orig, TMP_SubMesh self);

        public delegate Material get_material_AfterArgs(Params_get_material args, Material ret);

        public delegate void get_material_BeforeArgs(Params_get_material args);

        public delegate Material get_material_WithArgs(Func<TMP_SubMesh, Material> orig, TMP_SubMesh self);

        public delegate Mesh get_mesh_AfterArgs(Params_get_mesh args, Mesh ret);

        public delegate void get_mesh_BeforeArgs(Params_get_mesh args);

        public delegate Mesh get_mesh_WithArgs(Func<TMP_SubMesh, Mesh> orig, TMP_SubMesh self);

        public delegate MeshFilter get_meshFilter_AfterArgs(Params_get_meshFilter args, MeshFilter ret);

        public delegate void get_meshFilter_BeforeArgs(Params_get_meshFilter args);

        public delegate MeshFilter get_meshFilter_WithArgs(Func<TMP_SubMesh, MeshFilter> orig, TMP_SubMesh self);

        public delegate float get_padding_AfterArgs(Params_get_padding args, float ret);

        public delegate void get_padding_BeforeArgs(Params_get_padding args);

        public delegate float get_padding_WithArgs(Func<TMP_SubMesh, float> orig, TMP_SubMesh self);

        public delegate Renderer get_renderer_AfterArgs(Params_get_renderer args, Renderer ret);

        public delegate void get_renderer_BeforeArgs(Params_get_renderer args);

        public delegate Renderer get_renderer_WithArgs(Func<TMP_SubMesh, Renderer> orig, TMP_SubMesh self);

        public delegate Material get_sharedMaterial_AfterArgs(Params_get_sharedMaterial args, Material ret);

        public delegate void get_sharedMaterial_BeforeArgs(Params_get_sharedMaterial args);

        public delegate Material get_sharedMaterial_WithArgs(Func<TMP_SubMesh, Material> orig, TMP_SubMesh self);

        public delegate TMP_SpriteAsset get_spriteAsset_AfterArgs(Params_get_spriteAsset args, TMP_SpriteAsset ret);

        public delegate void get_spriteAsset_BeforeArgs(Params_get_spriteAsset args);

        public delegate TMP_SpriteAsset get_spriteAsset_WithArgs(Func<TMP_SubMesh, TMP_SpriteAsset> orig,
            TMP_SubMesh self);

        public delegate Material GetMaterial_AfterArgs(Params_GetMaterial args, Material ret);

        public delegate void GetMaterial_BeforeArgs(Params_GetMaterial args);

        public delegate Material GetMaterial_WithArgs(Func<TMP_SubMesh, Material, Material> orig, TMP_SubMesh self,
            Material mat);

        public delegate float GetPaddingForMaterial_AfterArgs(Params_GetPaddingForMaterial args, float ret);

        public delegate void GetPaddingForMaterial_BeforeArgs(Params_GetPaddingForMaterial args);

        public delegate float GetPaddingForMaterial_WithArgs(Func<TMP_SubMesh, float> orig, TMP_SubMesh self);

        public delegate Material GetSharedMaterial_AfterArgs(Params_GetSharedMaterial args, Material ret);

        public delegate void GetSharedMaterial_BeforeArgs(Params_GetSharedMaterial args);

        public delegate Material GetSharedMaterial_WithArgs(Func<TMP_SubMesh, Material> orig, TMP_SubMesh self);

        public delegate void OnDestroy_AfterArgs(Params_OnDestroy args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_WithArgs(Action<TMP_SubMesh> orig, TMP_SubMesh self);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<TMP_SubMesh> orig, TMP_SubMesh self);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<TMP_SubMesh> orig, TMP_SubMesh self);

        public delegate void set_fallbackMaterial_AfterArgs(Params_set_fallbackMaterial args);

        public delegate void set_fallbackMaterial_BeforeArgs(Params_set_fallbackMaterial args);

        public delegate void set_fallbackMaterial_WithArgs(Action<TMP_SubMesh, Material> orig, TMP_SubMesh self,
            Material value);

        public delegate void set_fallbackSourceMaterial_AfterArgs(Params_set_fallbackSourceMaterial args);

        public delegate void set_fallbackSourceMaterial_BeforeArgs(Params_set_fallbackSourceMaterial args);

        public delegate void set_fallbackSourceMaterial_WithArgs(Action<TMP_SubMesh, Material> orig, TMP_SubMesh self,
            Material value);

        public delegate void set_fontAsset_AfterArgs(Params_set_fontAsset args);

        public delegate void set_fontAsset_BeforeArgs(Params_set_fontAsset args);

        public delegate void set_fontAsset_WithArgs(Action<TMP_SubMesh, TMP_FontAsset> orig, TMP_SubMesh self,
            TMP_FontAsset value);

        public delegate void set_isDefaultMaterial_AfterArgs(Params_set_isDefaultMaterial args);

        public delegate void set_isDefaultMaterial_BeforeArgs(Params_set_isDefaultMaterial args);

        public delegate void set_isDefaultMaterial_WithArgs(Action<TMP_SubMesh, bool> orig, TMP_SubMesh self,
            bool value);

        public delegate void set_material_AfterArgs(Params_set_material args);

        public delegate void set_material_BeforeArgs(Params_set_material args);

        public delegate void set_material_WithArgs(Action<TMP_SubMesh, Material> orig, TMP_SubMesh self,
            Material value);

        public delegate void set_mesh_AfterArgs(Params_set_mesh args);

        public delegate void set_mesh_BeforeArgs(Params_set_mesh args);

        public delegate void set_mesh_WithArgs(Action<TMP_SubMesh, Mesh> orig, TMP_SubMesh self, Mesh value);

        public delegate void set_padding_AfterArgs(Params_set_padding args);

        public delegate void set_padding_BeforeArgs(Params_set_padding args);

        public delegate void set_padding_WithArgs(Action<TMP_SubMesh, float> orig, TMP_SubMesh self, float value);

        public delegate void set_sharedMaterial_AfterArgs(Params_set_sharedMaterial args);

        public delegate void set_sharedMaterial_BeforeArgs(Params_set_sharedMaterial args);

        public delegate void set_sharedMaterial_WithArgs(Action<TMP_SubMesh, Material> orig, TMP_SubMesh self,
            Material value);

        public delegate void set_spriteAsset_AfterArgs(Params_set_spriteAsset args);

        public delegate void set_spriteAsset_BeforeArgs(Params_set_spriteAsset args);

        public delegate void set_spriteAsset_WithArgs(Action<TMP_SubMesh, TMP_SpriteAsset> orig, TMP_SubMesh self,
            TMP_SpriteAsset value);

        public delegate void SetMaterialDirty_AfterArgs(Params_SetMaterialDirty args);

        public delegate void SetMaterialDirty_BeforeArgs(Params_SetMaterialDirty args);

        public delegate void SetMaterialDirty_WithArgs(Action<TMP_SubMesh> orig, TMP_SubMesh self);

        public delegate void SetSharedMaterial_AfterArgs(Params_SetSharedMaterial args);

        public delegate void SetSharedMaterial_BeforeArgs(Params_SetSharedMaterial args);

        public delegate void SetSharedMaterial_WithArgs(Action<TMP_SubMesh, Material> orig, TMP_SubMesh self,
            Material mat);

        public delegate void SetVerticesDirty_AfterArgs(Params_SetVerticesDirty args);

        public delegate void SetVerticesDirty_BeforeArgs(Params_SetVerticesDirty args);

        public delegate void SetVerticesDirty_WithArgs(Action<TMP_SubMesh> orig, TMP_SubMesh self);

        public delegate void UpdateMaterial_AfterArgs(Params_UpdateMaterial args);

        public delegate void UpdateMaterial_BeforeArgs(Params_UpdateMaterial args);

        public delegate void UpdateMaterial_WithArgs(Action<TMP_SubMesh> orig, TMP_SubMesh self);

        public delegate void UpdateMeshPadding_AfterArgs(Params_UpdateMeshPadding args);

        public delegate void UpdateMeshPadding_BeforeArgs(Params_UpdateMeshPadding args);

        public delegate void UpdateMeshPadding_WithArgs(Action<TMP_SubMesh, bool, bool> orig, TMP_SubMesh self,
            bool isExtraPadding, bool isUsingBold);

        public sealed class Params_get_fontAsset
        {
            public TMP_SubMesh self;
        }

        public sealed class Params_set_fontAsset
        {
            public TMP_SubMesh self;
            public TMP_FontAsset value;
        }

        public sealed class Params_get_spriteAsset
        {
            public TMP_SubMesh self;
        }

        public sealed class Params_set_spriteAsset
        {
            public TMP_SubMesh self;
            public TMP_SpriteAsset value;
        }

        public sealed class Params_get_material
        {
            public TMP_SubMesh self;
        }

        public sealed class Params_set_material
        {
            public TMP_SubMesh self;
            public Material value;
        }

        public sealed class Params_get_sharedMaterial
        {
            public TMP_SubMesh self;
        }

        public sealed class Params_set_sharedMaterial
        {
            public TMP_SubMesh self;
            public Material value;
        }

        public sealed class Params_get_fallbackMaterial
        {
            public TMP_SubMesh self;
        }

        public sealed class Params_set_fallbackMaterial
        {
            public TMP_SubMesh self;
            public Material value;
        }

        public sealed class Params_get_fallbackSourceMaterial
        {
            public TMP_SubMesh self;
        }

        public sealed class Params_set_fallbackSourceMaterial
        {
            public TMP_SubMesh self;
            public Material value;
        }

        public sealed class Params_get_isDefaultMaterial
        {
            public TMP_SubMesh self;
        }

        public sealed class Params_set_isDefaultMaterial
        {
            public TMP_SubMesh self;
            public bool value;
        }

        public sealed class Params_get_padding
        {
            public TMP_SubMesh self;
        }

        public sealed class Params_set_padding
        {
            public TMP_SubMesh self;
            public float value;
        }

        public sealed class Params_get_renderer
        {
            public TMP_SubMesh self;
        }

        public sealed class Params_get_meshFilter
        {
            public TMP_SubMesh self;
        }

        public sealed class Params_get_mesh
        {
            public TMP_SubMesh self;
        }

        public sealed class Params_set_mesh
        {
            public TMP_SubMesh self;
            public Mesh value;
        }

        public sealed class Params_OnEnable
        {
            public TMP_SubMesh self;
        }

        public sealed class Params_OnDisable
        {
            public TMP_SubMesh self;
        }

        public sealed class Params_OnDestroy
        {
            public TMP_SubMesh self;
        }

        public sealed class Params_AddSubTextObject
        {
            public MaterialReference materialReference;
            public TextMeshPro textComponent;
        }

        public sealed class Params_DestroySelf
        {
            public TMP_SubMesh self;
        }

        public sealed class Params_GetMaterial
        {
            public Material mat;
            public TMP_SubMesh self;
        }

        public sealed class Params_CreateMaterialInstance
        {
            public TMP_SubMesh self;
            public Material source;
        }

        public sealed class Params_GetSharedMaterial
        {
            public TMP_SubMesh self;
        }

        public sealed class Params_SetSharedMaterial
        {
            public Material mat;
            public TMP_SubMesh self;
        }

        public sealed class Params_GetPaddingForMaterial
        {
            public TMP_SubMesh self;
        }

        public sealed class Params_UpdateMeshPadding
        {
            public bool isExtraPadding;
            public bool isUsingBold;
            public TMP_SubMesh self;
        }

        public sealed class Params_SetVerticesDirty
        {
            public TMP_SubMesh self;
        }

        public sealed class Params_SetMaterialDirty
        {
            public TMP_SubMesh self;
        }

        public sealed class Params_UpdateMaterial
        {
            public TMP_SubMesh self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_fontAsset_BeforeArgs get_fontAsset
        {
            add
            {
                HookHandler._beforeget_fontAsset += value;
                HookHandler.Hookget_fontAsset();
            }
            remove => HookHandler._beforeget_fontAsset -= value;
        }

        public static event Delegates.set_fontAsset_BeforeArgs set_fontAsset
        {
            add
            {
                HookHandler._beforeset_fontAsset += value;
                HookHandler.Hookset_fontAsset();
            }
            remove => HookHandler._beforeset_fontAsset -= value;
        }

        public static event Delegates.get_spriteAsset_BeforeArgs get_spriteAsset
        {
            add
            {
                HookHandler._beforeget_spriteAsset += value;
                HookHandler.Hookget_spriteAsset();
            }
            remove => HookHandler._beforeget_spriteAsset -= value;
        }

        public static event Delegates.set_spriteAsset_BeforeArgs set_spriteAsset
        {
            add
            {
                HookHandler._beforeset_spriteAsset += value;
                HookHandler.Hookset_spriteAsset();
            }
            remove => HookHandler._beforeset_spriteAsset -= value;
        }

        public static event Delegates.get_material_BeforeArgs get_material
        {
            add
            {
                HookHandler._beforeget_material += value;
                HookHandler.Hookget_material();
            }
            remove => HookHandler._beforeget_material -= value;
        }

        public static event Delegates.set_material_BeforeArgs set_material
        {
            add
            {
                HookHandler._beforeset_material += value;
                HookHandler.Hookset_material();
            }
            remove => HookHandler._beforeset_material -= value;
        }

        public static event Delegates.get_sharedMaterial_BeforeArgs get_sharedMaterial
        {
            add
            {
                HookHandler._beforeget_sharedMaterial += value;
                HookHandler.Hookget_sharedMaterial();
            }
            remove => HookHandler._beforeget_sharedMaterial -= value;
        }

        public static event Delegates.set_sharedMaterial_BeforeArgs set_sharedMaterial
        {
            add
            {
                HookHandler._beforeset_sharedMaterial += value;
                HookHandler.Hookset_sharedMaterial();
            }
            remove => HookHandler._beforeset_sharedMaterial -= value;
        }

        public static event Delegates.get_fallbackMaterial_BeforeArgs get_fallbackMaterial
        {
            add
            {
                HookHandler._beforeget_fallbackMaterial += value;
                HookHandler.Hookget_fallbackMaterial();
            }
            remove => HookHandler._beforeget_fallbackMaterial -= value;
        }

        public static event Delegates.set_fallbackMaterial_BeforeArgs set_fallbackMaterial
        {
            add
            {
                HookHandler._beforeset_fallbackMaterial += value;
                HookHandler.Hookset_fallbackMaterial();
            }
            remove => HookHandler._beforeset_fallbackMaterial -= value;
        }

        public static event Delegates.get_fallbackSourceMaterial_BeforeArgs get_fallbackSourceMaterial
        {
            add
            {
                HookHandler._beforeget_fallbackSourceMaterial += value;
                HookHandler.Hookget_fallbackSourceMaterial();
            }
            remove => HookHandler._beforeget_fallbackSourceMaterial -= value;
        }

        public static event Delegates.set_fallbackSourceMaterial_BeforeArgs set_fallbackSourceMaterial
        {
            add
            {
                HookHandler._beforeset_fallbackSourceMaterial += value;
                HookHandler.Hookset_fallbackSourceMaterial();
            }
            remove => HookHandler._beforeset_fallbackSourceMaterial -= value;
        }

        public static event Delegates.get_isDefaultMaterial_BeforeArgs get_isDefaultMaterial
        {
            add
            {
                HookHandler._beforeget_isDefaultMaterial += value;
                HookHandler.Hookget_isDefaultMaterial();
            }
            remove => HookHandler._beforeget_isDefaultMaterial -= value;
        }

        public static event Delegates.set_isDefaultMaterial_BeforeArgs set_isDefaultMaterial
        {
            add
            {
                HookHandler._beforeset_isDefaultMaterial += value;
                HookHandler.Hookset_isDefaultMaterial();
            }
            remove => HookHandler._beforeset_isDefaultMaterial -= value;
        }

        public static event Delegates.get_padding_BeforeArgs get_padding
        {
            add
            {
                HookHandler._beforeget_padding += value;
                HookHandler.Hookget_padding();
            }
            remove => HookHandler._beforeget_padding -= value;
        }

        public static event Delegates.set_padding_BeforeArgs set_padding
        {
            add
            {
                HookHandler._beforeset_padding += value;
                HookHandler.Hookset_padding();
            }
            remove => HookHandler._beforeset_padding -= value;
        }

        public static event Delegates.get_renderer_BeforeArgs get_renderer
        {
            add
            {
                HookHandler._beforeget_renderer += value;
                HookHandler.Hookget_renderer();
            }
            remove => HookHandler._beforeget_renderer -= value;
        }

        public static event Delegates.get_meshFilter_BeforeArgs get_meshFilter
        {
            add
            {
                HookHandler._beforeget_meshFilter += value;
                HookHandler.Hookget_meshFilter();
            }
            remove => HookHandler._beforeget_meshFilter -= value;
        }

        public static event Delegates.get_mesh_BeforeArgs get_mesh
        {
            add
            {
                HookHandler._beforeget_mesh += value;
                HookHandler.Hookget_mesh();
            }
            remove => HookHandler._beforeget_mesh -= value;
        }

        public static event Delegates.set_mesh_BeforeArgs set_mesh
        {
            add
            {
                HookHandler._beforeset_mesh += value;
                HookHandler.Hookset_mesh();
            }
            remove => HookHandler._beforeset_mesh -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.AddSubTextObject_BeforeArgs AddSubTextObject
        {
            add
            {
                HookHandler._beforeAddSubTextObject += value;
                HookHandler.HookAddSubTextObject();
            }
            remove => HookHandler._beforeAddSubTextObject -= value;
        }

        public static event Delegates.DestroySelf_BeforeArgs DestroySelf
        {
            add
            {
                HookHandler._beforeDestroySelf += value;
                HookHandler.HookDestroySelf();
            }
            remove => HookHandler._beforeDestroySelf -= value;
        }

        public static event Delegates.GetMaterial_BeforeArgs GetMaterial
        {
            add
            {
                HookHandler._beforeGetMaterial += value;
                HookHandler.HookGetMaterial();
            }
            remove => HookHandler._beforeGetMaterial -= value;
        }

        public static event Delegates.CreateMaterialInstance_BeforeArgs CreateMaterialInstance
        {
            add
            {
                HookHandler._beforeCreateMaterialInstance += value;
                HookHandler.HookCreateMaterialInstance();
            }
            remove => HookHandler._beforeCreateMaterialInstance -= value;
        }

        public static event Delegates.GetSharedMaterial_BeforeArgs GetSharedMaterial
        {
            add
            {
                HookHandler._beforeGetSharedMaterial += value;
                HookHandler.HookGetSharedMaterial();
            }
            remove => HookHandler._beforeGetSharedMaterial -= value;
        }

        public static event Delegates.SetSharedMaterial_BeforeArgs SetSharedMaterial
        {
            add
            {
                HookHandler._beforeSetSharedMaterial += value;
                HookHandler.HookSetSharedMaterial();
            }
            remove => HookHandler._beforeSetSharedMaterial -= value;
        }

        public static event Delegates.GetPaddingForMaterial_BeforeArgs GetPaddingForMaterial
        {
            add
            {
                HookHandler._beforeGetPaddingForMaterial += value;
                HookHandler.HookGetPaddingForMaterial();
            }
            remove => HookHandler._beforeGetPaddingForMaterial -= value;
        }

        public static event Delegates.UpdateMeshPadding_BeforeArgs UpdateMeshPadding
        {
            add
            {
                HookHandler._beforeUpdateMeshPadding += value;
                HookHandler.HookUpdateMeshPadding();
            }
            remove => HookHandler._beforeUpdateMeshPadding -= value;
        }

        public static event Delegates.SetVerticesDirty_BeforeArgs SetVerticesDirty
        {
            add
            {
                HookHandler._beforeSetVerticesDirty += value;
                HookHandler.HookSetVerticesDirty();
            }
            remove => HookHandler._beforeSetVerticesDirty -= value;
        }

        public static event Delegates.SetMaterialDirty_BeforeArgs SetMaterialDirty
        {
            add
            {
                HookHandler._beforeSetMaterialDirty += value;
                HookHandler.HookSetMaterialDirty();
            }
            remove => HookHandler._beforeSetMaterialDirty -= value;
        }

        public static event Delegates.UpdateMaterial_BeforeArgs UpdateMaterial
        {
            add
            {
                HookHandler._beforeUpdateMaterial += value;
                HookHandler.HookUpdateMaterial();
            }
            remove => HookHandler._beforeUpdateMaterial -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_fontAsset_AfterArgs get_fontAsset
        {
            add
            {
                HookHandler._afterget_fontAsset += value;
                HookHandler.Hookget_fontAsset();
            }
            remove => HookHandler._afterget_fontAsset -= value;
        }

        public static event Delegates.set_fontAsset_AfterArgs set_fontAsset
        {
            add
            {
                HookHandler._afterset_fontAsset += value;
                HookHandler.Hookset_fontAsset();
            }
            remove => HookHandler._afterset_fontAsset -= value;
        }

        public static event Delegates.get_spriteAsset_AfterArgs get_spriteAsset
        {
            add
            {
                HookHandler._afterget_spriteAsset += value;
                HookHandler.Hookget_spriteAsset();
            }
            remove => HookHandler._afterget_spriteAsset -= value;
        }

        public static event Delegates.set_spriteAsset_AfterArgs set_spriteAsset
        {
            add
            {
                HookHandler._afterset_spriteAsset += value;
                HookHandler.Hookset_spriteAsset();
            }
            remove => HookHandler._afterset_spriteAsset -= value;
        }

        public static event Delegates.get_material_AfterArgs get_material
        {
            add
            {
                HookHandler._afterget_material += value;
                HookHandler.Hookget_material();
            }
            remove => HookHandler._afterget_material -= value;
        }

        public static event Delegates.set_material_AfterArgs set_material
        {
            add
            {
                HookHandler._afterset_material += value;
                HookHandler.Hookset_material();
            }
            remove => HookHandler._afterset_material -= value;
        }

        public static event Delegates.get_sharedMaterial_AfterArgs get_sharedMaterial
        {
            add
            {
                HookHandler._afterget_sharedMaterial += value;
                HookHandler.Hookget_sharedMaterial();
            }
            remove => HookHandler._afterget_sharedMaterial -= value;
        }

        public static event Delegates.set_sharedMaterial_AfterArgs set_sharedMaterial
        {
            add
            {
                HookHandler._afterset_sharedMaterial += value;
                HookHandler.Hookset_sharedMaterial();
            }
            remove => HookHandler._afterset_sharedMaterial -= value;
        }

        public static event Delegates.get_fallbackMaterial_AfterArgs get_fallbackMaterial
        {
            add
            {
                HookHandler._afterget_fallbackMaterial += value;
                HookHandler.Hookget_fallbackMaterial();
            }
            remove => HookHandler._afterget_fallbackMaterial -= value;
        }

        public static event Delegates.set_fallbackMaterial_AfterArgs set_fallbackMaterial
        {
            add
            {
                HookHandler._afterset_fallbackMaterial += value;
                HookHandler.Hookset_fallbackMaterial();
            }
            remove => HookHandler._afterset_fallbackMaterial -= value;
        }

        public static event Delegates.get_fallbackSourceMaterial_AfterArgs get_fallbackSourceMaterial
        {
            add
            {
                HookHandler._afterget_fallbackSourceMaterial += value;
                HookHandler.Hookget_fallbackSourceMaterial();
            }
            remove => HookHandler._afterget_fallbackSourceMaterial -= value;
        }

        public static event Delegates.set_fallbackSourceMaterial_AfterArgs set_fallbackSourceMaterial
        {
            add
            {
                HookHandler._afterset_fallbackSourceMaterial += value;
                HookHandler.Hookset_fallbackSourceMaterial();
            }
            remove => HookHandler._afterset_fallbackSourceMaterial -= value;
        }

        public static event Delegates.get_isDefaultMaterial_AfterArgs get_isDefaultMaterial
        {
            add
            {
                HookHandler._afterget_isDefaultMaterial += value;
                HookHandler.Hookget_isDefaultMaterial();
            }
            remove => HookHandler._afterget_isDefaultMaterial -= value;
        }

        public static event Delegates.set_isDefaultMaterial_AfterArgs set_isDefaultMaterial
        {
            add
            {
                HookHandler._afterset_isDefaultMaterial += value;
                HookHandler.Hookset_isDefaultMaterial();
            }
            remove => HookHandler._afterset_isDefaultMaterial -= value;
        }

        public static event Delegates.get_padding_AfterArgs get_padding
        {
            add
            {
                HookHandler._afterget_padding += value;
                HookHandler.Hookget_padding();
            }
            remove => HookHandler._afterget_padding -= value;
        }

        public static event Delegates.set_padding_AfterArgs set_padding
        {
            add
            {
                HookHandler._afterset_padding += value;
                HookHandler.Hookset_padding();
            }
            remove => HookHandler._afterset_padding -= value;
        }

        public static event Delegates.get_renderer_AfterArgs get_renderer
        {
            add
            {
                HookHandler._afterget_renderer += value;
                HookHandler.Hookget_renderer();
            }
            remove => HookHandler._afterget_renderer -= value;
        }

        public static event Delegates.get_meshFilter_AfterArgs get_meshFilter
        {
            add
            {
                HookHandler._afterget_meshFilter += value;
                HookHandler.Hookget_meshFilter();
            }
            remove => HookHandler._afterget_meshFilter -= value;
        }

        public static event Delegates.get_mesh_AfterArgs get_mesh
        {
            add
            {
                HookHandler._afterget_mesh += value;
                HookHandler.Hookget_mesh();
            }
            remove => HookHandler._afterget_mesh -= value;
        }

        public static event Delegates.set_mesh_AfterArgs set_mesh
        {
            add
            {
                HookHandler._afterset_mesh += value;
                HookHandler.Hookset_mesh();
            }
            remove => HookHandler._afterset_mesh -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.OnDestroy_AfterArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.AddSubTextObject_AfterArgs AddSubTextObject
        {
            add
            {
                HookHandler._afterAddSubTextObject += value;
                HookHandler.HookAddSubTextObject();
            }
            remove => HookHandler._afterAddSubTextObject -= value;
        }

        public static event Delegates.DestroySelf_AfterArgs DestroySelf
        {
            add
            {
                HookHandler._afterDestroySelf += value;
                HookHandler.HookDestroySelf();
            }
            remove => HookHandler._afterDestroySelf -= value;
        }

        public static event Delegates.GetMaterial_AfterArgs GetMaterial
        {
            add
            {
                HookHandler._afterGetMaterial += value;
                HookHandler.HookGetMaterial();
            }
            remove => HookHandler._afterGetMaterial -= value;
        }

        public static event Delegates.CreateMaterialInstance_AfterArgs CreateMaterialInstance
        {
            add
            {
                HookHandler._afterCreateMaterialInstance += value;
                HookHandler.HookCreateMaterialInstance();
            }
            remove => HookHandler._afterCreateMaterialInstance -= value;
        }

        public static event Delegates.GetSharedMaterial_AfterArgs GetSharedMaterial
        {
            add
            {
                HookHandler._afterGetSharedMaterial += value;
                HookHandler.HookGetSharedMaterial();
            }
            remove => HookHandler._afterGetSharedMaterial -= value;
        }

        public static event Delegates.SetSharedMaterial_AfterArgs SetSharedMaterial
        {
            add
            {
                HookHandler._afterSetSharedMaterial += value;
                HookHandler.HookSetSharedMaterial();
            }
            remove => HookHandler._afterSetSharedMaterial -= value;
        }

        public static event Delegates.GetPaddingForMaterial_AfterArgs GetPaddingForMaterial
        {
            add
            {
                HookHandler._afterGetPaddingForMaterial += value;
                HookHandler.HookGetPaddingForMaterial();
            }
            remove => HookHandler._afterGetPaddingForMaterial -= value;
        }

        public static event Delegates.UpdateMeshPadding_AfterArgs UpdateMeshPadding
        {
            add
            {
                HookHandler._afterUpdateMeshPadding += value;
                HookHandler.HookUpdateMeshPadding();
            }
            remove => HookHandler._afterUpdateMeshPadding -= value;
        }

        public static event Delegates.SetVerticesDirty_AfterArgs SetVerticesDirty
        {
            add
            {
                HookHandler._afterSetVerticesDirty += value;
                HookHandler.HookSetVerticesDirty();
            }
            remove => HookHandler._afterSetVerticesDirty -= value;
        }

        public static event Delegates.SetMaterialDirty_AfterArgs SetMaterialDirty
        {
            add
            {
                HookHandler._afterSetMaterialDirty += value;
                HookHandler.HookSetMaterialDirty();
            }
            remove => HookHandler._afterSetMaterialDirty -= value;
        }

        public static event Delegates.UpdateMaterial_AfterArgs UpdateMaterial
        {
            add
            {
                HookHandler._afterUpdateMaterial += value;
                HookHandler.HookUpdateMaterial();
            }
            remove => HookHandler._afterUpdateMaterial -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_fontAsset_WithArgs get_fontAsset
        {
            add => HookEndpointManager.Add<Delegates.get_fontAsset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_fontAsset"), value);
            remove => HookEndpointManager.Remove<Delegates.get_fontAsset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_fontAsset"), value);
        }

        public static event Delegates.set_fontAsset_WithArgs set_fontAsset
        {
            add => HookEndpointManager.Add<Delegates.set_fontAsset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_fontAsset"), value);
            remove => HookEndpointManager.Remove<Delegates.set_fontAsset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_fontAsset"), value);
        }

        public static event Delegates.get_spriteAsset_WithArgs get_spriteAsset
        {
            add => HookEndpointManager.Add<Delegates.get_spriteAsset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_spriteAsset"), value);
            remove => HookEndpointManager.Remove<Delegates.get_spriteAsset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_spriteAsset"), value);
        }

        public static event Delegates.set_spriteAsset_WithArgs set_spriteAsset
        {
            add => HookEndpointManager.Add<Delegates.set_spriteAsset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_spriteAsset"), value);
            remove => HookEndpointManager.Remove<Delegates.set_spriteAsset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_spriteAsset"), value);
        }

        public static event Delegates.get_material_WithArgs get_material
        {
            add => HookEndpointManager.Add<Delegates.get_material_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_material"), value);
            remove => HookEndpointManager.Remove<Delegates.get_material_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_material"), value);
        }

        public static event Delegates.set_material_WithArgs set_material
        {
            add => HookEndpointManager.Add<Delegates.set_material_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_material"), value);
            remove => HookEndpointManager.Remove<Delegates.set_material_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_material"), value);
        }

        public static event Delegates.get_sharedMaterial_WithArgs get_sharedMaterial
        {
            add => HookEndpointManager.Add<Delegates.get_sharedMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_sharedMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.get_sharedMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_sharedMaterial"), value);
        }

        public static event Delegates.set_sharedMaterial_WithArgs set_sharedMaterial
        {
            add => HookEndpointManager.Add<Delegates.set_sharedMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_sharedMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.set_sharedMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_sharedMaterial"), value);
        }

        public static event Delegates.get_fallbackMaterial_WithArgs get_fallbackMaterial
        {
            add => HookEndpointManager.Add<Delegates.get_fallbackMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_fallbackMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.get_fallbackMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_fallbackMaterial"), value);
        }

        public static event Delegates.set_fallbackMaterial_WithArgs set_fallbackMaterial
        {
            add => HookEndpointManager.Add<Delegates.set_fallbackMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_fallbackMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.set_fallbackMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_fallbackMaterial"), value);
        }

        public static event Delegates.get_fallbackSourceMaterial_WithArgs get_fallbackSourceMaterial
        {
            add => HookEndpointManager.Add<Delegates.get_fallbackSourceMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_fallbackSourceMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.get_fallbackSourceMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_fallbackSourceMaterial"), value);
        }

        public static event Delegates.set_fallbackSourceMaterial_WithArgs set_fallbackSourceMaterial
        {
            add => HookEndpointManager.Add<Delegates.set_fallbackSourceMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_fallbackSourceMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.set_fallbackSourceMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_fallbackSourceMaterial"), value);
        }

        public static event Delegates.get_isDefaultMaterial_WithArgs get_isDefaultMaterial
        {
            add => HookEndpointManager.Add<Delegates.get_isDefaultMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_isDefaultMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.get_isDefaultMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_isDefaultMaterial"), value);
        }

        public static event Delegates.set_isDefaultMaterial_WithArgs set_isDefaultMaterial
        {
            add => HookEndpointManager.Add<Delegates.set_isDefaultMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_isDefaultMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.set_isDefaultMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_isDefaultMaterial"), value);
        }

        public static event Delegates.get_padding_WithArgs get_padding
        {
            add => HookEndpointManager.Add<Delegates.get_padding_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_padding"), value);
            remove => HookEndpointManager.Remove<Delegates.get_padding_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_padding"), value);
        }

        public static event Delegates.set_padding_WithArgs set_padding
        {
            add => HookEndpointManager.Add<Delegates.set_padding_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_padding"), value);
            remove => HookEndpointManager.Remove<Delegates.set_padding_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_padding"), value);
        }

        public static event Delegates.get_renderer_WithArgs get_renderer
        {
            add => HookEndpointManager.Add<Delegates.get_renderer_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_renderer"), value);
            remove => HookEndpointManager.Remove<Delegates.get_renderer_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_renderer"), value);
        }

        public static event Delegates.get_meshFilter_WithArgs get_meshFilter
        {
            add => HookEndpointManager.Add<Delegates.get_meshFilter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_meshFilter"), value);
            remove => HookEndpointManager.Remove<Delegates.get_meshFilter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_meshFilter"), value);
        }

        public static event Delegates.get_mesh_WithArgs get_mesh
        {
            add => HookEndpointManager.Add<Delegates.get_mesh_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_mesh"), value);
            remove => HookEndpointManager.Remove<Delegates.get_mesh_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "get_mesh"), value);
        }

        public static event Delegates.set_mesh_WithArgs set_mesh
        {
            add => HookEndpointManager.Add<Delegates.set_mesh_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_mesh"), value);
            remove => HookEndpointManager.Remove<Delegates.set_mesh_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "set_mesh"), value);
        }

        public static event Delegates.OnEnable_WithArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "OnEnable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "OnEnable"), value);
        }

        public static event Delegates.OnDisable_WithArgs OnDisable
        {
            add => HookEndpointManager.Add<Delegates.OnDisable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "OnDisable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDisable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "OnDisable"), value);
        }

        public static event Delegates.OnDestroy_WithArgs OnDestroy
        {
            add => HookEndpointManager.Add<Delegates.OnDestroy_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "OnDestroy"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDestroy_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "OnDestroy"), value);
        }

        public static event Delegates.AddSubTextObject_WithArgs AddSubTextObject
        {
            add => HookEndpointManager.Add<Delegates.AddSubTextObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "AddSubTextObject", false), value);
            remove => HookEndpointManager.Remove<Delegates.AddSubTextObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "AddSubTextObject", false), value);
        }

        public static event Delegates.DestroySelf_WithArgs DestroySelf
        {
            add => HookEndpointManager.Add<Delegates.DestroySelf_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "DestroySelf"), value);
            remove => HookEndpointManager.Remove<Delegates.DestroySelf_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "DestroySelf"), value);
        }

        public static event Delegates.GetMaterial_WithArgs GetMaterial
        {
            add => HookEndpointManager.Add<Delegates.GetMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "GetMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.GetMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "GetMaterial"), value);
        }

        public static event Delegates.CreateMaterialInstance_WithArgs CreateMaterialInstance
        {
            add => HookEndpointManager.Add<Delegates.CreateMaterialInstance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "CreateMaterialInstance"), value);
            remove => HookEndpointManager.Remove<Delegates.CreateMaterialInstance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "CreateMaterialInstance"), value);
        }

        public static event Delegates.GetSharedMaterial_WithArgs GetSharedMaterial
        {
            add => HookEndpointManager.Add<Delegates.GetSharedMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "GetSharedMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.GetSharedMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "GetSharedMaterial"), value);
        }

        public static event Delegates.SetSharedMaterial_WithArgs SetSharedMaterial
        {
            add => HookEndpointManager.Add<Delegates.SetSharedMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "SetSharedMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.SetSharedMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "SetSharedMaterial"), value);
        }

        public static event Delegates.GetPaddingForMaterial_WithArgs GetPaddingForMaterial
        {
            add => HookEndpointManager.Add<Delegates.GetPaddingForMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "GetPaddingForMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.GetPaddingForMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "GetPaddingForMaterial"), value);
        }

        public static event Delegates.UpdateMeshPadding_WithArgs UpdateMeshPadding
        {
            add => HookEndpointManager.Add<Delegates.UpdateMeshPadding_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "UpdateMeshPadding"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateMeshPadding_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "UpdateMeshPadding"), value);
        }

        public static event Delegates.SetVerticesDirty_WithArgs SetVerticesDirty
        {
            add => HookEndpointManager.Add<Delegates.SetVerticesDirty_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "SetVerticesDirty"), value);
            remove => HookEndpointManager.Remove<Delegates.SetVerticesDirty_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "SetVerticesDirty"), value);
        }

        public static event Delegates.SetMaterialDirty_WithArgs SetMaterialDirty
        {
            add => HookEndpointManager.Add<Delegates.SetMaterialDirty_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "SetMaterialDirty"), value);
            remove => HookEndpointManager.Remove<Delegates.SetMaterialDirty_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "SetMaterialDirty"), value);
        }

        public static event Delegates.UpdateMaterial_WithArgs UpdateMaterial
        {
            add => HookEndpointManager.Add<Delegates.UpdateMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "UpdateMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_SubMesh), "UpdateMaterial"), value);
        }
    }
}