using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for BlurPlane class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBlurPlane
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_OriginalMaterial()
        {
            if (!HookedList.Contains("get_OriginalMaterial"))
            {
                HookedList.Add("get_OriginalMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BlurPlane), "get_OriginalMaterial", true),
                    get_OriginalMaterial);
            }
        }

        internal static event Delegates.get_OriginalMaterial_BeforeArgs _beforeget_OriginalMaterial;
        internal static event Delegates.get_OriginalMaterial_AfterArgs _afterget_OriginalMaterial;

        private static UnityEngine.Material get_OriginalMaterial(Func<BlurPlane, UnityEngine.Material> orig,
            BlurPlane self)
        {
            Delegates.Params_get_OriginalMaterial @params = new()
            {
                self = self
            };
            if (_beforeget_OriginalMaterial != null)
            {
                foreach (Delegates.get_OriginalMaterial_BeforeArgs toInvoke in _beforeget_OriginalMaterial
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_OriginalMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_OriginalMaterial != null)
            {
                foreach (Delegates.get_OriginalMaterial_AfterArgs toInvoke in _afterget_OriginalMaterial
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_OriginalMaterial.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_OriginalMaterial()
        {
            if (!HookedList.Contains("set_OriginalMaterial"))
            {
                HookedList.Add("set_OriginalMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BlurPlane), "set_OriginalMaterial", true),
                    set_OriginalMaterial);
            }
        }

        internal static event Delegates.set_OriginalMaterial_BeforeArgs _beforeset_OriginalMaterial;
        internal static event Delegates.set_OriginalMaterial_AfterArgs _afterset_OriginalMaterial;

        private static void set_OriginalMaterial(Action<BlurPlane, UnityEngine.Material> orig, BlurPlane self,
            UnityEngine.Material value)
        {
            Delegates.Params_set_OriginalMaterial @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_OriginalMaterial != null)
            {
                foreach (Delegates.set_OriginalMaterial_BeforeArgs toInvoke in _beforeset_OriginalMaterial
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeset_OriginalMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_OriginalMaterial != null)
            {
                foreach (Delegates.set_OriginalMaterial_AfterArgs toInvoke in _afterset_OriginalMaterial
                             .GetInvocationList())
                {
                    try
                    {
                        _afterset_OriginalMaterial.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_BlurPlaneCount()
        {
            if (!HookedList.Contains("get_BlurPlaneCount"))
            {
                HookedList.Add("get_BlurPlaneCount");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BlurPlane), "get_BlurPlaneCount", false),
                    get_BlurPlaneCount);
            }
        }

        internal static event Delegates.get_BlurPlaneCount_BeforeArgs _beforeget_BlurPlaneCount;
        internal static event Delegates.get_BlurPlaneCount_AfterArgs _afterget_BlurPlaneCount;

        private static int get_BlurPlaneCount(Func<int> orig)
        {
            if (_beforeget_BlurPlaneCount != null)
            {
                foreach (Delegates.get_BlurPlaneCount_BeforeArgs toInvoke in
                         _beforeget_BlurPlaneCount.GetInvocationList())
                {
                    try
                    {
                        _beforeget_BlurPlaneCount?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            var retVal = orig();
            if (_afterget_BlurPlaneCount != null)
            {
                foreach (Delegates.get_BlurPlaneCount_AfterArgs toInvoke in
                         _afterget_BlurPlaneCount.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_BlurPlaneCount.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetBlurPlane()
        {
            if (!HookedList.Contains("GetBlurPlane"))
            {
                HookedList.Add("GetBlurPlane");
                On.BlurPlane.GetBlurPlane += GetBlurPlane;
            }
        }

        internal static event Delegates.GetBlurPlane_BeforeArgs _beforeGetBlurPlane;
        internal static event Delegates.GetBlurPlane_AfterArgs _afterGetBlurPlane;

        private static BlurPlane GetBlurPlane(On.BlurPlane.orig_GetBlurPlane orig, int index)
        {
            Delegates.Params_GetBlurPlane @params = new()
            {
                index = index
            };
            if (_beforeGetBlurPlane != null)
            {
                foreach (Delegates.GetBlurPlane_BeforeArgs toInvoke in _beforeGetBlurPlane.GetInvocationList())
                {
                    try
                    {
                        _beforeGetBlurPlane?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            index = @params.index;
            var retVal = orig(index);
            if (_afterGetBlurPlane != null)
            {
                foreach (Delegates.GetBlurPlane_AfterArgs toInvoke in _afterGetBlurPlane.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetBlurPlane.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_ClosestBlurPlane()
        {
            if (!HookedList.Contains("get_ClosestBlurPlane"))
            {
                HookedList.Add("get_ClosestBlurPlane");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BlurPlane), "get_ClosestBlurPlane", false),
                    get_ClosestBlurPlane);
            }
        }

        internal static event Delegates.get_ClosestBlurPlane_BeforeArgs _beforeget_ClosestBlurPlane;
        internal static event Delegates.get_ClosestBlurPlane_AfterArgs _afterget_ClosestBlurPlane;

        private static BlurPlane get_ClosestBlurPlane(Func<BlurPlane> orig)
        {
            if (_beforeget_ClosestBlurPlane != null)
            {
                foreach (Delegates.get_ClosestBlurPlane_BeforeArgs toInvoke in _beforeget_ClosestBlurPlane
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_ClosestBlurPlane?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            var retVal = orig();
            if (_afterget_ClosestBlurPlane != null)
            {
                foreach (Delegates.get_ClosestBlurPlane_AfterArgs toInvoke in _afterget_ClosestBlurPlane
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_ClosestBlurPlane.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_PlaneZ()
        {
            if (!HookedList.Contains("get_PlaneZ"))
            {
                HookedList.Add("get_PlaneZ");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BlurPlane), "get_PlaneZ", true), get_PlaneZ);
            }
        }

        internal static event Delegates.get_PlaneZ_BeforeArgs _beforeget_PlaneZ;
        internal static event Delegates.get_PlaneZ_AfterArgs _afterget_PlaneZ;

        private static float get_PlaneZ(Func<BlurPlane, float> orig, BlurPlane self)
        {
            Delegates.Params_get_PlaneZ @params = new()
            {
                self = self
            };
            if (_beforeget_PlaneZ != null)
            {
                foreach (Delegates.get_PlaneZ_BeforeArgs toInvoke in _beforeget_PlaneZ.GetInvocationList())
                {
                    try
                    {
                        _beforeget_PlaneZ?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_PlaneZ != null)
            {
                foreach (Delegates.get_PlaneZ_AfterArgs toInvoke in _afterget_PlaneZ.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_PlaneZ.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookInit()
        {
            if (!HookedList.Contains("Init"))
            {
                HookedList.Add("Init");
                On.BlurPlane.Init += Init;
            }
        }

        internal static event Delegates.Init_BeforeArgs _beforeInit;
        internal static event Delegates.Init_AfterArgs _afterInit;

        private static void Init(On.BlurPlane.orig_Init orig)
        {
            if (_beforeInit != null)
            {
                foreach (Delegates.Init_BeforeArgs toInvoke in _beforeInit.GetInvocationList())
                {
                    try
                    {
                        _beforeInit?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            orig();
            if (_afterInit != null)
            {
                foreach (Delegates.Init_AfterArgs toInvoke in _afterInit.GetInvocationList())
                {
                    try
                    {
                        _afterInit.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.BlurPlane.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.BlurPlane.orig_Awake orig, BlurPlane self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
            {
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                {
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
            {
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                {
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.BlurPlane.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.BlurPlane.orig_OnEnable orig, BlurPlane self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
            {
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
            {
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.BlurPlane.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(On.BlurPlane.orig_OnDisable orig, BlurPlane self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
            {
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
            {
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                {
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetPlaneVisibility()
        {
            if (!HookedList.Contains("SetPlaneVisibility"))
            {
                HookedList.Add("SetPlaneVisibility");
                On.BlurPlane.SetPlaneVisibility += SetPlaneVisibility;
            }
        }

        internal static event Delegates.SetPlaneVisibility_BeforeArgs _beforeSetPlaneVisibility;
        internal static event Delegates.SetPlaneVisibility_AfterArgs _afterSetPlaneVisibility;

        private static void SetPlaneVisibility(On.BlurPlane.orig_SetPlaneVisibility orig, BlurPlane self,
            bool isVisible)
        {
            Delegates.Params_SetPlaneVisibility @params = new()
            {
                self = self, isVisible = isVisible
            };
            if (_beforeSetPlaneVisibility != null)
            {
                foreach (Delegates.SetPlaneVisibility_BeforeArgs toInvoke in
                         _beforeSetPlaneVisibility.GetInvocationList())
                {
                    try
                    {
                        _beforeSetPlaneVisibility?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            isVisible = @params.isVisible;
            orig(self, isVisible);
            if (_afterSetPlaneVisibility != null)
            {
                foreach (Delegates.SetPlaneVisibility_AfterArgs toInvoke in
                         _afterSetPlaneVisibility.GetInvocationList())
                {
                    try
                    {
                        _afterSetPlaneVisibility.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetPlaneMaterial()
        {
            if (!HookedList.Contains("SetPlaneMaterial"))
            {
                HookedList.Add("SetPlaneMaterial");
                On.BlurPlane.SetPlaneMaterial += SetPlaneMaterial;
            }
        }

        internal static event Delegates.SetPlaneMaterial_BeforeArgs _beforeSetPlaneMaterial;
        internal static event Delegates.SetPlaneMaterial_AfterArgs _afterSetPlaneMaterial;

        private static void SetPlaneMaterial(On.BlurPlane.orig_SetPlaneMaterial orig, BlurPlane self,
            UnityEngine.Material material)
        {
            Delegates.Params_SetPlaneMaterial @params = new()
            {
                self = self, material = material
            };
            if (_beforeSetPlaneMaterial != null)
            {
                foreach (Delegates.SetPlaneMaterial_BeforeArgs toInvoke in _beforeSetPlaneMaterial.GetInvocationList())
                {
                    try
                    {
                        _beforeSetPlaneMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            material = @params.material;
            orig(self, material);
            if (_afterSetPlaneMaterial != null)
            {
                foreach (Delegates.SetPlaneMaterial_AfterArgs toInvoke in _afterSetPlaneMaterial.GetInvocationList())
                {
                    try
                    {
                        _afterSetPlaneMaterial.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_OriginalMaterial
        {
            public BlurPlane self;
        }

        public delegate void get_OriginalMaterial_BeforeArgs(Params_get_OriginalMaterial args);

        public delegate UnityEngine.Material get_OriginalMaterial_AfterArgs(Params_get_OriginalMaterial args,
            UnityEngine.Material ret);

        public delegate UnityEngine.Material get_OriginalMaterial_WithArgs(Func<BlurPlane, UnityEngine.Material> orig,
            BlurPlane self);

        public sealed class Params_set_OriginalMaterial
        {
            public BlurPlane self;
            public UnityEngine.Material value;
        }

        public delegate void set_OriginalMaterial_BeforeArgs(Params_set_OriginalMaterial args);

        public delegate void set_OriginalMaterial_AfterArgs(Params_set_OriginalMaterial args);

        public delegate void set_OriginalMaterial_WithArgs(Action<BlurPlane, UnityEngine.Material> orig, BlurPlane self,
            UnityEngine.Material value);

        public delegate void get_BlurPlaneCount_BeforeArgs();

        public delegate int get_BlurPlaneCount_AfterArgs(int ret);

        public delegate int get_BlurPlaneCount_WithArgs(Func<int> orig);

        public sealed class Params_GetBlurPlane
        {
            public int index;
        }

        public delegate void GetBlurPlane_BeforeArgs(Params_GetBlurPlane args);

        public delegate BlurPlane GetBlurPlane_AfterArgs(Params_GetBlurPlane args, BlurPlane ret);

        public delegate BlurPlane GetBlurPlane_WithArgs(Func<int, BlurPlane> orig, int index);

        public delegate void get_ClosestBlurPlane_BeforeArgs();

        public delegate BlurPlane get_ClosestBlurPlane_AfterArgs(BlurPlane ret);

        public delegate BlurPlane get_ClosestBlurPlane_WithArgs(Func<BlurPlane> orig);

        public sealed class Params_get_PlaneZ
        {
            public BlurPlane self;
        }

        public delegate void get_PlaneZ_BeforeArgs(Params_get_PlaneZ args);

        public delegate float get_PlaneZ_AfterArgs(Params_get_PlaneZ args, float ret);

        public delegate float get_PlaneZ_WithArgs(Func<BlurPlane, float> orig, BlurPlane self);

        public delegate void Init_BeforeArgs();

        public delegate void Init_AfterArgs();

        public delegate void Init_WithArgs(Action orig);

        public sealed class Params_Awake
        {
            public BlurPlane self;
        }

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<BlurPlane> orig, BlurPlane self);

        public sealed class Params_OnEnable
        {
            public BlurPlane self;
        }

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<BlurPlane> orig, BlurPlane self);

        public sealed class Params_OnDisable
        {
            public BlurPlane self;
        }

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<BlurPlane> orig, BlurPlane self);

        public sealed class Params_SetPlaneVisibility
        {
            public BlurPlane self;
            public bool isVisible;
        }

        public delegate void SetPlaneVisibility_BeforeArgs(Params_SetPlaneVisibility args);

        public delegate void SetPlaneVisibility_AfterArgs(Params_SetPlaneVisibility args);

        public delegate void SetPlaneVisibility_WithArgs(Action<BlurPlane, bool> orig, BlurPlane self, bool isVisible);

        public sealed class Params_SetPlaneMaterial
        {
            public BlurPlane self;
            public UnityEngine.Material material;
        }

        public delegate void SetPlaneMaterial_BeforeArgs(Params_SetPlaneMaterial args);

        public delegate void SetPlaneMaterial_AfterArgs(Params_SetPlaneMaterial args);

        public delegate void SetPlaneMaterial_WithArgs(Action<BlurPlane, UnityEngine.Material> orig, BlurPlane self,
            UnityEngine.Material material);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_OriginalMaterial_BeforeArgs get_OriginalMaterial
        {
            add
            {
                HookHandler._beforeget_OriginalMaterial += value;
                HookHandler.Hookget_OriginalMaterial();
            }
            remove => HookHandler._beforeget_OriginalMaterial -= value;
        }

        public static event Delegates.set_OriginalMaterial_BeforeArgs set_OriginalMaterial
        {
            add
            {
                HookHandler._beforeset_OriginalMaterial += value;
                HookHandler.Hookset_OriginalMaterial();
            }
            remove => HookHandler._beforeset_OriginalMaterial -= value;
        }

        public static event Delegates.get_BlurPlaneCount_BeforeArgs get_BlurPlaneCount
        {
            add
            {
                HookHandler._beforeget_BlurPlaneCount += value;
                HookHandler.Hookget_BlurPlaneCount();
            }
            remove => HookHandler._beforeget_BlurPlaneCount -= value;
        }

        public static event Delegates.GetBlurPlane_BeforeArgs GetBlurPlane
        {
            add
            {
                HookHandler._beforeGetBlurPlane += value;
                HookHandler.HookGetBlurPlane();
            }
            remove => HookHandler._beforeGetBlurPlane -= value;
        }

        public static event Delegates.get_ClosestBlurPlane_BeforeArgs get_ClosestBlurPlane
        {
            add
            {
                HookHandler._beforeget_ClosestBlurPlane += value;
                HookHandler.Hookget_ClosestBlurPlane();
            }
            remove => HookHandler._beforeget_ClosestBlurPlane -= value;
        }

        public static event Delegates.get_PlaneZ_BeforeArgs get_PlaneZ
        {
            add
            {
                HookHandler._beforeget_PlaneZ += value;
                HookHandler.Hookget_PlaneZ();
            }
            remove => HookHandler._beforeget_PlaneZ -= value;
        }

        public static event Delegates.Init_BeforeArgs Init
        {
            add
            {
                HookHandler._beforeInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._beforeInit -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.SetPlaneVisibility_BeforeArgs SetPlaneVisibility
        {
            add
            {
                HookHandler._beforeSetPlaneVisibility += value;
                HookHandler.HookSetPlaneVisibility();
            }
            remove => HookHandler._beforeSetPlaneVisibility -= value;
        }

        public static event Delegates.SetPlaneMaterial_BeforeArgs SetPlaneMaterial
        {
            add
            {
                HookHandler._beforeSetPlaneMaterial += value;
                HookHandler.HookSetPlaneMaterial();
            }
            remove => HookHandler._beforeSetPlaneMaterial -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_OriginalMaterial_AfterArgs get_OriginalMaterial
        {
            add
            {
                HookHandler._afterget_OriginalMaterial += value;
                HookHandler.Hookget_OriginalMaterial();
            }
            remove => HookHandler._afterget_OriginalMaterial -= value;
        }

        public static event Delegates.set_OriginalMaterial_AfterArgs set_OriginalMaterial
        {
            add
            {
                HookHandler._afterset_OriginalMaterial += value;
                HookHandler.Hookset_OriginalMaterial();
            }
            remove => HookHandler._afterset_OriginalMaterial -= value;
        }

        public static event Delegates.get_BlurPlaneCount_AfterArgs get_BlurPlaneCount
        {
            add
            {
                HookHandler._afterget_BlurPlaneCount += value;
                HookHandler.Hookget_BlurPlaneCount();
            }
            remove => HookHandler._afterget_BlurPlaneCount -= value;
        }

        public static event Delegates.GetBlurPlane_AfterArgs GetBlurPlane
        {
            add
            {
                HookHandler._afterGetBlurPlane += value;
                HookHandler.HookGetBlurPlane();
            }
            remove => HookHandler._afterGetBlurPlane -= value;
        }

        public static event Delegates.get_ClosestBlurPlane_AfterArgs get_ClosestBlurPlane
        {
            add
            {
                HookHandler._afterget_ClosestBlurPlane += value;
                HookHandler.Hookget_ClosestBlurPlane();
            }
            remove => HookHandler._afterget_ClosestBlurPlane -= value;
        }

        public static event Delegates.get_PlaneZ_AfterArgs get_PlaneZ
        {
            add
            {
                HookHandler._afterget_PlaneZ += value;
                HookHandler.Hookget_PlaneZ();
            }
            remove => HookHandler._afterget_PlaneZ -= value;
        }

        public static event Delegates.Init_AfterArgs Init
        {
            add
            {
                HookHandler._afterInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._afterInit -= value;
        }

        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.SetPlaneVisibility_AfterArgs SetPlaneVisibility
        {
            add
            {
                HookHandler._afterSetPlaneVisibility += value;
                HookHandler.HookSetPlaneVisibility();
            }
            remove => HookHandler._afterSetPlaneVisibility -= value;
        }

        public static event Delegates.SetPlaneMaterial_AfterArgs SetPlaneMaterial
        {
            add
            {
                HookHandler._afterSetPlaneMaterial += value;
                HookHandler.HookSetPlaneMaterial();
            }
            remove => HookHandler._afterSetPlaneMaterial -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_OriginalMaterial_WithArgs get_OriginalMaterial
        {
            add => HookEndpointManager.Add<Delegates.get_OriginalMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BlurPlane), "get_OriginalMaterial", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_OriginalMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BlurPlane), "get_OriginalMaterial", true), value);
        }

        public static event Delegates.set_OriginalMaterial_WithArgs set_OriginalMaterial
        {
            add => HookEndpointManager.Add<Delegates.set_OriginalMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BlurPlane), "set_OriginalMaterial", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_OriginalMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BlurPlane), "set_OriginalMaterial", true), value);
        }

        public static event Delegates.get_BlurPlaneCount_WithArgs get_BlurPlaneCount
        {
            add => HookEndpointManager.Add<Delegates.get_BlurPlaneCount_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BlurPlane), "get_BlurPlaneCount", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_BlurPlaneCount_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BlurPlane), "get_BlurPlaneCount", false), value);
        }

        public static event On.BlurPlane.hook_GetBlurPlane GetBlurPlane
        {
            add => On.BlurPlane.GetBlurPlane += value;
            remove => On.BlurPlane.GetBlurPlane -= value;
        }

        public static event Delegates.get_ClosestBlurPlane_WithArgs get_ClosestBlurPlane
        {
            add => HookEndpointManager.Add<Delegates.get_ClosestBlurPlane_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BlurPlane), "get_ClosestBlurPlane", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_ClosestBlurPlane_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BlurPlane), "get_ClosestBlurPlane", false), value);
        }

        public static event Delegates.get_PlaneZ_WithArgs get_PlaneZ
        {
            add => HookEndpointManager.Add<Delegates.get_PlaneZ_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BlurPlane), "get_PlaneZ", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_PlaneZ_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BlurPlane), "get_PlaneZ", true), value);
        }

        public static event On.BlurPlane.hook_Init Init
        {
            add => On.BlurPlane.Init += value;
            remove => On.BlurPlane.Init -= value;
        }

        public static event On.BlurPlane.hook_Awake Awake
        {
            add => On.BlurPlane.Awake += value;
            remove => On.BlurPlane.Awake -= value;
        }

        public static event On.BlurPlane.hook_OnEnable OnEnable
        {
            add => On.BlurPlane.OnEnable += value;
            remove => On.BlurPlane.OnEnable -= value;
        }

        public static event On.BlurPlane.hook_OnDisable OnDisable
        {
            add => On.BlurPlane.OnDisable += value;
            remove => On.BlurPlane.OnDisable -= value;
        }

        public static event On.BlurPlane.hook_SetPlaneVisibility SetPlaneVisibility
        {
            add => On.BlurPlane.SetPlaneVisibility += value;
            remove => On.BlurPlane.SetPlaneVisibility -= value;
        }

        public static event On.BlurPlane.hook_SetPlaneMaterial SetPlaneMaterial
        {
            add => On.BlurPlane.SetPlaneMaterial += value;
            remove => On.BlurPlane.SetPlaneMaterial -= value;
        }
    }
}