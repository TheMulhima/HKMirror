using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.EventSystems;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MappableControllerButton class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMappableControllerButton
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.MappableControllerButton.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.MappableControllerButton.orig_Start orig, MappableControllerButton self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.MappableControllerButton.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.MappableControllerButton.orig_OnEnable orig, MappableControllerButton self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookGetBinding()
        {
            if (!HookedList.Contains("GetBinding"))
            {
                HookedList.Add("GetBinding");
                On.MappableControllerButton.GetBinding += GetBinding;
            }
        }

        internal static event Delegates.GetBinding_BeforeArgs _beforeGetBinding;
        internal static event Delegates.GetBinding_NormalArgs _afterGetBinding;

        private static void GetBinding(On.MappableControllerButton.orig_GetBinding orig, MappableControllerButton self)
        {
            Delegates.Params_GetBinding @params = new()
            {
                self = self
            };
            _beforeGetBinding?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterGetBinding != null) _afterGetBinding.Invoke(@params);
        }

        internal static void HookListenForNewButton()
        {
            if (!HookedList.Contains("ListenForNewButton"))
            {
                HookedList.Add("ListenForNewButton");
                On.MappableControllerButton.ListenForNewButton += ListenForNewButton;
            }
        }

        internal static event Delegates.ListenForNewButton_BeforeArgs _beforeListenForNewButton;
        internal static event Delegates.ListenForNewButton_NormalArgs _afterListenForNewButton;

        private static void ListenForNewButton(On.MappableControllerButton.orig_ListenForNewButton orig,
            MappableControllerButton self)
        {
            Delegates.Params_ListenForNewButton @params = new()
            {
                self = self
            };
            _beforeListenForNewButton?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterListenForNewButton != null) _afterListenForNewButton.Invoke(@params);
        }

        internal static void HookShowCurrentBinding()
        {
            if (!HookedList.Contains("ShowCurrentBinding"))
            {
                HookedList.Add("ShowCurrentBinding");
                On.MappableControllerButton.ShowCurrentBinding += ShowCurrentBinding;
            }
        }

        internal static event Delegates.ShowCurrentBinding_BeforeArgs _beforeShowCurrentBinding;
        internal static event Delegates.ShowCurrentBinding_NormalArgs _afterShowCurrentBinding;

        private static void ShowCurrentBinding(On.MappableControllerButton.orig_ShowCurrentBinding orig,
            MappableControllerButton self)
        {
            Delegates.Params_ShowCurrentBinding @params = new()
            {
                self = self
            };
            _beforeShowCurrentBinding?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterShowCurrentBinding != null) _afterShowCurrentBinding.Invoke(@params);
        }

        internal static void HookAbortRebind()
        {
            if (!HookedList.Contains("AbortRebind"))
            {
                HookedList.Add("AbortRebind");
                On.MappableControllerButton.AbortRebind += AbortRebind;
            }
        }

        internal static event Delegates.AbortRebind_BeforeArgs _beforeAbortRebind;
        internal static event Delegates.AbortRebind_NormalArgs _afterAbortRebind;

        private static void AbortRebind(On.MappableControllerButton.orig_AbortRebind orig,
            MappableControllerButton self)
        {
            Delegates.Params_AbortRebind @params = new()
            {
                self = self
            };
            _beforeAbortRebind?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAbortRebind != null) _afterAbortRebind.Invoke(@params);
        }

        internal static void HookStopActionListening()
        {
            if (!HookedList.Contains("StopActionListening"))
            {
                HookedList.Add("StopActionListening");
                On.MappableControllerButton.StopActionListening += StopActionListening;
            }
        }

        internal static event Delegates.StopActionListening_BeforeArgs _beforeStopActionListening;
        internal static event Delegates.StopActionListening_NormalArgs _afterStopActionListening;

        private static void StopActionListening(On.MappableControllerButton.orig_StopActionListening orig,
            MappableControllerButton self)
        {
            Delegates.Params_StopActionListening @params = new()
            {
                self = self
            };
            _beforeStopActionListening?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStopActionListening != null) _afterStopActionListening.Invoke(@params);
        }

        internal static void HookOnBindingFound()
        {
            if (!HookedList.Contains("OnBindingFound"))
            {
                HookedList.Add("OnBindingFound");
                On.MappableControllerButton.OnBindingFound += OnBindingFound;
            }
        }

        internal static event Delegates.OnBindingFound_BeforeArgs _beforeOnBindingFound;
        internal static event Delegates.OnBindingFound_NormalArgs _afterOnBindingFound;

        private static bool OnBindingFound(On.MappableControllerButton.orig_OnBindingFound orig,
            MappableControllerButton self, PlayerAction action, BindingSource binding)
        {
            Delegates.Params_OnBindingFound @params = new()
            {
                self = self, action = action, binding = binding
            };
            _beforeOnBindingFound?.Invoke(@params);
            self = @params.self;
            action = @params.action;
            binding = @params.binding;
            var retVal = orig(self, action, binding);
            if (_afterOnBindingFound != null) retVal = _afterOnBindingFound.Invoke(@params);
            return retVal;
        }

        internal static void HookOnBindingAdded()
        {
            if (!HookedList.Contains("OnBindingAdded"))
            {
                HookedList.Add("OnBindingAdded");
                On.MappableControllerButton.OnBindingAdded += OnBindingAdded;
            }
        }

        internal static event Delegates.OnBindingAdded_BeforeArgs _beforeOnBindingAdded;
        internal static event Delegates.OnBindingAdded_NormalArgs _afterOnBindingAdded;

        private static void OnBindingAdded(On.MappableControllerButton.orig_OnBindingAdded orig,
            MappableControllerButton self, PlayerAction action, BindingSource binding)
        {
            Delegates.Params_OnBindingAdded @params = new()
            {
                self = self, action = action, binding = binding
            };
            _beforeOnBindingAdded?.Invoke(@params);
            self = @params.self;
            action = @params.action;
            binding = @params.binding;
            orig(self, action, binding);
            if (_afterOnBindingAdded != null) _afterOnBindingAdded.Invoke(@params);
        }

        internal static void HookOnBindingRejected()
        {
            if (!HookedList.Contains("OnBindingRejected"))
            {
                HookedList.Add("OnBindingRejected");
                On.MappableControllerButton.OnBindingRejected += OnBindingRejected;
            }
        }

        internal static event Delegates.OnBindingRejected_BeforeArgs _beforeOnBindingRejected;
        internal static event Delegates.OnBindingRejected_NormalArgs _afterOnBindingRejected;

        private static void OnBindingRejected(On.MappableControllerButton.orig_OnBindingRejected orig,
            MappableControllerButton self, PlayerAction action, BindingSource binding,
            BindingSourceRejectionType rejection)
        {
            Delegates.Params_OnBindingRejected @params = new()
            {
                self = self, action = action, binding = binding, rejection = rejection
            };
            _beforeOnBindingRejected?.Invoke(@params);
            self = @params.self;
            action = @params.action;
            binding = @params.binding;
            rejection = @params.rejection;
            orig(self, action, binding, rejection);
            if (_afterOnBindingRejected != null) _afterOnBindingRejected.Invoke(@params);
        }

        internal static void HookOnSubmit()
        {
            if (!HookedList.Contains("OnSubmit"))
            {
                HookedList.Add("OnSubmit");
                On.MappableControllerButton.OnSubmit += OnSubmit;
            }
        }

        internal static event Delegates.OnSubmit_BeforeArgs _beforeOnSubmit;
        internal static event Delegates.OnSubmit_NormalArgs _afterOnSubmit;

        private static void OnSubmit(On.MappableControllerButton.orig_OnSubmit orig, MappableControllerButton self,
            BaseEventData eventData)
        {
            Delegates.Params_OnSubmit @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnSubmit?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnSubmit != null) _afterOnSubmit.Invoke(@params);
        }

        internal static void HookOnPointerClick()
        {
            if (!HookedList.Contains("OnPointerClick"))
            {
                HookedList.Add("OnPointerClick");
                On.MappableControllerButton.OnPointerClick += OnPointerClick;
            }
        }

        internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
        internal static event Delegates.OnPointerClick_NormalArgs _afterOnPointerClick;

        private static void OnPointerClick(On.MappableControllerButton.orig_OnPointerClick orig,
            MappableControllerButton self, PointerEventData eventData)
        {
            Delegates.Params_OnPointerClick @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnPointerClick?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnPointerClick != null) _afterOnPointerClick.Invoke(@params);
        }

        internal static void HookOnCancel()
        {
            if (!HookedList.Contains("OnCancel"))
            {
                HookedList.Add("OnCancel");
                On.MappableControllerButton.OnCancel += OnCancel;
            }
        }

        internal static event Delegates.OnCancel_BeforeArgs _beforeOnCancel;
        internal static event Delegates.OnCancel_NormalArgs _afterOnCancel;

        private static void OnCancel(On.MappableControllerButton.orig_OnCancel orig, MappableControllerButton self,
            BaseEventData eventData)
        {
            Delegates.Params_OnCancel @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnCancel?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnCancel != null) _afterOnCancel.Invoke(@params);
        }

        internal static void HookStopListeningForNewButton()
        {
            if (!HookedList.Contains("StopListeningForNewButton"))
            {
                HookedList.Add("StopListeningForNewButton");
                On.MappableControllerButton.StopListeningForNewButton += StopListeningForNewButton;
            }
        }

        internal static event Delegates.StopListeningForNewButton_BeforeArgs _beforeStopListeningForNewButton;
        internal static event Delegates.StopListeningForNewButton_NormalArgs _afterStopListeningForNewButton;

        private static void StopListeningForNewButton(On.MappableControllerButton.orig_StopListeningForNewButton orig,
            MappableControllerButton self)
        {
            Delegates.Params_StopListeningForNewButton @params = new()
            {
                self = self
            };
            _beforeStopListeningForNewButton?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStopListeningForNewButton != null) _afterStopListeningForNewButton.Invoke(@params);
        }

        internal static void HookSetupUnmappableButtons()
        {
            if (!HookedList.Contains("SetupUnmappableButtons"))
            {
                HookedList.Add("SetupUnmappableButtons");
                On.MappableControllerButton.SetupUnmappableButtons += SetupUnmappableButtons;
            }
        }

        internal static event Delegates.SetupUnmappableButtons_BeforeArgs _beforeSetupUnmappableButtons;
        internal static event Delegates.SetupUnmappableButtons_NormalArgs _afterSetupUnmappableButtons;

        private static void SetupUnmappableButtons(On.MappableControllerButton.orig_SetupUnmappableButtons orig,
            MappableControllerButton self)
        {
            Delegates.Params_SetupUnmappableButtons @params = new()
            {
                self = self
            };
            _beforeSetupUnmappableButtons?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetupUnmappableButtons != null) _afterSetupUnmappableButtons.Invoke(@params);
        }

        internal static void HookSetupBindingListenOptions()
        {
            if (!HookedList.Contains("SetupBindingListenOptions"))
            {
                HookedList.Add("SetupBindingListenOptions");
                On.MappableControllerButton.SetupBindingListenOptions += SetupBindingListenOptions;
            }
        }

        internal static event Delegates.SetupBindingListenOptions_BeforeArgs _beforeSetupBindingListenOptions;
        internal static event Delegates.SetupBindingListenOptions_NormalArgs _afterSetupBindingListenOptions;

        private static void SetupBindingListenOptions(On.MappableControllerButton.orig_SetupBindingListenOptions orig,
            MappableControllerButton self)
        {
            Delegates.Params_SetupBindingListenOptions @params = new()
            {
                self = self
            };
            _beforeSetupBindingListenOptions?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetupBindingListenOptions != null) _afterSetupBindingListenOptions.Invoke(@params);
        }

        internal static void HookSetupRefs()
        {
            if (!HookedList.Contains("SetupRefs"))
            {
                HookedList.Add("SetupRefs");
                On.MappableControllerButton.SetupRefs += SetupRefs;
            }
        }

        internal static event Delegates.SetupRefs_BeforeArgs _beforeSetupRefs;
        internal static event Delegates.SetupRefs_NormalArgs _afterSetupRefs;

        private static void SetupRefs(On.MappableControllerButton.orig_SetupRefs orig, MappableControllerButton self)
        {
            Delegates.Params_SetupRefs @params = new()
            {
                self = self
            };
            _beforeSetupRefs?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetupRefs != null) _afterSetupRefs.Invoke(@params);
        }

        internal static void Hookorig_SetupUnmappableButtons()
        {
            if (!HookedList.Contains("orig_SetupUnmappableButtons"))
            {
                HookedList.Add("orig_SetupUnmappableButtons");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_SetupUnmappableButtons"),
                    orig_SetupUnmappableButtons);
            }
        }

        internal static event Delegates.orig_SetupUnmappableButtons_BeforeArgs _beforeorig_SetupUnmappableButtons;
        internal static event Delegates.orig_SetupUnmappableButtons_NormalArgs _afterorig_SetupUnmappableButtons;

        private static void orig_SetupUnmappableButtons(Action<MappableControllerButton> orig,
            MappableControllerButton self)
        {
            Delegates.Params_orig_SetupUnmappableButtons @params = new()
            {
                self = self
            };
            _beforeorig_SetupUnmappableButtons?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterorig_SetupUnmappableButtons != null) _afterorig_SetupUnmappableButtons.Invoke(@params);
        }

        internal static void HookInitCustomActions()
        {
            if (!HookedList.Contains("InitCustomActions"))
            {
                HookedList.Add("InitCustomActions");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "InitCustomActions"),
                    InitCustomActions);
            }
        }

        internal static event Delegates.InitCustomActions_BeforeArgs _beforeInitCustomActions;
        internal static event Delegates.InitCustomActions_NormalArgs _afterInitCustomActions;

        private static void InitCustomActions(Action<MappableControllerButton, PlayerActionSet, PlayerAction> orig,
            MappableControllerButton self, PlayerActionSet actionSet, PlayerAction playerAction)
        {
            Delegates.Params_InitCustomActions @params = new()
            {
                self = self, actionSet = actionSet, playerAction = playerAction
            };
            _beforeInitCustomActions?.Invoke(@params);
            self = @params.self;
            actionSet = @params.actionSet;
            playerAction = @params.playerAction;
            orig(self, actionSet, playerAction);
            if (_afterInitCustomActions != null) _afterInitCustomActions.Invoke(@params);
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "OnDestroy"), OnDestroy);
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_NormalArgs _afterOnDestroy;

        private static void OnDestroy(Action<MappableControllerButton> orig, MappableControllerButton self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            _beforeOnDestroy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null) _afterOnDestroy.Invoke(@params);
        }

        internal static void HookGetBindingPublic()
        {
            if (!HookedList.Contains("GetBindingPublic"))
            {
                HookedList.Add("GetBindingPublic");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "GetBindingPublic"),
                    GetBindingPublic);
            }
        }

        internal static event Delegates.GetBindingPublic_BeforeArgs _beforeGetBindingPublic;
        internal static event Delegates.GetBindingPublic_NormalArgs _afterGetBindingPublic;

        private static void GetBindingPublic(Action<MappableControllerButton> orig, MappableControllerButton self)
        {
            Delegates.Params_GetBindingPublic @params = new()
            {
                self = self
            };
            _beforeGetBindingPublic?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterGetBindingPublic != null) _afterGetBindingPublic.Invoke(@params);
        }

        internal static void Hookorig_GetBinding()
        {
            if (!HookedList.Contains("orig_GetBinding"))
            {
                HookedList.Add("orig_GetBinding");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_GetBinding"),
                    orig_GetBinding);
            }
        }

        internal static event Delegates.orig_GetBinding_BeforeArgs _beforeorig_GetBinding;
        internal static event Delegates.orig_GetBinding_NormalArgs _afterorig_GetBinding;

        private static void orig_GetBinding(Action<MappableControllerButton> orig, MappableControllerButton self)
        {
            Delegates.Params_orig_GetBinding @params = new()
            {
                self = self
            };
            _beforeorig_GetBinding?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterorig_GetBinding != null) _afterorig_GetBinding.Invoke(@params);
        }

        internal static void Hookorig_SetupBindingListenOptions()
        {
            if (!HookedList.Contains("orig_SetupBindingListenOptions"))
            {
                HookedList.Add("orig_SetupBindingListenOptions");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_SetupBindingListenOptions"),
                    orig_SetupBindingListenOptions);
            }
        }

        internal static event Delegates.orig_SetupBindingListenOptions_BeforeArgs _beforeorig_SetupBindingListenOptions;
        internal static event Delegates.orig_SetupBindingListenOptions_NormalArgs _afterorig_SetupBindingListenOptions;

        private static void orig_SetupBindingListenOptions(Action<MappableControllerButton> orig,
            MappableControllerButton self)
        {
            Delegates.Params_orig_SetupBindingListenOptions @params = new()
            {
                self = self
            };
            _beforeorig_SetupBindingListenOptions?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterorig_SetupBindingListenOptions != null) _afterorig_SetupBindingListenOptions.Invoke(@params);
        }

        internal static void Hookorig_ShowCurrentBinding()
        {
            if (!HookedList.Contains("orig_ShowCurrentBinding"))
            {
                HookedList.Add("orig_ShowCurrentBinding");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_ShowCurrentBinding"),
                    orig_ShowCurrentBinding);
            }
        }

        internal static event Delegates.orig_ShowCurrentBinding_BeforeArgs _beforeorig_ShowCurrentBinding;
        internal static event Delegates.orig_ShowCurrentBinding_NormalArgs _afterorig_ShowCurrentBinding;

        private static void orig_ShowCurrentBinding(Action<MappableControllerButton> orig,
            MappableControllerButton self)
        {
            Delegates.Params_orig_ShowCurrentBinding @params = new()
            {
                self = self
            };
            _beforeorig_ShowCurrentBinding?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterorig_ShowCurrentBinding != null) _afterorig_ShowCurrentBinding.Invoke(@params);
        }

        internal static void Hookorig_SetupRefs()
        {
            if (!HookedList.Contains("orig_SetupRefs"))
            {
                HookedList.Add("orig_SetupRefs");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_SetupRefs"),
                    orig_SetupRefs);
            }
        }

        internal static event Delegates.orig_SetupRefs_BeforeArgs _beforeorig_SetupRefs;
        internal static event Delegates.orig_SetupRefs_NormalArgs _afterorig_SetupRefs;

        private static void orig_SetupRefs(Action<MappableControllerButton> orig, MappableControllerButton self)
        {
            Delegates.Params_orig_SetupRefs @params = new()
            {
                self = self
            };
            _beforeorig_SetupRefs?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterorig_SetupRefs != null) _afterorig_SetupRefs.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AbortRebind_BeforeArgs(Params_AbortRebind args);

        public delegate void AbortRebind_NormalArgs(Params_AbortRebind args);

        public delegate void GetBinding_BeforeArgs(Params_GetBinding args);

        public delegate void GetBinding_NormalArgs(Params_GetBinding args);

        public delegate void GetBindingPublic_BeforeArgs(Params_GetBindingPublic args);

        public delegate void GetBindingPublic_NormalArgs(Params_GetBindingPublic args);

        public delegate void InitCustomActions_BeforeArgs(Params_InitCustomActions args);

        public delegate void InitCustomActions_NormalArgs(Params_InitCustomActions args);

        public delegate void ListenForNewButton_BeforeArgs(Params_ListenForNewButton args);

        public delegate void ListenForNewButton_NormalArgs(Params_ListenForNewButton args);

        public delegate void OnBindingAdded_BeforeArgs(Params_OnBindingAdded args);

        public delegate void OnBindingAdded_NormalArgs(Params_OnBindingAdded args);

        public delegate void OnBindingFound_BeforeArgs(Params_OnBindingFound args);

        public delegate bool OnBindingFound_NormalArgs(Params_OnBindingFound args);

        public delegate void OnBindingRejected_BeforeArgs(Params_OnBindingRejected args);

        public delegate void OnBindingRejected_NormalArgs(Params_OnBindingRejected args);

        public delegate void OnCancel_BeforeArgs(Params_OnCancel args);

        public delegate void OnCancel_NormalArgs(Params_OnCancel args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_NormalArgs(Params_OnDestroy args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_NormalArgs(Params_OnPointerClick args);

        public delegate void OnSubmit_BeforeArgs(Params_OnSubmit args);

        public delegate void OnSubmit_NormalArgs(Params_OnSubmit args);

        public delegate void orig_GetBinding_BeforeArgs(Params_orig_GetBinding args);

        public delegate void orig_GetBinding_NormalArgs(Params_orig_GetBinding args);

        public delegate void orig_SetupBindingListenOptions_BeforeArgs(Params_orig_SetupBindingListenOptions args);

        public delegate void orig_SetupBindingListenOptions_NormalArgs(Params_orig_SetupBindingListenOptions args);

        public delegate void orig_SetupRefs_BeforeArgs(Params_orig_SetupRefs args);

        public delegate void orig_SetupRefs_NormalArgs(Params_orig_SetupRefs args);

        public delegate void orig_SetupUnmappableButtons_BeforeArgs(Params_orig_SetupUnmappableButtons args);

        public delegate void orig_SetupUnmappableButtons_NormalArgs(Params_orig_SetupUnmappableButtons args);

        public delegate void orig_ShowCurrentBinding_BeforeArgs(Params_orig_ShowCurrentBinding args);

        public delegate void orig_ShowCurrentBinding_NormalArgs(Params_orig_ShowCurrentBinding args);

        public delegate void SetupBindingListenOptions_BeforeArgs(Params_SetupBindingListenOptions args);

        public delegate void SetupBindingListenOptions_NormalArgs(Params_SetupBindingListenOptions args);

        public delegate void SetupRefs_BeforeArgs(Params_SetupRefs args);

        public delegate void SetupRefs_NormalArgs(Params_SetupRefs args);

        public delegate void SetupUnmappableButtons_BeforeArgs(Params_SetupUnmappableButtons args);

        public delegate void SetupUnmappableButtons_NormalArgs(Params_SetupUnmappableButtons args);

        public delegate void ShowCurrentBinding_BeforeArgs(Params_ShowCurrentBinding args);

        public delegate void ShowCurrentBinding_NormalArgs(Params_ShowCurrentBinding args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void StopActionListening_BeforeArgs(Params_StopActionListening args);

        public delegate void StopActionListening_NormalArgs(Params_StopActionListening args);

        public delegate void StopListeningForNewButton_BeforeArgs(Params_StopListeningForNewButton args);

        public delegate void StopListeningForNewButton_NormalArgs(Params_StopListeningForNewButton args);

        public sealed class Params_Start
        {
            public MappableControllerButton self;
        }

        public sealed class Params_OnEnable
        {
            public MappableControllerButton self;
        }

        public sealed class Params_GetBinding
        {
            public MappableControllerButton self;
        }

        public sealed class Params_ListenForNewButton
        {
            public MappableControllerButton self;
        }

        public sealed class Params_ShowCurrentBinding
        {
            public MappableControllerButton self;
        }

        public sealed class Params_AbortRebind
        {
            public MappableControllerButton self;
        }

        public sealed class Params_StopActionListening
        {
            public MappableControllerButton self;
        }

        public sealed class Params_OnBindingFound
        {
            public PlayerAction action;
            public BindingSource binding;
            public MappableControllerButton self;
        }

        public sealed class Params_OnBindingAdded
        {
            public PlayerAction action;
            public BindingSource binding;
            public MappableControllerButton self;
        }

        public sealed class Params_OnBindingRejected
        {
            public PlayerAction action;
            public BindingSource binding;
            public BindingSourceRejectionType rejection;
            public MappableControllerButton self;
        }

        public sealed class Params_OnSubmit
        {
            public BaseEventData eventData;
            public MappableControllerButton self;
        }

        public sealed class Params_OnPointerClick
        {
            public PointerEventData eventData;
            public MappableControllerButton self;
        }

        public sealed class Params_OnCancel
        {
            public BaseEventData eventData;
            public MappableControllerButton self;
        }

        public sealed class Params_StopListeningForNewButton
        {
            public MappableControllerButton self;
        }

        public sealed class Params_SetupUnmappableButtons
        {
            public MappableControllerButton self;
        }

        public sealed class Params_SetupBindingListenOptions
        {
            public MappableControllerButton self;
        }

        public sealed class Params_SetupRefs
        {
            public MappableControllerButton self;
        }

        public sealed class Params_orig_SetupUnmappableButtons
        {
            public MappableControllerButton self;
        }

        public sealed class Params_InitCustomActions
        {
            public PlayerActionSet actionSet;
            public PlayerAction playerAction;
            public MappableControllerButton self;
        }

        public sealed class Params_OnDestroy
        {
            public MappableControllerButton self;
        }

        public sealed class Params_GetBindingPublic
        {
            public MappableControllerButton self;
        }

        public sealed class Params_orig_GetBinding
        {
            public MappableControllerButton self;
        }

        public sealed class Params_orig_SetupBindingListenOptions
        {
            public MappableControllerButton self;
        }

        public sealed class Params_orig_ShowCurrentBinding
        {
            public MappableControllerButton self;
        }

        public sealed class Params_orig_SetupRefs
        {
            public MappableControllerButton self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.GetBinding_BeforeArgs GetBinding
        {
            add
            {
                HookHandler._beforeGetBinding += value;
                HookHandler.HookGetBinding();
            }
            remove => HookHandler._beforeGetBinding -= value;
        }

        public static event Delegates.ListenForNewButton_BeforeArgs ListenForNewButton
        {
            add
            {
                HookHandler._beforeListenForNewButton += value;
                HookHandler.HookListenForNewButton();
            }
            remove => HookHandler._beforeListenForNewButton -= value;
        }

        public static event Delegates.ShowCurrentBinding_BeforeArgs ShowCurrentBinding
        {
            add
            {
                HookHandler._beforeShowCurrentBinding += value;
                HookHandler.HookShowCurrentBinding();
            }
            remove => HookHandler._beforeShowCurrentBinding -= value;
        }

        public static event Delegates.AbortRebind_BeforeArgs AbortRebind
        {
            add
            {
                HookHandler._beforeAbortRebind += value;
                HookHandler.HookAbortRebind();
            }
            remove => HookHandler._beforeAbortRebind -= value;
        }

        public static event Delegates.StopActionListening_BeforeArgs StopActionListening
        {
            add
            {
                HookHandler._beforeStopActionListening += value;
                HookHandler.HookStopActionListening();
            }
            remove => HookHandler._beforeStopActionListening -= value;
        }

        public static event Delegates.OnBindingFound_BeforeArgs OnBindingFound
        {
            add
            {
                HookHandler._beforeOnBindingFound += value;
                HookHandler.HookOnBindingFound();
            }
            remove => HookHandler._beforeOnBindingFound -= value;
        }

        public static event Delegates.OnBindingAdded_BeforeArgs OnBindingAdded
        {
            add
            {
                HookHandler._beforeOnBindingAdded += value;
                HookHandler.HookOnBindingAdded();
            }
            remove => HookHandler._beforeOnBindingAdded -= value;
        }

        public static event Delegates.OnBindingRejected_BeforeArgs OnBindingRejected
        {
            add
            {
                HookHandler._beforeOnBindingRejected += value;
                HookHandler.HookOnBindingRejected();
            }
            remove => HookHandler._beforeOnBindingRejected -= value;
        }

        public static event Delegates.OnSubmit_BeforeArgs OnSubmit
        {
            add
            {
                HookHandler._beforeOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._beforeOnSubmit -= value;
        }

        public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
        {
            add
            {
                HookHandler._beforeOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._beforeOnPointerClick -= value;
        }

        public static event Delegates.OnCancel_BeforeArgs OnCancel
        {
            add
            {
                HookHandler._beforeOnCancel += value;
                HookHandler.HookOnCancel();
            }
            remove => HookHandler._beforeOnCancel -= value;
        }

        public static event Delegates.StopListeningForNewButton_BeforeArgs StopListeningForNewButton
        {
            add
            {
                HookHandler._beforeStopListeningForNewButton += value;
                HookHandler.HookStopListeningForNewButton();
            }
            remove => HookHandler._beforeStopListeningForNewButton -= value;
        }

        public static event Delegates.SetupUnmappableButtons_BeforeArgs SetupUnmappableButtons
        {
            add
            {
                HookHandler._beforeSetupUnmappableButtons += value;
                HookHandler.HookSetupUnmappableButtons();
            }
            remove => HookHandler._beforeSetupUnmappableButtons -= value;
        }

        public static event Delegates.SetupBindingListenOptions_BeforeArgs SetupBindingListenOptions
        {
            add
            {
                HookHandler._beforeSetupBindingListenOptions += value;
                HookHandler.HookSetupBindingListenOptions();
            }
            remove => HookHandler._beforeSetupBindingListenOptions -= value;
        }

        public static event Delegates.SetupRefs_BeforeArgs SetupRefs
        {
            add
            {
                HookHandler._beforeSetupRefs += value;
                HookHandler.HookSetupRefs();
            }
            remove => HookHandler._beforeSetupRefs -= value;
        }

        public static event Delegates.orig_SetupUnmappableButtons_BeforeArgs orig_SetupUnmappableButtons
        {
            add
            {
                HookHandler._beforeorig_SetupUnmappableButtons += value;
                HookHandler.Hookorig_SetupUnmappableButtons();
            }
            remove => HookHandler._beforeorig_SetupUnmappableButtons -= value;
        }

        public static event Delegates.InitCustomActions_BeforeArgs InitCustomActions
        {
            add
            {
                HookHandler._beforeInitCustomActions += value;
                HookHandler.HookInitCustomActions();
            }
            remove => HookHandler._beforeInitCustomActions -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.GetBindingPublic_BeforeArgs GetBindingPublic
        {
            add
            {
                HookHandler._beforeGetBindingPublic += value;
                HookHandler.HookGetBindingPublic();
            }
            remove => HookHandler._beforeGetBindingPublic -= value;
        }

        public static event Delegates.orig_GetBinding_BeforeArgs orig_GetBinding
        {
            add
            {
                HookHandler._beforeorig_GetBinding += value;
                HookHandler.Hookorig_GetBinding();
            }
            remove => HookHandler._beforeorig_GetBinding -= value;
        }

        public static event Delegates.orig_SetupBindingListenOptions_BeforeArgs orig_SetupBindingListenOptions
        {
            add
            {
                HookHandler._beforeorig_SetupBindingListenOptions += value;
                HookHandler.Hookorig_SetupBindingListenOptions();
            }
            remove => HookHandler._beforeorig_SetupBindingListenOptions -= value;
        }

        public static event Delegates.orig_ShowCurrentBinding_BeforeArgs orig_ShowCurrentBinding
        {
            add
            {
                HookHandler._beforeorig_ShowCurrentBinding += value;
                HookHandler.Hookorig_ShowCurrentBinding();
            }
            remove => HookHandler._beforeorig_ShowCurrentBinding -= value;
        }

        public static event Delegates.orig_SetupRefs_BeforeArgs orig_SetupRefs
        {
            add
            {
                HookHandler._beforeorig_SetupRefs += value;
                HookHandler.Hookorig_SetupRefs();
            }
            remove => HookHandler._beforeorig_SetupRefs -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.GetBinding_NormalArgs GetBinding
        {
            add
            {
                HookHandler._afterGetBinding += value;
                HookHandler.HookGetBinding();
            }
            remove => HookHandler._afterGetBinding -= value;
        }

        public static event Delegates.ListenForNewButton_NormalArgs ListenForNewButton
        {
            add
            {
                HookHandler._afterListenForNewButton += value;
                HookHandler.HookListenForNewButton();
            }
            remove => HookHandler._afterListenForNewButton -= value;
        }

        public static event Delegates.ShowCurrentBinding_NormalArgs ShowCurrentBinding
        {
            add
            {
                HookHandler._afterShowCurrentBinding += value;
                HookHandler.HookShowCurrentBinding();
            }
            remove => HookHandler._afterShowCurrentBinding -= value;
        }

        public static event Delegates.AbortRebind_NormalArgs AbortRebind
        {
            add
            {
                HookHandler._afterAbortRebind += value;
                HookHandler.HookAbortRebind();
            }
            remove => HookHandler._afterAbortRebind -= value;
        }

        public static event Delegates.StopActionListening_NormalArgs StopActionListening
        {
            add
            {
                HookHandler._afterStopActionListening += value;
                HookHandler.HookStopActionListening();
            }
            remove => HookHandler._afterStopActionListening -= value;
        }

        public static event Delegates.OnBindingFound_NormalArgs OnBindingFound
        {
            add
            {
                HookHandler._afterOnBindingFound += value;
                HookHandler.HookOnBindingFound();
            }
            remove => HookHandler._afterOnBindingFound -= value;
        }

        public static event Delegates.OnBindingAdded_NormalArgs OnBindingAdded
        {
            add
            {
                HookHandler._afterOnBindingAdded += value;
                HookHandler.HookOnBindingAdded();
            }
            remove => HookHandler._afterOnBindingAdded -= value;
        }

        public static event Delegates.OnBindingRejected_NormalArgs OnBindingRejected
        {
            add
            {
                HookHandler._afterOnBindingRejected += value;
                HookHandler.HookOnBindingRejected();
            }
            remove => HookHandler._afterOnBindingRejected -= value;
        }

        public static event Delegates.OnSubmit_NormalArgs OnSubmit
        {
            add
            {
                HookHandler._afterOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._afterOnSubmit -= value;
        }

        public static event Delegates.OnPointerClick_NormalArgs OnPointerClick
        {
            add
            {
                HookHandler._afterOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._afterOnPointerClick -= value;
        }

        public static event Delegates.OnCancel_NormalArgs OnCancel
        {
            add
            {
                HookHandler._afterOnCancel += value;
                HookHandler.HookOnCancel();
            }
            remove => HookHandler._afterOnCancel -= value;
        }

        public static event Delegates.StopListeningForNewButton_NormalArgs StopListeningForNewButton
        {
            add
            {
                HookHandler._afterStopListeningForNewButton += value;
                HookHandler.HookStopListeningForNewButton();
            }
            remove => HookHandler._afterStopListeningForNewButton -= value;
        }

        public static event Delegates.SetupUnmappableButtons_NormalArgs SetupUnmappableButtons
        {
            add
            {
                HookHandler._afterSetupUnmappableButtons += value;
                HookHandler.HookSetupUnmappableButtons();
            }
            remove => HookHandler._afterSetupUnmappableButtons -= value;
        }

        public static event Delegates.SetupBindingListenOptions_NormalArgs SetupBindingListenOptions
        {
            add
            {
                HookHandler._afterSetupBindingListenOptions += value;
                HookHandler.HookSetupBindingListenOptions();
            }
            remove => HookHandler._afterSetupBindingListenOptions -= value;
        }

        public static event Delegates.SetupRefs_NormalArgs SetupRefs
        {
            add
            {
                HookHandler._afterSetupRefs += value;
                HookHandler.HookSetupRefs();
            }
            remove => HookHandler._afterSetupRefs -= value;
        }

        public static event Delegates.orig_SetupUnmappableButtons_NormalArgs orig_SetupUnmappableButtons
        {
            add
            {
                HookHandler._afterorig_SetupUnmappableButtons += value;
                HookHandler.Hookorig_SetupUnmappableButtons();
            }
            remove => HookHandler._afterorig_SetupUnmappableButtons -= value;
        }

        public static event Delegates.InitCustomActions_NormalArgs InitCustomActions
        {
            add
            {
                HookHandler._afterInitCustomActions += value;
                HookHandler.HookInitCustomActions();
            }
            remove => HookHandler._afterInitCustomActions -= value;
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.GetBindingPublic_NormalArgs GetBindingPublic
        {
            add
            {
                HookHandler._afterGetBindingPublic += value;
                HookHandler.HookGetBindingPublic();
            }
            remove => HookHandler._afterGetBindingPublic -= value;
        }

        public static event Delegates.orig_GetBinding_NormalArgs orig_GetBinding
        {
            add
            {
                HookHandler._afterorig_GetBinding += value;
                HookHandler.Hookorig_GetBinding();
            }
            remove => HookHandler._afterorig_GetBinding -= value;
        }

        public static event Delegates.orig_SetupBindingListenOptions_NormalArgs orig_SetupBindingListenOptions
        {
            add
            {
                HookHandler._afterorig_SetupBindingListenOptions += value;
                HookHandler.Hookorig_SetupBindingListenOptions();
            }
            remove => HookHandler._afterorig_SetupBindingListenOptions -= value;
        }

        public static event Delegates.orig_ShowCurrentBinding_NormalArgs orig_ShowCurrentBinding
        {
            add
            {
                HookHandler._afterorig_ShowCurrentBinding += value;
                HookHandler.Hookorig_ShowCurrentBinding();
            }
            remove => HookHandler._afterorig_ShowCurrentBinding -= value;
        }

        public static event Delegates.orig_SetupRefs_NormalArgs orig_SetupRefs
        {
            add
            {
                HookHandler._afterorig_SetupRefs += value;
                HookHandler.Hookorig_SetupRefs();
            }
            remove => HookHandler._afterorig_SetupRefs -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.MappableControllerButton.hook_Start Start
        {
            add => On.MappableControllerButton.Start += value;
            remove => On.MappableControllerButton.Start -= value;
        }

        public static event On.MappableControllerButton.hook_OnEnable OnEnable
        {
            add => On.MappableControllerButton.OnEnable += value;
            remove => On.MappableControllerButton.OnEnable -= value;
        }

        public static event On.MappableControllerButton.hook_GetBinding GetBinding
        {
            add => On.MappableControllerButton.GetBinding += value;
            remove => On.MappableControllerButton.GetBinding -= value;
        }

        public static event On.MappableControllerButton.hook_ListenForNewButton ListenForNewButton
        {
            add => On.MappableControllerButton.ListenForNewButton += value;
            remove => On.MappableControllerButton.ListenForNewButton -= value;
        }

        public static event On.MappableControllerButton.hook_ShowCurrentBinding ShowCurrentBinding
        {
            add => On.MappableControllerButton.ShowCurrentBinding += value;
            remove => On.MappableControllerButton.ShowCurrentBinding -= value;
        }

        public static event On.MappableControllerButton.hook_AbortRebind AbortRebind
        {
            add => On.MappableControllerButton.AbortRebind += value;
            remove => On.MappableControllerButton.AbortRebind -= value;
        }

        public static event On.MappableControllerButton.hook_StopActionListening StopActionListening
        {
            add => On.MappableControllerButton.StopActionListening += value;
            remove => On.MappableControllerButton.StopActionListening -= value;
        }

        public static event On.MappableControllerButton.hook_OnBindingFound OnBindingFound
        {
            add => On.MappableControllerButton.OnBindingFound += value;
            remove => On.MappableControllerButton.OnBindingFound -= value;
        }

        public static event On.MappableControllerButton.hook_OnBindingAdded OnBindingAdded
        {
            add => On.MappableControllerButton.OnBindingAdded += value;
            remove => On.MappableControllerButton.OnBindingAdded -= value;
        }

        public static event On.MappableControllerButton.hook_OnBindingRejected OnBindingRejected
        {
            add => On.MappableControllerButton.OnBindingRejected += value;
            remove => On.MappableControllerButton.OnBindingRejected -= value;
        }

        public static event On.MappableControllerButton.hook_OnSubmit OnSubmit
        {
            add => On.MappableControllerButton.OnSubmit += value;
            remove => On.MappableControllerButton.OnSubmit -= value;
        }

        public static event On.MappableControllerButton.hook_OnPointerClick OnPointerClick
        {
            add => On.MappableControllerButton.OnPointerClick += value;
            remove => On.MappableControllerButton.OnPointerClick -= value;
        }

        public static event On.MappableControllerButton.hook_OnCancel OnCancel
        {
            add => On.MappableControllerButton.OnCancel += value;
            remove => On.MappableControllerButton.OnCancel -= value;
        }

        public static event On.MappableControllerButton.hook_StopListeningForNewButton StopListeningForNewButton
        {
            add => On.MappableControllerButton.StopListeningForNewButton += value;
            remove => On.MappableControllerButton.StopListeningForNewButton -= value;
        }

        public static event On.MappableControllerButton.hook_SetupUnmappableButtons SetupUnmappableButtons
        {
            add => On.MappableControllerButton.SetupUnmappableButtons += value;
            remove => On.MappableControllerButton.SetupUnmappableButtons -= value;
        }

        public static event On.MappableControllerButton.hook_SetupBindingListenOptions SetupBindingListenOptions
        {
            add => On.MappableControllerButton.SetupBindingListenOptions += value;
            remove => On.MappableControllerButton.SetupBindingListenOptions -= value;
        }

        public static event On.MappableControllerButton.hook_SetupRefs SetupRefs
        {
            add => On.MappableControllerButton.SetupRefs += value;
            remove => On.MappableControllerButton.SetupRefs -= value;
        }

        public static event Delegates.orig_SetupUnmappableButtons_NormalArgs orig_SetupUnmappableButtons
        {
            add => HookEndpointManager.Add<Delegates.orig_SetupUnmappableButtons_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_SetupUnmappableButtons"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_SetupUnmappableButtons_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_SetupUnmappableButtons"), value);
        }

        public static event Delegates.InitCustomActions_NormalArgs InitCustomActions
        {
            add => HookEndpointManager.Add<Delegates.InitCustomActions_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "InitCustomActions"), value);
            remove => HookEndpointManager.Remove<Delegates.InitCustomActions_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "InitCustomActions"), value);
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add => HookEndpointManager.Add<Delegates.OnDestroy_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "OnDestroy"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDestroy_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "OnDestroy"), value);
        }

        public static event Delegates.GetBindingPublic_NormalArgs GetBindingPublic
        {
            add => HookEndpointManager.Add<Delegates.GetBindingPublic_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "GetBindingPublic"), value);
            remove => HookEndpointManager.Remove<Delegates.GetBindingPublic_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "GetBindingPublic"), value);
        }

        public static event Delegates.orig_GetBinding_NormalArgs orig_GetBinding
        {
            add => HookEndpointManager.Add<Delegates.orig_GetBinding_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_GetBinding"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_GetBinding_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_GetBinding"), value);
        }

        public static event Delegates.orig_SetupBindingListenOptions_NormalArgs orig_SetupBindingListenOptions
        {
            add => HookEndpointManager.Add<Delegates.orig_SetupBindingListenOptions_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_SetupBindingListenOptions"),
                value);
            remove => HookEndpointManager.Remove<Delegates.orig_SetupBindingListenOptions_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_SetupBindingListenOptions"),
                value);
        }

        public static event Delegates.orig_ShowCurrentBinding_NormalArgs orig_ShowCurrentBinding
        {
            add => HookEndpointManager.Add<Delegates.orig_ShowCurrentBinding_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_ShowCurrentBinding"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_ShowCurrentBinding_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_ShowCurrentBinding"), value);
        }

        public static event Delegates.orig_SetupRefs_NormalArgs orig_SetupRefs
        {
            add => HookEndpointManager.Add<Delegates.orig_SetupRefs_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_SetupRefs"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_SetupRefs_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_SetupRefs"), value);
        }
    }
}