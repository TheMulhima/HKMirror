using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for MappableControllerButton class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMappableControllerButton
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.MappableControllerButton.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.MappableControllerButton.orig_Start orig, MappableControllerButton self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.MappableControllerButton.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.MappableControllerButton.orig_OnEnable orig, MappableControllerButton self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
            {
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
            {
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetBinding()
        {
            if (!HookedList.Contains("GetBinding"))
            {
                HookedList.Add("GetBinding");
                On.MappableControllerButton.GetBinding += GetBinding;
            }
        }

        internal static event Delegates.GetBinding_BeforeArgs _beforeGetBinding;
        internal static event Delegates.GetBinding_AfterArgs _afterGetBinding;

        private static void GetBinding(On.MappableControllerButton.orig_GetBinding orig, MappableControllerButton self)
        {
            Delegates.Params_GetBinding @params = new()
            {
                self = self
            };
            if (_beforeGetBinding != null)
            {
                foreach (Delegates.GetBinding_BeforeArgs toInvoke in _beforeGetBinding.GetInvocationList())
                {
                    try
                    {
                        _beforeGetBinding?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterGetBinding != null)
            {
                foreach (Delegates.GetBinding_AfterArgs toInvoke in _afterGetBinding.GetInvocationList())
                {
                    try
                    {
                        _afterGetBinding.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookListenForNewButton()
        {
            if (!HookedList.Contains("ListenForNewButton"))
            {
                HookedList.Add("ListenForNewButton");
                On.MappableControllerButton.ListenForNewButton += ListenForNewButton;
            }
        }

        internal static event Delegates.ListenForNewButton_BeforeArgs _beforeListenForNewButton;
        internal static event Delegates.ListenForNewButton_AfterArgs _afterListenForNewButton;

        private static void ListenForNewButton(On.MappableControllerButton.orig_ListenForNewButton orig,
            MappableControllerButton self)
        {
            Delegates.Params_ListenForNewButton @params = new()
            {
                self = self
            };
            if (_beforeListenForNewButton != null)
            {
                foreach (Delegates.ListenForNewButton_BeforeArgs toInvoke in
                         _beforeListenForNewButton.GetInvocationList())
                {
                    try
                    {
                        _beforeListenForNewButton?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterListenForNewButton != null)
            {
                foreach (Delegates.ListenForNewButton_AfterArgs toInvoke in
                         _afterListenForNewButton.GetInvocationList())
                {
                    try
                    {
                        _afterListenForNewButton.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookShowCurrentBinding()
        {
            if (!HookedList.Contains("ShowCurrentBinding"))
            {
                HookedList.Add("ShowCurrentBinding");
                On.MappableControllerButton.ShowCurrentBinding += ShowCurrentBinding;
            }
        }

        internal static event Delegates.ShowCurrentBinding_BeforeArgs _beforeShowCurrentBinding;
        internal static event Delegates.ShowCurrentBinding_AfterArgs _afterShowCurrentBinding;

        private static void ShowCurrentBinding(On.MappableControllerButton.orig_ShowCurrentBinding orig,
            MappableControllerButton self)
        {
            Delegates.Params_ShowCurrentBinding @params = new()
            {
                self = self
            };
            if (_beforeShowCurrentBinding != null)
            {
                foreach (Delegates.ShowCurrentBinding_BeforeArgs toInvoke in
                         _beforeShowCurrentBinding.GetInvocationList())
                {
                    try
                    {
                        _beforeShowCurrentBinding?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterShowCurrentBinding != null)
            {
                foreach (Delegates.ShowCurrentBinding_AfterArgs toInvoke in
                         _afterShowCurrentBinding.GetInvocationList())
                {
                    try
                    {
                        _afterShowCurrentBinding.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookAbortRebind()
        {
            if (!HookedList.Contains("AbortRebind"))
            {
                HookedList.Add("AbortRebind");
                On.MappableControllerButton.AbortRebind += AbortRebind;
            }
        }

        internal static event Delegates.AbortRebind_BeforeArgs _beforeAbortRebind;
        internal static event Delegates.AbortRebind_AfterArgs _afterAbortRebind;

        private static void AbortRebind(On.MappableControllerButton.orig_AbortRebind orig,
            MappableControllerButton self)
        {
            Delegates.Params_AbortRebind @params = new()
            {
                self = self
            };
            if (_beforeAbortRebind != null)
            {
                foreach (Delegates.AbortRebind_BeforeArgs toInvoke in _beforeAbortRebind.GetInvocationList())
                {
                    try
                    {
                        _beforeAbortRebind?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterAbortRebind != null)
            {
                foreach (Delegates.AbortRebind_AfterArgs toInvoke in _afterAbortRebind.GetInvocationList())
                {
                    try
                    {
                        _afterAbortRebind.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStopActionListening()
        {
            if (!HookedList.Contains("StopActionListening"))
            {
                HookedList.Add("StopActionListening");
                On.MappableControllerButton.StopActionListening += StopActionListening;
            }
        }

        internal static event Delegates.StopActionListening_BeforeArgs _beforeStopActionListening;
        internal static event Delegates.StopActionListening_AfterArgs _afterStopActionListening;

        private static void StopActionListening(On.MappableControllerButton.orig_StopActionListening orig,
            MappableControllerButton self)
        {
            Delegates.Params_StopActionListening @params = new()
            {
                self = self
            };
            if (_beforeStopActionListening != null)
            {
                foreach (Delegates.StopActionListening_BeforeArgs toInvoke in _beforeStopActionListening
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeStopActionListening?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStopActionListening != null)
            {
                foreach (Delegates.StopActionListening_AfterArgs toInvoke in
                         _afterStopActionListening.GetInvocationList())
                {
                    try
                    {
                        _afterStopActionListening.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnBindingFound()
        {
            if (!HookedList.Contains("OnBindingFound"))
            {
                HookedList.Add("OnBindingFound");
                On.MappableControllerButton.OnBindingFound += OnBindingFound;
            }
        }

        internal static event Delegates.OnBindingFound_BeforeArgs _beforeOnBindingFound;
        internal static event Delegates.OnBindingFound_AfterArgs _afterOnBindingFound;

        private static bool OnBindingFound(On.MappableControllerButton.orig_OnBindingFound orig,
            MappableControllerButton self, InControl.PlayerAction action, InControl.BindingSource binding)
        {
            Delegates.Params_OnBindingFound @params = new()
            {
                self = self, action = action, binding = binding
            };
            if (_beforeOnBindingFound != null)
            {
                foreach (Delegates.OnBindingFound_BeforeArgs toInvoke in _beforeOnBindingFound.GetInvocationList())
                {
                    try
                    {
                        _beforeOnBindingFound?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            action = @params.action;
            binding = @params.binding;
            var retVal = orig(self, action, binding);
            if (_afterOnBindingFound != null)
            {
                foreach (Delegates.OnBindingFound_AfterArgs toInvoke in _afterOnBindingFound.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterOnBindingFound.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookOnBindingAdded()
        {
            if (!HookedList.Contains("OnBindingAdded"))
            {
                HookedList.Add("OnBindingAdded");
                On.MappableControllerButton.OnBindingAdded += OnBindingAdded;
            }
        }

        internal static event Delegates.OnBindingAdded_BeforeArgs _beforeOnBindingAdded;
        internal static event Delegates.OnBindingAdded_AfterArgs _afterOnBindingAdded;

        private static void OnBindingAdded(On.MappableControllerButton.orig_OnBindingAdded orig,
            MappableControllerButton self, InControl.PlayerAction action, InControl.BindingSource binding)
        {
            Delegates.Params_OnBindingAdded @params = new()
            {
                self = self, action = action, binding = binding
            };
            if (_beforeOnBindingAdded != null)
            {
                foreach (Delegates.OnBindingAdded_BeforeArgs toInvoke in _beforeOnBindingAdded.GetInvocationList())
                {
                    try
                    {
                        _beforeOnBindingAdded?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            action = @params.action;
            binding = @params.binding;
            orig(self, action, binding);
            if (_afterOnBindingAdded != null)
            {
                foreach (Delegates.OnBindingAdded_AfterArgs toInvoke in _afterOnBindingAdded.GetInvocationList())
                {
                    try
                    {
                        _afterOnBindingAdded.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnBindingRejected()
        {
            if (!HookedList.Contains("OnBindingRejected"))
            {
                HookedList.Add("OnBindingRejected");
                On.MappableControllerButton.OnBindingRejected += OnBindingRejected;
            }
        }

        internal static event Delegates.OnBindingRejected_BeforeArgs _beforeOnBindingRejected;
        internal static event Delegates.OnBindingRejected_AfterArgs _afterOnBindingRejected;

        private static void OnBindingRejected(On.MappableControllerButton.orig_OnBindingRejected orig,
            MappableControllerButton self, InControl.PlayerAction action, InControl.BindingSource binding,
            InControl.BindingSourceRejectionType rejection)
        {
            Delegates.Params_OnBindingRejected @params = new()
            {
                self = self, action = action, binding = binding, rejection = rejection
            };
            if (_beforeOnBindingRejected != null)
            {
                foreach (Delegates.OnBindingRejected_BeforeArgs toInvoke in
                         _beforeOnBindingRejected.GetInvocationList())
                {
                    try
                    {
                        _beforeOnBindingRejected?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            action = @params.action;
            binding = @params.binding;
            rejection = @params.rejection;
            orig(self, action, binding, rejection);
            if (_afterOnBindingRejected != null)
            {
                foreach (Delegates.OnBindingRejected_AfterArgs toInvoke in _afterOnBindingRejected.GetInvocationList())
                {
                    try
                    {
                        _afterOnBindingRejected.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnSubmit()
        {
            if (!HookedList.Contains("OnSubmit"))
            {
                HookedList.Add("OnSubmit");
                On.MappableControllerButton.OnSubmit += OnSubmit;
            }
        }

        internal static event Delegates.OnSubmit_BeforeArgs _beforeOnSubmit;
        internal static event Delegates.OnSubmit_AfterArgs _afterOnSubmit;

        private static void OnSubmit(On.MappableControllerButton.orig_OnSubmit orig, MappableControllerButton self,
            UnityEngine.EventSystems.BaseEventData eventData)
        {
            Delegates.Params_OnSubmit @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnSubmit != null)
            {
                foreach (Delegates.OnSubmit_BeforeArgs toInvoke in _beforeOnSubmit.GetInvocationList())
                {
                    try
                    {
                        _beforeOnSubmit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnSubmit != null)
            {
                foreach (Delegates.OnSubmit_AfterArgs toInvoke in _afterOnSubmit.GetInvocationList())
                {
                    try
                    {
                        _afterOnSubmit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnPointerClick()
        {
            if (!HookedList.Contains("OnPointerClick"))
            {
                HookedList.Add("OnPointerClick");
                On.MappableControllerButton.OnPointerClick += OnPointerClick;
            }
        }

        internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
        internal static event Delegates.OnPointerClick_AfterArgs _afterOnPointerClick;

        private static void OnPointerClick(On.MappableControllerButton.orig_OnPointerClick orig,
            MappableControllerButton self, UnityEngine.EventSystems.PointerEventData eventData)
        {
            Delegates.Params_OnPointerClick @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnPointerClick != null)
            {
                foreach (Delegates.OnPointerClick_BeforeArgs toInvoke in _beforeOnPointerClick.GetInvocationList())
                {
                    try
                    {
                        _beforeOnPointerClick?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnPointerClick != null)
            {
                foreach (Delegates.OnPointerClick_AfterArgs toInvoke in _afterOnPointerClick.GetInvocationList())
                {
                    try
                    {
                        _afterOnPointerClick.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnCancel()
        {
            if (!HookedList.Contains("OnCancel"))
            {
                HookedList.Add("OnCancel");
                On.MappableControllerButton.OnCancel += OnCancel;
            }
        }

        internal static event Delegates.OnCancel_BeforeArgs _beforeOnCancel;
        internal static event Delegates.OnCancel_AfterArgs _afterOnCancel;

        private static void OnCancel(On.MappableControllerButton.orig_OnCancel orig, MappableControllerButton self,
            UnityEngine.EventSystems.BaseEventData eventData)
        {
            Delegates.Params_OnCancel @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnCancel != null)
            {
                foreach (Delegates.OnCancel_BeforeArgs toInvoke in _beforeOnCancel.GetInvocationList())
                {
                    try
                    {
                        _beforeOnCancel?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnCancel != null)
            {
                foreach (Delegates.OnCancel_AfterArgs toInvoke in _afterOnCancel.GetInvocationList())
                {
                    try
                    {
                        _afterOnCancel.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStopListeningForNewButton()
        {
            if (!HookedList.Contains("StopListeningForNewButton"))
            {
                HookedList.Add("StopListeningForNewButton");
                On.MappableControllerButton.StopListeningForNewButton += StopListeningForNewButton;
            }
        }

        internal static event Delegates.StopListeningForNewButton_BeforeArgs _beforeStopListeningForNewButton;
        internal static event Delegates.StopListeningForNewButton_AfterArgs _afterStopListeningForNewButton;

        private static void StopListeningForNewButton(On.MappableControllerButton.orig_StopListeningForNewButton orig,
            MappableControllerButton self)
        {
            Delegates.Params_StopListeningForNewButton @params = new()
            {
                self = self
            };
            if (_beforeStopListeningForNewButton != null)
            {
                foreach (Delegates.StopListeningForNewButton_BeforeArgs toInvoke in _beforeStopListeningForNewButton
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeStopListeningForNewButton?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStopListeningForNewButton != null)
            {
                foreach (Delegates.StopListeningForNewButton_AfterArgs toInvoke in _afterStopListeningForNewButton
                             .GetInvocationList())
                {
                    try
                    {
                        _afterStopListeningForNewButton.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetupUnmappableButtons()
        {
            if (!HookedList.Contains("SetupUnmappableButtons"))
            {
                HookedList.Add("SetupUnmappableButtons");
                On.MappableControllerButton.SetupUnmappableButtons += SetupUnmappableButtons;
            }
        }

        internal static event Delegates.SetupUnmappableButtons_BeforeArgs _beforeSetupUnmappableButtons;
        internal static event Delegates.SetupUnmappableButtons_AfterArgs _afterSetupUnmappableButtons;

        private static void SetupUnmappableButtons(On.MappableControllerButton.orig_SetupUnmappableButtons orig,
            MappableControllerButton self)
        {
            Delegates.Params_SetupUnmappableButtons @params = new()
            {
                self = self
            };
            if (_beforeSetupUnmappableButtons != null)
            {
                foreach (Delegates.SetupUnmappableButtons_BeforeArgs toInvoke in _beforeSetupUnmappableButtons
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeSetupUnmappableButtons?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterSetupUnmappableButtons != null)
            {
                foreach (Delegates.SetupUnmappableButtons_AfterArgs toInvoke in _afterSetupUnmappableButtons
                             .GetInvocationList())
                {
                    try
                    {
                        _afterSetupUnmappableButtons.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetupBindingListenOptions()
        {
            if (!HookedList.Contains("SetupBindingListenOptions"))
            {
                HookedList.Add("SetupBindingListenOptions");
                On.MappableControllerButton.SetupBindingListenOptions += SetupBindingListenOptions;
            }
        }

        internal static event Delegates.SetupBindingListenOptions_BeforeArgs _beforeSetupBindingListenOptions;
        internal static event Delegates.SetupBindingListenOptions_AfterArgs _afterSetupBindingListenOptions;

        private static void SetupBindingListenOptions(On.MappableControllerButton.orig_SetupBindingListenOptions orig,
            MappableControllerButton self)
        {
            Delegates.Params_SetupBindingListenOptions @params = new()
            {
                self = self
            };
            if (_beforeSetupBindingListenOptions != null)
            {
                foreach (Delegates.SetupBindingListenOptions_BeforeArgs toInvoke in _beforeSetupBindingListenOptions
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeSetupBindingListenOptions?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterSetupBindingListenOptions != null)
            {
                foreach (Delegates.SetupBindingListenOptions_AfterArgs toInvoke in _afterSetupBindingListenOptions
                             .GetInvocationList())
                {
                    try
                    {
                        _afterSetupBindingListenOptions.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetupRefs()
        {
            if (!HookedList.Contains("SetupRefs"))
            {
                HookedList.Add("SetupRefs");
                On.MappableControllerButton.SetupRefs += SetupRefs;
            }
        }

        internal static event Delegates.SetupRefs_BeforeArgs _beforeSetupRefs;
        internal static event Delegates.SetupRefs_AfterArgs _afterSetupRefs;

        private static void SetupRefs(On.MappableControllerButton.orig_SetupRefs orig, MappableControllerButton self)
        {
            Delegates.Params_SetupRefs @params = new()
            {
                self = self
            };
            if (_beforeSetupRefs != null)
            {
                foreach (Delegates.SetupRefs_BeforeArgs toInvoke in _beforeSetupRefs.GetInvocationList())
                {
                    try
                    {
                        _beforeSetupRefs?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterSetupRefs != null)
            {
                foreach (Delegates.SetupRefs_AfterArgs toInvoke in _afterSetupRefs.GetInvocationList())
                {
                    try
                    {
                        _afterSetupRefs.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookorig_SetupUnmappableButtons()
        {
            if (!HookedList.Contains("orig_SetupUnmappableButtons"))
            {
                HookedList.Add("orig_SetupUnmappableButtons");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_SetupUnmappableButtons",
                        true), orig_SetupUnmappableButtons);
            }
        }

        internal static event Delegates.orig_SetupUnmappableButtons_BeforeArgs _beforeorig_SetupUnmappableButtons;
        internal static event Delegates.orig_SetupUnmappableButtons_AfterArgs _afterorig_SetupUnmappableButtons;

        private static void orig_SetupUnmappableButtons(Action<MappableControllerButton> orig,
            MappableControllerButton self)
        {
            Delegates.Params_orig_SetupUnmappableButtons @params = new()
            {
                self = self
            };
            if (_beforeorig_SetupUnmappableButtons != null)
            {
                foreach (Delegates.orig_SetupUnmappableButtons_BeforeArgs toInvoke in _beforeorig_SetupUnmappableButtons
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeorig_SetupUnmappableButtons?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterorig_SetupUnmappableButtons != null)
            {
                foreach (Delegates.orig_SetupUnmappableButtons_AfterArgs toInvoke in _afterorig_SetupUnmappableButtons
                             .GetInvocationList())
                {
                    try
                    {
                        _afterorig_SetupUnmappableButtons.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookInitCustomActions()
        {
            if (!HookedList.Contains("InitCustomActions"))
            {
                HookedList.Add("InitCustomActions");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "InitCustomActions", true),
                    InitCustomActions);
            }
        }

        internal static event Delegates.InitCustomActions_BeforeArgs _beforeInitCustomActions;
        internal static event Delegates.InitCustomActions_AfterArgs _afterInitCustomActions;

        private static void InitCustomActions(
            Action<MappableControllerButton, InControl.PlayerActionSet, InControl.PlayerAction> orig,
            MappableControllerButton self, InControl.PlayerActionSet actionSet, InControl.PlayerAction playerAction)
        {
            Delegates.Params_InitCustomActions @params = new()
            {
                self = self, actionSet = actionSet, playerAction = playerAction
            };
            if (_beforeInitCustomActions != null)
            {
                foreach (Delegates.InitCustomActions_BeforeArgs toInvoke in
                         _beforeInitCustomActions.GetInvocationList())
                {
                    try
                    {
                        _beforeInitCustomActions?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            actionSet = @params.actionSet;
            playerAction = @params.playerAction;
            orig(self, actionSet, playerAction);
            if (_afterInitCustomActions != null)
            {
                foreach (Delegates.InitCustomActions_AfterArgs toInvoke in _afterInitCustomActions.GetInvocationList())
                {
                    try
                    {
                        _afterInitCustomActions.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "OnDestroy", true),
                    OnDestroy);
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_AfterArgs _afterOnDestroy;

        private static void OnDestroy(Action<MappableControllerButton> orig, MappableControllerButton self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            if (_beforeOnDestroy != null)
            {
                foreach (Delegates.OnDestroy_BeforeArgs toInvoke in _beforeOnDestroy.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDestroy?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null)
            {
                foreach (Delegates.OnDestroy_AfterArgs toInvoke in _afterOnDestroy.GetInvocationList())
                {
                    try
                    {
                        _afterOnDestroy.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetBindingPublic()
        {
            if (!HookedList.Contains("GetBindingPublic"))
            {
                HookedList.Add("GetBindingPublic");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "GetBindingPublic", true),
                    GetBindingPublic);
            }
        }

        internal static event Delegates.GetBindingPublic_BeforeArgs _beforeGetBindingPublic;
        internal static event Delegates.GetBindingPublic_AfterArgs _afterGetBindingPublic;

        private static void GetBindingPublic(Action<MappableControllerButton> orig, MappableControllerButton self)
        {
            Delegates.Params_GetBindingPublic @params = new()
            {
                self = self
            };
            if (_beforeGetBindingPublic != null)
            {
                foreach (Delegates.GetBindingPublic_BeforeArgs toInvoke in _beforeGetBindingPublic.GetInvocationList())
                {
                    try
                    {
                        _beforeGetBindingPublic?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterGetBindingPublic != null)
            {
                foreach (Delegates.GetBindingPublic_AfterArgs toInvoke in _afterGetBindingPublic.GetInvocationList())
                {
                    try
                    {
                        _afterGetBindingPublic.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookorig_GetBinding()
        {
            if (!HookedList.Contains("orig_GetBinding"))
            {
                HookedList.Add("orig_GetBinding");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_GetBinding", true),
                    orig_GetBinding);
            }
        }

        internal static event Delegates.orig_GetBinding_BeforeArgs _beforeorig_GetBinding;
        internal static event Delegates.orig_GetBinding_AfterArgs _afterorig_GetBinding;

        private static void orig_GetBinding(Action<MappableControllerButton> orig, MappableControllerButton self)
        {
            Delegates.Params_orig_GetBinding @params = new()
            {
                self = self
            };
            if (_beforeorig_GetBinding != null)
            {
                foreach (Delegates.orig_GetBinding_BeforeArgs toInvoke in _beforeorig_GetBinding.GetInvocationList())
                {
                    try
                    {
                        _beforeorig_GetBinding?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterorig_GetBinding != null)
            {
                foreach (Delegates.orig_GetBinding_AfterArgs toInvoke in _afterorig_GetBinding.GetInvocationList())
                {
                    try
                    {
                        _afterorig_GetBinding.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookorig_SetupBindingListenOptions()
        {
            if (!HookedList.Contains("orig_SetupBindingListenOptions"))
            {
                HookedList.Add("orig_SetupBindingListenOptions");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_SetupBindingListenOptions",
                        true), orig_SetupBindingListenOptions);
            }
        }

        internal static event Delegates.orig_SetupBindingListenOptions_BeforeArgs _beforeorig_SetupBindingListenOptions;
        internal static event Delegates.orig_SetupBindingListenOptions_AfterArgs _afterorig_SetupBindingListenOptions;

        private static void orig_SetupBindingListenOptions(Action<MappableControllerButton> orig,
            MappableControllerButton self)
        {
            Delegates.Params_orig_SetupBindingListenOptions @params = new()
            {
                self = self
            };
            if (_beforeorig_SetupBindingListenOptions != null)
            {
                foreach (Delegates.orig_SetupBindingListenOptions_BeforeArgs toInvoke in
                         _beforeorig_SetupBindingListenOptions.GetInvocationList())
                {
                    try
                    {
                        _beforeorig_SetupBindingListenOptions?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterorig_SetupBindingListenOptions != null)
            {
                foreach (Delegates.orig_SetupBindingListenOptions_AfterArgs toInvoke in
                         _afterorig_SetupBindingListenOptions.GetInvocationList())
                {
                    try
                    {
                        _afterorig_SetupBindingListenOptions.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookorig_ShowCurrentBinding()
        {
            if (!HookedList.Contains("orig_ShowCurrentBinding"))
            {
                HookedList.Add("orig_ShowCurrentBinding");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_ShowCurrentBinding", true),
                    orig_ShowCurrentBinding);
            }
        }

        internal static event Delegates.orig_ShowCurrentBinding_BeforeArgs _beforeorig_ShowCurrentBinding;
        internal static event Delegates.orig_ShowCurrentBinding_AfterArgs _afterorig_ShowCurrentBinding;

        private static void orig_ShowCurrentBinding(Action<MappableControllerButton> orig,
            MappableControllerButton self)
        {
            Delegates.Params_orig_ShowCurrentBinding @params = new()
            {
                self = self
            };
            if (_beforeorig_ShowCurrentBinding != null)
            {
                foreach (Delegates.orig_ShowCurrentBinding_BeforeArgs toInvoke in _beforeorig_ShowCurrentBinding
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeorig_ShowCurrentBinding?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterorig_ShowCurrentBinding != null)
            {
                foreach (Delegates.orig_ShowCurrentBinding_AfterArgs toInvoke in _afterorig_ShowCurrentBinding
                             .GetInvocationList())
                {
                    try
                    {
                        _afterorig_ShowCurrentBinding.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookorig_SetupRefs()
        {
            if (!HookedList.Contains("orig_SetupRefs"))
            {
                HookedList.Add("orig_SetupRefs");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_SetupRefs", true),
                    orig_SetupRefs);
            }
        }

        internal static event Delegates.orig_SetupRefs_BeforeArgs _beforeorig_SetupRefs;
        internal static event Delegates.orig_SetupRefs_AfterArgs _afterorig_SetupRefs;

        private static void orig_SetupRefs(Action<MappableControllerButton> orig, MappableControllerButton self)
        {
            Delegates.Params_orig_SetupRefs @params = new()
            {
                self = self
            };
            if (_beforeorig_SetupRefs != null)
            {
                foreach (Delegates.orig_SetupRefs_BeforeArgs toInvoke in _beforeorig_SetupRefs.GetInvocationList())
                {
                    try
                    {
                        _beforeorig_SetupRefs?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterorig_SetupRefs != null)
            {
                foreach (Delegates.orig_SetupRefs_AfterArgs toInvoke in _afterorig_SetupRefs.GetInvocationList())
                {
                    try
                    {
                        _afterorig_SetupRefs.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Start
        {
            public MappableControllerButton self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<MappableControllerButton> orig, MappableControllerButton self);

        public sealed class Params_OnEnable
        {
            public MappableControllerButton self;
        }

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<MappableControllerButton> orig, MappableControllerButton self);

        public sealed class Params_GetBinding
        {
            public MappableControllerButton self;
        }

        public delegate void GetBinding_BeforeArgs(Params_GetBinding args);

        public delegate void GetBinding_AfterArgs(Params_GetBinding args);

        public delegate void GetBinding_WithArgs(Action<MappableControllerButton> orig, MappableControllerButton self);

        public sealed class Params_ListenForNewButton
        {
            public MappableControllerButton self;
        }

        public delegate void ListenForNewButton_BeforeArgs(Params_ListenForNewButton args);

        public delegate void ListenForNewButton_AfterArgs(Params_ListenForNewButton args);

        public delegate void ListenForNewButton_WithArgs(Action<MappableControllerButton> orig,
            MappableControllerButton self);

        public sealed class Params_ShowCurrentBinding
        {
            public MappableControllerButton self;
        }

        public delegate void ShowCurrentBinding_BeforeArgs(Params_ShowCurrentBinding args);

        public delegate void ShowCurrentBinding_AfterArgs(Params_ShowCurrentBinding args);

        public delegate void ShowCurrentBinding_WithArgs(Action<MappableControllerButton> orig,
            MappableControllerButton self);

        public sealed class Params_AbortRebind
        {
            public MappableControllerButton self;
        }

        public delegate void AbortRebind_BeforeArgs(Params_AbortRebind args);

        public delegate void AbortRebind_AfterArgs(Params_AbortRebind args);

        public delegate void AbortRebind_WithArgs(Action<MappableControllerButton> orig, MappableControllerButton self);

        public sealed class Params_StopActionListening
        {
            public MappableControllerButton self;
        }

        public delegate void StopActionListening_BeforeArgs(Params_StopActionListening args);

        public delegate void StopActionListening_AfterArgs(Params_StopActionListening args);

        public delegate void StopActionListening_WithArgs(Action<MappableControllerButton> orig,
            MappableControllerButton self);

        public sealed class Params_OnBindingFound
        {
            public MappableControllerButton self;
            public InControl.PlayerAction action;
            public InControl.BindingSource binding;
        }

        public delegate void OnBindingFound_BeforeArgs(Params_OnBindingFound args);

        public delegate bool OnBindingFound_AfterArgs(Params_OnBindingFound args, bool ret);

        public delegate bool OnBindingFound_WithArgs(
            Func<MappableControllerButton, InControl.PlayerAction, InControl.BindingSource, bool> orig,
            MappableControllerButton self, InControl.PlayerAction action, InControl.BindingSource binding);

        public sealed class Params_OnBindingAdded
        {
            public MappableControllerButton self;
            public InControl.PlayerAction action;
            public InControl.BindingSource binding;
        }

        public delegate void OnBindingAdded_BeforeArgs(Params_OnBindingAdded args);

        public delegate void OnBindingAdded_AfterArgs(Params_OnBindingAdded args);

        public delegate void OnBindingAdded_WithArgs(
            Action<MappableControllerButton, InControl.PlayerAction, InControl.BindingSource> orig,
            MappableControllerButton self, InControl.PlayerAction action, InControl.BindingSource binding);

        public sealed class Params_OnBindingRejected
        {
            public MappableControllerButton self;
            public InControl.PlayerAction action;
            public InControl.BindingSource binding;
            public InControl.BindingSourceRejectionType rejection;
        }

        public delegate void OnBindingRejected_BeforeArgs(Params_OnBindingRejected args);

        public delegate void OnBindingRejected_AfterArgs(Params_OnBindingRejected args);

        public delegate void OnBindingRejected_WithArgs(
            Action<MappableControllerButton, InControl.PlayerAction, InControl.BindingSource,
                InControl.BindingSourceRejectionType> orig, MappableControllerButton self,
            InControl.PlayerAction action, InControl.BindingSource binding,
            InControl.BindingSourceRejectionType rejection);

        public sealed class Params_OnSubmit
        {
            public MappableControllerButton self;
            public UnityEngine.EventSystems.BaseEventData eventData;
        }

        public delegate void OnSubmit_BeforeArgs(Params_OnSubmit args);

        public delegate void OnSubmit_AfterArgs(Params_OnSubmit args);

        public delegate void OnSubmit_WithArgs(
            Action<MappableControllerButton, UnityEngine.EventSystems.BaseEventData> orig,
            MappableControllerButton self, UnityEngine.EventSystems.BaseEventData eventData);

        public sealed class Params_OnPointerClick
        {
            public MappableControllerButton self;
            public UnityEngine.EventSystems.PointerEventData eventData;
        }

        public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_AfterArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_WithArgs(
            Action<MappableControllerButton, UnityEngine.EventSystems.PointerEventData> orig,
            MappableControllerButton self, UnityEngine.EventSystems.PointerEventData eventData);

        public sealed class Params_OnCancel
        {
            public MappableControllerButton self;
            public UnityEngine.EventSystems.BaseEventData eventData;
        }

        public delegate void OnCancel_BeforeArgs(Params_OnCancel args);

        public delegate void OnCancel_AfterArgs(Params_OnCancel args);

        public delegate void OnCancel_WithArgs(
            Action<MappableControllerButton, UnityEngine.EventSystems.BaseEventData> orig,
            MappableControllerButton self, UnityEngine.EventSystems.BaseEventData eventData);

        public sealed class Params_StopListeningForNewButton
        {
            public MappableControllerButton self;
        }

        public delegate void StopListeningForNewButton_BeforeArgs(Params_StopListeningForNewButton args);

        public delegate void StopListeningForNewButton_AfterArgs(Params_StopListeningForNewButton args);

        public delegate void StopListeningForNewButton_WithArgs(Action<MappableControllerButton> orig,
            MappableControllerButton self);

        public sealed class Params_SetupUnmappableButtons
        {
            public MappableControllerButton self;
        }

        public delegate void SetupUnmappableButtons_BeforeArgs(Params_SetupUnmappableButtons args);

        public delegate void SetupUnmappableButtons_AfterArgs(Params_SetupUnmappableButtons args);

        public delegate void SetupUnmappableButtons_WithArgs(Action<MappableControllerButton> orig,
            MappableControllerButton self);

        public sealed class Params_SetupBindingListenOptions
        {
            public MappableControllerButton self;
        }

        public delegate void SetupBindingListenOptions_BeforeArgs(Params_SetupBindingListenOptions args);

        public delegate void SetupBindingListenOptions_AfterArgs(Params_SetupBindingListenOptions args);

        public delegate void SetupBindingListenOptions_WithArgs(Action<MappableControllerButton> orig,
            MappableControllerButton self);

        public sealed class Params_SetupRefs
        {
            public MappableControllerButton self;
        }

        public delegate void SetupRefs_BeforeArgs(Params_SetupRefs args);

        public delegate void SetupRefs_AfterArgs(Params_SetupRefs args);

        public delegate void SetupRefs_WithArgs(Action<MappableControllerButton> orig, MappableControllerButton self);

        public sealed class Params_orig_SetupUnmappableButtons
        {
            public MappableControllerButton self;
        }

        public delegate void orig_SetupUnmappableButtons_BeforeArgs(Params_orig_SetupUnmappableButtons args);

        public delegate void orig_SetupUnmappableButtons_AfterArgs(Params_orig_SetupUnmappableButtons args);

        public delegate void orig_SetupUnmappableButtons_WithArgs(Action<MappableControllerButton> orig,
            MappableControllerButton self);

        public sealed class Params_InitCustomActions
        {
            public MappableControllerButton self;
            public InControl.PlayerActionSet actionSet;
            public InControl.PlayerAction playerAction;
        }

        public delegate void InitCustomActions_BeforeArgs(Params_InitCustomActions args);

        public delegate void InitCustomActions_AfterArgs(Params_InitCustomActions args);

        public delegate void InitCustomActions_WithArgs(
            Action<MappableControllerButton, InControl.PlayerActionSet, InControl.PlayerAction> orig,
            MappableControllerButton self, InControl.PlayerActionSet actionSet, InControl.PlayerAction playerAction);

        public sealed class Params_OnDestroy
        {
            public MappableControllerButton self;
        }

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_AfterArgs(Params_OnDestroy args);

        public delegate void OnDestroy_WithArgs(Action<MappableControllerButton> orig, MappableControllerButton self);

        public sealed class Params_GetBindingPublic
        {
            public MappableControllerButton self;
        }

        public delegate void GetBindingPublic_BeforeArgs(Params_GetBindingPublic args);

        public delegate void GetBindingPublic_AfterArgs(Params_GetBindingPublic args);

        public delegate void GetBindingPublic_WithArgs(Action<MappableControllerButton> orig,
            MappableControllerButton self);

        public sealed class Params_orig_GetBinding
        {
            public MappableControllerButton self;
        }

        public delegate void orig_GetBinding_BeforeArgs(Params_orig_GetBinding args);

        public delegate void orig_GetBinding_AfterArgs(Params_orig_GetBinding args);

        public delegate void orig_GetBinding_WithArgs(Action<MappableControllerButton> orig,
            MappableControllerButton self);

        public sealed class Params_orig_SetupBindingListenOptions
        {
            public MappableControllerButton self;
        }

        public delegate void orig_SetupBindingListenOptions_BeforeArgs(Params_orig_SetupBindingListenOptions args);

        public delegate void orig_SetupBindingListenOptions_AfterArgs(Params_orig_SetupBindingListenOptions args);

        public delegate void orig_SetupBindingListenOptions_WithArgs(Action<MappableControllerButton> orig,
            MappableControllerButton self);

        public sealed class Params_orig_ShowCurrentBinding
        {
            public MappableControllerButton self;
        }

        public delegate void orig_ShowCurrentBinding_BeforeArgs(Params_orig_ShowCurrentBinding args);

        public delegate void orig_ShowCurrentBinding_AfterArgs(Params_orig_ShowCurrentBinding args);

        public delegate void orig_ShowCurrentBinding_WithArgs(Action<MappableControllerButton> orig,
            MappableControllerButton self);

        public sealed class Params_orig_SetupRefs
        {
            public MappableControllerButton self;
        }

        public delegate void orig_SetupRefs_BeforeArgs(Params_orig_SetupRefs args);

        public delegate void orig_SetupRefs_AfterArgs(Params_orig_SetupRefs args);

        public delegate void orig_SetupRefs_WithArgs(Action<MappableControllerButton> orig,
            MappableControllerButton self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.GetBinding_BeforeArgs GetBinding
        {
            add
            {
                HookHandler._beforeGetBinding += value;
                HookHandler.HookGetBinding();
            }
            remove => HookHandler._beforeGetBinding -= value;
        }

        public static event Delegates.ListenForNewButton_BeforeArgs ListenForNewButton
        {
            add
            {
                HookHandler._beforeListenForNewButton += value;
                HookHandler.HookListenForNewButton();
            }
            remove => HookHandler._beforeListenForNewButton -= value;
        }

        public static event Delegates.ShowCurrentBinding_BeforeArgs ShowCurrentBinding
        {
            add
            {
                HookHandler._beforeShowCurrentBinding += value;
                HookHandler.HookShowCurrentBinding();
            }
            remove => HookHandler._beforeShowCurrentBinding -= value;
        }

        public static event Delegates.AbortRebind_BeforeArgs AbortRebind
        {
            add
            {
                HookHandler._beforeAbortRebind += value;
                HookHandler.HookAbortRebind();
            }
            remove => HookHandler._beforeAbortRebind -= value;
        }

        public static event Delegates.StopActionListening_BeforeArgs StopActionListening
        {
            add
            {
                HookHandler._beforeStopActionListening += value;
                HookHandler.HookStopActionListening();
            }
            remove => HookHandler._beforeStopActionListening -= value;
        }

        public static event Delegates.OnBindingFound_BeforeArgs OnBindingFound
        {
            add
            {
                HookHandler._beforeOnBindingFound += value;
                HookHandler.HookOnBindingFound();
            }
            remove => HookHandler._beforeOnBindingFound -= value;
        }

        public static event Delegates.OnBindingAdded_BeforeArgs OnBindingAdded
        {
            add
            {
                HookHandler._beforeOnBindingAdded += value;
                HookHandler.HookOnBindingAdded();
            }
            remove => HookHandler._beforeOnBindingAdded -= value;
        }

        public static event Delegates.OnBindingRejected_BeforeArgs OnBindingRejected
        {
            add
            {
                HookHandler._beforeOnBindingRejected += value;
                HookHandler.HookOnBindingRejected();
            }
            remove => HookHandler._beforeOnBindingRejected -= value;
        }

        public static event Delegates.OnSubmit_BeforeArgs OnSubmit
        {
            add
            {
                HookHandler._beforeOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._beforeOnSubmit -= value;
        }

        public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
        {
            add
            {
                HookHandler._beforeOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._beforeOnPointerClick -= value;
        }

        public static event Delegates.OnCancel_BeforeArgs OnCancel
        {
            add
            {
                HookHandler._beforeOnCancel += value;
                HookHandler.HookOnCancel();
            }
            remove => HookHandler._beforeOnCancel -= value;
        }

        public static event Delegates.StopListeningForNewButton_BeforeArgs StopListeningForNewButton
        {
            add
            {
                HookHandler._beforeStopListeningForNewButton += value;
                HookHandler.HookStopListeningForNewButton();
            }
            remove => HookHandler._beforeStopListeningForNewButton -= value;
        }

        public static event Delegates.SetupUnmappableButtons_BeforeArgs SetupUnmappableButtons
        {
            add
            {
                HookHandler._beforeSetupUnmappableButtons += value;
                HookHandler.HookSetupUnmappableButtons();
            }
            remove => HookHandler._beforeSetupUnmappableButtons -= value;
        }

        public static event Delegates.SetupBindingListenOptions_BeforeArgs SetupBindingListenOptions
        {
            add
            {
                HookHandler._beforeSetupBindingListenOptions += value;
                HookHandler.HookSetupBindingListenOptions();
            }
            remove => HookHandler._beforeSetupBindingListenOptions -= value;
        }

        public static event Delegates.SetupRefs_BeforeArgs SetupRefs
        {
            add
            {
                HookHandler._beforeSetupRefs += value;
                HookHandler.HookSetupRefs();
            }
            remove => HookHandler._beforeSetupRefs -= value;
        }

        public static event Delegates.orig_SetupUnmappableButtons_BeforeArgs orig_SetupUnmappableButtons
        {
            add
            {
                HookHandler._beforeorig_SetupUnmappableButtons += value;
                HookHandler.Hookorig_SetupUnmappableButtons();
            }
            remove => HookHandler._beforeorig_SetupUnmappableButtons -= value;
        }

        public static event Delegates.InitCustomActions_BeforeArgs InitCustomActions
        {
            add
            {
                HookHandler._beforeInitCustomActions += value;
                HookHandler.HookInitCustomActions();
            }
            remove => HookHandler._beforeInitCustomActions -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.GetBindingPublic_BeforeArgs GetBindingPublic
        {
            add
            {
                HookHandler._beforeGetBindingPublic += value;
                HookHandler.HookGetBindingPublic();
            }
            remove => HookHandler._beforeGetBindingPublic -= value;
        }

        public static event Delegates.orig_GetBinding_BeforeArgs orig_GetBinding
        {
            add
            {
                HookHandler._beforeorig_GetBinding += value;
                HookHandler.Hookorig_GetBinding();
            }
            remove => HookHandler._beforeorig_GetBinding -= value;
        }

        public static event Delegates.orig_SetupBindingListenOptions_BeforeArgs orig_SetupBindingListenOptions
        {
            add
            {
                HookHandler._beforeorig_SetupBindingListenOptions += value;
                HookHandler.Hookorig_SetupBindingListenOptions();
            }
            remove => HookHandler._beforeorig_SetupBindingListenOptions -= value;
        }

        public static event Delegates.orig_ShowCurrentBinding_BeforeArgs orig_ShowCurrentBinding
        {
            add
            {
                HookHandler._beforeorig_ShowCurrentBinding += value;
                HookHandler.Hookorig_ShowCurrentBinding();
            }
            remove => HookHandler._beforeorig_ShowCurrentBinding -= value;
        }

        public static event Delegates.orig_SetupRefs_BeforeArgs orig_SetupRefs
        {
            add
            {
                HookHandler._beforeorig_SetupRefs += value;
                HookHandler.Hookorig_SetupRefs();
            }
            remove => HookHandler._beforeorig_SetupRefs -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.GetBinding_AfterArgs GetBinding
        {
            add
            {
                HookHandler._afterGetBinding += value;
                HookHandler.HookGetBinding();
            }
            remove => HookHandler._afterGetBinding -= value;
        }

        public static event Delegates.ListenForNewButton_AfterArgs ListenForNewButton
        {
            add
            {
                HookHandler._afterListenForNewButton += value;
                HookHandler.HookListenForNewButton();
            }
            remove => HookHandler._afterListenForNewButton -= value;
        }

        public static event Delegates.ShowCurrentBinding_AfterArgs ShowCurrentBinding
        {
            add
            {
                HookHandler._afterShowCurrentBinding += value;
                HookHandler.HookShowCurrentBinding();
            }
            remove => HookHandler._afterShowCurrentBinding -= value;
        }

        public static event Delegates.AbortRebind_AfterArgs AbortRebind
        {
            add
            {
                HookHandler._afterAbortRebind += value;
                HookHandler.HookAbortRebind();
            }
            remove => HookHandler._afterAbortRebind -= value;
        }

        public static event Delegates.StopActionListening_AfterArgs StopActionListening
        {
            add
            {
                HookHandler._afterStopActionListening += value;
                HookHandler.HookStopActionListening();
            }
            remove => HookHandler._afterStopActionListening -= value;
        }

        public static event Delegates.OnBindingFound_AfterArgs OnBindingFound
        {
            add
            {
                HookHandler._afterOnBindingFound += value;
                HookHandler.HookOnBindingFound();
            }
            remove => HookHandler._afterOnBindingFound -= value;
        }

        public static event Delegates.OnBindingAdded_AfterArgs OnBindingAdded
        {
            add
            {
                HookHandler._afterOnBindingAdded += value;
                HookHandler.HookOnBindingAdded();
            }
            remove => HookHandler._afterOnBindingAdded -= value;
        }

        public static event Delegates.OnBindingRejected_AfterArgs OnBindingRejected
        {
            add
            {
                HookHandler._afterOnBindingRejected += value;
                HookHandler.HookOnBindingRejected();
            }
            remove => HookHandler._afterOnBindingRejected -= value;
        }

        public static event Delegates.OnSubmit_AfterArgs OnSubmit
        {
            add
            {
                HookHandler._afterOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._afterOnSubmit -= value;
        }

        public static event Delegates.OnPointerClick_AfterArgs OnPointerClick
        {
            add
            {
                HookHandler._afterOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._afterOnPointerClick -= value;
        }

        public static event Delegates.OnCancel_AfterArgs OnCancel
        {
            add
            {
                HookHandler._afterOnCancel += value;
                HookHandler.HookOnCancel();
            }
            remove => HookHandler._afterOnCancel -= value;
        }

        public static event Delegates.StopListeningForNewButton_AfterArgs StopListeningForNewButton
        {
            add
            {
                HookHandler._afterStopListeningForNewButton += value;
                HookHandler.HookStopListeningForNewButton();
            }
            remove => HookHandler._afterStopListeningForNewButton -= value;
        }

        public static event Delegates.SetupUnmappableButtons_AfterArgs SetupUnmappableButtons
        {
            add
            {
                HookHandler._afterSetupUnmappableButtons += value;
                HookHandler.HookSetupUnmappableButtons();
            }
            remove => HookHandler._afterSetupUnmappableButtons -= value;
        }

        public static event Delegates.SetupBindingListenOptions_AfterArgs SetupBindingListenOptions
        {
            add
            {
                HookHandler._afterSetupBindingListenOptions += value;
                HookHandler.HookSetupBindingListenOptions();
            }
            remove => HookHandler._afterSetupBindingListenOptions -= value;
        }

        public static event Delegates.SetupRefs_AfterArgs SetupRefs
        {
            add
            {
                HookHandler._afterSetupRefs += value;
                HookHandler.HookSetupRefs();
            }
            remove => HookHandler._afterSetupRefs -= value;
        }

        public static event Delegates.orig_SetupUnmappableButtons_AfterArgs orig_SetupUnmappableButtons
        {
            add
            {
                HookHandler._afterorig_SetupUnmappableButtons += value;
                HookHandler.Hookorig_SetupUnmappableButtons();
            }
            remove => HookHandler._afterorig_SetupUnmappableButtons -= value;
        }

        public static event Delegates.InitCustomActions_AfterArgs InitCustomActions
        {
            add
            {
                HookHandler._afterInitCustomActions += value;
                HookHandler.HookInitCustomActions();
            }
            remove => HookHandler._afterInitCustomActions -= value;
        }

        public static event Delegates.OnDestroy_AfterArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.GetBindingPublic_AfterArgs GetBindingPublic
        {
            add
            {
                HookHandler._afterGetBindingPublic += value;
                HookHandler.HookGetBindingPublic();
            }
            remove => HookHandler._afterGetBindingPublic -= value;
        }

        public static event Delegates.orig_GetBinding_AfterArgs orig_GetBinding
        {
            add
            {
                HookHandler._afterorig_GetBinding += value;
                HookHandler.Hookorig_GetBinding();
            }
            remove => HookHandler._afterorig_GetBinding -= value;
        }

        public static event Delegates.orig_SetupBindingListenOptions_AfterArgs orig_SetupBindingListenOptions
        {
            add
            {
                HookHandler._afterorig_SetupBindingListenOptions += value;
                HookHandler.Hookorig_SetupBindingListenOptions();
            }
            remove => HookHandler._afterorig_SetupBindingListenOptions -= value;
        }

        public static event Delegates.orig_ShowCurrentBinding_AfterArgs orig_ShowCurrentBinding
        {
            add
            {
                HookHandler._afterorig_ShowCurrentBinding += value;
                HookHandler.Hookorig_ShowCurrentBinding();
            }
            remove => HookHandler._afterorig_ShowCurrentBinding -= value;
        }

        public static event Delegates.orig_SetupRefs_AfterArgs orig_SetupRefs
        {
            add
            {
                HookHandler._afterorig_SetupRefs += value;
                HookHandler.Hookorig_SetupRefs();
            }
            remove => HookHandler._afterorig_SetupRefs -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.MappableControllerButton.hook_Start Start
        {
            add => On.MappableControllerButton.Start += value;
            remove => On.MappableControllerButton.Start -= value;
        }

        public static event On.MappableControllerButton.hook_OnEnable OnEnable
        {
            add => On.MappableControllerButton.OnEnable += value;
            remove => On.MappableControllerButton.OnEnable -= value;
        }

        public static event On.MappableControllerButton.hook_GetBinding GetBinding
        {
            add => On.MappableControllerButton.GetBinding += value;
            remove => On.MappableControllerButton.GetBinding -= value;
        }

        public static event On.MappableControllerButton.hook_ListenForNewButton ListenForNewButton
        {
            add => On.MappableControllerButton.ListenForNewButton += value;
            remove => On.MappableControllerButton.ListenForNewButton -= value;
        }

        public static event On.MappableControllerButton.hook_ShowCurrentBinding ShowCurrentBinding
        {
            add => On.MappableControllerButton.ShowCurrentBinding += value;
            remove => On.MappableControllerButton.ShowCurrentBinding -= value;
        }

        public static event On.MappableControllerButton.hook_AbortRebind AbortRebind
        {
            add => On.MappableControllerButton.AbortRebind += value;
            remove => On.MappableControllerButton.AbortRebind -= value;
        }

        public static event On.MappableControllerButton.hook_StopActionListening StopActionListening
        {
            add => On.MappableControllerButton.StopActionListening += value;
            remove => On.MappableControllerButton.StopActionListening -= value;
        }

        public static event On.MappableControllerButton.hook_OnBindingFound OnBindingFound
        {
            add => On.MappableControllerButton.OnBindingFound += value;
            remove => On.MappableControllerButton.OnBindingFound -= value;
        }

        public static event On.MappableControllerButton.hook_OnBindingAdded OnBindingAdded
        {
            add => On.MappableControllerButton.OnBindingAdded += value;
            remove => On.MappableControllerButton.OnBindingAdded -= value;
        }

        public static event On.MappableControllerButton.hook_OnBindingRejected OnBindingRejected
        {
            add => On.MappableControllerButton.OnBindingRejected += value;
            remove => On.MappableControllerButton.OnBindingRejected -= value;
        }

        public static event On.MappableControllerButton.hook_OnSubmit OnSubmit
        {
            add => On.MappableControllerButton.OnSubmit += value;
            remove => On.MappableControllerButton.OnSubmit -= value;
        }

        public static event On.MappableControllerButton.hook_OnPointerClick OnPointerClick
        {
            add => On.MappableControllerButton.OnPointerClick += value;
            remove => On.MappableControllerButton.OnPointerClick -= value;
        }

        public static event On.MappableControllerButton.hook_OnCancel OnCancel
        {
            add => On.MappableControllerButton.OnCancel += value;
            remove => On.MappableControllerButton.OnCancel -= value;
        }

        public static event On.MappableControllerButton.hook_StopListeningForNewButton StopListeningForNewButton
        {
            add => On.MappableControllerButton.StopListeningForNewButton += value;
            remove => On.MappableControllerButton.StopListeningForNewButton -= value;
        }

        public static event On.MappableControllerButton.hook_SetupUnmappableButtons SetupUnmappableButtons
        {
            add => On.MappableControllerButton.SetupUnmappableButtons += value;
            remove => On.MappableControllerButton.SetupUnmappableButtons -= value;
        }

        public static event On.MappableControllerButton.hook_SetupBindingListenOptions SetupBindingListenOptions
        {
            add => On.MappableControllerButton.SetupBindingListenOptions += value;
            remove => On.MappableControllerButton.SetupBindingListenOptions -= value;
        }

        public static event On.MappableControllerButton.hook_SetupRefs SetupRefs
        {
            add => On.MappableControllerButton.SetupRefs += value;
            remove => On.MappableControllerButton.SetupRefs -= value;
        }

        public static event Delegates.orig_SetupUnmappableButtons_WithArgs orig_SetupUnmappableButtons
        {
            add => HookEndpointManager.Add<Delegates.orig_SetupUnmappableButtons_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_SetupUnmappableButtons", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.orig_SetupUnmappableButtons_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_SetupUnmappableButtons", true),
                value);
        }

        public static event Delegates.InitCustomActions_WithArgs InitCustomActions
        {
            add => HookEndpointManager.Add<Delegates.InitCustomActions_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "InitCustomActions", true), value);
            remove => HookEndpointManager.Remove<Delegates.InitCustomActions_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "InitCustomActions", true), value);
        }

        public static event Delegates.OnDestroy_WithArgs OnDestroy
        {
            add => HookEndpointManager.Add<Delegates.OnDestroy_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "OnDestroy", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnDestroy_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "OnDestroy", true), value);
        }

        public static event Delegates.GetBindingPublic_WithArgs GetBindingPublic
        {
            add => HookEndpointManager.Add<Delegates.GetBindingPublic_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "GetBindingPublic", true), value);
            remove => HookEndpointManager.Remove<Delegates.GetBindingPublic_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "GetBindingPublic", true), value);
        }

        public static event Delegates.orig_GetBinding_WithArgs orig_GetBinding
        {
            add => HookEndpointManager.Add<Delegates.orig_GetBinding_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_GetBinding", true), value);
            remove => HookEndpointManager.Remove<Delegates.orig_GetBinding_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_GetBinding", true), value);
        }

        public static event Delegates.orig_SetupBindingListenOptions_WithArgs orig_SetupBindingListenOptions
        {
            add => HookEndpointManager.Add<Delegates.orig_SetupBindingListenOptions_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_SetupBindingListenOptions",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.orig_SetupBindingListenOptions_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_SetupBindingListenOptions",
                    true), value);
        }

        public static event Delegates.orig_ShowCurrentBinding_WithArgs orig_ShowCurrentBinding
        {
            add => HookEndpointManager.Add<Delegates.orig_ShowCurrentBinding_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_ShowCurrentBinding", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.orig_ShowCurrentBinding_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_ShowCurrentBinding", true),
                value);
        }

        public static event Delegates.orig_SetupRefs_WithArgs orig_SetupRefs
        {
            add => HookEndpointManager.Add<Delegates.orig_SetupRefs_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_SetupRefs", true), value);
            remove => HookEndpointManager.Remove<Delegates.orig_SetupRefs_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MappableControllerButton), "orig_SetupRefs", true), value);
        }
    }
}