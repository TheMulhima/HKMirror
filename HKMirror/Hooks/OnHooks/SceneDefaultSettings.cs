using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TeamCherry;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for SceneDefaultSettings class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSceneDefaultSettings
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneDefaultSettings), "OnEnable"), OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(Action<SceneDefaultSettings> orig, SceneDefaultSettings self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookGetMapZoneSettings()
        {
            if (!HookedList.Contains("GetMapZoneSettings"))
            {
                HookedList.Add("GetMapZoneSettings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneDefaultSettings), "GetMapZoneSettings"),
                    GetMapZoneSettings);
            }
        }

        internal static event Delegates.GetMapZoneSettings_BeforeArgs _beforeGetMapZoneSettings;
        internal static event Delegates.GetMapZoneSettings_NormalArgs _afterGetMapZoneSettings;

        private static SceneManagerSettings GetMapZoneSettings(
            Func<SceneDefaultSettings, MapZone, SceneManagerSettings> orig, SceneDefaultSettings self, MapZone mapZone)
        {
            Delegates.Params_GetMapZoneSettings @params = new()
            {
                self = self, mapZone = mapZone
            };
            _beforeGetMapZoneSettings?.Invoke(@params);
            self = @params.self;
            mapZone = @params.mapZone;
            var retVal = orig(self, mapZone);
            if (_afterGetMapZoneSettings != null) retVal = _afterGetMapZoneSettings.Invoke(@params);
            return retVal;
        }

        internal static void HookGetCurrentMapZoneSettings()
        {
            if (!HookedList.Contains("GetCurrentMapZoneSettings"))
            {
                HookedList.Add("GetCurrentMapZoneSettings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneDefaultSettings), "GetCurrentMapZoneSettings"),
                    GetCurrentMapZoneSettings);
            }
        }

        internal static event Delegates.GetCurrentMapZoneSettings_BeforeArgs _beforeGetCurrentMapZoneSettings;
        internal static event Delegates.GetCurrentMapZoneSettings_NormalArgs _afterGetCurrentMapZoneSettings;

        private static SceneManagerSettings GetCurrentMapZoneSettings(
            Func<SceneDefaultSettings, SceneManagerSettings> orig, SceneDefaultSettings self)
        {
            Delegates.Params_GetCurrentMapZoneSettings @params = new()
            {
                self = self
            };
            _beforeGetCurrentMapZoneSettings?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetCurrentMapZoneSettings != null) retVal = _afterGetCurrentMapZoneSettings.Invoke(@params);
            return retVal;
        }

        internal static void HookSaveSettings()
        {
            if (!HookedList.Contains("SaveSettings"))
            {
                HookedList.Add("SaveSettings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneDefaultSettings), "SaveSettings"), SaveSettings);
            }
        }

        internal static event Delegates.SaveSettings_BeforeArgs _beforeSaveSettings;
        internal static event Delegates.SaveSettings_NormalArgs _afterSaveSettings;

        private static void SaveSettings(Action<SceneDefaultSettings, SceneManagerSettings> orig,
            SceneDefaultSettings self, SceneManagerSettings sms)
        {
            Delegates.Params_SaveSettings @params = new()
            {
                self = self, sms = sms
            };
            _beforeSaveSettings?.Invoke(@params);
            self = @params.self;
            sms = @params.sms;
            orig(self, sms);
            if (_afterSaveSettings != null) _afterSaveSettings.Invoke(@params);
        }

        internal static void HookGetCurrentSelection()
        {
            if (!HookedList.Contains("GetCurrentSelection"))
            {
                HookedList.Add("GetCurrentSelection");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneDefaultSettings), "GetCurrentSelection"),
                    GetCurrentSelection);
            }
        }

        internal static event Delegates.GetCurrentSelection_BeforeArgs _beforeGetCurrentSelection;
        internal static event Delegates.GetCurrentSelection_NormalArgs _afterGetCurrentSelection;

        private static MapZone GetCurrentSelection(Func<SceneDefaultSettings, MapZone> orig, SceneDefaultSettings self)
        {
            Delegates.Params_GetCurrentSelection @params = new()
            {
                self = self
            };
            _beforeGetCurrentSelection?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetCurrentSelection != null) retVal = _afterGetCurrentSelection.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void GetCurrentMapZoneSettings_BeforeArgs(Params_GetCurrentMapZoneSettings args);

        public delegate SceneManagerSettings
            GetCurrentMapZoneSettings_NormalArgs(Params_GetCurrentMapZoneSettings args);

        public delegate void GetCurrentSelection_BeforeArgs(Params_GetCurrentSelection args);

        public delegate MapZone GetCurrentSelection_NormalArgs(Params_GetCurrentSelection args);

        public delegate void GetMapZoneSettings_BeforeArgs(Params_GetMapZoneSettings args);

        public delegate SceneManagerSettings GetMapZoneSettings_NormalArgs(Params_GetMapZoneSettings args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void SaveSettings_BeforeArgs(Params_SaveSettings args);

        public delegate void SaveSettings_NormalArgs(Params_SaveSettings args);

        public sealed class Params_OnEnable
        {
            public SceneDefaultSettings self;
        }

        public sealed class Params_GetMapZoneSettings
        {
            public MapZone mapZone;
            public SceneDefaultSettings self;
        }

        public sealed class Params_GetCurrentMapZoneSettings
        {
            public SceneDefaultSettings self;
        }

        public sealed class Params_SaveSettings
        {
            public SceneDefaultSettings self;
            public SceneManagerSettings sms;
        }

        public sealed class Params_GetCurrentSelection
        {
            public SceneDefaultSettings self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.GetMapZoneSettings_BeforeArgs GetMapZoneSettings
        {
            add
            {
                HookHandler._beforeGetMapZoneSettings += value;
                HookHandler.HookGetMapZoneSettings();
            }
            remove => HookHandler._beforeGetMapZoneSettings -= value;
        }

        public static event Delegates.GetCurrentMapZoneSettings_BeforeArgs GetCurrentMapZoneSettings
        {
            add
            {
                HookHandler._beforeGetCurrentMapZoneSettings += value;
                HookHandler.HookGetCurrentMapZoneSettings();
            }
            remove => HookHandler._beforeGetCurrentMapZoneSettings -= value;
        }

        public static event Delegates.SaveSettings_BeforeArgs SaveSettings
        {
            add
            {
                HookHandler._beforeSaveSettings += value;
                HookHandler.HookSaveSettings();
            }
            remove => HookHandler._beforeSaveSettings -= value;
        }

        public static event Delegates.GetCurrentSelection_BeforeArgs GetCurrentSelection
        {
            add
            {
                HookHandler._beforeGetCurrentSelection += value;
                HookHandler.HookGetCurrentSelection();
            }
            remove => HookHandler._beforeGetCurrentSelection -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.GetMapZoneSettings_NormalArgs GetMapZoneSettings
        {
            add
            {
                HookHandler._afterGetMapZoneSettings += value;
                HookHandler.HookGetMapZoneSettings();
            }
            remove => HookHandler._afterGetMapZoneSettings -= value;
        }

        public static event Delegates.GetCurrentMapZoneSettings_NormalArgs GetCurrentMapZoneSettings
        {
            add
            {
                HookHandler._afterGetCurrentMapZoneSettings += value;
                HookHandler.HookGetCurrentMapZoneSettings();
            }
            remove => HookHandler._afterGetCurrentMapZoneSettings -= value;
        }

        public static event Delegates.SaveSettings_NormalArgs SaveSettings
        {
            add
            {
                HookHandler._afterSaveSettings += value;
                HookHandler.HookSaveSettings();
            }
            remove => HookHandler._afterSaveSettings -= value;
        }

        public static event Delegates.GetCurrentSelection_NormalArgs GetCurrentSelection
        {
            add
            {
                HookHandler._afterGetCurrentSelection += value;
                HookHandler.HookGetCurrentSelection();
            }
            remove => HookHandler._afterGetCurrentSelection -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneDefaultSettings), "OnEnable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneDefaultSettings), "OnEnable"), value);
        }

        public static event Delegates.GetMapZoneSettings_NormalArgs GetMapZoneSettings
        {
            add => HookEndpointManager.Add<Delegates.GetMapZoneSettings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneDefaultSettings), "GetMapZoneSettings"), value);
            remove => HookEndpointManager.Remove<Delegates.GetMapZoneSettings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneDefaultSettings), "GetMapZoneSettings"), value);
        }

        public static event Delegates.GetCurrentMapZoneSettings_NormalArgs GetCurrentMapZoneSettings
        {
            add => HookEndpointManager.Add<Delegates.GetCurrentMapZoneSettings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneDefaultSettings), "GetCurrentMapZoneSettings"), value);
            remove => HookEndpointManager.Remove<Delegates.GetCurrentMapZoneSettings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneDefaultSettings), "GetCurrentMapZoneSettings"), value);
        }

        public static event Delegates.SaveSettings_NormalArgs SaveSettings
        {
            add => HookEndpointManager.Add<Delegates.SaveSettings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneDefaultSettings), "SaveSettings"), value);
            remove => HookEndpointManager.Remove<Delegates.SaveSettings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneDefaultSettings), "SaveSettings"), value);
        }

        public static event Delegates.GetCurrentSelection_NormalArgs GetCurrentSelection
        {
            add => HookEndpointManager.Add<Delegates.GetCurrentSelection_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneDefaultSettings), "GetCurrentSelection"), value);
            remove => HookEndpointManager.Remove<Delegates.GetCurrentSelection_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneDefaultSettings), "GetCurrentSelection"), value);
        }
    }
}