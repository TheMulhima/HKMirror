using System.IO;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for Helper class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnHelper
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookGetCollidingLayerMaskForLayer()
        {
            if (!HookedList.Contains("GetCollidingLayerMaskForLayer"))
            {
                HookedList.Add("GetCollidingLayerMaskForLayer");
                On.Helper.GetCollidingLayerMaskForLayer += GetCollidingLayerMaskForLayer;
            }
        }

        internal static event Delegates.GetCollidingLayerMaskForLayer_BeforeArgs _beforeGetCollidingLayerMaskForLayer;
        internal static event Delegates.GetCollidingLayerMaskForLayer_AfterArgs _afterGetCollidingLayerMaskForLayer;

        private static int GetCollidingLayerMaskForLayer(On.Helper.orig_GetCollidingLayerMaskForLayer orig, int layer)
        {
            Delegates.Params_GetCollidingLayerMaskForLayer @params = new()
            {
                layer = layer
            };
            if (_beforeGetCollidingLayerMaskForLayer != null)
                foreach (Delegates.GetCollidingLayerMaskForLayer_BeforeArgs toInvoke in
                         _beforeGetCollidingLayerMaskForLayer.GetInvocationList())
                    try
                    {
                        _beforeGetCollidingLayerMaskForLayer?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            layer = @params.layer;
            var retVal = orig(layer);
            if (_afterGetCollidingLayerMaskForLayer != null)
                foreach (Delegates.GetCollidingLayerMaskForLayer_AfterArgs toInvoke in
                         _afterGetCollidingLayerMaskForLayer.GetInvocationList())
                    try
                    {
                        retVal = _afterGetCollidingLayerMaskForLayer.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetReflectedAngle()
        {
            if (!HookedList.Contains("GetReflectedAngle"))
            {
                HookedList.Add("GetReflectedAngle");
                On.Helper.GetReflectedAngle += GetReflectedAngle;
            }
        }

        internal static event Delegates.GetReflectedAngle_BeforeArgs _beforeGetReflectedAngle;
        internal static event Delegates.GetReflectedAngle_AfterArgs _afterGetReflectedAngle;

        private static float GetReflectedAngle(On.Helper.orig_GetReflectedAngle orig, float angle,
            bool reflectHorizontal, bool reflectVertical)
        {
            Delegates.Params_GetReflectedAngle @params = new()
            {
                angle = angle, reflectHorizontal = reflectHorizontal, reflectVertical = reflectVertical
            };
            if (_beforeGetReflectedAngle != null)
                foreach (Delegates.GetReflectedAngle_BeforeArgs toInvoke in
                         _beforeGetReflectedAngle.GetInvocationList())
                    try
                    {
                        _beforeGetReflectedAngle?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            angle = @params.angle;
            reflectHorizontal = @params.reflectHorizontal;
            reflectVertical = @params.reflectVertical;
            var retVal = orig(angle, reflectHorizontal, reflectVertical);
            if (_afterGetReflectedAngle != null)
                foreach (Delegates.GetReflectedAngle_AfterArgs toInvoke in _afterGetReflectedAngle.GetInvocationList())
                    try
                    {
                        retVal = _afterGetReflectedAngle.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetRandomVector3InRange()
        {
            if (!HookedList.Contains("GetRandomVector3InRange"))
            {
                HookedList.Add("GetRandomVector3InRange");
                On.Helper.GetRandomVector3InRange += GetRandomVector3InRange;
            }
        }

        internal static event Delegates.GetRandomVector3InRange_BeforeArgs _beforeGetRandomVector3InRange;
        internal static event Delegates.GetRandomVector3InRange_AfterArgs _afterGetRandomVector3InRange;

        private static Vector3 GetRandomVector3InRange(On.Helper.orig_GetRandomVector3InRange orig, Vector3 min,
            Vector3 max)
        {
            Delegates.Params_GetRandomVector3InRange @params = new()
            {
                min = min, max = max
            };
            if (_beforeGetRandomVector3InRange != null)
                foreach (Delegates.GetRandomVector3InRange_BeforeArgs toInvoke in _beforeGetRandomVector3InRange
                             .GetInvocationList())
                    try
                    {
                        _beforeGetRandomVector3InRange?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            min = @params.min;
            max = @params.max;
            var retVal = orig(min, max);
            if (_afterGetRandomVector3InRange != null)
                foreach (Delegates.GetRandomVector3InRange_AfterArgs toInvoke in _afterGetRandomVector3InRange
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetRandomVector3InRange.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetRandomVector2InRange()
        {
            if (!HookedList.Contains("GetRandomVector2InRange"))
            {
                HookedList.Add("GetRandomVector2InRange");
                On.Helper.GetRandomVector2InRange += GetRandomVector2InRange;
            }
        }

        internal static event Delegates.GetRandomVector2InRange_BeforeArgs _beforeGetRandomVector2InRange;
        internal static event Delegates.GetRandomVector2InRange_AfterArgs _afterGetRandomVector2InRange;

        private static Vector2 GetRandomVector2InRange(On.Helper.orig_GetRandomVector2InRange orig, Vector2 min,
            Vector2 max)
        {
            Delegates.Params_GetRandomVector2InRange @params = new()
            {
                min = min, max = max
            };
            if (_beforeGetRandomVector2InRange != null)
                foreach (Delegates.GetRandomVector2InRange_BeforeArgs toInvoke in _beforeGetRandomVector2InRange
                             .GetInvocationList())
                    try
                    {
                        _beforeGetRandomVector2InRange?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            min = @params.min;
            max = @params.max;
            var retVal = orig(min, max);
            if (_afterGetRandomVector2InRange != null)
                foreach (Delegates.GetRandomVector2InRange_AfterArgs toInvoke in _afterGetRandomVector2InRange
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetRandomVector2InRange.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookIsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D()
        {
            if (!HookedList.Contains("IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D"))
            {
                HookedList.Add("IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(Helper),
                        "IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D", false),
                    IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D);
            }
        }

        internal static event Delegates.IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D_BeforeArgs
            _beforeIsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D;

        internal static event Delegates.IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D_AfterArgs
            _afterIsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D;

        private static bool IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D(
            Func<Vector2, Vector2, float, int, RaycastHit2D, bool> orig, Vector2 origin, Vector2 direction,
            float length, int layerMask, RaycastHit2D closestHit)
        {
            Delegates.Params_IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D @params = new()
            {
                origin = origin, direction = direction, length = length, layerMask = layerMask, closestHit = closestHit
            };
            if (_beforeIsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D != null)
                foreach (Delegates.IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D_BeforeArgs toInvoke in
                         _beforeIsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D.GetInvocationList())
                    try
                    {
                        _beforeIsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            origin = @params.origin;
            direction = @params.direction;
            length = @params.length;
            layerMask = @params.layerMask;
            closestHit = @params.closestHit;
            var retVal = orig(origin, direction, length, layerMask, closestHit);
            if (_afterIsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D != null)
                foreach (Delegates.IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D_AfterArgs toInvoke in
                         _afterIsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D.GetInvocationList())
                    try
                    {
                        retVal = _afterIsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D.Invoke(@params,
                            retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookIsRayHittingNoTriggers_Vector2_Vector2_float_int()
        {
            if (!HookedList.Contains("IsRayHittingNoTriggers_Vector2_Vector2_float_int"))
            {
                HookedList.Add("IsRayHittingNoTriggers_Vector2_Vector2_float_int");
                On.Helper.IsRayHittingNoTriggers_Vector2_Vector2_float_int +=
                    IsRayHittingNoTriggers_Vector2_Vector2_float_int;
            }
        }

        internal static event Delegates.IsRayHittingNoTriggers_Vector2_Vector2_float_int_BeforeArgs
            _beforeIsRayHittingNoTriggers_Vector2_Vector2_float_int;

        internal static event Delegates.IsRayHittingNoTriggers_Vector2_Vector2_float_int_AfterArgs
            _afterIsRayHittingNoTriggers_Vector2_Vector2_float_int;

        private static bool IsRayHittingNoTriggers_Vector2_Vector2_float_int(
            On.Helper.orig_IsRayHittingNoTriggers_Vector2_Vector2_float_int orig, Vector2 origin, Vector2 direction,
            float length, int layerMask)
        {
            Delegates.Params_IsRayHittingNoTriggers_Vector2_Vector2_float_int @params = new()
            {
                origin = origin, direction = direction, length = length, layerMask = layerMask
            };
            if (_beforeIsRayHittingNoTriggers_Vector2_Vector2_float_int != null)
                foreach (Delegates.IsRayHittingNoTriggers_Vector2_Vector2_float_int_BeforeArgs toInvoke in
                         _beforeIsRayHittingNoTriggers_Vector2_Vector2_float_int.GetInvocationList())
                    try
                    {
                        _beforeIsRayHittingNoTriggers_Vector2_Vector2_float_int?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            origin = @params.origin;
            direction = @params.direction;
            length = @params.length;
            layerMask = @params.layerMask;
            var retVal = orig(origin, direction, length, layerMask);
            if (_afterIsRayHittingNoTriggers_Vector2_Vector2_float_int != null)
                foreach (Delegates.IsRayHittingNoTriggers_Vector2_Vector2_float_int_AfterArgs toInvoke in
                         _afterIsRayHittingNoTriggers_Vector2_Vector2_float_int.GetInvocationList())
                    try
                    {
                        retVal = _afterIsRayHittingNoTriggers_Vector2_Vector2_float_int.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCombinePaths()
        {
            if (!HookedList.Contains("CombinePaths"))
            {
                HookedList.Add("CombinePaths");
                On.Helper.CombinePaths += CombinePaths;
            }
        }

        internal static event Delegates.CombinePaths_BeforeArgs _beforeCombinePaths;
        internal static event Delegates.CombinePaths_AfterArgs _afterCombinePaths;

        private static string CombinePaths(On.Helper.orig_CombinePaths orig, string path1, string[] paths)
        {
            Delegates.Params_CombinePaths @params = new()
            {
                path1 = path1, paths = paths
            };
            if (_beforeCombinePaths != null)
                foreach (Delegates.CombinePaths_BeforeArgs toInvoke in _beforeCombinePaths.GetInvocationList())
                    try
                    {
                        _beforeCombinePaths?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            path1 = @params.path1;
            paths = @params.paths;
            var retVal = orig(path1, paths);
            if (_afterCombinePaths != null)
                foreach (Delegates.CombinePaths_AfterArgs toInvoke in _afterCombinePaths.GetInvocationList())
                    try
                    {
                        retVal = _afterCombinePaths.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookFileOrFolderExists()
        {
            if (!HookedList.Contains("FileOrFolderExists"))
            {
                HookedList.Add("FileOrFolderExists");
                On.Helper.FileOrFolderExists += FileOrFolderExists;
            }
        }

        internal static event Delegates.FileOrFolderExists_BeforeArgs _beforeFileOrFolderExists;
        internal static event Delegates.FileOrFolderExists_AfterArgs _afterFileOrFolderExists;

        private static bool FileOrFolderExists(On.Helper.orig_FileOrFolderExists orig, string path)
        {
            Delegates.Params_FileOrFolderExists @params = new()
            {
                path = path
            };
            if (_beforeFileOrFolderExists != null)
                foreach (Delegates.FileOrFolderExists_BeforeArgs toInvoke in
                         _beforeFileOrFolderExists.GetInvocationList())
                    try
                    {
                        _beforeFileOrFolderExists?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            path = @params.path;
            var retVal = orig(path);
            if (_afterFileOrFolderExists != null)
                foreach (Delegates.FileOrFolderExists_AfterArgs toInvoke in
                         _afterFileOrFolderExists.GetInvocationList())
                    try
                    {
                        retVal = _afterFileOrFolderExists.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookDeleteFileOrFolder()
        {
            if (!HookedList.Contains("DeleteFileOrFolder"))
            {
                HookedList.Add("DeleteFileOrFolder");
                On.Helper.DeleteFileOrFolder += DeleteFileOrFolder;
            }
        }

        internal static event Delegates.DeleteFileOrFolder_BeforeArgs _beforeDeleteFileOrFolder;
        internal static event Delegates.DeleteFileOrFolder_AfterArgs _afterDeleteFileOrFolder;

        private static void DeleteFileOrFolder(On.Helper.orig_DeleteFileOrFolder orig, string path)
        {
            Delegates.Params_DeleteFileOrFolder @params = new()
            {
                path = path
            };
            if (_beforeDeleteFileOrFolder != null)
                foreach (Delegates.DeleteFileOrFolder_BeforeArgs toInvoke in
                         _beforeDeleteFileOrFolder.GetInvocationList())
                    try
                    {
                        _beforeDeleteFileOrFolder?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            path = @params.path;
            orig(path);
            if (_afterDeleteFileOrFolder != null)
                foreach (Delegates.DeleteFileOrFolder_AfterArgs toInvoke in
                         _afterDeleteFileOrFolder.GetInvocationList())
                    try
                    {
                        _afterDeleteFileOrFolder.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCopyFileOrFolder()
        {
            if (!HookedList.Contains("CopyFileOrFolder"))
            {
                HookedList.Add("CopyFileOrFolder");
                On.Helper.CopyFileOrFolder += CopyFileOrFolder;
            }
        }

        internal static event Delegates.CopyFileOrFolder_BeforeArgs _beforeCopyFileOrFolder;
        internal static event Delegates.CopyFileOrFolder_AfterArgs _afterCopyFileOrFolder;

        private static void CopyFileOrFolder(On.Helper.orig_CopyFileOrFolder orig, string src, string dest)
        {
            Delegates.Params_CopyFileOrFolder @params = new()
            {
                src = src, dest = dest
            };
            if (_beforeCopyFileOrFolder != null)
                foreach (Delegates.CopyFileOrFolder_BeforeArgs toInvoke in _beforeCopyFileOrFolder.GetInvocationList())
                    try
                    {
                        _beforeCopyFileOrFolder?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            src = @params.src;
            dest = @params.dest;
            orig(src, dest);
            if (_afterCopyFileOrFolder != null)
                foreach (Delegates.CopyFileOrFolder_AfterArgs toInvoke in _afterCopyFileOrFolder.GetInvocationList())
                    try
                    {
                        _afterCopyFileOrFolder.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDeepCopy()
        {
            if (!HookedList.Contains("DeepCopy"))
            {
                HookedList.Add("DeepCopy");
                On.Helper.DeepCopy += DeepCopy;
            }
        }

        internal static event Delegates.DeepCopy_BeforeArgs _beforeDeepCopy;
        internal static event Delegates.DeepCopy_AfterArgs _afterDeepCopy;

        private static void DeepCopy(On.Helper.orig_DeepCopy orig, DirectoryInfo source, DirectoryInfo target)
        {
            Delegates.Params_DeepCopy @params = new()
            {
                source = source, target = target
            };
            if (_beforeDeepCopy != null)
                foreach (Delegates.DeepCopy_BeforeArgs toInvoke in _beforeDeepCopy.GetInvocationList())
                    try
                    {
                        _beforeDeepCopy?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            source = @params.source;
            target = @params.target;
            orig(source, target);
            if (_afterDeepCopy != null)
                foreach (Delegates.DeepCopy_AfterArgs toInvoke in _afterDeepCopy.GetInvocationList())
                    try
                    {
                        _afterDeepCopy.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookMoveFileOrFolder()
        {
            if (!HookedList.Contains("MoveFileOrFolder"))
            {
                HookedList.Add("MoveFileOrFolder");
                On.Helper.MoveFileOrFolder += MoveFileOrFolder;
            }
        }

        internal static event Delegates.MoveFileOrFolder_BeforeArgs _beforeMoveFileOrFolder;
        internal static event Delegates.MoveFileOrFolder_AfterArgs _afterMoveFileOrFolder;

        private static void MoveFileOrFolder(On.Helper.orig_MoveFileOrFolder orig, string src, string dest)
        {
            Delegates.Params_MoveFileOrFolder @params = new()
            {
                src = src, dest = dest
            };
            if (_beforeMoveFileOrFolder != null)
                foreach (Delegates.MoveFileOrFolder_BeforeArgs toInvoke in _beforeMoveFileOrFolder.GetInvocationList())
                    try
                    {
                        _beforeMoveFileOrFolder?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            src = @params.src;
            dest = @params.dest;
            orig(src, dest);
            if (_afterMoveFileOrFolder != null)
                foreach (Delegates.MoveFileOrFolder_AfterArgs toInvoke in _afterMoveFileOrFolder.GetInvocationList())
                    try
                    {
                        _afterMoveFileOrFolder.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckMatchingSearchFilter()
        {
            if (!HookedList.Contains("CheckMatchingSearchFilter"))
            {
                HookedList.Add("CheckMatchingSearchFilter");
                On.Helper.CheckMatchingSearchFilter += CheckMatchingSearchFilter;
            }
        }

        internal static event Delegates.CheckMatchingSearchFilter_BeforeArgs _beforeCheckMatchingSearchFilter;
        internal static event Delegates.CheckMatchingSearchFilter_AfterArgs _afterCheckMatchingSearchFilter;

        private static bool CheckMatchingSearchFilter(On.Helper.orig_CheckMatchingSearchFilter orig, string text,
            string filter)
        {
            Delegates.Params_CheckMatchingSearchFilter @params = new()
            {
                text = text, filter = filter
            };
            if (_beforeCheckMatchingSearchFilter != null)
                foreach (Delegates.CheckMatchingSearchFilter_BeforeArgs toInvoke in _beforeCheckMatchingSearchFilter
                             .GetInvocationList())
                    try
                    {
                        _beforeCheckMatchingSearchFilter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            text = @params.text;
            filter = @params.filter;
            var retVal = orig(text, filter);
            if (_afterCheckMatchingSearchFilter != null)
                foreach (Delegates.CheckMatchingSearchFilter_AfterArgs toInvoke in _afterCheckMatchingSearchFilter
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterCheckMatchingSearchFilter.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookParseSearchString()
        {
            if (!HookedList.Contains("ParseSearchString"))
            {
                HookedList.Add("ParseSearchString");
                On.Helper.ParseSearchString += ParseSearchString;
            }
        }

        internal static event Delegates.ParseSearchString_BeforeArgs _beforeParseSearchString;
        internal static event Delegates.ParseSearchString_AfterArgs _afterParseSearchString;

        private static string ParseSearchString(On.Helper.orig_ParseSearchString orig, string original)
        {
            Delegates.Params_ParseSearchString @params = new()
            {
                original = original
            };
            if (_beforeParseSearchString != null)
                foreach (Delegates.ParseSearchString_BeforeArgs toInvoke in
                         _beforeParseSearchString.GetInvocationList())
                    try
                    {
                        _beforeParseSearchString?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            original = @params.original;
            var retVal = orig(original);
            if (_afterParseSearchString != null)
                foreach (Delegates.ParseSearchString_AfterArgs toInvoke in _afterParseSearchString.GetInvocationList())
                    try
                    {
                        retVal = _afterParseSearchString.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate bool CheckMatchingSearchFilter_AfterArgs(Params_CheckMatchingSearchFilter args, bool ret);

        public delegate void CheckMatchingSearchFilter_BeforeArgs(Params_CheckMatchingSearchFilter args);

        public delegate bool CheckMatchingSearchFilter_WithArgs(Func<string, string, bool> orig, string text,
            string filter);

        public delegate string CombinePaths_AfterArgs(Params_CombinePaths args, string ret);

        public delegate void CombinePaths_BeforeArgs(Params_CombinePaths args);

        public delegate string CombinePaths_WithArgs(Func<string, string[], string> orig, string path1, string[] paths);

        public delegate void CopyFileOrFolder_AfterArgs(Params_CopyFileOrFolder args);

        public delegate void CopyFileOrFolder_BeforeArgs(Params_CopyFileOrFolder args);

        public delegate void CopyFileOrFolder_WithArgs(Action<string, string> orig, string src, string dest);

        public delegate void DeepCopy_AfterArgs(Params_DeepCopy args);

        public delegate void DeepCopy_BeforeArgs(Params_DeepCopy args);

        public delegate void DeepCopy_WithArgs(Action<DirectoryInfo, DirectoryInfo> orig, DirectoryInfo source,
            DirectoryInfo target);

        public delegate void DeleteFileOrFolder_AfterArgs(Params_DeleteFileOrFolder args);

        public delegate void DeleteFileOrFolder_BeforeArgs(Params_DeleteFileOrFolder args);

        public delegate void DeleteFileOrFolder_WithArgs(Action<string> orig, string path);

        public delegate bool FileOrFolderExists_AfterArgs(Params_FileOrFolderExists args, bool ret);

        public delegate void FileOrFolderExists_BeforeArgs(Params_FileOrFolderExists args);

        public delegate bool FileOrFolderExists_WithArgs(Func<string, bool> orig, string path);

        public delegate int GetCollidingLayerMaskForLayer_AfterArgs(Params_GetCollidingLayerMaskForLayer args, int ret);

        public delegate void GetCollidingLayerMaskForLayer_BeforeArgs(Params_GetCollidingLayerMaskForLayer args);

        public delegate int GetCollidingLayerMaskForLayer_WithArgs(Func<int, int> orig, int layer);

        public delegate Vector2 GetRandomVector2InRange_AfterArgs(Params_GetRandomVector2InRange args, Vector2 ret);

        public delegate void GetRandomVector2InRange_BeforeArgs(Params_GetRandomVector2InRange args);

        public delegate Vector2 GetRandomVector2InRange_WithArgs(Func<Vector2, Vector2, Vector2> orig, Vector2 min,
            Vector2 max);

        public delegate Vector3 GetRandomVector3InRange_AfterArgs(Params_GetRandomVector3InRange args, Vector3 ret);

        public delegate void GetRandomVector3InRange_BeforeArgs(Params_GetRandomVector3InRange args);

        public delegate Vector3 GetRandomVector3InRange_WithArgs(Func<Vector3, Vector3, Vector3> orig, Vector3 min,
            Vector3 max);

        public delegate float GetReflectedAngle_AfterArgs(Params_GetReflectedAngle args, float ret);

        public delegate void GetReflectedAngle_BeforeArgs(Params_GetReflectedAngle args);

        public delegate float GetReflectedAngle_WithArgs(Func<float, bool, bool, float> orig, float angle,
            bool reflectHorizontal, bool reflectVertical);

        public delegate bool IsRayHittingNoTriggers_Vector2_Vector2_float_int_AfterArgs(
            Params_IsRayHittingNoTriggers_Vector2_Vector2_float_int args, bool ret);

        public delegate void IsRayHittingNoTriggers_Vector2_Vector2_float_int_BeforeArgs(
            Params_IsRayHittingNoTriggers_Vector2_Vector2_float_int args);

        public delegate bool IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D_AfterArgs(
            Params_IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D args, bool ret);

        public delegate void IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D_BeforeArgs(
            Params_IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D args);

        public delegate bool IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D_WithArgs(
            Func<Vector2, Vector2, float, int, RaycastHit2D, bool> orig, Vector2 origin, Vector2 direction,
            float length, int layerMask, RaycastHit2D closestHit);

        public delegate bool IsRayHittingNoTriggers_Vector2_Vector2_float_int_WithArgs(
            Func<Vector2, Vector2, float, int, bool> orig, Vector2 origin, Vector2 direction, float length,
            int layerMask);

        public delegate void MoveFileOrFolder_AfterArgs(Params_MoveFileOrFolder args);

        public delegate void MoveFileOrFolder_BeforeArgs(Params_MoveFileOrFolder args);

        public delegate void MoveFileOrFolder_WithArgs(Action<string, string> orig, string src, string dest);

        public delegate string ParseSearchString_AfterArgs(Params_ParseSearchString args, string ret);

        public delegate void ParseSearchString_BeforeArgs(Params_ParseSearchString args);

        public delegate string ParseSearchString_WithArgs(Func<string, string> orig, string original);

        public sealed class Params_GetCollidingLayerMaskForLayer
        {
            public int layer;
        }

        public sealed class Params_GetReflectedAngle
        {
            public float angle;
            public bool reflectHorizontal;
            public bool reflectVertical;
        }

        public sealed class Params_GetRandomVector3InRange
        {
            public Vector3 max;
            public Vector3 min;
        }

        public sealed class Params_GetRandomVector2InRange
        {
            public Vector2 max;
            public Vector2 min;
        }

        public sealed class Params_IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D
        {
            public RaycastHit2D closestHit;
            public Vector2 direction;
            public int layerMask;
            public float length;
            public Vector2 origin;
        }

        public sealed class Params_IsRayHittingNoTriggers_Vector2_Vector2_float_int
        {
            public Vector2 direction;
            public int layerMask;
            public float length;
            public Vector2 origin;
        }

        public sealed class Params_CombinePaths
        {
            public string path1;
            public string[] paths;
        }

        public sealed class Params_FileOrFolderExists
        {
            public string path;
        }

        public sealed class Params_DeleteFileOrFolder
        {
            public string path;
        }

        public sealed class Params_CopyFileOrFolder
        {
            public string dest;
            public string src;
        }

        public sealed class Params_DeepCopy
        {
            public DirectoryInfo source;
            public DirectoryInfo target;
        }

        public sealed class Params_MoveFileOrFolder
        {
            public string dest;
            public string src;
        }

        public sealed class Params_CheckMatchingSearchFilter
        {
            public string filter;
            public string text;
        }

        public sealed class Params_ParseSearchString
        {
            public string original;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.GetCollidingLayerMaskForLayer_BeforeArgs GetCollidingLayerMaskForLayer
        {
            add
            {
                HookHandler._beforeGetCollidingLayerMaskForLayer += value;
                HookHandler.HookGetCollidingLayerMaskForLayer();
            }
            remove => HookHandler._beforeGetCollidingLayerMaskForLayer -= value;
        }

        public static event Delegates.GetReflectedAngle_BeforeArgs GetReflectedAngle
        {
            add
            {
                HookHandler._beforeGetReflectedAngle += value;
                HookHandler.HookGetReflectedAngle();
            }
            remove => HookHandler._beforeGetReflectedAngle -= value;
        }

        public static event Delegates.GetRandomVector3InRange_BeforeArgs GetRandomVector3InRange
        {
            add
            {
                HookHandler._beforeGetRandomVector3InRange += value;
                HookHandler.HookGetRandomVector3InRange();
            }
            remove => HookHandler._beforeGetRandomVector3InRange -= value;
        }

        public static event Delegates.GetRandomVector2InRange_BeforeArgs GetRandomVector2InRange
        {
            add
            {
                HookHandler._beforeGetRandomVector2InRange += value;
                HookHandler.HookGetRandomVector2InRange();
            }
            remove => HookHandler._beforeGetRandomVector2InRange -= value;
        }

        public static event Delegates.IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D_BeforeArgs
            IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D
            {
                add
                {
                    HookHandler._beforeIsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D += value;
                    HookHandler.HookIsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D();
                }
                remove => HookHandler._beforeIsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D -= value;
            }

        public static event Delegates.IsRayHittingNoTriggers_Vector2_Vector2_float_int_BeforeArgs
            IsRayHittingNoTriggers_Vector2_Vector2_float_int
            {
                add
                {
                    HookHandler._beforeIsRayHittingNoTriggers_Vector2_Vector2_float_int += value;
                    HookHandler.HookIsRayHittingNoTriggers_Vector2_Vector2_float_int();
                }
                remove => HookHandler._beforeIsRayHittingNoTriggers_Vector2_Vector2_float_int -= value;
            }

        public static event Delegates.CombinePaths_BeforeArgs CombinePaths
        {
            add
            {
                HookHandler._beforeCombinePaths += value;
                HookHandler.HookCombinePaths();
            }
            remove => HookHandler._beforeCombinePaths -= value;
        }

        public static event Delegates.FileOrFolderExists_BeforeArgs FileOrFolderExists
        {
            add
            {
                HookHandler._beforeFileOrFolderExists += value;
                HookHandler.HookFileOrFolderExists();
            }
            remove => HookHandler._beforeFileOrFolderExists -= value;
        }

        public static event Delegates.DeleteFileOrFolder_BeforeArgs DeleteFileOrFolder
        {
            add
            {
                HookHandler._beforeDeleteFileOrFolder += value;
                HookHandler.HookDeleteFileOrFolder();
            }
            remove => HookHandler._beforeDeleteFileOrFolder -= value;
        }

        public static event Delegates.CopyFileOrFolder_BeforeArgs CopyFileOrFolder
        {
            add
            {
                HookHandler._beforeCopyFileOrFolder += value;
                HookHandler.HookCopyFileOrFolder();
            }
            remove => HookHandler._beforeCopyFileOrFolder -= value;
        }

        public static event Delegates.DeepCopy_BeforeArgs DeepCopy
        {
            add
            {
                HookHandler._beforeDeepCopy += value;
                HookHandler.HookDeepCopy();
            }
            remove => HookHandler._beforeDeepCopy -= value;
        }

        public static event Delegates.MoveFileOrFolder_BeforeArgs MoveFileOrFolder
        {
            add
            {
                HookHandler._beforeMoveFileOrFolder += value;
                HookHandler.HookMoveFileOrFolder();
            }
            remove => HookHandler._beforeMoveFileOrFolder -= value;
        }

        public static event Delegates.CheckMatchingSearchFilter_BeforeArgs CheckMatchingSearchFilter
        {
            add
            {
                HookHandler._beforeCheckMatchingSearchFilter += value;
                HookHandler.HookCheckMatchingSearchFilter();
            }
            remove => HookHandler._beforeCheckMatchingSearchFilter -= value;
        }

        public static event Delegates.ParseSearchString_BeforeArgs ParseSearchString
        {
            add
            {
                HookHandler._beforeParseSearchString += value;
                HookHandler.HookParseSearchString();
            }
            remove => HookHandler._beforeParseSearchString -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.GetCollidingLayerMaskForLayer_AfterArgs GetCollidingLayerMaskForLayer
        {
            add
            {
                HookHandler._afterGetCollidingLayerMaskForLayer += value;
                HookHandler.HookGetCollidingLayerMaskForLayer();
            }
            remove => HookHandler._afterGetCollidingLayerMaskForLayer -= value;
        }

        public static event Delegates.GetReflectedAngle_AfterArgs GetReflectedAngle
        {
            add
            {
                HookHandler._afterGetReflectedAngle += value;
                HookHandler.HookGetReflectedAngle();
            }
            remove => HookHandler._afterGetReflectedAngle -= value;
        }

        public static event Delegates.GetRandomVector3InRange_AfterArgs GetRandomVector3InRange
        {
            add
            {
                HookHandler._afterGetRandomVector3InRange += value;
                HookHandler.HookGetRandomVector3InRange();
            }
            remove => HookHandler._afterGetRandomVector3InRange -= value;
        }

        public static event Delegates.GetRandomVector2InRange_AfterArgs GetRandomVector2InRange
        {
            add
            {
                HookHandler._afterGetRandomVector2InRange += value;
                HookHandler.HookGetRandomVector2InRange();
            }
            remove => HookHandler._afterGetRandomVector2InRange -= value;
        }

        public static event Delegates.IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D_AfterArgs
            IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D
            {
                add
                {
                    HookHandler._afterIsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D += value;
                    HookHandler.HookIsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D();
                }
                remove => HookHandler._afterIsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D -= value;
            }

        public static event Delegates.IsRayHittingNoTriggers_Vector2_Vector2_float_int_AfterArgs
            IsRayHittingNoTriggers_Vector2_Vector2_float_int
            {
                add
                {
                    HookHandler._afterIsRayHittingNoTriggers_Vector2_Vector2_float_int += value;
                    HookHandler.HookIsRayHittingNoTriggers_Vector2_Vector2_float_int();
                }
                remove => HookHandler._afterIsRayHittingNoTriggers_Vector2_Vector2_float_int -= value;
            }

        public static event Delegates.CombinePaths_AfterArgs CombinePaths
        {
            add
            {
                HookHandler._afterCombinePaths += value;
                HookHandler.HookCombinePaths();
            }
            remove => HookHandler._afterCombinePaths -= value;
        }

        public static event Delegates.FileOrFolderExists_AfterArgs FileOrFolderExists
        {
            add
            {
                HookHandler._afterFileOrFolderExists += value;
                HookHandler.HookFileOrFolderExists();
            }
            remove => HookHandler._afterFileOrFolderExists -= value;
        }

        public static event Delegates.DeleteFileOrFolder_AfterArgs DeleteFileOrFolder
        {
            add
            {
                HookHandler._afterDeleteFileOrFolder += value;
                HookHandler.HookDeleteFileOrFolder();
            }
            remove => HookHandler._afterDeleteFileOrFolder -= value;
        }

        public static event Delegates.CopyFileOrFolder_AfterArgs CopyFileOrFolder
        {
            add
            {
                HookHandler._afterCopyFileOrFolder += value;
                HookHandler.HookCopyFileOrFolder();
            }
            remove => HookHandler._afterCopyFileOrFolder -= value;
        }

        public static event Delegates.DeepCopy_AfterArgs DeepCopy
        {
            add
            {
                HookHandler._afterDeepCopy += value;
                HookHandler.HookDeepCopy();
            }
            remove => HookHandler._afterDeepCopy -= value;
        }

        public static event Delegates.MoveFileOrFolder_AfterArgs MoveFileOrFolder
        {
            add
            {
                HookHandler._afterMoveFileOrFolder += value;
                HookHandler.HookMoveFileOrFolder();
            }
            remove => HookHandler._afterMoveFileOrFolder -= value;
        }

        public static event Delegates.CheckMatchingSearchFilter_AfterArgs CheckMatchingSearchFilter
        {
            add
            {
                HookHandler._afterCheckMatchingSearchFilter += value;
                HookHandler.HookCheckMatchingSearchFilter();
            }
            remove => HookHandler._afterCheckMatchingSearchFilter -= value;
        }

        public static event Delegates.ParseSearchString_AfterArgs ParseSearchString
        {
            add
            {
                HookHandler._afterParseSearchString += value;
                HookHandler.HookParseSearchString();
            }
            remove => HookHandler._afterParseSearchString -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.Helper.hook_GetCollidingLayerMaskForLayer GetCollidingLayerMaskForLayer
        {
            add => On.Helper.GetCollidingLayerMaskForLayer += value;
            remove => On.Helper.GetCollidingLayerMaskForLayer -= value;
        }

        public static event On.Helper.hook_GetReflectedAngle GetReflectedAngle
        {
            add => On.Helper.GetReflectedAngle += value;
            remove => On.Helper.GetReflectedAngle -= value;
        }

        public static event On.Helper.hook_GetRandomVector3InRange GetRandomVector3InRange
        {
            add => On.Helper.GetRandomVector3InRange += value;
            remove => On.Helper.GetRandomVector3InRange -= value;
        }

        public static event On.Helper.hook_GetRandomVector2InRange GetRandomVector2InRange
        {
            add => On.Helper.GetRandomVector2InRange += value;
            remove => On.Helper.GetRandomVector2InRange -= value;
        }

        public static event Delegates.IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D_WithArgs
            IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D
            {
                add => HookEndpointManager
                    .Add<Delegates.IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(Helper), "IsRayHittingNoTriggers", false), value);
                remove =>
                    HookEndpointManager
                        .Remove<Delegates.IsRayHittingNoTriggers_Vector2_Vector2_float_int_RaycastHit2D_WithArgs>(
                            ReflectionHelper.GetMethodInfo(typeof(Helper), "IsRayHittingNoTriggers", false), value);
            }

        public static event On.Helper.hook_IsRayHittingNoTriggers_Vector2_Vector2_float_int
            IsRayHittingNoTriggers_Vector2_Vector2_float_int
            {
                add => On.Helper.IsRayHittingNoTriggers_Vector2_Vector2_float_int += value;
                remove => On.Helper.IsRayHittingNoTriggers_Vector2_Vector2_float_int -= value;
            }

        public static event On.Helper.hook_CombinePaths CombinePaths
        {
            add => On.Helper.CombinePaths += value;
            remove => On.Helper.CombinePaths -= value;
        }

        public static event On.Helper.hook_FileOrFolderExists FileOrFolderExists
        {
            add => On.Helper.FileOrFolderExists += value;
            remove => On.Helper.FileOrFolderExists -= value;
        }

        public static event On.Helper.hook_DeleteFileOrFolder DeleteFileOrFolder
        {
            add => On.Helper.DeleteFileOrFolder += value;
            remove => On.Helper.DeleteFileOrFolder -= value;
        }

        public static event On.Helper.hook_CopyFileOrFolder CopyFileOrFolder
        {
            add => On.Helper.CopyFileOrFolder += value;
            remove => On.Helper.CopyFileOrFolder -= value;
        }

        public static event On.Helper.hook_DeepCopy DeepCopy
        {
            add => On.Helper.DeepCopy += value;
            remove => On.Helper.DeepCopy -= value;
        }

        public static event On.Helper.hook_MoveFileOrFolder MoveFileOrFolder
        {
            add => On.Helper.MoveFileOrFolder += value;
            remove => On.Helper.MoveFileOrFolder -= value;
        }

        public static event On.Helper.hook_CheckMatchingSearchFilter CheckMatchingSearchFilter
        {
            add => On.Helper.CheckMatchingSearchFilter += value;
            remove => On.Helper.CheckMatchingSearchFilter -= value;
        }

        public static event On.Helper.hook_ParseSearchString ParseSearchString
        {
            add => On.Helper.ParseSearchString += value;
            remove => On.Helper.ParseSearchString -= value;
        }
    }
}