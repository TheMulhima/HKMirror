using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;
using UnityEngine.UI;
using Bounds = UnityEngine.Bounds;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TextMeshPro class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTextMeshPro
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "Awake"), Awake);
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "OnEnable"), OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "OnDisable"), OnDisable);
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "OnDestroy"), OnDestroy);
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_NormalArgs _afterOnDestroy;

        private static void OnDestroy(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            _beforeOnDestroy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null) _afterOnDestroy.Invoke(@params);
        }

        internal static void HookLoadFontAsset()
        {
            if (!HookedList.Contains("LoadFontAsset"))
            {
                HookedList.Add("LoadFontAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "LoadFontAsset"), LoadFontAsset);
            }
        }

        internal static event Delegates.LoadFontAsset_BeforeArgs _beforeLoadFontAsset;
        internal static event Delegates.LoadFontAsset_NormalArgs _afterLoadFontAsset;

        private static void LoadFontAsset(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_LoadFontAsset @params = new()
            {
                self = self
            };
            _beforeLoadFontAsset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLoadFontAsset != null) _afterLoadFontAsset.Invoke(@params);
        }

        internal static void HookUpdateEnvMapMatrix()
        {
            if (!HookedList.Contains("UpdateEnvMapMatrix"))
            {
                HookedList.Add("UpdateEnvMapMatrix");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateEnvMapMatrix"), UpdateEnvMapMatrix);
            }
        }

        internal static event Delegates.UpdateEnvMapMatrix_BeforeArgs _beforeUpdateEnvMapMatrix;
        internal static event Delegates.UpdateEnvMapMatrix_NormalArgs _afterUpdateEnvMapMatrix;

        private static void UpdateEnvMapMatrix(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_UpdateEnvMapMatrix @params = new()
            {
                self = self
            };
            _beforeUpdateEnvMapMatrix?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateEnvMapMatrix != null) _afterUpdateEnvMapMatrix.Invoke(@params);
        }

        internal static void HookSetMask_MaskingTypes()
        {
            if (!HookedList.Contains("SetMask_MaskingTypes"))
            {
                HookedList.Add("SetMask_MaskingTypes");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetMask_MaskingTypes"),
                    SetMask_MaskingTypes);
            }
        }

        internal static event Delegates.SetMask_MaskingTypes_BeforeArgs _beforeSetMask_MaskingTypes;
        internal static event Delegates.SetMask_MaskingTypes_NormalArgs _afterSetMask_MaskingTypes;

        private static void SetMask_MaskingTypes(Action<TextMeshPro, MaskingTypes> orig, TextMeshPro self,
            MaskingTypes maskType)
        {
            Delegates.Params_SetMask_MaskingTypes @params = new()
            {
                self = self, maskType = maskType
            };
            _beforeSetMask_MaskingTypes?.Invoke(@params);
            self = @params.self;
            maskType = @params.maskType;
            orig(self, maskType);
            if (_afterSetMask_MaskingTypes != null) _afterSetMask_MaskingTypes.Invoke(@params);
        }

        internal static void HookSetMaskCoordinates_Vector4()
        {
            if (!HookedList.Contains("SetMaskCoordinates_Vector4"))
            {
                HookedList.Add("SetMaskCoordinates_Vector4");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetMaskCoordinates_Vector4"),
                    SetMaskCoordinates_Vector4);
            }
        }

        internal static event Delegates.SetMaskCoordinates_Vector4_BeforeArgs _beforeSetMaskCoordinates_Vector4;
        internal static event Delegates.SetMaskCoordinates_Vector4_NormalArgs _afterSetMaskCoordinates_Vector4;

        private static void SetMaskCoordinates_Vector4(Action<TextMeshPro, Vector4> orig, TextMeshPro self,
            Vector4 coords)
        {
            Delegates.Params_SetMaskCoordinates_Vector4 @params = new()
            {
                self = self, coords = coords
            };
            _beforeSetMaskCoordinates_Vector4?.Invoke(@params);
            self = @params.self;
            coords = @params.coords;
            orig(self, coords);
            if (_afterSetMaskCoordinates_Vector4 != null) _afterSetMaskCoordinates_Vector4.Invoke(@params);
        }

        internal static void HookSetMaskCoordinates_Vector4_float_float()
        {
            if (!HookedList.Contains("SetMaskCoordinates_Vector4_float_float"))
            {
                HookedList.Add("SetMaskCoordinates_Vector4_float_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetMaskCoordinates_Vector4_float_float"),
                    SetMaskCoordinates_Vector4_float_float);
            }
        }

        internal static event Delegates.SetMaskCoordinates_Vector4_float_float_BeforeArgs
            _beforeSetMaskCoordinates_Vector4_float_float;

        internal static event Delegates.SetMaskCoordinates_Vector4_float_float_NormalArgs
            _afterSetMaskCoordinates_Vector4_float_float;

        private static void SetMaskCoordinates_Vector4_float_float(Action<TextMeshPro, Vector4, float, float> orig,
            TextMeshPro self, Vector4 coords, float softX, float softY)
        {
            Delegates.Params_SetMaskCoordinates_Vector4_float_float @params = new()
            {
                self = self, coords = coords, softX = softX, softY = softY
            };
            _beforeSetMaskCoordinates_Vector4_float_float?.Invoke(@params);
            self = @params.self;
            coords = @params.coords;
            softX = @params.softX;
            softY = @params.softY;
            orig(self, coords, softX, softY);
            if (_afterSetMaskCoordinates_Vector4_float_float != null)
                _afterSetMaskCoordinates_Vector4_float_float.Invoke(@params);
        }

        internal static void HookEnableMasking()
        {
            if (!HookedList.Contains("EnableMasking"))
            {
                HookedList.Add("EnableMasking");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "EnableMasking"), EnableMasking);
            }
        }

        internal static event Delegates.EnableMasking_BeforeArgs _beforeEnableMasking;
        internal static event Delegates.EnableMasking_NormalArgs _afterEnableMasking;

        private static void EnableMasking(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_EnableMasking @params = new()
            {
                self = self
            };
            _beforeEnableMasking?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterEnableMasking != null) _afterEnableMasking.Invoke(@params);
        }

        internal static void HookDisableMasking()
        {
            if (!HookedList.Contains("DisableMasking"))
            {
                HookedList.Add("DisableMasking");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "DisableMasking"), DisableMasking);
            }
        }

        internal static event Delegates.DisableMasking_BeforeArgs _beforeDisableMasking;
        internal static event Delegates.DisableMasking_NormalArgs _afterDisableMasking;

        private static void DisableMasking(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_DisableMasking @params = new()
            {
                self = self
            };
            _beforeDisableMasking?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDisableMasking != null) _afterDisableMasking.Invoke(@params);
        }

        internal static void HookUpdateMask()
        {
            if (!HookedList.Contains("UpdateMask"))
            {
                HookedList.Add("UpdateMask");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateMask"), UpdateMask);
            }
        }

        internal static event Delegates.UpdateMask_BeforeArgs _beforeUpdateMask;
        internal static event Delegates.UpdateMask_NormalArgs _afterUpdateMask;

        private static void UpdateMask(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_UpdateMask @params = new()
            {
                self = self
            };
            _beforeUpdateMask?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateMask != null) _afterUpdateMask.Invoke(@params);
        }

        internal static void HookGetMaterial()
        {
            if (!HookedList.Contains("GetMaterial"))
            {
                HookedList.Add("GetMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetMaterial"), GetMaterial);
            }
        }

        internal static event Delegates.GetMaterial_BeforeArgs _beforeGetMaterial;
        internal static event Delegates.GetMaterial_NormalArgs _afterGetMaterial;

        private static Material GetMaterial(Func<TextMeshPro, Material, Material> orig, TextMeshPro self, Material mat)
        {
            Delegates.Params_GetMaterial @params = new()
            {
                self = self, mat = mat
            };
            _beforeGetMaterial?.Invoke(@params);
            self = @params.self;
            mat = @params.mat;
            var retVal = orig(self, mat);
            if (_afterGetMaterial != null) retVal = _afterGetMaterial.Invoke(@params);
            return retVal;
        }

        internal static void HookGetMaterials()
        {
            if (!HookedList.Contains("GetMaterials"))
            {
                HookedList.Add("GetMaterials");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetMaterials"), GetMaterials);
            }
        }

        internal static event Delegates.GetMaterials_BeforeArgs _beforeGetMaterials;
        internal static event Delegates.GetMaterials_NormalArgs _afterGetMaterials;

        private static Material[] GetMaterials(Func<TextMeshPro, Material[], Material[]> orig, TextMeshPro self,
            Material[] mats)
        {
            Delegates.Params_GetMaterials @params = new()
            {
                self = self, mats = mats
            };
            _beforeGetMaterials?.Invoke(@params);
            self = @params.self;
            mats = @params.mats;
            var retVal = orig(self, mats);
            if (_afterGetMaterials != null) retVal = _afterGetMaterials.Invoke(@params);
            return retVal;
        }

        internal static void HookSetSharedMaterial()
        {
            if (!HookedList.Contains("SetSharedMaterial"))
            {
                HookedList.Add("SetSharedMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetSharedMaterial"), SetSharedMaterial);
            }
        }

        internal static event Delegates.SetSharedMaterial_BeforeArgs _beforeSetSharedMaterial;
        internal static event Delegates.SetSharedMaterial_NormalArgs _afterSetSharedMaterial;

        private static void SetSharedMaterial(Action<TextMeshPro, Material> orig, TextMeshPro self, Material mat)
        {
            Delegates.Params_SetSharedMaterial @params = new()
            {
                self = self, mat = mat
            };
            _beforeSetSharedMaterial?.Invoke(@params);
            self = @params.self;
            mat = @params.mat;
            orig(self, mat);
            if (_afterSetSharedMaterial != null) _afterSetSharedMaterial.Invoke(@params);
        }

        internal static void HookGetSharedMaterials()
        {
            if (!HookedList.Contains("GetSharedMaterials"))
            {
                HookedList.Add("GetSharedMaterials");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetSharedMaterials"), GetSharedMaterials);
            }
        }

        internal static event Delegates.GetSharedMaterials_BeforeArgs _beforeGetSharedMaterials;
        internal static event Delegates.GetSharedMaterials_NormalArgs _afterGetSharedMaterials;

        private static Material[] GetSharedMaterials(Func<TextMeshPro, Material[]> orig, TextMeshPro self)
        {
            Delegates.Params_GetSharedMaterials @params = new()
            {
                self = self
            };
            _beforeGetSharedMaterials?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetSharedMaterials != null) retVal = _afterGetSharedMaterials.Invoke(@params);
            return retVal;
        }

        internal static void HookSetSharedMaterials()
        {
            if (!HookedList.Contains("SetSharedMaterials"))
            {
                HookedList.Add("SetSharedMaterials");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetSharedMaterials"), SetSharedMaterials);
            }
        }

        internal static event Delegates.SetSharedMaterials_BeforeArgs _beforeSetSharedMaterials;
        internal static event Delegates.SetSharedMaterials_NormalArgs _afterSetSharedMaterials;

        private static void SetSharedMaterials(Action<TextMeshPro, Material[]> orig, TextMeshPro self,
            Material[] materials)
        {
            Delegates.Params_SetSharedMaterials @params = new()
            {
                self = self, materials = materials
            };
            _beforeSetSharedMaterials?.Invoke(@params);
            self = @params.self;
            materials = @params.materials;
            orig(self, materials);
            if (_afterSetSharedMaterials != null) _afterSetSharedMaterials.Invoke(@params);
        }

        internal static void HookSetOutlineThickness()
        {
            if (!HookedList.Contains("SetOutlineThickness"))
            {
                HookedList.Add("SetOutlineThickness");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetOutlineThickness"),
                    SetOutlineThickness);
            }
        }

        internal static event Delegates.SetOutlineThickness_BeforeArgs _beforeSetOutlineThickness;
        internal static event Delegates.SetOutlineThickness_NormalArgs _afterSetOutlineThickness;

        private static void SetOutlineThickness(Action<TextMeshPro, float> orig, TextMeshPro self, float thickness)
        {
            Delegates.Params_SetOutlineThickness @params = new()
            {
                self = self, thickness = thickness
            };
            _beforeSetOutlineThickness?.Invoke(@params);
            self = @params.self;
            thickness = @params.thickness;
            orig(self, thickness);
            if (_afterSetOutlineThickness != null) _afterSetOutlineThickness.Invoke(@params);
        }

        internal static void HookSetFaceColor()
        {
            if (!HookedList.Contains("SetFaceColor"))
            {
                HookedList.Add("SetFaceColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetFaceColor"), SetFaceColor);
            }
        }

        internal static event Delegates.SetFaceColor_BeforeArgs _beforeSetFaceColor;
        internal static event Delegates.SetFaceColor_NormalArgs _afterSetFaceColor;

        private static void SetFaceColor(Action<TextMeshPro, Color32> orig, TextMeshPro self, Color32 color)
        {
            Delegates.Params_SetFaceColor @params = new()
            {
                self = self, color = color
            };
            _beforeSetFaceColor?.Invoke(@params);
            self = @params.self;
            color = @params.color;
            orig(self, color);
            if (_afterSetFaceColor != null) _afterSetFaceColor.Invoke(@params);
        }

        internal static void HookSetOutlineColor()
        {
            if (!HookedList.Contains("SetOutlineColor"))
            {
                HookedList.Add("SetOutlineColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetOutlineColor"), SetOutlineColor);
            }
        }

        internal static event Delegates.SetOutlineColor_BeforeArgs _beforeSetOutlineColor;
        internal static event Delegates.SetOutlineColor_NormalArgs _afterSetOutlineColor;

        private static void SetOutlineColor(Action<TextMeshPro, Color32> orig, TextMeshPro self, Color32 color)
        {
            Delegates.Params_SetOutlineColor @params = new()
            {
                self = self, color = color
            };
            _beforeSetOutlineColor?.Invoke(@params);
            self = @params.self;
            color = @params.color;
            orig(self, color);
            if (_afterSetOutlineColor != null) _afterSetOutlineColor.Invoke(@params);
        }

        internal static void HookCreateMaterialInstance()
        {
            if (!HookedList.Contains("CreateMaterialInstance"))
            {
                HookedList.Add("CreateMaterialInstance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "CreateMaterialInstance"),
                    CreateMaterialInstance);
            }
        }

        internal static event Delegates.CreateMaterialInstance_BeforeArgs _beforeCreateMaterialInstance;
        internal static event Delegates.CreateMaterialInstance_NormalArgs _afterCreateMaterialInstance;

        private static void CreateMaterialInstance(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_CreateMaterialInstance @params = new()
            {
                self = self
            };
            _beforeCreateMaterialInstance?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCreateMaterialInstance != null) _afterCreateMaterialInstance.Invoke(@params);
        }

        internal static void HookSetShaderDepth()
        {
            if (!HookedList.Contains("SetShaderDepth"))
            {
                HookedList.Add("SetShaderDepth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetShaderDepth"), SetShaderDepth);
            }
        }

        internal static event Delegates.SetShaderDepth_BeforeArgs _beforeSetShaderDepth;
        internal static event Delegates.SetShaderDepth_NormalArgs _afterSetShaderDepth;

        private static void SetShaderDepth(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_SetShaderDepth @params = new()
            {
                self = self
            };
            _beforeSetShaderDepth?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetShaderDepth != null) _afterSetShaderDepth.Invoke(@params);
        }

        internal static void HookSetCulling()
        {
            if (!HookedList.Contains("SetCulling"))
            {
                HookedList.Add("SetCulling");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetCulling"), SetCulling);
            }
        }

        internal static event Delegates.SetCulling_BeforeArgs _beforeSetCulling;
        internal static event Delegates.SetCulling_NormalArgs _afterSetCulling;

        private static void SetCulling(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_SetCulling @params = new()
            {
                self = self
            };
            _beforeSetCulling?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetCulling != null) _afterSetCulling.Invoke(@params);
        }

        internal static void HookSetPerspectiveCorrection()
        {
            if (!HookedList.Contains("SetPerspectiveCorrection"))
            {
                HookedList.Add("SetPerspectiveCorrection");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetPerspectiveCorrection"),
                    SetPerspectiveCorrection);
            }
        }

        internal static event Delegates.SetPerspectiveCorrection_BeforeArgs _beforeSetPerspectiveCorrection;
        internal static event Delegates.SetPerspectiveCorrection_NormalArgs _afterSetPerspectiveCorrection;

        private static void SetPerspectiveCorrection(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_SetPerspectiveCorrection @params = new()
            {
                self = self
            };
            _beforeSetPerspectiveCorrection?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetPerspectiveCorrection != null) _afterSetPerspectiveCorrection.Invoke(@params);
        }

        internal static void HookGetPaddingForMaterial_Material()
        {
            if (!HookedList.Contains("GetPaddingForMaterial_Material"))
            {
                HookedList.Add("GetPaddingForMaterial_Material");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetPaddingForMaterial_Material"),
                    GetPaddingForMaterial_Material);
            }
        }

        internal static event Delegates.GetPaddingForMaterial_Material_BeforeArgs _beforeGetPaddingForMaterial_Material;
        internal static event Delegates.GetPaddingForMaterial_Material_NormalArgs _afterGetPaddingForMaterial_Material;

        private static float GetPaddingForMaterial_Material(Func<TextMeshPro, Material, float> orig, TextMeshPro self,
            Material mat)
        {
            Delegates.Params_GetPaddingForMaterial_Material @params = new()
            {
                self = self, mat = mat
            };
            _beforeGetPaddingForMaterial_Material?.Invoke(@params);
            self = @params.self;
            mat = @params.mat;
            var retVal = orig(self, mat);
            if (_afterGetPaddingForMaterial_Material != null)
                retVal = _afterGetPaddingForMaterial_Material.Invoke(@params);
            return retVal;
        }

        internal static void HookGetPaddingForMaterial()
        {
            if (!HookedList.Contains("GetPaddingForMaterial"))
            {
                HookedList.Add("GetPaddingForMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetPaddingForMaterial"),
                    GetPaddingForMaterial);
            }
        }

        internal static event Delegates.GetPaddingForMaterial_BeforeArgs _beforeGetPaddingForMaterial;
        internal static event Delegates.GetPaddingForMaterial_NormalArgs _afterGetPaddingForMaterial;

        private static float GetPaddingForMaterial(Func<TextMeshPro, float> orig, TextMeshPro self)
        {
            Delegates.Params_GetPaddingForMaterial @params = new()
            {
                self = self
            };
            _beforeGetPaddingForMaterial?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetPaddingForMaterial != null) retVal = _afterGetPaddingForMaterial.Invoke(@params);
            return retVal;
        }

        internal static void HookSetArraySizes()
        {
            if (!HookedList.Contains("SetArraySizes"))
            {
                HookedList.Add("SetArraySizes");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetArraySizes"), SetArraySizes);
            }
        }

        internal static event Delegates.SetArraySizes_BeforeArgs _beforeSetArraySizes;
        internal static event Delegates.SetArraySizes_NormalArgs _afterSetArraySizes;

        private static int SetArraySizes(Func<TextMeshPro, int[], int> orig, TextMeshPro self, int[] chars)
        {
            Delegates.Params_SetArraySizes @params = new()
            {
                self = self, chars = chars
            };
            _beforeSetArraySizes?.Invoke(@params);
            self = @params.self;
            chars = @params.chars;
            var retVal = orig(self, chars);
            if (_afterSetArraySizes != null) retVal = _afterSetArraySizes.Invoke(@params);
            return retVal;
        }

        internal static void HookComputeMarginSize()
        {
            if (!HookedList.Contains("ComputeMarginSize"))
            {
                HookedList.Add("ComputeMarginSize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "ComputeMarginSize"), ComputeMarginSize);
            }
        }

        internal static event Delegates.ComputeMarginSize_BeforeArgs _beforeComputeMarginSize;
        internal static event Delegates.ComputeMarginSize_NormalArgs _afterComputeMarginSize;

        private static void ComputeMarginSize(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_ComputeMarginSize @params = new()
            {
                self = self
            };
            _beforeComputeMarginSize?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterComputeMarginSize != null) _afterComputeMarginSize.Invoke(@params);
        }

        internal static void HookOnDidApplyAnimationProperties()
        {
            if (!HookedList.Contains("OnDidApplyAnimationProperties"))
            {
                HookedList.Add("OnDidApplyAnimationProperties");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "OnDidApplyAnimationProperties"),
                    OnDidApplyAnimationProperties);
            }
        }

        internal static event Delegates.OnDidApplyAnimationProperties_BeforeArgs _beforeOnDidApplyAnimationProperties;
        internal static event Delegates.OnDidApplyAnimationProperties_NormalArgs _afterOnDidApplyAnimationProperties;

        private static void OnDidApplyAnimationProperties(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_OnDidApplyAnimationProperties @params = new()
            {
                self = self
            };
            _beforeOnDidApplyAnimationProperties?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDidApplyAnimationProperties != null) _afterOnDidApplyAnimationProperties.Invoke(@params);
        }

        internal static void HookOnTransformParentChanged()
        {
            if (!HookedList.Contains("OnTransformParentChanged"))
            {
                HookedList.Add("OnTransformParentChanged");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "OnTransformParentChanged"),
                    OnTransformParentChanged);
            }
        }

        internal static event Delegates.OnTransformParentChanged_BeforeArgs _beforeOnTransformParentChanged;
        internal static event Delegates.OnTransformParentChanged_NormalArgs _afterOnTransformParentChanged;

        private static void OnTransformParentChanged(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_OnTransformParentChanged @params = new()
            {
                self = self
            };
            _beforeOnTransformParentChanged?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnTransformParentChanged != null) _afterOnTransformParentChanged.Invoke(@params);
        }

        internal static void HookOnRectTransformDimensionsChange()
        {
            if (!HookedList.Contains("OnRectTransformDimensionsChange"))
            {
                HookedList.Add("OnRectTransformDimensionsChange");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "OnRectTransformDimensionsChange"),
                    OnRectTransformDimensionsChange);
            }
        }

        internal static event Delegates.OnRectTransformDimensionsChange_BeforeArgs
            _beforeOnRectTransformDimensionsChange;

        internal static event Delegates.OnRectTransformDimensionsChange_NormalArgs
            _afterOnRectTransformDimensionsChange;

        private static void OnRectTransformDimensionsChange(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_OnRectTransformDimensionsChange @params = new()
            {
                self = self
            };
            _beforeOnRectTransformDimensionsChange?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnRectTransformDimensionsChange != null) _afterOnRectTransformDimensionsChange.Invoke(@params);
        }

        internal static void HookLateUpdate()
        {
            if (!HookedList.Contains("LateUpdate"))
            {
                HookedList.Add("LateUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "LateUpdate"), LateUpdate);
            }
        }

        internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
        internal static event Delegates.LateUpdate_NormalArgs _afterLateUpdate;

        private static void LateUpdate(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_LateUpdate @params = new()
            {
                self = self
            };
            _beforeLateUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLateUpdate != null) _afterLateUpdate.Invoke(@params);
        }

        internal static void HookOnPreRenderObject()
        {
            if (!HookedList.Contains("OnPreRenderObject"))
            {
                HookedList.Add("OnPreRenderObject");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "OnPreRenderObject"), OnPreRenderObject);
            }
        }

        internal static event Delegates.OnPreRenderObject_BeforeArgs _beforeOnPreRenderObject;
        internal static event Delegates.OnPreRenderObject_NormalArgs _afterOnPreRenderObject;

        private static void OnPreRenderObject(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_OnPreRenderObject @params = new()
            {
                self = self
            };
            _beforeOnPreRenderObject?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnPreRenderObject != null) _afterOnPreRenderObject.Invoke(@params);
        }

        internal static void HookGenerateTextMesh()
        {
            if (!HookedList.Contains("GenerateTextMesh"))
            {
                HookedList.Add("GenerateTextMesh");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GenerateTextMesh"), GenerateTextMesh);
            }
        }

        internal static event Delegates.GenerateTextMesh_BeforeArgs _beforeGenerateTextMesh;
        internal static event Delegates.GenerateTextMesh_NormalArgs _afterGenerateTextMesh;

        private static void GenerateTextMesh(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_GenerateTextMesh @params = new()
            {
                self = self
            };
            _beforeGenerateTextMesh?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterGenerateTextMesh != null) _afterGenerateTextMesh.Invoke(@params);
        }

        internal static void HookGetTextContainerLocalCorners()
        {
            if (!HookedList.Contains("GetTextContainerLocalCorners"))
            {
                HookedList.Add("GetTextContainerLocalCorners");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetTextContainerLocalCorners"),
                    GetTextContainerLocalCorners);
            }
        }

        internal static event Delegates.GetTextContainerLocalCorners_BeforeArgs _beforeGetTextContainerLocalCorners;
        internal static event Delegates.GetTextContainerLocalCorners_NormalArgs _afterGetTextContainerLocalCorners;

        private static Vector3[] GetTextContainerLocalCorners(Func<TextMeshPro, Vector3[]> orig, TextMeshPro self)
        {
            Delegates.Params_GetTextContainerLocalCorners @params = new()
            {
                self = self
            };
            _beforeGetTextContainerLocalCorners?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetTextContainerLocalCorners != null) retVal = _afterGetTextContainerLocalCorners.Invoke(@params);
            return retVal;
        }

        internal static void HookClearMesh()
        {
            if (!HookedList.Contains("ClearMesh"))
            {
                HookedList.Add("ClearMesh");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "ClearMesh"), ClearMesh);
            }
        }

        internal static event Delegates.ClearMesh_BeforeArgs _beforeClearMesh;
        internal static event Delegates.ClearMesh_NormalArgs _afterClearMesh;

        private static void ClearMesh(Action<TextMeshPro, bool> orig, TextMeshPro self, bool updateMesh)
        {
            Delegates.Params_ClearMesh @params = new()
            {
                self = self, updateMesh = updateMesh
            };
            _beforeClearMesh?.Invoke(@params);
            self = @params.self;
            updateMesh = @params.updateMesh;
            orig(self, updateMesh);
            if (_afterClearMesh != null) _afterClearMesh.Invoke(@params);
        }

        internal static void HookSetMeshFilters()
        {
            if (!HookedList.Contains("SetMeshFilters"))
            {
                HookedList.Add("SetMeshFilters");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetMeshFilters"), SetMeshFilters);
            }
        }

        internal static event Delegates.SetMeshFilters_BeforeArgs _beforeSetMeshFilters;
        internal static event Delegates.SetMeshFilters_NormalArgs _afterSetMeshFilters;

        private static void SetMeshFilters(Action<TextMeshPro, bool> orig, TextMeshPro self, bool state)
        {
            Delegates.Params_SetMeshFilters @params = new()
            {
                self = self, state = state
            };
            _beforeSetMeshFilters?.Invoke(@params);
            self = @params.self;
            state = @params.state;
            orig(self, state);
            if (_afterSetMeshFilters != null) _afterSetMeshFilters.Invoke(@params);
        }

        internal static void HookSetActiveSubMeshes()
        {
            if (!HookedList.Contains("SetActiveSubMeshes"))
            {
                HookedList.Add("SetActiveSubMeshes");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetActiveSubMeshes"), SetActiveSubMeshes);
            }
        }

        internal static event Delegates.SetActiveSubMeshes_BeforeArgs _beforeSetActiveSubMeshes;
        internal static event Delegates.SetActiveSubMeshes_NormalArgs _afterSetActiveSubMeshes;

        private static void SetActiveSubMeshes(Action<TextMeshPro, bool> orig, TextMeshPro self, bool state)
        {
            Delegates.Params_SetActiveSubMeshes @params = new()
            {
                self = self, state = state
            };
            _beforeSetActiveSubMeshes?.Invoke(@params);
            self = @params.self;
            state = @params.state;
            orig(self, state);
            if (_afterSetActiveSubMeshes != null) _afterSetActiveSubMeshes.Invoke(@params);
        }

        internal static void HookGetCompoundBounds()
        {
            if (!HookedList.Contains("GetCompoundBounds"))
            {
                HookedList.Add("GetCompoundBounds");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetCompoundBounds"), GetCompoundBounds);
            }
        }

        internal static event Delegates.GetCompoundBounds_BeforeArgs _beforeGetCompoundBounds;
        internal static event Delegates.GetCompoundBounds_NormalArgs _afterGetCompoundBounds;

        private static Bounds GetCompoundBounds(Func<TextMeshPro, Bounds> orig, TextMeshPro self)
        {
            Delegates.Params_GetCompoundBounds @params = new()
            {
                self = self
            };
            _beforeGetCompoundBounds?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetCompoundBounds != null) retVal = _afterGetCompoundBounds.Invoke(@params);
            return retVal;
        }

        internal static void HookUpdateSDFScale()
        {
            if (!HookedList.Contains("UpdateSDFScale"))
            {
                HookedList.Add("UpdateSDFScale");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateSDFScale"), UpdateSDFScale);
            }
        }

        internal static event Delegates.UpdateSDFScale_BeforeArgs _beforeUpdateSDFScale;
        internal static event Delegates.UpdateSDFScale_NormalArgs _afterUpdateSDFScale;

        private static void UpdateSDFScale(Action<TextMeshPro, float> orig, TextMeshPro self, float lossyScale)
        {
            Delegates.Params_UpdateSDFScale @params = new()
            {
                self = self, lossyScale = lossyScale
            };
            _beforeUpdateSDFScale?.Invoke(@params);
            self = @params.self;
            lossyScale = @params.lossyScale;
            orig(self, lossyScale);
            if (_afterUpdateSDFScale != null) _afterUpdateSDFScale.Invoke(@params);
        }

        internal static void HookAdjustLineOffset()
        {
            if (!HookedList.Contains("AdjustLineOffset"))
            {
                HookedList.Add("AdjustLineOffset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "AdjustLineOffset"), AdjustLineOffset);
            }
        }

        internal static event Delegates.AdjustLineOffset_BeforeArgs _beforeAdjustLineOffset;
        internal static event Delegates.AdjustLineOffset_NormalArgs _afterAdjustLineOffset;

        private static void AdjustLineOffset(Action<TextMeshPro, int, int, float> orig, TextMeshPro self,
            int startIndex, int endIndex, float offset)
        {
            Delegates.Params_AdjustLineOffset @params = new()
            {
                self = self, startIndex = startIndex, endIndex = endIndex, offset = offset
            };
            _beforeAdjustLineOffset?.Invoke(@params);
            self = @params.self;
            startIndex = @params.startIndex;
            endIndex = @params.endIndex;
            offset = @params.offset;
            orig(self, startIndex, endIndex, offset);
            if (_afterAdjustLineOffset != null) _afterAdjustLineOffset.Invoke(@params);
        }

        internal static void Hookget_lineLength()
        {
            if (!HookedList.Contains("get_lineLength"))
            {
                HookedList.Add("get_lineLength");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_lineLength"), get_lineLength);
            }
        }

        internal static event Delegates.get_lineLength_BeforeArgs _beforeget_lineLength;
        internal static event Delegates.get_lineLength_NormalArgs _afterget_lineLength;

        private static float get_lineLength(Func<TextMeshPro, float> orig, TextMeshPro self)
        {
            Delegates.Params_get_lineLength @params = new()
            {
                self = self
            };
            _beforeget_lineLength?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_lineLength != null) retVal = _afterget_lineLength.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_lineLength()
        {
            if (!HookedList.Contains("set_lineLength"))
            {
                HookedList.Add("set_lineLength");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "set_lineLength"), set_lineLength);
            }
        }

        internal static event Delegates.set_lineLength_BeforeArgs _beforeset_lineLength;
        internal static event Delegates.set_lineLength_NormalArgs _afterset_lineLength;

        private static void set_lineLength(Action<TextMeshPro, float> orig, TextMeshPro self, float value)
        {
            Delegates.Params_set_lineLength @params = new()
            {
                self = self, value = value
            };
            _beforeset_lineLength?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_lineLength != null) _afterset_lineLength.Invoke(@params);
        }

        internal static void Hookget_margin()
        {
            if (!HookedList.Contains("get_margin"))
            {
                HookedList.Add("get_margin");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_margin"), get_margin);
            }
        }

        internal static event Delegates.get_margin_BeforeArgs _beforeget_margin;
        internal static event Delegates.get_margin_NormalArgs _afterget_margin;

        private static Vector4 get_margin(Func<TextMeshPro, Vector4> orig, TextMeshPro self)
        {
            Delegates.Params_get_margin @params = new()
            {
                self = self
            };
            _beforeget_margin?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_margin != null) retVal = _afterget_margin.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_margin()
        {
            if (!HookedList.Contains("set_margin"))
            {
                HookedList.Add("set_margin");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "set_margin"), set_margin);
            }
        }

        internal static event Delegates.set_margin_BeforeArgs _beforeset_margin;
        internal static event Delegates.set_margin_NormalArgs _afterset_margin;

        private static void set_margin(Action<TextMeshPro, Vector4> orig, TextMeshPro self, Vector4 value)
        {
            Delegates.Params_set_margin @params = new()
            {
                self = self, value = value
            };
            _beforeset_margin?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_margin != null) _afterset_margin.Invoke(@params);
        }

        internal static void Hookget_sortingLayerID()
        {
            if (!HookedList.Contains("get_sortingLayerID"))
            {
                HookedList.Add("get_sortingLayerID");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_sortingLayerID"), get_sortingLayerID);
            }
        }

        internal static event Delegates.get_sortingLayerID_BeforeArgs _beforeget_sortingLayerID;
        internal static event Delegates.get_sortingLayerID_NormalArgs _afterget_sortingLayerID;

        private static int get_sortingLayerID(Func<TextMeshPro, int> orig, TextMeshPro self)
        {
            Delegates.Params_get_sortingLayerID @params = new()
            {
                self = self
            };
            _beforeget_sortingLayerID?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_sortingLayerID != null) retVal = _afterget_sortingLayerID.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_sortingLayerID()
        {
            if (!HookedList.Contains("set_sortingLayerID"))
            {
                HookedList.Add("set_sortingLayerID");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "set_sortingLayerID"), set_sortingLayerID);
            }
        }

        internal static event Delegates.set_sortingLayerID_BeforeArgs _beforeset_sortingLayerID;
        internal static event Delegates.set_sortingLayerID_NormalArgs _afterset_sortingLayerID;

        private static void set_sortingLayerID(Action<TextMeshPro, int> orig, TextMeshPro self, int value)
        {
            Delegates.Params_set_sortingLayerID @params = new()
            {
                self = self, value = value
            };
            _beforeset_sortingLayerID?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_sortingLayerID != null) _afterset_sortingLayerID.Invoke(@params);
        }

        internal static void Hookget_sortingOrder()
        {
            if (!HookedList.Contains("get_sortingOrder"))
            {
                HookedList.Add("get_sortingOrder");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_sortingOrder"), get_sortingOrder);
            }
        }

        internal static event Delegates.get_sortingOrder_BeforeArgs _beforeget_sortingOrder;
        internal static event Delegates.get_sortingOrder_NormalArgs _afterget_sortingOrder;

        private static int get_sortingOrder(Func<TextMeshPro, int> orig, TextMeshPro self)
        {
            Delegates.Params_get_sortingOrder @params = new()
            {
                self = self
            };
            _beforeget_sortingOrder?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_sortingOrder != null) retVal = _afterget_sortingOrder.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_sortingOrder()
        {
            if (!HookedList.Contains("set_sortingOrder"))
            {
                HookedList.Add("set_sortingOrder");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "set_sortingOrder"), set_sortingOrder);
            }
        }

        internal static event Delegates.set_sortingOrder_BeforeArgs _beforeset_sortingOrder;
        internal static event Delegates.set_sortingOrder_NormalArgs _afterset_sortingOrder;

        private static void set_sortingOrder(Action<TextMeshPro, int> orig, TextMeshPro self, int value)
        {
            Delegates.Params_set_sortingOrder @params = new()
            {
                self = self, value = value
            };
            _beforeset_sortingOrder?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_sortingOrder != null) _afterset_sortingOrder.Invoke(@params);
        }

        internal static void Hookget_autoSizeTextContainer()
        {
            if (!HookedList.Contains("get_autoSizeTextContainer"))
            {
                HookedList.Add("get_autoSizeTextContainer");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_autoSizeTextContainer"),
                    get_autoSizeTextContainer);
            }
        }

        internal static event Delegates.get_autoSizeTextContainer_BeforeArgs _beforeget_autoSizeTextContainer;
        internal static event Delegates.get_autoSizeTextContainer_NormalArgs _afterget_autoSizeTextContainer;

        private static bool get_autoSizeTextContainer(Func<TextMeshPro, bool> orig, TextMeshPro self)
        {
            Delegates.Params_get_autoSizeTextContainer @params = new()
            {
                self = self
            };
            _beforeget_autoSizeTextContainer?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_autoSizeTextContainer != null) retVal = _afterget_autoSizeTextContainer.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_autoSizeTextContainer()
        {
            if (!HookedList.Contains("set_autoSizeTextContainer"))
            {
                HookedList.Add("set_autoSizeTextContainer");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "set_autoSizeTextContainer"),
                    set_autoSizeTextContainer);
            }
        }

        internal static event Delegates.set_autoSizeTextContainer_BeforeArgs _beforeset_autoSizeTextContainer;
        internal static event Delegates.set_autoSizeTextContainer_NormalArgs _afterset_autoSizeTextContainer;

        private static void set_autoSizeTextContainer(Action<TextMeshPro, bool> orig, TextMeshPro self, bool value)
        {
            Delegates.Params_set_autoSizeTextContainer @params = new()
            {
                self = self, value = value
            };
            _beforeset_autoSizeTextContainer?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_autoSizeTextContainer != null) _afterset_autoSizeTextContainer.Invoke(@params);
        }

        internal static void Hookget_textContainer()
        {
            if (!HookedList.Contains("get_textContainer"))
            {
                HookedList.Add("get_textContainer");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_textContainer"), get_textContainer);
            }
        }

        internal static event Delegates.get_textContainer_BeforeArgs _beforeget_textContainer;
        internal static event Delegates.get_textContainer_NormalArgs _afterget_textContainer;

        private static TextContainer get_textContainer(Func<TextMeshPro, TextContainer> orig, TextMeshPro self)
        {
            Delegates.Params_get_textContainer @params = new()
            {
                self = self
            };
            _beforeget_textContainer?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_textContainer != null) retVal = _afterget_textContainer.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_transform()
        {
            if (!HookedList.Contains("get_transform"))
            {
                HookedList.Add("get_transform");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_transform"), get_transform);
            }
        }

        internal static event Delegates.get_transform_BeforeArgs _beforeget_transform;
        internal static event Delegates.get_transform_NormalArgs _afterget_transform;

        private static Transform get_transform(Func<TextMeshPro, Transform> orig, TextMeshPro self)
        {
            Delegates.Params_get_transform @params = new()
            {
                self = self
            };
            _beforeget_transform?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_transform != null) retVal = _afterget_transform.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_renderer()
        {
            if (!HookedList.Contains("get_renderer"))
            {
                HookedList.Add("get_renderer");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_renderer"), get_renderer);
            }
        }

        internal static event Delegates.get_renderer_BeforeArgs _beforeget_renderer;
        internal static event Delegates.get_renderer_NormalArgs _afterget_renderer;

        private static Renderer get_renderer(Func<TextMeshPro, Renderer> orig, TextMeshPro self)
        {
            Delegates.Params_get_renderer @params = new()
            {
                self = self
            };
            _beforeget_renderer?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_renderer != null) retVal = _afterget_renderer.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_mesh()
        {
            if (!HookedList.Contains("get_mesh"))
            {
                HookedList.Add("get_mesh");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_mesh"), get_mesh);
            }
        }

        internal static event Delegates.get_mesh_BeforeArgs _beforeget_mesh;
        internal static event Delegates.get_mesh_NormalArgs _afterget_mesh;

        private static Mesh get_mesh(Func<TextMeshPro, Mesh> orig, TextMeshPro self)
        {
            Delegates.Params_get_mesh @params = new()
            {
                self = self
            };
            _beforeget_mesh?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_mesh != null) retVal = _afterget_mesh.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_meshFilter()
        {
            if (!HookedList.Contains("get_meshFilter"))
            {
                HookedList.Add("get_meshFilter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_meshFilter"), get_meshFilter);
            }
        }

        internal static event Delegates.get_meshFilter_BeforeArgs _beforeget_meshFilter;
        internal static event Delegates.get_meshFilter_NormalArgs _afterget_meshFilter;

        private static MeshFilter get_meshFilter(Func<TextMeshPro, MeshFilter> orig, TextMeshPro self)
        {
            Delegates.Params_get_meshFilter @params = new()
            {
                self = self
            };
            _beforeget_meshFilter?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_meshFilter != null) retVal = _afterget_meshFilter.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_maskType()
        {
            if (!HookedList.Contains("get_maskType"))
            {
                HookedList.Add("get_maskType");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_maskType"), get_maskType);
            }
        }

        internal static event Delegates.get_maskType_BeforeArgs _beforeget_maskType;
        internal static event Delegates.get_maskType_NormalArgs _afterget_maskType;

        private static MaskingTypes get_maskType(Func<TextMeshPro, MaskingTypes> orig, TextMeshPro self)
        {
            Delegates.Params_get_maskType @params = new()
            {
                self = self
            };
            _beforeget_maskType?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_maskType != null) retVal = _afterget_maskType.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_maskType()
        {
            if (!HookedList.Contains("set_maskType"))
            {
                HookedList.Add("set_maskType");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "set_maskType"), set_maskType);
            }
        }

        internal static event Delegates.set_maskType_BeforeArgs _beforeset_maskType;
        internal static event Delegates.set_maskType_NormalArgs _afterset_maskType;

        private static void set_maskType(Action<TextMeshPro, MaskingTypes> orig, TextMeshPro self, MaskingTypes value)
        {
            Delegates.Params_set_maskType @params = new()
            {
                self = self, value = value
            };
            _beforeset_maskType?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_maskType != null) _afterset_maskType.Invoke(@params);
        }

        internal static void HookSetMask_MaskingTypes_Vector4()
        {
            if (!HookedList.Contains("SetMask_MaskingTypes_Vector4"))
            {
                HookedList.Add("SetMask_MaskingTypes_Vector4");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetMask_MaskingTypes_Vector4"),
                    SetMask_MaskingTypes_Vector4);
            }
        }

        internal static event Delegates.SetMask_MaskingTypes_Vector4_BeforeArgs _beforeSetMask_MaskingTypes_Vector4;
        internal static event Delegates.SetMask_MaskingTypes_Vector4_NormalArgs _afterSetMask_MaskingTypes_Vector4;

        private static void SetMask_MaskingTypes_Vector4(Action<TextMeshPro, MaskingTypes, Vector4> orig,
            TextMeshPro self, MaskingTypes type, Vector4 maskCoords)
        {
            Delegates.Params_SetMask_MaskingTypes_Vector4 @params = new()
            {
                self = self, type = type, maskCoords = maskCoords
            };
            _beforeSetMask_MaskingTypes_Vector4?.Invoke(@params);
            self = @params.self;
            type = @params.type;
            maskCoords = @params.maskCoords;
            orig(self, type, maskCoords);
            if (_afterSetMask_MaskingTypes_Vector4 != null) _afterSetMask_MaskingTypes_Vector4.Invoke(@params);
        }

        internal static void HookSetMask_MaskingTypes_Vector4_float_float()
        {
            if (!HookedList.Contains("SetMask_MaskingTypes_Vector4_float_float"))
            {
                HookedList.Add("SetMask_MaskingTypes_Vector4_float_float");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetMask_MaskingTypes_Vector4_float_float"),
                    SetMask_MaskingTypes_Vector4_float_float);
            }
        }

        internal static event Delegates.SetMask_MaskingTypes_Vector4_float_float_BeforeArgs
            _beforeSetMask_MaskingTypes_Vector4_float_float;

        internal static event Delegates.SetMask_MaskingTypes_Vector4_float_float_NormalArgs
            _afterSetMask_MaskingTypes_Vector4_float_float;

        private static void SetMask_MaskingTypes_Vector4_float_float(
            Action<TextMeshPro, MaskingTypes, Vector4, float, float> orig, TextMeshPro self, MaskingTypes type,
            Vector4 maskCoords, float softnessX, float softnessY)
        {
            Delegates.Params_SetMask_MaskingTypes_Vector4_float_float @params = new()
            {
                self = self, type = type, maskCoords = maskCoords, softnessX = softnessX, softnessY = softnessY
            };
            _beforeSetMask_MaskingTypes_Vector4_float_float?.Invoke(@params);
            self = @params.self;
            type = @params.type;
            maskCoords = @params.maskCoords;
            softnessX = @params.softnessX;
            softnessY = @params.softnessY;
            orig(self, type, maskCoords, softnessX, softnessY);
            if (_afterSetMask_MaskingTypes_Vector4_float_float != null)
                _afterSetMask_MaskingTypes_Vector4_float_float.Invoke(@params);
        }

        internal static void HookSetVerticesDirty()
        {
            if (!HookedList.Contains("SetVerticesDirty"))
            {
                HookedList.Add("SetVerticesDirty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetVerticesDirty"), SetVerticesDirty);
            }
        }

        internal static event Delegates.SetVerticesDirty_BeforeArgs _beforeSetVerticesDirty;
        internal static event Delegates.SetVerticesDirty_NormalArgs _afterSetVerticesDirty;

        private static void SetVerticesDirty(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_SetVerticesDirty @params = new()
            {
                self = self
            };
            _beforeSetVerticesDirty?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetVerticesDirty != null) _afterSetVerticesDirty.Invoke(@params);
        }

        internal static void HookSetLayoutDirty()
        {
            if (!HookedList.Contains("SetLayoutDirty"))
            {
                HookedList.Add("SetLayoutDirty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetLayoutDirty"), SetLayoutDirty);
            }
        }

        internal static event Delegates.SetLayoutDirty_BeforeArgs _beforeSetLayoutDirty;
        internal static event Delegates.SetLayoutDirty_NormalArgs _afterSetLayoutDirty;

        private static void SetLayoutDirty(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_SetLayoutDirty @params = new()
            {
                self = self
            };
            _beforeSetLayoutDirty?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetLayoutDirty != null) _afterSetLayoutDirty.Invoke(@params);
        }

        internal static void HookSetMaterialDirty()
        {
            if (!HookedList.Contains("SetMaterialDirty"))
            {
                HookedList.Add("SetMaterialDirty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetMaterialDirty"), SetMaterialDirty);
            }
        }

        internal static event Delegates.SetMaterialDirty_BeforeArgs _beforeSetMaterialDirty;
        internal static event Delegates.SetMaterialDirty_NormalArgs _afterSetMaterialDirty;

        private static void SetMaterialDirty(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_SetMaterialDirty @params = new()
            {
                self = self
            };
            _beforeSetMaterialDirty?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetMaterialDirty != null) _afterSetMaterialDirty.Invoke(@params);
        }

        internal static void HookSetAllDirty()
        {
            if (!HookedList.Contains("SetAllDirty"))
            {
                HookedList.Add("SetAllDirty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetAllDirty"), SetAllDirty);
            }
        }

        internal static event Delegates.SetAllDirty_BeforeArgs _beforeSetAllDirty;
        internal static event Delegates.SetAllDirty_NormalArgs _afterSetAllDirty;

        private static void SetAllDirty(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_SetAllDirty @params = new()
            {
                self = self
            };
            _beforeSetAllDirty?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetAllDirty != null) _afterSetAllDirty.Invoke(@params);
        }

        internal static void HookRebuild()
        {
            if (!HookedList.Contains("Rebuild"))
            {
                HookedList.Add("Rebuild");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "Rebuild"), Rebuild);
            }
        }

        internal static event Delegates.Rebuild_BeforeArgs _beforeRebuild;
        internal static event Delegates.Rebuild_NormalArgs _afterRebuild;

        private static void Rebuild(Action<TextMeshPro, CanvasUpdate> orig, TextMeshPro self, CanvasUpdate update)
        {
            Delegates.Params_Rebuild @params = new()
            {
                self = self, update = update
            };
            _beforeRebuild?.Invoke(@params);
            self = @params.self;
            update = @params.update;
            orig(self, update);
            if (_afterRebuild != null) _afterRebuild.Invoke(@params);
        }

        internal static void HookUpdateMaterial()
        {
            if (!HookedList.Contains("UpdateMaterial"))
            {
                HookedList.Add("UpdateMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateMaterial"), UpdateMaterial);
            }
        }

        internal static event Delegates.UpdateMaterial_BeforeArgs _beforeUpdateMaterial;
        internal static event Delegates.UpdateMaterial_NormalArgs _afterUpdateMaterial;

        private static void UpdateMaterial(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_UpdateMaterial @params = new()
            {
                self = self
            };
            _beforeUpdateMaterial?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateMaterial != null) _afterUpdateMaterial.Invoke(@params);
        }

        internal static void HookUpdateMeshPadding()
        {
            if (!HookedList.Contains("UpdateMeshPadding"))
            {
                HookedList.Add("UpdateMeshPadding");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateMeshPadding"), UpdateMeshPadding);
            }
        }

        internal static event Delegates.UpdateMeshPadding_BeforeArgs _beforeUpdateMeshPadding;
        internal static event Delegates.UpdateMeshPadding_NormalArgs _afterUpdateMeshPadding;

        private static void UpdateMeshPadding(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_UpdateMeshPadding @params = new()
            {
                self = self
            };
            _beforeUpdateMeshPadding?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateMeshPadding != null) _afterUpdateMeshPadding.Invoke(@params);
        }

        internal static void HookForceMeshUpdate()
        {
            if (!HookedList.Contains("ForceMeshUpdate"))
            {
                HookedList.Add("ForceMeshUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "ForceMeshUpdate"), ForceMeshUpdate);
            }
        }

        internal static event Delegates.ForceMeshUpdate_BeforeArgs _beforeForceMeshUpdate;
        internal static event Delegates.ForceMeshUpdate_NormalArgs _afterForceMeshUpdate;

        private static void ForceMeshUpdate(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_ForceMeshUpdate @params = new()
            {
                self = self
            };
            _beforeForceMeshUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterForceMeshUpdate != null) _afterForceMeshUpdate.Invoke(@params);
        }

        internal static void HookForceMeshUpdate_bool()
        {
            if (!HookedList.Contains("ForceMeshUpdate_bool"))
            {
                HookedList.Add("ForceMeshUpdate_bool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "ForceMeshUpdate_bool"),
                    ForceMeshUpdate_bool);
            }
        }

        internal static event Delegates.ForceMeshUpdate_bool_BeforeArgs _beforeForceMeshUpdate_bool;
        internal static event Delegates.ForceMeshUpdate_bool_NormalArgs _afterForceMeshUpdate_bool;

        private static void ForceMeshUpdate_bool(Action<TextMeshPro, bool> orig, TextMeshPro self, bool ignoreInactive)
        {
            Delegates.Params_ForceMeshUpdate_bool @params = new()
            {
                self = self, ignoreInactive = ignoreInactive
            };
            _beforeForceMeshUpdate_bool?.Invoke(@params);
            self = @params.self;
            ignoreInactive = @params.ignoreInactive;
            orig(self, ignoreInactive);
            if (_afterForceMeshUpdate_bool != null) _afterForceMeshUpdate_bool.Invoke(@params);
        }

        internal static void HookGetTextInfo()
        {
            if (!HookedList.Contains("GetTextInfo"))
            {
                HookedList.Add("GetTextInfo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetTextInfo"), GetTextInfo);
            }
        }

        internal static event Delegates.GetTextInfo_BeforeArgs _beforeGetTextInfo;
        internal static event Delegates.GetTextInfo_NormalArgs _afterGetTextInfo;

        private static TMP_TextInfo GetTextInfo(Func<TextMeshPro, string, TMP_TextInfo> orig, TextMeshPro self,
            string text)
        {
            Delegates.Params_GetTextInfo @params = new()
            {
                self = self, text = text
            };
            _beforeGetTextInfo?.Invoke(@params);
            self = @params.self;
            text = @params.text;
            var retVal = orig(self, text);
            if (_afterGetTextInfo != null) retVal = _afterGetTextInfo.Invoke(@params);
            return retVal;
        }

        internal static void HookUpdateGeometry()
        {
            if (!HookedList.Contains("UpdateGeometry"))
            {
                HookedList.Add("UpdateGeometry");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateGeometry"), UpdateGeometry);
            }
        }

        internal static event Delegates.UpdateGeometry_BeforeArgs _beforeUpdateGeometry;
        internal static event Delegates.UpdateGeometry_NormalArgs _afterUpdateGeometry;

        private static void UpdateGeometry(Action<TextMeshPro, Mesh, int> orig, TextMeshPro self, Mesh mesh, int index)
        {
            Delegates.Params_UpdateGeometry @params = new()
            {
                self = self, mesh = mesh, index = index
            };
            _beforeUpdateGeometry?.Invoke(@params);
            self = @params.self;
            mesh = @params.mesh;
            index = @params.index;
            orig(self, mesh, index);
            if (_afterUpdateGeometry != null) _afterUpdateGeometry.Invoke(@params);
        }

        internal static void HookUpdateVertexData_TMP_VertexDataUpdateFlags()
        {
            if (!HookedList.Contains("UpdateVertexData_TMP_VertexDataUpdateFlags"))
            {
                HookedList.Add("UpdateVertexData_TMP_VertexDataUpdateFlags");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateVertexData_TMP_VertexDataUpdateFlags"),
                    UpdateVertexData_TMP_VertexDataUpdateFlags);
            }
        }

        internal static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_BeforeArgs
            _beforeUpdateVertexData_TMP_VertexDataUpdateFlags;

        internal static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_NormalArgs
            _afterUpdateVertexData_TMP_VertexDataUpdateFlags;

        private static void UpdateVertexData_TMP_VertexDataUpdateFlags(
            Action<TextMeshPro, TMP_VertexDataUpdateFlags> orig, TextMeshPro self, TMP_VertexDataUpdateFlags flags)
        {
            Delegates.Params_UpdateVertexData_TMP_VertexDataUpdateFlags @params = new()
            {
                self = self, flags = flags
            };
            _beforeUpdateVertexData_TMP_VertexDataUpdateFlags?.Invoke(@params);
            self = @params.self;
            flags = @params.flags;
            orig(self, flags);
            if (_afterUpdateVertexData_TMP_VertexDataUpdateFlags != null)
                _afterUpdateVertexData_TMP_VertexDataUpdateFlags.Invoke(@params);
        }

        internal static void HookUpdateVertexData()
        {
            if (!HookedList.Contains("UpdateVertexData"))
            {
                HookedList.Add("UpdateVertexData");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateVertexData"), UpdateVertexData);
            }
        }

        internal static event Delegates.UpdateVertexData_BeforeArgs _beforeUpdateVertexData;
        internal static event Delegates.UpdateVertexData_NormalArgs _afterUpdateVertexData;

        private static void UpdateVertexData(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_UpdateVertexData @params = new()
            {
                self = self
            };
            _beforeUpdateVertexData?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateVertexData != null) _afterUpdateVertexData.Invoke(@params);
        }

        internal static void HookUpdateFontAsset()
        {
            if (!HookedList.Contains("UpdateFontAsset"))
            {
                HookedList.Add("UpdateFontAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateFontAsset"), UpdateFontAsset);
            }
        }

        internal static event Delegates.UpdateFontAsset_BeforeArgs _beforeUpdateFontAsset;
        internal static event Delegates.UpdateFontAsset_NormalArgs _afterUpdateFontAsset;

        private static void UpdateFontAsset(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_UpdateFontAsset @params = new()
            {
                self = self
            };
            _beforeUpdateFontAsset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateFontAsset != null) _afterUpdateFontAsset.Invoke(@params);
        }

        internal static void HookCalculateLayoutInputHorizontal()
        {
            if (!HookedList.Contains("CalculateLayoutInputHorizontal"))
            {
                HookedList.Add("CalculateLayoutInputHorizontal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "CalculateLayoutInputHorizontal"),
                    CalculateLayoutInputHorizontal);
            }
        }

        internal static event Delegates.CalculateLayoutInputHorizontal_BeforeArgs _beforeCalculateLayoutInputHorizontal;
        internal static event Delegates.CalculateLayoutInputHorizontal_NormalArgs _afterCalculateLayoutInputHorizontal;

        private static void CalculateLayoutInputHorizontal(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_CalculateLayoutInputHorizontal @params = new()
            {
                self = self
            };
            _beforeCalculateLayoutInputHorizontal?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCalculateLayoutInputHorizontal != null) _afterCalculateLayoutInputHorizontal.Invoke(@params);
        }

        internal static void HookCalculateLayoutInputVertical()
        {
            if (!HookedList.Contains("CalculateLayoutInputVertical"))
            {
                HookedList.Add("CalculateLayoutInputVertical");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "CalculateLayoutInputVertical"),
                    CalculateLayoutInputVertical);
            }
        }

        internal static event Delegates.CalculateLayoutInputVertical_BeforeArgs _beforeCalculateLayoutInputVertical;
        internal static event Delegates.CalculateLayoutInputVertical_NormalArgs _afterCalculateLayoutInputVertical;

        private static void CalculateLayoutInputVertical(Action<TextMeshPro> orig, TextMeshPro self)
        {
            Delegates.Params_CalculateLayoutInputVertical @params = new()
            {
                self = self
            };
            _beforeCalculateLayoutInputVertical?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCalculateLayoutInputVertical != null) _afterCalculateLayoutInputVertical.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AdjustLineOffset_BeforeArgs(Params_AdjustLineOffset args);

        public delegate void AdjustLineOffset_NormalArgs(Params_AdjustLineOffset args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void CalculateLayoutInputHorizontal_BeforeArgs(Params_CalculateLayoutInputHorizontal args);

        public delegate void CalculateLayoutInputHorizontal_NormalArgs(Params_CalculateLayoutInputHorizontal args);

        public delegate void CalculateLayoutInputVertical_BeforeArgs(Params_CalculateLayoutInputVertical args);

        public delegate void CalculateLayoutInputVertical_NormalArgs(Params_CalculateLayoutInputVertical args);

        public delegate void ClearMesh_BeforeArgs(Params_ClearMesh args);

        public delegate void ClearMesh_NormalArgs(Params_ClearMesh args);

        public delegate void ComputeMarginSize_BeforeArgs(Params_ComputeMarginSize args);

        public delegate void ComputeMarginSize_NormalArgs(Params_ComputeMarginSize args);

        public delegate void CreateMaterialInstance_BeforeArgs(Params_CreateMaterialInstance args);

        public delegate void CreateMaterialInstance_NormalArgs(Params_CreateMaterialInstance args);

        public delegate void DisableMasking_BeforeArgs(Params_DisableMasking args);

        public delegate void DisableMasking_NormalArgs(Params_DisableMasking args);

        public delegate void EnableMasking_BeforeArgs(Params_EnableMasking args);

        public delegate void EnableMasking_NormalArgs(Params_EnableMasking args);

        public delegate void ForceMeshUpdate_BeforeArgs(Params_ForceMeshUpdate args);

        public delegate void ForceMeshUpdate_bool_BeforeArgs(Params_ForceMeshUpdate_bool args);

        public delegate void ForceMeshUpdate_bool_NormalArgs(Params_ForceMeshUpdate_bool args);

        public delegate void ForceMeshUpdate_NormalArgs(Params_ForceMeshUpdate args);

        public delegate void GenerateTextMesh_BeforeArgs(Params_GenerateTextMesh args);

        public delegate void GenerateTextMesh_NormalArgs(Params_GenerateTextMesh args);

        public delegate void get_autoSizeTextContainer_BeforeArgs(Params_get_autoSizeTextContainer args);

        public delegate bool get_autoSizeTextContainer_NormalArgs(Params_get_autoSizeTextContainer args);

        public delegate void get_lineLength_BeforeArgs(Params_get_lineLength args);

        public delegate float get_lineLength_NormalArgs(Params_get_lineLength args);

        public delegate void get_margin_BeforeArgs(Params_get_margin args);

        public delegate Vector4 get_margin_NormalArgs(Params_get_margin args);

        public delegate void get_maskType_BeforeArgs(Params_get_maskType args);

        public delegate MaskingTypes get_maskType_NormalArgs(Params_get_maskType args);

        public delegate void get_mesh_BeforeArgs(Params_get_mesh args);

        public delegate Mesh get_mesh_NormalArgs(Params_get_mesh args);

        public delegate void get_meshFilter_BeforeArgs(Params_get_meshFilter args);

        public delegate MeshFilter get_meshFilter_NormalArgs(Params_get_meshFilter args);

        public delegate void get_renderer_BeforeArgs(Params_get_renderer args);

        public delegate Renderer get_renderer_NormalArgs(Params_get_renderer args);

        public delegate void get_sortingLayerID_BeforeArgs(Params_get_sortingLayerID args);

        public delegate int get_sortingLayerID_NormalArgs(Params_get_sortingLayerID args);

        public delegate void get_sortingOrder_BeforeArgs(Params_get_sortingOrder args);

        public delegate int get_sortingOrder_NormalArgs(Params_get_sortingOrder args);

        public delegate void get_textContainer_BeforeArgs(Params_get_textContainer args);

        public delegate TextContainer get_textContainer_NormalArgs(Params_get_textContainer args);

        public delegate void get_transform_BeforeArgs(Params_get_transform args);

        public delegate Transform get_transform_NormalArgs(Params_get_transform args);

        public delegate void GetCompoundBounds_BeforeArgs(Params_GetCompoundBounds args);

        public delegate Bounds GetCompoundBounds_NormalArgs(Params_GetCompoundBounds args);

        public delegate void GetMaterial_BeforeArgs(Params_GetMaterial args);

        public delegate Material GetMaterial_NormalArgs(Params_GetMaterial args);

        public delegate void GetMaterials_BeforeArgs(Params_GetMaterials args);

        public delegate Material[] GetMaterials_NormalArgs(Params_GetMaterials args);

        public delegate void GetPaddingForMaterial_BeforeArgs(Params_GetPaddingForMaterial args);

        public delegate void GetPaddingForMaterial_Material_BeforeArgs(Params_GetPaddingForMaterial_Material args);

        public delegate float GetPaddingForMaterial_Material_NormalArgs(Params_GetPaddingForMaterial_Material args);

        public delegate float GetPaddingForMaterial_NormalArgs(Params_GetPaddingForMaterial args);

        public delegate void GetSharedMaterials_BeforeArgs(Params_GetSharedMaterials args);

        public delegate Material[] GetSharedMaterials_NormalArgs(Params_GetSharedMaterials args);

        public delegate void GetTextContainerLocalCorners_BeforeArgs(Params_GetTextContainerLocalCorners args);

        public delegate Vector3[] GetTextContainerLocalCorners_NormalArgs(Params_GetTextContainerLocalCorners args);

        public delegate void GetTextInfo_BeforeArgs(Params_GetTextInfo args);

        public delegate TMP_TextInfo GetTextInfo_NormalArgs(Params_GetTextInfo args);

        public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);

        public delegate void LateUpdate_NormalArgs(Params_LateUpdate args);

        public delegate void LoadFontAsset_BeforeArgs(Params_LoadFontAsset args);

        public delegate void LoadFontAsset_NormalArgs(Params_LoadFontAsset args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_NormalArgs(Params_OnDestroy args);

        public delegate void OnDidApplyAnimationProperties_BeforeArgs(Params_OnDidApplyAnimationProperties args);

        public delegate void OnDidApplyAnimationProperties_NormalArgs(Params_OnDidApplyAnimationProperties args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void OnPreRenderObject_BeforeArgs(Params_OnPreRenderObject args);

        public delegate void OnPreRenderObject_NormalArgs(Params_OnPreRenderObject args);

        public delegate void OnRectTransformDimensionsChange_BeforeArgs(Params_OnRectTransformDimensionsChange args);

        public delegate void OnRectTransformDimensionsChange_NormalArgs(Params_OnRectTransformDimensionsChange args);

        public delegate void OnTransformParentChanged_BeforeArgs(Params_OnTransformParentChanged args);

        public delegate void OnTransformParentChanged_NormalArgs(Params_OnTransformParentChanged args);

        public delegate void Rebuild_BeforeArgs(Params_Rebuild args);

        public delegate void Rebuild_NormalArgs(Params_Rebuild args);

        public delegate void set_autoSizeTextContainer_BeforeArgs(Params_set_autoSizeTextContainer args);

        public delegate void set_autoSizeTextContainer_NormalArgs(Params_set_autoSizeTextContainer args);

        public delegate void set_lineLength_BeforeArgs(Params_set_lineLength args);

        public delegate void set_lineLength_NormalArgs(Params_set_lineLength args);

        public delegate void set_margin_BeforeArgs(Params_set_margin args);

        public delegate void set_margin_NormalArgs(Params_set_margin args);

        public delegate void set_maskType_BeforeArgs(Params_set_maskType args);

        public delegate void set_maskType_NormalArgs(Params_set_maskType args);

        public delegate void set_sortingLayerID_BeforeArgs(Params_set_sortingLayerID args);

        public delegate void set_sortingLayerID_NormalArgs(Params_set_sortingLayerID args);

        public delegate void set_sortingOrder_BeforeArgs(Params_set_sortingOrder args);

        public delegate void set_sortingOrder_NormalArgs(Params_set_sortingOrder args);

        public delegate void SetActiveSubMeshes_BeforeArgs(Params_SetActiveSubMeshes args);

        public delegate void SetActiveSubMeshes_NormalArgs(Params_SetActiveSubMeshes args);

        public delegate void SetAllDirty_BeforeArgs(Params_SetAllDirty args);

        public delegate void SetAllDirty_NormalArgs(Params_SetAllDirty args);

        public delegate void SetArraySizes_BeforeArgs(Params_SetArraySizes args);

        public delegate int SetArraySizes_NormalArgs(Params_SetArraySizes args);

        public delegate void SetCulling_BeforeArgs(Params_SetCulling args);

        public delegate void SetCulling_NormalArgs(Params_SetCulling args);

        public delegate void SetFaceColor_BeforeArgs(Params_SetFaceColor args);

        public delegate void SetFaceColor_NormalArgs(Params_SetFaceColor args);

        public delegate void SetLayoutDirty_BeforeArgs(Params_SetLayoutDirty args);

        public delegate void SetLayoutDirty_NormalArgs(Params_SetLayoutDirty args);

        public delegate void SetMask_MaskingTypes_BeforeArgs(Params_SetMask_MaskingTypes args);

        public delegate void SetMask_MaskingTypes_NormalArgs(Params_SetMask_MaskingTypes args);

        public delegate void SetMask_MaskingTypes_Vector4_BeforeArgs(Params_SetMask_MaskingTypes_Vector4 args);

        public delegate void SetMask_MaskingTypes_Vector4_float_float_BeforeArgs(
            Params_SetMask_MaskingTypes_Vector4_float_float args);

        public delegate void SetMask_MaskingTypes_Vector4_float_float_NormalArgs(
            Params_SetMask_MaskingTypes_Vector4_float_float args);

        public delegate void SetMask_MaskingTypes_Vector4_NormalArgs(Params_SetMask_MaskingTypes_Vector4 args);

        public delegate void SetMaskCoordinates_Vector4_BeforeArgs(Params_SetMaskCoordinates_Vector4 args);

        public delegate void SetMaskCoordinates_Vector4_float_float_BeforeArgs(
            Params_SetMaskCoordinates_Vector4_float_float args);

        public delegate void SetMaskCoordinates_Vector4_float_float_NormalArgs(
            Params_SetMaskCoordinates_Vector4_float_float args);

        public delegate void SetMaskCoordinates_Vector4_NormalArgs(Params_SetMaskCoordinates_Vector4 args);

        public delegate void SetMaterialDirty_BeforeArgs(Params_SetMaterialDirty args);

        public delegate void SetMaterialDirty_NormalArgs(Params_SetMaterialDirty args);

        public delegate void SetMeshFilters_BeforeArgs(Params_SetMeshFilters args);

        public delegate void SetMeshFilters_NormalArgs(Params_SetMeshFilters args);

        public delegate void SetOutlineColor_BeforeArgs(Params_SetOutlineColor args);

        public delegate void SetOutlineColor_NormalArgs(Params_SetOutlineColor args);

        public delegate void SetOutlineThickness_BeforeArgs(Params_SetOutlineThickness args);

        public delegate void SetOutlineThickness_NormalArgs(Params_SetOutlineThickness args);

        public delegate void SetPerspectiveCorrection_BeforeArgs(Params_SetPerspectiveCorrection args);

        public delegate void SetPerspectiveCorrection_NormalArgs(Params_SetPerspectiveCorrection args);

        public delegate void SetShaderDepth_BeforeArgs(Params_SetShaderDepth args);

        public delegate void SetShaderDepth_NormalArgs(Params_SetShaderDepth args);

        public delegate void SetSharedMaterial_BeforeArgs(Params_SetSharedMaterial args);

        public delegate void SetSharedMaterial_NormalArgs(Params_SetSharedMaterial args);

        public delegate void SetSharedMaterials_BeforeArgs(Params_SetSharedMaterials args);

        public delegate void SetSharedMaterials_NormalArgs(Params_SetSharedMaterials args);

        public delegate void SetVerticesDirty_BeforeArgs(Params_SetVerticesDirty args);

        public delegate void SetVerticesDirty_NormalArgs(Params_SetVerticesDirty args);

        public delegate void UpdateEnvMapMatrix_BeforeArgs(Params_UpdateEnvMapMatrix args);

        public delegate void UpdateEnvMapMatrix_NormalArgs(Params_UpdateEnvMapMatrix args);

        public delegate void UpdateFontAsset_BeforeArgs(Params_UpdateFontAsset args);

        public delegate void UpdateFontAsset_NormalArgs(Params_UpdateFontAsset args);

        public delegate void UpdateGeometry_BeforeArgs(Params_UpdateGeometry args);

        public delegate void UpdateGeometry_NormalArgs(Params_UpdateGeometry args);

        public delegate void UpdateMask_BeforeArgs(Params_UpdateMask args);

        public delegate void UpdateMask_NormalArgs(Params_UpdateMask args);

        public delegate void UpdateMaterial_BeforeArgs(Params_UpdateMaterial args);

        public delegate void UpdateMaterial_NormalArgs(Params_UpdateMaterial args);

        public delegate void UpdateMeshPadding_BeforeArgs(Params_UpdateMeshPadding args);

        public delegate void UpdateMeshPadding_NormalArgs(Params_UpdateMeshPadding args);

        public delegate void UpdateSDFScale_BeforeArgs(Params_UpdateSDFScale args);

        public delegate void UpdateSDFScale_NormalArgs(Params_UpdateSDFScale args);

        public delegate void UpdateVertexData_BeforeArgs(Params_UpdateVertexData args);

        public delegate void UpdateVertexData_NormalArgs(Params_UpdateVertexData args);

        public delegate void UpdateVertexData_TMP_VertexDataUpdateFlags_BeforeArgs(
            Params_UpdateVertexData_TMP_VertexDataUpdateFlags args);

        public delegate void UpdateVertexData_TMP_VertexDataUpdateFlags_NormalArgs(
            Params_UpdateVertexData_TMP_VertexDataUpdateFlags args);

        public sealed class Params_Awake
        {
            public TextMeshPro self;
        }

        public sealed class Params_OnEnable
        {
            public TextMeshPro self;
        }

        public sealed class Params_OnDisable
        {
            public TextMeshPro self;
        }

        public sealed class Params_OnDestroy
        {
            public TextMeshPro self;
        }

        public sealed class Params_LoadFontAsset
        {
            public TextMeshPro self;
        }

        public sealed class Params_UpdateEnvMapMatrix
        {
            public TextMeshPro self;
        }

        public sealed class Params_SetMask_MaskingTypes
        {
            public MaskingTypes maskType;
            public TextMeshPro self;
        }

        public sealed class Params_SetMaskCoordinates_Vector4
        {
            public Vector4 coords;
            public TextMeshPro self;
        }

        public sealed class Params_SetMaskCoordinates_Vector4_float_float
        {
            public Vector4 coords;
            public TextMeshPro self;
            public float softX;
            public float softY;
        }

        public sealed class Params_EnableMasking
        {
            public TextMeshPro self;
        }

        public sealed class Params_DisableMasking
        {
            public TextMeshPro self;
        }

        public sealed class Params_UpdateMask
        {
            public TextMeshPro self;
        }

        public sealed class Params_GetMaterial
        {
            public Material mat;
            public TextMeshPro self;
        }

        public sealed class Params_GetMaterials
        {
            public Material[] mats;
            public TextMeshPro self;
        }

        public sealed class Params_SetSharedMaterial
        {
            public Material mat;
            public TextMeshPro self;
        }

        public sealed class Params_GetSharedMaterials
        {
            public TextMeshPro self;
        }

        public sealed class Params_SetSharedMaterials
        {
            public Material[] materials;
            public TextMeshPro self;
        }

        public sealed class Params_SetOutlineThickness
        {
            public TextMeshPro self;
            public float thickness;
        }

        public sealed class Params_SetFaceColor
        {
            public Color32 color;
            public TextMeshPro self;
        }

        public sealed class Params_SetOutlineColor
        {
            public Color32 color;
            public TextMeshPro self;
        }

        public sealed class Params_CreateMaterialInstance
        {
            public TextMeshPro self;
        }

        public sealed class Params_SetShaderDepth
        {
            public TextMeshPro self;
        }

        public sealed class Params_SetCulling
        {
            public TextMeshPro self;
        }

        public sealed class Params_SetPerspectiveCorrection
        {
            public TextMeshPro self;
        }

        public sealed class Params_GetPaddingForMaterial_Material
        {
            public Material mat;
            public TextMeshPro self;
        }

        public sealed class Params_GetPaddingForMaterial
        {
            public TextMeshPro self;
        }

        public sealed class Params_SetArraySizes
        {
            public int[] chars;
            public TextMeshPro self;
        }

        public sealed class Params_ComputeMarginSize
        {
            public TextMeshPro self;
        }

        public sealed class Params_OnDidApplyAnimationProperties
        {
            public TextMeshPro self;
        }

        public sealed class Params_OnTransformParentChanged
        {
            public TextMeshPro self;
        }

        public sealed class Params_OnRectTransformDimensionsChange
        {
            public TextMeshPro self;
        }

        public sealed class Params_LateUpdate
        {
            public TextMeshPro self;
        }

        public sealed class Params_OnPreRenderObject
        {
            public TextMeshPro self;
        }

        public sealed class Params_GenerateTextMesh
        {
            public TextMeshPro self;
        }

        public sealed class Params_GetTextContainerLocalCorners
        {
            public TextMeshPro self;
        }

        public sealed class Params_ClearMesh
        {
            public TextMeshPro self;
            public bool updateMesh;
        }

        public sealed class Params_SetMeshFilters
        {
            public TextMeshPro self;
            public bool state;
        }

        public sealed class Params_SetActiveSubMeshes
        {
            public TextMeshPro self;
            public bool state;
        }

        public sealed class Params_GetCompoundBounds
        {
            public TextMeshPro self;
        }

        public sealed class Params_UpdateSDFScale
        {
            public float lossyScale;
            public TextMeshPro self;
        }

        public sealed class Params_AdjustLineOffset
        {
            public int endIndex;
            public float offset;
            public TextMeshPro self;
            public int startIndex;
        }

        public sealed class Params_get_lineLength
        {
            public TextMeshPro self;
        }

        public sealed class Params_set_lineLength
        {
            public TextMeshPro self;
            public float value;
        }

        public sealed class Params_get_margin
        {
            public TextMeshPro self;
        }

        public sealed class Params_set_margin
        {
            public TextMeshPro self;
            public Vector4 value;
        }

        public sealed class Params_get_sortingLayerID
        {
            public TextMeshPro self;
        }

        public sealed class Params_set_sortingLayerID
        {
            public TextMeshPro self;
            public int value;
        }

        public sealed class Params_get_sortingOrder
        {
            public TextMeshPro self;
        }

        public sealed class Params_set_sortingOrder
        {
            public TextMeshPro self;
            public int value;
        }

        public sealed class Params_get_autoSizeTextContainer
        {
            public TextMeshPro self;
        }

        public sealed class Params_set_autoSizeTextContainer
        {
            public TextMeshPro self;
            public bool value;
        }

        public sealed class Params_get_textContainer
        {
            public TextMeshPro self;
        }

        public sealed class Params_get_transform
        {
            public TextMeshPro self;
        }

        public sealed class Params_get_renderer
        {
            public TextMeshPro self;
        }

        public sealed class Params_get_mesh
        {
            public TextMeshPro self;
        }

        public sealed class Params_get_meshFilter
        {
            public TextMeshPro self;
        }

        public sealed class Params_get_maskType
        {
            public TextMeshPro self;
        }

        public sealed class Params_set_maskType
        {
            public TextMeshPro self;
            public MaskingTypes value;
        }

        public sealed class Params_SetMask_MaskingTypes_Vector4
        {
            public Vector4 maskCoords;
            public TextMeshPro self;
            public MaskingTypes type;
        }

        public sealed class Params_SetMask_MaskingTypes_Vector4_float_float
        {
            public Vector4 maskCoords;
            public TextMeshPro self;
            public float softnessX;
            public float softnessY;
            public MaskingTypes type;
        }

        public sealed class Params_SetVerticesDirty
        {
            public TextMeshPro self;
        }

        public sealed class Params_SetLayoutDirty
        {
            public TextMeshPro self;
        }

        public sealed class Params_SetMaterialDirty
        {
            public TextMeshPro self;
        }

        public sealed class Params_SetAllDirty
        {
            public TextMeshPro self;
        }

        public sealed class Params_Rebuild
        {
            public TextMeshPro self;
            public CanvasUpdate update;
        }

        public sealed class Params_UpdateMaterial
        {
            public TextMeshPro self;
        }

        public sealed class Params_UpdateMeshPadding
        {
            public TextMeshPro self;
        }

        public sealed class Params_ForceMeshUpdate
        {
            public TextMeshPro self;
        }

        public sealed class Params_ForceMeshUpdate_bool
        {
            public bool ignoreInactive;
            public TextMeshPro self;
        }

        public sealed class Params_GetTextInfo
        {
            public TextMeshPro self;
            public string text;
        }

        public sealed class Params_UpdateGeometry
        {
            public int index;
            public Mesh mesh;
            public TextMeshPro self;
        }

        public sealed class Params_UpdateVertexData_TMP_VertexDataUpdateFlags
        {
            public TMP_VertexDataUpdateFlags flags;
            public TextMeshPro self;
        }

        public sealed class Params_UpdateVertexData
        {
            public TextMeshPro self;
        }

        public sealed class Params_UpdateFontAsset
        {
            public TextMeshPro self;
        }

        public sealed class Params_CalculateLayoutInputHorizontal
        {
            public TextMeshPro self;
        }

        public sealed class Params_CalculateLayoutInputVertical
        {
            public TextMeshPro self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.LoadFontAsset_BeforeArgs LoadFontAsset
        {
            add
            {
                HookHandler._beforeLoadFontAsset += value;
                HookHandler.HookLoadFontAsset();
            }
            remove => HookHandler._beforeLoadFontAsset -= value;
        }

        public static event Delegates.UpdateEnvMapMatrix_BeforeArgs UpdateEnvMapMatrix
        {
            add
            {
                HookHandler._beforeUpdateEnvMapMatrix += value;
                HookHandler.HookUpdateEnvMapMatrix();
            }
            remove => HookHandler._beforeUpdateEnvMapMatrix -= value;
        }

        public static event Delegates.SetMask_MaskingTypes_BeforeArgs SetMask_MaskingTypes
        {
            add
            {
                HookHandler._beforeSetMask_MaskingTypes += value;
                HookHandler.HookSetMask_MaskingTypes();
            }
            remove => HookHandler._beforeSetMask_MaskingTypes -= value;
        }

        public static event Delegates.SetMaskCoordinates_Vector4_BeforeArgs SetMaskCoordinates_Vector4
        {
            add
            {
                HookHandler._beforeSetMaskCoordinates_Vector4 += value;
                HookHandler.HookSetMaskCoordinates_Vector4();
            }
            remove => HookHandler._beforeSetMaskCoordinates_Vector4 -= value;
        }

        public static event Delegates.SetMaskCoordinates_Vector4_float_float_BeforeArgs
            SetMaskCoordinates_Vector4_float_float
            {
                add
                {
                    HookHandler._beforeSetMaskCoordinates_Vector4_float_float += value;
                    HookHandler.HookSetMaskCoordinates_Vector4_float_float();
                }
                remove => HookHandler._beforeSetMaskCoordinates_Vector4_float_float -= value;
            }

        public static event Delegates.EnableMasking_BeforeArgs EnableMasking
        {
            add
            {
                HookHandler._beforeEnableMasking += value;
                HookHandler.HookEnableMasking();
            }
            remove => HookHandler._beforeEnableMasking -= value;
        }

        public static event Delegates.DisableMasking_BeforeArgs DisableMasking
        {
            add
            {
                HookHandler._beforeDisableMasking += value;
                HookHandler.HookDisableMasking();
            }
            remove => HookHandler._beforeDisableMasking -= value;
        }

        public static event Delegates.UpdateMask_BeforeArgs UpdateMask
        {
            add
            {
                HookHandler._beforeUpdateMask += value;
                HookHandler.HookUpdateMask();
            }
            remove => HookHandler._beforeUpdateMask -= value;
        }

        public static event Delegates.GetMaterial_BeforeArgs GetMaterial
        {
            add
            {
                HookHandler._beforeGetMaterial += value;
                HookHandler.HookGetMaterial();
            }
            remove => HookHandler._beforeGetMaterial -= value;
        }

        public static event Delegates.GetMaterials_BeforeArgs GetMaterials
        {
            add
            {
                HookHandler._beforeGetMaterials += value;
                HookHandler.HookGetMaterials();
            }
            remove => HookHandler._beforeGetMaterials -= value;
        }

        public static event Delegates.SetSharedMaterial_BeforeArgs SetSharedMaterial
        {
            add
            {
                HookHandler._beforeSetSharedMaterial += value;
                HookHandler.HookSetSharedMaterial();
            }
            remove => HookHandler._beforeSetSharedMaterial -= value;
        }

        public static event Delegates.GetSharedMaterials_BeforeArgs GetSharedMaterials
        {
            add
            {
                HookHandler._beforeGetSharedMaterials += value;
                HookHandler.HookGetSharedMaterials();
            }
            remove => HookHandler._beforeGetSharedMaterials -= value;
        }

        public static event Delegates.SetSharedMaterials_BeforeArgs SetSharedMaterials
        {
            add
            {
                HookHandler._beforeSetSharedMaterials += value;
                HookHandler.HookSetSharedMaterials();
            }
            remove => HookHandler._beforeSetSharedMaterials -= value;
        }

        public static event Delegates.SetOutlineThickness_BeforeArgs SetOutlineThickness
        {
            add
            {
                HookHandler._beforeSetOutlineThickness += value;
                HookHandler.HookSetOutlineThickness();
            }
            remove => HookHandler._beforeSetOutlineThickness -= value;
        }

        public static event Delegates.SetFaceColor_BeforeArgs SetFaceColor
        {
            add
            {
                HookHandler._beforeSetFaceColor += value;
                HookHandler.HookSetFaceColor();
            }
            remove => HookHandler._beforeSetFaceColor -= value;
        }

        public static event Delegates.SetOutlineColor_BeforeArgs SetOutlineColor
        {
            add
            {
                HookHandler._beforeSetOutlineColor += value;
                HookHandler.HookSetOutlineColor();
            }
            remove => HookHandler._beforeSetOutlineColor -= value;
        }

        public static event Delegates.CreateMaterialInstance_BeforeArgs CreateMaterialInstance
        {
            add
            {
                HookHandler._beforeCreateMaterialInstance += value;
                HookHandler.HookCreateMaterialInstance();
            }
            remove => HookHandler._beforeCreateMaterialInstance -= value;
        }

        public static event Delegates.SetShaderDepth_BeforeArgs SetShaderDepth
        {
            add
            {
                HookHandler._beforeSetShaderDepth += value;
                HookHandler.HookSetShaderDepth();
            }
            remove => HookHandler._beforeSetShaderDepth -= value;
        }

        public static event Delegates.SetCulling_BeforeArgs SetCulling
        {
            add
            {
                HookHandler._beforeSetCulling += value;
                HookHandler.HookSetCulling();
            }
            remove => HookHandler._beforeSetCulling -= value;
        }

        public static event Delegates.SetPerspectiveCorrection_BeforeArgs SetPerspectiveCorrection
        {
            add
            {
                HookHandler._beforeSetPerspectiveCorrection += value;
                HookHandler.HookSetPerspectiveCorrection();
            }
            remove => HookHandler._beforeSetPerspectiveCorrection -= value;
        }

        public static event Delegates.GetPaddingForMaterial_Material_BeforeArgs GetPaddingForMaterial_Material
        {
            add
            {
                HookHandler._beforeGetPaddingForMaterial_Material += value;
                HookHandler.HookGetPaddingForMaterial_Material();
            }
            remove => HookHandler._beforeGetPaddingForMaterial_Material -= value;
        }

        public static event Delegates.GetPaddingForMaterial_BeforeArgs GetPaddingForMaterial
        {
            add
            {
                HookHandler._beforeGetPaddingForMaterial += value;
                HookHandler.HookGetPaddingForMaterial();
            }
            remove => HookHandler._beforeGetPaddingForMaterial -= value;
        }

        public static event Delegates.SetArraySizes_BeforeArgs SetArraySizes
        {
            add
            {
                HookHandler._beforeSetArraySizes += value;
                HookHandler.HookSetArraySizes();
            }
            remove => HookHandler._beforeSetArraySizes -= value;
        }

        public static event Delegates.ComputeMarginSize_BeforeArgs ComputeMarginSize
        {
            add
            {
                HookHandler._beforeComputeMarginSize += value;
                HookHandler.HookComputeMarginSize();
            }
            remove => HookHandler._beforeComputeMarginSize -= value;
        }

        public static event Delegates.OnDidApplyAnimationProperties_BeforeArgs OnDidApplyAnimationProperties
        {
            add
            {
                HookHandler._beforeOnDidApplyAnimationProperties += value;
                HookHandler.HookOnDidApplyAnimationProperties();
            }
            remove => HookHandler._beforeOnDidApplyAnimationProperties -= value;
        }

        public static event Delegates.OnTransformParentChanged_BeforeArgs OnTransformParentChanged
        {
            add
            {
                HookHandler._beforeOnTransformParentChanged += value;
                HookHandler.HookOnTransformParentChanged();
            }
            remove => HookHandler._beforeOnTransformParentChanged -= value;
        }

        public static event Delegates.OnRectTransformDimensionsChange_BeforeArgs OnRectTransformDimensionsChange
        {
            add
            {
                HookHandler._beforeOnRectTransformDimensionsChange += value;
                HookHandler.HookOnRectTransformDimensionsChange();
            }
            remove => HookHandler._beforeOnRectTransformDimensionsChange -= value;
        }

        public static event Delegates.LateUpdate_BeforeArgs LateUpdate
        {
            add
            {
                HookHandler._beforeLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._beforeLateUpdate -= value;
        }

        public static event Delegates.OnPreRenderObject_BeforeArgs OnPreRenderObject
        {
            add
            {
                HookHandler._beforeOnPreRenderObject += value;
                HookHandler.HookOnPreRenderObject();
            }
            remove => HookHandler._beforeOnPreRenderObject -= value;
        }

        public static event Delegates.GenerateTextMesh_BeforeArgs GenerateTextMesh
        {
            add
            {
                HookHandler._beforeGenerateTextMesh += value;
                HookHandler.HookGenerateTextMesh();
            }
            remove => HookHandler._beforeGenerateTextMesh -= value;
        }

        public static event Delegates.GetTextContainerLocalCorners_BeforeArgs GetTextContainerLocalCorners
        {
            add
            {
                HookHandler._beforeGetTextContainerLocalCorners += value;
                HookHandler.HookGetTextContainerLocalCorners();
            }
            remove => HookHandler._beforeGetTextContainerLocalCorners -= value;
        }

        public static event Delegates.ClearMesh_BeforeArgs ClearMesh
        {
            add
            {
                HookHandler._beforeClearMesh += value;
                HookHandler.HookClearMesh();
            }
            remove => HookHandler._beforeClearMesh -= value;
        }

        public static event Delegates.SetMeshFilters_BeforeArgs SetMeshFilters
        {
            add
            {
                HookHandler._beforeSetMeshFilters += value;
                HookHandler.HookSetMeshFilters();
            }
            remove => HookHandler._beforeSetMeshFilters -= value;
        }

        public static event Delegates.SetActiveSubMeshes_BeforeArgs SetActiveSubMeshes
        {
            add
            {
                HookHandler._beforeSetActiveSubMeshes += value;
                HookHandler.HookSetActiveSubMeshes();
            }
            remove => HookHandler._beforeSetActiveSubMeshes -= value;
        }

        public static event Delegates.GetCompoundBounds_BeforeArgs GetCompoundBounds
        {
            add
            {
                HookHandler._beforeGetCompoundBounds += value;
                HookHandler.HookGetCompoundBounds();
            }
            remove => HookHandler._beforeGetCompoundBounds -= value;
        }

        public static event Delegates.UpdateSDFScale_BeforeArgs UpdateSDFScale
        {
            add
            {
                HookHandler._beforeUpdateSDFScale += value;
                HookHandler.HookUpdateSDFScale();
            }
            remove => HookHandler._beforeUpdateSDFScale -= value;
        }

        public static event Delegates.AdjustLineOffset_BeforeArgs AdjustLineOffset
        {
            add
            {
                HookHandler._beforeAdjustLineOffset += value;
                HookHandler.HookAdjustLineOffset();
            }
            remove => HookHandler._beforeAdjustLineOffset -= value;
        }

        public static event Delegates.get_lineLength_BeforeArgs get_lineLength
        {
            add
            {
                HookHandler._beforeget_lineLength += value;
                HookHandler.Hookget_lineLength();
            }
            remove => HookHandler._beforeget_lineLength -= value;
        }

        public static event Delegates.set_lineLength_BeforeArgs set_lineLength
        {
            add
            {
                HookHandler._beforeset_lineLength += value;
                HookHandler.Hookset_lineLength();
            }
            remove => HookHandler._beforeset_lineLength -= value;
        }

        public static event Delegates.get_margin_BeforeArgs get_margin
        {
            add
            {
                HookHandler._beforeget_margin += value;
                HookHandler.Hookget_margin();
            }
            remove => HookHandler._beforeget_margin -= value;
        }

        public static event Delegates.set_margin_BeforeArgs set_margin
        {
            add
            {
                HookHandler._beforeset_margin += value;
                HookHandler.Hookset_margin();
            }
            remove => HookHandler._beforeset_margin -= value;
        }

        public static event Delegates.get_sortingLayerID_BeforeArgs get_sortingLayerID
        {
            add
            {
                HookHandler._beforeget_sortingLayerID += value;
                HookHandler.Hookget_sortingLayerID();
            }
            remove => HookHandler._beforeget_sortingLayerID -= value;
        }

        public static event Delegates.set_sortingLayerID_BeforeArgs set_sortingLayerID
        {
            add
            {
                HookHandler._beforeset_sortingLayerID += value;
                HookHandler.Hookset_sortingLayerID();
            }
            remove => HookHandler._beforeset_sortingLayerID -= value;
        }

        public static event Delegates.get_sortingOrder_BeforeArgs get_sortingOrder
        {
            add
            {
                HookHandler._beforeget_sortingOrder += value;
                HookHandler.Hookget_sortingOrder();
            }
            remove => HookHandler._beforeget_sortingOrder -= value;
        }

        public static event Delegates.set_sortingOrder_BeforeArgs set_sortingOrder
        {
            add
            {
                HookHandler._beforeset_sortingOrder += value;
                HookHandler.Hookset_sortingOrder();
            }
            remove => HookHandler._beforeset_sortingOrder -= value;
        }

        public static event Delegates.get_autoSizeTextContainer_BeforeArgs get_autoSizeTextContainer
        {
            add
            {
                HookHandler._beforeget_autoSizeTextContainer += value;
                HookHandler.Hookget_autoSizeTextContainer();
            }
            remove => HookHandler._beforeget_autoSizeTextContainer -= value;
        }

        public static event Delegates.set_autoSizeTextContainer_BeforeArgs set_autoSizeTextContainer
        {
            add
            {
                HookHandler._beforeset_autoSizeTextContainer += value;
                HookHandler.Hookset_autoSizeTextContainer();
            }
            remove => HookHandler._beforeset_autoSizeTextContainer -= value;
        }

        public static event Delegates.get_textContainer_BeforeArgs get_textContainer
        {
            add
            {
                HookHandler._beforeget_textContainer += value;
                HookHandler.Hookget_textContainer();
            }
            remove => HookHandler._beforeget_textContainer -= value;
        }

        public static event Delegates.get_transform_BeforeArgs get_transform
        {
            add
            {
                HookHandler._beforeget_transform += value;
                HookHandler.Hookget_transform();
            }
            remove => HookHandler._beforeget_transform -= value;
        }

        public static event Delegates.get_renderer_BeforeArgs get_renderer
        {
            add
            {
                HookHandler._beforeget_renderer += value;
                HookHandler.Hookget_renderer();
            }
            remove => HookHandler._beforeget_renderer -= value;
        }

        public static event Delegates.get_mesh_BeforeArgs get_mesh
        {
            add
            {
                HookHandler._beforeget_mesh += value;
                HookHandler.Hookget_mesh();
            }
            remove => HookHandler._beforeget_mesh -= value;
        }

        public static event Delegates.get_meshFilter_BeforeArgs get_meshFilter
        {
            add
            {
                HookHandler._beforeget_meshFilter += value;
                HookHandler.Hookget_meshFilter();
            }
            remove => HookHandler._beforeget_meshFilter -= value;
        }

        public static event Delegates.get_maskType_BeforeArgs get_maskType
        {
            add
            {
                HookHandler._beforeget_maskType += value;
                HookHandler.Hookget_maskType();
            }
            remove => HookHandler._beforeget_maskType -= value;
        }

        public static event Delegates.set_maskType_BeforeArgs set_maskType
        {
            add
            {
                HookHandler._beforeset_maskType += value;
                HookHandler.Hookset_maskType();
            }
            remove => HookHandler._beforeset_maskType -= value;
        }

        public static event Delegates.SetMask_MaskingTypes_Vector4_BeforeArgs SetMask_MaskingTypes_Vector4
        {
            add
            {
                HookHandler._beforeSetMask_MaskingTypes_Vector4 += value;
                HookHandler.HookSetMask_MaskingTypes_Vector4();
            }
            remove => HookHandler._beforeSetMask_MaskingTypes_Vector4 -= value;
        }

        public static event Delegates.SetMask_MaskingTypes_Vector4_float_float_BeforeArgs
            SetMask_MaskingTypes_Vector4_float_float
            {
                add
                {
                    HookHandler._beforeSetMask_MaskingTypes_Vector4_float_float += value;
                    HookHandler.HookSetMask_MaskingTypes_Vector4_float_float();
                }
                remove => HookHandler._beforeSetMask_MaskingTypes_Vector4_float_float -= value;
            }

        public static event Delegates.SetVerticesDirty_BeforeArgs SetVerticesDirty
        {
            add
            {
                HookHandler._beforeSetVerticesDirty += value;
                HookHandler.HookSetVerticesDirty();
            }
            remove => HookHandler._beforeSetVerticesDirty -= value;
        }

        public static event Delegates.SetLayoutDirty_BeforeArgs SetLayoutDirty
        {
            add
            {
                HookHandler._beforeSetLayoutDirty += value;
                HookHandler.HookSetLayoutDirty();
            }
            remove => HookHandler._beforeSetLayoutDirty -= value;
        }

        public static event Delegates.SetMaterialDirty_BeforeArgs SetMaterialDirty
        {
            add
            {
                HookHandler._beforeSetMaterialDirty += value;
                HookHandler.HookSetMaterialDirty();
            }
            remove => HookHandler._beforeSetMaterialDirty -= value;
        }

        public static event Delegates.SetAllDirty_BeforeArgs SetAllDirty
        {
            add
            {
                HookHandler._beforeSetAllDirty += value;
                HookHandler.HookSetAllDirty();
            }
            remove => HookHandler._beforeSetAllDirty -= value;
        }

        public static event Delegates.Rebuild_BeforeArgs Rebuild
        {
            add
            {
                HookHandler._beforeRebuild += value;
                HookHandler.HookRebuild();
            }
            remove => HookHandler._beforeRebuild -= value;
        }

        public static event Delegates.UpdateMaterial_BeforeArgs UpdateMaterial
        {
            add
            {
                HookHandler._beforeUpdateMaterial += value;
                HookHandler.HookUpdateMaterial();
            }
            remove => HookHandler._beforeUpdateMaterial -= value;
        }

        public static event Delegates.UpdateMeshPadding_BeforeArgs UpdateMeshPadding
        {
            add
            {
                HookHandler._beforeUpdateMeshPadding += value;
                HookHandler.HookUpdateMeshPadding();
            }
            remove => HookHandler._beforeUpdateMeshPadding -= value;
        }

        public static event Delegates.ForceMeshUpdate_BeforeArgs ForceMeshUpdate
        {
            add
            {
                HookHandler._beforeForceMeshUpdate += value;
                HookHandler.HookForceMeshUpdate();
            }
            remove => HookHandler._beforeForceMeshUpdate -= value;
        }

        public static event Delegates.ForceMeshUpdate_bool_BeforeArgs ForceMeshUpdate_bool
        {
            add
            {
                HookHandler._beforeForceMeshUpdate_bool += value;
                HookHandler.HookForceMeshUpdate_bool();
            }
            remove => HookHandler._beforeForceMeshUpdate_bool -= value;
        }

        public static event Delegates.GetTextInfo_BeforeArgs GetTextInfo
        {
            add
            {
                HookHandler._beforeGetTextInfo += value;
                HookHandler.HookGetTextInfo();
            }
            remove => HookHandler._beforeGetTextInfo -= value;
        }

        public static event Delegates.UpdateGeometry_BeforeArgs UpdateGeometry
        {
            add
            {
                HookHandler._beforeUpdateGeometry += value;
                HookHandler.HookUpdateGeometry();
            }
            remove => HookHandler._beforeUpdateGeometry -= value;
        }

        public static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_BeforeArgs
            UpdateVertexData_TMP_VertexDataUpdateFlags
            {
                add
                {
                    HookHandler._beforeUpdateVertexData_TMP_VertexDataUpdateFlags += value;
                    HookHandler.HookUpdateVertexData_TMP_VertexDataUpdateFlags();
                }
                remove => HookHandler._beforeUpdateVertexData_TMP_VertexDataUpdateFlags -= value;
            }

        public static event Delegates.UpdateVertexData_BeforeArgs UpdateVertexData
        {
            add
            {
                HookHandler._beforeUpdateVertexData += value;
                HookHandler.HookUpdateVertexData();
            }
            remove => HookHandler._beforeUpdateVertexData -= value;
        }

        public static event Delegates.UpdateFontAsset_BeforeArgs UpdateFontAsset
        {
            add
            {
                HookHandler._beforeUpdateFontAsset += value;
                HookHandler.HookUpdateFontAsset();
            }
            remove => HookHandler._beforeUpdateFontAsset -= value;
        }

        public static event Delegates.CalculateLayoutInputHorizontal_BeforeArgs CalculateLayoutInputHorizontal
        {
            add
            {
                HookHandler._beforeCalculateLayoutInputHorizontal += value;
                HookHandler.HookCalculateLayoutInputHorizontal();
            }
            remove => HookHandler._beforeCalculateLayoutInputHorizontal -= value;
        }

        public static event Delegates.CalculateLayoutInputVertical_BeforeArgs CalculateLayoutInputVertical
        {
            add
            {
                HookHandler._beforeCalculateLayoutInputVertical += value;
                HookHandler.HookCalculateLayoutInputVertical();
            }
            remove => HookHandler._beforeCalculateLayoutInputVertical -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.LoadFontAsset_NormalArgs LoadFontAsset
        {
            add
            {
                HookHandler._afterLoadFontAsset += value;
                HookHandler.HookLoadFontAsset();
            }
            remove => HookHandler._afterLoadFontAsset -= value;
        }

        public static event Delegates.UpdateEnvMapMatrix_NormalArgs UpdateEnvMapMatrix
        {
            add
            {
                HookHandler._afterUpdateEnvMapMatrix += value;
                HookHandler.HookUpdateEnvMapMatrix();
            }
            remove => HookHandler._afterUpdateEnvMapMatrix -= value;
        }

        public static event Delegates.SetMask_MaskingTypes_NormalArgs SetMask_MaskingTypes
        {
            add
            {
                HookHandler._afterSetMask_MaskingTypes += value;
                HookHandler.HookSetMask_MaskingTypes();
            }
            remove => HookHandler._afterSetMask_MaskingTypes -= value;
        }

        public static event Delegates.SetMaskCoordinates_Vector4_NormalArgs SetMaskCoordinates_Vector4
        {
            add
            {
                HookHandler._afterSetMaskCoordinates_Vector4 += value;
                HookHandler.HookSetMaskCoordinates_Vector4();
            }
            remove => HookHandler._afterSetMaskCoordinates_Vector4 -= value;
        }

        public static event Delegates.SetMaskCoordinates_Vector4_float_float_NormalArgs
            SetMaskCoordinates_Vector4_float_float
            {
                add
                {
                    HookHandler._afterSetMaskCoordinates_Vector4_float_float += value;
                    HookHandler.HookSetMaskCoordinates_Vector4_float_float();
                }
                remove => HookHandler._afterSetMaskCoordinates_Vector4_float_float -= value;
            }

        public static event Delegates.EnableMasking_NormalArgs EnableMasking
        {
            add
            {
                HookHandler._afterEnableMasking += value;
                HookHandler.HookEnableMasking();
            }
            remove => HookHandler._afterEnableMasking -= value;
        }

        public static event Delegates.DisableMasking_NormalArgs DisableMasking
        {
            add
            {
                HookHandler._afterDisableMasking += value;
                HookHandler.HookDisableMasking();
            }
            remove => HookHandler._afterDisableMasking -= value;
        }

        public static event Delegates.UpdateMask_NormalArgs UpdateMask
        {
            add
            {
                HookHandler._afterUpdateMask += value;
                HookHandler.HookUpdateMask();
            }
            remove => HookHandler._afterUpdateMask -= value;
        }

        public static event Delegates.GetMaterial_NormalArgs GetMaterial
        {
            add
            {
                HookHandler._afterGetMaterial += value;
                HookHandler.HookGetMaterial();
            }
            remove => HookHandler._afterGetMaterial -= value;
        }

        public static event Delegates.GetMaterials_NormalArgs GetMaterials
        {
            add
            {
                HookHandler._afterGetMaterials += value;
                HookHandler.HookGetMaterials();
            }
            remove => HookHandler._afterGetMaterials -= value;
        }

        public static event Delegates.SetSharedMaterial_NormalArgs SetSharedMaterial
        {
            add
            {
                HookHandler._afterSetSharedMaterial += value;
                HookHandler.HookSetSharedMaterial();
            }
            remove => HookHandler._afterSetSharedMaterial -= value;
        }

        public static event Delegates.GetSharedMaterials_NormalArgs GetSharedMaterials
        {
            add
            {
                HookHandler._afterGetSharedMaterials += value;
                HookHandler.HookGetSharedMaterials();
            }
            remove => HookHandler._afterGetSharedMaterials -= value;
        }

        public static event Delegates.SetSharedMaterials_NormalArgs SetSharedMaterials
        {
            add
            {
                HookHandler._afterSetSharedMaterials += value;
                HookHandler.HookSetSharedMaterials();
            }
            remove => HookHandler._afterSetSharedMaterials -= value;
        }

        public static event Delegates.SetOutlineThickness_NormalArgs SetOutlineThickness
        {
            add
            {
                HookHandler._afterSetOutlineThickness += value;
                HookHandler.HookSetOutlineThickness();
            }
            remove => HookHandler._afterSetOutlineThickness -= value;
        }

        public static event Delegates.SetFaceColor_NormalArgs SetFaceColor
        {
            add
            {
                HookHandler._afterSetFaceColor += value;
                HookHandler.HookSetFaceColor();
            }
            remove => HookHandler._afterSetFaceColor -= value;
        }

        public static event Delegates.SetOutlineColor_NormalArgs SetOutlineColor
        {
            add
            {
                HookHandler._afterSetOutlineColor += value;
                HookHandler.HookSetOutlineColor();
            }
            remove => HookHandler._afterSetOutlineColor -= value;
        }

        public static event Delegates.CreateMaterialInstance_NormalArgs CreateMaterialInstance
        {
            add
            {
                HookHandler._afterCreateMaterialInstance += value;
                HookHandler.HookCreateMaterialInstance();
            }
            remove => HookHandler._afterCreateMaterialInstance -= value;
        }

        public static event Delegates.SetShaderDepth_NormalArgs SetShaderDepth
        {
            add
            {
                HookHandler._afterSetShaderDepth += value;
                HookHandler.HookSetShaderDepth();
            }
            remove => HookHandler._afterSetShaderDepth -= value;
        }

        public static event Delegates.SetCulling_NormalArgs SetCulling
        {
            add
            {
                HookHandler._afterSetCulling += value;
                HookHandler.HookSetCulling();
            }
            remove => HookHandler._afterSetCulling -= value;
        }

        public static event Delegates.SetPerspectiveCorrection_NormalArgs SetPerspectiveCorrection
        {
            add
            {
                HookHandler._afterSetPerspectiveCorrection += value;
                HookHandler.HookSetPerspectiveCorrection();
            }
            remove => HookHandler._afterSetPerspectiveCorrection -= value;
        }

        public static event Delegates.GetPaddingForMaterial_Material_NormalArgs GetPaddingForMaterial_Material
        {
            add
            {
                HookHandler._afterGetPaddingForMaterial_Material += value;
                HookHandler.HookGetPaddingForMaterial_Material();
            }
            remove => HookHandler._afterGetPaddingForMaterial_Material -= value;
        }

        public static event Delegates.GetPaddingForMaterial_NormalArgs GetPaddingForMaterial
        {
            add
            {
                HookHandler._afterGetPaddingForMaterial += value;
                HookHandler.HookGetPaddingForMaterial();
            }
            remove => HookHandler._afterGetPaddingForMaterial -= value;
        }

        public static event Delegates.SetArraySizes_NormalArgs SetArraySizes
        {
            add
            {
                HookHandler._afterSetArraySizes += value;
                HookHandler.HookSetArraySizes();
            }
            remove => HookHandler._afterSetArraySizes -= value;
        }

        public static event Delegates.ComputeMarginSize_NormalArgs ComputeMarginSize
        {
            add
            {
                HookHandler._afterComputeMarginSize += value;
                HookHandler.HookComputeMarginSize();
            }
            remove => HookHandler._afterComputeMarginSize -= value;
        }

        public static event Delegates.OnDidApplyAnimationProperties_NormalArgs OnDidApplyAnimationProperties
        {
            add
            {
                HookHandler._afterOnDidApplyAnimationProperties += value;
                HookHandler.HookOnDidApplyAnimationProperties();
            }
            remove => HookHandler._afterOnDidApplyAnimationProperties -= value;
        }

        public static event Delegates.OnTransformParentChanged_NormalArgs OnTransformParentChanged
        {
            add
            {
                HookHandler._afterOnTransformParentChanged += value;
                HookHandler.HookOnTransformParentChanged();
            }
            remove => HookHandler._afterOnTransformParentChanged -= value;
        }

        public static event Delegates.OnRectTransformDimensionsChange_NormalArgs OnRectTransformDimensionsChange
        {
            add
            {
                HookHandler._afterOnRectTransformDimensionsChange += value;
                HookHandler.HookOnRectTransformDimensionsChange();
            }
            remove => HookHandler._afterOnRectTransformDimensionsChange -= value;
        }

        public static event Delegates.LateUpdate_NormalArgs LateUpdate
        {
            add
            {
                HookHandler._afterLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._afterLateUpdate -= value;
        }

        public static event Delegates.OnPreRenderObject_NormalArgs OnPreRenderObject
        {
            add
            {
                HookHandler._afterOnPreRenderObject += value;
                HookHandler.HookOnPreRenderObject();
            }
            remove => HookHandler._afterOnPreRenderObject -= value;
        }

        public static event Delegates.GenerateTextMesh_NormalArgs GenerateTextMesh
        {
            add
            {
                HookHandler._afterGenerateTextMesh += value;
                HookHandler.HookGenerateTextMesh();
            }
            remove => HookHandler._afterGenerateTextMesh -= value;
        }

        public static event Delegates.GetTextContainerLocalCorners_NormalArgs GetTextContainerLocalCorners
        {
            add
            {
                HookHandler._afterGetTextContainerLocalCorners += value;
                HookHandler.HookGetTextContainerLocalCorners();
            }
            remove => HookHandler._afterGetTextContainerLocalCorners -= value;
        }

        public static event Delegates.ClearMesh_NormalArgs ClearMesh
        {
            add
            {
                HookHandler._afterClearMesh += value;
                HookHandler.HookClearMesh();
            }
            remove => HookHandler._afterClearMesh -= value;
        }

        public static event Delegates.SetMeshFilters_NormalArgs SetMeshFilters
        {
            add
            {
                HookHandler._afterSetMeshFilters += value;
                HookHandler.HookSetMeshFilters();
            }
            remove => HookHandler._afterSetMeshFilters -= value;
        }

        public static event Delegates.SetActiveSubMeshes_NormalArgs SetActiveSubMeshes
        {
            add
            {
                HookHandler._afterSetActiveSubMeshes += value;
                HookHandler.HookSetActiveSubMeshes();
            }
            remove => HookHandler._afterSetActiveSubMeshes -= value;
        }

        public static event Delegates.GetCompoundBounds_NormalArgs GetCompoundBounds
        {
            add
            {
                HookHandler._afterGetCompoundBounds += value;
                HookHandler.HookGetCompoundBounds();
            }
            remove => HookHandler._afterGetCompoundBounds -= value;
        }

        public static event Delegates.UpdateSDFScale_NormalArgs UpdateSDFScale
        {
            add
            {
                HookHandler._afterUpdateSDFScale += value;
                HookHandler.HookUpdateSDFScale();
            }
            remove => HookHandler._afterUpdateSDFScale -= value;
        }

        public static event Delegates.AdjustLineOffset_NormalArgs AdjustLineOffset
        {
            add
            {
                HookHandler._afterAdjustLineOffset += value;
                HookHandler.HookAdjustLineOffset();
            }
            remove => HookHandler._afterAdjustLineOffset -= value;
        }

        public static event Delegates.get_lineLength_NormalArgs get_lineLength
        {
            add
            {
                HookHandler._afterget_lineLength += value;
                HookHandler.Hookget_lineLength();
            }
            remove => HookHandler._afterget_lineLength -= value;
        }

        public static event Delegates.set_lineLength_NormalArgs set_lineLength
        {
            add
            {
                HookHandler._afterset_lineLength += value;
                HookHandler.Hookset_lineLength();
            }
            remove => HookHandler._afterset_lineLength -= value;
        }

        public static event Delegates.get_margin_NormalArgs get_margin
        {
            add
            {
                HookHandler._afterget_margin += value;
                HookHandler.Hookget_margin();
            }
            remove => HookHandler._afterget_margin -= value;
        }

        public static event Delegates.set_margin_NormalArgs set_margin
        {
            add
            {
                HookHandler._afterset_margin += value;
                HookHandler.Hookset_margin();
            }
            remove => HookHandler._afterset_margin -= value;
        }

        public static event Delegates.get_sortingLayerID_NormalArgs get_sortingLayerID
        {
            add
            {
                HookHandler._afterget_sortingLayerID += value;
                HookHandler.Hookget_sortingLayerID();
            }
            remove => HookHandler._afterget_sortingLayerID -= value;
        }

        public static event Delegates.set_sortingLayerID_NormalArgs set_sortingLayerID
        {
            add
            {
                HookHandler._afterset_sortingLayerID += value;
                HookHandler.Hookset_sortingLayerID();
            }
            remove => HookHandler._afterset_sortingLayerID -= value;
        }

        public static event Delegates.get_sortingOrder_NormalArgs get_sortingOrder
        {
            add
            {
                HookHandler._afterget_sortingOrder += value;
                HookHandler.Hookget_sortingOrder();
            }
            remove => HookHandler._afterget_sortingOrder -= value;
        }

        public static event Delegates.set_sortingOrder_NormalArgs set_sortingOrder
        {
            add
            {
                HookHandler._afterset_sortingOrder += value;
                HookHandler.Hookset_sortingOrder();
            }
            remove => HookHandler._afterset_sortingOrder -= value;
        }

        public static event Delegates.get_autoSizeTextContainer_NormalArgs get_autoSizeTextContainer
        {
            add
            {
                HookHandler._afterget_autoSizeTextContainer += value;
                HookHandler.Hookget_autoSizeTextContainer();
            }
            remove => HookHandler._afterget_autoSizeTextContainer -= value;
        }

        public static event Delegates.set_autoSizeTextContainer_NormalArgs set_autoSizeTextContainer
        {
            add
            {
                HookHandler._afterset_autoSizeTextContainer += value;
                HookHandler.Hookset_autoSizeTextContainer();
            }
            remove => HookHandler._afterset_autoSizeTextContainer -= value;
        }

        public static event Delegates.get_textContainer_NormalArgs get_textContainer
        {
            add
            {
                HookHandler._afterget_textContainer += value;
                HookHandler.Hookget_textContainer();
            }
            remove => HookHandler._afterget_textContainer -= value;
        }

        public static event Delegates.get_transform_NormalArgs get_transform
        {
            add
            {
                HookHandler._afterget_transform += value;
                HookHandler.Hookget_transform();
            }
            remove => HookHandler._afterget_transform -= value;
        }

        public static event Delegates.get_renderer_NormalArgs get_renderer
        {
            add
            {
                HookHandler._afterget_renderer += value;
                HookHandler.Hookget_renderer();
            }
            remove => HookHandler._afterget_renderer -= value;
        }

        public static event Delegates.get_mesh_NormalArgs get_mesh
        {
            add
            {
                HookHandler._afterget_mesh += value;
                HookHandler.Hookget_mesh();
            }
            remove => HookHandler._afterget_mesh -= value;
        }

        public static event Delegates.get_meshFilter_NormalArgs get_meshFilter
        {
            add
            {
                HookHandler._afterget_meshFilter += value;
                HookHandler.Hookget_meshFilter();
            }
            remove => HookHandler._afterget_meshFilter -= value;
        }

        public static event Delegates.get_maskType_NormalArgs get_maskType
        {
            add
            {
                HookHandler._afterget_maskType += value;
                HookHandler.Hookget_maskType();
            }
            remove => HookHandler._afterget_maskType -= value;
        }

        public static event Delegates.set_maskType_NormalArgs set_maskType
        {
            add
            {
                HookHandler._afterset_maskType += value;
                HookHandler.Hookset_maskType();
            }
            remove => HookHandler._afterset_maskType -= value;
        }

        public static event Delegates.SetMask_MaskingTypes_Vector4_NormalArgs SetMask_MaskingTypes_Vector4
        {
            add
            {
                HookHandler._afterSetMask_MaskingTypes_Vector4 += value;
                HookHandler.HookSetMask_MaskingTypes_Vector4();
            }
            remove => HookHandler._afterSetMask_MaskingTypes_Vector4 -= value;
        }

        public static event Delegates.SetMask_MaskingTypes_Vector4_float_float_NormalArgs
            SetMask_MaskingTypes_Vector4_float_float
            {
                add
                {
                    HookHandler._afterSetMask_MaskingTypes_Vector4_float_float += value;
                    HookHandler.HookSetMask_MaskingTypes_Vector4_float_float();
                }
                remove => HookHandler._afterSetMask_MaskingTypes_Vector4_float_float -= value;
            }

        public static event Delegates.SetVerticesDirty_NormalArgs SetVerticesDirty
        {
            add
            {
                HookHandler._afterSetVerticesDirty += value;
                HookHandler.HookSetVerticesDirty();
            }
            remove => HookHandler._afterSetVerticesDirty -= value;
        }

        public static event Delegates.SetLayoutDirty_NormalArgs SetLayoutDirty
        {
            add
            {
                HookHandler._afterSetLayoutDirty += value;
                HookHandler.HookSetLayoutDirty();
            }
            remove => HookHandler._afterSetLayoutDirty -= value;
        }

        public static event Delegates.SetMaterialDirty_NormalArgs SetMaterialDirty
        {
            add
            {
                HookHandler._afterSetMaterialDirty += value;
                HookHandler.HookSetMaterialDirty();
            }
            remove => HookHandler._afterSetMaterialDirty -= value;
        }

        public static event Delegates.SetAllDirty_NormalArgs SetAllDirty
        {
            add
            {
                HookHandler._afterSetAllDirty += value;
                HookHandler.HookSetAllDirty();
            }
            remove => HookHandler._afterSetAllDirty -= value;
        }

        public static event Delegates.Rebuild_NormalArgs Rebuild
        {
            add
            {
                HookHandler._afterRebuild += value;
                HookHandler.HookRebuild();
            }
            remove => HookHandler._afterRebuild -= value;
        }

        public static event Delegates.UpdateMaterial_NormalArgs UpdateMaterial
        {
            add
            {
                HookHandler._afterUpdateMaterial += value;
                HookHandler.HookUpdateMaterial();
            }
            remove => HookHandler._afterUpdateMaterial -= value;
        }

        public static event Delegates.UpdateMeshPadding_NormalArgs UpdateMeshPadding
        {
            add
            {
                HookHandler._afterUpdateMeshPadding += value;
                HookHandler.HookUpdateMeshPadding();
            }
            remove => HookHandler._afterUpdateMeshPadding -= value;
        }

        public static event Delegates.ForceMeshUpdate_NormalArgs ForceMeshUpdate
        {
            add
            {
                HookHandler._afterForceMeshUpdate += value;
                HookHandler.HookForceMeshUpdate();
            }
            remove => HookHandler._afterForceMeshUpdate -= value;
        }

        public static event Delegates.ForceMeshUpdate_bool_NormalArgs ForceMeshUpdate_bool
        {
            add
            {
                HookHandler._afterForceMeshUpdate_bool += value;
                HookHandler.HookForceMeshUpdate_bool();
            }
            remove => HookHandler._afterForceMeshUpdate_bool -= value;
        }

        public static event Delegates.GetTextInfo_NormalArgs GetTextInfo
        {
            add
            {
                HookHandler._afterGetTextInfo += value;
                HookHandler.HookGetTextInfo();
            }
            remove => HookHandler._afterGetTextInfo -= value;
        }

        public static event Delegates.UpdateGeometry_NormalArgs UpdateGeometry
        {
            add
            {
                HookHandler._afterUpdateGeometry += value;
                HookHandler.HookUpdateGeometry();
            }
            remove => HookHandler._afterUpdateGeometry -= value;
        }

        public static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_NormalArgs
            UpdateVertexData_TMP_VertexDataUpdateFlags
            {
                add
                {
                    HookHandler._afterUpdateVertexData_TMP_VertexDataUpdateFlags += value;
                    HookHandler.HookUpdateVertexData_TMP_VertexDataUpdateFlags();
                }
                remove => HookHandler._afterUpdateVertexData_TMP_VertexDataUpdateFlags -= value;
            }

        public static event Delegates.UpdateVertexData_NormalArgs UpdateVertexData
        {
            add
            {
                HookHandler._afterUpdateVertexData += value;
                HookHandler.HookUpdateVertexData();
            }
            remove => HookHandler._afterUpdateVertexData -= value;
        }

        public static event Delegates.UpdateFontAsset_NormalArgs UpdateFontAsset
        {
            add
            {
                HookHandler._afterUpdateFontAsset += value;
                HookHandler.HookUpdateFontAsset();
            }
            remove => HookHandler._afterUpdateFontAsset -= value;
        }

        public static event Delegates.CalculateLayoutInputHorizontal_NormalArgs CalculateLayoutInputHorizontal
        {
            add
            {
                HookHandler._afterCalculateLayoutInputHorizontal += value;
                HookHandler.HookCalculateLayoutInputHorizontal();
            }
            remove => HookHandler._afterCalculateLayoutInputHorizontal -= value;
        }

        public static event Delegates.CalculateLayoutInputVertical_NormalArgs CalculateLayoutInputVertical
        {
            add
            {
                HookHandler._afterCalculateLayoutInputVertical += value;
                HookHandler.HookCalculateLayoutInputVertical();
            }
            remove => HookHandler._afterCalculateLayoutInputVertical -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add => HookEndpointManager.Add<Delegates.Awake_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "Awake"), value);
            remove => HookEndpointManager.Remove<Delegates.Awake_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "Awake"), value);
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "OnEnable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "OnEnable"), value);
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add => HookEndpointManager.Add<Delegates.OnDisable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "OnDisable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDisable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "OnDisable"), value);
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add => HookEndpointManager.Add<Delegates.OnDestroy_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "OnDestroy"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDestroy_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "OnDestroy"), value);
        }

        public static event Delegates.LoadFontAsset_NormalArgs LoadFontAsset
        {
            add => HookEndpointManager.Add<Delegates.LoadFontAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "LoadFontAsset"), value);
            remove => HookEndpointManager.Remove<Delegates.LoadFontAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "LoadFontAsset"), value);
        }

        public static event Delegates.UpdateEnvMapMatrix_NormalArgs UpdateEnvMapMatrix
        {
            add => HookEndpointManager.Add<Delegates.UpdateEnvMapMatrix_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateEnvMapMatrix"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateEnvMapMatrix_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateEnvMapMatrix"), value);
        }

        public static event Delegates.SetMask_MaskingTypes_NormalArgs SetMask_MaskingTypes
        {
            add => HookEndpointManager.Add<Delegates.SetMask_MaskingTypes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetMask"), value);
            remove => HookEndpointManager.Remove<Delegates.SetMask_MaskingTypes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetMask"), value);
        }

        public static event Delegates.SetMaskCoordinates_Vector4_NormalArgs SetMaskCoordinates_Vector4
        {
            add => HookEndpointManager.Add<Delegates.SetMaskCoordinates_Vector4_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetMaskCoordinates"), value);
            remove => HookEndpointManager.Remove<Delegates.SetMaskCoordinates_Vector4_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetMaskCoordinates"), value);
        }

        public static event Delegates.SetMaskCoordinates_Vector4_float_float_NormalArgs
            SetMaskCoordinates_Vector4_float_float
            {
                add => HookEndpointManager.Add<Delegates.SetMaskCoordinates_Vector4_float_float_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetMaskCoordinates"), value);
                remove => HookEndpointManager.Remove<Delegates.SetMaskCoordinates_Vector4_float_float_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetMaskCoordinates"), value);
            }

        public static event Delegates.EnableMasking_NormalArgs EnableMasking
        {
            add => HookEndpointManager.Add<Delegates.EnableMasking_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "EnableMasking"), value);
            remove => HookEndpointManager.Remove<Delegates.EnableMasking_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "EnableMasking"), value);
        }

        public static event Delegates.DisableMasking_NormalArgs DisableMasking
        {
            add => HookEndpointManager.Add<Delegates.DisableMasking_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "DisableMasking"), value);
            remove => HookEndpointManager.Remove<Delegates.DisableMasking_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "DisableMasking"), value);
        }

        public static event Delegates.UpdateMask_NormalArgs UpdateMask
        {
            add => HookEndpointManager.Add<Delegates.UpdateMask_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateMask"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateMask_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateMask"), value);
        }

        public static event Delegates.GetMaterial_NormalArgs GetMaterial
        {
            add => HookEndpointManager.Add<Delegates.GetMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.GetMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetMaterial"), value);
        }

        public static event Delegates.GetMaterials_NormalArgs GetMaterials
        {
            add => HookEndpointManager.Add<Delegates.GetMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetMaterials"), value);
            remove => HookEndpointManager.Remove<Delegates.GetMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetMaterials"), value);
        }

        public static event Delegates.SetSharedMaterial_NormalArgs SetSharedMaterial
        {
            add => HookEndpointManager.Add<Delegates.SetSharedMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetSharedMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.SetSharedMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetSharedMaterial"), value);
        }

        public static event Delegates.GetSharedMaterials_NormalArgs GetSharedMaterials
        {
            add => HookEndpointManager.Add<Delegates.GetSharedMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetSharedMaterials"), value);
            remove => HookEndpointManager.Remove<Delegates.GetSharedMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetSharedMaterials"), value);
        }

        public static event Delegates.SetSharedMaterials_NormalArgs SetSharedMaterials
        {
            add => HookEndpointManager.Add<Delegates.SetSharedMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetSharedMaterials"), value);
            remove => HookEndpointManager.Remove<Delegates.SetSharedMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetSharedMaterials"), value);
        }

        public static event Delegates.SetOutlineThickness_NormalArgs SetOutlineThickness
        {
            add => HookEndpointManager.Add<Delegates.SetOutlineThickness_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetOutlineThickness"), value);
            remove => HookEndpointManager.Remove<Delegates.SetOutlineThickness_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetOutlineThickness"), value);
        }

        public static event Delegates.SetFaceColor_NormalArgs SetFaceColor
        {
            add => HookEndpointManager.Add<Delegates.SetFaceColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetFaceColor"), value);
            remove => HookEndpointManager.Remove<Delegates.SetFaceColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetFaceColor"), value);
        }

        public static event Delegates.SetOutlineColor_NormalArgs SetOutlineColor
        {
            add => HookEndpointManager.Add<Delegates.SetOutlineColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetOutlineColor"), value);
            remove => HookEndpointManager.Remove<Delegates.SetOutlineColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetOutlineColor"), value);
        }

        public static event Delegates.CreateMaterialInstance_NormalArgs CreateMaterialInstance
        {
            add => HookEndpointManager.Add<Delegates.CreateMaterialInstance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "CreateMaterialInstance"), value);
            remove => HookEndpointManager.Remove<Delegates.CreateMaterialInstance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "CreateMaterialInstance"), value);
        }

        public static event Delegates.SetShaderDepth_NormalArgs SetShaderDepth
        {
            add => HookEndpointManager.Add<Delegates.SetShaderDepth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetShaderDepth"), value);
            remove => HookEndpointManager.Remove<Delegates.SetShaderDepth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetShaderDepth"), value);
        }

        public static event Delegates.SetCulling_NormalArgs SetCulling
        {
            add => HookEndpointManager.Add<Delegates.SetCulling_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetCulling"), value);
            remove => HookEndpointManager.Remove<Delegates.SetCulling_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetCulling"), value);
        }

        public static event Delegates.SetPerspectiveCorrection_NormalArgs SetPerspectiveCorrection
        {
            add => HookEndpointManager.Add<Delegates.SetPerspectiveCorrection_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetPerspectiveCorrection"), value);
            remove => HookEndpointManager.Remove<Delegates.SetPerspectiveCorrection_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetPerspectiveCorrection"), value);
        }

        public static event Delegates.GetPaddingForMaterial_Material_NormalArgs GetPaddingForMaterial_Material
        {
            add => HookEndpointManager.Add<Delegates.GetPaddingForMaterial_Material_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetPaddingForMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.GetPaddingForMaterial_Material_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetPaddingForMaterial"), value);
        }

        public static event Delegates.GetPaddingForMaterial_NormalArgs GetPaddingForMaterial
        {
            add => HookEndpointManager.Add<Delegates.GetPaddingForMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetPaddingForMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.GetPaddingForMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetPaddingForMaterial"), value);
        }

        public static event Delegates.SetArraySizes_NormalArgs SetArraySizes
        {
            add => HookEndpointManager.Add<Delegates.SetArraySizes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetArraySizes"), value);
            remove => HookEndpointManager.Remove<Delegates.SetArraySizes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetArraySizes"), value);
        }

        public static event Delegates.ComputeMarginSize_NormalArgs ComputeMarginSize
        {
            add => HookEndpointManager.Add<Delegates.ComputeMarginSize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "ComputeMarginSize"), value);
            remove => HookEndpointManager.Remove<Delegates.ComputeMarginSize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "ComputeMarginSize"), value);
        }

        public static event Delegates.OnDidApplyAnimationProperties_NormalArgs OnDidApplyAnimationProperties
        {
            add => HookEndpointManager.Add<Delegates.OnDidApplyAnimationProperties_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "OnDidApplyAnimationProperties"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDidApplyAnimationProperties_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "OnDidApplyAnimationProperties"), value);
        }

        public static event Delegates.OnTransformParentChanged_NormalArgs OnTransformParentChanged
        {
            add => HookEndpointManager.Add<Delegates.OnTransformParentChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "OnTransformParentChanged"), value);
            remove => HookEndpointManager.Remove<Delegates.OnTransformParentChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "OnTransformParentChanged"), value);
        }

        public static event Delegates.OnRectTransformDimensionsChange_NormalArgs OnRectTransformDimensionsChange
        {
            add => HookEndpointManager.Add<Delegates.OnRectTransformDimensionsChange_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "OnRectTransformDimensionsChange"), value);
            remove => HookEndpointManager.Remove<Delegates.OnRectTransformDimensionsChange_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "OnRectTransformDimensionsChange"), value);
        }

        public static event Delegates.LateUpdate_NormalArgs LateUpdate
        {
            add => HookEndpointManager.Add<Delegates.LateUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "LateUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.LateUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "LateUpdate"), value);
        }

        public static event Delegates.OnPreRenderObject_NormalArgs OnPreRenderObject
        {
            add => HookEndpointManager.Add<Delegates.OnPreRenderObject_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "OnPreRenderObject"), value);
            remove => HookEndpointManager.Remove<Delegates.OnPreRenderObject_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "OnPreRenderObject"), value);
        }

        public static event Delegates.GenerateTextMesh_NormalArgs GenerateTextMesh
        {
            add => HookEndpointManager.Add<Delegates.GenerateTextMesh_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GenerateTextMesh"), value);
            remove => HookEndpointManager.Remove<Delegates.GenerateTextMesh_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GenerateTextMesh"), value);
        }

        public static event Delegates.GetTextContainerLocalCorners_NormalArgs GetTextContainerLocalCorners
        {
            add => HookEndpointManager.Add<Delegates.GetTextContainerLocalCorners_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetTextContainerLocalCorners"), value);
            remove => HookEndpointManager.Remove<Delegates.GetTextContainerLocalCorners_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetTextContainerLocalCorners"), value);
        }

        public static event Delegates.ClearMesh_NormalArgs ClearMesh
        {
            add => HookEndpointManager.Add<Delegates.ClearMesh_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "ClearMesh"), value);
            remove => HookEndpointManager.Remove<Delegates.ClearMesh_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "ClearMesh"), value);
        }

        public static event Delegates.SetMeshFilters_NormalArgs SetMeshFilters
        {
            add => HookEndpointManager.Add<Delegates.SetMeshFilters_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetMeshFilters"), value);
            remove => HookEndpointManager.Remove<Delegates.SetMeshFilters_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetMeshFilters"), value);
        }

        public static event Delegates.SetActiveSubMeshes_NormalArgs SetActiveSubMeshes
        {
            add => HookEndpointManager.Add<Delegates.SetActiveSubMeshes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetActiveSubMeshes"), value);
            remove => HookEndpointManager.Remove<Delegates.SetActiveSubMeshes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetActiveSubMeshes"), value);
        }

        public static event Delegates.GetCompoundBounds_NormalArgs GetCompoundBounds
        {
            add => HookEndpointManager.Add<Delegates.GetCompoundBounds_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetCompoundBounds"), value);
            remove => HookEndpointManager.Remove<Delegates.GetCompoundBounds_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetCompoundBounds"), value);
        }

        public static event Delegates.UpdateSDFScale_NormalArgs UpdateSDFScale
        {
            add => HookEndpointManager.Add<Delegates.UpdateSDFScale_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateSDFScale"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateSDFScale_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateSDFScale"), value);
        }

        public static event Delegates.AdjustLineOffset_NormalArgs AdjustLineOffset
        {
            add => HookEndpointManager.Add<Delegates.AdjustLineOffset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "AdjustLineOffset"), value);
            remove => HookEndpointManager.Remove<Delegates.AdjustLineOffset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "AdjustLineOffset"), value);
        }

        public static event Delegates.get_lineLength_NormalArgs get_lineLength
        {
            add => HookEndpointManager.Add<Delegates.get_lineLength_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_lineLength"), value);
            remove => HookEndpointManager.Remove<Delegates.get_lineLength_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_lineLength"), value);
        }

        public static event Delegates.set_lineLength_NormalArgs set_lineLength
        {
            add => HookEndpointManager.Add<Delegates.set_lineLength_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "set_lineLength"), value);
            remove => HookEndpointManager.Remove<Delegates.set_lineLength_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "set_lineLength"), value);
        }

        public static event Delegates.get_margin_NormalArgs get_margin
        {
            add => HookEndpointManager.Add<Delegates.get_margin_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_margin"), value);
            remove => HookEndpointManager.Remove<Delegates.get_margin_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_margin"), value);
        }

        public static event Delegates.set_margin_NormalArgs set_margin
        {
            add => HookEndpointManager.Add<Delegates.set_margin_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "set_margin"), value);
            remove => HookEndpointManager.Remove<Delegates.set_margin_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "set_margin"), value);
        }

        public static event Delegates.get_sortingLayerID_NormalArgs get_sortingLayerID
        {
            add => HookEndpointManager.Add<Delegates.get_sortingLayerID_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_sortingLayerID"), value);
            remove => HookEndpointManager.Remove<Delegates.get_sortingLayerID_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_sortingLayerID"), value);
        }

        public static event Delegates.set_sortingLayerID_NormalArgs set_sortingLayerID
        {
            add => HookEndpointManager.Add<Delegates.set_sortingLayerID_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "set_sortingLayerID"), value);
            remove => HookEndpointManager.Remove<Delegates.set_sortingLayerID_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "set_sortingLayerID"), value);
        }

        public static event Delegates.get_sortingOrder_NormalArgs get_sortingOrder
        {
            add => HookEndpointManager.Add<Delegates.get_sortingOrder_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_sortingOrder"), value);
            remove => HookEndpointManager.Remove<Delegates.get_sortingOrder_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_sortingOrder"), value);
        }

        public static event Delegates.set_sortingOrder_NormalArgs set_sortingOrder
        {
            add => HookEndpointManager.Add<Delegates.set_sortingOrder_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "set_sortingOrder"), value);
            remove => HookEndpointManager.Remove<Delegates.set_sortingOrder_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "set_sortingOrder"), value);
        }

        public static event Delegates.get_autoSizeTextContainer_NormalArgs get_autoSizeTextContainer
        {
            add => HookEndpointManager.Add<Delegates.get_autoSizeTextContainer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_autoSizeTextContainer"), value);
            remove => HookEndpointManager.Remove<Delegates.get_autoSizeTextContainer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_autoSizeTextContainer"), value);
        }

        public static event Delegates.set_autoSizeTextContainer_NormalArgs set_autoSizeTextContainer
        {
            add => HookEndpointManager.Add<Delegates.set_autoSizeTextContainer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "set_autoSizeTextContainer"), value);
            remove => HookEndpointManager.Remove<Delegates.set_autoSizeTextContainer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "set_autoSizeTextContainer"), value);
        }

        public static event Delegates.get_textContainer_NormalArgs get_textContainer
        {
            add => HookEndpointManager.Add<Delegates.get_textContainer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_textContainer"), value);
            remove => HookEndpointManager.Remove<Delegates.get_textContainer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_textContainer"), value);
        }

        public static event Delegates.get_transform_NormalArgs get_transform
        {
            add => HookEndpointManager.Add<Delegates.get_transform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_transform"), value);
            remove => HookEndpointManager.Remove<Delegates.get_transform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_transform"), value);
        }

        public static event Delegates.get_renderer_NormalArgs get_renderer
        {
            add => HookEndpointManager.Add<Delegates.get_renderer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_renderer"), value);
            remove => HookEndpointManager.Remove<Delegates.get_renderer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_renderer"), value);
        }

        public static event Delegates.get_mesh_NormalArgs get_mesh
        {
            add => HookEndpointManager.Add<Delegates.get_mesh_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_mesh"), value);
            remove => HookEndpointManager.Remove<Delegates.get_mesh_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_mesh"), value);
        }

        public static event Delegates.get_meshFilter_NormalArgs get_meshFilter
        {
            add => HookEndpointManager.Add<Delegates.get_meshFilter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_meshFilter"), value);
            remove => HookEndpointManager.Remove<Delegates.get_meshFilter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_meshFilter"), value);
        }

        public static event Delegates.get_maskType_NormalArgs get_maskType
        {
            add => HookEndpointManager.Add<Delegates.get_maskType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_maskType"), value);
            remove => HookEndpointManager.Remove<Delegates.get_maskType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "get_maskType"), value);
        }

        public static event Delegates.set_maskType_NormalArgs set_maskType
        {
            add => HookEndpointManager.Add<Delegates.set_maskType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "set_maskType"), value);
            remove => HookEndpointManager.Remove<Delegates.set_maskType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "set_maskType"), value);
        }

        public static event Delegates.SetMask_MaskingTypes_Vector4_NormalArgs SetMask_MaskingTypes_Vector4
        {
            add => HookEndpointManager.Add<Delegates.SetMask_MaskingTypes_Vector4_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetMask"), value);
            remove => HookEndpointManager.Remove<Delegates.SetMask_MaskingTypes_Vector4_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetMask"), value);
        }

        public static event Delegates.SetMask_MaskingTypes_Vector4_float_float_NormalArgs
            SetMask_MaskingTypes_Vector4_float_float
            {
                add => HookEndpointManager.Add<Delegates.SetMask_MaskingTypes_Vector4_float_float_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetMask"), value);
                remove => HookEndpointManager.Remove<Delegates.SetMask_MaskingTypes_Vector4_float_float_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetMask"), value);
            }

        public static event Delegates.SetVerticesDirty_NormalArgs SetVerticesDirty
        {
            add => HookEndpointManager.Add<Delegates.SetVerticesDirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetVerticesDirty"), value);
            remove => HookEndpointManager.Remove<Delegates.SetVerticesDirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetVerticesDirty"), value);
        }

        public static event Delegates.SetLayoutDirty_NormalArgs SetLayoutDirty
        {
            add => HookEndpointManager.Add<Delegates.SetLayoutDirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetLayoutDirty"), value);
            remove => HookEndpointManager.Remove<Delegates.SetLayoutDirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetLayoutDirty"), value);
        }

        public static event Delegates.SetMaterialDirty_NormalArgs SetMaterialDirty
        {
            add => HookEndpointManager.Add<Delegates.SetMaterialDirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetMaterialDirty"), value);
            remove => HookEndpointManager.Remove<Delegates.SetMaterialDirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetMaterialDirty"), value);
        }

        public static event Delegates.SetAllDirty_NormalArgs SetAllDirty
        {
            add => HookEndpointManager.Add<Delegates.SetAllDirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetAllDirty"), value);
            remove => HookEndpointManager.Remove<Delegates.SetAllDirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "SetAllDirty"), value);
        }

        public static event Delegates.Rebuild_NormalArgs Rebuild
        {
            add => HookEndpointManager.Add<Delegates.Rebuild_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "Rebuild"), value);
            remove => HookEndpointManager.Remove<Delegates.Rebuild_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "Rebuild"), value);
        }

        public static event Delegates.UpdateMaterial_NormalArgs UpdateMaterial
        {
            add => HookEndpointManager.Add<Delegates.UpdateMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateMaterial"), value);
        }

        public static event Delegates.UpdateMeshPadding_NormalArgs UpdateMeshPadding
        {
            add => HookEndpointManager.Add<Delegates.UpdateMeshPadding_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateMeshPadding"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateMeshPadding_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateMeshPadding"), value);
        }

        public static event Delegates.ForceMeshUpdate_NormalArgs ForceMeshUpdate
        {
            add => HookEndpointManager.Add<Delegates.ForceMeshUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "ForceMeshUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.ForceMeshUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "ForceMeshUpdate"), value);
        }

        public static event Delegates.ForceMeshUpdate_bool_NormalArgs ForceMeshUpdate_bool
        {
            add => HookEndpointManager.Add<Delegates.ForceMeshUpdate_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "ForceMeshUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.ForceMeshUpdate_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "ForceMeshUpdate"), value);
        }

        public static event Delegates.GetTextInfo_NormalArgs GetTextInfo
        {
            add => HookEndpointManager.Add<Delegates.GetTextInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetTextInfo"), value);
            remove => HookEndpointManager.Remove<Delegates.GetTextInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "GetTextInfo"), value);
        }

        public static event Delegates.UpdateGeometry_NormalArgs UpdateGeometry
        {
            add => HookEndpointManager.Add<Delegates.UpdateGeometry_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateGeometry"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateGeometry_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateGeometry"), value);
        }

        public static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_NormalArgs
            UpdateVertexData_TMP_VertexDataUpdateFlags
            {
                add => HookEndpointManager.Add<Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateVertexData"), value);
                remove => HookEndpointManager.Remove<Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateVertexData"), value);
            }

        public static event Delegates.UpdateVertexData_NormalArgs UpdateVertexData
        {
            add => HookEndpointManager.Add<Delegates.UpdateVertexData_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateVertexData"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateVertexData_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateVertexData"), value);
        }

        public static event Delegates.UpdateFontAsset_NormalArgs UpdateFontAsset
        {
            add => HookEndpointManager.Add<Delegates.UpdateFontAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateFontAsset"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateFontAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "UpdateFontAsset"), value);
        }

        public static event Delegates.CalculateLayoutInputHorizontal_NormalArgs CalculateLayoutInputHorizontal
        {
            add => HookEndpointManager.Add<Delegates.CalculateLayoutInputHorizontal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "CalculateLayoutInputHorizontal"), value);
            remove => HookEndpointManager.Remove<Delegates.CalculateLayoutInputHorizontal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "CalculateLayoutInputHorizontal"), value);
        }

        public static event Delegates.CalculateLayoutInputVertical_NormalArgs CalculateLayoutInputVertical
        {
            add => HookEndpointManager.Add<Delegates.CalculateLayoutInputVertical_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "CalculateLayoutInputVertical"), value);
            remove => HookEndpointManager.Remove<Delegates.CalculateLayoutInputVertical_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshPro), "CalculateLayoutInputVertical"), value);
        }
    }
}