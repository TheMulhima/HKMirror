namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ShineAnimSequence class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnShineAnimSequence
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.ShineAnimSequence.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.ShineAnimSequence.orig_Start orig, ShineAnimSequence self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookShineSequence()
        {
            if (!HookedList.Contains("ShineSequence"))
            {
                HookedList.Add("ShineSequence");
                On.ShineAnimSequence.ShineSequence += ShineSequence;
            }
        }

        internal static event Delegates.ShineSequence_BeforeArgs _beforeShineSequence;

        private static IEnumerator ShineSequence(On.ShineAnimSequence.orig_ShineSequence orig, ShineAnimSequence self)
        {
            Delegates.Params_ShineSequence @params = new()
            {
                self = self
            };
            if (_beforeShineSequence != null)
                foreach (Delegates.ShineSequence_BeforeArgs toInvoke in _beforeShineSequence.GetInvocationList())
                    try
                    {
                        _beforeShineSequence?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate IEnumerator ShineSequence_AfterArgs(Params_ShineSequence args, IEnumerator ret);

        public delegate void ShineSequence_BeforeArgs(Params_ShineSequence args);

        public delegate IEnumerator ShineSequence_WithArgs(Func<ShineAnimSequence, IEnumerator> orig,
            ShineAnimSequence self);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<ShineAnimSequence> orig, ShineAnimSequence self);

        public sealed class Params_Start
        {
            public ShineAnimSequence self;
        }

        public sealed class Params_ShineSequence
        {
            public ShineAnimSequence self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.ShineSequence_BeforeArgs ShineSequence
        {
            add
            {
                HookHandler._beforeShineSequence += value;
                HookHandler.HookShineSequence();
            }
            remove => HookHandler._beforeShineSequence -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.ShineAnimSequence.hook_Start Start
        {
            add => On.ShineAnimSequence.Start += value;
            remove => On.ShineAnimSequence.Start -= value;
        }

        public static event On.ShineAnimSequence.hook_ShineSequence ShineSequence
        {
            add => On.ShineAnimSequence.ShineSequence += value;
            remove => On.ShineAnimSequence.ShineSequence -= value;
        }
    }
}