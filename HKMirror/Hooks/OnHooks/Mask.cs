using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for Mask class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMask
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_invertAxis()
        {
            if (!HookedList.Contains("get_invertAxis"))
            {
                HookedList.Add("get_invertAxis");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "get_invertAxis", true), get_invertAxis);
            }
        }

        internal static event Delegates.get_invertAxis_BeforeArgs _beforeget_invertAxis;
        internal static event Delegates.get_invertAxis_AfterArgs _afterget_invertAxis;

        private static bool get_invertAxis(Func<ToJ.Mask, bool> orig, ToJ.Mask self)
        {
            Delegates.Params_get_invertAxis @params = new()
            {
                self = self
            };
            if (_beforeget_invertAxis != null)
            {
                foreach (Delegates.get_invertAxis_BeforeArgs toInvoke in _beforeget_invertAxis.GetInvocationList())
                {
                    try
                    {
                        _beforeget_invertAxis?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_invertAxis != null)
            {
                foreach (Delegates.get_invertAxis_AfterArgs toInvoke in _afterget_invertAxis.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_invertAxis.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_invertAxis()
        {
            if (!HookedList.Contains("set_invertAxis"))
            {
                HookedList.Add("set_invertAxis");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "set_invertAxis", true), set_invertAxis);
            }
        }

        internal static event Delegates.set_invertAxis_BeforeArgs _beforeset_invertAxis;
        internal static event Delegates.set_invertAxis_AfterArgs _afterset_invertAxis;

        private static void set_invertAxis(Action<ToJ.Mask, bool> orig, ToJ.Mask self, bool value)
        {
            Delegates.Params_set_invertAxis @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_invertAxis != null)
            {
                foreach (Delegates.set_invertAxis_BeforeArgs toInvoke in _beforeset_invertAxis.GetInvocationList())
                {
                    try
                    {
                        _beforeset_invertAxis?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_invertAxis != null)
            {
                foreach (Delegates.set_invertAxis_AfterArgs toInvoke in _afterset_invertAxis.GetInvocationList())
                {
                    try
                    {
                        _afterset_invertAxis.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_clampAlphaHorizontally()
        {
            if (!HookedList.Contains("get_clampAlphaHorizontally"))
            {
                HookedList.Add("get_clampAlphaHorizontally");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "get_clampAlphaHorizontally", true),
                    get_clampAlphaHorizontally);
            }
        }

        internal static event Delegates.get_clampAlphaHorizontally_BeforeArgs _beforeget_clampAlphaHorizontally;
        internal static event Delegates.get_clampAlphaHorizontally_AfterArgs _afterget_clampAlphaHorizontally;

        private static bool get_clampAlphaHorizontally(Func<ToJ.Mask, bool> orig, ToJ.Mask self)
        {
            Delegates.Params_get_clampAlphaHorizontally @params = new()
            {
                self = self
            };
            if (_beforeget_clampAlphaHorizontally != null)
            {
                foreach (Delegates.get_clampAlphaHorizontally_BeforeArgs toInvoke in _beforeget_clampAlphaHorizontally
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_clampAlphaHorizontally?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_clampAlphaHorizontally != null)
            {
                foreach (Delegates.get_clampAlphaHorizontally_AfterArgs toInvoke in _afterget_clampAlphaHorizontally
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_clampAlphaHorizontally.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_clampAlphaHorizontally()
        {
            if (!HookedList.Contains("set_clampAlphaHorizontally"))
            {
                HookedList.Add("set_clampAlphaHorizontally");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "set_clampAlphaHorizontally", true),
                    set_clampAlphaHorizontally);
            }
        }

        internal static event Delegates.set_clampAlphaHorizontally_BeforeArgs _beforeset_clampAlphaHorizontally;
        internal static event Delegates.set_clampAlphaHorizontally_AfterArgs _afterset_clampAlphaHorizontally;

        private static void set_clampAlphaHorizontally(Action<ToJ.Mask, bool> orig, ToJ.Mask self, bool value)
        {
            Delegates.Params_set_clampAlphaHorizontally @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_clampAlphaHorizontally != null)
            {
                foreach (Delegates.set_clampAlphaHorizontally_BeforeArgs toInvoke in _beforeset_clampAlphaHorizontally
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeset_clampAlphaHorizontally?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_clampAlphaHorizontally != null)
            {
                foreach (Delegates.set_clampAlphaHorizontally_AfterArgs toInvoke in _afterset_clampAlphaHorizontally
                             .GetInvocationList())
                {
                    try
                    {
                        _afterset_clampAlphaHorizontally.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_clampAlphaVertically()
        {
            if (!HookedList.Contains("get_clampAlphaVertically"))
            {
                HookedList.Add("get_clampAlphaVertically");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "get_clampAlphaVertically", true),
                    get_clampAlphaVertically);
            }
        }

        internal static event Delegates.get_clampAlphaVertically_BeforeArgs _beforeget_clampAlphaVertically;
        internal static event Delegates.get_clampAlphaVertically_AfterArgs _afterget_clampAlphaVertically;

        private static bool get_clampAlphaVertically(Func<ToJ.Mask, bool> orig, ToJ.Mask self)
        {
            Delegates.Params_get_clampAlphaVertically @params = new()
            {
                self = self
            };
            if (_beforeget_clampAlphaVertically != null)
            {
                foreach (Delegates.get_clampAlphaVertically_BeforeArgs toInvoke in _beforeget_clampAlphaVertically
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_clampAlphaVertically?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_clampAlphaVertically != null)
            {
                foreach (Delegates.get_clampAlphaVertically_AfterArgs toInvoke in _afterget_clampAlphaVertically
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_clampAlphaVertically.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_clampAlphaVertically()
        {
            if (!HookedList.Contains("set_clampAlphaVertically"))
            {
                HookedList.Add("set_clampAlphaVertically");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "set_clampAlphaVertically", true),
                    set_clampAlphaVertically);
            }
        }

        internal static event Delegates.set_clampAlphaVertically_BeforeArgs _beforeset_clampAlphaVertically;
        internal static event Delegates.set_clampAlphaVertically_AfterArgs _afterset_clampAlphaVertically;

        private static void set_clampAlphaVertically(Action<ToJ.Mask, bool> orig, ToJ.Mask self, bool value)
        {
            Delegates.Params_set_clampAlphaVertically @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_clampAlphaVertically != null)
            {
                foreach (Delegates.set_clampAlphaVertically_BeforeArgs toInvoke in _beforeset_clampAlphaVertically
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeset_clampAlphaVertically?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_clampAlphaVertically != null)
            {
                foreach (Delegates.set_clampAlphaVertically_AfterArgs toInvoke in _afterset_clampAlphaVertically
                             .GetInvocationList())
                {
                    try
                    {
                        _afterset_clampAlphaVertically.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_clampingBorder()
        {
            if (!HookedList.Contains("get_clampingBorder"))
            {
                HookedList.Add("get_clampingBorder");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "get_clampingBorder", true),
                    get_clampingBorder);
            }
        }

        internal static event Delegates.get_clampingBorder_BeforeArgs _beforeget_clampingBorder;
        internal static event Delegates.get_clampingBorder_AfterArgs _afterget_clampingBorder;

        private static float get_clampingBorder(Func<ToJ.Mask, float> orig, ToJ.Mask self)
        {
            Delegates.Params_get_clampingBorder @params = new()
            {
                self = self
            };
            if (_beforeget_clampingBorder != null)
            {
                foreach (Delegates.get_clampingBorder_BeforeArgs toInvoke in
                         _beforeget_clampingBorder.GetInvocationList())
                {
                    try
                    {
                        _beforeget_clampingBorder?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_clampingBorder != null)
            {
                foreach (Delegates.get_clampingBorder_AfterArgs toInvoke in
                         _afterget_clampingBorder.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_clampingBorder.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_clampingBorder()
        {
            if (!HookedList.Contains("set_clampingBorder"))
            {
                HookedList.Add("set_clampingBorder");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "set_clampingBorder", true),
                    set_clampingBorder);
            }
        }

        internal static event Delegates.set_clampingBorder_BeforeArgs _beforeset_clampingBorder;
        internal static event Delegates.set_clampingBorder_AfterArgs _afterset_clampingBorder;

        private static void set_clampingBorder(Action<ToJ.Mask, float> orig, ToJ.Mask self, float value)
        {
            Delegates.Params_set_clampingBorder @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_clampingBorder != null)
            {
                foreach (Delegates.set_clampingBorder_BeforeArgs toInvoke in
                         _beforeset_clampingBorder.GetInvocationList())
                {
                    try
                    {
                        _beforeset_clampingBorder?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_clampingBorder != null)
            {
                foreach (Delegates.set_clampingBorder_AfterArgs toInvoke in
                         _afterset_clampingBorder.GetInvocationList())
                {
                    try
                    {
                        _afterset_clampingBorder.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_useMaskAlphaChannel()
        {
            if (!HookedList.Contains("get_useMaskAlphaChannel"))
            {
                HookedList.Add("get_useMaskAlphaChannel");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "get_useMaskAlphaChannel", true),
                    get_useMaskAlphaChannel);
            }
        }

        internal static event Delegates.get_useMaskAlphaChannel_BeforeArgs _beforeget_useMaskAlphaChannel;
        internal static event Delegates.get_useMaskAlphaChannel_AfterArgs _afterget_useMaskAlphaChannel;

        private static bool get_useMaskAlphaChannel(Func<ToJ.Mask, bool> orig, ToJ.Mask self)
        {
            Delegates.Params_get_useMaskAlphaChannel @params = new()
            {
                self = self
            };
            if (_beforeget_useMaskAlphaChannel != null)
            {
                foreach (Delegates.get_useMaskAlphaChannel_BeforeArgs toInvoke in _beforeget_useMaskAlphaChannel
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_useMaskAlphaChannel?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_useMaskAlphaChannel != null)
            {
                foreach (Delegates.get_useMaskAlphaChannel_AfterArgs toInvoke in _afterget_useMaskAlphaChannel
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_useMaskAlphaChannel.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_useMaskAlphaChannel()
        {
            if (!HookedList.Contains("set_useMaskAlphaChannel"))
            {
                HookedList.Add("set_useMaskAlphaChannel");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "set_useMaskAlphaChannel", true),
                    set_useMaskAlphaChannel);
            }
        }

        internal static event Delegates.set_useMaskAlphaChannel_BeforeArgs _beforeset_useMaskAlphaChannel;
        internal static event Delegates.set_useMaskAlphaChannel_AfterArgs _afterset_useMaskAlphaChannel;

        private static void set_useMaskAlphaChannel(Action<ToJ.Mask, bool> orig, ToJ.Mask self, bool value)
        {
            Delegates.Params_set_useMaskAlphaChannel @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_useMaskAlphaChannel != null)
            {
                foreach (Delegates.set_useMaskAlphaChannel_BeforeArgs toInvoke in _beforeset_useMaskAlphaChannel
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeset_useMaskAlphaChannel?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_useMaskAlphaChannel != null)
            {
                foreach (Delegates.set_useMaskAlphaChannel_AfterArgs toInvoke in _afterset_useMaskAlphaChannel
                             .GetInvocationList())
                {
                    try
                    {
                        _afterset_useMaskAlphaChannel.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "Start", true), Start);
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(Action<ToJ.Mask> orig, ToJ.Mask self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "Update", true), Update);
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(Action<ToJ.Mask> orig, ToJ.Mask self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
            {
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
            {
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookRotateVector()
        {
            if (!HookedList.Contains("RotateVector"))
            {
                HookedList.Add("RotateVector");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "RotateVector", true), RotateVector);
            }
        }

        internal static event Delegates.RotateVector_BeforeArgs _beforeRotateVector;
        internal static event Delegates.RotateVector_AfterArgs _afterRotateVector;

        private static UnityEngine.Vector3 RotateVector(
            Func<ToJ.Mask, UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector3> orig, ToJ.Mask self,
            UnityEngine.Vector3 point, UnityEngine.Vector3 angles)
        {
            Delegates.Params_RotateVector @params = new()
            {
                self = self, point = point, angles = angles
            };
            if (_beforeRotateVector != null)
            {
                foreach (Delegates.RotateVector_BeforeArgs toInvoke in _beforeRotateVector.GetInvocationList())
                {
                    try
                    {
                        _beforeRotateVector?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            point = @params.point;
            angles = @params.angles;
            var retVal = orig(self, point, angles);
            if (_afterRotateVector != null)
            {
                foreach (Delegates.RotateVector_AfterArgs toInvoke in _afterRotateVector.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterRotateVector.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookSetMaskFloatValueInMaterials()
        {
            if (!HookedList.Contains("SetMaskFloatValueInMaterials"))
            {
                HookedList.Add("SetMaskFloatValueInMaterials");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "SetMaskFloatValueInMaterials", true),
                    SetMaskFloatValueInMaterials);
            }
        }

        internal static event Delegates.SetMaskFloatValueInMaterials_BeforeArgs _beforeSetMaskFloatValueInMaterials;
        internal static event Delegates.SetMaskFloatValueInMaterials_AfterArgs _afterSetMaskFloatValueInMaterials;

        private static void SetMaskFloatValueInMaterials(Action<ToJ.Mask, string, float> orig, ToJ.Mask self,
            string variable, float value)
        {
            Delegates.Params_SetMaskFloatValueInMaterials @params = new()
            {
                self = self, variable = variable, value = value
            };
            if (_beforeSetMaskFloatValueInMaterials != null)
            {
                foreach (Delegates.SetMaskFloatValueInMaterials_BeforeArgs toInvoke in
                         _beforeSetMaskFloatValueInMaterials.GetInvocationList())
                {
                    try
                    {
                        _beforeSetMaskFloatValueInMaterials?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            variable = @params.variable;
            value = @params.value;
            orig(self, variable, value);
            if (_afterSetMaskFloatValueInMaterials != null)
            {
                foreach (Delegates.SetMaskFloatValueInMaterials_AfterArgs toInvoke in _afterSetMaskFloatValueInMaterials
                             .GetInvocationList())
                {
                    try
                    {
                        _afterSetMaskFloatValueInMaterials.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetMaskBoolValueInMaterials()
        {
            if (!HookedList.Contains("SetMaskBoolValueInMaterials"))
            {
                HookedList.Add("SetMaskBoolValueInMaterials");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "SetMaskBoolValueInMaterials", true),
                    SetMaskBoolValueInMaterials);
            }
        }

        internal static event Delegates.SetMaskBoolValueInMaterials_BeforeArgs _beforeSetMaskBoolValueInMaterials;
        internal static event Delegates.SetMaskBoolValueInMaterials_AfterArgs _afterSetMaskBoolValueInMaterials;

        private static void SetMaskBoolValueInMaterials(Action<ToJ.Mask, string, bool> orig, ToJ.Mask self,
            string variable, bool value)
        {
            Delegates.Params_SetMaskBoolValueInMaterials @params = new()
            {
                self = self, variable = variable, value = value
            };
            if (_beforeSetMaskBoolValueInMaterials != null)
            {
                foreach (Delegates.SetMaskBoolValueInMaterials_BeforeArgs toInvoke in _beforeSetMaskBoolValueInMaterials
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeSetMaskBoolValueInMaterials?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            variable = @params.variable;
            value = @params.value;
            orig(self, variable, value);
            if (_afterSetMaskBoolValueInMaterials != null)
            {
                foreach (Delegates.SetMaskBoolValueInMaterials_AfterArgs toInvoke in _afterSetMaskBoolValueInMaterials
                             .GetInvocationList())
                {
                    try
                    {
                        _afterSetMaskBoolValueInMaterials.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetMaskBoolValueInMaterial()
        {
            if (!HookedList.Contains("SetMaskBoolValueInMaterial"))
            {
                HookedList.Add("SetMaskBoolValueInMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "SetMaskBoolValueInMaterial", true),
                    SetMaskBoolValueInMaterial);
            }
        }

        internal static event Delegates.SetMaskBoolValueInMaterial_BeforeArgs _beforeSetMaskBoolValueInMaterial;
        internal static event Delegates.SetMaskBoolValueInMaterial_AfterArgs _afterSetMaskBoolValueInMaterial;

        private static void SetMaskBoolValueInMaterial(Action<ToJ.Mask, string, bool, UnityEngine.Material> orig,
            ToJ.Mask self, string variable, bool value, UnityEngine.Material material)
        {
            Delegates.Params_SetMaskBoolValueInMaterial @params = new()
            {
                self = self, variable = variable, value = value, material = material
            };
            if (_beforeSetMaskBoolValueInMaterial != null)
            {
                foreach (Delegates.SetMaskBoolValueInMaterial_BeforeArgs toInvoke in _beforeSetMaskBoolValueInMaterial
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeSetMaskBoolValueInMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            variable = @params.variable;
            value = @params.value;
            material = @params.material;
            orig(self, variable, value, material);
            if (_afterSetMaskBoolValueInMaterial != null)
            {
                foreach (Delegates.SetMaskBoolValueInMaterial_AfterArgs toInvoke in _afterSetMaskBoolValueInMaterial
                             .GetInvocationList())
                {
                    try
                    {
                        _afterSetMaskBoolValueInMaterial.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookCreateAndAssignQuad()
        {
            if (!HookedList.Contains("CreateAndAssignQuad"))
            {
                HookedList.Add("CreateAndAssignQuad");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "CreateAndAssignQuad", true),
                    CreateAndAssignQuad);
            }
        }

        internal static event Delegates.CreateAndAssignQuad_BeforeArgs _beforeCreateAndAssignQuad;
        internal static event Delegates.CreateAndAssignQuad_AfterArgs _afterCreateAndAssignQuad;

        private static void CreateAndAssignQuad(Action<ToJ.Mask, UnityEngine.Mesh, float, float, float, float> orig,
            ToJ.Mask self, UnityEngine.Mesh mesh, float minX, float maxX, float minY, float maxY)
        {
            Delegates.Params_CreateAndAssignQuad @params = new()
            {
                self = self, mesh = mesh, minX = minX, maxX = maxX, minY = minY, maxY = maxY
            };
            if (_beforeCreateAndAssignQuad != null)
            {
                foreach (Delegates.CreateAndAssignQuad_BeforeArgs toInvoke in _beforeCreateAndAssignQuad
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeCreateAndAssignQuad?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            mesh = @params.mesh;
            minX = @params.minX;
            maxX = @params.maxX;
            minY = @params.minY;
            maxY = @params.maxY;
            orig(self, mesh, minX, maxX, minY, maxY);
            if (_afterCreateAndAssignQuad != null)
            {
                foreach (Delegates.CreateAndAssignQuad_AfterArgs toInvoke in
                         _afterCreateAndAssignQuad.GetInvocationList())
                {
                    try
                    {
                        _afterCreateAndAssignQuad.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetMaskRendererActive()
        {
            if (!HookedList.Contains("SetMaskRendererActive"))
            {
                HookedList.Add("SetMaskRendererActive");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "SetMaskRendererActive", true),
                    SetMaskRendererActive);
            }
        }

        internal static event Delegates.SetMaskRendererActive_BeforeArgs _beforeSetMaskRendererActive;
        internal static event Delegates.SetMaskRendererActive_AfterArgs _afterSetMaskRendererActive;

        private static void SetMaskRendererActive(Action<ToJ.Mask, bool> orig, ToJ.Mask self, bool value)
        {
            Delegates.Params_SetMaskRendererActive @params = new()
            {
                self = self, value = value
            };
            if (_beforeSetMaskRendererActive != null)
            {
                foreach (Delegates.SetMaskRendererActive_BeforeArgs toInvoke in _beforeSetMaskRendererActive
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeSetMaskRendererActive?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterSetMaskRendererActive != null)
            {
                foreach (Delegates.SetMaskRendererActive_AfterArgs toInvoke in _afterSetMaskRendererActive
                             .GetInvocationList())
                {
                    try
                    {
                        _afterSetMaskRendererActive.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_invertAxis
        {
            public ToJ.Mask self;
        }

        public delegate void get_invertAxis_BeforeArgs(Params_get_invertAxis args);

        public delegate bool get_invertAxis_AfterArgs(Params_get_invertAxis args, bool ret);

        public delegate bool get_invertAxis_WithArgs(Func<ToJ.Mask, bool> orig, ToJ.Mask self);

        public sealed class Params_set_invertAxis
        {
            public ToJ.Mask self;
            public bool value;
        }

        public delegate void set_invertAxis_BeforeArgs(Params_set_invertAxis args);

        public delegate void set_invertAxis_AfterArgs(Params_set_invertAxis args);

        public delegate void set_invertAxis_WithArgs(Action<ToJ.Mask, bool> orig, ToJ.Mask self, bool value);

        public sealed class Params_get_clampAlphaHorizontally
        {
            public ToJ.Mask self;
        }

        public delegate void get_clampAlphaHorizontally_BeforeArgs(Params_get_clampAlphaHorizontally args);

        public delegate bool get_clampAlphaHorizontally_AfterArgs(Params_get_clampAlphaHorizontally args, bool ret);

        public delegate bool get_clampAlphaHorizontally_WithArgs(Func<ToJ.Mask, bool> orig, ToJ.Mask self);

        public sealed class Params_set_clampAlphaHorizontally
        {
            public ToJ.Mask self;
            public bool value;
        }

        public delegate void set_clampAlphaHorizontally_BeforeArgs(Params_set_clampAlphaHorizontally args);

        public delegate void set_clampAlphaHorizontally_AfterArgs(Params_set_clampAlphaHorizontally args);

        public delegate void
            set_clampAlphaHorizontally_WithArgs(Action<ToJ.Mask, bool> orig, ToJ.Mask self, bool value);

        public sealed class Params_get_clampAlphaVertically
        {
            public ToJ.Mask self;
        }

        public delegate void get_clampAlphaVertically_BeforeArgs(Params_get_clampAlphaVertically args);

        public delegate bool get_clampAlphaVertically_AfterArgs(Params_get_clampAlphaVertically args, bool ret);

        public delegate bool get_clampAlphaVertically_WithArgs(Func<ToJ.Mask, bool> orig, ToJ.Mask self);

        public sealed class Params_set_clampAlphaVertically
        {
            public ToJ.Mask self;
            public bool value;
        }

        public delegate void set_clampAlphaVertically_BeforeArgs(Params_set_clampAlphaVertically args);

        public delegate void set_clampAlphaVertically_AfterArgs(Params_set_clampAlphaVertically args);

        public delegate void set_clampAlphaVertically_WithArgs(Action<ToJ.Mask, bool> orig, ToJ.Mask self, bool value);

        public sealed class Params_get_clampingBorder
        {
            public ToJ.Mask self;
        }

        public delegate void get_clampingBorder_BeforeArgs(Params_get_clampingBorder args);

        public delegate float get_clampingBorder_AfterArgs(Params_get_clampingBorder args, float ret);

        public delegate float get_clampingBorder_WithArgs(Func<ToJ.Mask, float> orig, ToJ.Mask self);

        public sealed class Params_set_clampingBorder
        {
            public ToJ.Mask self;
            public float value;
        }

        public delegate void set_clampingBorder_BeforeArgs(Params_set_clampingBorder args);

        public delegate void set_clampingBorder_AfterArgs(Params_set_clampingBorder args);

        public delegate void set_clampingBorder_WithArgs(Action<ToJ.Mask, float> orig, ToJ.Mask self, float value);

        public sealed class Params_get_useMaskAlphaChannel
        {
            public ToJ.Mask self;
        }

        public delegate void get_useMaskAlphaChannel_BeforeArgs(Params_get_useMaskAlphaChannel args);

        public delegate bool get_useMaskAlphaChannel_AfterArgs(Params_get_useMaskAlphaChannel args, bool ret);

        public delegate bool get_useMaskAlphaChannel_WithArgs(Func<ToJ.Mask, bool> orig, ToJ.Mask self);

        public sealed class Params_set_useMaskAlphaChannel
        {
            public ToJ.Mask self;
            public bool value;
        }

        public delegate void set_useMaskAlphaChannel_BeforeArgs(Params_set_useMaskAlphaChannel args);

        public delegate void set_useMaskAlphaChannel_AfterArgs(Params_set_useMaskAlphaChannel args);

        public delegate void set_useMaskAlphaChannel_WithArgs(Action<ToJ.Mask, bool> orig, ToJ.Mask self, bool value);

        public sealed class Params_Start
        {
            public ToJ.Mask self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<ToJ.Mask> orig, ToJ.Mask self);

        public sealed class Params_Update
        {
            public ToJ.Mask self;
        }

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<ToJ.Mask> orig, ToJ.Mask self);

        public sealed class Params_RotateVector
        {
            public ToJ.Mask self;
            public UnityEngine.Vector3 point;
            public UnityEngine.Vector3 angles;
        }

        public delegate void RotateVector_BeforeArgs(Params_RotateVector args);

        public delegate UnityEngine.Vector3 RotateVector_AfterArgs(Params_RotateVector args, UnityEngine.Vector3 ret);

        public delegate UnityEngine.Vector3 RotateVector_WithArgs(
            Func<ToJ.Mask, UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector3> orig, ToJ.Mask self,
            UnityEngine.Vector3 point, UnityEngine.Vector3 angles);

        public sealed class Params_SetMaskFloatValueInMaterials
        {
            public ToJ.Mask self;
            public string variable;
            public float value;
        }

        public delegate void SetMaskFloatValueInMaterials_BeforeArgs(Params_SetMaskFloatValueInMaterials args);

        public delegate void SetMaskFloatValueInMaterials_AfterArgs(Params_SetMaskFloatValueInMaterials args);

        public delegate void SetMaskFloatValueInMaterials_WithArgs(Action<ToJ.Mask, string, float> orig, ToJ.Mask self,
            string variable, float value);

        public sealed class Params_SetMaskBoolValueInMaterials
        {
            public ToJ.Mask self;
            public string variable;
            public bool value;
        }

        public delegate void SetMaskBoolValueInMaterials_BeforeArgs(Params_SetMaskBoolValueInMaterials args);

        public delegate void SetMaskBoolValueInMaterials_AfterArgs(Params_SetMaskBoolValueInMaterials args);

        public delegate void SetMaskBoolValueInMaterials_WithArgs(Action<ToJ.Mask, string, bool> orig, ToJ.Mask self,
            string variable, bool value);

        public sealed class Params_SetMaskBoolValueInMaterial
        {
            public ToJ.Mask self;
            public string variable;
            public bool value;
            public UnityEngine.Material material;
        }

        public delegate void SetMaskBoolValueInMaterial_BeforeArgs(Params_SetMaskBoolValueInMaterial args);

        public delegate void SetMaskBoolValueInMaterial_AfterArgs(Params_SetMaskBoolValueInMaterial args);

        public delegate void SetMaskBoolValueInMaterial_WithArgs(
            Action<ToJ.Mask, string, bool, UnityEngine.Material> orig, ToJ.Mask self, string variable, bool value,
            UnityEngine.Material material);

        public sealed class Params_CreateAndAssignQuad
        {
            public ToJ.Mask self;
            public UnityEngine.Mesh mesh;
            public float minX;
            public float maxX;
            public float minY;
            public float maxY;
        }

        public delegate void CreateAndAssignQuad_BeforeArgs(Params_CreateAndAssignQuad args);

        public delegate void CreateAndAssignQuad_AfterArgs(Params_CreateAndAssignQuad args);

        public delegate void CreateAndAssignQuad_WithArgs(
            Action<ToJ.Mask, UnityEngine.Mesh, float, float, float, float> orig, ToJ.Mask self, UnityEngine.Mesh mesh,
            float minX, float maxX, float minY, float maxY);

        public sealed class Params_SetMaskRendererActive
        {
            public ToJ.Mask self;
            public bool value;
        }

        public delegate void SetMaskRendererActive_BeforeArgs(Params_SetMaskRendererActive args);

        public delegate void SetMaskRendererActive_AfterArgs(Params_SetMaskRendererActive args);

        public delegate void SetMaskRendererActive_WithArgs(Action<ToJ.Mask, bool> orig, ToJ.Mask self, bool value);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_invertAxis_BeforeArgs get_invertAxis
        {
            add
            {
                HookHandler._beforeget_invertAxis += value;
                HookHandler.Hookget_invertAxis();
            }
            remove => HookHandler._beforeget_invertAxis -= value;
        }

        public static event Delegates.set_invertAxis_BeforeArgs set_invertAxis
        {
            add
            {
                HookHandler._beforeset_invertAxis += value;
                HookHandler.Hookset_invertAxis();
            }
            remove => HookHandler._beforeset_invertAxis -= value;
        }

        public static event Delegates.get_clampAlphaHorizontally_BeforeArgs get_clampAlphaHorizontally
        {
            add
            {
                HookHandler._beforeget_clampAlphaHorizontally += value;
                HookHandler.Hookget_clampAlphaHorizontally();
            }
            remove => HookHandler._beforeget_clampAlphaHorizontally -= value;
        }

        public static event Delegates.set_clampAlphaHorizontally_BeforeArgs set_clampAlphaHorizontally
        {
            add
            {
                HookHandler._beforeset_clampAlphaHorizontally += value;
                HookHandler.Hookset_clampAlphaHorizontally();
            }
            remove => HookHandler._beforeset_clampAlphaHorizontally -= value;
        }

        public static event Delegates.get_clampAlphaVertically_BeforeArgs get_clampAlphaVertically
        {
            add
            {
                HookHandler._beforeget_clampAlphaVertically += value;
                HookHandler.Hookget_clampAlphaVertically();
            }
            remove => HookHandler._beforeget_clampAlphaVertically -= value;
        }

        public static event Delegates.set_clampAlphaVertically_BeforeArgs set_clampAlphaVertically
        {
            add
            {
                HookHandler._beforeset_clampAlphaVertically += value;
                HookHandler.Hookset_clampAlphaVertically();
            }
            remove => HookHandler._beforeset_clampAlphaVertically -= value;
        }

        public static event Delegates.get_clampingBorder_BeforeArgs get_clampingBorder
        {
            add
            {
                HookHandler._beforeget_clampingBorder += value;
                HookHandler.Hookget_clampingBorder();
            }
            remove => HookHandler._beforeget_clampingBorder -= value;
        }

        public static event Delegates.set_clampingBorder_BeforeArgs set_clampingBorder
        {
            add
            {
                HookHandler._beforeset_clampingBorder += value;
                HookHandler.Hookset_clampingBorder();
            }
            remove => HookHandler._beforeset_clampingBorder -= value;
        }

        public static event Delegates.get_useMaskAlphaChannel_BeforeArgs get_useMaskAlphaChannel
        {
            add
            {
                HookHandler._beforeget_useMaskAlphaChannel += value;
                HookHandler.Hookget_useMaskAlphaChannel();
            }
            remove => HookHandler._beforeget_useMaskAlphaChannel -= value;
        }

        public static event Delegates.set_useMaskAlphaChannel_BeforeArgs set_useMaskAlphaChannel
        {
            add
            {
                HookHandler._beforeset_useMaskAlphaChannel += value;
                HookHandler.Hookset_useMaskAlphaChannel();
            }
            remove => HookHandler._beforeset_useMaskAlphaChannel -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.RotateVector_BeforeArgs RotateVector
        {
            add
            {
                HookHandler._beforeRotateVector += value;
                HookHandler.HookRotateVector();
            }
            remove => HookHandler._beforeRotateVector -= value;
        }

        public static event Delegates.SetMaskFloatValueInMaterials_BeforeArgs SetMaskFloatValueInMaterials
        {
            add
            {
                HookHandler._beforeSetMaskFloatValueInMaterials += value;
                HookHandler.HookSetMaskFloatValueInMaterials();
            }
            remove => HookHandler._beforeSetMaskFloatValueInMaterials -= value;
        }

        public static event Delegates.SetMaskBoolValueInMaterials_BeforeArgs SetMaskBoolValueInMaterials
        {
            add
            {
                HookHandler._beforeSetMaskBoolValueInMaterials += value;
                HookHandler.HookSetMaskBoolValueInMaterials();
            }
            remove => HookHandler._beforeSetMaskBoolValueInMaterials -= value;
        }

        public static event Delegates.SetMaskBoolValueInMaterial_BeforeArgs SetMaskBoolValueInMaterial
        {
            add
            {
                HookHandler._beforeSetMaskBoolValueInMaterial += value;
                HookHandler.HookSetMaskBoolValueInMaterial();
            }
            remove => HookHandler._beforeSetMaskBoolValueInMaterial -= value;
        }

        public static event Delegates.CreateAndAssignQuad_BeforeArgs CreateAndAssignQuad
        {
            add
            {
                HookHandler._beforeCreateAndAssignQuad += value;
                HookHandler.HookCreateAndAssignQuad();
            }
            remove => HookHandler._beforeCreateAndAssignQuad -= value;
        }

        public static event Delegates.SetMaskRendererActive_BeforeArgs SetMaskRendererActive
        {
            add
            {
                HookHandler._beforeSetMaskRendererActive += value;
                HookHandler.HookSetMaskRendererActive();
            }
            remove => HookHandler._beforeSetMaskRendererActive -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_invertAxis_AfterArgs get_invertAxis
        {
            add
            {
                HookHandler._afterget_invertAxis += value;
                HookHandler.Hookget_invertAxis();
            }
            remove => HookHandler._afterget_invertAxis -= value;
        }

        public static event Delegates.set_invertAxis_AfterArgs set_invertAxis
        {
            add
            {
                HookHandler._afterset_invertAxis += value;
                HookHandler.Hookset_invertAxis();
            }
            remove => HookHandler._afterset_invertAxis -= value;
        }

        public static event Delegates.get_clampAlphaHorizontally_AfterArgs get_clampAlphaHorizontally
        {
            add
            {
                HookHandler._afterget_clampAlphaHorizontally += value;
                HookHandler.Hookget_clampAlphaHorizontally();
            }
            remove => HookHandler._afterget_clampAlphaHorizontally -= value;
        }

        public static event Delegates.set_clampAlphaHorizontally_AfterArgs set_clampAlphaHorizontally
        {
            add
            {
                HookHandler._afterset_clampAlphaHorizontally += value;
                HookHandler.Hookset_clampAlphaHorizontally();
            }
            remove => HookHandler._afterset_clampAlphaHorizontally -= value;
        }

        public static event Delegates.get_clampAlphaVertically_AfterArgs get_clampAlphaVertically
        {
            add
            {
                HookHandler._afterget_clampAlphaVertically += value;
                HookHandler.Hookget_clampAlphaVertically();
            }
            remove => HookHandler._afterget_clampAlphaVertically -= value;
        }

        public static event Delegates.set_clampAlphaVertically_AfterArgs set_clampAlphaVertically
        {
            add
            {
                HookHandler._afterset_clampAlphaVertically += value;
                HookHandler.Hookset_clampAlphaVertically();
            }
            remove => HookHandler._afterset_clampAlphaVertically -= value;
        }

        public static event Delegates.get_clampingBorder_AfterArgs get_clampingBorder
        {
            add
            {
                HookHandler._afterget_clampingBorder += value;
                HookHandler.Hookget_clampingBorder();
            }
            remove => HookHandler._afterget_clampingBorder -= value;
        }

        public static event Delegates.set_clampingBorder_AfterArgs set_clampingBorder
        {
            add
            {
                HookHandler._afterset_clampingBorder += value;
                HookHandler.Hookset_clampingBorder();
            }
            remove => HookHandler._afterset_clampingBorder -= value;
        }

        public static event Delegates.get_useMaskAlphaChannel_AfterArgs get_useMaskAlphaChannel
        {
            add
            {
                HookHandler._afterget_useMaskAlphaChannel += value;
                HookHandler.Hookget_useMaskAlphaChannel();
            }
            remove => HookHandler._afterget_useMaskAlphaChannel -= value;
        }

        public static event Delegates.set_useMaskAlphaChannel_AfterArgs set_useMaskAlphaChannel
        {
            add
            {
                HookHandler._afterset_useMaskAlphaChannel += value;
                HookHandler.Hookset_useMaskAlphaChannel();
            }
            remove => HookHandler._afterset_useMaskAlphaChannel -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.RotateVector_AfterArgs RotateVector
        {
            add
            {
                HookHandler._afterRotateVector += value;
                HookHandler.HookRotateVector();
            }
            remove => HookHandler._afterRotateVector -= value;
        }

        public static event Delegates.SetMaskFloatValueInMaterials_AfterArgs SetMaskFloatValueInMaterials
        {
            add
            {
                HookHandler._afterSetMaskFloatValueInMaterials += value;
                HookHandler.HookSetMaskFloatValueInMaterials();
            }
            remove => HookHandler._afterSetMaskFloatValueInMaterials -= value;
        }

        public static event Delegates.SetMaskBoolValueInMaterials_AfterArgs SetMaskBoolValueInMaterials
        {
            add
            {
                HookHandler._afterSetMaskBoolValueInMaterials += value;
                HookHandler.HookSetMaskBoolValueInMaterials();
            }
            remove => HookHandler._afterSetMaskBoolValueInMaterials -= value;
        }

        public static event Delegates.SetMaskBoolValueInMaterial_AfterArgs SetMaskBoolValueInMaterial
        {
            add
            {
                HookHandler._afterSetMaskBoolValueInMaterial += value;
                HookHandler.HookSetMaskBoolValueInMaterial();
            }
            remove => HookHandler._afterSetMaskBoolValueInMaterial -= value;
        }

        public static event Delegates.CreateAndAssignQuad_AfterArgs CreateAndAssignQuad
        {
            add
            {
                HookHandler._afterCreateAndAssignQuad += value;
                HookHandler.HookCreateAndAssignQuad();
            }
            remove => HookHandler._afterCreateAndAssignQuad -= value;
        }

        public static event Delegates.SetMaskRendererActive_AfterArgs SetMaskRendererActive
        {
            add
            {
                HookHandler._afterSetMaskRendererActive += value;
                HookHandler.HookSetMaskRendererActive();
            }
            remove => HookHandler._afterSetMaskRendererActive -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_invertAxis_WithArgs get_invertAxis
        {
            add => HookEndpointManager.Add<Delegates.get_invertAxis_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "get_invertAxis", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_invertAxis_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "get_invertAxis", true), value);
        }

        public static event Delegates.set_invertAxis_WithArgs set_invertAxis
        {
            add => HookEndpointManager.Add<Delegates.set_invertAxis_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "set_invertAxis", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_invertAxis_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "set_invertAxis", true), value);
        }

        public static event Delegates.get_clampAlphaHorizontally_WithArgs get_clampAlphaHorizontally
        {
            add => HookEndpointManager.Add<Delegates.get_clampAlphaHorizontally_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "get_clampAlphaHorizontally", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_clampAlphaHorizontally_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "get_clampAlphaHorizontally", true), value);
        }

        public static event Delegates.set_clampAlphaHorizontally_WithArgs set_clampAlphaHorizontally
        {
            add => HookEndpointManager.Add<Delegates.set_clampAlphaHorizontally_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "set_clampAlphaHorizontally", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_clampAlphaHorizontally_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "set_clampAlphaHorizontally", true), value);
        }

        public static event Delegates.get_clampAlphaVertically_WithArgs get_clampAlphaVertically
        {
            add => HookEndpointManager.Add<Delegates.get_clampAlphaVertically_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "get_clampAlphaVertically", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_clampAlphaVertically_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "get_clampAlphaVertically", true), value);
        }

        public static event Delegates.set_clampAlphaVertically_WithArgs set_clampAlphaVertically
        {
            add => HookEndpointManager.Add<Delegates.set_clampAlphaVertically_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "set_clampAlphaVertically", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_clampAlphaVertically_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "set_clampAlphaVertically", true), value);
        }

        public static event Delegates.get_clampingBorder_WithArgs get_clampingBorder
        {
            add => HookEndpointManager.Add<Delegates.get_clampingBorder_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "get_clampingBorder", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_clampingBorder_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "get_clampingBorder", true), value);
        }

        public static event Delegates.set_clampingBorder_WithArgs set_clampingBorder
        {
            add => HookEndpointManager.Add<Delegates.set_clampingBorder_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "set_clampingBorder", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_clampingBorder_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "set_clampingBorder", true), value);
        }

        public static event Delegates.get_useMaskAlphaChannel_WithArgs get_useMaskAlphaChannel
        {
            add => HookEndpointManager.Add<Delegates.get_useMaskAlphaChannel_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "get_useMaskAlphaChannel", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_useMaskAlphaChannel_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "get_useMaskAlphaChannel", true), value);
        }

        public static event Delegates.set_useMaskAlphaChannel_WithArgs set_useMaskAlphaChannel
        {
            add => HookEndpointManager.Add<Delegates.set_useMaskAlphaChannel_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "set_useMaskAlphaChannel", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_useMaskAlphaChannel_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "set_useMaskAlphaChannel", true), value);
        }

        public static event Delegates.Start_WithArgs Start
        {
            add => HookEndpointManager.Add<Delegates.Start_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "Start", true), value);
            remove => HookEndpointManager.Remove<Delegates.Start_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "Start", true), value);
        }

        public static event Delegates.Update_WithArgs Update
        {
            add => HookEndpointManager.Add<Delegates.Update_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "Update", true), value);
            remove => HookEndpointManager.Remove<Delegates.Update_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "Update", true), value);
        }

        public static event Delegates.RotateVector_WithArgs RotateVector
        {
            add => HookEndpointManager.Add<Delegates.RotateVector_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "RotateVector", true), value);
            remove => HookEndpointManager.Remove<Delegates.RotateVector_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "RotateVector", true), value);
        }

        public static event Delegates.SetMaskFloatValueInMaterials_WithArgs SetMaskFloatValueInMaterials
        {
            add => HookEndpointManager.Add<Delegates.SetMaskFloatValueInMaterials_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "SetMaskFloatValueInMaterials", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetMaskFloatValueInMaterials_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "SetMaskFloatValueInMaterials", true), value);
        }

        public static event Delegates.SetMaskBoolValueInMaterials_WithArgs SetMaskBoolValueInMaterials
        {
            add => HookEndpointManager.Add<Delegates.SetMaskBoolValueInMaterials_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "SetMaskBoolValueInMaterials", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetMaskBoolValueInMaterials_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "SetMaskBoolValueInMaterials", true), value);
        }

        public static event Delegates.SetMaskBoolValueInMaterial_WithArgs SetMaskBoolValueInMaterial
        {
            add => HookEndpointManager.Add<Delegates.SetMaskBoolValueInMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "SetMaskBoolValueInMaterial", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetMaskBoolValueInMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "SetMaskBoolValueInMaterial", true), value);
        }

        public static event Delegates.CreateAndAssignQuad_WithArgs CreateAndAssignQuad
        {
            add => HookEndpointManager.Add<Delegates.CreateAndAssignQuad_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "CreateAndAssignQuad", true), value);
            remove => HookEndpointManager.Remove<Delegates.CreateAndAssignQuad_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "CreateAndAssignQuad", true), value);
        }

        public static event Delegates.SetMaskRendererActive_WithArgs SetMaskRendererActive
        {
            add => HookEndpointManager.Add<Delegates.SetMaskRendererActive_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "SetMaskRendererActive", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetMaskRendererActive_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ToJ.Mask), "SetMaskRendererActive", true), value);
        }
    }
}