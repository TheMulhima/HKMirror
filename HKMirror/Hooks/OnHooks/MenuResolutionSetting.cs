using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for MenuResolutionSetting class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuResolutionSetting
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_currentRes()
        {
            if (!HookedList.Contains("get_currentRes"))
            {
                HookedList.Add("get_currentRes");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "get_currentRes",
                        true), get_currentRes);
            }
        }

        internal static event Delegates.get_currentRes_BeforeArgs _beforeget_currentRes;
        internal static event Delegates.get_currentRes_AfterArgs _afterget_currentRes;

        private static UnityEngine.Resolution get_currentRes(
            Func<UnityEngine.UI.MenuResolutionSetting, UnityEngine.Resolution> orig,
            UnityEngine.UI.MenuResolutionSetting self)
        {
            Delegates.Params_get_currentRes @params = new()
            {
                self = self
            };
            if (_beforeget_currentRes != null)
            {
                foreach (Delegates.get_currentRes_BeforeArgs toInvoke in _beforeget_currentRes.GetInvocationList())
                {
                    try
                    {
                        _beforeget_currentRes?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_currentRes != null)
            {
                foreach (Delegates.get_currentRes_AfterArgs toInvoke in _afterget_currentRes.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_currentRes.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_currentRes()
        {
            if (!HookedList.Contains("set_currentRes"))
            {
                HookedList.Add("set_currentRes");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "set_currentRes",
                        true), set_currentRes);
            }
        }

        internal static event Delegates.set_currentRes_BeforeArgs _beforeset_currentRes;
        internal static event Delegates.set_currentRes_AfterArgs _afterset_currentRes;

        private static void set_currentRes(Action<UnityEngine.UI.MenuResolutionSetting, UnityEngine.Resolution> orig,
            UnityEngine.UI.MenuResolutionSetting self, UnityEngine.Resolution value)
        {
            Delegates.Params_set_currentRes @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_currentRes != null)
            {
                foreach (Delegates.set_currentRes_BeforeArgs toInvoke in _beforeset_currentRes.GetInvocationList())
                {
                    try
                    {
                        _beforeset_currentRes?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_currentRes != null)
            {
                foreach (Delegates.set_currentRes_AfterArgs toInvoke in _afterset_currentRes.GetInvocationList())
                {
                    try
                    {
                        _afterset_currentRes.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_screenRes()
        {
            if (!HookedList.Contains("get_screenRes"))
            {
                HookedList.Add("get_screenRes");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "get_screenRes", true),
                    get_screenRes);
            }
        }

        internal static event Delegates.get_screenRes_BeforeArgs _beforeget_screenRes;
        internal static event Delegates.get_screenRes_AfterArgs _afterget_screenRes;

        private static UnityEngine.Resolution get_screenRes(
            Func<UnityEngine.UI.MenuResolutionSetting, UnityEngine.Resolution> orig,
            UnityEngine.UI.MenuResolutionSetting self)
        {
            Delegates.Params_get_screenRes @params = new()
            {
                self = self
            };
            if (_beforeget_screenRes != null)
            {
                foreach (Delegates.get_screenRes_BeforeArgs toInvoke in _beforeget_screenRes.GetInvocationList())
                {
                    try
                    {
                        _beforeget_screenRes?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_screenRes != null)
            {
                foreach (Delegates.get_screenRes_AfterArgs toInvoke in _afterget_screenRes.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_screenRes.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_screenRes()
        {
            if (!HookedList.Contains("set_screenRes"))
            {
                HookedList.Add("set_screenRes");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "set_screenRes", true),
                    set_screenRes);
            }
        }

        internal static event Delegates.set_screenRes_BeforeArgs _beforeset_screenRes;
        internal static event Delegates.set_screenRes_AfterArgs _afterset_screenRes;

        private static void set_screenRes(Action<UnityEngine.UI.MenuResolutionSetting, UnityEngine.Resolution> orig,
            UnityEngine.UI.MenuResolutionSetting self, UnityEngine.Resolution value)
        {
            Delegates.Params_set_screenRes @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_screenRes != null)
            {
                foreach (Delegates.set_screenRes_BeforeArgs toInvoke in _beforeset_screenRes.GetInvocationList())
                {
                    try
                    {
                        _beforeset_screenRes?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_screenRes != null)
            {
                foreach (Delegates.set_screenRes_AfterArgs toInvoke in _afterset_screenRes.GetInvocationList())
                {
                    try
                    {
                        _afterset_screenRes.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "OnEnable", true),
                    OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
            {
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
            {
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnSubmit()
        {
            if (!HookedList.Contains("OnSubmit"))
            {
                HookedList.Add("OnSubmit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "OnSubmit", true),
                    OnSubmit);
            }
        }

        internal static event Delegates.OnSubmit_BeforeArgs _beforeOnSubmit;
        internal static event Delegates.OnSubmit_AfterArgs _afterOnSubmit;

        private static void OnSubmit(
            Action<UnityEngine.UI.MenuResolutionSetting, UnityEngine.EventSystems.BaseEventData> orig,
            UnityEngine.UI.MenuResolutionSetting self, UnityEngine.EventSystems.BaseEventData eventData)
        {
            Delegates.Params_OnSubmit @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnSubmit != null)
            {
                foreach (Delegates.OnSubmit_BeforeArgs toInvoke in _beforeOnSubmit.GetInvocationList())
                {
                    try
                    {
                        _beforeOnSubmit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnSubmit != null)
            {
                foreach (Delegates.OnSubmit_AfterArgs toInvoke in _afterOnSubmit.GetInvocationList())
                {
                    try
                    {
                        _afterOnSubmit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnMove()
        {
            if (!HookedList.Contains("OnMove"))
            {
                HookedList.Add("OnMove");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "OnMove", true),
                    OnMove);
            }
        }

        internal static event Delegates.OnMove_BeforeArgs _beforeOnMove;
        internal static event Delegates.OnMove_AfterArgs _afterOnMove;

        private static void OnMove(
            Action<UnityEngine.UI.MenuResolutionSetting, UnityEngine.EventSystems.AxisEventData> orig,
            UnityEngine.UI.MenuResolutionSetting self, UnityEngine.EventSystems.AxisEventData move)
        {
            Delegates.Params_OnMove @params = new()
            {
                self = self, move = move
            };
            if (_beforeOnMove != null)
            {
                foreach (Delegates.OnMove_BeforeArgs toInvoke in _beforeOnMove.GetInvocationList())
                {
                    try
                    {
                        _beforeOnMove?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            move = @params.move;
            orig(self, move);
            if (_afterOnMove != null)
            {
                foreach (Delegates.OnMove_AfterArgs toInvoke in _afterOnMove.GetInvocationList())
                {
                    try
                    {
                        _afterOnMove.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnPointerClick()
        {
            if (!HookedList.Contains("OnPointerClick"))
            {
                HookedList.Add("OnPointerClick");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "OnPointerClick",
                        true), OnPointerClick);
            }
        }

        internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
        internal static event Delegates.OnPointerClick_AfterArgs _afterOnPointerClick;

        private static void OnPointerClick(
            Action<UnityEngine.UI.MenuResolutionSetting, UnityEngine.EventSystems.PointerEventData> orig,
            UnityEngine.UI.MenuResolutionSetting self, UnityEngine.EventSystems.PointerEventData eventData)
        {
            Delegates.Params_OnPointerClick @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnPointerClick != null)
            {
                foreach (Delegates.OnPointerClick_BeforeArgs toInvoke in _beforeOnPointerClick.GetInvocationList())
                {
                    try
                    {
                        _beforeOnPointerClick?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnPointerClick != null)
            {
                foreach (Delegates.OnPointerClick_AfterArgs toInvoke in _afterOnPointerClick.GetInvocationList())
                {
                    try
                    {
                        _afterOnPointerClick.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookApplySettings()
        {
            if (!HookedList.Contains("ApplySettings"))
            {
                HookedList.Add("ApplySettings");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "ApplySettings", true),
                    ApplySettings);
            }
        }

        internal static event Delegates.ApplySettings_BeforeArgs _beforeApplySettings;
        internal static event Delegates.ApplySettings_AfterArgs _afterApplySettings;

        private static void ApplySettings(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self)
        {
            Delegates.Params_ApplySettings @params = new()
            {
                self = self
            };
            if (_beforeApplySettings != null)
            {
                foreach (Delegates.ApplySettings_BeforeArgs toInvoke in _beforeApplySettings.GetInvocationList())
                {
                    try
                    {
                        _beforeApplySettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterApplySettings != null)
            {
                foreach (Delegates.ApplySettings_AfterArgs toInvoke in _afterApplySettings.GetInvocationList())
                {
                    try
                    {
                        _afterApplySettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateApplyButton()
        {
            if (!HookedList.Contains("UpdateApplyButton"))
            {
                HookedList.Add("UpdateApplyButton");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "UpdateApplyButton",
                        true), UpdateApplyButton);
            }
        }

        internal static event Delegates.UpdateApplyButton_BeforeArgs _beforeUpdateApplyButton;
        internal static event Delegates.UpdateApplyButton_AfterArgs _afterUpdateApplyButton;

        private static void UpdateApplyButton(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self)
        {
            Delegates.Params_UpdateApplyButton @params = new()
            {
                self = self
            };
            if (_beforeUpdateApplyButton != null)
            {
                foreach (Delegates.UpdateApplyButton_BeforeArgs toInvoke in
                         _beforeUpdateApplyButton.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateApplyButton?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdateApplyButton != null)
            {
                foreach (Delegates.UpdateApplyButton_AfterArgs toInvoke in _afterUpdateApplyButton.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateApplyButton.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookResetToDefaultResolution()
        {
            if (!HookedList.Contains("ResetToDefaultResolution"))
            {
                HookedList.Add("ResetToDefaultResolution");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting),
                        "ResetToDefaultResolution", true), ResetToDefaultResolution);
            }
        }

        internal static event Delegates.ResetToDefaultResolution_BeforeArgs _beforeResetToDefaultResolution;
        internal static event Delegates.ResetToDefaultResolution_AfterArgs _afterResetToDefaultResolution;

        private static void ResetToDefaultResolution(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self)
        {
            Delegates.Params_ResetToDefaultResolution @params = new()
            {
                self = self
            };
            if (_beforeResetToDefaultResolution != null)
            {
                foreach (Delegates.ResetToDefaultResolution_BeforeArgs toInvoke in _beforeResetToDefaultResolution
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeResetToDefaultResolution?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterResetToDefaultResolution != null)
            {
                foreach (Delegates.ResetToDefaultResolution_AfterArgs toInvoke in _afterResetToDefaultResolution
                             .GetInvocationList())
                {
                    try
                    {
                        _afterResetToDefaultResolution.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookRefreshControls()
        {
            if (!HookedList.Contains("RefreshControls"))
            {
                HookedList.Add("RefreshControls");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "RefreshControls",
                        true), RefreshControls);
            }
        }

        internal static event Delegates.RefreshControls_BeforeArgs _beforeRefreshControls;
        internal static event Delegates.RefreshControls_AfterArgs _afterRefreshControls;

        private static void RefreshControls(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self)
        {
            Delegates.Params_RefreshControls @params = new()
            {
                self = self
            };
            if (_beforeRefreshControls != null)
            {
                foreach (Delegates.RefreshControls_BeforeArgs toInvoke in _beforeRefreshControls.GetInvocationList())
                {
                    try
                    {
                        _beforeRefreshControls?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterRefreshControls != null)
            {
                foreach (Delegates.RefreshControls_AfterArgs toInvoke in _afterRefreshControls.GetInvocationList())
                {
                    try
                    {
                        _afterRefreshControls.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookRollbackResolution()
        {
            if (!HookedList.Contains("RollbackResolution"))
            {
                HookedList.Add("RollbackResolution");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "RollbackResolution",
                        true), RollbackResolution);
            }
        }

        internal static event Delegates.RollbackResolution_BeforeArgs _beforeRollbackResolution;
        internal static event Delegates.RollbackResolution_AfterArgs _afterRollbackResolution;

        private static void RollbackResolution(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self)
        {
            Delegates.Params_RollbackResolution @params = new()
            {
                self = self
            };
            if (_beforeRollbackResolution != null)
            {
                foreach (Delegates.RollbackResolution_BeforeArgs toInvoke in
                         _beforeRollbackResolution.GetInvocationList())
                {
                    try
                    {
                        _beforeRollbackResolution?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterRollbackResolution != null)
            {
                foreach (Delegates.RollbackResolution_AfterArgs toInvoke in
                         _afterRollbackResolution.GetInvocationList())
                {
                    try
                    {
                        _afterRollbackResolution.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookRefreshCurrentIndex()
        {
            if (!HookedList.Contains("RefreshCurrentIndex"))
            {
                HookedList.Add("RefreshCurrentIndex");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "RefreshCurrentIndex",
                        true), RefreshCurrentIndex);
            }
        }

        internal static event Delegates.RefreshCurrentIndex_BeforeArgs _beforeRefreshCurrentIndex;
        internal static event Delegates.RefreshCurrentIndex_AfterArgs _afterRefreshCurrentIndex;

        private static void RefreshCurrentIndex(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self)
        {
            Delegates.Params_RefreshCurrentIndex @params = new()
            {
                self = self
            };
            if (_beforeRefreshCurrentIndex != null)
            {
                foreach (Delegates.RefreshCurrentIndex_BeforeArgs toInvoke in _beforeRefreshCurrentIndex
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeRefreshCurrentIndex?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterRefreshCurrentIndex != null)
            {
                foreach (Delegates.RefreshCurrentIndex_AfterArgs toInvoke in
                         _afterRefreshCurrentIndex.GetInvocationList())
                {
                    try
                    {
                        _afterRefreshCurrentIndex.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookPushUpdateOptionList()
        {
            if (!HookedList.Contains("PushUpdateOptionList"))
            {
                HookedList.Add("PushUpdateOptionList");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "PushUpdateOptionList",
                        true), PushUpdateOptionList);
            }
        }

        internal static event Delegates.PushUpdateOptionList_BeforeArgs _beforePushUpdateOptionList;
        internal static event Delegates.PushUpdateOptionList_AfterArgs _afterPushUpdateOptionList;

        private static void PushUpdateOptionList(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self)
        {
            Delegates.Params_PushUpdateOptionList @params = new()
            {
                self = self
            };
            if (_beforePushUpdateOptionList != null)
            {
                foreach (Delegates.PushUpdateOptionList_BeforeArgs toInvoke in _beforePushUpdateOptionList
                             .GetInvocationList())
                {
                    try
                    {
                        _beforePushUpdateOptionList?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterPushUpdateOptionList != null)
            {
                foreach (Delegates.PushUpdateOptionList_AfterArgs toInvoke in _afterPushUpdateOptionList
                             .GetInvocationList())
                {
                    try
                    {
                        _afterPushUpdateOptionList.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookHideApplyButton()
        {
            if (!HookedList.Contains("HideApplyButton"))
            {
                HookedList.Add("HideApplyButton");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "HideApplyButton",
                        true), HideApplyButton);
            }
        }

        internal static event Delegates.HideApplyButton_BeforeArgs _beforeHideApplyButton;
        internal static event Delegates.HideApplyButton_AfterArgs _afterHideApplyButton;

        private static void HideApplyButton(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self)
        {
            Delegates.Params_HideApplyButton @params = new()
            {
                self = self
            };
            if (_beforeHideApplyButton != null)
            {
                foreach (Delegates.HideApplyButton_BeforeArgs toInvoke in _beforeHideApplyButton.GetInvocationList())
                {
                    try
                    {
                        _beforeHideApplyButton?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterHideApplyButton != null)
            {
                foreach (Delegates.HideApplyButton_AfterArgs toInvoke in _afterHideApplyButton.GetInvocationList())
                {
                    try
                    {
                        _afterHideApplyButton.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookShowApplyButton()
        {
            if (!HookedList.Contains("ShowApplyButton"))
            {
                HookedList.Add("ShowApplyButton");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "ShowApplyButton",
                        true), ShowApplyButton);
            }
        }

        internal static event Delegates.ShowApplyButton_BeforeArgs _beforeShowApplyButton;
        internal static event Delegates.ShowApplyButton_AfterArgs _afterShowApplyButton;

        private static void ShowApplyButton(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self)
        {
            Delegates.Params_ShowApplyButton @params = new()
            {
                self = self
            };
            if (_beforeShowApplyButton != null)
            {
                foreach (Delegates.ShowApplyButton_BeforeArgs toInvoke in _beforeShowApplyButton.GetInvocationList())
                {
                    try
                    {
                        _beforeShowApplyButton?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterShowApplyButton != null)
            {
                foreach (Delegates.ShowApplyButton_AfterArgs toInvoke in _afterShowApplyButton.GetInvocationList())
                {
                    try
                    {
                        _afterShowApplyButton.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookRefreshAvailableResolutions()
        {
            if (!HookedList.Contains("RefreshAvailableResolutions"))
            {
                HookedList.Add("RefreshAvailableResolutions");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting),
                        "RefreshAvailableResolutions", true), RefreshAvailableResolutions);
            }
        }

        internal static event Delegates.RefreshAvailableResolutions_BeforeArgs _beforeRefreshAvailableResolutions;
        internal static event Delegates.RefreshAvailableResolutions_AfterArgs _afterRefreshAvailableResolutions;

        private static void RefreshAvailableResolutions(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self)
        {
            Delegates.Params_RefreshAvailableResolutions @params = new()
            {
                self = self
            };
            if (_beforeRefreshAvailableResolutions != null)
            {
                foreach (Delegates.RefreshAvailableResolutions_BeforeArgs toInvoke in _beforeRefreshAvailableResolutions
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeRefreshAvailableResolutions?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterRefreshAvailableResolutions != null)
            {
                foreach (Delegates.RefreshAvailableResolutions_AfterArgs toInvoke in _afterRefreshAvailableResolutions
                             .GetInvocationList())
                {
                    try
                    {
                        _afterRefreshAvailableResolutions.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookRefreshOnNextFrame()
        {
            if (!HookedList.Contains("RefreshOnNextFrame"))
            {
                HookedList.Add("RefreshOnNextFrame");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "RefreshOnNextFrame",
                        true), RefreshOnNextFrame);
            }
        }

        internal static event Delegates.RefreshOnNextFrame_BeforeArgs _beforeRefreshOnNextFrame;

        private static System.Collections.IEnumerator RefreshOnNextFrame(
            Func<UnityEngine.UI.MenuResolutionSetting, System.Collections.IEnumerator> orig,
            UnityEngine.UI.MenuResolutionSetting self)
        {
            Delegates.Params_RefreshOnNextFrame @params = new()
            {
                self = self
            };
            if (_beforeRefreshOnNextFrame != null)
            {
                foreach (Delegates.RefreshOnNextFrame_BeforeArgs toInvoke in
                         _beforeRefreshOnNextFrame.GetInvocationList())
                {
                    try
                    {
                        _beforeRefreshOnNextFrame?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            return orig(self);
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_currentRes
        {
            public UnityEngine.UI.MenuResolutionSetting self;
        }

        public delegate void get_currentRes_BeforeArgs(Params_get_currentRes args);

        public delegate UnityEngine.Resolution get_currentRes_AfterArgs(Params_get_currentRes args,
            UnityEngine.Resolution ret);

        public delegate UnityEngine.Resolution get_currentRes_WithArgs(
            Func<UnityEngine.UI.MenuResolutionSetting, UnityEngine.Resolution> orig,
            UnityEngine.UI.MenuResolutionSetting self);

        public sealed class Params_set_currentRes
        {
            public UnityEngine.UI.MenuResolutionSetting self;
            public UnityEngine.Resolution value;
        }

        public delegate void set_currentRes_BeforeArgs(Params_set_currentRes args);

        public delegate void set_currentRes_AfterArgs(Params_set_currentRes args);

        public delegate void set_currentRes_WithArgs(
            Action<UnityEngine.UI.MenuResolutionSetting, UnityEngine.Resolution> orig,
            UnityEngine.UI.MenuResolutionSetting self, UnityEngine.Resolution value);

        public sealed class Params_get_screenRes
        {
            public UnityEngine.UI.MenuResolutionSetting self;
        }

        public delegate void get_screenRes_BeforeArgs(Params_get_screenRes args);

        public delegate UnityEngine.Resolution get_screenRes_AfterArgs(Params_get_screenRes args,
            UnityEngine.Resolution ret);

        public delegate UnityEngine.Resolution get_screenRes_WithArgs(
            Func<UnityEngine.UI.MenuResolutionSetting, UnityEngine.Resolution> orig,
            UnityEngine.UI.MenuResolutionSetting self);

        public sealed class Params_set_screenRes
        {
            public UnityEngine.UI.MenuResolutionSetting self;
            public UnityEngine.Resolution value;
        }

        public delegate void set_screenRes_BeforeArgs(Params_set_screenRes args);

        public delegate void set_screenRes_AfterArgs(Params_set_screenRes args);

        public delegate void set_screenRes_WithArgs(
            Action<UnityEngine.UI.MenuResolutionSetting, UnityEngine.Resolution> orig,
            UnityEngine.UI.MenuResolutionSetting self, UnityEngine.Resolution value);

        public sealed class Params_OnEnable
        {
            public UnityEngine.UI.MenuResolutionSetting self;
        }

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self);

        public sealed class Params_OnSubmit
        {
            public UnityEngine.UI.MenuResolutionSetting self;
            public UnityEngine.EventSystems.BaseEventData eventData;
        }

        public delegate void OnSubmit_BeforeArgs(Params_OnSubmit args);

        public delegate void OnSubmit_AfterArgs(Params_OnSubmit args);

        public delegate void OnSubmit_WithArgs(
            Action<UnityEngine.UI.MenuResolutionSetting, UnityEngine.EventSystems.BaseEventData> orig,
            UnityEngine.UI.MenuResolutionSetting self, UnityEngine.EventSystems.BaseEventData eventData);

        public sealed class Params_OnMove
        {
            public UnityEngine.UI.MenuResolutionSetting self;
            public UnityEngine.EventSystems.AxisEventData move;
        }

        public delegate void OnMove_BeforeArgs(Params_OnMove args);

        public delegate void OnMove_AfterArgs(Params_OnMove args);

        public delegate void OnMove_WithArgs(
            Action<UnityEngine.UI.MenuResolutionSetting, UnityEngine.EventSystems.AxisEventData> orig,
            UnityEngine.UI.MenuResolutionSetting self, UnityEngine.EventSystems.AxisEventData move);

        public sealed class Params_OnPointerClick
        {
            public UnityEngine.UI.MenuResolutionSetting self;
            public UnityEngine.EventSystems.PointerEventData eventData;
        }

        public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_AfterArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_WithArgs(
            Action<UnityEngine.UI.MenuResolutionSetting, UnityEngine.EventSystems.PointerEventData> orig,
            UnityEngine.UI.MenuResolutionSetting self, UnityEngine.EventSystems.PointerEventData eventData);

        public sealed class Params_ApplySettings
        {
            public UnityEngine.UI.MenuResolutionSetting self;
        }

        public delegate void ApplySettings_BeforeArgs(Params_ApplySettings args);

        public delegate void ApplySettings_AfterArgs(Params_ApplySettings args);

        public delegate void ApplySettings_WithArgs(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self);

        public sealed class Params_UpdateApplyButton
        {
            public UnityEngine.UI.MenuResolutionSetting self;
        }

        public delegate void UpdateApplyButton_BeforeArgs(Params_UpdateApplyButton args);

        public delegate void UpdateApplyButton_AfterArgs(Params_UpdateApplyButton args);

        public delegate void UpdateApplyButton_WithArgs(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self);

        public sealed class Params_ResetToDefaultResolution
        {
            public UnityEngine.UI.MenuResolutionSetting self;
        }

        public delegate void ResetToDefaultResolution_BeforeArgs(Params_ResetToDefaultResolution args);

        public delegate void ResetToDefaultResolution_AfterArgs(Params_ResetToDefaultResolution args);

        public delegate void ResetToDefaultResolution_WithArgs(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self);

        public sealed class Params_RefreshControls
        {
            public UnityEngine.UI.MenuResolutionSetting self;
        }

        public delegate void RefreshControls_BeforeArgs(Params_RefreshControls args);

        public delegate void RefreshControls_AfterArgs(Params_RefreshControls args);

        public delegate void RefreshControls_WithArgs(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self);

        public sealed class Params_RollbackResolution
        {
            public UnityEngine.UI.MenuResolutionSetting self;
        }

        public delegate void RollbackResolution_BeforeArgs(Params_RollbackResolution args);

        public delegate void RollbackResolution_AfterArgs(Params_RollbackResolution args);

        public delegate void RollbackResolution_WithArgs(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self);

        public sealed class Params_RefreshCurrentIndex
        {
            public UnityEngine.UI.MenuResolutionSetting self;
        }

        public delegate void RefreshCurrentIndex_BeforeArgs(Params_RefreshCurrentIndex args);

        public delegate void RefreshCurrentIndex_AfterArgs(Params_RefreshCurrentIndex args);

        public delegate void RefreshCurrentIndex_WithArgs(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self);

        public sealed class Params_PushUpdateOptionList
        {
            public UnityEngine.UI.MenuResolutionSetting self;
        }

        public delegate void PushUpdateOptionList_BeforeArgs(Params_PushUpdateOptionList args);

        public delegate void PushUpdateOptionList_AfterArgs(Params_PushUpdateOptionList args);

        public delegate void PushUpdateOptionList_WithArgs(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self);

        public sealed class Params_HideApplyButton
        {
            public UnityEngine.UI.MenuResolutionSetting self;
        }

        public delegate void HideApplyButton_BeforeArgs(Params_HideApplyButton args);

        public delegate void HideApplyButton_AfterArgs(Params_HideApplyButton args);

        public delegate void HideApplyButton_WithArgs(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self);

        public sealed class Params_ShowApplyButton
        {
            public UnityEngine.UI.MenuResolutionSetting self;
        }

        public delegate void ShowApplyButton_BeforeArgs(Params_ShowApplyButton args);

        public delegate void ShowApplyButton_AfterArgs(Params_ShowApplyButton args);

        public delegate void ShowApplyButton_WithArgs(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self);

        public sealed class Params_RefreshAvailableResolutions
        {
            public UnityEngine.UI.MenuResolutionSetting self;
        }

        public delegate void RefreshAvailableResolutions_BeforeArgs(Params_RefreshAvailableResolutions args);

        public delegate void RefreshAvailableResolutions_AfterArgs(Params_RefreshAvailableResolutions args);

        public delegate void RefreshAvailableResolutions_WithArgs(Action<UnityEngine.UI.MenuResolutionSetting> orig,
            UnityEngine.UI.MenuResolutionSetting self);

        public sealed class Params_RefreshOnNextFrame
        {
            public UnityEngine.UI.MenuResolutionSetting self;
        }

        public delegate void RefreshOnNextFrame_BeforeArgs(Params_RefreshOnNextFrame args);

        public delegate System.Collections.IEnumerator RefreshOnNextFrame_AfterArgs(Params_RefreshOnNextFrame args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator RefreshOnNextFrame_WithArgs(
            Func<UnityEngine.UI.MenuResolutionSetting, System.Collections.IEnumerator> orig,
            UnityEngine.UI.MenuResolutionSetting self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_currentRes_BeforeArgs get_currentRes
        {
            add
            {
                HookHandler._beforeget_currentRes += value;
                HookHandler.Hookget_currentRes();
            }
            remove => HookHandler._beforeget_currentRes -= value;
        }

        public static event Delegates.set_currentRes_BeforeArgs set_currentRes
        {
            add
            {
                HookHandler._beforeset_currentRes += value;
                HookHandler.Hookset_currentRes();
            }
            remove => HookHandler._beforeset_currentRes -= value;
        }

        public static event Delegates.get_screenRes_BeforeArgs get_screenRes
        {
            add
            {
                HookHandler._beforeget_screenRes += value;
                HookHandler.Hookget_screenRes();
            }
            remove => HookHandler._beforeget_screenRes -= value;
        }

        public static event Delegates.set_screenRes_BeforeArgs set_screenRes
        {
            add
            {
                HookHandler._beforeset_screenRes += value;
                HookHandler.Hookset_screenRes();
            }
            remove => HookHandler._beforeset_screenRes -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnSubmit_BeforeArgs OnSubmit
        {
            add
            {
                HookHandler._beforeOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._beforeOnSubmit -= value;
        }

        public static event Delegates.OnMove_BeforeArgs OnMove
        {
            add
            {
                HookHandler._beforeOnMove += value;
                HookHandler.HookOnMove();
            }
            remove => HookHandler._beforeOnMove -= value;
        }

        public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
        {
            add
            {
                HookHandler._beforeOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._beforeOnPointerClick -= value;
        }

        public static event Delegates.ApplySettings_BeforeArgs ApplySettings
        {
            add
            {
                HookHandler._beforeApplySettings += value;
                HookHandler.HookApplySettings();
            }
            remove => HookHandler._beforeApplySettings -= value;
        }

        public static event Delegates.UpdateApplyButton_BeforeArgs UpdateApplyButton
        {
            add
            {
                HookHandler._beforeUpdateApplyButton += value;
                HookHandler.HookUpdateApplyButton();
            }
            remove => HookHandler._beforeUpdateApplyButton -= value;
        }

        public static event Delegates.ResetToDefaultResolution_BeforeArgs ResetToDefaultResolution
        {
            add
            {
                HookHandler._beforeResetToDefaultResolution += value;
                HookHandler.HookResetToDefaultResolution();
            }
            remove => HookHandler._beforeResetToDefaultResolution -= value;
        }

        public static event Delegates.RefreshControls_BeforeArgs RefreshControls
        {
            add
            {
                HookHandler._beforeRefreshControls += value;
                HookHandler.HookRefreshControls();
            }
            remove => HookHandler._beforeRefreshControls -= value;
        }

        public static event Delegates.RollbackResolution_BeforeArgs RollbackResolution
        {
            add
            {
                HookHandler._beforeRollbackResolution += value;
                HookHandler.HookRollbackResolution();
            }
            remove => HookHandler._beforeRollbackResolution -= value;
        }

        public static event Delegates.RefreshCurrentIndex_BeforeArgs RefreshCurrentIndex
        {
            add
            {
                HookHandler._beforeRefreshCurrentIndex += value;
                HookHandler.HookRefreshCurrentIndex();
            }
            remove => HookHandler._beforeRefreshCurrentIndex -= value;
        }

        public static event Delegates.PushUpdateOptionList_BeforeArgs PushUpdateOptionList
        {
            add
            {
                HookHandler._beforePushUpdateOptionList += value;
                HookHandler.HookPushUpdateOptionList();
            }
            remove => HookHandler._beforePushUpdateOptionList -= value;
        }

        public static event Delegates.HideApplyButton_BeforeArgs HideApplyButton
        {
            add
            {
                HookHandler._beforeHideApplyButton += value;
                HookHandler.HookHideApplyButton();
            }
            remove => HookHandler._beforeHideApplyButton -= value;
        }

        public static event Delegates.ShowApplyButton_BeforeArgs ShowApplyButton
        {
            add
            {
                HookHandler._beforeShowApplyButton += value;
                HookHandler.HookShowApplyButton();
            }
            remove => HookHandler._beforeShowApplyButton -= value;
        }

        public static event Delegates.RefreshAvailableResolutions_BeforeArgs RefreshAvailableResolutions
        {
            add
            {
                HookHandler._beforeRefreshAvailableResolutions += value;
                HookHandler.HookRefreshAvailableResolutions();
            }
            remove => HookHandler._beforeRefreshAvailableResolutions -= value;
        }

        public static event Delegates.RefreshOnNextFrame_BeforeArgs RefreshOnNextFrame
        {
            add
            {
                HookHandler._beforeRefreshOnNextFrame += value;
                HookHandler.HookRefreshOnNextFrame();
            }
            remove => HookHandler._beforeRefreshOnNextFrame -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_currentRes_AfterArgs get_currentRes
        {
            add
            {
                HookHandler._afterget_currentRes += value;
                HookHandler.Hookget_currentRes();
            }
            remove => HookHandler._afterget_currentRes -= value;
        }

        public static event Delegates.set_currentRes_AfterArgs set_currentRes
        {
            add
            {
                HookHandler._afterset_currentRes += value;
                HookHandler.Hookset_currentRes();
            }
            remove => HookHandler._afterset_currentRes -= value;
        }

        public static event Delegates.get_screenRes_AfterArgs get_screenRes
        {
            add
            {
                HookHandler._afterget_screenRes += value;
                HookHandler.Hookget_screenRes();
            }
            remove => HookHandler._afterget_screenRes -= value;
        }

        public static event Delegates.set_screenRes_AfterArgs set_screenRes
        {
            add
            {
                HookHandler._afterset_screenRes += value;
                HookHandler.Hookset_screenRes();
            }
            remove => HookHandler._afterset_screenRes -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnSubmit_AfterArgs OnSubmit
        {
            add
            {
                HookHandler._afterOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._afterOnSubmit -= value;
        }

        public static event Delegates.OnMove_AfterArgs OnMove
        {
            add
            {
                HookHandler._afterOnMove += value;
                HookHandler.HookOnMove();
            }
            remove => HookHandler._afterOnMove -= value;
        }

        public static event Delegates.OnPointerClick_AfterArgs OnPointerClick
        {
            add
            {
                HookHandler._afterOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._afterOnPointerClick -= value;
        }

        public static event Delegates.ApplySettings_AfterArgs ApplySettings
        {
            add
            {
                HookHandler._afterApplySettings += value;
                HookHandler.HookApplySettings();
            }
            remove => HookHandler._afterApplySettings -= value;
        }

        public static event Delegates.UpdateApplyButton_AfterArgs UpdateApplyButton
        {
            add
            {
                HookHandler._afterUpdateApplyButton += value;
                HookHandler.HookUpdateApplyButton();
            }
            remove => HookHandler._afterUpdateApplyButton -= value;
        }

        public static event Delegates.ResetToDefaultResolution_AfterArgs ResetToDefaultResolution
        {
            add
            {
                HookHandler._afterResetToDefaultResolution += value;
                HookHandler.HookResetToDefaultResolution();
            }
            remove => HookHandler._afterResetToDefaultResolution -= value;
        }

        public static event Delegates.RefreshControls_AfterArgs RefreshControls
        {
            add
            {
                HookHandler._afterRefreshControls += value;
                HookHandler.HookRefreshControls();
            }
            remove => HookHandler._afterRefreshControls -= value;
        }

        public static event Delegates.RollbackResolution_AfterArgs RollbackResolution
        {
            add
            {
                HookHandler._afterRollbackResolution += value;
                HookHandler.HookRollbackResolution();
            }
            remove => HookHandler._afterRollbackResolution -= value;
        }

        public static event Delegates.RefreshCurrentIndex_AfterArgs RefreshCurrentIndex
        {
            add
            {
                HookHandler._afterRefreshCurrentIndex += value;
                HookHandler.HookRefreshCurrentIndex();
            }
            remove => HookHandler._afterRefreshCurrentIndex -= value;
        }

        public static event Delegates.PushUpdateOptionList_AfterArgs PushUpdateOptionList
        {
            add
            {
                HookHandler._afterPushUpdateOptionList += value;
                HookHandler.HookPushUpdateOptionList();
            }
            remove => HookHandler._afterPushUpdateOptionList -= value;
        }

        public static event Delegates.HideApplyButton_AfterArgs HideApplyButton
        {
            add
            {
                HookHandler._afterHideApplyButton += value;
                HookHandler.HookHideApplyButton();
            }
            remove => HookHandler._afterHideApplyButton -= value;
        }

        public static event Delegates.ShowApplyButton_AfterArgs ShowApplyButton
        {
            add
            {
                HookHandler._afterShowApplyButton += value;
                HookHandler.HookShowApplyButton();
            }
            remove => HookHandler._afterShowApplyButton -= value;
        }

        public static event Delegates.RefreshAvailableResolutions_AfterArgs RefreshAvailableResolutions
        {
            add
            {
                HookHandler._afterRefreshAvailableResolutions += value;
                HookHandler.HookRefreshAvailableResolutions();
            }
            remove => HookHandler._afterRefreshAvailableResolutions -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_currentRes_WithArgs get_currentRes
        {
            add => HookEndpointManager.Add<Delegates.get_currentRes_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "get_currentRes", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_currentRes_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "get_currentRes", true),
                value);
        }

        public static event Delegates.set_currentRes_WithArgs set_currentRes
        {
            add => HookEndpointManager.Add<Delegates.set_currentRes_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "set_currentRes", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.set_currentRes_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "set_currentRes", true),
                value);
        }

        public static event Delegates.get_screenRes_WithArgs get_screenRes
        {
            add => HookEndpointManager.Add<Delegates.get_screenRes_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "get_screenRes", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_screenRes_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "get_screenRes", true),
                value);
        }

        public static event Delegates.set_screenRes_WithArgs set_screenRes
        {
            add => HookEndpointManager.Add<Delegates.set_screenRes_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "set_screenRes", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.set_screenRes_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "set_screenRes", true),
                value);
        }

        public static event Delegates.OnEnable_WithArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "OnEnable", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "OnEnable", true), value);
        }

        public static event Delegates.OnSubmit_WithArgs OnSubmit
        {
            add => HookEndpointManager.Add<Delegates.OnSubmit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "OnSubmit", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnSubmit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "OnSubmit", true), value);
        }

        public static event Delegates.OnMove_WithArgs OnMove
        {
            add => HookEndpointManager.Add<Delegates.OnMove_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "OnMove", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnMove_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "OnMove", true), value);
        }

        public static event Delegates.OnPointerClick_WithArgs OnPointerClick
        {
            add => HookEndpointManager.Add<Delegates.OnPointerClick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "OnPointerClick", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.OnPointerClick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "OnPointerClick", true),
                value);
        }

        public static event Delegates.ApplySettings_WithArgs ApplySettings
        {
            add => HookEndpointManager.Add<Delegates.ApplySettings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "ApplySettings", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.ApplySettings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "ApplySettings", true),
                value);
        }

        public static event Delegates.UpdateApplyButton_WithArgs UpdateApplyButton
        {
            add => HookEndpointManager.Add<Delegates.UpdateApplyButton_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "UpdateApplyButton", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.UpdateApplyButton_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "UpdateApplyButton", true),
                value);
        }

        public static event Delegates.ResetToDefaultResolution_WithArgs ResetToDefaultResolution
        {
            add => HookEndpointManager.Add<Delegates.ResetToDefaultResolution_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "ResetToDefaultResolution",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.ResetToDefaultResolution_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "ResetToDefaultResolution",
                    true), value);
        }

        public static event Delegates.RefreshControls_WithArgs RefreshControls
        {
            add => HookEndpointManager.Add<Delegates.RefreshControls_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "RefreshControls", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.RefreshControls_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "RefreshControls", true),
                value);
        }

        public static event Delegates.RollbackResolution_WithArgs RollbackResolution
        {
            add => HookEndpointManager.Add<Delegates.RollbackResolution_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "RollbackResolution",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.RollbackResolution_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "RollbackResolution",
                    true), value);
        }

        public static event Delegates.RefreshCurrentIndex_WithArgs RefreshCurrentIndex
        {
            add => HookEndpointManager.Add<Delegates.RefreshCurrentIndex_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "RefreshCurrentIndex",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.RefreshCurrentIndex_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "RefreshCurrentIndex",
                    true), value);
        }

        public static event Delegates.PushUpdateOptionList_WithArgs PushUpdateOptionList
        {
            add => HookEndpointManager.Add<Delegates.PushUpdateOptionList_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "PushUpdateOptionList",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.PushUpdateOptionList_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "PushUpdateOptionList",
                    true), value);
        }

        public static event Delegates.HideApplyButton_WithArgs HideApplyButton
        {
            add => HookEndpointManager.Add<Delegates.HideApplyButton_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "HideApplyButton", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.HideApplyButton_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "HideApplyButton", true),
                value);
        }

        public static event Delegates.ShowApplyButton_WithArgs ShowApplyButton
        {
            add => HookEndpointManager.Add<Delegates.ShowApplyButton_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "ShowApplyButton", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.ShowApplyButton_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "ShowApplyButton", true),
                value);
        }

        public static event Delegates.RefreshAvailableResolutions_WithArgs RefreshAvailableResolutions
        {
            add => HookEndpointManager.Add<Delegates.RefreshAvailableResolutions_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting),
                    "RefreshAvailableResolutions", true), value);
            remove => HookEndpointManager.Remove<Delegates.RefreshAvailableResolutions_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting),
                    "RefreshAvailableResolutions", true), value);
        }

        public static event Delegates.RefreshOnNextFrame_WithArgs RefreshOnNextFrame
        {
            add => HookEndpointManager.Add<Delegates.RefreshOnNextFrame_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "RefreshOnNextFrame",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.RefreshOnNextFrame_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuResolutionSetting), "RefreshOnNextFrame",
                    true), value);
        }
    }
}