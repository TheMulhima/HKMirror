using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MenuResolutionSetting class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuResolutionSetting
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_currentRes()
        {
            if (!HookedList.Contains("get_currentRes"))
            {
                HookedList.Add("get_currentRes");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "get_currentRes"),
                    get_currentRes);
            }
        }

        internal static event Delegates.get_currentRes_BeforeArgs _beforeget_currentRes;
        internal static event Delegates.get_currentRes_NormalArgs _afterget_currentRes;

        private static Resolution get_currentRes(Func<MenuResolutionSetting, Resolution> orig,
            MenuResolutionSetting self)
        {
            Delegates.Params_get_currentRes @params = new()
            {
                self = self
            };
            _beforeget_currentRes?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_currentRes != null) retVal = _afterget_currentRes.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_currentRes()
        {
            if (!HookedList.Contains("set_currentRes"))
            {
                HookedList.Add("set_currentRes");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "set_currentRes"),
                    set_currentRes);
            }
        }

        internal static event Delegates.set_currentRes_BeforeArgs _beforeset_currentRes;
        internal static event Delegates.set_currentRes_NormalArgs _afterset_currentRes;

        private static void set_currentRes(Action<MenuResolutionSetting, Resolution> orig, MenuResolutionSetting self,
            Resolution value)
        {
            Delegates.Params_set_currentRes @params = new()
            {
                self = self, value = value
            };
            _beforeset_currentRes?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_currentRes != null) _afterset_currentRes.Invoke(@params);
        }

        internal static void Hookget_screenRes()
        {
            if (!HookedList.Contains("get_screenRes"))
            {
                HookedList.Add("get_screenRes");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "get_screenRes"), get_screenRes);
            }
        }

        internal static event Delegates.get_screenRes_BeforeArgs _beforeget_screenRes;
        internal static event Delegates.get_screenRes_NormalArgs _afterget_screenRes;

        private static Resolution get_screenRes(Func<MenuResolutionSetting, Resolution> orig,
            MenuResolutionSetting self)
        {
            Delegates.Params_get_screenRes @params = new()
            {
                self = self
            };
            _beforeget_screenRes?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_screenRes != null) retVal = _afterget_screenRes.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_screenRes()
        {
            if (!HookedList.Contains("set_screenRes"))
            {
                HookedList.Add("set_screenRes");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "set_screenRes"), set_screenRes);
            }
        }

        internal static event Delegates.set_screenRes_BeforeArgs _beforeset_screenRes;
        internal static event Delegates.set_screenRes_NormalArgs _afterset_screenRes;

        private static void set_screenRes(Action<MenuResolutionSetting, Resolution> orig, MenuResolutionSetting self,
            Resolution value)
        {
            Delegates.Params_set_screenRes @params = new()
            {
                self = self, value = value
            };
            _beforeset_screenRes?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_screenRes != null) _afterset_screenRes.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "OnEnable"), OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(Action<MenuResolutionSetting> orig, MenuResolutionSetting self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnSubmit()
        {
            if (!HookedList.Contains("OnSubmit"))
            {
                HookedList.Add("OnSubmit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "OnSubmit"), OnSubmit);
            }
        }

        internal static event Delegates.OnSubmit_BeforeArgs _beforeOnSubmit;
        internal static event Delegates.OnSubmit_NormalArgs _afterOnSubmit;

        private static void OnSubmit(Action<MenuResolutionSetting, BaseEventData> orig, MenuResolutionSetting self,
            BaseEventData eventData)
        {
            Delegates.Params_OnSubmit @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnSubmit?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnSubmit != null) _afterOnSubmit.Invoke(@params);
        }

        internal static void HookOnMove()
        {
            if (!HookedList.Contains("OnMove"))
            {
                HookedList.Add("OnMove");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "OnMove"), OnMove);
            }
        }

        internal static event Delegates.OnMove_BeforeArgs _beforeOnMove;
        internal static event Delegates.OnMove_NormalArgs _afterOnMove;

        private static void OnMove(Action<MenuResolutionSetting, AxisEventData> orig, MenuResolutionSetting self,
            AxisEventData move)
        {
            Delegates.Params_OnMove @params = new()
            {
                self = self, move = move
            };
            _beforeOnMove?.Invoke(@params);
            self = @params.self;
            move = @params.move;
            orig(self, move);
            if (_afterOnMove != null) _afterOnMove.Invoke(@params);
        }

        internal static void HookOnPointerClick()
        {
            if (!HookedList.Contains("OnPointerClick"))
            {
                HookedList.Add("OnPointerClick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "OnPointerClick"),
                    OnPointerClick);
            }
        }

        internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
        internal static event Delegates.OnPointerClick_NormalArgs _afterOnPointerClick;

        private static void OnPointerClick(Action<MenuResolutionSetting, PointerEventData> orig,
            MenuResolutionSetting self, PointerEventData eventData)
        {
            Delegates.Params_OnPointerClick @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnPointerClick?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnPointerClick != null) _afterOnPointerClick.Invoke(@params);
        }

        internal static void HookApplySettings()
        {
            if (!HookedList.Contains("ApplySettings"))
            {
                HookedList.Add("ApplySettings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "ApplySettings"), ApplySettings);
            }
        }

        internal static event Delegates.ApplySettings_BeforeArgs _beforeApplySettings;
        internal static event Delegates.ApplySettings_NormalArgs _afterApplySettings;

        private static void ApplySettings(Action<MenuResolutionSetting> orig, MenuResolutionSetting self)
        {
            Delegates.Params_ApplySettings @params = new()
            {
                self = self
            };
            _beforeApplySettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterApplySettings != null) _afterApplySettings.Invoke(@params);
        }

        internal static void HookUpdateApplyButton()
        {
            if (!HookedList.Contains("UpdateApplyButton"))
            {
                HookedList.Add("UpdateApplyButton");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "UpdateApplyButton"),
                    UpdateApplyButton);
            }
        }

        internal static event Delegates.UpdateApplyButton_BeforeArgs _beforeUpdateApplyButton;
        internal static event Delegates.UpdateApplyButton_NormalArgs _afterUpdateApplyButton;

        private static void UpdateApplyButton(Action<MenuResolutionSetting> orig, MenuResolutionSetting self)
        {
            Delegates.Params_UpdateApplyButton @params = new()
            {
                self = self
            };
            _beforeUpdateApplyButton?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateApplyButton != null) _afterUpdateApplyButton.Invoke(@params);
        }

        internal static void HookResetToDefaultResolution()
        {
            if (!HookedList.Contains("ResetToDefaultResolution"))
            {
                HookedList.Add("ResetToDefaultResolution");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "ResetToDefaultResolution"),
                    ResetToDefaultResolution);
            }
        }

        internal static event Delegates.ResetToDefaultResolution_BeforeArgs _beforeResetToDefaultResolution;
        internal static event Delegates.ResetToDefaultResolution_NormalArgs _afterResetToDefaultResolution;

        private static void ResetToDefaultResolution(Action<MenuResolutionSetting> orig, MenuResolutionSetting self)
        {
            Delegates.Params_ResetToDefaultResolution @params = new()
            {
                self = self
            };
            _beforeResetToDefaultResolution?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetToDefaultResolution != null) _afterResetToDefaultResolution.Invoke(@params);
        }

        internal static void HookRefreshControls()
        {
            if (!HookedList.Contains("RefreshControls"))
            {
                HookedList.Add("RefreshControls");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "RefreshControls"),
                    RefreshControls);
            }
        }

        internal static event Delegates.RefreshControls_BeforeArgs _beforeRefreshControls;
        internal static event Delegates.RefreshControls_NormalArgs _afterRefreshControls;

        private static void RefreshControls(Action<MenuResolutionSetting> orig, MenuResolutionSetting self)
        {
            Delegates.Params_RefreshControls @params = new()
            {
                self = self
            };
            _beforeRefreshControls?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRefreshControls != null) _afterRefreshControls.Invoke(@params);
        }

        internal static void HookRollbackResolution()
        {
            if (!HookedList.Contains("RollbackResolution"))
            {
                HookedList.Add("RollbackResolution");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "RollbackResolution"),
                    RollbackResolution);
            }
        }

        internal static event Delegates.RollbackResolution_BeforeArgs _beforeRollbackResolution;
        internal static event Delegates.RollbackResolution_NormalArgs _afterRollbackResolution;

        private static void RollbackResolution(Action<MenuResolutionSetting> orig, MenuResolutionSetting self)
        {
            Delegates.Params_RollbackResolution @params = new()
            {
                self = self
            };
            _beforeRollbackResolution?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRollbackResolution != null) _afterRollbackResolution.Invoke(@params);
        }

        internal static void HookRefreshCurrentIndex()
        {
            if (!HookedList.Contains("RefreshCurrentIndex"))
            {
                HookedList.Add("RefreshCurrentIndex");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "RefreshCurrentIndex"),
                    RefreshCurrentIndex);
            }
        }

        internal static event Delegates.RefreshCurrentIndex_BeforeArgs _beforeRefreshCurrentIndex;
        internal static event Delegates.RefreshCurrentIndex_NormalArgs _afterRefreshCurrentIndex;

        private static void RefreshCurrentIndex(Action<MenuResolutionSetting> orig, MenuResolutionSetting self)
        {
            Delegates.Params_RefreshCurrentIndex @params = new()
            {
                self = self
            };
            _beforeRefreshCurrentIndex?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRefreshCurrentIndex != null) _afterRefreshCurrentIndex.Invoke(@params);
        }

        internal static void HookPushUpdateOptionList()
        {
            if (!HookedList.Contains("PushUpdateOptionList"))
            {
                HookedList.Add("PushUpdateOptionList");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "PushUpdateOptionList"),
                    PushUpdateOptionList);
            }
        }

        internal static event Delegates.PushUpdateOptionList_BeforeArgs _beforePushUpdateOptionList;
        internal static event Delegates.PushUpdateOptionList_NormalArgs _afterPushUpdateOptionList;

        private static void PushUpdateOptionList(Action<MenuResolutionSetting> orig, MenuResolutionSetting self)
        {
            Delegates.Params_PushUpdateOptionList @params = new()
            {
                self = self
            };
            _beforePushUpdateOptionList?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPushUpdateOptionList != null) _afterPushUpdateOptionList.Invoke(@params);
        }

        internal static void HookHideApplyButton()
        {
            if (!HookedList.Contains("HideApplyButton"))
            {
                HookedList.Add("HideApplyButton");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "HideApplyButton"),
                    HideApplyButton);
            }
        }

        internal static event Delegates.HideApplyButton_BeforeArgs _beforeHideApplyButton;
        internal static event Delegates.HideApplyButton_NormalArgs _afterHideApplyButton;

        private static void HideApplyButton(Action<MenuResolutionSetting> orig, MenuResolutionSetting self)
        {
            Delegates.Params_HideApplyButton @params = new()
            {
                self = self
            };
            _beforeHideApplyButton?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterHideApplyButton != null) _afterHideApplyButton.Invoke(@params);
        }

        internal static void HookShowApplyButton()
        {
            if (!HookedList.Contains("ShowApplyButton"))
            {
                HookedList.Add("ShowApplyButton");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "ShowApplyButton"),
                    ShowApplyButton);
            }
        }

        internal static event Delegates.ShowApplyButton_BeforeArgs _beforeShowApplyButton;
        internal static event Delegates.ShowApplyButton_NormalArgs _afterShowApplyButton;

        private static void ShowApplyButton(Action<MenuResolutionSetting> orig, MenuResolutionSetting self)
        {
            Delegates.Params_ShowApplyButton @params = new()
            {
                self = self
            };
            _beforeShowApplyButton?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterShowApplyButton != null) _afterShowApplyButton.Invoke(@params);
        }

        internal static void HookRefreshAvailableResolutions()
        {
            if (!HookedList.Contains("RefreshAvailableResolutions"))
            {
                HookedList.Add("RefreshAvailableResolutions");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "RefreshAvailableResolutions"),
                    RefreshAvailableResolutions);
            }
        }

        internal static event Delegates.RefreshAvailableResolutions_BeforeArgs _beforeRefreshAvailableResolutions;
        internal static event Delegates.RefreshAvailableResolutions_NormalArgs _afterRefreshAvailableResolutions;

        private static void RefreshAvailableResolutions(Action<MenuResolutionSetting> orig, MenuResolutionSetting self)
        {
            Delegates.Params_RefreshAvailableResolutions @params = new()
            {
                self = self
            };
            _beforeRefreshAvailableResolutions?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRefreshAvailableResolutions != null) _afterRefreshAvailableResolutions.Invoke(@params);
        }

        internal static void HookRefreshOnNextFrame()
        {
            if (!HookedList.Contains("RefreshOnNextFrame"))
            {
                HookedList.Add("RefreshOnNextFrame");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "RefreshOnNextFrame"),
                    RefreshOnNextFrame);
            }
        }

        internal static event Delegates.RefreshOnNextFrame_BeforeArgs _beforeRefreshOnNextFrame;

        private static IEnumerator RefreshOnNextFrame(Func<MenuResolutionSetting, IEnumerator> orig,
            MenuResolutionSetting self)
        {
            Delegates.Params_RefreshOnNextFrame @params = new()
            {
                self = self
            };
            _beforeRefreshOnNextFrame?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ApplySettings_BeforeArgs(Params_ApplySettings args);

        public delegate void ApplySettings_NormalArgs(Params_ApplySettings args);

        public delegate void get_currentRes_BeforeArgs(Params_get_currentRes args);

        public delegate Resolution get_currentRes_NormalArgs(Params_get_currentRes args);

        public delegate void get_screenRes_BeforeArgs(Params_get_screenRes args);

        public delegate Resolution get_screenRes_NormalArgs(Params_get_screenRes args);

        public delegate void HideApplyButton_BeforeArgs(Params_HideApplyButton args);

        public delegate void HideApplyButton_NormalArgs(Params_HideApplyButton args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void OnMove_BeforeArgs(Params_OnMove args);

        public delegate void OnMove_NormalArgs(Params_OnMove args);

        public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_NormalArgs(Params_OnPointerClick args);

        public delegate void OnSubmit_BeforeArgs(Params_OnSubmit args);

        public delegate void OnSubmit_NormalArgs(Params_OnSubmit args);

        public delegate void PushUpdateOptionList_BeforeArgs(Params_PushUpdateOptionList args);

        public delegate void PushUpdateOptionList_NormalArgs(Params_PushUpdateOptionList args);

        public delegate void RefreshAvailableResolutions_BeforeArgs(Params_RefreshAvailableResolutions args);

        public delegate void RefreshAvailableResolutions_NormalArgs(Params_RefreshAvailableResolutions args);

        public delegate void RefreshControls_BeforeArgs(Params_RefreshControls args);

        public delegate void RefreshControls_NormalArgs(Params_RefreshControls args);

        public delegate void RefreshCurrentIndex_BeforeArgs(Params_RefreshCurrentIndex args);

        public delegate void RefreshCurrentIndex_NormalArgs(Params_RefreshCurrentIndex args);

        public delegate void RefreshOnNextFrame_BeforeArgs(Params_RefreshOnNextFrame args);

        public delegate IEnumerator RefreshOnNextFrame_NormalArgs(Params_RefreshOnNextFrame args);

        public delegate void ResetToDefaultResolution_BeforeArgs(Params_ResetToDefaultResolution args);

        public delegate void ResetToDefaultResolution_NormalArgs(Params_ResetToDefaultResolution args);

        public delegate void RollbackResolution_BeforeArgs(Params_RollbackResolution args);

        public delegate void RollbackResolution_NormalArgs(Params_RollbackResolution args);

        public delegate void set_currentRes_BeforeArgs(Params_set_currentRes args);

        public delegate void set_currentRes_NormalArgs(Params_set_currentRes args);

        public delegate void set_screenRes_BeforeArgs(Params_set_screenRes args);

        public delegate void set_screenRes_NormalArgs(Params_set_screenRes args);

        public delegate void ShowApplyButton_BeforeArgs(Params_ShowApplyButton args);

        public delegate void ShowApplyButton_NormalArgs(Params_ShowApplyButton args);

        public delegate void UpdateApplyButton_BeforeArgs(Params_UpdateApplyButton args);

        public delegate void UpdateApplyButton_NormalArgs(Params_UpdateApplyButton args);

        public sealed class Params_get_currentRes
        {
            public MenuResolutionSetting self;
        }

        public sealed class Params_set_currentRes
        {
            public MenuResolutionSetting self;
            public Resolution value;
        }

        public sealed class Params_get_screenRes
        {
            public MenuResolutionSetting self;
        }

        public sealed class Params_set_screenRes
        {
            public MenuResolutionSetting self;
            public Resolution value;
        }

        public sealed class Params_OnEnable
        {
            public MenuResolutionSetting self;
        }

        public sealed class Params_OnSubmit
        {
            public BaseEventData eventData;
            public MenuResolutionSetting self;
        }

        public sealed class Params_OnMove
        {
            public AxisEventData move;
            public MenuResolutionSetting self;
        }

        public sealed class Params_OnPointerClick
        {
            public PointerEventData eventData;
            public MenuResolutionSetting self;
        }

        public sealed class Params_ApplySettings
        {
            public MenuResolutionSetting self;
        }

        public sealed class Params_UpdateApplyButton
        {
            public MenuResolutionSetting self;
        }

        public sealed class Params_ResetToDefaultResolution
        {
            public MenuResolutionSetting self;
        }

        public sealed class Params_RefreshControls
        {
            public MenuResolutionSetting self;
        }

        public sealed class Params_RollbackResolution
        {
            public MenuResolutionSetting self;
        }

        public sealed class Params_RefreshCurrentIndex
        {
            public MenuResolutionSetting self;
        }

        public sealed class Params_PushUpdateOptionList
        {
            public MenuResolutionSetting self;
        }

        public sealed class Params_HideApplyButton
        {
            public MenuResolutionSetting self;
        }

        public sealed class Params_ShowApplyButton
        {
            public MenuResolutionSetting self;
        }

        public sealed class Params_RefreshAvailableResolutions
        {
            public MenuResolutionSetting self;
        }

        public sealed class Params_RefreshOnNextFrame
        {
            public MenuResolutionSetting self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_currentRes_BeforeArgs get_currentRes
        {
            add
            {
                HookHandler._beforeget_currentRes += value;
                HookHandler.Hookget_currentRes();
            }
            remove => HookHandler._beforeget_currentRes -= value;
        }

        public static event Delegates.set_currentRes_BeforeArgs set_currentRes
        {
            add
            {
                HookHandler._beforeset_currentRes += value;
                HookHandler.Hookset_currentRes();
            }
            remove => HookHandler._beforeset_currentRes -= value;
        }

        public static event Delegates.get_screenRes_BeforeArgs get_screenRes
        {
            add
            {
                HookHandler._beforeget_screenRes += value;
                HookHandler.Hookget_screenRes();
            }
            remove => HookHandler._beforeget_screenRes -= value;
        }

        public static event Delegates.set_screenRes_BeforeArgs set_screenRes
        {
            add
            {
                HookHandler._beforeset_screenRes += value;
                HookHandler.Hookset_screenRes();
            }
            remove => HookHandler._beforeset_screenRes -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnSubmit_BeforeArgs OnSubmit
        {
            add
            {
                HookHandler._beforeOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._beforeOnSubmit -= value;
        }

        public static event Delegates.OnMove_BeforeArgs OnMove
        {
            add
            {
                HookHandler._beforeOnMove += value;
                HookHandler.HookOnMove();
            }
            remove => HookHandler._beforeOnMove -= value;
        }

        public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
        {
            add
            {
                HookHandler._beforeOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._beforeOnPointerClick -= value;
        }

        public static event Delegates.ApplySettings_BeforeArgs ApplySettings
        {
            add
            {
                HookHandler._beforeApplySettings += value;
                HookHandler.HookApplySettings();
            }
            remove => HookHandler._beforeApplySettings -= value;
        }

        public static event Delegates.UpdateApplyButton_BeforeArgs UpdateApplyButton
        {
            add
            {
                HookHandler._beforeUpdateApplyButton += value;
                HookHandler.HookUpdateApplyButton();
            }
            remove => HookHandler._beforeUpdateApplyButton -= value;
        }

        public static event Delegates.ResetToDefaultResolution_BeforeArgs ResetToDefaultResolution
        {
            add
            {
                HookHandler._beforeResetToDefaultResolution += value;
                HookHandler.HookResetToDefaultResolution();
            }
            remove => HookHandler._beforeResetToDefaultResolution -= value;
        }

        public static event Delegates.RefreshControls_BeforeArgs RefreshControls
        {
            add
            {
                HookHandler._beforeRefreshControls += value;
                HookHandler.HookRefreshControls();
            }
            remove => HookHandler._beforeRefreshControls -= value;
        }

        public static event Delegates.RollbackResolution_BeforeArgs RollbackResolution
        {
            add
            {
                HookHandler._beforeRollbackResolution += value;
                HookHandler.HookRollbackResolution();
            }
            remove => HookHandler._beforeRollbackResolution -= value;
        }

        public static event Delegates.RefreshCurrentIndex_BeforeArgs RefreshCurrentIndex
        {
            add
            {
                HookHandler._beforeRefreshCurrentIndex += value;
                HookHandler.HookRefreshCurrentIndex();
            }
            remove => HookHandler._beforeRefreshCurrentIndex -= value;
        }

        public static event Delegates.PushUpdateOptionList_BeforeArgs PushUpdateOptionList
        {
            add
            {
                HookHandler._beforePushUpdateOptionList += value;
                HookHandler.HookPushUpdateOptionList();
            }
            remove => HookHandler._beforePushUpdateOptionList -= value;
        }

        public static event Delegates.HideApplyButton_BeforeArgs HideApplyButton
        {
            add
            {
                HookHandler._beforeHideApplyButton += value;
                HookHandler.HookHideApplyButton();
            }
            remove => HookHandler._beforeHideApplyButton -= value;
        }

        public static event Delegates.ShowApplyButton_BeforeArgs ShowApplyButton
        {
            add
            {
                HookHandler._beforeShowApplyButton += value;
                HookHandler.HookShowApplyButton();
            }
            remove => HookHandler._beforeShowApplyButton -= value;
        }

        public static event Delegates.RefreshAvailableResolutions_BeforeArgs RefreshAvailableResolutions
        {
            add
            {
                HookHandler._beforeRefreshAvailableResolutions += value;
                HookHandler.HookRefreshAvailableResolutions();
            }
            remove => HookHandler._beforeRefreshAvailableResolutions -= value;
        }

        public static event Delegates.RefreshOnNextFrame_BeforeArgs RefreshOnNextFrame
        {
            add
            {
                HookHandler._beforeRefreshOnNextFrame += value;
                HookHandler.HookRefreshOnNextFrame();
            }
            remove => HookHandler._beforeRefreshOnNextFrame -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_currentRes_NormalArgs get_currentRes
        {
            add
            {
                HookHandler._afterget_currentRes += value;
                HookHandler.Hookget_currentRes();
            }
            remove => HookHandler._afterget_currentRes -= value;
        }

        public static event Delegates.set_currentRes_NormalArgs set_currentRes
        {
            add
            {
                HookHandler._afterset_currentRes += value;
                HookHandler.Hookset_currentRes();
            }
            remove => HookHandler._afterset_currentRes -= value;
        }

        public static event Delegates.get_screenRes_NormalArgs get_screenRes
        {
            add
            {
                HookHandler._afterget_screenRes += value;
                HookHandler.Hookget_screenRes();
            }
            remove => HookHandler._afterget_screenRes -= value;
        }

        public static event Delegates.set_screenRes_NormalArgs set_screenRes
        {
            add
            {
                HookHandler._afterset_screenRes += value;
                HookHandler.Hookset_screenRes();
            }
            remove => HookHandler._afterset_screenRes -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnSubmit_NormalArgs OnSubmit
        {
            add
            {
                HookHandler._afterOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._afterOnSubmit -= value;
        }

        public static event Delegates.OnMove_NormalArgs OnMove
        {
            add
            {
                HookHandler._afterOnMove += value;
                HookHandler.HookOnMove();
            }
            remove => HookHandler._afterOnMove -= value;
        }

        public static event Delegates.OnPointerClick_NormalArgs OnPointerClick
        {
            add
            {
                HookHandler._afterOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._afterOnPointerClick -= value;
        }

        public static event Delegates.ApplySettings_NormalArgs ApplySettings
        {
            add
            {
                HookHandler._afterApplySettings += value;
                HookHandler.HookApplySettings();
            }
            remove => HookHandler._afterApplySettings -= value;
        }

        public static event Delegates.UpdateApplyButton_NormalArgs UpdateApplyButton
        {
            add
            {
                HookHandler._afterUpdateApplyButton += value;
                HookHandler.HookUpdateApplyButton();
            }
            remove => HookHandler._afterUpdateApplyButton -= value;
        }

        public static event Delegates.ResetToDefaultResolution_NormalArgs ResetToDefaultResolution
        {
            add
            {
                HookHandler._afterResetToDefaultResolution += value;
                HookHandler.HookResetToDefaultResolution();
            }
            remove => HookHandler._afterResetToDefaultResolution -= value;
        }

        public static event Delegates.RefreshControls_NormalArgs RefreshControls
        {
            add
            {
                HookHandler._afterRefreshControls += value;
                HookHandler.HookRefreshControls();
            }
            remove => HookHandler._afterRefreshControls -= value;
        }

        public static event Delegates.RollbackResolution_NormalArgs RollbackResolution
        {
            add
            {
                HookHandler._afterRollbackResolution += value;
                HookHandler.HookRollbackResolution();
            }
            remove => HookHandler._afterRollbackResolution -= value;
        }

        public static event Delegates.RefreshCurrentIndex_NormalArgs RefreshCurrentIndex
        {
            add
            {
                HookHandler._afterRefreshCurrentIndex += value;
                HookHandler.HookRefreshCurrentIndex();
            }
            remove => HookHandler._afterRefreshCurrentIndex -= value;
        }

        public static event Delegates.PushUpdateOptionList_NormalArgs PushUpdateOptionList
        {
            add
            {
                HookHandler._afterPushUpdateOptionList += value;
                HookHandler.HookPushUpdateOptionList();
            }
            remove => HookHandler._afterPushUpdateOptionList -= value;
        }

        public static event Delegates.HideApplyButton_NormalArgs HideApplyButton
        {
            add
            {
                HookHandler._afterHideApplyButton += value;
                HookHandler.HookHideApplyButton();
            }
            remove => HookHandler._afterHideApplyButton -= value;
        }

        public static event Delegates.ShowApplyButton_NormalArgs ShowApplyButton
        {
            add
            {
                HookHandler._afterShowApplyButton += value;
                HookHandler.HookShowApplyButton();
            }
            remove => HookHandler._afterShowApplyButton -= value;
        }

        public static event Delegates.RefreshAvailableResolutions_NormalArgs RefreshAvailableResolutions
        {
            add
            {
                HookHandler._afterRefreshAvailableResolutions += value;
                HookHandler.HookRefreshAvailableResolutions();
            }
            remove => HookHandler._afterRefreshAvailableResolutions -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_currentRes_NormalArgs get_currentRes
        {
            add => HookEndpointManager.Add<Delegates.get_currentRes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "get_currentRes"), value);
            remove => HookEndpointManager.Remove<Delegates.get_currentRes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "get_currentRes"), value);
        }

        public static event Delegates.set_currentRes_NormalArgs set_currentRes
        {
            add => HookEndpointManager.Add<Delegates.set_currentRes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "set_currentRes"), value);
            remove => HookEndpointManager.Remove<Delegates.set_currentRes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "set_currentRes"), value);
        }

        public static event Delegates.get_screenRes_NormalArgs get_screenRes
        {
            add => HookEndpointManager.Add<Delegates.get_screenRes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "get_screenRes"), value);
            remove => HookEndpointManager.Remove<Delegates.get_screenRes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "get_screenRes"), value);
        }

        public static event Delegates.set_screenRes_NormalArgs set_screenRes
        {
            add => HookEndpointManager.Add<Delegates.set_screenRes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "set_screenRes"), value);
            remove => HookEndpointManager.Remove<Delegates.set_screenRes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "set_screenRes"), value);
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "OnEnable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "OnEnable"), value);
        }

        public static event Delegates.OnSubmit_NormalArgs OnSubmit
        {
            add => HookEndpointManager.Add<Delegates.OnSubmit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "OnSubmit"), value);
            remove => HookEndpointManager.Remove<Delegates.OnSubmit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "OnSubmit"), value);
        }

        public static event Delegates.OnMove_NormalArgs OnMove
        {
            add => HookEndpointManager.Add<Delegates.OnMove_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "OnMove"), value);
            remove => HookEndpointManager.Remove<Delegates.OnMove_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "OnMove"), value);
        }

        public static event Delegates.OnPointerClick_NormalArgs OnPointerClick
        {
            add => HookEndpointManager.Add<Delegates.OnPointerClick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "OnPointerClick"), value);
            remove => HookEndpointManager.Remove<Delegates.OnPointerClick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "OnPointerClick"), value);
        }

        public static event Delegates.ApplySettings_NormalArgs ApplySettings
        {
            add => HookEndpointManager.Add<Delegates.ApplySettings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "ApplySettings"), value);
            remove => HookEndpointManager.Remove<Delegates.ApplySettings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "ApplySettings"), value);
        }

        public static event Delegates.UpdateApplyButton_NormalArgs UpdateApplyButton
        {
            add => HookEndpointManager.Add<Delegates.UpdateApplyButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "UpdateApplyButton"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateApplyButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "UpdateApplyButton"), value);
        }

        public static event Delegates.ResetToDefaultResolution_NormalArgs ResetToDefaultResolution
        {
            add => HookEndpointManager.Add<Delegates.ResetToDefaultResolution_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "ResetToDefaultResolution"), value);
            remove => HookEndpointManager.Remove<Delegates.ResetToDefaultResolution_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "ResetToDefaultResolution"), value);
        }

        public static event Delegates.RefreshControls_NormalArgs RefreshControls
        {
            add => HookEndpointManager.Add<Delegates.RefreshControls_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "RefreshControls"), value);
            remove => HookEndpointManager.Remove<Delegates.RefreshControls_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "RefreshControls"), value);
        }

        public static event Delegates.RollbackResolution_NormalArgs RollbackResolution
        {
            add => HookEndpointManager.Add<Delegates.RollbackResolution_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "RollbackResolution"), value);
            remove => HookEndpointManager.Remove<Delegates.RollbackResolution_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "RollbackResolution"), value);
        }

        public static event Delegates.RefreshCurrentIndex_NormalArgs RefreshCurrentIndex
        {
            add => HookEndpointManager.Add<Delegates.RefreshCurrentIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "RefreshCurrentIndex"), value);
            remove => HookEndpointManager.Remove<Delegates.RefreshCurrentIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "RefreshCurrentIndex"), value);
        }

        public static event Delegates.PushUpdateOptionList_NormalArgs PushUpdateOptionList
        {
            add => HookEndpointManager.Add<Delegates.PushUpdateOptionList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "PushUpdateOptionList"), value);
            remove => HookEndpointManager.Remove<Delegates.PushUpdateOptionList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "PushUpdateOptionList"), value);
        }

        public static event Delegates.HideApplyButton_NormalArgs HideApplyButton
        {
            add => HookEndpointManager.Add<Delegates.HideApplyButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "HideApplyButton"), value);
            remove => HookEndpointManager.Remove<Delegates.HideApplyButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "HideApplyButton"), value);
        }

        public static event Delegates.ShowApplyButton_NormalArgs ShowApplyButton
        {
            add => HookEndpointManager.Add<Delegates.ShowApplyButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "ShowApplyButton"), value);
            remove => HookEndpointManager.Remove<Delegates.ShowApplyButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "ShowApplyButton"), value);
        }

        public static event Delegates.RefreshAvailableResolutions_NormalArgs RefreshAvailableResolutions
        {
            add => HookEndpointManager.Add<Delegates.RefreshAvailableResolutions_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "RefreshAvailableResolutions"), value);
            remove => HookEndpointManager.Remove<Delegates.RefreshAvailableResolutions_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "RefreshAvailableResolutions"), value);
        }

        public static event Delegates.RefreshOnNextFrame_NormalArgs RefreshOnNextFrame
        {
            add => HookEndpointManager.Add<Delegates.RefreshOnNextFrame_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "RefreshOnNextFrame"), value);
            remove => HookEndpointManager.Remove<Delegates.RefreshOnNextFrame_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResolutionSetting), "RefreshOnNextFrame"), value);
        }
    }
}