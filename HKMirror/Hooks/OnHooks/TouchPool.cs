using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using Touch = InControl.Touch;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TouchPool class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTouchPool
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookFindOrCreateTouch()
        {
            if (!HookedList.Contains("FindOrCreateTouch"))
            {
                HookedList.Add("FindOrCreateTouch");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchPool), "FindOrCreateTouch"), FindOrCreateTouch);
            }
        }

        internal static event Delegates.FindOrCreateTouch_BeforeArgs _beforeFindOrCreateTouch;
        internal static event Delegates.FindOrCreateTouch_NormalArgs _afterFindOrCreateTouch;

        private static Touch FindOrCreateTouch(Func<TouchPool, int, Touch> orig, TouchPool self, int fingerId)
        {
            Delegates.Params_FindOrCreateTouch @params = new()
            {
                self = self, fingerId = fingerId
            };
            _beforeFindOrCreateTouch?.Invoke(@params);
            self = @params.self;
            fingerId = @params.fingerId;
            var retVal = orig(self, fingerId);
            if (_afterFindOrCreateTouch != null) retVal = _afterFindOrCreateTouch.Invoke(@params);
            return retVal;
        }

        internal static void HookFindTouch()
        {
            if (!HookedList.Contains("FindTouch"))
            {
                HookedList.Add("FindTouch");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchPool), "FindTouch"), FindTouch);
            }
        }

        internal static event Delegates.FindTouch_BeforeArgs _beforeFindTouch;
        internal static event Delegates.FindTouch_NormalArgs _afterFindTouch;

        private static Touch FindTouch(Func<TouchPool, int, Touch> orig, TouchPool self, int fingerId)
        {
            Delegates.Params_FindTouch @params = new()
            {
                self = self, fingerId = fingerId
            };
            _beforeFindTouch?.Invoke(@params);
            self = @params.self;
            fingerId = @params.fingerId;
            var retVal = orig(self, fingerId);
            if (_afterFindTouch != null) retVal = _afterFindTouch.Invoke(@params);
            return retVal;
        }

        internal static void HookNewTouch()
        {
            if (!HookedList.Contains("NewTouch"))
            {
                HookedList.Add("NewTouch");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchPool), "NewTouch"), NewTouch);
            }
        }

        internal static event Delegates.NewTouch_BeforeArgs _beforeNewTouch;
        internal static event Delegates.NewTouch_NormalArgs _afterNewTouch;

        private static Touch NewTouch(Func<TouchPool, Touch> orig, TouchPool self)
        {
            Delegates.Params_NewTouch @params = new()
            {
                self = self
            };
            _beforeNewTouch?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterNewTouch != null) retVal = _afterNewTouch.Invoke(@params);
            return retVal;
        }

        internal static void HookFreeTouch()
        {
            if (!HookedList.Contains("FreeTouch"))
            {
                HookedList.Add("FreeTouch");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchPool), "FreeTouch"), FreeTouch);
            }
        }

        internal static event Delegates.FreeTouch_BeforeArgs _beforeFreeTouch;
        internal static event Delegates.FreeTouch_NormalArgs _afterFreeTouch;

        private static void FreeTouch(Action<TouchPool, Touch> orig, TouchPool self, Touch touch)
        {
            Delegates.Params_FreeTouch @params = new()
            {
                self = self, touch = touch
            };
            _beforeFreeTouch?.Invoke(@params);
            self = @params.self;
            touch = @params.touch;
            orig(self, touch);
            if (_afterFreeTouch != null) _afterFreeTouch.Invoke(@params);
        }

        internal static void HookFreeEndedTouches()
        {
            if (!HookedList.Contains("FreeEndedTouches"))
            {
                HookedList.Add("FreeEndedTouches");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchPool), "FreeEndedTouches"), FreeEndedTouches);
            }
        }

        internal static event Delegates.FreeEndedTouches_BeforeArgs _beforeFreeEndedTouches;
        internal static event Delegates.FreeEndedTouches_NormalArgs _afterFreeEndedTouches;

        private static void FreeEndedTouches(Action<TouchPool> orig, TouchPool self)
        {
            Delegates.Params_FreeEndedTouches @params = new()
            {
                self = self
            };
            _beforeFreeEndedTouches?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFreeEndedTouches != null) _afterFreeEndedTouches.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void FindOrCreateTouch_BeforeArgs(Params_FindOrCreateTouch args);

        public delegate Touch FindOrCreateTouch_NormalArgs(Params_FindOrCreateTouch args);

        public delegate void FindTouch_BeforeArgs(Params_FindTouch args);

        public delegate Touch FindTouch_NormalArgs(Params_FindTouch args);

        public delegate void FreeEndedTouches_BeforeArgs(Params_FreeEndedTouches args);

        public delegate void FreeEndedTouches_NormalArgs(Params_FreeEndedTouches args);

        public delegate void FreeTouch_BeforeArgs(Params_FreeTouch args);

        public delegate void FreeTouch_NormalArgs(Params_FreeTouch args);

        public delegate void NewTouch_BeforeArgs(Params_NewTouch args);

        public delegate Touch NewTouch_NormalArgs(Params_NewTouch args);

        public sealed class Params_FindOrCreateTouch
        {
            public int fingerId;
            public TouchPool self;
        }

        public sealed class Params_FindTouch
        {
            public int fingerId;
            public TouchPool self;
        }

        public sealed class Params_NewTouch
        {
            public TouchPool self;
        }

        public sealed class Params_FreeTouch
        {
            public TouchPool self;
            public Touch touch;
        }

        public sealed class Params_FreeEndedTouches
        {
            public TouchPool self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.FindOrCreateTouch_BeforeArgs FindOrCreateTouch
        {
            add
            {
                HookHandler._beforeFindOrCreateTouch += value;
                HookHandler.HookFindOrCreateTouch();
            }
            remove => HookHandler._beforeFindOrCreateTouch -= value;
        }

        public static event Delegates.FindTouch_BeforeArgs FindTouch
        {
            add
            {
                HookHandler._beforeFindTouch += value;
                HookHandler.HookFindTouch();
            }
            remove => HookHandler._beforeFindTouch -= value;
        }

        public static event Delegates.NewTouch_BeforeArgs NewTouch
        {
            add
            {
                HookHandler._beforeNewTouch += value;
                HookHandler.HookNewTouch();
            }
            remove => HookHandler._beforeNewTouch -= value;
        }

        public static event Delegates.FreeTouch_BeforeArgs FreeTouch
        {
            add
            {
                HookHandler._beforeFreeTouch += value;
                HookHandler.HookFreeTouch();
            }
            remove => HookHandler._beforeFreeTouch -= value;
        }

        public static event Delegates.FreeEndedTouches_BeforeArgs FreeEndedTouches
        {
            add
            {
                HookHandler._beforeFreeEndedTouches += value;
                HookHandler.HookFreeEndedTouches();
            }
            remove => HookHandler._beforeFreeEndedTouches -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.FindOrCreateTouch_NormalArgs FindOrCreateTouch
        {
            add
            {
                HookHandler._afterFindOrCreateTouch += value;
                HookHandler.HookFindOrCreateTouch();
            }
            remove => HookHandler._afterFindOrCreateTouch -= value;
        }

        public static event Delegates.FindTouch_NormalArgs FindTouch
        {
            add
            {
                HookHandler._afterFindTouch += value;
                HookHandler.HookFindTouch();
            }
            remove => HookHandler._afterFindTouch -= value;
        }

        public static event Delegates.NewTouch_NormalArgs NewTouch
        {
            add
            {
                HookHandler._afterNewTouch += value;
                HookHandler.HookNewTouch();
            }
            remove => HookHandler._afterNewTouch -= value;
        }

        public static event Delegates.FreeTouch_NormalArgs FreeTouch
        {
            add
            {
                HookHandler._afterFreeTouch += value;
                HookHandler.HookFreeTouch();
            }
            remove => HookHandler._afterFreeTouch -= value;
        }

        public static event Delegates.FreeEndedTouches_NormalArgs FreeEndedTouches
        {
            add
            {
                HookHandler._afterFreeEndedTouches += value;
                HookHandler.HookFreeEndedTouches();
            }
            remove => HookHandler._afterFreeEndedTouches -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.FindOrCreateTouch_NormalArgs FindOrCreateTouch
        {
            add => HookEndpointManager.Add<Delegates.FindOrCreateTouch_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchPool), "FindOrCreateTouch"), value);
            remove => HookEndpointManager.Remove<Delegates.FindOrCreateTouch_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchPool), "FindOrCreateTouch"), value);
        }

        public static event Delegates.FindTouch_NormalArgs FindTouch
        {
            add => HookEndpointManager.Add<Delegates.FindTouch_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchPool), "FindTouch"), value);
            remove => HookEndpointManager.Remove<Delegates.FindTouch_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchPool), "FindTouch"), value);
        }

        public static event Delegates.NewTouch_NormalArgs NewTouch
        {
            add => HookEndpointManager.Add<Delegates.NewTouch_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchPool), "NewTouch"), value);
            remove => HookEndpointManager.Remove<Delegates.NewTouch_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchPool), "NewTouch"), value);
        }

        public static event Delegates.FreeTouch_NormalArgs FreeTouch
        {
            add => HookEndpointManager.Add<Delegates.FreeTouch_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchPool), "FreeTouch"), value);
            remove => HookEndpointManager.Remove<Delegates.FreeTouch_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchPool), "FreeTouch"), value);
        }

        public static event Delegates.FreeEndedTouches_NormalArgs FreeEndedTouches
        {
            add => HookEndpointManager.Add<Delegates.FreeEndedTouches_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchPool), "FreeEndedTouches"), value);
            remove => HookEndpointManager.Remove<Delegates.FreeEndedTouches_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchPool), "FreeEndedTouches"), value);
        }
    }
}