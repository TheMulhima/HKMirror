using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for RectOverlaps class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnRectOverlaps
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(RectOverlaps), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<RectOverlaps> orig, RectOverlaps self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(RectOverlaps), "OnEnter"), OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_NormalArgs _afterOnEnter;

        private static void OnEnter(Action<RectOverlaps> orig, RectOverlaps self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            _beforeOnEnter?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnter != null) _afterOnEnter.Invoke(@params);
        }

        internal static void HookOnUpdate()
        {
            if (!HookedList.Contains("OnUpdate"))
            {
                HookedList.Add("OnUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(RectOverlaps), "OnUpdate"), OnUpdate);
            }
        }

        internal static event Delegates.OnUpdate_BeforeArgs _beforeOnUpdate;
        internal static event Delegates.OnUpdate_NormalArgs _afterOnUpdate;

        private static void OnUpdate(Action<RectOverlaps> orig, RectOverlaps self)
        {
            Delegates.Params_OnUpdate @params = new()
            {
                self = self
            };
            _beforeOnUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnUpdate != null) _afterOnUpdate.Invoke(@params);
        }

        internal static void HookDoRectOverlap()
        {
            if (!HookedList.Contains("DoRectOverlap"))
            {
                HookedList.Add("DoRectOverlap");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(RectOverlaps), "DoRectOverlap"), DoRectOverlap);
            }
        }

        internal static event Delegates.DoRectOverlap_BeforeArgs _beforeDoRectOverlap;
        internal static event Delegates.DoRectOverlap_NormalArgs _afterDoRectOverlap;

        private static void DoRectOverlap(Action<RectOverlaps> orig, RectOverlaps self)
        {
            Delegates.Params_DoRectOverlap @params = new()
            {
                self = self
            };
            _beforeDoRectOverlap?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoRectOverlap != null) _afterDoRectOverlap.Invoke(@params);
        }

        internal static void HookIntersect()
        {
            if (!HookedList.Contains("Intersect"))
            {
                HookedList.Add("Intersect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(RectOverlaps), "Intersect", false), Intersect);
            }
        }

        internal static event Delegates.Intersect_BeforeArgs _beforeIntersect;
        internal static event Delegates.Intersect_NormalArgs _afterIntersect;

        private static bool Intersect(Func<Rect, Rect, bool> orig, Rect a, Rect b)
        {
            Delegates.Params_Intersect @params = new()
            {
                a = a, b = b
            };
            _beforeIntersect?.Invoke(@params);
            a = @params.a;
            b = @params.b;
            var retVal = orig(a, b);
            if (_afterIntersect != null) retVal = _afterIntersect.Invoke(@params);
            return retVal;
        }

        internal static void HookFlipNegative()
        {
            if (!HookedList.Contains("FlipNegative"))
            {
                HookedList.Add("FlipNegative");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(RectOverlaps), "FlipNegative", false), FlipNegative);
            }
        }

        internal static event Delegates.FlipNegative_BeforeArgs _beforeFlipNegative;
        internal static event Delegates.FlipNegative_NormalArgs _afterFlipNegative;

        private static void FlipNegative(Action<Rect> orig, Rect r)
        {
            Delegates.Params_FlipNegative @params = new()
            {
                r = r
            };
            _beforeFlipNegative?.Invoke(@params);
            r = @params.r;
            orig(r);
            if (_afterFlipNegative != null) _afterFlipNegative.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void DoRectOverlap_BeforeArgs(Params_DoRectOverlap args);

        public delegate void DoRectOverlap_NormalArgs(Params_DoRectOverlap args);

        public delegate void FlipNegative_BeforeArgs(Params_FlipNegative args);

        public delegate void FlipNegative_NormalArgs(Params_FlipNegative args);

        public delegate void Intersect_BeforeArgs(Params_Intersect args);

        public delegate bool Intersect_NormalArgs(Params_Intersect args);

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_NormalArgs(Params_OnEnter args);

        public delegate void OnUpdate_BeforeArgs(Params_OnUpdate args);

        public delegate void OnUpdate_NormalArgs(Params_OnUpdate args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public sealed class Params_Reset
        {
            public RectOverlaps self;
        }

        public sealed class Params_OnEnter
        {
            public RectOverlaps self;
        }

        public sealed class Params_OnUpdate
        {
            public RectOverlaps self;
        }

        public sealed class Params_DoRectOverlap
        {
            public RectOverlaps self;
        }

        public sealed class Params_Intersect
        {
            public Rect a;
            public Rect b;
        }

        public sealed class Params_FlipNegative
        {
            public Rect r;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.OnUpdate_BeforeArgs OnUpdate
        {
            add
            {
                HookHandler._beforeOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._beforeOnUpdate -= value;
        }

        public static event Delegates.DoRectOverlap_BeforeArgs DoRectOverlap
        {
            add
            {
                HookHandler._beforeDoRectOverlap += value;
                HookHandler.HookDoRectOverlap();
            }
            remove => HookHandler._beforeDoRectOverlap -= value;
        }

        public static event Delegates.Intersect_BeforeArgs Intersect
        {
            add
            {
                HookHandler._beforeIntersect += value;
                HookHandler.HookIntersect();
            }
            remove => HookHandler._beforeIntersect -= value;
        }

        public static event Delegates.FlipNegative_BeforeArgs FlipNegative
        {
            add
            {
                HookHandler._beforeFlipNegative += value;
                HookHandler.HookFlipNegative();
            }
            remove => HookHandler._beforeFlipNegative -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.OnUpdate_NormalArgs OnUpdate
        {
            add
            {
                HookHandler._afterOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._afterOnUpdate -= value;
        }

        public static event Delegates.DoRectOverlap_NormalArgs DoRectOverlap
        {
            add
            {
                HookHandler._afterDoRectOverlap += value;
                HookHandler.HookDoRectOverlap();
            }
            remove => HookHandler._afterDoRectOverlap -= value;
        }

        public static event Delegates.Intersect_NormalArgs Intersect
        {
            add
            {
                HookHandler._afterIntersect += value;
                HookHandler.HookIntersect();
            }
            remove => HookHandler._afterIntersect -= value;
        }

        public static event Delegates.FlipNegative_NormalArgs FlipNegative
        {
            add
            {
                HookHandler._afterFlipNegative += value;
                HookHandler.HookFlipNegative();
            }
            remove => HookHandler._afterFlipNegative -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(RectOverlaps), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(RectOverlaps), "Reset"), value);
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(RectOverlaps), "OnEnter"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(RectOverlaps), "OnEnter"), value);
        }

        public static event Delegates.OnUpdate_NormalArgs OnUpdate
        {
            add => HookEndpointManager.Add<Delegates.OnUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(RectOverlaps), "OnUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.OnUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(RectOverlaps), "OnUpdate"), value);
        }

        public static event Delegates.DoRectOverlap_NormalArgs DoRectOverlap
        {
            add => HookEndpointManager.Add<Delegates.DoRectOverlap_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(RectOverlaps), "DoRectOverlap"), value);
            remove => HookEndpointManager.Remove<Delegates.DoRectOverlap_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(RectOverlaps), "DoRectOverlap"), value);
        }

        public static event Delegates.Intersect_NormalArgs Intersect
        {
            add => HookEndpointManager.Add<Delegates.Intersect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(RectOverlaps), "Intersect", false), value);
            remove => HookEndpointManager.Remove<Delegates.Intersect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(RectOverlaps), "Intersect", false), value);
        }

        public static event Delegates.FlipNegative_NormalArgs FlipNegative
        {
            add => HookEndpointManager.Add<Delegates.FlipNegative_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(RectOverlaps), "FlipNegative", false), value);
            remove => HookEndpointManager.Remove<Delegates.FlipNegative_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(RectOverlaps), "FlipNegative", false), value);
        }
    }
}