using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for RectOverlaps class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnRectOverlaps
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.RectOverlaps), "Reset", true),
                    Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_AfterArgs _afterReset;

        private static void Reset(Action<HutongGames.PlayMaker.Actions.RectOverlaps> orig,
            HutongGames.PlayMaker.Actions.RectOverlaps self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            if (_beforeReset != null)
            {
                foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
                {
                    try
                    {
                        _beforeReset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterReset != null)
            {
                foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
                {
                    try
                    {
                        _afterReset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.RectOverlaps), "OnEnter", true),
                    OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_AfterArgs _afterOnEnter;

        private static void OnEnter(Action<HutongGames.PlayMaker.Actions.RectOverlaps> orig,
            HutongGames.PlayMaker.Actions.RectOverlaps self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            if (_beforeOnEnter != null)
            {
                foreach (Delegates.OnEnter_BeforeArgs toInvoke in _beforeOnEnter.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnter != null)
            {
                foreach (Delegates.OnEnter_AfterArgs toInvoke in _afterOnEnter.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnter.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnUpdate()
        {
            if (!HookedList.Contains("OnUpdate"))
            {
                HookedList.Add("OnUpdate");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.RectOverlaps), "OnUpdate",
                        true), OnUpdate);
            }
        }

        internal static event Delegates.OnUpdate_BeforeArgs _beforeOnUpdate;
        internal static event Delegates.OnUpdate_AfterArgs _afterOnUpdate;

        private static void OnUpdate(Action<HutongGames.PlayMaker.Actions.RectOverlaps> orig,
            HutongGames.PlayMaker.Actions.RectOverlaps self)
        {
            Delegates.Params_OnUpdate @params = new()
            {
                self = self
            };
            if (_beforeOnUpdate != null)
            {
                foreach (Delegates.OnUpdate_BeforeArgs toInvoke in _beforeOnUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeOnUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnUpdate != null)
            {
                foreach (Delegates.OnUpdate_AfterArgs toInvoke in _afterOnUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterOnUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDoRectOverlap()
        {
            if (!HookedList.Contains("DoRectOverlap"))
            {
                HookedList.Add("DoRectOverlap");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.RectOverlaps), "DoRectOverlap",
                        true), DoRectOverlap);
            }
        }

        internal static event Delegates.DoRectOverlap_BeforeArgs _beforeDoRectOverlap;
        internal static event Delegates.DoRectOverlap_AfterArgs _afterDoRectOverlap;

        private static void DoRectOverlap(Action<HutongGames.PlayMaker.Actions.RectOverlaps> orig,
            HutongGames.PlayMaker.Actions.RectOverlaps self)
        {
            Delegates.Params_DoRectOverlap @params = new()
            {
                self = self
            };
            if (_beforeDoRectOverlap != null)
            {
                foreach (Delegates.DoRectOverlap_BeforeArgs toInvoke in _beforeDoRectOverlap.GetInvocationList())
                {
                    try
                    {
                        _beforeDoRectOverlap?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterDoRectOverlap != null)
            {
                foreach (Delegates.DoRectOverlap_AfterArgs toInvoke in _afterDoRectOverlap.GetInvocationList())
                {
                    try
                    {
                        _afterDoRectOverlap.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookIntersect()
        {
            if (!HookedList.Contains("Intersect"))
            {
                HookedList.Add("Intersect");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.RectOverlaps), "Intersect",
                        false), Intersect);
            }
        }

        internal static event Delegates.Intersect_BeforeArgs _beforeIntersect;
        internal static event Delegates.Intersect_AfterArgs _afterIntersect;

        private static bool Intersect(Func<UnityEngine.Rect, UnityEngine.Rect, bool> orig, UnityEngine.Rect a,
            UnityEngine.Rect b)
        {
            Delegates.Params_Intersect @params = new()
            {
                a = a, b = b
            };
            if (_beforeIntersect != null)
            {
                foreach (Delegates.Intersect_BeforeArgs toInvoke in _beforeIntersect.GetInvocationList())
                {
                    try
                    {
                        _beforeIntersect?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            a = @params.a;
            b = @params.b;
            var retVal = orig(a, b);
            if (_afterIntersect != null)
            {
                foreach (Delegates.Intersect_AfterArgs toInvoke in _afterIntersect.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterIntersect.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookFlipNegative()
        {
            if (!HookedList.Contains("FlipNegative"))
            {
                HookedList.Add("FlipNegative");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.RectOverlaps), "FlipNegative",
                        false), FlipNegative);
            }
        }

        internal static event Delegates.FlipNegative_BeforeArgs _beforeFlipNegative;
        internal static event Delegates.FlipNegative_AfterArgs _afterFlipNegative;

        private static void FlipNegative(Action<UnityEngine.Rect> orig, UnityEngine.Rect r)
        {
            Delegates.Params_FlipNegative @params = new()
            {
                r = r
            };
            if (_beforeFlipNegative != null)
            {
                foreach (Delegates.FlipNegative_BeforeArgs toInvoke in _beforeFlipNegative.GetInvocationList())
                {
                    try
                    {
                        _beforeFlipNegative?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            r = @params.r;
            orig(r);
            if (_afterFlipNegative != null)
            {
                foreach (Delegates.FlipNegative_AfterArgs toInvoke in _afterFlipNegative.GetInvocationList())
                {
                    try
                    {
                        _afterFlipNegative.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Reset
        {
            public HutongGames.PlayMaker.Actions.RectOverlaps self;
        }

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_AfterArgs(Params_Reset args);

        public delegate void Reset_WithArgs(Action<HutongGames.PlayMaker.Actions.RectOverlaps> orig,
            HutongGames.PlayMaker.Actions.RectOverlaps self);

        public sealed class Params_OnEnter
        {
            public HutongGames.PlayMaker.Actions.RectOverlaps self;
        }

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_AfterArgs(Params_OnEnter args);

        public delegate void OnEnter_WithArgs(Action<HutongGames.PlayMaker.Actions.RectOverlaps> orig,
            HutongGames.PlayMaker.Actions.RectOverlaps self);

        public sealed class Params_OnUpdate
        {
            public HutongGames.PlayMaker.Actions.RectOverlaps self;
        }

        public delegate void OnUpdate_BeforeArgs(Params_OnUpdate args);

        public delegate void OnUpdate_AfterArgs(Params_OnUpdate args);

        public delegate void OnUpdate_WithArgs(Action<HutongGames.PlayMaker.Actions.RectOverlaps> orig,
            HutongGames.PlayMaker.Actions.RectOverlaps self);

        public sealed class Params_DoRectOverlap
        {
            public HutongGames.PlayMaker.Actions.RectOverlaps self;
        }

        public delegate void DoRectOverlap_BeforeArgs(Params_DoRectOverlap args);

        public delegate void DoRectOverlap_AfterArgs(Params_DoRectOverlap args);

        public delegate void DoRectOverlap_WithArgs(Action<HutongGames.PlayMaker.Actions.RectOverlaps> orig,
            HutongGames.PlayMaker.Actions.RectOverlaps self);

        public sealed class Params_Intersect
        {
            public UnityEngine.Rect a;
            public UnityEngine.Rect b;
        }

        public delegate void Intersect_BeforeArgs(Params_Intersect args);

        public delegate bool Intersect_AfterArgs(Params_Intersect args, bool ret);

        public delegate bool Intersect_WithArgs(Func<UnityEngine.Rect, UnityEngine.Rect, bool> orig, UnityEngine.Rect a,
            UnityEngine.Rect b);

        public sealed class Params_FlipNegative
        {
            public UnityEngine.Rect r;
        }

        public delegate void FlipNegative_BeforeArgs(Params_FlipNegative args);

        public delegate void FlipNegative_AfterArgs(Params_FlipNegative args);

        public delegate void FlipNegative_WithArgs(Action<UnityEngine.Rect> orig, UnityEngine.Rect r);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.OnUpdate_BeforeArgs OnUpdate
        {
            add
            {
                HookHandler._beforeOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._beforeOnUpdate -= value;
        }

        public static event Delegates.DoRectOverlap_BeforeArgs DoRectOverlap
        {
            add
            {
                HookHandler._beforeDoRectOverlap += value;
                HookHandler.HookDoRectOverlap();
            }
            remove => HookHandler._beforeDoRectOverlap -= value;
        }

        public static event Delegates.Intersect_BeforeArgs Intersect
        {
            add
            {
                HookHandler._beforeIntersect += value;
                HookHandler.HookIntersect();
            }
            remove => HookHandler._beforeIntersect -= value;
        }

        public static event Delegates.FlipNegative_BeforeArgs FlipNegative
        {
            add
            {
                HookHandler._beforeFlipNegative += value;
                HookHandler.HookFlipNegative();
            }
            remove => HookHandler._beforeFlipNegative -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_AfterArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_AfterArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.OnUpdate_AfterArgs OnUpdate
        {
            add
            {
                HookHandler._afterOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._afterOnUpdate -= value;
        }

        public static event Delegates.DoRectOverlap_AfterArgs DoRectOverlap
        {
            add
            {
                HookHandler._afterDoRectOverlap += value;
                HookHandler.HookDoRectOverlap();
            }
            remove => HookHandler._afterDoRectOverlap -= value;
        }

        public static event Delegates.Intersect_AfterArgs Intersect
        {
            add
            {
                HookHandler._afterIntersect += value;
                HookHandler.HookIntersect();
            }
            remove => HookHandler._afterIntersect -= value;
        }

        public static event Delegates.FlipNegative_AfterArgs FlipNegative
        {
            add
            {
                HookHandler._afterFlipNegative += value;
                HookHandler.HookFlipNegative();
            }
            remove => HookHandler._afterFlipNegative -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_WithArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.RectOverlaps), "Reset", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.RectOverlaps), "Reset", true),
                value);
        }

        public static event Delegates.OnEnter_WithArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.RectOverlaps), "OnEnter", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.RectOverlaps), "OnEnter", true),
                value);
        }

        public static event Delegates.OnUpdate_WithArgs OnUpdate
        {
            add => HookEndpointManager.Add<Delegates.OnUpdate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.RectOverlaps), "OnUpdate", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.OnUpdate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.RectOverlaps), "OnUpdate", true),
                value);
        }

        public static event Delegates.DoRectOverlap_WithArgs DoRectOverlap
        {
            add => HookEndpointManager.Add<Delegates.DoRectOverlap_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.RectOverlaps), "DoRectOverlap",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.DoRectOverlap_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.RectOverlaps), "DoRectOverlap",
                    true), value);
        }

        public static event Delegates.Intersect_WithArgs Intersect
        {
            add => HookEndpointManager.Add<Delegates.Intersect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.RectOverlaps), "Intersect", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.Intersect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.RectOverlaps), "Intersect", false),
                value);
        }

        public static event Delegates.FlipNegative_WithArgs FlipNegative
        {
            add => HookEndpointManager.Add<Delegates.FlipNegative_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.RectOverlaps), "FlipNegative",
                    false), value);
            remove => HookEndpointManager.Remove<Delegates.FlipNegative_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.RectOverlaps), "FlipNegative",
                    false), value);
        }
    }
}