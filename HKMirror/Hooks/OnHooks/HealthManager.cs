using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for HealthManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnHealthManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_IsInvincible()
        {
            if (!HookedList.Contains("get_IsInvincible"))
            {
                HookedList.Add("get_IsInvincible");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HealthManager), "get_IsInvincible"), get_IsInvincible);
            }
        }

        internal static event Delegates.get_IsInvincible_BeforeArgs _beforeget_IsInvincible;
        internal static event Delegates.get_IsInvincible_AfterArgs _afterget_IsInvincible;

        private static bool get_IsInvincible(Func<HealthManager, bool> orig, HealthManager self)
        {
            Delegates.Params_get_IsInvincible @params = new()
            {
                self = self
            };
            if (_beforeget_IsInvincible != null)
                foreach (Delegates.get_IsInvincible_BeforeArgs toInvoke in _beforeget_IsInvincible.GetInvocationList())
                    try
                    {
                        _beforeget_IsInvincible?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsInvincible != null)
                foreach (Delegates.get_IsInvincible_AfterArgs toInvoke in _afterget_IsInvincible.GetInvocationList())
                    try
                    {
                        retVal = _afterget_IsInvincible.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_IsInvincible()
        {
            if (!HookedList.Contains("set_IsInvincible"))
            {
                HookedList.Add("set_IsInvincible");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HealthManager), "set_IsInvincible"), set_IsInvincible);
            }
        }

        internal static event Delegates.set_IsInvincible_BeforeArgs _beforeset_IsInvincible;
        internal static event Delegates.set_IsInvincible_AfterArgs _afterset_IsInvincible;

        private static void set_IsInvincible(Action<HealthManager, bool> orig, HealthManager self, bool value)
        {
            Delegates.Params_set_IsInvincible @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_IsInvincible != null)
                foreach (Delegates.set_IsInvincible_BeforeArgs toInvoke in _beforeset_IsInvincible.GetInvocationList())
                    try
                    {
                        _beforeset_IsInvincible?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_IsInvincible != null)
                foreach (Delegates.set_IsInvincible_AfterArgs toInvoke in _afterset_IsInvincible.GetInvocationList())
                    try
                    {
                        _afterset_IsInvincible.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_InvincibleFromDirection()
        {
            if (!HookedList.Contains("get_InvincibleFromDirection"))
            {
                HookedList.Add("get_InvincibleFromDirection");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HealthManager), "get_InvincibleFromDirection"),
                    get_InvincibleFromDirection);
            }
        }

        internal static event Delegates.get_InvincibleFromDirection_BeforeArgs _beforeget_InvincibleFromDirection;
        internal static event Delegates.get_InvincibleFromDirection_AfterArgs _afterget_InvincibleFromDirection;

        private static int get_InvincibleFromDirection(Func<HealthManager, int> orig, HealthManager self)
        {
            Delegates.Params_get_InvincibleFromDirection @params = new()
            {
                self = self
            };
            if (_beforeget_InvincibleFromDirection != null)
                foreach (Delegates.get_InvincibleFromDirection_BeforeArgs toInvoke in _beforeget_InvincibleFromDirection
                             .GetInvocationList())
                    try
                    {
                        _beforeget_InvincibleFromDirection?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_InvincibleFromDirection != null)
                foreach (Delegates.get_InvincibleFromDirection_AfterArgs toInvoke in _afterget_InvincibleFromDirection
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_InvincibleFromDirection.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_InvincibleFromDirection()
        {
            if (!HookedList.Contains("set_InvincibleFromDirection"))
            {
                HookedList.Add("set_InvincibleFromDirection");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HealthManager), "set_InvincibleFromDirection"),
                    set_InvincibleFromDirection);
            }
        }

        internal static event Delegates.set_InvincibleFromDirection_BeforeArgs _beforeset_InvincibleFromDirection;
        internal static event Delegates.set_InvincibleFromDirection_AfterArgs _afterset_InvincibleFromDirection;

        private static void set_InvincibleFromDirection(Action<HealthManager, int> orig, HealthManager self, int value)
        {
            Delegates.Params_set_InvincibleFromDirection @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_InvincibleFromDirection != null)
                foreach (Delegates.set_InvincibleFromDirection_BeforeArgs toInvoke in _beforeset_InvincibleFromDirection
                             .GetInvocationList())
                    try
                    {
                        _beforeset_InvincibleFromDirection?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_InvincibleFromDirection != null)
                foreach (Delegates.set_InvincibleFromDirection_AfterArgs toInvoke in _afterset_InvincibleFromDirection
                             .GetInvocationList())
                    try
                    {
                        _afterset_InvincibleFromDirection.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.HealthManager.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.HealthManager.orig_Awake orig, HealthManager self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.HealthManager.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.HealthManager.orig_OnEnable orig, HealthManager self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.HealthManager.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.HealthManager.orig_Start orig, HealthManager self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckPersistence()
        {
            if (!HookedList.Contains("CheckPersistence"))
            {
                HookedList.Add("CheckPersistence");
                On.HealthManager.CheckPersistence += CheckPersistence;
            }
        }

        internal static event Delegates.CheckPersistence_BeforeArgs _beforeCheckPersistence;

        private static IEnumerator CheckPersistence(On.HealthManager.orig_CheckPersistence orig, HealthManager self)
        {
            Delegates.Params_CheckPersistence @params = new()
            {
                self = self
            };
            if (_beforeCheckPersistence != null)
                foreach (Delegates.CheckPersistence_BeforeArgs toInvoke in _beforeCheckPersistence.GetInvocationList())
                    try
                    {
                        _beforeCheckPersistence?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.HealthManager.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.HealthManager.orig_Update orig, HealthManager self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookHit()
        {
            if (!HookedList.Contains("Hit"))
            {
                HookedList.Add("Hit");
                On.HealthManager.Hit += Hit;
            }
        }

        internal static event Delegates.Hit_BeforeArgs _beforeHit;
        internal static event Delegates.Hit_AfterArgs _afterHit;

        private static void Hit(On.HealthManager.orig_Hit orig, HealthManager self, HitInstance hitInstance)
        {
            Delegates.Params_Hit @params = new()
            {
                self = self, hitInstance = hitInstance
            };
            if (_beforeHit != null)
                foreach (Delegates.Hit_BeforeArgs toInvoke in _beforeHit.GetInvocationList())
                    try
                    {
                        _beforeHit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            hitInstance = @params.hitInstance;
            orig(self, hitInstance);
            if (_afterHit != null)
                foreach (Delegates.Hit_AfterArgs toInvoke in _afterHit.GetInvocationList())
                    try
                    {
                        _afterHit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookInvincible()
        {
            if (!HookedList.Contains("Invincible"))
            {
                HookedList.Add("Invincible");
                On.HealthManager.Invincible += Invincible;
            }
        }

        internal static event Delegates.Invincible_BeforeArgs _beforeInvincible;
        internal static event Delegates.Invincible_AfterArgs _afterInvincible;

        private static void Invincible(On.HealthManager.orig_Invincible orig, HealthManager self,
            HitInstance hitInstance)
        {
            Delegates.Params_Invincible @params = new()
            {
                self = self, hitInstance = hitInstance
            };
            if (_beforeInvincible != null)
                foreach (Delegates.Invincible_BeforeArgs toInvoke in _beforeInvincible.GetInvocationList())
                    try
                    {
                        _beforeInvincible?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            hitInstance = @params.hitInstance;
            orig(self, hitInstance);
            if (_afterInvincible != null)
                foreach (Delegates.Invincible_AfterArgs toInvoke in _afterInvincible.GetInvocationList())
                    try
                    {
                        _afterInvincible.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookTakeDamage()
        {
            if (!HookedList.Contains("TakeDamage"))
            {
                HookedList.Add("TakeDamage");
                On.HealthManager.TakeDamage += TakeDamage;
            }
        }

        internal static event Delegates.TakeDamage_BeforeArgs _beforeTakeDamage;
        internal static event Delegates.TakeDamage_AfterArgs _afterTakeDamage;

        private static void TakeDamage(On.HealthManager.orig_TakeDamage orig, HealthManager self,
            HitInstance hitInstance)
        {
            Delegates.Params_TakeDamage @params = new()
            {
                self = self, hitInstance = hitInstance
            };
            if (_beforeTakeDamage != null)
                foreach (Delegates.TakeDamage_BeforeArgs toInvoke in _beforeTakeDamage.GetInvocationList())
                    try
                    {
                        _beforeTakeDamage?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            hitInstance = @params.hitInstance;
            orig(self, hitInstance);
            if (_afterTakeDamage != null)
                foreach (Delegates.TakeDamage_AfterArgs toInvoke in _afterTakeDamage.GetInvocationList())
                    try
                    {
                        _afterTakeDamage.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookNonFatalHit()
        {
            if (!HookedList.Contains("NonFatalHit"))
            {
                HookedList.Add("NonFatalHit");
                On.HealthManager.NonFatalHit += NonFatalHit;
            }
        }

        internal static event Delegates.NonFatalHit_BeforeArgs _beforeNonFatalHit;
        internal static event Delegates.NonFatalHit_AfterArgs _afterNonFatalHit;

        private static void NonFatalHit(On.HealthManager.orig_NonFatalHit orig, HealthManager self, bool ignoreEvasion)
        {
            Delegates.Params_NonFatalHit @params = new()
            {
                self = self, ignoreEvasion = ignoreEvasion
            };
            if (_beforeNonFatalHit != null)
                foreach (Delegates.NonFatalHit_BeforeArgs toInvoke in _beforeNonFatalHit.GetInvocationList())
                    try
                    {
                        _beforeNonFatalHit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            ignoreEvasion = @params.ignoreEvasion;
            orig(self, ignoreEvasion);
            if (_afterNonFatalHit != null)
                foreach (Delegates.NonFatalHit_AfterArgs toInvoke in _afterNonFatalHit.GetInvocationList())
                    try
                    {
                        _afterNonFatalHit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyExtraDamage()
        {
            if (!HookedList.Contains("ApplyExtraDamage"))
            {
                HookedList.Add("ApplyExtraDamage");
                On.HealthManager.ApplyExtraDamage += ApplyExtraDamage;
            }
        }

        internal static event Delegates.ApplyExtraDamage_BeforeArgs _beforeApplyExtraDamage;
        internal static event Delegates.ApplyExtraDamage_AfterArgs _afterApplyExtraDamage;

        private static void ApplyExtraDamage(On.HealthManager.orig_ApplyExtraDamage orig, HealthManager self,
            int damageAmount)
        {
            Delegates.Params_ApplyExtraDamage @params = new()
            {
                self = self, damageAmount = damageAmount
            };
            if (_beforeApplyExtraDamage != null)
                foreach (Delegates.ApplyExtraDamage_BeforeArgs toInvoke in _beforeApplyExtraDamage.GetInvocationList())
                    try
                    {
                        _beforeApplyExtraDamage?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            damageAmount = @params.damageAmount;
            orig(self, damageAmount);
            if (_afterApplyExtraDamage != null)
                foreach (Delegates.ApplyExtraDamage_AfterArgs toInvoke in _afterApplyExtraDamage.GetInvocationList())
                    try
                    {
                        _afterApplyExtraDamage.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDie()
        {
            if (!HookedList.Contains("Die"))
            {
                HookedList.Add("Die");
                On.HealthManager.Die += Die;
            }
        }

        internal static event Delegates.Die_BeforeArgs _beforeDie;
        internal static event Delegates.Die_AfterArgs _afterDie;

        private static void Die(On.HealthManager.orig_Die orig, HealthManager self, float? attackDirection,
            AttackTypes attackType, bool ignoreEvasion)
        {
            Delegates.Params_Die @params = new()
            {
                self = self, attackDirection = attackDirection, attackType = attackType, ignoreEvasion = ignoreEvasion
            };
            if (_beforeDie != null)
                foreach (Delegates.Die_BeforeArgs toInvoke in _beforeDie.GetInvocationList())
                    try
                    {
                        _beforeDie?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            attackDirection = @params.attackDirection;
            attackType = @params.attackType;
            ignoreEvasion = @params.ignoreEvasion;
            orig(self, attackDirection, attackType, ignoreEvasion);
            if (_afterDie != null)
                foreach (Delegates.Die_AfterArgs toInvoke in _afterDie.GetInvocationList())
                    try
                    {
                        _afterDie.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSendDeathEvent()
        {
            if (!HookedList.Contains("SendDeathEvent"))
            {
                HookedList.Add("SendDeathEvent");
                On.HealthManager.SendDeathEvent += SendDeathEvent;
            }
        }

        internal static event Delegates.SendDeathEvent_BeforeArgs _beforeSendDeathEvent;
        internal static event Delegates.SendDeathEvent_AfterArgs _afterSendDeathEvent;

        private static void SendDeathEvent(On.HealthManager.orig_SendDeathEvent orig, HealthManager self)
        {
            Delegates.Params_SendDeathEvent @params = new()
            {
                self = self
            };
            if (_beforeSendDeathEvent != null)
                foreach (Delegates.SendDeathEvent_BeforeArgs toInvoke in _beforeSendDeathEvent.GetInvocationList())
                    try
                    {
                        _beforeSendDeathEvent?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSendDeathEvent != null)
                foreach (Delegates.SendDeathEvent_AfterArgs toInvoke in _afterSendDeathEvent.GetInvocationList())
                    try
                    {
                        _afterSendDeathEvent.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetGeoFlashing()
        {
            if (!HookedList.Contains("SetGeoFlashing"))
            {
                HookedList.Add("SetGeoFlashing");
                On.HealthManager.SetGeoFlashing += SetGeoFlashing;
            }
        }

        internal static event Delegates.SetGeoFlashing_BeforeArgs _beforeSetGeoFlashing;
        internal static event Delegates.SetGeoFlashing_AfterArgs _afterSetGeoFlashing;

        private static void SetGeoFlashing(On.HealthManager.orig_SetGeoFlashing orig, HealthManager self,
            GameObject[] gameObjects, int originalAmount)
        {
            Delegates.Params_SetGeoFlashing @params = new()
            {
                self = self, gameObjects = gameObjects, originalAmount = originalAmount
            };
            if (_beforeSetGeoFlashing != null)
                foreach (Delegates.SetGeoFlashing_BeforeArgs toInvoke in _beforeSetGeoFlashing.GetInvocationList())
                    try
                    {
                        _beforeSetGeoFlashing?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            gameObjects = @params.gameObjects;
            originalAmount = @params.originalAmount;
            orig(self, gameObjects, originalAmount);
            if (_afterSetGeoFlashing != null)
                foreach (Delegates.SetGeoFlashing_AfterArgs toInvoke in _afterSetGeoFlashing.GetInvocationList())
                    try
                    {
                        _afterSetGeoFlashing.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookIsBlockingByDirection()
        {
            if (!HookedList.Contains("IsBlockingByDirection"))
            {
                HookedList.Add("IsBlockingByDirection");
                On.HealthManager.IsBlockingByDirection += IsBlockingByDirection;
            }
        }

        internal static event Delegates.IsBlockingByDirection_BeforeArgs _beforeIsBlockingByDirection;
        internal static event Delegates.IsBlockingByDirection_AfterArgs _afterIsBlockingByDirection;

        private static bool IsBlockingByDirection(On.HealthManager.orig_IsBlockingByDirection orig, HealthManager self,
            int cardinalDirection, AttackTypes attackType)
        {
            Delegates.Params_IsBlockingByDirection @params = new()
            {
                self = self, cardinalDirection = cardinalDirection, attackType = attackType
            };
            if (_beforeIsBlockingByDirection != null)
                foreach (Delegates.IsBlockingByDirection_BeforeArgs toInvoke in _beforeIsBlockingByDirection
                             .GetInvocationList())
                    try
                    {
                        _beforeIsBlockingByDirection?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            cardinalDirection = @params.cardinalDirection;
            attackType = @params.attackType;
            var retVal = orig(self, cardinalDirection, attackType);
            if (_afterIsBlockingByDirection != null)
                foreach (Delegates.IsBlockingByDirection_AfterArgs toInvoke in _afterIsBlockingByDirection
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterIsBlockingByDirection.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetBattleScene()
        {
            if (!HookedList.Contains("SetBattleScene"))
            {
                HookedList.Add("SetBattleScene");
                On.HealthManager.SetBattleScene += SetBattleScene;
            }
        }

        internal static event Delegates.SetBattleScene_BeforeArgs _beforeSetBattleScene;
        internal static event Delegates.SetBattleScene_AfterArgs _afterSetBattleScene;

        private static void SetBattleScene(On.HealthManager.orig_SetBattleScene orig, HealthManager self,
            GameObject newBattleScene)
        {
            Delegates.Params_SetBattleScene @params = new()
            {
                self = self, newBattleScene = newBattleScene
            };
            if (_beforeSetBattleScene != null)
                foreach (Delegates.SetBattleScene_BeforeArgs toInvoke in _beforeSetBattleScene.GetInvocationList())
                    try
                    {
                        _beforeSetBattleScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            newBattleScene = @params.newBattleScene;
            orig(self, newBattleScene);
            if (_afterSetBattleScene != null)
                foreach (Delegates.SetBattleScene_AfterArgs toInvoke in _afterSetBattleScene.GetInvocationList())
                    try
                    {
                        _afterSetBattleScene.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetAttackDirection()
        {
            if (!HookedList.Contains("GetAttackDirection"))
            {
                HookedList.Add("GetAttackDirection");
                On.HealthManager.GetAttackDirection += GetAttackDirection;
            }
        }

        internal static event Delegates.GetAttackDirection_BeforeArgs _beforeGetAttackDirection;
        internal static event Delegates.GetAttackDirection_AfterArgs _afterGetAttackDirection;

        private static int GetAttackDirection(On.HealthManager.orig_GetAttackDirection orig, HealthManager self)
        {
            Delegates.Params_GetAttackDirection @params = new()
            {
                self = self
            };
            if (_beforeGetAttackDirection != null)
                foreach (Delegates.GetAttackDirection_BeforeArgs toInvoke in
                         _beforeGetAttackDirection.GetInvocationList())
                    try
                    {
                        _beforeGetAttackDirection?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetAttackDirection != null)
                foreach (Delegates.GetAttackDirection_AfterArgs toInvoke in
                         _afterGetAttackDirection.GetInvocationList())
                    try
                    {
                        retVal = _afterGetAttackDirection.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetPreventInvincibleEffect()
        {
            if (!HookedList.Contains("SetPreventInvincibleEffect"))
            {
                HookedList.Add("SetPreventInvincibleEffect");
                On.HealthManager.SetPreventInvincibleEffect += SetPreventInvincibleEffect;
            }
        }

        internal static event Delegates.SetPreventInvincibleEffect_BeforeArgs _beforeSetPreventInvincibleEffect;
        internal static event Delegates.SetPreventInvincibleEffect_AfterArgs _afterSetPreventInvincibleEffect;

        private static void SetPreventInvincibleEffect(On.HealthManager.orig_SetPreventInvincibleEffect orig,
            HealthManager self, bool set)
        {
            Delegates.Params_SetPreventInvincibleEffect @params = new()
            {
                self = self, set = set
            };
            if (_beforeSetPreventInvincibleEffect != null)
                foreach (Delegates.SetPreventInvincibleEffect_BeforeArgs toInvoke in _beforeSetPreventInvincibleEffect
                             .GetInvocationList())
                    try
                    {
                        _beforeSetPreventInvincibleEffect?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            set = @params.set;
            orig(self, set);
            if (_afterSetPreventInvincibleEffect != null)
                foreach (Delegates.SetPreventInvincibleEffect_AfterArgs toInvoke in _afterSetPreventInvincibleEffect
                             .GetInvocationList())
                    try
                    {
                        _afterSetPreventInvincibleEffect.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetGeoSmall()
        {
            if (!HookedList.Contains("SetGeoSmall"))
            {
                HookedList.Add("SetGeoSmall");
                On.HealthManager.SetGeoSmall += SetGeoSmall;
            }
        }

        internal static event Delegates.SetGeoSmall_BeforeArgs _beforeSetGeoSmall;
        internal static event Delegates.SetGeoSmall_AfterArgs _afterSetGeoSmall;

        private static void SetGeoSmall(On.HealthManager.orig_SetGeoSmall orig, HealthManager self, int amount)
        {
            Delegates.Params_SetGeoSmall @params = new()
            {
                self = self, amount = amount
            };
            if (_beforeSetGeoSmall != null)
                foreach (Delegates.SetGeoSmall_BeforeArgs toInvoke in _beforeSetGeoSmall.GetInvocationList())
                    try
                    {
                        _beforeSetGeoSmall?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterSetGeoSmall != null)
                foreach (Delegates.SetGeoSmall_AfterArgs toInvoke in _afterSetGeoSmall.GetInvocationList())
                    try
                    {
                        _afterSetGeoSmall.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetGeoMedium()
        {
            if (!HookedList.Contains("SetGeoMedium"))
            {
                HookedList.Add("SetGeoMedium");
                On.HealthManager.SetGeoMedium += SetGeoMedium;
            }
        }

        internal static event Delegates.SetGeoMedium_BeforeArgs _beforeSetGeoMedium;
        internal static event Delegates.SetGeoMedium_AfterArgs _afterSetGeoMedium;

        private static void SetGeoMedium(On.HealthManager.orig_SetGeoMedium orig, HealthManager self, int amount)
        {
            Delegates.Params_SetGeoMedium @params = new()
            {
                self = self, amount = amount
            };
            if (_beforeSetGeoMedium != null)
                foreach (Delegates.SetGeoMedium_BeforeArgs toInvoke in _beforeSetGeoMedium.GetInvocationList())
                    try
                    {
                        _beforeSetGeoMedium?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterSetGeoMedium != null)
                foreach (Delegates.SetGeoMedium_AfterArgs toInvoke in _afterSetGeoMedium.GetInvocationList())
                    try
                    {
                        _afterSetGeoMedium.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetGeoLarge()
        {
            if (!HookedList.Contains("SetGeoLarge"))
            {
                HookedList.Add("SetGeoLarge");
                On.HealthManager.SetGeoLarge += SetGeoLarge;
            }
        }

        internal static event Delegates.SetGeoLarge_BeforeArgs _beforeSetGeoLarge;
        internal static event Delegates.SetGeoLarge_AfterArgs _afterSetGeoLarge;

        private static void SetGeoLarge(On.HealthManager.orig_SetGeoLarge orig, HealthManager self, int amount)
        {
            Delegates.Params_SetGeoLarge @params = new()
            {
                self = self, amount = amount
            };
            if (_beforeSetGeoLarge != null)
                foreach (Delegates.SetGeoLarge_BeforeArgs toInvoke in _beforeSetGeoLarge.GetInvocationList())
                    try
                    {
                        _beforeSetGeoLarge?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterSetGeoLarge != null)
                foreach (Delegates.SetGeoLarge_AfterArgs toInvoke in _afterSetGeoLarge.GetInvocationList())
                    try
                    {
                        _afterSetGeoLarge.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetIsDead()
        {
            if (!HookedList.Contains("GetIsDead"))
            {
                HookedList.Add("GetIsDead");
                On.HealthManager.GetIsDead += GetIsDead;
            }
        }

        internal static event Delegates.GetIsDead_BeforeArgs _beforeGetIsDead;
        internal static event Delegates.GetIsDead_AfterArgs _afterGetIsDead;

        private static bool GetIsDead(On.HealthManager.orig_GetIsDead orig, HealthManager self)
        {
            Delegates.Params_GetIsDead @params = new()
            {
                self = self
            };
            if (_beforeGetIsDead != null)
                foreach (Delegates.GetIsDead_BeforeArgs toInvoke in _beforeGetIsDead.GetInvocationList())
                    try
                    {
                        _beforeGetIsDead?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetIsDead != null)
                foreach (Delegates.GetIsDead_AfterArgs toInvoke in _afterGetIsDead.GetInvocationList())
                    try
                    {
                        retVal = _afterGetIsDead.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetIsDead()
        {
            if (!HookedList.Contains("SetIsDead"))
            {
                HookedList.Add("SetIsDead");
                On.HealthManager.SetIsDead += SetIsDead;
            }
        }

        internal static event Delegates.SetIsDead_BeforeArgs _beforeSetIsDead;
        internal static event Delegates.SetIsDead_AfterArgs _afterSetIsDead;

        private static void SetIsDead(On.HealthManager.orig_SetIsDead orig, HealthManager self, bool set)
        {
            Delegates.Params_SetIsDead @params = new()
            {
                self = self, set = set
            };
            if (_beforeSetIsDead != null)
                foreach (Delegates.SetIsDead_BeforeArgs toInvoke in _beforeSetIsDead.GetInvocationList())
                    try
                    {
                        _beforeSetIsDead?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            set = @params.set;
            orig(self, set);
            if (_afterSetIsDead != null)
                foreach (Delegates.SetIsDead_AfterArgs toInvoke in _afterSetIsDead.GetInvocationList())
                    try
                    {
                        _afterSetIsDead.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetDamageOverride()
        {
            if (!HookedList.Contains("SetDamageOverride"))
            {
                HookedList.Add("SetDamageOverride");
                On.HealthManager.SetDamageOverride += SetDamageOverride;
            }
        }

        internal static event Delegates.SetDamageOverride_BeforeArgs _beforeSetDamageOverride;
        internal static event Delegates.SetDamageOverride_AfterArgs _afterSetDamageOverride;

        private static void SetDamageOverride(On.HealthManager.orig_SetDamageOverride orig, HealthManager self,
            bool set)
        {
            Delegates.Params_SetDamageOverride @params = new()
            {
                self = self, set = set
            };
            if (_beforeSetDamageOverride != null)
                foreach (Delegates.SetDamageOverride_BeforeArgs toInvoke in
                         _beforeSetDamageOverride.GetInvocationList())
                    try
                    {
                        _beforeSetDamageOverride?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            set = @params.set;
            orig(self, set);
            if (_afterSetDamageOverride != null)
                foreach (Delegates.SetDamageOverride_AfterArgs toInvoke in _afterSetDamageOverride.GetInvocationList())
                    try
                    {
                        _afterSetDamageOverride.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetSendKilledToObject()
        {
            if (!HookedList.Contains("SetSendKilledToObject"))
            {
                HookedList.Add("SetSendKilledToObject");
                On.HealthManager.SetSendKilledToObject += SetSendKilledToObject;
            }
        }

        internal static event Delegates.SetSendKilledToObject_BeforeArgs _beforeSetSendKilledToObject;
        internal static event Delegates.SetSendKilledToObject_AfterArgs _afterSetSendKilledToObject;

        private static void SetSendKilledToObject(On.HealthManager.orig_SetSendKilledToObject orig, HealthManager self,
            GameObject killedObject)
        {
            Delegates.Params_SetSendKilledToObject @params = new()
            {
                self = self, killedObject = killedObject
            };
            if (_beforeSetSendKilledToObject != null)
                foreach (Delegates.SetSendKilledToObject_BeforeArgs toInvoke in _beforeSetSendKilledToObject
                             .GetInvocationList())
                    try
                    {
                        _beforeSetSendKilledToObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            killedObject = @params.killedObject;
            orig(self, killedObject);
            if (_afterSetSendKilledToObject != null)
                foreach (Delegates.SetSendKilledToObject_AfterArgs toInvoke in _afterSetSendKilledToObject
                             .GetInvocationList())
                    try
                    {
                        _afterSetSendKilledToObject.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckInvincible()
        {
            if (!HookedList.Contains("CheckInvincible"))
            {
                HookedList.Add("CheckInvincible");
                On.HealthManager.CheckInvincible += CheckInvincible;
            }
        }

        internal static event Delegates.CheckInvincible_BeforeArgs _beforeCheckInvincible;
        internal static event Delegates.CheckInvincible_AfterArgs _afterCheckInvincible;

        private static bool CheckInvincible(On.HealthManager.orig_CheckInvincible orig, HealthManager self)
        {
            Delegates.Params_CheckInvincible @params = new()
            {
                self = self
            };
            if (_beforeCheckInvincible != null)
                foreach (Delegates.CheckInvincible_BeforeArgs toInvoke in _beforeCheckInvincible.GetInvocationList())
                    try
                    {
                        _beforeCheckInvincible?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterCheckInvincible != null)
                foreach (Delegates.CheckInvincible_AfterArgs toInvoke in _afterCheckInvincible.GetInvocationList())
                    try
                    {
                        retVal = _afterCheckInvincible.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ApplyExtraDamage_AfterArgs(Params_ApplyExtraDamage args);

        public delegate void ApplyExtraDamage_BeforeArgs(Params_ApplyExtraDamage args);

        public delegate void ApplyExtraDamage_WithArgs(Action<HealthManager, int> orig, HealthManager self,
            int damageAmount);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<HealthManager> orig, HealthManager self);

        public delegate bool CheckInvincible_AfterArgs(Params_CheckInvincible args, bool ret);

        public delegate void CheckInvincible_BeforeArgs(Params_CheckInvincible args);

        public delegate bool CheckInvincible_WithArgs(Func<HealthManager, bool> orig, HealthManager self);

        public delegate IEnumerator CheckPersistence_AfterArgs(Params_CheckPersistence args, IEnumerator ret);

        public delegate void CheckPersistence_BeforeArgs(Params_CheckPersistence args);

        public delegate IEnumerator
            CheckPersistence_WithArgs(Func<HealthManager, IEnumerator> orig, HealthManager self);

        public delegate void Die_AfterArgs(Params_Die args);

        public delegate void Die_BeforeArgs(Params_Die args);

        public delegate void Die_WithArgs(Action<HealthManager, float?, AttackTypes, bool> orig, HealthManager self,
            float? attackDirection, AttackTypes attackType, bool ignoreEvasion);

        public delegate int get_InvincibleFromDirection_AfterArgs(Params_get_InvincibleFromDirection args, int ret);

        public delegate void get_InvincibleFromDirection_BeforeArgs(Params_get_InvincibleFromDirection args);

        public delegate int get_InvincibleFromDirection_WithArgs(Func<HealthManager, int> orig, HealthManager self);

        public delegate bool get_IsInvincible_AfterArgs(Params_get_IsInvincible args, bool ret);

        public delegate void get_IsInvincible_BeforeArgs(Params_get_IsInvincible args);

        public delegate bool get_IsInvincible_WithArgs(Func<HealthManager, bool> orig, HealthManager self);

        public delegate int GetAttackDirection_AfterArgs(Params_GetAttackDirection args, int ret);

        public delegate void GetAttackDirection_BeforeArgs(Params_GetAttackDirection args);

        public delegate int GetAttackDirection_WithArgs(Func<HealthManager, int> orig, HealthManager self);

        public delegate bool GetIsDead_AfterArgs(Params_GetIsDead args, bool ret);

        public delegate void GetIsDead_BeforeArgs(Params_GetIsDead args);

        public delegate bool GetIsDead_WithArgs(Func<HealthManager, bool> orig, HealthManager self);

        public delegate void Hit_AfterArgs(Params_Hit args);

        public delegate void Hit_BeforeArgs(Params_Hit args);

        public delegate void Hit_WithArgs(Action<HealthManager, HitInstance> orig, HealthManager self,
            HitInstance hitInstance);

        public delegate void Invincible_AfterArgs(Params_Invincible args);

        public delegate void Invincible_BeforeArgs(Params_Invincible args);

        public delegate void Invincible_WithArgs(Action<HealthManager, HitInstance> orig, HealthManager self,
            HitInstance hitInstance);

        public delegate bool IsBlockingByDirection_AfterArgs(Params_IsBlockingByDirection args, bool ret);

        public delegate void IsBlockingByDirection_BeforeArgs(Params_IsBlockingByDirection args);

        public delegate bool IsBlockingByDirection_WithArgs(Func<HealthManager, int, AttackTypes, bool> orig,
            HealthManager self, int cardinalDirection, AttackTypes attackType);

        public delegate void NonFatalHit_AfterArgs(Params_NonFatalHit args);

        public delegate void NonFatalHit_BeforeArgs(Params_NonFatalHit args);

        public delegate void NonFatalHit_WithArgs(Action<HealthManager, bool> orig, HealthManager self,
            bool ignoreEvasion);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<HealthManager> orig, HealthManager self);

        public delegate void SendDeathEvent_AfterArgs(Params_SendDeathEvent args);

        public delegate void SendDeathEvent_BeforeArgs(Params_SendDeathEvent args);

        public delegate void SendDeathEvent_WithArgs(Action<HealthManager> orig, HealthManager self);

        public delegate void set_InvincibleFromDirection_AfterArgs(Params_set_InvincibleFromDirection args);

        public delegate void set_InvincibleFromDirection_BeforeArgs(Params_set_InvincibleFromDirection args);

        public delegate void set_InvincibleFromDirection_WithArgs(Action<HealthManager, int> orig, HealthManager self,
            int value);

        public delegate void set_IsInvincible_AfterArgs(Params_set_IsInvincible args);

        public delegate void set_IsInvincible_BeforeArgs(Params_set_IsInvincible args);

        public delegate void
            set_IsInvincible_WithArgs(Action<HealthManager, bool> orig, HealthManager self, bool value);

        public delegate void SetBattleScene_AfterArgs(Params_SetBattleScene args);

        public delegate void SetBattleScene_BeforeArgs(Params_SetBattleScene args);

        public delegate void SetBattleScene_WithArgs(Action<HealthManager, GameObject> orig, HealthManager self,
            GameObject newBattleScene);

        public delegate void SetDamageOverride_AfterArgs(Params_SetDamageOverride args);

        public delegate void SetDamageOverride_BeforeArgs(Params_SetDamageOverride args);

        public delegate void SetDamageOverride_WithArgs(Action<HealthManager, bool> orig, HealthManager self, bool set);

        public delegate void SetGeoFlashing_AfterArgs(Params_SetGeoFlashing args);

        public delegate void SetGeoFlashing_BeforeArgs(Params_SetGeoFlashing args);

        public delegate void SetGeoFlashing_WithArgs(Action<HealthManager, GameObject[], int> orig, HealthManager self,
            GameObject[] gameObjects, int originalAmount);

        public delegate void SetGeoLarge_AfterArgs(Params_SetGeoLarge args);

        public delegate void SetGeoLarge_BeforeArgs(Params_SetGeoLarge args);

        public delegate void SetGeoLarge_WithArgs(Action<HealthManager, int> orig, HealthManager self, int amount);

        public delegate void SetGeoMedium_AfterArgs(Params_SetGeoMedium args);

        public delegate void SetGeoMedium_BeforeArgs(Params_SetGeoMedium args);

        public delegate void SetGeoMedium_WithArgs(Action<HealthManager, int> orig, HealthManager self, int amount);

        public delegate void SetGeoSmall_AfterArgs(Params_SetGeoSmall args);

        public delegate void SetGeoSmall_BeforeArgs(Params_SetGeoSmall args);

        public delegate void SetGeoSmall_WithArgs(Action<HealthManager, int> orig, HealthManager self, int amount);

        public delegate void SetIsDead_AfterArgs(Params_SetIsDead args);

        public delegate void SetIsDead_BeforeArgs(Params_SetIsDead args);

        public delegate void SetIsDead_WithArgs(Action<HealthManager, bool> orig, HealthManager self, bool set);

        public delegate void SetPreventInvincibleEffect_AfterArgs(Params_SetPreventInvincibleEffect args);

        public delegate void SetPreventInvincibleEffect_BeforeArgs(Params_SetPreventInvincibleEffect args);

        public delegate void SetPreventInvincibleEffect_WithArgs(Action<HealthManager, bool> orig, HealthManager self,
            bool set);

        public delegate void SetSendKilledToObject_AfterArgs(Params_SetSendKilledToObject args);

        public delegate void SetSendKilledToObject_BeforeArgs(Params_SetSendKilledToObject args);

        public delegate void SetSendKilledToObject_WithArgs(Action<HealthManager, GameObject> orig, HealthManager self,
            GameObject killedObject);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<HealthManager> orig, HealthManager self);

        public delegate void TakeDamage_AfterArgs(Params_TakeDamage args);

        public delegate void TakeDamage_BeforeArgs(Params_TakeDamage args);

        public delegate void TakeDamage_WithArgs(Action<HealthManager, HitInstance> orig, HealthManager self,
            HitInstance hitInstance);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<HealthManager> orig, HealthManager self);

        public sealed class Params_get_IsInvincible
        {
            public HealthManager self;
        }

        public sealed class Params_set_IsInvincible
        {
            public HealthManager self;
            public bool value;
        }

        public sealed class Params_get_InvincibleFromDirection
        {
            public HealthManager self;
        }

        public sealed class Params_set_InvincibleFromDirection
        {
            public HealthManager self;
            public int value;
        }

        public sealed class Params_Awake
        {
            public HealthManager self;
        }

        public sealed class Params_OnEnable
        {
            public HealthManager self;
        }

        public sealed class Params_Start
        {
            public HealthManager self;
        }

        public sealed class Params_CheckPersistence
        {
            public HealthManager self;
        }

        public sealed class Params_Update
        {
            public HealthManager self;
        }

        public sealed class Params_Hit
        {
            public HitInstance hitInstance;
            public HealthManager self;
        }

        public sealed class Params_Invincible
        {
            public HitInstance hitInstance;
            public HealthManager self;
        }

        public sealed class Params_TakeDamage
        {
            public HitInstance hitInstance;
            public HealthManager self;
        }

        public sealed class Params_NonFatalHit
        {
            public bool ignoreEvasion;
            public HealthManager self;
        }

        public sealed class Params_ApplyExtraDamage
        {
            public int damageAmount;
            public HealthManager self;
        }

        public sealed class Params_Die
        {
            public float? attackDirection;
            public AttackTypes attackType;
            public bool ignoreEvasion;
            public HealthManager self;
        }

        public sealed class Params_SendDeathEvent
        {
            public HealthManager self;
        }

        public sealed class Params_SetGeoFlashing
        {
            public GameObject[] gameObjects;
            public int originalAmount;
            public HealthManager self;
        }

        public sealed class Params_IsBlockingByDirection
        {
            public AttackTypes attackType;
            public int cardinalDirection;
            public HealthManager self;
        }

        public sealed class Params_SetBattleScene
        {
            public GameObject newBattleScene;
            public HealthManager self;
        }

        public sealed class Params_GetAttackDirection
        {
            public HealthManager self;
        }

        public sealed class Params_SetPreventInvincibleEffect
        {
            public HealthManager self;
            public bool set;
        }

        public sealed class Params_SetGeoSmall
        {
            public int amount;
            public HealthManager self;
        }

        public sealed class Params_SetGeoMedium
        {
            public int amount;
            public HealthManager self;
        }

        public sealed class Params_SetGeoLarge
        {
            public int amount;
            public HealthManager self;
        }

        public sealed class Params_GetIsDead
        {
            public HealthManager self;
        }

        public sealed class Params_SetIsDead
        {
            public HealthManager self;
            public bool set;
        }

        public sealed class Params_SetDamageOverride
        {
            public HealthManager self;
            public bool set;
        }

        public sealed class Params_SetSendKilledToObject
        {
            public GameObject killedObject;
            public HealthManager self;
        }

        public sealed class Params_CheckInvincible
        {
            public HealthManager self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_IsInvincible_BeforeArgs get_IsInvincible
        {
            add
            {
                HookHandler._beforeget_IsInvincible += value;
                HookHandler.Hookget_IsInvincible();
            }
            remove => HookHandler._beforeget_IsInvincible -= value;
        }

        public static event Delegates.set_IsInvincible_BeforeArgs set_IsInvincible
        {
            add
            {
                HookHandler._beforeset_IsInvincible += value;
                HookHandler.Hookset_IsInvincible();
            }
            remove => HookHandler._beforeset_IsInvincible -= value;
        }

        public static event Delegates.get_InvincibleFromDirection_BeforeArgs get_InvincibleFromDirection
        {
            add
            {
                HookHandler._beforeget_InvincibleFromDirection += value;
                HookHandler.Hookget_InvincibleFromDirection();
            }
            remove => HookHandler._beforeget_InvincibleFromDirection -= value;
        }

        public static event Delegates.set_InvincibleFromDirection_BeforeArgs set_InvincibleFromDirection
        {
            add
            {
                HookHandler._beforeset_InvincibleFromDirection += value;
                HookHandler.Hookset_InvincibleFromDirection();
            }
            remove => HookHandler._beforeset_InvincibleFromDirection -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.CheckPersistence_BeforeArgs CheckPersistence
        {
            add
            {
                HookHandler._beforeCheckPersistence += value;
                HookHandler.HookCheckPersistence();
            }
            remove => HookHandler._beforeCheckPersistence -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.Hit_BeforeArgs Hit
        {
            add
            {
                HookHandler._beforeHit += value;
                HookHandler.HookHit();
            }
            remove => HookHandler._beforeHit -= value;
        }

        public static event Delegates.Invincible_BeforeArgs Invincible
        {
            add
            {
                HookHandler._beforeInvincible += value;
                HookHandler.HookInvincible();
            }
            remove => HookHandler._beforeInvincible -= value;
        }

        public static event Delegates.TakeDamage_BeforeArgs TakeDamage
        {
            add
            {
                HookHandler._beforeTakeDamage += value;
                HookHandler.HookTakeDamage();
            }
            remove => HookHandler._beforeTakeDamage -= value;
        }

        public static event Delegates.NonFatalHit_BeforeArgs NonFatalHit
        {
            add
            {
                HookHandler._beforeNonFatalHit += value;
                HookHandler.HookNonFatalHit();
            }
            remove => HookHandler._beforeNonFatalHit -= value;
        }

        public static event Delegates.ApplyExtraDamage_BeforeArgs ApplyExtraDamage
        {
            add
            {
                HookHandler._beforeApplyExtraDamage += value;
                HookHandler.HookApplyExtraDamage();
            }
            remove => HookHandler._beforeApplyExtraDamage -= value;
        }

        public static event Delegates.Die_BeforeArgs Die
        {
            add
            {
                HookHandler._beforeDie += value;
                HookHandler.HookDie();
            }
            remove => HookHandler._beforeDie -= value;
        }

        public static event Delegates.SendDeathEvent_BeforeArgs SendDeathEvent
        {
            add
            {
                HookHandler._beforeSendDeathEvent += value;
                HookHandler.HookSendDeathEvent();
            }
            remove => HookHandler._beforeSendDeathEvent -= value;
        }

        public static event Delegates.SetGeoFlashing_BeforeArgs SetGeoFlashing
        {
            add
            {
                HookHandler._beforeSetGeoFlashing += value;
                HookHandler.HookSetGeoFlashing();
            }
            remove => HookHandler._beforeSetGeoFlashing -= value;
        }

        public static event Delegates.IsBlockingByDirection_BeforeArgs IsBlockingByDirection
        {
            add
            {
                HookHandler._beforeIsBlockingByDirection += value;
                HookHandler.HookIsBlockingByDirection();
            }
            remove => HookHandler._beforeIsBlockingByDirection -= value;
        }

        public static event Delegates.SetBattleScene_BeforeArgs SetBattleScene
        {
            add
            {
                HookHandler._beforeSetBattleScene += value;
                HookHandler.HookSetBattleScene();
            }
            remove => HookHandler._beforeSetBattleScene -= value;
        }

        public static event Delegates.GetAttackDirection_BeforeArgs GetAttackDirection
        {
            add
            {
                HookHandler._beforeGetAttackDirection += value;
                HookHandler.HookGetAttackDirection();
            }
            remove => HookHandler._beforeGetAttackDirection -= value;
        }

        public static event Delegates.SetPreventInvincibleEffect_BeforeArgs SetPreventInvincibleEffect
        {
            add
            {
                HookHandler._beforeSetPreventInvincibleEffect += value;
                HookHandler.HookSetPreventInvincibleEffect();
            }
            remove => HookHandler._beforeSetPreventInvincibleEffect -= value;
        }

        public static event Delegates.SetGeoSmall_BeforeArgs SetGeoSmall
        {
            add
            {
                HookHandler._beforeSetGeoSmall += value;
                HookHandler.HookSetGeoSmall();
            }
            remove => HookHandler._beforeSetGeoSmall -= value;
        }

        public static event Delegates.SetGeoMedium_BeforeArgs SetGeoMedium
        {
            add
            {
                HookHandler._beforeSetGeoMedium += value;
                HookHandler.HookSetGeoMedium();
            }
            remove => HookHandler._beforeSetGeoMedium -= value;
        }

        public static event Delegates.SetGeoLarge_BeforeArgs SetGeoLarge
        {
            add
            {
                HookHandler._beforeSetGeoLarge += value;
                HookHandler.HookSetGeoLarge();
            }
            remove => HookHandler._beforeSetGeoLarge -= value;
        }

        public static event Delegates.GetIsDead_BeforeArgs GetIsDead
        {
            add
            {
                HookHandler._beforeGetIsDead += value;
                HookHandler.HookGetIsDead();
            }
            remove => HookHandler._beforeGetIsDead -= value;
        }

        public static event Delegates.SetIsDead_BeforeArgs SetIsDead
        {
            add
            {
                HookHandler._beforeSetIsDead += value;
                HookHandler.HookSetIsDead();
            }
            remove => HookHandler._beforeSetIsDead -= value;
        }

        public static event Delegates.SetDamageOverride_BeforeArgs SetDamageOverride
        {
            add
            {
                HookHandler._beforeSetDamageOverride += value;
                HookHandler.HookSetDamageOverride();
            }
            remove => HookHandler._beforeSetDamageOverride -= value;
        }

        public static event Delegates.SetSendKilledToObject_BeforeArgs SetSendKilledToObject
        {
            add
            {
                HookHandler._beforeSetSendKilledToObject += value;
                HookHandler.HookSetSendKilledToObject();
            }
            remove => HookHandler._beforeSetSendKilledToObject -= value;
        }

        public static event Delegates.CheckInvincible_BeforeArgs CheckInvincible
        {
            add
            {
                HookHandler._beforeCheckInvincible += value;
                HookHandler.HookCheckInvincible();
            }
            remove => HookHandler._beforeCheckInvincible -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_IsInvincible_AfterArgs get_IsInvincible
        {
            add
            {
                HookHandler._afterget_IsInvincible += value;
                HookHandler.Hookget_IsInvincible();
            }
            remove => HookHandler._afterget_IsInvincible -= value;
        }

        public static event Delegates.set_IsInvincible_AfterArgs set_IsInvincible
        {
            add
            {
                HookHandler._afterset_IsInvincible += value;
                HookHandler.Hookset_IsInvincible();
            }
            remove => HookHandler._afterset_IsInvincible -= value;
        }

        public static event Delegates.get_InvincibleFromDirection_AfterArgs get_InvincibleFromDirection
        {
            add
            {
                HookHandler._afterget_InvincibleFromDirection += value;
                HookHandler.Hookget_InvincibleFromDirection();
            }
            remove => HookHandler._afterget_InvincibleFromDirection -= value;
        }

        public static event Delegates.set_InvincibleFromDirection_AfterArgs set_InvincibleFromDirection
        {
            add
            {
                HookHandler._afterset_InvincibleFromDirection += value;
                HookHandler.Hookset_InvincibleFromDirection();
            }
            remove => HookHandler._afterset_InvincibleFromDirection -= value;
        }

        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.Hit_AfterArgs Hit
        {
            add
            {
                HookHandler._afterHit += value;
                HookHandler.HookHit();
            }
            remove => HookHandler._afterHit -= value;
        }

        public static event Delegates.Invincible_AfterArgs Invincible
        {
            add
            {
                HookHandler._afterInvincible += value;
                HookHandler.HookInvincible();
            }
            remove => HookHandler._afterInvincible -= value;
        }

        public static event Delegates.TakeDamage_AfterArgs TakeDamage
        {
            add
            {
                HookHandler._afterTakeDamage += value;
                HookHandler.HookTakeDamage();
            }
            remove => HookHandler._afterTakeDamage -= value;
        }

        public static event Delegates.NonFatalHit_AfterArgs NonFatalHit
        {
            add
            {
                HookHandler._afterNonFatalHit += value;
                HookHandler.HookNonFatalHit();
            }
            remove => HookHandler._afterNonFatalHit -= value;
        }

        public static event Delegates.ApplyExtraDamage_AfterArgs ApplyExtraDamage
        {
            add
            {
                HookHandler._afterApplyExtraDamage += value;
                HookHandler.HookApplyExtraDamage();
            }
            remove => HookHandler._afterApplyExtraDamage -= value;
        }

        public static event Delegates.Die_AfterArgs Die
        {
            add
            {
                HookHandler._afterDie += value;
                HookHandler.HookDie();
            }
            remove => HookHandler._afterDie -= value;
        }

        public static event Delegates.SendDeathEvent_AfterArgs SendDeathEvent
        {
            add
            {
                HookHandler._afterSendDeathEvent += value;
                HookHandler.HookSendDeathEvent();
            }
            remove => HookHandler._afterSendDeathEvent -= value;
        }

        public static event Delegates.SetGeoFlashing_AfterArgs SetGeoFlashing
        {
            add
            {
                HookHandler._afterSetGeoFlashing += value;
                HookHandler.HookSetGeoFlashing();
            }
            remove => HookHandler._afterSetGeoFlashing -= value;
        }

        public static event Delegates.IsBlockingByDirection_AfterArgs IsBlockingByDirection
        {
            add
            {
                HookHandler._afterIsBlockingByDirection += value;
                HookHandler.HookIsBlockingByDirection();
            }
            remove => HookHandler._afterIsBlockingByDirection -= value;
        }

        public static event Delegates.SetBattleScene_AfterArgs SetBattleScene
        {
            add
            {
                HookHandler._afterSetBattleScene += value;
                HookHandler.HookSetBattleScene();
            }
            remove => HookHandler._afterSetBattleScene -= value;
        }

        public static event Delegates.GetAttackDirection_AfterArgs GetAttackDirection
        {
            add
            {
                HookHandler._afterGetAttackDirection += value;
                HookHandler.HookGetAttackDirection();
            }
            remove => HookHandler._afterGetAttackDirection -= value;
        }

        public static event Delegates.SetPreventInvincibleEffect_AfterArgs SetPreventInvincibleEffect
        {
            add
            {
                HookHandler._afterSetPreventInvincibleEffect += value;
                HookHandler.HookSetPreventInvincibleEffect();
            }
            remove => HookHandler._afterSetPreventInvincibleEffect -= value;
        }

        public static event Delegates.SetGeoSmall_AfterArgs SetGeoSmall
        {
            add
            {
                HookHandler._afterSetGeoSmall += value;
                HookHandler.HookSetGeoSmall();
            }
            remove => HookHandler._afterSetGeoSmall -= value;
        }

        public static event Delegates.SetGeoMedium_AfterArgs SetGeoMedium
        {
            add
            {
                HookHandler._afterSetGeoMedium += value;
                HookHandler.HookSetGeoMedium();
            }
            remove => HookHandler._afterSetGeoMedium -= value;
        }

        public static event Delegates.SetGeoLarge_AfterArgs SetGeoLarge
        {
            add
            {
                HookHandler._afterSetGeoLarge += value;
                HookHandler.HookSetGeoLarge();
            }
            remove => HookHandler._afterSetGeoLarge -= value;
        }

        public static event Delegates.GetIsDead_AfterArgs GetIsDead
        {
            add
            {
                HookHandler._afterGetIsDead += value;
                HookHandler.HookGetIsDead();
            }
            remove => HookHandler._afterGetIsDead -= value;
        }

        public static event Delegates.SetIsDead_AfterArgs SetIsDead
        {
            add
            {
                HookHandler._afterSetIsDead += value;
                HookHandler.HookSetIsDead();
            }
            remove => HookHandler._afterSetIsDead -= value;
        }

        public static event Delegates.SetDamageOverride_AfterArgs SetDamageOverride
        {
            add
            {
                HookHandler._afterSetDamageOverride += value;
                HookHandler.HookSetDamageOverride();
            }
            remove => HookHandler._afterSetDamageOverride -= value;
        }

        public static event Delegates.SetSendKilledToObject_AfterArgs SetSendKilledToObject
        {
            add
            {
                HookHandler._afterSetSendKilledToObject += value;
                HookHandler.HookSetSendKilledToObject();
            }
            remove => HookHandler._afterSetSendKilledToObject -= value;
        }

        public static event Delegates.CheckInvincible_AfterArgs CheckInvincible
        {
            add
            {
                HookHandler._afterCheckInvincible += value;
                HookHandler.HookCheckInvincible();
            }
            remove => HookHandler._afterCheckInvincible -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_IsInvincible_WithArgs get_IsInvincible
        {
            add => HookEndpointManager.Add<Delegates.get_IsInvincible_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HealthManager), "get_IsInvincible"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsInvincible_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HealthManager), "get_IsInvincible"), value);
        }

        public static event Delegates.set_IsInvincible_WithArgs set_IsInvincible
        {
            add => HookEndpointManager.Add<Delegates.set_IsInvincible_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HealthManager), "set_IsInvincible"), value);
            remove => HookEndpointManager.Remove<Delegates.set_IsInvincible_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HealthManager), "set_IsInvincible"), value);
        }

        public static event Delegates.get_InvincibleFromDirection_WithArgs get_InvincibleFromDirection
        {
            add => HookEndpointManager.Add<Delegates.get_InvincibleFromDirection_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HealthManager), "get_InvincibleFromDirection"), value);
            remove => HookEndpointManager.Remove<Delegates.get_InvincibleFromDirection_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HealthManager), "get_InvincibleFromDirection"), value);
        }

        public static event Delegates.set_InvincibleFromDirection_WithArgs set_InvincibleFromDirection
        {
            add => HookEndpointManager.Add<Delegates.set_InvincibleFromDirection_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HealthManager), "set_InvincibleFromDirection"), value);
            remove => HookEndpointManager.Remove<Delegates.set_InvincibleFromDirection_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HealthManager), "set_InvincibleFromDirection"), value);
        }

        public static event On.HealthManager.hook_Awake Awake
        {
            add => On.HealthManager.Awake += value;
            remove => On.HealthManager.Awake -= value;
        }

        public static event On.HealthManager.hook_OnEnable OnEnable
        {
            add => On.HealthManager.OnEnable += value;
            remove => On.HealthManager.OnEnable -= value;
        }

        public static event On.HealthManager.hook_Start Start
        {
            add => On.HealthManager.Start += value;
            remove => On.HealthManager.Start -= value;
        }

        public static event On.HealthManager.hook_CheckPersistence CheckPersistence
        {
            add => On.HealthManager.CheckPersistence += value;
            remove => On.HealthManager.CheckPersistence -= value;
        }

        public static event On.HealthManager.hook_Update Update
        {
            add => On.HealthManager.Update += value;
            remove => On.HealthManager.Update -= value;
        }

        public static event On.HealthManager.hook_Hit Hit
        {
            add => On.HealthManager.Hit += value;
            remove => On.HealthManager.Hit -= value;
        }

        public static event On.HealthManager.hook_Invincible Invincible
        {
            add => On.HealthManager.Invincible += value;
            remove => On.HealthManager.Invincible -= value;
        }

        public static event On.HealthManager.hook_TakeDamage TakeDamage
        {
            add => On.HealthManager.TakeDamage += value;
            remove => On.HealthManager.TakeDamage -= value;
        }

        public static event On.HealthManager.hook_NonFatalHit NonFatalHit
        {
            add => On.HealthManager.NonFatalHit += value;
            remove => On.HealthManager.NonFatalHit -= value;
        }

        public static event On.HealthManager.hook_ApplyExtraDamage ApplyExtraDamage
        {
            add => On.HealthManager.ApplyExtraDamage += value;
            remove => On.HealthManager.ApplyExtraDamage -= value;
        }

        public static event On.HealthManager.hook_Die Die
        {
            add => On.HealthManager.Die += value;
            remove => On.HealthManager.Die -= value;
        }

        public static event On.HealthManager.hook_SendDeathEvent SendDeathEvent
        {
            add => On.HealthManager.SendDeathEvent += value;
            remove => On.HealthManager.SendDeathEvent -= value;
        }

        public static event On.HealthManager.hook_SetGeoFlashing SetGeoFlashing
        {
            add => On.HealthManager.SetGeoFlashing += value;
            remove => On.HealthManager.SetGeoFlashing -= value;
        }

        public static event On.HealthManager.hook_IsBlockingByDirection IsBlockingByDirection
        {
            add => On.HealthManager.IsBlockingByDirection += value;
            remove => On.HealthManager.IsBlockingByDirection -= value;
        }

        public static event On.HealthManager.hook_SetBattleScene SetBattleScene
        {
            add => On.HealthManager.SetBattleScene += value;
            remove => On.HealthManager.SetBattleScene -= value;
        }

        public static event On.HealthManager.hook_GetAttackDirection GetAttackDirection
        {
            add => On.HealthManager.GetAttackDirection += value;
            remove => On.HealthManager.GetAttackDirection -= value;
        }

        public static event On.HealthManager.hook_SetPreventInvincibleEffect SetPreventInvincibleEffect
        {
            add => On.HealthManager.SetPreventInvincibleEffect += value;
            remove => On.HealthManager.SetPreventInvincibleEffect -= value;
        }

        public static event On.HealthManager.hook_SetGeoSmall SetGeoSmall
        {
            add => On.HealthManager.SetGeoSmall += value;
            remove => On.HealthManager.SetGeoSmall -= value;
        }

        public static event On.HealthManager.hook_SetGeoMedium SetGeoMedium
        {
            add => On.HealthManager.SetGeoMedium += value;
            remove => On.HealthManager.SetGeoMedium -= value;
        }

        public static event On.HealthManager.hook_SetGeoLarge SetGeoLarge
        {
            add => On.HealthManager.SetGeoLarge += value;
            remove => On.HealthManager.SetGeoLarge -= value;
        }

        public static event On.HealthManager.hook_GetIsDead GetIsDead
        {
            add => On.HealthManager.GetIsDead += value;
            remove => On.HealthManager.GetIsDead -= value;
        }

        public static event On.HealthManager.hook_SetIsDead SetIsDead
        {
            add => On.HealthManager.SetIsDead += value;
            remove => On.HealthManager.SetIsDead -= value;
        }

        public static event On.HealthManager.hook_SetDamageOverride SetDamageOverride
        {
            add => On.HealthManager.SetDamageOverride += value;
            remove => On.HealthManager.SetDamageOverride -= value;
        }

        public static event On.HealthManager.hook_SetSendKilledToObject SetSendKilledToObject
        {
            add => On.HealthManager.SetSendKilledToObject += value;
            remove => On.HealthManager.SetSendKilledToObject -= value;
        }

        public static event On.HealthManager.hook_CheckInvincible CheckInvincible
        {
            add => On.HealthManager.CheckInvincible += value;
            remove => On.HealthManager.CheckInvincible -= value;
        }
    }
}