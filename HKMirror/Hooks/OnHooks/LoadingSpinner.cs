using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for LoadingSpinner class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnLoadingSpinner
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_DisplayDelayAdjustment()
{
if (!HookedList.Contains("get_DisplayDelayAdjustment"))
{
HookedList.Add("get_DisplayDelayAdjustment");
new Hook(ReflectionHelper.GetMethodInfo(typeof(LoadingSpinner), "get_DisplayDelayAdjustment", true), get_DisplayDelayAdjustment);

}
}
internal static event Delegates.get_DisplayDelayAdjustment_BeforeArgs _beforeget_DisplayDelayAdjustment;
internal static event Delegates.get_DisplayDelayAdjustment_AfterArgs _afterget_DisplayDelayAdjustment;
private static float get_DisplayDelayAdjustment(Func<LoadingSpinner, float> orig, LoadingSpinner self)
{
Delegates.Params_get_DisplayDelayAdjustment @params = new() 
{
self = self
};
if (_beforeget_DisplayDelayAdjustment != null)
{
foreach (Delegates.get_DisplayDelayAdjustment_BeforeArgs toInvoke in _beforeget_DisplayDelayAdjustment.GetInvocationList())
{
try
{
_beforeget_DisplayDelayAdjustment?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_DisplayDelayAdjustment != null)
{
foreach (Delegates.get_DisplayDelayAdjustment_AfterArgs toInvoke in _afterget_DisplayDelayAdjustment.GetInvocationList())
{
try
{
retVal = _afterget_DisplayDelayAdjustment.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_DisplayDelayAdjustment()
{
if (!HookedList.Contains("set_DisplayDelayAdjustment"))
{
HookedList.Add("set_DisplayDelayAdjustment");
new Hook(ReflectionHelper.GetMethodInfo(typeof(LoadingSpinner), "set_DisplayDelayAdjustment", true), set_DisplayDelayAdjustment);

}
}
internal static event Delegates.set_DisplayDelayAdjustment_BeforeArgs _beforeset_DisplayDelayAdjustment;
internal static event Delegates.set_DisplayDelayAdjustment_AfterArgs _afterset_DisplayDelayAdjustment;
private static void set_DisplayDelayAdjustment(Action<LoadingSpinner,  float> orig, LoadingSpinner self,  float value)
{
Delegates.Params_set_DisplayDelayAdjustment @params = new() 
{
self = self
, value = value
};
if (_beforeset_DisplayDelayAdjustment != null)
{
foreach (Delegates.set_DisplayDelayAdjustment_BeforeArgs toInvoke in _beforeset_DisplayDelayAdjustment.GetInvocationList())
{
try
{
_beforeset_DisplayDelayAdjustment?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_DisplayDelayAdjustment != null)
{
foreach (Delegates.set_DisplayDelayAdjustment_AfterArgs toInvoke in _afterset_DisplayDelayAdjustment.GetInvocationList())
{
try
{
_afterset_DisplayDelayAdjustment.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_DisplayDelay()
{
if (!HookedList.Contains("get_DisplayDelay"))
{
HookedList.Add("get_DisplayDelay");
new Hook(ReflectionHelper.GetMethodInfo(typeof(LoadingSpinner), "get_DisplayDelay", true), get_DisplayDelay);

}
}
internal static event Delegates.get_DisplayDelay_BeforeArgs _beforeget_DisplayDelay;
internal static event Delegates.get_DisplayDelay_AfterArgs _afterget_DisplayDelay;
private static float get_DisplayDelay(Func<LoadingSpinner, float> orig, LoadingSpinner self)
{
Delegates.Params_get_DisplayDelay @params = new() 
{
self = self
};
if (_beforeget_DisplayDelay != null)
{
foreach (Delegates.get_DisplayDelay_BeforeArgs toInvoke in _beforeget_DisplayDelay.GetInvocationList())
{
try
{
_beforeget_DisplayDelay?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_DisplayDelay != null)
{
foreach (Delegates.get_DisplayDelay_AfterArgs toInvoke in _afterget_DisplayDelay.GetInvocationList())
{
try
{
retVal = _afterget_DisplayDelay.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
On.LoadingSpinner.OnEnable += OnEnable;

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(On.LoadingSpinner.orig_OnEnable orig,LoadingSpinner self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.LoadingSpinner.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.LoadingSpinner.orig_Start orig,LoadingSpinner self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdate()
{
if (!HookedList.Contains("Update"))
{
HookedList.Add("Update");
On.LoadingSpinner.Update += Update;

}
}
internal static event Delegates.Update_BeforeArgs _beforeUpdate;
internal static event Delegates.Update_AfterArgs _afterUpdate;
private static void Update(On.LoadingSpinner.orig_Update orig,LoadingSpinner self)
{
Delegates.Params_Update @params = new() 
{
self = self
};
if (_beforeUpdate != null)
{
foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
{
try
{
_beforeUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdate != null)
{
foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
{
try
{
_afterUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_DisplayDelayAdjustment
{
public LoadingSpinner self;
}
public delegate void get_DisplayDelayAdjustment_BeforeArgs(Params_get_DisplayDelayAdjustment args);
public delegate float get_DisplayDelayAdjustment_AfterArgs(Params_get_DisplayDelayAdjustment args, float ret);
public delegate float get_DisplayDelayAdjustment_WithArgs (Func<LoadingSpinner, float> orig, LoadingSpinner self);
public sealed class Params_set_DisplayDelayAdjustment
{
public LoadingSpinner self;
public float value;
}
public delegate void set_DisplayDelayAdjustment_BeforeArgs(Params_set_DisplayDelayAdjustment args);
public delegate void set_DisplayDelayAdjustment_AfterArgs(Params_set_DisplayDelayAdjustment args);
public delegate void set_DisplayDelayAdjustment_WithArgs (Action<LoadingSpinner,  float> orig, LoadingSpinner self,  float value);
public sealed class Params_get_DisplayDelay
{
public LoadingSpinner self;
}
public delegate void get_DisplayDelay_BeforeArgs(Params_get_DisplayDelay args);
public delegate float get_DisplayDelay_AfterArgs(Params_get_DisplayDelay args, float ret);
public delegate float get_DisplayDelay_WithArgs (Func<LoadingSpinner, float> orig, LoadingSpinner self);
public sealed class Params_OnEnable
{
public LoadingSpinner self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<LoadingSpinner> orig, LoadingSpinner self);
public sealed class Params_Start
{
public LoadingSpinner self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<LoadingSpinner> orig, LoadingSpinner self);
public sealed class Params_Update
{
public LoadingSpinner self;
}
public delegate void Update_BeforeArgs(Params_Update args);
public delegate void Update_AfterArgs(Params_Update args);
public delegate void Update_WithArgs (Action<LoadingSpinner> orig, LoadingSpinner self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_DisplayDelayAdjustment_BeforeArgs get_DisplayDelayAdjustment
{
add
{

HookHandler._beforeget_DisplayDelayAdjustment += value;
HookHandler.Hookget_DisplayDelayAdjustment();
}
remove => HookHandler._beforeget_DisplayDelayAdjustment -= value;
}
public static event Delegates.set_DisplayDelayAdjustment_BeforeArgs set_DisplayDelayAdjustment
{
add
{

HookHandler._beforeset_DisplayDelayAdjustment += value;
HookHandler.Hookset_DisplayDelayAdjustment();
}
remove => HookHandler._beforeset_DisplayDelayAdjustment -= value;
}
public static event Delegates.get_DisplayDelay_BeforeArgs get_DisplayDelay
{
add
{

HookHandler._beforeget_DisplayDelay += value;
HookHandler.Hookget_DisplayDelay();
}
remove => HookHandler._beforeget_DisplayDelay -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.Update_BeforeArgs Update
{
add
{

HookHandler._beforeUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._beforeUpdate -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_DisplayDelayAdjustment_AfterArgs get_DisplayDelayAdjustment
{
add
{

HookHandler._afterget_DisplayDelayAdjustment += value;
HookHandler.Hookget_DisplayDelayAdjustment();
}
remove => HookHandler._afterget_DisplayDelayAdjustment -= value;
}
public static event Delegates.set_DisplayDelayAdjustment_AfterArgs set_DisplayDelayAdjustment
{
add
{

HookHandler._afterset_DisplayDelayAdjustment += value;
HookHandler.Hookset_DisplayDelayAdjustment();
}
remove => HookHandler._afterset_DisplayDelayAdjustment -= value;
}
public static event Delegates.get_DisplayDelay_AfterArgs get_DisplayDelay
{
add
{

HookHandler._afterget_DisplayDelay += value;
HookHandler.Hookget_DisplayDelay();
}
remove => HookHandler._afterget_DisplayDelay -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.Update_AfterArgs Update
{
add
{

HookHandler._afterUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._afterUpdate -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_DisplayDelayAdjustment_WithArgs get_DisplayDelayAdjustment
{
add => HookEndpointManager.Add<Delegates.get_DisplayDelayAdjustment_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(LoadingSpinner), "get_DisplayDelayAdjustment", true), value);
remove => HookEndpointManager.Remove<Delegates.get_DisplayDelayAdjustment_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(LoadingSpinner), "get_DisplayDelayAdjustment", true), value);
}
public static event Delegates.set_DisplayDelayAdjustment_WithArgs set_DisplayDelayAdjustment
{
add => HookEndpointManager.Add<Delegates.set_DisplayDelayAdjustment_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(LoadingSpinner), "set_DisplayDelayAdjustment", true), value);
remove => HookEndpointManager.Remove<Delegates.set_DisplayDelayAdjustment_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(LoadingSpinner), "set_DisplayDelayAdjustment", true), value);
}
public static event Delegates.get_DisplayDelay_WithArgs get_DisplayDelay
{
add => HookEndpointManager.Add<Delegates.get_DisplayDelay_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(LoadingSpinner), "get_DisplayDelay", true), value);
remove => HookEndpointManager.Remove<Delegates.get_DisplayDelay_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(LoadingSpinner), "get_DisplayDelay", true), value);
}
public static event On.LoadingSpinner.hook_OnEnable OnEnable
{
add => On.LoadingSpinner.OnEnable += value;
remove => On.LoadingSpinner.OnEnable -= value;
}
public static event On.LoadingSpinner.hook_Start Start
{
add => On.LoadingSpinner.Start += value;
remove => On.LoadingSpinner.Start -= value;
}
public static event On.LoadingSpinner.hook_Update Update
{
add => On.LoadingSpinner.Update += value;
remove => On.LoadingSpinner.Update -= value;
}
}

}
