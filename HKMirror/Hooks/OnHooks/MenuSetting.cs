using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for MenuSetting class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuSetting
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.MenuSetting.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.MenuSetting.orig_Start orig, MenuSetting self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookRefreshValueFromGameSettings()
        {
            if (!HookedList.Contains("RefreshValueFromGameSettings"))
            {
                HookedList.Add("RefreshValueFromGameSettings");
                On.MenuSetting.RefreshValueFromGameSettings += RefreshValueFromGameSettings;
            }
        }

        internal static event Delegates.RefreshValueFromGameSettings_BeforeArgs _beforeRefreshValueFromGameSettings;
        internal static event Delegates.RefreshValueFromGameSettings_AfterArgs _afterRefreshValueFromGameSettings;

        private static void RefreshValueFromGameSettings(On.MenuSetting.orig_RefreshValueFromGameSettings orig,
            MenuSetting self, bool alsoApplySetting)
        {
            Delegates.Params_RefreshValueFromGameSettings @params = new()
            {
                self = self, alsoApplySetting = alsoApplySetting
            };
            if (_beforeRefreshValueFromGameSettings != null)
            {
                foreach (Delegates.RefreshValueFromGameSettings_BeforeArgs toInvoke in
                         _beforeRefreshValueFromGameSettings.GetInvocationList())
                {
                    try
                    {
                        _beforeRefreshValueFromGameSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            alsoApplySetting = @params.alsoApplySetting;
            orig(self, alsoApplySetting);
            if (_afterRefreshValueFromGameSettings != null)
            {
                foreach (Delegates.RefreshValueFromGameSettings_AfterArgs toInvoke in _afterRefreshValueFromGameSettings
                             .GetInvocationList())
                {
                    try
                    {
                        _afterRefreshValueFromGameSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateSetting()
        {
            if (!HookedList.Contains("UpdateSetting"))
            {
                HookedList.Add("UpdateSetting");
                On.MenuSetting.UpdateSetting += UpdateSetting;
            }
        }

        internal static event Delegates.UpdateSetting_BeforeArgs _beforeUpdateSetting;
        internal static event Delegates.UpdateSetting_AfterArgs _afterUpdateSetting;

        private static void UpdateSetting(On.MenuSetting.orig_UpdateSetting orig, MenuSetting self, int settingIndex)
        {
            Delegates.Params_UpdateSetting @params = new()
            {
                self = self, settingIndex = settingIndex
            };
            if (_beforeUpdateSetting != null)
            {
                foreach (Delegates.UpdateSetting_BeforeArgs toInvoke in _beforeUpdateSetting.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateSetting?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            settingIndex = @params.settingIndex;
            orig(self, settingIndex);
            if (_afterUpdateSetting != null)
            {
                foreach (Delegates.UpdateSetting_AfterArgs toInvoke in _afterUpdateSetting.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateSetting.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookorig_UpdateSetting()
        {
            if (!HookedList.Contains("orig_UpdateSetting"))
            {
                HookedList.Add("orig_UpdateSetting");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuSetting), "orig_UpdateSetting", true),
                    orig_UpdateSetting);
            }
        }

        internal static event Delegates.orig_UpdateSetting_BeforeArgs _beforeorig_UpdateSetting;
        internal static event Delegates.orig_UpdateSetting_AfterArgs _afterorig_UpdateSetting;

        private static void orig_UpdateSetting(Action<MenuSetting, int> orig, MenuSetting self, int settingIndex)
        {
            Delegates.Params_orig_UpdateSetting @params = new()
            {
                self = self, settingIndex = settingIndex
            };
            if (_beforeorig_UpdateSetting != null)
            {
                foreach (Delegates.orig_UpdateSetting_BeforeArgs toInvoke in
                         _beforeorig_UpdateSetting.GetInvocationList())
                {
                    try
                    {
                        _beforeorig_UpdateSetting?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            settingIndex = @params.settingIndex;
            orig(self, settingIndex);
            if (_afterorig_UpdateSetting != null)
            {
                foreach (Delegates.orig_UpdateSetting_AfterArgs toInvoke in
                         _afterorig_UpdateSetting.GetInvocationList())
                {
                    try
                    {
                        _afterorig_UpdateSetting.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookorig_RefreshValueFromGameSettings()
        {
            if (!HookedList.Contains("orig_RefreshValueFromGameSettings"))
            {
                HookedList.Add("orig_RefreshValueFromGameSettings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuSetting), "orig_RefreshValueFromGameSettings", true),
                    orig_RefreshValueFromGameSettings);
            }
        }

        internal static event Delegates.orig_RefreshValueFromGameSettings_BeforeArgs
            _beforeorig_RefreshValueFromGameSettings;

        internal static event Delegates.orig_RefreshValueFromGameSettings_AfterArgs
            _afterorig_RefreshValueFromGameSettings;

        private static void orig_RefreshValueFromGameSettings(Action<MenuSetting, bool> orig, MenuSetting self,
            bool alsoApplySetting)
        {
            Delegates.Params_orig_RefreshValueFromGameSettings @params = new()
            {
                self = self, alsoApplySetting = alsoApplySetting
            };
            if (_beforeorig_RefreshValueFromGameSettings != null)
            {
                foreach (Delegates.orig_RefreshValueFromGameSettings_BeforeArgs toInvoke in
                         _beforeorig_RefreshValueFromGameSettings.GetInvocationList())
                {
                    try
                    {
                        _beforeorig_RefreshValueFromGameSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            alsoApplySetting = @params.alsoApplySetting;
            orig(self, alsoApplySetting);
            if (_afterorig_RefreshValueFromGameSettings != null)
            {
                foreach (Delegates.orig_RefreshValueFromGameSettings_AfterArgs toInvoke in
                         _afterorig_RefreshValueFromGameSettings.GetInvocationList())
                {
                    try
                    {
                        _afterorig_RefreshValueFromGameSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Start
        {
            public MenuSetting self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<MenuSetting> orig, MenuSetting self);

        public sealed class Params_RefreshValueFromGameSettings
        {
            public MenuSetting self;
            public bool alsoApplySetting;
        }

        public delegate void RefreshValueFromGameSettings_BeforeArgs(Params_RefreshValueFromGameSettings args);

        public delegate void RefreshValueFromGameSettings_AfterArgs(Params_RefreshValueFromGameSettings args);

        public delegate void RefreshValueFromGameSettings_WithArgs(Action<MenuSetting, bool> orig, MenuSetting self,
            bool alsoApplySetting);

        public sealed class Params_UpdateSetting
        {
            public MenuSetting self;
            public int settingIndex;
        }

        public delegate void UpdateSetting_BeforeArgs(Params_UpdateSetting args);

        public delegate void UpdateSetting_AfterArgs(Params_UpdateSetting args);

        public delegate void UpdateSetting_WithArgs(Action<MenuSetting, int> orig, MenuSetting self, int settingIndex);

        public sealed class Params_orig_UpdateSetting
        {
            public MenuSetting self;
            public int settingIndex;
        }

        public delegate void orig_UpdateSetting_BeforeArgs(Params_orig_UpdateSetting args);

        public delegate void orig_UpdateSetting_AfterArgs(Params_orig_UpdateSetting args);

        public delegate void orig_UpdateSetting_WithArgs(Action<MenuSetting, int> orig, MenuSetting self,
            int settingIndex);

        public sealed class Params_orig_RefreshValueFromGameSettings
        {
            public MenuSetting self;
            public bool alsoApplySetting;
        }

        public delegate void
            orig_RefreshValueFromGameSettings_BeforeArgs(Params_orig_RefreshValueFromGameSettings args);

        public delegate void orig_RefreshValueFromGameSettings_AfterArgs(Params_orig_RefreshValueFromGameSettings args);

        public delegate void orig_RefreshValueFromGameSettings_WithArgs(Action<MenuSetting, bool> orig,
            MenuSetting self, bool alsoApplySetting);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.RefreshValueFromGameSettings_BeforeArgs RefreshValueFromGameSettings
        {
            add
            {
                HookHandler._beforeRefreshValueFromGameSettings += value;
                HookHandler.HookRefreshValueFromGameSettings();
            }
            remove => HookHandler._beforeRefreshValueFromGameSettings -= value;
        }

        public static event Delegates.UpdateSetting_BeforeArgs UpdateSetting
        {
            add
            {
                HookHandler._beforeUpdateSetting += value;
                HookHandler.HookUpdateSetting();
            }
            remove => HookHandler._beforeUpdateSetting -= value;
        }

        public static event Delegates.orig_UpdateSetting_BeforeArgs orig_UpdateSetting
        {
            add
            {
                HookHandler._beforeorig_UpdateSetting += value;
                HookHandler.Hookorig_UpdateSetting();
            }
            remove => HookHandler._beforeorig_UpdateSetting -= value;
        }

        public static event Delegates.orig_RefreshValueFromGameSettings_BeforeArgs orig_RefreshValueFromGameSettings
        {
            add
            {
                HookHandler._beforeorig_RefreshValueFromGameSettings += value;
                HookHandler.Hookorig_RefreshValueFromGameSettings();
            }
            remove => HookHandler._beforeorig_RefreshValueFromGameSettings -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.RefreshValueFromGameSettings_AfterArgs RefreshValueFromGameSettings
        {
            add
            {
                HookHandler._afterRefreshValueFromGameSettings += value;
                HookHandler.HookRefreshValueFromGameSettings();
            }
            remove => HookHandler._afterRefreshValueFromGameSettings -= value;
        }

        public static event Delegates.UpdateSetting_AfterArgs UpdateSetting
        {
            add
            {
                HookHandler._afterUpdateSetting += value;
                HookHandler.HookUpdateSetting();
            }
            remove => HookHandler._afterUpdateSetting -= value;
        }

        public static event Delegates.orig_UpdateSetting_AfterArgs orig_UpdateSetting
        {
            add
            {
                HookHandler._afterorig_UpdateSetting += value;
                HookHandler.Hookorig_UpdateSetting();
            }
            remove => HookHandler._afterorig_UpdateSetting -= value;
        }

        public static event Delegates.orig_RefreshValueFromGameSettings_AfterArgs orig_RefreshValueFromGameSettings
        {
            add
            {
                HookHandler._afterorig_RefreshValueFromGameSettings += value;
                HookHandler.Hookorig_RefreshValueFromGameSettings();
            }
            remove => HookHandler._afterorig_RefreshValueFromGameSettings -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.MenuSetting.hook_Start Start
        {
            add => On.MenuSetting.Start += value;
            remove => On.MenuSetting.Start -= value;
        }

        public static event On.MenuSetting.hook_RefreshValueFromGameSettings RefreshValueFromGameSettings
        {
            add => On.MenuSetting.RefreshValueFromGameSettings += value;
            remove => On.MenuSetting.RefreshValueFromGameSettings -= value;
        }

        public static event On.MenuSetting.hook_UpdateSetting UpdateSetting
        {
            add => On.MenuSetting.UpdateSetting += value;
            remove => On.MenuSetting.UpdateSetting -= value;
        }

        public static event Delegates.orig_UpdateSetting_WithArgs orig_UpdateSetting
        {
            add => HookEndpointManager.Add<Delegates.orig_UpdateSetting_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSetting), "orig_UpdateSetting", true), value);
            remove => HookEndpointManager.Remove<Delegates.orig_UpdateSetting_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSetting), "orig_UpdateSetting", true), value);
        }

        public static event Delegates.orig_RefreshValueFromGameSettings_WithArgs orig_RefreshValueFromGameSettings
        {
            add => HookEndpointManager.Add<Delegates.orig_RefreshValueFromGameSettings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSetting), "orig_RefreshValueFromGameSettings", true), value);
            remove => HookEndpointManager.Remove<Delegates.orig_RefreshValueFromGameSettings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSetting), "orig_RefreshValueFromGameSettings", true), value);
        }
    }
}