using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for EnableBehaviour class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnEnableBehaviour
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.EnableBehaviour), "Reset",
                        true), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_AfterArgs _afterReset;

        private static void Reset(Action<HutongGames.PlayMaker.Actions.EnableBehaviour> orig,
            HutongGames.PlayMaker.Actions.EnableBehaviour self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            if (_beforeReset != null)
            {
                foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
                {
                    try
                    {
                        _beforeReset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterReset != null)
            {
                foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
                {
                    try
                    {
                        _afterReset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.EnableBehaviour), "OnEnter",
                        true), OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_AfterArgs _afterOnEnter;

        private static void OnEnter(Action<HutongGames.PlayMaker.Actions.EnableBehaviour> orig,
            HutongGames.PlayMaker.Actions.EnableBehaviour self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            if (_beforeOnEnter != null)
            {
                foreach (Delegates.OnEnter_BeforeArgs toInvoke in _beforeOnEnter.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnter != null)
            {
                foreach (Delegates.OnEnter_AfterArgs toInvoke in _afterOnEnter.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnter.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDoEnableBehaviour()
        {
            if (!HookedList.Contains("DoEnableBehaviour"))
            {
                HookedList.Add("DoEnableBehaviour");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.EnableBehaviour),
                        "DoEnableBehaviour", true), DoEnableBehaviour);
            }
        }

        internal static event Delegates.DoEnableBehaviour_BeforeArgs _beforeDoEnableBehaviour;
        internal static event Delegates.DoEnableBehaviour_AfterArgs _afterDoEnableBehaviour;

        private static void DoEnableBehaviour(
            Action<HutongGames.PlayMaker.Actions.EnableBehaviour, UnityEngine.GameObject> orig,
            HutongGames.PlayMaker.Actions.EnableBehaviour self, UnityEngine.GameObject go)
        {
            Delegates.Params_DoEnableBehaviour @params = new()
            {
                self = self, go = go
            };
            if (_beforeDoEnableBehaviour != null)
            {
                foreach (Delegates.DoEnableBehaviour_BeforeArgs toInvoke in
                         _beforeDoEnableBehaviour.GetInvocationList())
                {
                    try
                    {
                        _beforeDoEnableBehaviour?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            go = @params.go;
            orig(self, go);
            if (_afterDoEnableBehaviour != null)
            {
                foreach (Delegates.DoEnableBehaviour_AfterArgs toInvoke in _afterDoEnableBehaviour.GetInvocationList())
                {
                    try
                    {
                        _afterDoEnableBehaviour.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnExit()
        {
            if (!HookedList.Contains("OnExit"))
            {
                HookedList.Add("OnExit");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.EnableBehaviour), "OnExit",
                        true), OnExit);
            }
        }

        internal static event Delegates.OnExit_BeforeArgs _beforeOnExit;
        internal static event Delegates.OnExit_AfterArgs _afterOnExit;

        private static void OnExit(Action<HutongGames.PlayMaker.Actions.EnableBehaviour> orig,
            HutongGames.PlayMaker.Actions.EnableBehaviour self)
        {
            Delegates.Params_OnExit @params = new()
            {
                self = self
            };
            if (_beforeOnExit != null)
            {
                foreach (Delegates.OnExit_BeforeArgs toInvoke in _beforeOnExit.GetInvocationList())
                {
                    try
                    {
                        _beforeOnExit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnExit != null)
            {
                foreach (Delegates.OnExit_AfterArgs toInvoke in _afterOnExit.GetInvocationList())
                {
                    try
                    {
                        _afterOnExit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookErrorCheck()
        {
            if (!HookedList.Contains("ErrorCheck"))
            {
                HookedList.Add("ErrorCheck");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.EnableBehaviour), "ErrorCheck",
                        true), ErrorCheck);
            }
        }

        internal static event Delegates.ErrorCheck_BeforeArgs _beforeErrorCheck;
        internal static event Delegates.ErrorCheck_AfterArgs _afterErrorCheck;

        private static string ErrorCheck(Func<HutongGames.PlayMaker.Actions.EnableBehaviour, string> orig,
            HutongGames.PlayMaker.Actions.EnableBehaviour self)
        {
            Delegates.Params_ErrorCheck @params = new()
            {
                self = self
            };
            if (_beforeErrorCheck != null)
            {
                foreach (Delegates.ErrorCheck_BeforeArgs toInvoke in _beforeErrorCheck.GetInvocationList())
                {
                    try
                    {
                        _beforeErrorCheck?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterErrorCheck != null)
            {
                foreach (Delegates.ErrorCheck_AfterArgs toInvoke in _afterErrorCheck.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterErrorCheck.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Reset
        {
            public HutongGames.PlayMaker.Actions.EnableBehaviour self;
        }

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_AfterArgs(Params_Reset args);

        public delegate void Reset_WithArgs(Action<HutongGames.PlayMaker.Actions.EnableBehaviour> orig,
            HutongGames.PlayMaker.Actions.EnableBehaviour self);

        public sealed class Params_OnEnter
        {
            public HutongGames.PlayMaker.Actions.EnableBehaviour self;
        }

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_AfterArgs(Params_OnEnter args);

        public delegate void OnEnter_WithArgs(Action<HutongGames.PlayMaker.Actions.EnableBehaviour> orig,
            HutongGames.PlayMaker.Actions.EnableBehaviour self);

        public sealed class Params_DoEnableBehaviour
        {
            public HutongGames.PlayMaker.Actions.EnableBehaviour self;
            public UnityEngine.GameObject go;
        }

        public delegate void DoEnableBehaviour_BeforeArgs(Params_DoEnableBehaviour args);

        public delegate void DoEnableBehaviour_AfterArgs(Params_DoEnableBehaviour args);

        public delegate void DoEnableBehaviour_WithArgs(
            Action<HutongGames.PlayMaker.Actions.EnableBehaviour, UnityEngine.GameObject> orig,
            HutongGames.PlayMaker.Actions.EnableBehaviour self, UnityEngine.GameObject go);

        public sealed class Params_OnExit
        {
            public HutongGames.PlayMaker.Actions.EnableBehaviour self;
        }

        public delegate void OnExit_BeforeArgs(Params_OnExit args);

        public delegate void OnExit_AfterArgs(Params_OnExit args);

        public delegate void OnExit_WithArgs(Action<HutongGames.PlayMaker.Actions.EnableBehaviour> orig,
            HutongGames.PlayMaker.Actions.EnableBehaviour self);

        public sealed class Params_ErrorCheck
        {
            public HutongGames.PlayMaker.Actions.EnableBehaviour self;
        }

        public delegate void ErrorCheck_BeforeArgs(Params_ErrorCheck args);

        public delegate string ErrorCheck_AfterArgs(Params_ErrorCheck args, string ret);

        public delegate string ErrorCheck_WithArgs(Func<HutongGames.PlayMaker.Actions.EnableBehaviour, string> orig,
            HutongGames.PlayMaker.Actions.EnableBehaviour self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.DoEnableBehaviour_BeforeArgs DoEnableBehaviour
        {
            add
            {
                HookHandler._beforeDoEnableBehaviour += value;
                HookHandler.HookDoEnableBehaviour();
            }
            remove => HookHandler._beforeDoEnableBehaviour -= value;
        }

        public static event Delegates.OnExit_BeforeArgs OnExit
        {
            add
            {
                HookHandler._beforeOnExit += value;
                HookHandler.HookOnExit();
            }
            remove => HookHandler._beforeOnExit -= value;
        }

        public static event Delegates.ErrorCheck_BeforeArgs ErrorCheck
        {
            add
            {
                HookHandler._beforeErrorCheck += value;
                HookHandler.HookErrorCheck();
            }
            remove => HookHandler._beforeErrorCheck -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_AfterArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_AfterArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.DoEnableBehaviour_AfterArgs DoEnableBehaviour
        {
            add
            {
                HookHandler._afterDoEnableBehaviour += value;
                HookHandler.HookDoEnableBehaviour();
            }
            remove => HookHandler._afterDoEnableBehaviour -= value;
        }

        public static event Delegates.OnExit_AfterArgs OnExit
        {
            add
            {
                HookHandler._afterOnExit += value;
                HookHandler.HookOnExit();
            }
            remove => HookHandler._afterOnExit -= value;
        }

        public static event Delegates.ErrorCheck_AfterArgs ErrorCheck
        {
            add
            {
                HookHandler._afterErrorCheck += value;
                HookHandler.HookErrorCheck();
            }
            remove => HookHandler._afterErrorCheck -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_WithArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.EnableBehaviour), "Reset", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.EnableBehaviour), "Reset", true),
                value);
        }

        public static event Delegates.OnEnter_WithArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.EnableBehaviour), "OnEnter", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.EnableBehaviour), "OnEnter", true),
                value);
        }

        public static event Delegates.DoEnableBehaviour_WithArgs DoEnableBehaviour
        {
            add => HookEndpointManager.Add<Delegates.DoEnableBehaviour_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.EnableBehaviour),
                    "DoEnableBehaviour", true), value);
            remove => HookEndpointManager.Remove<Delegates.DoEnableBehaviour_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.EnableBehaviour),
                    "DoEnableBehaviour", true), value);
        }

        public static event Delegates.OnExit_WithArgs OnExit
        {
            add => HookEndpointManager.Add<Delegates.OnExit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.EnableBehaviour), "OnExit", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.OnExit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.EnableBehaviour), "OnExit", true),
                value);
        }

        public static event Delegates.ErrorCheck_WithArgs ErrorCheck
        {
            add => HookEndpointManager.Add<Delegates.ErrorCheck_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.EnableBehaviour), "ErrorCheck",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.ErrorCheck_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.EnableBehaviour), "ErrorCheck",
                    true), value);
        }
    }
}