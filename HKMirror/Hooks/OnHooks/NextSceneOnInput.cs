using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for NextSceneOnInput class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnNextSceneOnInput
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_AcceptingInput()
        {
            if (!HookedList.Contains("get_AcceptingInput"))
            {
                HookedList.Add("get_AcceptingInput");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NextSceneOnInput), "get_AcceptingInput"),
                    get_AcceptingInput);
            }
        }

        internal static event Delegates.get_AcceptingInput_BeforeArgs _beforeget_AcceptingInput;
        internal static event Delegates.get_AcceptingInput_NormalArgs _afterget_AcceptingInput;

        private static bool get_AcceptingInput(Func<NextSceneOnInput, bool> orig, NextSceneOnInput self)
        {
            Delegates.Params_get_AcceptingInput @params = new()
            {
                self = self
            };
            _beforeget_AcceptingInput?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AcceptingInput != null) retVal = _afterget_AcceptingInput.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_ButtonPressed()
        {
            if (!HookedList.Contains("get_ButtonPressed"))
            {
                HookedList.Add("get_ButtonPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NextSceneOnInput), "get_ButtonPressed"),
                    get_ButtonPressed);
            }
        }

        internal static event Delegates.get_ButtonPressed_BeforeArgs _beforeget_ButtonPressed;
        internal static event Delegates.get_ButtonPressed_NormalArgs _afterget_ButtonPressed;

        private static bool get_ButtonPressed(Func<NextSceneOnInput, bool> orig, NextSceneOnInput self)
        {
            Delegates.Params_get_ButtonPressed @params = new()
            {
                self = self
            };
            _beforeget_ButtonPressed?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ButtonPressed != null) retVal = _afterget_ButtonPressed.Invoke(@params);
            return retVal;
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.NextSceneOnInput.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.NextSceneOnInput.orig_Start orig, NextSceneOnInput self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookUnlockSkip()
        {
            if (!HookedList.Contains("UnlockSkip"))
            {
                HookedList.Add("UnlockSkip");
                On.NextSceneOnInput.UnlockSkip += UnlockSkip;
            }
        }

        internal static event Delegates.UnlockSkip_BeforeArgs _beforeUnlockSkip;
        internal static event Delegates.UnlockSkip_NormalArgs _afterUnlockSkip;

        private static void UnlockSkip(On.NextSceneOnInput.orig_UnlockSkip orig, NextSceneOnInput self)
        {
            Delegates.Params_UnlockSkip @params = new()
            {
                self = self
            };
            _beforeUnlockSkip?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUnlockSkip != null) _afterUnlockSkip.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.NextSceneOnInput.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.NextSceneOnInput.orig_Update orig, NextSceneOnInput self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookSkip()
        {
            if (!HookedList.Contains("Skip"))
            {
                HookedList.Add("Skip");
                On.NextSceneOnInput.Skip += Skip;
            }
        }

        internal static event Delegates.Skip_BeforeArgs _beforeSkip;
        internal static event Delegates.Skip_NormalArgs _afterSkip;

        private static void Skip(On.NextSceneOnInput.orig_Skip orig, NextSceneOnInput self)
        {
            Delegates.Params_Skip @params = new()
            {
                self = self
            };
            _beforeSkip?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSkip != null) _afterSkip.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_AcceptingInput_BeforeArgs(Params_get_AcceptingInput args);

        public delegate bool get_AcceptingInput_NormalArgs(Params_get_AcceptingInput args);

        public delegate void get_ButtonPressed_BeforeArgs(Params_get_ButtonPressed args);

        public delegate bool get_ButtonPressed_NormalArgs(Params_get_ButtonPressed args);

        public delegate void Skip_BeforeArgs(Params_Skip args);

        public delegate void Skip_NormalArgs(Params_Skip args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void UnlockSkip_BeforeArgs(Params_UnlockSkip args);

        public delegate void UnlockSkip_NormalArgs(Params_UnlockSkip args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_get_AcceptingInput
        {
            public NextSceneOnInput self;
        }

        public sealed class Params_get_ButtonPressed
        {
            public NextSceneOnInput self;
        }

        public sealed class Params_Start
        {
            public NextSceneOnInput self;
        }

        public sealed class Params_UnlockSkip
        {
            public NextSceneOnInput self;
        }

        public sealed class Params_Update
        {
            public NextSceneOnInput self;
        }

        public sealed class Params_Skip
        {
            public NextSceneOnInput self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_AcceptingInput_BeforeArgs get_AcceptingInput
        {
            add
            {
                HookHandler._beforeget_AcceptingInput += value;
                HookHandler.Hookget_AcceptingInput();
            }
            remove => HookHandler._beforeget_AcceptingInput -= value;
        }

        public static event Delegates.get_ButtonPressed_BeforeArgs get_ButtonPressed
        {
            add
            {
                HookHandler._beforeget_ButtonPressed += value;
                HookHandler.Hookget_ButtonPressed();
            }
            remove => HookHandler._beforeget_ButtonPressed -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.UnlockSkip_BeforeArgs UnlockSkip
        {
            add
            {
                HookHandler._beforeUnlockSkip += value;
                HookHandler.HookUnlockSkip();
            }
            remove => HookHandler._beforeUnlockSkip -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.Skip_BeforeArgs Skip
        {
            add
            {
                HookHandler._beforeSkip += value;
                HookHandler.HookSkip();
            }
            remove => HookHandler._beforeSkip -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_AcceptingInput_NormalArgs get_AcceptingInput
        {
            add
            {
                HookHandler._afterget_AcceptingInput += value;
                HookHandler.Hookget_AcceptingInput();
            }
            remove => HookHandler._afterget_AcceptingInput -= value;
        }

        public static event Delegates.get_ButtonPressed_NormalArgs get_ButtonPressed
        {
            add
            {
                HookHandler._afterget_ButtonPressed += value;
                HookHandler.Hookget_ButtonPressed();
            }
            remove => HookHandler._afterget_ButtonPressed -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.UnlockSkip_NormalArgs UnlockSkip
        {
            add
            {
                HookHandler._afterUnlockSkip += value;
                HookHandler.HookUnlockSkip();
            }
            remove => HookHandler._afterUnlockSkip -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.Skip_NormalArgs Skip
        {
            add
            {
                HookHandler._afterSkip += value;
                HookHandler.HookSkip();
            }
            remove => HookHandler._afterSkip -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_AcceptingInput_NormalArgs get_AcceptingInput
        {
            add => HookEndpointManager.Add<Delegates.get_AcceptingInput_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NextSceneOnInput), "get_AcceptingInput"), value);
            remove => HookEndpointManager.Remove<Delegates.get_AcceptingInput_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NextSceneOnInput), "get_AcceptingInput"), value);
        }

        public static event Delegates.get_ButtonPressed_NormalArgs get_ButtonPressed
        {
            add => HookEndpointManager.Add<Delegates.get_ButtonPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NextSceneOnInput), "get_ButtonPressed"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ButtonPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NextSceneOnInput), "get_ButtonPressed"), value);
        }

        public static event On.NextSceneOnInput.hook_Start Start
        {
            add => On.NextSceneOnInput.Start += value;
            remove => On.NextSceneOnInput.Start -= value;
        }

        public static event On.NextSceneOnInput.hook_UnlockSkip UnlockSkip
        {
            add => On.NextSceneOnInput.UnlockSkip += value;
            remove => On.NextSceneOnInput.UnlockSkip -= value;
        }

        public static event On.NextSceneOnInput.hook_Update Update
        {
            add => On.NextSceneOnInput.Update += value;
            remove => On.NextSceneOnInput.Update -= value;
        }

        public static event On.NextSceneOnInput.hook_Skip Skip
        {
            add => On.NextSceneOnInput.Skip += value;
            remove => On.NextSceneOnInput.Skip -= value;
        }
    }
}