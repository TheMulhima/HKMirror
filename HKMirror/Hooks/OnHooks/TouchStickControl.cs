using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using Touch = InControl.Touch;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TouchStickControl class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTouchStickControl
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookCreateControl()
        {
            if (!HookedList.Contains("CreateControl"))
            {
                HookedList.Add("CreateControl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "CreateControl"), CreateControl);
            }
        }

        internal static event Delegates.CreateControl_BeforeArgs _beforeCreateControl;
        internal static event Delegates.CreateControl_NormalArgs _afterCreateControl;

        private static void CreateControl(Action<TouchStickControl> orig, TouchStickControl self)
        {
            Delegates.Params_CreateControl @params = new()
            {
                self = self
            };
            _beforeCreateControl?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCreateControl != null) _afterCreateControl.Invoke(@params);
        }

        internal static void HookDestroyControl()
        {
            if (!HookedList.Contains("DestroyControl"))
            {
                HookedList.Add("DestroyControl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "DestroyControl"), DestroyControl);
            }
        }

        internal static event Delegates.DestroyControl_BeforeArgs _beforeDestroyControl;
        internal static event Delegates.DestroyControl_NormalArgs _afterDestroyControl;

        private static void DestroyControl(Action<TouchStickControl> orig, TouchStickControl self)
        {
            Delegates.Params_DestroyControl @params = new()
            {
                self = self
            };
            _beforeDestroyControl?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDestroyControl != null) _afterDestroyControl.Invoke(@params);
        }

        internal static void HookConfigureControl()
        {
            if (!HookedList.Contains("ConfigureControl"))
            {
                HookedList.Add("ConfigureControl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "ConfigureControl"),
                    ConfigureControl);
            }
        }

        internal static event Delegates.ConfigureControl_BeforeArgs _beforeConfigureControl;
        internal static event Delegates.ConfigureControl_NormalArgs _afterConfigureControl;

        private static void ConfigureControl(Action<TouchStickControl> orig, TouchStickControl self)
        {
            Delegates.Params_ConfigureControl @params = new()
            {
                self = self
            };
            _beforeConfigureControl?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterConfigureControl != null) _afterConfigureControl.Invoke(@params);
        }

        internal static void HookDrawGizmos()
        {
            if (!HookedList.Contains("DrawGizmos"))
            {
                HookedList.Add("DrawGizmos");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "DrawGizmos"), DrawGizmos);
            }
        }

        internal static event Delegates.DrawGizmos_BeforeArgs _beforeDrawGizmos;
        internal static event Delegates.DrawGizmos_NormalArgs _afterDrawGizmos;

        private static void DrawGizmos(Action<TouchStickControl> orig, TouchStickControl self)
        {
            Delegates.Params_DrawGizmos @params = new()
            {
                self = self
            };
            _beforeDrawGizmos?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDrawGizmos != null) _afterDrawGizmos.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "Update"), Update);
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(Action<TouchStickControl> orig, TouchStickControl self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookSubmitControlState()
        {
            if (!HookedList.Contains("SubmitControlState"))
            {
                HookedList.Add("SubmitControlState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "SubmitControlState"),
                    SubmitControlState);
            }
        }

        internal static event Delegates.SubmitControlState_BeforeArgs _beforeSubmitControlState;
        internal static event Delegates.SubmitControlState_NormalArgs _afterSubmitControlState;

        private static void SubmitControlState(Action<TouchStickControl, ulong, float> orig, TouchStickControl self,
            ulong updateTick, float deltaTime)
        {
            Delegates.Params_SubmitControlState @params = new()
            {
                self = self, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeSubmitControlState?.Invoke(@params);
            self = @params.self;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, updateTick, deltaTime);
            if (_afterSubmitControlState != null) _afterSubmitControlState.Invoke(@params);
        }

        internal static void HookCommitControlState()
        {
            if (!HookedList.Contains("CommitControlState"))
            {
                HookedList.Add("CommitControlState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "CommitControlState"),
                    CommitControlState);
            }
        }

        internal static event Delegates.CommitControlState_BeforeArgs _beforeCommitControlState;
        internal static event Delegates.CommitControlState_NormalArgs _afterCommitControlState;

        private static void CommitControlState(Action<TouchStickControl, ulong, float> orig, TouchStickControl self,
            ulong updateTick, float deltaTime)
        {
            Delegates.Params_CommitControlState @params = new()
            {
                self = self, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeCommitControlState?.Invoke(@params);
            self = @params.self;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, updateTick, deltaTime);
            if (_afterCommitControlState != null) _afterCommitControlState.Invoke(@params);
        }

        internal static void HookTouchBegan()
        {
            if (!HookedList.Contains("TouchBegan"))
            {
                HookedList.Add("TouchBegan");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "TouchBegan"), TouchBegan);
            }
        }

        internal static event Delegates.TouchBegan_BeforeArgs _beforeTouchBegan;
        internal static event Delegates.TouchBegan_NormalArgs _afterTouchBegan;

        private static void TouchBegan(Action<TouchStickControl, Touch> orig, TouchStickControl self, Touch touch)
        {
            Delegates.Params_TouchBegan @params = new()
            {
                self = self, touch = touch
            };
            _beforeTouchBegan?.Invoke(@params);
            self = @params.self;
            touch = @params.touch;
            orig(self, touch);
            if (_afterTouchBegan != null) _afterTouchBegan.Invoke(@params);
        }

        internal static void HookTouchMoved()
        {
            if (!HookedList.Contains("TouchMoved"))
            {
                HookedList.Add("TouchMoved");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "TouchMoved"), TouchMoved);
            }
        }

        internal static event Delegates.TouchMoved_BeforeArgs _beforeTouchMoved;
        internal static event Delegates.TouchMoved_NormalArgs _afterTouchMoved;

        private static void TouchMoved(Action<TouchStickControl, Touch> orig, TouchStickControl self, Touch touch)
        {
            Delegates.Params_TouchMoved @params = new()
            {
                self = self, touch = touch
            };
            _beforeTouchMoved?.Invoke(@params);
            self = @params.self;
            touch = @params.touch;
            orig(self, touch);
            if (_afterTouchMoved != null) _afterTouchMoved.Invoke(@params);
        }

        internal static void HookTouchEnded()
        {
            if (!HookedList.Contains("TouchEnded"))
            {
                HookedList.Add("TouchEnded");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "TouchEnded"), TouchEnded);
            }
        }

        internal static event Delegates.TouchEnded_BeforeArgs _beforeTouchEnded;
        internal static event Delegates.TouchEnded_NormalArgs _afterTouchEnded;

        private static void TouchEnded(Action<TouchStickControl, Touch> orig, TouchStickControl self, Touch touch)
        {
            Delegates.Params_TouchEnded @params = new()
            {
                self = self, touch = touch
            };
            _beforeTouchEnded?.Invoke(@params);
            self = @params.self;
            touch = @params.touch;
            orig(self, touch);
            if (_afterTouchEnded != null) _afterTouchEnded.Invoke(@params);
        }

        internal static void Hookget_IsActive()
        {
            if (!HookedList.Contains("get_IsActive"))
            {
                HookedList.Add("get_IsActive");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_IsActive"), get_IsActive);
            }
        }

        internal static event Delegates.get_IsActive_BeforeArgs _beforeget_IsActive;
        internal static event Delegates.get_IsActive_NormalArgs _afterget_IsActive;

        private static bool get_IsActive(Func<TouchStickControl, bool> orig, TouchStickControl self)
        {
            Delegates.Params_get_IsActive @params = new()
            {
                self = self
            };
            _beforeget_IsActive?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsActive != null) retVal = _afterget_IsActive.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_IsNotActive()
        {
            if (!HookedList.Contains("get_IsNotActive"))
            {
                HookedList.Add("get_IsNotActive");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_IsNotActive"), get_IsNotActive);
            }
        }

        internal static event Delegates.get_IsNotActive_BeforeArgs _beforeget_IsNotActive;
        internal static event Delegates.get_IsNotActive_NormalArgs _afterget_IsNotActive;

        private static bool get_IsNotActive(Func<TouchStickControl, bool> orig, TouchStickControl self)
        {
            Delegates.Params_get_IsNotActive @params = new()
            {
                self = self
            };
            _beforeget_IsNotActive?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsNotActive != null) retVal = _afterget_IsNotActive.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_RingPosition()
        {
            if (!HookedList.Contains("get_RingPosition"))
            {
                HookedList.Add("get_RingPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_RingPosition"),
                    get_RingPosition);
            }
        }

        internal static event Delegates.get_RingPosition_BeforeArgs _beforeget_RingPosition;
        internal static event Delegates.get_RingPosition_NormalArgs _afterget_RingPosition;

        private static Vector3 get_RingPosition(Func<TouchStickControl, Vector3> orig, TouchStickControl self)
        {
            Delegates.Params_get_RingPosition @params = new()
            {
                self = self
            };
            _beforeget_RingPosition?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_RingPosition != null) retVal = _afterget_RingPosition.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_RingPosition()
        {
            if (!HookedList.Contains("set_RingPosition"))
            {
                HookedList.Add("set_RingPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "set_RingPosition"),
                    set_RingPosition);
            }
        }

        internal static event Delegates.set_RingPosition_BeforeArgs _beforeset_RingPosition;
        internal static event Delegates.set_RingPosition_NormalArgs _afterset_RingPosition;

        private static void set_RingPosition(Action<TouchStickControl, Vector3> orig, TouchStickControl self,
            Vector3 value)
        {
            Delegates.Params_set_RingPosition @params = new()
            {
                self = self, value = value
            };
            _beforeset_RingPosition?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_RingPosition != null) _afterset_RingPosition.Invoke(@params);
        }

        internal static void Hookget_KnobPosition()
        {
            if (!HookedList.Contains("get_KnobPosition"))
            {
                HookedList.Add("get_KnobPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_KnobPosition"),
                    get_KnobPosition);
            }
        }

        internal static event Delegates.get_KnobPosition_BeforeArgs _beforeget_KnobPosition;
        internal static event Delegates.get_KnobPosition_NormalArgs _afterget_KnobPosition;

        private static Vector3 get_KnobPosition(Func<TouchStickControl, Vector3> orig, TouchStickControl self)
        {
            Delegates.Params_get_KnobPosition @params = new()
            {
                self = self
            };
            _beforeget_KnobPosition?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_KnobPosition != null) retVal = _afterget_KnobPosition.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_KnobPosition()
        {
            if (!HookedList.Contains("set_KnobPosition"))
            {
                HookedList.Add("set_KnobPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "set_KnobPosition"),
                    set_KnobPosition);
            }
        }

        internal static event Delegates.set_KnobPosition_BeforeArgs _beforeset_KnobPosition;
        internal static event Delegates.set_KnobPosition_NormalArgs _afterset_KnobPosition;

        private static void set_KnobPosition(Action<TouchStickControl, Vector3> orig, TouchStickControl self,
            Vector3 value)
        {
            Delegates.Params_set_KnobPosition @params = new()
            {
                self = self, value = value
            };
            _beforeset_KnobPosition?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_KnobPosition != null) _afterset_KnobPosition.Invoke(@params);
        }

        internal static void Hookget_Anchor()
        {
            if (!HookedList.Contains("get_Anchor"))
            {
                HookedList.Add("get_Anchor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_Anchor"), get_Anchor);
            }
        }

        internal static event Delegates.get_Anchor_BeforeArgs _beforeget_Anchor;
        internal static event Delegates.get_Anchor_NormalArgs _afterget_Anchor;

        private static TouchControlAnchor get_Anchor(Func<TouchStickControl, TouchControlAnchor> orig,
            TouchStickControl self)
        {
            Delegates.Params_get_Anchor @params = new()
            {
                self = self
            };
            _beforeget_Anchor?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Anchor != null) retVal = _afterget_Anchor.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Anchor()
        {
            if (!HookedList.Contains("set_Anchor"))
            {
                HookedList.Add("set_Anchor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "set_Anchor"), set_Anchor);
            }
        }

        internal static event Delegates.set_Anchor_BeforeArgs _beforeset_Anchor;
        internal static event Delegates.set_Anchor_NormalArgs _afterset_Anchor;

        private static void set_Anchor(Action<TouchStickControl, TouchControlAnchor> orig, TouchStickControl self,
            TouchControlAnchor value)
        {
            Delegates.Params_set_Anchor @params = new()
            {
                self = self, value = value
            };
            _beforeset_Anchor?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Anchor != null) _afterset_Anchor.Invoke(@params);
        }

        internal static void Hookget_Offset()
        {
            if (!HookedList.Contains("get_Offset"))
            {
                HookedList.Add("get_Offset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_Offset"), get_Offset);
            }
        }

        internal static event Delegates.get_Offset_BeforeArgs _beforeget_Offset;
        internal static event Delegates.get_Offset_NormalArgs _afterget_Offset;

        private static Vector2 get_Offset(Func<TouchStickControl, Vector2> orig, TouchStickControl self)
        {
            Delegates.Params_get_Offset @params = new()
            {
                self = self
            };
            _beforeget_Offset?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Offset != null) retVal = _afterget_Offset.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Offset()
        {
            if (!HookedList.Contains("set_Offset"))
            {
                HookedList.Add("set_Offset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "set_Offset"), set_Offset);
            }
        }

        internal static event Delegates.set_Offset_BeforeArgs _beforeset_Offset;
        internal static event Delegates.set_Offset_NormalArgs _afterset_Offset;

        private static void set_Offset(Action<TouchStickControl, Vector2> orig, TouchStickControl self, Vector2 value)
        {
            Delegates.Params_set_Offset @params = new()
            {
                self = self, value = value
            };
            _beforeset_Offset?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Offset != null) _afterset_Offset.Invoke(@params);
        }

        internal static void Hookget_OffsetUnitType()
        {
            if (!HookedList.Contains("get_OffsetUnitType"))
            {
                HookedList.Add("get_OffsetUnitType");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_OffsetUnitType"),
                    get_OffsetUnitType);
            }
        }

        internal static event Delegates.get_OffsetUnitType_BeforeArgs _beforeget_OffsetUnitType;
        internal static event Delegates.get_OffsetUnitType_NormalArgs _afterget_OffsetUnitType;

        private static TouchUnitType get_OffsetUnitType(Func<TouchStickControl, TouchUnitType> orig,
            TouchStickControl self)
        {
            Delegates.Params_get_OffsetUnitType @params = new()
            {
                self = self
            };
            _beforeget_OffsetUnitType?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_OffsetUnitType != null) retVal = _afterget_OffsetUnitType.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_OffsetUnitType()
        {
            if (!HookedList.Contains("set_OffsetUnitType"))
            {
                HookedList.Add("set_OffsetUnitType");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "set_OffsetUnitType"),
                    set_OffsetUnitType);
            }
        }

        internal static event Delegates.set_OffsetUnitType_BeforeArgs _beforeset_OffsetUnitType;
        internal static event Delegates.set_OffsetUnitType_NormalArgs _afterset_OffsetUnitType;

        private static void set_OffsetUnitType(Action<TouchStickControl, TouchUnitType> orig, TouchStickControl self,
            TouchUnitType value)
        {
            Delegates.Params_set_OffsetUnitType @params = new()
            {
                self = self, value = value
            };
            _beforeset_OffsetUnitType?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_OffsetUnitType != null) _afterset_OffsetUnitType.Invoke(@params);
        }

        internal static void Hookget_ActiveArea()
        {
            if (!HookedList.Contains("get_ActiveArea"))
            {
                HookedList.Add("get_ActiveArea");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_ActiveArea"), get_ActiveArea);
            }
        }

        internal static event Delegates.get_ActiveArea_BeforeArgs _beforeget_ActiveArea;
        internal static event Delegates.get_ActiveArea_NormalArgs _afterget_ActiveArea;

        private static Rect get_ActiveArea(Func<TouchStickControl, Rect> orig, TouchStickControl self)
        {
            Delegates.Params_get_ActiveArea @params = new()
            {
                self = self
            };
            _beforeget_ActiveArea?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ActiveArea != null) retVal = _afterget_ActiveArea.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_ActiveArea()
        {
            if (!HookedList.Contains("set_ActiveArea"))
            {
                HookedList.Add("set_ActiveArea");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "set_ActiveArea"), set_ActiveArea);
            }
        }

        internal static event Delegates.set_ActiveArea_BeforeArgs _beforeset_ActiveArea;
        internal static event Delegates.set_ActiveArea_NormalArgs _afterset_ActiveArea;

        private static void set_ActiveArea(Action<TouchStickControl, Rect> orig, TouchStickControl self, Rect value)
        {
            Delegates.Params_set_ActiveArea @params = new()
            {
                self = self, value = value
            };
            _beforeset_ActiveArea?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ActiveArea != null) _afterset_ActiveArea.Invoke(@params);
        }

        internal static void Hookget_AreaUnitType()
        {
            if (!HookedList.Contains("get_AreaUnitType"))
            {
                HookedList.Add("get_AreaUnitType");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_AreaUnitType"),
                    get_AreaUnitType);
            }
        }

        internal static event Delegates.get_AreaUnitType_BeforeArgs _beforeget_AreaUnitType;
        internal static event Delegates.get_AreaUnitType_NormalArgs _afterget_AreaUnitType;

        private static TouchUnitType get_AreaUnitType(Func<TouchStickControl, TouchUnitType> orig,
            TouchStickControl self)
        {
            Delegates.Params_get_AreaUnitType @params = new()
            {
                self = self
            };
            _beforeget_AreaUnitType?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AreaUnitType != null) retVal = _afterget_AreaUnitType.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_AreaUnitType()
        {
            if (!HookedList.Contains("set_AreaUnitType"))
            {
                HookedList.Add("set_AreaUnitType");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "set_AreaUnitType"),
                    set_AreaUnitType);
            }
        }

        internal static event Delegates.set_AreaUnitType_BeforeArgs _beforeset_AreaUnitType;
        internal static event Delegates.set_AreaUnitType_NormalArgs _afterset_AreaUnitType;

        private static void set_AreaUnitType(Action<TouchStickControl, TouchUnitType> orig, TouchStickControl self,
            TouchUnitType value)
        {
            Delegates.Params_set_AreaUnitType @params = new()
            {
                self = self, value = value
            };
            _beforeset_AreaUnitType?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_AreaUnitType != null) _afterset_AreaUnitType.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void CommitControlState_BeforeArgs(Params_CommitControlState args);

        public delegate void CommitControlState_NormalArgs(Params_CommitControlState args);

        public delegate void ConfigureControl_BeforeArgs(Params_ConfigureControl args);

        public delegate void ConfigureControl_NormalArgs(Params_ConfigureControl args);

        public delegate void CreateControl_BeforeArgs(Params_CreateControl args);

        public delegate void CreateControl_NormalArgs(Params_CreateControl args);

        public delegate void DestroyControl_BeforeArgs(Params_DestroyControl args);

        public delegate void DestroyControl_NormalArgs(Params_DestroyControl args);

        public delegate void DrawGizmos_BeforeArgs(Params_DrawGizmos args);

        public delegate void DrawGizmos_NormalArgs(Params_DrawGizmos args);

        public delegate void get_ActiveArea_BeforeArgs(Params_get_ActiveArea args);

        public delegate Rect get_ActiveArea_NormalArgs(Params_get_ActiveArea args);

        public delegate void get_Anchor_BeforeArgs(Params_get_Anchor args);

        public delegate TouchControlAnchor get_Anchor_NormalArgs(Params_get_Anchor args);

        public delegate void get_AreaUnitType_BeforeArgs(Params_get_AreaUnitType args);

        public delegate TouchUnitType get_AreaUnitType_NormalArgs(Params_get_AreaUnitType args);

        public delegate void get_IsActive_BeforeArgs(Params_get_IsActive args);

        public delegate bool get_IsActive_NormalArgs(Params_get_IsActive args);

        public delegate void get_IsNotActive_BeforeArgs(Params_get_IsNotActive args);

        public delegate bool get_IsNotActive_NormalArgs(Params_get_IsNotActive args);

        public delegate void get_KnobPosition_BeforeArgs(Params_get_KnobPosition args);

        public delegate Vector3 get_KnobPosition_NormalArgs(Params_get_KnobPosition args);

        public delegate void get_Offset_BeforeArgs(Params_get_Offset args);

        public delegate Vector2 get_Offset_NormalArgs(Params_get_Offset args);

        public delegate void get_OffsetUnitType_BeforeArgs(Params_get_OffsetUnitType args);

        public delegate TouchUnitType get_OffsetUnitType_NormalArgs(Params_get_OffsetUnitType args);

        public delegate void get_RingPosition_BeforeArgs(Params_get_RingPosition args);

        public delegate Vector3 get_RingPosition_NormalArgs(Params_get_RingPosition args);

        public delegate void set_ActiveArea_BeforeArgs(Params_set_ActiveArea args);

        public delegate void set_ActiveArea_NormalArgs(Params_set_ActiveArea args);

        public delegate void set_Anchor_BeforeArgs(Params_set_Anchor args);

        public delegate void set_Anchor_NormalArgs(Params_set_Anchor args);

        public delegate void set_AreaUnitType_BeforeArgs(Params_set_AreaUnitType args);

        public delegate void set_AreaUnitType_NormalArgs(Params_set_AreaUnitType args);

        public delegate void set_KnobPosition_BeforeArgs(Params_set_KnobPosition args);

        public delegate void set_KnobPosition_NormalArgs(Params_set_KnobPosition args);

        public delegate void set_Offset_BeforeArgs(Params_set_Offset args);

        public delegate void set_Offset_NormalArgs(Params_set_Offset args);

        public delegate void set_OffsetUnitType_BeforeArgs(Params_set_OffsetUnitType args);

        public delegate void set_OffsetUnitType_NormalArgs(Params_set_OffsetUnitType args);

        public delegate void set_RingPosition_BeforeArgs(Params_set_RingPosition args);

        public delegate void set_RingPosition_NormalArgs(Params_set_RingPosition args);

        public delegate void SubmitControlState_BeforeArgs(Params_SubmitControlState args);

        public delegate void SubmitControlState_NormalArgs(Params_SubmitControlState args);

        public delegate void TouchBegan_BeforeArgs(Params_TouchBegan args);

        public delegate void TouchBegan_NormalArgs(Params_TouchBegan args);

        public delegate void TouchEnded_BeforeArgs(Params_TouchEnded args);

        public delegate void TouchEnded_NormalArgs(Params_TouchEnded args);

        public delegate void TouchMoved_BeforeArgs(Params_TouchMoved args);

        public delegate void TouchMoved_NormalArgs(Params_TouchMoved args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_CreateControl
        {
            public TouchStickControl self;
        }

        public sealed class Params_DestroyControl
        {
            public TouchStickControl self;
        }

        public sealed class Params_ConfigureControl
        {
            public TouchStickControl self;
        }

        public sealed class Params_DrawGizmos
        {
            public TouchStickControl self;
        }

        public sealed class Params_Update
        {
            public TouchStickControl self;
        }

        public sealed class Params_SubmitControlState
        {
            public float deltaTime;
            public TouchStickControl self;
            public ulong updateTick;
        }

        public sealed class Params_CommitControlState
        {
            public float deltaTime;
            public TouchStickControl self;
            public ulong updateTick;
        }

        public sealed class Params_TouchBegan
        {
            public TouchStickControl self;
            public Touch touch;
        }

        public sealed class Params_TouchMoved
        {
            public TouchStickControl self;
            public Touch touch;
        }

        public sealed class Params_TouchEnded
        {
            public TouchStickControl self;
            public Touch touch;
        }

        public sealed class Params_get_IsActive
        {
            public TouchStickControl self;
        }

        public sealed class Params_get_IsNotActive
        {
            public TouchStickControl self;
        }

        public sealed class Params_get_RingPosition
        {
            public TouchStickControl self;
        }

        public sealed class Params_set_RingPosition
        {
            public TouchStickControl self;
            public Vector3 value;
        }

        public sealed class Params_get_KnobPosition
        {
            public TouchStickControl self;
        }

        public sealed class Params_set_KnobPosition
        {
            public TouchStickControl self;
            public Vector3 value;
        }

        public sealed class Params_get_Anchor
        {
            public TouchStickControl self;
        }

        public sealed class Params_set_Anchor
        {
            public TouchStickControl self;
            public TouchControlAnchor value;
        }

        public sealed class Params_get_Offset
        {
            public TouchStickControl self;
        }

        public sealed class Params_set_Offset
        {
            public TouchStickControl self;
            public Vector2 value;
        }

        public sealed class Params_get_OffsetUnitType
        {
            public TouchStickControl self;
        }

        public sealed class Params_set_OffsetUnitType
        {
            public TouchStickControl self;
            public TouchUnitType value;
        }

        public sealed class Params_get_ActiveArea
        {
            public TouchStickControl self;
        }

        public sealed class Params_set_ActiveArea
        {
            public TouchStickControl self;
            public Rect value;
        }

        public sealed class Params_get_AreaUnitType
        {
            public TouchStickControl self;
        }

        public sealed class Params_set_AreaUnitType
        {
            public TouchStickControl self;
            public TouchUnitType value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.CreateControl_BeforeArgs CreateControl
        {
            add
            {
                HookHandler._beforeCreateControl += value;
                HookHandler.HookCreateControl();
            }
            remove => HookHandler._beforeCreateControl -= value;
        }

        public static event Delegates.DestroyControl_BeforeArgs DestroyControl
        {
            add
            {
                HookHandler._beforeDestroyControl += value;
                HookHandler.HookDestroyControl();
            }
            remove => HookHandler._beforeDestroyControl -= value;
        }

        public static event Delegates.ConfigureControl_BeforeArgs ConfigureControl
        {
            add
            {
                HookHandler._beforeConfigureControl += value;
                HookHandler.HookConfigureControl();
            }
            remove => HookHandler._beforeConfigureControl -= value;
        }

        public static event Delegates.DrawGizmos_BeforeArgs DrawGizmos
        {
            add
            {
                HookHandler._beforeDrawGizmos += value;
                HookHandler.HookDrawGizmos();
            }
            remove => HookHandler._beforeDrawGizmos -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.SubmitControlState_BeforeArgs SubmitControlState
        {
            add
            {
                HookHandler._beforeSubmitControlState += value;
                HookHandler.HookSubmitControlState();
            }
            remove => HookHandler._beforeSubmitControlState -= value;
        }

        public static event Delegates.CommitControlState_BeforeArgs CommitControlState
        {
            add
            {
                HookHandler._beforeCommitControlState += value;
                HookHandler.HookCommitControlState();
            }
            remove => HookHandler._beforeCommitControlState -= value;
        }

        public static event Delegates.TouchBegan_BeforeArgs TouchBegan
        {
            add
            {
                HookHandler._beforeTouchBegan += value;
                HookHandler.HookTouchBegan();
            }
            remove => HookHandler._beforeTouchBegan -= value;
        }

        public static event Delegates.TouchMoved_BeforeArgs TouchMoved
        {
            add
            {
                HookHandler._beforeTouchMoved += value;
                HookHandler.HookTouchMoved();
            }
            remove => HookHandler._beforeTouchMoved -= value;
        }

        public static event Delegates.TouchEnded_BeforeArgs TouchEnded
        {
            add
            {
                HookHandler._beforeTouchEnded += value;
                HookHandler.HookTouchEnded();
            }
            remove => HookHandler._beforeTouchEnded -= value;
        }

        public static event Delegates.get_IsActive_BeforeArgs get_IsActive
        {
            add
            {
                HookHandler._beforeget_IsActive += value;
                HookHandler.Hookget_IsActive();
            }
            remove => HookHandler._beforeget_IsActive -= value;
        }

        public static event Delegates.get_IsNotActive_BeforeArgs get_IsNotActive
        {
            add
            {
                HookHandler._beforeget_IsNotActive += value;
                HookHandler.Hookget_IsNotActive();
            }
            remove => HookHandler._beforeget_IsNotActive -= value;
        }

        public static event Delegates.get_RingPosition_BeforeArgs get_RingPosition
        {
            add
            {
                HookHandler._beforeget_RingPosition += value;
                HookHandler.Hookget_RingPosition();
            }
            remove => HookHandler._beforeget_RingPosition -= value;
        }

        public static event Delegates.set_RingPosition_BeforeArgs set_RingPosition
        {
            add
            {
                HookHandler._beforeset_RingPosition += value;
                HookHandler.Hookset_RingPosition();
            }
            remove => HookHandler._beforeset_RingPosition -= value;
        }

        public static event Delegates.get_KnobPosition_BeforeArgs get_KnobPosition
        {
            add
            {
                HookHandler._beforeget_KnobPosition += value;
                HookHandler.Hookget_KnobPosition();
            }
            remove => HookHandler._beforeget_KnobPosition -= value;
        }

        public static event Delegates.set_KnobPosition_BeforeArgs set_KnobPosition
        {
            add
            {
                HookHandler._beforeset_KnobPosition += value;
                HookHandler.Hookset_KnobPosition();
            }
            remove => HookHandler._beforeset_KnobPosition -= value;
        }

        public static event Delegates.get_Anchor_BeforeArgs get_Anchor
        {
            add
            {
                HookHandler._beforeget_Anchor += value;
                HookHandler.Hookget_Anchor();
            }
            remove => HookHandler._beforeget_Anchor -= value;
        }

        public static event Delegates.set_Anchor_BeforeArgs set_Anchor
        {
            add
            {
                HookHandler._beforeset_Anchor += value;
                HookHandler.Hookset_Anchor();
            }
            remove => HookHandler._beforeset_Anchor -= value;
        }

        public static event Delegates.get_Offset_BeforeArgs get_Offset
        {
            add
            {
                HookHandler._beforeget_Offset += value;
                HookHandler.Hookget_Offset();
            }
            remove => HookHandler._beforeget_Offset -= value;
        }

        public static event Delegates.set_Offset_BeforeArgs set_Offset
        {
            add
            {
                HookHandler._beforeset_Offset += value;
                HookHandler.Hookset_Offset();
            }
            remove => HookHandler._beforeset_Offset -= value;
        }

        public static event Delegates.get_OffsetUnitType_BeforeArgs get_OffsetUnitType
        {
            add
            {
                HookHandler._beforeget_OffsetUnitType += value;
                HookHandler.Hookget_OffsetUnitType();
            }
            remove => HookHandler._beforeget_OffsetUnitType -= value;
        }

        public static event Delegates.set_OffsetUnitType_BeforeArgs set_OffsetUnitType
        {
            add
            {
                HookHandler._beforeset_OffsetUnitType += value;
                HookHandler.Hookset_OffsetUnitType();
            }
            remove => HookHandler._beforeset_OffsetUnitType -= value;
        }

        public static event Delegates.get_ActiveArea_BeforeArgs get_ActiveArea
        {
            add
            {
                HookHandler._beforeget_ActiveArea += value;
                HookHandler.Hookget_ActiveArea();
            }
            remove => HookHandler._beforeget_ActiveArea -= value;
        }

        public static event Delegates.set_ActiveArea_BeforeArgs set_ActiveArea
        {
            add
            {
                HookHandler._beforeset_ActiveArea += value;
                HookHandler.Hookset_ActiveArea();
            }
            remove => HookHandler._beforeset_ActiveArea -= value;
        }

        public static event Delegates.get_AreaUnitType_BeforeArgs get_AreaUnitType
        {
            add
            {
                HookHandler._beforeget_AreaUnitType += value;
                HookHandler.Hookget_AreaUnitType();
            }
            remove => HookHandler._beforeget_AreaUnitType -= value;
        }

        public static event Delegates.set_AreaUnitType_BeforeArgs set_AreaUnitType
        {
            add
            {
                HookHandler._beforeset_AreaUnitType += value;
                HookHandler.Hookset_AreaUnitType();
            }
            remove => HookHandler._beforeset_AreaUnitType -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.CreateControl_NormalArgs CreateControl
        {
            add
            {
                HookHandler._afterCreateControl += value;
                HookHandler.HookCreateControl();
            }
            remove => HookHandler._afterCreateControl -= value;
        }

        public static event Delegates.DestroyControl_NormalArgs DestroyControl
        {
            add
            {
                HookHandler._afterDestroyControl += value;
                HookHandler.HookDestroyControl();
            }
            remove => HookHandler._afterDestroyControl -= value;
        }

        public static event Delegates.ConfigureControl_NormalArgs ConfigureControl
        {
            add
            {
                HookHandler._afterConfigureControl += value;
                HookHandler.HookConfigureControl();
            }
            remove => HookHandler._afterConfigureControl -= value;
        }

        public static event Delegates.DrawGizmos_NormalArgs DrawGizmos
        {
            add
            {
                HookHandler._afterDrawGizmos += value;
                HookHandler.HookDrawGizmos();
            }
            remove => HookHandler._afterDrawGizmos -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.SubmitControlState_NormalArgs SubmitControlState
        {
            add
            {
                HookHandler._afterSubmitControlState += value;
                HookHandler.HookSubmitControlState();
            }
            remove => HookHandler._afterSubmitControlState -= value;
        }

        public static event Delegates.CommitControlState_NormalArgs CommitControlState
        {
            add
            {
                HookHandler._afterCommitControlState += value;
                HookHandler.HookCommitControlState();
            }
            remove => HookHandler._afterCommitControlState -= value;
        }

        public static event Delegates.TouchBegan_NormalArgs TouchBegan
        {
            add
            {
                HookHandler._afterTouchBegan += value;
                HookHandler.HookTouchBegan();
            }
            remove => HookHandler._afterTouchBegan -= value;
        }

        public static event Delegates.TouchMoved_NormalArgs TouchMoved
        {
            add
            {
                HookHandler._afterTouchMoved += value;
                HookHandler.HookTouchMoved();
            }
            remove => HookHandler._afterTouchMoved -= value;
        }

        public static event Delegates.TouchEnded_NormalArgs TouchEnded
        {
            add
            {
                HookHandler._afterTouchEnded += value;
                HookHandler.HookTouchEnded();
            }
            remove => HookHandler._afterTouchEnded -= value;
        }

        public static event Delegates.get_IsActive_NormalArgs get_IsActive
        {
            add
            {
                HookHandler._afterget_IsActive += value;
                HookHandler.Hookget_IsActive();
            }
            remove => HookHandler._afterget_IsActive -= value;
        }

        public static event Delegates.get_IsNotActive_NormalArgs get_IsNotActive
        {
            add
            {
                HookHandler._afterget_IsNotActive += value;
                HookHandler.Hookget_IsNotActive();
            }
            remove => HookHandler._afterget_IsNotActive -= value;
        }

        public static event Delegates.get_RingPosition_NormalArgs get_RingPosition
        {
            add
            {
                HookHandler._afterget_RingPosition += value;
                HookHandler.Hookget_RingPosition();
            }
            remove => HookHandler._afterget_RingPosition -= value;
        }

        public static event Delegates.set_RingPosition_NormalArgs set_RingPosition
        {
            add
            {
                HookHandler._afterset_RingPosition += value;
                HookHandler.Hookset_RingPosition();
            }
            remove => HookHandler._afterset_RingPosition -= value;
        }

        public static event Delegates.get_KnobPosition_NormalArgs get_KnobPosition
        {
            add
            {
                HookHandler._afterget_KnobPosition += value;
                HookHandler.Hookget_KnobPosition();
            }
            remove => HookHandler._afterget_KnobPosition -= value;
        }

        public static event Delegates.set_KnobPosition_NormalArgs set_KnobPosition
        {
            add
            {
                HookHandler._afterset_KnobPosition += value;
                HookHandler.Hookset_KnobPosition();
            }
            remove => HookHandler._afterset_KnobPosition -= value;
        }

        public static event Delegates.get_Anchor_NormalArgs get_Anchor
        {
            add
            {
                HookHandler._afterget_Anchor += value;
                HookHandler.Hookget_Anchor();
            }
            remove => HookHandler._afterget_Anchor -= value;
        }

        public static event Delegates.set_Anchor_NormalArgs set_Anchor
        {
            add
            {
                HookHandler._afterset_Anchor += value;
                HookHandler.Hookset_Anchor();
            }
            remove => HookHandler._afterset_Anchor -= value;
        }

        public static event Delegates.get_Offset_NormalArgs get_Offset
        {
            add
            {
                HookHandler._afterget_Offset += value;
                HookHandler.Hookget_Offset();
            }
            remove => HookHandler._afterget_Offset -= value;
        }

        public static event Delegates.set_Offset_NormalArgs set_Offset
        {
            add
            {
                HookHandler._afterset_Offset += value;
                HookHandler.Hookset_Offset();
            }
            remove => HookHandler._afterset_Offset -= value;
        }

        public static event Delegates.get_OffsetUnitType_NormalArgs get_OffsetUnitType
        {
            add
            {
                HookHandler._afterget_OffsetUnitType += value;
                HookHandler.Hookget_OffsetUnitType();
            }
            remove => HookHandler._afterget_OffsetUnitType -= value;
        }

        public static event Delegates.set_OffsetUnitType_NormalArgs set_OffsetUnitType
        {
            add
            {
                HookHandler._afterset_OffsetUnitType += value;
                HookHandler.Hookset_OffsetUnitType();
            }
            remove => HookHandler._afterset_OffsetUnitType -= value;
        }

        public static event Delegates.get_ActiveArea_NormalArgs get_ActiveArea
        {
            add
            {
                HookHandler._afterget_ActiveArea += value;
                HookHandler.Hookget_ActiveArea();
            }
            remove => HookHandler._afterget_ActiveArea -= value;
        }

        public static event Delegates.set_ActiveArea_NormalArgs set_ActiveArea
        {
            add
            {
                HookHandler._afterset_ActiveArea += value;
                HookHandler.Hookset_ActiveArea();
            }
            remove => HookHandler._afterset_ActiveArea -= value;
        }

        public static event Delegates.get_AreaUnitType_NormalArgs get_AreaUnitType
        {
            add
            {
                HookHandler._afterget_AreaUnitType += value;
                HookHandler.Hookget_AreaUnitType();
            }
            remove => HookHandler._afterget_AreaUnitType -= value;
        }

        public static event Delegates.set_AreaUnitType_NormalArgs set_AreaUnitType
        {
            add
            {
                HookHandler._afterset_AreaUnitType += value;
                HookHandler.Hookset_AreaUnitType();
            }
            remove => HookHandler._afterset_AreaUnitType -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.CreateControl_NormalArgs CreateControl
        {
            add => HookEndpointManager.Add<Delegates.CreateControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "CreateControl"), value);
            remove => HookEndpointManager.Remove<Delegates.CreateControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "CreateControl"), value);
        }

        public static event Delegates.DestroyControl_NormalArgs DestroyControl
        {
            add => HookEndpointManager.Add<Delegates.DestroyControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "DestroyControl"), value);
            remove => HookEndpointManager.Remove<Delegates.DestroyControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "DestroyControl"), value);
        }

        public static event Delegates.ConfigureControl_NormalArgs ConfigureControl
        {
            add => HookEndpointManager.Add<Delegates.ConfigureControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "ConfigureControl"), value);
            remove => HookEndpointManager.Remove<Delegates.ConfigureControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "ConfigureControl"), value);
        }

        public static event Delegates.DrawGizmos_NormalArgs DrawGizmos
        {
            add => HookEndpointManager.Add<Delegates.DrawGizmos_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "DrawGizmos"), value);
            remove => HookEndpointManager.Remove<Delegates.DrawGizmos_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "DrawGizmos"), value);
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add => HookEndpointManager.Add<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "Update"), value);
            remove => HookEndpointManager.Remove<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "Update"), value);
        }

        public static event Delegates.SubmitControlState_NormalArgs SubmitControlState
        {
            add => HookEndpointManager.Add<Delegates.SubmitControlState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "SubmitControlState"), value);
            remove => HookEndpointManager.Remove<Delegates.SubmitControlState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "SubmitControlState"), value);
        }

        public static event Delegates.CommitControlState_NormalArgs CommitControlState
        {
            add => HookEndpointManager.Add<Delegates.CommitControlState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "CommitControlState"), value);
            remove => HookEndpointManager.Remove<Delegates.CommitControlState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "CommitControlState"), value);
        }

        public static event Delegates.TouchBegan_NormalArgs TouchBegan
        {
            add => HookEndpointManager.Add<Delegates.TouchBegan_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "TouchBegan"), value);
            remove => HookEndpointManager.Remove<Delegates.TouchBegan_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "TouchBegan"), value);
        }

        public static event Delegates.TouchMoved_NormalArgs TouchMoved
        {
            add => HookEndpointManager.Add<Delegates.TouchMoved_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "TouchMoved"), value);
            remove => HookEndpointManager.Remove<Delegates.TouchMoved_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "TouchMoved"), value);
        }

        public static event Delegates.TouchEnded_NormalArgs TouchEnded
        {
            add => HookEndpointManager.Add<Delegates.TouchEnded_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "TouchEnded"), value);
            remove => HookEndpointManager.Remove<Delegates.TouchEnded_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "TouchEnded"), value);
        }

        public static event Delegates.get_IsActive_NormalArgs get_IsActive
        {
            add => HookEndpointManager.Add<Delegates.get_IsActive_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_IsActive"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsActive_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_IsActive"), value);
        }

        public static event Delegates.get_IsNotActive_NormalArgs get_IsNotActive
        {
            add => HookEndpointManager.Add<Delegates.get_IsNotActive_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_IsNotActive"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsNotActive_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_IsNotActive"), value);
        }

        public static event Delegates.get_RingPosition_NormalArgs get_RingPosition
        {
            add => HookEndpointManager.Add<Delegates.get_RingPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_RingPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.get_RingPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_RingPosition"), value);
        }

        public static event Delegates.set_RingPosition_NormalArgs set_RingPosition
        {
            add => HookEndpointManager.Add<Delegates.set_RingPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "set_RingPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.set_RingPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "set_RingPosition"), value);
        }

        public static event Delegates.get_KnobPosition_NormalArgs get_KnobPosition
        {
            add => HookEndpointManager.Add<Delegates.get_KnobPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_KnobPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.get_KnobPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_KnobPosition"), value);
        }

        public static event Delegates.set_KnobPosition_NormalArgs set_KnobPosition
        {
            add => HookEndpointManager.Add<Delegates.set_KnobPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "set_KnobPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.set_KnobPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "set_KnobPosition"), value);
        }

        public static event Delegates.get_Anchor_NormalArgs get_Anchor
        {
            add => HookEndpointManager.Add<Delegates.get_Anchor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_Anchor"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Anchor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_Anchor"), value);
        }

        public static event Delegates.set_Anchor_NormalArgs set_Anchor
        {
            add => HookEndpointManager.Add<Delegates.set_Anchor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "set_Anchor"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Anchor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "set_Anchor"), value);
        }

        public static event Delegates.get_Offset_NormalArgs get_Offset
        {
            add => HookEndpointManager.Add<Delegates.get_Offset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_Offset"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Offset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_Offset"), value);
        }

        public static event Delegates.set_Offset_NormalArgs set_Offset
        {
            add => HookEndpointManager.Add<Delegates.set_Offset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "set_Offset"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Offset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "set_Offset"), value);
        }

        public static event Delegates.get_OffsetUnitType_NormalArgs get_OffsetUnitType
        {
            add => HookEndpointManager.Add<Delegates.get_OffsetUnitType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_OffsetUnitType"), value);
            remove => HookEndpointManager.Remove<Delegates.get_OffsetUnitType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_OffsetUnitType"), value);
        }

        public static event Delegates.set_OffsetUnitType_NormalArgs set_OffsetUnitType
        {
            add => HookEndpointManager.Add<Delegates.set_OffsetUnitType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "set_OffsetUnitType"), value);
            remove => HookEndpointManager.Remove<Delegates.set_OffsetUnitType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "set_OffsetUnitType"), value);
        }

        public static event Delegates.get_ActiveArea_NormalArgs get_ActiveArea
        {
            add => HookEndpointManager.Add<Delegates.get_ActiveArea_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_ActiveArea"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ActiveArea_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_ActiveArea"), value);
        }

        public static event Delegates.set_ActiveArea_NormalArgs set_ActiveArea
        {
            add => HookEndpointManager.Add<Delegates.set_ActiveArea_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "set_ActiveArea"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ActiveArea_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "set_ActiveArea"), value);
        }

        public static event Delegates.get_AreaUnitType_NormalArgs get_AreaUnitType
        {
            add => HookEndpointManager.Add<Delegates.get_AreaUnitType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_AreaUnitType"), value);
            remove => HookEndpointManager.Remove<Delegates.get_AreaUnitType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "get_AreaUnitType"), value);
        }

        public static event Delegates.set_AreaUnitType_NormalArgs set_AreaUnitType
        {
            add => HookEndpointManager.Add<Delegates.set_AreaUnitType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "set_AreaUnitType"), value);
            remove => HookEndpointManager.Remove<Delegates.set_AreaUnitType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchStickControl), "set_AreaUnitType"), value);
        }
    }
}