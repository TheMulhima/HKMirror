namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for SpriteTweenColorNeutral class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSpriteTweenColorNeutral
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookColorReturnNeutral()
        {
            if (!HookedList.Contains("ColorReturnNeutral"))
            {
                HookedList.Add("ColorReturnNeutral");
                On.SpriteTweenColorNeutral.ColorReturnNeutral += ColorReturnNeutral;
            }
        }

        internal static event Delegates.ColorReturnNeutral_BeforeArgs _beforeColorReturnNeutral;
        internal static event Delegates.ColorReturnNeutral_NormalArgs _afterColorReturnNeutral;

        private static void ColorReturnNeutral(On.SpriteTweenColorNeutral.orig_ColorReturnNeutral orig,
            SpriteTweenColorNeutral self)
        {
            Delegates.Params_ColorReturnNeutral @params = new()
            {
                self = self
            };
            _beforeColorReturnNeutral?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterColorReturnNeutral != null) _afterColorReturnNeutral.Invoke(@params);
        }

        internal static void HookupdateSpriteColor()
        {
            if (!HookedList.Contains("updateSpriteColor"))
            {
                HookedList.Add("updateSpriteColor");
                On.SpriteTweenColorNeutral.updateSpriteColor += updateSpriteColor;
            }
        }

        internal static event Delegates.updateSpriteColor_BeforeArgs _beforeupdateSpriteColor;
        internal static event Delegates.updateSpriteColor_NormalArgs _afterupdateSpriteColor;

        private static void updateSpriteColor(On.SpriteTweenColorNeutral.orig_updateSpriteColor orig,
            SpriteTweenColorNeutral self, Color color)
        {
            Delegates.Params_updateSpriteColor @params = new()
            {
                self = self, color = color
            };
            _beforeupdateSpriteColor?.Invoke(@params);
            self = @params.self;
            color = @params.color;
            orig(self, color);
            if (_afterupdateSpriteColor != null) _afterupdateSpriteColor.Invoke(@params);
        }

        internal static void HookonEnable()
        {
            if (!HookedList.Contains("onEnable"))
            {
                HookedList.Add("onEnable");
                On.SpriteTweenColorNeutral.onEnable += onEnable;
            }
        }

        internal static event Delegates.onEnable_BeforeArgs _beforeonEnable;
        internal static event Delegates.onEnable_NormalArgs _afteronEnable;

        private static void onEnable(On.SpriteTweenColorNeutral.orig_onEnable orig, SpriteTweenColorNeutral self)
        {
            Delegates.Params_onEnable @params = new()
            {
                self = self
            };
            _beforeonEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afteronEnable != null) _afteronEnable.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ColorReturnNeutral_BeforeArgs(Params_ColorReturnNeutral args);

        public delegate void ColorReturnNeutral_NormalArgs(Params_ColorReturnNeutral args);

        public delegate void onEnable_BeforeArgs(Params_onEnable args);

        public delegate void onEnable_NormalArgs(Params_onEnable args);

        public delegate void updateSpriteColor_BeforeArgs(Params_updateSpriteColor args);

        public delegate void updateSpriteColor_NormalArgs(Params_updateSpriteColor args);

        public sealed class Params_ColorReturnNeutral
        {
            public SpriteTweenColorNeutral self;
        }

        public sealed class Params_updateSpriteColor
        {
            public Color color;
            public SpriteTweenColorNeutral self;
        }

        public sealed class Params_onEnable
        {
            public SpriteTweenColorNeutral self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.ColorReturnNeutral_BeforeArgs ColorReturnNeutral
        {
            add
            {
                HookHandler._beforeColorReturnNeutral += value;
                HookHandler.HookColorReturnNeutral();
            }
            remove => HookHandler._beforeColorReturnNeutral -= value;
        }

        public static event Delegates.updateSpriteColor_BeforeArgs updateSpriteColor
        {
            add
            {
                HookHandler._beforeupdateSpriteColor += value;
                HookHandler.HookupdateSpriteColor();
            }
            remove => HookHandler._beforeupdateSpriteColor -= value;
        }

        public static event Delegates.onEnable_BeforeArgs onEnable
        {
            add
            {
                HookHandler._beforeonEnable += value;
                HookHandler.HookonEnable();
            }
            remove => HookHandler._beforeonEnable -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.ColorReturnNeutral_NormalArgs ColorReturnNeutral
        {
            add
            {
                HookHandler._afterColorReturnNeutral += value;
                HookHandler.HookColorReturnNeutral();
            }
            remove => HookHandler._afterColorReturnNeutral -= value;
        }

        public static event Delegates.updateSpriteColor_NormalArgs updateSpriteColor
        {
            add
            {
                HookHandler._afterupdateSpriteColor += value;
                HookHandler.HookupdateSpriteColor();
            }
            remove => HookHandler._afterupdateSpriteColor -= value;
        }

        public static event Delegates.onEnable_NormalArgs onEnable
        {
            add
            {
                HookHandler._afteronEnable += value;
                HookHandler.HookonEnable();
            }
            remove => HookHandler._afteronEnable -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.SpriteTweenColorNeutral.hook_ColorReturnNeutral ColorReturnNeutral
        {
            add => On.SpriteTweenColorNeutral.ColorReturnNeutral += value;
            remove => On.SpriteTweenColorNeutral.ColorReturnNeutral -= value;
        }

        public static event On.SpriteTweenColorNeutral.hook_updateSpriteColor updateSpriteColor
        {
            add => On.SpriteTweenColorNeutral.updateSpriteColor += value;
            remove => On.SpriteTweenColorNeutral.updateSpriteColor -= value;
        }

        public static event On.SpriteTweenColorNeutral.hook_onEnable onEnable
        {
            add => On.SpriteTweenColorNeutral.onEnable += value;
            remove => On.SpriteTweenColorNeutral.onEnable -= value;
        }
    }
}