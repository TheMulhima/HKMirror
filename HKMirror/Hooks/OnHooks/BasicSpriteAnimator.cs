using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for BasicSpriteAnimator class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBasicSpriteAnimator
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Length()
        {
            if (!HookedList.Contains("get_Length"))
            {
                HookedList.Add("get_Length");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BasicSpriteAnimator), "get_Length"), get_Length);
            }
        }

        internal static event Delegates.get_Length_BeforeArgs _beforeget_Length;
        internal static event Delegates.get_Length_NormalArgs _afterget_Length;

        private static float get_Length(Func<BasicSpriteAnimator, float> orig, BasicSpriteAnimator self)
        {
            Delegates.Params_get_Length @params = new()
            {
                self = self
            };
            _beforeget_Length?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Length != null) retVal = _afterget_Length.Invoke(@params);
            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.BasicSpriteAnimator.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.BasicSpriteAnimator.orig_Awake orig, BasicSpriteAnimator self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.BasicSpriteAnimator.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.BasicSpriteAnimator.orig_OnEnable orig, BasicSpriteAnimator self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.BasicSpriteAnimator.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.BasicSpriteAnimator.orig_OnDisable orig, BasicSpriteAnimator self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookAnimate()
        {
            if (!HookedList.Contains("Animate"))
            {
                HookedList.Add("Animate");
                On.BasicSpriteAnimator.Animate += Animate;
            }
        }

        internal static event Delegates.Animate_BeforeArgs _beforeAnimate;

        private static IEnumerator Animate(On.BasicSpriteAnimator.orig_Animate orig, BasicSpriteAnimator self)
        {
            Delegates.Params_Animate @params = new()
            {
                self = self
            };
            _beforeAnimate?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Animate_BeforeArgs(Params_Animate args);

        public delegate IEnumerator Animate_NormalArgs(Params_Animate args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void get_Length_BeforeArgs(Params_get_Length args);

        public delegate float get_Length_NormalArgs(Params_get_Length args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public sealed class Params_get_Length
        {
            public BasicSpriteAnimator self;
        }

        public sealed class Params_Awake
        {
            public BasicSpriteAnimator self;
        }

        public sealed class Params_OnEnable
        {
            public BasicSpriteAnimator self;
        }

        public sealed class Params_OnDisable
        {
            public BasicSpriteAnimator self;
        }

        public sealed class Params_Animate
        {
            public BasicSpriteAnimator self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Length_BeforeArgs get_Length
        {
            add
            {
                HookHandler._beforeget_Length += value;
                HookHandler.Hookget_Length();
            }
            remove => HookHandler._beforeget_Length -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.Animate_BeforeArgs Animate
        {
            add
            {
                HookHandler._beforeAnimate += value;
                HookHandler.HookAnimate();
            }
            remove => HookHandler._beforeAnimate -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Length_NormalArgs get_Length
        {
            add
            {
                HookHandler._afterget_Length += value;
                HookHandler.Hookget_Length();
            }
            remove => HookHandler._afterget_Length -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Length_NormalArgs get_Length
        {
            add => HookEndpointManager.Add<Delegates.get_Length_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BasicSpriteAnimator), "get_Length"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Length_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BasicSpriteAnimator), "get_Length"), value);
        }

        public static event On.BasicSpriteAnimator.hook_Awake Awake
        {
            add => On.BasicSpriteAnimator.Awake += value;
            remove => On.BasicSpriteAnimator.Awake -= value;
        }

        public static event On.BasicSpriteAnimator.hook_OnEnable OnEnable
        {
            add => On.BasicSpriteAnimator.OnEnable += value;
            remove => On.BasicSpriteAnimator.OnEnable -= value;
        }

        public static event On.BasicSpriteAnimator.hook_OnDisable OnDisable
        {
            add => On.BasicSpriteAnimator.OnDisable += value;
            remove => On.BasicSpriteAnimator.OnDisable -= value;
        }

        public static event On.BasicSpriteAnimator.hook_Animate Animate
        {
            add => On.BasicSpriteAnimator.Animate += value;
            remove => On.BasicSpriteAnimator.Animate -= value;
        }
    }
}