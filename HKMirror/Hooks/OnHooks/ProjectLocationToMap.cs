using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ProjectLocationToMap class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnProjectLocationToMap
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ProjectLocationToMap), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<ProjectLocationToMap> orig, ProjectLocationToMap self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ProjectLocationToMap), "OnEnter"), OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_NormalArgs _afterOnEnter;

        private static void OnEnter(Action<ProjectLocationToMap> orig, ProjectLocationToMap self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            _beforeOnEnter?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnter != null) _afterOnEnter.Invoke(@params);
        }

        internal static void HookOnUpdate()
        {
            if (!HookedList.Contains("OnUpdate"))
            {
                HookedList.Add("OnUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ProjectLocationToMap), "OnUpdate"), OnUpdate);
            }
        }

        internal static event Delegates.OnUpdate_BeforeArgs _beforeOnUpdate;
        internal static event Delegates.OnUpdate_NormalArgs _afterOnUpdate;

        private static void OnUpdate(Action<ProjectLocationToMap> orig, ProjectLocationToMap self)
        {
            Delegates.Params_OnUpdate @params = new()
            {
                self = self
            };
            _beforeOnUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnUpdate != null) _afterOnUpdate.Invoke(@params);
        }

        internal static void HookDoProjectGPSLocation()
        {
            if (!HookedList.Contains("DoProjectGPSLocation"))
            {
                HookedList.Add("DoProjectGPSLocation");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ProjectLocationToMap), "DoProjectGPSLocation"),
                    DoProjectGPSLocation);
            }
        }

        internal static event Delegates.DoProjectGPSLocation_BeforeArgs _beforeDoProjectGPSLocation;
        internal static event Delegates.DoProjectGPSLocation_NormalArgs _afterDoProjectGPSLocation;

        private static void DoProjectGPSLocation(Action<ProjectLocationToMap> orig, ProjectLocationToMap self)
        {
            Delegates.Params_DoProjectGPSLocation @params = new()
            {
                self = self
            };
            _beforeDoProjectGPSLocation?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoProjectGPSLocation != null) _afterDoProjectGPSLocation.Invoke(@params);
        }

        internal static void HookDoEquidistantCylindrical()
        {
            if (!HookedList.Contains("DoEquidistantCylindrical"))
            {
                HookedList.Add("DoEquidistantCylindrical");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ProjectLocationToMap), "DoEquidistantCylindrical"),
                    DoEquidistantCylindrical);
            }
        }

        internal static event Delegates.DoEquidistantCylindrical_BeforeArgs _beforeDoEquidistantCylindrical;
        internal static event Delegates.DoEquidistantCylindrical_NormalArgs _afterDoEquidistantCylindrical;

        private static void DoEquidistantCylindrical(Action<ProjectLocationToMap> orig, ProjectLocationToMap self)
        {
            Delegates.Params_DoEquidistantCylindrical @params = new()
            {
                self = self
            };
            _beforeDoEquidistantCylindrical?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoEquidistantCylindrical != null) _afterDoEquidistantCylindrical.Invoke(@params);
        }

        internal static void HookDoMercatorProjection()
        {
            if (!HookedList.Contains("DoMercatorProjection"))
            {
                HookedList.Add("DoMercatorProjection");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ProjectLocationToMap), "DoMercatorProjection"),
                    DoMercatorProjection);
            }
        }

        internal static event Delegates.DoMercatorProjection_BeforeArgs _beforeDoMercatorProjection;
        internal static event Delegates.DoMercatorProjection_NormalArgs _afterDoMercatorProjection;

        private static void DoMercatorProjection(Action<ProjectLocationToMap> orig, ProjectLocationToMap self)
        {
            Delegates.Params_DoMercatorProjection @params = new()
            {
                self = self
            };
            _beforeDoMercatorProjection?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoMercatorProjection != null) _afterDoMercatorProjection.Invoke(@params);
        }

        internal static void HookLatitudeToMercator()
        {
            if (!HookedList.Contains("LatitudeToMercator"))
            {
                HookedList.Add("LatitudeToMercator");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ProjectLocationToMap), "LatitudeToMercator", false),
                    LatitudeToMercator);
            }
        }

        internal static event Delegates.LatitudeToMercator_BeforeArgs _beforeLatitudeToMercator;
        internal static event Delegates.LatitudeToMercator_NormalArgs _afterLatitudeToMercator;

        private static float LatitudeToMercator(Func<float, float> orig, float latitudeInDegrees)
        {
            Delegates.Params_LatitudeToMercator @params = new()
            {
                latitudeInDegrees = latitudeInDegrees
            };
            _beforeLatitudeToMercator?.Invoke(@params);
            latitudeInDegrees = @params.latitudeInDegrees;
            var retVal = orig(latitudeInDegrees);
            if (_afterLatitudeToMercator != null) retVal = _afterLatitudeToMercator.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void DoEquidistantCylindrical_BeforeArgs(Params_DoEquidistantCylindrical args);

        public delegate void DoEquidistantCylindrical_NormalArgs(Params_DoEquidistantCylindrical args);

        public delegate void DoMercatorProjection_BeforeArgs(Params_DoMercatorProjection args);

        public delegate void DoMercatorProjection_NormalArgs(Params_DoMercatorProjection args);

        public delegate void DoProjectGPSLocation_BeforeArgs(Params_DoProjectGPSLocation args);

        public delegate void DoProjectGPSLocation_NormalArgs(Params_DoProjectGPSLocation args);

        public delegate void LatitudeToMercator_BeforeArgs(Params_LatitudeToMercator args);

        public delegate float LatitudeToMercator_NormalArgs(Params_LatitudeToMercator args);

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_NormalArgs(Params_OnEnter args);

        public delegate void OnUpdate_BeforeArgs(Params_OnUpdate args);

        public delegate void OnUpdate_NormalArgs(Params_OnUpdate args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public sealed class Params_Reset
        {
            public ProjectLocationToMap self;
        }

        public sealed class Params_OnEnter
        {
            public ProjectLocationToMap self;
        }

        public sealed class Params_OnUpdate
        {
            public ProjectLocationToMap self;
        }

        public sealed class Params_DoProjectGPSLocation
        {
            public ProjectLocationToMap self;
        }

        public sealed class Params_DoEquidistantCylindrical
        {
            public ProjectLocationToMap self;
        }

        public sealed class Params_DoMercatorProjection
        {
            public ProjectLocationToMap self;
        }

        public sealed class Params_LatitudeToMercator
        {
            public float latitudeInDegrees;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.OnUpdate_BeforeArgs OnUpdate
        {
            add
            {
                HookHandler._beforeOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._beforeOnUpdate -= value;
        }

        public static event Delegates.DoProjectGPSLocation_BeforeArgs DoProjectGPSLocation
        {
            add
            {
                HookHandler._beforeDoProjectGPSLocation += value;
                HookHandler.HookDoProjectGPSLocation();
            }
            remove => HookHandler._beforeDoProjectGPSLocation -= value;
        }

        public static event Delegates.DoEquidistantCylindrical_BeforeArgs DoEquidistantCylindrical
        {
            add
            {
                HookHandler._beforeDoEquidistantCylindrical += value;
                HookHandler.HookDoEquidistantCylindrical();
            }
            remove => HookHandler._beforeDoEquidistantCylindrical -= value;
        }

        public static event Delegates.DoMercatorProjection_BeforeArgs DoMercatorProjection
        {
            add
            {
                HookHandler._beforeDoMercatorProjection += value;
                HookHandler.HookDoMercatorProjection();
            }
            remove => HookHandler._beforeDoMercatorProjection -= value;
        }

        public static event Delegates.LatitudeToMercator_BeforeArgs LatitudeToMercator
        {
            add
            {
                HookHandler._beforeLatitudeToMercator += value;
                HookHandler.HookLatitudeToMercator();
            }
            remove => HookHandler._beforeLatitudeToMercator -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.OnUpdate_NormalArgs OnUpdate
        {
            add
            {
                HookHandler._afterOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._afterOnUpdate -= value;
        }

        public static event Delegates.DoProjectGPSLocation_NormalArgs DoProjectGPSLocation
        {
            add
            {
                HookHandler._afterDoProjectGPSLocation += value;
                HookHandler.HookDoProjectGPSLocation();
            }
            remove => HookHandler._afterDoProjectGPSLocation -= value;
        }

        public static event Delegates.DoEquidistantCylindrical_NormalArgs DoEquidistantCylindrical
        {
            add
            {
                HookHandler._afterDoEquidistantCylindrical += value;
                HookHandler.HookDoEquidistantCylindrical();
            }
            remove => HookHandler._afterDoEquidistantCylindrical -= value;
        }

        public static event Delegates.DoMercatorProjection_NormalArgs DoMercatorProjection
        {
            add
            {
                HookHandler._afterDoMercatorProjection += value;
                HookHandler.HookDoMercatorProjection();
            }
            remove => HookHandler._afterDoMercatorProjection -= value;
        }

        public static event Delegates.LatitudeToMercator_NormalArgs LatitudeToMercator
        {
            add
            {
                HookHandler._afterLatitudeToMercator += value;
                HookHandler.HookLatitudeToMercator();
            }
            remove => HookHandler._afterLatitudeToMercator -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ProjectLocationToMap), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ProjectLocationToMap), "Reset"), value);
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ProjectLocationToMap), "OnEnter"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ProjectLocationToMap), "OnEnter"), value);
        }

        public static event Delegates.OnUpdate_NormalArgs OnUpdate
        {
            add => HookEndpointManager.Add<Delegates.OnUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ProjectLocationToMap), "OnUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.OnUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ProjectLocationToMap), "OnUpdate"), value);
        }

        public static event Delegates.DoProjectGPSLocation_NormalArgs DoProjectGPSLocation
        {
            add => HookEndpointManager.Add<Delegates.DoProjectGPSLocation_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ProjectLocationToMap), "DoProjectGPSLocation"), value);
            remove => HookEndpointManager.Remove<Delegates.DoProjectGPSLocation_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ProjectLocationToMap), "DoProjectGPSLocation"), value);
        }

        public static event Delegates.DoEquidistantCylindrical_NormalArgs DoEquidistantCylindrical
        {
            add => HookEndpointManager.Add<Delegates.DoEquidistantCylindrical_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ProjectLocationToMap), "DoEquidistantCylindrical"), value);
            remove => HookEndpointManager.Remove<Delegates.DoEquidistantCylindrical_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ProjectLocationToMap), "DoEquidistantCylindrical"), value);
        }

        public static event Delegates.DoMercatorProjection_NormalArgs DoMercatorProjection
        {
            add => HookEndpointManager.Add<Delegates.DoMercatorProjection_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ProjectLocationToMap), "DoMercatorProjection"), value);
            remove => HookEndpointManager.Remove<Delegates.DoMercatorProjection_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ProjectLocationToMap), "DoMercatorProjection"), value);
        }

        public static event Delegates.LatitudeToMercator_NormalArgs LatitudeToMercator
        {
            add => HookEndpointManager.Add<Delegates.LatitudeToMercator_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ProjectLocationToMap), "LatitudeToMercator", false), value);
            remove => HookEndpointManager.Remove<Delegates.LatitudeToMercator_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ProjectLocationToMap), "LatitudeToMercator", false), value);
        }
    }
}