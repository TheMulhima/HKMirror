using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for ProjectLocationToMap class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnProjectLocationToMap
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookReset()
{
if (!HookedList.Contains("Reset"))
{
HookedList.Add("Reset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ProjectLocationToMap), "Reset", true), Reset);

}
}
internal static event Delegates.Reset_BeforeArgs _beforeReset;
internal static event Delegates.Reset_AfterArgs _afterReset;
private static void Reset(Action<HutongGames.PlayMaker.Actions.ProjectLocationToMap> orig, HutongGames.PlayMaker.Actions.ProjectLocationToMap self)
{
Delegates.Params_Reset @params = new() 
{
self = self
};
if (_beforeReset != null)
{
foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
{
try
{
_beforeReset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterReset != null)
{
foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
{
try
{
_afterReset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnEnter()
{
if (!HookedList.Contains("OnEnter"))
{
HookedList.Add("OnEnter");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ProjectLocationToMap), "OnEnter", true), OnEnter);

}
}
internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
internal static event Delegates.OnEnter_AfterArgs _afterOnEnter;
private static void OnEnter(Action<HutongGames.PlayMaker.Actions.ProjectLocationToMap> orig, HutongGames.PlayMaker.Actions.ProjectLocationToMap self)
{
Delegates.Params_OnEnter @params = new() 
{
self = self
};
if (_beforeOnEnter != null)
{
foreach (Delegates.OnEnter_BeforeArgs toInvoke in _beforeOnEnter.GetInvocationList())
{
try
{
_beforeOnEnter?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnter != null)
{
foreach (Delegates.OnEnter_AfterArgs toInvoke in _afterOnEnter.GetInvocationList())
{
try
{
_afterOnEnter.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnUpdate()
{
if (!HookedList.Contains("OnUpdate"))
{
HookedList.Add("OnUpdate");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ProjectLocationToMap), "OnUpdate", true), OnUpdate);

}
}
internal static event Delegates.OnUpdate_BeforeArgs _beforeOnUpdate;
internal static event Delegates.OnUpdate_AfterArgs _afterOnUpdate;
private static void OnUpdate(Action<HutongGames.PlayMaker.Actions.ProjectLocationToMap> orig, HutongGames.PlayMaker.Actions.ProjectLocationToMap self)
{
Delegates.Params_OnUpdate @params = new() 
{
self = self
};
if (_beforeOnUpdate != null)
{
foreach (Delegates.OnUpdate_BeforeArgs toInvoke in _beforeOnUpdate.GetInvocationList())
{
try
{
_beforeOnUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnUpdate != null)
{
foreach (Delegates.OnUpdate_AfterArgs toInvoke in _afterOnUpdate.GetInvocationList())
{
try
{
_afterOnUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDoProjectGPSLocation()
{
if (!HookedList.Contains("DoProjectGPSLocation"))
{
HookedList.Add("DoProjectGPSLocation");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ProjectLocationToMap), "DoProjectGPSLocation", true), DoProjectGPSLocation);

}
}
internal static event Delegates.DoProjectGPSLocation_BeforeArgs _beforeDoProjectGPSLocation;
internal static event Delegates.DoProjectGPSLocation_AfterArgs _afterDoProjectGPSLocation;
private static void DoProjectGPSLocation(Action<HutongGames.PlayMaker.Actions.ProjectLocationToMap> orig, HutongGames.PlayMaker.Actions.ProjectLocationToMap self)
{
Delegates.Params_DoProjectGPSLocation @params = new() 
{
self = self
};
if (_beforeDoProjectGPSLocation != null)
{
foreach (Delegates.DoProjectGPSLocation_BeforeArgs toInvoke in _beforeDoProjectGPSLocation.GetInvocationList())
{
try
{
_beforeDoProjectGPSLocation?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterDoProjectGPSLocation != null)
{
foreach (Delegates.DoProjectGPSLocation_AfterArgs toInvoke in _afterDoProjectGPSLocation.GetInvocationList())
{
try
{
_afterDoProjectGPSLocation.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDoEquidistantCylindrical()
{
if (!HookedList.Contains("DoEquidistantCylindrical"))
{
HookedList.Add("DoEquidistantCylindrical");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ProjectLocationToMap), "DoEquidistantCylindrical", true), DoEquidistantCylindrical);

}
}
internal static event Delegates.DoEquidistantCylindrical_BeforeArgs _beforeDoEquidistantCylindrical;
internal static event Delegates.DoEquidistantCylindrical_AfterArgs _afterDoEquidistantCylindrical;
private static void DoEquidistantCylindrical(Action<HutongGames.PlayMaker.Actions.ProjectLocationToMap> orig, HutongGames.PlayMaker.Actions.ProjectLocationToMap self)
{
Delegates.Params_DoEquidistantCylindrical @params = new() 
{
self = self
};
if (_beforeDoEquidistantCylindrical != null)
{
foreach (Delegates.DoEquidistantCylindrical_BeforeArgs toInvoke in _beforeDoEquidistantCylindrical.GetInvocationList())
{
try
{
_beforeDoEquidistantCylindrical?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterDoEquidistantCylindrical != null)
{
foreach (Delegates.DoEquidistantCylindrical_AfterArgs toInvoke in _afterDoEquidistantCylindrical.GetInvocationList())
{
try
{
_afterDoEquidistantCylindrical.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDoMercatorProjection()
{
if (!HookedList.Contains("DoMercatorProjection"))
{
HookedList.Add("DoMercatorProjection");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ProjectLocationToMap), "DoMercatorProjection", true), DoMercatorProjection);

}
}
internal static event Delegates.DoMercatorProjection_BeforeArgs _beforeDoMercatorProjection;
internal static event Delegates.DoMercatorProjection_AfterArgs _afterDoMercatorProjection;
private static void DoMercatorProjection(Action<HutongGames.PlayMaker.Actions.ProjectLocationToMap> orig, HutongGames.PlayMaker.Actions.ProjectLocationToMap self)
{
Delegates.Params_DoMercatorProjection @params = new() 
{
self = self
};
if (_beforeDoMercatorProjection != null)
{
foreach (Delegates.DoMercatorProjection_BeforeArgs toInvoke in _beforeDoMercatorProjection.GetInvocationList())
{
try
{
_beforeDoMercatorProjection?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterDoMercatorProjection != null)
{
foreach (Delegates.DoMercatorProjection_AfterArgs toInvoke in _afterDoMercatorProjection.GetInvocationList())
{
try
{
_afterDoMercatorProjection.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookLatitudeToMercator()
{
if (!HookedList.Contains("LatitudeToMercator"))
{
HookedList.Add("LatitudeToMercator");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ProjectLocationToMap), "LatitudeToMercator", false), LatitudeToMercator);

}
}
internal static event Delegates.LatitudeToMercator_BeforeArgs _beforeLatitudeToMercator;
internal static event Delegates.LatitudeToMercator_AfterArgs _afterLatitudeToMercator;
private static float LatitudeToMercator(Func< float, float> orig,  float latitudeInDegrees)
{
Delegates.Params_LatitudeToMercator @params = new() 
{
latitudeInDegrees = latitudeInDegrees
};
if (_beforeLatitudeToMercator != null)
{
foreach (Delegates.LatitudeToMercator_BeforeArgs toInvoke in _beforeLatitudeToMercator.GetInvocationList())
{
try
{
_beforeLatitudeToMercator?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
latitudeInDegrees = @params.latitudeInDegrees;
var retVal = orig(latitudeInDegrees);
if (_afterLatitudeToMercator != null)
{
foreach (Delegates.LatitudeToMercator_AfterArgs toInvoke in _afterLatitudeToMercator.GetInvocationList())
{
try
{
retVal = _afterLatitudeToMercator.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Reset
{
public HutongGames.PlayMaker.Actions.ProjectLocationToMap self;
}
public delegate void Reset_BeforeArgs(Params_Reset args);
public delegate void Reset_AfterArgs(Params_Reset args);
public delegate void Reset_WithArgs (Action<HutongGames.PlayMaker.Actions.ProjectLocationToMap> orig, HutongGames.PlayMaker.Actions.ProjectLocationToMap self);
public sealed class Params_OnEnter
{
public HutongGames.PlayMaker.Actions.ProjectLocationToMap self;
}
public delegate void OnEnter_BeforeArgs(Params_OnEnter args);
public delegate void OnEnter_AfterArgs(Params_OnEnter args);
public delegate void OnEnter_WithArgs (Action<HutongGames.PlayMaker.Actions.ProjectLocationToMap> orig, HutongGames.PlayMaker.Actions.ProjectLocationToMap self);
public sealed class Params_OnUpdate
{
public HutongGames.PlayMaker.Actions.ProjectLocationToMap self;
}
public delegate void OnUpdate_BeforeArgs(Params_OnUpdate args);
public delegate void OnUpdate_AfterArgs(Params_OnUpdate args);
public delegate void OnUpdate_WithArgs (Action<HutongGames.PlayMaker.Actions.ProjectLocationToMap> orig, HutongGames.PlayMaker.Actions.ProjectLocationToMap self);
public sealed class Params_DoProjectGPSLocation
{
public HutongGames.PlayMaker.Actions.ProjectLocationToMap self;
}
public delegate void DoProjectGPSLocation_BeforeArgs(Params_DoProjectGPSLocation args);
public delegate void DoProjectGPSLocation_AfterArgs(Params_DoProjectGPSLocation args);
public delegate void DoProjectGPSLocation_WithArgs (Action<HutongGames.PlayMaker.Actions.ProjectLocationToMap> orig, HutongGames.PlayMaker.Actions.ProjectLocationToMap self);
public sealed class Params_DoEquidistantCylindrical
{
public HutongGames.PlayMaker.Actions.ProjectLocationToMap self;
}
public delegate void DoEquidistantCylindrical_BeforeArgs(Params_DoEquidistantCylindrical args);
public delegate void DoEquidistantCylindrical_AfterArgs(Params_DoEquidistantCylindrical args);
public delegate void DoEquidistantCylindrical_WithArgs (Action<HutongGames.PlayMaker.Actions.ProjectLocationToMap> orig, HutongGames.PlayMaker.Actions.ProjectLocationToMap self);
public sealed class Params_DoMercatorProjection
{
public HutongGames.PlayMaker.Actions.ProjectLocationToMap self;
}
public delegate void DoMercatorProjection_BeforeArgs(Params_DoMercatorProjection args);
public delegate void DoMercatorProjection_AfterArgs(Params_DoMercatorProjection args);
public delegate void DoMercatorProjection_WithArgs (Action<HutongGames.PlayMaker.Actions.ProjectLocationToMap> orig, HutongGames.PlayMaker.Actions.ProjectLocationToMap self);
public sealed class Params_LatitudeToMercator
{
public float latitudeInDegrees;
}
public delegate void LatitudeToMercator_BeforeArgs(Params_LatitudeToMercator args);
public delegate float LatitudeToMercator_AfterArgs(Params_LatitudeToMercator args, float ret);
public delegate float LatitudeToMercator_WithArgs (Func< float, float> orig,  float latitudeInDegrees);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Reset_BeforeArgs Reset
{
add
{

HookHandler._beforeReset += value;
HookHandler.HookReset();
}
remove => HookHandler._beforeReset -= value;
}
public static event Delegates.OnEnter_BeforeArgs OnEnter
{
add
{

HookHandler._beforeOnEnter += value;
HookHandler.HookOnEnter();
}
remove => HookHandler._beforeOnEnter -= value;
}
public static event Delegates.OnUpdate_BeforeArgs OnUpdate
{
add
{

HookHandler._beforeOnUpdate += value;
HookHandler.HookOnUpdate();
}
remove => HookHandler._beforeOnUpdate -= value;
}
public static event Delegates.DoProjectGPSLocation_BeforeArgs DoProjectGPSLocation
{
add
{

HookHandler._beforeDoProjectGPSLocation += value;
HookHandler.HookDoProjectGPSLocation();
}
remove => HookHandler._beforeDoProjectGPSLocation -= value;
}
public static event Delegates.DoEquidistantCylindrical_BeforeArgs DoEquidistantCylindrical
{
add
{

HookHandler._beforeDoEquidistantCylindrical += value;
HookHandler.HookDoEquidistantCylindrical();
}
remove => HookHandler._beforeDoEquidistantCylindrical -= value;
}
public static event Delegates.DoMercatorProjection_BeforeArgs DoMercatorProjection
{
add
{

HookHandler._beforeDoMercatorProjection += value;
HookHandler.HookDoMercatorProjection();
}
remove => HookHandler._beforeDoMercatorProjection -= value;
}
public static event Delegates.LatitudeToMercator_BeforeArgs LatitudeToMercator
{
add
{

HookHandler._beforeLatitudeToMercator += value;
HookHandler.HookLatitudeToMercator();
}
remove => HookHandler._beforeLatitudeToMercator -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Reset_AfterArgs Reset
{
add
{

HookHandler._afterReset += value;
HookHandler.HookReset();
}
remove => HookHandler._afterReset -= value;
}
public static event Delegates.OnEnter_AfterArgs OnEnter
{
add
{

HookHandler._afterOnEnter += value;
HookHandler.HookOnEnter();
}
remove => HookHandler._afterOnEnter -= value;
}
public static event Delegates.OnUpdate_AfterArgs OnUpdate
{
add
{

HookHandler._afterOnUpdate += value;
HookHandler.HookOnUpdate();
}
remove => HookHandler._afterOnUpdate -= value;
}
public static event Delegates.DoProjectGPSLocation_AfterArgs DoProjectGPSLocation
{
add
{

HookHandler._afterDoProjectGPSLocation += value;
HookHandler.HookDoProjectGPSLocation();
}
remove => HookHandler._afterDoProjectGPSLocation -= value;
}
public static event Delegates.DoEquidistantCylindrical_AfterArgs DoEquidistantCylindrical
{
add
{

HookHandler._afterDoEquidistantCylindrical += value;
HookHandler.HookDoEquidistantCylindrical();
}
remove => HookHandler._afterDoEquidistantCylindrical -= value;
}
public static event Delegates.DoMercatorProjection_AfterArgs DoMercatorProjection
{
add
{

HookHandler._afterDoMercatorProjection += value;
HookHandler.HookDoMercatorProjection();
}
remove => HookHandler._afterDoMercatorProjection -= value;
}
public static event Delegates.LatitudeToMercator_AfterArgs LatitudeToMercator
{
add
{

HookHandler._afterLatitudeToMercator += value;
HookHandler.HookLatitudeToMercator();
}
remove => HookHandler._afterLatitudeToMercator -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.Reset_WithArgs Reset
{
add => HookEndpointManager.Add<Delegates.Reset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ProjectLocationToMap), "Reset", true), value);
remove => HookEndpointManager.Remove<Delegates.Reset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ProjectLocationToMap), "Reset", true), value);
}
public static event Delegates.OnEnter_WithArgs OnEnter
{
add => HookEndpointManager.Add<Delegates.OnEnter_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ProjectLocationToMap), "OnEnter", true), value);
remove => HookEndpointManager.Remove<Delegates.OnEnter_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ProjectLocationToMap), "OnEnter", true), value);
}
public static event Delegates.OnUpdate_WithArgs OnUpdate
{
add => HookEndpointManager.Add<Delegates.OnUpdate_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ProjectLocationToMap), "OnUpdate", true), value);
remove => HookEndpointManager.Remove<Delegates.OnUpdate_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ProjectLocationToMap), "OnUpdate", true), value);
}
public static event Delegates.DoProjectGPSLocation_WithArgs DoProjectGPSLocation
{
add => HookEndpointManager.Add<Delegates.DoProjectGPSLocation_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ProjectLocationToMap), "DoProjectGPSLocation", true), value);
remove => HookEndpointManager.Remove<Delegates.DoProjectGPSLocation_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ProjectLocationToMap), "DoProjectGPSLocation", true), value);
}
public static event Delegates.DoEquidistantCylindrical_WithArgs DoEquidistantCylindrical
{
add => HookEndpointManager.Add<Delegates.DoEquidistantCylindrical_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ProjectLocationToMap), "DoEquidistantCylindrical", true), value);
remove => HookEndpointManager.Remove<Delegates.DoEquidistantCylindrical_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ProjectLocationToMap), "DoEquidistantCylindrical", true), value);
}
public static event Delegates.DoMercatorProjection_WithArgs DoMercatorProjection
{
add => HookEndpointManager.Add<Delegates.DoMercatorProjection_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ProjectLocationToMap), "DoMercatorProjection", true), value);
remove => HookEndpointManager.Remove<Delegates.DoMercatorProjection_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ProjectLocationToMap), "DoMercatorProjection", true), value);
}
public static event Delegates.LatitudeToMercator_WithArgs LatitudeToMercator
{
add => HookEndpointManager.Add<Delegates.LatitudeToMercator_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ProjectLocationToMap), "LatitudeToMercator", false), value);
remove => HookEndpointManager.Remove<Delegates.LatitudeToMercator_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ProjectLocationToMap), "LatitudeToMercator", false), value);
}
}

}
