namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for JellyEgg class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnJellyEgg
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.JellyEgg.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_AfterArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.JellyEgg.orig_OnTriggerEnter2D orig, JellyEgg self,
            Collider2D otherCollider)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, otherCollider = otherCollider
            };
            if (_beforeOnTriggerEnter2D != null)
                foreach (Delegates.OnTriggerEnter2D_BeforeArgs toInvoke in _beforeOnTriggerEnter2D.GetInvocationList())
                    try
                    {
                        _beforeOnTriggerEnter2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            otherCollider = @params.otherCollider;
            orig(self, otherCollider);
            if (_afterOnTriggerEnter2D != null)
                foreach (Delegates.OnTriggerEnter2D_AfterArgs toInvoke in _afterOnTriggerEnter2D.GetInvocationList())
                    try
                    {
                        _afterOnTriggerEnter2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookBurst()
        {
            if (!HookedList.Contains("Burst"))
            {
                HookedList.Add("Burst");
                On.JellyEgg.Burst += Burst;
            }
        }

        internal static event Delegates.Burst_BeforeArgs _beforeBurst;
        internal static event Delegates.Burst_AfterArgs _afterBurst;

        private static void Burst(On.JellyEgg.orig_Burst orig, JellyEgg self)
        {
            Delegates.Params_Burst @params = new()
            {
                self = self
            };
            if (_beforeBurst != null)
                foreach (Delegates.Burst_BeforeArgs toInvoke in _beforeBurst.GetInvocationList())
                    try
                    {
                        _beforeBurst?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterBurst != null)
                foreach (Delegates.Burst_AfterArgs toInvoke in _afterBurst.GetInvocationList())
                    try
                    {
                        _afterBurst.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Burst_AfterArgs(Params_Burst args);

        public delegate void Burst_BeforeArgs(Params_Burst args);

        public delegate void Burst_WithArgs(Action<JellyEgg> orig, JellyEgg self);

        public delegate void OnTriggerEnter2D_AfterArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_WithArgs(Action<JellyEgg, Collider2D> orig, JellyEgg self,
            Collider2D otherCollider);

        public sealed class Params_OnTriggerEnter2D
        {
            public Collider2D otherCollider;
            public JellyEgg self;
        }

        public sealed class Params_Burst
        {
            public JellyEgg self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.Burst_BeforeArgs Burst
        {
            add
            {
                HookHandler._beforeBurst += value;
                HookHandler.HookBurst();
            }
            remove => HookHandler._beforeBurst -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnTriggerEnter2D_AfterArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }

        public static event Delegates.Burst_AfterArgs Burst
        {
            add
            {
                HookHandler._afterBurst += value;
                HookHandler.HookBurst();
            }
            remove => HookHandler._afterBurst -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.JellyEgg.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.JellyEgg.OnTriggerEnter2D += value;
            remove => On.JellyEgg.OnTriggerEnter2D -= value;
        }

        public static event On.JellyEgg.hook_Burst Burst
        {
            add => On.JellyEgg.Burst += value;
            remove => On.JellyEgg.Burst -= value;
        }
    }
}