using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for Explosion class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnExplosion
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookReset()
{
if (!HookedList.Contains("Reset"))
{
HookedList.Add("Reset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.Explosion), "Reset", true), Reset);

}
}
internal static event Delegates.Reset_BeforeArgs _beforeReset;
internal static event Delegates.Reset_AfterArgs _afterReset;
private static void Reset(Action<HutongGames.PlayMaker.Actions.Explosion> orig, HutongGames.PlayMaker.Actions.Explosion self)
{
Delegates.Params_Reset @params = new() 
{
self = self
};
if (_beforeReset != null)
{
foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
{
try
{
_beforeReset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterReset != null)
{
foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
{
try
{
_afterReset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnPreprocess()
{
if (!HookedList.Contains("OnPreprocess"))
{
HookedList.Add("OnPreprocess");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.Explosion), "OnPreprocess", true), OnPreprocess);

}
}
internal static event Delegates.OnPreprocess_BeforeArgs _beforeOnPreprocess;
internal static event Delegates.OnPreprocess_AfterArgs _afterOnPreprocess;
private static void OnPreprocess(Action<HutongGames.PlayMaker.Actions.Explosion> orig, HutongGames.PlayMaker.Actions.Explosion self)
{
Delegates.Params_OnPreprocess @params = new() 
{
self = self
};
if (_beforeOnPreprocess != null)
{
foreach (Delegates.OnPreprocess_BeforeArgs toInvoke in _beforeOnPreprocess.GetInvocationList())
{
try
{
_beforeOnPreprocess?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnPreprocess != null)
{
foreach (Delegates.OnPreprocess_AfterArgs toInvoke in _afterOnPreprocess.GetInvocationList())
{
try
{
_afterOnPreprocess.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnEnter()
{
if (!HookedList.Contains("OnEnter"))
{
HookedList.Add("OnEnter");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.Explosion), "OnEnter", true), OnEnter);

}
}
internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
internal static event Delegates.OnEnter_AfterArgs _afterOnEnter;
private static void OnEnter(Action<HutongGames.PlayMaker.Actions.Explosion> orig, HutongGames.PlayMaker.Actions.Explosion self)
{
Delegates.Params_OnEnter @params = new() 
{
self = self
};
if (_beforeOnEnter != null)
{
foreach (Delegates.OnEnter_BeforeArgs toInvoke in _beforeOnEnter.GetInvocationList())
{
try
{
_beforeOnEnter?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnter != null)
{
foreach (Delegates.OnEnter_AfterArgs toInvoke in _afterOnEnter.GetInvocationList())
{
try
{
_afterOnEnter.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnFixedUpdate()
{
if (!HookedList.Contains("OnFixedUpdate"))
{
HookedList.Add("OnFixedUpdate");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.Explosion), "OnFixedUpdate", true), OnFixedUpdate);

}
}
internal static event Delegates.OnFixedUpdate_BeforeArgs _beforeOnFixedUpdate;
internal static event Delegates.OnFixedUpdate_AfterArgs _afterOnFixedUpdate;
private static void OnFixedUpdate(Action<HutongGames.PlayMaker.Actions.Explosion> orig, HutongGames.PlayMaker.Actions.Explosion self)
{
Delegates.Params_OnFixedUpdate @params = new() 
{
self = self
};
if (_beforeOnFixedUpdate != null)
{
foreach (Delegates.OnFixedUpdate_BeforeArgs toInvoke in _beforeOnFixedUpdate.GetInvocationList())
{
try
{
_beforeOnFixedUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnFixedUpdate != null)
{
foreach (Delegates.OnFixedUpdate_AfterArgs toInvoke in _afterOnFixedUpdate.GetInvocationList())
{
try
{
_afterOnFixedUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDoExplosion()
{
if (!HookedList.Contains("DoExplosion"))
{
HookedList.Add("DoExplosion");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.Explosion), "DoExplosion", true), DoExplosion);

}
}
internal static event Delegates.DoExplosion_BeforeArgs _beforeDoExplosion;
internal static event Delegates.DoExplosion_AfterArgs _afterDoExplosion;
private static void DoExplosion(Action<HutongGames.PlayMaker.Actions.Explosion> orig, HutongGames.PlayMaker.Actions.Explosion self)
{
Delegates.Params_DoExplosion @params = new() 
{
self = self
};
if (_beforeDoExplosion != null)
{
foreach (Delegates.DoExplosion_BeforeArgs toInvoke in _beforeDoExplosion.GetInvocationList())
{
try
{
_beforeDoExplosion?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterDoExplosion != null)
{
foreach (Delegates.DoExplosion_AfterArgs toInvoke in _afterDoExplosion.GetInvocationList())
{
try
{
_afterDoExplosion.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookShouldApplyForce()
{
if (!HookedList.Contains("ShouldApplyForce"))
{
HookedList.Add("ShouldApplyForce");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.Explosion), "ShouldApplyForce", true), ShouldApplyForce);

}
}
internal static event Delegates.ShouldApplyForce_BeforeArgs _beforeShouldApplyForce;
internal static event Delegates.ShouldApplyForce_AfterArgs _afterShouldApplyForce;
private static bool ShouldApplyForce(Func<HutongGames.PlayMaker.Actions.Explosion,  UnityEngine.GameObject, bool> orig, HutongGames.PlayMaker.Actions.Explosion self,  UnityEngine.GameObject go)
{
Delegates.Params_ShouldApplyForce @params = new() 
{
self = self
, go = go
};
if (_beforeShouldApplyForce != null)
{
foreach (Delegates.ShouldApplyForce_BeforeArgs toInvoke in _beforeShouldApplyForce.GetInvocationList())
{
try
{
_beforeShouldApplyForce?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
go = @params.go;
var retVal = orig(self, go);
if (_afterShouldApplyForce != null)
{
foreach (Delegates.ShouldApplyForce_AfterArgs toInvoke in _afterShouldApplyForce.GetInvocationList())
{
try
{
retVal = _afterShouldApplyForce.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Reset
{
public HutongGames.PlayMaker.Actions.Explosion self;
}
public delegate void Reset_BeforeArgs(Params_Reset args);
public delegate void Reset_AfterArgs(Params_Reset args);
public delegate void Reset_WithArgs (Action<HutongGames.PlayMaker.Actions.Explosion> orig, HutongGames.PlayMaker.Actions.Explosion self);
public sealed class Params_OnPreprocess
{
public HutongGames.PlayMaker.Actions.Explosion self;
}
public delegate void OnPreprocess_BeforeArgs(Params_OnPreprocess args);
public delegate void OnPreprocess_AfterArgs(Params_OnPreprocess args);
public delegate void OnPreprocess_WithArgs (Action<HutongGames.PlayMaker.Actions.Explosion> orig, HutongGames.PlayMaker.Actions.Explosion self);
public sealed class Params_OnEnter
{
public HutongGames.PlayMaker.Actions.Explosion self;
}
public delegate void OnEnter_BeforeArgs(Params_OnEnter args);
public delegate void OnEnter_AfterArgs(Params_OnEnter args);
public delegate void OnEnter_WithArgs (Action<HutongGames.PlayMaker.Actions.Explosion> orig, HutongGames.PlayMaker.Actions.Explosion self);
public sealed class Params_OnFixedUpdate
{
public HutongGames.PlayMaker.Actions.Explosion self;
}
public delegate void OnFixedUpdate_BeforeArgs(Params_OnFixedUpdate args);
public delegate void OnFixedUpdate_AfterArgs(Params_OnFixedUpdate args);
public delegate void OnFixedUpdate_WithArgs (Action<HutongGames.PlayMaker.Actions.Explosion> orig, HutongGames.PlayMaker.Actions.Explosion self);
public sealed class Params_DoExplosion
{
public HutongGames.PlayMaker.Actions.Explosion self;
}
public delegate void DoExplosion_BeforeArgs(Params_DoExplosion args);
public delegate void DoExplosion_AfterArgs(Params_DoExplosion args);
public delegate void DoExplosion_WithArgs (Action<HutongGames.PlayMaker.Actions.Explosion> orig, HutongGames.PlayMaker.Actions.Explosion self);
public sealed class Params_ShouldApplyForce
{
public HutongGames.PlayMaker.Actions.Explosion self;
public UnityEngine.GameObject go;
}
public delegate void ShouldApplyForce_BeforeArgs(Params_ShouldApplyForce args);
public delegate bool ShouldApplyForce_AfterArgs(Params_ShouldApplyForce args, bool ret);
public delegate bool ShouldApplyForce_WithArgs (Func<HutongGames.PlayMaker.Actions.Explosion,  UnityEngine.GameObject, bool> orig, HutongGames.PlayMaker.Actions.Explosion self,  UnityEngine.GameObject go);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Reset_BeforeArgs Reset
{
add
{

HookHandler._beforeReset += value;
HookHandler.HookReset();
}
remove => HookHandler._beforeReset -= value;
}
public static event Delegates.OnPreprocess_BeforeArgs OnPreprocess
{
add
{

HookHandler._beforeOnPreprocess += value;
HookHandler.HookOnPreprocess();
}
remove => HookHandler._beforeOnPreprocess -= value;
}
public static event Delegates.OnEnter_BeforeArgs OnEnter
{
add
{

HookHandler._beforeOnEnter += value;
HookHandler.HookOnEnter();
}
remove => HookHandler._beforeOnEnter -= value;
}
public static event Delegates.OnFixedUpdate_BeforeArgs OnFixedUpdate
{
add
{

HookHandler._beforeOnFixedUpdate += value;
HookHandler.HookOnFixedUpdate();
}
remove => HookHandler._beforeOnFixedUpdate -= value;
}
public static event Delegates.DoExplosion_BeforeArgs DoExplosion
{
add
{

HookHandler._beforeDoExplosion += value;
HookHandler.HookDoExplosion();
}
remove => HookHandler._beforeDoExplosion -= value;
}
public static event Delegates.ShouldApplyForce_BeforeArgs ShouldApplyForce
{
add
{

HookHandler._beforeShouldApplyForce += value;
HookHandler.HookShouldApplyForce();
}
remove => HookHandler._beforeShouldApplyForce -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Reset_AfterArgs Reset
{
add
{

HookHandler._afterReset += value;
HookHandler.HookReset();
}
remove => HookHandler._afterReset -= value;
}
public static event Delegates.OnPreprocess_AfterArgs OnPreprocess
{
add
{

HookHandler._afterOnPreprocess += value;
HookHandler.HookOnPreprocess();
}
remove => HookHandler._afterOnPreprocess -= value;
}
public static event Delegates.OnEnter_AfterArgs OnEnter
{
add
{

HookHandler._afterOnEnter += value;
HookHandler.HookOnEnter();
}
remove => HookHandler._afterOnEnter -= value;
}
public static event Delegates.OnFixedUpdate_AfterArgs OnFixedUpdate
{
add
{

HookHandler._afterOnFixedUpdate += value;
HookHandler.HookOnFixedUpdate();
}
remove => HookHandler._afterOnFixedUpdate -= value;
}
public static event Delegates.DoExplosion_AfterArgs DoExplosion
{
add
{

HookHandler._afterDoExplosion += value;
HookHandler.HookDoExplosion();
}
remove => HookHandler._afterDoExplosion -= value;
}
public static event Delegates.ShouldApplyForce_AfterArgs ShouldApplyForce
{
add
{

HookHandler._afterShouldApplyForce += value;
HookHandler.HookShouldApplyForce();
}
remove => HookHandler._afterShouldApplyForce -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.Reset_WithArgs Reset
{
add => HookEndpointManager.Add<Delegates.Reset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.Explosion), "Reset", true), value);
remove => HookEndpointManager.Remove<Delegates.Reset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.Explosion), "Reset", true), value);
}
public static event Delegates.OnPreprocess_WithArgs OnPreprocess
{
add => HookEndpointManager.Add<Delegates.OnPreprocess_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.Explosion), "OnPreprocess", true), value);
remove => HookEndpointManager.Remove<Delegates.OnPreprocess_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.Explosion), "OnPreprocess", true), value);
}
public static event Delegates.OnEnter_WithArgs OnEnter
{
add => HookEndpointManager.Add<Delegates.OnEnter_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.Explosion), "OnEnter", true), value);
remove => HookEndpointManager.Remove<Delegates.OnEnter_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.Explosion), "OnEnter", true), value);
}
public static event Delegates.OnFixedUpdate_WithArgs OnFixedUpdate
{
add => HookEndpointManager.Add<Delegates.OnFixedUpdate_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.Explosion), "OnFixedUpdate", true), value);
remove => HookEndpointManager.Remove<Delegates.OnFixedUpdate_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.Explosion), "OnFixedUpdate", true), value);
}
public static event Delegates.DoExplosion_WithArgs DoExplosion
{
add => HookEndpointManager.Add<Delegates.DoExplosion_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.Explosion), "DoExplosion", true), value);
remove => HookEndpointManager.Remove<Delegates.DoExplosion_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.Explosion), "DoExplosion", true), value);
}
public static event Delegates.ShouldApplyForce_WithArgs ShouldApplyForce
{
add => HookEndpointManager.Add<Delegates.ShouldApplyForce_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.Explosion), "ShouldApplyForce", true), value);
remove => HookEndpointManager.Remove<Delegates.ShouldApplyForce_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.Explosion), "ShouldApplyForce", true), value);
}
}

}
