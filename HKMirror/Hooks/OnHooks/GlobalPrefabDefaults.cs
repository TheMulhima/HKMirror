namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GlobalPrefabDefaults class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGlobalPrefabDefaults
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.GlobalPrefabDefaults.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.GlobalPrefabDefaults.orig_Awake orig, GlobalPrefabDefaults self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.GlobalPrefabDefaults.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.GlobalPrefabDefaults.orig_Start orig, GlobalPrefabDefaults self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSpawnBlood()
        {
            if (!HookedList.Contains("SpawnBlood"))
            {
                HookedList.Add("SpawnBlood");
                On.GlobalPrefabDefaults.SpawnBlood += SpawnBlood;
            }
        }

        internal static event Delegates.SpawnBlood_BeforeArgs _beforeSpawnBlood;
        internal static event Delegates.SpawnBlood_AfterArgs _afterSpawnBlood;

        private static void SpawnBlood(On.GlobalPrefabDefaults.orig_SpawnBlood orig, GlobalPrefabDefaults self,
            Vector3 position, short minCount, short maxCount, float minSpeed, float maxSpeed, float angleMin,
            float angleMax, Color? colorOverride)
        {
            Delegates.Params_SpawnBlood @params = new()
            {
                self = self, position = position, minCount = minCount, maxCount = maxCount, minSpeed = minSpeed,
                maxSpeed = maxSpeed, angleMin = angleMin, angleMax = angleMax, colorOverride = colorOverride
            };
            if (_beforeSpawnBlood != null)
                foreach (Delegates.SpawnBlood_BeforeArgs toInvoke in _beforeSpawnBlood.GetInvocationList())
                    try
                    {
                        _beforeSpawnBlood?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            position = @params.position;
            minCount = @params.minCount;
            maxCount = @params.maxCount;
            minSpeed = @params.minSpeed;
            maxSpeed = @params.maxSpeed;
            angleMin = @params.angleMin;
            angleMax = @params.angleMax;
            colorOverride = @params.colorOverride;
            orig(self, position, minCount, maxCount, minSpeed, maxSpeed, angleMin, angleMax, colorOverride);
            if (_afterSpawnBlood != null)
                foreach (Delegates.SpawnBlood_AfterArgs toInvoke in _afterSpawnBlood.GetInvocationList())
                    try
                    {
                        _afterSpawnBlood.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<GlobalPrefabDefaults> orig, GlobalPrefabDefaults self);

        public delegate void SpawnBlood_AfterArgs(Params_SpawnBlood args);

        public delegate void SpawnBlood_BeforeArgs(Params_SpawnBlood args);

        public delegate void SpawnBlood_WithArgs(
            Action<GlobalPrefabDefaults, Vector3, short, short, float, float, float, float, Color?> orig,
            GlobalPrefabDefaults self, Vector3 position, short minCount, short maxCount, float minSpeed, float maxSpeed,
            float angleMin, float angleMax, Color? colorOverride);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<GlobalPrefabDefaults> orig, GlobalPrefabDefaults self);

        public sealed class Params_Awake
        {
            public GlobalPrefabDefaults self;
        }

        public sealed class Params_Start
        {
            public GlobalPrefabDefaults self;
        }

        public sealed class Params_SpawnBlood
        {
            public float angleMax;
            public float angleMin;
            public Color? colorOverride;
            public short maxCount;
            public float maxSpeed;
            public short minCount;
            public float minSpeed;
            public Vector3 position;
            public GlobalPrefabDefaults self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.SpawnBlood_BeforeArgs SpawnBlood
        {
            add
            {
                HookHandler._beforeSpawnBlood += value;
                HookHandler.HookSpawnBlood();
            }
            remove => HookHandler._beforeSpawnBlood -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.SpawnBlood_AfterArgs SpawnBlood
        {
            add
            {
                HookHandler._afterSpawnBlood += value;
                HookHandler.HookSpawnBlood();
            }
            remove => HookHandler._afterSpawnBlood -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.GlobalPrefabDefaults.hook_Awake Awake
        {
            add => On.GlobalPrefabDefaults.Awake += value;
            remove => On.GlobalPrefabDefaults.Awake -= value;
        }

        public static event On.GlobalPrefabDefaults.hook_Start Start
        {
            add => On.GlobalPrefabDefaults.Start += value;
            remove => On.GlobalPrefabDefaults.Start -= value;
        }

        public static event On.GlobalPrefabDefaults.hook_SpawnBlood SpawnBlood
        {
            add => On.GlobalPrefabDefaults.SpawnBlood += value;
            remove => On.GlobalPrefabDefaults.SpawnBlood -= value;
        }
    }
}