using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for SoulOrb class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSoulOrb
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.SoulOrb.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.SoulOrb.orig_Awake orig,SoulOrb self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.SoulOrb.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.SoulOrb.orig_Start orig,SoulOrb self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDisable()
{
if (!HookedList.Contains("OnDisable"))
{
HookedList.Add("OnDisable");
On.SoulOrb.OnDisable += OnDisable;

}
}
internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;
private static void OnDisable(On.SoulOrb.orig_OnDisable orig,SoulOrb self)
{
Delegates.Params_OnDisable @params = new() 
{
self = self
};
if (_beforeOnDisable != null)
{
foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
{
try
{
_beforeOnDisable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDisable != null)
{
foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
{
try
{
_afterOnDisable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
On.SoulOrb.OnEnable += OnEnable;

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(On.SoulOrb.orig_OnEnable orig,SoulOrb self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdate()
{
if (!HookedList.Contains("Update"))
{
HookedList.Add("Update");
On.SoulOrb.Update += Update;

}
}
internal static event Delegates.Update_BeforeArgs _beforeUpdate;
internal static event Delegates.Update_AfterArgs _afterUpdate;
private static void Update(On.SoulOrb.orig_Update orig,SoulOrb self)
{
Delegates.Params_Update @params = new() 
{
self = self
};
if (_beforeUpdate != null)
{
foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
{
try
{
_beforeUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdate != null)
{
foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
{
try
{
_afterUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSceneLoading()
{
if (!HookedList.Contains("SceneLoading"))
{
HookedList.Add("SceneLoading");
On.SoulOrb.SceneLoading += SceneLoading;

}
}
internal static event Delegates.SceneLoading_BeforeArgs _beforeSceneLoading;
internal static event Delegates.SceneLoading_AfterArgs _afterSceneLoading;
private static void SceneLoading(On.SoulOrb.orig_SceneLoading orig,SoulOrb self)
{
Delegates.Params_SceneLoading @params = new() 
{
self = self
};
if (_beforeSceneLoading != null)
{
foreach (Delegates.SceneLoading_BeforeArgs toInvoke in _beforeSceneLoading.GetInvocationList())
{
try
{
_beforeSceneLoading?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSceneLoading != null)
{
foreach (Delegates.SceneLoading_AfterArgs toInvoke in _afterSceneLoading.GetInvocationList())
{
try
{
_afterSceneLoading.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookZoom()
{
if (!HookedList.Contains("Zoom"))
{
HookedList.Add("Zoom");
On.SoulOrb.Zoom += Zoom;

}
}
internal static event Delegates.Zoom_BeforeArgs _beforeZoom;
private static System.Collections.IEnumerator Zoom(On.SoulOrb.orig_Zoom orig,SoulOrb self,  bool doZoom)
{
Delegates.Params_Zoom @params = new() 
{
self = self
, doZoom = doZoom
};
if (_beforeZoom != null)
{
foreach (Delegates.Zoom_BeforeArgs toInvoke in _beforeZoom.GetInvocationList())
{
try
{
_beforeZoom?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
doZoom = @params.doZoom;
return orig(self, doZoom);
}
internal static void HookFireAtTarget()
{
if (!HookedList.Contains("FireAtTarget"))
{
HookedList.Add("FireAtTarget");
On.SoulOrb.FireAtTarget += FireAtTarget;

}
}
internal static event Delegates.FireAtTarget_BeforeArgs _beforeFireAtTarget;
internal static event Delegates.FireAtTarget_AfterArgs _afterFireAtTarget;
private static void FireAtTarget(On.SoulOrb.orig_FireAtTarget orig,SoulOrb self)
{
Delegates.Params_FireAtTarget @params = new() 
{
self = self
};
if (_beforeFireAtTarget != null)
{
foreach (Delegates.FireAtTarget_BeforeArgs toInvoke in _beforeFireAtTarget.GetInvocationList())
{
try
{
_beforeFireAtTarget?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterFireAtTarget != null)
{
foreach (Delegates.FireAtTarget_AfterArgs toInvoke in _afterFireAtTarget.GetInvocationList())
{
try
{
_afterFireAtTarget.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookFaceAngle()
{
if (!HookedList.Contains("FaceAngle"))
{
HookedList.Add("FaceAngle");
On.SoulOrb.FaceAngle += FaceAngle;

}
}
internal static event Delegates.FaceAngle_BeforeArgs _beforeFaceAngle;
internal static event Delegates.FaceAngle_AfterArgs _afterFaceAngle;
private static void FaceAngle(On.SoulOrb.orig_FaceAngle orig,SoulOrb self)
{
Delegates.Params_FaceAngle @params = new() 
{
self = self
};
if (_beforeFaceAngle != null)
{
foreach (Delegates.FaceAngle_BeforeArgs toInvoke in _beforeFaceAngle.GetInvocationList())
{
try
{
_beforeFaceAngle?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterFaceAngle != null)
{
foreach (Delegates.FaceAngle_AfterArgs toInvoke in _afterFaceAngle.GetInvocationList())
{
try
{
_afterFaceAngle.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookProjectileSquash()
{
if (!HookedList.Contains("ProjectileSquash"))
{
HookedList.Add("ProjectileSquash");
On.SoulOrb.ProjectileSquash += ProjectileSquash;

}
}
internal static event Delegates.ProjectileSquash_BeforeArgs _beforeProjectileSquash;
internal static event Delegates.ProjectileSquash_AfterArgs _afterProjectileSquash;
private static void ProjectileSquash(On.SoulOrb.orig_ProjectileSquash orig,SoulOrb self)
{
Delegates.Params_ProjectileSquash @params = new() 
{
self = self
};
if (_beforeProjectileSquash != null)
{
foreach (Delegates.ProjectileSquash_BeforeArgs toInvoke in _beforeProjectileSquash.GetInvocationList())
{
try
{
_beforeProjectileSquash?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterProjectileSquash != null)
{
foreach (Delegates.ProjectileSquash_AfterArgs toInvoke in _afterProjectileSquash.GetInvocationList())
{
try
{
_afterProjectileSquash.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Awake
{
public SoulOrb self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<SoulOrb> orig, SoulOrb self);
public sealed class Params_Start
{
public SoulOrb self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<SoulOrb> orig, SoulOrb self);
public sealed class Params_OnDisable
{
public SoulOrb self;
}
public delegate void OnDisable_BeforeArgs(Params_OnDisable args);
public delegate void OnDisable_AfterArgs(Params_OnDisable args);
public delegate void OnDisable_WithArgs (Action<SoulOrb> orig, SoulOrb self);
public sealed class Params_OnEnable
{
public SoulOrb self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<SoulOrb> orig, SoulOrb self);
public sealed class Params_Update
{
public SoulOrb self;
}
public delegate void Update_BeforeArgs(Params_Update args);
public delegate void Update_AfterArgs(Params_Update args);
public delegate void Update_WithArgs (Action<SoulOrb> orig, SoulOrb self);
public sealed class Params_SceneLoading
{
public SoulOrb self;
}
public delegate void SceneLoading_BeforeArgs(Params_SceneLoading args);
public delegate void SceneLoading_AfterArgs(Params_SceneLoading args);
public delegate void SceneLoading_WithArgs (Action<SoulOrb> orig, SoulOrb self);
public sealed class Params_Zoom
{
public SoulOrb self;
public bool doZoom;
}
public delegate void Zoom_BeforeArgs(Params_Zoom args);
public delegate System.Collections.IEnumerator Zoom_AfterArgs(Params_Zoom args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator Zoom_WithArgs (Func<SoulOrb,  bool, System.Collections.IEnumerator> orig, SoulOrb self,  bool doZoom);
public sealed class Params_FireAtTarget
{
public SoulOrb self;
}
public delegate void FireAtTarget_BeforeArgs(Params_FireAtTarget args);
public delegate void FireAtTarget_AfterArgs(Params_FireAtTarget args);
public delegate void FireAtTarget_WithArgs (Action<SoulOrb> orig, SoulOrb self);
public sealed class Params_FaceAngle
{
public SoulOrb self;
}
public delegate void FaceAngle_BeforeArgs(Params_FaceAngle args);
public delegate void FaceAngle_AfterArgs(Params_FaceAngle args);
public delegate void FaceAngle_WithArgs (Action<SoulOrb> orig, SoulOrb self);
public sealed class Params_ProjectileSquash
{
public SoulOrb self;
}
public delegate void ProjectileSquash_BeforeArgs(Params_ProjectileSquash args);
public delegate void ProjectileSquash_AfterArgs(Params_ProjectileSquash args);
public delegate void ProjectileSquash_WithArgs (Action<SoulOrb> orig, SoulOrb self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.OnDisable_BeforeArgs OnDisable
{
add
{

HookHandler._beforeOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._beforeOnDisable -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.Update_BeforeArgs Update
{
add
{

HookHandler._beforeUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._beforeUpdate -= value;
}
public static event Delegates.SceneLoading_BeforeArgs SceneLoading
{
add
{

HookHandler._beforeSceneLoading += value;
HookHandler.HookSceneLoading();
}
remove => HookHandler._beforeSceneLoading -= value;
}
public static event Delegates.Zoom_BeforeArgs Zoom
{
add
{

HookHandler._beforeZoom += value;
HookHandler.HookZoom();
}
remove => HookHandler._beforeZoom -= value;
}
public static event Delegates.FireAtTarget_BeforeArgs FireAtTarget
{
add
{

HookHandler._beforeFireAtTarget += value;
HookHandler.HookFireAtTarget();
}
remove => HookHandler._beforeFireAtTarget -= value;
}
public static event Delegates.FaceAngle_BeforeArgs FaceAngle
{
add
{

HookHandler._beforeFaceAngle += value;
HookHandler.HookFaceAngle();
}
remove => HookHandler._beforeFaceAngle -= value;
}
public static event Delegates.ProjectileSquash_BeforeArgs ProjectileSquash
{
add
{

HookHandler._beforeProjectileSquash += value;
HookHandler.HookProjectileSquash();
}
remove => HookHandler._beforeProjectileSquash -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.OnDisable_AfterArgs OnDisable
{
add
{

HookHandler._afterOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._afterOnDisable -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.Update_AfterArgs Update
{
add
{

HookHandler._afterUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._afterUpdate -= value;
}
public static event Delegates.SceneLoading_AfterArgs SceneLoading
{
add
{

HookHandler._afterSceneLoading += value;
HookHandler.HookSceneLoading();
}
remove => HookHandler._afterSceneLoading -= value;
}
public static event Delegates.FireAtTarget_AfterArgs FireAtTarget
{
add
{

HookHandler._afterFireAtTarget += value;
HookHandler.HookFireAtTarget();
}
remove => HookHandler._afterFireAtTarget -= value;
}
public static event Delegates.FaceAngle_AfterArgs FaceAngle
{
add
{

HookHandler._afterFaceAngle += value;
HookHandler.HookFaceAngle();
}
remove => HookHandler._afterFaceAngle -= value;
}
public static event Delegates.ProjectileSquash_AfterArgs ProjectileSquash
{
add
{

HookHandler._afterProjectileSquash += value;
HookHandler.HookProjectileSquash();
}
remove => HookHandler._afterProjectileSquash -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.SoulOrb.hook_Awake Awake
{
add => On.SoulOrb.Awake += value;
remove => On.SoulOrb.Awake -= value;
}
public static event On.SoulOrb.hook_Start Start
{
add => On.SoulOrb.Start += value;
remove => On.SoulOrb.Start -= value;
}
public static event On.SoulOrb.hook_OnDisable OnDisable
{
add => On.SoulOrb.OnDisable += value;
remove => On.SoulOrb.OnDisable -= value;
}
public static event On.SoulOrb.hook_OnEnable OnEnable
{
add => On.SoulOrb.OnEnable += value;
remove => On.SoulOrb.OnEnable -= value;
}
public static event On.SoulOrb.hook_Update Update
{
add => On.SoulOrb.Update += value;
remove => On.SoulOrb.Update -= value;
}
public static event On.SoulOrb.hook_SceneLoading SceneLoading
{
add => On.SoulOrb.SceneLoading += value;
remove => On.SoulOrb.SceneLoading -= value;
}
public static event On.SoulOrb.hook_Zoom Zoom
{
add => On.SoulOrb.Zoom += value;
remove => On.SoulOrb.Zoom -= value;
}
public static event On.SoulOrb.hook_FireAtTarget FireAtTarget
{
add => On.SoulOrb.FireAtTarget += value;
remove => On.SoulOrb.FireAtTarget -= value;
}
public static event On.SoulOrb.hook_FaceAngle FaceAngle
{
add => On.SoulOrb.FaceAngle += value;
remove => On.SoulOrb.FaceAngle -= value;
}
public static event On.SoulOrb.hook_ProjectileSquash ProjectileSquash
{
add => On.SoulOrb.ProjectileSquash += value;
remove => On.SoulOrb.ProjectileSquash -= value;
}
}

}
