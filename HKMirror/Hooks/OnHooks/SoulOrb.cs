namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for SoulOrb class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSoulOrb
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.SoulOrb.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.SoulOrb.orig_Awake orig, SoulOrb self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.SoulOrb.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.SoulOrb.orig_Start orig, SoulOrb self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.SoulOrb.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.SoulOrb.orig_OnDisable orig, SoulOrb self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.SoulOrb.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.SoulOrb.orig_OnEnable orig, SoulOrb self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.SoulOrb.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.SoulOrb.orig_Update orig, SoulOrb self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookSceneLoading()
        {
            if (!HookedList.Contains("SceneLoading"))
            {
                HookedList.Add("SceneLoading");
                On.SoulOrb.SceneLoading += SceneLoading;
            }
        }

        internal static event Delegates.SceneLoading_BeforeArgs _beforeSceneLoading;
        internal static event Delegates.SceneLoading_NormalArgs _afterSceneLoading;

        private static void SceneLoading(On.SoulOrb.orig_SceneLoading orig, SoulOrb self)
        {
            Delegates.Params_SceneLoading @params = new()
            {
                self = self
            };
            _beforeSceneLoading?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSceneLoading != null) _afterSceneLoading.Invoke(@params);
        }

        internal static void HookZoom()
        {
            if (!HookedList.Contains("Zoom"))
            {
                HookedList.Add("Zoom");
                On.SoulOrb.Zoom += Zoom;
            }
        }

        internal static event Delegates.Zoom_BeforeArgs _beforeZoom;

        private static IEnumerator Zoom(On.SoulOrb.orig_Zoom orig, SoulOrb self, bool doZoom)
        {
            Delegates.Params_Zoom @params = new()
            {
                self = self, doZoom = doZoom
            };
            _beforeZoom?.Invoke(@params);
            self = @params.self;
            doZoom = @params.doZoom;
            return orig(self, doZoom);
        }

        internal static void HookFireAtTarget()
        {
            if (!HookedList.Contains("FireAtTarget"))
            {
                HookedList.Add("FireAtTarget");
                On.SoulOrb.FireAtTarget += FireAtTarget;
            }
        }

        internal static event Delegates.FireAtTarget_BeforeArgs _beforeFireAtTarget;
        internal static event Delegates.FireAtTarget_NormalArgs _afterFireAtTarget;

        private static void FireAtTarget(On.SoulOrb.orig_FireAtTarget orig, SoulOrb self)
        {
            Delegates.Params_FireAtTarget @params = new()
            {
                self = self
            };
            _beforeFireAtTarget?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFireAtTarget != null) _afterFireAtTarget.Invoke(@params);
        }

        internal static void HookFaceAngle()
        {
            if (!HookedList.Contains("FaceAngle"))
            {
                HookedList.Add("FaceAngle");
                On.SoulOrb.FaceAngle += FaceAngle;
            }
        }

        internal static event Delegates.FaceAngle_BeforeArgs _beforeFaceAngle;
        internal static event Delegates.FaceAngle_NormalArgs _afterFaceAngle;

        private static void FaceAngle(On.SoulOrb.orig_FaceAngle orig, SoulOrb self)
        {
            Delegates.Params_FaceAngle @params = new()
            {
                self = self
            };
            _beforeFaceAngle?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFaceAngle != null) _afterFaceAngle.Invoke(@params);
        }

        internal static void HookProjectileSquash()
        {
            if (!HookedList.Contains("ProjectileSquash"))
            {
                HookedList.Add("ProjectileSquash");
                On.SoulOrb.ProjectileSquash += ProjectileSquash;
            }
        }

        internal static event Delegates.ProjectileSquash_BeforeArgs _beforeProjectileSquash;
        internal static event Delegates.ProjectileSquash_NormalArgs _afterProjectileSquash;

        private static void ProjectileSquash(On.SoulOrb.orig_ProjectileSquash orig, SoulOrb self)
        {
            Delegates.Params_ProjectileSquash @params = new()
            {
                self = self
            };
            _beforeProjectileSquash?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterProjectileSquash != null) _afterProjectileSquash.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void FaceAngle_BeforeArgs(Params_FaceAngle args);

        public delegate void FaceAngle_NormalArgs(Params_FaceAngle args);

        public delegate void FireAtTarget_BeforeArgs(Params_FireAtTarget args);

        public delegate void FireAtTarget_NormalArgs(Params_FireAtTarget args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void ProjectileSquash_BeforeArgs(Params_ProjectileSquash args);

        public delegate void ProjectileSquash_NormalArgs(Params_ProjectileSquash args);

        public delegate void SceneLoading_BeforeArgs(Params_SceneLoading args);

        public delegate void SceneLoading_NormalArgs(Params_SceneLoading args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public delegate void Zoom_BeforeArgs(Params_Zoom args);

        public delegate IEnumerator Zoom_NormalArgs(Params_Zoom args);

        public sealed class Params_Awake
        {
            public SoulOrb self;
        }

        public sealed class Params_Start
        {
            public SoulOrb self;
        }

        public sealed class Params_OnDisable
        {
            public SoulOrb self;
        }

        public sealed class Params_OnEnable
        {
            public SoulOrb self;
        }

        public sealed class Params_Update
        {
            public SoulOrb self;
        }

        public sealed class Params_SceneLoading
        {
            public SoulOrb self;
        }

        public sealed class Params_Zoom
        {
            public bool doZoom;
            public SoulOrb self;
        }

        public sealed class Params_FireAtTarget
        {
            public SoulOrb self;
        }

        public sealed class Params_FaceAngle
        {
            public SoulOrb self;
        }

        public sealed class Params_ProjectileSquash
        {
            public SoulOrb self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.SceneLoading_BeforeArgs SceneLoading
        {
            add
            {
                HookHandler._beforeSceneLoading += value;
                HookHandler.HookSceneLoading();
            }
            remove => HookHandler._beforeSceneLoading -= value;
        }

        public static event Delegates.Zoom_BeforeArgs Zoom
        {
            add
            {
                HookHandler._beforeZoom += value;
                HookHandler.HookZoom();
            }
            remove => HookHandler._beforeZoom -= value;
        }

        public static event Delegates.FireAtTarget_BeforeArgs FireAtTarget
        {
            add
            {
                HookHandler._beforeFireAtTarget += value;
                HookHandler.HookFireAtTarget();
            }
            remove => HookHandler._beforeFireAtTarget -= value;
        }

        public static event Delegates.FaceAngle_BeforeArgs FaceAngle
        {
            add
            {
                HookHandler._beforeFaceAngle += value;
                HookHandler.HookFaceAngle();
            }
            remove => HookHandler._beforeFaceAngle -= value;
        }

        public static event Delegates.ProjectileSquash_BeforeArgs ProjectileSquash
        {
            add
            {
                HookHandler._beforeProjectileSquash += value;
                HookHandler.HookProjectileSquash();
            }
            remove => HookHandler._beforeProjectileSquash -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.SceneLoading_NormalArgs SceneLoading
        {
            add
            {
                HookHandler._afterSceneLoading += value;
                HookHandler.HookSceneLoading();
            }
            remove => HookHandler._afterSceneLoading -= value;
        }

        public static event Delegates.FireAtTarget_NormalArgs FireAtTarget
        {
            add
            {
                HookHandler._afterFireAtTarget += value;
                HookHandler.HookFireAtTarget();
            }
            remove => HookHandler._afterFireAtTarget -= value;
        }

        public static event Delegates.FaceAngle_NormalArgs FaceAngle
        {
            add
            {
                HookHandler._afterFaceAngle += value;
                HookHandler.HookFaceAngle();
            }
            remove => HookHandler._afterFaceAngle -= value;
        }

        public static event Delegates.ProjectileSquash_NormalArgs ProjectileSquash
        {
            add
            {
                HookHandler._afterProjectileSquash += value;
                HookHandler.HookProjectileSquash();
            }
            remove => HookHandler._afterProjectileSquash -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.SoulOrb.hook_Awake Awake
        {
            add => On.SoulOrb.Awake += value;
            remove => On.SoulOrb.Awake -= value;
        }

        public static event On.SoulOrb.hook_Start Start
        {
            add => On.SoulOrb.Start += value;
            remove => On.SoulOrb.Start -= value;
        }

        public static event On.SoulOrb.hook_OnDisable OnDisable
        {
            add => On.SoulOrb.OnDisable += value;
            remove => On.SoulOrb.OnDisable -= value;
        }

        public static event On.SoulOrb.hook_OnEnable OnEnable
        {
            add => On.SoulOrb.OnEnable += value;
            remove => On.SoulOrb.OnEnable -= value;
        }

        public static event On.SoulOrb.hook_Update Update
        {
            add => On.SoulOrb.Update += value;
            remove => On.SoulOrb.Update -= value;
        }

        public static event On.SoulOrb.hook_SceneLoading SceneLoading
        {
            add => On.SoulOrb.SceneLoading += value;
            remove => On.SoulOrb.SceneLoading -= value;
        }

        public static event On.SoulOrb.hook_Zoom Zoom
        {
            add => On.SoulOrb.Zoom += value;
            remove => On.SoulOrb.Zoom -= value;
        }

        public static event On.SoulOrb.hook_FireAtTarget FireAtTarget
        {
            add => On.SoulOrb.FireAtTarget += value;
            remove => On.SoulOrb.FireAtTarget -= value;
        }

        public static event On.SoulOrb.hook_FaceAngle FaceAngle
        {
            add => On.SoulOrb.FaceAngle += value;
            remove => On.SoulOrb.FaceAngle -= value;
        }

        public static event On.SoulOrb.hook_ProjectileSquash ProjectileSquash
        {
            add => On.SoulOrb.ProjectileSquash += value;
            remove => On.SoulOrb.ProjectileSquash -= value;
        }
    }
}