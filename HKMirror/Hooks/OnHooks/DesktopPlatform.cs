using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for DesktopPlatform class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnDesktopPlatform
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.DesktopPlatform.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.DesktopPlatform.orig_Awake orig,DesktopPlatform self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCreateOnlineSubsystem()
{
if (!HookedList.Contains("CreateOnlineSubsystem"))
{
HookedList.Add("CreateOnlineSubsystem");
On.DesktopPlatform.CreateOnlineSubsystem += CreateOnlineSubsystem;

}
}
internal static event Delegates.CreateOnlineSubsystem_BeforeArgs _beforeCreateOnlineSubsystem;
internal static event Delegates.CreateOnlineSubsystem_AfterArgs _afterCreateOnlineSubsystem;
private static void CreateOnlineSubsystem(On.DesktopPlatform.orig_CreateOnlineSubsystem orig,DesktopPlatform self)
{
Delegates.Params_CreateOnlineSubsystem @params = new() 
{
self = self
};
if (_beforeCreateOnlineSubsystem != null)
{
foreach (Delegates.CreateOnlineSubsystem_BeforeArgs toInvoke in _beforeCreateOnlineSubsystem.GetInvocationList())
{
try
{
_beforeCreateOnlineSubsystem?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterCreateOnlineSubsystem != null)
{
foreach (Delegates.CreateOnlineSubsystem_AfterArgs toInvoke in _afterCreateOnlineSubsystem.GetInvocationList())
{
try
{
_afterCreateOnlineSubsystem.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDestroy()
{
if (!HookedList.Contains("OnDestroy"))
{
HookedList.Add("OnDestroy");
On.DesktopPlatform.OnDestroy += OnDestroy;

}
}
internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
internal static event Delegates.OnDestroy_AfterArgs _afterOnDestroy;
private static void OnDestroy(On.DesktopPlatform.orig_OnDestroy orig,DesktopPlatform self)
{
Delegates.Params_OnDestroy @params = new() 
{
self = self
};
if (_beforeOnDestroy != null)
{
foreach (Delegates.OnDestroy_BeforeArgs toInvoke in _beforeOnDestroy.GetInvocationList())
{
try
{
_beforeOnDestroy?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDestroy != null)
{
foreach (Delegates.OnDestroy_AfterArgs toInvoke in _afterOnDestroy.GetInvocationList())
{
try
{
_afterOnDestroy.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdate()
{
if (!HookedList.Contains("Update"))
{
HookedList.Add("Update");
On.DesktopPlatform.Update += Update;

}
}
internal static event Delegates.Update_BeforeArgs _beforeUpdate;
internal static event Delegates.Update_AfterArgs _afterUpdate;
private static void Update(On.DesktopPlatform.orig_Update orig,DesktopPlatform self)
{
Delegates.Params_Update @params = new() 
{
self = self
};
if (_beforeUpdate != null)
{
foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
{
try
{
_beforeUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdate != null)
{
foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
{
try
{
_afterUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_DisplayName()
{
if (!HookedList.Contains("get_DisplayName"))
{
HookedList.Add("get_DisplayName");
new Hook(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_DisplayName", true), get_DisplayName);

}
}
internal static event Delegates.get_DisplayName_BeforeArgs _beforeget_DisplayName;
internal static event Delegates.get_DisplayName_AfterArgs _afterget_DisplayName;
private static string get_DisplayName(Func<DesktopPlatform, string> orig, DesktopPlatform self)
{
Delegates.Params_get_DisplayName @params = new() 
{
self = self
};
if (_beforeget_DisplayName != null)
{
foreach (Delegates.get_DisplayName_BeforeArgs toInvoke in _beforeget_DisplayName.GetInvocationList())
{
try
{
_beforeget_DisplayName?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_DisplayName != null)
{
foreach (Delegates.get_DisplayName_AfterArgs toInvoke in _afterget_DisplayName.GetInvocationList())
{
try
{
retVal = _afterget_DisplayName.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookIsSaveSlotInUse()
{
if (!HookedList.Contains("IsSaveSlotInUse"))
{
HookedList.Add("IsSaveSlotInUse");
On.DesktopPlatform.IsSaveSlotInUse += IsSaveSlotInUse;

}
}
internal static event Delegates.IsSaveSlotInUse_BeforeArgs _beforeIsSaveSlotInUse;
internal static event Delegates.IsSaveSlotInUse_AfterArgs _afterIsSaveSlotInUse;
private static void IsSaveSlotInUse(On.DesktopPlatform.orig_IsSaveSlotInUse orig,DesktopPlatform self,  int slotIndex,  System.Action<bool> callback)
{
Delegates.Params_IsSaveSlotInUse @params = new() 
{
self = self
, slotIndex = slotIndex
, callback = callback
};
if (_beforeIsSaveSlotInUse != null)
{
foreach (Delegates.IsSaveSlotInUse_BeforeArgs toInvoke in _beforeIsSaveSlotInUse.GetInvocationList())
{
try
{
_beforeIsSaveSlotInUse?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
slotIndex = @params.slotIndex;
callback = @params.callback;
orig(self, slotIndex, callback);
if (_afterIsSaveSlotInUse != null)
{
foreach (Delegates.IsSaveSlotInUse_AfterArgs toInvoke in _afterIsSaveSlotInUse.GetInvocationList())
{
try
{
_afterIsSaveSlotInUse.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookLocalIsSaveSlotInUse()
{
if (!HookedList.Contains("LocalIsSaveSlotInUse"))
{
HookedList.Add("LocalIsSaveSlotInUse");
On.DesktopPlatform.LocalIsSaveSlotInUse += LocalIsSaveSlotInUse;

}
}
internal static event Delegates.LocalIsSaveSlotInUse_BeforeArgs _beforeLocalIsSaveSlotInUse;
internal static event Delegates.LocalIsSaveSlotInUse_AfterArgs _afterLocalIsSaveSlotInUse;
private static void LocalIsSaveSlotInUse(On.DesktopPlatform.orig_LocalIsSaveSlotInUse orig,DesktopPlatform self,  int slotIndex,  System.Action<bool> callback)
{
Delegates.Params_LocalIsSaveSlotInUse @params = new() 
{
self = self
, slotIndex = slotIndex
, callback = callback
};
if (_beforeLocalIsSaveSlotInUse != null)
{
foreach (Delegates.LocalIsSaveSlotInUse_BeforeArgs toInvoke in _beforeLocalIsSaveSlotInUse.GetInvocationList())
{
try
{
_beforeLocalIsSaveSlotInUse?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
slotIndex = @params.slotIndex;
callback = @params.callback;
orig(self, slotIndex, callback);
if (_afterLocalIsSaveSlotInUse != null)
{
foreach (Delegates.LocalIsSaveSlotInUse_AfterArgs toInvoke in _afterLocalIsSaveSlotInUse.GetInvocationList())
{
try
{
_afterLocalIsSaveSlotInUse.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookReadSaveSlot()
{
if (!HookedList.Contains("ReadSaveSlot"))
{
HookedList.Add("ReadSaveSlot");
On.DesktopPlatform.ReadSaveSlot += ReadSaveSlot;

}
}
internal static event Delegates.ReadSaveSlot_BeforeArgs _beforeReadSaveSlot;
internal static event Delegates.ReadSaveSlot_AfterArgs _afterReadSaveSlot;
private static void ReadSaveSlot(On.DesktopPlatform.orig_ReadSaveSlot orig,DesktopPlatform self,  int slotIndex,  System.Action<byte[]> callback)
{
Delegates.Params_ReadSaveSlot @params = new() 
{
self = self
, slotIndex = slotIndex
, callback = callback
};
if (_beforeReadSaveSlot != null)
{
foreach (Delegates.ReadSaveSlot_BeforeArgs toInvoke in _beforeReadSaveSlot.GetInvocationList())
{
try
{
_beforeReadSaveSlot?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
slotIndex = @params.slotIndex;
callback = @params.callback;
orig(self, slotIndex, callback);
if (_afterReadSaveSlot != null)
{
foreach (Delegates.ReadSaveSlot_AfterArgs toInvoke in _afterReadSaveSlot.GetInvocationList())
{
try
{
_afterReadSaveSlot.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookLocalReadSaveSlot()
{
if (!HookedList.Contains("LocalReadSaveSlot"))
{
HookedList.Add("LocalReadSaveSlot");
On.DesktopPlatform.LocalReadSaveSlot += LocalReadSaveSlot;

}
}
internal static event Delegates.LocalReadSaveSlot_BeforeArgs _beforeLocalReadSaveSlot;
internal static event Delegates.LocalReadSaveSlot_AfterArgs _afterLocalReadSaveSlot;
private static void LocalReadSaveSlot(On.DesktopPlatform.orig_LocalReadSaveSlot orig,DesktopPlatform self,  int slotIndex,  System.Action<byte[]> callback)
{
Delegates.Params_LocalReadSaveSlot @params = new() 
{
self = self
, slotIndex = slotIndex
, callback = callback
};
if (_beforeLocalReadSaveSlot != null)
{
foreach (Delegates.LocalReadSaveSlot_BeforeArgs toInvoke in _beforeLocalReadSaveSlot.GetInvocationList())
{
try
{
_beforeLocalReadSaveSlot?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
slotIndex = @params.slotIndex;
callback = @params.callback;
orig(self, slotIndex, callback);
if (_afterLocalReadSaveSlot != null)
{
foreach (Delegates.LocalReadSaveSlot_AfterArgs toInvoke in _afterLocalReadSaveSlot.GetInvocationList())
{
try
{
_afterLocalReadSaveSlot.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookEnsureSaveSlotSpace()
{
if (!HookedList.Contains("EnsureSaveSlotSpace"))
{
HookedList.Add("EnsureSaveSlotSpace");
On.DesktopPlatform.EnsureSaveSlotSpace += EnsureSaveSlotSpace;

}
}
internal static event Delegates.EnsureSaveSlotSpace_BeforeArgs _beforeEnsureSaveSlotSpace;
internal static event Delegates.EnsureSaveSlotSpace_AfterArgs _afterEnsureSaveSlotSpace;
private static void EnsureSaveSlotSpace(On.DesktopPlatform.orig_EnsureSaveSlotSpace orig,DesktopPlatform self,  int slotIndex,  System.Action<bool> callback)
{
Delegates.Params_EnsureSaveSlotSpace @params = new() 
{
self = self
, slotIndex = slotIndex
, callback = callback
};
if (_beforeEnsureSaveSlotSpace != null)
{
foreach (Delegates.EnsureSaveSlotSpace_BeforeArgs toInvoke in _beforeEnsureSaveSlotSpace.GetInvocationList())
{
try
{
_beforeEnsureSaveSlotSpace?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
slotIndex = @params.slotIndex;
callback = @params.callback;
orig(self, slotIndex, callback);
if (_afterEnsureSaveSlotSpace != null)
{
foreach (Delegates.EnsureSaveSlotSpace_AfterArgs toInvoke in _afterEnsureSaveSlotSpace.GetInvocationList())
{
try
{
_afterEnsureSaveSlotSpace.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookWriteSaveSlot()
{
if (!HookedList.Contains("WriteSaveSlot"))
{
HookedList.Add("WriteSaveSlot");
On.DesktopPlatform.WriteSaveSlot += WriteSaveSlot;

}
}
internal static event Delegates.WriteSaveSlot_BeforeArgs _beforeWriteSaveSlot;
internal static event Delegates.WriteSaveSlot_AfterArgs _afterWriteSaveSlot;
private static void WriteSaveSlot(On.DesktopPlatform.orig_WriteSaveSlot orig,DesktopPlatform self,  int slotIndex,  byte[] bytes,  System.Action<bool> callback)
{
Delegates.Params_WriteSaveSlot @params = new() 
{
self = self
, slotIndex = slotIndex
, bytes = bytes
, callback = callback
};
if (_beforeWriteSaveSlot != null)
{
foreach (Delegates.WriteSaveSlot_BeforeArgs toInvoke in _beforeWriteSaveSlot.GetInvocationList())
{
try
{
_beforeWriteSaveSlot?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
slotIndex = @params.slotIndex;
bytes = @params.bytes;
callback = @params.callback;
orig(self, slotIndex, bytes, callback);
if (_afterWriteSaveSlot != null)
{
foreach (Delegates.WriteSaveSlot_AfterArgs toInvoke in _afterWriteSaveSlot.GetInvocationList())
{
try
{
_afterWriteSaveSlot.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetBackupNumber()
{
if (!HookedList.Contains("GetBackupNumber"))
{
HookedList.Add("GetBackupNumber");
On.DesktopPlatform.GetBackupNumber += GetBackupNumber;

}
}
internal static event Delegates.GetBackupNumber_BeforeArgs _beforeGetBackupNumber;
internal static event Delegates.GetBackupNumber_AfterArgs _afterGetBackupNumber;
private static int GetBackupNumber(On.DesktopPlatform.orig_GetBackupNumber orig,DesktopPlatform self,  string backupPath)
{
Delegates.Params_GetBackupNumber @params = new() 
{
self = self
, backupPath = backupPath
};
if (_beforeGetBackupNumber != null)
{
foreach (Delegates.GetBackupNumber_BeforeArgs toInvoke in _beforeGetBackupNumber.GetInvocationList())
{
try
{
_beforeGetBackupNumber?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
backupPath = @params.backupPath;
var retVal = orig(self, backupPath);
if (_afterGetBackupNumber != null)
{
foreach (Delegates.GetBackupNumber_AfterArgs toInvoke in _afterGetBackupNumber.GetInvocationList())
{
try
{
retVal = _afterGetBackupNumber.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookClearSaveSlot()
{
if (!HookedList.Contains("ClearSaveSlot"))
{
HookedList.Add("ClearSaveSlot");
On.DesktopPlatform.ClearSaveSlot += ClearSaveSlot;

}
}
internal static event Delegates.ClearSaveSlot_BeforeArgs _beforeClearSaveSlot;
internal static event Delegates.ClearSaveSlot_AfterArgs _afterClearSaveSlot;
private static void ClearSaveSlot(On.DesktopPlatform.orig_ClearSaveSlot orig,DesktopPlatform self,  int slotIndex,  System.Action<bool> callback)
{
Delegates.Params_ClearSaveSlot @params = new() 
{
self = self
, slotIndex = slotIndex
, callback = callback
};
if (_beforeClearSaveSlot != null)
{
foreach (Delegates.ClearSaveSlot_BeforeArgs toInvoke in _beforeClearSaveSlot.GetInvocationList())
{
try
{
_beforeClearSaveSlot?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
slotIndex = @params.slotIndex;
callback = @params.callback;
orig(self, slotIndex, callback);
if (_afterClearSaveSlot != null)
{
foreach (Delegates.ClearSaveSlot_AfterArgs toInvoke in _afterClearSaveSlot.GetInvocationList())
{
try
{
_afterClearSaveSlot.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookIsAchievementUnlocked()
{
if (!HookedList.Contains("IsAchievementUnlocked"))
{
HookedList.Add("IsAchievementUnlocked");
On.DesktopPlatform.IsAchievementUnlocked += IsAchievementUnlocked;

}
}
internal static event Delegates.IsAchievementUnlocked_BeforeArgs _beforeIsAchievementUnlocked;
internal static event Delegates.IsAchievementUnlocked_AfterArgs _afterIsAchievementUnlocked;
private static bool? IsAchievementUnlocked(On.DesktopPlatform.orig_IsAchievementUnlocked orig,DesktopPlatform self,  string achievementId)
{
Delegates.Params_IsAchievementUnlocked @params = new() 
{
self = self
, achievementId = achievementId
};
if (_beforeIsAchievementUnlocked != null)
{
foreach (Delegates.IsAchievementUnlocked_BeforeArgs toInvoke in _beforeIsAchievementUnlocked.GetInvocationList())
{
try
{
_beforeIsAchievementUnlocked?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
achievementId = @params.achievementId;
var retVal = orig(self, achievementId);
if (_afterIsAchievementUnlocked != null)
{
foreach (Delegates.IsAchievementUnlocked_AfterArgs toInvoke in _afterIsAchievementUnlocked.GetInvocationList())
{
try
{
retVal = _afterIsAchievementUnlocked.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookPushAchievementUnlock()
{
if (!HookedList.Contains("PushAchievementUnlock"))
{
HookedList.Add("PushAchievementUnlock");
On.DesktopPlatform.PushAchievementUnlock += PushAchievementUnlock;

}
}
internal static event Delegates.PushAchievementUnlock_BeforeArgs _beforePushAchievementUnlock;
internal static event Delegates.PushAchievementUnlock_AfterArgs _afterPushAchievementUnlock;
private static void PushAchievementUnlock(On.DesktopPlatform.orig_PushAchievementUnlock orig,DesktopPlatform self,  string achievementId)
{
Delegates.Params_PushAchievementUnlock @params = new() 
{
self = self
, achievementId = achievementId
};
if (_beforePushAchievementUnlock != null)
{
foreach (Delegates.PushAchievementUnlock_BeforeArgs toInvoke in _beforePushAchievementUnlock.GetInvocationList())
{
try
{
_beforePushAchievementUnlock?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
achievementId = @params.achievementId;
orig(self, achievementId);
if (_afterPushAchievementUnlock != null)
{
foreach (Delegates.PushAchievementUnlock_AfterArgs toInvoke in _afterPushAchievementUnlock.GetInvocationList())
{
try
{
_afterPushAchievementUnlock.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookResetAchievements()
{
if (!HookedList.Contains("ResetAchievements"))
{
HookedList.Add("ResetAchievements");
On.DesktopPlatform.ResetAchievements += ResetAchievements;

}
}
internal static event Delegates.ResetAchievements_BeforeArgs _beforeResetAchievements;
internal static event Delegates.ResetAchievements_AfterArgs _afterResetAchievements;
private static void ResetAchievements(On.DesktopPlatform.orig_ResetAchievements orig,DesktopPlatform self)
{
Delegates.Params_ResetAchievements @params = new() 
{
self = self
};
if (_beforeResetAchievements != null)
{
foreach (Delegates.ResetAchievements_BeforeArgs toInvoke in _beforeResetAchievements.GetInvocationList())
{
try
{
_beforeResetAchievements?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterResetAchievements != null)
{
foreach (Delegates.ResetAchievements_AfterArgs toInvoke in _afterResetAchievements.GetInvocationList())
{
try
{
_afterResetAchievements.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_AreAchievementsFetched()
{
if (!HookedList.Contains("get_AreAchievementsFetched"))
{
HookedList.Add("get_AreAchievementsFetched");
new Hook(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_AreAchievementsFetched", true), get_AreAchievementsFetched);

}
}
internal static event Delegates.get_AreAchievementsFetched_BeforeArgs _beforeget_AreAchievementsFetched;
internal static event Delegates.get_AreAchievementsFetched_AfterArgs _afterget_AreAchievementsFetched;
private static bool get_AreAchievementsFetched(Func<DesktopPlatform, bool> orig, DesktopPlatform self)
{
Delegates.Params_get_AreAchievementsFetched @params = new() 
{
self = self
};
if (_beforeget_AreAchievementsFetched != null)
{
foreach (Delegates.get_AreAchievementsFetched_BeforeArgs toInvoke in _beforeget_AreAchievementsFetched.GetInvocationList())
{
try
{
_beforeget_AreAchievementsFetched?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_AreAchievementsFetched != null)
{
foreach (Delegates.get_AreAchievementsFetched_AfterArgs toInvoke in _afterget_AreAchievementsFetched.GetInvocationList())
{
try
{
retVal = _afterget_AreAchievementsFetched.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_HasNativeAchievementsDialog()
{
if (!HookedList.Contains("get_HasNativeAchievementsDialog"))
{
HookedList.Add("get_HasNativeAchievementsDialog");
new Hook(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_HasNativeAchievementsDialog", true), get_HasNativeAchievementsDialog);

}
}
internal static event Delegates.get_HasNativeAchievementsDialog_BeforeArgs _beforeget_HasNativeAchievementsDialog;
internal static event Delegates.get_HasNativeAchievementsDialog_AfterArgs _afterget_HasNativeAchievementsDialog;
private static bool get_HasNativeAchievementsDialog(Func<DesktopPlatform, bool> orig, DesktopPlatform self)
{
Delegates.Params_get_HasNativeAchievementsDialog @params = new() 
{
self = self
};
if (_beforeget_HasNativeAchievementsDialog != null)
{
foreach (Delegates.get_HasNativeAchievementsDialog_BeforeArgs toInvoke in _beforeget_HasNativeAchievementsDialog.GetInvocationList())
{
try
{
_beforeget_HasNativeAchievementsDialog?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_HasNativeAchievementsDialog != null)
{
foreach (Delegates.get_HasNativeAchievementsDialog_AfterArgs toInvoke in _afterget_HasNativeAchievementsDialog.GetInvocationList())
{
try
{
retVal = _afterget_HasNativeAchievementsDialog.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookIncludesPlugin()
{
if (!HookedList.Contains("IncludesPlugin"))
{
HookedList.Add("IncludesPlugin");
On.DesktopPlatform.IncludesPlugin += IncludesPlugin;

}
}
internal static event Delegates.IncludesPlugin_BeforeArgs _beforeIncludesPlugin;
internal static event Delegates.IncludesPlugin_AfterArgs _afterIncludesPlugin;
private static bool IncludesPlugin(On.DesktopPlatform.orig_IncludesPlugin orig,DesktopPlatform self,  string pluginName)
{
Delegates.Params_IncludesPlugin @params = new() 
{
self = self
, pluginName = pluginName
};
if (_beforeIncludesPlugin != null)
{
foreach (Delegates.IncludesPlugin_BeforeArgs toInvoke in _beforeIncludesPlugin.GetInvocationList())
{
try
{
_beforeIncludesPlugin?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
pluginName = @params.pluginName;
var retVal = orig(self, pluginName);
if (_afterIncludesPlugin != null)
{
foreach (Delegates.IncludesPlugin_AfterArgs toInvoke in _afterIncludesPlugin.GetInvocationList())
{
try
{
retVal = _afterIncludesPlugin.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookOnOnlineSubsystemAchievementsFetched()
{
if (!HookedList.Contains("OnOnlineSubsystemAchievementsFetched"))
{
HookedList.Add("OnOnlineSubsystemAchievementsFetched");
On.DesktopPlatform.OnOnlineSubsystemAchievementsFetched += OnOnlineSubsystemAchievementsFetched;

}
}
internal static event Delegates.OnOnlineSubsystemAchievementsFetched_BeforeArgs _beforeOnOnlineSubsystemAchievementsFetched;
internal static event Delegates.OnOnlineSubsystemAchievementsFetched_AfterArgs _afterOnOnlineSubsystemAchievementsFetched;
private static void OnOnlineSubsystemAchievementsFetched(On.DesktopPlatform.orig_OnOnlineSubsystemAchievementsFetched orig,DesktopPlatform self)
{
Delegates.Params_OnOnlineSubsystemAchievementsFetched @params = new() 
{
self = self
};
if (_beforeOnOnlineSubsystemAchievementsFetched != null)
{
foreach (Delegates.OnOnlineSubsystemAchievementsFetched_BeforeArgs toInvoke in _beforeOnOnlineSubsystemAchievementsFetched.GetInvocationList())
{
try
{
_beforeOnOnlineSubsystemAchievementsFetched?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnOnlineSubsystemAchievementsFetched != null)
{
foreach (Delegates.OnOnlineSubsystemAchievementsFetched_AfterArgs toInvoke in _afterOnOnlineSubsystemAchievementsFetched.GetInvocationList())
{
try
{
_afterOnOnlineSubsystemAchievementsFetched.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_ShowLanguageSelect()
{
if (!HookedList.Contains("get_ShowLanguageSelect"))
{
HookedList.Add("get_ShowLanguageSelect");
new Hook(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_ShowLanguageSelect", true), get_ShowLanguageSelect);

}
}
internal static event Delegates.get_ShowLanguageSelect_BeforeArgs _beforeget_ShowLanguageSelect;
internal static event Delegates.get_ShowLanguageSelect_AfterArgs _afterget_ShowLanguageSelect;
private static bool get_ShowLanguageSelect(Func<DesktopPlatform, bool> orig, DesktopPlatform self)
{
Delegates.Params_get_ShowLanguageSelect @params = new() 
{
self = self
};
if (_beforeget_ShowLanguageSelect != null)
{
foreach (Delegates.get_ShowLanguageSelect_BeforeArgs toInvoke in _beforeget_ShowLanguageSelect.GetInvocationList())
{
try
{
_beforeget_ShowLanguageSelect?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_ShowLanguageSelect != null)
{
foreach (Delegates.get_ShowLanguageSelect_AfterArgs toInvoke in _afterget_ShowLanguageSelect.GetInvocationList())
{
try
{
retVal = _afterget_ShowLanguageSelect.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_IsControllerImplicit()
{
if (!HookedList.Contains("get_IsControllerImplicit"))
{
HookedList.Add("get_IsControllerImplicit");
new Hook(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_IsControllerImplicit", true), get_IsControllerImplicit);

}
}
internal static event Delegates.get_IsControllerImplicit_BeforeArgs _beforeget_IsControllerImplicit;
internal static event Delegates.get_IsControllerImplicit_AfterArgs _afterget_IsControllerImplicit;
private static bool get_IsControllerImplicit(Func<DesktopPlatform, bool> orig, DesktopPlatform self)
{
Delegates.Params_get_IsControllerImplicit @params = new() 
{
self = self
};
if (_beforeget_IsControllerImplicit != null)
{
foreach (Delegates.get_IsControllerImplicit_BeforeArgs toInvoke in _beforeget_IsControllerImplicit.GetInvocationList())
{
try
{
_beforeget_IsControllerImplicit?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_IsControllerImplicit != null)
{
foreach (Delegates.get_IsControllerImplicit_AfterArgs toInvoke in _afterget_IsControllerImplicit.GetInvocationList())
{
try
{
retVal = _afterget_IsControllerImplicit.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_WillPreloadSaveFiles()
{
if (!HookedList.Contains("get_WillPreloadSaveFiles"))
{
HookedList.Add("get_WillPreloadSaveFiles");
new Hook(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_WillPreloadSaveFiles", true), get_WillPreloadSaveFiles);

}
}
internal static event Delegates.get_WillPreloadSaveFiles_BeforeArgs _beforeget_WillPreloadSaveFiles;
internal static event Delegates.get_WillPreloadSaveFiles_AfterArgs _afterget_WillPreloadSaveFiles;
private static bool get_WillPreloadSaveFiles(Func<DesktopPlatform, bool> orig, DesktopPlatform self)
{
Delegates.Params_get_WillPreloadSaveFiles @params = new() 
{
self = self
};
if (_beforeget_WillPreloadSaveFiles != null)
{
foreach (Delegates.get_WillPreloadSaveFiles_BeforeArgs toInvoke in _beforeget_WillPreloadSaveFiles.GetInvocationList())
{
try
{
_beforeget_WillPreloadSaveFiles?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_WillPreloadSaveFiles != null)
{
foreach (Delegates.get_WillPreloadSaveFiles_AfterArgs toInvoke in _afterget_WillPreloadSaveFiles.GetInvocationList())
{
try
{
retVal = _afterget_WillPreloadSaveFiles.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_EngagedDisplayName()
{
if (!HookedList.Contains("get_EngagedDisplayName"))
{
HookedList.Add("get_EngagedDisplayName");
new Hook(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_EngagedDisplayName", true), get_EngagedDisplayName);

}
}
internal static event Delegates.get_EngagedDisplayName_BeforeArgs _beforeget_EngagedDisplayName;
internal static event Delegates.get_EngagedDisplayName_AfterArgs _afterget_EngagedDisplayName;
private static string get_EngagedDisplayName(Func<DesktopPlatform, string> orig, DesktopPlatform self)
{
Delegates.Params_get_EngagedDisplayName @params = new() 
{
self = self
};
if (_beforeget_EngagedDisplayName != null)
{
foreach (Delegates.get_EngagedDisplayName_BeforeArgs toInvoke in _beforeget_EngagedDisplayName.GetInvocationList())
{
try
{
_beforeget_EngagedDisplayName?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_EngagedDisplayName != null)
{
foreach (Delegates.get_EngagedDisplayName_AfterArgs toInvoke in _afterget_EngagedDisplayName.GetInvocationList())
{
try
{
retVal = _afterget_EngagedDisplayName.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_EngagedDisplayImage()
{
if (!HookedList.Contains("get_EngagedDisplayImage"))
{
HookedList.Add("get_EngagedDisplayImage");
new Hook(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_EngagedDisplayImage", true), get_EngagedDisplayImage);

}
}
internal static event Delegates.get_EngagedDisplayImage_BeforeArgs _beforeget_EngagedDisplayImage;
internal static event Delegates.get_EngagedDisplayImage_AfterArgs _afterget_EngagedDisplayImage;
private static UnityEngine.Texture2D get_EngagedDisplayImage(Func<DesktopPlatform, UnityEngine.Texture2D> orig, DesktopPlatform self)
{
Delegates.Params_get_EngagedDisplayImage @params = new() 
{
self = self
};
if (_beforeget_EngagedDisplayImage != null)
{
foreach (Delegates.get_EngagedDisplayImage_BeforeArgs toInvoke in _beforeget_EngagedDisplayImage.GetInvocationList())
{
try
{
_beforeget_EngagedDisplayImage?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_EngagedDisplayImage != null)
{
foreach (Delegates.get_EngagedDisplayImage_AfterArgs toInvoke in _afterget_EngagedDisplayImage.GetInvocationList())
{
try
{
retVal = _afterget_EngagedDisplayImage.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetVibrationMixer()
{
if (!HookedList.Contains("GetVibrationMixer"))
{
HookedList.Add("GetVibrationMixer");
On.DesktopPlatform.GetVibrationMixer += GetVibrationMixer;

}
}
internal static event Delegates.GetVibrationMixer_BeforeArgs _beforeGetVibrationMixer;
internal static event Delegates.GetVibrationMixer_AfterArgs _afterGetVibrationMixer;
private static VibrationMixer GetVibrationMixer(On.DesktopPlatform.orig_GetVibrationMixer orig,DesktopPlatform self)
{
Delegates.Params_GetVibrationMixer @params = new() 
{
self = self
};
if (_beforeGetVibrationMixer != null)
{
foreach (Delegates.GetVibrationMixer_BeforeArgs toInvoke in _beforeGetVibrationMixer.GetInvocationList())
{
try
{
_beforeGetVibrationMixer?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetVibrationMixer != null)
{
foreach (Delegates.GetVibrationMixer_AfterArgs toInvoke in _afterGetVibrationMixer.GetInvocationList())
{
try
{
retVal = _afterGetVibrationMixer.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Awake
{
public DesktopPlatform self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<DesktopPlatform> orig, DesktopPlatform self);
public sealed class Params_CreateOnlineSubsystem
{
public DesktopPlatform self;
}
public delegate void CreateOnlineSubsystem_BeforeArgs(Params_CreateOnlineSubsystem args);
public delegate void CreateOnlineSubsystem_AfterArgs(Params_CreateOnlineSubsystem args);
public delegate void CreateOnlineSubsystem_WithArgs (Action<DesktopPlatform> orig, DesktopPlatform self);
public sealed class Params_OnDestroy
{
public DesktopPlatform self;
}
public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);
public delegate void OnDestroy_AfterArgs(Params_OnDestroy args);
public delegate void OnDestroy_WithArgs (Action<DesktopPlatform> orig, DesktopPlatform self);
public sealed class Params_Update
{
public DesktopPlatform self;
}
public delegate void Update_BeforeArgs(Params_Update args);
public delegate void Update_AfterArgs(Params_Update args);
public delegate void Update_WithArgs (Action<DesktopPlatform> orig, DesktopPlatform self);
public sealed class Params_get_DisplayName
{
public DesktopPlatform self;
}
public delegate void get_DisplayName_BeforeArgs(Params_get_DisplayName args);
public delegate string get_DisplayName_AfterArgs(Params_get_DisplayName args, string ret);
public delegate string get_DisplayName_WithArgs (Func<DesktopPlatform, string> orig, DesktopPlatform self);
public sealed class Params_IsSaveSlotInUse
{
public DesktopPlatform self;
public int slotIndex;
public System.Action<bool> callback;
}
public delegate void IsSaveSlotInUse_BeforeArgs(Params_IsSaveSlotInUse args);
public delegate void IsSaveSlotInUse_AfterArgs(Params_IsSaveSlotInUse args);
public delegate void IsSaveSlotInUse_WithArgs (Action<DesktopPlatform,  int,  System.Action<bool>> orig, DesktopPlatform self,  int slotIndex,  System.Action<bool> callback);
public sealed class Params_LocalIsSaveSlotInUse
{
public DesktopPlatform self;
public int slotIndex;
public System.Action<bool> callback;
}
public delegate void LocalIsSaveSlotInUse_BeforeArgs(Params_LocalIsSaveSlotInUse args);
public delegate void LocalIsSaveSlotInUse_AfterArgs(Params_LocalIsSaveSlotInUse args);
public delegate void LocalIsSaveSlotInUse_WithArgs (Action<DesktopPlatform,  int,  System.Action<bool>> orig, DesktopPlatform self,  int slotIndex,  System.Action<bool> callback);
public sealed class Params_ReadSaveSlot
{
public DesktopPlatform self;
public int slotIndex;
public System.Action<byte[]> callback;
}
public delegate void ReadSaveSlot_BeforeArgs(Params_ReadSaveSlot args);
public delegate void ReadSaveSlot_AfterArgs(Params_ReadSaveSlot args);
public delegate void ReadSaveSlot_WithArgs (Action<DesktopPlatform,  int,  System.Action<byte[]>> orig, DesktopPlatform self,  int slotIndex,  System.Action<byte[]> callback);
public sealed class Params_LocalReadSaveSlot
{
public DesktopPlatform self;
public int slotIndex;
public System.Action<byte[]> callback;
}
public delegate void LocalReadSaveSlot_BeforeArgs(Params_LocalReadSaveSlot args);
public delegate void LocalReadSaveSlot_AfterArgs(Params_LocalReadSaveSlot args);
public delegate void LocalReadSaveSlot_WithArgs (Action<DesktopPlatform,  int,  System.Action<byte[]>> orig, DesktopPlatform self,  int slotIndex,  System.Action<byte[]> callback);
public sealed class Params_EnsureSaveSlotSpace
{
public DesktopPlatform self;
public int slotIndex;
public System.Action<bool> callback;
}
public delegate void EnsureSaveSlotSpace_BeforeArgs(Params_EnsureSaveSlotSpace args);
public delegate void EnsureSaveSlotSpace_AfterArgs(Params_EnsureSaveSlotSpace args);
public delegate void EnsureSaveSlotSpace_WithArgs (Action<DesktopPlatform,  int,  System.Action<bool>> orig, DesktopPlatform self,  int slotIndex,  System.Action<bool> callback);
public sealed class Params_WriteSaveSlot
{
public DesktopPlatform self;
public int slotIndex;
public byte[] bytes;
public System.Action<bool> callback;
}
public delegate void WriteSaveSlot_BeforeArgs(Params_WriteSaveSlot args);
public delegate void WriteSaveSlot_AfterArgs(Params_WriteSaveSlot args);
public delegate void WriteSaveSlot_WithArgs (Action<DesktopPlatform,  int,  byte[],  System.Action<bool>> orig, DesktopPlatform self,  int slotIndex,  byte[] bytes,  System.Action<bool> callback);
public sealed class Params_GetBackupNumber
{
public DesktopPlatform self;
public string backupPath;
}
public delegate void GetBackupNumber_BeforeArgs(Params_GetBackupNumber args);
public delegate int GetBackupNumber_AfterArgs(Params_GetBackupNumber args, int ret);
public delegate int GetBackupNumber_WithArgs (Func<DesktopPlatform,  string, int> orig, DesktopPlatform self,  string backupPath);
public sealed class Params_ClearSaveSlot
{
public DesktopPlatform self;
public int slotIndex;
public System.Action<bool> callback;
}
public delegate void ClearSaveSlot_BeforeArgs(Params_ClearSaveSlot args);
public delegate void ClearSaveSlot_AfterArgs(Params_ClearSaveSlot args);
public delegate void ClearSaveSlot_WithArgs (Action<DesktopPlatform,  int,  System.Action<bool>> orig, DesktopPlatform self,  int slotIndex,  System.Action<bool> callback);
public sealed class Params_IsAchievementUnlocked
{
public DesktopPlatform self;
public string achievementId;
}
public delegate void IsAchievementUnlocked_BeforeArgs(Params_IsAchievementUnlocked args);
public delegate bool? IsAchievementUnlocked_AfterArgs(Params_IsAchievementUnlocked args, bool? ret);
public delegate bool? IsAchievementUnlocked_WithArgs (Func<DesktopPlatform,  string, bool?> orig, DesktopPlatform self,  string achievementId);
public sealed class Params_PushAchievementUnlock
{
public DesktopPlatform self;
public string achievementId;
}
public delegate void PushAchievementUnlock_BeforeArgs(Params_PushAchievementUnlock args);
public delegate void PushAchievementUnlock_AfterArgs(Params_PushAchievementUnlock args);
public delegate void PushAchievementUnlock_WithArgs (Action<DesktopPlatform,  string> orig, DesktopPlatform self,  string achievementId);
public sealed class Params_ResetAchievements
{
public DesktopPlatform self;
}
public delegate void ResetAchievements_BeforeArgs(Params_ResetAchievements args);
public delegate void ResetAchievements_AfterArgs(Params_ResetAchievements args);
public delegate void ResetAchievements_WithArgs (Action<DesktopPlatform> orig, DesktopPlatform self);
public sealed class Params_get_AreAchievementsFetched
{
public DesktopPlatform self;
}
public delegate void get_AreAchievementsFetched_BeforeArgs(Params_get_AreAchievementsFetched args);
public delegate bool get_AreAchievementsFetched_AfterArgs(Params_get_AreAchievementsFetched args, bool ret);
public delegate bool get_AreAchievementsFetched_WithArgs (Func<DesktopPlatform, bool> orig, DesktopPlatform self);
public sealed class Params_get_HasNativeAchievementsDialog
{
public DesktopPlatform self;
}
public delegate void get_HasNativeAchievementsDialog_BeforeArgs(Params_get_HasNativeAchievementsDialog args);
public delegate bool get_HasNativeAchievementsDialog_AfterArgs(Params_get_HasNativeAchievementsDialog args, bool ret);
public delegate bool get_HasNativeAchievementsDialog_WithArgs (Func<DesktopPlatform, bool> orig, DesktopPlatform self);
public sealed class Params_IncludesPlugin
{
public DesktopPlatform self;
public string pluginName;
}
public delegate void IncludesPlugin_BeforeArgs(Params_IncludesPlugin args);
public delegate bool IncludesPlugin_AfterArgs(Params_IncludesPlugin args, bool ret);
public delegate bool IncludesPlugin_WithArgs (Func<DesktopPlatform,  string, bool> orig, DesktopPlatform self,  string pluginName);
public sealed class Params_OnOnlineSubsystemAchievementsFetched
{
public DesktopPlatform self;
}
public delegate void OnOnlineSubsystemAchievementsFetched_BeforeArgs(Params_OnOnlineSubsystemAchievementsFetched args);
public delegate void OnOnlineSubsystemAchievementsFetched_AfterArgs(Params_OnOnlineSubsystemAchievementsFetched args);
public delegate void OnOnlineSubsystemAchievementsFetched_WithArgs (Action<DesktopPlatform> orig, DesktopPlatform self);
public sealed class Params_get_ShowLanguageSelect
{
public DesktopPlatform self;
}
public delegate void get_ShowLanguageSelect_BeforeArgs(Params_get_ShowLanguageSelect args);
public delegate bool get_ShowLanguageSelect_AfterArgs(Params_get_ShowLanguageSelect args, bool ret);
public delegate bool get_ShowLanguageSelect_WithArgs (Func<DesktopPlatform, bool> orig, DesktopPlatform self);
public sealed class Params_get_IsControllerImplicit
{
public DesktopPlatform self;
}
public delegate void get_IsControllerImplicit_BeforeArgs(Params_get_IsControllerImplicit args);
public delegate bool get_IsControllerImplicit_AfterArgs(Params_get_IsControllerImplicit args, bool ret);
public delegate bool get_IsControllerImplicit_WithArgs (Func<DesktopPlatform, bool> orig, DesktopPlatform self);
public sealed class Params_get_WillPreloadSaveFiles
{
public DesktopPlatform self;
}
public delegate void get_WillPreloadSaveFiles_BeforeArgs(Params_get_WillPreloadSaveFiles args);
public delegate bool get_WillPreloadSaveFiles_AfterArgs(Params_get_WillPreloadSaveFiles args, bool ret);
public delegate bool get_WillPreloadSaveFiles_WithArgs (Func<DesktopPlatform, bool> orig, DesktopPlatform self);
public sealed class Params_get_EngagedDisplayName
{
public DesktopPlatform self;
}
public delegate void get_EngagedDisplayName_BeforeArgs(Params_get_EngagedDisplayName args);
public delegate string get_EngagedDisplayName_AfterArgs(Params_get_EngagedDisplayName args, string ret);
public delegate string get_EngagedDisplayName_WithArgs (Func<DesktopPlatform, string> orig, DesktopPlatform self);
public sealed class Params_get_EngagedDisplayImage
{
public DesktopPlatform self;
}
public delegate void get_EngagedDisplayImage_BeforeArgs(Params_get_EngagedDisplayImage args);
public delegate UnityEngine.Texture2D get_EngagedDisplayImage_AfterArgs(Params_get_EngagedDisplayImage args, UnityEngine.Texture2D ret);
public delegate UnityEngine.Texture2D get_EngagedDisplayImage_WithArgs (Func<DesktopPlatform, UnityEngine.Texture2D> orig, DesktopPlatform self);
public sealed class Params_GetVibrationMixer
{
public DesktopPlatform self;
}
public delegate void GetVibrationMixer_BeforeArgs(Params_GetVibrationMixer args);
public delegate VibrationMixer GetVibrationMixer_AfterArgs(Params_GetVibrationMixer args, VibrationMixer ret);
public delegate VibrationMixer GetVibrationMixer_WithArgs (Func<DesktopPlatform, VibrationMixer> orig, DesktopPlatform self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.CreateOnlineSubsystem_BeforeArgs CreateOnlineSubsystem
{
add
{

HookHandler._beforeCreateOnlineSubsystem += value;
HookHandler.HookCreateOnlineSubsystem();
}
remove => HookHandler._beforeCreateOnlineSubsystem -= value;
}
public static event Delegates.OnDestroy_BeforeArgs OnDestroy
{
add
{

HookHandler._beforeOnDestroy += value;
HookHandler.HookOnDestroy();
}
remove => HookHandler._beforeOnDestroy -= value;
}
public static event Delegates.Update_BeforeArgs Update
{
add
{

HookHandler._beforeUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._beforeUpdate -= value;
}
public static event Delegates.get_DisplayName_BeforeArgs get_DisplayName
{
add
{

HookHandler._beforeget_DisplayName += value;
HookHandler.Hookget_DisplayName();
}
remove => HookHandler._beforeget_DisplayName -= value;
}
public static event Delegates.IsSaveSlotInUse_BeforeArgs IsSaveSlotInUse
{
add
{

HookHandler._beforeIsSaveSlotInUse += value;
HookHandler.HookIsSaveSlotInUse();
}
remove => HookHandler._beforeIsSaveSlotInUse -= value;
}
public static event Delegates.LocalIsSaveSlotInUse_BeforeArgs LocalIsSaveSlotInUse
{
add
{

HookHandler._beforeLocalIsSaveSlotInUse += value;
HookHandler.HookLocalIsSaveSlotInUse();
}
remove => HookHandler._beforeLocalIsSaveSlotInUse -= value;
}
public static event Delegates.ReadSaveSlot_BeforeArgs ReadSaveSlot
{
add
{

HookHandler._beforeReadSaveSlot += value;
HookHandler.HookReadSaveSlot();
}
remove => HookHandler._beforeReadSaveSlot -= value;
}
public static event Delegates.LocalReadSaveSlot_BeforeArgs LocalReadSaveSlot
{
add
{

HookHandler._beforeLocalReadSaveSlot += value;
HookHandler.HookLocalReadSaveSlot();
}
remove => HookHandler._beforeLocalReadSaveSlot -= value;
}
public static event Delegates.EnsureSaveSlotSpace_BeforeArgs EnsureSaveSlotSpace
{
add
{

HookHandler._beforeEnsureSaveSlotSpace += value;
HookHandler.HookEnsureSaveSlotSpace();
}
remove => HookHandler._beforeEnsureSaveSlotSpace -= value;
}
public static event Delegates.WriteSaveSlot_BeforeArgs WriteSaveSlot
{
add
{

HookHandler._beforeWriteSaveSlot += value;
HookHandler.HookWriteSaveSlot();
}
remove => HookHandler._beforeWriteSaveSlot -= value;
}
public static event Delegates.GetBackupNumber_BeforeArgs GetBackupNumber
{
add
{

HookHandler._beforeGetBackupNumber += value;
HookHandler.HookGetBackupNumber();
}
remove => HookHandler._beforeGetBackupNumber -= value;
}
public static event Delegates.ClearSaveSlot_BeforeArgs ClearSaveSlot
{
add
{

HookHandler._beforeClearSaveSlot += value;
HookHandler.HookClearSaveSlot();
}
remove => HookHandler._beforeClearSaveSlot -= value;
}
public static event Delegates.IsAchievementUnlocked_BeforeArgs IsAchievementUnlocked
{
add
{

HookHandler._beforeIsAchievementUnlocked += value;
HookHandler.HookIsAchievementUnlocked();
}
remove => HookHandler._beforeIsAchievementUnlocked -= value;
}
public static event Delegates.PushAchievementUnlock_BeforeArgs PushAchievementUnlock
{
add
{

HookHandler._beforePushAchievementUnlock += value;
HookHandler.HookPushAchievementUnlock();
}
remove => HookHandler._beforePushAchievementUnlock -= value;
}
public static event Delegates.ResetAchievements_BeforeArgs ResetAchievements
{
add
{

HookHandler._beforeResetAchievements += value;
HookHandler.HookResetAchievements();
}
remove => HookHandler._beforeResetAchievements -= value;
}
public static event Delegates.get_AreAchievementsFetched_BeforeArgs get_AreAchievementsFetched
{
add
{

HookHandler._beforeget_AreAchievementsFetched += value;
HookHandler.Hookget_AreAchievementsFetched();
}
remove => HookHandler._beforeget_AreAchievementsFetched -= value;
}
public static event Delegates.get_HasNativeAchievementsDialog_BeforeArgs get_HasNativeAchievementsDialog
{
add
{

HookHandler._beforeget_HasNativeAchievementsDialog += value;
HookHandler.Hookget_HasNativeAchievementsDialog();
}
remove => HookHandler._beforeget_HasNativeAchievementsDialog -= value;
}
public static event Delegates.IncludesPlugin_BeforeArgs IncludesPlugin
{
add
{

HookHandler._beforeIncludesPlugin += value;
HookHandler.HookIncludesPlugin();
}
remove => HookHandler._beforeIncludesPlugin -= value;
}
public static event Delegates.OnOnlineSubsystemAchievementsFetched_BeforeArgs OnOnlineSubsystemAchievementsFetched
{
add
{

HookHandler._beforeOnOnlineSubsystemAchievementsFetched += value;
HookHandler.HookOnOnlineSubsystemAchievementsFetched();
}
remove => HookHandler._beforeOnOnlineSubsystemAchievementsFetched -= value;
}
public static event Delegates.get_ShowLanguageSelect_BeforeArgs get_ShowLanguageSelect
{
add
{

HookHandler._beforeget_ShowLanguageSelect += value;
HookHandler.Hookget_ShowLanguageSelect();
}
remove => HookHandler._beforeget_ShowLanguageSelect -= value;
}
public static event Delegates.get_IsControllerImplicit_BeforeArgs get_IsControllerImplicit
{
add
{

HookHandler._beforeget_IsControllerImplicit += value;
HookHandler.Hookget_IsControllerImplicit();
}
remove => HookHandler._beforeget_IsControllerImplicit -= value;
}
public static event Delegates.get_WillPreloadSaveFiles_BeforeArgs get_WillPreloadSaveFiles
{
add
{

HookHandler._beforeget_WillPreloadSaveFiles += value;
HookHandler.Hookget_WillPreloadSaveFiles();
}
remove => HookHandler._beforeget_WillPreloadSaveFiles -= value;
}
public static event Delegates.get_EngagedDisplayName_BeforeArgs get_EngagedDisplayName
{
add
{

HookHandler._beforeget_EngagedDisplayName += value;
HookHandler.Hookget_EngagedDisplayName();
}
remove => HookHandler._beforeget_EngagedDisplayName -= value;
}
public static event Delegates.get_EngagedDisplayImage_BeforeArgs get_EngagedDisplayImage
{
add
{

HookHandler._beforeget_EngagedDisplayImage += value;
HookHandler.Hookget_EngagedDisplayImage();
}
remove => HookHandler._beforeget_EngagedDisplayImage -= value;
}
public static event Delegates.GetVibrationMixer_BeforeArgs GetVibrationMixer
{
add
{

HookHandler._beforeGetVibrationMixer += value;
HookHandler.HookGetVibrationMixer();
}
remove => HookHandler._beforeGetVibrationMixer -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.CreateOnlineSubsystem_AfterArgs CreateOnlineSubsystem
{
add
{

HookHandler._afterCreateOnlineSubsystem += value;
HookHandler.HookCreateOnlineSubsystem();
}
remove => HookHandler._afterCreateOnlineSubsystem -= value;
}
public static event Delegates.OnDestroy_AfterArgs OnDestroy
{
add
{

HookHandler._afterOnDestroy += value;
HookHandler.HookOnDestroy();
}
remove => HookHandler._afterOnDestroy -= value;
}
public static event Delegates.Update_AfterArgs Update
{
add
{

HookHandler._afterUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._afterUpdate -= value;
}
public static event Delegates.get_DisplayName_AfterArgs get_DisplayName
{
add
{

HookHandler._afterget_DisplayName += value;
HookHandler.Hookget_DisplayName();
}
remove => HookHandler._afterget_DisplayName -= value;
}
public static event Delegates.IsSaveSlotInUse_AfterArgs IsSaveSlotInUse
{
add
{

HookHandler._afterIsSaveSlotInUse += value;
HookHandler.HookIsSaveSlotInUse();
}
remove => HookHandler._afterIsSaveSlotInUse -= value;
}
public static event Delegates.LocalIsSaveSlotInUse_AfterArgs LocalIsSaveSlotInUse
{
add
{

HookHandler._afterLocalIsSaveSlotInUse += value;
HookHandler.HookLocalIsSaveSlotInUse();
}
remove => HookHandler._afterLocalIsSaveSlotInUse -= value;
}
public static event Delegates.ReadSaveSlot_AfterArgs ReadSaveSlot
{
add
{

HookHandler._afterReadSaveSlot += value;
HookHandler.HookReadSaveSlot();
}
remove => HookHandler._afterReadSaveSlot -= value;
}
public static event Delegates.LocalReadSaveSlot_AfterArgs LocalReadSaveSlot
{
add
{

HookHandler._afterLocalReadSaveSlot += value;
HookHandler.HookLocalReadSaveSlot();
}
remove => HookHandler._afterLocalReadSaveSlot -= value;
}
public static event Delegates.EnsureSaveSlotSpace_AfterArgs EnsureSaveSlotSpace
{
add
{

HookHandler._afterEnsureSaveSlotSpace += value;
HookHandler.HookEnsureSaveSlotSpace();
}
remove => HookHandler._afterEnsureSaveSlotSpace -= value;
}
public static event Delegates.WriteSaveSlot_AfterArgs WriteSaveSlot
{
add
{

HookHandler._afterWriteSaveSlot += value;
HookHandler.HookWriteSaveSlot();
}
remove => HookHandler._afterWriteSaveSlot -= value;
}
public static event Delegates.GetBackupNumber_AfterArgs GetBackupNumber
{
add
{

HookHandler._afterGetBackupNumber += value;
HookHandler.HookGetBackupNumber();
}
remove => HookHandler._afterGetBackupNumber -= value;
}
public static event Delegates.ClearSaveSlot_AfterArgs ClearSaveSlot
{
add
{

HookHandler._afterClearSaveSlot += value;
HookHandler.HookClearSaveSlot();
}
remove => HookHandler._afterClearSaveSlot -= value;
}
public static event Delegates.IsAchievementUnlocked_AfterArgs IsAchievementUnlocked
{
add
{

HookHandler._afterIsAchievementUnlocked += value;
HookHandler.HookIsAchievementUnlocked();
}
remove => HookHandler._afterIsAchievementUnlocked -= value;
}
public static event Delegates.PushAchievementUnlock_AfterArgs PushAchievementUnlock
{
add
{

HookHandler._afterPushAchievementUnlock += value;
HookHandler.HookPushAchievementUnlock();
}
remove => HookHandler._afterPushAchievementUnlock -= value;
}
public static event Delegates.ResetAchievements_AfterArgs ResetAchievements
{
add
{

HookHandler._afterResetAchievements += value;
HookHandler.HookResetAchievements();
}
remove => HookHandler._afterResetAchievements -= value;
}
public static event Delegates.get_AreAchievementsFetched_AfterArgs get_AreAchievementsFetched
{
add
{

HookHandler._afterget_AreAchievementsFetched += value;
HookHandler.Hookget_AreAchievementsFetched();
}
remove => HookHandler._afterget_AreAchievementsFetched -= value;
}
public static event Delegates.get_HasNativeAchievementsDialog_AfterArgs get_HasNativeAchievementsDialog
{
add
{

HookHandler._afterget_HasNativeAchievementsDialog += value;
HookHandler.Hookget_HasNativeAchievementsDialog();
}
remove => HookHandler._afterget_HasNativeAchievementsDialog -= value;
}
public static event Delegates.IncludesPlugin_AfterArgs IncludesPlugin
{
add
{

HookHandler._afterIncludesPlugin += value;
HookHandler.HookIncludesPlugin();
}
remove => HookHandler._afterIncludesPlugin -= value;
}
public static event Delegates.OnOnlineSubsystemAchievementsFetched_AfterArgs OnOnlineSubsystemAchievementsFetched
{
add
{

HookHandler._afterOnOnlineSubsystemAchievementsFetched += value;
HookHandler.HookOnOnlineSubsystemAchievementsFetched();
}
remove => HookHandler._afterOnOnlineSubsystemAchievementsFetched -= value;
}
public static event Delegates.get_ShowLanguageSelect_AfterArgs get_ShowLanguageSelect
{
add
{

HookHandler._afterget_ShowLanguageSelect += value;
HookHandler.Hookget_ShowLanguageSelect();
}
remove => HookHandler._afterget_ShowLanguageSelect -= value;
}
public static event Delegates.get_IsControllerImplicit_AfterArgs get_IsControllerImplicit
{
add
{

HookHandler._afterget_IsControllerImplicit += value;
HookHandler.Hookget_IsControllerImplicit();
}
remove => HookHandler._afterget_IsControllerImplicit -= value;
}
public static event Delegates.get_WillPreloadSaveFiles_AfterArgs get_WillPreloadSaveFiles
{
add
{

HookHandler._afterget_WillPreloadSaveFiles += value;
HookHandler.Hookget_WillPreloadSaveFiles();
}
remove => HookHandler._afterget_WillPreloadSaveFiles -= value;
}
public static event Delegates.get_EngagedDisplayName_AfterArgs get_EngagedDisplayName
{
add
{

HookHandler._afterget_EngagedDisplayName += value;
HookHandler.Hookget_EngagedDisplayName();
}
remove => HookHandler._afterget_EngagedDisplayName -= value;
}
public static event Delegates.get_EngagedDisplayImage_AfterArgs get_EngagedDisplayImage
{
add
{

HookHandler._afterget_EngagedDisplayImage += value;
HookHandler.Hookget_EngagedDisplayImage();
}
remove => HookHandler._afterget_EngagedDisplayImage -= value;
}
public static event Delegates.GetVibrationMixer_AfterArgs GetVibrationMixer
{
add
{

HookHandler._afterGetVibrationMixer += value;
HookHandler.HookGetVibrationMixer();
}
remove => HookHandler._afterGetVibrationMixer -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.DesktopPlatform.hook_Awake Awake
{
add => On.DesktopPlatform.Awake += value;
remove => On.DesktopPlatform.Awake -= value;
}
public static event On.DesktopPlatform.hook_CreateOnlineSubsystem CreateOnlineSubsystem
{
add => On.DesktopPlatform.CreateOnlineSubsystem += value;
remove => On.DesktopPlatform.CreateOnlineSubsystem -= value;
}
public static event On.DesktopPlatform.hook_OnDestroy OnDestroy
{
add => On.DesktopPlatform.OnDestroy += value;
remove => On.DesktopPlatform.OnDestroy -= value;
}
public static event On.DesktopPlatform.hook_Update Update
{
add => On.DesktopPlatform.Update += value;
remove => On.DesktopPlatform.Update -= value;
}
public static event Delegates.get_DisplayName_WithArgs get_DisplayName
{
add => HookEndpointManager.Add<Delegates.get_DisplayName_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_DisplayName", true), value);
remove => HookEndpointManager.Remove<Delegates.get_DisplayName_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_DisplayName", true), value);
}
public static event On.DesktopPlatform.hook_IsSaveSlotInUse IsSaveSlotInUse
{
add => On.DesktopPlatform.IsSaveSlotInUse += value;
remove => On.DesktopPlatform.IsSaveSlotInUse -= value;
}
public static event On.DesktopPlatform.hook_LocalIsSaveSlotInUse LocalIsSaveSlotInUse
{
add => On.DesktopPlatform.LocalIsSaveSlotInUse += value;
remove => On.DesktopPlatform.LocalIsSaveSlotInUse -= value;
}
public static event On.DesktopPlatform.hook_ReadSaveSlot ReadSaveSlot
{
add => On.DesktopPlatform.ReadSaveSlot += value;
remove => On.DesktopPlatform.ReadSaveSlot -= value;
}
public static event On.DesktopPlatform.hook_LocalReadSaveSlot LocalReadSaveSlot
{
add => On.DesktopPlatform.LocalReadSaveSlot += value;
remove => On.DesktopPlatform.LocalReadSaveSlot -= value;
}
public static event On.DesktopPlatform.hook_EnsureSaveSlotSpace EnsureSaveSlotSpace
{
add => On.DesktopPlatform.EnsureSaveSlotSpace += value;
remove => On.DesktopPlatform.EnsureSaveSlotSpace -= value;
}
public static event On.DesktopPlatform.hook_WriteSaveSlot WriteSaveSlot
{
add => On.DesktopPlatform.WriteSaveSlot += value;
remove => On.DesktopPlatform.WriteSaveSlot -= value;
}
public static event On.DesktopPlatform.hook_GetBackupNumber GetBackupNumber
{
add => On.DesktopPlatform.GetBackupNumber += value;
remove => On.DesktopPlatform.GetBackupNumber -= value;
}
public static event On.DesktopPlatform.hook_ClearSaveSlot ClearSaveSlot
{
add => On.DesktopPlatform.ClearSaveSlot += value;
remove => On.DesktopPlatform.ClearSaveSlot -= value;
}
public static event On.DesktopPlatform.hook_IsAchievementUnlocked IsAchievementUnlocked
{
add => On.DesktopPlatform.IsAchievementUnlocked += value;
remove => On.DesktopPlatform.IsAchievementUnlocked -= value;
}
public static event On.DesktopPlatform.hook_PushAchievementUnlock PushAchievementUnlock
{
add => On.DesktopPlatform.PushAchievementUnlock += value;
remove => On.DesktopPlatform.PushAchievementUnlock -= value;
}
public static event On.DesktopPlatform.hook_ResetAchievements ResetAchievements
{
add => On.DesktopPlatform.ResetAchievements += value;
remove => On.DesktopPlatform.ResetAchievements -= value;
}
public static event Delegates.get_AreAchievementsFetched_WithArgs get_AreAchievementsFetched
{
add => HookEndpointManager.Add<Delegates.get_AreAchievementsFetched_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_AreAchievementsFetched", true), value);
remove => HookEndpointManager.Remove<Delegates.get_AreAchievementsFetched_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_AreAchievementsFetched", true), value);
}
public static event Delegates.get_HasNativeAchievementsDialog_WithArgs get_HasNativeAchievementsDialog
{
add => HookEndpointManager.Add<Delegates.get_HasNativeAchievementsDialog_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_HasNativeAchievementsDialog", true), value);
remove => HookEndpointManager.Remove<Delegates.get_HasNativeAchievementsDialog_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_HasNativeAchievementsDialog", true), value);
}
public static event On.DesktopPlatform.hook_IncludesPlugin IncludesPlugin
{
add => On.DesktopPlatform.IncludesPlugin += value;
remove => On.DesktopPlatform.IncludesPlugin -= value;
}
public static event On.DesktopPlatform.hook_OnOnlineSubsystemAchievementsFetched OnOnlineSubsystemAchievementsFetched
{
add => On.DesktopPlatform.OnOnlineSubsystemAchievementsFetched += value;
remove => On.DesktopPlatform.OnOnlineSubsystemAchievementsFetched -= value;
}
public static event Delegates.get_ShowLanguageSelect_WithArgs get_ShowLanguageSelect
{
add => HookEndpointManager.Add<Delegates.get_ShowLanguageSelect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_ShowLanguageSelect", true), value);
remove => HookEndpointManager.Remove<Delegates.get_ShowLanguageSelect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_ShowLanguageSelect", true), value);
}
public static event Delegates.get_IsControllerImplicit_WithArgs get_IsControllerImplicit
{
add => HookEndpointManager.Add<Delegates.get_IsControllerImplicit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_IsControllerImplicit", true), value);
remove => HookEndpointManager.Remove<Delegates.get_IsControllerImplicit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_IsControllerImplicit", true), value);
}
public static event Delegates.get_WillPreloadSaveFiles_WithArgs get_WillPreloadSaveFiles
{
add => HookEndpointManager.Add<Delegates.get_WillPreloadSaveFiles_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_WillPreloadSaveFiles", true), value);
remove => HookEndpointManager.Remove<Delegates.get_WillPreloadSaveFiles_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_WillPreloadSaveFiles", true), value);
}
public static event Delegates.get_EngagedDisplayName_WithArgs get_EngagedDisplayName
{
add => HookEndpointManager.Add<Delegates.get_EngagedDisplayName_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_EngagedDisplayName", true), value);
remove => HookEndpointManager.Remove<Delegates.get_EngagedDisplayName_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_EngagedDisplayName", true), value);
}
public static event Delegates.get_EngagedDisplayImage_WithArgs get_EngagedDisplayImage
{
add => HookEndpointManager.Add<Delegates.get_EngagedDisplayImage_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_EngagedDisplayImage", true), value);
remove => HookEndpointManager.Remove<Delegates.get_EngagedDisplayImage_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_EngagedDisplayImage", true), value);
}
public static event On.DesktopPlatform.hook_GetVibrationMixer GetVibrationMixer
{
add => On.DesktopPlatform.GetVibrationMixer += value;
remove => On.DesktopPlatform.GetVibrationMixer -= value;
}
}

}
