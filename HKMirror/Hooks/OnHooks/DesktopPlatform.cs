using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for DesktopPlatform class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnDesktopPlatform
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.DesktopPlatform.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.DesktopPlatform.orig_Awake orig, DesktopPlatform self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookCreateOnlineSubsystem()
        {
            if (!HookedList.Contains("CreateOnlineSubsystem"))
            {
                HookedList.Add("CreateOnlineSubsystem");
                On.DesktopPlatform.CreateOnlineSubsystem += CreateOnlineSubsystem;
            }
        }

        internal static event Delegates.CreateOnlineSubsystem_BeforeArgs _beforeCreateOnlineSubsystem;
        internal static event Delegates.CreateOnlineSubsystem_NormalArgs _afterCreateOnlineSubsystem;

        private static void CreateOnlineSubsystem(On.DesktopPlatform.orig_CreateOnlineSubsystem orig,
            DesktopPlatform self)
        {
            Delegates.Params_CreateOnlineSubsystem @params = new()
            {
                self = self
            };
            _beforeCreateOnlineSubsystem?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCreateOnlineSubsystem != null) _afterCreateOnlineSubsystem.Invoke(@params);
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.DesktopPlatform.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_NormalArgs _afterOnDestroy;

        private static void OnDestroy(On.DesktopPlatform.orig_OnDestroy orig, DesktopPlatform self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            _beforeOnDestroy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null) _afterOnDestroy.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.DesktopPlatform.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.DesktopPlatform.orig_Update orig, DesktopPlatform self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void Hookget_DisplayName()
        {
            if (!HookedList.Contains("get_DisplayName"))
            {
                HookedList.Add("get_DisplayName");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_DisplayName"), get_DisplayName);
            }
        }

        internal static event Delegates.get_DisplayName_BeforeArgs _beforeget_DisplayName;
        internal static event Delegates.get_DisplayName_NormalArgs _afterget_DisplayName;

        private static string get_DisplayName(Func<DesktopPlatform, string> orig, DesktopPlatform self)
        {
            Delegates.Params_get_DisplayName @params = new()
            {
                self = self
            };
            _beforeget_DisplayName?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DisplayName != null) retVal = _afterget_DisplayName.Invoke(@params);
            return retVal;
        }

        internal static void HookIsSaveSlotInUse()
        {
            if (!HookedList.Contains("IsSaveSlotInUse"))
            {
                HookedList.Add("IsSaveSlotInUse");
                On.DesktopPlatform.IsSaveSlotInUse += IsSaveSlotInUse;
            }
        }

        internal static event Delegates.IsSaveSlotInUse_BeforeArgs _beforeIsSaveSlotInUse;
        internal static event Delegates.IsSaveSlotInUse_NormalArgs _afterIsSaveSlotInUse;

        private static void IsSaveSlotInUse(On.DesktopPlatform.orig_IsSaveSlotInUse orig, DesktopPlatform self,
            int slotIndex, Action<bool> callback)
        {
            Delegates.Params_IsSaveSlotInUse @params = new()
            {
                self = self, slotIndex = slotIndex, callback = callback
            };
            _beforeIsSaveSlotInUse?.Invoke(@params);
            self = @params.self;
            slotIndex = @params.slotIndex;
            callback = @params.callback;
            orig(self, slotIndex, callback);
            if (_afterIsSaveSlotInUse != null) _afterIsSaveSlotInUse.Invoke(@params);
        }

        internal static void HookLocalIsSaveSlotInUse()
        {
            if (!HookedList.Contains("LocalIsSaveSlotInUse"))
            {
                HookedList.Add("LocalIsSaveSlotInUse");
                On.DesktopPlatform.LocalIsSaveSlotInUse += LocalIsSaveSlotInUse;
            }
        }

        internal static event Delegates.LocalIsSaveSlotInUse_BeforeArgs _beforeLocalIsSaveSlotInUse;
        internal static event Delegates.LocalIsSaveSlotInUse_NormalArgs _afterLocalIsSaveSlotInUse;

        private static void LocalIsSaveSlotInUse(On.DesktopPlatform.orig_LocalIsSaveSlotInUse orig,
            DesktopPlatform self, int slotIndex, Action<bool> callback)
        {
            Delegates.Params_LocalIsSaveSlotInUse @params = new()
            {
                self = self, slotIndex = slotIndex, callback = callback
            };
            _beforeLocalIsSaveSlotInUse?.Invoke(@params);
            self = @params.self;
            slotIndex = @params.slotIndex;
            callback = @params.callback;
            orig(self, slotIndex, callback);
            if (_afterLocalIsSaveSlotInUse != null) _afterLocalIsSaveSlotInUse.Invoke(@params);
        }

        internal static void HookReadSaveSlot()
        {
            if (!HookedList.Contains("ReadSaveSlot"))
            {
                HookedList.Add("ReadSaveSlot");
                On.DesktopPlatform.ReadSaveSlot += ReadSaveSlot;
            }
        }

        internal static event Delegates.ReadSaveSlot_BeforeArgs _beforeReadSaveSlot;
        internal static event Delegates.ReadSaveSlot_NormalArgs _afterReadSaveSlot;

        private static void ReadSaveSlot(On.DesktopPlatform.orig_ReadSaveSlot orig, DesktopPlatform self, int slotIndex,
            Action<byte[]> callback)
        {
            Delegates.Params_ReadSaveSlot @params = new()
            {
                self = self, slotIndex = slotIndex, callback = callback
            };
            _beforeReadSaveSlot?.Invoke(@params);
            self = @params.self;
            slotIndex = @params.slotIndex;
            callback = @params.callback;
            orig(self, slotIndex, callback);
            if (_afterReadSaveSlot != null) _afterReadSaveSlot.Invoke(@params);
        }

        internal static void HookLocalReadSaveSlot()
        {
            if (!HookedList.Contains("LocalReadSaveSlot"))
            {
                HookedList.Add("LocalReadSaveSlot");
                On.DesktopPlatform.LocalReadSaveSlot += LocalReadSaveSlot;
            }
        }

        internal static event Delegates.LocalReadSaveSlot_BeforeArgs _beforeLocalReadSaveSlot;
        internal static event Delegates.LocalReadSaveSlot_NormalArgs _afterLocalReadSaveSlot;

        private static void LocalReadSaveSlot(On.DesktopPlatform.orig_LocalReadSaveSlot orig, DesktopPlatform self,
            int slotIndex, Action<byte[]> callback)
        {
            Delegates.Params_LocalReadSaveSlot @params = new()
            {
                self = self, slotIndex = slotIndex, callback = callback
            };
            _beforeLocalReadSaveSlot?.Invoke(@params);
            self = @params.self;
            slotIndex = @params.slotIndex;
            callback = @params.callback;
            orig(self, slotIndex, callback);
            if (_afterLocalReadSaveSlot != null) _afterLocalReadSaveSlot.Invoke(@params);
        }

        internal static void HookEnsureSaveSlotSpace()
        {
            if (!HookedList.Contains("EnsureSaveSlotSpace"))
            {
                HookedList.Add("EnsureSaveSlotSpace");
                On.DesktopPlatform.EnsureSaveSlotSpace += EnsureSaveSlotSpace;
            }
        }

        internal static event Delegates.EnsureSaveSlotSpace_BeforeArgs _beforeEnsureSaveSlotSpace;
        internal static event Delegates.EnsureSaveSlotSpace_NormalArgs _afterEnsureSaveSlotSpace;

        private static void EnsureSaveSlotSpace(On.DesktopPlatform.orig_EnsureSaveSlotSpace orig, DesktopPlatform self,
            int slotIndex, Action<bool> callback)
        {
            Delegates.Params_EnsureSaveSlotSpace @params = new()
            {
                self = self, slotIndex = slotIndex, callback = callback
            };
            _beforeEnsureSaveSlotSpace?.Invoke(@params);
            self = @params.self;
            slotIndex = @params.slotIndex;
            callback = @params.callback;
            orig(self, slotIndex, callback);
            if (_afterEnsureSaveSlotSpace != null) _afterEnsureSaveSlotSpace.Invoke(@params);
        }

        internal static void HookWriteSaveSlot()
        {
            if (!HookedList.Contains("WriteSaveSlot"))
            {
                HookedList.Add("WriteSaveSlot");
                On.DesktopPlatform.WriteSaveSlot += WriteSaveSlot;
            }
        }

        internal static event Delegates.WriteSaveSlot_BeforeArgs _beforeWriteSaveSlot;
        internal static event Delegates.WriteSaveSlot_NormalArgs _afterWriteSaveSlot;

        private static void WriteSaveSlot(On.DesktopPlatform.orig_WriteSaveSlot orig, DesktopPlatform self,
            int slotIndex, byte[] bytes, Action<bool> callback)
        {
            Delegates.Params_WriteSaveSlot @params = new()
            {
                self = self, slotIndex = slotIndex, bytes = bytes, callback = callback
            };
            _beforeWriteSaveSlot?.Invoke(@params);
            self = @params.self;
            slotIndex = @params.slotIndex;
            bytes = @params.bytes;
            callback = @params.callback;
            orig(self, slotIndex, bytes, callback);
            if (_afterWriteSaveSlot != null) _afterWriteSaveSlot.Invoke(@params);
        }

        internal static void HookGetBackupNumber()
        {
            if (!HookedList.Contains("GetBackupNumber"))
            {
                HookedList.Add("GetBackupNumber");
                On.DesktopPlatform.GetBackupNumber += GetBackupNumber;
            }
        }

        internal static event Delegates.GetBackupNumber_BeforeArgs _beforeGetBackupNumber;
        internal static event Delegates.GetBackupNumber_NormalArgs _afterGetBackupNumber;

        private static int GetBackupNumber(On.DesktopPlatform.orig_GetBackupNumber orig, DesktopPlatform self,
            string backupPath)
        {
            Delegates.Params_GetBackupNumber @params = new()
            {
                self = self, backupPath = backupPath
            };
            _beforeGetBackupNumber?.Invoke(@params);
            self = @params.self;
            backupPath = @params.backupPath;
            var retVal = orig(self, backupPath);
            if (_afterGetBackupNumber != null) retVal = _afterGetBackupNumber.Invoke(@params);
            return retVal;
        }

        internal static void HookClearSaveSlot()
        {
            if (!HookedList.Contains("ClearSaveSlot"))
            {
                HookedList.Add("ClearSaveSlot");
                On.DesktopPlatform.ClearSaveSlot += ClearSaveSlot;
            }
        }

        internal static event Delegates.ClearSaveSlot_BeforeArgs _beforeClearSaveSlot;
        internal static event Delegates.ClearSaveSlot_NormalArgs _afterClearSaveSlot;

        private static void ClearSaveSlot(On.DesktopPlatform.orig_ClearSaveSlot orig, DesktopPlatform self,
            int slotIndex, Action<bool> callback)
        {
            Delegates.Params_ClearSaveSlot @params = new()
            {
                self = self, slotIndex = slotIndex, callback = callback
            };
            _beforeClearSaveSlot?.Invoke(@params);
            self = @params.self;
            slotIndex = @params.slotIndex;
            callback = @params.callback;
            orig(self, slotIndex, callback);
            if (_afterClearSaveSlot != null) _afterClearSaveSlot.Invoke(@params);
        }

        internal static void HookIsAchievementUnlocked()
        {
            if (!HookedList.Contains("IsAchievementUnlocked"))
            {
                HookedList.Add("IsAchievementUnlocked");
                On.DesktopPlatform.IsAchievementUnlocked += IsAchievementUnlocked;
            }
        }

        internal static event Delegates.IsAchievementUnlocked_BeforeArgs _beforeIsAchievementUnlocked;
        internal static event Delegates.IsAchievementUnlocked_NormalArgs _afterIsAchievementUnlocked;

        private static bool? IsAchievementUnlocked(On.DesktopPlatform.orig_IsAchievementUnlocked orig,
            DesktopPlatform self, string achievementId)
        {
            Delegates.Params_IsAchievementUnlocked @params = new()
            {
                self = self, achievementId = achievementId
            };
            _beforeIsAchievementUnlocked?.Invoke(@params);
            self = @params.self;
            achievementId = @params.achievementId;
            var retVal = orig(self, achievementId);
            if (_afterIsAchievementUnlocked != null) retVal = _afterIsAchievementUnlocked.Invoke(@params);
            return retVal;
        }

        internal static void HookPushAchievementUnlock()
        {
            if (!HookedList.Contains("PushAchievementUnlock"))
            {
                HookedList.Add("PushAchievementUnlock");
                On.DesktopPlatform.PushAchievementUnlock += PushAchievementUnlock;
            }
        }

        internal static event Delegates.PushAchievementUnlock_BeforeArgs _beforePushAchievementUnlock;
        internal static event Delegates.PushAchievementUnlock_NormalArgs _afterPushAchievementUnlock;

        private static void PushAchievementUnlock(On.DesktopPlatform.orig_PushAchievementUnlock orig,
            DesktopPlatform self, string achievementId)
        {
            Delegates.Params_PushAchievementUnlock @params = new()
            {
                self = self, achievementId = achievementId
            };
            _beforePushAchievementUnlock?.Invoke(@params);
            self = @params.self;
            achievementId = @params.achievementId;
            orig(self, achievementId);
            if (_afterPushAchievementUnlock != null) _afterPushAchievementUnlock.Invoke(@params);
        }

        internal static void HookResetAchievements()
        {
            if (!HookedList.Contains("ResetAchievements"))
            {
                HookedList.Add("ResetAchievements");
                On.DesktopPlatform.ResetAchievements += ResetAchievements;
            }
        }

        internal static event Delegates.ResetAchievements_BeforeArgs _beforeResetAchievements;
        internal static event Delegates.ResetAchievements_NormalArgs _afterResetAchievements;

        private static void ResetAchievements(On.DesktopPlatform.orig_ResetAchievements orig, DesktopPlatform self)
        {
            Delegates.Params_ResetAchievements @params = new()
            {
                self = self
            };
            _beforeResetAchievements?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetAchievements != null) _afterResetAchievements.Invoke(@params);
        }

        internal static void Hookget_AreAchievementsFetched()
        {
            if (!HookedList.Contains("get_AreAchievementsFetched"))
            {
                HookedList.Add("get_AreAchievementsFetched");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_AreAchievementsFetched"),
                    get_AreAchievementsFetched);
            }
        }

        internal static event Delegates.get_AreAchievementsFetched_BeforeArgs _beforeget_AreAchievementsFetched;
        internal static event Delegates.get_AreAchievementsFetched_NormalArgs _afterget_AreAchievementsFetched;

        private static bool get_AreAchievementsFetched(Func<DesktopPlatform, bool> orig, DesktopPlatform self)
        {
            Delegates.Params_get_AreAchievementsFetched @params = new()
            {
                self = self
            };
            _beforeget_AreAchievementsFetched?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AreAchievementsFetched != null) retVal = _afterget_AreAchievementsFetched.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_HasNativeAchievementsDialog()
        {
            if (!HookedList.Contains("get_HasNativeAchievementsDialog"))
            {
                HookedList.Add("get_HasNativeAchievementsDialog");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_HasNativeAchievementsDialog"),
                    get_HasNativeAchievementsDialog);
            }
        }

        internal static event Delegates.get_HasNativeAchievementsDialog_BeforeArgs
            _beforeget_HasNativeAchievementsDialog;

        internal static event Delegates.get_HasNativeAchievementsDialog_NormalArgs
            _afterget_HasNativeAchievementsDialog;

        private static bool get_HasNativeAchievementsDialog(Func<DesktopPlatform, bool> orig, DesktopPlatform self)
        {
            Delegates.Params_get_HasNativeAchievementsDialog @params = new()
            {
                self = self
            };
            _beforeget_HasNativeAchievementsDialog?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_HasNativeAchievementsDialog != null)
                retVal = _afterget_HasNativeAchievementsDialog.Invoke(@params);
            return retVal;
        }

        internal static void HookIncludesPlugin()
        {
            if (!HookedList.Contains("IncludesPlugin"))
            {
                HookedList.Add("IncludesPlugin");
                On.DesktopPlatform.IncludesPlugin += IncludesPlugin;
            }
        }

        internal static event Delegates.IncludesPlugin_BeforeArgs _beforeIncludesPlugin;
        internal static event Delegates.IncludesPlugin_NormalArgs _afterIncludesPlugin;

        private static bool IncludesPlugin(On.DesktopPlatform.orig_IncludesPlugin orig, DesktopPlatform self,
            string pluginName)
        {
            Delegates.Params_IncludesPlugin @params = new()
            {
                self = self, pluginName = pluginName
            };
            _beforeIncludesPlugin?.Invoke(@params);
            self = @params.self;
            pluginName = @params.pluginName;
            var retVal = orig(self, pluginName);
            if (_afterIncludesPlugin != null) retVal = _afterIncludesPlugin.Invoke(@params);
            return retVal;
        }

        internal static void HookOnOnlineSubsystemAchievementsFetched()
        {
            if (!HookedList.Contains("OnOnlineSubsystemAchievementsFetched"))
            {
                HookedList.Add("OnOnlineSubsystemAchievementsFetched");
                On.DesktopPlatform.OnOnlineSubsystemAchievementsFetched += OnOnlineSubsystemAchievementsFetched;
            }
        }

        internal static event Delegates.OnOnlineSubsystemAchievementsFetched_BeforeArgs
            _beforeOnOnlineSubsystemAchievementsFetched;

        internal static event Delegates.OnOnlineSubsystemAchievementsFetched_NormalArgs
            _afterOnOnlineSubsystemAchievementsFetched;

        private static void OnOnlineSubsystemAchievementsFetched(
            On.DesktopPlatform.orig_OnOnlineSubsystemAchievementsFetched orig, DesktopPlatform self)
        {
            Delegates.Params_OnOnlineSubsystemAchievementsFetched @params = new()
            {
                self = self
            };
            _beforeOnOnlineSubsystemAchievementsFetched?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnOnlineSubsystemAchievementsFetched != null)
                _afterOnOnlineSubsystemAchievementsFetched.Invoke(@params);
        }

        internal static void Hookget_ShowLanguageSelect()
        {
            if (!HookedList.Contains("get_ShowLanguageSelect"))
            {
                HookedList.Add("get_ShowLanguageSelect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_ShowLanguageSelect"),
                    get_ShowLanguageSelect);
            }
        }

        internal static event Delegates.get_ShowLanguageSelect_BeforeArgs _beforeget_ShowLanguageSelect;
        internal static event Delegates.get_ShowLanguageSelect_NormalArgs _afterget_ShowLanguageSelect;

        private static bool get_ShowLanguageSelect(Func<DesktopPlatform, bool> orig, DesktopPlatform self)
        {
            Delegates.Params_get_ShowLanguageSelect @params = new()
            {
                self = self
            };
            _beforeget_ShowLanguageSelect?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ShowLanguageSelect != null) retVal = _afterget_ShowLanguageSelect.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_IsControllerImplicit()
        {
            if (!HookedList.Contains("get_IsControllerImplicit"))
            {
                HookedList.Add("get_IsControllerImplicit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_IsControllerImplicit"),
                    get_IsControllerImplicit);
            }
        }

        internal static event Delegates.get_IsControllerImplicit_BeforeArgs _beforeget_IsControllerImplicit;
        internal static event Delegates.get_IsControllerImplicit_NormalArgs _afterget_IsControllerImplicit;

        private static bool get_IsControllerImplicit(Func<DesktopPlatform, bool> orig, DesktopPlatform self)
        {
            Delegates.Params_get_IsControllerImplicit @params = new()
            {
                self = self
            };
            _beforeget_IsControllerImplicit?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsControllerImplicit != null) retVal = _afterget_IsControllerImplicit.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_WillPreloadSaveFiles()
        {
            if (!HookedList.Contains("get_WillPreloadSaveFiles"))
            {
                HookedList.Add("get_WillPreloadSaveFiles");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_WillPreloadSaveFiles"),
                    get_WillPreloadSaveFiles);
            }
        }

        internal static event Delegates.get_WillPreloadSaveFiles_BeforeArgs _beforeget_WillPreloadSaveFiles;
        internal static event Delegates.get_WillPreloadSaveFiles_NormalArgs _afterget_WillPreloadSaveFiles;

        private static bool get_WillPreloadSaveFiles(Func<DesktopPlatform, bool> orig, DesktopPlatform self)
        {
            Delegates.Params_get_WillPreloadSaveFiles @params = new()
            {
                self = self
            };
            _beforeget_WillPreloadSaveFiles?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_WillPreloadSaveFiles != null) retVal = _afterget_WillPreloadSaveFiles.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_EngagedDisplayName()
        {
            if (!HookedList.Contains("get_EngagedDisplayName"))
            {
                HookedList.Add("get_EngagedDisplayName");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_EngagedDisplayName"),
                    get_EngagedDisplayName);
            }
        }

        internal static event Delegates.get_EngagedDisplayName_BeforeArgs _beforeget_EngagedDisplayName;
        internal static event Delegates.get_EngagedDisplayName_NormalArgs _afterget_EngagedDisplayName;

        private static string get_EngagedDisplayName(Func<DesktopPlatform, string> orig, DesktopPlatform self)
        {
            Delegates.Params_get_EngagedDisplayName @params = new()
            {
                self = self
            };
            _beforeget_EngagedDisplayName?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_EngagedDisplayName != null) retVal = _afterget_EngagedDisplayName.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_EngagedDisplayImage()
        {
            if (!HookedList.Contains("get_EngagedDisplayImage"))
            {
                HookedList.Add("get_EngagedDisplayImage");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_EngagedDisplayImage"),
                    get_EngagedDisplayImage);
            }
        }

        internal static event Delegates.get_EngagedDisplayImage_BeforeArgs _beforeget_EngagedDisplayImage;
        internal static event Delegates.get_EngagedDisplayImage_NormalArgs _afterget_EngagedDisplayImage;

        private static Texture2D get_EngagedDisplayImage(Func<DesktopPlatform, Texture2D> orig, DesktopPlatform self)
        {
            Delegates.Params_get_EngagedDisplayImage @params = new()
            {
                self = self
            };
            _beforeget_EngagedDisplayImage?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_EngagedDisplayImage != null) retVal = _afterget_EngagedDisplayImage.Invoke(@params);
            return retVal;
        }

        internal static void HookGetVibrationMixer()
        {
            if (!HookedList.Contains("GetVibrationMixer"))
            {
                HookedList.Add("GetVibrationMixer");
                On.DesktopPlatform.GetVibrationMixer += GetVibrationMixer;
            }
        }

        internal static event Delegates.GetVibrationMixer_BeforeArgs _beforeGetVibrationMixer;
        internal static event Delegates.GetVibrationMixer_NormalArgs _afterGetVibrationMixer;

        private static VibrationMixer GetVibrationMixer(On.DesktopPlatform.orig_GetVibrationMixer orig,
            DesktopPlatform self)
        {
            Delegates.Params_GetVibrationMixer @params = new()
            {
                self = self
            };
            _beforeGetVibrationMixer?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetVibrationMixer != null) retVal = _afterGetVibrationMixer.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void ClearSaveSlot_BeforeArgs(Params_ClearSaveSlot args);

        public delegate void ClearSaveSlot_NormalArgs(Params_ClearSaveSlot args);

        public delegate void CreateOnlineSubsystem_BeforeArgs(Params_CreateOnlineSubsystem args);

        public delegate void CreateOnlineSubsystem_NormalArgs(Params_CreateOnlineSubsystem args);

        public delegate void EnsureSaveSlotSpace_BeforeArgs(Params_EnsureSaveSlotSpace args);

        public delegate void EnsureSaveSlotSpace_NormalArgs(Params_EnsureSaveSlotSpace args);

        public delegate void get_AreAchievementsFetched_BeforeArgs(Params_get_AreAchievementsFetched args);

        public delegate bool get_AreAchievementsFetched_NormalArgs(Params_get_AreAchievementsFetched args);

        public delegate void get_DisplayName_BeforeArgs(Params_get_DisplayName args);

        public delegate string get_DisplayName_NormalArgs(Params_get_DisplayName args);

        public delegate void get_EngagedDisplayImage_BeforeArgs(Params_get_EngagedDisplayImage args);

        public delegate Texture2D get_EngagedDisplayImage_NormalArgs(Params_get_EngagedDisplayImage args);

        public delegate void get_EngagedDisplayName_BeforeArgs(Params_get_EngagedDisplayName args);

        public delegate string get_EngagedDisplayName_NormalArgs(Params_get_EngagedDisplayName args);

        public delegate void get_HasNativeAchievementsDialog_BeforeArgs(Params_get_HasNativeAchievementsDialog args);

        public delegate bool get_HasNativeAchievementsDialog_NormalArgs(Params_get_HasNativeAchievementsDialog args);

        public delegate void get_IsControllerImplicit_BeforeArgs(Params_get_IsControllerImplicit args);

        public delegate bool get_IsControllerImplicit_NormalArgs(Params_get_IsControllerImplicit args);

        public delegate void get_ShowLanguageSelect_BeforeArgs(Params_get_ShowLanguageSelect args);

        public delegate bool get_ShowLanguageSelect_NormalArgs(Params_get_ShowLanguageSelect args);

        public delegate void get_WillPreloadSaveFiles_BeforeArgs(Params_get_WillPreloadSaveFiles args);

        public delegate bool get_WillPreloadSaveFiles_NormalArgs(Params_get_WillPreloadSaveFiles args);

        public delegate void GetBackupNumber_BeforeArgs(Params_GetBackupNumber args);

        public delegate int GetBackupNumber_NormalArgs(Params_GetBackupNumber args);

        public delegate void GetVibrationMixer_BeforeArgs(Params_GetVibrationMixer args);

        public delegate VibrationMixer GetVibrationMixer_NormalArgs(Params_GetVibrationMixer args);

        public delegate void IncludesPlugin_BeforeArgs(Params_IncludesPlugin args);

        public delegate bool IncludesPlugin_NormalArgs(Params_IncludesPlugin args);

        public delegate void IsAchievementUnlocked_BeforeArgs(Params_IsAchievementUnlocked args);

        public delegate bool? IsAchievementUnlocked_NormalArgs(Params_IsAchievementUnlocked args);

        public delegate void IsSaveSlotInUse_BeforeArgs(Params_IsSaveSlotInUse args);

        public delegate void IsSaveSlotInUse_NormalArgs(Params_IsSaveSlotInUse args);

        public delegate void LocalIsSaveSlotInUse_BeforeArgs(Params_LocalIsSaveSlotInUse args);

        public delegate void LocalIsSaveSlotInUse_NormalArgs(Params_LocalIsSaveSlotInUse args);

        public delegate void LocalReadSaveSlot_BeforeArgs(Params_LocalReadSaveSlot args);

        public delegate void LocalReadSaveSlot_NormalArgs(Params_LocalReadSaveSlot args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_NormalArgs(Params_OnDestroy args);

        public delegate void OnOnlineSubsystemAchievementsFetched_BeforeArgs(
            Params_OnOnlineSubsystemAchievementsFetched args);

        public delegate void OnOnlineSubsystemAchievementsFetched_NormalArgs(
            Params_OnOnlineSubsystemAchievementsFetched args);

        public delegate void PushAchievementUnlock_BeforeArgs(Params_PushAchievementUnlock args);

        public delegate void PushAchievementUnlock_NormalArgs(Params_PushAchievementUnlock args);

        public delegate void ReadSaveSlot_BeforeArgs(Params_ReadSaveSlot args);

        public delegate void ReadSaveSlot_NormalArgs(Params_ReadSaveSlot args);

        public delegate void ResetAchievements_BeforeArgs(Params_ResetAchievements args);

        public delegate void ResetAchievements_NormalArgs(Params_ResetAchievements args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public delegate void WriteSaveSlot_BeforeArgs(Params_WriteSaveSlot args);

        public delegate void WriteSaveSlot_NormalArgs(Params_WriteSaveSlot args);

        public sealed class Params_Awake
        {
            public DesktopPlatform self;
        }

        public sealed class Params_CreateOnlineSubsystem
        {
            public DesktopPlatform self;
        }

        public sealed class Params_OnDestroy
        {
            public DesktopPlatform self;
        }

        public sealed class Params_Update
        {
            public DesktopPlatform self;
        }

        public sealed class Params_get_DisplayName
        {
            public DesktopPlatform self;
        }

        public sealed class Params_IsSaveSlotInUse
        {
            public Action<bool> callback;
            public DesktopPlatform self;
            public int slotIndex;
        }

        public sealed class Params_LocalIsSaveSlotInUse
        {
            public Action<bool> callback;
            public DesktopPlatform self;
            public int slotIndex;
        }

        public sealed class Params_ReadSaveSlot
        {
            public Action<byte[]> callback;
            public DesktopPlatform self;
            public int slotIndex;
        }

        public sealed class Params_LocalReadSaveSlot
        {
            public Action<byte[]> callback;
            public DesktopPlatform self;
            public int slotIndex;
        }

        public sealed class Params_EnsureSaveSlotSpace
        {
            public Action<bool> callback;
            public DesktopPlatform self;
            public int slotIndex;
        }

        public sealed class Params_WriteSaveSlot
        {
            public byte[] bytes;
            public Action<bool> callback;
            public DesktopPlatform self;
            public int slotIndex;
        }

        public sealed class Params_GetBackupNumber
        {
            public string backupPath;
            public DesktopPlatform self;
        }

        public sealed class Params_ClearSaveSlot
        {
            public Action<bool> callback;
            public DesktopPlatform self;
            public int slotIndex;
        }

        public sealed class Params_IsAchievementUnlocked
        {
            public string achievementId;
            public DesktopPlatform self;
        }

        public sealed class Params_PushAchievementUnlock
        {
            public string achievementId;
            public DesktopPlatform self;
        }

        public sealed class Params_ResetAchievements
        {
            public DesktopPlatform self;
        }

        public sealed class Params_get_AreAchievementsFetched
        {
            public DesktopPlatform self;
        }

        public sealed class Params_get_HasNativeAchievementsDialog
        {
            public DesktopPlatform self;
        }

        public sealed class Params_IncludesPlugin
        {
            public string pluginName;
            public DesktopPlatform self;
        }

        public sealed class Params_OnOnlineSubsystemAchievementsFetched
        {
            public DesktopPlatform self;
        }

        public sealed class Params_get_ShowLanguageSelect
        {
            public DesktopPlatform self;
        }

        public sealed class Params_get_IsControllerImplicit
        {
            public DesktopPlatform self;
        }

        public sealed class Params_get_WillPreloadSaveFiles
        {
            public DesktopPlatform self;
        }

        public sealed class Params_get_EngagedDisplayName
        {
            public DesktopPlatform self;
        }

        public sealed class Params_get_EngagedDisplayImage
        {
            public DesktopPlatform self;
        }

        public sealed class Params_GetVibrationMixer
        {
            public DesktopPlatform self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.CreateOnlineSubsystem_BeforeArgs CreateOnlineSubsystem
        {
            add
            {
                HookHandler._beforeCreateOnlineSubsystem += value;
                HookHandler.HookCreateOnlineSubsystem();
            }
            remove => HookHandler._beforeCreateOnlineSubsystem -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.get_DisplayName_BeforeArgs get_DisplayName
        {
            add
            {
                HookHandler._beforeget_DisplayName += value;
                HookHandler.Hookget_DisplayName();
            }
            remove => HookHandler._beforeget_DisplayName -= value;
        }

        public static event Delegates.IsSaveSlotInUse_BeforeArgs IsSaveSlotInUse
        {
            add
            {
                HookHandler._beforeIsSaveSlotInUse += value;
                HookHandler.HookIsSaveSlotInUse();
            }
            remove => HookHandler._beforeIsSaveSlotInUse -= value;
        }

        public static event Delegates.LocalIsSaveSlotInUse_BeforeArgs LocalIsSaveSlotInUse
        {
            add
            {
                HookHandler._beforeLocalIsSaveSlotInUse += value;
                HookHandler.HookLocalIsSaveSlotInUse();
            }
            remove => HookHandler._beforeLocalIsSaveSlotInUse -= value;
        }

        public static event Delegates.ReadSaveSlot_BeforeArgs ReadSaveSlot
        {
            add
            {
                HookHandler._beforeReadSaveSlot += value;
                HookHandler.HookReadSaveSlot();
            }
            remove => HookHandler._beforeReadSaveSlot -= value;
        }

        public static event Delegates.LocalReadSaveSlot_BeforeArgs LocalReadSaveSlot
        {
            add
            {
                HookHandler._beforeLocalReadSaveSlot += value;
                HookHandler.HookLocalReadSaveSlot();
            }
            remove => HookHandler._beforeLocalReadSaveSlot -= value;
        }

        public static event Delegates.EnsureSaveSlotSpace_BeforeArgs EnsureSaveSlotSpace
        {
            add
            {
                HookHandler._beforeEnsureSaveSlotSpace += value;
                HookHandler.HookEnsureSaveSlotSpace();
            }
            remove => HookHandler._beforeEnsureSaveSlotSpace -= value;
        }

        public static event Delegates.WriteSaveSlot_BeforeArgs WriteSaveSlot
        {
            add
            {
                HookHandler._beforeWriteSaveSlot += value;
                HookHandler.HookWriteSaveSlot();
            }
            remove => HookHandler._beforeWriteSaveSlot -= value;
        }

        public static event Delegates.GetBackupNumber_BeforeArgs GetBackupNumber
        {
            add
            {
                HookHandler._beforeGetBackupNumber += value;
                HookHandler.HookGetBackupNumber();
            }
            remove => HookHandler._beforeGetBackupNumber -= value;
        }

        public static event Delegates.ClearSaveSlot_BeforeArgs ClearSaveSlot
        {
            add
            {
                HookHandler._beforeClearSaveSlot += value;
                HookHandler.HookClearSaveSlot();
            }
            remove => HookHandler._beforeClearSaveSlot -= value;
        }

        public static event Delegates.IsAchievementUnlocked_BeforeArgs IsAchievementUnlocked
        {
            add
            {
                HookHandler._beforeIsAchievementUnlocked += value;
                HookHandler.HookIsAchievementUnlocked();
            }
            remove => HookHandler._beforeIsAchievementUnlocked -= value;
        }

        public static event Delegates.PushAchievementUnlock_BeforeArgs PushAchievementUnlock
        {
            add
            {
                HookHandler._beforePushAchievementUnlock += value;
                HookHandler.HookPushAchievementUnlock();
            }
            remove => HookHandler._beforePushAchievementUnlock -= value;
        }

        public static event Delegates.ResetAchievements_BeforeArgs ResetAchievements
        {
            add
            {
                HookHandler._beforeResetAchievements += value;
                HookHandler.HookResetAchievements();
            }
            remove => HookHandler._beforeResetAchievements -= value;
        }

        public static event Delegates.get_AreAchievementsFetched_BeforeArgs get_AreAchievementsFetched
        {
            add
            {
                HookHandler._beforeget_AreAchievementsFetched += value;
                HookHandler.Hookget_AreAchievementsFetched();
            }
            remove => HookHandler._beforeget_AreAchievementsFetched -= value;
        }

        public static event Delegates.get_HasNativeAchievementsDialog_BeforeArgs get_HasNativeAchievementsDialog
        {
            add
            {
                HookHandler._beforeget_HasNativeAchievementsDialog += value;
                HookHandler.Hookget_HasNativeAchievementsDialog();
            }
            remove => HookHandler._beforeget_HasNativeAchievementsDialog -= value;
        }

        public static event Delegates.IncludesPlugin_BeforeArgs IncludesPlugin
        {
            add
            {
                HookHandler._beforeIncludesPlugin += value;
                HookHandler.HookIncludesPlugin();
            }
            remove => HookHandler._beforeIncludesPlugin -= value;
        }

        public static event Delegates.OnOnlineSubsystemAchievementsFetched_BeforeArgs
            OnOnlineSubsystemAchievementsFetched
            {
                add
                {
                    HookHandler._beforeOnOnlineSubsystemAchievementsFetched += value;
                    HookHandler.HookOnOnlineSubsystemAchievementsFetched();
                }
                remove => HookHandler._beforeOnOnlineSubsystemAchievementsFetched -= value;
            }

        public static event Delegates.get_ShowLanguageSelect_BeforeArgs get_ShowLanguageSelect
        {
            add
            {
                HookHandler._beforeget_ShowLanguageSelect += value;
                HookHandler.Hookget_ShowLanguageSelect();
            }
            remove => HookHandler._beforeget_ShowLanguageSelect -= value;
        }

        public static event Delegates.get_IsControllerImplicit_BeforeArgs get_IsControllerImplicit
        {
            add
            {
                HookHandler._beforeget_IsControllerImplicit += value;
                HookHandler.Hookget_IsControllerImplicit();
            }
            remove => HookHandler._beforeget_IsControllerImplicit -= value;
        }

        public static event Delegates.get_WillPreloadSaveFiles_BeforeArgs get_WillPreloadSaveFiles
        {
            add
            {
                HookHandler._beforeget_WillPreloadSaveFiles += value;
                HookHandler.Hookget_WillPreloadSaveFiles();
            }
            remove => HookHandler._beforeget_WillPreloadSaveFiles -= value;
        }

        public static event Delegates.get_EngagedDisplayName_BeforeArgs get_EngagedDisplayName
        {
            add
            {
                HookHandler._beforeget_EngagedDisplayName += value;
                HookHandler.Hookget_EngagedDisplayName();
            }
            remove => HookHandler._beforeget_EngagedDisplayName -= value;
        }

        public static event Delegates.get_EngagedDisplayImage_BeforeArgs get_EngagedDisplayImage
        {
            add
            {
                HookHandler._beforeget_EngagedDisplayImage += value;
                HookHandler.Hookget_EngagedDisplayImage();
            }
            remove => HookHandler._beforeget_EngagedDisplayImage -= value;
        }

        public static event Delegates.GetVibrationMixer_BeforeArgs GetVibrationMixer
        {
            add
            {
                HookHandler._beforeGetVibrationMixer += value;
                HookHandler.HookGetVibrationMixer();
            }
            remove => HookHandler._beforeGetVibrationMixer -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.CreateOnlineSubsystem_NormalArgs CreateOnlineSubsystem
        {
            add
            {
                HookHandler._afterCreateOnlineSubsystem += value;
                HookHandler.HookCreateOnlineSubsystem();
            }
            remove => HookHandler._afterCreateOnlineSubsystem -= value;
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.get_DisplayName_NormalArgs get_DisplayName
        {
            add
            {
                HookHandler._afterget_DisplayName += value;
                HookHandler.Hookget_DisplayName();
            }
            remove => HookHandler._afterget_DisplayName -= value;
        }

        public static event Delegates.IsSaveSlotInUse_NormalArgs IsSaveSlotInUse
        {
            add
            {
                HookHandler._afterIsSaveSlotInUse += value;
                HookHandler.HookIsSaveSlotInUse();
            }
            remove => HookHandler._afterIsSaveSlotInUse -= value;
        }

        public static event Delegates.LocalIsSaveSlotInUse_NormalArgs LocalIsSaveSlotInUse
        {
            add
            {
                HookHandler._afterLocalIsSaveSlotInUse += value;
                HookHandler.HookLocalIsSaveSlotInUse();
            }
            remove => HookHandler._afterLocalIsSaveSlotInUse -= value;
        }

        public static event Delegates.ReadSaveSlot_NormalArgs ReadSaveSlot
        {
            add
            {
                HookHandler._afterReadSaveSlot += value;
                HookHandler.HookReadSaveSlot();
            }
            remove => HookHandler._afterReadSaveSlot -= value;
        }

        public static event Delegates.LocalReadSaveSlot_NormalArgs LocalReadSaveSlot
        {
            add
            {
                HookHandler._afterLocalReadSaveSlot += value;
                HookHandler.HookLocalReadSaveSlot();
            }
            remove => HookHandler._afterLocalReadSaveSlot -= value;
        }

        public static event Delegates.EnsureSaveSlotSpace_NormalArgs EnsureSaveSlotSpace
        {
            add
            {
                HookHandler._afterEnsureSaveSlotSpace += value;
                HookHandler.HookEnsureSaveSlotSpace();
            }
            remove => HookHandler._afterEnsureSaveSlotSpace -= value;
        }

        public static event Delegates.WriteSaveSlot_NormalArgs WriteSaveSlot
        {
            add
            {
                HookHandler._afterWriteSaveSlot += value;
                HookHandler.HookWriteSaveSlot();
            }
            remove => HookHandler._afterWriteSaveSlot -= value;
        }

        public static event Delegates.GetBackupNumber_NormalArgs GetBackupNumber
        {
            add
            {
                HookHandler._afterGetBackupNumber += value;
                HookHandler.HookGetBackupNumber();
            }
            remove => HookHandler._afterGetBackupNumber -= value;
        }

        public static event Delegates.ClearSaveSlot_NormalArgs ClearSaveSlot
        {
            add
            {
                HookHandler._afterClearSaveSlot += value;
                HookHandler.HookClearSaveSlot();
            }
            remove => HookHandler._afterClearSaveSlot -= value;
        }

        public static event Delegates.IsAchievementUnlocked_NormalArgs IsAchievementUnlocked
        {
            add
            {
                HookHandler._afterIsAchievementUnlocked += value;
                HookHandler.HookIsAchievementUnlocked();
            }
            remove => HookHandler._afterIsAchievementUnlocked -= value;
        }

        public static event Delegates.PushAchievementUnlock_NormalArgs PushAchievementUnlock
        {
            add
            {
                HookHandler._afterPushAchievementUnlock += value;
                HookHandler.HookPushAchievementUnlock();
            }
            remove => HookHandler._afterPushAchievementUnlock -= value;
        }

        public static event Delegates.ResetAchievements_NormalArgs ResetAchievements
        {
            add
            {
                HookHandler._afterResetAchievements += value;
                HookHandler.HookResetAchievements();
            }
            remove => HookHandler._afterResetAchievements -= value;
        }

        public static event Delegates.get_AreAchievementsFetched_NormalArgs get_AreAchievementsFetched
        {
            add
            {
                HookHandler._afterget_AreAchievementsFetched += value;
                HookHandler.Hookget_AreAchievementsFetched();
            }
            remove => HookHandler._afterget_AreAchievementsFetched -= value;
        }

        public static event Delegates.get_HasNativeAchievementsDialog_NormalArgs get_HasNativeAchievementsDialog
        {
            add
            {
                HookHandler._afterget_HasNativeAchievementsDialog += value;
                HookHandler.Hookget_HasNativeAchievementsDialog();
            }
            remove => HookHandler._afterget_HasNativeAchievementsDialog -= value;
        }

        public static event Delegates.IncludesPlugin_NormalArgs IncludesPlugin
        {
            add
            {
                HookHandler._afterIncludesPlugin += value;
                HookHandler.HookIncludesPlugin();
            }
            remove => HookHandler._afterIncludesPlugin -= value;
        }

        public static event Delegates.OnOnlineSubsystemAchievementsFetched_NormalArgs
            OnOnlineSubsystemAchievementsFetched
            {
                add
                {
                    HookHandler._afterOnOnlineSubsystemAchievementsFetched += value;
                    HookHandler.HookOnOnlineSubsystemAchievementsFetched();
                }
                remove => HookHandler._afterOnOnlineSubsystemAchievementsFetched -= value;
            }

        public static event Delegates.get_ShowLanguageSelect_NormalArgs get_ShowLanguageSelect
        {
            add
            {
                HookHandler._afterget_ShowLanguageSelect += value;
                HookHandler.Hookget_ShowLanguageSelect();
            }
            remove => HookHandler._afterget_ShowLanguageSelect -= value;
        }

        public static event Delegates.get_IsControllerImplicit_NormalArgs get_IsControllerImplicit
        {
            add
            {
                HookHandler._afterget_IsControllerImplicit += value;
                HookHandler.Hookget_IsControllerImplicit();
            }
            remove => HookHandler._afterget_IsControllerImplicit -= value;
        }

        public static event Delegates.get_WillPreloadSaveFiles_NormalArgs get_WillPreloadSaveFiles
        {
            add
            {
                HookHandler._afterget_WillPreloadSaveFiles += value;
                HookHandler.Hookget_WillPreloadSaveFiles();
            }
            remove => HookHandler._afterget_WillPreloadSaveFiles -= value;
        }

        public static event Delegates.get_EngagedDisplayName_NormalArgs get_EngagedDisplayName
        {
            add
            {
                HookHandler._afterget_EngagedDisplayName += value;
                HookHandler.Hookget_EngagedDisplayName();
            }
            remove => HookHandler._afterget_EngagedDisplayName -= value;
        }

        public static event Delegates.get_EngagedDisplayImage_NormalArgs get_EngagedDisplayImage
        {
            add
            {
                HookHandler._afterget_EngagedDisplayImage += value;
                HookHandler.Hookget_EngagedDisplayImage();
            }
            remove => HookHandler._afterget_EngagedDisplayImage -= value;
        }

        public static event Delegates.GetVibrationMixer_NormalArgs GetVibrationMixer
        {
            add
            {
                HookHandler._afterGetVibrationMixer += value;
                HookHandler.HookGetVibrationMixer();
            }
            remove => HookHandler._afterGetVibrationMixer -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.DesktopPlatform.hook_Awake Awake
        {
            add => On.DesktopPlatform.Awake += value;
            remove => On.DesktopPlatform.Awake -= value;
        }

        public static event On.DesktopPlatform.hook_CreateOnlineSubsystem CreateOnlineSubsystem
        {
            add => On.DesktopPlatform.CreateOnlineSubsystem += value;
            remove => On.DesktopPlatform.CreateOnlineSubsystem -= value;
        }

        public static event On.DesktopPlatform.hook_OnDestroy OnDestroy
        {
            add => On.DesktopPlatform.OnDestroy += value;
            remove => On.DesktopPlatform.OnDestroy -= value;
        }

        public static event On.DesktopPlatform.hook_Update Update
        {
            add => On.DesktopPlatform.Update += value;
            remove => On.DesktopPlatform.Update -= value;
        }

        public static event Delegates.get_DisplayName_NormalArgs get_DisplayName
        {
            add => HookEndpointManager.Add<Delegates.get_DisplayName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_DisplayName"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DisplayName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_DisplayName"), value);
        }

        public static event On.DesktopPlatform.hook_IsSaveSlotInUse IsSaveSlotInUse
        {
            add => On.DesktopPlatform.IsSaveSlotInUse += value;
            remove => On.DesktopPlatform.IsSaveSlotInUse -= value;
        }

        public static event On.DesktopPlatform.hook_LocalIsSaveSlotInUse LocalIsSaveSlotInUse
        {
            add => On.DesktopPlatform.LocalIsSaveSlotInUse += value;
            remove => On.DesktopPlatform.LocalIsSaveSlotInUse -= value;
        }

        public static event On.DesktopPlatform.hook_ReadSaveSlot ReadSaveSlot
        {
            add => On.DesktopPlatform.ReadSaveSlot += value;
            remove => On.DesktopPlatform.ReadSaveSlot -= value;
        }

        public static event On.DesktopPlatform.hook_LocalReadSaveSlot LocalReadSaveSlot
        {
            add => On.DesktopPlatform.LocalReadSaveSlot += value;
            remove => On.DesktopPlatform.LocalReadSaveSlot -= value;
        }

        public static event On.DesktopPlatform.hook_EnsureSaveSlotSpace EnsureSaveSlotSpace
        {
            add => On.DesktopPlatform.EnsureSaveSlotSpace += value;
            remove => On.DesktopPlatform.EnsureSaveSlotSpace -= value;
        }

        public static event On.DesktopPlatform.hook_WriteSaveSlot WriteSaveSlot
        {
            add => On.DesktopPlatform.WriteSaveSlot += value;
            remove => On.DesktopPlatform.WriteSaveSlot -= value;
        }

        public static event On.DesktopPlatform.hook_GetBackupNumber GetBackupNumber
        {
            add => On.DesktopPlatform.GetBackupNumber += value;
            remove => On.DesktopPlatform.GetBackupNumber -= value;
        }

        public static event On.DesktopPlatform.hook_ClearSaveSlot ClearSaveSlot
        {
            add => On.DesktopPlatform.ClearSaveSlot += value;
            remove => On.DesktopPlatform.ClearSaveSlot -= value;
        }

        public static event On.DesktopPlatform.hook_IsAchievementUnlocked IsAchievementUnlocked
        {
            add => On.DesktopPlatform.IsAchievementUnlocked += value;
            remove => On.DesktopPlatform.IsAchievementUnlocked -= value;
        }

        public static event On.DesktopPlatform.hook_PushAchievementUnlock PushAchievementUnlock
        {
            add => On.DesktopPlatform.PushAchievementUnlock += value;
            remove => On.DesktopPlatform.PushAchievementUnlock -= value;
        }

        public static event On.DesktopPlatform.hook_ResetAchievements ResetAchievements
        {
            add => On.DesktopPlatform.ResetAchievements += value;
            remove => On.DesktopPlatform.ResetAchievements -= value;
        }

        public static event Delegates.get_AreAchievementsFetched_NormalArgs get_AreAchievementsFetched
        {
            add => HookEndpointManager.Add<Delegates.get_AreAchievementsFetched_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_AreAchievementsFetched"), value);
            remove => HookEndpointManager.Remove<Delegates.get_AreAchievementsFetched_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_AreAchievementsFetched"), value);
        }

        public static event Delegates.get_HasNativeAchievementsDialog_NormalArgs get_HasNativeAchievementsDialog
        {
            add => HookEndpointManager.Add<Delegates.get_HasNativeAchievementsDialog_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_HasNativeAchievementsDialog"), value);
            remove => HookEndpointManager.Remove<Delegates.get_HasNativeAchievementsDialog_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_HasNativeAchievementsDialog"), value);
        }

        public static event On.DesktopPlatform.hook_IncludesPlugin IncludesPlugin
        {
            add => On.DesktopPlatform.IncludesPlugin += value;
            remove => On.DesktopPlatform.IncludesPlugin -= value;
        }

        public static event On.DesktopPlatform.hook_OnOnlineSubsystemAchievementsFetched
            OnOnlineSubsystemAchievementsFetched
            {
                add => On.DesktopPlatform.OnOnlineSubsystemAchievementsFetched += value;
                remove => On.DesktopPlatform.OnOnlineSubsystemAchievementsFetched -= value;
            }

        public static event Delegates.get_ShowLanguageSelect_NormalArgs get_ShowLanguageSelect
        {
            add => HookEndpointManager.Add<Delegates.get_ShowLanguageSelect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_ShowLanguageSelect"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ShowLanguageSelect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_ShowLanguageSelect"), value);
        }

        public static event Delegates.get_IsControllerImplicit_NormalArgs get_IsControllerImplicit
        {
            add => HookEndpointManager.Add<Delegates.get_IsControllerImplicit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_IsControllerImplicit"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsControllerImplicit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_IsControllerImplicit"), value);
        }

        public static event Delegates.get_WillPreloadSaveFiles_NormalArgs get_WillPreloadSaveFiles
        {
            add => HookEndpointManager.Add<Delegates.get_WillPreloadSaveFiles_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_WillPreloadSaveFiles"), value);
            remove => HookEndpointManager.Remove<Delegates.get_WillPreloadSaveFiles_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_WillPreloadSaveFiles"), value);
        }

        public static event Delegates.get_EngagedDisplayName_NormalArgs get_EngagedDisplayName
        {
            add => HookEndpointManager.Add<Delegates.get_EngagedDisplayName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_EngagedDisplayName"), value);
            remove => HookEndpointManager.Remove<Delegates.get_EngagedDisplayName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_EngagedDisplayName"), value);
        }

        public static event Delegates.get_EngagedDisplayImage_NormalArgs get_EngagedDisplayImage
        {
            add => HookEndpointManager.Add<Delegates.get_EngagedDisplayImage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_EngagedDisplayImage"), value);
            remove => HookEndpointManager.Remove<Delegates.get_EngagedDisplayImage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DesktopPlatform), "get_EngagedDisplayImage"), value);
        }

        public static event On.DesktopPlatform.hook_GetVibrationMixer GetVibrationMixer
        {
            add => On.DesktopPlatform.GetVibrationMixer += value;
            remove => On.DesktopPlatform.GetVibrationMixer -= value;
        }
    }
}