using Modding.Menu;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MenuUtils class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuUtils
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookCreateMenuBuilder()
        {
            if (!HookedList.Contains("CreateMenuBuilder"))
            {
                HookedList.Add("CreateMenuBuilder");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuUtils), "CreateMenuBuilder", false),
                    CreateMenuBuilder);
            }
        }

        internal static event Delegates.CreateMenuBuilder_BeforeArgs _beforeCreateMenuBuilder;
        internal static event Delegates.CreateMenuBuilder_AfterArgs _afterCreateMenuBuilder;

        private static MenuBuilder CreateMenuBuilder(Func<string, MenuBuilder> orig, string title)
        {
            Delegates.Params_CreateMenuBuilder @params = new()
            {
                title = title
            };
            if (_beforeCreateMenuBuilder != null)
                foreach (Delegates.CreateMenuBuilder_BeforeArgs toInvoke in
                         _beforeCreateMenuBuilder.GetInvocationList())
                    try
                    {
                        _beforeCreateMenuBuilder?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            title = @params.title;
            var retVal = orig(title);
            if (_afterCreateMenuBuilder != null)
                foreach (Delegates.CreateMenuBuilder_AfterArgs toInvoke in _afterCreateMenuBuilder.GetInvocationList())
                    try
                    {
                        retVal = _afterCreateMenuBuilder.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCreateMenuBuilderWithBackButton()
        {
            if (!HookedList.Contains("CreateMenuBuilderWithBackButton"))
            {
                HookedList.Add("CreateMenuBuilderWithBackButton");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuUtils), "CreateMenuBuilderWithBackButton", false),
                    CreateMenuBuilderWithBackButton);
            }
        }

        internal static event Delegates.CreateMenuBuilderWithBackButton_BeforeArgs
            _beforeCreateMenuBuilderWithBackButton;

        internal static event Delegates.CreateMenuBuilderWithBackButton_AfterArgs _afterCreateMenuBuilderWithBackButton;

        private static MenuBuilder CreateMenuBuilderWithBackButton(
            Func<string, MenuScreen, MenuButton, MenuBuilder> orig, string title, MenuScreen returnScreen,
            MenuButton backButton)
        {
            Delegates.Params_CreateMenuBuilderWithBackButton @params = new()
            {
                title = title, returnScreen = returnScreen, backButton = backButton
            };
            if (_beforeCreateMenuBuilderWithBackButton != null)
                foreach (Delegates.CreateMenuBuilderWithBackButton_BeforeArgs toInvoke in
                         _beforeCreateMenuBuilderWithBackButton.GetInvocationList())
                    try
                    {
                        _beforeCreateMenuBuilderWithBackButton?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            title = @params.title;
            returnScreen = @params.returnScreen;
            backButton = @params.backButton;
            var retVal = orig(title, returnScreen, backButton);
            if (_afterCreateMenuBuilderWithBackButton != null)
                foreach (Delegates.CreateMenuBuilderWithBackButton_AfterArgs toInvoke in
                         _afterCreateMenuBuilderWithBackButton.GetInvocationList())
                    try
                    {
                        retVal = _afterCreateMenuBuilderWithBackButton.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate MenuBuilder CreateMenuBuilder_AfterArgs(Params_CreateMenuBuilder args, MenuBuilder ret);

        public delegate void CreateMenuBuilder_BeforeArgs(Params_CreateMenuBuilder args);

        public delegate MenuBuilder CreateMenuBuilder_WithArgs(Func<string, MenuBuilder> orig, string title);

        public delegate MenuBuilder CreateMenuBuilderWithBackButton_AfterArgs(
            Params_CreateMenuBuilderWithBackButton args, MenuBuilder ret);

        public delegate void CreateMenuBuilderWithBackButton_BeforeArgs(Params_CreateMenuBuilderWithBackButton args);

        public delegate MenuBuilder CreateMenuBuilderWithBackButton_WithArgs(
            Func<string, MenuScreen, MenuButton, MenuBuilder> orig, string title, MenuScreen returnScreen,
            MenuButton backButton);

        public sealed class Params_CreateMenuBuilder
        {
            public string title;
        }

        public sealed class Params_CreateMenuBuilderWithBackButton
        {
            public MenuButton backButton;
            public MenuScreen returnScreen;
            public string title;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.CreateMenuBuilder_BeforeArgs CreateMenuBuilder
        {
            add
            {
                HookHandler._beforeCreateMenuBuilder += value;
                HookHandler.HookCreateMenuBuilder();
            }
            remove => HookHandler._beforeCreateMenuBuilder -= value;
        }

        public static event Delegates.CreateMenuBuilderWithBackButton_BeforeArgs CreateMenuBuilderWithBackButton
        {
            add
            {
                HookHandler._beforeCreateMenuBuilderWithBackButton += value;
                HookHandler.HookCreateMenuBuilderWithBackButton();
            }
            remove => HookHandler._beforeCreateMenuBuilderWithBackButton -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.CreateMenuBuilder_AfterArgs CreateMenuBuilder
        {
            add
            {
                HookHandler._afterCreateMenuBuilder += value;
                HookHandler.HookCreateMenuBuilder();
            }
            remove => HookHandler._afterCreateMenuBuilder -= value;
        }

        public static event Delegates.CreateMenuBuilderWithBackButton_AfterArgs CreateMenuBuilderWithBackButton
        {
            add
            {
                HookHandler._afterCreateMenuBuilderWithBackButton += value;
                HookHandler.HookCreateMenuBuilderWithBackButton();
            }
            remove => HookHandler._afterCreateMenuBuilderWithBackButton -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.CreateMenuBuilder_WithArgs CreateMenuBuilder
        {
            add => HookEndpointManager.Add<Delegates.CreateMenuBuilder_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuUtils), "CreateMenuBuilder", false), value);
            remove => HookEndpointManager.Remove<Delegates.CreateMenuBuilder_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuUtils), "CreateMenuBuilder", false), value);
        }

        public static event Delegates.CreateMenuBuilderWithBackButton_WithArgs CreateMenuBuilderWithBackButton
        {
            add => HookEndpointManager.Add<Delegates.CreateMenuBuilderWithBackButton_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuUtils), "CreateMenuBuilderWithBackButton", false), value);
            remove => HookEndpointManager.Remove<Delegates.CreateMenuBuilderWithBackButton_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuUtils), "CreateMenuBuilderWithBackButton", false), value);
        }
    }
}