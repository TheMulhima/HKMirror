namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for HeroBox class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnHeroBox
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.HeroBox.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.HeroBox.orig_Start orig, HeroBox self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.HeroBox.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_NormalArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.HeroBox.orig_OnTriggerEnter2D orig, HeroBox self,
            Collider2D otherCollider)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, otherCollider = otherCollider
            };
            _beforeOnTriggerEnter2D?.Invoke(@params);
            self = @params.self;
            otherCollider = @params.otherCollider;
            orig(self, otherCollider);
            if (_afterOnTriggerEnter2D != null) _afterOnTriggerEnter2D.Invoke(@params);
        }

        internal static void HookOnTriggerStay2D()
        {
            if (!HookedList.Contains("OnTriggerStay2D"))
            {
                HookedList.Add("OnTriggerStay2D");
                On.HeroBox.OnTriggerStay2D += OnTriggerStay2D;
            }
        }

        internal static event Delegates.OnTriggerStay2D_BeforeArgs _beforeOnTriggerStay2D;
        internal static event Delegates.OnTriggerStay2D_NormalArgs _afterOnTriggerStay2D;

        private static void OnTriggerStay2D(On.HeroBox.orig_OnTriggerStay2D orig, HeroBox self,
            Collider2D otherCollider)
        {
            Delegates.Params_OnTriggerStay2D @params = new()
            {
                self = self, otherCollider = otherCollider
            };
            _beforeOnTriggerStay2D?.Invoke(@params);
            self = @params.self;
            otherCollider = @params.otherCollider;
            orig(self, otherCollider);
            if (_afterOnTriggerStay2D != null) _afterOnTriggerStay2D.Invoke(@params);
        }

        internal static void HookCheckForDamage()
        {
            if (!HookedList.Contains("CheckForDamage"))
            {
                HookedList.Add("CheckForDamage");
                On.HeroBox.CheckForDamage += CheckForDamage;
            }
        }

        internal static event Delegates.CheckForDamage_BeforeArgs _beforeCheckForDamage;
        internal static event Delegates.CheckForDamage_NormalArgs _afterCheckForDamage;

        private static void CheckForDamage(On.HeroBox.orig_CheckForDamage orig, HeroBox self, Collider2D otherCollider)
        {
            Delegates.Params_CheckForDamage @params = new()
            {
                self = self, otherCollider = otherCollider
            };
            _beforeCheckForDamage?.Invoke(@params);
            self = @params.self;
            otherCollider = @params.otherCollider;
            orig(self, otherCollider);
            if (_afterCheckForDamage != null) _afterCheckForDamage.Invoke(@params);
        }

        internal static void HookIsHitTypeBuffered()
        {
            if (!HookedList.Contains("IsHitTypeBuffered"))
            {
                HookedList.Add("IsHitTypeBuffered");
                On.HeroBox.IsHitTypeBuffered += IsHitTypeBuffered;
            }
        }

        internal static event Delegates.IsHitTypeBuffered_BeforeArgs _beforeIsHitTypeBuffered;
        internal static event Delegates.IsHitTypeBuffered_NormalArgs _afterIsHitTypeBuffered;

        private static bool IsHitTypeBuffered(On.HeroBox.orig_IsHitTypeBuffered orig, int hazardType)
        {
            Delegates.Params_IsHitTypeBuffered @params = new()
            {
                hazardType = hazardType
            };
            _beforeIsHitTypeBuffered?.Invoke(@params);
            hazardType = @params.hazardType;
            var retVal = orig(hazardType);
            if (_afterIsHitTypeBuffered != null) retVal = _afterIsHitTypeBuffered.Invoke(@params);
            return retVal;
        }

        internal static void HookLateUpdate()
        {
            if (!HookedList.Contains("LateUpdate"))
            {
                HookedList.Add("LateUpdate");
                On.HeroBox.LateUpdate += LateUpdate;
            }
        }

        internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
        internal static event Delegates.LateUpdate_NormalArgs _afterLateUpdate;

        private static void LateUpdate(On.HeroBox.orig_LateUpdate orig, HeroBox self)
        {
            Delegates.Params_LateUpdate @params = new()
            {
                self = self
            };
            _beforeLateUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLateUpdate != null) _afterLateUpdate.Invoke(@params);
        }

        internal static void HookApplyBufferedHit()
        {
            if (!HookedList.Contains("ApplyBufferedHit"))
            {
                HookedList.Add("ApplyBufferedHit");
                On.HeroBox.ApplyBufferedHit += ApplyBufferedHit;
            }
        }

        internal static event Delegates.ApplyBufferedHit_BeforeArgs _beforeApplyBufferedHit;
        internal static event Delegates.ApplyBufferedHit_NormalArgs _afterApplyBufferedHit;

        private static void ApplyBufferedHit(On.HeroBox.orig_ApplyBufferedHit orig, HeroBox self)
        {
            Delegates.Params_ApplyBufferedHit @params = new()
            {
                self = self
            };
            _beforeApplyBufferedHit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterApplyBufferedHit != null) _afterApplyBufferedHit.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ApplyBufferedHit_BeforeArgs(Params_ApplyBufferedHit args);

        public delegate void ApplyBufferedHit_NormalArgs(Params_ApplyBufferedHit args);

        public delegate void CheckForDamage_BeforeArgs(Params_CheckForDamage args);

        public delegate void CheckForDamage_NormalArgs(Params_CheckForDamage args);

        public delegate void IsHitTypeBuffered_BeforeArgs(Params_IsHitTypeBuffered args);

        public delegate bool IsHitTypeBuffered_NormalArgs(Params_IsHitTypeBuffered args);

        public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);

        public delegate void LateUpdate_NormalArgs(Params_LateUpdate args);

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_NormalArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerStay2D_BeforeArgs(Params_OnTriggerStay2D args);

        public delegate void OnTriggerStay2D_NormalArgs(Params_OnTriggerStay2D args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Start
        {
            public HeroBox self;
        }

        public sealed class Params_OnTriggerEnter2D
        {
            public Collider2D otherCollider;
            public HeroBox self;
        }

        public sealed class Params_OnTriggerStay2D
        {
            public Collider2D otherCollider;
            public HeroBox self;
        }

        public sealed class Params_CheckForDamage
        {
            public Collider2D otherCollider;
            public HeroBox self;
        }

        public sealed class Params_IsHitTypeBuffered
        {
            public int hazardType;
        }

        public sealed class Params_LateUpdate
        {
            public HeroBox self;
        }

        public sealed class Params_ApplyBufferedHit
        {
            public HeroBox self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.OnTriggerStay2D_BeforeArgs OnTriggerStay2D
        {
            add
            {
                HookHandler._beforeOnTriggerStay2D += value;
                HookHandler.HookOnTriggerStay2D();
            }
            remove => HookHandler._beforeOnTriggerStay2D -= value;
        }

        public static event Delegates.CheckForDamage_BeforeArgs CheckForDamage
        {
            add
            {
                HookHandler._beforeCheckForDamage += value;
                HookHandler.HookCheckForDamage();
            }
            remove => HookHandler._beforeCheckForDamage -= value;
        }

        public static event Delegates.IsHitTypeBuffered_BeforeArgs IsHitTypeBuffered
        {
            add
            {
                HookHandler._beforeIsHitTypeBuffered += value;
                HookHandler.HookIsHitTypeBuffered();
            }
            remove => HookHandler._beforeIsHitTypeBuffered -= value;
        }

        public static event Delegates.LateUpdate_BeforeArgs LateUpdate
        {
            add
            {
                HookHandler._beforeLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._beforeLateUpdate -= value;
        }

        public static event Delegates.ApplyBufferedHit_BeforeArgs ApplyBufferedHit
        {
            add
            {
                HookHandler._beforeApplyBufferedHit += value;
                HookHandler.HookApplyBufferedHit();
            }
            remove => HookHandler._beforeApplyBufferedHit -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnTriggerEnter2D_NormalArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }

        public static event Delegates.OnTriggerStay2D_NormalArgs OnTriggerStay2D
        {
            add
            {
                HookHandler._afterOnTriggerStay2D += value;
                HookHandler.HookOnTriggerStay2D();
            }
            remove => HookHandler._afterOnTriggerStay2D -= value;
        }

        public static event Delegates.CheckForDamage_NormalArgs CheckForDamage
        {
            add
            {
                HookHandler._afterCheckForDamage += value;
                HookHandler.HookCheckForDamage();
            }
            remove => HookHandler._afterCheckForDamage -= value;
        }

        public static event Delegates.IsHitTypeBuffered_NormalArgs IsHitTypeBuffered
        {
            add
            {
                HookHandler._afterIsHitTypeBuffered += value;
                HookHandler.HookIsHitTypeBuffered();
            }
            remove => HookHandler._afterIsHitTypeBuffered -= value;
        }

        public static event Delegates.LateUpdate_NormalArgs LateUpdate
        {
            add
            {
                HookHandler._afterLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._afterLateUpdate -= value;
        }

        public static event Delegates.ApplyBufferedHit_NormalArgs ApplyBufferedHit
        {
            add
            {
                HookHandler._afterApplyBufferedHit += value;
                HookHandler.HookApplyBufferedHit();
            }
            remove => HookHandler._afterApplyBufferedHit -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.HeroBox.hook_Start Start
        {
            add => On.HeroBox.Start += value;
            remove => On.HeroBox.Start -= value;
        }

        public static event On.HeroBox.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.HeroBox.OnTriggerEnter2D += value;
            remove => On.HeroBox.OnTriggerEnter2D -= value;
        }

        public static event On.HeroBox.hook_OnTriggerStay2D OnTriggerStay2D
        {
            add => On.HeroBox.OnTriggerStay2D += value;
            remove => On.HeroBox.OnTriggerStay2D -= value;
        }

        public static event On.HeroBox.hook_CheckForDamage CheckForDamage
        {
            add => On.HeroBox.CheckForDamage += value;
            remove => On.HeroBox.CheckForDamage -= value;
        }

        public static event On.HeroBox.hook_IsHitTypeBuffered IsHitTypeBuffered
        {
            add => On.HeroBox.IsHitTypeBuffered += value;
            remove => On.HeroBox.IsHitTypeBuffered -= value;
        }

        public static event On.HeroBox.hook_LateUpdate LateUpdate
        {
            add => On.HeroBox.LateUpdate += value;
            remove => On.HeroBox.LateUpdate -= value;
        }

        public static event On.HeroBox.hook_ApplyBufferedHit ApplyBufferedHit
        {
            add => On.HeroBox.ApplyBufferedHit += value;
            remove => On.HeroBox.ApplyBufferedHit -= value;
        }
    }
}