using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for DialogueBox class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnDialogueBox
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.DialogueBox.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.DialogueBox.orig_Start orig,DialogueBox self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetConversation()
{
if (!HookedList.Contains("SetConversation"))
{
HookedList.Add("SetConversation");
On.DialogueBox.SetConversation += SetConversation;

}
}
internal static event Delegates.SetConversation_BeforeArgs _beforeSetConversation;
internal static event Delegates.SetConversation_AfterArgs _afterSetConversation;
private static void SetConversation(On.DialogueBox.orig_SetConversation orig,DialogueBox self,  string convName,  string sheetName)
{
Delegates.Params_SetConversation @params = new() 
{
self = self
, convName = convName
, sheetName = sheetName
};
if (_beforeSetConversation != null)
{
foreach (Delegates.SetConversation_BeforeArgs toInvoke in _beforeSetConversation.GetInvocationList())
{
try
{
_beforeSetConversation?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
convName = @params.convName;
sheetName = @params.sheetName;
orig(self, convName, sheetName);
if (_afterSetConversation != null)
{
foreach (Delegates.SetConversation_AfterArgs toInvoke in _afterSetConversation.GetInvocationList())
{
try
{
_afterSetConversation.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookShowPage()
{
if (!HookedList.Contains("ShowPage"))
{
HookedList.Add("ShowPage");
On.DialogueBox.ShowPage += ShowPage;

}
}
internal static event Delegates.ShowPage_BeforeArgs _beforeShowPage;
internal static event Delegates.ShowPage_AfterArgs _afterShowPage;
private static void ShowPage(On.DialogueBox.orig_ShowPage orig,DialogueBox self,  int pageNum)
{
Delegates.Params_ShowPage @params = new() 
{
self = self
, pageNum = pageNum
};
if (_beforeShowPage != null)
{
foreach (Delegates.ShowPage_BeforeArgs toInvoke in _beforeShowPage.GetInvocationList())
{
try
{
_beforeShowPage?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
pageNum = @params.pageNum;
orig(self, pageNum);
if (_afterShowPage != null)
{
foreach (Delegates.ShowPage_AfterArgs toInvoke in _afterShowPage.GetInvocationList())
{
try
{
_afterShowPage.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookShowNextPage()
{
if (!HookedList.Contains("ShowNextPage"))
{
HookedList.Add("ShowNextPage");
On.DialogueBox.ShowNextPage += ShowNextPage;

}
}
internal static event Delegates.ShowNextPage_BeforeArgs _beforeShowNextPage;
internal static event Delegates.ShowNextPage_AfterArgs _afterShowNextPage;
private static void ShowNextPage(On.DialogueBox.orig_ShowNextPage orig,DialogueBox self)
{
Delegates.Params_ShowNextPage @params = new() 
{
self = self
};
if (_beforeShowNextPage != null)
{
foreach (Delegates.ShowNextPage_BeforeArgs toInvoke in _beforeShowNextPage.GetInvocationList())
{
try
{
_beforeShowNextPage?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterShowNextPage != null)
{
foreach (Delegates.ShowNextPage_AfterArgs toInvoke in _afterShowNextPage.GetInvocationList())
{
try
{
_afterShowNextPage.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookShowPrevPage()
{
if (!HookedList.Contains("ShowPrevPage"))
{
HookedList.Add("ShowPrevPage");
On.DialogueBox.ShowPrevPage += ShowPrevPage;

}
}
internal static event Delegates.ShowPrevPage_BeforeArgs _beforeShowPrevPage;
internal static event Delegates.ShowPrevPage_AfterArgs _afterShowPrevPage;
private static void ShowPrevPage(On.DialogueBox.orig_ShowPrevPage orig,DialogueBox self)
{
Delegates.Params_ShowPrevPage @params = new() 
{
self = self
};
if (_beforeShowPrevPage != null)
{
foreach (Delegates.ShowPrevPage_BeforeArgs toInvoke in _beforeShowPrevPage.GetInvocationList())
{
try
{
_beforeShowPrevPage?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterShowPrevPage != null)
{
foreach (Delegates.ShowPrevPage_AfterArgs toInvoke in _afterShowPrevPage.GetInvocationList())
{
try
{
_afterShowPrevPage.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookHideText()
{
if (!HookedList.Contains("HideText"))
{
HookedList.Add("HideText");
On.DialogueBox.HideText += HideText;

}
}
internal static event Delegates.HideText_BeforeArgs _beforeHideText;
internal static event Delegates.HideText_AfterArgs _afterHideText;
private static void HideText(On.DialogueBox.orig_HideText orig,DialogueBox self)
{
Delegates.Params_HideText @params = new() 
{
self = self
};
if (_beforeHideText != null)
{
foreach (Delegates.HideText_BeforeArgs toInvoke in _beforeHideText.GetInvocationList())
{
try
{
_beforeHideText?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterHideText != null)
{
foreach (Delegates.HideText_AfterArgs toInvoke in _afterHideText.GetInvocationList())
{
try
{
_afterHideText.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStartConversation()
{
if (!HookedList.Contains("StartConversation"))
{
HookedList.Add("StartConversation");
On.DialogueBox.StartConversation += StartConversation;

}
}
internal static event Delegates.StartConversation_BeforeArgs _beforeStartConversation;
internal static event Delegates.StartConversation_AfterArgs _afterStartConversation;
private static void StartConversation(On.DialogueBox.orig_StartConversation orig,DialogueBox self,  string convName,  string sheetName)
{
Delegates.Params_StartConversation @params = new() 
{
self = self
, convName = convName
, sheetName = sheetName
};
if (_beforeStartConversation != null)
{
foreach (Delegates.StartConversation_BeforeArgs toInvoke in _beforeStartConversation.GetInvocationList())
{
try
{
_beforeStartConversation?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
convName = @params.convName;
sheetName = @params.sheetName;
orig(self, convName, sheetName);
if (_afterStartConversation != null)
{
foreach (Delegates.StartConversation_AfterArgs toInvoke in _afterStartConversation.GetInvocationList())
{
try
{
_afterStartConversation.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookTypewriteCurrentPage()
{
if (!HookedList.Contains("TypewriteCurrentPage"))
{
HookedList.Add("TypewriteCurrentPage");
On.DialogueBox.TypewriteCurrentPage += TypewriteCurrentPage;

}
}
internal static event Delegates.TypewriteCurrentPage_BeforeArgs _beforeTypewriteCurrentPage;
private static System.Collections.IEnumerator TypewriteCurrentPage(On.DialogueBox.orig_TypewriteCurrentPage orig,DialogueBox self)
{
Delegates.Params_TypewriteCurrentPage @params = new() 
{
self = self
};
if (_beforeTypewriteCurrentPage != null)
{
foreach (Delegates.TypewriteCurrentPage_BeforeArgs toInvoke in _beforeTypewriteCurrentPage.GetInvocationList())
{
try
{
_beforeTypewriteCurrentPage?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
internal static void HookShowNextChar()
{
if (!HookedList.Contains("ShowNextChar"))
{
HookedList.Add("ShowNextChar");
On.DialogueBox.ShowNextChar += ShowNextChar;

}
}
internal static event Delegates.ShowNextChar_BeforeArgs _beforeShowNextChar;
internal static event Delegates.ShowNextChar_AfterArgs _afterShowNextChar;
private static void ShowNextChar(On.DialogueBox.orig_ShowNextChar orig,DialogueBox self)
{
Delegates.Params_ShowNextChar @params = new() 
{
self = self
};
if (_beforeShowNextChar != null)
{
foreach (Delegates.ShowNextChar_BeforeArgs toInvoke in _beforeShowNextChar.GetInvocationList())
{
try
{
_beforeShowNextChar?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterShowNextChar != null)
{
foreach (Delegates.ShowNextChar_AfterArgs toInvoke in _afterShowNextChar.GetInvocationList())
{
try
{
_afterShowNextChar.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStopTypewriter()
{
if (!HookedList.Contains("StopTypewriter"))
{
HookedList.Add("StopTypewriter");
On.DialogueBox.StopTypewriter += StopTypewriter;

}
}
internal static event Delegates.StopTypewriter_BeforeArgs _beforeStopTypewriter;
internal static event Delegates.StopTypewriter_AfterArgs _afterStopTypewriter;
private static void StopTypewriter(On.DialogueBox.orig_StopTypewriter orig,DialogueBox self)
{
Delegates.Params_StopTypewriter @params = new() 
{
self = self
};
if (_beforeStopTypewriter != null)
{
foreach (Delegates.StopTypewriter_BeforeArgs toInvoke in _beforeStopTypewriter.GetInvocationList())
{
try
{
_beforeStopTypewriter?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStopTypewriter != null)
{
foreach (Delegates.StopTypewriter_AfterArgs toInvoke in _afterStopTypewriter.GetInvocationList())
{
try
{
_afterStopTypewriter.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSpeedupTypewriter()
{
if (!HookedList.Contains("SpeedupTypewriter"))
{
HookedList.Add("SpeedupTypewriter");
On.DialogueBox.SpeedupTypewriter += SpeedupTypewriter;

}
}
internal static event Delegates.SpeedupTypewriter_BeforeArgs _beforeSpeedupTypewriter;
internal static event Delegates.SpeedupTypewriter_AfterArgs _afterSpeedupTypewriter;
private static void SpeedupTypewriter(On.DialogueBox.orig_SpeedupTypewriter orig,DialogueBox self)
{
Delegates.Params_SpeedupTypewriter @params = new() 
{
self = self
};
if (_beforeSpeedupTypewriter != null)
{
foreach (Delegates.SpeedupTypewriter_BeforeArgs toInvoke in _beforeSpeedupTypewriter.GetInvocationList())
{
try
{
_beforeSpeedupTypewriter?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSpeedupTypewriter != null)
{
foreach (Delegates.SpeedupTypewriter_AfterArgs toInvoke in _afterSpeedupTypewriter.GetInvocationList())
{
try
{
_afterSpeedupTypewriter.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookRestoreTypewriter()
{
if (!HookedList.Contains("RestoreTypewriter"))
{
HookedList.Add("RestoreTypewriter");
On.DialogueBox.RestoreTypewriter += RestoreTypewriter;

}
}
internal static event Delegates.RestoreTypewriter_BeforeArgs _beforeRestoreTypewriter;
internal static event Delegates.RestoreTypewriter_AfterArgs _afterRestoreTypewriter;
private static void RestoreTypewriter(On.DialogueBox.orig_RestoreTypewriter orig,DialogueBox self)
{
Delegates.Params_RestoreTypewriter @params = new() 
{
self = self
};
if (_beforeRestoreTypewriter != null)
{
foreach (Delegates.RestoreTypewriter_BeforeArgs toInvoke in _beforeRestoreTypewriter.GetInvocationList())
{
try
{
_beforeRestoreTypewriter?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterRestoreTypewriter != null)
{
foreach (Delegates.RestoreTypewriter_AfterArgs toInvoke in _afterRestoreTypewriter.GetInvocationList())
{
try
{
_afterRestoreTypewriter.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSendEndEvent()
{
if (!HookedList.Contains("SendEndEvent"))
{
HookedList.Add("SendEndEvent");
On.DialogueBox.SendEndEvent += SendEndEvent;

}
}
internal static event Delegates.SendEndEvent_BeforeArgs _beforeSendEndEvent;
internal static event Delegates.SendEndEvent_AfterArgs _afterSendEndEvent;
private static void SendEndEvent(On.DialogueBox.orig_SendEndEvent orig,DialogueBox self)
{
Delegates.Params_SendEndEvent @params = new() 
{
self = self
};
if (_beforeSendEndEvent != null)
{
foreach (Delegates.SendEndEvent_BeforeArgs toInvoke in _beforeSendEndEvent.GetInvocationList())
{
try
{
_beforeSendEndEvent?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSendEndEvent != null)
{
foreach (Delegates.SendEndEvent_AfterArgs toInvoke in _afterSendEndEvent.GetInvocationList())
{
try
{
_afterSendEndEvent.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSendPageEndEvent()
{
if (!HookedList.Contains("SendPageEndEvent"))
{
HookedList.Add("SendPageEndEvent");
On.DialogueBox.SendPageEndEvent += SendPageEndEvent;

}
}
internal static event Delegates.SendPageEndEvent_BeforeArgs _beforeSendPageEndEvent;
internal static event Delegates.SendPageEndEvent_AfterArgs _afterSendPageEndEvent;
private static void SendPageEndEvent(On.DialogueBox.orig_SendPageEndEvent orig,DialogueBox self)
{
Delegates.Params_SendPageEndEvent @params = new() 
{
self = self
};
if (_beforeSendPageEndEvent != null)
{
foreach (Delegates.SendPageEndEvent_BeforeArgs toInvoke in _beforeSendPageEndEvent.GetInvocationList())
{
try
{
_beforeSendPageEndEvent?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSendPageEndEvent != null)
{
foreach (Delegates.SendPageEndEvent_AfterArgs toInvoke in _afterSendPageEndEvent.GetInvocationList())
{
try
{
_afterSendPageEndEvent.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSendConvEndEvent()
{
if (!HookedList.Contains("SendConvEndEvent"))
{
HookedList.Add("SendConvEndEvent");
On.DialogueBox.SendConvEndEvent += SendConvEndEvent;

}
}
internal static event Delegates.SendConvEndEvent_BeforeArgs _beforeSendConvEndEvent;
internal static event Delegates.SendConvEndEvent_AfterArgs _afterSendConvEndEvent;
private static void SendConvEndEvent(On.DialogueBox.orig_SendConvEndEvent orig,DialogueBox self)
{
Delegates.Params_SendConvEndEvent @params = new() 
{
self = self
};
if (_beforeSendConvEndEvent != null)
{
foreach (Delegates.SendConvEndEvent_BeforeArgs toInvoke in _beforeSendConvEndEvent.GetInvocationList())
{
try
{
_beforeSendConvEndEvent?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSendConvEndEvent != null)
{
foreach (Delegates.SendConvEndEvent_AfterArgs toInvoke in _afterSendConvEndEvent.GetInvocationList())
{
try
{
_afterSendConvEndEvent.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetFirstCharIndexOnPage()
{
if (!HookedList.Contains("GetFirstCharIndexOnPage"))
{
HookedList.Add("GetFirstCharIndexOnPage");
On.DialogueBox.GetFirstCharIndexOnPage += GetFirstCharIndexOnPage;

}
}
internal static event Delegates.GetFirstCharIndexOnPage_BeforeArgs _beforeGetFirstCharIndexOnPage;
internal static event Delegates.GetFirstCharIndexOnPage_AfterArgs _afterGetFirstCharIndexOnPage;
private static int GetFirstCharIndexOnPage(On.DialogueBox.orig_GetFirstCharIndexOnPage orig,DialogueBox self)
{
Delegates.Params_GetFirstCharIndexOnPage @params = new() 
{
self = self
};
if (_beforeGetFirstCharIndexOnPage != null)
{
foreach (Delegates.GetFirstCharIndexOnPage_BeforeArgs toInvoke in _beforeGetFirstCharIndexOnPage.GetInvocationList())
{
try
{
_beforeGetFirstCharIndexOnPage?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetFirstCharIndexOnPage != null)
{
foreach (Delegates.GetFirstCharIndexOnPage_AfterArgs toInvoke in _afterGetFirstCharIndexOnPage.GetInvocationList())
{
try
{
retVal = _afterGetFirstCharIndexOnPage.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetLastCharIndexOnPage()
{
if (!HookedList.Contains("GetLastCharIndexOnPage"))
{
HookedList.Add("GetLastCharIndexOnPage");
On.DialogueBox.GetLastCharIndexOnPage += GetLastCharIndexOnPage;

}
}
internal static event Delegates.GetLastCharIndexOnPage_BeforeArgs _beforeGetLastCharIndexOnPage;
internal static event Delegates.GetLastCharIndexOnPage_AfterArgs _afterGetLastCharIndexOnPage;
private static int GetLastCharIndexOnPage(On.DialogueBox.orig_GetLastCharIndexOnPage orig,DialogueBox self)
{
Delegates.Params_GetLastCharIndexOnPage @params = new() 
{
self = self
};
if (_beforeGetLastCharIndexOnPage != null)
{
foreach (Delegates.GetLastCharIndexOnPage_BeforeArgs toInvoke in _beforeGetLastCharIndexOnPage.GetInvocationList())
{
try
{
_beforeGetLastCharIndexOnPage?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetLastCharIndexOnPage != null)
{
foreach (Delegates.GetLastCharIndexOnPage_AfterArgs toInvoke in _afterGetLastCharIndexOnPage.GetInvocationList())
{
try
{
retVal = _afterGetLastCharIndexOnPage.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookPrintPageInfo()
{
if (!HookedList.Contains("PrintPageInfo"))
{
HookedList.Add("PrintPageInfo");
On.DialogueBox.PrintPageInfo += PrintPageInfo;

}
}
internal static event Delegates.PrintPageInfo_BeforeArgs _beforePrintPageInfo;
internal static event Delegates.PrintPageInfo_AfterArgs _afterPrintPageInfo;
private static void PrintPageInfo(On.DialogueBox.orig_PrintPageInfo orig,DialogueBox self)
{
Delegates.Params_PrintPageInfo @params = new() 
{
self = self
};
if (_beforePrintPageInfo != null)
{
foreach (Delegates.PrintPageInfo_BeforeArgs toInvoke in _beforePrintPageInfo.GetInvocationList())
{
try
{
_beforePrintPageInfo?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterPrintPageInfo != null)
{
foreach (Delegates.PrintPageInfo_AfterArgs toInvoke in _afterPrintPageInfo.GetInvocationList())
{
try
{
_afterPrintPageInfo.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookPrintPageInfoAll()
{
if (!HookedList.Contains("PrintPageInfoAll"))
{
HookedList.Add("PrintPageInfoAll");
On.DialogueBox.PrintPageInfoAll += PrintPageInfoAll;

}
}
internal static event Delegates.PrintPageInfoAll_BeforeArgs _beforePrintPageInfoAll;
internal static event Delegates.PrintPageInfoAll_AfterArgs _afterPrintPageInfoAll;
private static void PrintPageInfoAll(On.DialogueBox.orig_PrintPageInfoAll orig,DialogueBox self)
{
Delegates.Params_PrintPageInfoAll @params = new() 
{
self = self
};
if (_beforePrintPageInfoAll != null)
{
foreach (Delegates.PrintPageInfoAll_BeforeArgs toInvoke in _beforePrintPageInfoAll.GetInvocationList())
{
try
{
_beforePrintPageInfoAll?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterPrintPageInfoAll != null)
{
foreach (Delegates.PrintPageInfoAll_AfterArgs toInvoke in _afterPrintPageInfoAll.GetInvocationList())
{
try
{
_afterPrintPageInfoAll.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookPrintCurrentConversation()
{
if (!HookedList.Contains("PrintCurrentConversation"))
{
HookedList.Add("PrintCurrentConversation");
On.DialogueBox.PrintCurrentConversation += PrintCurrentConversation;

}
}
internal static event Delegates.PrintCurrentConversation_BeforeArgs _beforePrintCurrentConversation;
internal static event Delegates.PrintCurrentConversation_AfterArgs _afterPrintCurrentConversation;
private static void PrintCurrentConversation(On.DialogueBox.orig_PrintCurrentConversation orig,DialogueBox self)
{
Delegates.Params_PrintCurrentConversation @params = new() 
{
self = self
};
if (_beforePrintCurrentConversation != null)
{
foreach (Delegates.PrintCurrentConversation_BeforeArgs toInvoke in _beforePrintCurrentConversation.GetInvocationList())
{
try
{
_beforePrintCurrentConversation?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterPrintCurrentConversation != null)
{
foreach (Delegates.PrintCurrentConversation_AfterArgs toInvoke in _afterPrintCurrentConversation.GetInvocationList())
{
try
{
_afterPrintCurrentConversation.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Start
{
public DialogueBox self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<DialogueBox> orig, DialogueBox self);
public sealed class Params_SetConversation
{
public DialogueBox self;
public string convName;
public string sheetName;
}
public delegate void SetConversation_BeforeArgs(Params_SetConversation args);
public delegate void SetConversation_AfterArgs(Params_SetConversation args);
public delegate void SetConversation_WithArgs (Action<DialogueBox,  string,  string> orig, DialogueBox self,  string convName,  string sheetName);
public sealed class Params_ShowPage
{
public DialogueBox self;
public int pageNum;
}
public delegate void ShowPage_BeforeArgs(Params_ShowPage args);
public delegate void ShowPage_AfterArgs(Params_ShowPage args);
public delegate void ShowPage_WithArgs (Action<DialogueBox,  int> orig, DialogueBox self,  int pageNum);
public sealed class Params_ShowNextPage
{
public DialogueBox self;
}
public delegate void ShowNextPage_BeforeArgs(Params_ShowNextPage args);
public delegate void ShowNextPage_AfterArgs(Params_ShowNextPage args);
public delegate void ShowNextPage_WithArgs (Action<DialogueBox> orig, DialogueBox self);
public sealed class Params_ShowPrevPage
{
public DialogueBox self;
}
public delegate void ShowPrevPage_BeforeArgs(Params_ShowPrevPage args);
public delegate void ShowPrevPage_AfterArgs(Params_ShowPrevPage args);
public delegate void ShowPrevPage_WithArgs (Action<DialogueBox> orig, DialogueBox self);
public sealed class Params_HideText
{
public DialogueBox self;
}
public delegate void HideText_BeforeArgs(Params_HideText args);
public delegate void HideText_AfterArgs(Params_HideText args);
public delegate void HideText_WithArgs (Action<DialogueBox> orig, DialogueBox self);
public sealed class Params_StartConversation
{
public DialogueBox self;
public string convName;
public string sheetName;
}
public delegate void StartConversation_BeforeArgs(Params_StartConversation args);
public delegate void StartConversation_AfterArgs(Params_StartConversation args);
public delegate void StartConversation_WithArgs (Action<DialogueBox,  string,  string> orig, DialogueBox self,  string convName,  string sheetName);
public sealed class Params_TypewriteCurrentPage
{
public DialogueBox self;
}
public delegate void TypewriteCurrentPage_BeforeArgs(Params_TypewriteCurrentPage args);
public delegate System.Collections.IEnumerator TypewriteCurrentPage_AfterArgs(Params_TypewriteCurrentPage args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator TypewriteCurrentPage_WithArgs (Func<DialogueBox, System.Collections.IEnumerator> orig, DialogueBox self);
public sealed class Params_ShowNextChar
{
public DialogueBox self;
}
public delegate void ShowNextChar_BeforeArgs(Params_ShowNextChar args);
public delegate void ShowNextChar_AfterArgs(Params_ShowNextChar args);
public delegate void ShowNextChar_WithArgs (Action<DialogueBox> orig, DialogueBox self);
public sealed class Params_StopTypewriter
{
public DialogueBox self;
}
public delegate void StopTypewriter_BeforeArgs(Params_StopTypewriter args);
public delegate void StopTypewriter_AfterArgs(Params_StopTypewriter args);
public delegate void StopTypewriter_WithArgs (Action<DialogueBox> orig, DialogueBox self);
public sealed class Params_SpeedupTypewriter
{
public DialogueBox self;
}
public delegate void SpeedupTypewriter_BeforeArgs(Params_SpeedupTypewriter args);
public delegate void SpeedupTypewriter_AfterArgs(Params_SpeedupTypewriter args);
public delegate void SpeedupTypewriter_WithArgs (Action<DialogueBox> orig, DialogueBox self);
public sealed class Params_RestoreTypewriter
{
public DialogueBox self;
}
public delegate void RestoreTypewriter_BeforeArgs(Params_RestoreTypewriter args);
public delegate void RestoreTypewriter_AfterArgs(Params_RestoreTypewriter args);
public delegate void RestoreTypewriter_WithArgs (Action<DialogueBox> orig, DialogueBox self);
public sealed class Params_SendEndEvent
{
public DialogueBox self;
}
public delegate void SendEndEvent_BeforeArgs(Params_SendEndEvent args);
public delegate void SendEndEvent_AfterArgs(Params_SendEndEvent args);
public delegate void SendEndEvent_WithArgs (Action<DialogueBox> orig, DialogueBox self);
public sealed class Params_SendPageEndEvent
{
public DialogueBox self;
}
public delegate void SendPageEndEvent_BeforeArgs(Params_SendPageEndEvent args);
public delegate void SendPageEndEvent_AfterArgs(Params_SendPageEndEvent args);
public delegate void SendPageEndEvent_WithArgs (Action<DialogueBox> orig, DialogueBox self);
public sealed class Params_SendConvEndEvent
{
public DialogueBox self;
}
public delegate void SendConvEndEvent_BeforeArgs(Params_SendConvEndEvent args);
public delegate void SendConvEndEvent_AfterArgs(Params_SendConvEndEvent args);
public delegate void SendConvEndEvent_WithArgs (Action<DialogueBox> orig, DialogueBox self);
public sealed class Params_GetFirstCharIndexOnPage
{
public DialogueBox self;
}
public delegate void GetFirstCharIndexOnPage_BeforeArgs(Params_GetFirstCharIndexOnPage args);
public delegate int GetFirstCharIndexOnPage_AfterArgs(Params_GetFirstCharIndexOnPage args, int ret);
public delegate int GetFirstCharIndexOnPage_WithArgs (Func<DialogueBox, int> orig, DialogueBox self);
public sealed class Params_GetLastCharIndexOnPage
{
public DialogueBox self;
}
public delegate void GetLastCharIndexOnPage_BeforeArgs(Params_GetLastCharIndexOnPage args);
public delegate int GetLastCharIndexOnPage_AfterArgs(Params_GetLastCharIndexOnPage args, int ret);
public delegate int GetLastCharIndexOnPage_WithArgs (Func<DialogueBox, int> orig, DialogueBox self);
public sealed class Params_PrintPageInfo
{
public DialogueBox self;
}
public delegate void PrintPageInfo_BeforeArgs(Params_PrintPageInfo args);
public delegate void PrintPageInfo_AfterArgs(Params_PrintPageInfo args);
public delegate void PrintPageInfo_WithArgs (Action<DialogueBox> orig, DialogueBox self);
public sealed class Params_PrintPageInfoAll
{
public DialogueBox self;
}
public delegate void PrintPageInfoAll_BeforeArgs(Params_PrintPageInfoAll args);
public delegate void PrintPageInfoAll_AfterArgs(Params_PrintPageInfoAll args);
public delegate void PrintPageInfoAll_WithArgs (Action<DialogueBox> orig, DialogueBox self);
public sealed class Params_PrintCurrentConversation
{
public DialogueBox self;
}
public delegate void PrintCurrentConversation_BeforeArgs(Params_PrintCurrentConversation args);
public delegate void PrintCurrentConversation_AfterArgs(Params_PrintCurrentConversation args);
public delegate void PrintCurrentConversation_WithArgs (Action<DialogueBox> orig, DialogueBox self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.SetConversation_BeforeArgs SetConversation
{
add
{

HookHandler._beforeSetConversation += value;
HookHandler.HookSetConversation();
}
remove => HookHandler._beforeSetConversation -= value;
}
public static event Delegates.ShowPage_BeforeArgs ShowPage
{
add
{

HookHandler._beforeShowPage += value;
HookHandler.HookShowPage();
}
remove => HookHandler._beforeShowPage -= value;
}
public static event Delegates.ShowNextPage_BeforeArgs ShowNextPage
{
add
{

HookHandler._beforeShowNextPage += value;
HookHandler.HookShowNextPage();
}
remove => HookHandler._beforeShowNextPage -= value;
}
public static event Delegates.ShowPrevPage_BeforeArgs ShowPrevPage
{
add
{

HookHandler._beforeShowPrevPage += value;
HookHandler.HookShowPrevPage();
}
remove => HookHandler._beforeShowPrevPage -= value;
}
public static event Delegates.HideText_BeforeArgs HideText
{
add
{

HookHandler._beforeHideText += value;
HookHandler.HookHideText();
}
remove => HookHandler._beforeHideText -= value;
}
public static event Delegates.StartConversation_BeforeArgs StartConversation
{
add
{

HookHandler._beforeStartConversation += value;
HookHandler.HookStartConversation();
}
remove => HookHandler._beforeStartConversation -= value;
}
public static event Delegates.TypewriteCurrentPage_BeforeArgs TypewriteCurrentPage
{
add
{

HookHandler._beforeTypewriteCurrentPage += value;
HookHandler.HookTypewriteCurrentPage();
}
remove => HookHandler._beforeTypewriteCurrentPage -= value;
}
public static event Delegates.ShowNextChar_BeforeArgs ShowNextChar
{
add
{

HookHandler._beforeShowNextChar += value;
HookHandler.HookShowNextChar();
}
remove => HookHandler._beforeShowNextChar -= value;
}
public static event Delegates.StopTypewriter_BeforeArgs StopTypewriter
{
add
{

HookHandler._beforeStopTypewriter += value;
HookHandler.HookStopTypewriter();
}
remove => HookHandler._beforeStopTypewriter -= value;
}
public static event Delegates.SpeedupTypewriter_BeforeArgs SpeedupTypewriter
{
add
{

HookHandler._beforeSpeedupTypewriter += value;
HookHandler.HookSpeedupTypewriter();
}
remove => HookHandler._beforeSpeedupTypewriter -= value;
}
public static event Delegates.RestoreTypewriter_BeforeArgs RestoreTypewriter
{
add
{

HookHandler._beforeRestoreTypewriter += value;
HookHandler.HookRestoreTypewriter();
}
remove => HookHandler._beforeRestoreTypewriter -= value;
}
public static event Delegates.SendEndEvent_BeforeArgs SendEndEvent
{
add
{

HookHandler._beforeSendEndEvent += value;
HookHandler.HookSendEndEvent();
}
remove => HookHandler._beforeSendEndEvent -= value;
}
public static event Delegates.SendPageEndEvent_BeforeArgs SendPageEndEvent
{
add
{

HookHandler._beforeSendPageEndEvent += value;
HookHandler.HookSendPageEndEvent();
}
remove => HookHandler._beforeSendPageEndEvent -= value;
}
public static event Delegates.SendConvEndEvent_BeforeArgs SendConvEndEvent
{
add
{

HookHandler._beforeSendConvEndEvent += value;
HookHandler.HookSendConvEndEvent();
}
remove => HookHandler._beforeSendConvEndEvent -= value;
}
public static event Delegates.GetFirstCharIndexOnPage_BeforeArgs GetFirstCharIndexOnPage
{
add
{

HookHandler._beforeGetFirstCharIndexOnPage += value;
HookHandler.HookGetFirstCharIndexOnPage();
}
remove => HookHandler._beforeGetFirstCharIndexOnPage -= value;
}
public static event Delegates.GetLastCharIndexOnPage_BeforeArgs GetLastCharIndexOnPage
{
add
{

HookHandler._beforeGetLastCharIndexOnPage += value;
HookHandler.HookGetLastCharIndexOnPage();
}
remove => HookHandler._beforeGetLastCharIndexOnPage -= value;
}
public static event Delegates.PrintPageInfo_BeforeArgs PrintPageInfo
{
add
{

HookHandler._beforePrintPageInfo += value;
HookHandler.HookPrintPageInfo();
}
remove => HookHandler._beforePrintPageInfo -= value;
}
public static event Delegates.PrintPageInfoAll_BeforeArgs PrintPageInfoAll
{
add
{

HookHandler._beforePrintPageInfoAll += value;
HookHandler.HookPrintPageInfoAll();
}
remove => HookHandler._beforePrintPageInfoAll -= value;
}
public static event Delegates.PrintCurrentConversation_BeforeArgs PrintCurrentConversation
{
add
{

HookHandler._beforePrintCurrentConversation += value;
HookHandler.HookPrintCurrentConversation();
}
remove => HookHandler._beforePrintCurrentConversation -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.SetConversation_AfterArgs SetConversation
{
add
{

HookHandler._afterSetConversation += value;
HookHandler.HookSetConversation();
}
remove => HookHandler._afterSetConversation -= value;
}
public static event Delegates.ShowPage_AfterArgs ShowPage
{
add
{

HookHandler._afterShowPage += value;
HookHandler.HookShowPage();
}
remove => HookHandler._afterShowPage -= value;
}
public static event Delegates.ShowNextPage_AfterArgs ShowNextPage
{
add
{

HookHandler._afterShowNextPage += value;
HookHandler.HookShowNextPage();
}
remove => HookHandler._afterShowNextPage -= value;
}
public static event Delegates.ShowPrevPage_AfterArgs ShowPrevPage
{
add
{

HookHandler._afterShowPrevPage += value;
HookHandler.HookShowPrevPage();
}
remove => HookHandler._afterShowPrevPage -= value;
}
public static event Delegates.HideText_AfterArgs HideText
{
add
{

HookHandler._afterHideText += value;
HookHandler.HookHideText();
}
remove => HookHandler._afterHideText -= value;
}
public static event Delegates.StartConversation_AfterArgs StartConversation
{
add
{

HookHandler._afterStartConversation += value;
HookHandler.HookStartConversation();
}
remove => HookHandler._afterStartConversation -= value;
}
public static event Delegates.ShowNextChar_AfterArgs ShowNextChar
{
add
{

HookHandler._afterShowNextChar += value;
HookHandler.HookShowNextChar();
}
remove => HookHandler._afterShowNextChar -= value;
}
public static event Delegates.StopTypewriter_AfterArgs StopTypewriter
{
add
{

HookHandler._afterStopTypewriter += value;
HookHandler.HookStopTypewriter();
}
remove => HookHandler._afterStopTypewriter -= value;
}
public static event Delegates.SpeedupTypewriter_AfterArgs SpeedupTypewriter
{
add
{

HookHandler._afterSpeedupTypewriter += value;
HookHandler.HookSpeedupTypewriter();
}
remove => HookHandler._afterSpeedupTypewriter -= value;
}
public static event Delegates.RestoreTypewriter_AfterArgs RestoreTypewriter
{
add
{

HookHandler._afterRestoreTypewriter += value;
HookHandler.HookRestoreTypewriter();
}
remove => HookHandler._afterRestoreTypewriter -= value;
}
public static event Delegates.SendEndEvent_AfterArgs SendEndEvent
{
add
{

HookHandler._afterSendEndEvent += value;
HookHandler.HookSendEndEvent();
}
remove => HookHandler._afterSendEndEvent -= value;
}
public static event Delegates.SendPageEndEvent_AfterArgs SendPageEndEvent
{
add
{

HookHandler._afterSendPageEndEvent += value;
HookHandler.HookSendPageEndEvent();
}
remove => HookHandler._afterSendPageEndEvent -= value;
}
public static event Delegates.SendConvEndEvent_AfterArgs SendConvEndEvent
{
add
{

HookHandler._afterSendConvEndEvent += value;
HookHandler.HookSendConvEndEvent();
}
remove => HookHandler._afterSendConvEndEvent -= value;
}
public static event Delegates.GetFirstCharIndexOnPage_AfterArgs GetFirstCharIndexOnPage
{
add
{

HookHandler._afterGetFirstCharIndexOnPage += value;
HookHandler.HookGetFirstCharIndexOnPage();
}
remove => HookHandler._afterGetFirstCharIndexOnPage -= value;
}
public static event Delegates.GetLastCharIndexOnPage_AfterArgs GetLastCharIndexOnPage
{
add
{

HookHandler._afterGetLastCharIndexOnPage += value;
HookHandler.HookGetLastCharIndexOnPage();
}
remove => HookHandler._afterGetLastCharIndexOnPage -= value;
}
public static event Delegates.PrintPageInfo_AfterArgs PrintPageInfo
{
add
{

HookHandler._afterPrintPageInfo += value;
HookHandler.HookPrintPageInfo();
}
remove => HookHandler._afterPrintPageInfo -= value;
}
public static event Delegates.PrintPageInfoAll_AfterArgs PrintPageInfoAll
{
add
{

HookHandler._afterPrintPageInfoAll += value;
HookHandler.HookPrintPageInfoAll();
}
remove => HookHandler._afterPrintPageInfoAll -= value;
}
public static event Delegates.PrintCurrentConversation_AfterArgs PrintCurrentConversation
{
add
{

HookHandler._afterPrintCurrentConversation += value;
HookHandler.HookPrintCurrentConversation();
}
remove => HookHandler._afterPrintCurrentConversation -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.DialogueBox.hook_Start Start
{
add => On.DialogueBox.Start += value;
remove => On.DialogueBox.Start -= value;
}
public static event On.DialogueBox.hook_SetConversation SetConversation
{
add => On.DialogueBox.SetConversation += value;
remove => On.DialogueBox.SetConversation -= value;
}
public static event On.DialogueBox.hook_ShowPage ShowPage
{
add => On.DialogueBox.ShowPage += value;
remove => On.DialogueBox.ShowPage -= value;
}
public static event On.DialogueBox.hook_ShowNextPage ShowNextPage
{
add => On.DialogueBox.ShowNextPage += value;
remove => On.DialogueBox.ShowNextPage -= value;
}
public static event On.DialogueBox.hook_ShowPrevPage ShowPrevPage
{
add => On.DialogueBox.ShowPrevPage += value;
remove => On.DialogueBox.ShowPrevPage -= value;
}
public static event On.DialogueBox.hook_HideText HideText
{
add => On.DialogueBox.HideText += value;
remove => On.DialogueBox.HideText -= value;
}
public static event On.DialogueBox.hook_StartConversation StartConversation
{
add => On.DialogueBox.StartConversation += value;
remove => On.DialogueBox.StartConversation -= value;
}
public static event On.DialogueBox.hook_TypewriteCurrentPage TypewriteCurrentPage
{
add => On.DialogueBox.TypewriteCurrentPage += value;
remove => On.DialogueBox.TypewriteCurrentPage -= value;
}
public static event On.DialogueBox.hook_ShowNextChar ShowNextChar
{
add => On.DialogueBox.ShowNextChar += value;
remove => On.DialogueBox.ShowNextChar -= value;
}
public static event On.DialogueBox.hook_StopTypewriter StopTypewriter
{
add => On.DialogueBox.StopTypewriter += value;
remove => On.DialogueBox.StopTypewriter -= value;
}
public static event On.DialogueBox.hook_SpeedupTypewriter SpeedupTypewriter
{
add => On.DialogueBox.SpeedupTypewriter += value;
remove => On.DialogueBox.SpeedupTypewriter -= value;
}
public static event On.DialogueBox.hook_RestoreTypewriter RestoreTypewriter
{
add => On.DialogueBox.RestoreTypewriter += value;
remove => On.DialogueBox.RestoreTypewriter -= value;
}
public static event On.DialogueBox.hook_SendEndEvent SendEndEvent
{
add => On.DialogueBox.SendEndEvent += value;
remove => On.DialogueBox.SendEndEvent -= value;
}
public static event On.DialogueBox.hook_SendPageEndEvent SendPageEndEvent
{
add => On.DialogueBox.SendPageEndEvent += value;
remove => On.DialogueBox.SendPageEndEvent -= value;
}
public static event On.DialogueBox.hook_SendConvEndEvent SendConvEndEvent
{
add => On.DialogueBox.SendConvEndEvent += value;
remove => On.DialogueBox.SendConvEndEvent -= value;
}
public static event On.DialogueBox.hook_GetFirstCharIndexOnPage GetFirstCharIndexOnPage
{
add => On.DialogueBox.GetFirstCharIndexOnPage += value;
remove => On.DialogueBox.GetFirstCharIndexOnPage -= value;
}
public static event On.DialogueBox.hook_GetLastCharIndexOnPage GetLastCharIndexOnPage
{
add => On.DialogueBox.GetLastCharIndexOnPage += value;
remove => On.DialogueBox.GetLastCharIndexOnPage -= value;
}
public static event On.DialogueBox.hook_PrintPageInfo PrintPageInfo
{
add => On.DialogueBox.PrintPageInfo += value;
remove => On.DialogueBox.PrintPageInfo -= value;
}
public static event On.DialogueBox.hook_PrintPageInfoAll PrintPageInfoAll
{
add => On.DialogueBox.PrintPageInfoAll += value;
remove => On.DialogueBox.PrintPageInfoAll -= value;
}
public static event On.DialogueBox.hook_PrintCurrentConversation PrintCurrentConversation
{
add => On.DialogueBox.PrintCurrentConversation += value;
remove => On.DialogueBox.PrintCurrentConversation -= value;
}
}

}
