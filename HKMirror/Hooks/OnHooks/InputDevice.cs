using System.Collections.ObjectModel;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for InputDevice class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnInputDevice
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Name()
        {
            if (!HookedList.Contains("get_Name"))
            {
                HookedList.Add("get_Name");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Name"), get_Name);
            }
        }

        internal static event Delegates.get_Name_BeforeArgs _beforeget_Name;
        internal static event Delegates.get_Name_NormalArgs _afterget_Name;

        private static string get_Name(Func<InputDevice, string> orig, InputDevice self)
        {
            Delegates.Params_get_Name @params = new()
            {
                self = self
            };
            _beforeget_Name?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Name != null) retVal = _afterget_Name.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Name()
        {
            if (!HookedList.Contains("set_Name"))
            {
                HookedList.Add("set_Name");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_Name"), set_Name);
            }
        }

        internal static event Delegates.set_Name_BeforeArgs _beforeset_Name;
        internal static event Delegates.set_Name_NormalArgs _afterset_Name;

        private static void set_Name(Action<InputDevice, string> orig, InputDevice self, string value)
        {
            Delegates.Params_set_Name @params = new()
            {
                self = self, value = value
            };
            _beforeset_Name?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Name != null) _afterset_Name.Invoke(@params);
        }

        internal static void Hookget_Meta()
        {
            if (!HookedList.Contains("get_Meta"))
            {
                HookedList.Add("get_Meta");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Meta"), get_Meta);
            }
        }

        internal static event Delegates.get_Meta_BeforeArgs _beforeget_Meta;
        internal static event Delegates.get_Meta_NormalArgs _afterget_Meta;

        private static string get_Meta(Func<InputDevice, string> orig, InputDevice self)
        {
            Delegates.Params_get_Meta @params = new()
            {
                self = self
            };
            _beforeget_Meta?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Meta != null) retVal = _afterget_Meta.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Meta()
        {
            if (!HookedList.Contains("set_Meta"))
            {
                HookedList.Add("set_Meta");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_Meta"), set_Meta);
            }
        }

        internal static event Delegates.set_Meta_BeforeArgs _beforeset_Meta;
        internal static event Delegates.set_Meta_NormalArgs _afterset_Meta;

        private static void set_Meta(Action<InputDevice, string> orig, InputDevice self, string value)
        {
            Delegates.Params_set_Meta @params = new()
            {
                self = self, value = value
            };
            _beforeset_Meta?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Meta != null) _afterset_Meta.Invoke(@params);
        }

        internal static void Hookget_SortOrder()
        {
            if (!HookedList.Contains("get_SortOrder"))
            {
                HookedList.Add("get_SortOrder");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_SortOrder"), get_SortOrder);
            }
        }

        internal static event Delegates.get_SortOrder_BeforeArgs _beforeget_SortOrder;
        internal static event Delegates.get_SortOrder_NormalArgs _afterget_SortOrder;

        private static int get_SortOrder(Func<InputDevice, int> orig, InputDevice self)
        {
            Delegates.Params_get_SortOrder @params = new()
            {
                self = self
            };
            _beforeget_SortOrder?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SortOrder != null) retVal = _afterget_SortOrder.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_SortOrder()
        {
            if (!HookedList.Contains("set_SortOrder"))
            {
                HookedList.Add("set_SortOrder");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_SortOrder"), set_SortOrder);
            }
        }

        internal static event Delegates.set_SortOrder_BeforeArgs _beforeset_SortOrder;
        internal static event Delegates.set_SortOrder_NormalArgs _afterset_SortOrder;

        private static void set_SortOrder(Action<InputDevice, int> orig, InputDevice self, int value)
        {
            Delegates.Params_set_SortOrder @params = new()
            {
                self = self, value = value
            };
            _beforeset_SortOrder?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_SortOrder != null) _afterset_SortOrder.Invoke(@params);
        }

        internal static void Hookget_DeviceClass()
        {
            if (!HookedList.Contains("get_DeviceClass"))
            {
                HookedList.Add("get_DeviceClass");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DeviceClass"), get_DeviceClass);
            }
        }

        internal static event Delegates.get_DeviceClass_BeforeArgs _beforeget_DeviceClass;
        internal static event Delegates.get_DeviceClass_NormalArgs _afterget_DeviceClass;

        private static InputDeviceClass get_DeviceClass(Func<InputDevice, InputDeviceClass> orig, InputDevice self)
        {
            Delegates.Params_get_DeviceClass @params = new()
            {
                self = self
            };
            _beforeget_DeviceClass?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DeviceClass != null) retVal = _afterget_DeviceClass.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_DeviceClass()
        {
            if (!HookedList.Contains("set_DeviceClass"))
            {
                HookedList.Add("set_DeviceClass");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_DeviceClass"), set_DeviceClass);
            }
        }

        internal static event Delegates.set_DeviceClass_BeforeArgs _beforeset_DeviceClass;
        internal static event Delegates.set_DeviceClass_NormalArgs _afterset_DeviceClass;

        private static void set_DeviceClass(Action<InputDevice, InputDeviceClass> orig, InputDevice self,
            InputDeviceClass value)
        {
            Delegates.Params_set_DeviceClass @params = new()
            {
                self = self, value = value
            };
            _beforeset_DeviceClass?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_DeviceClass != null) _afterset_DeviceClass.Invoke(@params);
        }

        internal static void Hookget_DeviceStyle()
        {
            if (!HookedList.Contains("get_DeviceStyle"))
            {
                HookedList.Add("get_DeviceStyle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DeviceStyle"), get_DeviceStyle);
            }
        }

        internal static event Delegates.get_DeviceStyle_BeforeArgs _beforeget_DeviceStyle;
        internal static event Delegates.get_DeviceStyle_NormalArgs _afterget_DeviceStyle;

        private static InputDeviceStyle get_DeviceStyle(Func<InputDevice, InputDeviceStyle> orig, InputDevice self)
        {
            Delegates.Params_get_DeviceStyle @params = new()
            {
                self = self
            };
            _beforeget_DeviceStyle?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DeviceStyle != null) retVal = _afterget_DeviceStyle.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_DeviceStyle()
        {
            if (!HookedList.Contains("set_DeviceStyle"))
            {
                HookedList.Add("set_DeviceStyle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_DeviceStyle"), set_DeviceStyle);
            }
        }

        internal static event Delegates.set_DeviceStyle_BeforeArgs _beforeset_DeviceStyle;
        internal static event Delegates.set_DeviceStyle_NormalArgs _afterset_DeviceStyle;

        private static void set_DeviceStyle(Action<InputDevice, InputDeviceStyle> orig, InputDevice self,
            InputDeviceStyle value)
        {
            Delegates.Params_set_DeviceStyle @params = new()
            {
                self = self, value = value
            };
            _beforeset_DeviceStyle?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_DeviceStyle != null) _afterset_DeviceStyle.Invoke(@params);
        }

        internal static void Hookget_GUID()
        {
            if (!HookedList.Contains("get_GUID"))
            {
                HookedList.Add("get_GUID");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_GUID"), get_GUID);
            }
        }

        internal static event Delegates.get_GUID_BeforeArgs _beforeget_GUID;
        internal static event Delegates.get_GUID_NormalArgs _afterget_GUID;

        private static Guid get_GUID(Func<InputDevice, Guid> orig, InputDevice self)
        {
            Delegates.Params_get_GUID @params = new()
            {
                self = self
            };
            _beforeget_GUID?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_GUID != null) retVal = _afterget_GUID.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_GUID()
        {
            if (!HookedList.Contains("set_GUID"))
            {
                HookedList.Add("set_GUID");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_GUID"), set_GUID);
            }
        }

        internal static event Delegates.set_GUID_BeforeArgs _beforeset_GUID;
        internal static event Delegates.set_GUID_NormalArgs _afterset_GUID;

        private static void set_GUID(Action<InputDevice, Guid> orig, InputDevice self, Guid value)
        {
            Delegates.Params_set_GUID @params = new()
            {
                self = self, value = value
            };
            _beforeset_GUID?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_GUID != null) _afterset_GUID.Invoke(@params);
        }

        internal static void Hookget_LastInputTick()
        {
            if (!HookedList.Contains("get_LastInputTick"))
            {
                HookedList.Add("get_LastInputTick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LastInputTick"), get_LastInputTick);
            }
        }

        internal static event Delegates.get_LastInputTick_BeforeArgs _beforeget_LastInputTick;
        internal static event Delegates.get_LastInputTick_NormalArgs _afterget_LastInputTick;

        private static ulong get_LastInputTick(Func<InputDevice, ulong> orig, InputDevice self)
        {
            Delegates.Params_get_LastInputTick @params = new()
            {
                self = self
            };
            _beforeget_LastInputTick?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LastInputTick != null) retVal = _afterget_LastInputTick.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_LastInputTick()
        {
            if (!HookedList.Contains("set_LastInputTick"))
            {
                HookedList.Add("set_LastInputTick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_LastInputTick"), set_LastInputTick);
            }
        }

        internal static event Delegates.set_LastInputTick_BeforeArgs _beforeset_LastInputTick;
        internal static event Delegates.set_LastInputTick_NormalArgs _afterset_LastInputTick;

        private static void set_LastInputTick(Action<InputDevice, ulong> orig, InputDevice self, ulong value)
        {
            Delegates.Params_set_LastInputTick @params = new()
            {
                self = self, value = value
            };
            _beforeset_LastInputTick?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_LastInputTick != null) _afterset_LastInputTick.Invoke(@params);
        }

        internal static void Hookget_IsActive()
        {
            if (!HookedList.Contains("get_IsActive"))
            {
                HookedList.Add("get_IsActive");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_IsActive"), get_IsActive);
            }
        }

        internal static event Delegates.get_IsActive_BeforeArgs _beforeget_IsActive;
        internal static event Delegates.get_IsActive_NormalArgs _afterget_IsActive;

        private static bool get_IsActive(Func<InputDevice, bool> orig, InputDevice self)
        {
            Delegates.Params_get_IsActive @params = new()
            {
                self = self
            };
            _beforeget_IsActive?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsActive != null) retVal = _afterget_IsActive.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_IsActive()
        {
            if (!HookedList.Contains("set_IsActive"))
            {
                HookedList.Add("set_IsActive");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_IsActive"), set_IsActive);
            }
        }

        internal static event Delegates.set_IsActive_BeforeArgs _beforeset_IsActive;
        internal static event Delegates.set_IsActive_NormalArgs _afterset_IsActive;

        private static void set_IsActive(Action<InputDevice, bool> orig, InputDevice self, bool value)
        {
            Delegates.Params_set_IsActive @params = new()
            {
                self = self, value = value
            };
            _beforeset_IsActive?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_IsActive != null) _afterset_IsActive.Invoke(@params);
        }

        internal static void Hookget_IsAttached()
        {
            if (!HookedList.Contains("get_IsAttached"))
            {
                HookedList.Add("get_IsAttached");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_IsAttached"), get_IsAttached);
            }
        }

        internal static event Delegates.get_IsAttached_BeforeArgs _beforeget_IsAttached;
        internal static event Delegates.get_IsAttached_NormalArgs _afterget_IsAttached;

        private static bool get_IsAttached(Func<InputDevice, bool> orig, InputDevice self)
        {
            Delegates.Params_get_IsAttached @params = new()
            {
                self = self
            };
            _beforeget_IsAttached?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsAttached != null) retVal = _afterget_IsAttached.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_IsAttached()
        {
            if (!HookedList.Contains("set_IsAttached"))
            {
                HookedList.Add("set_IsAttached");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_IsAttached"), set_IsAttached);
            }
        }

        internal static event Delegates.set_IsAttached_BeforeArgs _beforeset_IsAttached;
        internal static event Delegates.set_IsAttached_NormalArgs _afterset_IsAttached;

        private static void set_IsAttached(Action<InputDevice, bool> orig, InputDevice self, bool value)
        {
            Delegates.Params_set_IsAttached @params = new()
            {
                self = self, value = value
            };
            _beforeset_IsAttached?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_IsAttached != null) _afterset_IsAttached.Invoke(@params);
        }

        internal static void Hookget_RawSticks()
        {
            if (!HookedList.Contains("get_RawSticks"))
            {
                HookedList.Add("get_RawSticks");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RawSticks"), get_RawSticks);
            }
        }

        internal static event Delegates.get_RawSticks_BeforeArgs _beforeget_RawSticks;
        internal static event Delegates.get_RawSticks_NormalArgs _afterget_RawSticks;

        private static bool get_RawSticks(Func<InputDevice, bool> orig, InputDevice self)
        {
            Delegates.Params_get_RawSticks @params = new()
            {
                self = self
            };
            _beforeget_RawSticks?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_RawSticks != null) retVal = _afterget_RawSticks.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_RawSticks()
        {
            if (!HookedList.Contains("set_RawSticks"))
            {
                HookedList.Add("set_RawSticks");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_RawSticks"), set_RawSticks);
            }
        }

        internal static event Delegates.set_RawSticks_BeforeArgs _beforeset_RawSticks;
        internal static event Delegates.set_RawSticks_NormalArgs _afterset_RawSticks;

        private static void set_RawSticks(Action<InputDevice, bool> orig, InputDevice self, bool value)
        {
            Delegates.Params_set_RawSticks @params = new()
            {
                self = self, value = value
            };
            _beforeset_RawSticks?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_RawSticks != null) _afterset_RawSticks.Invoke(@params);
        }

        internal static void Hookget_Controls()
        {
            if (!HookedList.Contains("get_Controls"))
            {
                HookedList.Add("get_Controls");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Controls"), get_Controls);
            }
        }

        internal static event Delegates.get_Controls_BeforeArgs _beforeget_Controls;
        internal static event Delegates.get_Controls_NormalArgs _afterget_Controls;

        private static ReadOnlyCollection<InputControl> get_Controls(
            Func<InputDevice, ReadOnlyCollection<InputControl>> orig, InputDevice self)
        {
            Delegates.Params_get_Controls @params = new()
            {
                self = self
            };
            _beforeget_Controls?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Controls != null) retVal = _afterget_Controls.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Controls()
        {
            if (!HookedList.Contains("set_Controls"))
            {
                HookedList.Add("set_Controls");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_Controls"), set_Controls);
            }
        }

        internal static event Delegates.set_Controls_BeforeArgs _beforeset_Controls;
        internal static event Delegates.set_Controls_NormalArgs _afterset_Controls;

        private static void set_Controls(Action<InputDevice, ReadOnlyCollection<InputControl>> orig, InputDevice self,
            ReadOnlyCollection<InputControl> value)
        {
            Delegates.Params_set_Controls @params = new()
            {
                self = self, value = value
            };
            _beforeset_Controls?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Controls != null) _afterset_Controls.Invoke(@params);
        }

        internal static void Hookget_ControlsByTarget()
        {
            if (!HookedList.Contains("get_ControlsByTarget"))
            {
                HookedList.Add("get_ControlsByTarget");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_ControlsByTarget"),
                    get_ControlsByTarget);
            }
        }

        internal static event Delegates.get_ControlsByTarget_BeforeArgs _beforeget_ControlsByTarget;
        internal static event Delegates.get_ControlsByTarget_NormalArgs _afterget_ControlsByTarget;

        private static InputControl[] get_ControlsByTarget(Func<InputDevice, InputControl[]> orig, InputDevice self)
        {
            Delegates.Params_get_ControlsByTarget @params = new()
            {
                self = self
            };
            _beforeget_ControlsByTarget?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ControlsByTarget != null) retVal = _afterget_ControlsByTarget.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_ControlsByTarget()
        {
            if (!HookedList.Contains("set_ControlsByTarget"))
            {
                HookedList.Add("set_ControlsByTarget");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_ControlsByTarget"),
                    set_ControlsByTarget);
            }
        }

        internal static event Delegates.set_ControlsByTarget_BeforeArgs _beforeset_ControlsByTarget;
        internal static event Delegates.set_ControlsByTarget_NormalArgs _afterset_ControlsByTarget;

        private static void set_ControlsByTarget(Action<InputDevice, InputControl[]> orig, InputDevice self,
            InputControl[] value)
        {
            Delegates.Params_set_ControlsByTarget @params = new()
            {
                self = self, value = value
            };
            _beforeset_ControlsByTarget?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ControlsByTarget != null) _afterset_ControlsByTarget.Invoke(@params);
        }

        internal static void Hookget_LeftStick()
        {
            if (!HookedList.Contains("get_LeftStick"))
            {
                HookedList.Add("get_LeftStick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStick"), get_LeftStick);
            }
        }

        internal static event Delegates.get_LeftStick_BeforeArgs _beforeget_LeftStick;
        internal static event Delegates.get_LeftStick_NormalArgs _afterget_LeftStick;

        private static TwoAxisInputControl get_LeftStick(Func<InputDevice, TwoAxisInputControl> orig, InputDevice self)
        {
            Delegates.Params_get_LeftStick @params = new()
            {
                self = self
            };
            _beforeget_LeftStick?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LeftStick != null) retVal = _afterget_LeftStick.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_LeftStick()
        {
            if (!HookedList.Contains("set_LeftStick"))
            {
                HookedList.Add("set_LeftStick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_LeftStick"), set_LeftStick);
            }
        }

        internal static event Delegates.set_LeftStick_BeforeArgs _beforeset_LeftStick;
        internal static event Delegates.set_LeftStick_NormalArgs _afterset_LeftStick;

        private static void set_LeftStick(Action<InputDevice, TwoAxisInputControl> orig, InputDevice self,
            TwoAxisInputControl value)
        {
            Delegates.Params_set_LeftStick @params = new()
            {
                self = self, value = value
            };
            _beforeset_LeftStick?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_LeftStick != null) _afterset_LeftStick.Invoke(@params);
        }

        internal static void Hookget_RightStick()
        {
            if (!HookedList.Contains("get_RightStick"))
            {
                HookedList.Add("get_RightStick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStick"), get_RightStick);
            }
        }

        internal static event Delegates.get_RightStick_BeforeArgs _beforeget_RightStick;
        internal static event Delegates.get_RightStick_NormalArgs _afterget_RightStick;

        private static TwoAxisInputControl get_RightStick(Func<InputDevice, TwoAxisInputControl> orig, InputDevice self)
        {
            Delegates.Params_get_RightStick @params = new()
            {
                self = self
            };
            _beforeget_RightStick?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_RightStick != null) retVal = _afterget_RightStick.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_RightStick()
        {
            if (!HookedList.Contains("set_RightStick"))
            {
                HookedList.Add("set_RightStick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_RightStick"), set_RightStick);
            }
        }

        internal static event Delegates.set_RightStick_BeforeArgs _beforeset_RightStick;
        internal static event Delegates.set_RightStick_NormalArgs _afterset_RightStick;

        private static void set_RightStick(Action<InputDevice, TwoAxisInputControl> orig, InputDevice self,
            TwoAxisInputControl value)
        {
            Delegates.Params_set_RightStick @params = new()
            {
                self = self, value = value
            };
            _beforeset_RightStick?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_RightStick != null) _afterset_RightStick.Invoke(@params);
        }

        internal static void Hookget_DPad()
        {
            if (!HookedList.Contains("get_DPad"))
            {
                HookedList.Add("get_DPad");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DPad"), get_DPad);
            }
        }

        internal static event Delegates.get_DPad_BeforeArgs _beforeget_DPad;
        internal static event Delegates.get_DPad_NormalArgs _afterget_DPad;

        private static TwoAxisInputControl get_DPad(Func<InputDevice, TwoAxisInputControl> orig, InputDevice self)
        {
            Delegates.Params_get_DPad @params = new()
            {
                self = self
            };
            _beforeget_DPad?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DPad != null) retVal = _afterget_DPad.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_DPad()
        {
            if (!HookedList.Contains("set_DPad"))
            {
                HookedList.Add("set_DPad");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_DPad"), set_DPad);
            }
        }

        internal static event Delegates.set_DPad_BeforeArgs _beforeset_DPad;
        internal static event Delegates.set_DPad_NormalArgs _afterset_DPad;

        private static void set_DPad(Action<InputDevice, TwoAxisInputControl> orig, InputDevice self,
            TwoAxisInputControl value)
        {
            Delegates.Params_set_DPad @params = new()
            {
                self = self, value = value
            };
            _beforeset_DPad?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_DPad != null) _afterset_DPad.Invoke(@params);
        }

        internal static void Hookget_LeftCommandControl()
        {
            if (!HookedList.Contains("get_LeftCommandControl"))
            {
                HookedList.Add("get_LeftCommandControl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftCommandControl"),
                    get_LeftCommandControl);
            }
        }

        internal static event Delegates.get_LeftCommandControl_BeforeArgs _beforeget_LeftCommandControl;
        internal static event Delegates.get_LeftCommandControl_NormalArgs _afterget_LeftCommandControl;

        private static InputControlType get_LeftCommandControl(Func<InputDevice, InputControlType> orig,
            InputDevice self)
        {
            Delegates.Params_get_LeftCommandControl @params = new()
            {
                self = self
            };
            _beforeget_LeftCommandControl?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LeftCommandControl != null) retVal = _afterget_LeftCommandControl.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_LeftCommandControl()
        {
            if (!HookedList.Contains("set_LeftCommandControl"))
            {
                HookedList.Add("set_LeftCommandControl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_LeftCommandControl"),
                    set_LeftCommandControl);
            }
        }

        internal static event Delegates.set_LeftCommandControl_BeforeArgs _beforeset_LeftCommandControl;
        internal static event Delegates.set_LeftCommandControl_NormalArgs _afterset_LeftCommandControl;

        private static void set_LeftCommandControl(Action<InputDevice, InputControlType> orig, InputDevice self,
            InputControlType value)
        {
            Delegates.Params_set_LeftCommandControl @params = new()
            {
                self = self, value = value
            };
            _beforeset_LeftCommandControl?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_LeftCommandControl != null) _afterset_LeftCommandControl.Invoke(@params);
        }

        internal static void Hookget_RightCommandControl()
        {
            if (!HookedList.Contains("get_RightCommandControl"))
            {
                HookedList.Add("get_RightCommandControl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightCommandControl"),
                    get_RightCommandControl);
            }
        }

        internal static event Delegates.get_RightCommandControl_BeforeArgs _beforeget_RightCommandControl;
        internal static event Delegates.get_RightCommandControl_NormalArgs _afterget_RightCommandControl;

        private static InputControlType get_RightCommandControl(Func<InputDevice, InputControlType> orig,
            InputDevice self)
        {
            Delegates.Params_get_RightCommandControl @params = new()
            {
                self = self
            };
            _beforeget_RightCommandControl?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_RightCommandControl != null) retVal = _afterget_RightCommandControl.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_RightCommandControl()
        {
            if (!HookedList.Contains("set_RightCommandControl"))
            {
                HookedList.Add("set_RightCommandControl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_RightCommandControl"),
                    set_RightCommandControl);
            }
        }

        internal static event Delegates.set_RightCommandControl_BeforeArgs _beforeset_RightCommandControl;
        internal static event Delegates.set_RightCommandControl_NormalArgs _afterset_RightCommandControl;

        private static void set_RightCommandControl(Action<InputDevice, InputControlType> orig, InputDevice self,
            InputControlType value)
        {
            Delegates.Params_set_RightCommandControl @params = new()
            {
                self = self, value = value
            };
            _beforeset_RightCommandControl?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_RightCommandControl != null) _afterset_RightCommandControl.Invoke(@params);
        }

        internal static void HookOnAttached()
        {
            if (!HookedList.Contains("OnAttached"))
            {
                HookedList.Add("OnAttached");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "OnAttached"), OnAttached);
            }
        }

        internal static event Delegates.OnAttached_BeforeArgs _beforeOnAttached;
        internal static event Delegates.OnAttached_NormalArgs _afterOnAttached;

        private static void OnAttached(Action<InputDevice> orig, InputDevice self)
        {
            Delegates.Params_OnAttached @params = new()
            {
                self = self
            };
            _beforeOnAttached?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnAttached != null) _afterOnAttached.Invoke(@params);
        }

        internal static void HookOnDetached()
        {
            if (!HookedList.Contains("OnDetached"))
            {
                HookedList.Add("OnDetached");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "OnDetached"), OnDetached);
            }
        }

        internal static event Delegates.OnDetached_BeforeArgs _beforeOnDetached;
        internal static event Delegates.OnDetached_NormalArgs _afterOnDetached;

        private static void OnDetached(Action<InputDevice> orig, InputDevice self)
        {
            Delegates.Params_OnDetached @params = new()
            {
                self = self
            };
            _beforeOnDetached?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDetached != null) _afterOnDetached.Invoke(@params);
        }

        internal static void HookAddAliasControls()
        {
            if (!HookedList.Contains("AddAliasControls"))
            {
                HookedList.Add("AddAliasControls");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "AddAliasControls"), AddAliasControls);
            }
        }

        internal static event Delegates.AddAliasControls_BeforeArgs _beforeAddAliasControls;
        internal static event Delegates.AddAliasControls_NormalArgs _afterAddAliasControls;

        private static void AddAliasControls(Action<InputDevice> orig, InputDevice self)
        {
            Delegates.Params_AddAliasControls @params = new()
            {
                self = self
            };
            _beforeAddAliasControls?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAddAliasControls != null) _afterAddAliasControls.Invoke(@params);
        }

        internal static void HookRemoveAliasControls()
        {
            if (!HookedList.Contains("RemoveAliasControls"))
            {
                HookedList.Add("RemoveAliasControls");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "RemoveAliasControls"),
                    RemoveAliasControls);
            }
        }

        internal static event Delegates.RemoveAliasControls_BeforeArgs _beforeRemoveAliasControls;
        internal static event Delegates.RemoveAliasControls_NormalArgs _afterRemoveAliasControls;

        private static void RemoveAliasControls(Action<InputDevice> orig, InputDevice self)
        {
            Delegates.Params_RemoveAliasControls @params = new()
            {
                self = self
            };
            _beforeRemoveAliasControls?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRemoveAliasControls != null) _afterRemoveAliasControls.Invoke(@params);
        }

        internal static void HookClearControls()
        {
            if (!HookedList.Contains("ClearControls"))
            {
                HookedList.Add("ClearControls");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ClearControls"), ClearControls);
            }
        }

        internal static event Delegates.ClearControls_BeforeArgs _beforeClearControls;
        internal static event Delegates.ClearControls_NormalArgs _afterClearControls;

        private static void ClearControls(Action<InputDevice> orig, InputDevice self)
        {
            Delegates.Params_ClearControls @params = new()
            {
                self = self
            };
            _beforeClearControls?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClearControls != null) _afterClearControls.Invoke(@params);
        }

        internal static void HookHasControl()
        {
            if (!HookedList.Contains("HasControl"))
            {
                HookedList.Add("HasControl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "HasControl"), HasControl);
            }
        }

        internal static event Delegates.HasControl_BeforeArgs _beforeHasControl;
        internal static event Delegates.HasControl_NormalArgs _afterHasControl;

        private static bool HasControl(Func<InputDevice, InputControlType, bool> orig, InputDevice self,
            InputControlType controlType)
        {
            Delegates.Params_HasControl @params = new()
            {
                self = self, controlType = controlType
            };
            _beforeHasControl?.Invoke(@params);
            self = @params.self;
            controlType = @params.controlType;
            var retVal = orig(self, controlType);
            if (_afterHasControl != null) retVal = _afterHasControl.Invoke(@params);
            return retVal;
        }

        internal static void HookGetControl()
        {
            if (!HookedList.Contains("GetControl"))
            {
                HookedList.Add("GetControl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "GetControl"), GetControl);
            }
        }

        internal static event Delegates.GetControl_BeforeArgs _beforeGetControl;
        internal static event Delegates.GetControl_NormalArgs _afterGetControl;

        private static InputControl GetControl(Func<InputDevice, InputControlType, InputControl> orig, InputDevice self,
            InputControlType controlType)
        {
            Delegates.Params_GetControl @params = new()
            {
                self = self, controlType = controlType
            };
            _beforeGetControl?.Invoke(@params);
            self = @params.self;
            controlType = @params.controlType;
            var retVal = orig(self, controlType);
            if (_afterGetControl != null) retVal = _afterGetControl.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_Item()
        {
            if (!HookedList.Contains("get_Item"))
            {
                HookedList.Add("get_Item");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Item"), get_Item);
            }
        }

        internal static event Delegates.get_Item_BeforeArgs _beforeget_Item;
        internal static event Delegates.get_Item_NormalArgs _afterget_Item;

        private static InputControl get_Item(Func<InputDevice, InputControlType, InputControl> orig, InputDevice self,
            InputControlType controlType)
        {
            Delegates.Params_get_Item @params = new()
            {
                self = self, controlType = controlType
            };
            _beforeget_Item?.Invoke(@params);
            self = @params.self;
            controlType = @params.controlType;
            var retVal = orig(self, controlType);
            if (_afterget_Item != null) retVal = _afterget_Item.Invoke(@params);
            return retVal;
        }

        internal static void HookGetInputControlTypeByName()
        {
            if (!HookedList.Contains("GetInputControlTypeByName"))
            {
                HookedList.Add("GetInputControlTypeByName");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "GetInputControlTypeByName", false),
                    GetInputControlTypeByName);
            }
        }

        internal static event Delegates.GetInputControlTypeByName_BeforeArgs _beforeGetInputControlTypeByName;
        internal static event Delegates.GetInputControlTypeByName_NormalArgs _afterGetInputControlTypeByName;

        private static InputControlType GetInputControlTypeByName(Func<string, InputControlType> orig,
            string inputControlName)
        {
            Delegates.Params_GetInputControlTypeByName @params = new()
            {
                inputControlName = inputControlName
            };
            _beforeGetInputControlTypeByName?.Invoke(@params);
            inputControlName = @params.inputControlName;
            var retVal = orig(inputControlName);
            if (_afterGetInputControlTypeByName != null) retVal = _afterGetInputControlTypeByName.Invoke(@params);
            return retVal;
        }

        internal static void HookGetControlByName()
        {
            if (!HookedList.Contains("GetControlByName"))
            {
                HookedList.Add("GetControlByName");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "GetControlByName"), GetControlByName);
            }
        }

        internal static event Delegates.GetControlByName_BeforeArgs _beforeGetControlByName;
        internal static event Delegates.GetControlByName_NormalArgs _afterGetControlByName;

        private static InputControl GetControlByName(Func<InputDevice, string, InputControl> orig, InputDevice self,
            string controlName)
        {
            Delegates.Params_GetControlByName @params = new()
            {
                self = self, controlName = controlName
            };
            _beforeGetControlByName?.Invoke(@params);
            self = @params.self;
            controlName = @params.controlName;
            var retVal = orig(self, controlName);
            if (_afterGetControlByName != null) retVal = _afterGetControlByName.Invoke(@params);
            return retVal;
        }

        internal static void HookAddControl_InputControlType_string()
        {
            if (!HookedList.Contains("AddControl_InputControlType_string"))
            {
                HookedList.Add("AddControl_InputControlType_string");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "AddControl_InputControlType_string"),
                    AddControl_InputControlType_string);
            }
        }

        internal static event Delegates.AddControl_InputControlType_string_BeforeArgs
            _beforeAddControl_InputControlType_string;

        internal static event Delegates.AddControl_InputControlType_string_NormalArgs
            _afterAddControl_InputControlType_string;

        private static InputControl AddControl_InputControlType_string(
            Func<InputDevice, InputControlType, string, InputControl> orig, InputDevice self,
            InputControlType controlType, string handle)
        {
            Delegates.Params_AddControl_InputControlType_string @params = new()
            {
                self = self, controlType = controlType, handle = handle
            };
            _beforeAddControl_InputControlType_string?.Invoke(@params);
            self = @params.self;
            controlType = @params.controlType;
            handle = @params.handle;
            var retVal = orig(self, controlType, handle);
            if (_afterAddControl_InputControlType_string != null)
                retVal = _afterAddControl_InputControlType_string.Invoke(@params);
            return retVal;
        }

        internal static void HookAddControl_InputControlType_string_float_float()
        {
            if (!HookedList.Contains("AddControl_InputControlType_string_float_float"))
            {
                HookedList.Add("AddControl_InputControlType_string_float_float");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InputDevice),
                        "AddControl_InputControlType_string_float_float"),
                    AddControl_InputControlType_string_float_float);
            }
        }

        internal static event Delegates.AddControl_InputControlType_string_float_float_BeforeArgs
            _beforeAddControl_InputControlType_string_float_float;

        internal static event Delegates.AddControl_InputControlType_string_float_float_NormalArgs
            _afterAddControl_InputControlType_string_float_float;

        private static InputControl AddControl_InputControlType_string_float_float(
            Func<InputDevice, InputControlType, string, float, float, InputControl> orig, InputDevice self,
            InputControlType controlType, string handle, float lowerDeadZone, float upperDeadZone)
        {
            Delegates.Params_AddControl_InputControlType_string_float_float @params = new()
            {
                self = self, controlType = controlType, handle = handle, lowerDeadZone = lowerDeadZone,
                upperDeadZone = upperDeadZone
            };
            _beforeAddControl_InputControlType_string_float_float?.Invoke(@params);
            self = @params.self;
            controlType = @params.controlType;
            handle = @params.handle;
            lowerDeadZone = @params.lowerDeadZone;
            upperDeadZone = @params.upperDeadZone;
            var retVal = orig(self, controlType, handle, lowerDeadZone, upperDeadZone);
            if (_afterAddControl_InputControlType_string_float_float != null)
                retVal = _afterAddControl_InputControlType_string_float_float.Invoke(@params);
            return retVal;
        }

        internal static void HookRemoveControl()
        {
            if (!HookedList.Contains("RemoveControl"))
            {
                HookedList.Add("RemoveControl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "RemoveControl"), RemoveControl);
            }
        }

        internal static event Delegates.RemoveControl_BeforeArgs _beforeRemoveControl;
        internal static event Delegates.RemoveControl_NormalArgs _afterRemoveControl;

        private static void RemoveControl(Action<InputDevice, InputControlType> orig, InputDevice self,
            InputControlType controlType)
        {
            Delegates.Params_RemoveControl @params = new()
            {
                self = self, controlType = controlType
            };
            _beforeRemoveControl?.Invoke(@params);
            self = @params.self;
            controlType = @params.controlType;
            orig(self, controlType);
            if (_afterRemoveControl != null) _afterRemoveControl.Invoke(@params);
        }

        internal static void HookClearInputState()
        {
            if (!HookedList.Contains("ClearInputState"))
            {
                HookedList.Add("ClearInputState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ClearInputState"), ClearInputState);
            }
        }

        internal static event Delegates.ClearInputState_BeforeArgs _beforeClearInputState;
        internal static event Delegates.ClearInputState_NormalArgs _afterClearInputState;

        private static void ClearInputState(Action<InputDevice> orig, InputDevice self)
        {
            Delegates.Params_ClearInputState @params = new()
            {
                self = self
            };
            _beforeClearInputState?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClearInputState != null) _afterClearInputState.Invoke(@params);
        }

        internal static void HookUpdateWithState()
        {
            if (!HookedList.Contains("UpdateWithState"))
            {
                HookedList.Add("UpdateWithState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "UpdateWithState"), UpdateWithState);
            }
        }

        internal static event Delegates.UpdateWithState_BeforeArgs _beforeUpdateWithState;
        internal static event Delegates.UpdateWithState_NormalArgs _afterUpdateWithState;

        private static void UpdateWithState(Action<InputDevice, InputControlType, bool, ulong, float> orig,
            InputDevice self, InputControlType controlType, bool state, ulong updateTick, float deltaTime)
        {
            Delegates.Params_UpdateWithState @params = new()
            {
                self = self, controlType = controlType, state = state, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeUpdateWithState?.Invoke(@params);
            self = @params.self;
            controlType = @params.controlType;
            state = @params.state;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, controlType, state, updateTick, deltaTime);
            if (_afterUpdateWithState != null) _afterUpdateWithState.Invoke(@params);
        }

        internal static void HookUpdateWithValue()
        {
            if (!HookedList.Contains("UpdateWithValue"))
            {
                HookedList.Add("UpdateWithValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "UpdateWithValue"), UpdateWithValue);
            }
        }

        internal static event Delegates.UpdateWithValue_BeforeArgs _beforeUpdateWithValue;
        internal static event Delegates.UpdateWithValue_NormalArgs _afterUpdateWithValue;

        private static void UpdateWithValue(Action<InputDevice, InputControlType, float, ulong, float> orig,
            InputDevice self, InputControlType controlType, float value, ulong updateTick, float deltaTime)
        {
            Delegates.Params_UpdateWithValue @params = new()
            {
                self = self, controlType = controlType, value = value, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeUpdateWithValue?.Invoke(@params);
            self = @params.self;
            controlType = @params.controlType;
            value = @params.value;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, controlType, value, updateTick, deltaTime);
            if (_afterUpdateWithValue != null) _afterUpdateWithValue.Invoke(@params);
        }

        internal static void HookUpdateLeftStickWithValue()
        {
            if (!HookedList.Contains("UpdateLeftStickWithValue"))
            {
                HookedList.Add("UpdateLeftStickWithValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "UpdateLeftStickWithValue"),
                    UpdateLeftStickWithValue);
            }
        }

        internal static event Delegates.UpdateLeftStickWithValue_BeforeArgs _beforeUpdateLeftStickWithValue;
        internal static event Delegates.UpdateLeftStickWithValue_NormalArgs _afterUpdateLeftStickWithValue;

        private static void UpdateLeftStickWithValue(Action<InputDevice, Vector2, ulong, float> orig, InputDevice self,
            Vector2 value, ulong updateTick, float deltaTime)
        {
            Delegates.Params_UpdateLeftStickWithValue @params = new()
            {
                self = self, value = value, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeUpdateLeftStickWithValue?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, value, updateTick, deltaTime);
            if (_afterUpdateLeftStickWithValue != null) _afterUpdateLeftStickWithValue.Invoke(@params);
        }

        internal static void HookUpdateLeftStickWithRawValue()
        {
            if (!HookedList.Contains("UpdateLeftStickWithRawValue"))
            {
                HookedList.Add("UpdateLeftStickWithRawValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "UpdateLeftStickWithRawValue"),
                    UpdateLeftStickWithRawValue);
            }
        }

        internal static event Delegates.UpdateLeftStickWithRawValue_BeforeArgs _beforeUpdateLeftStickWithRawValue;
        internal static event Delegates.UpdateLeftStickWithRawValue_NormalArgs _afterUpdateLeftStickWithRawValue;

        private static void UpdateLeftStickWithRawValue(Action<InputDevice, Vector2, ulong, float> orig,
            InputDevice self, Vector2 value, ulong updateTick, float deltaTime)
        {
            Delegates.Params_UpdateLeftStickWithRawValue @params = new()
            {
                self = self, value = value, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeUpdateLeftStickWithRawValue?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, value, updateTick, deltaTime);
            if (_afterUpdateLeftStickWithRawValue != null) _afterUpdateLeftStickWithRawValue.Invoke(@params);
        }

        internal static void HookCommitLeftStick()
        {
            if (!HookedList.Contains("CommitLeftStick"))
            {
                HookedList.Add("CommitLeftStick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "CommitLeftStick"), CommitLeftStick);
            }
        }

        internal static event Delegates.CommitLeftStick_BeforeArgs _beforeCommitLeftStick;
        internal static event Delegates.CommitLeftStick_NormalArgs _afterCommitLeftStick;

        private static void CommitLeftStick(Action<InputDevice> orig, InputDevice self)
        {
            Delegates.Params_CommitLeftStick @params = new()
            {
                self = self
            };
            _beforeCommitLeftStick?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCommitLeftStick != null) _afterCommitLeftStick.Invoke(@params);
        }

        internal static void HookUpdateRightStickWithValue()
        {
            if (!HookedList.Contains("UpdateRightStickWithValue"))
            {
                HookedList.Add("UpdateRightStickWithValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "UpdateRightStickWithValue"),
                    UpdateRightStickWithValue);
            }
        }

        internal static event Delegates.UpdateRightStickWithValue_BeforeArgs _beforeUpdateRightStickWithValue;
        internal static event Delegates.UpdateRightStickWithValue_NormalArgs _afterUpdateRightStickWithValue;

        private static void UpdateRightStickWithValue(Action<InputDevice, Vector2, ulong, float> orig, InputDevice self,
            Vector2 value, ulong updateTick, float deltaTime)
        {
            Delegates.Params_UpdateRightStickWithValue @params = new()
            {
                self = self, value = value, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeUpdateRightStickWithValue?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, value, updateTick, deltaTime);
            if (_afterUpdateRightStickWithValue != null) _afterUpdateRightStickWithValue.Invoke(@params);
        }

        internal static void HookUpdateRightStickWithRawValue()
        {
            if (!HookedList.Contains("UpdateRightStickWithRawValue"))
            {
                HookedList.Add("UpdateRightStickWithRawValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "UpdateRightStickWithRawValue"),
                    UpdateRightStickWithRawValue);
            }
        }

        internal static event Delegates.UpdateRightStickWithRawValue_BeforeArgs _beforeUpdateRightStickWithRawValue;
        internal static event Delegates.UpdateRightStickWithRawValue_NormalArgs _afterUpdateRightStickWithRawValue;

        private static void UpdateRightStickWithRawValue(Action<InputDevice, Vector2, ulong, float> orig,
            InputDevice self, Vector2 value, ulong updateTick, float deltaTime)
        {
            Delegates.Params_UpdateRightStickWithRawValue @params = new()
            {
                self = self, value = value, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeUpdateRightStickWithRawValue?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, value, updateTick, deltaTime);
            if (_afterUpdateRightStickWithRawValue != null) _afterUpdateRightStickWithRawValue.Invoke(@params);
        }

        internal static void HookCommitRightStick()
        {
            if (!HookedList.Contains("CommitRightStick"))
            {
                HookedList.Add("CommitRightStick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "CommitRightStick"), CommitRightStick);
            }
        }

        internal static event Delegates.CommitRightStick_BeforeArgs _beforeCommitRightStick;
        internal static event Delegates.CommitRightStick_NormalArgs _afterCommitRightStick;

        private static void CommitRightStick(Action<InputDevice> orig, InputDevice self)
        {
            Delegates.Params_CommitRightStick @params = new()
            {
                self = self
            };
            _beforeCommitRightStick?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCommitRightStick != null) _afterCommitRightStick.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "Update"), Update);
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(Action<InputDevice, ulong, float> orig, InputDevice self, ulong updateTick,
            float deltaTime)
        {
            Delegates.Params_Update @params = new()
            {
                self = self, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, updateTick, deltaTime);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookProcessLeftStick()
        {
            if (!HookedList.Contains("ProcessLeftStick"))
            {
                HookedList.Add("ProcessLeftStick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ProcessLeftStick"), ProcessLeftStick);
            }
        }

        internal static event Delegates.ProcessLeftStick_BeforeArgs _beforeProcessLeftStick;
        internal static event Delegates.ProcessLeftStick_NormalArgs _afterProcessLeftStick;

        private static void ProcessLeftStick(Action<InputDevice, ulong, float> orig, InputDevice self, ulong updateTick,
            float deltaTime)
        {
            Delegates.Params_ProcessLeftStick @params = new()
            {
                self = self, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeProcessLeftStick?.Invoke(@params);
            self = @params.self;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, updateTick, deltaTime);
            if (_afterProcessLeftStick != null) _afterProcessLeftStick.Invoke(@params);
        }

        internal static void HookProcessRightStick()
        {
            if (!HookedList.Contains("ProcessRightStick"))
            {
                HookedList.Add("ProcessRightStick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ProcessRightStick"), ProcessRightStick);
            }
        }

        internal static event Delegates.ProcessRightStick_BeforeArgs _beforeProcessRightStick;
        internal static event Delegates.ProcessRightStick_NormalArgs _afterProcessRightStick;

        private static void ProcessRightStick(Action<InputDevice, ulong, float> orig, InputDevice self,
            ulong updateTick, float deltaTime)
        {
            Delegates.Params_ProcessRightStick @params = new()
            {
                self = self, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeProcessRightStick?.Invoke(@params);
            self = @params.self;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, updateTick, deltaTime);
            if (_afterProcessRightStick != null) _afterProcessRightStick.Invoke(@params);
        }

        internal static void HookProcessDPad()
        {
            if (!HookedList.Contains("ProcessDPad"))
            {
                HookedList.Add("ProcessDPad");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ProcessDPad"), ProcessDPad);
            }
        }

        internal static event Delegates.ProcessDPad_BeforeArgs _beforeProcessDPad;
        internal static event Delegates.ProcessDPad_NormalArgs _afterProcessDPad;

        private static void ProcessDPad(Action<InputDevice, ulong, float> orig, InputDevice self, ulong updateTick,
            float deltaTime)
        {
            Delegates.Params_ProcessDPad @params = new()
            {
                self = self, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeProcessDPad?.Invoke(@params);
            self = @params.self;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, updateTick, deltaTime);
            if (_afterProcessDPad != null) _afterProcessDPad.Invoke(@params);
        }

        internal static void HookCommit()
        {
            if (!HookedList.Contains("Commit"))
            {
                HookedList.Add("Commit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "Commit"), Commit);
            }
        }

        internal static event Delegates.Commit_BeforeArgs _beforeCommit;
        internal static event Delegates.Commit_NormalArgs _afterCommit;

        private static void Commit(Action<InputDevice, ulong, float> orig, InputDevice self, ulong updateTick,
            float deltaTime)
        {
            Delegates.Params_Commit @params = new()
            {
                self = self, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeCommit?.Invoke(@params);
            self = @params.self;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, updateTick, deltaTime);
            if (_afterCommit != null) _afterCommit.Invoke(@params);
        }

        internal static void HookLastInputAfter()
        {
            if (!HookedList.Contains("LastInputAfter"))
            {
                HookedList.Add("LastInputAfter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "LastInputAfter"), LastInputAfter);
            }
        }

        internal static event Delegates.LastInputAfter_BeforeArgs _beforeLastInputAfter;
        internal static event Delegates.LastInputAfter_NormalArgs _afterLastInputAfter;

        private static bool LastInputAfter(Func<InputDevice, InputDevice, bool> orig, InputDevice self,
            InputDevice device)
        {
            Delegates.Params_LastInputAfter @params = new()
            {
                self = self, device = device
            };
            _beforeLastInputAfter?.Invoke(@params);
            self = @params.self;
            device = @params.device;
            var retVal = orig(self, device);
            if (_afterLastInputAfter != null) retVal = _afterLastInputAfter.Invoke(@params);
            return retVal;
        }

        internal static void HookRequestActivation()
        {
            if (!HookedList.Contains("RequestActivation"))
            {
                HookedList.Add("RequestActivation");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "RequestActivation"), RequestActivation);
            }
        }

        internal static event Delegates.RequestActivation_BeforeArgs _beforeRequestActivation;
        internal static event Delegates.RequestActivation_NormalArgs _afterRequestActivation;

        private static void RequestActivation(Action<InputDevice> orig, InputDevice self)
        {
            Delegates.Params_RequestActivation @params = new()
            {
                self = self
            };
            _beforeRequestActivation?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRequestActivation != null) _afterRequestActivation.Invoke(@params);
        }

        internal static void HookVibrate_float_float()
        {
            if (!HookedList.Contains("Vibrate_float_float"))
            {
                HookedList.Add("Vibrate_float_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "Vibrate_float_float"),
                    Vibrate_float_float);
            }
        }

        internal static event Delegates.Vibrate_float_float_BeforeArgs _beforeVibrate_float_float;
        internal static event Delegates.Vibrate_float_float_NormalArgs _afterVibrate_float_float;

        private static void Vibrate_float_float(Action<InputDevice, float, float> orig, InputDevice self,
            float leftMotor, float rightMotor)
        {
            Delegates.Params_Vibrate_float_float @params = new()
            {
                self = self, leftMotor = leftMotor, rightMotor = rightMotor
            };
            _beforeVibrate_float_float?.Invoke(@params);
            self = @params.self;
            leftMotor = @params.leftMotor;
            rightMotor = @params.rightMotor;
            orig(self, leftMotor, rightMotor);
            if (_afterVibrate_float_float != null) _afterVibrate_float_float.Invoke(@params);
        }

        internal static void HookVibrate_float()
        {
            if (!HookedList.Contains("Vibrate_float"))
            {
                HookedList.Add("Vibrate_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "Vibrate_float"), Vibrate_float);
            }
        }

        internal static event Delegates.Vibrate_float_BeforeArgs _beforeVibrate_float;
        internal static event Delegates.Vibrate_float_NormalArgs _afterVibrate_float;

        private static void Vibrate_float(Action<InputDevice, float> orig, InputDevice self, float intensity)
        {
            Delegates.Params_Vibrate_float @params = new()
            {
                self = self, intensity = intensity
            };
            _beforeVibrate_float?.Invoke(@params);
            self = @params.self;
            intensity = @params.intensity;
            orig(self, intensity);
            if (_afterVibrate_float != null) _afterVibrate_float.Invoke(@params);
        }

        internal static void HookStopVibration()
        {
            if (!HookedList.Contains("StopVibration"))
            {
                HookedList.Add("StopVibration");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "StopVibration"), StopVibration);
            }
        }

        internal static event Delegates.StopVibration_BeforeArgs _beforeStopVibration;
        internal static event Delegates.StopVibration_NormalArgs _afterStopVibration;

        private static void StopVibration(Action<InputDevice> orig, InputDevice self)
        {
            Delegates.Params_StopVibration @params = new()
            {
                self = self
            };
            _beforeStopVibration?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStopVibration != null) _afterStopVibration.Invoke(@params);
        }

        internal static void HookSetLightColor_float_float_float()
        {
            if (!HookedList.Contains("SetLightColor_float_float_float"))
            {
                HookedList.Add("SetLightColor_float_float_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "SetLightColor_float_float_float"),
                    SetLightColor_float_float_float);
            }
        }

        internal static event Delegates.SetLightColor_float_float_float_BeforeArgs
            _beforeSetLightColor_float_float_float;

        internal static event Delegates.SetLightColor_float_float_float_NormalArgs
            _afterSetLightColor_float_float_float;

        private static void SetLightColor_float_float_float(Action<InputDevice, float, float, float> orig,
            InputDevice self, float red, float green, float blue)
        {
            Delegates.Params_SetLightColor_float_float_float @params = new()
            {
                self = self, red = red, green = green, blue = blue
            };
            _beforeSetLightColor_float_float_float?.Invoke(@params);
            self = @params.self;
            red = @params.red;
            green = @params.green;
            blue = @params.blue;
            orig(self, red, green, blue);
            if (_afterSetLightColor_float_float_float != null) _afterSetLightColor_float_float_float.Invoke(@params);
        }

        internal static void HookSetLightColor_Color()
        {
            if (!HookedList.Contains("SetLightColor_Color"))
            {
                HookedList.Add("SetLightColor_Color");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "SetLightColor_Color"),
                    SetLightColor_Color);
            }
        }

        internal static event Delegates.SetLightColor_Color_BeforeArgs _beforeSetLightColor_Color;
        internal static event Delegates.SetLightColor_Color_NormalArgs _afterSetLightColor_Color;

        private static void SetLightColor_Color(Action<InputDevice, Color> orig, InputDevice self, Color color)
        {
            Delegates.Params_SetLightColor_Color @params = new()
            {
                self = self, color = color
            };
            _beforeSetLightColor_Color?.Invoke(@params);
            self = @params.self;
            color = @params.color;
            orig(self, color);
            if (_afterSetLightColor_Color != null) _afterSetLightColor_Color.Invoke(@params);
        }

        internal static void HookSetLightFlash()
        {
            if (!HookedList.Contains("SetLightFlash"))
            {
                HookedList.Add("SetLightFlash");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "SetLightFlash"), SetLightFlash);
            }
        }

        internal static event Delegates.SetLightFlash_BeforeArgs _beforeSetLightFlash;
        internal static event Delegates.SetLightFlash_NormalArgs _afterSetLightFlash;

        private static void SetLightFlash(Action<InputDevice, float, float> orig, InputDevice self,
            float flashOnDuration, float flashOffDuration)
        {
            Delegates.Params_SetLightFlash @params = new()
            {
                self = self, flashOnDuration = flashOnDuration, flashOffDuration = flashOffDuration
            };
            _beforeSetLightFlash?.Invoke(@params);
            self = @params.self;
            flashOnDuration = @params.flashOnDuration;
            flashOffDuration = @params.flashOffDuration;
            orig(self, flashOnDuration, flashOffDuration);
            if (_afterSetLightFlash != null) _afterSetLightFlash.Invoke(@params);
        }

        internal static void HookStopLightFlash()
        {
            if (!HookedList.Contains("StopLightFlash"))
            {
                HookedList.Add("StopLightFlash");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "StopLightFlash"), StopLightFlash);
            }
        }

        internal static event Delegates.StopLightFlash_BeforeArgs _beforeStopLightFlash;
        internal static event Delegates.StopLightFlash_NormalArgs _afterStopLightFlash;

        private static void StopLightFlash(Action<InputDevice> orig, InputDevice self)
        {
            Delegates.Params_StopLightFlash @params = new()
            {
                self = self
            };
            _beforeStopLightFlash?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStopLightFlash != null) _afterStopLightFlash.Invoke(@params);
        }

        internal static void Hookget_IsSupportedOnThisPlatform()
        {
            if (!HookedList.Contains("get_IsSupportedOnThisPlatform"))
            {
                HookedList.Add("get_IsSupportedOnThisPlatform");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_IsSupportedOnThisPlatform"),
                    get_IsSupportedOnThisPlatform);
            }
        }

        internal static event Delegates.get_IsSupportedOnThisPlatform_BeforeArgs _beforeget_IsSupportedOnThisPlatform;
        internal static event Delegates.get_IsSupportedOnThisPlatform_NormalArgs _afterget_IsSupportedOnThisPlatform;

        private static bool get_IsSupportedOnThisPlatform(Func<InputDevice, bool> orig, InputDevice self)
        {
            Delegates.Params_get_IsSupportedOnThisPlatform @params = new()
            {
                self = self
            };
            _beforeget_IsSupportedOnThisPlatform?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsSupportedOnThisPlatform != null)
                retVal = _afterget_IsSupportedOnThisPlatform.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_IsKnown()
        {
            if (!HookedList.Contains("get_IsKnown"))
            {
                HookedList.Add("get_IsKnown");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_IsKnown"), get_IsKnown);
            }
        }

        internal static event Delegates.get_IsKnown_BeforeArgs _beforeget_IsKnown;
        internal static event Delegates.get_IsKnown_NormalArgs _afterget_IsKnown;

        private static bool get_IsKnown(Func<InputDevice, bool> orig, InputDevice self)
        {
            Delegates.Params_get_IsKnown @params = new()
            {
                self = self
            };
            _beforeget_IsKnown?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsKnown != null) retVal = _afterget_IsKnown.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_IsUnknown()
        {
            if (!HookedList.Contains("get_IsUnknown"))
            {
                HookedList.Add("get_IsUnknown");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_IsUnknown"), get_IsUnknown);
            }
        }

        internal static event Delegates.get_IsUnknown_BeforeArgs _beforeget_IsUnknown;
        internal static event Delegates.get_IsUnknown_NormalArgs _afterget_IsUnknown;

        private static bool get_IsUnknown(Func<InputDevice, bool> orig, InputDevice self)
        {
            Delegates.Params_get_IsUnknown @params = new()
            {
                self = self
            };
            _beforeget_IsUnknown?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsUnknown != null) retVal = _afterget_IsUnknown.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_MenuIsPressed()
        {
            if (!HookedList.Contains("get_MenuIsPressed"))
            {
                HookedList.Add("get_MenuIsPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_MenuIsPressed"), get_MenuIsPressed);
            }
        }

        internal static event Delegates.get_MenuIsPressed_BeforeArgs _beforeget_MenuIsPressed;
        internal static event Delegates.get_MenuIsPressed_NormalArgs _afterget_MenuIsPressed;

        private static bool get_MenuIsPressed(Func<InputDevice, bool> orig, InputDevice self)
        {
            Delegates.Params_get_MenuIsPressed @params = new()
            {
                self = self
            };
            _beforeget_MenuIsPressed?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_MenuIsPressed != null) retVal = _afterget_MenuIsPressed.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_MenuWasPressed()
        {
            if (!HookedList.Contains("get_MenuWasPressed"))
            {
                HookedList.Add("get_MenuWasPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_MenuWasPressed"), get_MenuWasPressed);
            }
        }

        internal static event Delegates.get_MenuWasPressed_BeforeArgs _beforeget_MenuWasPressed;
        internal static event Delegates.get_MenuWasPressed_NormalArgs _afterget_MenuWasPressed;

        private static bool get_MenuWasPressed(Func<InputDevice, bool> orig, InputDevice self)
        {
            Delegates.Params_get_MenuWasPressed @params = new()
            {
                self = self
            };
            _beforeget_MenuWasPressed?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_MenuWasPressed != null) retVal = _afterget_MenuWasPressed.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_MenuWasReleased()
        {
            if (!HookedList.Contains("get_MenuWasReleased"))
            {
                HookedList.Add("get_MenuWasReleased");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_MenuWasReleased"),
                    get_MenuWasReleased);
            }
        }

        internal static event Delegates.get_MenuWasReleased_BeforeArgs _beforeget_MenuWasReleased;
        internal static event Delegates.get_MenuWasReleased_NormalArgs _afterget_MenuWasReleased;

        private static bool get_MenuWasReleased(Func<InputDevice, bool> orig, InputDevice self)
        {
            Delegates.Params_get_MenuWasReleased @params = new()
            {
                self = self
            };
            _beforeget_MenuWasReleased?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_MenuWasReleased != null) retVal = _afterget_MenuWasReleased.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_CommandIsPressed()
        {
            if (!HookedList.Contains("get_CommandIsPressed"))
            {
                HookedList.Add("get_CommandIsPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_CommandIsPressed"),
                    get_CommandIsPressed);
            }
        }

        internal static event Delegates.get_CommandIsPressed_BeforeArgs _beforeget_CommandIsPressed;
        internal static event Delegates.get_CommandIsPressed_NormalArgs _afterget_CommandIsPressed;

        private static bool get_CommandIsPressed(Func<InputDevice, bool> orig, InputDevice self)
        {
            Delegates.Params_get_CommandIsPressed @params = new()
            {
                self = self
            };
            _beforeget_CommandIsPressed?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_CommandIsPressed != null) retVal = _afterget_CommandIsPressed.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_CommandWasPressed()
        {
            if (!HookedList.Contains("get_CommandWasPressed"))
            {
                HookedList.Add("get_CommandWasPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_CommandWasPressed"),
                    get_CommandWasPressed);
            }
        }

        internal static event Delegates.get_CommandWasPressed_BeforeArgs _beforeget_CommandWasPressed;
        internal static event Delegates.get_CommandWasPressed_NormalArgs _afterget_CommandWasPressed;

        private static bool get_CommandWasPressed(Func<InputDevice, bool> orig, InputDevice self)
        {
            Delegates.Params_get_CommandWasPressed @params = new()
            {
                self = self
            };
            _beforeget_CommandWasPressed?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_CommandWasPressed != null) retVal = _afterget_CommandWasPressed.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_CommandWasReleased()
        {
            if (!HookedList.Contains("get_CommandWasReleased"))
            {
                HookedList.Add("get_CommandWasReleased");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_CommandWasReleased"),
                    get_CommandWasReleased);
            }
        }

        internal static event Delegates.get_CommandWasReleased_BeforeArgs _beforeget_CommandWasReleased;
        internal static event Delegates.get_CommandWasReleased_NormalArgs _afterget_CommandWasReleased;

        private static bool get_CommandWasReleased(Func<InputDevice, bool> orig, InputDevice self)
        {
            Delegates.Params_get_CommandWasReleased @params = new()
            {
                self = self
            };
            _beforeget_CommandWasReleased?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_CommandWasReleased != null) retVal = _afterget_CommandWasReleased.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_AnyButton()
        {
            if (!HookedList.Contains("get_AnyButton"))
            {
                HookedList.Add("get_AnyButton");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_AnyButton"), get_AnyButton);
            }
        }

        internal static event Delegates.get_AnyButton_BeforeArgs _beforeget_AnyButton;
        internal static event Delegates.get_AnyButton_NormalArgs _afterget_AnyButton;

        private static InputControl get_AnyButton(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_AnyButton @params = new()
            {
                self = self
            };
            _beforeget_AnyButton?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AnyButton != null) retVal = _afterget_AnyButton.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_AnyButtonIsPressed()
        {
            if (!HookedList.Contains("get_AnyButtonIsPressed"))
            {
                HookedList.Add("get_AnyButtonIsPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_AnyButtonIsPressed"),
                    get_AnyButtonIsPressed);
            }
        }

        internal static event Delegates.get_AnyButtonIsPressed_BeforeArgs _beforeget_AnyButtonIsPressed;
        internal static event Delegates.get_AnyButtonIsPressed_NormalArgs _afterget_AnyButtonIsPressed;

        private static bool get_AnyButtonIsPressed(Func<InputDevice, bool> orig, InputDevice self)
        {
            Delegates.Params_get_AnyButtonIsPressed @params = new()
            {
                self = self
            };
            _beforeget_AnyButtonIsPressed?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AnyButtonIsPressed != null) retVal = _afterget_AnyButtonIsPressed.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_AnyButtonWasPressed()
        {
            if (!HookedList.Contains("get_AnyButtonWasPressed"))
            {
                HookedList.Add("get_AnyButtonWasPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_AnyButtonWasPressed"),
                    get_AnyButtonWasPressed);
            }
        }

        internal static event Delegates.get_AnyButtonWasPressed_BeforeArgs _beforeget_AnyButtonWasPressed;
        internal static event Delegates.get_AnyButtonWasPressed_NormalArgs _afterget_AnyButtonWasPressed;

        private static bool get_AnyButtonWasPressed(Func<InputDevice, bool> orig, InputDevice self)
        {
            Delegates.Params_get_AnyButtonWasPressed @params = new()
            {
                self = self
            };
            _beforeget_AnyButtonWasPressed?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AnyButtonWasPressed != null) retVal = _afterget_AnyButtonWasPressed.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_AnyButtonWasReleased()
        {
            if (!HookedList.Contains("get_AnyButtonWasReleased"))
            {
                HookedList.Add("get_AnyButtonWasReleased");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_AnyButtonWasReleased"),
                    get_AnyButtonWasReleased);
            }
        }

        internal static event Delegates.get_AnyButtonWasReleased_BeforeArgs _beforeget_AnyButtonWasReleased;
        internal static event Delegates.get_AnyButtonWasReleased_NormalArgs _afterget_AnyButtonWasReleased;

        private static bool get_AnyButtonWasReleased(Func<InputDevice, bool> orig, InputDevice self)
        {
            Delegates.Params_get_AnyButtonWasReleased @params = new()
            {
                self = self
            };
            _beforeget_AnyButtonWasReleased?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AnyButtonWasReleased != null) retVal = _afterget_AnyButtonWasReleased.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_Direction()
        {
            if (!HookedList.Contains("get_Direction"))
            {
                HookedList.Add("get_Direction");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Direction"), get_Direction);
            }
        }

        internal static event Delegates.get_Direction_BeforeArgs _beforeget_Direction;
        internal static event Delegates.get_Direction_NormalArgs _afterget_Direction;

        private static TwoAxisInputControl get_Direction(Func<InputDevice, TwoAxisInputControl> orig, InputDevice self)
        {
            Delegates.Params_get_Direction @params = new()
            {
                self = self
            };
            _beforeget_Direction?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Direction != null) retVal = _afterget_Direction.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_LeftStickUp()
        {
            if (!HookedList.Contains("get_LeftStickUp"))
            {
                HookedList.Add("get_LeftStickUp");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStickUp"), get_LeftStickUp);
            }
        }

        internal static event Delegates.get_LeftStickUp_BeforeArgs _beforeget_LeftStickUp;
        internal static event Delegates.get_LeftStickUp_NormalArgs _afterget_LeftStickUp;

        private static InputControl get_LeftStickUp(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_LeftStickUp @params = new()
            {
                self = self
            };
            _beforeget_LeftStickUp?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LeftStickUp != null) retVal = _afterget_LeftStickUp.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_LeftStickDown()
        {
            if (!HookedList.Contains("get_LeftStickDown"))
            {
                HookedList.Add("get_LeftStickDown");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStickDown"), get_LeftStickDown);
            }
        }

        internal static event Delegates.get_LeftStickDown_BeforeArgs _beforeget_LeftStickDown;
        internal static event Delegates.get_LeftStickDown_NormalArgs _afterget_LeftStickDown;

        private static InputControl get_LeftStickDown(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_LeftStickDown @params = new()
            {
                self = self
            };
            _beforeget_LeftStickDown?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LeftStickDown != null) retVal = _afterget_LeftStickDown.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_LeftStickLeft()
        {
            if (!HookedList.Contains("get_LeftStickLeft"))
            {
                HookedList.Add("get_LeftStickLeft");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStickLeft"), get_LeftStickLeft);
            }
        }

        internal static event Delegates.get_LeftStickLeft_BeforeArgs _beforeget_LeftStickLeft;
        internal static event Delegates.get_LeftStickLeft_NormalArgs _afterget_LeftStickLeft;

        private static InputControl get_LeftStickLeft(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_LeftStickLeft @params = new()
            {
                self = self
            };
            _beforeget_LeftStickLeft?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LeftStickLeft != null) retVal = _afterget_LeftStickLeft.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_LeftStickRight()
        {
            if (!HookedList.Contains("get_LeftStickRight"))
            {
                HookedList.Add("get_LeftStickRight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStickRight"), get_LeftStickRight);
            }
        }

        internal static event Delegates.get_LeftStickRight_BeforeArgs _beforeget_LeftStickRight;
        internal static event Delegates.get_LeftStickRight_NormalArgs _afterget_LeftStickRight;

        private static InputControl get_LeftStickRight(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_LeftStickRight @params = new()
            {
                self = self
            };
            _beforeget_LeftStickRight?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LeftStickRight != null) retVal = _afterget_LeftStickRight.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_RightStickUp()
        {
            if (!HookedList.Contains("get_RightStickUp"))
            {
                HookedList.Add("get_RightStickUp");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStickUp"), get_RightStickUp);
            }
        }

        internal static event Delegates.get_RightStickUp_BeforeArgs _beforeget_RightStickUp;
        internal static event Delegates.get_RightStickUp_NormalArgs _afterget_RightStickUp;

        private static InputControl get_RightStickUp(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_RightStickUp @params = new()
            {
                self = self
            };
            _beforeget_RightStickUp?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_RightStickUp != null) retVal = _afterget_RightStickUp.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_RightStickDown()
        {
            if (!HookedList.Contains("get_RightStickDown"))
            {
                HookedList.Add("get_RightStickDown");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStickDown"), get_RightStickDown);
            }
        }

        internal static event Delegates.get_RightStickDown_BeforeArgs _beforeget_RightStickDown;
        internal static event Delegates.get_RightStickDown_NormalArgs _afterget_RightStickDown;

        private static InputControl get_RightStickDown(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_RightStickDown @params = new()
            {
                self = self
            };
            _beforeget_RightStickDown?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_RightStickDown != null) retVal = _afterget_RightStickDown.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_RightStickLeft()
        {
            if (!HookedList.Contains("get_RightStickLeft"))
            {
                HookedList.Add("get_RightStickLeft");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStickLeft"), get_RightStickLeft);
            }
        }

        internal static event Delegates.get_RightStickLeft_BeforeArgs _beforeget_RightStickLeft;
        internal static event Delegates.get_RightStickLeft_NormalArgs _afterget_RightStickLeft;

        private static InputControl get_RightStickLeft(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_RightStickLeft @params = new()
            {
                self = self
            };
            _beforeget_RightStickLeft?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_RightStickLeft != null) retVal = _afterget_RightStickLeft.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_RightStickRight()
        {
            if (!HookedList.Contains("get_RightStickRight"))
            {
                HookedList.Add("get_RightStickRight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStickRight"),
                    get_RightStickRight);
            }
        }

        internal static event Delegates.get_RightStickRight_BeforeArgs _beforeget_RightStickRight;
        internal static event Delegates.get_RightStickRight_NormalArgs _afterget_RightStickRight;

        private static InputControl get_RightStickRight(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_RightStickRight @params = new()
            {
                self = self
            };
            _beforeget_RightStickRight?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_RightStickRight != null) retVal = _afterget_RightStickRight.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_DPadUp()
        {
            if (!HookedList.Contains("get_DPadUp"))
            {
                HookedList.Add("get_DPadUp");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DPadUp"), get_DPadUp);
            }
        }

        internal static event Delegates.get_DPadUp_BeforeArgs _beforeget_DPadUp;
        internal static event Delegates.get_DPadUp_NormalArgs _afterget_DPadUp;

        private static InputControl get_DPadUp(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_DPadUp @params = new()
            {
                self = self
            };
            _beforeget_DPadUp?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DPadUp != null) retVal = _afterget_DPadUp.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_DPadDown()
        {
            if (!HookedList.Contains("get_DPadDown"))
            {
                HookedList.Add("get_DPadDown");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DPadDown"), get_DPadDown);
            }
        }

        internal static event Delegates.get_DPadDown_BeforeArgs _beforeget_DPadDown;
        internal static event Delegates.get_DPadDown_NormalArgs _afterget_DPadDown;

        private static InputControl get_DPadDown(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_DPadDown @params = new()
            {
                self = self
            };
            _beforeget_DPadDown?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DPadDown != null) retVal = _afterget_DPadDown.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_DPadLeft()
        {
            if (!HookedList.Contains("get_DPadLeft"))
            {
                HookedList.Add("get_DPadLeft");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DPadLeft"), get_DPadLeft);
            }
        }

        internal static event Delegates.get_DPadLeft_BeforeArgs _beforeget_DPadLeft;
        internal static event Delegates.get_DPadLeft_NormalArgs _afterget_DPadLeft;

        private static InputControl get_DPadLeft(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_DPadLeft @params = new()
            {
                self = self
            };
            _beforeget_DPadLeft?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DPadLeft != null) retVal = _afterget_DPadLeft.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_DPadRight()
        {
            if (!HookedList.Contains("get_DPadRight"))
            {
                HookedList.Add("get_DPadRight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DPadRight"), get_DPadRight);
            }
        }

        internal static event Delegates.get_DPadRight_BeforeArgs _beforeget_DPadRight;
        internal static event Delegates.get_DPadRight_NormalArgs _afterget_DPadRight;

        private static InputControl get_DPadRight(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_DPadRight @params = new()
            {
                self = self
            };
            _beforeget_DPadRight?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DPadRight != null) retVal = _afterget_DPadRight.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_Action1()
        {
            if (!HookedList.Contains("get_Action1"))
            {
                HookedList.Add("get_Action1");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Action1"), get_Action1);
            }
        }

        internal static event Delegates.get_Action1_BeforeArgs _beforeget_Action1;
        internal static event Delegates.get_Action1_NormalArgs _afterget_Action1;

        private static InputControl get_Action1(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_Action1 @params = new()
            {
                self = self
            };
            _beforeget_Action1?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Action1 != null) retVal = _afterget_Action1.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_Action2()
        {
            if (!HookedList.Contains("get_Action2"))
            {
                HookedList.Add("get_Action2");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Action2"), get_Action2);
            }
        }

        internal static event Delegates.get_Action2_BeforeArgs _beforeget_Action2;
        internal static event Delegates.get_Action2_NormalArgs _afterget_Action2;

        private static InputControl get_Action2(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_Action2 @params = new()
            {
                self = self
            };
            _beforeget_Action2?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Action2 != null) retVal = _afterget_Action2.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_Action3()
        {
            if (!HookedList.Contains("get_Action3"))
            {
                HookedList.Add("get_Action3");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Action3"), get_Action3);
            }
        }

        internal static event Delegates.get_Action3_BeforeArgs _beforeget_Action3;
        internal static event Delegates.get_Action3_NormalArgs _afterget_Action3;

        private static InputControl get_Action3(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_Action3 @params = new()
            {
                self = self
            };
            _beforeget_Action3?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Action3 != null) retVal = _afterget_Action3.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_Action4()
        {
            if (!HookedList.Contains("get_Action4"))
            {
                HookedList.Add("get_Action4");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Action4"), get_Action4);
            }
        }

        internal static event Delegates.get_Action4_BeforeArgs _beforeget_Action4;
        internal static event Delegates.get_Action4_NormalArgs _afterget_Action4;

        private static InputControl get_Action4(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_Action4 @params = new()
            {
                self = self
            };
            _beforeget_Action4?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Action4 != null) retVal = _afterget_Action4.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_LeftTrigger()
        {
            if (!HookedList.Contains("get_LeftTrigger"))
            {
                HookedList.Add("get_LeftTrigger");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftTrigger"), get_LeftTrigger);
            }
        }

        internal static event Delegates.get_LeftTrigger_BeforeArgs _beforeget_LeftTrigger;
        internal static event Delegates.get_LeftTrigger_NormalArgs _afterget_LeftTrigger;

        private static InputControl get_LeftTrigger(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_LeftTrigger @params = new()
            {
                self = self
            };
            _beforeget_LeftTrigger?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LeftTrigger != null) retVal = _afterget_LeftTrigger.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_RightTrigger()
        {
            if (!HookedList.Contains("get_RightTrigger"))
            {
                HookedList.Add("get_RightTrigger");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightTrigger"), get_RightTrigger);
            }
        }

        internal static event Delegates.get_RightTrigger_BeforeArgs _beforeget_RightTrigger;
        internal static event Delegates.get_RightTrigger_NormalArgs _afterget_RightTrigger;

        private static InputControl get_RightTrigger(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_RightTrigger @params = new()
            {
                self = self
            };
            _beforeget_RightTrigger?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_RightTrigger != null) retVal = _afterget_RightTrigger.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_LeftBumper()
        {
            if (!HookedList.Contains("get_LeftBumper"))
            {
                HookedList.Add("get_LeftBumper");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftBumper"), get_LeftBumper);
            }
        }

        internal static event Delegates.get_LeftBumper_BeforeArgs _beforeget_LeftBumper;
        internal static event Delegates.get_LeftBumper_NormalArgs _afterget_LeftBumper;

        private static InputControl get_LeftBumper(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_LeftBumper @params = new()
            {
                self = self
            };
            _beforeget_LeftBumper?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LeftBumper != null) retVal = _afterget_LeftBumper.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_RightBumper()
        {
            if (!HookedList.Contains("get_RightBumper"))
            {
                HookedList.Add("get_RightBumper");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightBumper"), get_RightBumper);
            }
        }

        internal static event Delegates.get_RightBumper_BeforeArgs _beforeget_RightBumper;
        internal static event Delegates.get_RightBumper_NormalArgs _afterget_RightBumper;

        private static InputControl get_RightBumper(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_RightBumper @params = new()
            {
                self = self
            };
            _beforeget_RightBumper?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_RightBumper != null) retVal = _afterget_RightBumper.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_LeftStickButton()
        {
            if (!HookedList.Contains("get_LeftStickButton"))
            {
                HookedList.Add("get_LeftStickButton");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStickButton"),
                    get_LeftStickButton);
            }
        }

        internal static event Delegates.get_LeftStickButton_BeforeArgs _beforeget_LeftStickButton;
        internal static event Delegates.get_LeftStickButton_NormalArgs _afterget_LeftStickButton;

        private static InputControl get_LeftStickButton(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_LeftStickButton @params = new()
            {
                self = self
            };
            _beforeget_LeftStickButton?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LeftStickButton != null) retVal = _afterget_LeftStickButton.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_RightStickButton()
        {
            if (!HookedList.Contains("get_RightStickButton"))
            {
                HookedList.Add("get_RightStickButton");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStickButton"),
                    get_RightStickButton);
            }
        }

        internal static event Delegates.get_RightStickButton_BeforeArgs _beforeget_RightStickButton;
        internal static event Delegates.get_RightStickButton_NormalArgs _afterget_RightStickButton;

        private static InputControl get_RightStickButton(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_RightStickButton @params = new()
            {
                self = self
            };
            _beforeget_RightStickButton?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_RightStickButton != null) retVal = _afterget_RightStickButton.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_LeftStickX()
        {
            if (!HookedList.Contains("get_LeftStickX"))
            {
                HookedList.Add("get_LeftStickX");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStickX"), get_LeftStickX);
            }
        }

        internal static event Delegates.get_LeftStickX_BeforeArgs _beforeget_LeftStickX;
        internal static event Delegates.get_LeftStickX_NormalArgs _afterget_LeftStickX;

        private static InputControl get_LeftStickX(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_LeftStickX @params = new()
            {
                self = self
            };
            _beforeget_LeftStickX?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LeftStickX != null) retVal = _afterget_LeftStickX.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_LeftStickY()
        {
            if (!HookedList.Contains("get_LeftStickY"))
            {
                HookedList.Add("get_LeftStickY");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStickY"), get_LeftStickY);
            }
        }

        internal static event Delegates.get_LeftStickY_BeforeArgs _beforeget_LeftStickY;
        internal static event Delegates.get_LeftStickY_NormalArgs _afterget_LeftStickY;

        private static InputControl get_LeftStickY(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_LeftStickY @params = new()
            {
                self = self
            };
            _beforeget_LeftStickY?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LeftStickY != null) retVal = _afterget_LeftStickY.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_RightStickX()
        {
            if (!HookedList.Contains("get_RightStickX"))
            {
                HookedList.Add("get_RightStickX");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStickX"), get_RightStickX);
            }
        }

        internal static event Delegates.get_RightStickX_BeforeArgs _beforeget_RightStickX;
        internal static event Delegates.get_RightStickX_NormalArgs _afterget_RightStickX;

        private static InputControl get_RightStickX(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_RightStickX @params = new()
            {
                self = self
            };
            _beforeget_RightStickX?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_RightStickX != null) retVal = _afterget_RightStickX.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_RightStickY()
        {
            if (!HookedList.Contains("get_RightStickY"))
            {
                HookedList.Add("get_RightStickY");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStickY"), get_RightStickY);
            }
        }

        internal static event Delegates.get_RightStickY_BeforeArgs _beforeget_RightStickY;
        internal static event Delegates.get_RightStickY_NormalArgs _afterget_RightStickY;

        private static InputControl get_RightStickY(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_RightStickY @params = new()
            {
                self = self
            };
            _beforeget_RightStickY?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_RightStickY != null) retVal = _afterget_RightStickY.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_DPadX()
        {
            if (!HookedList.Contains("get_DPadX"))
            {
                HookedList.Add("get_DPadX");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DPadX"), get_DPadX);
            }
        }

        internal static event Delegates.get_DPadX_BeforeArgs _beforeget_DPadX;
        internal static event Delegates.get_DPadX_NormalArgs _afterget_DPadX;

        private static InputControl get_DPadX(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_DPadX @params = new()
            {
                self = self
            };
            _beforeget_DPadX?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DPadX != null) retVal = _afterget_DPadX.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_DPadY()
        {
            if (!HookedList.Contains("get_DPadY"))
            {
                HookedList.Add("get_DPadY");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DPadY"), get_DPadY);
            }
        }

        internal static event Delegates.get_DPadY_BeforeArgs _beforeget_DPadY;
        internal static event Delegates.get_DPadY_NormalArgs _afterget_DPadY;

        private static InputControl get_DPadY(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_DPadY @params = new()
            {
                self = self
            };
            _beforeget_DPadY?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DPadY != null) retVal = _afterget_DPadY.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_Command()
        {
            if (!HookedList.Contains("get_Command"))
            {
                HookedList.Add("get_Command");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Command"), get_Command);
            }
        }

        internal static event Delegates.get_Command_BeforeArgs _beforeget_Command;
        internal static event Delegates.get_Command_NormalArgs _afterget_Command;

        private static InputControl get_Command(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_Command @params = new()
            {
                self = self
            };
            _beforeget_Command?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Command != null) retVal = _afterget_Command.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_LeftCommand()
        {
            if (!HookedList.Contains("get_LeftCommand"))
            {
                HookedList.Add("get_LeftCommand");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftCommand"), get_LeftCommand);
            }
        }

        internal static event Delegates.get_LeftCommand_BeforeArgs _beforeget_LeftCommand;
        internal static event Delegates.get_LeftCommand_NormalArgs _afterget_LeftCommand;

        private static InputControl get_LeftCommand(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_LeftCommand @params = new()
            {
                self = self
            };
            _beforeget_LeftCommand?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LeftCommand != null) retVal = _afterget_LeftCommand.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_RightCommand()
        {
            if (!HookedList.Contains("get_RightCommand"))
            {
                HookedList.Add("get_RightCommand");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightCommand"), get_RightCommand);
            }
        }

        internal static event Delegates.get_RightCommand_BeforeArgs _beforeget_RightCommand;
        internal static event Delegates.get_RightCommand_NormalArgs _afterget_RightCommand;

        private static InputControl get_RightCommand(Func<InputDevice, InputControl> orig, InputDevice self)
        {
            Delegates.Params_get_RightCommand @params = new()
            {
                self = self
            };
            _beforeget_RightCommand?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_RightCommand != null) retVal = _afterget_RightCommand.Invoke(@params);
            return retVal;
        }

        internal static void HookExpireControlCache()
        {
            if (!HookedList.Contains("ExpireControlCache"))
            {
                HookedList.Add("ExpireControlCache");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ExpireControlCache"), ExpireControlCache);
            }
        }

        internal static event Delegates.ExpireControlCache_BeforeArgs _beforeExpireControlCache;
        internal static event Delegates.ExpireControlCache_NormalArgs _afterExpireControlCache;

        private static void ExpireControlCache(Action<InputDevice> orig, InputDevice self)
        {
            Delegates.Params_ExpireControlCache @params = new()
            {
                self = self
            };
            _beforeExpireControlCache?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterExpireControlCache != null) _afterExpireControlCache.Invoke(@params);
        }

        internal static void Hookget_NumUnknownAnalogs()
        {
            if (!HookedList.Contains("get_NumUnknownAnalogs"))
            {
                HookedList.Add("get_NumUnknownAnalogs");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_NumUnknownAnalogs"),
                    get_NumUnknownAnalogs);
            }
        }

        internal static event Delegates.get_NumUnknownAnalogs_BeforeArgs _beforeget_NumUnknownAnalogs;
        internal static event Delegates.get_NumUnknownAnalogs_NormalArgs _afterget_NumUnknownAnalogs;

        private static int get_NumUnknownAnalogs(Func<InputDevice, int> orig, InputDevice self)
        {
            Delegates.Params_get_NumUnknownAnalogs @params = new()
            {
                self = self
            };
            _beforeget_NumUnknownAnalogs?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_NumUnknownAnalogs != null) retVal = _afterget_NumUnknownAnalogs.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_NumUnknownButtons()
        {
            if (!HookedList.Contains("get_NumUnknownButtons"))
            {
                HookedList.Add("get_NumUnknownButtons");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_NumUnknownButtons"),
                    get_NumUnknownButtons);
            }
        }

        internal static event Delegates.get_NumUnknownButtons_BeforeArgs _beforeget_NumUnknownButtons;
        internal static event Delegates.get_NumUnknownButtons_NormalArgs _afterget_NumUnknownButtons;

        private static int get_NumUnknownButtons(Func<InputDevice, int> orig, InputDevice self)
        {
            Delegates.Params_get_NumUnknownButtons @params = new()
            {
                self = self
            };
            _beforeget_NumUnknownButtons?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_NumUnknownButtons != null) retVal = _afterget_NumUnknownButtons.Invoke(@params);
            return retVal;
        }

        internal static void HookReadRawButtonState()
        {
            if (!HookedList.Contains("ReadRawButtonState"))
            {
                HookedList.Add("ReadRawButtonState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ReadRawButtonState"), ReadRawButtonState);
            }
        }

        internal static event Delegates.ReadRawButtonState_BeforeArgs _beforeReadRawButtonState;
        internal static event Delegates.ReadRawButtonState_NormalArgs _afterReadRawButtonState;

        private static bool ReadRawButtonState(Func<InputDevice, int, bool> orig, InputDevice self, int index)
        {
            Delegates.Params_ReadRawButtonState @params = new()
            {
                self = self, index = index
            };
            _beforeReadRawButtonState?.Invoke(@params);
            self = @params.self;
            index = @params.index;
            var retVal = orig(self, index);
            if (_afterReadRawButtonState != null) retVal = _afterReadRawButtonState.Invoke(@params);
            return retVal;
        }

        internal static void HookReadRawAnalogValue()
        {
            if (!HookedList.Contains("ReadRawAnalogValue"))
            {
                HookedList.Add("ReadRawAnalogValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ReadRawAnalogValue"), ReadRawAnalogValue);
            }
        }

        internal static event Delegates.ReadRawAnalogValue_BeforeArgs _beforeReadRawAnalogValue;
        internal static event Delegates.ReadRawAnalogValue_NormalArgs _afterReadRawAnalogValue;

        private static float ReadRawAnalogValue(Func<InputDevice, int, float> orig, InputDevice self, int index)
        {
            Delegates.Params_ReadRawAnalogValue @params = new()
            {
                self = self, index = index
            };
            _beforeReadRawAnalogValue?.Invoke(@params);
            self = @params.self;
            index = @params.index;
            var retVal = orig(self, index);
            if (_afterReadRawAnalogValue != null) retVal = _afterReadRawAnalogValue.Invoke(@params);
            return retVal;
        }

        internal static void HookTakeSnapshot()
        {
            if (!HookedList.Contains("TakeSnapshot"))
            {
                HookedList.Add("TakeSnapshot");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "TakeSnapshot"), TakeSnapshot);
            }
        }

        internal static event Delegates.TakeSnapshot_BeforeArgs _beforeTakeSnapshot;
        internal static event Delegates.TakeSnapshot_NormalArgs _afterTakeSnapshot;

        private static void TakeSnapshot(Action<InputDevice> orig, InputDevice self)
        {
            Delegates.Params_TakeSnapshot @params = new()
            {
                self = self
            };
            _beforeTakeSnapshot?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterTakeSnapshot != null) _afterTakeSnapshot.Invoke(@params);
        }

        internal static void HookGetFirstPressedAnalog()
        {
            if (!HookedList.Contains("GetFirstPressedAnalog"))
            {
                HookedList.Add("GetFirstPressedAnalog");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "GetFirstPressedAnalog"),
                    GetFirstPressedAnalog);
            }
        }

        internal static event Delegates.GetFirstPressedAnalog_BeforeArgs _beforeGetFirstPressedAnalog;
        internal static event Delegates.GetFirstPressedAnalog_NormalArgs _afterGetFirstPressedAnalog;

        private static UnknownDeviceControl GetFirstPressedAnalog(Func<InputDevice, UnknownDeviceControl> orig,
            InputDevice self)
        {
            Delegates.Params_GetFirstPressedAnalog @params = new()
            {
                self = self
            };
            _beforeGetFirstPressedAnalog?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetFirstPressedAnalog != null) retVal = _afterGetFirstPressedAnalog.Invoke(@params);
            return retVal;
        }

        internal static void HookGetFirstPressedButton()
        {
            if (!HookedList.Contains("GetFirstPressedButton"))
            {
                HookedList.Add("GetFirstPressedButton");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputDevice), "GetFirstPressedButton"),
                    GetFirstPressedButton);
            }
        }

        internal static event Delegates.GetFirstPressedButton_BeforeArgs _beforeGetFirstPressedButton;
        internal static event Delegates.GetFirstPressedButton_NormalArgs _afterGetFirstPressedButton;

        private static UnknownDeviceControl GetFirstPressedButton(Func<InputDevice, UnknownDeviceControl> orig,
            InputDevice self)
        {
            Delegates.Params_GetFirstPressedButton @params = new()
            {
                self = self
            };
            _beforeGetFirstPressedButton?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetFirstPressedButton != null) retVal = _afterGetFirstPressedButton.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AddAliasControls_BeforeArgs(Params_AddAliasControls args);

        public delegate void AddAliasControls_NormalArgs(Params_AddAliasControls args);

        public delegate void AddControl_InputControlType_string_BeforeArgs(
            Params_AddControl_InputControlType_string args);

        public delegate void AddControl_InputControlType_string_float_float_BeforeArgs(
            Params_AddControl_InputControlType_string_float_float args);

        public delegate InputControl AddControl_InputControlType_string_float_float_NormalArgs(
            Params_AddControl_InputControlType_string_float_float args);

        public delegate InputControl AddControl_InputControlType_string_NormalArgs(
            Params_AddControl_InputControlType_string args);

        public delegate void ClearControls_BeforeArgs(Params_ClearControls args);

        public delegate void ClearControls_NormalArgs(Params_ClearControls args);

        public delegate void ClearInputState_BeforeArgs(Params_ClearInputState args);

        public delegate void ClearInputState_NormalArgs(Params_ClearInputState args);

        public delegate void Commit_BeforeArgs(Params_Commit args);

        public delegate void Commit_NormalArgs(Params_Commit args);

        public delegate void CommitLeftStick_BeforeArgs(Params_CommitLeftStick args);

        public delegate void CommitLeftStick_NormalArgs(Params_CommitLeftStick args);

        public delegate void CommitRightStick_BeforeArgs(Params_CommitRightStick args);

        public delegate void CommitRightStick_NormalArgs(Params_CommitRightStick args);

        public delegate void ExpireControlCache_BeforeArgs(Params_ExpireControlCache args);

        public delegate void ExpireControlCache_NormalArgs(Params_ExpireControlCache args);

        public delegate void get_Action1_BeforeArgs(Params_get_Action1 args);

        public delegate InputControl get_Action1_NormalArgs(Params_get_Action1 args);

        public delegate void get_Action2_BeforeArgs(Params_get_Action2 args);

        public delegate InputControl get_Action2_NormalArgs(Params_get_Action2 args);

        public delegate void get_Action3_BeforeArgs(Params_get_Action3 args);

        public delegate InputControl get_Action3_NormalArgs(Params_get_Action3 args);

        public delegate void get_Action4_BeforeArgs(Params_get_Action4 args);

        public delegate InputControl get_Action4_NormalArgs(Params_get_Action4 args);

        public delegate void get_AnalogSnapshot_BeforeArgs(Params_get_AnalogSnapshot args);

        public delegate void get_AnyButton_BeforeArgs(Params_get_AnyButton args);

        public delegate InputControl get_AnyButton_NormalArgs(Params_get_AnyButton args);

        public delegate void get_AnyButtonIsPressed_BeforeArgs(Params_get_AnyButtonIsPressed args);

        public delegate bool get_AnyButtonIsPressed_NormalArgs(Params_get_AnyButtonIsPressed args);

        public delegate void get_AnyButtonWasPressed_BeforeArgs(Params_get_AnyButtonWasPressed args);

        public delegate bool get_AnyButtonWasPressed_NormalArgs(Params_get_AnyButtonWasPressed args);

        public delegate void get_AnyButtonWasReleased_BeforeArgs(Params_get_AnyButtonWasReleased args);

        public delegate bool get_AnyButtonWasReleased_NormalArgs(Params_get_AnyButtonWasReleased args);

        public delegate void get_Command_BeforeArgs(Params_get_Command args);

        public delegate InputControl get_Command_NormalArgs(Params_get_Command args);

        public delegate void get_CommandIsPressed_BeforeArgs(Params_get_CommandIsPressed args);

        public delegate bool get_CommandIsPressed_NormalArgs(Params_get_CommandIsPressed args);

        public delegate void get_CommandWasPressed_BeforeArgs(Params_get_CommandWasPressed args);

        public delegate bool get_CommandWasPressed_NormalArgs(Params_get_CommandWasPressed args);

        public delegate void get_CommandWasReleased_BeforeArgs(Params_get_CommandWasReleased args);

        public delegate bool get_CommandWasReleased_NormalArgs(Params_get_CommandWasReleased args);

        public delegate void get_Controls_BeforeArgs(Params_get_Controls args);

        public delegate ReadOnlyCollection<InputControl> get_Controls_NormalArgs(Params_get_Controls args);

        public delegate void get_ControlsByTarget_BeforeArgs(Params_get_ControlsByTarget args);

        public delegate InputControl[] get_ControlsByTarget_NormalArgs(Params_get_ControlsByTarget args);

        public delegate void get_DeviceClass_BeforeArgs(Params_get_DeviceClass args);

        public delegate InputDeviceClass get_DeviceClass_NormalArgs(Params_get_DeviceClass args);

        public delegate void get_DeviceStyle_BeforeArgs(Params_get_DeviceStyle args);

        public delegate InputDeviceStyle get_DeviceStyle_NormalArgs(Params_get_DeviceStyle args);

        public delegate void get_Direction_BeforeArgs(Params_get_Direction args);

        public delegate TwoAxisInputControl get_Direction_NormalArgs(Params_get_Direction args);

        public delegate void get_DPad_BeforeArgs(Params_get_DPad args);

        public delegate TwoAxisInputControl get_DPad_NormalArgs(Params_get_DPad args);

        public delegate void get_DPadDown_BeforeArgs(Params_get_DPadDown args);

        public delegate InputControl get_DPadDown_NormalArgs(Params_get_DPadDown args);

        public delegate void get_DPadLeft_BeforeArgs(Params_get_DPadLeft args);

        public delegate InputControl get_DPadLeft_NormalArgs(Params_get_DPadLeft args);

        public delegate void get_DPadRight_BeforeArgs(Params_get_DPadRight args);

        public delegate InputControl get_DPadRight_NormalArgs(Params_get_DPadRight args);

        public delegate void get_DPadUp_BeforeArgs(Params_get_DPadUp args);

        public delegate InputControl get_DPadUp_NormalArgs(Params_get_DPadUp args);

        public delegate void get_DPadX_BeforeArgs(Params_get_DPadX args);

        public delegate InputControl get_DPadX_NormalArgs(Params_get_DPadX args);

        public delegate void get_DPadY_BeforeArgs(Params_get_DPadY args);

        public delegate InputControl get_DPadY_NormalArgs(Params_get_DPadY args);

        public delegate void get_GUID_BeforeArgs(Params_get_GUID args);

        public delegate Guid get_GUID_NormalArgs(Params_get_GUID args);

        public delegate void get_IsActive_BeforeArgs(Params_get_IsActive args);

        public delegate bool get_IsActive_NormalArgs(Params_get_IsActive args);

        public delegate void get_IsAttached_BeforeArgs(Params_get_IsAttached args);

        public delegate bool get_IsAttached_NormalArgs(Params_get_IsAttached args);

        public delegate void get_IsKnown_BeforeArgs(Params_get_IsKnown args);

        public delegate bool get_IsKnown_NormalArgs(Params_get_IsKnown args);

        public delegate void get_IsSupportedOnThisPlatform_BeforeArgs(Params_get_IsSupportedOnThisPlatform args);

        public delegate bool get_IsSupportedOnThisPlatform_NormalArgs(Params_get_IsSupportedOnThisPlatform args);

        public delegate void get_IsUnknown_BeforeArgs(Params_get_IsUnknown args);

        public delegate bool get_IsUnknown_NormalArgs(Params_get_IsUnknown args);

        public delegate void get_Item_BeforeArgs(Params_get_Item args);

        public delegate InputControl get_Item_NormalArgs(Params_get_Item args);

        public delegate void get_LastInputTick_BeforeArgs(Params_get_LastInputTick args);

        public delegate ulong get_LastInputTick_NormalArgs(Params_get_LastInputTick args);

        public delegate void get_LeftBumper_BeforeArgs(Params_get_LeftBumper args);

        public delegate InputControl get_LeftBumper_NormalArgs(Params_get_LeftBumper args);

        public delegate void get_LeftCommand_BeforeArgs(Params_get_LeftCommand args);

        public delegate InputControl get_LeftCommand_NormalArgs(Params_get_LeftCommand args);

        public delegate void get_LeftCommandControl_BeforeArgs(Params_get_LeftCommandControl args);

        public delegate InputControlType get_LeftCommandControl_NormalArgs(Params_get_LeftCommandControl args);

        public delegate void get_LeftStick_BeforeArgs(Params_get_LeftStick args);

        public delegate TwoAxisInputControl get_LeftStick_NormalArgs(Params_get_LeftStick args);

        public delegate void get_LeftStickButton_BeforeArgs(Params_get_LeftStickButton args);

        public delegate InputControl get_LeftStickButton_NormalArgs(Params_get_LeftStickButton args);

        public delegate void get_LeftStickDown_BeforeArgs(Params_get_LeftStickDown args);

        public delegate InputControl get_LeftStickDown_NormalArgs(Params_get_LeftStickDown args);

        public delegate void get_LeftStickLeft_BeforeArgs(Params_get_LeftStickLeft args);

        public delegate InputControl get_LeftStickLeft_NormalArgs(Params_get_LeftStickLeft args);

        public delegate void get_LeftStickRight_BeforeArgs(Params_get_LeftStickRight args);

        public delegate InputControl get_LeftStickRight_NormalArgs(Params_get_LeftStickRight args);

        public delegate void get_LeftStickUp_BeforeArgs(Params_get_LeftStickUp args);

        public delegate InputControl get_LeftStickUp_NormalArgs(Params_get_LeftStickUp args);

        public delegate void get_LeftStickX_BeforeArgs(Params_get_LeftStickX args);

        public delegate InputControl get_LeftStickX_NormalArgs(Params_get_LeftStickX args);

        public delegate void get_LeftStickY_BeforeArgs(Params_get_LeftStickY args);

        public delegate InputControl get_LeftStickY_NormalArgs(Params_get_LeftStickY args);

        public delegate void get_LeftTrigger_BeforeArgs(Params_get_LeftTrigger args);

        public delegate InputControl get_LeftTrigger_NormalArgs(Params_get_LeftTrigger args);

        public delegate void get_MenuIsPressed_BeforeArgs(Params_get_MenuIsPressed args);

        public delegate bool get_MenuIsPressed_NormalArgs(Params_get_MenuIsPressed args);

        public delegate void get_MenuWasPressed_BeforeArgs(Params_get_MenuWasPressed args);

        public delegate bool get_MenuWasPressed_NormalArgs(Params_get_MenuWasPressed args);

        public delegate void get_MenuWasReleased_BeforeArgs(Params_get_MenuWasReleased args);

        public delegate bool get_MenuWasReleased_NormalArgs(Params_get_MenuWasReleased args);

        public delegate void get_Meta_BeforeArgs(Params_get_Meta args);

        public delegate string get_Meta_NormalArgs(Params_get_Meta args);

        public delegate void get_Name_BeforeArgs(Params_get_Name args);

        public delegate string get_Name_NormalArgs(Params_get_Name args);

        public delegate void get_NumUnknownAnalogs_BeforeArgs(Params_get_NumUnknownAnalogs args);

        public delegate int get_NumUnknownAnalogs_NormalArgs(Params_get_NumUnknownAnalogs args);

        public delegate void get_NumUnknownButtons_BeforeArgs(Params_get_NumUnknownButtons args);

        public delegate int get_NumUnknownButtons_NormalArgs(Params_get_NumUnknownButtons args);

        public delegate void get_RawSticks_BeforeArgs(Params_get_RawSticks args);

        public delegate bool get_RawSticks_NormalArgs(Params_get_RawSticks args);

        public delegate void get_RightBumper_BeforeArgs(Params_get_RightBumper args);

        public delegate InputControl get_RightBumper_NormalArgs(Params_get_RightBumper args);

        public delegate void get_RightCommand_BeforeArgs(Params_get_RightCommand args);

        public delegate InputControl get_RightCommand_NormalArgs(Params_get_RightCommand args);

        public delegate void get_RightCommandControl_BeforeArgs(Params_get_RightCommandControl args);

        public delegate InputControlType get_RightCommandControl_NormalArgs(Params_get_RightCommandControl args);

        public delegate void get_RightStick_BeforeArgs(Params_get_RightStick args);

        public delegate TwoAxisInputControl get_RightStick_NormalArgs(Params_get_RightStick args);

        public delegate void get_RightStickButton_BeforeArgs(Params_get_RightStickButton args);

        public delegate InputControl get_RightStickButton_NormalArgs(Params_get_RightStickButton args);

        public delegate void get_RightStickDown_BeforeArgs(Params_get_RightStickDown args);

        public delegate InputControl get_RightStickDown_NormalArgs(Params_get_RightStickDown args);

        public delegate void get_RightStickLeft_BeforeArgs(Params_get_RightStickLeft args);

        public delegate InputControl get_RightStickLeft_NormalArgs(Params_get_RightStickLeft args);

        public delegate void get_RightStickRight_BeforeArgs(Params_get_RightStickRight args);

        public delegate InputControl get_RightStickRight_NormalArgs(Params_get_RightStickRight args);

        public delegate void get_RightStickUp_BeforeArgs(Params_get_RightStickUp args);

        public delegate InputControl get_RightStickUp_NormalArgs(Params_get_RightStickUp args);

        public delegate void get_RightStickX_BeforeArgs(Params_get_RightStickX args);

        public delegate InputControl get_RightStickX_NormalArgs(Params_get_RightStickX args);

        public delegate void get_RightStickY_BeforeArgs(Params_get_RightStickY args);

        public delegate InputControl get_RightStickY_NormalArgs(Params_get_RightStickY args);

        public delegate void get_RightTrigger_BeforeArgs(Params_get_RightTrigger args);

        public delegate InputControl get_RightTrigger_NormalArgs(Params_get_RightTrigger args);

        public delegate void get_SortOrder_BeforeArgs(Params_get_SortOrder args);

        public delegate int get_SortOrder_NormalArgs(Params_get_SortOrder args);

        public delegate void GetControl_BeforeArgs(Params_GetControl args);

        public delegate InputControl GetControl_NormalArgs(Params_GetControl args);

        public delegate void GetControlByName_BeforeArgs(Params_GetControlByName args);

        public delegate InputControl GetControlByName_NormalArgs(Params_GetControlByName args);

        public delegate void GetFirstPressedAnalog_BeforeArgs(Params_GetFirstPressedAnalog args);

        public delegate UnknownDeviceControl GetFirstPressedAnalog_NormalArgs(Params_GetFirstPressedAnalog args);

        public delegate void GetFirstPressedButton_BeforeArgs(Params_GetFirstPressedButton args);

        public delegate UnknownDeviceControl GetFirstPressedButton_NormalArgs(Params_GetFirstPressedButton args);

        public delegate void GetInputControlTypeByName_BeforeArgs(Params_GetInputControlTypeByName args);

        public delegate InputControlType GetInputControlTypeByName_NormalArgs(Params_GetInputControlTypeByName args);

        public delegate void HasControl_BeforeArgs(Params_HasControl args);

        public delegate bool HasControl_NormalArgs(Params_HasControl args);

        public delegate void LastInputAfter_BeforeArgs(Params_LastInputAfter args);

        public delegate bool LastInputAfter_NormalArgs(Params_LastInputAfter args);

        public delegate void OnAttached_BeforeArgs(Params_OnAttached args);

        public delegate void OnAttached_NormalArgs(Params_OnAttached args);

        public delegate void OnDetached_BeforeArgs(Params_OnDetached args);

        public delegate void OnDetached_NormalArgs(Params_OnDetached args);

        public delegate void ProcessDPad_BeforeArgs(Params_ProcessDPad args);

        public delegate void ProcessDPad_NormalArgs(Params_ProcessDPad args);

        public delegate void ProcessLeftStick_BeforeArgs(Params_ProcessLeftStick args);

        public delegate void ProcessLeftStick_NormalArgs(Params_ProcessLeftStick args);

        public delegate void ProcessRightStick_BeforeArgs(Params_ProcessRightStick args);

        public delegate void ProcessRightStick_NormalArgs(Params_ProcessRightStick args);

        public delegate void ReadRawAnalogValue_BeforeArgs(Params_ReadRawAnalogValue args);

        public delegate float ReadRawAnalogValue_NormalArgs(Params_ReadRawAnalogValue args);

        public delegate void ReadRawButtonState_BeforeArgs(Params_ReadRawButtonState args);

        public delegate bool ReadRawButtonState_NormalArgs(Params_ReadRawButtonState args);

        public delegate void RemoveAliasControls_BeforeArgs(Params_RemoveAliasControls args);

        public delegate void RemoveAliasControls_NormalArgs(Params_RemoveAliasControls args);

        public delegate void RemoveControl_BeforeArgs(Params_RemoveControl args);

        public delegate void RemoveControl_NormalArgs(Params_RemoveControl args);

        public delegate void RequestActivation_BeforeArgs(Params_RequestActivation args);

        public delegate void RequestActivation_NormalArgs(Params_RequestActivation args);

        public delegate void set_Controls_BeforeArgs(Params_set_Controls args);

        public delegate void set_Controls_NormalArgs(Params_set_Controls args);

        public delegate void set_ControlsByTarget_BeforeArgs(Params_set_ControlsByTarget args);

        public delegate void set_ControlsByTarget_NormalArgs(Params_set_ControlsByTarget args);

        public delegate void set_DeviceClass_BeforeArgs(Params_set_DeviceClass args);

        public delegate void set_DeviceClass_NormalArgs(Params_set_DeviceClass args);

        public delegate void set_DeviceStyle_BeforeArgs(Params_set_DeviceStyle args);

        public delegate void set_DeviceStyle_NormalArgs(Params_set_DeviceStyle args);

        public delegate void set_DPad_BeforeArgs(Params_set_DPad args);

        public delegate void set_DPad_NormalArgs(Params_set_DPad args);

        public delegate void set_GUID_BeforeArgs(Params_set_GUID args);

        public delegate void set_GUID_NormalArgs(Params_set_GUID args);

        public delegate void set_IsActive_BeforeArgs(Params_set_IsActive args);

        public delegate void set_IsActive_NormalArgs(Params_set_IsActive args);

        public delegate void set_IsAttached_BeforeArgs(Params_set_IsAttached args);

        public delegate void set_IsAttached_NormalArgs(Params_set_IsAttached args);

        public delegate void set_LastInputTick_BeforeArgs(Params_set_LastInputTick args);

        public delegate void set_LastInputTick_NormalArgs(Params_set_LastInputTick args);

        public delegate void set_LeftCommandControl_BeforeArgs(Params_set_LeftCommandControl args);

        public delegate void set_LeftCommandControl_NormalArgs(Params_set_LeftCommandControl args);

        public delegate void set_LeftStick_BeforeArgs(Params_set_LeftStick args);

        public delegate void set_LeftStick_NormalArgs(Params_set_LeftStick args);

        public delegate void set_Meta_BeforeArgs(Params_set_Meta args);

        public delegate void set_Meta_NormalArgs(Params_set_Meta args);

        public delegate void set_Name_BeforeArgs(Params_set_Name args);

        public delegate void set_Name_NormalArgs(Params_set_Name args);

        public delegate void set_RawSticks_BeforeArgs(Params_set_RawSticks args);

        public delegate void set_RawSticks_NormalArgs(Params_set_RawSticks args);

        public delegate void set_RightCommandControl_BeforeArgs(Params_set_RightCommandControl args);

        public delegate void set_RightCommandControl_NormalArgs(Params_set_RightCommandControl args);

        public delegate void set_RightStick_BeforeArgs(Params_set_RightStick args);

        public delegate void set_RightStick_NormalArgs(Params_set_RightStick args);

        public delegate void set_SortOrder_BeforeArgs(Params_set_SortOrder args);

        public delegate void set_SortOrder_NormalArgs(Params_set_SortOrder args);

        public delegate void SetLightColor_Color_BeforeArgs(Params_SetLightColor_Color args);

        public delegate void SetLightColor_Color_NormalArgs(Params_SetLightColor_Color args);

        public delegate void SetLightColor_float_float_float_BeforeArgs(Params_SetLightColor_float_float_float args);

        public delegate void SetLightColor_float_float_float_NormalArgs(Params_SetLightColor_float_float_float args);

        public delegate void SetLightFlash_BeforeArgs(Params_SetLightFlash args);

        public delegate void SetLightFlash_NormalArgs(Params_SetLightFlash args);

        public delegate void StopLightFlash_BeforeArgs(Params_StopLightFlash args);

        public delegate void StopLightFlash_NormalArgs(Params_StopLightFlash args);

        public delegate void StopVibration_BeforeArgs(Params_StopVibration args);

        public delegate void StopVibration_NormalArgs(Params_StopVibration args);

        public delegate void TakeSnapshot_BeforeArgs(Params_TakeSnapshot args);

        public delegate void TakeSnapshot_NormalArgs(Params_TakeSnapshot args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public delegate void UpdateLeftStickWithRawValue_BeforeArgs(Params_UpdateLeftStickWithRawValue args);

        public delegate void UpdateLeftStickWithRawValue_NormalArgs(Params_UpdateLeftStickWithRawValue args);

        public delegate void UpdateLeftStickWithValue_BeforeArgs(Params_UpdateLeftStickWithValue args);

        public delegate void UpdateLeftStickWithValue_NormalArgs(Params_UpdateLeftStickWithValue args);

        public delegate void UpdateRightStickWithRawValue_BeforeArgs(Params_UpdateRightStickWithRawValue args);

        public delegate void UpdateRightStickWithRawValue_NormalArgs(Params_UpdateRightStickWithRawValue args);

        public delegate void UpdateRightStickWithValue_BeforeArgs(Params_UpdateRightStickWithValue args);

        public delegate void UpdateRightStickWithValue_NormalArgs(Params_UpdateRightStickWithValue args);

        public delegate void UpdateWithState_BeforeArgs(Params_UpdateWithState args);

        public delegate void UpdateWithState_NormalArgs(Params_UpdateWithState args);

        public delegate void UpdateWithValue_BeforeArgs(Params_UpdateWithValue args);

        public delegate void UpdateWithValue_NormalArgs(Params_UpdateWithValue args);

        public delegate void Vibrate_float_BeforeArgs(Params_Vibrate_float args);

        public delegate void Vibrate_float_float_BeforeArgs(Params_Vibrate_float_float args);

        public delegate void Vibrate_float_float_NormalArgs(Params_Vibrate_float_float args);

        public delegate void Vibrate_float_NormalArgs(Params_Vibrate_float args);

        public sealed class Params_get_Name
        {
            public InputDevice self;
        }

        public sealed class Params_set_Name
        {
            public InputDevice self;
            public string value;
        }

        public sealed class Params_get_Meta
        {
            public InputDevice self;
        }

        public sealed class Params_set_Meta
        {
            public InputDevice self;
            public string value;
        }

        public sealed class Params_get_SortOrder
        {
            public InputDevice self;
        }

        public sealed class Params_set_SortOrder
        {
            public InputDevice self;
            public int value;
        }

        public sealed class Params_get_DeviceClass
        {
            public InputDevice self;
        }

        public sealed class Params_set_DeviceClass
        {
            public InputDevice self;
            public InputDeviceClass value;
        }

        public sealed class Params_get_DeviceStyle
        {
            public InputDevice self;
        }

        public sealed class Params_set_DeviceStyle
        {
            public InputDevice self;
            public InputDeviceStyle value;
        }

        public sealed class Params_get_GUID
        {
            public InputDevice self;
        }

        public sealed class Params_set_GUID
        {
            public InputDevice self;
            public Guid value;
        }

        public sealed class Params_get_LastInputTick
        {
            public InputDevice self;
        }

        public sealed class Params_set_LastInputTick
        {
            public InputDevice self;
            public ulong value;
        }

        public sealed class Params_get_IsActive
        {
            public InputDevice self;
        }

        public sealed class Params_set_IsActive
        {
            public InputDevice self;
            public bool value;
        }

        public sealed class Params_get_IsAttached
        {
            public InputDevice self;
        }

        public sealed class Params_set_IsAttached
        {
            public InputDevice self;
            public bool value;
        }

        public sealed class Params_get_RawSticks
        {
            public InputDevice self;
        }

        public sealed class Params_set_RawSticks
        {
            public InputDevice self;
            public bool value;
        }

        public sealed class Params_get_Controls
        {
            public InputDevice self;
        }

        public sealed class Params_set_Controls
        {
            public InputDevice self;
            public ReadOnlyCollection<InputControl> value;
        }

        public sealed class Params_get_ControlsByTarget
        {
            public InputDevice self;
        }

        public sealed class Params_set_ControlsByTarget
        {
            public InputDevice self;
            public InputControl[] value;
        }

        public sealed class Params_get_LeftStick
        {
            public InputDevice self;
        }

        public sealed class Params_set_LeftStick
        {
            public InputDevice self;
            public TwoAxisInputControl value;
        }

        public sealed class Params_get_RightStick
        {
            public InputDevice self;
        }

        public sealed class Params_set_RightStick
        {
            public InputDevice self;
            public TwoAxisInputControl value;
        }

        public sealed class Params_get_DPad
        {
            public InputDevice self;
        }

        public sealed class Params_set_DPad
        {
            public InputDevice self;
            public TwoAxisInputControl value;
        }

        public sealed class Params_get_LeftCommandControl
        {
            public InputDevice self;
        }

        public sealed class Params_set_LeftCommandControl
        {
            public InputDevice self;
            public InputControlType value;
        }

        public sealed class Params_get_RightCommandControl
        {
            public InputDevice self;
        }

        public sealed class Params_set_RightCommandControl
        {
            public InputDevice self;
            public InputControlType value;
        }

        public sealed class Params_get_AnalogSnapshot
        {
            public InputDevice self;
        }

        public sealed class Params_OnAttached
        {
            public InputDevice self;
        }

        public sealed class Params_OnDetached
        {
            public InputDevice self;
        }

        public sealed class Params_AddAliasControls
        {
            public InputDevice self;
        }

        public sealed class Params_RemoveAliasControls
        {
            public InputDevice self;
        }

        public sealed class Params_ClearControls
        {
            public InputDevice self;
        }

        public sealed class Params_HasControl
        {
            public InputControlType controlType;
            public InputDevice self;
        }

        public sealed class Params_GetControl
        {
            public InputControlType controlType;
            public InputDevice self;
        }

        public sealed class Params_get_Item
        {
            public InputControlType controlType;
            public InputDevice self;
        }

        public sealed class Params_GetInputControlTypeByName
        {
            public string inputControlName;
        }

        public sealed class Params_GetControlByName
        {
            public string controlName;
            public InputDevice self;
        }

        public sealed class Params_AddControl_InputControlType_string
        {
            public InputControlType controlType;
            public string handle;
            public InputDevice self;
        }

        public sealed class Params_AddControl_InputControlType_string_float_float
        {
            public InputControlType controlType;
            public string handle;
            public float lowerDeadZone;
            public InputDevice self;
            public float upperDeadZone;
        }

        public sealed class Params_RemoveControl
        {
            public InputControlType controlType;
            public InputDevice self;
        }

        public sealed class Params_ClearInputState
        {
            public InputDevice self;
        }

        public sealed class Params_UpdateWithState
        {
            public InputControlType controlType;
            public float deltaTime;
            public InputDevice self;
            public bool state;
            public ulong updateTick;
        }

        public sealed class Params_UpdateWithValue
        {
            public InputControlType controlType;
            public float deltaTime;
            public InputDevice self;
            public ulong updateTick;
            public float value;
        }

        public sealed class Params_UpdateLeftStickWithValue
        {
            public float deltaTime;
            public InputDevice self;
            public ulong updateTick;
            public Vector2 value;
        }

        public sealed class Params_UpdateLeftStickWithRawValue
        {
            public float deltaTime;
            public InputDevice self;
            public ulong updateTick;
            public Vector2 value;
        }

        public sealed class Params_CommitLeftStick
        {
            public InputDevice self;
        }

        public sealed class Params_UpdateRightStickWithValue
        {
            public float deltaTime;
            public InputDevice self;
            public ulong updateTick;
            public Vector2 value;
        }

        public sealed class Params_UpdateRightStickWithRawValue
        {
            public float deltaTime;
            public InputDevice self;
            public ulong updateTick;
            public Vector2 value;
        }

        public sealed class Params_CommitRightStick
        {
            public InputDevice self;
        }

        public sealed class Params_Update
        {
            public float deltaTime;
            public InputDevice self;
            public ulong updateTick;
        }

        public sealed class Params_ProcessLeftStick
        {
            public float deltaTime;
            public InputDevice self;
            public ulong updateTick;
        }

        public sealed class Params_ProcessRightStick
        {
            public float deltaTime;
            public InputDevice self;
            public ulong updateTick;
        }

        public sealed class Params_ProcessDPad
        {
            public float deltaTime;
            public InputDevice self;
            public ulong updateTick;
        }

        public sealed class Params_Commit
        {
            public float deltaTime;
            public InputDevice self;
            public ulong updateTick;
        }

        public sealed class Params_LastInputAfter
        {
            public InputDevice device;
            public InputDevice self;
        }

        public sealed class Params_RequestActivation
        {
            public InputDevice self;
        }

        public sealed class Params_Vibrate_float_float
        {
            public float leftMotor;
            public float rightMotor;
            public InputDevice self;
        }

        public sealed class Params_Vibrate_float
        {
            public float intensity;
            public InputDevice self;
        }

        public sealed class Params_StopVibration
        {
            public InputDevice self;
        }

        public sealed class Params_SetLightColor_float_float_float
        {
            public float blue;
            public float green;
            public float red;
            public InputDevice self;
        }

        public sealed class Params_SetLightColor_Color
        {
            public Color color;
            public InputDevice self;
        }

        public sealed class Params_SetLightFlash
        {
            public float flashOffDuration;
            public float flashOnDuration;
            public InputDevice self;
        }

        public sealed class Params_StopLightFlash
        {
            public InputDevice self;
        }

        public sealed class Params_get_IsSupportedOnThisPlatform
        {
            public InputDevice self;
        }

        public sealed class Params_get_IsKnown
        {
            public InputDevice self;
        }

        public sealed class Params_get_IsUnknown
        {
            public InputDevice self;
        }

        public sealed class Params_get_MenuIsPressed
        {
            public InputDevice self;
        }

        public sealed class Params_get_MenuWasPressed
        {
            public InputDevice self;
        }

        public sealed class Params_get_MenuWasReleased
        {
            public InputDevice self;
        }

        public sealed class Params_get_CommandIsPressed
        {
            public InputDevice self;
        }

        public sealed class Params_get_CommandWasPressed
        {
            public InputDevice self;
        }

        public sealed class Params_get_CommandWasReleased
        {
            public InputDevice self;
        }

        public sealed class Params_get_AnyButton
        {
            public InputDevice self;
        }

        public sealed class Params_get_AnyButtonIsPressed
        {
            public InputDevice self;
        }

        public sealed class Params_get_AnyButtonWasPressed
        {
            public InputDevice self;
        }

        public sealed class Params_get_AnyButtonWasReleased
        {
            public InputDevice self;
        }

        public sealed class Params_get_Direction
        {
            public InputDevice self;
        }

        public sealed class Params_get_LeftStickUp
        {
            public InputDevice self;
        }

        public sealed class Params_get_LeftStickDown
        {
            public InputDevice self;
        }

        public sealed class Params_get_LeftStickLeft
        {
            public InputDevice self;
        }

        public sealed class Params_get_LeftStickRight
        {
            public InputDevice self;
        }

        public sealed class Params_get_RightStickUp
        {
            public InputDevice self;
        }

        public sealed class Params_get_RightStickDown
        {
            public InputDevice self;
        }

        public sealed class Params_get_RightStickLeft
        {
            public InputDevice self;
        }

        public sealed class Params_get_RightStickRight
        {
            public InputDevice self;
        }

        public sealed class Params_get_DPadUp
        {
            public InputDevice self;
        }

        public sealed class Params_get_DPadDown
        {
            public InputDevice self;
        }

        public sealed class Params_get_DPadLeft
        {
            public InputDevice self;
        }

        public sealed class Params_get_DPadRight
        {
            public InputDevice self;
        }

        public sealed class Params_get_Action1
        {
            public InputDevice self;
        }

        public sealed class Params_get_Action2
        {
            public InputDevice self;
        }

        public sealed class Params_get_Action3
        {
            public InputDevice self;
        }

        public sealed class Params_get_Action4
        {
            public InputDevice self;
        }

        public sealed class Params_get_LeftTrigger
        {
            public InputDevice self;
        }

        public sealed class Params_get_RightTrigger
        {
            public InputDevice self;
        }

        public sealed class Params_get_LeftBumper
        {
            public InputDevice self;
        }

        public sealed class Params_get_RightBumper
        {
            public InputDevice self;
        }

        public sealed class Params_get_LeftStickButton
        {
            public InputDevice self;
        }

        public sealed class Params_get_RightStickButton
        {
            public InputDevice self;
        }

        public sealed class Params_get_LeftStickX
        {
            public InputDevice self;
        }

        public sealed class Params_get_LeftStickY
        {
            public InputDevice self;
        }

        public sealed class Params_get_RightStickX
        {
            public InputDevice self;
        }

        public sealed class Params_get_RightStickY
        {
            public InputDevice self;
        }

        public sealed class Params_get_DPadX
        {
            public InputDevice self;
        }

        public sealed class Params_get_DPadY
        {
            public InputDevice self;
        }

        public sealed class Params_get_Command
        {
            public InputDevice self;
        }

        public sealed class Params_get_LeftCommand
        {
            public InputDevice self;
        }

        public sealed class Params_get_RightCommand
        {
            public InputDevice self;
        }

        public sealed class Params_ExpireControlCache
        {
            public InputDevice self;
        }

        public sealed class Params_get_NumUnknownAnalogs
        {
            public InputDevice self;
        }

        public sealed class Params_get_NumUnknownButtons
        {
            public InputDevice self;
        }

        public sealed class Params_ReadRawButtonState
        {
            public int index;
            public InputDevice self;
        }

        public sealed class Params_ReadRawAnalogValue
        {
            public int index;
            public InputDevice self;
        }

        public sealed class Params_TakeSnapshot
        {
            public InputDevice self;
        }

        public sealed class Params_GetFirstPressedAnalog
        {
            public InputDevice self;
        }

        public sealed class Params_GetFirstPressedButton
        {
            public InputDevice self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Name_BeforeArgs get_Name
        {
            add
            {
                HookHandler._beforeget_Name += value;
                HookHandler.Hookget_Name();
            }
            remove => HookHandler._beforeget_Name -= value;
        }

        public static event Delegates.set_Name_BeforeArgs set_Name
        {
            add
            {
                HookHandler._beforeset_Name += value;
                HookHandler.Hookset_Name();
            }
            remove => HookHandler._beforeset_Name -= value;
        }

        public static event Delegates.get_Meta_BeforeArgs get_Meta
        {
            add
            {
                HookHandler._beforeget_Meta += value;
                HookHandler.Hookget_Meta();
            }
            remove => HookHandler._beforeget_Meta -= value;
        }

        public static event Delegates.set_Meta_BeforeArgs set_Meta
        {
            add
            {
                HookHandler._beforeset_Meta += value;
                HookHandler.Hookset_Meta();
            }
            remove => HookHandler._beforeset_Meta -= value;
        }

        public static event Delegates.get_SortOrder_BeforeArgs get_SortOrder
        {
            add
            {
                HookHandler._beforeget_SortOrder += value;
                HookHandler.Hookget_SortOrder();
            }
            remove => HookHandler._beforeget_SortOrder -= value;
        }

        public static event Delegates.set_SortOrder_BeforeArgs set_SortOrder
        {
            add
            {
                HookHandler._beforeset_SortOrder += value;
                HookHandler.Hookset_SortOrder();
            }
            remove => HookHandler._beforeset_SortOrder -= value;
        }

        public static event Delegates.get_DeviceClass_BeforeArgs get_DeviceClass
        {
            add
            {
                HookHandler._beforeget_DeviceClass += value;
                HookHandler.Hookget_DeviceClass();
            }
            remove => HookHandler._beforeget_DeviceClass -= value;
        }

        public static event Delegates.set_DeviceClass_BeforeArgs set_DeviceClass
        {
            add
            {
                HookHandler._beforeset_DeviceClass += value;
                HookHandler.Hookset_DeviceClass();
            }
            remove => HookHandler._beforeset_DeviceClass -= value;
        }

        public static event Delegates.get_DeviceStyle_BeforeArgs get_DeviceStyle
        {
            add
            {
                HookHandler._beforeget_DeviceStyle += value;
                HookHandler.Hookget_DeviceStyle();
            }
            remove => HookHandler._beforeget_DeviceStyle -= value;
        }

        public static event Delegates.set_DeviceStyle_BeforeArgs set_DeviceStyle
        {
            add
            {
                HookHandler._beforeset_DeviceStyle += value;
                HookHandler.Hookset_DeviceStyle();
            }
            remove => HookHandler._beforeset_DeviceStyle -= value;
        }

        public static event Delegates.get_GUID_BeforeArgs get_GUID
        {
            add
            {
                HookHandler._beforeget_GUID += value;
                HookHandler.Hookget_GUID();
            }
            remove => HookHandler._beforeget_GUID -= value;
        }

        public static event Delegates.set_GUID_BeforeArgs set_GUID
        {
            add
            {
                HookHandler._beforeset_GUID += value;
                HookHandler.Hookset_GUID();
            }
            remove => HookHandler._beforeset_GUID -= value;
        }

        public static event Delegates.get_LastInputTick_BeforeArgs get_LastInputTick
        {
            add
            {
                HookHandler._beforeget_LastInputTick += value;
                HookHandler.Hookget_LastInputTick();
            }
            remove => HookHandler._beforeget_LastInputTick -= value;
        }

        public static event Delegates.set_LastInputTick_BeforeArgs set_LastInputTick
        {
            add
            {
                HookHandler._beforeset_LastInputTick += value;
                HookHandler.Hookset_LastInputTick();
            }
            remove => HookHandler._beforeset_LastInputTick -= value;
        }

        public static event Delegates.get_IsActive_BeforeArgs get_IsActive
        {
            add
            {
                HookHandler._beforeget_IsActive += value;
                HookHandler.Hookget_IsActive();
            }
            remove => HookHandler._beforeget_IsActive -= value;
        }

        public static event Delegates.set_IsActive_BeforeArgs set_IsActive
        {
            add
            {
                HookHandler._beforeset_IsActive += value;
                HookHandler.Hookset_IsActive();
            }
            remove => HookHandler._beforeset_IsActive -= value;
        }

        public static event Delegates.get_IsAttached_BeforeArgs get_IsAttached
        {
            add
            {
                HookHandler._beforeget_IsAttached += value;
                HookHandler.Hookget_IsAttached();
            }
            remove => HookHandler._beforeget_IsAttached -= value;
        }

        public static event Delegates.set_IsAttached_BeforeArgs set_IsAttached
        {
            add
            {
                HookHandler._beforeset_IsAttached += value;
                HookHandler.Hookset_IsAttached();
            }
            remove => HookHandler._beforeset_IsAttached -= value;
        }

        public static event Delegates.get_RawSticks_BeforeArgs get_RawSticks
        {
            add
            {
                HookHandler._beforeget_RawSticks += value;
                HookHandler.Hookget_RawSticks();
            }
            remove => HookHandler._beforeget_RawSticks -= value;
        }

        public static event Delegates.set_RawSticks_BeforeArgs set_RawSticks
        {
            add
            {
                HookHandler._beforeset_RawSticks += value;
                HookHandler.Hookset_RawSticks();
            }
            remove => HookHandler._beforeset_RawSticks -= value;
        }

        public static event Delegates.get_Controls_BeforeArgs get_Controls
        {
            add
            {
                HookHandler._beforeget_Controls += value;
                HookHandler.Hookget_Controls();
            }
            remove => HookHandler._beforeget_Controls -= value;
        }

        public static event Delegates.set_Controls_BeforeArgs set_Controls
        {
            add
            {
                HookHandler._beforeset_Controls += value;
                HookHandler.Hookset_Controls();
            }
            remove => HookHandler._beforeset_Controls -= value;
        }

        public static event Delegates.get_ControlsByTarget_BeforeArgs get_ControlsByTarget
        {
            add
            {
                HookHandler._beforeget_ControlsByTarget += value;
                HookHandler.Hookget_ControlsByTarget();
            }
            remove => HookHandler._beforeget_ControlsByTarget -= value;
        }

        public static event Delegates.set_ControlsByTarget_BeforeArgs set_ControlsByTarget
        {
            add
            {
                HookHandler._beforeset_ControlsByTarget += value;
                HookHandler.Hookset_ControlsByTarget();
            }
            remove => HookHandler._beforeset_ControlsByTarget -= value;
        }

        public static event Delegates.get_LeftStick_BeforeArgs get_LeftStick
        {
            add
            {
                HookHandler._beforeget_LeftStick += value;
                HookHandler.Hookget_LeftStick();
            }
            remove => HookHandler._beforeget_LeftStick -= value;
        }

        public static event Delegates.set_LeftStick_BeforeArgs set_LeftStick
        {
            add
            {
                HookHandler._beforeset_LeftStick += value;
                HookHandler.Hookset_LeftStick();
            }
            remove => HookHandler._beforeset_LeftStick -= value;
        }

        public static event Delegates.get_RightStick_BeforeArgs get_RightStick
        {
            add
            {
                HookHandler._beforeget_RightStick += value;
                HookHandler.Hookget_RightStick();
            }
            remove => HookHandler._beforeget_RightStick -= value;
        }

        public static event Delegates.set_RightStick_BeforeArgs set_RightStick
        {
            add
            {
                HookHandler._beforeset_RightStick += value;
                HookHandler.Hookset_RightStick();
            }
            remove => HookHandler._beforeset_RightStick -= value;
        }

        public static event Delegates.get_DPad_BeforeArgs get_DPad
        {
            add
            {
                HookHandler._beforeget_DPad += value;
                HookHandler.Hookget_DPad();
            }
            remove => HookHandler._beforeget_DPad -= value;
        }

        public static event Delegates.set_DPad_BeforeArgs set_DPad
        {
            add
            {
                HookHandler._beforeset_DPad += value;
                HookHandler.Hookset_DPad();
            }
            remove => HookHandler._beforeset_DPad -= value;
        }

        public static event Delegates.get_LeftCommandControl_BeforeArgs get_LeftCommandControl
        {
            add
            {
                HookHandler._beforeget_LeftCommandControl += value;
                HookHandler.Hookget_LeftCommandControl();
            }
            remove => HookHandler._beforeget_LeftCommandControl -= value;
        }

        public static event Delegates.set_LeftCommandControl_BeforeArgs set_LeftCommandControl
        {
            add
            {
                HookHandler._beforeset_LeftCommandControl += value;
                HookHandler.Hookset_LeftCommandControl();
            }
            remove => HookHandler._beforeset_LeftCommandControl -= value;
        }

        public static event Delegates.get_RightCommandControl_BeforeArgs get_RightCommandControl
        {
            add
            {
                HookHandler._beforeget_RightCommandControl += value;
                HookHandler.Hookget_RightCommandControl();
            }
            remove => HookHandler._beforeget_RightCommandControl -= value;
        }

        public static event Delegates.set_RightCommandControl_BeforeArgs set_RightCommandControl
        {
            add
            {
                HookHandler._beforeset_RightCommandControl += value;
                HookHandler.Hookset_RightCommandControl();
            }
            remove => HookHandler._beforeset_RightCommandControl -= value;
        }

        public static event Delegates.OnAttached_BeforeArgs OnAttached
        {
            add
            {
                HookHandler._beforeOnAttached += value;
                HookHandler.HookOnAttached();
            }
            remove => HookHandler._beforeOnAttached -= value;
        }

        public static event Delegates.OnDetached_BeforeArgs OnDetached
        {
            add
            {
                HookHandler._beforeOnDetached += value;
                HookHandler.HookOnDetached();
            }
            remove => HookHandler._beforeOnDetached -= value;
        }

        public static event Delegates.AddAliasControls_BeforeArgs AddAliasControls
        {
            add
            {
                HookHandler._beforeAddAliasControls += value;
                HookHandler.HookAddAliasControls();
            }
            remove => HookHandler._beforeAddAliasControls -= value;
        }

        public static event Delegates.RemoveAliasControls_BeforeArgs RemoveAliasControls
        {
            add
            {
                HookHandler._beforeRemoveAliasControls += value;
                HookHandler.HookRemoveAliasControls();
            }
            remove => HookHandler._beforeRemoveAliasControls -= value;
        }

        public static event Delegates.ClearControls_BeforeArgs ClearControls
        {
            add
            {
                HookHandler._beforeClearControls += value;
                HookHandler.HookClearControls();
            }
            remove => HookHandler._beforeClearControls -= value;
        }

        public static event Delegates.HasControl_BeforeArgs HasControl
        {
            add
            {
                HookHandler._beforeHasControl += value;
                HookHandler.HookHasControl();
            }
            remove => HookHandler._beforeHasControl -= value;
        }

        public static event Delegates.GetControl_BeforeArgs GetControl
        {
            add
            {
                HookHandler._beforeGetControl += value;
                HookHandler.HookGetControl();
            }
            remove => HookHandler._beforeGetControl -= value;
        }

        public static event Delegates.get_Item_BeforeArgs get_Item
        {
            add
            {
                HookHandler._beforeget_Item += value;
                HookHandler.Hookget_Item();
            }
            remove => HookHandler._beforeget_Item -= value;
        }

        public static event Delegates.GetInputControlTypeByName_BeforeArgs GetInputControlTypeByName
        {
            add
            {
                HookHandler._beforeGetInputControlTypeByName += value;
                HookHandler.HookGetInputControlTypeByName();
            }
            remove => HookHandler._beforeGetInputControlTypeByName -= value;
        }

        public static event Delegates.GetControlByName_BeforeArgs GetControlByName
        {
            add
            {
                HookHandler._beforeGetControlByName += value;
                HookHandler.HookGetControlByName();
            }
            remove => HookHandler._beforeGetControlByName -= value;
        }

        public static event Delegates.AddControl_InputControlType_string_BeforeArgs AddControl_InputControlType_string
        {
            add
            {
                HookHandler._beforeAddControl_InputControlType_string += value;
                HookHandler.HookAddControl_InputControlType_string();
            }
            remove => HookHandler._beforeAddControl_InputControlType_string -= value;
        }

        public static event Delegates.AddControl_InputControlType_string_float_float_BeforeArgs
            AddControl_InputControlType_string_float_float
            {
                add
                {
                    HookHandler._beforeAddControl_InputControlType_string_float_float += value;
                    HookHandler.HookAddControl_InputControlType_string_float_float();
                }
                remove => HookHandler._beforeAddControl_InputControlType_string_float_float -= value;
            }

        public static event Delegates.RemoveControl_BeforeArgs RemoveControl
        {
            add
            {
                HookHandler._beforeRemoveControl += value;
                HookHandler.HookRemoveControl();
            }
            remove => HookHandler._beforeRemoveControl -= value;
        }

        public static event Delegates.ClearInputState_BeforeArgs ClearInputState
        {
            add
            {
                HookHandler._beforeClearInputState += value;
                HookHandler.HookClearInputState();
            }
            remove => HookHandler._beforeClearInputState -= value;
        }

        public static event Delegates.UpdateWithState_BeforeArgs UpdateWithState
        {
            add
            {
                HookHandler._beforeUpdateWithState += value;
                HookHandler.HookUpdateWithState();
            }
            remove => HookHandler._beforeUpdateWithState -= value;
        }

        public static event Delegates.UpdateWithValue_BeforeArgs UpdateWithValue
        {
            add
            {
                HookHandler._beforeUpdateWithValue += value;
                HookHandler.HookUpdateWithValue();
            }
            remove => HookHandler._beforeUpdateWithValue -= value;
        }

        public static event Delegates.UpdateLeftStickWithValue_BeforeArgs UpdateLeftStickWithValue
        {
            add
            {
                HookHandler._beforeUpdateLeftStickWithValue += value;
                HookHandler.HookUpdateLeftStickWithValue();
            }
            remove => HookHandler._beforeUpdateLeftStickWithValue -= value;
        }

        public static event Delegates.UpdateLeftStickWithRawValue_BeforeArgs UpdateLeftStickWithRawValue
        {
            add
            {
                HookHandler._beforeUpdateLeftStickWithRawValue += value;
                HookHandler.HookUpdateLeftStickWithRawValue();
            }
            remove => HookHandler._beforeUpdateLeftStickWithRawValue -= value;
        }

        public static event Delegates.CommitLeftStick_BeforeArgs CommitLeftStick
        {
            add
            {
                HookHandler._beforeCommitLeftStick += value;
                HookHandler.HookCommitLeftStick();
            }
            remove => HookHandler._beforeCommitLeftStick -= value;
        }

        public static event Delegates.UpdateRightStickWithValue_BeforeArgs UpdateRightStickWithValue
        {
            add
            {
                HookHandler._beforeUpdateRightStickWithValue += value;
                HookHandler.HookUpdateRightStickWithValue();
            }
            remove => HookHandler._beforeUpdateRightStickWithValue -= value;
        }

        public static event Delegates.UpdateRightStickWithRawValue_BeforeArgs UpdateRightStickWithRawValue
        {
            add
            {
                HookHandler._beforeUpdateRightStickWithRawValue += value;
                HookHandler.HookUpdateRightStickWithRawValue();
            }
            remove => HookHandler._beforeUpdateRightStickWithRawValue -= value;
        }

        public static event Delegates.CommitRightStick_BeforeArgs CommitRightStick
        {
            add
            {
                HookHandler._beforeCommitRightStick += value;
                HookHandler.HookCommitRightStick();
            }
            remove => HookHandler._beforeCommitRightStick -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.ProcessLeftStick_BeforeArgs ProcessLeftStick
        {
            add
            {
                HookHandler._beforeProcessLeftStick += value;
                HookHandler.HookProcessLeftStick();
            }
            remove => HookHandler._beforeProcessLeftStick -= value;
        }

        public static event Delegates.ProcessRightStick_BeforeArgs ProcessRightStick
        {
            add
            {
                HookHandler._beforeProcessRightStick += value;
                HookHandler.HookProcessRightStick();
            }
            remove => HookHandler._beforeProcessRightStick -= value;
        }

        public static event Delegates.ProcessDPad_BeforeArgs ProcessDPad
        {
            add
            {
                HookHandler._beforeProcessDPad += value;
                HookHandler.HookProcessDPad();
            }
            remove => HookHandler._beforeProcessDPad -= value;
        }

        public static event Delegates.Commit_BeforeArgs Commit
        {
            add
            {
                HookHandler._beforeCommit += value;
                HookHandler.HookCommit();
            }
            remove => HookHandler._beforeCommit -= value;
        }

        public static event Delegates.LastInputAfter_BeforeArgs LastInputAfter
        {
            add
            {
                HookHandler._beforeLastInputAfter += value;
                HookHandler.HookLastInputAfter();
            }
            remove => HookHandler._beforeLastInputAfter -= value;
        }

        public static event Delegates.RequestActivation_BeforeArgs RequestActivation
        {
            add
            {
                HookHandler._beforeRequestActivation += value;
                HookHandler.HookRequestActivation();
            }
            remove => HookHandler._beforeRequestActivation -= value;
        }

        public static event Delegates.Vibrate_float_float_BeforeArgs Vibrate_float_float
        {
            add
            {
                HookHandler._beforeVibrate_float_float += value;
                HookHandler.HookVibrate_float_float();
            }
            remove => HookHandler._beforeVibrate_float_float -= value;
        }

        public static event Delegates.Vibrate_float_BeforeArgs Vibrate_float
        {
            add
            {
                HookHandler._beforeVibrate_float += value;
                HookHandler.HookVibrate_float();
            }
            remove => HookHandler._beforeVibrate_float -= value;
        }

        public static event Delegates.StopVibration_BeforeArgs StopVibration
        {
            add
            {
                HookHandler._beforeStopVibration += value;
                HookHandler.HookStopVibration();
            }
            remove => HookHandler._beforeStopVibration -= value;
        }

        public static event Delegates.SetLightColor_float_float_float_BeforeArgs SetLightColor_float_float_float
        {
            add
            {
                HookHandler._beforeSetLightColor_float_float_float += value;
                HookHandler.HookSetLightColor_float_float_float();
            }
            remove => HookHandler._beforeSetLightColor_float_float_float -= value;
        }

        public static event Delegates.SetLightColor_Color_BeforeArgs SetLightColor_Color
        {
            add
            {
                HookHandler._beforeSetLightColor_Color += value;
                HookHandler.HookSetLightColor_Color();
            }
            remove => HookHandler._beforeSetLightColor_Color -= value;
        }

        public static event Delegates.SetLightFlash_BeforeArgs SetLightFlash
        {
            add
            {
                HookHandler._beforeSetLightFlash += value;
                HookHandler.HookSetLightFlash();
            }
            remove => HookHandler._beforeSetLightFlash -= value;
        }

        public static event Delegates.StopLightFlash_BeforeArgs StopLightFlash
        {
            add
            {
                HookHandler._beforeStopLightFlash += value;
                HookHandler.HookStopLightFlash();
            }
            remove => HookHandler._beforeStopLightFlash -= value;
        }

        public static event Delegates.get_IsSupportedOnThisPlatform_BeforeArgs get_IsSupportedOnThisPlatform
        {
            add
            {
                HookHandler._beforeget_IsSupportedOnThisPlatform += value;
                HookHandler.Hookget_IsSupportedOnThisPlatform();
            }
            remove => HookHandler._beforeget_IsSupportedOnThisPlatform -= value;
        }

        public static event Delegates.get_IsKnown_BeforeArgs get_IsKnown
        {
            add
            {
                HookHandler._beforeget_IsKnown += value;
                HookHandler.Hookget_IsKnown();
            }
            remove => HookHandler._beforeget_IsKnown -= value;
        }

        public static event Delegates.get_IsUnknown_BeforeArgs get_IsUnknown
        {
            add
            {
                HookHandler._beforeget_IsUnknown += value;
                HookHandler.Hookget_IsUnknown();
            }
            remove => HookHandler._beforeget_IsUnknown -= value;
        }

        public static event Delegates.get_MenuIsPressed_BeforeArgs get_MenuIsPressed
        {
            add
            {
                HookHandler._beforeget_MenuIsPressed += value;
                HookHandler.Hookget_MenuIsPressed();
            }
            remove => HookHandler._beforeget_MenuIsPressed -= value;
        }

        public static event Delegates.get_MenuWasPressed_BeforeArgs get_MenuWasPressed
        {
            add
            {
                HookHandler._beforeget_MenuWasPressed += value;
                HookHandler.Hookget_MenuWasPressed();
            }
            remove => HookHandler._beforeget_MenuWasPressed -= value;
        }

        public static event Delegates.get_MenuWasReleased_BeforeArgs get_MenuWasReleased
        {
            add
            {
                HookHandler._beforeget_MenuWasReleased += value;
                HookHandler.Hookget_MenuWasReleased();
            }
            remove => HookHandler._beforeget_MenuWasReleased -= value;
        }

        public static event Delegates.get_CommandIsPressed_BeforeArgs get_CommandIsPressed
        {
            add
            {
                HookHandler._beforeget_CommandIsPressed += value;
                HookHandler.Hookget_CommandIsPressed();
            }
            remove => HookHandler._beforeget_CommandIsPressed -= value;
        }

        public static event Delegates.get_CommandWasPressed_BeforeArgs get_CommandWasPressed
        {
            add
            {
                HookHandler._beforeget_CommandWasPressed += value;
                HookHandler.Hookget_CommandWasPressed();
            }
            remove => HookHandler._beforeget_CommandWasPressed -= value;
        }

        public static event Delegates.get_CommandWasReleased_BeforeArgs get_CommandWasReleased
        {
            add
            {
                HookHandler._beforeget_CommandWasReleased += value;
                HookHandler.Hookget_CommandWasReleased();
            }
            remove => HookHandler._beforeget_CommandWasReleased -= value;
        }

        public static event Delegates.get_AnyButton_BeforeArgs get_AnyButton
        {
            add
            {
                HookHandler._beforeget_AnyButton += value;
                HookHandler.Hookget_AnyButton();
            }
            remove => HookHandler._beforeget_AnyButton -= value;
        }

        public static event Delegates.get_AnyButtonIsPressed_BeforeArgs get_AnyButtonIsPressed
        {
            add
            {
                HookHandler._beforeget_AnyButtonIsPressed += value;
                HookHandler.Hookget_AnyButtonIsPressed();
            }
            remove => HookHandler._beforeget_AnyButtonIsPressed -= value;
        }

        public static event Delegates.get_AnyButtonWasPressed_BeforeArgs get_AnyButtonWasPressed
        {
            add
            {
                HookHandler._beforeget_AnyButtonWasPressed += value;
                HookHandler.Hookget_AnyButtonWasPressed();
            }
            remove => HookHandler._beforeget_AnyButtonWasPressed -= value;
        }

        public static event Delegates.get_AnyButtonWasReleased_BeforeArgs get_AnyButtonWasReleased
        {
            add
            {
                HookHandler._beforeget_AnyButtonWasReleased += value;
                HookHandler.Hookget_AnyButtonWasReleased();
            }
            remove => HookHandler._beforeget_AnyButtonWasReleased -= value;
        }

        public static event Delegates.get_Direction_BeforeArgs get_Direction
        {
            add
            {
                HookHandler._beforeget_Direction += value;
                HookHandler.Hookget_Direction();
            }
            remove => HookHandler._beforeget_Direction -= value;
        }

        public static event Delegates.get_LeftStickUp_BeforeArgs get_LeftStickUp
        {
            add
            {
                HookHandler._beforeget_LeftStickUp += value;
                HookHandler.Hookget_LeftStickUp();
            }
            remove => HookHandler._beforeget_LeftStickUp -= value;
        }

        public static event Delegates.get_LeftStickDown_BeforeArgs get_LeftStickDown
        {
            add
            {
                HookHandler._beforeget_LeftStickDown += value;
                HookHandler.Hookget_LeftStickDown();
            }
            remove => HookHandler._beforeget_LeftStickDown -= value;
        }

        public static event Delegates.get_LeftStickLeft_BeforeArgs get_LeftStickLeft
        {
            add
            {
                HookHandler._beforeget_LeftStickLeft += value;
                HookHandler.Hookget_LeftStickLeft();
            }
            remove => HookHandler._beforeget_LeftStickLeft -= value;
        }

        public static event Delegates.get_LeftStickRight_BeforeArgs get_LeftStickRight
        {
            add
            {
                HookHandler._beforeget_LeftStickRight += value;
                HookHandler.Hookget_LeftStickRight();
            }
            remove => HookHandler._beforeget_LeftStickRight -= value;
        }

        public static event Delegates.get_RightStickUp_BeforeArgs get_RightStickUp
        {
            add
            {
                HookHandler._beforeget_RightStickUp += value;
                HookHandler.Hookget_RightStickUp();
            }
            remove => HookHandler._beforeget_RightStickUp -= value;
        }

        public static event Delegates.get_RightStickDown_BeforeArgs get_RightStickDown
        {
            add
            {
                HookHandler._beforeget_RightStickDown += value;
                HookHandler.Hookget_RightStickDown();
            }
            remove => HookHandler._beforeget_RightStickDown -= value;
        }

        public static event Delegates.get_RightStickLeft_BeforeArgs get_RightStickLeft
        {
            add
            {
                HookHandler._beforeget_RightStickLeft += value;
                HookHandler.Hookget_RightStickLeft();
            }
            remove => HookHandler._beforeget_RightStickLeft -= value;
        }

        public static event Delegates.get_RightStickRight_BeforeArgs get_RightStickRight
        {
            add
            {
                HookHandler._beforeget_RightStickRight += value;
                HookHandler.Hookget_RightStickRight();
            }
            remove => HookHandler._beforeget_RightStickRight -= value;
        }

        public static event Delegates.get_DPadUp_BeforeArgs get_DPadUp
        {
            add
            {
                HookHandler._beforeget_DPadUp += value;
                HookHandler.Hookget_DPadUp();
            }
            remove => HookHandler._beforeget_DPadUp -= value;
        }

        public static event Delegates.get_DPadDown_BeforeArgs get_DPadDown
        {
            add
            {
                HookHandler._beforeget_DPadDown += value;
                HookHandler.Hookget_DPadDown();
            }
            remove => HookHandler._beforeget_DPadDown -= value;
        }

        public static event Delegates.get_DPadLeft_BeforeArgs get_DPadLeft
        {
            add
            {
                HookHandler._beforeget_DPadLeft += value;
                HookHandler.Hookget_DPadLeft();
            }
            remove => HookHandler._beforeget_DPadLeft -= value;
        }

        public static event Delegates.get_DPadRight_BeforeArgs get_DPadRight
        {
            add
            {
                HookHandler._beforeget_DPadRight += value;
                HookHandler.Hookget_DPadRight();
            }
            remove => HookHandler._beforeget_DPadRight -= value;
        }

        public static event Delegates.get_Action1_BeforeArgs get_Action1
        {
            add
            {
                HookHandler._beforeget_Action1 += value;
                HookHandler.Hookget_Action1();
            }
            remove => HookHandler._beforeget_Action1 -= value;
        }

        public static event Delegates.get_Action2_BeforeArgs get_Action2
        {
            add
            {
                HookHandler._beforeget_Action2 += value;
                HookHandler.Hookget_Action2();
            }
            remove => HookHandler._beforeget_Action2 -= value;
        }

        public static event Delegates.get_Action3_BeforeArgs get_Action3
        {
            add
            {
                HookHandler._beforeget_Action3 += value;
                HookHandler.Hookget_Action3();
            }
            remove => HookHandler._beforeget_Action3 -= value;
        }

        public static event Delegates.get_Action4_BeforeArgs get_Action4
        {
            add
            {
                HookHandler._beforeget_Action4 += value;
                HookHandler.Hookget_Action4();
            }
            remove => HookHandler._beforeget_Action4 -= value;
        }

        public static event Delegates.get_LeftTrigger_BeforeArgs get_LeftTrigger
        {
            add
            {
                HookHandler._beforeget_LeftTrigger += value;
                HookHandler.Hookget_LeftTrigger();
            }
            remove => HookHandler._beforeget_LeftTrigger -= value;
        }

        public static event Delegates.get_RightTrigger_BeforeArgs get_RightTrigger
        {
            add
            {
                HookHandler._beforeget_RightTrigger += value;
                HookHandler.Hookget_RightTrigger();
            }
            remove => HookHandler._beforeget_RightTrigger -= value;
        }

        public static event Delegates.get_LeftBumper_BeforeArgs get_LeftBumper
        {
            add
            {
                HookHandler._beforeget_LeftBumper += value;
                HookHandler.Hookget_LeftBumper();
            }
            remove => HookHandler._beforeget_LeftBumper -= value;
        }

        public static event Delegates.get_RightBumper_BeforeArgs get_RightBumper
        {
            add
            {
                HookHandler._beforeget_RightBumper += value;
                HookHandler.Hookget_RightBumper();
            }
            remove => HookHandler._beforeget_RightBumper -= value;
        }

        public static event Delegates.get_LeftStickButton_BeforeArgs get_LeftStickButton
        {
            add
            {
                HookHandler._beforeget_LeftStickButton += value;
                HookHandler.Hookget_LeftStickButton();
            }
            remove => HookHandler._beforeget_LeftStickButton -= value;
        }

        public static event Delegates.get_RightStickButton_BeforeArgs get_RightStickButton
        {
            add
            {
                HookHandler._beforeget_RightStickButton += value;
                HookHandler.Hookget_RightStickButton();
            }
            remove => HookHandler._beforeget_RightStickButton -= value;
        }

        public static event Delegates.get_LeftStickX_BeforeArgs get_LeftStickX
        {
            add
            {
                HookHandler._beforeget_LeftStickX += value;
                HookHandler.Hookget_LeftStickX();
            }
            remove => HookHandler._beforeget_LeftStickX -= value;
        }

        public static event Delegates.get_LeftStickY_BeforeArgs get_LeftStickY
        {
            add
            {
                HookHandler._beforeget_LeftStickY += value;
                HookHandler.Hookget_LeftStickY();
            }
            remove => HookHandler._beforeget_LeftStickY -= value;
        }

        public static event Delegates.get_RightStickX_BeforeArgs get_RightStickX
        {
            add
            {
                HookHandler._beforeget_RightStickX += value;
                HookHandler.Hookget_RightStickX();
            }
            remove => HookHandler._beforeget_RightStickX -= value;
        }

        public static event Delegates.get_RightStickY_BeforeArgs get_RightStickY
        {
            add
            {
                HookHandler._beforeget_RightStickY += value;
                HookHandler.Hookget_RightStickY();
            }
            remove => HookHandler._beforeget_RightStickY -= value;
        }

        public static event Delegates.get_DPadX_BeforeArgs get_DPadX
        {
            add
            {
                HookHandler._beforeget_DPadX += value;
                HookHandler.Hookget_DPadX();
            }
            remove => HookHandler._beforeget_DPadX -= value;
        }

        public static event Delegates.get_DPadY_BeforeArgs get_DPadY
        {
            add
            {
                HookHandler._beforeget_DPadY += value;
                HookHandler.Hookget_DPadY();
            }
            remove => HookHandler._beforeget_DPadY -= value;
        }

        public static event Delegates.get_Command_BeforeArgs get_Command
        {
            add
            {
                HookHandler._beforeget_Command += value;
                HookHandler.Hookget_Command();
            }
            remove => HookHandler._beforeget_Command -= value;
        }

        public static event Delegates.get_LeftCommand_BeforeArgs get_LeftCommand
        {
            add
            {
                HookHandler._beforeget_LeftCommand += value;
                HookHandler.Hookget_LeftCommand();
            }
            remove => HookHandler._beforeget_LeftCommand -= value;
        }

        public static event Delegates.get_RightCommand_BeforeArgs get_RightCommand
        {
            add
            {
                HookHandler._beforeget_RightCommand += value;
                HookHandler.Hookget_RightCommand();
            }
            remove => HookHandler._beforeget_RightCommand -= value;
        }

        public static event Delegates.ExpireControlCache_BeforeArgs ExpireControlCache
        {
            add
            {
                HookHandler._beforeExpireControlCache += value;
                HookHandler.HookExpireControlCache();
            }
            remove => HookHandler._beforeExpireControlCache -= value;
        }

        public static event Delegates.get_NumUnknownAnalogs_BeforeArgs get_NumUnknownAnalogs
        {
            add
            {
                HookHandler._beforeget_NumUnknownAnalogs += value;
                HookHandler.Hookget_NumUnknownAnalogs();
            }
            remove => HookHandler._beforeget_NumUnknownAnalogs -= value;
        }

        public static event Delegates.get_NumUnknownButtons_BeforeArgs get_NumUnknownButtons
        {
            add
            {
                HookHandler._beforeget_NumUnknownButtons += value;
                HookHandler.Hookget_NumUnknownButtons();
            }
            remove => HookHandler._beforeget_NumUnknownButtons -= value;
        }

        public static event Delegates.ReadRawButtonState_BeforeArgs ReadRawButtonState
        {
            add
            {
                HookHandler._beforeReadRawButtonState += value;
                HookHandler.HookReadRawButtonState();
            }
            remove => HookHandler._beforeReadRawButtonState -= value;
        }

        public static event Delegates.ReadRawAnalogValue_BeforeArgs ReadRawAnalogValue
        {
            add
            {
                HookHandler._beforeReadRawAnalogValue += value;
                HookHandler.HookReadRawAnalogValue();
            }
            remove => HookHandler._beforeReadRawAnalogValue -= value;
        }

        public static event Delegates.TakeSnapshot_BeforeArgs TakeSnapshot
        {
            add
            {
                HookHandler._beforeTakeSnapshot += value;
                HookHandler.HookTakeSnapshot();
            }
            remove => HookHandler._beforeTakeSnapshot -= value;
        }

        public static event Delegates.GetFirstPressedAnalog_BeforeArgs GetFirstPressedAnalog
        {
            add
            {
                HookHandler._beforeGetFirstPressedAnalog += value;
                HookHandler.HookGetFirstPressedAnalog();
            }
            remove => HookHandler._beforeGetFirstPressedAnalog -= value;
        }

        public static event Delegates.GetFirstPressedButton_BeforeArgs GetFirstPressedButton
        {
            add
            {
                HookHandler._beforeGetFirstPressedButton += value;
                HookHandler.HookGetFirstPressedButton();
            }
            remove => HookHandler._beforeGetFirstPressedButton -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Name_NormalArgs get_Name
        {
            add
            {
                HookHandler._afterget_Name += value;
                HookHandler.Hookget_Name();
            }
            remove => HookHandler._afterget_Name -= value;
        }

        public static event Delegates.set_Name_NormalArgs set_Name
        {
            add
            {
                HookHandler._afterset_Name += value;
                HookHandler.Hookset_Name();
            }
            remove => HookHandler._afterset_Name -= value;
        }

        public static event Delegates.get_Meta_NormalArgs get_Meta
        {
            add
            {
                HookHandler._afterget_Meta += value;
                HookHandler.Hookget_Meta();
            }
            remove => HookHandler._afterget_Meta -= value;
        }

        public static event Delegates.set_Meta_NormalArgs set_Meta
        {
            add
            {
                HookHandler._afterset_Meta += value;
                HookHandler.Hookset_Meta();
            }
            remove => HookHandler._afterset_Meta -= value;
        }

        public static event Delegates.get_SortOrder_NormalArgs get_SortOrder
        {
            add
            {
                HookHandler._afterget_SortOrder += value;
                HookHandler.Hookget_SortOrder();
            }
            remove => HookHandler._afterget_SortOrder -= value;
        }

        public static event Delegates.set_SortOrder_NormalArgs set_SortOrder
        {
            add
            {
                HookHandler._afterset_SortOrder += value;
                HookHandler.Hookset_SortOrder();
            }
            remove => HookHandler._afterset_SortOrder -= value;
        }

        public static event Delegates.get_DeviceClass_NormalArgs get_DeviceClass
        {
            add
            {
                HookHandler._afterget_DeviceClass += value;
                HookHandler.Hookget_DeviceClass();
            }
            remove => HookHandler._afterget_DeviceClass -= value;
        }

        public static event Delegates.set_DeviceClass_NormalArgs set_DeviceClass
        {
            add
            {
                HookHandler._afterset_DeviceClass += value;
                HookHandler.Hookset_DeviceClass();
            }
            remove => HookHandler._afterset_DeviceClass -= value;
        }

        public static event Delegates.get_DeviceStyle_NormalArgs get_DeviceStyle
        {
            add
            {
                HookHandler._afterget_DeviceStyle += value;
                HookHandler.Hookget_DeviceStyle();
            }
            remove => HookHandler._afterget_DeviceStyle -= value;
        }

        public static event Delegates.set_DeviceStyle_NormalArgs set_DeviceStyle
        {
            add
            {
                HookHandler._afterset_DeviceStyle += value;
                HookHandler.Hookset_DeviceStyle();
            }
            remove => HookHandler._afterset_DeviceStyle -= value;
        }

        public static event Delegates.get_GUID_NormalArgs get_GUID
        {
            add
            {
                HookHandler._afterget_GUID += value;
                HookHandler.Hookget_GUID();
            }
            remove => HookHandler._afterget_GUID -= value;
        }

        public static event Delegates.set_GUID_NormalArgs set_GUID
        {
            add
            {
                HookHandler._afterset_GUID += value;
                HookHandler.Hookset_GUID();
            }
            remove => HookHandler._afterset_GUID -= value;
        }

        public static event Delegates.get_LastInputTick_NormalArgs get_LastInputTick
        {
            add
            {
                HookHandler._afterget_LastInputTick += value;
                HookHandler.Hookget_LastInputTick();
            }
            remove => HookHandler._afterget_LastInputTick -= value;
        }

        public static event Delegates.set_LastInputTick_NormalArgs set_LastInputTick
        {
            add
            {
                HookHandler._afterset_LastInputTick += value;
                HookHandler.Hookset_LastInputTick();
            }
            remove => HookHandler._afterset_LastInputTick -= value;
        }

        public static event Delegates.get_IsActive_NormalArgs get_IsActive
        {
            add
            {
                HookHandler._afterget_IsActive += value;
                HookHandler.Hookget_IsActive();
            }
            remove => HookHandler._afterget_IsActive -= value;
        }

        public static event Delegates.set_IsActive_NormalArgs set_IsActive
        {
            add
            {
                HookHandler._afterset_IsActive += value;
                HookHandler.Hookset_IsActive();
            }
            remove => HookHandler._afterset_IsActive -= value;
        }

        public static event Delegates.get_IsAttached_NormalArgs get_IsAttached
        {
            add
            {
                HookHandler._afterget_IsAttached += value;
                HookHandler.Hookget_IsAttached();
            }
            remove => HookHandler._afterget_IsAttached -= value;
        }

        public static event Delegates.set_IsAttached_NormalArgs set_IsAttached
        {
            add
            {
                HookHandler._afterset_IsAttached += value;
                HookHandler.Hookset_IsAttached();
            }
            remove => HookHandler._afterset_IsAttached -= value;
        }

        public static event Delegates.get_RawSticks_NormalArgs get_RawSticks
        {
            add
            {
                HookHandler._afterget_RawSticks += value;
                HookHandler.Hookget_RawSticks();
            }
            remove => HookHandler._afterget_RawSticks -= value;
        }

        public static event Delegates.set_RawSticks_NormalArgs set_RawSticks
        {
            add
            {
                HookHandler._afterset_RawSticks += value;
                HookHandler.Hookset_RawSticks();
            }
            remove => HookHandler._afterset_RawSticks -= value;
        }

        public static event Delegates.get_Controls_NormalArgs get_Controls
        {
            add
            {
                HookHandler._afterget_Controls += value;
                HookHandler.Hookget_Controls();
            }
            remove => HookHandler._afterget_Controls -= value;
        }

        public static event Delegates.set_Controls_NormalArgs set_Controls
        {
            add
            {
                HookHandler._afterset_Controls += value;
                HookHandler.Hookset_Controls();
            }
            remove => HookHandler._afterset_Controls -= value;
        }

        public static event Delegates.get_ControlsByTarget_NormalArgs get_ControlsByTarget
        {
            add
            {
                HookHandler._afterget_ControlsByTarget += value;
                HookHandler.Hookget_ControlsByTarget();
            }
            remove => HookHandler._afterget_ControlsByTarget -= value;
        }

        public static event Delegates.set_ControlsByTarget_NormalArgs set_ControlsByTarget
        {
            add
            {
                HookHandler._afterset_ControlsByTarget += value;
                HookHandler.Hookset_ControlsByTarget();
            }
            remove => HookHandler._afterset_ControlsByTarget -= value;
        }

        public static event Delegates.get_LeftStick_NormalArgs get_LeftStick
        {
            add
            {
                HookHandler._afterget_LeftStick += value;
                HookHandler.Hookget_LeftStick();
            }
            remove => HookHandler._afterget_LeftStick -= value;
        }

        public static event Delegates.set_LeftStick_NormalArgs set_LeftStick
        {
            add
            {
                HookHandler._afterset_LeftStick += value;
                HookHandler.Hookset_LeftStick();
            }
            remove => HookHandler._afterset_LeftStick -= value;
        }

        public static event Delegates.get_RightStick_NormalArgs get_RightStick
        {
            add
            {
                HookHandler._afterget_RightStick += value;
                HookHandler.Hookget_RightStick();
            }
            remove => HookHandler._afterget_RightStick -= value;
        }

        public static event Delegates.set_RightStick_NormalArgs set_RightStick
        {
            add
            {
                HookHandler._afterset_RightStick += value;
                HookHandler.Hookset_RightStick();
            }
            remove => HookHandler._afterset_RightStick -= value;
        }

        public static event Delegates.get_DPad_NormalArgs get_DPad
        {
            add
            {
                HookHandler._afterget_DPad += value;
                HookHandler.Hookget_DPad();
            }
            remove => HookHandler._afterget_DPad -= value;
        }

        public static event Delegates.set_DPad_NormalArgs set_DPad
        {
            add
            {
                HookHandler._afterset_DPad += value;
                HookHandler.Hookset_DPad();
            }
            remove => HookHandler._afterset_DPad -= value;
        }

        public static event Delegates.get_LeftCommandControl_NormalArgs get_LeftCommandControl
        {
            add
            {
                HookHandler._afterget_LeftCommandControl += value;
                HookHandler.Hookget_LeftCommandControl();
            }
            remove => HookHandler._afterget_LeftCommandControl -= value;
        }

        public static event Delegates.set_LeftCommandControl_NormalArgs set_LeftCommandControl
        {
            add
            {
                HookHandler._afterset_LeftCommandControl += value;
                HookHandler.Hookset_LeftCommandControl();
            }
            remove => HookHandler._afterset_LeftCommandControl -= value;
        }

        public static event Delegates.get_RightCommandControl_NormalArgs get_RightCommandControl
        {
            add
            {
                HookHandler._afterget_RightCommandControl += value;
                HookHandler.Hookget_RightCommandControl();
            }
            remove => HookHandler._afterget_RightCommandControl -= value;
        }

        public static event Delegates.set_RightCommandControl_NormalArgs set_RightCommandControl
        {
            add
            {
                HookHandler._afterset_RightCommandControl += value;
                HookHandler.Hookset_RightCommandControl();
            }
            remove => HookHandler._afterset_RightCommandControl -= value;
        }

        public static event Delegates.OnAttached_NormalArgs OnAttached
        {
            add
            {
                HookHandler._afterOnAttached += value;
                HookHandler.HookOnAttached();
            }
            remove => HookHandler._afterOnAttached -= value;
        }

        public static event Delegates.OnDetached_NormalArgs OnDetached
        {
            add
            {
                HookHandler._afterOnDetached += value;
                HookHandler.HookOnDetached();
            }
            remove => HookHandler._afterOnDetached -= value;
        }

        public static event Delegates.AddAliasControls_NormalArgs AddAliasControls
        {
            add
            {
                HookHandler._afterAddAliasControls += value;
                HookHandler.HookAddAliasControls();
            }
            remove => HookHandler._afterAddAliasControls -= value;
        }

        public static event Delegates.RemoveAliasControls_NormalArgs RemoveAliasControls
        {
            add
            {
                HookHandler._afterRemoveAliasControls += value;
                HookHandler.HookRemoveAliasControls();
            }
            remove => HookHandler._afterRemoveAliasControls -= value;
        }

        public static event Delegates.ClearControls_NormalArgs ClearControls
        {
            add
            {
                HookHandler._afterClearControls += value;
                HookHandler.HookClearControls();
            }
            remove => HookHandler._afterClearControls -= value;
        }

        public static event Delegates.HasControl_NormalArgs HasControl
        {
            add
            {
                HookHandler._afterHasControl += value;
                HookHandler.HookHasControl();
            }
            remove => HookHandler._afterHasControl -= value;
        }

        public static event Delegates.GetControl_NormalArgs GetControl
        {
            add
            {
                HookHandler._afterGetControl += value;
                HookHandler.HookGetControl();
            }
            remove => HookHandler._afterGetControl -= value;
        }

        public static event Delegates.get_Item_NormalArgs get_Item
        {
            add
            {
                HookHandler._afterget_Item += value;
                HookHandler.Hookget_Item();
            }
            remove => HookHandler._afterget_Item -= value;
        }

        public static event Delegates.GetInputControlTypeByName_NormalArgs GetInputControlTypeByName
        {
            add
            {
                HookHandler._afterGetInputControlTypeByName += value;
                HookHandler.HookGetInputControlTypeByName();
            }
            remove => HookHandler._afterGetInputControlTypeByName -= value;
        }

        public static event Delegates.GetControlByName_NormalArgs GetControlByName
        {
            add
            {
                HookHandler._afterGetControlByName += value;
                HookHandler.HookGetControlByName();
            }
            remove => HookHandler._afterGetControlByName -= value;
        }

        public static event Delegates.AddControl_InputControlType_string_NormalArgs AddControl_InputControlType_string
        {
            add
            {
                HookHandler._afterAddControl_InputControlType_string += value;
                HookHandler.HookAddControl_InputControlType_string();
            }
            remove => HookHandler._afterAddControl_InputControlType_string -= value;
        }

        public static event Delegates.AddControl_InputControlType_string_float_float_NormalArgs
            AddControl_InputControlType_string_float_float
            {
                add
                {
                    HookHandler._afterAddControl_InputControlType_string_float_float += value;
                    HookHandler.HookAddControl_InputControlType_string_float_float();
                }
                remove => HookHandler._afterAddControl_InputControlType_string_float_float -= value;
            }

        public static event Delegates.RemoveControl_NormalArgs RemoveControl
        {
            add
            {
                HookHandler._afterRemoveControl += value;
                HookHandler.HookRemoveControl();
            }
            remove => HookHandler._afterRemoveControl -= value;
        }

        public static event Delegates.ClearInputState_NormalArgs ClearInputState
        {
            add
            {
                HookHandler._afterClearInputState += value;
                HookHandler.HookClearInputState();
            }
            remove => HookHandler._afterClearInputState -= value;
        }

        public static event Delegates.UpdateWithState_NormalArgs UpdateWithState
        {
            add
            {
                HookHandler._afterUpdateWithState += value;
                HookHandler.HookUpdateWithState();
            }
            remove => HookHandler._afterUpdateWithState -= value;
        }

        public static event Delegates.UpdateWithValue_NormalArgs UpdateWithValue
        {
            add
            {
                HookHandler._afterUpdateWithValue += value;
                HookHandler.HookUpdateWithValue();
            }
            remove => HookHandler._afterUpdateWithValue -= value;
        }

        public static event Delegates.UpdateLeftStickWithValue_NormalArgs UpdateLeftStickWithValue
        {
            add
            {
                HookHandler._afterUpdateLeftStickWithValue += value;
                HookHandler.HookUpdateLeftStickWithValue();
            }
            remove => HookHandler._afterUpdateLeftStickWithValue -= value;
        }

        public static event Delegates.UpdateLeftStickWithRawValue_NormalArgs UpdateLeftStickWithRawValue
        {
            add
            {
                HookHandler._afterUpdateLeftStickWithRawValue += value;
                HookHandler.HookUpdateLeftStickWithRawValue();
            }
            remove => HookHandler._afterUpdateLeftStickWithRawValue -= value;
        }

        public static event Delegates.CommitLeftStick_NormalArgs CommitLeftStick
        {
            add
            {
                HookHandler._afterCommitLeftStick += value;
                HookHandler.HookCommitLeftStick();
            }
            remove => HookHandler._afterCommitLeftStick -= value;
        }

        public static event Delegates.UpdateRightStickWithValue_NormalArgs UpdateRightStickWithValue
        {
            add
            {
                HookHandler._afterUpdateRightStickWithValue += value;
                HookHandler.HookUpdateRightStickWithValue();
            }
            remove => HookHandler._afterUpdateRightStickWithValue -= value;
        }

        public static event Delegates.UpdateRightStickWithRawValue_NormalArgs UpdateRightStickWithRawValue
        {
            add
            {
                HookHandler._afterUpdateRightStickWithRawValue += value;
                HookHandler.HookUpdateRightStickWithRawValue();
            }
            remove => HookHandler._afterUpdateRightStickWithRawValue -= value;
        }

        public static event Delegates.CommitRightStick_NormalArgs CommitRightStick
        {
            add
            {
                HookHandler._afterCommitRightStick += value;
                HookHandler.HookCommitRightStick();
            }
            remove => HookHandler._afterCommitRightStick -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.ProcessLeftStick_NormalArgs ProcessLeftStick
        {
            add
            {
                HookHandler._afterProcessLeftStick += value;
                HookHandler.HookProcessLeftStick();
            }
            remove => HookHandler._afterProcessLeftStick -= value;
        }

        public static event Delegates.ProcessRightStick_NormalArgs ProcessRightStick
        {
            add
            {
                HookHandler._afterProcessRightStick += value;
                HookHandler.HookProcessRightStick();
            }
            remove => HookHandler._afterProcessRightStick -= value;
        }

        public static event Delegates.ProcessDPad_NormalArgs ProcessDPad
        {
            add
            {
                HookHandler._afterProcessDPad += value;
                HookHandler.HookProcessDPad();
            }
            remove => HookHandler._afterProcessDPad -= value;
        }

        public static event Delegates.Commit_NormalArgs Commit
        {
            add
            {
                HookHandler._afterCommit += value;
                HookHandler.HookCommit();
            }
            remove => HookHandler._afterCommit -= value;
        }

        public static event Delegates.LastInputAfter_NormalArgs LastInputAfter
        {
            add
            {
                HookHandler._afterLastInputAfter += value;
                HookHandler.HookLastInputAfter();
            }
            remove => HookHandler._afterLastInputAfter -= value;
        }

        public static event Delegates.RequestActivation_NormalArgs RequestActivation
        {
            add
            {
                HookHandler._afterRequestActivation += value;
                HookHandler.HookRequestActivation();
            }
            remove => HookHandler._afterRequestActivation -= value;
        }

        public static event Delegates.Vibrate_float_float_NormalArgs Vibrate_float_float
        {
            add
            {
                HookHandler._afterVibrate_float_float += value;
                HookHandler.HookVibrate_float_float();
            }
            remove => HookHandler._afterVibrate_float_float -= value;
        }

        public static event Delegates.Vibrate_float_NormalArgs Vibrate_float
        {
            add
            {
                HookHandler._afterVibrate_float += value;
                HookHandler.HookVibrate_float();
            }
            remove => HookHandler._afterVibrate_float -= value;
        }

        public static event Delegates.StopVibration_NormalArgs StopVibration
        {
            add
            {
                HookHandler._afterStopVibration += value;
                HookHandler.HookStopVibration();
            }
            remove => HookHandler._afterStopVibration -= value;
        }

        public static event Delegates.SetLightColor_float_float_float_NormalArgs SetLightColor_float_float_float
        {
            add
            {
                HookHandler._afterSetLightColor_float_float_float += value;
                HookHandler.HookSetLightColor_float_float_float();
            }
            remove => HookHandler._afterSetLightColor_float_float_float -= value;
        }

        public static event Delegates.SetLightColor_Color_NormalArgs SetLightColor_Color
        {
            add
            {
                HookHandler._afterSetLightColor_Color += value;
                HookHandler.HookSetLightColor_Color();
            }
            remove => HookHandler._afterSetLightColor_Color -= value;
        }

        public static event Delegates.SetLightFlash_NormalArgs SetLightFlash
        {
            add
            {
                HookHandler._afterSetLightFlash += value;
                HookHandler.HookSetLightFlash();
            }
            remove => HookHandler._afterSetLightFlash -= value;
        }

        public static event Delegates.StopLightFlash_NormalArgs StopLightFlash
        {
            add
            {
                HookHandler._afterStopLightFlash += value;
                HookHandler.HookStopLightFlash();
            }
            remove => HookHandler._afterStopLightFlash -= value;
        }

        public static event Delegates.get_IsSupportedOnThisPlatform_NormalArgs get_IsSupportedOnThisPlatform
        {
            add
            {
                HookHandler._afterget_IsSupportedOnThisPlatform += value;
                HookHandler.Hookget_IsSupportedOnThisPlatform();
            }
            remove => HookHandler._afterget_IsSupportedOnThisPlatform -= value;
        }

        public static event Delegates.get_IsKnown_NormalArgs get_IsKnown
        {
            add
            {
                HookHandler._afterget_IsKnown += value;
                HookHandler.Hookget_IsKnown();
            }
            remove => HookHandler._afterget_IsKnown -= value;
        }

        public static event Delegates.get_IsUnknown_NormalArgs get_IsUnknown
        {
            add
            {
                HookHandler._afterget_IsUnknown += value;
                HookHandler.Hookget_IsUnknown();
            }
            remove => HookHandler._afterget_IsUnknown -= value;
        }

        public static event Delegates.get_MenuIsPressed_NormalArgs get_MenuIsPressed
        {
            add
            {
                HookHandler._afterget_MenuIsPressed += value;
                HookHandler.Hookget_MenuIsPressed();
            }
            remove => HookHandler._afterget_MenuIsPressed -= value;
        }

        public static event Delegates.get_MenuWasPressed_NormalArgs get_MenuWasPressed
        {
            add
            {
                HookHandler._afterget_MenuWasPressed += value;
                HookHandler.Hookget_MenuWasPressed();
            }
            remove => HookHandler._afterget_MenuWasPressed -= value;
        }

        public static event Delegates.get_MenuWasReleased_NormalArgs get_MenuWasReleased
        {
            add
            {
                HookHandler._afterget_MenuWasReleased += value;
                HookHandler.Hookget_MenuWasReleased();
            }
            remove => HookHandler._afterget_MenuWasReleased -= value;
        }

        public static event Delegates.get_CommandIsPressed_NormalArgs get_CommandIsPressed
        {
            add
            {
                HookHandler._afterget_CommandIsPressed += value;
                HookHandler.Hookget_CommandIsPressed();
            }
            remove => HookHandler._afterget_CommandIsPressed -= value;
        }

        public static event Delegates.get_CommandWasPressed_NormalArgs get_CommandWasPressed
        {
            add
            {
                HookHandler._afterget_CommandWasPressed += value;
                HookHandler.Hookget_CommandWasPressed();
            }
            remove => HookHandler._afterget_CommandWasPressed -= value;
        }

        public static event Delegates.get_CommandWasReleased_NormalArgs get_CommandWasReleased
        {
            add
            {
                HookHandler._afterget_CommandWasReleased += value;
                HookHandler.Hookget_CommandWasReleased();
            }
            remove => HookHandler._afterget_CommandWasReleased -= value;
        }

        public static event Delegates.get_AnyButton_NormalArgs get_AnyButton
        {
            add
            {
                HookHandler._afterget_AnyButton += value;
                HookHandler.Hookget_AnyButton();
            }
            remove => HookHandler._afterget_AnyButton -= value;
        }

        public static event Delegates.get_AnyButtonIsPressed_NormalArgs get_AnyButtonIsPressed
        {
            add
            {
                HookHandler._afterget_AnyButtonIsPressed += value;
                HookHandler.Hookget_AnyButtonIsPressed();
            }
            remove => HookHandler._afterget_AnyButtonIsPressed -= value;
        }

        public static event Delegates.get_AnyButtonWasPressed_NormalArgs get_AnyButtonWasPressed
        {
            add
            {
                HookHandler._afterget_AnyButtonWasPressed += value;
                HookHandler.Hookget_AnyButtonWasPressed();
            }
            remove => HookHandler._afterget_AnyButtonWasPressed -= value;
        }

        public static event Delegates.get_AnyButtonWasReleased_NormalArgs get_AnyButtonWasReleased
        {
            add
            {
                HookHandler._afterget_AnyButtonWasReleased += value;
                HookHandler.Hookget_AnyButtonWasReleased();
            }
            remove => HookHandler._afterget_AnyButtonWasReleased -= value;
        }

        public static event Delegates.get_Direction_NormalArgs get_Direction
        {
            add
            {
                HookHandler._afterget_Direction += value;
                HookHandler.Hookget_Direction();
            }
            remove => HookHandler._afterget_Direction -= value;
        }

        public static event Delegates.get_LeftStickUp_NormalArgs get_LeftStickUp
        {
            add
            {
                HookHandler._afterget_LeftStickUp += value;
                HookHandler.Hookget_LeftStickUp();
            }
            remove => HookHandler._afterget_LeftStickUp -= value;
        }

        public static event Delegates.get_LeftStickDown_NormalArgs get_LeftStickDown
        {
            add
            {
                HookHandler._afterget_LeftStickDown += value;
                HookHandler.Hookget_LeftStickDown();
            }
            remove => HookHandler._afterget_LeftStickDown -= value;
        }

        public static event Delegates.get_LeftStickLeft_NormalArgs get_LeftStickLeft
        {
            add
            {
                HookHandler._afterget_LeftStickLeft += value;
                HookHandler.Hookget_LeftStickLeft();
            }
            remove => HookHandler._afterget_LeftStickLeft -= value;
        }

        public static event Delegates.get_LeftStickRight_NormalArgs get_LeftStickRight
        {
            add
            {
                HookHandler._afterget_LeftStickRight += value;
                HookHandler.Hookget_LeftStickRight();
            }
            remove => HookHandler._afterget_LeftStickRight -= value;
        }

        public static event Delegates.get_RightStickUp_NormalArgs get_RightStickUp
        {
            add
            {
                HookHandler._afterget_RightStickUp += value;
                HookHandler.Hookget_RightStickUp();
            }
            remove => HookHandler._afterget_RightStickUp -= value;
        }

        public static event Delegates.get_RightStickDown_NormalArgs get_RightStickDown
        {
            add
            {
                HookHandler._afterget_RightStickDown += value;
                HookHandler.Hookget_RightStickDown();
            }
            remove => HookHandler._afterget_RightStickDown -= value;
        }

        public static event Delegates.get_RightStickLeft_NormalArgs get_RightStickLeft
        {
            add
            {
                HookHandler._afterget_RightStickLeft += value;
                HookHandler.Hookget_RightStickLeft();
            }
            remove => HookHandler._afterget_RightStickLeft -= value;
        }

        public static event Delegates.get_RightStickRight_NormalArgs get_RightStickRight
        {
            add
            {
                HookHandler._afterget_RightStickRight += value;
                HookHandler.Hookget_RightStickRight();
            }
            remove => HookHandler._afterget_RightStickRight -= value;
        }

        public static event Delegates.get_DPadUp_NormalArgs get_DPadUp
        {
            add
            {
                HookHandler._afterget_DPadUp += value;
                HookHandler.Hookget_DPadUp();
            }
            remove => HookHandler._afterget_DPadUp -= value;
        }

        public static event Delegates.get_DPadDown_NormalArgs get_DPadDown
        {
            add
            {
                HookHandler._afterget_DPadDown += value;
                HookHandler.Hookget_DPadDown();
            }
            remove => HookHandler._afterget_DPadDown -= value;
        }

        public static event Delegates.get_DPadLeft_NormalArgs get_DPadLeft
        {
            add
            {
                HookHandler._afterget_DPadLeft += value;
                HookHandler.Hookget_DPadLeft();
            }
            remove => HookHandler._afterget_DPadLeft -= value;
        }

        public static event Delegates.get_DPadRight_NormalArgs get_DPadRight
        {
            add
            {
                HookHandler._afterget_DPadRight += value;
                HookHandler.Hookget_DPadRight();
            }
            remove => HookHandler._afterget_DPadRight -= value;
        }

        public static event Delegates.get_Action1_NormalArgs get_Action1
        {
            add
            {
                HookHandler._afterget_Action1 += value;
                HookHandler.Hookget_Action1();
            }
            remove => HookHandler._afterget_Action1 -= value;
        }

        public static event Delegates.get_Action2_NormalArgs get_Action2
        {
            add
            {
                HookHandler._afterget_Action2 += value;
                HookHandler.Hookget_Action2();
            }
            remove => HookHandler._afterget_Action2 -= value;
        }

        public static event Delegates.get_Action3_NormalArgs get_Action3
        {
            add
            {
                HookHandler._afterget_Action3 += value;
                HookHandler.Hookget_Action3();
            }
            remove => HookHandler._afterget_Action3 -= value;
        }

        public static event Delegates.get_Action4_NormalArgs get_Action4
        {
            add
            {
                HookHandler._afterget_Action4 += value;
                HookHandler.Hookget_Action4();
            }
            remove => HookHandler._afterget_Action4 -= value;
        }

        public static event Delegates.get_LeftTrigger_NormalArgs get_LeftTrigger
        {
            add
            {
                HookHandler._afterget_LeftTrigger += value;
                HookHandler.Hookget_LeftTrigger();
            }
            remove => HookHandler._afterget_LeftTrigger -= value;
        }

        public static event Delegates.get_RightTrigger_NormalArgs get_RightTrigger
        {
            add
            {
                HookHandler._afterget_RightTrigger += value;
                HookHandler.Hookget_RightTrigger();
            }
            remove => HookHandler._afterget_RightTrigger -= value;
        }

        public static event Delegates.get_LeftBumper_NormalArgs get_LeftBumper
        {
            add
            {
                HookHandler._afterget_LeftBumper += value;
                HookHandler.Hookget_LeftBumper();
            }
            remove => HookHandler._afterget_LeftBumper -= value;
        }

        public static event Delegates.get_RightBumper_NormalArgs get_RightBumper
        {
            add
            {
                HookHandler._afterget_RightBumper += value;
                HookHandler.Hookget_RightBumper();
            }
            remove => HookHandler._afterget_RightBumper -= value;
        }

        public static event Delegates.get_LeftStickButton_NormalArgs get_LeftStickButton
        {
            add
            {
                HookHandler._afterget_LeftStickButton += value;
                HookHandler.Hookget_LeftStickButton();
            }
            remove => HookHandler._afterget_LeftStickButton -= value;
        }

        public static event Delegates.get_RightStickButton_NormalArgs get_RightStickButton
        {
            add
            {
                HookHandler._afterget_RightStickButton += value;
                HookHandler.Hookget_RightStickButton();
            }
            remove => HookHandler._afterget_RightStickButton -= value;
        }

        public static event Delegates.get_LeftStickX_NormalArgs get_LeftStickX
        {
            add
            {
                HookHandler._afterget_LeftStickX += value;
                HookHandler.Hookget_LeftStickX();
            }
            remove => HookHandler._afterget_LeftStickX -= value;
        }

        public static event Delegates.get_LeftStickY_NormalArgs get_LeftStickY
        {
            add
            {
                HookHandler._afterget_LeftStickY += value;
                HookHandler.Hookget_LeftStickY();
            }
            remove => HookHandler._afterget_LeftStickY -= value;
        }

        public static event Delegates.get_RightStickX_NormalArgs get_RightStickX
        {
            add
            {
                HookHandler._afterget_RightStickX += value;
                HookHandler.Hookget_RightStickX();
            }
            remove => HookHandler._afterget_RightStickX -= value;
        }

        public static event Delegates.get_RightStickY_NormalArgs get_RightStickY
        {
            add
            {
                HookHandler._afterget_RightStickY += value;
                HookHandler.Hookget_RightStickY();
            }
            remove => HookHandler._afterget_RightStickY -= value;
        }

        public static event Delegates.get_DPadX_NormalArgs get_DPadX
        {
            add
            {
                HookHandler._afterget_DPadX += value;
                HookHandler.Hookget_DPadX();
            }
            remove => HookHandler._afterget_DPadX -= value;
        }

        public static event Delegates.get_DPadY_NormalArgs get_DPadY
        {
            add
            {
                HookHandler._afterget_DPadY += value;
                HookHandler.Hookget_DPadY();
            }
            remove => HookHandler._afterget_DPadY -= value;
        }

        public static event Delegates.get_Command_NormalArgs get_Command
        {
            add
            {
                HookHandler._afterget_Command += value;
                HookHandler.Hookget_Command();
            }
            remove => HookHandler._afterget_Command -= value;
        }

        public static event Delegates.get_LeftCommand_NormalArgs get_LeftCommand
        {
            add
            {
                HookHandler._afterget_LeftCommand += value;
                HookHandler.Hookget_LeftCommand();
            }
            remove => HookHandler._afterget_LeftCommand -= value;
        }

        public static event Delegates.get_RightCommand_NormalArgs get_RightCommand
        {
            add
            {
                HookHandler._afterget_RightCommand += value;
                HookHandler.Hookget_RightCommand();
            }
            remove => HookHandler._afterget_RightCommand -= value;
        }

        public static event Delegates.ExpireControlCache_NormalArgs ExpireControlCache
        {
            add
            {
                HookHandler._afterExpireControlCache += value;
                HookHandler.HookExpireControlCache();
            }
            remove => HookHandler._afterExpireControlCache -= value;
        }

        public static event Delegates.get_NumUnknownAnalogs_NormalArgs get_NumUnknownAnalogs
        {
            add
            {
                HookHandler._afterget_NumUnknownAnalogs += value;
                HookHandler.Hookget_NumUnknownAnalogs();
            }
            remove => HookHandler._afterget_NumUnknownAnalogs -= value;
        }

        public static event Delegates.get_NumUnknownButtons_NormalArgs get_NumUnknownButtons
        {
            add
            {
                HookHandler._afterget_NumUnknownButtons += value;
                HookHandler.Hookget_NumUnknownButtons();
            }
            remove => HookHandler._afterget_NumUnknownButtons -= value;
        }

        public static event Delegates.ReadRawButtonState_NormalArgs ReadRawButtonState
        {
            add
            {
                HookHandler._afterReadRawButtonState += value;
                HookHandler.HookReadRawButtonState();
            }
            remove => HookHandler._afterReadRawButtonState -= value;
        }

        public static event Delegates.ReadRawAnalogValue_NormalArgs ReadRawAnalogValue
        {
            add
            {
                HookHandler._afterReadRawAnalogValue += value;
                HookHandler.HookReadRawAnalogValue();
            }
            remove => HookHandler._afterReadRawAnalogValue -= value;
        }

        public static event Delegates.TakeSnapshot_NormalArgs TakeSnapshot
        {
            add
            {
                HookHandler._afterTakeSnapshot += value;
                HookHandler.HookTakeSnapshot();
            }
            remove => HookHandler._afterTakeSnapshot -= value;
        }

        public static event Delegates.GetFirstPressedAnalog_NormalArgs GetFirstPressedAnalog
        {
            add
            {
                HookHandler._afterGetFirstPressedAnalog += value;
                HookHandler.HookGetFirstPressedAnalog();
            }
            remove => HookHandler._afterGetFirstPressedAnalog -= value;
        }

        public static event Delegates.GetFirstPressedButton_NormalArgs GetFirstPressedButton
        {
            add
            {
                HookHandler._afterGetFirstPressedButton += value;
                HookHandler.HookGetFirstPressedButton();
            }
            remove => HookHandler._afterGetFirstPressedButton -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Name_NormalArgs get_Name
        {
            add => HookEndpointManager.Add<Delegates.get_Name_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Name"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Name_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Name"), value);
        }

        public static event Delegates.set_Name_NormalArgs set_Name
        {
            add => HookEndpointManager.Add<Delegates.set_Name_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_Name"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Name_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_Name"), value);
        }

        public static event Delegates.get_Meta_NormalArgs get_Meta
        {
            add => HookEndpointManager.Add<Delegates.get_Meta_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Meta"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Meta_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Meta"), value);
        }

        public static event Delegates.set_Meta_NormalArgs set_Meta
        {
            add => HookEndpointManager.Add<Delegates.set_Meta_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_Meta"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Meta_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_Meta"), value);
        }

        public static event Delegates.get_SortOrder_NormalArgs get_SortOrder
        {
            add => HookEndpointManager.Add<Delegates.get_SortOrder_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_SortOrder"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SortOrder_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_SortOrder"), value);
        }

        public static event Delegates.set_SortOrder_NormalArgs set_SortOrder
        {
            add => HookEndpointManager.Add<Delegates.set_SortOrder_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_SortOrder"), value);
            remove => HookEndpointManager.Remove<Delegates.set_SortOrder_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_SortOrder"), value);
        }

        public static event Delegates.get_DeviceClass_NormalArgs get_DeviceClass
        {
            add => HookEndpointManager.Add<Delegates.get_DeviceClass_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DeviceClass"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DeviceClass_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DeviceClass"), value);
        }

        public static event Delegates.set_DeviceClass_NormalArgs set_DeviceClass
        {
            add => HookEndpointManager.Add<Delegates.set_DeviceClass_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_DeviceClass"), value);
            remove => HookEndpointManager.Remove<Delegates.set_DeviceClass_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_DeviceClass"), value);
        }

        public static event Delegates.get_DeviceStyle_NormalArgs get_DeviceStyle
        {
            add => HookEndpointManager.Add<Delegates.get_DeviceStyle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DeviceStyle"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DeviceStyle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DeviceStyle"), value);
        }

        public static event Delegates.set_DeviceStyle_NormalArgs set_DeviceStyle
        {
            add => HookEndpointManager.Add<Delegates.set_DeviceStyle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_DeviceStyle"), value);
            remove => HookEndpointManager.Remove<Delegates.set_DeviceStyle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_DeviceStyle"), value);
        }

        public static event Delegates.get_GUID_NormalArgs get_GUID
        {
            add => HookEndpointManager.Add<Delegates.get_GUID_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_GUID"), value);
            remove => HookEndpointManager.Remove<Delegates.get_GUID_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_GUID"), value);
        }

        public static event Delegates.set_GUID_NormalArgs set_GUID
        {
            add => HookEndpointManager.Add<Delegates.set_GUID_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_GUID"), value);
            remove => HookEndpointManager.Remove<Delegates.set_GUID_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_GUID"), value);
        }

        public static event Delegates.get_LastInputTick_NormalArgs get_LastInputTick
        {
            add => HookEndpointManager.Add<Delegates.get_LastInputTick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LastInputTick"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LastInputTick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LastInputTick"), value);
        }

        public static event Delegates.set_LastInputTick_NormalArgs set_LastInputTick
        {
            add => HookEndpointManager.Add<Delegates.set_LastInputTick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_LastInputTick"), value);
            remove => HookEndpointManager.Remove<Delegates.set_LastInputTick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_LastInputTick"), value);
        }

        public static event Delegates.get_IsActive_NormalArgs get_IsActive
        {
            add => HookEndpointManager.Add<Delegates.get_IsActive_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_IsActive"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsActive_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_IsActive"), value);
        }

        public static event Delegates.set_IsActive_NormalArgs set_IsActive
        {
            add => HookEndpointManager.Add<Delegates.set_IsActive_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_IsActive"), value);
            remove => HookEndpointManager.Remove<Delegates.set_IsActive_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_IsActive"), value);
        }

        public static event Delegates.get_IsAttached_NormalArgs get_IsAttached
        {
            add => HookEndpointManager.Add<Delegates.get_IsAttached_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_IsAttached"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsAttached_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_IsAttached"), value);
        }

        public static event Delegates.set_IsAttached_NormalArgs set_IsAttached
        {
            add => HookEndpointManager.Add<Delegates.set_IsAttached_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_IsAttached"), value);
            remove => HookEndpointManager.Remove<Delegates.set_IsAttached_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_IsAttached"), value);
        }

        public static event Delegates.get_RawSticks_NormalArgs get_RawSticks
        {
            add => HookEndpointManager.Add<Delegates.get_RawSticks_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RawSticks"), value);
            remove => HookEndpointManager.Remove<Delegates.get_RawSticks_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RawSticks"), value);
        }

        public static event Delegates.set_RawSticks_NormalArgs set_RawSticks
        {
            add => HookEndpointManager.Add<Delegates.set_RawSticks_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_RawSticks"), value);
            remove => HookEndpointManager.Remove<Delegates.set_RawSticks_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_RawSticks"), value);
        }

        public static event Delegates.get_Controls_NormalArgs get_Controls
        {
            add => HookEndpointManager.Add<Delegates.get_Controls_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Controls"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Controls_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Controls"), value);
        }

        public static event Delegates.set_Controls_NormalArgs set_Controls
        {
            add => HookEndpointManager.Add<Delegates.set_Controls_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_Controls"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Controls_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_Controls"), value);
        }

        public static event Delegates.get_ControlsByTarget_NormalArgs get_ControlsByTarget
        {
            add => HookEndpointManager.Add<Delegates.get_ControlsByTarget_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_ControlsByTarget"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ControlsByTarget_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_ControlsByTarget"), value);
        }

        public static event Delegates.set_ControlsByTarget_NormalArgs set_ControlsByTarget
        {
            add => HookEndpointManager.Add<Delegates.set_ControlsByTarget_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_ControlsByTarget"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ControlsByTarget_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_ControlsByTarget"), value);
        }

        public static event Delegates.get_LeftStick_NormalArgs get_LeftStick
        {
            add => HookEndpointManager.Add<Delegates.get_LeftStick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStick"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LeftStick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStick"), value);
        }

        public static event Delegates.set_LeftStick_NormalArgs set_LeftStick
        {
            add => HookEndpointManager.Add<Delegates.set_LeftStick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_LeftStick"), value);
            remove => HookEndpointManager.Remove<Delegates.set_LeftStick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_LeftStick"), value);
        }

        public static event Delegates.get_RightStick_NormalArgs get_RightStick
        {
            add => HookEndpointManager.Add<Delegates.get_RightStick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStick"), value);
            remove => HookEndpointManager.Remove<Delegates.get_RightStick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStick"), value);
        }

        public static event Delegates.set_RightStick_NormalArgs set_RightStick
        {
            add => HookEndpointManager.Add<Delegates.set_RightStick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_RightStick"), value);
            remove => HookEndpointManager.Remove<Delegates.set_RightStick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_RightStick"), value);
        }

        public static event Delegates.get_DPad_NormalArgs get_DPad
        {
            add => HookEndpointManager.Add<Delegates.get_DPad_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DPad"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DPad_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DPad"), value);
        }

        public static event Delegates.set_DPad_NormalArgs set_DPad
        {
            add => HookEndpointManager.Add<Delegates.set_DPad_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_DPad"), value);
            remove => HookEndpointManager.Remove<Delegates.set_DPad_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_DPad"), value);
        }

        public static event Delegates.get_LeftCommandControl_NormalArgs get_LeftCommandControl
        {
            add => HookEndpointManager.Add<Delegates.get_LeftCommandControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftCommandControl"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LeftCommandControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftCommandControl"), value);
        }

        public static event Delegates.set_LeftCommandControl_NormalArgs set_LeftCommandControl
        {
            add => HookEndpointManager.Add<Delegates.set_LeftCommandControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_LeftCommandControl"), value);
            remove => HookEndpointManager.Remove<Delegates.set_LeftCommandControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_LeftCommandControl"), value);
        }

        public static event Delegates.get_RightCommandControl_NormalArgs get_RightCommandControl
        {
            add => HookEndpointManager.Add<Delegates.get_RightCommandControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightCommandControl"), value);
            remove => HookEndpointManager.Remove<Delegates.get_RightCommandControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightCommandControl"), value);
        }

        public static event Delegates.set_RightCommandControl_NormalArgs set_RightCommandControl
        {
            add => HookEndpointManager.Add<Delegates.set_RightCommandControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_RightCommandControl"), value);
            remove => HookEndpointManager.Remove<Delegates.set_RightCommandControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "set_RightCommandControl"), value);
        }

        public static event Delegates.OnAttached_NormalArgs OnAttached
        {
            add => HookEndpointManager.Add<Delegates.OnAttached_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "OnAttached"), value);
            remove => HookEndpointManager.Remove<Delegates.OnAttached_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "OnAttached"), value);
        }

        public static event Delegates.OnDetached_NormalArgs OnDetached
        {
            add => HookEndpointManager.Add<Delegates.OnDetached_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "OnDetached"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDetached_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "OnDetached"), value);
        }

        public static event Delegates.AddAliasControls_NormalArgs AddAliasControls
        {
            add => HookEndpointManager.Add<Delegates.AddAliasControls_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "AddAliasControls"), value);
            remove => HookEndpointManager.Remove<Delegates.AddAliasControls_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "AddAliasControls"), value);
        }

        public static event Delegates.RemoveAliasControls_NormalArgs RemoveAliasControls
        {
            add => HookEndpointManager.Add<Delegates.RemoveAliasControls_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "RemoveAliasControls"), value);
            remove => HookEndpointManager.Remove<Delegates.RemoveAliasControls_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "RemoveAliasControls"), value);
        }

        public static event Delegates.ClearControls_NormalArgs ClearControls
        {
            add => HookEndpointManager.Add<Delegates.ClearControls_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ClearControls"), value);
            remove => HookEndpointManager.Remove<Delegates.ClearControls_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ClearControls"), value);
        }

        public static event Delegates.HasControl_NormalArgs HasControl
        {
            add => HookEndpointManager.Add<Delegates.HasControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "HasControl"), value);
            remove => HookEndpointManager.Remove<Delegates.HasControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "HasControl"), value);
        }

        public static event Delegates.GetControl_NormalArgs GetControl
        {
            add => HookEndpointManager.Add<Delegates.GetControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "GetControl"), value);
            remove => HookEndpointManager.Remove<Delegates.GetControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "GetControl"), value);
        }

        public static event Delegates.get_Item_NormalArgs get_Item
        {
            add => HookEndpointManager.Add<Delegates.get_Item_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Item"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Item_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Item"), value);
        }

        public static event Delegates.GetInputControlTypeByName_NormalArgs GetInputControlTypeByName
        {
            add => HookEndpointManager.Add<Delegates.GetInputControlTypeByName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "GetInputControlTypeByName", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetInputControlTypeByName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "GetInputControlTypeByName", false), value);
        }

        public static event Delegates.GetControlByName_NormalArgs GetControlByName
        {
            add => HookEndpointManager.Add<Delegates.GetControlByName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "GetControlByName"), value);
            remove => HookEndpointManager.Remove<Delegates.GetControlByName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "GetControlByName"), value);
        }

        public static event Delegates.AddControl_InputControlType_string_NormalArgs AddControl_InputControlType_string
        {
            add => HookEndpointManager.Add<Delegates.AddControl_InputControlType_string_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "AddControl"), value);
            remove => HookEndpointManager.Remove<Delegates.AddControl_InputControlType_string_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "AddControl"), value);
        }

        public static event Delegates.AddControl_InputControlType_string_float_float_NormalArgs
            AddControl_InputControlType_string_float_float
            {
                add => HookEndpointManager.Add<Delegates.AddControl_InputControlType_string_float_float_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(InputDevice), "AddControl"), value);
                remove => HookEndpointManager
                    .Remove<Delegates.AddControl_InputControlType_string_float_float_NormalArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(InputDevice), "AddControl"), value);
            }

        public static event Delegates.RemoveControl_NormalArgs RemoveControl
        {
            add => HookEndpointManager.Add<Delegates.RemoveControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "RemoveControl"), value);
            remove => HookEndpointManager.Remove<Delegates.RemoveControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "RemoveControl"), value);
        }

        public static event Delegates.ClearInputState_NormalArgs ClearInputState
        {
            add => HookEndpointManager.Add<Delegates.ClearInputState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ClearInputState"), value);
            remove => HookEndpointManager.Remove<Delegates.ClearInputState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ClearInputState"), value);
        }

        public static event Delegates.UpdateWithState_NormalArgs UpdateWithState
        {
            add => HookEndpointManager.Add<Delegates.UpdateWithState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "UpdateWithState"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateWithState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "UpdateWithState"), value);
        }

        public static event Delegates.UpdateWithValue_NormalArgs UpdateWithValue
        {
            add => HookEndpointManager.Add<Delegates.UpdateWithValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "UpdateWithValue"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateWithValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "UpdateWithValue"), value);
        }

        public static event Delegates.UpdateLeftStickWithValue_NormalArgs UpdateLeftStickWithValue
        {
            add => HookEndpointManager.Add<Delegates.UpdateLeftStickWithValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "UpdateLeftStickWithValue"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateLeftStickWithValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "UpdateLeftStickWithValue"), value);
        }

        public static event Delegates.UpdateLeftStickWithRawValue_NormalArgs UpdateLeftStickWithRawValue
        {
            add => HookEndpointManager.Add<Delegates.UpdateLeftStickWithRawValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "UpdateLeftStickWithRawValue"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateLeftStickWithRawValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "UpdateLeftStickWithRawValue"), value);
        }

        public static event Delegates.CommitLeftStick_NormalArgs CommitLeftStick
        {
            add => HookEndpointManager.Add<Delegates.CommitLeftStick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "CommitLeftStick"), value);
            remove => HookEndpointManager.Remove<Delegates.CommitLeftStick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "CommitLeftStick"), value);
        }

        public static event Delegates.UpdateRightStickWithValue_NormalArgs UpdateRightStickWithValue
        {
            add => HookEndpointManager.Add<Delegates.UpdateRightStickWithValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "UpdateRightStickWithValue"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateRightStickWithValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "UpdateRightStickWithValue"), value);
        }

        public static event Delegates.UpdateRightStickWithRawValue_NormalArgs UpdateRightStickWithRawValue
        {
            add => HookEndpointManager.Add<Delegates.UpdateRightStickWithRawValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "UpdateRightStickWithRawValue"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateRightStickWithRawValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "UpdateRightStickWithRawValue"), value);
        }

        public static event Delegates.CommitRightStick_NormalArgs CommitRightStick
        {
            add => HookEndpointManager.Add<Delegates.CommitRightStick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "CommitRightStick"), value);
            remove => HookEndpointManager.Remove<Delegates.CommitRightStick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "CommitRightStick"), value);
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add => HookEndpointManager.Add<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "Update"), value);
            remove => HookEndpointManager.Remove<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "Update"), value);
        }

        public static event Delegates.ProcessLeftStick_NormalArgs ProcessLeftStick
        {
            add => HookEndpointManager.Add<Delegates.ProcessLeftStick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ProcessLeftStick"), value);
            remove => HookEndpointManager.Remove<Delegates.ProcessLeftStick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ProcessLeftStick"), value);
        }

        public static event Delegates.ProcessRightStick_NormalArgs ProcessRightStick
        {
            add => HookEndpointManager.Add<Delegates.ProcessRightStick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ProcessRightStick"), value);
            remove => HookEndpointManager.Remove<Delegates.ProcessRightStick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ProcessRightStick"), value);
        }

        public static event Delegates.ProcessDPad_NormalArgs ProcessDPad
        {
            add => HookEndpointManager.Add<Delegates.ProcessDPad_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ProcessDPad"), value);
            remove => HookEndpointManager.Remove<Delegates.ProcessDPad_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ProcessDPad"), value);
        }

        public static event Delegates.Commit_NormalArgs Commit
        {
            add => HookEndpointManager.Add<Delegates.Commit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "Commit"), value);
            remove => HookEndpointManager.Remove<Delegates.Commit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "Commit"), value);
        }

        public static event Delegates.LastInputAfter_NormalArgs LastInputAfter
        {
            add => HookEndpointManager.Add<Delegates.LastInputAfter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "LastInputAfter"), value);
            remove => HookEndpointManager.Remove<Delegates.LastInputAfter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "LastInputAfter"), value);
        }

        public static event Delegates.RequestActivation_NormalArgs RequestActivation
        {
            add => HookEndpointManager.Add<Delegates.RequestActivation_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "RequestActivation"), value);
            remove => HookEndpointManager.Remove<Delegates.RequestActivation_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "RequestActivation"), value);
        }

        public static event Delegates.Vibrate_float_float_NormalArgs Vibrate_float_float
        {
            add => HookEndpointManager.Add<Delegates.Vibrate_float_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "Vibrate"), value);
            remove => HookEndpointManager.Remove<Delegates.Vibrate_float_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "Vibrate"), value);
        }

        public static event Delegates.Vibrate_float_NormalArgs Vibrate_float
        {
            add => HookEndpointManager.Add<Delegates.Vibrate_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "Vibrate"), value);
            remove => HookEndpointManager.Remove<Delegates.Vibrate_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "Vibrate"), value);
        }

        public static event Delegates.StopVibration_NormalArgs StopVibration
        {
            add => HookEndpointManager.Add<Delegates.StopVibration_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "StopVibration"), value);
            remove => HookEndpointManager.Remove<Delegates.StopVibration_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "StopVibration"), value);
        }

        public static event Delegates.SetLightColor_float_float_float_NormalArgs SetLightColor_float_float_float
        {
            add => HookEndpointManager.Add<Delegates.SetLightColor_float_float_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "SetLightColor"), value);
            remove => HookEndpointManager.Remove<Delegates.SetLightColor_float_float_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "SetLightColor"), value);
        }

        public static event Delegates.SetLightColor_Color_NormalArgs SetLightColor_Color
        {
            add => HookEndpointManager.Add<Delegates.SetLightColor_Color_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "SetLightColor"), value);
            remove => HookEndpointManager.Remove<Delegates.SetLightColor_Color_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "SetLightColor"), value);
        }

        public static event Delegates.SetLightFlash_NormalArgs SetLightFlash
        {
            add => HookEndpointManager.Add<Delegates.SetLightFlash_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "SetLightFlash"), value);
            remove => HookEndpointManager.Remove<Delegates.SetLightFlash_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "SetLightFlash"), value);
        }

        public static event Delegates.StopLightFlash_NormalArgs StopLightFlash
        {
            add => HookEndpointManager.Add<Delegates.StopLightFlash_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "StopLightFlash"), value);
            remove => HookEndpointManager.Remove<Delegates.StopLightFlash_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "StopLightFlash"), value);
        }

        public static event Delegates.get_IsSupportedOnThisPlatform_NormalArgs get_IsSupportedOnThisPlatform
        {
            add => HookEndpointManager.Add<Delegates.get_IsSupportedOnThisPlatform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_IsSupportedOnThisPlatform"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsSupportedOnThisPlatform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_IsSupportedOnThisPlatform"), value);
        }

        public static event Delegates.get_IsKnown_NormalArgs get_IsKnown
        {
            add => HookEndpointManager.Add<Delegates.get_IsKnown_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_IsKnown"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsKnown_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_IsKnown"), value);
        }

        public static event Delegates.get_IsUnknown_NormalArgs get_IsUnknown
        {
            add => HookEndpointManager.Add<Delegates.get_IsUnknown_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_IsUnknown"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsUnknown_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_IsUnknown"), value);
        }

        public static event Delegates.get_MenuIsPressed_NormalArgs get_MenuIsPressed
        {
            add => HookEndpointManager.Add<Delegates.get_MenuIsPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_MenuIsPressed"), value);
            remove => HookEndpointManager.Remove<Delegates.get_MenuIsPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_MenuIsPressed"), value);
        }

        public static event Delegates.get_MenuWasPressed_NormalArgs get_MenuWasPressed
        {
            add => HookEndpointManager.Add<Delegates.get_MenuWasPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_MenuWasPressed"), value);
            remove => HookEndpointManager.Remove<Delegates.get_MenuWasPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_MenuWasPressed"), value);
        }

        public static event Delegates.get_MenuWasReleased_NormalArgs get_MenuWasReleased
        {
            add => HookEndpointManager.Add<Delegates.get_MenuWasReleased_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_MenuWasReleased"), value);
            remove => HookEndpointManager.Remove<Delegates.get_MenuWasReleased_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_MenuWasReleased"), value);
        }

        public static event Delegates.get_CommandIsPressed_NormalArgs get_CommandIsPressed
        {
            add => HookEndpointManager.Add<Delegates.get_CommandIsPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_CommandIsPressed"), value);
            remove => HookEndpointManager.Remove<Delegates.get_CommandIsPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_CommandIsPressed"), value);
        }

        public static event Delegates.get_CommandWasPressed_NormalArgs get_CommandWasPressed
        {
            add => HookEndpointManager.Add<Delegates.get_CommandWasPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_CommandWasPressed"), value);
            remove => HookEndpointManager.Remove<Delegates.get_CommandWasPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_CommandWasPressed"), value);
        }

        public static event Delegates.get_CommandWasReleased_NormalArgs get_CommandWasReleased
        {
            add => HookEndpointManager.Add<Delegates.get_CommandWasReleased_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_CommandWasReleased"), value);
            remove => HookEndpointManager.Remove<Delegates.get_CommandWasReleased_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_CommandWasReleased"), value);
        }

        public static event Delegates.get_AnyButton_NormalArgs get_AnyButton
        {
            add => HookEndpointManager.Add<Delegates.get_AnyButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_AnyButton"), value);
            remove => HookEndpointManager.Remove<Delegates.get_AnyButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_AnyButton"), value);
        }

        public static event Delegates.get_AnyButtonIsPressed_NormalArgs get_AnyButtonIsPressed
        {
            add => HookEndpointManager.Add<Delegates.get_AnyButtonIsPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_AnyButtonIsPressed"), value);
            remove => HookEndpointManager.Remove<Delegates.get_AnyButtonIsPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_AnyButtonIsPressed"), value);
        }

        public static event Delegates.get_AnyButtonWasPressed_NormalArgs get_AnyButtonWasPressed
        {
            add => HookEndpointManager.Add<Delegates.get_AnyButtonWasPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_AnyButtonWasPressed"), value);
            remove => HookEndpointManager.Remove<Delegates.get_AnyButtonWasPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_AnyButtonWasPressed"), value);
        }

        public static event Delegates.get_AnyButtonWasReleased_NormalArgs get_AnyButtonWasReleased
        {
            add => HookEndpointManager.Add<Delegates.get_AnyButtonWasReleased_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_AnyButtonWasReleased"), value);
            remove => HookEndpointManager.Remove<Delegates.get_AnyButtonWasReleased_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_AnyButtonWasReleased"), value);
        }

        public static event Delegates.get_Direction_NormalArgs get_Direction
        {
            add => HookEndpointManager.Add<Delegates.get_Direction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Direction"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Direction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Direction"), value);
        }

        public static event Delegates.get_LeftStickUp_NormalArgs get_LeftStickUp
        {
            add => HookEndpointManager.Add<Delegates.get_LeftStickUp_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStickUp"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LeftStickUp_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStickUp"), value);
        }

        public static event Delegates.get_LeftStickDown_NormalArgs get_LeftStickDown
        {
            add => HookEndpointManager.Add<Delegates.get_LeftStickDown_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStickDown"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LeftStickDown_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStickDown"), value);
        }

        public static event Delegates.get_LeftStickLeft_NormalArgs get_LeftStickLeft
        {
            add => HookEndpointManager.Add<Delegates.get_LeftStickLeft_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStickLeft"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LeftStickLeft_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStickLeft"), value);
        }

        public static event Delegates.get_LeftStickRight_NormalArgs get_LeftStickRight
        {
            add => HookEndpointManager.Add<Delegates.get_LeftStickRight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStickRight"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LeftStickRight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStickRight"), value);
        }

        public static event Delegates.get_RightStickUp_NormalArgs get_RightStickUp
        {
            add => HookEndpointManager.Add<Delegates.get_RightStickUp_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStickUp"), value);
            remove => HookEndpointManager.Remove<Delegates.get_RightStickUp_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStickUp"), value);
        }

        public static event Delegates.get_RightStickDown_NormalArgs get_RightStickDown
        {
            add => HookEndpointManager.Add<Delegates.get_RightStickDown_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStickDown"), value);
            remove => HookEndpointManager.Remove<Delegates.get_RightStickDown_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStickDown"), value);
        }

        public static event Delegates.get_RightStickLeft_NormalArgs get_RightStickLeft
        {
            add => HookEndpointManager.Add<Delegates.get_RightStickLeft_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStickLeft"), value);
            remove => HookEndpointManager.Remove<Delegates.get_RightStickLeft_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStickLeft"), value);
        }

        public static event Delegates.get_RightStickRight_NormalArgs get_RightStickRight
        {
            add => HookEndpointManager.Add<Delegates.get_RightStickRight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStickRight"), value);
            remove => HookEndpointManager.Remove<Delegates.get_RightStickRight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStickRight"), value);
        }

        public static event Delegates.get_DPadUp_NormalArgs get_DPadUp
        {
            add => HookEndpointManager.Add<Delegates.get_DPadUp_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DPadUp"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DPadUp_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DPadUp"), value);
        }

        public static event Delegates.get_DPadDown_NormalArgs get_DPadDown
        {
            add => HookEndpointManager.Add<Delegates.get_DPadDown_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DPadDown"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DPadDown_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DPadDown"), value);
        }

        public static event Delegates.get_DPadLeft_NormalArgs get_DPadLeft
        {
            add => HookEndpointManager.Add<Delegates.get_DPadLeft_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DPadLeft"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DPadLeft_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DPadLeft"), value);
        }

        public static event Delegates.get_DPadRight_NormalArgs get_DPadRight
        {
            add => HookEndpointManager.Add<Delegates.get_DPadRight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DPadRight"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DPadRight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DPadRight"), value);
        }

        public static event Delegates.get_Action1_NormalArgs get_Action1
        {
            add => HookEndpointManager.Add<Delegates.get_Action1_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Action1"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Action1_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Action1"), value);
        }

        public static event Delegates.get_Action2_NormalArgs get_Action2
        {
            add => HookEndpointManager.Add<Delegates.get_Action2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Action2"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Action2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Action2"), value);
        }

        public static event Delegates.get_Action3_NormalArgs get_Action3
        {
            add => HookEndpointManager.Add<Delegates.get_Action3_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Action3"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Action3_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Action3"), value);
        }

        public static event Delegates.get_Action4_NormalArgs get_Action4
        {
            add => HookEndpointManager.Add<Delegates.get_Action4_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Action4"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Action4_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Action4"), value);
        }

        public static event Delegates.get_LeftTrigger_NormalArgs get_LeftTrigger
        {
            add => HookEndpointManager.Add<Delegates.get_LeftTrigger_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftTrigger"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LeftTrigger_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftTrigger"), value);
        }

        public static event Delegates.get_RightTrigger_NormalArgs get_RightTrigger
        {
            add => HookEndpointManager.Add<Delegates.get_RightTrigger_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightTrigger"), value);
            remove => HookEndpointManager.Remove<Delegates.get_RightTrigger_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightTrigger"), value);
        }

        public static event Delegates.get_LeftBumper_NormalArgs get_LeftBumper
        {
            add => HookEndpointManager.Add<Delegates.get_LeftBumper_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftBumper"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LeftBumper_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftBumper"), value);
        }

        public static event Delegates.get_RightBumper_NormalArgs get_RightBumper
        {
            add => HookEndpointManager.Add<Delegates.get_RightBumper_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightBumper"), value);
            remove => HookEndpointManager.Remove<Delegates.get_RightBumper_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightBumper"), value);
        }

        public static event Delegates.get_LeftStickButton_NormalArgs get_LeftStickButton
        {
            add => HookEndpointManager.Add<Delegates.get_LeftStickButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStickButton"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LeftStickButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStickButton"), value);
        }

        public static event Delegates.get_RightStickButton_NormalArgs get_RightStickButton
        {
            add => HookEndpointManager.Add<Delegates.get_RightStickButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStickButton"), value);
            remove => HookEndpointManager.Remove<Delegates.get_RightStickButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStickButton"), value);
        }

        public static event Delegates.get_LeftStickX_NormalArgs get_LeftStickX
        {
            add => HookEndpointManager.Add<Delegates.get_LeftStickX_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStickX"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LeftStickX_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStickX"), value);
        }

        public static event Delegates.get_LeftStickY_NormalArgs get_LeftStickY
        {
            add => HookEndpointManager.Add<Delegates.get_LeftStickY_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStickY"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LeftStickY_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftStickY"), value);
        }

        public static event Delegates.get_RightStickX_NormalArgs get_RightStickX
        {
            add => HookEndpointManager.Add<Delegates.get_RightStickX_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStickX"), value);
            remove => HookEndpointManager.Remove<Delegates.get_RightStickX_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStickX"), value);
        }

        public static event Delegates.get_RightStickY_NormalArgs get_RightStickY
        {
            add => HookEndpointManager.Add<Delegates.get_RightStickY_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStickY"), value);
            remove => HookEndpointManager.Remove<Delegates.get_RightStickY_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightStickY"), value);
        }

        public static event Delegates.get_DPadX_NormalArgs get_DPadX
        {
            add => HookEndpointManager.Add<Delegates.get_DPadX_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DPadX"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DPadX_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DPadX"), value);
        }

        public static event Delegates.get_DPadY_NormalArgs get_DPadY
        {
            add => HookEndpointManager.Add<Delegates.get_DPadY_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DPadY"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DPadY_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_DPadY"), value);
        }

        public static event Delegates.get_Command_NormalArgs get_Command
        {
            add => HookEndpointManager.Add<Delegates.get_Command_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Command"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Command_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_Command"), value);
        }

        public static event Delegates.get_LeftCommand_NormalArgs get_LeftCommand
        {
            add => HookEndpointManager.Add<Delegates.get_LeftCommand_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftCommand"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LeftCommand_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_LeftCommand"), value);
        }

        public static event Delegates.get_RightCommand_NormalArgs get_RightCommand
        {
            add => HookEndpointManager.Add<Delegates.get_RightCommand_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightCommand"), value);
            remove => HookEndpointManager.Remove<Delegates.get_RightCommand_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_RightCommand"), value);
        }

        public static event Delegates.ExpireControlCache_NormalArgs ExpireControlCache
        {
            add => HookEndpointManager.Add<Delegates.ExpireControlCache_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ExpireControlCache"), value);
            remove => HookEndpointManager.Remove<Delegates.ExpireControlCache_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ExpireControlCache"), value);
        }

        public static event Delegates.get_NumUnknownAnalogs_NormalArgs get_NumUnknownAnalogs
        {
            add => HookEndpointManager.Add<Delegates.get_NumUnknownAnalogs_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_NumUnknownAnalogs"), value);
            remove => HookEndpointManager.Remove<Delegates.get_NumUnknownAnalogs_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_NumUnknownAnalogs"), value);
        }

        public static event Delegates.get_NumUnknownButtons_NormalArgs get_NumUnknownButtons
        {
            add => HookEndpointManager.Add<Delegates.get_NumUnknownButtons_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_NumUnknownButtons"), value);
            remove => HookEndpointManager.Remove<Delegates.get_NumUnknownButtons_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "get_NumUnknownButtons"), value);
        }

        public static event Delegates.ReadRawButtonState_NormalArgs ReadRawButtonState
        {
            add => HookEndpointManager.Add<Delegates.ReadRawButtonState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ReadRawButtonState"), value);
            remove => HookEndpointManager.Remove<Delegates.ReadRawButtonState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ReadRawButtonState"), value);
        }

        public static event Delegates.ReadRawAnalogValue_NormalArgs ReadRawAnalogValue
        {
            add => HookEndpointManager.Add<Delegates.ReadRawAnalogValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ReadRawAnalogValue"), value);
            remove => HookEndpointManager.Remove<Delegates.ReadRawAnalogValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "ReadRawAnalogValue"), value);
        }

        public static event Delegates.TakeSnapshot_NormalArgs TakeSnapshot
        {
            add => HookEndpointManager.Add<Delegates.TakeSnapshot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "TakeSnapshot"), value);
            remove => HookEndpointManager.Remove<Delegates.TakeSnapshot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "TakeSnapshot"), value);
        }

        public static event Delegates.GetFirstPressedAnalog_NormalArgs GetFirstPressedAnalog
        {
            add => HookEndpointManager.Add<Delegates.GetFirstPressedAnalog_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "GetFirstPressedAnalog"), value);
            remove => HookEndpointManager.Remove<Delegates.GetFirstPressedAnalog_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "GetFirstPressedAnalog"), value);
        }

        public static event Delegates.GetFirstPressedButton_NormalArgs GetFirstPressedButton
        {
            add => HookEndpointManager.Add<Delegates.GetFirstPressedButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "GetFirstPressedButton"), value);
            remove => HookEndpointManager.Remove<Delegates.GetFirstPressedButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputDevice), "GetFirstPressedButton"), value);
        }
    }
}