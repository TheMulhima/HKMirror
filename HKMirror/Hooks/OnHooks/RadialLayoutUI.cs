namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for RadialLayoutUI class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnRadialLayoutUI
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.RadialLayoutUI.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.RadialLayoutUI.orig_Update orig, RadialLayoutUI self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookOnTransformChildrenChanged()
        {
            if (!HookedList.Contains("OnTransformChildrenChanged"))
            {
                HookedList.Add("OnTransformChildrenChanged");
                On.RadialLayoutUI.OnTransformChildrenChanged += OnTransformChildrenChanged;
            }
        }

        internal static event Delegates.OnTransformChildrenChanged_BeforeArgs _beforeOnTransformChildrenChanged;
        internal static event Delegates.OnTransformChildrenChanged_NormalArgs _afterOnTransformChildrenChanged;

        private static void OnTransformChildrenChanged(On.RadialLayoutUI.orig_OnTransformChildrenChanged orig,
            RadialLayoutUI self)
        {
            Delegates.Params_OnTransformChildrenChanged @params = new()
            {
                self = self
            };
            _beforeOnTransformChildrenChanged?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnTransformChildrenChanged != null) _afterOnTransformChildrenChanged.Invoke(@params);
        }

        internal static void HookHasValueChanged()
        {
            if (!HookedList.Contains("HasValueChanged"))
            {
                HookedList.Add("HasValueChanged");
                On.RadialLayoutUI.HasValueChanged += HasValueChanged;
            }
        }

        internal static event Delegates.HasValueChanged_BeforeArgs _beforeHasValueChanged;
        internal static event Delegates.HasValueChanged_NormalArgs _afterHasValueChanged;

        private static bool HasValueChanged(On.RadialLayoutUI.orig_HasValueChanged orig, RadialLayoutUI self)
        {
            Delegates.Params_HasValueChanged @params = new()
            {
                self = self
            };
            _beforeHasValueChanged?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterHasValueChanged != null) retVal = _afterHasValueChanged.Invoke(@params);
            return retVal;
        }

        internal static void HookUpdateUI()
        {
            if (!HookedList.Contains("UpdateUI"))
            {
                HookedList.Add("UpdateUI");
                On.RadialLayoutUI.UpdateUI += UpdateUI;
            }
        }

        internal static event Delegates.UpdateUI_BeforeArgs _beforeUpdateUI;
        internal static event Delegates.UpdateUI_NormalArgs _afterUpdateUI;

        private static void UpdateUI(On.RadialLayoutUI.orig_UpdateUI orig, RadialLayoutUI self)
        {
            Delegates.Params_UpdateUI @params = new()
            {
                self = self
            };
            _beforeUpdateUI?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateUI != null) _afterUpdateUI.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void HasValueChanged_BeforeArgs(Params_HasValueChanged args);

        public delegate bool HasValueChanged_NormalArgs(Params_HasValueChanged args);

        public delegate void OnTransformChildrenChanged_BeforeArgs(Params_OnTransformChildrenChanged args);

        public delegate void OnTransformChildrenChanged_NormalArgs(Params_OnTransformChildrenChanged args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public delegate void UpdateUI_BeforeArgs(Params_UpdateUI args);

        public delegate void UpdateUI_NormalArgs(Params_UpdateUI args);

        public sealed class Params_Update
        {
            public RadialLayoutUI self;
        }

        public sealed class Params_OnTransformChildrenChanged
        {
            public RadialLayoutUI self;
        }

        public sealed class Params_HasValueChanged
        {
            public RadialLayoutUI self;
        }

        public sealed class Params_UpdateUI
        {
            public RadialLayoutUI self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.OnTransformChildrenChanged_BeforeArgs OnTransformChildrenChanged
        {
            add
            {
                HookHandler._beforeOnTransformChildrenChanged += value;
                HookHandler.HookOnTransformChildrenChanged();
            }
            remove => HookHandler._beforeOnTransformChildrenChanged -= value;
        }

        public static event Delegates.HasValueChanged_BeforeArgs HasValueChanged
        {
            add
            {
                HookHandler._beforeHasValueChanged += value;
                HookHandler.HookHasValueChanged();
            }
            remove => HookHandler._beforeHasValueChanged -= value;
        }

        public static event Delegates.UpdateUI_BeforeArgs UpdateUI
        {
            add
            {
                HookHandler._beforeUpdateUI += value;
                HookHandler.HookUpdateUI();
            }
            remove => HookHandler._beforeUpdateUI -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.OnTransformChildrenChanged_NormalArgs OnTransformChildrenChanged
        {
            add
            {
                HookHandler._afterOnTransformChildrenChanged += value;
                HookHandler.HookOnTransformChildrenChanged();
            }
            remove => HookHandler._afterOnTransformChildrenChanged -= value;
        }

        public static event Delegates.HasValueChanged_NormalArgs HasValueChanged
        {
            add
            {
                HookHandler._afterHasValueChanged += value;
                HookHandler.HookHasValueChanged();
            }
            remove => HookHandler._afterHasValueChanged -= value;
        }

        public static event Delegates.UpdateUI_NormalArgs UpdateUI
        {
            add
            {
                HookHandler._afterUpdateUI += value;
                HookHandler.HookUpdateUI();
            }
            remove => HookHandler._afterUpdateUI -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.RadialLayoutUI.hook_Update Update
        {
            add => On.RadialLayoutUI.Update += value;
            remove => On.RadialLayoutUI.Update -= value;
        }

        public static event On.RadialLayoutUI.hook_OnTransformChildrenChanged OnTransformChildrenChanged
        {
            add => On.RadialLayoutUI.OnTransformChildrenChanged += value;
            remove => On.RadialLayoutUI.OnTransformChildrenChanged -= value;
        }

        public static event On.RadialLayoutUI.hook_HasValueChanged HasValueChanged
        {
            add => On.RadialLayoutUI.HasValueChanged += value;
            remove => On.RadialLayoutUI.HasValueChanged -= value;
        }

        public static event On.RadialLayoutUI.hook_UpdateUI UpdateUI
        {
            add => On.RadialLayoutUI.UpdateUI += value;
            remove => On.RadialLayoutUI.UpdateUI -= value;
        }
    }
}