using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for VinePlatform class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnVinePlatform
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.VinePlatform.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.VinePlatform.orig_Awake orig, VinePlatform self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
            {
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                {
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
            {
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                {
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.VinePlatform.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.VinePlatform.orig_Start orig, VinePlatform self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.VinePlatform.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.VinePlatform.orig_Update orig, VinePlatform self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
            {
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
            {
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookLand()
        {
            if (!HookedList.Contains("Land"))
            {
                HookedList.Add("Land");
                On.VinePlatform.Land += Land;
            }
        }

        internal static event Delegates.Land_BeforeArgs _beforeLand;
        internal static event Delegates.Land_AfterArgs _afterLand;

        private static void Land(On.VinePlatform.orig_Land orig, VinePlatform self)
        {
            Delegates.Params_Land @params = new()
            {
                self = self
            };
            if (_beforeLand != null)
            {
                foreach (Delegates.Land_BeforeArgs toInvoke in _beforeLand.GetInvocationList())
                {
                    try
                    {
                        _beforeLand?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterLand != null)
            {
                foreach (Delegates.Land_AfterArgs toInvoke in _afterLand.GetInvocationList())
                {
                    try
                    {
                        _afterLand.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnCollisionEnter2D()
        {
            if (!HookedList.Contains("OnCollisionEnter2D"))
            {
                HookedList.Add("OnCollisionEnter2D");
                On.VinePlatform.OnCollisionEnter2D += OnCollisionEnter2D;
            }
        }

        internal static event Delegates.OnCollisionEnter2D_BeforeArgs _beforeOnCollisionEnter2D;
        internal static event Delegates.OnCollisionEnter2D_AfterArgs _afterOnCollisionEnter2D;

        private static void OnCollisionEnter2D(On.VinePlatform.orig_OnCollisionEnter2D orig, VinePlatform self,
            UnityEngine.Collision2D collision)
        {
            Delegates.Params_OnCollisionEnter2D @params = new()
            {
                self = self, collision = collision
            };
            if (_beforeOnCollisionEnter2D != null)
            {
                foreach (Delegates.OnCollisionEnter2D_BeforeArgs toInvoke in
                         _beforeOnCollisionEnter2D.GetInvocationList())
                {
                    try
                    {
                        _beforeOnCollisionEnter2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnCollisionEnter2D != null)
            {
                foreach (Delegates.OnCollisionEnter2D_AfterArgs toInvoke in
                         _afterOnCollisionEnter2D.GetInvocationList())
                {
                    try
                    {
                        _afterOnCollisionEnter2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookPlaySound()
        {
            if (!HookedList.Contains("PlaySound"))
            {
                HookedList.Add("PlaySound");
                On.VinePlatform.PlaySound += PlaySound;
            }
        }

        internal static event Delegates.PlaySound_BeforeArgs _beforePlaySound;
        internal static event Delegates.PlaySound_AfterArgs _afterPlaySound;

        private static void PlaySound(On.VinePlatform.orig_PlaySound orig, VinePlatform self,
            UnityEngine.AudioClip clip)
        {
            Delegates.Params_PlaySound @params = new()
            {
                self = self, clip = clip
            };
            if (_beforePlaySound != null)
            {
                foreach (Delegates.PlaySound_BeforeArgs toInvoke in _beforePlaySound.GetInvocationList())
                {
                    try
                    {
                        _beforePlaySound?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            clip = @params.clip;
            orig(self, clip);
            if (_afterPlaySound != null)
            {
                foreach (Delegates.PlaySound_AfterArgs toInvoke in _afterPlaySound.GetInvocationList())
                {
                    try
                    {
                        _afterPlaySound.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookPlayerLand()
        {
            if (!HookedList.Contains("PlayerLand"))
            {
                HookedList.Add("PlayerLand");
                On.VinePlatform.PlayerLand += PlayerLand;
            }
        }

        internal static event Delegates.PlayerLand_BeforeArgs _beforePlayerLand;

        private static System.Collections.IEnumerator PlayerLand(On.VinePlatform.orig_PlayerLand orig,
            VinePlatform self)
        {
            Delegates.Params_PlayerLand @params = new()
            {
                self = self
            };
            if (_beforePlayerLand != null)
            {
                foreach (Delegates.PlayerLand_BeforeArgs toInvoke in _beforePlayerLand.GetInvocationList())
                {
                    try
                    {
                        _beforePlayerLand?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            return orig(self);
        }

        internal static void HookOnDrawGizmosSelected()
        {
            if (!HookedList.Contains("OnDrawGizmosSelected"))
            {
                HookedList.Add("OnDrawGizmosSelected");
                On.VinePlatform.OnDrawGizmosSelected += OnDrawGizmosSelected;
            }
        }

        internal static event Delegates.OnDrawGizmosSelected_BeforeArgs _beforeOnDrawGizmosSelected;
        internal static event Delegates.OnDrawGizmosSelected_AfterArgs _afterOnDrawGizmosSelected;

        private static void OnDrawGizmosSelected(On.VinePlatform.orig_OnDrawGizmosSelected orig, VinePlatform self)
        {
            Delegates.Params_OnDrawGizmosSelected @params = new()
            {
                self = self
            };
            if (_beforeOnDrawGizmosSelected != null)
            {
                foreach (Delegates.OnDrawGizmosSelected_BeforeArgs toInvoke in _beforeOnDrawGizmosSelected
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeOnDrawGizmosSelected?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnDrawGizmosSelected != null)
            {
                foreach (Delegates.OnDrawGizmosSelected_AfterArgs toInvoke in _afterOnDrawGizmosSelected
                             .GetInvocationList())
                {
                    try
                    {
                        _afterOnDrawGizmosSelected.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Awake
        {
            public VinePlatform self;
        }

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<VinePlatform> orig, VinePlatform self);

        public sealed class Params_Start
        {
            public VinePlatform self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<VinePlatform> orig, VinePlatform self);

        public sealed class Params_Update
        {
            public VinePlatform self;
        }

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<VinePlatform> orig, VinePlatform self);

        public sealed class Params_Land
        {
            public VinePlatform self;
        }

        public delegate void Land_BeforeArgs(Params_Land args);

        public delegate void Land_AfterArgs(Params_Land args);

        public delegate void Land_WithArgs(Action<VinePlatform> orig, VinePlatform self);

        public sealed class Params_OnCollisionEnter2D
        {
            public VinePlatform self;
            public UnityEngine.Collision2D collision;
        }

        public delegate void OnCollisionEnter2D_BeforeArgs(Params_OnCollisionEnter2D args);

        public delegate void OnCollisionEnter2D_AfterArgs(Params_OnCollisionEnter2D args);

        public delegate void OnCollisionEnter2D_WithArgs(Action<VinePlatform, UnityEngine.Collision2D> orig,
            VinePlatform self, UnityEngine.Collision2D collision);

        public sealed class Params_PlaySound
        {
            public VinePlatform self;
            public UnityEngine.AudioClip clip;
        }

        public delegate void PlaySound_BeforeArgs(Params_PlaySound args);

        public delegate void PlaySound_AfterArgs(Params_PlaySound args);

        public delegate void PlaySound_WithArgs(Action<VinePlatform, UnityEngine.AudioClip> orig, VinePlatform self,
            UnityEngine.AudioClip clip);

        public sealed class Params_PlayerLand
        {
            public VinePlatform self;
        }

        public delegate void PlayerLand_BeforeArgs(Params_PlayerLand args);

        public delegate System.Collections.IEnumerator PlayerLand_AfterArgs(Params_PlayerLand args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator PlayerLand_WithArgs(
            Func<VinePlatform, System.Collections.IEnumerator> orig, VinePlatform self);

        public sealed class Params_OnDrawGizmosSelected
        {
            public VinePlatform self;
        }

        public delegate void OnDrawGizmosSelected_BeforeArgs(Params_OnDrawGizmosSelected args);

        public delegate void OnDrawGizmosSelected_AfterArgs(Params_OnDrawGizmosSelected args);

        public delegate void OnDrawGizmosSelected_WithArgs(Action<VinePlatform> orig, VinePlatform self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.Land_BeforeArgs Land
        {
            add
            {
                HookHandler._beforeLand += value;
                HookHandler.HookLand();
            }
            remove => HookHandler._beforeLand -= value;
        }

        public static event Delegates.OnCollisionEnter2D_BeforeArgs OnCollisionEnter2D
        {
            add
            {
                HookHandler._beforeOnCollisionEnter2D += value;
                HookHandler.HookOnCollisionEnter2D();
            }
            remove => HookHandler._beforeOnCollisionEnter2D -= value;
        }

        public static event Delegates.PlaySound_BeforeArgs PlaySound
        {
            add
            {
                HookHandler._beforePlaySound += value;
                HookHandler.HookPlaySound();
            }
            remove => HookHandler._beforePlaySound -= value;
        }

        public static event Delegates.PlayerLand_BeforeArgs PlayerLand
        {
            add
            {
                HookHandler._beforePlayerLand += value;
                HookHandler.HookPlayerLand();
            }
            remove => HookHandler._beforePlayerLand -= value;
        }

        public static event Delegates.OnDrawGizmosSelected_BeforeArgs OnDrawGizmosSelected
        {
            add
            {
                HookHandler._beforeOnDrawGizmosSelected += value;
                HookHandler.HookOnDrawGizmosSelected();
            }
            remove => HookHandler._beforeOnDrawGizmosSelected -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.Land_AfterArgs Land
        {
            add
            {
                HookHandler._afterLand += value;
                HookHandler.HookLand();
            }
            remove => HookHandler._afterLand -= value;
        }

        public static event Delegates.OnCollisionEnter2D_AfterArgs OnCollisionEnter2D
        {
            add
            {
                HookHandler._afterOnCollisionEnter2D += value;
                HookHandler.HookOnCollisionEnter2D();
            }
            remove => HookHandler._afterOnCollisionEnter2D -= value;
        }

        public static event Delegates.PlaySound_AfterArgs PlaySound
        {
            add
            {
                HookHandler._afterPlaySound += value;
                HookHandler.HookPlaySound();
            }
            remove => HookHandler._afterPlaySound -= value;
        }

        public static event Delegates.OnDrawGizmosSelected_AfterArgs OnDrawGizmosSelected
        {
            add
            {
                HookHandler._afterOnDrawGizmosSelected += value;
                HookHandler.HookOnDrawGizmosSelected();
            }
            remove => HookHandler._afterOnDrawGizmosSelected -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.VinePlatform.hook_Awake Awake
        {
            add => On.VinePlatform.Awake += value;
            remove => On.VinePlatform.Awake -= value;
        }

        public static event On.VinePlatform.hook_Start Start
        {
            add => On.VinePlatform.Start += value;
            remove => On.VinePlatform.Start -= value;
        }

        public static event On.VinePlatform.hook_Update Update
        {
            add => On.VinePlatform.Update += value;
            remove => On.VinePlatform.Update -= value;
        }

        public static event On.VinePlatform.hook_Land Land
        {
            add => On.VinePlatform.Land += value;
            remove => On.VinePlatform.Land -= value;
        }

        public static event On.VinePlatform.hook_OnCollisionEnter2D OnCollisionEnter2D
        {
            add => On.VinePlatform.OnCollisionEnter2D += value;
            remove => On.VinePlatform.OnCollisionEnter2D -= value;
        }

        public static event On.VinePlatform.hook_PlaySound PlaySound
        {
            add => On.VinePlatform.PlaySound += value;
            remove => On.VinePlatform.PlaySound -= value;
        }

        public static event On.VinePlatform.hook_PlayerLand PlayerLand
        {
            add => On.VinePlatform.PlayerLand += value;
            remove => On.VinePlatform.PlayerLand -= value;
        }

        public static event On.VinePlatform.hook_OnDrawGizmosSelected OnDrawGizmosSelected
        {
            add => On.VinePlatform.OnDrawGizmosSelected += value;
            remove => On.VinePlatform.OnDrawGizmosSelected -= value;
        }
    }
}