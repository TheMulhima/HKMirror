using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for DebugDrawShape class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnDebugDrawShape
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(DebugDrawShape), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<DebugDrawShape> orig, DebugDrawShape self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookOnDrawActionGizmos()
        {
            if (!HookedList.Contains("OnDrawActionGizmos"))
            {
                HookedList.Add("OnDrawActionGizmos");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(DebugDrawShape), "OnDrawActionGizmos"),
                    OnDrawActionGizmos);
            }
        }

        internal static event Delegates.OnDrawActionGizmos_BeforeArgs _beforeOnDrawActionGizmos;
        internal static event Delegates.OnDrawActionGizmos_NormalArgs _afterOnDrawActionGizmos;

        private static void OnDrawActionGizmos(Action<DebugDrawShape> orig, DebugDrawShape self)
        {
            Delegates.Params_OnDrawActionGizmos @params = new()
            {
                self = self
            };
            _beforeOnDrawActionGizmos?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDrawActionGizmos != null) _afterOnDrawActionGizmos.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void OnDrawActionGizmos_BeforeArgs(Params_OnDrawActionGizmos args);

        public delegate void OnDrawActionGizmos_NormalArgs(Params_OnDrawActionGizmos args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public sealed class Params_Reset
        {
            public DebugDrawShape self;
        }

        public sealed class Params_OnDrawActionGizmos
        {
            public DebugDrawShape self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnDrawActionGizmos_BeforeArgs OnDrawActionGizmos
        {
            add
            {
                HookHandler._beforeOnDrawActionGizmos += value;
                HookHandler.HookOnDrawActionGizmos();
            }
            remove => HookHandler._beforeOnDrawActionGizmos -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnDrawActionGizmos_NormalArgs OnDrawActionGizmos
        {
            add
            {
                HookHandler._afterOnDrawActionGizmos += value;
                HookHandler.HookOnDrawActionGizmos();
            }
            remove => HookHandler._afterOnDrawActionGizmos -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DebugDrawShape), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DebugDrawShape), "Reset"), value);
        }

        public static event Delegates.OnDrawActionGizmos_NormalArgs OnDrawActionGizmos
        {
            add => HookEndpointManager.Add<Delegates.OnDrawActionGizmos_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DebugDrawShape), "OnDrawActionGizmos"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDrawActionGizmos_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(DebugDrawShape), "OnDrawActionGizmos"), value);
        }
    }
}