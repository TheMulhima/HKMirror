using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dUIToggleButtonGroup class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUIToggleButtonGroup
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_ToggleBtns()
        {
            if (!HookedList.Contains("get_ToggleBtns"))
            {
                HookedList.Add("get_ToggleBtns");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButtonGroup), "get_ToggleBtns"),
                    get_ToggleBtns);
            }
        }

        internal static event Delegates.get_ToggleBtns_BeforeArgs _beforeget_ToggleBtns;
        internal static event Delegates.get_ToggleBtns_NormalArgs _afterget_ToggleBtns;

        private static tk2dUIToggleButton[] get_ToggleBtns(Func<tk2dUIToggleButtonGroup, tk2dUIToggleButton[]> orig,
            tk2dUIToggleButtonGroup self)
        {
            Delegates.Params_get_ToggleBtns @params = new()
            {
                self = self
            };
            _beforeget_ToggleBtns?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ToggleBtns != null) retVal = _afterget_ToggleBtns.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_SelectedIndex()
        {
            if (!HookedList.Contains("get_SelectedIndex"))
            {
                HookedList.Add("get_SelectedIndex");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButtonGroup), "get_SelectedIndex"),
                    get_SelectedIndex);
            }
        }

        internal static event Delegates.get_SelectedIndex_BeforeArgs _beforeget_SelectedIndex;
        internal static event Delegates.get_SelectedIndex_NormalArgs _afterget_SelectedIndex;

        private static int get_SelectedIndex(Func<tk2dUIToggleButtonGroup, int> orig, tk2dUIToggleButtonGroup self)
        {
            Delegates.Params_get_SelectedIndex @params = new()
            {
                self = self
            };
            _beforeget_SelectedIndex?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SelectedIndex != null) retVal = _afterget_SelectedIndex.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_SelectedIndex()
        {
            if (!HookedList.Contains("set_SelectedIndex"))
            {
                HookedList.Add("set_SelectedIndex");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButtonGroup), "set_SelectedIndex"),
                    set_SelectedIndex);
            }
        }

        internal static event Delegates.set_SelectedIndex_BeforeArgs _beforeset_SelectedIndex;
        internal static event Delegates.set_SelectedIndex_NormalArgs _afterset_SelectedIndex;

        private static void set_SelectedIndex(Action<tk2dUIToggleButtonGroup, int> orig, tk2dUIToggleButtonGroup self,
            int value)
        {
            Delegates.Params_set_SelectedIndex @params = new()
            {
                self = self, value = value
            };
            _beforeset_SelectedIndex?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_SelectedIndex != null) _afterset_SelectedIndex.Invoke(@params);
        }

        internal static void Hookget_SelectedToggleButton()
        {
            if (!HookedList.Contains("get_SelectedToggleButton"))
            {
                HookedList.Add("get_SelectedToggleButton");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButtonGroup), "get_SelectedToggleButton"),
                    get_SelectedToggleButton);
            }
        }

        internal static event Delegates.get_SelectedToggleButton_BeforeArgs _beforeget_SelectedToggleButton;
        internal static event Delegates.get_SelectedToggleButton_NormalArgs _afterget_SelectedToggleButton;

        private static tk2dUIToggleButton get_SelectedToggleButton(
            Func<tk2dUIToggleButtonGroup, tk2dUIToggleButton> orig, tk2dUIToggleButtonGroup self)
        {
            Delegates.Params_get_SelectedToggleButton @params = new()
            {
                self = self
            };
            _beforeget_SelectedToggleButton?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SelectedToggleButton != null) retVal = _afterget_SelectedToggleButton.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_SelectedToggleButton()
        {
            if (!HookedList.Contains("set_SelectedToggleButton"))
            {
                HookedList.Add("set_SelectedToggleButton");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButtonGroup), "set_SelectedToggleButton"),
                    set_SelectedToggleButton);
            }
        }

        internal static event Delegates.set_SelectedToggleButton_BeforeArgs _beforeset_SelectedToggleButton;
        internal static event Delegates.set_SelectedToggleButton_NormalArgs _afterset_SelectedToggleButton;

        private static void set_SelectedToggleButton(Action<tk2dUIToggleButtonGroup, tk2dUIToggleButton> orig,
            tk2dUIToggleButtonGroup self, tk2dUIToggleButton value)
        {
            Delegates.Params_set_SelectedToggleButton @params = new()
            {
                self = self, value = value
            };
            _beforeset_SelectedToggleButton?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_SelectedToggleButton != null) _afterset_SelectedToggleButton.Invoke(@params);
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.tk2dUIToggleButtonGroup.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.tk2dUIToggleButtonGroup.orig_Awake orig, tk2dUIToggleButtonGroup self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookSetup()
        {
            if (!HookedList.Contains("Setup"))
            {
                HookedList.Add("Setup");
                On.tk2dUIToggleButtonGroup.Setup += Setup;
            }
        }

        internal static event Delegates.Setup_BeforeArgs _beforeSetup;
        internal static event Delegates.Setup_NormalArgs _afterSetup;

        private static void Setup(On.tk2dUIToggleButtonGroup.orig_Setup orig, tk2dUIToggleButtonGroup self)
        {
            Delegates.Params_Setup @params = new()
            {
                self = self
            };
            _beforeSetup?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetup != null) _afterSetup.Invoke(@params);
        }

        internal static void HookAddNewToggleButtons()
        {
            if (!HookedList.Contains("AddNewToggleButtons"))
            {
                HookedList.Add("AddNewToggleButtons");
                On.tk2dUIToggleButtonGroup.AddNewToggleButtons += AddNewToggleButtons;
            }
        }

        internal static event Delegates.AddNewToggleButtons_BeforeArgs _beforeAddNewToggleButtons;
        internal static event Delegates.AddNewToggleButtons_NormalArgs _afterAddNewToggleButtons;

        private static void AddNewToggleButtons(On.tk2dUIToggleButtonGroup.orig_AddNewToggleButtons orig,
            tk2dUIToggleButtonGroup self, tk2dUIToggleButton[] newToggleBtns)
        {
            Delegates.Params_AddNewToggleButtons @params = new()
            {
                self = self, newToggleBtns = newToggleBtns
            };
            _beforeAddNewToggleButtons?.Invoke(@params);
            self = @params.self;
            newToggleBtns = @params.newToggleBtns;
            orig(self, newToggleBtns);
            if (_afterAddNewToggleButtons != null) _afterAddNewToggleButtons.Invoke(@params);
        }

        internal static void HookClearExistingToggleBtns()
        {
            if (!HookedList.Contains("ClearExistingToggleBtns"))
            {
                HookedList.Add("ClearExistingToggleBtns");
                On.tk2dUIToggleButtonGroup.ClearExistingToggleBtns += ClearExistingToggleBtns;
            }
        }

        internal static event Delegates.ClearExistingToggleBtns_BeforeArgs _beforeClearExistingToggleBtns;
        internal static event Delegates.ClearExistingToggleBtns_NormalArgs _afterClearExistingToggleBtns;

        private static void ClearExistingToggleBtns(On.tk2dUIToggleButtonGroup.orig_ClearExistingToggleBtns orig,
            tk2dUIToggleButtonGroup self)
        {
            Delegates.Params_ClearExistingToggleBtns @params = new()
            {
                self = self
            };
            _beforeClearExistingToggleBtns?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClearExistingToggleBtns != null) _afterClearExistingToggleBtns.Invoke(@params);
        }

        internal static void HookSetToggleButtonUsingSelectedIndex()
        {
            if (!HookedList.Contains("SetToggleButtonUsingSelectedIndex"))
            {
                HookedList.Add("SetToggleButtonUsingSelectedIndex");
                On.tk2dUIToggleButtonGroup.SetToggleButtonUsingSelectedIndex += SetToggleButtonUsingSelectedIndex;
            }
        }

        internal static event Delegates.SetToggleButtonUsingSelectedIndex_BeforeArgs
            _beforeSetToggleButtonUsingSelectedIndex;

        internal static event Delegates.SetToggleButtonUsingSelectedIndex_NormalArgs
            _afterSetToggleButtonUsingSelectedIndex;

        private static void SetToggleButtonUsingSelectedIndex(
            On.tk2dUIToggleButtonGroup.orig_SetToggleButtonUsingSelectedIndex orig, tk2dUIToggleButtonGroup self)
        {
            Delegates.Params_SetToggleButtonUsingSelectedIndex @params = new()
            {
                self = self
            };
            _beforeSetToggleButtonUsingSelectedIndex?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetToggleButtonUsingSelectedIndex != null)
                _afterSetToggleButtonUsingSelectedIndex.Invoke(@params);
        }

        internal static void HookButtonToggle()
        {
            if (!HookedList.Contains("ButtonToggle"))
            {
                HookedList.Add("ButtonToggle");
                On.tk2dUIToggleButtonGroup.ButtonToggle += ButtonToggle;
            }
        }

        internal static event Delegates.ButtonToggle_BeforeArgs _beforeButtonToggle;
        internal static event Delegates.ButtonToggle_NormalArgs _afterButtonToggle;

        private static void ButtonToggle(On.tk2dUIToggleButtonGroup.orig_ButtonToggle orig,
            tk2dUIToggleButtonGroup self, tk2dUIToggleButton toggleButton)
        {
            Delegates.Params_ButtonToggle @params = new()
            {
                self = self, toggleButton = toggleButton
            };
            _beforeButtonToggle?.Invoke(@params);
            self = @params.self;
            toggleButton = @params.toggleButton;
            orig(self, toggleButton);
            if (_afterButtonToggle != null) _afterButtonToggle.Invoke(@params);
        }

        internal static void HookSetSelectedIndexFromSelectedToggleButton()
        {
            if (!HookedList.Contains("SetSelectedIndexFromSelectedToggleButton"))
            {
                HookedList.Add("SetSelectedIndexFromSelectedToggleButton");
                On.tk2dUIToggleButtonGroup.SetSelectedIndexFromSelectedToggleButton +=
                    SetSelectedIndexFromSelectedToggleButton;
            }
        }

        internal static event Delegates.SetSelectedIndexFromSelectedToggleButton_BeforeArgs
            _beforeSetSelectedIndexFromSelectedToggleButton;

        internal static event Delegates.SetSelectedIndexFromSelectedToggleButton_NormalArgs
            _afterSetSelectedIndexFromSelectedToggleButton;

        private static void SetSelectedIndexFromSelectedToggleButton(
            On.tk2dUIToggleButtonGroup.orig_SetSelectedIndexFromSelectedToggleButton orig, tk2dUIToggleButtonGroup self)
        {
            Delegates.Params_SetSelectedIndexFromSelectedToggleButton @params = new()
            {
                self = self
            };
            _beforeSetSelectedIndexFromSelectedToggleButton?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetSelectedIndexFromSelectedToggleButton != null)
                _afterSetSelectedIndexFromSelectedToggleButton.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AddNewToggleButtons_BeforeArgs(Params_AddNewToggleButtons args);

        public delegate void AddNewToggleButtons_NormalArgs(Params_AddNewToggleButtons args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void ButtonToggle_BeforeArgs(Params_ButtonToggle args);

        public delegate void ButtonToggle_NormalArgs(Params_ButtonToggle args);

        public delegate void ClearExistingToggleBtns_BeforeArgs(Params_ClearExistingToggleBtns args);

        public delegate void ClearExistingToggleBtns_NormalArgs(Params_ClearExistingToggleBtns args);

        public delegate void get_SelectedIndex_BeforeArgs(Params_get_SelectedIndex args);

        public delegate int get_SelectedIndex_NormalArgs(Params_get_SelectedIndex args);

        public delegate void get_SelectedToggleButton_BeforeArgs(Params_get_SelectedToggleButton args);

        public delegate tk2dUIToggleButton get_SelectedToggleButton_NormalArgs(Params_get_SelectedToggleButton args);

        public delegate void get_ToggleBtns_BeforeArgs(Params_get_ToggleBtns args);

        public delegate tk2dUIToggleButton[] get_ToggleBtns_NormalArgs(Params_get_ToggleBtns args);

        public delegate void set_SelectedIndex_BeforeArgs(Params_set_SelectedIndex args);

        public delegate void set_SelectedIndex_NormalArgs(Params_set_SelectedIndex args);

        public delegate void set_SelectedToggleButton_BeforeArgs(Params_set_SelectedToggleButton args);

        public delegate void set_SelectedToggleButton_NormalArgs(Params_set_SelectedToggleButton args);

        public delegate void SetSelectedIndexFromSelectedToggleButton_BeforeArgs(
            Params_SetSelectedIndexFromSelectedToggleButton args);

        public delegate void SetSelectedIndexFromSelectedToggleButton_NormalArgs(
            Params_SetSelectedIndexFromSelectedToggleButton args);

        public delegate void
            SetToggleButtonUsingSelectedIndex_BeforeArgs(Params_SetToggleButtonUsingSelectedIndex args);

        public delegate void
            SetToggleButtonUsingSelectedIndex_NormalArgs(Params_SetToggleButtonUsingSelectedIndex args);

        public delegate void Setup_BeforeArgs(Params_Setup args);

        public delegate void Setup_NormalArgs(Params_Setup args);

        public sealed class Params_get_ToggleBtns
        {
            public tk2dUIToggleButtonGroup self;
        }

        public sealed class Params_get_SelectedIndex
        {
            public tk2dUIToggleButtonGroup self;
        }

        public sealed class Params_set_SelectedIndex
        {
            public tk2dUIToggleButtonGroup self;
            public int value;
        }

        public sealed class Params_get_SelectedToggleButton
        {
            public tk2dUIToggleButtonGroup self;
        }

        public sealed class Params_set_SelectedToggleButton
        {
            public tk2dUIToggleButtonGroup self;
            public tk2dUIToggleButton value;
        }

        public sealed class Params_Awake
        {
            public tk2dUIToggleButtonGroup self;
        }

        public sealed class Params_Setup
        {
            public tk2dUIToggleButtonGroup self;
        }

        public sealed class Params_AddNewToggleButtons
        {
            public tk2dUIToggleButton[] newToggleBtns;
            public tk2dUIToggleButtonGroup self;
        }

        public sealed class Params_ClearExistingToggleBtns
        {
            public tk2dUIToggleButtonGroup self;
        }

        public sealed class Params_SetToggleButtonUsingSelectedIndex
        {
            public tk2dUIToggleButtonGroup self;
        }

        public sealed class Params_ButtonToggle
        {
            public tk2dUIToggleButtonGroup self;
            public tk2dUIToggleButton toggleButton;
        }

        public sealed class Params_SetSelectedIndexFromSelectedToggleButton
        {
            public tk2dUIToggleButtonGroup self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_ToggleBtns_BeforeArgs get_ToggleBtns
        {
            add
            {
                HookHandler._beforeget_ToggleBtns += value;
                HookHandler.Hookget_ToggleBtns();
            }
            remove => HookHandler._beforeget_ToggleBtns -= value;
        }

        public static event Delegates.get_SelectedIndex_BeforeArgs get_SelectedIndex
        {
            add
            {
                HookHandler._beforeget_SelectedIndex += value;
                HookHandler.Hookget_SelectedIndex();
            }
            remove => HookHandler._beforeget_SelectedIndex -= value;
        }

        public static event Delegates.set_SelectedIndex_BeforeArgs set_SelectedIndex
        {
            add
            {
                HookHandler._beforeset_SelectedIndex += value;
                HookHandler.Hookset_SelectedIndex();
            }
            remove => HookHandler._beforeset_SelectedIndex -= value;
        }

        public static event Delegates.get_SelectedToggleButton_BeforeArgs get_SelectedToggleButton
        {
            add
            {
                HookHandler._beforeget_SelectedToggleButton += value;
                HookHandler.Hookget_SelectedToggleButton();
            }
            remove => HookHandler._beforeget_SelectedToggleButton -= value;
        }

        public static event Delegates.set_SelectedToggleButton_BeforeArgs set_SelectedToggleButton
        {
            add
            {
                HookHandler._beforeset_SelectedToggleButton += value;
                HookHandler.Hookset_SelectedToggleButton();
            }
            remove => HookHandler._beforeset_SelectedToggleButton -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Setup_BeforeArgs Setup
        {
            add
            {
                HookHandler._beforeSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._beforeSetup -= value;
        }

        public static event Delegates.AddNewToggleButtons_BeforeArgs AddNewToggleButtons
        {
            add
            {
                HookHandler._beforeAddNewToggleButtons += value;
                HookHandler.HookAddNewToggleButtons();
            }
            remove => HookHandler._beforeAddNewToggleButtons -= value;
        }

        public static event Delegates.ClearExistingToggleBtns_BeforeArgs ClearExistingToggleBtns
        {
            add
            {
                HookHandler._beforeClearExistingToggleBtns += value;
                HookHandler.HookClearExistingToggleBtns();
            }
            remove => HookHandler._beforeClearExistingToggleBtns -= value;
        }

        public static event Delegates.SetToggleButtonUsingSelectedIndex_BeforeArgs SetToggleButtonUsingSelectedIndex
        {
            add
            {
                HookHandler._beforeSetToggleButtonUsingSelectedIndex += value;
                HookHandler.HookSetToggleButtonUsingSelectedIndex();
            }
            remove => HookHandler._beforeSetToggleButtonUsingSelectedIndex -= value;
        }

        public static event Delegates.ButtonToggle_BeforeArgs ButtonToggle
        {
            add
            {
                HookHandler._beforeButtonToggle += value;
                HookHandler.HookButtonToggle();
            }
            remove => HookHandler._beforeButtonToggle -= value;
        }

        public static event Delegates.SetSelectedIndexFromSelectedToggleButton_BeforeArgs
            SetSelectedIndexFromSelectedToggleButton
            {
                add
                {
                    HookHandler._beforeSetSelectedIndexFromSelectedToggleButton += value;
                    HookHandler.HookSetSelectedIndexFromSelectedToggleButton();
                }
                remove => HookHandler._beforeSetSelectedIndexFromSelectedToggleButton -= value;
            }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_ToggleBtns_NormalArgs get_ToggleBtns
        {
            add
            {
                HookHandler._afterget_ToggleBtns += value;
                HookHandler.Hookget_ToggleBtns();
            }
            remove => HookHandler._afterget_ToggleBtns -= value;
        }

        public static event Delegates.get_SelectedIndex_NormalArgs get_SelectedIndex
        {
            add
            {
                HookHandler._afterget_SelectedIndex += value;
                HookHandler.Hookget_SelectedIndex();
            }
            remove => HookHandler._afterget_SelectedIndex -= value;
        }

        public static event Delegates.set_SelectedIndex_NormalArgs set_SelectedIndex
        {
            add
            {
                HookHandler._afterset_SelectedIndex += value;
                HookHandler.Hookset_SelectedIndex();
            }
            remove => HookHandler._afterset_SelectedIndex -= value;
        }

        public static event Delegates.get_SelectedToggleButton_NormalArgs get_SelectedToggleButton
        {
            add
            {
                HookHandler._afterget_SelectedToggleButton += value;
                HookHandler.Hookget_SelectedToggleButton();
            }
            remove => HookHandler._afterget_SelectedToggleButton -= value;
        }

        public static event Delegates.set_SelectedToggleButton_NormalArgs set_SelectedToggleButton
        {
            add
            {
                HookHandler._afterset_SelectedToggleButton += value;
                HookHandler.Hookset_SelectedToggleButton();
            }
            remove => HookHandler._afterset_SelectedToggleButton -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Setup_NormalArgs Setup
        {
            add
            {
                HookHandler._afterSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._afterSetup -= value;
        }

        public static event Delegates.AddNewToggleButtons_NormalArgs AddNewToggleButtons
        {
            add
            {
                HookHandler._afterAddNewToggleButtons += value;
                HookHandler.HookAddNewToggleButtons();
            }
            remove => HookHandler._afterAddNewToggleButtons -= value;
        }

        public static event Delegates.ClearExistingToggleBtns_NormalArgs ClearExistingToggleBtns
        {
            add
            {
                HookHandler._afterClearExistingToggleBtns += value;
                HookHandler.HookClearExistingToggleBtns();
            }
            remove => HookHandler._afterClearExistingToggleBtns -= value;
        }

        public static event Delegates.SetToggleButtonUsingSelectedIndex_NormalArgs SetToggleButtonUsingSelectedIndex
        {
            add
            {
                HookHandler._afterSetToggleButtonUsingSelectedIndex += value;
                HookHandler.HookSetToggleButtonUsingSelectedIndex();
            }
            remove => HookHandler._afterSetToggleButtonUsingSelectedIndex -= value;
        }

        public static event Delegates.ButtonToggle_NormalArgs ButtonToggle
        {
            add
            {
                HookHandler._afterButtonToggle += value;
                HookHandler.HookButtonToggle();
            }
            remove => HookHandler._afterButtonToggle -= value;
        }

        public static event Delegates.SetSelectedIndexFromSelectedToggleButton_NormalArgs
            SetSelectedIndexFromSelectedToggleButton
            {
                add
                {
                    HookHandler._afterSetSelectedIndexFromSelectedToggleButton += value;
                    HookHandler.HookSetSelectedIndexFromSelectedToggleButton();
                }
                remove => HookHandler._afterSetSelectedIndexFromSelectedToggleButton -= value;
            }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_ToggleBtns_NormalArgs get_ToggleBtns
        {
            add => HookEndpointManager.Add<Delegates.get_ToggleBtns_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButtonGroup), "get_ToggleBtns"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ToggleBtns_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButtonGroup), "get_ToggleBtns"), value);
        }

        public static event Delegates.get_SelectedIndex_NormalArgs get_SelectedIndex
        {
            add => HookEndpointManager.Add<Delegates.get_SelectedIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButtonGroup), "get_SelectedIndex"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SelectedIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButtonGroup), "get_SelectedIndex"), value);
        }

        public static event Delegates.set_SelectedIndex_NormalArgs set_SelectedIndex
        {
            add => HookEndpointManager.Add<Delegates.set_SelectedIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButtonGroup), "set_SelectedIndex"), value);
            remove => HookEndpointManager.Remove<Delegates.set_SelectedIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButtonGroup), "set_SelectedIndex"), value);
        }

        public static event Delegates.get_SelectedToggleButton_NormalArgs get_SelectedToggleButton
        {
            add => HookEndpointManager.Add<Delegates.get_SelectedToggleButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButtonGroup), "get_SelectedToggleButton"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SelectedToggleButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButtonGroup), "get_SelectedToggleButton"), value);
        }

        public static event Delegates.set_SelectedToggleButton_NormalArgs set_SelectedToggleButton
        {
            add => HookEndpointManager.Add<Delegates.set_SelectedToggleButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButtonGroup), "set_SelectedToggleButton"), value);
            remove => HookEndpointManager.Remove<Delegates.set_SelectedToggleButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButtonGroup), "set_SelectedToggleButton"), value);
        }

        public static event On.tk2dUIToggleButtonGroup.hook_Awake Awake
        {
            add => On.tk2dUIToggleButtonGroup.Awake += value;
            remove => On.tk2dUIToggleButtonGroup.Awake -= value;
        }

        public static event On.tk2dUIToggleButtonGroup.hook_Setup Setup
        {
            add => On.tk2dUIToggleButtonGroup.Setup += value;
            remove => On.tk2dUIToggleButtonGroup.Setup -= value;
        }

        public static event On.tk2dUIToggleButtonGroup.hook_AddNewToggleButtons AddNewToggleButtons
        {
            add => On.tk2dUIToggleButtonGroup.AddNewToggleButtons += value;
            remove => On.tk2dUIToggleButtonGroup.AddNewToggleButtons -= value;
        }

        public static event On.tk2dUIToggleButtonGroup.hook_ClearExistingToggleBtns ClearExistingToggleBtns
        {
            add => On.tk2dUIToggleButtonGroup.ClearExistingToggleBtns += value;
            remove => On.tk2dUIToggleButtonGroup.ClearExistingToggleBtns -= value;
        }

        public static event On.tk2dUIToggleButtonGroup.hook_SetToggleButtonUsingSelectedIndex
            SetToggleButtonUsingSelectedIndex
            {
                add => On.tk2dUIToggleButtonGroup.SetToggleButtonUsingSelectedIndex += value;
                remove => On.tk2dUIToggleButtonGroup.SetToggleButtonUsingSelectedIndex -= value;
            }

        public static event On.tk2dUIToggleButtonGroup.hook_ButtonToggle ButtonToggle
        {
            add => On.tk2dUIToggleButtonGroup.ButtonToggle += value;
            remove => On.tk2dUIToggleButtonGroup.ButtonToggle -= value;
        }

        public static event On.tk2dUIToggleButtonGroup.hook_SetSelectedIndexFromSelectedToggleButton
            SetSelectedIndexFromSelectedToggleButton
            {
                add => On.tk2dUIToggleButtonGroup.SetSelectedIndexFromSelectedToggleButton += value;
                remove => On.tk2dUIToggleButtonGroup.SetSelectedIndexFromSelectedToggleButton -= value;
            }
    }
}