using Language;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using Object = UnityEngine.Object;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for LocalizedAsset class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnLocalizedAsset
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(LocalizedAsset), "Awake"), Awake);
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(Action<LocalizedAsset> orig, LocalizedAsset self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookLocalizeAsset()
        {
            if (!HookedList.Contains("LocalizeAsset"))
            {
                HookedList.Add("LocalizeAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(LocalizedAsset), "LocalizeAsset"), LocalizeAsset);
            }
        }

        internal static event Delegates.LocalizeAsset_BeforeArgs _beforeLocalizeAsset;
        internal static event Delegates.LocalizeAsset_NormalArgs _afterLocalizeAsset;

        private static void LocalizeAsset(Action<LocalizedAsset> orig, LocalizedAsset self)
        {
            Delegates.Params_LocalizeAsset @params = new()
            {
                self = self
            };
            _beforeLocalizeAsset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLocalizeAsset != null) _afterLocalizeAsset.Invoke(@params);
        }

        internal static void HookLocalizeAsset_Object()
        {
            if (!HookedList.Contains("LocalizeAsset_Object"))
            {
                HookedList.Add("LocalizeAsset_Object");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(LocalizedAsset), "LocalizeAsset_Object", false),
                    LocalizeAsset_Object);
            }
        }

        internal static event Delegates.LocalizeAsset_Object_BeforeArgs _beforeLocalizeAsset_Object;
        internal static event Delegates.LocalizeAsset_Object_NormalArgs _afterLocalizeAsset_Object;

        private static void LocalizeAsset_Object(Action<Object> orig, Object target)
        {
            Delegates.Params_LocalizeAsset_Object @params = new()
            {
                target = target
            };
            _beforeLocalizeAsset_Object?.Invoke(@params);
            target = @params.target;
            orig(target);
            if (_afterLocalizeAsset_Object != null) _afterLocalizeAsset_Object.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void LocalizeAsset_BeforeArgs(Params_LocalizeAsset args);

        public delegate void LocalizeAsset_NormalArgs(Params_LocalizeAsset args);

        public delegate void LocalizeAsset_Object_BeforeArgs(Params_LocalizeAsset_Object args);

        public delegate void LocalizeAsset_Object_NormalArgs(Params_LocalizeAsset_Object args);

        public sealed class Params_Awake
        {
            public LocalizedAsset self;
        }

        public sealed class Params_LocalizeAsset
        {
            public LocalizedAsset self;
        }

        public sealed class Params_LocalizeAsset_Object
        {
            public Object target;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.LocalizeAsset_BeforeArgs LocalizeAsset
        {
            add
            {
                HookHandler._beforeLocalizeAsset += value;
                HookHandler.HookLocalizeAsset();
            }
            remove => HookHandler._beforeLocalizeAsset -= value;
        }

        public static event Delegates.LocalizeAsset_Object_BeforeArgs LocalizeAsset_Object
        {
            add
            {
                HookHandler._beforeLocalizeAsset_Object += value;
                HookHandler.HookLocalizeAsset_Object();
            }
            remove => HookHandler._beforeLocalizeAsset_Object -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.LocalizeAsset_NormalArgs LocalizeAsset
        {
            add
            {
                HookHandler._afterLocalizeAsset += value;
                HookHandler.HookLocalizeAsset();
            }
            remove => HookHandler._afterLocalizeAsset -= value;
        }

        public static event Delegates.LocalizeAsset_Object_NormalArgs LocalizeAsset_Object
        {
            add
            {
                HookHandler._afterLocalizeAsset_Object += value;
                HookHandler.HookLocalizeAsset_Object();
            }
            remove => HookHandler._afterLocalizeAsset_Object -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add => HookEndpointManager.Add<Delegates.Awake_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LocalizedAsset), "Awake"), value);
            remove => HookEndpointManager.Remove<Delegates.Awake_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LocalizedAsset), "Awake"), value);
        }

        public static event Delegates.LocalizeAsset_NormalArgs LocalizeAsset
        {
            add => HookEndpointManager.Add<Delegates.LocalizeAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LocalizedAsset), "LocalizeAsset"), value);
            remove => HookEndpointManager.Remove<Delegates.LocalizeAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LocalizedAsset), "LocalizeAsset"), value);
        }

        public static event Delegates.LocalizeAsset_Object_NormalArgs LocalizeAsset_Object
        {
            add => HookEndpointManager.Add<Delegates.LocalizeAsset_Object_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LocalizedAsset), "LocalizeAsset", false), value);
            remove => HookEndpointManager.Remove<Delegates.LocalizeAsset_Object_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LocalizedAsset), "LocalizeAsset", false), value);
        }
    }
}