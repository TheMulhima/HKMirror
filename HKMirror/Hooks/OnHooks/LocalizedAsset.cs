using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for LocalizedAsset class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnLocalizedAsset
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
new Hook(ReflectionHelper.GetMethodInfo(typeof(Language.LocalizedAsset), "Awake", true), Awake);

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(Action<Language.LocalizedAsset> orig, Language.LocalizedAsset self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookLocalizeAsset()
{
if (!HookedList.Contains("LocalizeAsset"))
{
HookedList.Add("LocalizeAsset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(Language.LocalizedAsset), "LocalizeAsset", true), LocalizeAsset);

}
}
internal static event Delegates.LocalizeAsset_BeforeArgs _beforeLocalizeAsset;
internal static event Delegates.LocalizeAsset_AfterArgs _afterLocalizeAsset;
private static void LocalizeAsset(Action<Language.LocalizedAsset> orig, Language.LocalizedAsset self)
{
Delegates.Params_LocalizeAsset @params = new() 
{
self = self
};
if (_beforeLocalizeAsset != null)
{
foreach (Delegates.LocalizeAsset_BeforeArgs toInvoke in _beforeLocalizeAsset.GetInvocationList())
{
try
{
_beforeLocalizeAsset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterLocalizeAsset != null)
{
foreach (Delegates.LocalizeAsset_AfterArgs toInvoke in _afterLocalizeAsset.GetInvocationList())
{
try
{
_afterLocalizeAsset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookLocalizeAsset_Object()
{
if (!HookedList.Contains("LocalizeAsset_Object"))
{
HookedList.Add("LocalizeAsset_Object");
new Hook(ReflectionHelper.GetMethodInfo(typeof(Language.LocalizedAsset), "LocalizeAsset_Object", false), LocalizeAsset_Object);

}
}
internal static event Delegates.LocalizeAsset_Object_BeforeArgs _beforeLocalizeAsset_Object;
internal static event Delegates.LocalizeAsset_Object_AfterArgs _afterLocalizeAsset_Object;
private static void LocalizeAsset_Object(Action< UnityEngine.Object> orig,  UnityEngine.Object target)
{
Delegates.Params_LocalizeAsset_Object @params = new() 
{
target = target
};
if (_beforeLocalizeAsset_Object != null)
{
foreach (Delegates.LocalizeAsset_Object_BeforeArgs toInvoke in _beforeLocalizeAsset_Object.GetInvocationList())
{
try
{
_beforeLocalizeAsset_Object?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
target = @params.target;
orig(target);
if (_afterLocalizeAsset_Object != null)
{
foreach (Delegates.LocalizeAsset_Object_AfterArgs toInvoke in _afterLocalizeAsset_Object.GetInvocationList())
{
try
{
_afterLocalizeAsset_Object.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Awake
{
public Language.LocalizedAsset self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<Language.LocalizedAsset> orig, Language.LocalizedAsset self);
public sealed class Params_LocalizeAsset
{
public Language.LocalizedAsset self;
}
public delegate void LocalizeAsset_BeforeArgs(Params_LocalizeAsset args);
public delegate void LocalizeAsset_AfterArgs(Params_LocalizeAsset args);
public delegate void LocalizeAsset_WithArgs (Action<Language.LocalizedAsset> orig, Language.LocalizedAsset self);
public sealed class Params_LocalizeAsset_Object
{
public UnityEngine.Object target;
}
public delegate void LocalizeAsset_Object_BeforeArgs(Params_LocalizeAsset_Object args);
public delegate void LocalizeAsset_Object_AfterArgs(Params_LocalizeAsset_Object args);
public delegate void LocalizeAsset_Object_WithArgs (Action< UnityEngine.Object> orig,  UnityEngine.Object target);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.LocalizeAsset_BeforeArgs LocalizeAsset
{
add
{

HookHandler._beforeLocalizeAsset += value;
HookHandler.HookLocalizeAsset();
}
remove => HookHandler._beforeLocalizeAsset -= value;
}
public static event Delegates.LocalizeAsset_Object_BeforeArgs LocalizeAsset_Object
{
add
{

HookHandler._beforeLocalizeAsset_Object += value;
HookHandler.HookLocalizeAsset_Object();
}
remove => HookHandler._beforeLocalizeAsset_Object -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.LocalizeAsset_AfterArgs LocalizeAsset
{
add
{

HookHandler._afterLocalizeAsset += value;
HookHandler.HookLocalizeAsset();
}
remove => HookHandler._afterLocalizeAsset -= value;
}
public static event Delegates.LocalizeAsset_Object_AfterArgs LocalizeAsset_Object
{
add
{

HookHandler._afterLocalizeAsset_Object += value;
HookHandler.HookLocalizeAsset_Object();
}
remove => HookHandler._afterLocalizeAsset_Object -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.Awake_WithArgs Awake
{
add => HookEndpointManager.Add<Delegates.Awake_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Language.LocalizedAsset), "Awake", true), value);
remove => HookEndpointManager.Remove<Delegates.Awake_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Language.LocalizedAsset), "Awake", true), value);
}
public static event Delegates.LocalizeAsset_WithArgs LocalizeAsset
{
add => HookEndpointManager.Add<Delegates.LocalizeAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Language.LocalizedAsset), "LocalizeAsset", true), value);
remove => HookEndpointManager.Remove<Delegates.LocalizeAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Language.LocalizedAsset), "LocalizeAsset", true), value);
}
public static event Delegates.LocalizeAsset_Object_WithArgs LocalizeAsset_Object
{
add => HookEndpointManager.Add<Delegates.LocalizeAsset_Object_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Language.LocalizedAsset), "LocalizeAsset", false), value);
remove => HookEndpointManager.Remove<Delegates.LocalizeAsset_Object_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Language.LocalizedAsset), "LocalizeAsset", false), value);
}
}

}
