using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for InputControl class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnInputControl
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Handle()
        {
            if (!HookedList.Contains("get_Handle"))
            {
                HookedList.Add("get_Handle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControl), "get_Handle"), get_Handle);
            }
        }

        internal static event Delegates.get_Handle_BeforeArgs _beforeget_Handle;
        internal static event Delegates.get_Handle_NormalArgs _afterget_Handle;

        private static string get_Handle(Func<InputControl, string> orig, InputControl self)
        {
            Delegates.Params_get_Handle @params = new()
            {
                self = self
            };
            _beforeget_Handle?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Handle != null) retVal = _afterget_Handle.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Handle()
        {
            if (!HookedList.Contains("set_Handle"))
            {
                HookedList.Add("set_Handle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControl), "set_Handle"), set_Handle);
            }
        }

        internal static event Delegates.set_Handle_BeforeArgs _beforeset_Handle;
        internal static event Delegates.set_Handle_NormalArgs _afterset_Handle;

        private static void set_Handle(Action<InputControl, string> orig, InputControl self, string value)
        {
            Delegates.Params_set_Handle @params = new()
            {
                self = self, value = value
            };
            _beforeset_Handle?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Handle != null) _afterset_Handle.Invoke(@params);
        }

        internal static void Hookget_Target()
        {
            if (!HookedList.Contains("get_Target"))
            {
                HookedList.Add("get_Target");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControl), "get_Target"), get_Target);
            }
        }

        internal static event Delegates.get_Target_BeforeArgs _beforeget_Target;
        internal static event Delegates.get_Target_NormalArgs _afterget_Target;

        private static InputControlType get_Target(Func<InputControl, InputControlType> orig, InputControl self)
        {
            Delegates.Params_get_Target @params = new()
            {
                self = self
            };
            _beforeget_Target?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Target != null) retVal = _afterget_Target.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Target()
        {
            if (!HookedList.Contains("set_Target"))
            {
                HookedList.Add("set_Target");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControl), "set_Target"), set_Target);
            }
        }

        internal static event Delegates.set_Target_BeforeArgs _beforeset_Target;
        internal static event Delegates.set_Target_NormalArgs _afterset_Target;

        private static void set_Target(Action<InputControl, InputControlType> orig, InputControl self,
            InputControlType value)
        {
            Delegates.Params_set_Target @params = new()
            {
                self = self, value = value
            };
            _beforeset_Target?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Target != null) _afterset_Target.Invoke(@params);
        }

        internal static void Hookget_IsButton()
        {
            if (!HookedList.Contains("get_IsButton"))
            {
                HookedList.Add("get_IsButton");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControl), "get_IsButton"), get_IsButton);
            }
        }

        internal static event Delegates.get_IsButton_BeforeArgs _beforeget_IsButton;
        internal static event Delegates.get_IsButton_NormalArgs _afterget_IsButton;

        private static bool get_IsButton(Func<InputControl, bool> orig, InputControl self)
        {
            Delegates.Params_get_IsButton @params = new()
            {
                self = self
            };
            _beforeget_IsButton?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsButton != null) retVal = _afterget_IsButton.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_IsButton()
        {
            if (!HookedList.Contains("set_IsButton"))
            {
                HookedList.Add("set_IsButton");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControl), "set_IsButton"), set_IsButton);
            }
        }

        internal static event Delegates.set_IsButton_BeforeArgs _beforeset_IsButton;
        internal static event Delegates.set_IsButton_NormalArgs _afterset_IsButton;

        private static void set_IsButton(Action<InputControl, bool> orig, InputControl self, bool value)
        {
            Delegates.Params_set_IsButton @params = new()
            {
                self = self, value = value
            };
            _beforeset_IsButton?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_IsButton != null) _afterset_IsButton.Invoke(@params);
        }

        internal static void Hookget_IsAnalog()
        {
            if (!HookedList.Contains("get_IsAnalog"))
            {
                HookedList.Add("get_IsAnalog");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControl), "get_IsAnalog"), get_IsAnalog);
            }
        }

        internal static event Delegates.get_IsAnalog_BeforeArgs _beforeget_IsAnalog;
        internal static event Delegates.get_IsAnalog_NormalArgs _afterget_IsAnalog;

        private static bool get_IsAnalog(Func<InputControl, bool> orig, InputControl self)
        {
            Delegates.Params_get_IsAnalog @params = new()
            {
                self = self
            };
            _beforeget_IsAnalog?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsAnalog != null) retVal = _afterget_IsAnalog.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_IsAnalog()
        {
            if (!HookedList.Contains("set_IsAnalog"))
            {
                HookedList.Add("set_IsAnalog");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControl), "set_IsAnalog"), set_IsAnalog);
            }
        }

        internal static event Delegates.set_IsAnalog_BeforeArgs _beforeset_IsAnalog;
        internal static event Delegates.set_IsAnalog_NormalArgs _afterset_IsAnalog;

        private static void set_IsAnalog(Action<InputControl, bool> orig, InputControl self, bool value)
        {
            Delegates.Params_set_IsAnalog @params = new()
            {
                self = self, value = value
            };
            _beforeset_IsAnalog?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_IsAnalog != null) _afterset_IsAnalog.Invoke(@params);
        }

        internal static void HookSetZeroTick()
        {
            if (!HookedList.Contains("SetZeroTick"))
            {
                HookedList.Add("SetZeroTick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControl), "SetZeroTick"), SetZeroTick);
            }
        }

        internal static event Delegates.SetZeroTick_BeforeArgs _beforeSetZeroTick;
        internal static event Delegates.SetZeroTick_NormalArgs _afterSetZeroTick;

        private static void SetZeroTick(Action<InputControl> orig, InputControl self)
        {
            Delegates.Params_SetZeroTick @params = new()
            {
                self = self
            };
            _beforeSetZeroTick?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetZeroTick != null) _afterSetZeroTick.Invoke(@params);
        }

        internal static void Hookget_IsOnZeroTick()
        {
            if (!HookedList.Contains("get_IsOnZeroTick"))
            {
                HookedList.Add("get_IsOnZeroTick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControl), "get_IsOnZeroTick"), get_IsOnZeroTick);
            }
        }

        internal static event Delegates.get_IsOnZeroTick_BeforeArgs _beforeget_IsOnZeroTick;
        internal static event Delegates.get_IsOnZeroTick_NormalArgs _afterget_IsOnZeroTick;

        private static bool get_IsOnZeroTick(Func<InputControl, bool> orig, InputControl self)
        {
            Delegates.Params_get_IsOnZeroTick @params = new()
            {
                self = self
            };
            _beforeget_IsOnZeroTick?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsOnZeroTick != null) retVal = _afterget_IsOnZeroTick.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_IsStandard()
        {
            if (!HookedList.Contains("get_IsStandard"))
            {
                HookedList.Add("get_IsStandard");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControl), "get_IsStandard"), get_IsStandard);
            }
        }

        internal static event Delegates.get_IsStandard_BeforeArgs _beforeget_IsStandard;
        internal static event Delegates.get_IsStandard_NormalArgs _afterget_IsStandard;

        private static bool get_IsStandard(Func<InputControl, bool> orig, InputControl self)
        {
            Delegates.Params_get_IsStandard @params = new()
            {
                self = self
            };
            _beforeget_IsStandard?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsStandard != null) retVal = _afterget_IsStandard.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_Handle_BeforeArgs(Params_get_Handle args);

        public delegate string get_Handle_NormalArgs(Params_get_Handle args);

        public delegate void get_IsAnalog_BeforeArgs(Params_get_IsAnalog args);

        public delegate bool get_IsAnalog_NormalArgs(Params_get_IsAnalog args);

        public delegate void get_IsButton_BeforeArgs(Params_get_IsButton args);

        public delegate bool get_IsButton_NormalArgs(Params_get_IsButton args);

        public delegate void get_IsOnZeroTick_BeforeArgs(Params_get_IsOnZeroTick args);

        public delegate bool get_IsOnZeroTick_NormalArgs(Params_get_IsOnZeroTick args);

        public delegate void get_IsStandard_BeforeArgs(Params_get_IsStandard args);

        public delegate bool get_IsStandard_NormalArgs(Params_get_IsStandard args);

        public delegate void get_Target_BeforeArgs(Params_get_Target args);

        public delegate InputControlType get_Target_NormalArgs(Params_get_Target args);

        public delegate void set_Handle_BeforeArgs(Params_set_Handle args);

        public delegate void set_Handle_NormalArgs(Params_set_Handle args);

        public delegate void set_IsAnalog_BeforeArgs(Params_set_IsAnalog args);

        public delegate void set_IsAnalog_NormalArgs(Params_set_IsAnalog args);

        public delegate void set_IsButton_BeforeArgs(Params_set_IsButton args);

        public delegate void set_IsButton_NormalArgs(Params_set_IsButton args);

        public delegate void set_Target_BeforeArgs(Params_set_Target args);

        public delegate void set_Target_NormalArgs(Params_set_Target args);

        public delegate void SetZeroTick_BeforeArgs(Params_SetZeroTick args);

        public delegate void SetZeroTick_NormalArgs(Params_SetZeroTick args);

        public sealed class Params_get_Handle
        {
            public InputControl self;
        }

        public sealed class Params_set_Handle
        {
            public InputControl self;
            public string value;
        }

        public sealed class Params_get_Target
        {
            public InputControl self;
        }

        public sealed class Params_set_Target
        {
            public InputControl self;
            public InputControlType value;
        }

        public sealed class Params_get_IsButton
        {
            public InputControl self;
        }

        public sealed class Params_set_IsButton
        {
            public InputControl self;
            public bool value;
        }

        public sealed class Params_get_IsAnalog
        {
            public InputControl self;
        }

        public sealed class Params_set_IsAnalog
        {
            public InputControl self;
            public bool value;
        }

        public sealed class Params_SetZeroTick
        {
            public InputControl self;
        }

        public sealed class Params_get_IsOnZeroTick
        {
            public InputControl self;
        }

        public sealed class Params_get_IsStandard
        {
            public InputControl self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Handle_BeforeArgs get_Handle
        {
            add
            {
                HookHandler._beforeget_Handle += value;
                HookHandler.Hookget_Handle();
            }
            remove => HookHandler._beforeget_Handle -= value;
        }

        public static event Delegates.set_Handle_BeforeArgs set_Handle
        {
            add
            {
                HookHandler._beforeset_Handle += value;
                HookHandler.Hookset_Handle();
            }
            remove => HookHandler._beforeset_Handle -= value;
        }

        public static event Delegates.get_Target_BeforeArgs get_Target
        {
            add
            {
                HookHandler._beforeget_Target += value;
                HookHandler.Hookget_Target();
            }
            remove => HookHandler._beforeget_Target -= value;
        }

        public static event Delegates.set_Target_BeforeArgs set_Target
        {
            add
            {
                HookHandler._beforeset_Target += value;
                HookHandler.Hookset_Target();
            }
            remove => HookHandler._beforeset_Target -= value;
        }

        public static event Delegates.get_IsButton_BeforeArgs get_IsButton
        {
            add
            {
                HookHandler._beforeget_IsButton += value;
                HookHandler.Hookget_IsButton();
            }
            remove => HookHandler._beforeget_IsButton -= value;
        }

        public static event Delegates.set_IsButton_BeforeArgs set_IsButton
        {
            add
            {
                HookHandler._beforeset_IsButton += value;
                HookHandler.Hookset_IsButton();
            }
            remove => HookHandler._beforeset_IsButton -= value;
        }

        public static event Delegates.get_IsAnalog_BeforeArgs get_IsAnalog
        {
            add
            {
                HookHandler._beforeget_IsAnalog += value;
                HookHandler.Hookget_IsAnalog();
            }
            remove => HookHandler._beforeget_IsAnalog -= value;
        }

        public static event Delegates.set_IsAnalog_BeforeArgs set_IsAnalog
        {
            add
            {
                HookHandler._beforeset_IsAnalog += value;
                HookHandler.Hookset_IsAnalog();
            }
            remove => HookHandler._beforeset_IsAnalog -= value;
        }

        public static event Delegates.SetZeroTick_BeforeArgs SetZeroTick
        {
            add
            {
                HookHandler._beforeSetZeroTick += value;
                HookHandler.HookSetZeroTick();
            }
            remove => HookHandler._beforeSetZeroTick -= value;
        }

        public static event Delegates.get_IsOnZeroTick_BeforeArgs get_IsOnZeroTick
        {
            add
            {
                HookHandler._beforeget_IsOnZeroTick += value;
                HookHandler.Hookget_IsOnZeroTick();
            }
            remove => HookHandler._beforeget_IsOnZeroTick -= value;
        }

        public static event Delegates.get_IsStandard_BeforeArgs get_IsStandard
        {
            add
            {
                HookHandler._beforeget_IsStandard += value;
                HookHandler.Hookget_IsStandard();
            }
            remove => HookHandler._beforeget_IsStandard -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Handle_NormalArgs get_Handle
        {
            add
            {
                HookHandler._afterget_Handle += value;
                HookHandler.Hookget_Handle();
            }
            remove => HookHandler._afterget_Handle -= value;
        }

        public static event Delegates.set_Handle_NormalArgs set_Handle
        {
            add
            {
                HookHandler._afterset_Handle += value;
                HookHandler.Hookset_Handle();
            }
            remove => HookHandler._afterset_Handle -= value;
        }

        public static event Delegates.get_Target_NormalArgs get_Target
        {
            add
            {
                HookHandler._afterget_Target += value;
                HookHandler.Hookget_Target();
            }
            remove => HookHandler._afterget_Target -= value;
        }

        public static event Delegates.set_Target_NormalArgs set_Target
        {
            add
            {
                HookHandler._afterset_Target += value;
                HookHandler.Hookset_Target();
            }
            remove => HookHandler._afterset_Target -= value;
        }

        public static event Delegates.get_IsButton_NormalArgs get_IsButton
        {
            add
            {
                HookHandler._afterget_IsButton += value;
                HookHandler.Hookget_IsButton();
            }
            remove => HookHandler._afterget_IsButton -= value;
        }

        public static event Delegates.set_IsButton_NormalArgs set_IsButton
        {
            add
            {
                HookHandler._afterset_IsButton += value;
                HookHandler.Hookset_IsButton();
            }
            remove => HookHandler._afterset_IsButton -= value;
        }

        public static event Delegates.get_IsAnalog_NormalArgs get_IsAnalog
        {
            add
            {
                HookHandler._afterget_IsAnalog += value;
                HookHandler.Hookget_IsAnalog();
            }
            remove => HookHandler._afterget_IsAnalog -= value;
        }

        public static event Delegates.set_IsAnalog_NormalArgs set_IsAnalog
        {
            add
            {
                HookHandler._afterset_IsAnalog += value;
                HookHandler.Hookset_IsAnalog();
            }
            remove => HookHandler._afterset_IsAnalog -= value;
        }

        public static event Delegates.SetZeroTick_NormalArgs SetZeroTick
        {
            add
            {
                HookHandler._afterSetZeroTick += value;
                HookHandler.HookSetZeroTick();
            }
            remove => HookHandler._afterSetZeroTick -= value;
        }

        public static event Delegates.get_IsOnZeroTick_NormalArgs get_IsOnZeroTick
        {
            add
            {
                HookHandler._afterget_IsOnZeroTick += value;
                HookHandler.Hookget_IsOnZeroTick();
            }
            remove => HookHandler._afterget_IsOnZeroTick -= value;
        }

        public static event Delegates.get_IsStandard_NormalArgs get_IsStandard
        {
            add
            {
                HookHandler._afterget_IsStandard += value;
                HookHandler.Hookget_IsStandard();
            }
            remove => HookHandler._afterget_IsStandard -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Handle_NormalArgs get_Handle
        {
            add => HookEndpointManager.Add<Delegates.get_Handle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "get_Handle"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Handle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "get_Handle"), value);
        }

        public static event Delegates.set_Handle_NormalArgs set_Handle
        {
            add => HookEndpointManager.Add<Delegates.set_Handle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "set_Handle"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Handle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "set_Handle"), value);
        }

        public static event Delegates.get_Target_NormalArgs get_Target
        {
            add => HookEndpointManager.Add<Delegates.get_Target_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "get_Target"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Target_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "get_Target"), value);
        }

        public static event Delegates.set_Target_NormalArgs set_Target
        {
            add => HookEndpointManager.Add<Delegates.set_Target_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "set_Target"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Target_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "set_Target"), value);
        }

        public static event Delegates.get_IsButton_NormalArgs get_IsButton
        {
            add => HookEndpointManager.Add<Delegates.get_IsButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "get_IsButton"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "get_IsButton"), value);
        }

        public static event Delegates.set_IsButton_NormalArgs set_IsButton
        {
            add => HookEndpointManager.Add<Delegates.set_IsButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "set_IsButton"), value);
            remove => HookEndpointManager.Remove<Delegates.set_IsButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "set_IsButton"), value);
        }

        public static event Delegates.get_IsAnalog_NormalArgs get_IsAnalog
        {
            add => HookEndpointManager.Add<Delegates.get_IsAnalog_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "get_IsAnalog"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsAnalog_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "get_IsAnalog"), value);
        }

        public static event Delegates.set_IsAnalog_NormalArgs set_IsAnalog
        {
            add => HookEndpointManager.Add<Delegates.set_IsAnalog_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "set_IsAnalog"), value);
            remove => HookEndpointManager.Remove<Delegates.set_IsAnalog_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "set_IsAnalog"), value);
        }

        public static event Delegates.SetZeroTick_NormalArgs SetZeroTick
        {
            add => HookEndpointManager.Add<Delegates.SetZeroTick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "SetZeroTick"), value);
            remove => HookEndpointManager.Remove<Delegates.SetZeroTick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "SetZeroTick"), value);
        }

        public static event Delegates.get_IsOnZeroTick_NormalArgs get_IsOnZeroTick
        {
            add => HookEndpointManager.Add<Delegates.get_IsOnZeroTick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "get_IsOnZeroTick"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsOnZeroTick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "get_IsOnZeroTick"), value);
        }

        public static event Delegates.get_IsStandard_NormalArgs get_IsStandard
        {
            add => HookEndpointManager.Add<Delegates.get_IsStandard_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "get_IsStandard"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsStandard_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControl), "get_IsStandard"), value);
        }
    }
}