using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for InputControl class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnInputControl
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_Handle()
{
if (!HookedList.Contains("get_Handle"))
{
HookedList.Add("get_Handle");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "get_Handle", true), get_Handle);

}
}
internal static event Delegates.get_Handle_BeforeArgs _beforeget_Handle;
internal static event Delegates.get_Handle_AfterArgs _afterget_Handle;
private static string get_Handle(Func<InControl.InputControl, string> orig, InControl.InputControl self)
{
Delegates.Params_get_Handle @params = new() 
{
self = self
};
if (_beforeget_Handle != null)
{
foreach (Delegates.get_Handle_BeforeArgs toInvoke in _beforeget_Handle.GetInvocationList())
{
try
{
_beforeget_Handle?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_Handle != null)
{
foreach (Delegates.get_Handle_AfterArgs toInvoke in _afterget_Handle.GetInvocationList())
{
try
{
retVal = _afterget_Handle.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_Handle()
{
if (!HookedList.Contains("set_Handle"))
{
HookedList.Add("set_Handle");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "set_Handle", true), set_Handle);

}
}
internal static event Delegates.set_Handle_BeforeArgs _beforeset_Handle;
internal static event Delegates.set_Handle_AfterArgs _afterset_Handle;
private static void set_Handle(Action<InControl.InputControl,  string> orig, InControl.InputControl self,  string value)
{
Delegates.Params_set_Handle @params = new() 
{
self = self
, value = value
};
if (_beforeset_Handle != null)
{
foreach (Delegates.set_Handle_BeforeArgs toInvoke in _beforeset_Handle.GetInvocationList())
{
try
{
_beforeset_Handle?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_Handle != null)
{
foreach (Delegates.set_Handle_AfterArgs toInvoke in _afterset_Handle.GetInvocationList())
{
try
{
_afterset_Handle.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_Target()
{
if (!HookedList.Contains("get_Target"))
{
HookedList.Add("get_Target");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "get_Target", true), get_Target);

}
}
internal static event Delegates.get_Target_BeforeArgs _beforeget_Target;
internal static event Delegates.get_Target_AfterArgs _afterget_Target;
private static InControl.InputControlType get_Target(Func<InControl.InputControl, InControl.InputControlType> orig, InControl.InputControl self)
{
Delegates.Params_get_Target @params = new() 
{
self = self
};
if (_beforeget_Target != null)
{
foreach (Delegates.get_Target_BeforeArgs toInvoke in _beforeget_Target.GetInvocationList())
{
try
{
_beforeget_Target?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_Target != null)
{
foreach (Delegates.get_Target_AfterArgs toInvoke in _afterget_Target.GetInvocationList())
{
try
{
retVal = _afterget_Target.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_Target()
{
if (!HookedList.Contains("set_Target"))
{
HookedList.Add("set_Target");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "set_Target", true), set_Target);

}
}
internal static event Delegates.set_Target_BeforeArgs _beforeset_Target;
internal static event Delegates.set_Target_AfterArgs _afterset_Target;
private static void set_Target(Action<InControl.InputControl,  InControl.InputControlType> orig, InControl.InputControl self,  InControl.InputControlType value)
{
Delegates.Params_set_Target @params = new() 
{
self = self
, value = value
};
if (_beforeset_Target != null)
{
foreach (Delegates.set_Target_BeforeArgs toInvoke in _beforeset_Target.GetInvocationList())
{
try
{
_beforeset_Target?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_Target != null)
{
foreach (Delegates.set_Target_AfterArgs toInvoke in _afterset_Target.GetInvocationList())
{
try
{
_afterset_Target.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_IsButton()
{
if (!HookedList.Contains("get_IsButton"))
{
HookedList.Add("get_IsButton");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "get_IsButton", true), get_IsButton);

}
}
internal static event Delegates.get_IsButton_BeforeArgs _beforeget_IsButton;
internal static event Delegates.get_IsButton_AfterArgs _afterget_IsButton;
private static bool get_IsButton(Func<InControl.InputControl, bool> orig, InControl.InputControl self)
{
Delegates.Params_get_IsButton @params = new() 
{
self = self
};
if (_beforeget_IsButton != null)
{
foreach (Delegates.get_IsButton_BeforeArgs toInvoke in _beforeget_IsButton.GetInvocationList())
{
try
{
_beforeget_IsButton?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_IsButton != null)
{
foreach (Delegates.get_IsButton_AfterArgs toInvoke in _afterget_IsButton.GetInvocationList())
{
try
{
retVal = _afterget_IsButton.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_IsButton()
{
if (!HookedList.Contains("set_IsButton"))
{
HookedList.Add("set_IsButton");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "set_IsButton", true), set_IsButton);

}
}
internal static event Delegates.set_IsButton_BeforeArgs _beforeset_IsButton;
internal static event Delegates.set_IsButton_AfterArgs _afterset_IsButton;
private static void set_IsButton(Action<InControl.InputControl,  bool> orig, InControl.InputControl self,  bool value)
{
Delegates.Params_set_IsButton @params = new() 
{
self = self
, value = value
};
if (_beforeset_IsButton != null)
{
foreach (Delegates.set_IsButton_BeforeArgs toInvoke in _beforeset_IsButton.GetInvocationList())
{
try
{
_beforeset_IsButton?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_IsButton != null)
{
foreach (Delegates.set_IsButton_AfterArgs toInvoke in _afterset_IsButton.GetInvocationList())
{
try
{
_afterset_IsButton.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_IsAnalog()
{
if (!HookedList.Contains("get_IsAnalog"))
{
HookedList.Add("get_IsAnalog");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "get_IsAnalog", true), get_IsAnalog);

}
}
internal static event Delegates.get_IsAnalog_BeforeArgs _beforeget_IsAnalog;
internal static event Delegates.get_IsAnalog_AfterArgs _afterget_IsAnalog;
private static bool get_IsAnalog(Func<InControl.InputControl, bool> orig, InControl.InputControl self)
{
Delegates.Params_get_IsAnalog @params = new() 
{
self = self
};
if (_beforeget_IsAnalog != null)
{
foreach (Delegates.get_IsAnalog_BeforeArgs toInvoke in _beforeget_IsAnalog.GetInvocationList())
{
try
{
_beforeget_IsAnalog?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_IsAnalog != null)
{
foreach (Delegates.get_IsAnalog_AfterArgs toInvoke in _afterget_IsAnalog.GetInvocationList())
{
try
{
retVal = _afterget_IsAnalog.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_IsAnalog()
{
if (!HookedList.Contains("set_IsAnalog"))
{
HookedList.Add("set_IsAnalog");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "set_IsAnalog", true), set_IsAnalog);

}
}
internal static event Delegates.set_IsAnalog_BeforeArgs _beforeset_IsAnalog;
internal static event Delegates.set_IsAnalog_AfterArgs _afterset_IsAnalog;
private static void set_IsAnalog(Action<InControl.InputControl,  bool> orig, InControl.InputControl self,  bool value)
{
Delegates.Params_set_IsAnalog @params = new() 
{
self = self
, value = value
};
if (_beforeset_IsAnalog != null)
{
foreach (Delegates.set_IsAnalog_BeforeArgs toInvoke in _beforeset_IsAnalog.GetInvocationList())
{
try
{
_beforeset_IsAnalog?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_IsAnalog != null)
{
foreach (Delegates.set_IsAnalog_AfterArgs toInvoke in _afterset_IsAnalog.GetInvocationList())
{
try
{
_afterset_IsAnalog.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetZeroTick()
{
if (!HookedList.Contains("SetZeroTick"))
{
HookedList.Add("SetZeroTick");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "SetZeroTick", true), SetZeroTick);

}
}
internal static event Delegates.SetZeroTick_BeforeArgs _beforeSetZeroTick;
internal static event Delegates.SetZeroTick_AfterArgs _afterSetZeroTick;
private static void SetZeroTick(Action<InControl.InputControl> orig, InControl.InputControl self)
{
Delegates.Params_SetZeroTick @params = new() 
{
self = self
};
if (_beforeSetZeroTick != null)
{
foreach (Delegates.SetZeroTick_BeforeArgs toInvoke in _beforeSetZeroTick.GetInvocationList())
{
try
{
_beforeSetZeroTick?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetZeroTick != null)
{
foreach (Delegates.SetZeroTick_AfterArgs toInvoke in _afterSetZeroTick.GetInvocationList())
{
try
{
_afterSetZeroTick.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_IsOnZeroTick()
{
if (!HookedList.Contains("get_IsOnZeroTick"))
{
HookedList.Add("get_IsOnZeroTick");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "get_IsOnZeroTick", true), get_IsOnZeroTick);

}
}
internal static event Delegates.get_IsOnZeroTick_BeforeArgs _beforeget_IsOnZeroTick;
internal static event Delegates.get_IsOnZeroTick_AfterArgs _afterget_IsOnZeroTick;
private static bool get_IsOnZeroTick(Func<InControl.InputControl, bool> orig, InControl.InputControl self)
{
Delegates.Params_get_IsOnZeroTick @params = new() 
{
self = self
};
if (_beforeget_IsOnZeroTick != null)
{
foreach (Delegates.get_IsOnZeroTick_BeforeArgs toInvoke in _beforeget_IsOnZeroTick.GetInvocationList())
{
try
{
_beforeget_IsOnZeroTick?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_IsOnZeroTick != null)
{
foreach (Delegates.get_IsOnZeroTick_AfterArgs toInvoke in _afterget_IsOnZeroTick.GetInvocationList())
{
try
{
retVal = _afterget_IsOnZeroTick.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_IsStandard()
{
if (!HookedList.Contains("get_IsStandard"))
{
HookedList.Add("get_IsStandard");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "get_IsStandard", true), get_IsStandard);

}
}
internal static event Delegates.get_IsStandard_BeforeArgs _beforeget_IsStandard;
internal static event Delegates.get_IsStandard_AfterArgs _afterget_IsStandard;
private static bool get_IsStandard(Func<InControl.InputControl, bool> orig, InControl.InputControl self)
{
Delegates.Params_get_IsStandard @params = new() 
{
self = self
};
if (_beforeget_IsStandard != null)
{
foreach (Delegates.get_IsStandard_BeforeArgs toInvoke in _beforeget_IsStandard.GetInvocationList())
{
try
{
_beforeget_IsStandard?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_IsStandard != null)
{
foreach (Delegates.get_IsStandard_AfterArgs toInvoke in _afterget_IsStandard.GetInvocationList())
{
try
{
retVal = _afterget_IsStandard.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_Handle
{
public InControl.InputControl self;
}
public delegate void get_Handle_BeforeArgs(Params_get_Handle args);
public delegate string get_Handle_AfterArgs(Params_get_Handle args, string ret);
public delegate string get_Handle_WithArgs (Func<InControl.InputControl, string> orig, InControl.InputControl self);
public sealed class Params_set_Handle
{
public InControl.InputControl self;
public string value;
}
public delegate void set_Handle_BeforeArgs(Params_set_Handle args);
public delegate void set_Handle_AfterArgs(Params_set_Handle args);
public delegate void set_Handle_WithArgs (Action<InControl.InputControl,  string> orig, InControl.InputControl self,  string value);
public sealed class Params_get_Target
{
public InControl.InputControl self;
}
public delegate void get_Target_BeforeArgs(Params_get_Target args);
public delegate InControl.InputControlType get_Target_AfterArgs(Params_get_Target args, InControl.InputControlType ret);
public delegate InControl.InputControlType get_Target_WithArgs (Func<InControl.InputControl, InControl.InputControlType> orig, InControl.InputControl self);
public sealed class Params_set_Target
{
public InControl.InputControl self;
public InControl.InputControlType value;
}
public delegate void set_Target_BeforeArgs(Params_set_Target args);
public delegate void set_Target_AfterArgs(Params_set_Target args);
public delegate void set_Target_WithArgs (Action<InControl.InputControl,  InControl.InputControlType> orig, InControl.InputControl self,  InControl.InputControlType value);
public sealed class Params_get_IsButton
{
public InControl.InputControl self;
}
public delegate void get_IsButton_BeforeArgs(Params_get_IsButton args);
public delegate bool get_IsButton_AfterArgs(Params_get_IsButton args, bool ret);
public delegate bool get_IsButton_WithArgs (Func<InControl.InputControl, bool> orig, InControl.InputControl self);
public sealed class Params_set_IsButton
{
public InControl.InputControl self;
public bool value;
}
public delegate void set_IsButton_BeforeArgs(Params_set_IsButton args);
public delegate void set_IsButton_AfterArgs(Params_set_IsButton args);
public delegate void set_IsButton_WithArgs (Action<InControl.InputControl,  bool> orig, InControl.InputControl self,  bool value);
public sealed class Params_get_IsAnalog
{
public InControl.InputControl self;
}
public delegate void get_IsAnalog_BeforeArgs(Params_get_IsAnalog args);
public delegate bool get_IsAnalog_AfterArgs(Params_get_IsAnalog args, bool ret);
public delegate bool get_IsAnalog_WithArgs (Func<InControl.InputControl, bool> orig, InControl.InputControl self);
public sealed class Params_set_IsAnalog
{
public InControl.InputControl self;
public bool value;
}
public delegate void set_IsAnalog_BeforeArgs(Params_set_IsAnalog args);
public delegate void set_IsAnalog_AfterArgs(Params_set_IsAnalog args);
public delegate void set_IsAnalog_WithArgs (Action<InControl.InputControl,  bool> orig, InControl.InputControl self,  bool value);
public sealed class Params_SetZeroTick
{
public InControl.InputControl self;
}
public delegate void SetZeroTick_BeforeArgs(Params_SetZeroTick args);
public delegate void SetZeroTick_AfterArgs(Params_SetZeroTick args);
public delegate void SetZeroTick_WithArgs (Action<InControl.InputControl> orig, InControl.InputControl self);
public sealed class Params_get_IsOnZeroTick
{
public InControl.InputControl self;
}
public delegate void get_IsOnZeroTick_BeforeArgs(Params_get_IsOnZeroTick args);
public delegate bool get_IsOnZeroTick_AfterArgs(Params_get_IsOnZeroTick args, bool ret);
public delegate bool get_IsOnZeroTick_WithArgs (Func<InControl.InputControl, bool> orig, InControl.InputControl self);
public sealed class Params_get_IsStandard
{
public InControl.InputControl self;
}
public delegate void get_IsStandard_BeforeArgs(Params_get_IsStandard args);
public delegate bool get_IsStandard_AfterArgs(Params_get_IsStandard args, bool ret);
public delegate bool get_IsStandard_WithArgs (Func<InControl.InputControl, bool> orig, InControl.InputControl self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_Handle_BeforeArgs get_Handle
{
add
{

HookHandler._beforeget_Handle += value;
HookHandler.Hookget_Handle();
}
remove => HookHandler._beforeget_Handle -= value;
}
public static event Delegates.set_Handle_BeforeArgs set_Handle
{
add
{

HookHandler._beforeset_Handle += value;
HookHandler.Hookset_Handle();
}
remove => HookHandler._beforeset_Handle -= value;
}
public static event Delegates.get_Target_BeforeArgs get_Target
{
add
{

HookHandler._beforeget_Target += value;
HookHandler.Hookget_Target();
}
remove => HookHandler._beforeget_Target -= value;
}
public static event Delegates.set_Target_BeforeArgs set_Target
{
add
{

HookHandler._beforeset_Target += value;
HookHandler.Hookset_Target();
}
remove => HookHandler._beforeset_Target -= value;
}
public static event Delegates.get_IsButton_BeforeArgs get_IsButton
{
add
{

HookHandler._beforeget_IsButton += value;
HookHandler.Hookget_IsButton();
}
remove => HookHandler._beforeget_IsButton -= value;
}
public static event Delegates.set_IsButton_BeforeArgs set_IsButton
{
add
{

HookHandler._beforeset_IsButton += value;
HookHandler.Hookset_IsButton();
}
remove => HookHandler._beforeset_IsButton -= value;
}
public static event Delegates.get_IsAnalog_BeforeArgs get_IsAnalog
{
add
{

HookHandler._beforeget_IsAnalog += value;
HookHandler.Hookget_IsAnalog();
}
remove => HookHandler._beforeget_IsAnalog -= value;
}
public static event Delegates.set_IsAnalog_BeforeArgs set_IsAnalog
{
add
{

HookHandler._beforeset_IsAnalog += value;
HookHandler.Hookset_IsAnalog();
}
remove => HookHandler._beforeset_IsAnalog -= value;
}
public static event Delegates.SetZeroTick_BeforeArgs SetZeroTick
{
add
{

HookHandler._beforeSetZeroTick += value;
HookHandler.HookSetZeroTick();
}
remove => HookHandler._beforeSetZeroTick -= value;
}
public static event Delegates.get_IsOnZeroTick_BeforeArgs get_IsOnZeroTick
{
add
{

HookHandler._beforeget_IsOnZeroTick += value;
HookHandler.Hookget_IsOnZeroTick();
}
remove => HookHandler._beforeget_IsOnZeroTick -= value;
}
public static event Delegates.get_IsStandard_BeforeArgs get_IsStandard
{
add
{

HookHandler._beforeget_IsStandard += value;
HookHandler.Hookget_IsStandard();
}
remove => HookHandler._beforeget_IsStandard -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_Handle_AfterArgs get_Handle
{
add
{

HookHandler._afterget_Handle += value;
HookHandler.Hookget_Handle();
}
remove => HookHandler._afterget_Handle -= value;
}
public static event Delegates.set_Handle_AfterArgs set_Handle
{
add
{

HookHandler._afterset_Handle += value;
HookHandler.Hookset_Handle();
}
remove => HookHandler._afterset_Handle -= value;
}
public static event Delegates.get_Target_AfterArgs get_Target
{
add
{

HookHandler._afterget_Target += value;
HookHandler.Hookget_Target();
}
remove => HookHandler._afterget_Target -= value;
}
public static event Delegates.set_Target_AfterArgs set_Target
{
add
{

HookHandler._afterset_Target += value;
HookHandler.Hookset_Target();
}
remove => HookHandler._afterset_Target -= value;
}
public static event Delegates.get_IsButton_AfterArgs get_IsButton
{
add
{

HookHandler._afterget_IsButton += value;
HookHandler.Hookget_IsButton();
}
remove => HookHandler._afterget_IsButton -= value;
}
public static event Delegates.set_IsButton_AfterArgs set_IsButton
{
add
{

HookHandler._afterset_IsButton += value;
HookHandler.Hookset_IsButton();
}
remove => HookHandler._afterset_IsButton -= value;
}
public static event Delegates.get_IsAnalog_AfterArgs get_IsAnalog
{
add
{

HookHandler._afterget_IsAnalog += value;
HookHandler.Hookget_IsAnalog();
}
remove => HookHandler._afterget_IsAnalog -= value;
}
public static event Delegates.set_IsAnalog_AfterArgs set_IsAnalog
{
add
{

HookHandler._afterset_IsAnalog += value;
HookHandler.Hookset_IsAnalog();
}
remove => HookHandler._afterset_IsAnalog -= value;
}
public static event Delegates.SetZeroTick_AfterArgs SetZeroTick
{
add
{

HookHandler._afterSetZeroTick += value;
HookHandler.HookSetZeroTick();
}
remove => HookHandler._afterSetZeroTick -= value;
}
public static event Delegates.get_IsOnZeroTick_AfterArgs get_IsOnZeroTick
{
add
{

HookHandler._afterget_IsOnZeroTick += value;
HookHandler.Hookget_IsOnZeroTick();
}
remove => HookHandler._afterget_IsOnZeroTick -= value;
}
public static event Delegates.get_IsStandard_AfterArgs get_IsStandard
{
add
{

HookHandler._afterget_IsStandard += value;
HookHandler.Hookget_IsStandard();
}
remove => HookHandler._afterget_IsStandard -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_Handle_WithArgs get_Handle
{
add => HookEndpointManager.Add<Delegates.get_Handle_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "get_Handle", true), value);
remove => HookEndpointManager.Remove<Delegates.get_Handle_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "get_Handle", true), value);
}
public static event Delegates.set_Handle_WithArgs set_Handle
{
add => HookEndpointManager.Add<Delegates.set_Handle_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "set_Handle", true), value);
remove => HookEndpointManager.Remove<Delegates.set_Handle_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "set_Handle", true), value);
}
public static event Delegates.get_Target_WithArgs get_Target
{
add => HookEndpointManager.Add<Delegates.get_Target_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "get_Target", true), value);
remove => HookEndpointManager.Remove<Delegates.get_Target_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "get_Target", true), value);
}
public static event Delegates.set_Target_WithArgs set_Target
{
add => HookEndpointManager.Add<Delegates.set_Target_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "set_Target", true), value);
remove => HookEndpointManager.Remove<Delegates.set_Target_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "set_Target", true), value);
}
public static event Delegates.get_IsButton_WithArgs get_IsButton
{
add => HookEndpointManager.Add<Delegates.get_IsButton_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "get_IsButton", true), value);
remove => HookEndpointManager.Remove<Delegates.get_IsButton_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "get_IsButton", true), value);
}
public static event Delegates.set_IsButton_WithArgs set_IsButton
{
add => HookEndpointManager.Add<Delegates.set_IsButton_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "set_IsButton", true), value);
remove => HookEndpointManager.Remove<Delegates.set_IsButton_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "set_IsButton", true), value);
}
public static event Delegates.get_IsAnalog_WithArgs get_IsAnalog
{
add => HookEndpointManager.Add<Delegates.get_IsAnalog_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "get_IsAnalog", true), value);
remove => HookEndpointManager.Remove<Delegates.get_IsAnalog_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "get_IsAnalog", true), value);
}
public static event Delegates.set_IsAnalog_WithArgs set_IsAnalog
{
add => HookEndpointManager.Add<Delegates.set_IsAnalog_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "set_IsAnalog", true), value);
remove => HookEndpointManager.Remove<Delegates.set_IsAnalog_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "set_IsAnalog", true), value);
}
public static event Delegates.SetZeroTick_WithArgs SetZeroTick
{
add => HookEndpointManager.Add<Delegates.SetZeroTick_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "SetZeroTick", true), value);
remove => HookEndpointManager.Remove<Delegates.SetZeroTick_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "SetZeroTick", true), value);
}
public static event Delegates.get_IsOnZeroTick_WithArgs get_IsOnZeroTick
{
add => HookEndpointManager.Add<Delegates.get_IsOnZeroTick_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "get_IsOnZeroTick", true), value);
remove => HookEndpointManager.Remove<Delegates.get_IsOnZeroTick_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "get_IsOnZeroTick", true), value);
}
public static event Delegates.get_IsStandard_WithArgs get_IsStandard
{
add => HookEndpointManager.Add<Delegates.get_IsStandard_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "get_IsStandard", true), value);
remove => HookEndpointManager.Remove<Delegates.get_IsStandard_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.InputControl), "get_IsStandard", true), value);
}
}

}
