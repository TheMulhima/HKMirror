using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for tk2dUIProgressBar class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUIProgressBar
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.tk2dUIProgressBar.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.tk2dUIProgressBar.orig_Start orig, tk2dUIProgressBar self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_Value()
        {
            if (!HookedList.Contains("get_Value"))
            {
                HookedList.Add("get_Value");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIProgressBar), "get_Value", true), get_Value);
            }
        }

        internal static event Delegates.get_Value_BeforeArgs _beforeget_Value;
        internal static event Delegates.get_Value_AfterArgs _afterget_Value;

        private static float get_Value(Func<tk2dUIProgressBar, float> orig, tk2dUIProgressBar self)
        {
            Delegates.Params_get_Value @params = new()
            {
                self = self
            };
            if (_beforeget_Value != null)
            {
                foreach (Delegates.get_Value_BeforeArgs toInvoke in _beforeget_Value.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Value?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Value != null)
            {
                foreach (Delegates.get_Value_AfterArgs toInvoke in _afterget_Value.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Value.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_Value()
        {
            if (!HookedList.Contains("set_Value"))
            {
                HookedList.Add("set_Value");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIProgressBar), "set_Value", true), set_Value);
            }
        }

        internal static event Delegates.set_Value_BeforeArgs _beforeset_Value;
        internal static event Delegates.set_Value_AfterArgs _afterset_Value;

        private static void set_Value(Action<tk2dUIProgressBar, float> orig, tk2dUIProgressBar self, float value)
        {
            Delegates.Params_set_Value @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Value != null)
            {
                foreach (Delegates.set_Value_BeforeArgs toInvoke in _beforeset_Value.GetInvocationList())
                {
                    try
                    {
                        _beforeset_Value?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Value != null)
            {
                foreach (Delegates.set_Value_AfterArgs toInvoke in _afterset_Value.GetInvocationList())
                {
                    try
                    {
                        _afterset_Value.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookInitializeSlicedSpriteDimensions()
        {
            if (!HookedList.Contains("InitializeSlicedSpriteDimensions"))
            {
                HookedList.Add("InitializeSlicedSpriteDimensions");
                On.tk2dUIProgressBar.InitializeSlicedSpriteDimensions += InitializeSlicedSpriteDimensions;
            }
        }

        internal static event Delegates.InitializeSlicedSpriteDimensions_BeforeArgs
            _beforeInitializeSlicedSpriteDimensions;

        internal static event Delegates.InitializeSlicedSpriteDimensions_AfterArgs
            _afterInitializeSlicedSpriteDimensions;

        private static void InitializeSlicedSpriteDimensions(
            On.tk2dUIProgressBar.orig_InitializeSlicedSpriteDimensions orig, tk2dUIProgressBar self)
        {
            Delegates.Params_InitializeSlicedSpriteDimensions @params = new()
            {
                self = self
            };
            if (_beforeInitializeSlicedSpriteDimensions != null)
            {
                foreach (Delegates.InitializeSlicedSpriteDimensions_BeforeArgs toInvoke in
                         _beforeInitializeSlicedSpriteDimensions.GetInvocationList())
                {
                    try
                    {
                        _beforeInitializeSlicedSpriteDimensions?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterInitializeSlicedSpriteDimensions != null)
            {
                foreach (Delegates.InitializeSlicedSpriteDimensions_AfterArgs toInvoke in
                         _afterInitializeSlicedSpriteDimensions.GetInvocationList())
                {
                    try
                    {
                        _afterInitializeSlicedSpriteDimensions.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Start
        {
            public tk2dUIProgressBar self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<tk2dUIProgressBar> orig, tk2dUIProgressBar self);

        public sealed class Params_get_Value
        {
            public tk2dUIProgressBar self;
        }

        public delegate void get_Value_BeforeArgs(Params_get_Value args);

        public delegate float get_Value_AfterArgs(Params_get_Value args, float ret);

        public delegate float get_Value_WithArgs(Func<tk2dUIProgressBar, float> orig, tk2dUIProgressBar self);

        public sealed class Params_set_Value
        {
            public tk2dUIProgressBar self;
            public float value;
        }

        public delegate void set_Value_BeforeArgs(Params_set_Value args);

        public delegate void set_Value_AfterArgs(Params_set_Value args);

        public delegate void set_Value_WithArgs(Action<tk2dUIProgressBar, float> orig, tk2dUIProgressBar self,
            float value);

        public sealed class Params_InitializeSlicedSpriteDimensions
        {
            public tk2dUIProgressBar self;
        }

        public delegate void InitializeSlicedSpriteDimensions_BeforeArgs(Params_InitializeSlicedSpriteDimensions args);

        public delegate void InitializeSlicedSpriteDimensions_AfterArgs(Params_InitializeSlicedSpriteDimensions args);

        public delegate void InitializeSlicedSpriteDimensions_WithArgs(Action<tk2dUIProgressBar> orig,
            tk2dUIProgressBar self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.get_Value_BeforeArgs get_Value
        {
            add
            {
                HookHandler._beforeget_Value += value;
                HookHandler.Hookget_Value();
            }
            remove => HookHandler._beforeget_Value -= value;
        }

        public static event Delegates.set_Value_BeforeArgs set_Value
        {
            add
            {
                HookHandler._beforeset_Value += value;
                HookHandler.Hookset_Value();
            }
            remove => HookHandler._beforeset_Value -= value;
        }

        public static event Delegates.InitializeSlicedSpriteDimensions_BeforeArgs InitializeSlicedSpriteDimensions
        {
            add
            {
                HookHandler._beforeInitializeSlicedSpriteDimensions += value;
                HookHandler.HookInitializeSlicedSpriteDimensions();
            }
            remove => HookHandler._beforeInitializeSlicedSpriteDimensions -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.get_Value_AfterArgs get_Value
        {
            add
            {
                HookHandler._afterget_Value += value;
                HookHandler.Hookget_Value();
            }
            remove => HookHandler._afterget_Value -= value;
        }

        public static event Delegates.set_Value_AfterArgs set_Value
        {
            add
            {
                HookHandler._afterset_Value += value;
                HookHandler.Hookset_Value();
            }
            remove => HookHandler._afterset_Value -= value;
        }

        public static event Delegates.InitializeSlicedSpriteDimensions_AfterArgs InitializeSlicedSpriteDimensions
        {
            add
            {
                HookHandler._afterInitializeSlicedSpriteDimensions += value;
                HookHandler.HookInitializeSlicedSpriteDimensions();
            }
            remove => HookHandler._afterInitializeSlicedSpriteDimensions -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.tk2dUIProgressBar.hook_Start Start
        {
            add => On.tk2dUIProgressBar.Start += value;
            remove => On.tk2dUIProgressBar.Start -= value;
        }

        public static event Delegates.get_Value_WithArgs get_Value
        {
            add => HookEndpointManager.Add<Delegates.get_Value_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIProgressBar), "get_Value", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_Value_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIProgressBar), "get_Value", true), value);
        }

        public static event Delegates.set_Value_WithArgs set_Value
        {
            add => HookEndpointManager.Add<Delegates.set_Value_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIProgressBar), "set_Value", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_Value_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIProgressBar), "set_Value", true), value);
        }

        public static event On.tk2dUIProgressBar.hook_InitializeSlicedSpriteDimensions InitializeSlicedSpriteDimensions
        {
            add => On.tk2dUIProgressBar.InitializeSlicedSpriteDimensions += value;
            remove => On.tk2dUIProgressBar.InitializeSlicedSpriteDimensions -= value;
        }
    }
}