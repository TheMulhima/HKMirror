using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TMP_TextInfo class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTMP_TextInfo
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookClear()
        {
            if (!HookedList.Contains("Clear"))
            {
                HookedList.Add("Clear");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextInfo), "Clear"), Clear);
            }
        }

        internal static event Delegates.Clear_BeforeArgs _beforeClear;
        internal static event Delegates.Clear_NormalArgs _afterClear;

        private static void Clear(Action<TMP_TextInfo> orig, TMP_TextInfo self)
        {
            Delegates.Params_Clear @params = new()
            {
                self = self
            };
            _beforeClear?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClear != null) _afterClear.Invoke(@params);
        }

        internal static void HookClearMeshInfo()
        {
            if (!HookedList.Contains("ClearMeshInfo"))
            {
                HookedList.Add("ClearMeshInfo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextInfo), "ClearMeshInfo"), ClearMeshInfo);
            }
        }

        internal static event Delegates.ClearMeshInfo_BeforeArgs _beforeClearMeshInfo;
        internal static event Delegates.ClearMeshInfo_NormalArgs _afterClearMeshInfo;

        private static void ClearMeshInfo(Action<TMP_TextInfo, bool> orig, TMP_TextInfo self, bool updateMesh)
        {
            Delegates.Params_ClearMeshInfo @params = new()
            {
                self = self, updateMesh = updateMesh
            };
            _beforeClearMeshInfo?.Invoke(@params);
            self = @params.self;
            updateMesh = @params.updateMesh;
            orig(self, updateMesh);
            if (_afterClearMeshInfo != null) _afterClearMeshInfo.Invoke(@params);
        }

        internal static void HookClearAllMeshInfo()
        {
            if (!HookedList.Contains("ClearAllMeshInfo"))
            {
                HookedList.Add("ClearAllMeshInfo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextInfo), "ClearAllMeshInfo"), ClearAllMeshInfo);
            }
        }

        internal static event Delegates.ClearAllMeshInfo_BeforeArgs _beforeClearAllMeshInfo;
        internal static event Delegates.ClearAllMeshInfo_NormalArgs _afterClearAllMeshInfo;

        private static void ClearAllMeshInfo(Action<TMP_TextInfo> orig, TMP_TextInfo self)
        {
            Delegates.Params_ClearAllMeshInfo @params = new()
            {
                self = self
            };
            _beforeClearAllMeshInfo?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClearAllMeshInfo != null) _afterClearAllMeshInfo.Invoke(@params);
        }

        internal static void HookResetVertexLayout()
        {
            if (!HookedList.Contains("ResetVertexLayout"))
            {
                HookedList.Add("ResetVertexLayout");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextInfo), "ResetVertexLayout"), ResetVertexLayout);
            }
        }

        internal static event Delegates.ResetVertexLayout_BeforeArgs _beforeResetVertexLayout;
        internal static event Delegates.ResetVertexLayout_NormalArgs _afterResetVertexLayout;

        private static void ResetVertexLayout(Action<TMP_TextInfo, bool> orig, TMP_TextInfo self, bool isVolumetric)
        {
            Delegates.Params_ResetVertexLayout @params = new()
            {
                self = self, isVolumetric = isVolumetric
            };
            _beforeResetVertexLayout?.Invoke(@params);
            self = @params.self;
            isVolumetric = @params.isVolumetric;
            orig(self, isVolumetric);
            if (_afterResetVertexLayout != null) _afterResetVertexLayout.Invoke(@params);
        }

        internal static void HookClearUnusedVertices()
        {
            if (!HookedList.Contains("ClearUnusedVertices"))
            {
                HookedList.Add("ClearUnusedVertices");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextInfo), "ClearUnusedVertices"),
                    ClearUnusedVertices);
            }
        }

        internal static event Delegates.ClearUnusedVertices_BeforeArgs _beforeClearUnusedVertices;
        internal static event Delegates.ClearUnusedVertices_NormalArgs _afterClearUnusedVertices;

        private static void ClearUnusedVertices(Action<TMP_TextInfo, MaterialReference[]> orig, TMP_TextInfo self,
            MaterialReference[] materials)
        {
            Delegates.Params_ClearUnusedVertices @params = new()
            {
                self = self, materials = materials
            };
            _beforeClearUnusedVertices?.Invoke(@params);
            self = @params.self;
            materials = @params.materials;
            orig(self, materials);
            if (_afterClearUnusedVertices != null) _afterClearUnusedVertices.Invoke(@params);
        }

        internal static void HookClearLineInfo()
        {
            if (!HookedList.Contains("ClearLineInfo"))
            {
                HookedList.Add("ClearLineInfo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextInfo), "ClearLineInfo"), ClearLineInfo);
            }
        }

        internal static event Delegates.ClearLineInfo_BeforeArgs _beforeClearLineInfo;
        internal static event Delegates.ClearLineInfo_NormalArgs _afterClearLineInfo;

        private static void ClearLineInfo(Action<TMP_TextInfo> orig, TMP_TextInfo self)
        {
            Delegates.Params_ClearLineInfo @params = new()
            {
                self = self
            };
            _beforeClearLineInfo?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClearLineInfo != null) _afterClearLineInfo.Invoke(@params);
        }

        internal static void HookCopyMeshInfoVertexData()
        {
            if (!HookedList.Contains("CopyMeshInfoVertexData"))
            {
                HookedList.Add("CopyMeshInfoVertexData");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_TextInfo), "CopyMeshInfoVertexData"),
                    CopyMeshInfoVertexData);
            }
        }

        internal static event Delegates.CopyMeshInfoVertexData_BeforeArgs _beforeCopyMeshInfoVertexData;
        internal static event Delegates.CopyMeshInfoVertexData_NormalArgs _afterCopyMeshInfoVertexData;

        private static TMP_MeshInfo[] CopyMeshInfoVertexData(Func<TMP_TextInfo, TMP_MeshInfo[]> orig, TMP_TextInfo self)
        {
            Delegates.Params_CopyMeshInfoVertexData @params = new()
            {
                self = self
            };
            _beforeCopyMeshInfoVertexData?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCopyMeshInfoVertexData != null) retVal = _afterCopyMeshInfoVertexData.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Clear_BeforeArgs(Params_Clear args);

        public delegate void Clear_NormalArgs(Params_Clear args);

        public delegate void ClearAllMeshInfo_BeforeArgs(Params_ClearAllMeshInfo args);

        public delegate void ClearAllMeshInfo_NormalArgs(Params_ClearAllMeshInfo args);

        public delegate void ClearLineInfo_BeforeArgs(Params_ClearLineInfo args);

        public delegate void ClearLineInfo_NormalArgs(Params_ClearLineInfo args);

        public delegate void ClearMeshInfo_BeforeArgs(Params_ClearMeshInfo args);

        public delegate void ClearMeshInfo_NormalArgs(Params_ClearMeshInfo args);

        public delegate void ClearUnusedVertices_BeforeArgs(Params_ClearUnusedVertices args);

        public delegate void ClearUnusedVertices_NormalArgs(Params_ClearUnusedVertices args);

        public delegate void CopyMeshInfoVertexData_BeforeArgs(Params_CopyMeshInfoVertexData args);

        public delegate TMP_MeshInfo[] CopyMeshInfoVertexData_NormalArgs(Params_CopyMeshInfoVertexData args);

        public delegate void ResetVertexLayout_BeforeArgs(Params_ResetVertexLayout args);

        public delegate void ResetVertexLayout_NormalArgs(Params_ResetVertexLayout args);

        public sealed class Params_Clear
        {
            public TMP_TextInfo self;
        }

        public sealed class Params_ClearMeshInfo
        {
            public TMP_TextInfo self;
            public bool updateMesh;
        }

        public sealed class Params_ClearAllMeshInfo
        {
            public TMP_TextInfo self;
        }

        public sealed class Params_ResetVertexLayout
        {
            public bool isVolumetric;
            public TMP_TextInfo self;
        }

        public sealed class Params_ClearUnusedVertices
        {
            public MaterialReference[] materials;
            public TMP_TextInfo self;
        }

        public sealed class Params_ClearLineInfo
        {
            public TMP_TextInfo self;
        }

        public sealed class Params_CopyMeshInfoVertexData
        {
            public TMP_TextInfo self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Clear_BeforeArgs Clear
        {
            add
            {
                HookHandler._beforeClear += value;
                HookHandler.HookClear();
            }
            remove => HookHandler._beforeClear -= value;
        }

        public static event Delegates.ClearMeshInfo_BeforeArgs ClearMeshInfo
        {
            add
            {
                HookHandler._beforeClearMeshInfo += value;
                HookHandler.HookClearMeshInfo();
            }
            remove => HookHandler._beforeClearMeshInfo -= value;
        }

        public static event Delegates.ClearAllMeshInfo_BeforeArgs ClearAllMeshInfo
        {
            add
            {
                HookHandler._beforeClearAllMeshInfo += value;
                HookHandler.HookClearAllMeshInfo();
            }
            remove => HookHandler._beforeClearAllMeshInfo -= value;
        }

        public static event Delegates.ResetVertexLayout_BeforeArgs ResetVertexLayout
        {
            add
            {
                HookHandler._beforeResetVertexLayout += value;
                HookHandler.HookResetVertexLayout();
            }
            remove => HookHandler._beforeResetVertexLayout -= value;
        }

        public static event Delegates.ClearUnusedVertices_BeforeArgs ClearUnusedVertices
        {
            add
            {
                HookHandler._beforeClearUnusedVertices += value;
                HookHandler.HookClearUnusedVertices();
            }
            remove => HookHandler._beforeClearUnusedVertices -= value;
        }

        public static event Delegates.ClearLineInfo_BeforeArgs ClearLineInfo
        {
            add
            {
                HookHandler._beforeClearLineInfo += value;
                HookHandler.HookClearLineInfo();
            }
            remove => HookHandler._beforeClearLineInfo -= value;
        }

        public static event Delegates.CopyMeshInfoVertexData_BeforeArgs CopyMeshInfoVertexData
        {
            add
            {
                HookHandler._beforeCopyMeshInfoVertexData += value;
                HookHandler.HookCopyMeshInfoVertexData();
            }
            remove => HookHandler._beforeCopyMeshInfoVertexData -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Clear_NormalArgs Clear
        {
            add
            {
                HookHandler._afterClear += value;
                HookHandler.HookClear();
            }
            remove => HookHandler._afterClear -= value;
        }

        public static event Delegates.ClearMeshInfo_NormalArgs ClearMeshInfo
        {
            add
            {
                HookHandler._afterClearMeshInfo += value;
                HookHandler.HookClearMeshInfo();
            }
            remove => HookHandler._afterClearMeshInfo -= value;
        }

        public static event Delegates.ClearAllMeshInfo_NormalArgs ClearAllMeshInfo
        {
            add
            {
                HookHandler._afterClearAllMeshInfo += value;
                HookHandler.HookClearAllMeshInfo();
            }
            remove => HookHandler._afterClearAllMeshInfo -= value;
        }

        public static event Delegates.ResetVertexLayout_NormalArgs ResetVertexLayout
        {
            add
            {
                HookHandler._afterResetVertexLayout += value;
                HookHandler.HookResetVertexLayout();
            }
            remove => HookHandler._afterResetVertexLayout -= value;
        }

        public static event Delegates.ClearUnusedVertices_NormalArgs ClearUnusedVertices
        {
            add
            {
                HookHandler._afterClearUnusedVertices += value;
                HookHandler.HookClearUnusedVertices();
            }
            remove => HookHandler._afterClearUnusedVertices -= value;
        }

        public static event Delegates.ClearLineInfo_NormalArgs ClearLineInfo
        {
            add
            {
                HookHandler._afterClearLineInfo += value;
                HookHandler.HookClearLineInfo();
            }
            remove => HookHandler._afterClearLineInfo -= value;
        }

        public static event Delegates.CopyMeshInfoVertexData_NormalArgs CopyMeshInfoVertexData
        {
            add
            {
                HookHandler._afterCopyMeshInfoVertexData += value;
                HookHandler.HookCopyMeshInfoVertexData();
            }
            remove => HookHandler._afterCopyMeshInfoVertexData -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Clear_NormalArgs Clear
        {
            add => HookEndpointManager.Add<Delegates.Clear_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextInfo), "Clear"), value);
            remove => HookEndpointManager.Remove<Delegates.Clear_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextInfo), "Clear"), value);
        }

        public static event Delegates.ClearMeshInfo_NormalArgs ClearMeshInfo
        {
            add => HookEndpointManager.Add<Delegates.ClearMeshInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextInfo), "ClearMeshInfo"), value);
            remove => HookEndpointManager.Remove<Delegates.ClearMeshInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextInfo), "ClearMeshInfo"), value);
        }

        public static event Delegates.ClearAllMeshInfo_NormalArgs ClearAllMeshInfo
        {
            add => HookEndpointManager.Add<Delegates.ClearAllMeshInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextInfo), "ClearAllMeshInfo"), value);
            remove => HookEndpointManager.Remove<Delegates.ClearAllMeshInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextInfo), "ClearAllMeshInfo"), value);
        }

        public static event Delegates.ResetVertexLayout_NormalArgs ResetVertexLayout
        {
            add => HookEndpointManager.Add<Delegates.ResetVertexLayout_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextInfo), "ResetVertexLayout"), value);
            remove => HookEndpointManager.Remove<Delegates.ResetVertexLayout_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextInfo), "ResetVertexLayout"), value);
        }

        public static event Delegates.ClearUnusedVertices_NormalArgs ClearUnusedVertices
        {
            add => HookEndpointManager.Add<Delegates.ClearUnusedVertices_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextInfo), "ClearUnusedVertices"), value);
            remove => HookEndpointManager.Remove<Delegates.ClearUnusedVertices_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextInfo), "ClearUnusedVertices"), value);
        }

        public static event Delegates.ClearLineInfo_NormalArgs ClearLineInfo
        {
            add => HookEndpointManager.Add<Delegates.ClearLineInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextInfo), "ClearLineInfo"), value);
            remove => HookEndpointManager.Remove<Delegates.ClearLineInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextInfo), "ClearLineInfo"), value);
        }

        public static event Delegates.CopyMeshInfoVertexData_NormalArgs CopyMeshInfoVertexData
        {
            add => HookEndpointManager.Add<Delegates.CopyMeshInfoVertexData_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextInfo), "CopyMeshInfoVertexData"), value);
            remove => HookEndpointManager.Remove<Delegates.CopyMeshInfoVertexData_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_TextInfo), "CopyMeshInfoVertexData"), value);
        }
    }
}