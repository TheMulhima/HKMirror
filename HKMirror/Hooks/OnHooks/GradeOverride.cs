namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GradeOverride class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGradeOverride
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.GradeOverride.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.GradeOverride.orig_Start orig, GradeOverride self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.GradeOverride.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.GradeOverride.orig_OnEnable orig, GradeOverride self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.GradeOverride.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.GradeOverride.orig_OnDisable orig, GradeOverride self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookActivate()
        {
            if (!HookedList.Contains("Activate"))
            {
                HookedList.Add("Activate");
                On.GradeOverride.Activate += Activate;
            }
        }

        internal static event Delegates.Activate_BeforeArgs _beforeActivate;
        internal static event Delegates.Activate_NormalArgs _afterActivate;

        private static void Activate(On.GradeOverride.orig_Activate orig, GradeOverride self)
        {
            Delegates.Params_Activate @params = new()
            {
                self = self
            };
            _beforeActivate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterActivate != null) _afterActivate.Invoke(@params);
        }

        internal static void HookDeactivate()
        {
            if (!HookedList.Contains("Deactivate"))
            {
                HookedList.Add("Deactivate");
                On.GradeOverride.Deactivate += Deactivate;
            }
        }

        internal static event Delegates.Deactivate_BeforeArgs _beforeDeactivate;
        internal static event Delegates.Deactivate_NormalArgs _afterDeactivate;

        private static void Deactivate(On.GradeOverride.orig_Deactivate orig, GradeOverride self)
        {
            Delegates.Params_Deactivate @params = new()
            {
                self = self
            };
            _beforeDeactivate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDeactivate != null) _afterDeactivate.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Activate_BeforeArgs(Params_Activate args);

        public delegate void Activate_NormalArgs(Params_Activate args);

        public delegate void Deactivate_BeforeArgs(Params_Deactivate args);

        public delegate void Deactivate_NormalArgs(Params_Deactivate args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Start
        {
            public GradeOverride self;
        }

        public sealed class Params_OnEnable
        {
            public GradeOverride self;
        }

        public sealed class Params_OnDisable
        {
            public GradeOverride self;
        }

        public sealed class Params_Activate
        {
            public GradeOverride self;
        }

        public sealed class Params_Deactivate
        {
            public GradeOverride self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.Activate_BeforeArgs Activate
        {
            add
            {
                HookHandler._beforeActivate += value;
                HookHandler.HookActivate();
            }
            remove => HookHandler._beforeActivate -= value;
        }

        public static event Delegates.Deactivate_BeforeArgs Deactivate
        {
            add
            {
                HookHandler._beforeDeactivate += value;
                HookHandler.HookDeactivate();
            }
            remove => HookHandler._beforeDeactivate -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.Activate_NormalArgs Activate
        {
            add
            {
                HookHandler._afterActivate += value;
                HookHandler.HookActivate();
            }
            remove => HookHandler._afterActivate -= value;
        }

        public static event Delegates.Deactivate_NormalArgs Deactivate
        {
            add
            {
                HookHandler._afterDeactivate += value;
                HookHandler.HookDeactivate();
            }
            remove => HookHandler._afterDeactivate -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.GradeOverride.hook_Start Start
        {
            add => On.GradeOverride.Start += value;
            remove => On.GradeOverride.Start -= value;
        }

        public static event On.GradeOverride.hook_OnEnable OnEnable
        {
            add => On.GradeOverride.OnEnable += value;
            remove => On.GradeOverride.OnEnable -= value;
        }

        public static event On.GradeOverride.hook_OnDisable OnDisable
        {
            add => On.GradeOverride.OnDisable += value;
            remove => On.GradeOverride.OnDisable -= value;
        }

        public static event On.GradeOverride.hook_Activate Activate
        {
            add => On.GradeOverride.Activate += value;
            remove => On.GradeOverride.Activate -= value;
        }

        public static event On.GradeOverride.hook_Deactivate Deactivate
        {
            add => On.GradeOverride.Deactivate += value;
            remove => On.GradeOverride.Deactivate -= value;
        }
    }
}