using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for GradeOverride class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGradeOverride
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.GradeOverride.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.GradeOverride.orig_Start orig,GradeOverride self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
On.GradeOverride.OnEnable += OnEnable;

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(On.GradeOverride.orig_OnEnable orig,GradeOverride self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDisable()
{
if (!HookedList.Contains("OnDisable"))
{
HookedList.Add("OnDisable");
On.GradeOverride.OnDisable += OnDisable;

}
}
internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;
private static void OnDisable(On.GradeOverride.orig_OnDisable orig,GradeOverride self)
{
Delegates.Params_OnDisable @params = new() 
{
self = self
};
if (_beforeOnDisable != null)
{
foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
{
try
{
_beforeOnDisable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDisable != null)
{
foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
{
try
{
_afterOnDisable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookActivate()
{
if (!HookedList.Contains("Activate"))
{
HookedList.Add("Activate");
On.GradeOverride.Activate += Activate;

}
}
internal static event Delegates.Activate_BeforeArgs _beforeActivate;
internal static event Delegates.Activate_AfterArgs _afterActivate;
private static void Activate(On.GradeOverride.orig_Activate orig,GradeOverride self)
{
Delegates.Params_Activate @params = new() 
{
self = self
};
if (_beforeActivate != null)
{
foreach (Delegates.Activate_BeforeArgs toInvoke in _beforeActivate.GetInvocationList())
{
try
{
_beforeActivate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterActivate != null)
{
foreach (Delegates.Activate_AfterArgs toInvoke in _afterActivate.GetInvocationList())
{
try
{
_afterActivate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDeactivate()
{
if (!HookedList.Contains("Deactivate"))
{
HookedList.Add("Deactivate");
On.GradeOverride.Deactivate += Deactivate;

}
}
internal static event Delegates.Deactivate_BeforeArgs _beforeDeactivate;
internal static event Delegates.Deactivate_AfterArgs _afterDeactivate;
private static void Deactivate(On.GradeOverride.orig_Deactivate orig,GradeOverride self)
{
Delegates.Params_Deactivate @params = new() 
{
self = self
};
if (_beforeDeactivate != null)
{
foreach (Delegates.Deactivate_BeforeArgs toInvoke in _beforeDeactivate.GetInvocationList())
{
try
{
_beforeDeactivate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterDeactivate != null)
{
foreach (Delegates.Deactivate_AfterArgs toInvoke in _afterDeactivate.GetInvocationList())
{
try
{
_afterDeactivate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Start
{
public GradeOverride self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<GradeOverride> orig, GradeOverride self);
public sealed class Params_OnEnable
{
public GradeOverride self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<GradeOverride> orig, GradeOverride self);
public sealed class Params_OnDisable
{
public GradeOverride self;
}
public delegate void OnDisable_BeforeArgs(Params_OnDisable args);
public delegate void OnDisable_AfterArgs(Params_OnDisable args);
public delegate void OnDisable_WithArgs (Action<GradeOverride> orig, GradeOverride self);
public sealed class Params_Activate
{
public GradeOverride self;
}
public delegate void Activate_BeforeArgs(Params_Activate args);
public delegate void Activate_AfterArgs(Params_Activate args);
public delegate void Activate_WithArgs (Action<GradeOverride> orig, GradeOverride self);
public sealed class Params_Deactivate
{
public GradeOverride self;
}
public delegate void Deactivate_BeforeArgs(Params_Deactivate args);
public delegate void Deactivate_AfterArgs(Params_Deactivate args);
public delegate void Deactivate_WithArgs (Action<GradeOverride> orig, GradeOverride self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.OnDisable_BeforeArgs OnDisable
{
add
{

HookHandler._beforeOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._beforeOnDisable -= value;
}
public static event Delegates.Activate_BeforeArgs Activate
{
add
{

HookHandler._beforeActivate += value;
HookHandler.HookActivate();
}
remove => HookHandler._beforeActivate -= value;
}
public static event Delegates.Deactivate_BeforeArgs Deactivate
{
add
{

HookHandler._beforeDeactivate += value;
HookHandler.HookDeactivate();
}
remove => HookHandler._beforeDeactivate -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.OnDisable_AfterArgs OnDisable
{
add
{

HookHandler._afterOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._afterOnDisable -= value;
}
public static event Delegates.Activate_AfterArgs Activate
{
add
{

HookHandler._afterActivate += value;
HookHandler.HookActivate();
}
remove => HookHandler._afterActivate -= value;
}
public static event Delegates.Deactivate_AfterArgs Deactivate
{
add
{

HookHandler._afterDeactivate += value;
HookHandler.HookDeactivate();
}
remove => HookHandler._afterDeactivate -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.GradeOverride.hook_Start Start
{
add => On.GradeOverride.Start += value;
remove => On.GradeOverride.Start -= value;
}
public static event On.GradeOverride.hook_OnEnable OnEnable
{
add => On.GradeOverride.OnEnable += value;
remove => On.GradeOverride.OnEnable -= value;
}
public static event On.GradeOverride.hook_OnDisable OnDisable
{
add => On.GradeOverride.OnDisable += value;
remove => On.GradeOverride.OnDisable -= value;
}
public static event On.GradeOverride.hook_Activate Activate
{
add => On.GradeOverride.Activate += value;
remove => On.GradeOverride.Activate -= value;
}
public static event On.GradeOverride.hook_Deactivate Deactivate
{
add => On.GradeOverride.Deactivate += value;
remove => On.GradeOverride.Deactivate -= value;
}
}

}
