using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for PlayerActionSetConverter class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPlayerActionSetConverter
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookCanConvert()
        {
            if (!HookedList.Contains("CanConvert"))
            {
                HookedList.Add("CanConvert");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerActionSetConverter), "CanConvert"), CanConvert);
            }
        }

        internal static event Delegates.CanConvert_BeforeArgs _beforeCanConvert;
        internal static event Delegates.CanConvert_NormalArgs _afterCanConvert;

        private static bool CanConvert(Func<PlayerActionSetConverter, Type, bool> orig, PlayerActionSetConverter self,
            Type objectType)
        {
            Delegates.Params_CanConvert @params = new()
            {
                self = self, objectType = objectType
            };
            _beforeCanConvert?.Invoke(@params);
            self = @params.self;
            objectType = @params.objectType;
            var retVal = orig(self, objectType);
            if (_afterCanConvert != null) retVal = _afterCanConvert.Invoke(@params);
            return retVal;
        }

        internal static void HookReadJson()
        {
            if (!HookedList.Contains("ReadJson"))
            {
                HookedList.Add("ReadJson");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerActionSetConverter), "ReadJson"), ReadJson);
            }
        }

        internal static event Delegates.ReadJson_BeforeArgs _beforeReadJson;
        internal static event Delegates.ReadJson_NormalArgs _afterReadJson;

        private static object ReadJson(
            Func<PlayerActionSetConverter, JsonReader, Type, object, JsonSerializer, object> orig,
            PlayerActionSetConverter self, JsonReader reader, Type objectType, object existingValue,
            JsonSerializer serializer)
        {
            Delegates.Params_ReadJson @params = new()
            {
                self = self, reader = reader, objectType = objectType, existingValue = existingValue,
                serializer = serializer
            };
            _beforeReadJson?.Invoke(@params);
            self = @params.self;
            reader = @params.reader;
            objectType = @params.objectType;
            existingValue = @params.existingValue;
            serializer = @params.serializer;
            var retVal = orig(self, reader, objectType, existingValue, serializer);
            if (_afterReadJson != null) retVal = _afterReadJson.Invoke(@params);
            return retVal;
        }

        internal static void HookWriteJson()
        {
            if (!HookedList.Contains("WriteJson"))
            {
                HookedList.Add("WriteJson");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerActionSetConverter), "WriteJson"), WriteJson);
            }
        }

        internal static event Delegates.WriteJson_BeforeArgs _beforeWriteJson;
        internal static event Delegates.WriteJson_NormalArgs _afterWriteJson;

        private static void WriteJson(Action<PlayerActionSetConverter, JsonWriter, object, JsonSerializer> orig,
            PlayerActionSetConverter self, JsonWriter writer, object value, JsonSerializer serializer)
        {
            Delegates.Params_WriteJson @params = new()
            {
                self = self, writer = writer, value = value, serializer = serializer
            };
            _beforeWriteJson?.Invoke(@params);
            self = @params.self;
            writer = @params.writer;
            value = @params.value;
            serializer = @params.serializer;
            orig(self, writer, value, serializer);
            if (_afterWriteJson != null) _afterWriteJson.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void CanConvert_BeforeArgs(Params_CanConvert args);

        public delegate bool CanConvert_NormalArgs(Params_CanConvert args);

        public delegate void ReadJson_BeforeArgs(Params_ReadJson args);

        public delegate object ReadJson_NormalArgs(Params_ReadJson args);

        public delegate void WriteJson_BeforeArgs(Params_WriteJson args);

        public delegate void WriteJson_NormalArgs(Params_WriteJson args);

        public sealed class Params_CanConvert
        {
            public Type objectType;
            public PlayerActionSetConverter self;
        }

        public sealed class Params_ReadJson
        {
            public object existingValue;
            public Type objectType;
            public JsonReader reader;
            public PlayerActionSetConverter self;
            public JsonSerializer serializer;
        }

        public sealed class Params_WriteJson
        {
            public PlayerActionSetConverter self;
            public JsonSerializer serializer;
            public object value;
            public JsonWriter writer;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.CanConvert_BeforeArgs CanConvert
        {
            add
            {
                HookHandler._beforeCanConvert += value;
                HookHandler.HookCanConvert();
            }
            remove => HookHandler._beforeCanConvert -= value;
        }

        public static event Delegates.ReadJson_BeforeArgs ReadJson
        {
            add
            {
                HookHandler._beforeReadJson += value;
                HookHandler.HookReadJson();
            }
            remove => HookHandler._beforeReadJson -= value;
        }

        public static event Delegates.WriteJson_BeforeArgs WriteJson
        {
            add
            {
                HookHandler._beforeWriteJson += value;
                HookHandler.HookWriteJson();
            }
            remove => HookHandler._beforeWriteJson -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.CanConvert_NormalArgs CanConvert
        {
            add
            {
                HookHandler._afterCanConvert += value;
                HookHandler.HookCanConvert();
            }
            remove => HookHandler._afterCanConvert -= value;
        }

        public static event Delegates.ReadJson_NormalArgs ReadJson
        {
            add
            {
                HookHandler._afterReadJson += value;
                HookHandler.HookReadJson();
            }
            remove => HookHandler._afterReadJson -= value;
        }

        public static event Delegates.WriteJson_NormalArgs WriteJson
        {
            add
            {
                HookHandler._afterWriteJson += value;
                HookHandler.HookWriteJson();
            }
            remove => HookHandler._afterWriteJson -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.CanConvert_NormalArgs CanConvert
        {
            add => HookEndpointManager.Add<Delegates.CanConvert_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerActionSetConverter), "CanConvert"), value);
            remove => HookEndpointManager.Remove<Delegates.CanConvert_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerActionSetConverter), "CanConvert"), value);
        }

        public static event Delegates.ReadJson_NormalArgs ReadJson
        {
            add => HookEndpointManager.Add<Delegates.ReadJson_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerActionSetConverter), "ReadJson"), value);
            remove => HookEndpointManager.Remove<Delegates.ReadJson_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerActionSetConverter), "ReadJson"), value);
        }

        public static event Delegates.WriteJson_NormalArgs WriteJson
        {
            add => HookEndpointManager.Add<Delegates.WriteJson_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerActionSetConverter), "WriteJson"), value);
            remove => HookEndpointManager.Remove<Delegates.WriteJson_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerActionSetConverter), "WriteJson"), value);
        }
    }
}