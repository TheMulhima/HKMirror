namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ChangeFontByLanguage class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnChangeFontByLanguage
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.ChangeFontByLanguage.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.ChangeFontByLanguage.orig_Awake orig, ChangeFontByLanguage self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.ChangeFontByLanguage.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.ChangeFontByLanguage.orig_Start orig, ChangeFontByLanguage self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.ChangeFontByLanguage.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.ChangeFontByLanguage.orig_OnEnable orig, ChangeFontByLanguage self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetFont()
        {
            if (!HookedList.Contains("SetFont"))
            {
                HookedList.Add("SetFont");
                On.ChangeFontByLanguage.SetFont += SetFont;
            }
        }

        internal static event Delegates.SetFont_BeforeArgs _beforeSetFont;
        internal static event Delegates.SetFont_AfterArgs _afterSetFont;

        private static void SetFont(On.ChangeFontByLanguage.orig_SetFont orig, ChangeFontByLanguage self)
        {
            Delegates.Params_SetFont @params = new()
            {
                self = self
            };
            if (_beforeSetFont != null)
                foreach (Delegates.SetFont_BeforeArgs toInvoke in _beforeSetFont.GetInvocationList())
                    try
                    {
                        _beforeSetFont?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSetFont != null)
                foreach (Delegates.SetFont_AfterArgs toInvoke in _afterSetFont.GetInvocationList())
                    try
                    {
                        _afterSetFont.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetFontScale()
        {
            if (!HookedList.Contains("GetFontScale"))
            {
                HookedList.Add("GetFontScale");
                On.ChangeFontByLanguage.GetFontScale += GetFontScale;
            }
        }

        internal static event Delegates.GetFontScale_BeforeArgs _beforeGetFontScale;
        internal static event Delegates.GetFontScale_AfterArgs _afterGetFontScale;

        private static float GetFontScale(On.ChangeFontByLanguage.orig_GetFontScale orig, ChangeFontByLanguage self,
            string lang)
        {
            Delegates.Params_GetFontScale @params = new()
            {
                self = self, lang = lang
            };
            if (_beforeGetFontScale != null)
                foreach (Delegates.GetFontScale_BeforeArgs toInvoke in _beforeGetFontScale.GetInvocationList())
                    try
                    {
                        _beforeGetFontScale?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            lang = @params.lang;
            var retVal = orig(self, lang);
            if (_afterGetFontScale != null)
                foreach (Delegates.GetFontScale_AfterArgs toInvoke in _afterGetFontScale.GetInvocationList())
                    try
                    {
                        retVal = _afterGetFontScale.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<ChangeFontByLanguage> orig, ChangeFontByLanguage self);

        public delegate float GetFontScale_AfterArgs(Params_GetFontScale args, float ret);

        public delegate void GetFontScale_BeforeArgs(Params_GetFontScale args);

        public delegate float GetFontScale_WithArgs(Func<ChangeFontByLanguage, string, float> orig,
            ChangeFontByLanguage self, string lang);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<ChangeFontByLanguage> orig, ChangeFontByLanguage self);

        public delegate void SetFont_AfterArgs(Params_SetFont args);

        public delegate void SetFont_BeforeArgs(Params_SetFont args);

        public delegate void SetFont_WithArgs(Action<ChangeFontByLanguage> orig, ChangeFontByLanguage self);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<ChangeFontByLanguage> orig, ChangeFontByLanguage self);

        public sealed class Params_Awake
        {
            public ChangeFontByLanguage self;
        }

        public sealed class Params_Start
        {
            public ChangeFontByLanguage self;
        }

        public sealed class Params_OnEnable
        {
            public ChangeFontByLanguage self;
        }

        public sealed class Params_SetFont
        {
            public ChangeFontByLanguage self;
        }

        public sealed class Params_GetFontScale
        {
            public string lang;
            public ChangeFontByLanguage self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.SetFont_BeforeArgs SetFont
        {
            add
            {
                HookHandler._beforeSetFont += value;
                HookHandler.HookSetFont();
            }
            remove => HookHandler._beforeSetFont -= value;
        }

        public static event Delegates.GetFontScale_BeforeArgs GetFontScale
        {
            add
            {
                HookHandler._beforeGetFontScale += value;
                HookHandler.HookGetFontScale();
            }
            remove => HookHandler._beforeGetFontScale -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.SetFont_AfterArgs SetFont
        {
            add
            {
                HookHandler._afterSetFont += value;
                HookHandler.HookSetFont();
            }
            remove => HookHandler._afterSetFont -= value;
        }

        public static event Delegates.GetFontScale_AfterArgs GetFontScale
        {
            add
            {
                HookHandler._afterGetFontScale += value;
                HookHandler.HookGetFontScale();
            }
            remove => HookHandler._afterGetFontScale -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.ChangeFontByLanguage.hook_Awake Awake
        {
            add => On.ChangeFontByLanguage.Awake += value;
            remove => On.ChangeFontByLanguage.Awake -= value;
        }

        public static event On.ChangeFontByLanguage.hook_Start Start
        {
            add => On.ChangeFontByLanguage.Start += value;
            remove => On.ChangeFontByLanguage.Start -= value;
        }

        public static event On.ChangeFontByLanguage.hook_OnEnable OnEnable
        {
            add => On.ChangeFontByLanguage.OnEnable += value;
            remove => On.ChangeFontByLanguage.OnEnable -= value;
        }

        public static event On.ChangeFontByLanguage.hook_SetFont SetFont
        {
            add => On.ChangeFontByLanguage.SetFont += value;
            remove => On.ChangeFontByLanguage.SetFont -= value;
        }

        public static event On.ChangeFontByLanguage.hook_GetFontScale GetFontScale
        {
            add => On.ChangeFontByLanguage.GetFontScale += value;
            remove => On.ChangeFontByLanguage.GetFontScale -= value;
        }
    }
}