using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for UnityKeyboardProvider class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnUnityKeyboardProvider
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookSetup()
        {
            if (!HookedList.Contains("Setup"))
            {
                HookedList.Add("Setup");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityKeyboardProvider), "Setup"), Setup);
            }
        }

        internal static event Delegates.Setup_BeforeArgs _beforeSetup;
        internal static event Delegates.Setup_NormalArgs _afterSetup;

        private static void Setup(Action<UnityKeyboardProvider> orig, UnityKeyboardProvider self)
        {
            Delegates.Params_Setup @params = new()
            {
                self = self
            };
            _beforeSetup?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetup != null) _afterSetup.Invoke(@params);
        }

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityKeyboardProvider), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<UnityKeyboardProvider> orig, UnityKeyboardProvider self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityKeyboardProvider), "Update"), Update);
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(Action<UnityKeyboardProvider> orig, UnityKeyboardProvider self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookAnyKeyIsPressed()
        {
            if (!HookedList.Contains("AnyKeyIsPressed"))
            {
                HookedList.Add("AnyKeyIsPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityKeyboardProvider), "AnyKeyIsPressed"),
                    AnyKeyIsPressed);
            }
        }

        internal static event Delegates.AnyKeyIsPressed_BeforeArgs _beforeAnyKeyIsPressed;
        internal static event Delegates.AnyKeyIsPressed_NormalArgs _afterAnyKeyIsPressed;

        private static bool AnyKeyIsPressed(Func<UnityKeyboardProvider, bool> orig, UnityKeyboardProvider self)
        {
            Delegates.Params_AnyKeyIsPressed @params = new()
            {
                self = self
            };
            _beforeAnyKeyIsPressed?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterAnyKeyIsPressed != null) retVal = _afterAnyKeyIsPressed.Invoke(@params);
            return retVal;
        }

        internal static void HookGetKeyIsPressed()
        {
            if (!HookedList.Contains("GetKeyIsPressed"))
            {
                HookedList.Add("GetKeyIsPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityKeyboardProvider), "GetKeyIsPressed"),
                    GetKeyIsPressed);
            }
        }

        internal static event Delegates.GetKeyIsPressed_BeforeArgs _beforeGetKeyIsPressed;
        internal static event Delegates.GetKeyIsPressed_NormalArgs _afterGetKeyIsPressed;

        private static bool GetKeyIsPressed(Func<UnityKeyboardProvider, Key, bool> orig, UnityKeyboardProvider self,
            Key control)
        {
            Delegates.Params_GetKeyIsPressed @params = new()
            {
                self = self, control = control
            };
            _beforeGetKeyIsPressed?.Invoke(@params);
            self = @params.self;
            control = @params.control;
            var retVal = orig(self, control);
            if (_afterGetKeyIsPressed != null) retVal = _afterGetKeyIsPressed.Invoke(@params);
            return retVal;
        }

        internal static void HookGetNameForKey()
        {
            if (!HookedList.Contains("GetNameForKey"))
            {
                HookedList.Add("GetNameForKey");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityKeyboardProvider), "GetNameForKey"), GetNameForKey);
            }
        }

        internal static event Delegates.GetNameForKey_BeforeArgs _beforeGetNameForKey;
        internal static event Delegates.GetNameForKey_NormalArgs _afterGetNameForKey;

        private static string GetNameForKey(Func<UnityKeyboardProvider, Key, string> orig, UnityKeyboardProvider self,
            Key control)
        {
            Delegates.Params_GetNameForKey @params = new()
            {
                self = self, control = control
            };
            _beforeGetNameForKey?.Invoke(@params);
            self = @params.self;
            control = @params.control;
            var retVal = orig(self, control);
            if (_afterGetNameForKey != null) retVal = _afterGetNameForKey.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AnyKeyIsPressed_BeforeArgs(Params_AnyKeyIsPressed args);

        public delegate bool AnyKeyIsPressed_NormalArgs(Params_AnyKeyIsPressed args);

        public delegate void GetKeyIsPressed_BeforeArgs(Params_GetKeyIsPressed args);

        public delegate bool GetKeyIsPressed_NormalArgs(Params_GetKeyIsPressed args);

        public delegate void GetNameForKey_BeforeArgs(Params_GetNameForKey args);

        public delegate string GetNameForKey_NormalArgs(Params_GetNameForKey args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public delegate void Setup_BeforeArgs(Params_Setup args);

        public delegate void Setup_NormalArgs(Params_Setup args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_Setup
        {
            public UnityKeyboardProvider self;
        }

        public sealed class Params_Reset
        {
            public UnityKeyboardProvider self;
        }

        public sealed class Params_Update
        {
            public UnityKeyboardProvider self;
        }

        public sealed class Params_AnyKeyIsPressed
        {
            public UnityKeyboardProvider self;
        }

        public sealed class Params_GetKeyIsPressed
        {
            public Key control;
            public UnityKeyboardProvider self;
        }

        public sealed class Params_GetNameForKey
        {
            public Key control;
            public UnityKeyboardProvider self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Setup_BeforeArgs Setup
        {
            add
            {
                HookHandler._beforeSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._beforeSetup -= value;
        }

        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.AnyKeyIsPressed_BeforeArgs AnyKeyIsPressed
        {
            add
            {
                HookHandler._beforeAnyKeyIsPressed += value;
                HookHandler.HookAnyKeyIsPressed();
            }
            remove => HookHandler._beforeAnyKeyIsPressed -= value;
        }

        public static event Delegates.GetKeyIsPressed_BeforeArgs GetKeyIsPressed
        {
            add
            {
                HookHandler._beforeGetKeyIsPressed += value;
                HookHandler.HookGetKeyIsPressed();
            }
            remove => HookHandler._beforeGetKeyIsPressed -= value;
        }

        public static event Delegates.GetNameForKey_BeforeArgs GetNameForKey
        {
            add
            {
                HookHandler._beforeGetNameForKey += value;
                HookHandler.HookGetNameForKey();
            }
            remove => HookHandler._beforeGetNameForKey -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Setup_NormalArgs Setup
        {
            add
            {
                HookHandler._afterSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._afterSetup -= value;
        }

        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.AnyKeyIsPressed_NormalArgs AnyKeyIsPressed
        {
            add
            {
                HookHandler._afterAnyKeyIsPressed += value;
                HookHandler.HookAnyKeyIsPressed();
            }
            remove => HookHandler._afterAnyKeyIsPressed -= value;
        }

        public static event Delegates.GetKeyIsPressed_NormalArgs GetKeyIsPressed
        {
            add
            {
                HookHandler._afterGetKeyIsPressed += value;
                HookHandler.HookGetKeyIsPressed();
            }
            remove => HookHandler._afterGetKeyIsPressed -= value;
        }

        public static event Delegates.GetNameForKey_NormalArgs GetNameForKey
        {
            add
            {
                HookHandler._afterGetNameForKey += value;
                HookHandler.HookGetNameForKey();
            }
            remove => HookHandler._afterGetNameForKey -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Setup_NormalArgs Setup
        {
            add => HookEndpointManager.Add<Delegates.Setup_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityKeyboardProvider), "Setup"), value);
            remove => HookEndpointManager.Remove<Delegates.Setup_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityKeyboardProvider), "Setup"), value);
        }

        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityKeyboardProvider), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityKeyboardProvider), "Reset"), value);
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add => HookEndpointManager.Add<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityKeyboardProvider), "Update"), value);
            remove => HookEndpointManager.Remove<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityKeyboardProvider), "Update"), value);
        }

        public static event Delegates.AnyKeyIsPressed_NormalArgs AnyKeyIsPressed
        {
            add => HookEndpointManager.Add<Delegates.AnyKeyIsPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityKeyboardProvider), "AnyKeyIsPressed"), value);
            remove => HookEndpointManager.Remove<Delegates.AnyKeyIsPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityKeyboardProvider), "AnyKeyIsPressed"), value);
        }

        public static event Delegates.GetKeyIsPressed_NormalArgs GetKeyIsPressed
        {
            add => HookEndpointManager.Add<Delegates.GetKeyIsPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityKeyboardProvider), "GetKeyIsPressed"), value);
            remove => HookEndpointManager.Remove<Delegates.GetKeyIsPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityKeyboardProvider), "GetKeyIsPressed"), value);
        }

        public static event Delegates.GetNameForKey_NormalArgs GetNameForKey
        {
            add => HookEndpointManager.Add<Delegates.GetNameForKey_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityKeyboardProvider), "GetNameForKey"), value);
            remove => HookEndpointManager.Remove<Delegates.GetNameForKey_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityKeyboardProvider), "GetNameForKey"), value);
        }
    }
}