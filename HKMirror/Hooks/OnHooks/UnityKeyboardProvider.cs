using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for UnityKeyboardProvider class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnUnityKeyboardProvider
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookSetup()
{
if (!HookedList.Contains("Setup"))
{
HookedList.Add("Setup");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityKeyboardProvider), "Setup", true), Setup);

}
}
internal static event Delegates.Setup_BeforeArgs _beforeSetup;
internal static event Delegates.Setup_AfterArgs _afterSetup;
private static void Setup(Action<InControl.UnityKeyboardProvider> orig, InControl.UnityKeyboardProvider self)
{
Delegates.Params_Setup @params = new() 
{
self = self
};
if (_beforeSetup != null)
{
foreach (Delegates.Setup_BeforeArgs toInvoke in _beforeSetup.GetInvocationList())
{
try
{
_beforeSetup?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetup != null)
{
foreach (Delegates.Setup_AfterArgs toInvoke in _afterSetup.GetInvocationList())
{
try
{
_afterSetup.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookReset()
{
if (!HookedList.Contains("Reset"))
{
HookedList.Add("Reset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityKeyboardProvider), "Reset", true), Reset);

}
}
internal static event Delegates.Reset_BeforeArgs _beforeReset;
internal static event Delegates.Reset_AfterArgs _afterReset;
private static void Reset(Action<InControl.UnityKeyboardProvider> orig, InControl.UnityKeyboardProvider self)
{
Delegates.Params_Reset @params = new() 
{
self = self
};
if (_beforeReset != null)
{
foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
{
try
{
_beforeReset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterReset != null)
{
foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
{
try
{
_afterReset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdate()
{
if (!HookedList.Contains("Update"))
{
HookedList.Add("Update");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityKeyboardProvider), "Update", true), Update);

}
}
internal static event Delegates.Update_BeforeArgs _beforeUpdate;
internal static event Delegates.Update_AfterArgs _afterUpdate;
private static void Update(Action<InControl.UnityKeyboardProvider> orig, InControl.UnityKeyboardProvider self)
{
Delegates.Params_Update @params = new() 
{
self = self
};
if (_beforeUpdate != null)
{
foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
{
try
{
_beforeUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdate != null)
{
foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
{
try
{
_afterUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAnyKeyIsPressed()
{
if (!HookedList.Contains("AnyKeyIsPressed"))
{
HookedList.Add("AnyKeyIsPressed");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityKeyboardProvider), "AnyKeyIsPressed", true), AnyKeyIsPressed);

}
}
internal static event Delegates.AnyKeyIsPressed_BeforeArgs _beforeAnyKeyIsPressed;
internal static event Delegates.AnyKeyIsPressed_AfterArgs _afterAnyKeyIsPressed;
private static bool AnyKeyIsPressed(Func<InControl.UnityKeyboardProvider, bool> orig, InControl.UnityKeyboardProvider self)
{
Delegates.Params_AnyKeyIsPressed @params = new() 
{
self = self
};
if (_beforeAnyKeyIsPressed != null)
{
foreach (Delegates.AnyKeyIsPressed_BeforeArgs toInvoke in _beforeAnyKeyIsPressed.GetInvocationList())
{
try
{
_beforeAnyKeyIsPressed?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterAnyKeyIsPressed != null)
{
foreach (Delegates.AnyKeyIsPressed_AfterArgs toInvoke in _afterAnyKeyIsPressed.GetInvocationList())
{
try
{
retVal = _afterAnyKeyIsPressed.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetKeyIsPressed()
{
if (!HookedList.Contains("GetKeyIsPressed"))
{
HookedList.Add("GetKeyIsPressed");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityKeyboardProvider), "GetKeyIsPressed", true), GetKeyIsPressed);

}
}
internal static event Delegates.GetKeyIsPressed_BeforeArgs _beforeGetKeyIsPressed;
internal static event Delegates.GetKeyIsPressed_AfterArgs _afterGetKeyIsPressed;
private static bool GetKeyIsPressed(Func<InControl.UnityKeyboardProvider,  InControl.Key, bool> orig, InControl.UnityKeyboardProvider self,  InControl.Key control)
{
Delegates.Params_GetKeyIsPressed @params = new() 
{
self = self
, control = control
};
if (_beforeGetKeyIsPressed != null)
{
foreach (Delegates.GetKeyIsPressed_BeforeArgs toInvoke in _beforeGetKeyIsPressed.GetInvocationList())
{
try
{
_beforeGetKeyIsPressed?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
control = @params.control;
var retVal = orig(self, control);
if (_afterGetKeyIsPressed != null)
{
foreach (Delegates.GetKeyIsPressed_AfterArgs toInvoke in _afterGetKeyIsPressed.GetInvocationList())
{
try
{
retVal = _afterGetKeyIsPressed.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetNameForKey()
{
if (!HookedList.Contains("GetNameForKey"))
{
HookedList.Add("GetNameForKey");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityKeyboardProvider), "GetNameForKey", true), GetNameForKey);

}
}
internal static event Delegates.GetNameForKey_BeforeArgs _beforeGetNameForKey;
internal static event Delegates.GetNameForKey_AfterArgs _afterGetNameForKey;
private static string GetNameForKey(Func<InControl.UnityKeyboardProvider,  InControl.Key, string> orig, InControl.UnityKeyboardProvider self,  InControl.Key control)
{
Delegates.Params_GetNameForKey @params = new() 
{
self = self
, control = control
};
if (_beforeGetNameForKey != null)
{
foreach (Delegates.GetNameForKey_BeforeArgs toInvoke in _beforeGetNameForKey.GetInvocationList())
{
try
{
_beforeGetNameForKey?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
control = @params.control;
var retVal = orig(self, control);
if (_afterGetNameForKey != null)
{
foreach (Delegates.GetNameForKey_AfterArgs toInvoke in _afterGetNameForKey.GetInvocationList())
{
try
{
retVal = _afterGetNameForKey.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Setup
{
public InControl.UnityKeyboardProvider self;
}
public delegate void Setup_BeforeArgs(Params_Setup args);
public delegate void Setup_AfterArgs(Params_Setup args);
public delegate void Setup_WithArgs (Action<InControl.UnityKeyboardProvider> orig, InControl.UnityKeyboardProvider self);
public sealed class Params_Reset
{
public InControl.UnityKeyboardProvider self;
}
public delegate void Reset_BeforeArgs(Params_Reset args);
public delegate void Reset_AfterArgs(Params_Reset args);
public delegate void Reset_WithArgs (Action<InControl.UnityKeyboardProvider> orig, InControl.UnityKeyboardProvider self);
public sealed class Params_Update
{
public InControl.UnityKeyboardProvider self;
}
public delegate void Update_BeforeArgs(Params_Update args);
public delegate void Update_AfterArgs(Params_Update args);
public delegate void Update_WithArgs (Action<InControl.UnityKeyboardProvider> orig, InControl.UnityKeyboardProvider self);
public sealed class Params_AnyKeyIsPressed
{
public InControl.UnityKeyboardProvider self;
}
public delegate void AnyKeyIsPressed_BeforeArgs(Params_AnyKeyIsPressed args);
public delegate bool AnyKeyIsPressed_AfterArgs(Params_AnyKeyIsPressed args, bool ret);
public delegate bool AnyKeyIsPressed_WithArgs (Func<InControl.UnityKeyboardProvider, bool> orig, InControl.UnityKeyboardProvider self);
public sealed class Params_GetKeyIsPressed
{
public InControl.UnityKeyboardProvider self;
public InControl.Key control;
}
public delegate void GetKeyIsPressed_BeforeArgs(Params_GetKeyIsPressed args);
public delegate bool GetKeyIsPressed_AfterArgs(Params_GetKeyIsPressed args, bool ret);
public delegate bool GetKeyIsPressed_WithArgs (Func<InControl.UnityKeyboardProvider,  InControl.Key, bool> orig, InControl.UnityKeyboardProvider self,  InControl.Key control);
public sealed class Params_GetNameForKey
{
public InControl.UnityKeyboardProvider self;
public InControl.Key control;
}
public delegate void GetNameForKey_BeforeArgs(Params_GetNameForKey args);
public delegate string GetNameForKey_AfterArgs(Params_GetNameForKey args, string ret);
public delegate string GetNameForKey_WithArgs (Func<InControl.UnityKeyboardProvider,  InControl.Key, string> orig, InControl.UnityKeyboardProvider self,  InControl.Key control);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Setup_BeforeArgs Setup
{
add
{

HookHandler._beforeSetup += value;
HookHandler.HookSetup();
}
remove => HookHandler._beforeSetup -= value;
}
public static event Delegates.Reset_BeforeArgs Reset
{
add
{

HookHandler._beforeReset += value;
HookHandler.HookReset();
}
remove => HookHandler._beforeReset -= value;
}
public static event Delegates.Update_BeforeArgs Update
{
add
{

HookHandler._beforeUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._beforeUpdate -= value;
}
public static event Delegates.AnyKeyIsPressed_BeforeArgs AnyKeyIsPressed
{
add
{

HookHandler._beforeAnyKeyIsPressed += value;
HookHandler.HookAnyKeyIsPressed();
}
remove => HookHandler._beforeAnyKeyIsPressed -= value;
}
public static event Delegates.GetKeyIsPressed_BeforeArgs GetKeyIsPressed
{
add
{

HookHandler._beforeGetKeyIsPressed += value;
HookHandler.HookGetKeyIsPressed();
}
remove => HookHandler._beforeGetKeyIsPressed -= value;
}
public static event Delegates.GetNameForKey_BeforeArgs GetNameForKey
{
add
{

HookHandler._beforeGetNameForKey += value;
HookHandler.HookGetNameForKey();
}
remove => HookHandler._beforeGetNameForKey -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Setup_AfterArgs Setup
{
add
{

HookHandler._afterSetup += value;
HookHandler.HookSetup();
}
remove => HookHandler._afterSetup -= value;
}
public static event Delegates.Reset_AfterArgs Reset
{
add
{

HookHandler._afterReset += value;
HookHandler.HookReset();
}
remove => HookHandler._afterReset -= value;
}
public static event Delegates.Update_AfterArgs Update
{
add
{

HookHandler._afterUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._afterUpdate -= value;
}
public static event Delegates.AnyKeyIsPressed_AfterArgs AnyKeyIsPressed
{
add
{

HookHandler._afterAnyKeyIsPressed += value;
HookHandler.HookAnyKeyIsPressed();
}
remove => HookHandler._afterAnyKeyIsPressed -= value;
}
public static event Delegates.GetKeyIsPressed_AfterArgs GetKeyIsPressed
{
add
{

HookHandler._afterGetKeyIsPressed += value;
HookHandler.HookGetKeyIsPressed();
}
remove => HookHandler._afterGetKeyIsPressed -= value;
}
public static event Delegates.GetNameForKey_AfterArgs GetNameForKey
{
add
{

HookHandler._afterGetNameForKey += value;
HookHandler.HookGetNameForKey();
}
remove => HookHandler._afterGetNameForKey -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.Setup_WithArgs Setup
{
add => HookEndpointManager.Add<Delegates.Setup_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityKeyboardProvider), "Setup", true), value);
remove => HookEndpointManager.Remove<Delegates.Setup_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityKeyboardProvider), "Setup", true), value);
}
public static event Delegates.Reset_WithArgs Reset
{
add => HookEndpointManager.Add<Delegates.Reset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityKeyboardProvider), "Reset", true), value);
remove => HookEndpointManager.Remove<Delegates.Reset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityKeyboardProvider), "Reset", true), value);
}
public static event Delegates.Update_WithArgs Update
{
add => HookEndpointManager.Add<Delegates.Update_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityKeyboardProvider), "Update", true), value);
remove => HookEndpointManager.Remove<Delegates.Update_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityKeyboardProvider), "Update", true), value);
}
public static event Delegates.AnyKeyIsPressed_WithArgs AnyKeyIsPressed
{
add => HookEndpointManager.Add<Delegates.AnyKeyIsPressed_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityKeyboardProvider), "AnyKeyIsPressed", true), value);
remove => HookEndpointManager.Remove<Delegates.AnyKeyIsPressed_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityKeyboardProvider), "AnyKeyIsPressed", true), value);
}
public static event Delegates.GetKeyIsPressed_WithArgs GetKeyIsPressed
{
add => HookEndpointManager.Add<Delegates.GetKeyIsPressed_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityKeyboardProvider), "GetKeyIsPressed", true), value);
remove => HookEndpointManager.Remove<Delegates.GetKeyIsPressed_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityKeyboardProvider), "GetKeyIsPressed", true), value);
}
public static event Delegates.GetNameForKey_WithArgs GetNameForKey
{
add => HookEndpointManager.Add<Delegates.GetNameForKey_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityKeyboardProvider), "GetNameForKey", true), value);
remove => HookEndpointManager.Remove<Delegates.GetNameForKey_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityKeyboardProvider), "GetNameForKey", true), value);
}
}

}
