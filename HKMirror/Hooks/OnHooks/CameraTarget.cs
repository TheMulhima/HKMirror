namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for CameraTarget class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCameraTarget
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookGameInit()
        {
            if (!HookedList.Contains("GameInit"))
            {
                HookedList.Add("GameInit");
                On.CameraTarget.GameInit += GameInit;
            }
        }

        internal static event Delegates.GameInit_BeforeArgs _beforeGameInit;
        internal static event Delegates.GameInit_NormalArgs _afterGameInit;

        private static void GameInit(On.CameraTarget.orig_GameInit orig, CameraTarget self)
        {
            Delegates.Params_GameInit @params = new()
            {
                self = self
            };
            _beforeGameInit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterGameInit != null) _afterGameInit.Invoke(@params);
        }

        internal static void HookSceneInit()
        {
            if (!HookedList.Contains("SceneInit"))
            {
                HookedList.Add("SceneInit");
                On.CameraTarget.SceneInit += SceneInit;
            }
        }

        internal static event Delegates.SceneInit_BeforeArgs _beforeSceneInit;
        internal static event Delegates.SceneInit_NormalArgs _afterSceneInit;

        private static void SceneInit(On.CameraTarget.orig_SceneInit orig, CameraTarget self)
        {
            Delegates.Params_SceneInit @params = new()
            {
                self = self
            };
            _beforeSceneInit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSceneInit != null) _afterSceneInit.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.CameraTarget.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.CameraTarget.orig_Update orig, CameraTarget self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookEnterLockZone()
        {
            if (!HookedList.Contains("EnterLockZone"))
            {
                HookedList.Add("EnterLockZone");
                On.CameraTarget.EnterLockZone += EnterLockZone;
            }
        }

        internal static event Delegates.EnterLockZone_BeforeArgs _beforeEnterLockZone;
        internal static event Delegates.EnterLockZone_NormalArgs _afterEnterLockZone;

        private static void EnterLockZone(On.CameraTarget.orig_EnterLockZone orig, CameraTarget self,
            float xLockMin_var, float xLockMax_var, float yLockMin_var, float yLockMax_var)
        {
            Delegates.Params_EnterLockZone @params = new()
            {
                self = self, xLockMin_var = xLockMin_var, xLockMax_var = xLockMax_var, yLockMin_var = yLockMin_var,
                yLockMax_var = yLockMax_var
            };
            _beforeEnterLockZone?.Invoke(@params);
            self = @params.self;
            xLockMin_var = @params.xLockMin_var;
            xLockMax_var = @params.xLockMax_var;
            yLockMin_var = @params.yLockMin_var;
            yLockMax_var = @params.yLockMax_var;
            orig(self, xLockMin_var, xLockMax_var, yLockMin_var, yLockMax_var);
            if (_afterEnterLockZone != null) _afterEnterLockZone.Invoke(@params);
        }

        internal static void HookEnterLockZoneInstant()
        {
            if (!HookedList.Contains("EnterLockZoneInstant"))
            {
                HookedList.Add("EnterLockZoneInstant");
                On.CameraTarget.EnterLockZoneInstant += EnterLockZoneInstant;
            }
        }

        internal static event Delegates.EnterLockZoneInstant_BeforeArgs _beforeEnterLockZoneInstant;
        internal static event Delegates.EnterLockZoneInstant_NormalArgs _afterEnterLockZoneInstant;

        private static void EnterLockZoneInstant(On.CameraTarget.orig_EnterLockZoneInstant orig, CameraTarget self,
            float xLockMin_var, float xLockMax_var, float yLockMin_var, float yLockMax_var)
        {
            Delegates.Params_EnterLockZoneInstant @params = new()
            {
                self = self, xLockMin_var = xLockMin_var, xLockMax_var = xLockMax_var, yLockMin_var = yLockMin_var,
                yLockMax_var = yLockMax_var
            };
            _beforeEnterLockZoneInstant?.Invoke(@params);
            self = @params.self;
            xLockMin_var = @params.xLockMin_var;
            xLockMax_var = @params.xLockMax_var;
            yLockMin_var = @params.yLockMin_var;
            yLockMax_var = @params.yLockMax_var;
            orig(self, xLockMin_var, xLockMax_var, yLockMin_var, yLockMax_var);
            if (_afterEnterLockZoneInstant != null) _afterEnterLockZoneInstant.Invoke(@params);
        }

        internal static void HookExitLockZone()
        {
            if (!HookedList.Contains("ExitLockZone"))
            {
                HookedList.Add("ExitLockZone");
                On.CameraTarget.ExitLockZone += ExitLockZone;
            }
        }

        internal static event Delegates.ExitLockZone_BeforeArgs _beforeExitLockZone;
        internal static event Delegates.ExitLockZone_NormalArgs _afterExitLockZone;

        private static void ExitLockZone(On.CameraTarget.orig_ExitLockZone orig, CameraTarget self)
        {
            Delegates.Params_ExitLockZone @params = new()
            {
                self = self
            };
            _beforeExitLockZone?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterExitLockZone != null) _afterExitLockZone.Invoke(@params);
        }

        internal static void HookSetDampTime()
        {
            if (!HookedList.Contains("SetDampTime"))
            {
                HookedList.Add("SetDampTime");
                On.CameraTarget.SetDampTime += SetDampTime;
            }
        }

        internal static event Delegates.SetDampTime_BeforeArgs _beforeSetDampTime;
        internal static event Delegates.SetDampTime_NormalArgs _afterSetDampTime;

        private static void SetDampTime(On.CameraTarget.orig_SetDampTime orig, CameraTarget self)
        {
            Delegates.Params_SetDampTime @params = new()
            {
                self = self
            };
            _beforeSetDampTime?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetDampTime != null) _afterSetDampTime.Invoke(@params);
        }

        internal static void HookSetSuperDash()
        {
            if (!HookedList.Contains("SetSuperDash"))
            {
                HookedList.Add("SetSuperDash");
                On.CameraTarget.SetSuperDash += SetSuperDash;
            }
        }

        internal static event Delegates.SetSuperDash_BeforeArgs _beforeSetSuperDash;
        internal static event Delegates.SetSuperDash_NormalArgs _afterSetSuperDash;

        private static void SetSuperDash(On.CameraTarget.orig_SetSuperDash orig, CameraTarget self, bool active)
        {
            Delegates.Params_SetSuperDash @params = new()
            {
                self = self, active = active
            };
            _beforeSetSuperDash?.Invoke(@params);
            self = @params.self;
            active = @params.active;
            orig(self, active);
            if (_afterSetSuperDash != null) _afterSetSuperDash.Invoke(@params);
        }

        internal static void HookSetQuake()
        {
            if (!HookedList.Contains("SetQuake"))
            {
                HookedList.Add("SetQuake");
                On.CameraTarget.SetQuake += SetQuake;
            }
        }

        internal static event Delegates.SetQuake_BeforeArgs _beforeSetQuake;
        internal static event Delegates.SetQuake_NormalArgs _afterSetQuake;

        private static void SetQuake(On.CameraTarget.orig_SetQuake orig, CameraTarget self, bool quake)
        {
            Delegates.Params_SetQuake @params = new()
            {
                self = self, quake = quake
            };
            _beforeSetQuake?.Invoke(@params);
            self = @params.self;
            quake = @params.quake;
            orig(self, quake);
            if (_afterSetQuake != null) _afterSetQuake.Invoke(@params);
        }

        internal static void HookFreezeInPlace()
        {
            if (!HookedList.Contains("FreezeInPlace"))
            {
                HookedList.Add("FreezeInPlace");
                On.CameraTarget.FreezeInPlace += FreezeInPlace;
            }
        }

        internal static event Delegates.FreezeInPlace_BeforeArgs _beforeFreezeInPlace;
        internal static event Delegates.FreezeInPlace_NormalArgs _afterFreezeInPlace;

        private static void FreezeInPlace(On.CameraTarget.orig_FreezeInPlace orig, CameraTarget self)
        {
            Delegates.Params_FreezeInPlace @params = new()
            {
                self = self
            };
            _beforeFreezeInPlace?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFreezeInPlace != null) _afterFreezeInPlace.Invoke(@params);
        }

        internal static void HookPositionToStart()
        {
            if (!HookedList.Contains("PositionToStart"))
            {
                HookedList.Add("PositionToStart");
                On.CameraTarget.PositionToStart += PositionToStart;
            }
        }

        internal static event Delegates.PositionToStart_BeforeArgs _beforePositionToStart;
        internal static event Delegates.PositionToStart_NormalArgs _afterPositionToStart;

        private static void PositionToStart(On.CameraTarget.orig_PositionToStart orig, CameraTarget self)
        {
            Delegates.Params_PositionToStart @params = new()
            {
                self = self
            };
            _beforePositionToStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPositionToStart != null) _afterPositionToStart.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void EnterLockZone_BeforeArgs(Params_EnterLockZone args);

        public delegate void EnterLockZone_NormalArgs(Params_EnterLockZone args);

        public delegate void EnterLockZoneInstant_BeforeArgs(Params_EnterLockZoneInstant args);

        public delegate void EnterLockZoneInstant_NormalArgs(Params_EnterLockZoneInstant args);

        public delegate void ExitLockZone_BeforeArgs(Params_ExitLockZone args);

        public delegate void ExitLockZone_NormalArgs(Params_ExitLockZone args);

        public delegate void FreezeInPlace_BeforeArgs(Params_FreezeInPlace args);

        public delegate void FreezeInPlace_NormalArgs(Params_FreezeInPlace args);

        public delegate void GameInit_BeforeArgs(Params_GameInit args);

        public delegate void GameInit_NormalArgs(Params_GameInit args);

        public delegate void PositionToStart_BeforeArgs(Params_PositionToStart args);

        public delegate void PositionToStart_NormalArgs(Params_PositionToStart args);

        public delegate void SceneInit_BeforeArgs(Params_SceneInit args);

        public delegate void SceneInit_NormalArgs(Params_SceneInit args);

        public delegate void SetDampTime_BeforeArgs(Params_SetDampTime args);

        public delegate void SetDampTime_NormalArgs(Params_SetDampTime args);

        public delegate void SetQuake_BeforeArgs(Params_SetQuake args);

        public delegate void SetQuake_NormalArgs(Params_SetQuake args);

        public delegate void SetSuperDash_BeforeArgs(Params_SetSuperDash args);

        public delegate void SetSuperDash_NormalArgs(Params_SetSuperDash args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_GameInit
        {
            public CameraTarget self;
        }

        public sealed class Params_SceneInit
        {
            public CameraTarget self;
        }

        public sealed class Params_Update
        {
            public CameraTarget self;
        }

        public sealed class Params_EnterLockZone
        {
            public CameraTarget self;
            public float xLockMax_var;
            public float xLockMin_var;
            public float yLockMax_var;
            public float yLockMin_var;
        }

        public sealed class Params_EnterLockZoneInstant
        {
            public CameraTarget self;
            public float xLockMax_var;
            public float xLockMin_var;
            public float yLockMax_var;
            public float yLockMin_var;
        }

        public sealed class Params_ExitLockZone
        {
            public CameraTarget self;
        }

        public sealed class Params_SetDampTime
        {
            public CameraTarget self;
        }

        public sealed class Params_SetSuperDash
        {
            public bool active;
            public CameraTarget self;
        }

        public sealed class Params_SetQuake
        {
            public bool quake;
            public CameraTarget self;
        }

        public sealed class Params_FreezeInPlace
        {
            public CameraTarget self;
        }

        public sealed class Params_PositionToStart
        {
            public CameraTarget self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.GameInit_BeforeArgs GameInit
        {
            add
            {
                HookHandler._beforeGameInit += value;
                HookHandler.HookGameInit();
            }
            remove => HookHandler._beforeGameInit -= value;
        }

        public static event Delegates.SceneInit_BeforeArgs SceneInit
        {
            add
            {
                HookHandler._beforeSceneInit += value;
                HookHandler.HookSceneInit();
            }
            remove => HookHandler._beforeSceneInit -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.EnterLockZone_BeforeArgs EnterLockZone
        {
            add
            {
                HookHandler._beforeEnterLockZone += value;
                HookHandler.HookEnterLockZone();
            }
            remove => HookHandler._beforeEnterLockZone -= value;
        }

        public static event Delegates.EnterLockZoneInstant_BeforeArgs EnterLockZoneInstant
        {
            add
            {
                HookHandler._beforeEnterLockZoneInstant += value;
                HookHandler.HookEnterLockZoneInstant();
            }
            remove => HookHandler._beforeEnterLockZoneInstant -= value;
        }

        public static event Delegates.ExitLockZone_BeforeArgs ExitLockZone
        {
            add
            {
                HookHandler._beforeExitLockZone += value;
                HookHandler.HookExitLockZone();
            }
            remove => HookHandler._beforeExitLockZone -= value;
        }

        public static event Delegates.SetDampTime_BeforeArgs SetDampTime
        {
            add
            {
                HookHandler._beforeSetDampTime += value;
                HookHandler.HookSetDampTime();
            }
            remove => HookHandler._beforeSetDampTime -= value;
        }

        public static event Delegates.SetSuperDash_BeforeArgs SetSuperDash
        {
            add
            {
                HookHandler._beforeSetSuperDash += value;
                HookHandler.HookSetSuperDash();
            }
            remove => HookHandler._beforeSetSuperDash -= value;
        }

        public static event Delegates.SetQuake_BeforeArgs SetQuake
        {
            add
            {
                HookHandler._beforeSetQuake += value;
                HookHandler.HookSetQuake();
            }
            remove => HookHandler._beforeSetQuake -= value;
        }

        public static event Delegates.FreezeInPlace_BeforeArgs FreezeInPlace
        {
            add
            {
                HookHandler._beforeFreezeInPlace += value;
                HookHandler.HookFreezeInPlace();
            }
            remove => HookHandler._beforeFreezeInPlace -= value;
        }

        public static event Delegates.PositionToStart_BeforeArgs PositionToStart
        {
            add
            {
                HookHandler._beforePositionToStart += value;
                HookHandler.HookPositionToStart();
            }
            remove => HookHandler._beforePositionToStart -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.GameInit_NormalArgs GameInit
        {
            add
            {
                HookHandler._afterGameInit += value;
                HookHandler.HookGameInit();
            }
            remove => HookHandler._afterGameInit -= value;
        }

        public static event Delegates.SceneInit_NormalArgs SceneInit
        {
            add
            {
                HookHandler._afterSceneInit += value;
                HookHandler.HookSceneInit();
            }
            remove => HookHandler._afterSceneInit -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.EnterLockZone_NormalArgs EnterLockZone
        {
            add
            {
                HookHandler._afterEnterLockZone += value;
                HookHandler.HookEnterLockZone();
            }
            remove => HookHandler._afterEnterLockZone -= value;
        }

        public static event Delegates.EnterLockZoneInstant_NormalArgs EnterLockZoneInstant
        {
            add
            {
                HookHandler._afterEnterLockZoneInstant += value;
                HookHandler.HookEnterLockZoneInstant();
            }
            remove => HookHandler._afterEnterLockZoneInstant -= value;
        }

        public static event Delegates.ExitLockZone_NormalArgs ExitLockZone
        {
            add
            {
                HookHandler._afterExitLockZone += value;
                HookHandler.HookExitLockZone();
            }
            remove => HookHandler._afterExitLockZone -= value;
        }

        public static event Delegates.SetDampTime_NormalArgs SetDampTime
        {
            add
            {
                HookHandler._afterSetDampTime += value;
                HookHandler.HookSetDampTime();
            }
            remove => HookHandler._afterSetDampTime -= value;
        }

        public static event Delegates.SetSuperDash_NormalArgs SetSuperDash
        {
            add
            {
                HookHandler._afterSetSuperDash += value;
                HookHandler.HookSetSuperDash();
            }
            remove => HookHandler._afterSetSuperDash -= value;
        }

        public static event Delegates.SetQuake_NormalArgs SetQuake
        {
            add
            {
                HookHandler._afterSetQuake += value;
                HookHandler.HookSetQuake();
            }
            remove => HookHandler._afterSetQuake -= value;
        }

        public static event Delegates.FreezeInPlace_NormalArgs FreezeInPlace
        {
            add
            {
                HookHandler._afterFreezeInPlace += value;
                HookHandler.HookFreezeInPlace();
            }
            remove => HookHandler._afterFreezeInPlace -= value;
        }

        public static event Delegates.PositionToStart_NormalArgs PositionToStart
        {
            add
            {
                HookHandler._afterPositionToStart += value;
                HookHandler.HookPositionToStart();
            }
            remove => HookHandler._afterPositionToStart -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.CameraTarget.hook_GameInit GameInit
        {
            add => On.CameraTarget.GameInit += value;
            remove => On.CameraTarget.GameInit -= value;
        }

        public static event On.CameraTarget.hook_SceneInit SceneInit
        {
            add => On.CameraTarget.SceneInit += value;
            remove => On.CameraTarget.SceneInit -= value;
        }

        public static event On.CameraTarget.hook_Update Update
        {
            add => On.CameraTarget.Update += value;
            remove => On.CameraTarget.Update -= value;
        }

        public static event On.CameraTarget.hook_EnterLockZone EnterLockZone
        {
            add => On.CameraTarget.EnterLockZone += value;
            remove => On.CameraTarget.EnterLockZone -= value;
        }

        public static event On.CameraTarget.hook_EnterLockZoneInstant EnterLockZoneInstant
        {
            add => On.CameraTarget.EnterLockZoneInstant += value;
            remove => On.CameraTarget.EnterLockZoneInstant -= value;
        }

        public static event On.CameraTarget.hook_ExitLockZone ExitLockZone
        {
            add => On.CameraTarget.ExitLockZone += value;
            remove => On.CameraTarget.ExitLockZone -= value;
        }

        public static event On.CameraTarget.hook_SetDampTime SetDampTime
        {
            add => On.CameraTarget.SetDampTime += value;
            remove => On.CameraTarget.SetDampTime -= value;
        }

        public static event On.CameraTarget.hook_SetSuperDash SetSuperDash
        {
            add => On.CameraTarget.SetSuperDash += value;
            remove => On.CameraTarget.SetSuperDash -= value;
        }

        public static event On.CameraTarget.hook_SetQuake SetQuake
        {
            add => On.CameraTarget.SetQuake += value;
            remove => On.CameraTarget.SetQuake -= value;
        }

        public static event On.CameraTarget.hook_FreezeInPlace FreezeInPlace
        {
            add => On.CameraTarget.FreezeInPlace += value;
            remove => On.CameraTarget.FreezeInPlace -= value;
        }

        public static event On.CameraTarget.hook_PositionToStart PositionToStart
        {
            add => On.CameraTarget.PositionToStart += value;
            remove => On.CameraTarget.PositionToStart -= value;
        }
    }
}