using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for MapMarkerMenu class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMapMarkerMenu
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.MapMarkerMenu.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.MapMarkerMenu.orig_Update orig, MapMarkerMenu self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
            {
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
            {
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOpen()
        {
            if (!HookedList.Contains("Open"))
            {
                HookedList.Add("Open");
                On.MapMarkerMenu.Open += Open;
            }
        }

        internal static event Delegates.Open_BeforeArgs _beforeOpen;
        internal static event Delegates.Open_AfterArgs _afterOpen;

        private static void Open(On.MapMarkerMenu.orig_Open orig, MapMarkerMenu self)
        {
            Delegates.Params_Open @params = new()
            {
                self = self
            };
            if (_beforeOpen != null)
            {
                foreach (Delegates.Open_BeforeArgs toInvoke in _beforeOpen.GetInvocationList())
                {
                    try
                    {
                        _beforeOpen?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOpen != null)
            {
                foreach (Delegates.Open_AfterArgs toInvoke in _afterOpen.GetInvocationList())
                {
                    try
                    {
                        _afterOpen.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookClose()
        {
            if (!HookedList.Contains("Close"))
            {
                HookedList.Add("Close");
                On.MapMarkerMenu.Close += Close;
            }
        }

        internal static event Delegates.Close_BeforeArgs _beforeClose;
        internal static event Delegates.Close_AfterArgs _afterClose;

        private static void Close(On.MapMarkerMenu.orig_Close orig, MapMarkerMenu self)
        {
            Delegates.Params_Close @params = new()
            {
                self = self
            };
            if (_beforeClose != null)
            {
                foreach (Delegates.Close_BeforeArgs toInvoke in _beforeClose.GetInvocationList())
                {
                    try
                    {
                        _beforeClose?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterClose != null)
            {
                foreach (Delegates.Close_AfterArgs toInvoke in _afterClose.GetInvocationList())
                {
                    try
                    {
                        _afterClose.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStartMarkerPlacement()
        {
            if (!HookedList.Contains("StartMarkerPlacement"))
            {
                HookedList.Add("StartMarkerPlacement");
                On.MapMarkerMenu.StartMarkerPlacement += StartMarkerPlacement;
            }
        }

        internal static event Delegates.StartMarkerPlacement_BeforeArgs _beforeStartMarkerPlacement;
        internal static event Delegates.StartMarkerPlacement_AfterArgs _afterStartMarkerPlacement;

        private static void StartMarkerPlacement(On.MapMarkerMenu.orig_StartMarkerPlacement orig, MapMarkerMenu self)
        {
            Delegates.Params_StartMarkerPlacement @params = new()
            {
                self = self
            };
            if (_beforeStartMarkerPlacement != null)
            {
                foreach (Delegates.StartMarkerPlacement_BeforeArgs toInvoke in _beforeStartMarkerPlacement
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeStartMarkerPlacement?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStartMarkerPlacement != null)
            {
                foreach (Delegates.StartMarkerPlacement_AfterArgs toInvoke in _afterStartMarkerPlacement
                             .GetInvocationList())
                {
                    try
                    {
                        _afterStartMarkerPlacement.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookPanMap()
        {
            if (!HookedList.Contains("PanMap"))
            {
                HookedList.Add("PanMap");
                On.MapMarkerMenu.PanMap += PanMap;
            }
        }

        internal static event Delegates.PanMap_BeforeArgs _beforePanMap;
        internal static event Delegates.PanMap_AfterArgs _afterPanMap;

        private static void PanMap(On.MapMarkerMenu.orig_PanMap orig, MapMarkerMenu self)
        {
            Delegates.Params_PanMap @params = new()
            {
                self = self
            };
            if (_beforePanMap != null)
            {
                foreach (Delegates.PanMap_BeforeArgs toInvoke in _beforePanMap.GetInvocationList())
                {
                    try
                    {
                        _beforePanMap?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterPanMap != null)
            {
                foreach (Delegates.PanMap_AfterArgs toInvoke in _afterPanMap.GetInvocationList())
                {
                    try
                    {
                        _afterPanMap.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookMarkerSelect()
        {
            if (!HookedList.Contains("MarkerSelect"))
            {
                HookedList.Add("MarkerSelect");
                On.MapMarkerMenu.MarkerSelect += MarkerSelect;
            }
        }

        internal static event Delegates.MarkerSelect_BeforeArgs _beforeMarkerSelect;
        internal static event Delegates.MarkerSelect_AfterArgs _afterMarkerSelect;

        private static void MarkerSelect(On.MapMarkerMenu.orig_MarkerSelect orig, MapMarkerMenu self, int selection)
        {
            Delegates.Params_MarkerSelect @params = new()
            {
                self = self, selection = selection
            };
            if (_beforeMarkerSelect != null)
            {
                foreach (Delegates.MarkerSelect_BeforeArgs toInvoke in _beforeMarkerSelect.GetInvocationList())
                {
                    try
                    {
                        _beforeMarkerSelect?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            selection = @params.selection;
            orig(self, selection);
            if (_afterMarkerSelect != null)
            {
                foreach (Delegates.MarkerSelect_AfterArgs toInvoke in _afterMarkerSelect.GetInvocationList())
                {
                    try
                    {
                        _afterMarkerSelect.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookPlaceMarker()
        {
            if (!HookedList.Contains("PlaceMarker"))
            {
                HookedList.Add("PlaceMarker");
                On.MapMarkerMenu.PlaceMarker += PlaceMarker;
            }
        }

        internal static event Delegates.PlaceMarker_BeforeArgs _beforePlaceMarker;
        internal static event Delegates.PlaceMarker_AfterArgs _afterPlaceMarker;

        private static void PlaceMarker(On.MapMarkerMenu.orig_PlaceMarker orig, MapMarkerMenu self)
        {
            Delegates.Params_PlaceMarker @params = new()
            {
                self = self
            };
            if (_beforePlaceMarker != null)
            {
                foreach (Delegates.PlaceMarker_BeforeArgs toInvoke in _beforePlaceMarker.GetInvocationList())
                {
                    try
                    {
                        _beforePlaceMarker?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterPlaceMarker != null)
            {
                foreach (Delegates.PlaceMarker_AfterArgs toInvoke in _afterPlaceMarker.GetInvocationList())
                {
                    try
                    {
                        _afterPlaceMarker.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookRemoveMarker()
        {
            if (!HookedList.Contains("RemoveMarker"))
            {
                HookedList.Add("RemoveMarker");
                On.MapMarkerMenu.RemoveMarker += RemoveMarker;
            }
        }

        internal static event Delegates.RemoveMarker_BeforeArgs _beforeRemoveMarker;
        internal static event Delegates.RemoveMarker_AfterArgs _afterRemoveMarker;

        private static void RemoveMarker(On.MapMarkerMenu.orig_RemoveMarker orig, MapMarkerMenu self)
        {
            Delegates.Params_RemoveMarker @params = new()
            {
                self = self
            };
            if (_beforeRemoveMarker != null)
            {
                foreach (Delegates.RemoveMarker_BeforeArgs toInvoke in _beforeRemoveMarker.GetInvocationList())
                {
                    try
                    {
                        _beforeRemoveMarker?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterRemoveMarker != null)
            {
                foreach (Delegates.RemoveMarker_AfterArgs toInvoke in _afterRemoveMarker.GetInvocationList())
                {
                    try
                    {
                        _afterRemoveMarker.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookMarkerSelectLeft()
        {
            if (!HookedList.Contains("MarkerSelectLeft"))
            {
                HookedList.Add("MarkerSelectLeft");
                On.MapMarkerMenu.MarkerSelectLeft += MarkerSelectLeft;
            }
        }

        internal static event Delegates.MarkerSelectLeft_BeforeArgs _beforeMarkerSelectLeft;
        internal static event Delegates.MarkerSelectLeft_AfterArgs _afterMarkerSelectLeft;

        private static void MarkerSelectLeft(On.MapMarkerMenu.orig_MarkerSelectLeft orig, MapMarkerMenu self)
        {
            Delegates.Params_MarkerSelectLeft @params = new()
            {
                self = self
            };
            if (_beforeMarkerSelectLeft != null)
            {
                foreach (Delegates.MarkerSelectLeft_BeforeArgs toInvoke in _beforeMarkerSelectLeft.GetInvocationList())
                {
                    try
                    {
                        _beforeMarkerSelectLeft?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterMarkerSelectLeft != null)
            {
                foreach (Delegates.MarkerSelectLeft_AfterArgs toInvoke in _afterMarkerSelectLeft.GetInvocationList())
                {
                    try
                    {
                        _afterMarkerSelectLeft.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookMarkerSelectRight()
        {
            if (!HookedList.Contains("MarkerSelectRight"))
            {
                HookedList.Add("MarkerSelectRight");
                On.MapMarkerMenu.MarkerSelectRight += MarkerSelectRight;
            }
        }

        internal static event Delegates.MarkerSelectRight_BeforeArgs _beforeMarkerSelectRight;
        internal static event Delegates.MarkerSelectRight_AfterArgs _afterMarkerSelectRight;

        private static void MarkerSelectRight(On.MapMarkerMenu.orig_MarkerSelectRight orig, MapMarkerMenu self)
        {
            Delegates.Params_MarkerSelectRight @params = new()
            {
                self = self
            };
            if (_beforeMarkerSelectRight != null)
            {
                foreach (Delegates.MarkerSelectRight_BeforeArgs toInvoke in
                         _beforeMarkerSelectRight.GetInvocationList())
                {
                    try
                    {
                        _beforeMarkerSelectRight?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterMarkerSelectRight != null)
            {
                foreach (Delegates.MarkerSelectRight_AfterArgs toInvoke in _afterMarkerSelectRight.GetInvocationList())
                {
                    try
                    {
                        _afterMarkerSelectRight.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateAmounts()
        {
            if (!HookedList.Contains("UpdateAmounts"))
            {
                HookedList.Add("UpdateAmounts");
                On.MapMarkerMenu.UpdateAmounts += UpdateAmounts;
            }
        }

        internal static event Delegates.UpdateAmounts_BeforeArgs _beforeUpdateAmounts;
        internal static event Delegates.UpdateAmounts_AfterArgs _afterUpdateAmounts;

        private static void UpdateAmounts(On.MapMarkerMenu.orig_UpdateAmounts orig, MapMarkerMenu self)
        {
            Delegates.Params_UpdateAmounts @params = new()
            {
                self = self
            };
            if (_beforeUpdateAmounts != null)
            {
                foreach (Delegates.UpdateAmounts_BeforeArgs toInvoke in _beforeUpdateAmounts.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateAmounts?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdateAmounts != null)
            {
                foreach (Delegates.UpdateAmounts_AfterArgs toInvoke in _afterUpdateAmounts.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateAmounts.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookAddToCollidingList()
        {
            if (!HookedList.Contains("AddToCollidingList"))
            {
                HookedList.Add("AddToCollidingList");
                On.MapMarkerMenu.AddToCollidingList += AddToCollidingList;
            }
        }

        internal static event Delegates.AddToCollidingList_BeforeArgs _beforeAddToCollidingList;
        internal static event Delegates.AddToCollidingList_AfterArgs _afterAddToCollidingList;

        private static void AddToCollidingList(On.MapMarkerMenu.orig_AddToCollidingList orig, MapMarkerMenu self,
            UnityEngine.GameObject go)
        {
            Delegates.Params_AddToCollidingList @params = new()
            {
                self = self, go = go
            };
            if (_beforeAddToCollidingList != null)
            {
                foreach (Delegates.AddToCollidingList_BeforeArgs toInvoke in
                         _beforeAddToCollidingList.GetInvocationList())
                {
                    try
                    {
                        _beforeAddToCollidingList?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            go = @params.go;
            orig(self, go);
            if (_afterAddToCollidingList != null)
            {
                foreach (Delegates.AddToCollidingList_AfterArgs toInvoke in
                         _afterAddToCollidingList.GetInvocationList())
                {
                    try
                    {
                        _afterAddToCollidingList.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookRemoveFromCollidingList()
        {
            if (!HookedList.Contains("RemoveFromCollidingList"))
            {
                HookedList.Add("RemoveFromCollidingList");
                On.MapMarkerMenu.RemoveFromCollidingList += RemoveFromCollidingList;
            }
        }

        internal static event Delegates.RemoveFromCollidingList_BeforeArgs _beforeRemoveFromCollidingList;
        internal static event Delegates.RemoveFromCollidingList_AfterArgs _afterRemoveFromCollidingList;

        private static void RemoveFromCollidingList(On.MapMarkerMenu.orig_RemoveFromCollidingList orig,
            MapMarkerMenu self, UnityEngine.GameObject go)
        {
            Delegates.Params_RemoveFromCollidingList @params = new()
            {
                self = self, go = go
            };
            if (_beforeRemoveFromCollidingList != null)
            {
                foreach (Delegates.RemoveFromCollidingList_BeforeArgs toInvoke in _beforeRemoveFromCollidingList
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeRemoveFromCollidingList?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            go = @params.go;
            orig(self, go);
            if (_afterRemoveFromCollidingList != null)
            {
                foreach (Delegates.RemoveFromCollidingList_AfterArgs toInvoke in _afterRemoveFromCollidingList
                             .GetInvocationList())
                {
                    try
                    {
                        _afterRemoveFromCollidingList.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookIsColliding()
        {
            if (!HookedList.Contains("IsColliding"))
            {
                HookedList.Add("IsColliding");
                On.MapMarkerMenu.IsColliding += IsColliding;
            }
        }

        internal static event Delegates.IsColliding_BeforeArgs _beforeIsColliding;
        internal static event Delegates.IsColliding_AfterArgs _afterIsColliding;

        private static void IsColliding(On.MapMarkerMenu.orig_IsColliding orig, MapMarkerMenu self)
        {
            Delegates.Params_IsColliding @params = new()
            {
                self = self
            };
            if (_beforeIsColliding != null)
            {
                foreach (Delegates.IsColliding_BeforeArgs toInvoke in _beforeIsColliding.GetInvocationList())
                {
                    try
                    {
                        _beforeIsColliding?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterIsColliding != null)
            {
                foreach (Delegates.IsColliding_AfterArgs toInvoke in _afterIsColliding.GetInvocationList())
                {
                    try
                    {
                        _afterIsColliding.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookIsNotColliding()
        {
            if (!HookedList.Contains("IsNotColliding"))
            {
                HookedList.Add("IsNotColliding");
                On.MapMarkerMenu.IsNotColliding += IsNotColliding;
            }
        }

        internal static event Delegates.IsNotColliding_BeforeArgs _beforeIsNotColliding;
        internal static event Delegates.IsNotColliding_AfterArgs _afterIsNotColliding;

        private static void IsNotColliding(On.MapMarkerMenu.orig_IsNotColliding orig, MapMarkerMenu self)
        {
            Delegates.Params_IsNotColliding @params = new()
            {
                self = self
            };
            if (_beforeIsNotColliding != null)
            {
                foreach (Delegates.IsNotColliding_BeforeArgs toInvoke in _beforeIsNotColliding.GetInvocationList())
                {
                    try
                    {
                        _beforeIsNotColliding?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterIsNotColliding != null)
            {
                foreach (Delegates.IsNotColliding_AfterArgs toInvoke in _afterIsNotColliding.GetInvocationList())
                {
                    try
                    {
                        _afterIsNotColliding.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Update
        {
            public MapMarkerMenu self;
        }

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<MapMarkerMenu> orig, MapMarkerMenu self);

        public sealed class Params_Open
        {
            public MapMarkerMenu self;
        }

        public delegate void Open_BeforeArgs(Params_Open args);

        public delegate void Open_AfterArgs(Params_Open args);

        public delegate void Open_WithArgs(Action<MapMarkerMenu> orig, MapMarkerMenu self);

        public sealed class Params_Close
        {
            public MapMarkerMenu self;
        }

        public delegate void Close_BeforeArgs(Params_Close args);

        public delegate void Close_AfterArgs(Params_Close args);

        public delegate void Close_WithArgs(Action<MapMarkerMenu> orig, MapMarkerMenu self);

        public sealed class Params_StartMarkerPlacement
        {
            public MapMarkerMenu self;
        }

        public delegate void StartMarkerPlacement_BeforeArgs(Params_StartMarkerPlacement args);

        public delegate void StartMarkerPlacement_AfterArgs(Params_StartMarkerPlacement args);

        public delegate void StartMarkerPlacement_WithArgs(Action<MapMarkerMenu> orig, MapMarkerMenu self);

        public sealed class Params_PanMap
        {
            public MapMarkerMenu self;
        }

        public delegate void PanMap_BeforeArgs(Params_PanMap args);

        public delegate void PanMap_AfterArgs(Params_PanMap args);

        public delegate void PanMap_WithArgs(Action<MapMarkerMenu> orig, MapMarkerMenu self);

        public sealed class Params_MarkerSelect
        {
            public MapMarkerMenu self;
            public int selection;
        }

        public delegate void MarkerSelect_BeforeArgs(Params_MarkerSelect args);

        public delegate void MarkerSelect_AfterArgs(Params_MarkerSelect args);

        public delegate void MarkerSelect_WithArgs(Action<MapMarkerMenu, int> orig, MapMarkerMenu self, int selection);

        public sealed class Params_PlaceMarker
        {
            public MapMarkerMenu self;
        }

        public delegate void PlaceMarker_BeforeArgs(Params_PlaceMarker args);

        public delegate void PlaceMarker_AfterArgs(Params_PlaceMarker args);

        public delegate void PlaceMarker_WithArgs(Action<MapMarkerMenu> orig, MapMarkerMenu self);

        public sealed class Params_RemoveMarker
        {
            public MapMarkerMenu self;
        }

        public delegate void RemoveMarker_BeforeArgs(Params_RemoveMarker args);

        public delegate void RemoveMarker_AfterArgs(Params_RemoveMarker args);

        public delegate void RemoveMarker_WithArgs(Action<MapMarkerMenu> orig, MapMarkerMenu self);

        public sealed class Params_MarkerSelectLeft
        {
            public MapMarkerMenu self;
        }

        public delegate void MarkerSelectLeft_BeforeArgs(Params_MarkerSelectLeft args);

        public delegate void MarkerSelectLeft_AfterArgs(Params_MarkerSelectLeft args);

        public delegate void MarkerSelectLeft_WithArgs(Action<MapMarkerMenu> orig, MapMarkerMenu self);

        public sealed class Params_MarkerSelectRight
        {
            public MapMarkerMenu self;
        }

        public delegate void MarkerSelectRight_BeforeArgs(Params_MarkerSelectRight args);

        public delegate void MarkerSelectRight_AfterArgs(Params_MarkerSelectRight args);

        public delegate void MarkerSelectRight_WithArgs(Action<MapMarkerMenu> orig, MapMarkerMenu self);

        public sealed class Params_UpdateAmounts
        {
            public MapMarkerMenu self;
        }

        public delegate void UpdateAmounts_BeforeArgs(Params_UpdateAmounts args);

        public delegate void UpdateAmounts_AfterArgs(Params_UpdateAmounts args);

        public delegate void UpdateAmounts_WithArgs(Action<MapMarkerMenu> orig, MapMarkerMenu self);

        public sealed class Params_AddToCollidingList
        {
            public MapMarkerMenu self;
            public UnityEngine.GameObject go;
        }

        public delegate void AddToCollidingList_BeforeArgs(Params_AddToCollidingList args);

        public delegate void AddToCollidingList_AfterArgs(Params_AddToCollidingList args);

        public delegate void AddToCollidingList_WithArgs(Action<MapMarkerMenu, UnityEngine.GameObject> orig,
            MapMarkerMenu self, UnityEngine.GameObject go);

        public sealed class Params_RemoveFromCollidingList
        {
            public MapMarkerMenu self;
            public UnityEngine.GameObject go;
        }

        public delegate void RemoveFromCollidingList_BeforeArgs(Params_RemoveFromCollidingList args);

        public delegate void RemoveFromCollidingList_AfterArgs(Params_RemoveFromCollidingList args);

        public delegate void RemoveFromCollidingList_WithArgs(Action<MapMarkerMenu, UnityEngine.GameObject> orig,
            MapMarkerMenu self, UnityEngine.GameObject go);

        public sealed class Params_IsColliding
        {
            public MapMarkerMenu self;
        }

        public delegate void IsColliding_BeforeArgs(Params_IsColliding args);

        public delegate void IsColliding_AfterArgs(Params_IsColliding args);

        public delegate void IsColliding_WithArgs(Action<MapMarkerMenu> orig, MapMarkerMenu self);

        public sealed class Params_IsNotColliding
        {
            public MapMarkerMenu self;
        }

        public delegate void IsNotColliding_BeforeArgs(Params_IsNotColliding args);

        public delegate void IsNotColliding_AfterArgs(Params_IsNotColliding args);

        public delegate void IsNotColliding_WithArgs(Action<MapMarkerMenu> orig, MapMarkerMenu self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.Open_BeforeArgs Open
        {
            add
            {
                HookHandler._beforeOpen += value;
                HookHandler.HookOpen();
            }
            remove => HookHandler._beforeOpen -= value;
        }

        public static event Delegates.Close_BeforeArgs Close
        {
            add
            {
                HookHandler._beforeClose += value;
                HookHandler.HookClose();
            }
            remove => HookHandler._beforeClose -= value;
        }

        public static event Delegates.StartMarkerPlacement_BeforeArgs StartMarkerPlacement
        {
            add
            {
                HookHandler._beforeStartMarkerPlacement += value;
                HookHandler.HookStartMarkerPlacement();
            }
            remove => HookHandler._beforeStartMarkerPlacement -= value;
        }

        public static event Delegates.PanMap_BeforeArgs PanMap
        {
            add
            {
                HookHandler._beforePanMap += value;
                HookHandler.HookPanMap();
            }
            remove => HookHandler._beforePanMap -= value;
        }

        public static event Delegates.MarkerSelect_BeforeArgs MarkerSelect
        {
            add
            {
                HookHandler._beforeMarkerSelect += value;
                HookHandler.HookMarkerSelect();
            }
            remove => HookHandler._beforeMarkerSelect -= value;
        }

        public static event Delegates.PlaceMarker_BeforeArgs PlaceMarker
        {
            add
            {
                HookHandler._beforePlaceMarker += value;
                HookHandler.HookPlaceMarker();
            }
            remove => HookHandler._beforePlaceMarker -= value;
        }

        public static event Delegates.RemoveMarker_BeforeArgs RemoveMarker
        {
            add
            {
                HookHandler._beforeRemoveMarker += value;
                HookHandler.HookRemoveMarker();
            }
            remove => HookHandler._beforeRemoveMarker -= value;
        }

        public static event Delegates.MarkerSelectLeft_BeforeArgs MarkerSelectLeft
        {
            add
            {
                HookHandler._beforeMarkerSelectLeft += value;
                HookHandler.HookMarkerSelectLeft();
            }
            remove => HookHandler._beforeMarkerSelectLeft -= value;
        }

        public static event Delegates.MarkerSelectRight_BeforeArgs MarkerSelectRight
        {
            add
            {
                HookHandler._beforeMarkerSelectRight += value;
                HookHandler.HookMarkerSelectRight();
            }
            remove => HookHandler._beforeMarkerSelectRight -= value;
        }

        public static event Delegates.UpdateAmounts_BeforeArgs UpdateAmounts
        {
            add
            {
                HookHandler._beforeUpdateAmounts += value;
                HookHandler.HookUpdateAmounts();
            }
            remove => HookHandler._beforeUpdateAmounts -= value;
        }

        public static event Delegates.AddToCollidingList_BeforeArgs AddToCollidingList
        {
            add
            {
                HookHandler._beforeAddToCollidingList += value;
                HookHandler.HookAddToCollidingList();
            }
            remove => HookHandler._beforeAddToCollidingList -= value;
        }

        public static event Delegates.RemoveFromCollidingList_BeforeArgs RemoveFromCollidingList
        {
            add
            {
                HookHandler._beforeRemoveFromCollidingList += value;
                HookHandler.HookRemoveFromCollidingList();
            }
            remove => HookHandler._beforeRemoveFromCollidingList -= value;
        }

        public static event Delegates.IsColliding_BeforeArgs IsColliding
        {
            add
            {
                HookHandler._beforeIsColliding += value;
                HookHandler.HookIsColliding();
            }
            remove => HookHandler._beforeIsColliding -= value;
        }

        public static event Delegates.IsNotColliding_BeforeArgs IsNotColliding
        {
            add
            {
                HookHandler._beforeIsNotColliding += value;
                HookHandler.HookIsNotColliding();
            }
            remove => HookHandler._beforeIsNotColliding -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.Open_AfterArgs Open
        {
            add
            {
                HookHandler._afterOpen += value;
                HookHandler.HookOpen();
            }
            remove => HookHandler._afterOpen -= value;
        }

        public static event Delegates.Close_AfterArgs Close
        {
            add
            {
                HookHandler._afterClose += value;
                HookHandler.HookClose();
            }
            remove => HookHandler._afterClose -= value;
        }

        public static event Delegates.StartMarkerPlacement_AfterArgs StartMarkerPlacement
        {
            add
            {
                HookHandler._afterStartMarkerPlacement += value;
                HookHandler.HookStartMarkerPlacement();
            }
            remove => HookHandler._afterStartMarkerPlacement -= value;
        }

        public static event Delegates.PanMap_AfterArgs PanMap
        {
            add
            {
                HookHandler._afterPanMap += value;
                HookHandler.HookPanMap();
            }
            remove => HookHandler._afterPanMap -= value;
        }

        public static event Delegates.MarkerSelect_AfterArgs MarkerSelect
        {
            add
            {
                HookHandler._afterMarkerSelect += value;
                HookHandler.HookMarkerSelect();
            }
            remove => HookHandler._afterMarkerSelect -= value;
        }

        public static event Delegates.PlaceMarker_AfterArgs PlaceMarker
        {
            add
            {
                HookHandler._afterPlaceMarker += value;
                HookHandler.HookPlaceMarker();
            }
            remove => HookHandler._afterPlaceMarker -= value;
        }

        public static event Delegates.RemoveMarker_AfterArgs RemoveMarker
        {
            add
            {
                HookHandler._afterRemoveMarker += value;
                HookHandler.HookRemoveMarker();
            }
            remove => HookHandler._afterRemoveMarker -= value;
        }

        public static event Delegates.MarkerSelectLeft_AfterArgs MarkerSelectLeft
        {
            add
            {
                HookHandler._afterMarkerSelectLeft += value;
                HookHandler.HookMarkerSelectLeft();
            }
            remove => HookHandler._afterMarkerSelectLeft -= value;
        }

        public static event Delegates.MarkerSelectRight_AfterArgs MarkerSelectRight
        {
            add
            {
                HookHandler._afterMarkerSelectRight += value;
                HookHandler.HookMarkerSelectRight();
            }
            remove => HookHandler._afterMarkerSelectRight -= value;
        }

        public static event Delegates.UpdateAmounts_AfterArgs UpdateAmounts
        {
            add
            {
                HookHandler._afterUpdateAmounts += value;
                HookHandler.HookUpdateAmounts();
            }
            remove => HookHandler._afterUpdateAmounts -= value;
        }

        public static event Delegates.AddToCollidingList_AfterArgs AddToCollidingList
        {
            add
            {
                HookHandler._afterAddToCollidingList += value;
                HookHandler.HookAddToCollidingList();
            }
            remove => HookHandler._afterAddToCollidingList -= value;
        }

        public static event Delegates.RemoveFromCollidingList_AfterArgs RemoveFromCollidingList
        {
            add
            {
                HookHandler._afterRemoveFromCollidingList += value;
                HookHandler.HookRemoveFromCollidingList();
            }
            remove => HookHandler._afterRemoveFromCollidingList -= value;
        }

        public static event Delegates.IsColliding_AfterArgs IsColliding
        {
            add
            {
                HookHandler._afterIsColliding += value;
                HookHandler.HookIsColliding();
            }
            remove => HookHandler._afterIsColliding -= value;
        }

        public static event Delegates.IsNotColliding_AfterArgs IsNotColliding
        {
            add
            {
                HookHandler._afterIsNotColliding += value;
                HookHandler.HookIsNotColliding();
            }
            remove => HookHandler._afterIsNotColliding -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.MapMarkerMenu.hook_Update Update
        {
            add => On.MapMarkerMenu.Update += value;
            remove => On.MapMarkerMenu.Update -= value;
        }

        public static event On.MapMarkerMenu.hook_Open Open
        {
            add => On.MapMarkerMenu.Open += value;
            remove => On.MapMarkerMenu.Open -= value;
        }

        public static event On.MapMarkerMenu.hook_Close Close
        {
            add => On.MapMarkerMenu.Close += value;
            remove => On.MapMarkerMenu.Close -= value;
        }

        public static event On.MapMarkerMenu.hook_StartMarkerPlacement StartMarkerPlacement
        {
            add => On.MapMarkerMenu.StartMarkerPlacement += value;
            remove => On.MapMarkerMenu.StartMarkerPlacement -= value;
        }

        public static event On.MapMarkerMenu.hook_PanMap PanMap
        {
            add => On.MapMarkerMenu.PanMap += value;
            remove => On.MapMarkerMenu.PanMap -= value;
        }

        public static event On.MapMarkerMenu.hook_MarkerSelect MarkerSelect
        {
            add => On.MapMarkerMenu.MarkerSelect += value;
            remove => On.MapMarkerMenu.MarkerSelect -= value;
        }

        public static event On.MapMarkerMenu.hook_PlaceMarker PlaceMarker
        {
            add => On.MapMarkerMenu.PlaceMarker += value;
            remove => On.MapMarkerMenu.PlaceMarker -= value;
        }

        public static event On.MapMarkerMenu.hook_RemoveMarker RemoveMarker
        {
            add => On.MapMarkerMenu.RemoveMarker += value;
            remove => On.MapMarkerMenu.RemoveMarker -= value;
        }

        public static event On.MapMarkerMenu.hook_MarkerSelectLeft MarkerSelectLeft
        {
            add => On.MapMarkerMenu.MarkerSelectLeft += value;
            remove => On.MapMarkerMenu.MarkerSelectLeft -= value;
        }

        public static event On.MapMarkerMenu.hook_MarkerSelectRight MarkerSelectRight
        {
            add => On.MapMarkerMenu.MarkerSelectRight += value;
            remove => On.MapMarkerMenu.MarkerSelectRight -= value;
        }

        public static event On.MapMarkerMenu.hook_UpdateAmounts UpdateAmounts
        {
            add => On.MapMarkerMenu.UpdateAmounts += value;
            remove => On.MapMarkerMenu.UpdateAmounts -= value;
        }

        public static event On.MapMarkerMenu.hook_AddToCollidingList AddToCollidingList
        {
            add => On.MapMarkerMenu.AddToCollidingList += value;
            remove => On.MapMarkerMenu.AddToCollidingList -= value;
        }

        public static event On.MapMarkerMenu.hook_RemoveFromCollidingList RemoveFromCollidingList
        {
            add => On.MapMarkerMenu.RemoveFromCollidingList += value;
            remove => On.MapMarkerMenu.RemoveFromCollidingList -= value;
        }

        public static event On.MapMarkerMenu.hook_IsColliding IsColliding
        {
            add => On.MapMarkerMenu.IsColliding += value;
            remove => On.MapMarkerMenu.IsColliding -= value;
        }

        public static event On.MapMarkerMenu.hook_IsNotColliding IsNotColliding
        {
            add => On.MapMarkerMenu.IsNotColliding += value;
            remove => On.MapMarkerMenu.IsNotColliding -= value;
        }
    }
}