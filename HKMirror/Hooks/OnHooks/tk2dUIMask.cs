using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for tk2dUIMask class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUIMask
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_ThisMeshFilter()
        {
            if (!HookedList.Contains("get_ThisMeshFilter"))
            {
                HookedList.Add("get_ThisMeshFilter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIMask), "get_ThisMeshFilter", true),
                    get_ThisMeshFilter);
            }
        }

        internal static event Delegates.get_ThisMeshFilter_BeforeArgs _beforeget_ThisMeshFilter;
        internal static event Delegates.get_ThisMeshFilter_AfterArgs _afterget_ThisMeshFilter;

        private static UnityEngine.MeshFilter get_ThisMeshFilter(Func<tk2dUIMask, UnityEngine.MeshFilter> orig,
            tk2dUIMask self)
        {
            Delegates.Params_get_ThisMeshFilter @params = new()
            {
                self = self
            };
            if (_beforeget_ThisMeshFilter != null)
            {
                foreach (Delegates.get_ThisMeshFilter_BeforeArgs toInvoke in
                         _beforeget_ThisMeshFilter.GetInvocationList())
                {
                    try
                    {
                        _beforeget_ThisMeshFilter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ThisMeshFilter != null)
            {
                foreach (Delegates.get_ThisMeshFilter_AfterArgs toInvoke in
                         _afterget_ThisMeshFilter.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_ThisMeshFilter.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_ThisBoxCollider()
        {
            if (!HookedList.Contains("get_ThisBoxCollider"))
            {
                HookedList.Add("get_ThisBoxCollider");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIMask), "get_ThisBoxCollider", true),
                    get_ThisBoxCollider);
            }
        }

        internal static event Delegates.get_ThisBoxCollider_BeforeArgs _beforeget_ThisBoxCollider;
        internal static event Delegates.get_ThisBoxCollider_AfterArgs _afterget_ThisBoxCollider;

        private static UnityEngine.BoxCollider get_ThisBoxCollider(Func<tk2dUIMask, UnityEngine.BoxCollider> orig,
            tk2dUIMask self)
        {
            Delegates.Params_get_ThisBoxCollider @params = new()
            {
                self = self
            };
            if (_beforeget_ThisBoxCollider != null)
            {
                foreach (Delegates.get_ThisBoxCollider_BeforeArgs toInvoke in _beforeget_ThisBoxCollider
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_ThisBoxCollider?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ThisBoxCollider != null)
            {
                foreach (Delegates.get_ThisBoxCollider_AfterArgs toInvoke in
                         _afterget_ThisBoxCollider.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_ThisBoxCollider.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.tk2dUIMask.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.tk2dUIMask.orig_Awake orig, tk2dUIMask self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
            {
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                {
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
            {
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                {
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.tk2dUIMask.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_AfterArgs _afterOnDestroy;

        private static void OnDestroy(On.tk2dUIMask.orig_OnDestroy orig, tk2dUIMask self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            if (_beforeOnDestroy != null)
            {
                foreach (Delegates.OnDestroy_BeforeArgs toInvoke in _beforeOnDestroy.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDestroy?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null)
            {
                foreach (Delegates.OnDestroy_AfterArgs toInvoke in _afterOnDestroy.GetInvocationList())
                {
                    try
                    {
                        _afterOnDestroy.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookFillMesh()
        {
            if (!HookedList.Contains("FillMesh"))
            {
                HookedList.Add("FillMesh");
                On.tk2dUIMask.FillMesh += FillMesh;
            }
        }

        internal static event Delegates.FillMesh_BeforeArgs _beforeFillMesh;
        internal static event Delegates.FillMesh_AfterArgs _afterFillMesh;

        private static UnityEngine.Mesh FillMesh(On.tk2dUIMask.orig_FillMesh orig, tk2dUIMask self,
            UnityEngine.Mesh mesh)
        {
            Delegates.Params_FillMesh @params = new()
            {
                self = self, mesh = mesh
            };
            if (_beforeFillMesh != null)
            {
                foreach (Delegates.FillMesh_BeforeArgs toInvoke in _beforeFillMesh.GetInvocationList())
                {
                    try
                    {
                        _beforeFillMesh?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            mesh = @params.mesh;
            var retVal = orig(self, mesh);
            if (_afterFillMesh != null)
            {
                foreach (Delegates.FillMesh_AfterArgs toInvoke in _afterFillMesh.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterFillMesh.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookOnDrawGizmosSelected()
        {
            if (!HookedList.Contains("OnDrawGizmosSelected"))
            {
                HookedList.Add("OnDrawGizmosSelected");
                On.tk2dUIMask.OnDrawGizmosSelected += OnDrawGizmosSelected;
            }
        }

        internal static event Delegates.OnDrawGizmosSelected_BeforeArgs _beforeOnDrawGizmosSelected;
        internal static event Delegates.OnDrawGizmosSelected_AfterArgs _afterOnDrawGizmosSelected;

        private static void OnDrawGizmosSelected(On.tk2dUIMask.orig_OnDrawGizmosSelected orig, tk2dUIMask self)
        {
            Delegates.Params_OnDrawGizmosSelected @params = new()
            {
                self = self
            };
            if (_beforeOnDrawGizmosSelected != null)
            {
                foreach (Delegates.OnDrawGizmosSelected_BeforeArgs toInvoke in _beforeOnDrawGizmosSelected
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeOnDrawGizmosSelected?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnDrawGizmosSelected != null)
            {
                foreach (Delegates.OnDrawGizmosSelected_AfterArgs toInvoke in _afterOnDrawGizmosSelected
                             .GetInvocationList())
                {
                    try
                    {
                        _afterOnDrawGizmosSelected.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookBuild()
        {
            if (!HookedList.Contains("Build"))
            {
                HookedList.Add("Build");
                On.tk2dUIMask.Build += Build;
            }
        }

        internal static event Delegates.Build_BeforeArgs _beforeBuild;
        internal static event Delegates.Build_AfterArgs _afterBuild;

        private static void Build(On.tk2dUIMask.orig_Build orig, tk2dUIMask self)
        {
            Delegates.Params_Build @params = new()
            {
                self = self
            };
            if (_beforeBuild != null)
            {
                foreach (Delegates.Build_BeforeArgs toInvoke in _beforeBuild.GetInvocationList())
                {
                    try
                    {
                        _beforeBuild?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterBuild != null)
            {
                foreach (Delegates.Build_AfterArgs toInvoke in _afterBuild.GetInvocationList())
                {
                    try
                    {
                        _afterBuild.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookReshapeBounds()
        {
            if (!HookedList.Contains("ReshapeBounds"))
            {
                HookedList.Add("ReshapeBounds");
                On.tk2dUIMask.ReshapeBounds += ReshapeBounds;
            }
        }

        internal static event Delegates.ReshapeBounds_BeforeArgs _beforeReshapeBounds;
        internal static event Delegates.ReshapeBounds_AfterArgs _afterReshapeBounds;

        private static void ReshapeBounds(On.tk2dUIMask.orig_ReshapeBounds orig, tk2dUIMask self,
            UnityEngine.Vector3 dMin, UnityEngine.Vector3 dMax)
        {
            Delegates.Params_ReshapeBounds @params = new()
            {
                self = self, dMin = dMin, dMax = dMax
            };
            if (_beforeReshapeBounds != null)
            {
                foreach (Delegates.ReshapeBounds_BeforeArgs toInvoke in _beforeReshapeBounds.GetInvocationList())
                {
                    try
                    {
                        _beforeReshapeBounds?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            dMin = @params.dMin;
            dMax = @params.dMax;
            orig(self, dMin, dMax);
            if (_afterReshapeBounds != null)
            {
                foreach (Delegates.ReshapeBounds_AfterArgs toInvoke in _afterReshapeBounds.GetInvocationList())
                {
                    try
                    {
                        _afterReshapeBounds.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_ThisMeshFilter
        {
            public tk2dUIMask self;
        }

        public delegate void get_ThisMeshFilter_BeforeArgs(Params_get_ThisMeshFilter args);

        public delegate UnityEngine.MeshFilter get_ThisMeshFilter_AfterArgs(Params_get_ThisMeshFilter args,
            UnityEngine.MeshFilter ret);

        public delegate UnityEngine.MeshFilter get_ThisMeshFilter_WithArgs(
            Func<tk2dUIMask, UnityEngine.MeshFilter> orig, tk2dUIMask self);

        public sealed class Params_get_ThisBoxCollider
        {
            public tk2dUIMask self;
        }

        public delegate void get_ThisBoxCollider_BeforeArgs(Params_get_ThisBoxCollider args);

        public delegate UnityEngine.BoxCollider get_ThisBoxCollider_AfterArgs(Params_get_ThisBoxCollider args,
            UnityEngine.BoxCollider ret);

        public delegate UnityEngine.BoxCollider get_ThisBoxCollider_WithArgs(
            Func<tk2dUIMask, UnityEngine.BoxCollider> orig, tk2dUIMask self);

        public sealed class Params_Awake
        {
            public tk2dUIMask self;
        }

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<tk2dUIMask> orig, tk2dUIMask self);

        public sealed class Params_OnDestroy
        {
            public tk2dUIMask self;
        }

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_AfterArgs(Params_OnDestroy args);

        public delegate void OnDestroy_WithArgs(Action<tk2dUIMask> orig, tk2dUIMask self);

        public sealed class Params_FillMesh
        {
            public tk2dUIMask self;
            public UnityEngine.Mesh mesh;
        }

        public delegate void FillMesh_BeforeArgs(Params_FillMesh args);

        public delegate UnityEngine.Mesh FillMesh_AfterArgs(Params_FillMesh args, UnityEngine.Mesh ret);

        public delegate UnityEngine.Mesh FillMesh_WithArgs(Func<tk2dUIMask, UnityEngine.Mesh, UnityEngine.Mesh> orig,
            tk2dUIMask self, UnityEngine.Mesh mesh);

        public sealed class Params_OnDrawGizmosSelected
        {
            public tk2dUIMask self;
        }

        public delegate void OnDrawGizmosSelected_BeforeArgs(Params_OnDrawGizmosSelected args);

        public delegate void OnDrawGizmosSelected_AfterArgs(Params_OnDrawGizmosSelected args);

        public delegate void OnDrawGizmosSelected_WithArgs(Action<tk2dUIMask> orig, tk2dUIMask self);

        public sealed class Params_Build
        {
            public tk2dUIMask self;
        }

        public delegate void Build_BeforeArgs(Params_Build args);

        public delegate void Build_AfterArgs(Params_Build args);

        public delegate void Build_WithArgs(Action<tk2dUIMask> orig, tk2dUIMask self);

        public sealed class Params_ReshapeBounds
        {
            public tk2dUIMask self;
            public UnityEngine.Vector3 dMin;
            public UnityEngine.Vector3 dMax;
        }

        public delegate void ReshapeBounds_BeforeArgs(Params_ReshapeBounds args);

        public delegate void ReshapeBounds_AfterArgs(Params_ReshapeBounds args);

        public delegate void ReshapeBounds_WithArgs(Action<tk2dUIMask, UnityEngine.Vector3, UnityEngine.Vector3> orig,
            tk2dUIMask self, UnityEngine.Vector3 dMin, UnityEngine.Vector3 dMax);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_ThisMeshFilter_BeforeArgs get_ThisMeshFilter
        {
            add
            {
                HookHandler._beforeget_ThisMeshFilter += value;
                HookHandler.Hookget_ThisMeshFilter();
            }
            remove => HookHandler._beforeget_ThisMeshFilter -= value;
        }

        public static event Delegates.get_ThisBoxCollider_BeforeArgs get_ThisBoxCollider
        {
            add
            {
                HookHandler._beforeget_ThisBoxCollider += value;
                HookHandler.Hookget_ThisBoxCollider();
            }
            remove => HookHandler._beforeget_ThisBoxCollider -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.FillMesh_BeforeArgs FillMesh
        {
            add
            {
                HookHandler._beforeFillMesh += value;
                HookHandler.HookFillMesh();
            }
            remove => HookHandler._beforeFillMesh -= value;
        }

        public static event Delegates.OnDrawGizmosSelected_BeforeArgs OnDrawGizmosSelected
        {
            add
            {
                HookHandler._beforeOnDrawGizmosSelected += value;
                HookHandler.HookOnDrawGizmosSelected();
            }
            remove => HookHandler._beforeOnDrawGizmosSelected -= value;
        }

        public static event Delegates.Build_BeforeArgs Build
        {
            add
            {
                HookHandler._beforeBuild += value;
                HookHandler.HookBuild();
            }
            remove => HookHandler._beforeBuild -= value;
        }

        public static event Delegates.ReshapeBounds_BeforeArgs ReshapeBounds
        {
            add
            {
                HookHandler._beforeReshapeBounds += value;
                HookHandler.HookReshapeBounds();
            }
            remove => HookHandler._beforeReshapeBounds -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_ThisMeshFilter_AfterArgs get_ThisMeshFilter
        {
            add
            {
                HookHandler._afterget_ThisMeshFilter += value;
                HookHandler.Hookget_ThisMeshFilter();
            }
            remove => HookHandler._afterget_ThisMeshFilter -= value;
        }

        public static event Delegates.get_ThisBoxCollider_AfterArgs get_ThisBoxCollider
        {
            add
            {
                HookHandler._afterget_ThisBoxCollider += value;
                HookHandler.Hookget_ThisBoxCollider();
            }
            remove => HookHandler._afterget_ThisBoxCollider -= value;
        }

        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnDestroy_AfterArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.FillMesh_AfterArgs FillMesh
        {
            add
            {
                HookHandler._afterFillMesh += value;
                HookHandler.HookFillMesh();
            }
            remove => HookHandler._afterFillMesh -= value;
        }

        public static event Delegates.OnDrawGizmosSelected_AfterArgs OnDrawGizmosSelected
        {
            add
            {
                HookHandler._afterOnDrawGizmosSelected += value;
                HookHandler.HookOnDrawGizmosSelected();
            }
            remove => HookHandler._afterOnDrawGizmosSelected -= value;
        }

        public static event Delegates.Build_AfterArgs Build
        {
            add
            {
                HookHandler._afterBuild += value;
                HookHandler.HookBuild();
            }
            remove => HookHandler._afterBuild -= value;
        }

        public static event Delegates.ReshapeBounds_AfterArgs ReshapeBounds
        {
            add
            {
                HookHandler._afterReshapeBounds += value;
                HookHandler.HookReshapeBounds();
            }
            remove => HookHandler._afterReshapeBounds -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_ThisMeshFilter_WithArgs get_ThisMeshFilter
        {
            add => HookEndpointManager.Add<Delegates.get_ThisMeshFilter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIMask), "get_ThisMeshFilter", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_ThisMeshFilter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIMask), "get_ThisMeshFilter", true), value);
        }

        public static event Delegates.get_ThisBoxCollider_WithArgs get_ThisBoxCollider
        {
            add => HookEndpointManager.Add<Delegates.get_ThisBoxCollider_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIMask), "get_ThisBoxCollider", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_ThisBoxCollider_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIMask), "get_ThisBoxCollider", true), value);
        }

        public static event On.tk2dUIMask.hook_Awake Awake
        {
            add => On.tk2dUIMask.Awake += value;
            remove => On.tk2dUIMask.Awake -= value;
        }

        public static event On.tk2dUIMask.hook_OnDestroy OnDestroy
        {
            add => On.tk2dUIMask.OnDestroy += value;
            remove => On.tk2dUIMask.OnDestroy -= value;
        }

        public static event On.tk2dUIMask.hook_FillMesh FillMesh
        {
            add => On.tk2dUIMask.FillMesh += value;
            remove => On.tk2dUIMask.FillMesh -= value;
        }

        public static event On.tk2dUIMask.hook_OnDrawGizmosSelected OnDrawGizmosSelected
        {
            add => On.tk2dUIMask.OnDrawGizmosSelected += value;
            remove => On.tk2dUIMask.OnDrawGizmosSelected -= value;
        }

        public static event On.tk2dUIMask.hook_Build Build
        {
            add => On.tk2dUIMask.Build += value;
            remove => On.tk2dUIMask.Build -= value;
        }

        public static event On.tk2dUIMask.hook_ReshapeBounds ReshapeBounds
        {
            add => On.tk2dUIMask.ReshapeBounds += value;
            remove => On.tk2dUIMask.ReshapeBounds -= value;
        }
    }
}