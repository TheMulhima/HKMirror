using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for InlineGraphicManager class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnInlineGraphicManager
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_spriteAsset()
{
if (!HookedList.Contains("get_spriteAsset"))
{
HookedList.Add("get_spriteAsset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "get_spriteAsset", true), get_spriteAsset);

}
}
internal static event Delegates.get_spriteAsset_BeforeArgs _beforeget_spriteAsset;
internal static event Delegates.get_spriteAsset_AfterArgs _afterget_spriteAsset;
private static TMPro.TMP_SpriteAsset get_spriteAsset(Func<TMPro.InlineGraphicManager, TMPro.TMP_SpriteAsset> orig, TMPro.InlineGraphicManager self)
{
Delegates.Params_get_spriteAsset @params = new() 
{
self = self
};
if (_beforeget_spriteAsset != null)
{
foreach (Delegates.get_spriteAsset_BeforeArgs toInvoke in _beforeget_spriteAsset.GetInvocationList())
{
try
{
_beforeget_spriteAsset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_spriteAsset != null)
{
foreach (Delegates.get_spriteAsset_AfterArgs toInvoke in _afterget_spriteAsset.GetInvocationList())
{
try
{
retVal = _afterget_spriteAsset.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_spriteAsset()
{
if (!HookedList.Contains("set_spriteAsset"))
{
HookedList.Add("set_spriteAsset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "set_spriteAsset", true), set_spriteAsset);

}
}
internal static event Delegates.set_spriteAsset_BeforeArgs _beforeset_spriteAsset;
internal static event Delegates.set_spriteAsset_AfterArgs _afterset_spriteAsset;
private static void set_spriteAsset(Action<TMPro.InlineGraphicManager,  TMPro.TMP_SpriteAsset> orig, TMPro.InlineGraphicManager self,  TMPro.TMP_SpriteAsset value)
{
Delegates.Params_set_spriteAsset @params = new() 
{
self = self
, value = value
};
if (_beforeset_spriteAsset != null)
{
foreach (Delegates.set_spriteAsset_BeforeArgs toInvoke in _beforeset_spriteAsset.GetInvocationList())
{
try
{
_beforeset_spriteAsset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_spriteAsset != null)
{
foreach (Delegates.set_spriteAsset_AfterArgs toInvoke in _afterset_spriteAsset.GetInvocationList())
{
try
{
_afterset_spriteAsset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_inlineGraphic()
{
if (!HookedList.Contains("get_inlineGraphic"))
{
HookedList.Add("get_inlineGraphic");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "get_inlineGraphic", true), get_inlineGraphic);

}
}
internal static event Delegates.get_inlineGraphic_BeforeArgs _beforeget_inlineGraphic;
internal static event Delegates.get_inlineGraphic_AfterArgs _afterget_inlineGraphic;
private static TMPro.InlineGraphic get_inlineGraphic(Func<TMPro.InlineGraphicManager, TMPro.InlineGraphic> orig, TMPro.InlineGraphicManager self)
{
Delegates.Params_get_inlineGraphic @params = new() 
{
self = self
};
if (_beforeget_inlineGraphic != null)
{
foreach (Delegates.get_inlineGraphic_BeforeArgs toInvoke in _beforeget_inlineGraphic.GetInvocationList())
{
try
{
_beforeget_inlineGraphic?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_inlineGraphic != null)
{
foreach (Delegates.get_inlineGraphic_AfterArgs toInvoke in _afterget_inlineGraphic.GetInvocationList())
{
try
{
retVal = _afterget_inlineGraphic.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_inlineGraphic()
{
if (!HookedList.Contains("set_inlineGraphic"))
{
HookedList.Add("set_inlineGraphic");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "set_inlineGraphic", true), set_inlineGraphic);

}
}
internal static event Delegates.set_inlineGraphic_BeforeArgs _beforeset_inlineGraphic;
internal static event Delegates.set_inlineGraphic_AfterArgs _afterset_inlineGraphic;
private static void set_inlineGraphic(Action<TMPro.InlineGraphicManager,  TMPro.InlineGraphic> orig, TMPro.InlineGraphicManager self,  TMPro.InlineGraphic value)
{
Delegates.Params_set_inlineGraphic @params = new() 
{
self = self
, value = value
};
if (_beforeset_inlineGraphic != null)
{
foreach (Delegates.set_inlineGraphic_BeforeArgs toInvoke in _beforeset_inlineGraphic.GetInvocationList())
{
try
{
_beforeset_inlineGraphic?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_inlineGraphic != null)
{
foreach (Delegates.set_inlineGraphic_AfterArgs toInvoke in _afterset_inlineGraphic.GetInvocationList())
{
try
{
_afterset_inlineGraphic.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_canvasRenderer()
{
if (!HookedList.Contains("get_canvasRenderer"))
{
HookedList.Add("get_canvasRenderer");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "get_canvasRenderer", true), get_canvasRenderer);

}
}
internal static event Delegates.get_canvasRenderer_BeforeArgs _beforeget_canvasRenderer;
internal static event Delegates.get_canvasRenderer_AfterArgs _afterget_canvasRenderer;
private static UnityEngine.CanvasRenderer get_canvasRenderer(Func<TMPro.InlineGraphicManager, UnityEngine.CanvasRenderer> orig, TMPro.InlineGraphicManager self)
{
Delegates.Params_get_canvasRenderer @params = new() 
{
self = self
};
if (_beforeget_canvasRenderer != null)
{
foreach (Delegates.get_canvasRenderer_BeforeArgs toInvoke in _beforeget_canvasRenderer.GetInvocationList())
{
try
{
_beforeget_canvasRenderer?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_canvasRenderer != null)
{
foreach (Delegates.get_canvasRenderer_AfterArgs toInvoke in _afterget_canvasRenderer.GetInvocationList())
{
try
{
retVal = _afterget_canvasRenderer.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_uiVertex()
{
if (!HookedList.Contains("get_uiVertex"))
{
HookedList.Add("get_uiVertex");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "get_uiVertex", true), get_uiVertex);

}
}
internal static event Delegates.get_uiVertex_BeforeArgs _beforeget_uiVertex;
internal static event Delegates.get_uiVertex_AfterArgs _afterget_uiVertex;
private static UnityEngine.UIVertex[] get_uiVertex(Func<TMPro.InlineGraphicManager, UnityEngine.UIVertex[]> orig, TMPro.InlineGraphicManager self)
{
Delegates.Params_get_uiVertex @params = new() 
{
self = self
};
if (_beforeget_uiVertex != null)
{
foreach (Delegates.get_uiVertex_BeforeArgs toInvoke in _beforeget_uiVertex.GetInvocationList())
{
try
{
_beforeget_uiVertex?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_uiVertex != null)
{
foreach (Delegates.get_uiVertex_AfterArgs toInvoke in _afterget_uiVertex.GetInvocationList())
{
try
{
retVal = _afterget_uiVertex.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "Awake", true), Awake);

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(Action<TMPro.InlineGraphicManager> orig, TMPro.InlineGraphicManager self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "OnEnable", true), OnEnable);

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(Action<TMPro.InlineGraphicManager> orig, TMPro.InlineGraphicManager self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDisable()
{
if (!HookedList.Contains("OnDisable"))
{
HookedList.Add("OnDisable");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "OnDisable", true), OnDisable);

}
}
internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;
private static void OnDisable(Action<TMPro.InlineGraphicManager> orig, TMPro.InlineGraphicManager self)
{
Delegates.Params_OnDisable @params = new() 
{
self = self
};
if (_beforeOnDisable != null)
{
foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
{
try
{
_beforeOnDisable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDisable != null)
{
foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
{
try
{
_afterOnDisable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDestroy()
{
if (!HookedList.Contains("OnDestroy"))
{
HookedList.Add("OnDestroy");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "OnDestroy", true), OnDestroy);

}
}
internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
internal static event Delegates.OnDestroy_AfterArgs _afterOnDestroy;
private static void OnDestroy(Action<TMPro.InlineGraphicManager> orig, TMPro.InlineGraphicManager self)
{
Delegates.Params_OnDestroy @params = new() 
{
self = self
};
if (_beforeOnDestroy != null)
{
foreach (Delegates.OnDestroy_BeforeArgs toInvoke in _beforeOnDestroy.GetInvocationList())
{
try
{
_beforeOnDestroy?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDestroy != null)
{
foreach (Delegates.OnDestroy_AfterArgs toInvoke in _afterOnDestroy.GetInvocationList())
{
try
{
_afterOnDestroy.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookLoadSpriteAsset()
{
if (!HookedList.Contains("LoadSpriteAsset"))
{
HookedList.Add("LoadSpriteAsset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "LoadSpriteAsset", true), LoadSpriteAsset);

}
}
internal static event Delegates.LoadSpriteAsset_BeforeArgs _beforeLoadSpriteAsset;
internal static event Delegates.LoadSpriteAsset_AfterArgs _afterLoadSpriteAsset;
private static void LoadSpriteAsset(Action<TMPro.InlineGraphicManager,  TMPro.TMP_SpriteAsset> orig, TMPro.InlineGraphicManager self,  TMPro.TMP_SpriteAsset spriteAsset)
{
Delegates.Params_LoadSpriteAsset @params = new() 
{
self = self
, spriteAsset = spriteAsset
};
if (_beforeLoadSpriteAsset != null)
{
foreach (Delegates.LoadSpriteAsset_BeforeArgs toInvoke in _beforeLoadSpriteAsset.GetInvocationList())
{
try
{
_beforeLoadSpriteAsset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
spriteAsset = @params.spriteAsset;
orig(self, spriteAsset);
if (_afterLoadSpriteAsset != null)
{
foreach (Delegates.LoadSpriteAsset_AfterArgs toInvoke in _afterLoadSpriteAsset.GetInvocationList())
{
try
{
_afterLoadSpriteAsset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAddInlineGraphicsChild()
{
if (!HookedList.Contains("AddInlineGraphicsChild"))
{
HookedList.Add("AddInlineGraphicsChild");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "AddInlineGraphicsChild", true), AddInlineGraphicsChild);

}
}
internal static event Delegates.AddInlineGraphicsChild_BeforeArgs _beforeAddInlineGraphicsChild;
internal static event Delegates.AddInlineGraphicsChild_AfterArgs _afterAddInlineGraphicsChild;
private static void AddInlineGraphicsChild(Action<TMPro.InlineGraphicManager> orig, TMPro.InlineGraphicManager self)
{
Delegates.Params_AddInlineGraphicsChild @params = new() 
{
self = self
};
if (_beforeAddInlineGraphicsChild != null)
{
foreach (Delegates.AddInlineGraphicsChild_BeforeArgs toInvoke in _beforeAddInlineGraphicsChild.GetInvocationList())
{
try
{
_beforeAddInlineGraphicsChild?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAddInlineGraphicsChild != null)
{
foreach (Delegates.AddInlineGraphicsChild_AfterArgs toInvoke in _afterAddInlineGraphicsChild.GetInvocationList())
{
try
{
_afterAddInlineGraphicsChild.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAllocatedVertexBuffers()
{
if (!HookedList.Contains("AllocatedVertexBuffers"))
{
HookedList.Add("AllocatedVertexBuffers");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "AllocatedVertexBuffers", true), AllocatedVertexBuffers);

}
}
internal static event Delegates.AllocatedVertexBuffers_BeforeArgs _beforeAllocatedVertexBuffers;
internal static event Delegates.AllocatedVertexBuffers_AfterArgs _afterAllocatedVertexBuffers;
private static void AllocatedVertexBuffers(Action<TMPro.InlineGraphicManager,  int> orig, TMPro.InlineGraphicManager self,  int size)
{
Delegates.Params_AllocatedVertexBuffers @params = new() 
{
self = self
, size = size
};
if (_beforeAllocatedVertexBuffers != null)
{
foreach (Delegates.AllocatedVertexBuffers_BeforeArgs toInvoke in _beforeAllocatedVertexBuffers.GetInvocationList())
{
try
{
_beforeAllocatedVertexBuffers?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
size = @params.size;
orig(self, size);
if (_afterAllocatedVertexBuffers != null)
{
foreach (Delegates.AllocatedVertexBuffers_AfterArgs toInvoke in _afterAllocatedVertexBuffers.GetInvocationList())
{
try
{
_afterAllocatedVertexBuffers.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdatePivot()
{
if (!HookedList.Contains("UpdatePivot"))
{
HookedList.Add("UpdatePivot");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "UpdatePivot", true), UpdatePivot);

}
}
internal static event Delegates.UpdatePivot_BeforeArgs _beforeUpdatePivot;
internal static event Delegates.UpdatePivot_AfterArgs _afterUpdatePivot;
private static void UpdatePivot(Action<TMPro.InlineGraphicManager,  UnityEngine.Vector2> orig, TMPro.InlineGraphicManager self,  UnityEngine.Vector2 pivot)
{
Delegates.Params_UpdatePivot @params = new() 
{
self = self
, pivot = pivot
};
if (_beforeUpdatePivot != null)
{
foreach (Delegates.UpdatePivot_BeforeArgs toInvoke in _beforeUpdatePivot.GetInvocationList())
{
try
{
_beforeUpdatePivot?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
pivot = @params.pivot;
orig(self, pivot);
if (_afterUpdatePivot != null)
{
foreach (Delegates.UpdatePivot_AfterArgs toInvoke in _afterUpdatePivot.GetInvocationList())
{
try
{
_afterUpdatePivot.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookClearUIVertex()
{
if (!HookedList.Contains("ClearUIVertex"))
{
HookedList.Add("ClearUIVertex");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "ClearUIVertex", true), ClearUIVertex);

}
}
internal static event Delegates.ClearUIVertex_BeforeArgs _beforeClearUIVertex;
internal static event Delegates.ClearUIVertex_AfterArgs _afterClearUIVertex;
private static void ClearUIVertex(Action<TMPro.InlineGraphicManager> orig, TMPro.InlineGraphicManager self)
{
Delegates.Params_ClearUIVertex @params = new() 
{
self = self
};
if (_beforeClearUIVertex != null)
{
foreach (Delegates.ClearUIVertex_BeforeArgs toInvoke in _beforeClearUIVertex.GetInvocationList())
{
try
{
_beforeClearUIVertex?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterClearUIVertex != null)
{
foreach (Delegates.ClearUIVertex_AfterArgs toInvoke in _afterClearUIVertex.GetInvocationList())
{
try
{
_afterClearUIVertex.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDrawSprite()
{
if (!HookedList.Contains("DrawSprite"))
{
HookedList.Add("DrawSprite");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "DrawSprite", true), DrawSprite);

}
}
internal static event Delegates.DrawSprite_BeforeArgs _beforeDrawSprite;
internal static event Delegates.DrawSprite_AfterArgs _afterDrawSprite;
private static void DrawSprite(Action<TMPro.InlineGraphicManager,  UnityEngine.UIVertex[],  int> orig, TMPro.InlineGraphicManager self,  UnityEngine.UIVertex[] uiVertices,  int spriteCount)
{
Delegates.Params_DrawSprite @params = new() 
{
self = self
, uiVertices = uiVertices
, spriteCount = spriteCount
};
if (_beforeDrawSprite != null)
{
foreach (Delegates.DrawSprite_BeforeArgs toInvoke in _beforeDrawSprite.GetInvocationList())
{
try
{
_beforeDrawSprite?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
uiVertices = @params.uiVertices;
spriteCount = @params.spriteCount;
orig(self, uiVertices, spriteCount);
if (_afterDrawSprite != null)
{
foreach (Delegates.DrawSprite_AfterArgs toInvoke in _afterDrawSprite.GetInvocationList())
{
try
{
_afterDrawSprite.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetSprite()
{
if (!HookedList.Contains("GetSprite"))
{
HookedList.Add("GetSprite");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "GetSprite", true), GetSprite);

}
}
internal static event Delegates.GetSprite_BeforeArgs _beforeGetSprite;
internal static event Delegates.GetSprite_AfterArgs _afterGetSprite;
private static TMPro.TMP_Sprite GetSprite(Func<TMPro.InlineGraphicManager,  int, TMPro.TMP_Sprite> orig, TMPro.InlineGraphicManager self,  int index)
{
Delegates.Params_GetSprite @params = new() 
{
self = self
, index = index
};
if (_beforeGetSprite != null)
{
foreach (Delegates.GetSprite_BeforeArgs toInvoke in _beforeGetSprite.GetInvocationList())
{
try
{
_beforeGetSprite?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
index = @params.index;
var retVal = orig(self, index);
if (_afterGetSprite != null)
{
foreach (Delegates.GetSprite_AfterArgs toInvoke in _afterGetSprite.GetInvocationList())
{
try
{
retVal = _afterGetSprite.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetSpriteIndexByHashCode()
{
if (!HookedList.Contains("GetSpriteIndexByHashCode"))
{
HookedList.Add("GetSpriteIndexByHashCode");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "GetSpriteIndexByHashCode", true), GetSpriteIndexByHashCode);

}
}
internal static event Delegates.GetSpriteIndexByHashCode_BeforeArgs _beforeGetSpriteIndexByHashCode;
internal static event Delegates.GetSpriteIndexByHashCode_AfterArgs _afterGetSpriteIndexByHashCode;
private static int GetSpriteIndexByHashCode(Func<TMPro.InlineGraphicManager,  int, int> orig, TMPro.InlineGraphicManager self,  int hashCode)
{
Delegates.Params_GetSpriteIndexByHashCode @params = new() 
{
self = self
, hashCode = hashCode
};
if (_beforeGetSpriteIndexByHashCode != null)
{
foreach (Delegates.GetSpriteIndexByHashCode_BeforeArgs toInvoke in _beforeGetSpriteIndexByHashCode.GetInvocationList())
{
try
{
_beforeGetSpriteIndexByHashCode?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
hashCode = @params.hashCode;
var retVal = orig(self, hashCode);
if (_afterGetSpriteIndexByHashCode != null)
{
foreach (Delegates.GetSpriteIndexByHashCode_AfterArgs toInvoke in _afterGetSpriteIndexByHashCode.GetInvocationList())
{
try
{
retVal = _afterGetSpriteIndexByHashCode.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetSpriteIndexByIndex()
{
if (!HookedList.Contains("GetSpriteIndexByIndex"))
{
HookedList.Add("GetSpriteIndexByIndex");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "GetSpriteIndexByIndex", true), GetSpriteIndexByIndex);

}
}
internal static event Delegates.GetSpriteIndexByIndex_BeforeArgs _beforeGetSpriteIndexByIndex;
internal static event Delegates.GetSpriteIndexByIndex_AfterArgs _afterGetSpriteIndexByIndex;
private static int GetSpriteIndexByIndex(Func<TMPro.InlineGraphicManager,  int, int> orig, TMPro.InlineGraphicManager self,  int index)
{
Delegates.Params_GetSpriteIndexByIndex @params = new() 
{
self = self
, index = index
};
if (_beforeGetSpriteIndexByIndex != null)
{
foreach (Delegates.GetSpriteIndexByIndex_BeforeArgs toInvoke in _beforeGetSpriteIndexByIndex.GetInvocationList())
{
try
{
_beforeGetSpriteIndexByIndex?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
index = @params.index;
var retVal = orig(self, index);
if (_afterGetSpriteIndexByIndex != null)
{
foreach (Delegates.GetSpriteIndexByIndex_AfterArgs toInvoke in _afterGetSpriteIndexByIndex.GetInvocationList())
{
try
{
retVal = _afterGetSpriteIndexByIndex.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookSetUIVertex()
{
if (!HookedList.Contains("SetUIVertex"))
{
HookedList.Add("SetUIVertex");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "SetUIVertex", true), SetUIVertex);

}
}
internal static event Delegates.SetUIVertex_BeforeArgs _beforeSetUIVertex;
internal static event Delegates.SetUIVertex_AfterArgs _afterSetUIVertex;
private static void SetUIVertex(Action<TMPro.InlineGraphicManager,  UnityEngine.UIVertex[]> orig, TMPro.InlineGraphicManager self,  UnityEngine.UIVertex[] uiVertex)
{
Delegates.Params_SetUIVertex @params = new() 
{
self = self
, uiVertex = uiVertex
};
if (_beforeSetUIVertex != null)
{
foreach (Delegates.SetUIVertex_BeforeArgs toInvoke in _beforeSetUIVertex.GetInvocationList())
{
try
{
_beforeSetUIVertex?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
uiVertex = @params.uiVertex;
orig(self, uiVertex);
if (_afterSetUIVertex != null)
{
foreach (Delegates.SetUIVertex_AfterArgs toInvoke in _afterSetUIVertex.GetInvocationList())
{
try
{
_afterSetUIVertex.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_spriteAsset
{
public TMPro.InlineGraphicManager self;
}
public delegate void get_spriteAsset_BeforeArgs(Params_get_spriteAsset args);
public delegate TMPro.TMP_SpriteAsset get_spriteAsset_AfterArgs(Params_get_spriteAsset args, TMPro.TMP_SpriteAsset ret);
public delegate TMPro.TMP_SpriteAsset get_spriteAsset_WithArgs (Func<TMPro.InlineGraphicManager, TMPro.TMP_SpriteAsset> orig, TMPro.InlineGraphicManager self);
public sealed class Params_set_spriteAsset
{
public TMPro.InlineGraphicManager self;
public TMPro.TMP_SpriteAsset value;
}
public delegate void set_spriteAsset_BeforeArgs(Params_set_spriteAsset args);
public delegate void set_spriteAsset_AfterArgs(Params_set_spriteAsset args);
public delegate void set_spriteAsset_WithArgs (Action<TMPro.InlineGraphicManager,  TMPro.TMP_SpriteAsset> orig, TMPro.InlineGraphicManager self,  TMPro.TMP_SpriteAsset value);
public sealed class Params_get_inlineGraphic
{
public TMPro.InlineGraphicManager self;
}
public delegate void get_inlineGraphic_BeforeArgs(Params_get_inlineGraphic args);
public delegate TMPro.InlineGraphic get_inlineGraphic_AfterArgs(Params_get_inlineGraphic args, TMPro.InlineGraphic ret);
public delegate TMPro.InlineGraphic get_inlineGraphic_WithArgs (Func<TMPro.InlineGraphicManager, TMPro.InlineGraphic> orig, TMPro.InlineGraphicManager self);
public sealed class Params_set_inlineGraphic
{
public TMPro.InlineGraphicManager self;
public TMPro.InlineGraphic value;
}
public delegate void set_inlineGraphic_BeforeArgs(Params_set_inlineGraphic args);
public delegate void set_inlineGraphic_AfterArgs(Params_set_inlineGraphic args);
public delegate void set_inlineGraphic_WithArgs (Action<TMPro.InlineGraphicManager,  TMPro.InlineGraphic> orig, TMPro.InlineGraphicManager self,  TMPro.InlineGraphic value);
public sealed class Params_get_canvasRenderer
{
public TMPro.InlineGraphicManager self;
}
public delegate void get_canvasRenderer_BeforeArgs(Params_get_canvasRenderer args);
public delegate UnityEngine.CanvasRenderer get_canvasRenderer_AfterArgs(Params_get_canvasRenderer args, UnityEngine.CanvasRenderer ret);
public delegate UnityEngine.CanvasRenderer get_canvasRenderer_WithArgs (Func<TMPro.InlineGraphicManager, UnityEngine.CanvasRenderer> orig, TMPro.InlineGraphicManager self);
public sealed class Params_get_uiVertex
{
public TMPro.InlineGraphicManager self;
}
public delegate void get_uiVertex_BeforeArgs(Params_get_uiVertex args);
public delegate UnityEngine.UIVertex[] get_uiVertex_AfterArgs(Params_get_uiVertex args, UnityEngine.UIVertex[] ret);
public delegate UnityEngine.UIVertex[] get_uiVertex_WithArgs (Func<TMPro.InlineGraphicManager, UnityEngine.UIVertex[]> orig, TMPro.InlineGraphicManager self);
public sealed class Params_Awake
{
public TMPro.InlineGraphicManager self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<TMPro.InlineGraphicManager> orig, TMPro.InlineGraphicManager self);
public sealed class Params_OnEnable
{
public TMPro.InlineGraphicManager self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<TMPro.InlineGraphicManager> orig, TMPro.InlineGraphicManager self);
public sealed class Params_OnDisable
{
public TMPro.InlineGraphicManager self;
}
public delegate void OnDisable_BeforeArgs(Params_OnDisable args);
public delegate void OnDisable_AfterArgs(Params_OnDisable args);
public delegate void OnDisable_WithArgs (Action<TMPro.InlineGraphicManager> orig, TMPro.InlineGraphicManager self);
public sealed class Params_OnDestroy
{
public TMPro.InlineGraphicManager self;
}
public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);
public delegate void OnDestroy_AfterArgs(Params_OnDestroy args);
public delegate void OnDestroy_WithArgs (Action<TMPro.InlineGraphicManager> orig, TMPro.InlineGraphicManager self);
public sealed class Params_LoadSpriteAsset
{
public TMPro.InlineGraphicManager self;
public TMPro.TMP_SpriteAsset spriteAsset;
}
public delegate void LoadSpriteAsset_BeforeArgs(Params_LoadSpriteAsset args);
public delegate void LoadSpriteAsset_AfterArgs(Params_LoadSpriteAsset args);
public delegate void LoadSpriteAsset_WithArgs (Action<TMPro.InlineGraphicManager,  TMPro.TMP_SpriteAsset> orig, TMPro.InlineGraphicManager self,  TMPro.TMP_SpriteAsset spriteAsset);
public sealed class Params_AddInlineGraphicsChild
{
public TMPro.InlineGraphicManager self;
}
public delegate void AddInlineGraphicsChild_BeforeArgs(Params_AddInlineGraphicsChild args);
public delegate void AddInlineGraphicsChild_AfterArgs(Params_AddInlineGraphicsChild args);
public delegate void AddInlineGraphicsChild_WithArgs (Action<TMPro.InlineGraphicManager> orig, TMPro.InlineGraphicManager self);
public sealed class Params_AllocatedVertexBuffers
{
public TMPro.InlineGraphicManager self;
public int size;
}
public delegate void AllocatedVertexBuffers_BeforeArgs(Params_AllocatedVertexBuffers args);
public delegate void AllocatedVertexBuffers_AfterArgs(Params_AllocatedVertexBuffers args);
public delegate void AllocatedVertexBuffers_WithArgs (Action<TMPro.InlineGraphicManager,  int> orig, TMPro.InlineGraphicManager self,  int size);
public sealed class Params_UpdatePivot
{
public TMPro.InlineGraphicManager self;
public UnityEngine.Vector2 pivot;
}
public delegate void UpdatePivot_BeforeArgs(Params_UpdatePivot args);
public delegate void UpdatePivot_AfterArgs(Params_UpdatePivot args);
public delegate void UpdatePivot_WithArgs (Action<TMPro.InlineGraphicManager,  UnityEngine.Vector2> orig, TMPro.InlineGraphicManager self,  UnityEngine.Vector2 pivot);
public sealed class Params_ClearUIVertex
{
public TMPro.InlineGraphicManager self;
}
public delegate void ClearUIVertex_BeforeArgs(Params_ClearUIVertex args);
public delegate void ClearUIVertex_AfterArgs(Params_ClearUIVertex args);
public delegate void ClearUIVertex_WithArgs (Action<TMPro.InlineGraphicManager> orig, TMPro.InlineGraphicManager self);
public sealed class Params_DrawSprite
{
public TMPro.InlineGraphicManager self;
public UnityEngine.UIVertex[] uiVertices;
public int spriteCount;
}
public delegate void DrawSprite_BeforeArgs(Params_DrawSprite args);
public delegate void DrawSprite_AfterArgs(Params_DrawSprite args);
public delegate void DrawSprite_WithArgs (Action<TMPro.InlineGraphicManager,  UnityEngine.UIVertex[],  int> orig, TMPro.InlineGraphicManager self,  UnityEngine.UIVertex[] uiVertices,  int spriteCount);
public sealed class Params_GetSprite
{
public TMPro.InlineGraphicManager self;
public int index;
}
public delegate void GetSprite_BeforeArgs(Params_GetSprite args);
public delegate TMPro.TMP_Sprite GetSprite_AfterArgs(Params_GetSprite args, TMPro.TMP_Sprite ret);
public delegate TMPro.TMP_Sprite GetSprite_WithArgs (Func<TMPro.InlineGraphicManager,  int, TMPro.TMP_Sprite> orig, TMPro.InlineGraphicManager self,  int index);
public sealed class Params_GetSpriteIndexByHashCode
{
public TMPro.InlineGraphicManager self;
public int hashCode;
}
public delegate void GetSpriteIndexByHashCode_BeforeArgs(Params_GetSpriteIndexByHashCode args);
public delegate int GetSpriteIndexByHashCode_AfterArgs(Params_GetSpriteIndexByHashCode args, int ret);
public delegate int GetSpriteIndexByHashCode_WithArgs (Func<TMPro.InlineGraphicManager,  int, int> orig, TMPro.InlineGraphicManager self,  int hashCode);
public sealed class Params_GetSpriteIndexByIndex
{
public TMPro.InlineGraphicManager self;
public int index;
}
public delegate void GetSpriteIndexByIndex_BeforeArgs(Params_GetSpriteIndexByIndex args);
public delegate int GetSpriteIndexByIndex_AfterArgs(Params_GetSpriteIndexByIndex args, int ret);
public delegate int GetSpriteIndexByIndex_WithArgs (Func<TMPro.InlineGraphicManager,  int, int> orig, TMPro.InlineGraphicManager self,  int index);
public sealed class Params_SetUIVertex
{
public TMPro.InlineGraphicManager self;
public UnityEngine.UIVertex[] uiVertex;
}
public delegate void SetUIVertex_BeforeArgs(Params_SetUIVertex args);
public delegate void SetUIVertex_AfterArgs(Params_SetUIVertex args);
public delegate void SetUIVertex_WithArgs (Action<TMPro.InlineGraphicManager,  UnityEngine.UIVertex[]> orig, TMPro.InlineGraphicManager self,  UnityEngine.UIVertex[] uiVertex);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_spriteAsset_BeforeArgs get_spriteAsset
{
add
{

HookHandler._beforeget_spriteAsset += value;
HookHandler.Hookget_spriteAsset();
}
remove => HookHandler._beforeget_spriteAsset -= value;
}
public static event Delegates.set_spriteAsset_BeforeArgs set_spriteAsset
{
add
{

HookHandler._beforeset_spriteAsset += value;
HookHandler.Hookset_spriteAsset();
}
remove => HookHandler._beforeset_spriteAsset -= value;
}
public static event Delegates.get_inlineGraphic_BeforeArgs get_inlineGraphic
{
add
{

HookHandler._beforeget_inlineGraphic += value;
HookHandler.Hookget_inlineGraphic();
}
remove => HookHandler._beforeget_inlineGraphic -= value;
}
public static event Delegates.set_inlineGraphic_BeforeArgs set_inlineGraphic
{
add
{

HookHandler._beforeset_inlineGraphic += value;
HookHandler.Hookset_inlineGraphic();
}
remove => HookHandler._beforeset_inlineGraphic -= value;
}
public static event Delegates.get_canvasRenderer_BeforeArgs get_canvasRenderer
{
add
{

HookHandler._beforeget_canvasRenderer += value;
HookHandler.Hookget_canvasRenderer();
}
remove => HookHandler._beforeget_canvasRenderer -= value;
}
public static event Delegates.get_uiVertex_BeforeArgs get_uiVertex
{
add
{

HookHandler._beforeget_uiVertex += value;
HookHandler.Hookget_uiVertex();
}
remove => HookHandler._beforeget_uiVertex -= value;
}
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.OnDisable_BeforeArgs OnDisable
{
add
{

HookHandler._beforeOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._beforeOnDisable -= value;
}
public static event Delegates.OnDestroy_BeforeArgs OnDestroy
{
add
{

HookHandler._beforeOnDestroy += value;
HookHandler.HookOnDestroy();
}
remove => HookHandler._beforeOnDestroy -= value;
}
public static event Delegates.LoadSpriteAsset_BeforeArgs LoadSpriteAsset
{
add
{

HookHandler._beforeLoadSpriteAsset += value;
HookHandler.HookLoadSpriteAsset();
}
remove => HookHandler._beforeLoadSpriteAsset -= value;
}
public static event Delegates.AddInlineGraphicsChild_BeforeArgs AddInlineGraphicsChild
{
add
{

HookHandler._beforeAddInlineGraphicsChild += value;
HookHandler.HookAddInlineGraphicsChild();
}
remove => HookHandler._beforeAddInlineGraphicsChild -= value;
}
public static event Delegates.AllocatedVertexBuffers_BeforeArgs AllocatedVertexBuffers
{
add
{

HookHandler._beforeAllocatedVertexBuffers += value;
HookHandler.HookAllocatedVertexBuffers();
}
remove => HookHandler._beforeAllocatedVertexBuffers -= value;
}
public static event Delegates.UpdatePivot_BeforeArgs UpdatePivot
{
add
{

HookHandler._beforeUpdatePivot += value;
HookHandler.HookUpdatePivot();
}
remove => HookHandler._beforeUpdatePivot -= value;
}
public static event Delegates.ClearUIVertex_BeforeArgs ClearUIVertex
{
add
{

HookHandler._beforeClearUIVertex += value;
HookHandler.HookClearUIVertex();
}
remove => HookHandler._beforeClearUIVertex -= value;
}
public static event Delegates.DrawSprite_BeforeArgs DrawSprite
{
add
{

HookHandler._beforeDrawSprite += value;
HookHandler.HookDrawSprite();
}
remove => HookHandler._beforeDrawSprite -= value;
}
public static event Delegates.GetSprite_BeforeArgs GetSprite
{
add
{

HookHandler._beforeGetSprite += value;
HookHandler.HookGetSprite();
}
remove => HookHandler._beforeGetSprite -= value;
}
public static event Delegates.GetSpriteIndexByHashCode_BeforeArgs GetSpriteIndexByHashCode
{
add
{

HookHandler._beforeGetSpriteIndexByHashCode += value;
HookHandler.HookGetSpriteIndexByHashCode();
}
remove => HookHandler._beforeGetSpriteIndexByHashCode -= value;
}
public static event Delegates.GetSpriteIndexByIndex_BeforeArgs GetSpriteIndexByIndex
{
add
{

HookHandler._beforeGetSpriteIndexByIndex += value;
HookHandler.HookGetSpriteIndexByIndex();
}
remove => HookHandler._beforeGetSpriteIndexByIndex -= value;
}
public static event Delegates.SetUIVertex_BeforeArgs SetUIVertex
{
add
{

HookHandler._beforeSetUIVertex += value;
HookHandler.HookSetUIVertex();
}
remove => HookHandler._beforeSetUIVertex -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_spriteAsset_AfterArgs get_spriteAsset
{
add
{

HookHandler._afterget_spriteAsset += value;
HookHandler.Hookget_spriteAsset();
}
remove => HookHandler._afterget_spriteAsset -= value;
}
public static event Delegates.set_spriteAsset_AfterArgs set_spriteAsset
{
add
{

HookHandler._afterset_spriteAsset += value;
HookHandler.Hookset_spriteAsset();
}
remove => HookHandler._afterset_spriteAsset -= value;
}
public static event Delegates.get_inlineGraphic_AfterArgs get_inlineGraphic
{
add
{

HookHandler._afterget_inlineGraphic += value;
HookHandler.Hookget_inlineGraphic();
}
remove => HookHandler._afterget_inlineGraphic -= value;
}
public static event Delegates.set_inlineGraphic_AfterArgs set_inlineGraphic
{
add
{

HookHandler._afterset_inlineGraphic += value;
HookHandler.Hookset_inlineGraphic();
}
remove => HookHandler._afterset_inlineGraphic -= value;
}
public static event Delegates.get_canvasRenderer_AfterArgs get_canvasRenderer
{
add
{

HookHandler._afterget_canvasRenderer += value;
HookHandler.Hookget_canvasRenderer();
}
remove => HookHandler._afterget_canvasRenderer -= value;
}
public static event Delegates.get_uiVertex_AfterArgs get_uiVertex
{
add
{

HookHandler._afterget_uiVertex += value;
HookHandler.Hookget_uiVertex();
}
remove => HookHandler._afterget_uiVertex -= value;
}
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.OnDisable_AfterArgs OnDisable
{
add
{

HookHandler._afterOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._afterOnDisable -= value;
}
public static event Delegates.OnDestroy_AfterArgs OnDestroy
{
add
{

HookHandler._afterOnDestroy += value;
HookHandler.HookOnDestroy();
}
remove => HookHandler._afterOnDestroy -= value;
}
public static event Delegates.LoadSpriteAsset_AfterArgs LoadSpriteAsset
{
add
{

HookHandler._afterLoadSpriteAsset += value;
HookHandler.HookLoadSpriteAsset();
}
remove => HookHandler._afterLoadSpriteAsset -= value;
}
public static event Delegates.AddInlineGraphicsChild_AfterArgs AddInlineGraphicsChild
{
add
{

HookHandler._afterAddInlineGraphicsChild += value;
HookHandler.HookAddInlineGraphicsChild();
}
remove => HookHandler._afterAddInlineGraphicsChild -= value;
}
public static event Delegates.AllocatedVertexBuffers_AfterArgs AllocatedVertexBuffers
{
add
{

HookHandler._afterAllocatedVertexBuffers += value;
HookHandler.HookAllocatedVertexBuffers();
}
remove => HookHandler._afterAllocatedVertexBuffers -= value;
}
public static event Delegates.UpdatePivot_AfterArgs UpdatePivot
{
add
{

HookHandler._afterUpdatePivot += value;
HookHandler.HookUpdatePivot();
}
remove => HookHandler._afterUpdatePivot -= value;
}
public static event Delegates.ClearUIVertex_AfterArgs ClearUIVertex
{
add
{

HookHandler._afterClearUIVertex += value;
HookHandler.HookClearUIVertex();
}
remove => HookHandler._afterClearUIVertex -= value;
}
public static event Delegates.DrawSprite_AfterArgs DrawSprite
{
add
{

HookHandler._afterDrawSprite += value;
HookHandler.HookDrawSprite();
}
remove => HookHandler._afterDrawSprite -= value;
}
public static event Delegates.GetSprite_AfterArgs GetSprite
{
add
{

HookHandler._afterGetSprite += value;
HookHandler.HookGetSprite();
}
remove => HookHandler._afterGetSprite -= value;
}
public static event Delegates.GetSpriteIndexByHashCode_AfterArgs GetSpriteIndexByHashCode
{
add
{

HookHandler._afterGetSpriteIndexByHashCode += value;
HookHandler.HookGetSpriteIndexByHashCode();
}
remove => HookHandler._afterGetSpriteIndexByHashCode -= value;
}
public static event Delegates.GetSpriteIndexByIndex_AfterArgs GetSpriteIndexByIndex
{
add
{

HookHandler._afterGetSpriteIndexByIndex += value;
HookHandler.HookGetSpriteIndexByIndex();
}
remove => HookHandler._afterGetSpriteIndexByIndex -= value;
}
public static event Delegates.SetUIVertex_AfterArgs SetUIVertex
{
add
{

HookHandler._afterSetUIVertex += value;
HookHandler.HookSetUIVertex();
}
remove => HookHandler._afterSetUIVertex -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_spriteAsset_WithArgs get_spriteAsset
{
add => HookEndpointManager.Add<Delegates.get_spriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "get_spriteAsset", true), value);
remove => HookEndpointManager.Remove<Delegates.get_spriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "get_spriteAsset", true), value);
}
public static event Delegates.set_spriteAsset_WithArgs set_spriteAsset
{
add => HookEndpointManager.Add<Delegates.set_spriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "set_spriteAsset", true), value);
remove => HookEndpointManager.Remove<Delegates.set_spriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "set_spriteAsset", true), value);
}
public static event Delegates.get_inlineGraphic_WithArgs get_inlineGraphic
{
add => HookEndpointManager.Add<Delegates.get_inlineGraphic_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "get_inlineGraphic", true), value);
remove => HookEndpointManager.Remove<Delegates.get_inlineGraphic_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "get_inlineGraphic", true), value);
}
public static event Delegates.set_inlineGraphic_WithArgs set_inlineGraphic
{
add => HookEndpointManager.Add<Delegates.set_inlineGraphic_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "set_inlineGraphic", true), value);
remove => HookEndpointManager.Remove<Delegates.set_inlineGraphic_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "set_inlineGraphic", true), value);
}
public static event Delegates.get_canvasRenderer_WithArgs get_canvasRenderer
{
add => HookEndpointManager.Add<Delegates.get_canvasRenderer_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "get_canvasRenderer", true), value);
remove => HookEndpointManager.Remove<Delegates.get_canvasRenderer_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "get_canvasRenderer", true), value);
}
public static event Delegates.get_uiVertex_WithArgs get_uiVertex
{
add => HookEndpointManager.Add<Delegates.get_uiVertex_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "get_uiVertex", true), value);
remove => HookEndpointManager.Remove<Delegates.get_uiVertex_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "get_uiVertex", true), value);
}
public static event Delegates.Awake_WithArgs Awake
{
add => HookEndpointManager.Add<Delegates.Awake_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "Awake", true), value);
remove => HookEndpointManager.Remove<Delegates.Awake_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "Awake", true), value);
}
public static event Delegates.OnEnable_WithArgs OnEnable
{
add => HookEndpointManager.Add<Delegates.OnEnable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "OnEnable", true), value);
remove => HookEndpointManager.Remove<Delegates.OnEnable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "OnEnable", true), value);
}
public static event Delegates.OnDisable_WithArgs OnDisable
{
add => HookEndpointManager.Add<Delegates.OnDisable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "OnDisable", true), value);
remove => HookEndpointManager.Remove<Delegates.OnDisable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "OnDisable", true), value);
}
public static event Delegates.OnDestroy_WithArgs OnDestroy
{
add => HookEndpointManager.Add<Delegates.OnDestroy_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "OnDestroy", true), value);
remove => HookEndpointManager.Remove<Delegates.OnDestroy_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "OnDestroy", true), value);
}
public static event Delegates.LoadSpriteAsset_WithArgs LoadSpriteAsset
{
add => HookEndpointManager.Add<Delegates.LoadSpriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "LoadSpriteAsset", true), value);
remove => HookEndpointManager.Remove<Delegates.LoadSpriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "LoadSpriteAsset", true), value);
}
public static event Delegates.AddInlineGraphicsChild_WithArgs AddInlineGraphicsChild
{
add => HookEndpointManager.Add<Delegates.AddInlineGraphicsChild_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "AddInlineGraphicsChild", true), value);
remove => HookEndpointManager.Remove<Delegates.AddInlineGraphicsChild_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "AddInlineGraphicsChild", true), value);
}
public static event Delegates.AllocatedVertexBuffers_WithArgs AllocatedVertexBuffers
{
add => HookEndpointManager.Add<Delegates.AllocatedVertexBuffers_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "AllocatedVertexBuffers", true), value);
remove => HookEndpointManager.Remove<Delegates.AllocatedVertexBuffers_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "AllocatedVertexBuffers", true), value);
}
public static event Delegates.UpdatePivot_WithArgs UpdatePivot
{
add => HookEndpointManager.Add<Delegates.UpdatePivot_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "UpdatePivot", true), value);
remove => HookEndpointManager.Remove<Delegates.UpdatePivot_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "UpdatePivot", true), value);
}
public static event Delegates.ClearUIVertex_WithArgs ClearUIVertex
{
add => HookEndpointManager.Add<Delegates.ClearUIVertex_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "ClearUIVertex", true), value);
remove => HookEndpointManager.Remove<Delegates.ClearUIVertex_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "ClearUIVertex", true), value);
}
public static event Delegates.DrawSprite_WithArgs DrawSprite
{
add => HookEndpointManager.Add<Delegates.DrawSprite_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "DrawSprite", true), value);
remove => HookEndpointManager.Remove<Delegates.DrawSprite_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "DrawSprite", true), value);
}
public static event Delegates.GetSprite_WithArgs GetSprite
{
add => HookEndpointManager.Add<Delegates.GetSprite_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "GetSprite", true), value);
remove => HookEndpointManager.Remove<Delegates.GetSprite_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "GetSprite", true), value);
}
public static event Delegates.GetSpriteIndexByHashCode_WithArgs GetSpriteIndexByHashCode
{
add => HookEndpointManager.Add<Delegates.GetSpriteIndexByHashCode_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "GetSpriteIndexByHashCode", true), value);
remove => HookEndpointManager.Remove<Delegates.GetSpriteIndexByHashCode_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "GetSpriteIndexByHashCode", true), value);
}
public static event Delegates.GetSpriteIndexByIndex_WithArgs GetSpriteIndexByIndex
{
add => HookEndpointManager.Add<Delegates.GetSpriteIndexByIndex_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "GetSpriteIndexByIndex", true), value);
remove => HookEndpointManager.Remove<Delegates.GetSpriteIndexByIndex_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "GetSpriteIndexByIndex", true), value);
}
public static event Delegates.SetUIVertex_WithArgs SetUIVertex
{
add => HookEndpointManager.Add<Delegates.SetUIVertex_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "SetUIVertex", true), value);
remove => HookEndpointManager.Remove<Delegates.SetUIVertex_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphicManager), "SetUIVertex", true), value);
}
}

}
