using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for InlineGraphicManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnInlineGraphicManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_spriteAsset()
        {
            if (!HookedList.Contains("get_spriteAsset"))
            {
                HookedList.Add("get_spriteAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "get_spriteAsset"),
                    get_spriteAsset);
            }
        }

        internal static event Delegates.get_spriteAsset_BeforeArgs _beforeget_spriteAsset;
        internal static event Delegates.get_spriteAsset_NormalArgs _afterget_spriteAsset;

        private static TMP_SpriteAsset get_spriteAsset(Func<InlineGraphicManager, TMP_SpriteAsset> orig,
            InlineGraphicManager self)
        {
            Delegates.Params_get_spriteAsset @params = new()
            {
                self = self
            };
            _beforeget_spriteAsset?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_spriteAsset != null) retVal = _afterget_spriteAsset.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_spriteAsset()
        {
            if (!HookedList.Contains("set_spriteAsset"))
            {
                HookedList.Add("set_spriteAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "set_spriteAsset"),
                    set_spriteAsset);
            }
        }

        internal static event Delegates.set_spriteAsset_BeforeArgs _beforeset_spriteAsset;
        internal static event Delegates.set_spriteAsset_NormalArgs _afterset_spriteAsset;

        private static void set_spriteAsset(Action<InlineGraphicManager, TMP_SpriteAsset> orig,
            InlineGraphicManager self, TMP_SpriteAsset value)
        {
            Delegates.Params_set_spriteAsset @params = new()
            {
                self = self, value = value
            };
            _beforeset_spriteAsset?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_spriteAsset != null) _afterset_spriteAsset.Invoke(@params);
        }

        internal static void Hookget_inlineGraphic()
        {
            if (!HookedList.Contains("get_inlineGraphic"))
            {
                HookedList.Add("get_inlineGraphic");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "get_inlineGraphic"),
                    get_inlineGraphic);
            }
        }

        internal static event Delegates.get_inlineGraphic_BeforeArgs _beforeget_inlineGraphic;
        internal static event Delegates.get_inlineGraphic_NormalArgs _afterget_inlineGraphic;

        private static InlineGraphic get_inlineGraphic(Func<InlineGraphicManager, InlineGraphic> orig,
            InlineGraphicManager self)
        {
            Delegates.Params_get_inlineGraphic @params = new()
            {
                self = self
            };
            _beforeget_inlineGraphic?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_inlineGraphic != null) retVal = _afterget_inlineGraphic.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_inlineGraphic()
        {
            if (!HookedList.Contains("set_inlineGraphic"))
            {
                HookedList.Add("set_inlineGraphic");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "set_inlineGraphic"),
                    set_inlineGraphic);
            }
        }

        internal static event Delegates.set_inlineGraphic_BeforeArgs _beforeset_inlineGraphic;
        internal static event Delegates.set_inlineGraphic_NormalArgs _afterset_inlineGraphic;

        private static void set_inlineGraphic(Action<InlineGraphicManager, InlineGraphic> orig,
            InlineGraphicManager self, InlineGraphic value)
        {
            Delegates.Params_set_inlineGraphic @params = new()
            {
                self = self, value = value
            };
            _beforeset_inlineGraphic?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_inlineGraphic != null) _afterset_inlineGraphic.Invoke(@params);
        }

        internal static void Hookget_canvasRenderer()
        {
            if (!HookedList.Contains("get_canvasRenderer"))
            {
                HookedList.Add("get_canvasRenderer");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "get_canvasRenderer"),
                    get_canvasRenderer);
            }
        }

        internal static event Delegates.get_canvasRenderer_BeforeArgs _beforeget_canvasRenderer;
        internal static event Delegates.get_canvasRenderer_NormalArgs _afterget_canvasRenderer;

        private static CanvasRenderer get_canvasRenderer(Func<InlineGraphicManager, CanvasRenderer> orig,
            InlineGraphicManager self)
        {
            Delegates.Params_get_canvasRenderer @params = new()
            {
                self = self
            };
            _beforeget_canvasRenderer?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_canvasRenderer != null) retVal = _afterget_canvasRenderer.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_uiVertex()
        {
            if (!HookedList.Contains("get_uiVertex"))
            {
                HookedList.Add("get_uiVertex");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "get_uiVertex"), get_uiVertex);
            }
        }

        internal static event Delegates.get_uiVertex_BeforeArgs _beforeget_uiVertex;
        internal static event Delegates.get_uiVertex_NormalArgs _afterget_uiVertex;

        private static UIVertex[] get_uiVertex(Func<InlineGraphicManager, UIVertex[]> orig, InlineGraphicManager self)
        {
            Delegates.Params_get_uiVertex @params = new()
            {
                self = self
            };
            _beforeget_uiVertex?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_uiVertex != null) retVal = _afterget_uiVertex.Invoke(@params);
            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "Awake"), Awake);
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(Action<InlineGraphicManager> orig, InlineGraphicManager self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "OnEnable"), OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(Action<InlineGraphicManager> orig, InlineGraphicManager self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "OnDisable"), OnDisable);
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(Action<InlineGraphicManager> orig, InlineGraphicManager self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "OnDestroy"), OnDestroy);
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_NormalArgs _afterOnDestroy;

        private static void OnDestroy(Action<InlineGraphicManager> orig, InlineGraphicManager self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            _beforeOnDestroy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null) _afterOnDestroy.Invoke(@params);
        }

        internal static void HookLoadSpriteAsset()
        {
            if (!HookedList.Contains("LoadSpriteAsset"))
            {
                HookedList.Add("LoadSpriteAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "LoadSpriteAsset"),
                    LoadSpriteAsset);
            }
        }

        internal static event Delegates.LoadSpriteAsset_BeforeArgs _beforeLoadSpriteAsset;
        internal static event Delegates.LoadSpriteAsset_NormalArgs _afterLoadSpriteAsset;

        private static void LoadSpriteAsset(Action<InlineGraphicManager, TMP_SpriteAsset> orig,
            InlineGraphicManager self, TMP_SpriteAsset spriteAsset)
        {
            Delegates.Params_LoadSpriteAsset @params = new()
            {
                self = self, spriteAsset = spriteAsset
            };
            _beforeLoadSpriteAsset?.Invoke(@params);
            self = @params.self;
            spriteAsset = @params.spriteAsset;
            orig(self, spriteAsset);
            if (_afterLoadSpriteAsset != null) _afterLoadSpriteAsset.Invoke(@params);
        }

        internal static void HookAddInlineGraphicsChild()
        {
            if (!HookedList.Contains("AddInlineGraphicsChild"))
            {
                HookedList.Add("AddInlineGraphicsChild");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "AddInlineGraphicsChild"),
                    AddInlineGraphicsChild);
            }
        }

        internal static event Delegates.AddInlineGraphicsChild_BeforeArgs _beforeAddInlineGraphicsChild;
        internal static event Delegates.AddInlineGraphicsChild_NormalArgs _afterAddInlineGraphicsChild;

        private static void AddInlineGraphicsChild(Action<InlineGraphicManager> orig, InlineGraphicManager self)
        {
            Delegates.Params_AddInlineGraphicsChild @params = new()
            {
                self = self
            };
            _beforeAddInlineGraphicsChild?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAddInlineGraphicsChild != null) _afterAddInlineGraphicsChild.Invoke(@params);
        }

        internal static void HookAllocatedVertexBuffers()
        {
            if (!HookedList.Contains("AllocatedVertexBuffers"))
            {
                HookedList.Add("AllocatedVertexBuffers");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "AllocatedVertexBuffers"),
                    AllocatedVertexBuffers);
            }
        }

        internal static event Delegates.AllocatedVertexBuffers_BeforeArgs _beforeAllocatedVertexBuffers;
        internal static event Delegates.AllocatedVertexBuffers_NormalArgs _afterAllocatedVertexBuffers;

        private static void AllocatedVertexBuffers(Action<InlineGraphicManager, int> orig, InlineGraphicManager self,
            int size)
        {
            Delegates.Params_AllocatedVertexBuffers @params = new()
            {
                self = self, size = size
            };
            _beforeAllocatedVertexBuffers?.Invoke(@params);
            self = @params.self;
            size = @params.size;
            orig(self, size);
            if (_afterAllocatedVertexBuffers != null) _afterAllocatedVertexBuffers.Invoke(@params);
        }

        internal static void HookUpdatePivot()
        {
            if (!HookedList.Contains("UpdatePivot"))
            {
                HookedList.Add("UpdatePivot");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "UpdatePivot"), UpdatePivot);
            }
        }

        internal static event Delegates.UpdatePivot_BeforeArgs _beforeUpdatePivot;
        internal static event Delegates.UpdatePivot_NormalArgs _afterUpdatePivot;

        private static void UpdatePivot(Action<InlineGraphicManager, Vector2> orig, InlineGraphicManager self,
            Vector2 pivot)
        {
            Delegates.Params_UpdatePivot @params = new()
            {
                self = self, pivot = pivot
            };
            _beforeUpdatePivot?.Invoke(@params);
            self = @params.self;
            pivot = @params.pivot;
            orig(self, pivot);
            if (_afterUpdatePivot != null) _afterUpdatePivot.Invoke(@params);
        }

        internal static void HookClearUIVertex()
        {
            if (!HookedList.Contains("ClearUIVertex"))
            {
                HookedList.Add("ClearUIVertex");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "ClearUIVertex"), ClearUIVertex);
            }
        }

        internal static event Delegates.ClearUIVertex_BeforeArgs _beforeClearUIVertex;
        internal static event Delegates.ClearUIVertex_NormalArgs _afterClearUIVertex;

        private static void ClearUIVertex(Action<InlineGraphicManager> orig, InlineGraphicManager self)
        {
            Delegates.Params_ClearUIVertex @params = new()
            {
                self = self
            };
            _beforeClearUIVertex?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClearUIVertex != null) _afterClearUIVertex.Invoke(@params);
        }

        internal static void HookDrawSprite()
        {
            if (!HookedList.Contains("DrawSprite"))
            {
                HookedList.Add("DrawSprite");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "DrawSprite"), DrawSprite);
            }
        }

        internal static event Delegates.DrawSprite_BeforeArgs _beforeDrawSprite;
        internal static event Delegates.DrawSprite_NormalArgs _afterDrawSprite;

        private static void DrawSprite(Action<InlineGraphicManager, UIVertex[], int> orig, InlineGraphicManager self,
            UIVertex[] uiVertices, int spriteCount)
        {
            Delegates.Params_DrawSprite @params = new()
            {
                self = self, uiVertices = uiVertices, spriteCount = spriteCount
            };
            _beforeDrawSprite?.Invoke(@params);
            self = @params.self;
            uiVertices = @params.uiVertices;
            spriteCount = @params.spriteCount;
            orig(self, uiVertices, spriteCount);
            if (_afterDrawSprite != null) _afterDrawSprite.Invoke(@params);
        }

        internal static void HookGetSprite()
        {
            if (!HookedList.Contains("GetSprite"))
            {
                HookedList.Add("GetSprite");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "GetSprite"), GetSprite);
            }
        }

        internal static event Delegates.GetSprite_BeforeArgs _beforeGetSprite;
        internal static event Delegates.GetSprite_NormalArgs _afterGetSprite;

        private static TMP_Sprite GetSprite(Func<InlineGraphicManager, int, TMP_Sprite> orig, InlineGraphicManager self,
            int index)
        {
            Delegates.Params_GetSprite @params = new()
            {
                self = self, index = index
            };
            _beforeGetSprite?.Invoke(@params);
            self = @params.self;
            index = @params.index;
            var retVal = orig(self, index);
            if (_afterGetSprite != null) retVal = _afterGetSprite.Invoke(@params);
            return retVal;
        }

        internal static void HookGetSpriteIndexByHashCode()
        {
            if (!HookedList.Contains("GetSpriteIndexByHashCode"))
            {
                HookedList.Add("GetSpriteIndexByHashCode");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "GetSpriteIndexByHashCode"),
                    GetSpriteIndexByHashCode);
            }
        }

        internal static event Delegates.GetSpriteIndexByHashCode_BeforeArgs _beforeGetSpriteIndexByHashCode;
        internal static event Delegates.GetSpriteIndexByHashCode_NormalArgs _afterGetSpriteIndexByHashCode;

        private static int GetSpriteIndexByHashCode(Func<InlineGraphicManager, int, int> orig,
            InlineGraphicManager self, int hashCode)
        {
            Delegates.Params_GetSpriteIndexByHashCode @params = new()
            {
                self = self, hashCode = hashCode
            };
            _beforeGetSpriteIndexByHashCode?.Invoke(@params);
            self = @params.self;
            hashCode = @params.hashCode;
            var retVal = orig(self, hashCode);
            if (_afterGetSpriteIndexByHashCode != null) retVal = _afterGetSpriteIndexByHashCode.Invoke(@params);
            return retVal;
        }

        internal static void HookGetSpriteIndexByIndex()
        {
            if (!HookedList.Contains("GetSpriteIndexByIndex"))
            {
                HookedList.Add("GetSpriteIndexByIndex");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "GetSpriteIndexByIndex"),
                    GetSpriteIndexByIndex);
            }
        }

        internal static event Delegates.GetSpriteIndexByIndex_BeforeArgs _beforeGetSpriteIndexByIndex;
        internal static event Delegates.GetSpriteIndexByIndex_NormalArgs _afterGetSpriteIndexByIndex;

        private static int GetSpriteIndexByIndex(Func<InlineGraphicManager, int, int> orig, InlineGraphicManager self,
            int index)
        {
            Delegates.Params_GetSpriteIndexByIndex @params = new()
            {
                self = self, index = index
            };
            _beforeGetSpriteIndexByIndex?.Invoke(@params);
            self = @params.self;
            index = @params.index;
            var retVal = orig(self, index);
            if (_afterGetSpriteIndexByIndex != null) retVal = _afterGetSpriteIndexByIndex.Invoke(@params);
            return retVal;
        }

        internal static void HookSetUIVertex()
        {
            if (!HookedList.Contains("SetUIVertex"))
            {
                HookedList.Add("SetUIVertex");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "SetUIVertex"), SetUIVertex);
            }
        }

        internal static event Delegates.SetUIVertex_BeforeArgs _beforeSetUIVertex;
        internal static event Delegates.SetUIVertex_NormalArgs _afterSetUIVertex;

        private static void SetUIVertex(Action<InlineGraphicManager, UIVertex[]> orig, InlineGraphicManager self,
            UIVertex[] uiVertex)
        {
            Delegates.Params_SetUIVertex @params = new()
            {
                self = self, uiVertex = uiVertex
            };
            _beforeSetUIVertex?.Invoke(@params);
            self = @params.self;
            uiVertex = @params.uiVertex;
            orig(self, uiVertex);
            if (_afterSetUIVertex != null) _afterSetUIVertex.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AddInlineGraphicsChild_BeforeArgs(Params_AddInlineGraphicsChild args);

        public delegate void AddInlineGraphicsChild_NormalArgs(Params_AddInlineGraphicsChild args);

        public delegate void AllocatedVertexBuffers_BeforeArgs(Params_AllocatedVertexBuffers args);

        public delegate void AllocatedVertexBuffers_NormalArgs(Params_AllocatedVertexBuffers args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void ClearUIVertex_BeforeArgs(Params_ClearUIVertex args);

        public delegate void ClearUIVertex_NormalArgs(Params_ClearUIVertex args);

        public delegate void DrawSprite_BeforeArgs(Params_DrawSprite args);

        public delegate void DrawSprite_NormalArgs(Params_DrawSprite args);

        public delegate void get_canvasRenderer_BeforeArgs(Params_get_canvasRenderer args);

        public delegate CanvasRenderer get_canvasRenderer_NormalArgs(Params_get_canvasRenderer args);

        public delegate void get_inlineGraphic_BeforeArgs(Params_get_inlineGraphic args);

        public delegate InlineGraphic get_inlineGraphic_NormalArgs(Params_get_inlineGraphic args);

        public delegate void get_spriteAsset_BeforeArgs(Params_get_spriteAsset args);

        public delegate TMP_SpriteAsset get_spriteAsset_NormalArgs(Params_get_spriteAsset args);

        public delegate void get_uiVertex_BeforeArgs(Params_get_uiVertex args);

        public delegate UIVertex[] get_uiVertex_NormalArgs(Params_get_uiVertex args);

        public delegate void GetSprite_BeforeArgs(Params_GetSprite args);

        public delegate TMP_Sprite GetSprite_NormalArgs(Params_GetSprite args);

        public delegate void GetSpriteIndexByHashCode_BeforeArgs(Params_GetSpriteIndexByHashCode args);

        public delegate int GetSpriteIndexByHashCode_NormalArgs(Params_GetSpriteIndexByHashCode args);

        public delegate void GetSpriteIndexByIndex_BeforeArgs(Params_GetSpriteIndexByIndex args);

        public delegate int GetSpriteIndexByIndex_NormalArgs(Params_GetSpriteIndexByIndex args);

        public delegate void LoadSpriteAsset_BeforeArgs(Params_LoadSpriteAsset args);

        public delegate void LoadSpriteAsset_NormalArgs(Params_LoadSpriteAsset args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_NormalArgs(Params_OnDestroy args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void set_inlineGraphic_BeforeArgs(Params_set_inlineGraphic args);

        public delegate void set_inlineGraphic_NormalArgs(Params_set_inlineGraphic args);

        public delegate void set_spriteAsset_BeforeArgs(Params_set_spriteAsset args);

        public delegate void set_spriteAsset_NormalArgs(Params_set_spriteAsset args);

        public delegate void SetUIVertex_BeforeArgs(Params_SetUIVertex args);

        public delegate void SetUIVertex_NormalArgs(Params_SetUIVertex args);

        public delegate void UpdatePivot_BeforeArgs(Params_UpdatePivot args);

        public delegate void UpdatePivot_NormalArgs(Params_UpdatePivot args);

        public sealed class Params_get_spriteAsset
        {
            public InlineGraphicManager self;
        }

        public sealed class Params_set_spriteAsset
        {
            public InlineGraphicManager self;
            public TMP_SpriteAsset value;
        }

        public sealed class Params_get_inlineGraphic
        {
            public InlineGraphicManager self;
        }

        public sealed class Params_set_inlineGraphic
        {
            public InlineGraphicManager self;
            public InlineGraphic value;
        }

        public sealed class Params_get_canvasRenderer
        {
            public InlineGraphicManager self;
        }

        public sealed class Params_get_uiVertex
        {
            public InlineGraphicManager self;
        }

        public sealed class Params_Awake
        {
            public InlineGraphicManager self;
        }

        public sealed class Params_OnEnable
        {
            public InlineGraphicManager self;
        }

        public sealed class Params_OnDisable
        {
            public InlineGraphicManager self;
        }

        public sealed class Params_OnDestroy
        {
            public InlineGraphicManager self;
        }

        public sealed class Params_LoadSpriteAsset
        {
            public InlineGraphicManager self;
            public TMP_SpriteAsset spriteAsset;
        }

        public sealed class Params_AddInlineGraphicsChild
        {
            public InlineGraphicManager self;
        }

        public sealed class Params_AllocatedVertexBuffers
        {
            public InlineGraphicManager self;
            public int size;
        }

        public sealed class Params_UpdatePivot
        {
            public Vector2 pivot;
            public InlineGraphicManager self;
        }

        public sealed class Params_ClearUIVertex
        {
            public InlineGraphicManager self;
        }

        public sealed class Params_DrawSprite
        {
            public InlineGraphicManager self;
            public int spriteCount;
            public UIVertex[] uiVertices;
        }

        public sealed class Params_GetSprite
        {
            public int index;
            public InlineGraphicManager self;
        }

        public sealed class Params_GetSpriteIndexByHashCode
        {
            public int hashCode;
            public InlineGraphicManager self;
        }

        public sealed class Params_GetSpriteIndexByIndex
        {
            public int index;
            public InlineGraphicManager self;
        }

        public sealed class Params_SetUIVertex
        {
            public InlineGraphicManager self;
            public UIVertex[] uiVertex;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_spriteAsset_BeforeArgs get_spriteAsset
        {
            add
            {
                HookHandler._beforeget_spriteAsset += value;
                HookHandler.Hookget_spriteAsset();
            }
            remove => HookHandler._beforeget_spriteAsset -= value;
        }

        public static event Delegates.set_spriteAsset_BeforeArgs set_spriteAsset
        {
            add
            {
                HookHandler._beforeset_spriteAsset += value;
                HookHandler.Hookset_spriteAsset();
            }
            remove => HookHandler._beforeset_spriteAsset -= value;
        }

        public static event Delegates.get_inlineGraphic_BeforeArgs get_inlineGraphic
        {
            add
            {
                HookHandler._beforeget_inlineGraphic += value;
                HookHandler.Hookget_inlineGraphic();
            }
            remove => HookHandler._beforeget_inlineGraphic -= value;
        }

        public static event Delegates.set_inlineGraphic_BeforeArgs set_inlineGraphic
        {
            add
            {
                HookHandler._beforeset_inlineGraphic += value;
                HookHandler.Hookset_inlineGraphic();
            }
            remove => HookHandler._beforeset_inlineGraphic -= value;
        }

        public static event Delegates.get_canvasRenderer_BeforeArgs get_canvasRenderer
        {
            add
            {
                HookHandler._beforeget_canvasRenderer += value;
                HookHandler.Hookget_canvasRenderer();
            }
            remove => HookHandler._beforeget_canvasRenderer -= value;
        }

        public static event Delegates.get_uiVertex_BeforeArgs get_uiVertex
        {
            add
            {
                HookHandler._beforeget_uiVertex += value;
                HookHandler.Hookget_uiVertex();
            }
            remove => HookHandler._beforeget_uiVertex -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.LoadSpriteAsset_BeforeArgs LoadSpriteAsset
        {
            add
            {
                HookHandler._beforeLoadSpriteAsset += value;
                HookHandler.HookLoadSpriteAsset();
            }
            remove => HookHandler._beforeLoadSpriteAsset -= value;
        }

        public static event Delegates.AddInlineGraphicsChild_BeforeArgs AddInlineGraphicsChild
        {
            add
            {
                HookHandler._beforeAddInlineGraphicsChild += value;
                HookHandler.HookAddInlineGraphicsChild();
            }
            remove => HookHandler._beforeAddInlineGraphicsChild -= value;
        }

        public static event Delegates.AllocatedVertexBuffers_BeforeArgs AllocatedVertexBuffers
        {
            add
            {
                HookHandler._beforeAllocatedVertexBuffers += value;
                HookHandler.HookAllocatedVertexBuffers();
            }
            remove => HookHandler._beforeAllocatedVertexBuffers -= value;
        }

        public static event Delegates.UpdatePivot_BeforeArgs UpdatePivot
        {
            add
            {
                HookHandler._beforeUpdatePivot += value;
                HookHandler.HookUpdatePivot();
            }
            remove => HookHandler._beforeUpdatePivot -= value;
        }

        public static event Delegates.ClearUIVertex_BeforeArgs ClearUIVertex
        {
            add
            {
                HookHandler._beforeClearUIVertex += value;
                HookHandler.HookClearUIVertex();
            }
            remove => HookHandler._beforeClearUIVertex -= value;
        }

        public static event Delegates.DrawSprite_BeforeArgs DrawSprite
        {
            add
            {
                HookHandler._beforeDrawSprite += value;
                HookHandler.HookDrawSprite();
            }
            remove => HookHandler._beforeDrawSprite -= value;
        }

        public static event Delegates.GetSprite_BeforeArgs GetSprite
        {
            add
            {
                HookHandler._beforeGetSprite += value;
                HookHandler.HookGetSprite();
            }
            remove => HookHandler._beforeGetSprite -= value;
        }

        public static event Delegates.GetSpriteIndexByHashCode_BeforeArgs GetSpriteIndexByHashCode
        {
            add
            {
                HookHandler._beforeGetSpriteIndexByHashCode += value;
                HookHandler.HookGetSpriteIndexByHashCode();
            }
            remove => HookHandler._beforeGetSpriteIndexByHashCode -= value;
        }

        public static event Delegates.GetSpriteIndexByIndex_BeforeArgs GetSpriteIndexByIndex
        {
            add
            {
                HookHandler._beforeGetSpriteIndexByIndex += value;
                HookHandler.HookGetSpriteIndexByIndex();
            }
            remove => HookHandler._beforeGetSpriteIndexByIndex -= value;
        }

        public static event Delegates.SetUIVertex_BeforeArgs SetUIVertex
        {
            add
            {
                HookHandler._beforeSetUIVertex += value;
                HookHandler.HookSetUIVertex();
            }
            remove => HookHandler._beforeSetUIVertex -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_spriteAsset_NormalArgs get_spriteAsset
        {
            add
            {
                HookHandler._afterget_spriteAsset += value;
                HookHandler.Hookget_spriteAsset();
            }
            remove => HookHandler._afterget_spriteAsset -= value;
        }

        public static event Delegates.set_spriteAsset_NormalArgs set_spriteAsset
        {
            add
            {
                HookHandler._afterset_spriteAsset += value;
                HookHandler.Hookset_spriteAsset();
            }
            remove => HookHandler._afterset_spriteAsset -= value;
        }

        public static event Delegates.get_inlineGraphic_NormalArgs get_inlineGraphic
        {
            add
            {
                HookHandler._afterget_inlineGraphic += value;
                HookHandler.Hookget_inlineGraphic();
            }
            remove => HookHandler._afterget_inlineGraphic -= value;
        }

        public static event Delegates.set_inlineGraphic_NormalArgs set_inlineGraphic
        {
            add
            {
                HookHandler._afterset_inlineGraphic += value;
                HookHandler.Hookset_inlineGraphic();
            }
            remove => HookHandler._afterset_inlineGraphic -= value;
        }

        public static event Delegates.get_canvasRenderer_NormalArgs get_canvasRenderer
        {
            add
            {
                HookHandler._afterget_canvasRenderer += value;
                HookHandler.Hookget_canvasRenderer();
            }
            remove => HookHandler._afterget_canvasRenderer -= value;
        }

        public static event Delegates.get_uiVertex_NormalArgs get_uiVertex
        {
            add
            {
                HookHandler._afterget_uiVertex += value;
                HookHandler.Hookget_uiVertex();
            }
            remove => HookHandler._afterget_uiVertex -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.LoadSpriteAsset_NormalArgs LoadSpriteAsset
        {
            add
            {
                HookHandler._afterLoadSpriteAsset += value;
                HookHandler.HookLoadSpriteAsset();
            }
            remove => HookHandler._afterLoadSpriteAsset -= value;
        }

        public static event Delegates.AddInlineGraphicsChild_NormalArgs AddInlineGraphicsChild
        {
            add
            {
                HookHandler._afterAddInlineGraphicsChild += value;
                HookHandler.HookAddInlineGraphicsChild();
            }
            remove => HookHandler._afterAddInlineGraphicsChild -= value;
        }

        public static event Delegates.AllocatedVertexBuffers_NormalArgs AllocatedVertexBuffers
        {
            add
            {
                HookHandler._afterAllocatedVertexBuffers += value;
                HookHandler.HookAllocatedVertexBuffers();
            }
            remove => HookHandler._afterAllocatedVertexBuffers -= value;
        }

        public static event Delegates.UpdatePivot_NormalArgs UpdatePivot
        {
            add
            {
                HookHandler._afterUpdatePivot += value;
                HookHandler.HookUpdatePivot();
            }
            remove => HookHandler._afterUpdatePivot -= value;
        }

        public static event Delegates.ClearUIVertex_NormalArgs ClearUIVertex
        {
            add
            {
                HookHandler._afterClearUIVertex += value;
                HookHandler.HookClearUIVertex();
            }
            remove => HookHandler._afterClearUIVertex -= value;
        }

        public static event Delegates.DrawSprite_NormalArgs DrawSprite
        {
            add
            {
                HookHandler._afterDrawSprite += value;
                HookHandler.HookDrawSprite();
            }
            remove => HookHandler._afterDrawSprite -= value;
        }

        public static event Delegates.GetSprite_NormalArgs GetSprite
        {
            add
            {
                HookHandler._afterGetSprite += value;
                HookHandler.HookGetSprite();
            }
            remove => HookHandler._afterGetSprite -= value;
        }

        public static event Delegates.GetSpriteIndexByHashCode_NormalArgs GetSpriteIndexByHashCode
        {
            add
            {
                HookHandler._afterGetSpriteIndexByHashCode += value;
                HookHandler.HookGetSpriteIndexByHashCode();
            }
            remove => HookHandler._afterGetSpriteIndexByHashCode -= value;
        }

        public static event Delegates.GetSpriteIndexByIndex_NormalArgs GetSpriteIndexByIndex
        {
            add
            {
                HookHandler._afterGetSpriteIndexByIndex += value;
                HookHandler.HookGetSpriteIndexByIndex();
            }
            remove => HookHandler._afterGetSpriteIndexByIndex -= value;
        }

        public static event Delegates.SetUIVertex_NormalArgs SetUIVertex
        {
            add
            {
                HookHandler._afterSetUIVertex += value;
                HookHandler.HookSetUIVertex();
            }
            remove => HookHandler._afterSetUIVertex -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_spriteAsset_NormalArgs get_spriteAsset
        {
            add => HookEndpointManager.Add<Delegates.get_spriteAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "get_spriteAsset"), value);
            remove => HookEndpointManager.Remove<Delegates.get_spriteAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "get_spriteAsset"), value);
        }

        public static event Delegates.set_spriteAsset_NormalArgs set_spriteAsset
        {
            add => HookEndpointManager.Add<Delegates.set_spriteAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "set_spriteAsset"), value);
            remove => HookEndpointManager.Remove<Delegates.set_spriteAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "set_spriteAsset"), value);
        }

        public static event Delegates.get_inlineGraphic_NormalArgs get_inlineGraphic
        {
            add => HookEndpointManager.Add<Delegates.get_inlineGraphic_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "get_inlineGraphic"), value);
            remove => HookEndpointManager.Remove<Delegates.get_inlineGraphic_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "get_inlineGraphic"), value);
        }

        public static event Delegates.set_inlineGraphic_NormalArgs set_inlineGraphic
        {
            add => HookEndpointManager.Add<Delegates.set_inlineGraphic_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "set_inlineGraphic"), value);
            remove => HookEndpointManager.Remove<Delegates.set_inlineGraphic_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "set_inlineGraphic"), value);
        }

        public static event Delegates.get_canvasRenderer_NormalArgs get_canvasRenderer
        {
            add => HookEndpointManager.Add<Delegates.get_canvasRenderer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "get_canvasRenderer"), value);
            remove => HookEndpointManager.Remove<Delegates.get_canvasRenderer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "get_canvasRenderer"), value);
        }

        public static event Delegates.get_uiVertex_NormalArgs get_uiVertex
        {
            add => HookEndpointManager.Add<Delegates.get_uiVertex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "get_uiVertex"), value);
            remove => HookEndpointManager.Remove<Delegates.get_uiVertex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "get_uiVertex"), value);
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add => HookEndpointManager.Add<Delegates.Awake_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "Awake"), value);
            remove => HookEndpointManager.Remove<Delegates.Awake_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "Awake"), value);
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "OnEnable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "OnEnable"), value);
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add => HookEndpointManager.Add<Delegates.OnDisable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "OnDisable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDisable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "OnDisable"), value);
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add => HookEndpointManager.Add<Delegates.OnDestroy_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "OnDestroy"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDestroy_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "OnDestroy"), value);
        }

        public static event Delegates.LoadSpriteAsset_NormalArgs LoadSpriteAsset
        {
            add => HookEndpointManager.Add<Delegates.LoadSpriteAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "LoadSpriteAsset"), value);
            remove => HookEndpointManager.Remove<Delegates.LoadSpriteAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "LoadSpriteAsset"), value);
        }

        public static event Delegates.AddInlineGraphicsChild_NormalArgs AddInlineGraphicsChild
        {
            add => HookEndpointManager.Add<Delegates.AddInlineGraphicsChild_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "AddInlineGraphicsChild"), value);
            remove => HookEndpointManager.Remove<Delegates.AddInlineGraphicsChild_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "AddInlineGraphicsChild"), value);
        }

        public static event Delegates.AllocatedVertexBuffers_NormalArgs AllocatedVertexBuffers
        {
            add => HookEndpointManager.Add<Delegates.AllocatedVertexBuffers_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "AllocatedVertexBuffers"), value);
            remove => HookEndpointManager.Remove<Delegates.AllocatedVertexBuffers_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "AllocatedVertexBuffers"), value);
        }

        public static event Delegates.UpdatePivot_NormalArgs UpdatePivot
        {
            add => HookEndpointManager.Add<Delegates.UpdatePivot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "UpdatePivot"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdatePivot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "UpdatePivot"), value);
        }

        public static event Delegates.ClearUIVertex_NormalArgs ClearUIVertex
        {
            add => HookEndpointManager.Add<Delegates.ClearUIVertex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "ClearUIVertex"), value);
            remove => HookEndpointManager.Remove<Delegates.ClearUIVertex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "ClearUIVertex"), value);
        }

        public static event Delegates.DrawSprite_NormalArgs DrawSprite
        {
            add => HookEndpointManager.Add<Delegates.DrawSprite_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "DrawSprite"), value);
            remove => HookEndpointManager.Remove<Delegates.DrawSprite_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "DrawSprite"), value);
        }

        public static event Delegates.GetSprite_NormalArgs GetSprite
        {
            add => HookEndpointManager.Add<Delegates.GetSprite_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "GetSprite"), value);
            remove => HookEndpointManager.Remove<Delegates.GetSprite_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "GetSprite"), value);
        }

        public static event Delegates.GetSpriteIndexByHashCode_NormalArgs GetSpriteIndexByHashCode
        {
            add => HookEndpointManager.Add<Delegates.GetSpriteIndexByHashCode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "GetSpriteIndexByHashCode"), value);
            remove => HookEndpointManager.Remove<Delegates.GetSpriteIndexByHashCode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "GetSpriteIndexByHashCode"), value);
        }

        public static event Delegates.GetSpriteIndexByIndex_NormalArgs GetSpriteIndexByIndex
        {
            add => HookEndpointManager.Add<Delegates.GetSpriteIndexByIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "GetSpriteIndexByIndex"), value);
            remove => HookEndpointManager.Remove<Delegates.GetSpriteIndexByIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "GetSpriteIndexByIndex"), value);
        }

        public static event Delegates.SetUIVertex_NormalArgs SetUIVertex
        {
            add => HookEndpointManager.Add<Delegates.SetUIVertex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "SetUIVertex"), value);
            remove => HookEndpointManager.Remove<Delegates.SetUIVertex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InlineGraphicManager), "SetUIVertex"), value);
        }
    }
}