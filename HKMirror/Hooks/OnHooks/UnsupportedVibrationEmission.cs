using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for UnsupportedVibrationEmission class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnUnsupportedVibrationEmission
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_Target()
{
if (!HookedList.Contains("get_Target"))
{
HookedList.Add("get_Target");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnsupportedVibrationEmission), "get_Target", true), get_Target);

}
}
internal static event Delegates.get_Target_BeforeArgs _beforeget_Target;
internal static event Delegates.get_Target_AfterArgs _afterget_Target;
private static VibrationTarget get_Target(Func<UnsupportedVibrationEmission, VibrationTarget> orig, UnsupportedVibrationEmission self)
{
Delegates.Params_get_Target @params = new() 
{
self = self
};
if (_beforeget_Target != null)
{
foreach (Delegates.get_Target_BeforeArgs toInvoke in _beforeget_Target.GetInvocationList())
{
try
{
_beforeget_Target?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_Target != null)
{
foreach (Delegates.get_Target_AfterArgs toInvoke in _afterget_Target.GetInvocationList())
{
try
{
retVal = _afterget_Target.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_Target()
{
if (!HookedList.Contains("set_Target"))
{
HookedList.Add("set_Target");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnsupportedVibrationEmission), "set_Target", true), set_Target);

}
}
internal static event Delegates.set_Target_BeforeArgs _beforeset_Target;
internal static event Delegates.set_Target_AfterArgs _afterset_Target;
private static void set_Target(Action<UnsupportedVibrationEmission,  VibrationTarget> orig, UnsupportedVibrationEmission self,  VibrationTarget value)
{
Delegates.Params_set_Target @params = new() 
{
self = self
, value = value
};
if (_beforeset_Target != null)
{
foreach (Delegates.set_Target_BeforeArgs toInvoke in _beforeset_Target.GetInvocationList())
{
try
{
_beforeset_Target?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_Target != null)
{
foreach (Delegates.set_Target_AfterArgs toInvoke in _afterset_Target.GetInvocationList())
{
try
{
_afterset_Target.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_IsLooping()
{
if (!HookedList.Contains("get_IsLooping"))
{
HookedList.Add("get_IsLooping");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnsupportedVibrationEmission), "get_IsLooping", true), get_IsLooping);

}
}
internal static event Delegates.get_IsLooping_BeforeArgs _beforeget_IsLooping;
internal static event Delegates.get_IsLooping_AfterArgs _afterget_IsLooping;
private static bool get_IsLooping(Func<UnsupportedVibrationEmission, bool> orig, UnsupportedVibrationEmission self)
{
Delegates.Params_get_IsLooping @params = new() 
{
self = self
};
if (_beforeget_IsLooping != null)
{
foreach (Delegates.get_IsLooping_BeforeArgs toInvoke in _beforeget_IsLooping.GetInvocationList())
{
try
{
_beforeget_IsLooping?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_IsLooping != null)
{
foreach (Delegates.get_IsLooping_AfterArgs toInvoke in _afterget_IsLooping.GetInvocationList())
{
try
{
retVal = _afterget_IsLooping.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_IsLooping()
{
if (!HookedList.Contains("set_IsLooping"))
{
HookedList.Add("set_IsLooping");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnsupportedVibrationEmission), "set_IsLooping", true), set_IsLooping);

}
}
internal static event Delegates.set_IsLooping_BeforeArgs _beforeset_IsLooping;
internal static event Delegates.set_IsLooping_AfterArgs _afterset_IsLooping;
private static void set_IsLooping(Action<UnsupportedVibrationEmission,  bool> orig, UnsupportedVibrationEmission self,  bool value)
{
Delegates.Params_set_IsLooping @params = new() 
{
self = self
, value = value
};
if (_beforeset_IsLooping != null)
{
foreach (Delegates.set_IsLooping_BeforeArgs toInvoke in _beforeset_IsLooping.GetInvocationList())
{
try
{
_beforeset_IsLooping?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_IsLooping != null)
{
foreach (Delegates.set_IsLooping_AfterArgs toInvoke in _afterset_IsLooping.GetInvocationList())
{
try
{
_afterset_IsLooping.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_IsPlaying()
{
if (!HookedList.Contains("get_IsPlaying"))
{
HookedList.Add("get_IsPlaying");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnsupportedVibrationEmission), "get_IsPlaying", true), get_IsPlaying);

}
}
internal static event Delegates.get_IsPlaying_BeforeArgs _beforeget_IsPlaying;
internal static event Delegates.get_IsPlaying_AfterArgs _afterget_IsPlaying;
private static bool get_IsPlaying(Func<UnsupportedVibrationEmission, bool> orig, UnsupportedVibrationEmission self)
{
Delegates.Params_get_IsPlaying @params = new() 
{
self = self
};
if (_beforeget_IsPlaying != null)
{
foreach (Delegates.get_IsPlaying_BeforeArgs toInvoke in _beforeget_IsPlaying.GetInvocationList())
{
try
{
_beforeget_IsPlaying?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_IsPlaying != null)
{
foreach (Delegates.get_IsPlaying_AfterArgs toInvoke in _afterget_IsPlaying.GetInvocationList())
{
try
{
retVal = _afterget_IsPlaying.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_Tag()
{
if (!HookedList.Contains("get_Tag"))
{
HookedList.Add("get_Tag");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnsupportedVibrationEmission), "get_Tag", true), get_Tag);

}
}
internal static event Delegates.get_Tag_BeforeArgs _beforeget_Tag;
internal static event Delegates.get_Tag_AfterArgs _afterget_Tag;
private static string get_Tag(Func<UnsupportedVibrationEmission, string> orig, UnsupportedVibrationEmission self)
{
Delegates.Params_get_Tag @params = new() 
{
self = self
};
if (_beforeget_Tag != null)
{
foreach (Delegates.get_Tag_BeforeArgs toInvoke in _beforeget_Tag.GetInvocationList())
{
try
{
_beforeget_Tag?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_Tag != null)
{
foreach (Delegates.get_Tag_AfterArgs toInvoke in _afterget_Tag.GetInvocationList())
{
try
{
retVal = _afterget_Tag.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_Tag()
{
if (!HookedList.Contains("set_Tag"))
{
HookedList.Add("set_Tag");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnsupportedVibrationEmission), "set_Tag", true), set_Tag);

}
}
internal static event Delegates.set_Tag_BeforeArgs _beforeset_Tag;
internal static event Delegates.set_Tag_AfterArgs _afterset_Tag;
private static void set_Tag(Action<UnsupportedVibrationEmission,  string> orig, UnsupportedVibrationEmission self,  string value)
{
Delegates.Params_set_Tag @params = new() 
{
self = self
, value = value
};
if (_beforeset_Tag != null)
{
foreach (Delegates.set_Tag_BeforeArgs toInvoke in _beforeset_Tag.GetInvocationList())
{
try
{
_beforeset_Tag?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_Tag != null)
{
foreach (Delegates.set_Tag_AfterArgs toInvoke in _afterset_Tag.GetInvocationList())
{
try
{
_afterset_Tag.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStop()
{
if (!HookedList.Contains("Stop"))
{
HookedList.Add("Stop");
On.UnsupportedVibrationEmission.Stop += Stop;

}
}
internal static event Delegates.Stop_BeforeArgs _beforeStop;
internal static event Delegates.Stop_AfterArgs _afterStop;
private static void Stop(On.UnsupportedVibrationEmission.orig_Stop orig,UnsupportedVibrationEmission self)
{
Delegates.Params_Stop @params = new() 
{
self = self
};
if (_beforeStop != null)
{
foreach (Delegates.Stop_BeforeArgs toInvoke in _beforeStop.GetInvocationList())
{
try
{
_beforeStop?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStop != null)
{
foreach (Delegates.Stop_AfterArgs toInvoke in _afterStop.GetInvocationList())
{
try
{
_afterStop.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_Target
{
public UnsupportedVibrationEmission self;
}
public delegate void get_Target_BeforeArgs(Params_get_Target args);
public delegate VibrationTarget get_Target_AfterArgs(Params_get_Target args, VibrationTarget ret);
public delegate VibrationTarget get_Target_WithArgs (Func<UnsupportedVibrationEmission, VibrationTarget> orig, UnsupportedVibrationEmission self);
public sealed class Params_set_Target
{
public UnsupportedVibrationEmission self;
public VibrationTarget value;
}
public delegate void set_Target_BeforeArgs(Params_set_Target args);
public delegate void set_Target_AfterArgs(Params_set_Target args);
public delegate void set_Target_WithArgs (Action<UnsupportedVibrationEmission,  VibrationTarget> orig, UnsupportedVibrationEmission self,  VibrationTarget value);
public sealed class Params_get_IsLooping
{
public UnsupportedVibrationEmission self;
}
public delegate void get_IsLooping_BeforeArgs(Params_get_IsLooping args);
public delegate bool get_IsLooping_AfterArgs(Params_get_IsLooping args, bool ret);
public delegate bool get_IsLooping_WithArgs (Func<UnsupportedVibrationEmission, bool> orig, UnsupportedVibrationEmission self);
public sealed class Params_set_IsLooping
{
public UnsupportedVibrationEmission self;
public bool value;
}
public delegate void set_IsLooping_BeforeArgs(Params_set_IsLooping args);
public delegate void set_IsLooping_AfterArgs(Params_set_IsLooping args);
public delegate void set_IsLooping_WithArgs (Action<UnsupportedVibrationEmission,  bool> orig, UnsupportedVibrationEmission self,  bool value);
public sealed class Params_get_IsPlaying
{
public UnsupportedVibrationEmission self;
}
public delegate void get_IsPlaying_BeforeArgs(Params_get_IsPlaying args);
public delegate bool get_IsPlaying_AfterArgs(Params_get_IsPlaying args, bool ret);
public delegate bool get_IsPlaying_WithArgs (Func<UnsupportedVibrationEmission, bool> orig, UnsupportedVibrationEmission self);
public sealed class Params_get_Tag
{
public UnsupportedVibrationEmission self;
}
public delegate void get_Tag_BeforeArgs(Params_get_Tag args);
public delegate string get_Tag_AfterArgs(Params_get_Tag args, string ret);
public delegate string get_Tag_WithArgs (Func<UnsupportedVibrationEmission, string> orig, UnsupportedVibrationEmission self);
public sealed class Params_set_Tag
{
public UnsupportedVibrationEmission self;
public string value;
}
public delegate void set_Tag_BeforeArgs(Params_set_Tag args);
public delegate void set_Tag_AfterArgs(Params_set_Tag args);
public delegate void set_Tag_WithArgs (Action<UnsupportedVibrationEmission,  string> orig, UnsupportedVibrationEmission self,  string value);
public sealed class Params_Stop
{
public UnsupportedVibrationEmission self;
}
public delegate void Stop_BeforeArgs(Params_Stop args);
public delegate void Stop_AfterArgs(Params_Stop args);
public delegate void Stop_WithArgs (Action<UnsupportedVibrationEmission> orig, UnsupportedVibrationEmission self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_Target_BeforeArgs get_Target
{
add
{

HookHandler._beforeget_Target += value;
HookHandler.Hookget_Target();
}
remove => HookHandler._beforeget_Target -= value;
}
public static event Delegates.set_Target_BeforeArgs set_Target
{
add
{

HookHandler._beforeset_Target += value;
HookHandler.Hookset_Target();
}
remove => HookHandler._beforeset_Target -= value;
}
public static event Delegates.get_IsLooping_BeforeArgs get_IsLooping
{
add
{

HookHandler._beforeget_IsLooping += value;
HookHandler.Hookget_IsLooping();
}
remove => HookHandler._beforeget_IsLooping -= value;
}
public static event Delegates.set_IsLooping_BeforeArgs set_IsLooping
{
add
{

HookHandler._beforeset_IsLooping += value;
HookHandler.Hookset_IsLooping();
}
remove => HookHandler._beforeset_IsLooping -= value;
}
public static event Delegates.get_IsPlaying_BeforeArgs get_IsPlaying
{
add
{

HookHandler._beforeget_IsPlaying += value;
HookHandler.Hookget_IsPlaying();
}
remove => HookHandler._beforeget_IsPlaying -= value;
}
public static event Delegates.get_Tag_BeforeArgs get_Tag
{
add
{

HookHandler._beforeget_Tag += value;
HookHandler.Hookget_Tag();
}
remove => HookHandler._beforeget_Tag -= value;
}
public static event Delegates.set_Tag_BeforeArgs set_Tag
{
add
{

HookHandler._beforeset_Tag += value;
HookHandler.Hookset_Tag();
}
remove => HookHandler._beforeset_Tag -= value;
}
public static event Delegates.Stop_BeforeArgs Stop
{
add
{

HookHandler._beforeStop += value;
HookHandler.HookStop();
}
remove => HookHandler._beforeStop -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_Target_AfterArgs get_Target
{
add
{

HookHandler._afterget_Target += value;
HookHandler.Hookget_Target();
}
remove => HookHandler._afterget_Target -= value;
}
public static event Delegates.set_Target_AfterArgs set_Target
{
add
{

HookHandler._afterset_Target += value;
HookHandler.Hookset_Target();
}
remove => HookHandler._afterset_Target -= value;
}
public static event Delegates.get_IsLooping_AfterArgs get_IsLooping
{
add
{

HookHandler._afterget_IsLooping += value;
HookHandler.Hookget_IsLooping();
}
remove => HookHandler._afterget_IsLooping -= value;
}
public static event Delegates.set_IsLooping_AfterArgs set_IsLooping
{
add
{

HookHandler._afterset_IsLooping += value;
HookHandler.Hookset_IsLooping();
}
remove => HookHandler._afterset_IsLooping -= value;
}
public static event Delegates.get_IsPlaying_AfterArgs get_IsPlaying
{
add
{

HookHandler._afterget_IsPlaying += value;
HookHandler.Hookget_IsPlaying();
}
remove => HookHandler._afterget_IsPlaying -= value;
}
public static event Delegates.get_Tag_AfterArgs get_Tag
{
add
{

HookHandler._afterget_Tag += value;
HookHandler.Hookget_Tag();
}
remove => HookHandler._afterget_Tag -= value;
}
public static event Delegates.set_Tag_AfterArgs set_Tag
{
add
{

HookHandler._afterset_Tag += value;
HookHandler.Hookset_Tag();
}
remove => HookHandler._afterset_Tag -= value;
}
public static event Delegates.Stop_AfterArgs Stop
{
add
{

HookHandler._afterStop += value;
HookHandler.HookStop();
}
remove => HookHandler._afterStop -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_Target_WithArgs get_Target
{
add => HookEndpointManager.Add<Delegates.get_Target_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnsupportedVibrationEmission), "get_Target", true), value);
remove => HookEndpointManager.Remove<Delegates.get_Target_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnsupportedVibrationEmission), "get_Target", true), value);
}
public static event Delegates.set_Target_WithArgs set_Target
{
add => HookEndpointManager.Add<Delegates.set_Target_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnsupportedVibrationEmission), "set_Target", true), value);
remove => HookEndpointManager.Remove<Delegates.set_Target_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnsupportedVibrationEmission), "set_Target", true), value);
}
public static event Delegates.get_IsLooping_WithArgs get_IsLooping
{
add => HookEndpointManager.Add<Delegates.get_IsLooping_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnsupportedVibrationEmission), "get_IsLooping", true), value);
remove => HookEndpointManager.Remove<Delegates.get_IsLooping_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnsupportedVibrationEmission), "get_IsLooping", true), value);
}
public static event Delegates.set_IsLooping_WithArgs set_IsLooping
{
add => HookEndpointManager.Add<Delegates.set_IsLooping_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnsupportedVibrationEmission), "set_IsLooping", true), value);
remove => HookEndpointManager.Remove<Delegates.set_IsLooping_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnsupportedVibrationEmission), "set_IsLooping", true), value);
}
public static event Delegates.get_IsPlaying_WithArgs get_IsPlaying
{
add => HookEndpointManager.Add<Delegates.get_IsPlaying_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnsupportedVibrationEmission), "get_IsPlaying", true), value);
remove => HookEndpointManager.Remove<Delegates.get_IsPlaying_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnsupportedVibrationEmission), "get_IsPlaying", true), value);
}
public static event Delegates.get_Tag_WithArgs get_Tag
{
add => HookEndpointManager.Add<Delegates.get_Tag_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnsupportedVibrationEmission), "get_Tag", true), value);
remove => HookEndpointManager.Remove<Delegates.get_Tag_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnsupportedVibrationEmission), "get_Tag", true), value);
}
public static event Delegates.set_Tag_WithArgs set_Tag
{
add => HookEndpointManager.Add<Delegates.set_Tag_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnsupportedVibrationEmission), "set_Tag", true), value);
remove => HookEndpointManager.Remove<Delegates.set_Tag_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnsupportedVibrationEmission), "set_Tag", true), value);
}
public static event On.UnsupportedVibrationEmission.hook_Stop Stop
{
add => On.UnsupportedVibrationEmission.Stop += value;
remove => On.UnsupportedVibrationEmission.Stop -= value;
}
}

}
