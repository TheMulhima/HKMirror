using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for PlayMakerArrayListProxy class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPlayMakerArrayListProxy
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_arrayList()
        {
            if (!HookedList.Contains("get_arrayList"))
            {
                HookedList.Add("get_arrayList");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayMakerArrayListProxy), "get_arrayList"),
                    get_arrayList);
            }
        }

        internal static event Delegates.get_arrayList_BeforeArgs _beforeget_arrayList;
        internal static event Delegates.get_arrayList_NormalArgs _afterget_arrayList;

        private static ArrayList get_arrayList(Func<PlayMakerArrayListProxy, ArrayList> orig,
            PlayMakerArrayListProxy self)
        {
            Delegates.Params_get_arrayList @params = new()
            {
                self = self
            };
            _beforeget_arrayList?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_arrayList != null) retVal = _afterget_arrayList.Invoke(@params);
            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.PlayMakerArrayListProxy.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.PlayMakerArrayListProxy.orig_Awake orig, PlayMakerArrayListProxy self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookisCollectionDefined()
        {
            if (!HookedList.Contains("isCollectionDefined"))
            {
                HookedList.Add("isCollectionDefined");
                On.PlayMakerArrayListProxy.isCollectionDefined += isCollectionDefined;
            }
        }

        internal static event Delegates.isCollectionDefined_BeforeArgs _beforeisCollectionDefined;
        internal static event Delegates.isCollectionDefined_NormalArgs _afterisCollectionDefined;

        private static bool isCollectionDefined(On.PlayMakerArrayListProxy.orig_isCollectionDefined orig,
            PlayMakerArrayListProxy self)
        {
            Delegates.Params_isCollectionDefined @params = new()
            {
                self = self
            };
            _beforeisCollectionDefined?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterisCollectionDefined != null) retVal = _afterisCollectionDefined.Invoke(@params);
            return retVal;
        }

        internal static void HookTakeSnapShot()
        {
            if (!HookedList.Contains("TakeSnapShot"))
            {
                HookedList.Add("TakeSnapShot");
                On.PlayMakerArrayListProxy.TakeSnapShot += TakeSnapShot;
            }
        }

        internal static event Delegates.TakeSnapShot_BeforeArgs _beforeTakeSnapShot;
        internal static event Delegates.TakeSnapShot_NormalArgs _afterTakeSnapShot;

        private static void TakeSnapShot(On.PlayMakerArrayListProxy.orig_TakeSnapShot orig,
            PlayMakerArrayListProxy self)
        {
            Delegates.Params_TakeSnapShot @params = new()
            {
                self = self
            };
            _beforeTakeSnapShot?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterTakeSnapShot != null) _afterTakeSnapShot.Invoke(@params);
        }

        internal static void HookRevertToSnapShot()
        {
            if (!HookedList.Contains("RevertToSnapShot"))
            {
                HookedList.Add("RevertToSnapShot");
                On.PlayMakerArrayListProxy.RevertToSnapShot += RevertToSnapShot;
            }
        }

        internal static event Delegates.RevertToSnapShot_BeforeArgs _beforeRevertToSnapShot;
        internal static event Delegates.RevertToSnapShot_NormalArgs _afterRevertToSnapShot;

        private static void RevertToSnapShot(On.PlayMakerArrayListProxy.orig_RevertToSnapShot orig,
            PlayMakerArrayListProxy self)
        {
            Delegates.Params_RevertToSnapShot @params = new()
            {
                self = self
            };
            _beforeRevertToSnapShot?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRevertToSnapShot != null) _afterRevertToSnapShot.Invoke(@params);
        }

        internal static void HookAdd()
        {
            if (!HookedList.Contains("Add"))
            {
                HookedList.Add("Add");
                On.PlayMakerArrayListProxy.Add += Add;
            }
        }

        internal static event Delegates.Add_BeforeArgs _beforeAdd;
        internal static event Delegates.Add_NormalArgs _afterAdd;

        private static void Add(On.PlayMakerArrayListProxy.orig_Add orig, PlayMakerArrayListProxy self, object value,
            string type, bool silent)
        {
            Delegates.Params_Add @params = new()
            {
                self = self, value = value, type = type, silent = silent
            };
            _beforeAdd?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            type = @params.type;
            silent = @params.silent;
            orig(self, value, type, silent);
            if (_afterAdd != null) _afterAdd.Invoke(@params);
        }

        internal static void HookAddRange()
        {
            if (!HookedList.Contains("AddRange"))
            {
                HookedList.Add("AddRange");
                On.PlayMakerArrayListProxy.AddRange += AddRange;
            }
        }

        internal static event Delegates.AddRange_BeforeArgs _beforeAddRange;
        internal static event Delegates.AddRange_NormalArgs _afterAddRange;

        private static int AddRange(On.PlayMakerArrayListProxy.orig_AddRange orig, PlayMakerArrayListProxy self,
            ICollection collection, string type)
        {
            Delegates.Params_AddRange @params = new()
            {
                self = self, collection = collection, type = type
            };
            _beforeAddRange?.Invoke(@params);
            self = @params.self;
            collection = @params.collection;
            type = @params.type;
            var retVal = orig(self, collection, type);
            if (_afterAddRange != null) retVal = _afterAddRange.Invoke(@params);
            return retVal;
        }

        internal static void HookInspectorEdit()
        {
            if (!HookedList.Contains("InspectorEdit"))
            {
                HookedList.Add("InspectorEdit");
                On.PlayMakerArrayListProxy.InspectorEdit += InspectorEdit;
            }
        }

        internal static event Delegates.InspectorEdit_BeforeArgs _beforeInspectorEdit;
        internal static event Delegates.InspectorEdit_NormalArgs _afterInspectorEdit;

        private static void InspectorEdit(On.PlayMakerArrayListProxy.orig_InspectorEdit orig,
            PlayMakerArrayListProxy self, int index)
        {
            Delegates.Params_InspectorEdit @params = new()
            {
                self = self, index = index
            };
            _beforeInspectorEdit?.Invoke(@params);
            self = @params.self;
            index = @params.index;
            orig(self, index);
            if (_afterInspectorEdit != null) _afterInspectorEdit.Invoke(@params);
        }

        internal static void HookSet()
        {
            if (!HookedList.Contains("Set"))
            {
                HookedList.Add("Set");
                On.PlayMakerArrayListProxy.Set += Set;
            }
        }

        internal static event Delegates.Set_BeforeArgs _beforeSet;
        internal static event Delegates.Set_NormalArgs _afterSet;

        private static void Set(On.PlayMakerArrayListProxy.orig_Set orig, PlayMakerArrayListProxy self, int index,
            object value, string type)
        {
            Delegates.Params_Set @params = new()
            {
                self = self, index = index, value = value, type = type
            };
            _beforeSet?.Invoke(@params);
            self = @params.self;
            index = @params.index;
            value = @params.value;
            type = @params.type;
            orig(self, index, value, type);
            if (_afterSet != null) _afterSet.Invoke(@params);
        }

        internal static void HookRemove()
        {
            if (!HookedList.Contains("Remove"))
            {
                HookedList.Add("Remove");
                On.PlayMakerArrayListProxy.Remove += Remove;
            }
        }

        internal static event Delegates.Remove_BeforeArgs _beforeRemove;
        internal static event Delegates.Remove_NormalArgs _afterRemove;

        private static bool Remove(On.PlayMakerArrayListProxy.orig_Remove orig, PlayMakerArrayListProxy self,
            object value, string type, bool silent)
        {
            Delegates.Params_Remove @params = new()
            {
                self = self, value = value, type = type, silent = silent
            };
            _beforeRemove?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            type = @params.type;
            silent = @params.silent;
            var retVal = orig(self, value, type, silent);
            if (_afterRemove != null) retVal = _afterRemove.Invoke(@params);
            return retVal;
        }

        internal static void HookPreFillArrayList()
        {
            if (!HookedList.Contains("PreFillArrayList"))
            {
                HookedList.Add("PreFillArrayList");
                On.PlayMakerArrayListProxy.PreFillArrayList += PreFillArrayList;
            }
        }

        internal static event Delegates.PreFillArrayList_BeforeArgs _beforePreFillArrayList;
        internal static event Delegates.PreFillArrayList_NormalArgs _afterPreFillArrayList;

        private static void PreFillArrayList(On.PlayMakerArrayListProxy.orig_PreFillArrayList orig,
            PlayMakerArrayListProxy self)
        {
            Delegates.Params_PreFillArrayList @params = new()
            {
                self = self
            };
            _beforePreFillArrayList?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPreFillArrayList != null) _afterPreFillArrayList.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Add_BeforeArgs(Params_Add args);

        public delegate void Add_NormalArgs(Params_Add args);

        public delegate void AddRange_BeforeArgs(Params_AddRange args);

        public delegate int AddRange_NormalArgs(Params_AddRange args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void get_arrayList_BeforeArgs(Params_get_arrayList args);

        public delegate ArrayList get_arrayList_NormalArgs(Params_get_arrayList args);

        public delegate void InspectorEdit_BeforeArgs(Params_InspectorEdit args);

        public delegate void InspectorEdit_NormalArgs(Params_InspectorEdit args);

        public delegate void isCollectionDefined_BeforeArgs(Params_isCollectionDefined args);

        public delegate bool isCollectionDefined_NormalArgs(Params_isCollectionDefined args);

        public delegate void PreFillArrayList_BeforeArgs(Params_PreFillArrayList args);

        public delegate void PreFillArrayList_NormalArgs(Params_PreFillArrayList args);

        public delegate void Remove_BeforeArgs(Params_Remove args);

        public delegate bool Remove_NormalArgs(Params_Remove args);

        public delegate void RevertToSnapShot_BeforeArgs(Params_RevertToSnapShot args);

        public delegate void RevertToSnapShot_NormalArgs(Params_RevertToSnapShot args);

        public delegate void Set_BeforeArgs(Params_Set args);

        public delegate void Set_NormalArgs(Params_Set args);

        public delegate void TakeSnapShot_BeforeArgs(Params_TakeSnapShot args);

        public delegate void TakeSnapShot_NormalArgs(Params_TakeSnapShot args);

        public sealed class Params_get_arrayList
        {
            public PlayMakerArrayListProxy self;
        }

        public sealed class Params_Awake
        {
            public PlayMakerArrayListProxy self;
        }

        public sealed class Params_isCollectionDefined
        {
            public PlayMakerArrayListProxy self;
        }

        public sealed class Params_TakeSnapShot
        {
            public PlayMakerArrayListProxy self;
        }

        public sealed class Params_RevertToSnapShot
        {
            public PlayMakerArrayListProxy self;
        }

        public sealed class Params_Add
        {
            public PlayMakerArrayListProxy self;
            public bool silent;
            public string type;
            public object value;
        }

        public sealed class Params_AddRange
        {
            public ICollection collection;
            public PlayMakerArrayListProxy self;
            public string type;
        }

        public sealed class Params_InspectorEdit
        {
            public int index;
            public PlayMakerArrayListProxy self;
        }

        public sealed class Params_Set
        {
            public int index;
            public PlayMakerArrayListProxy self;
            public string type;
            public object value;
        }

        public sealed class Params_Remove
        {
            public PlayMakerArrayListProxy self;
            public bool silent;
            public string type;
            public object value;
        }

        public sealed class Params_PreFillArrayList
        {
            public PlayMakerArrayListProxy self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_arrayList_BeforeArgs get_arrayList
        {
            add
            {
                HookHandler._beforeget_arrayList += value;
                HookHandler.Hookget_arrayList();
            }
            remove => HookHandler._beforeget_arrayList -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.isCollectionDefined_BeforeArgs isCollectionDefined
        {
            add
            {
                HookHandler._beforeisCollectionDefined += value;
                HookHandler.HookisCollectionDefined();
            }
            remove => HookHandler._beforeisCollectionDefined -= value;
        }

        public static event Delegates.TakeSnapShot_BeforeArgs TakeSnapShot
        {
            add
            {
                HookHandler._beforeTakeSnapShot += value;
                HookHandler.HookTakeSnapShot();
            }
            remove => HookHandler._beforeTakeSnapShot -= value;
        }

        public static event Delegates.RevertToSnapShot_BeforeArgs RevertToSnapShot
        {
            add
            {
                HookHandler._beforeRevertToSnapShot += value;
                HookHandler.HookRevertToSnapShot();
            }
            remove => HookHandler._beforeRevertToSnapShot -= value;
        }

        public static event Delegates.Add_BeforeArgs Add
        {
            add
            {
                HookHandler._beforeAdd += value;
                HookHandler.HookAdd();
            }
            remove => HookHandler._beforeAdd -= value;
        }

        public static event Delegates.AddRange_BeforeArgs AddRange
        {
            add
            {
                HookHandler._beforeAddRange += value;
                HookHandler.HookAddRange();
            }
            remove => HookHandler._beforeAddRange -= value;
        }

        public static event Delegates.InspectorEdit_BeforeArgs InspectorEdit
        {
            add
            {
                HookHandler._beforeInspectorEdit += value;
                HookHandler.HookInspectorEdit();
            }
            remove => HookHandler._beforeInspectorEdit -= value;
        }

        public static event Delegates.Set_BeforeArgs Set
        {
            add
            {
                HookHandler._beforeSet += value;
                HookHandler.HookSet();
            }
            remove => HookHandler._beforeSet -= value;
        }

        public static event Delegates.Remove_BeforeArgs Remove
        {
            add
            {
                HookHandler._beforeRemove += value;
                HookHandler.HookRemove();
            }
            remove => HookHandler._beforeRemove -= value;
        }

        public static event Delegates.PreFillArrayList_BeforeArgs PreFillArrayList
        {
            add
            {
                HookHandler._beforePreFillArrayList += value;
                HookHandler.HookPreFillArrayList();
            }
            remove => HookHandler._beforePreFillArrayList -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_arrayList_NormalArgs get_arrayList
        {
            add
            {
                HookHandler._afterget_arrayList += value;
                HookHandler.Hookget_arrayList();
            }
            remove => HookHandler._afterget_arrayList -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.isCollectionDefined_NormalArgs isCollectionDefined
        {
            add
            {
                HookHandler._afterisCollectionDefined += value;
                HookHandler.HookisCollectionDefined();
            }
            remove => HookHandler._afterisCollectionDefined -= value;
        }

        public static event Delegates.TakeSnapShot_NormalArgs TakeSnapShot
        {
            add
            {
                HookHandler._afterTakeSnapShot += value;
                HookHandler.HookTakeSnapShot();
            }
            remove => HookHandler._afterTakeSnapShot -= value;
        }

        public static event Delegates.RevertToSnapShot_NormalArgs RevertToSnapShot
        {
            add
            {
                HookHandler._afterRevertToSnapShot += value;
                HookHandler.HookRevertToSnapShot();
            }
            remove => HookHandler._afterRevertToSnapShot -= value;
        }

        public static event Delegates.Add_NormalArgs Add
        {
            add
            {
                HookHandler._afterAdd += value;
                HookHandler.HookAdd();
            }
            remove => HookHandler._afterAdd -= value;
        }

        public static event Delegates.AddRange_NormalArgs AddRange
        {
            add
            {
                HookHandler._afterAddRange += value;
                HookHandler.HookAddRange();
            }
            remove => HookHandler._afterAddRange -= value;
        }

        public static event Delegates.InspectorEdit_NormalArgs InspectorEdit
        {
            add
            {
                HookHandler._afterInspectorEdit += value;
                HookHandler.HookInspectorEdit();
            }
            remove => HookHandler._afterInspectorEdit -= value;
        }

        public static event Delegates.Set_NormalArgs Set
        {
            add
            {
                HookHandler._afterSet += value;
                HookHandler.HookSet();
            }
            remove => HookHandler._afterSet -= value;
        }

        public static event Delegates.Remove_NormalArgs Remove
        {
            add
            {
                HookHandler._afterRemove += value;
                HookHandler.HookRemove();
            }
            remove => HookHandler._afterRemove -= value;
        }

        public static event Delegates.PreFillArrayList_NormalArgs PreFillArrayList
        {
            add
            {
                HookHandler._afterPreFillArrayList += value;
                HookHandler.HookPreFillArrayList();
            }
            remove => HookHandler._afterPreFillArrayList -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_arrayList_NormalArgs get_arrayList
        {
            add => HookEndpointManager.Add<Delegates.get_arrayList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayMakerArrayListProxy), "get_arrayList"), value);
            remove => HookEndpointManager.Remove<Delegates.get_arrayList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayMakerArrayListProxy), "get_arrayList"), value);
        }

        public static event On.PlayMakerArrayListProxy.hook_Awake Awake
        {
            add => On.PlayMakerArrayListProxy.Awake += value;
            remove => On.PlayMakerArrayListProxy.Awake -= value;
        }

        public static event On.PlayMakerArrayListProxy.hook_isCollectionDefined isCollectionDefined
        {
            add => On.PlayMakerArrayListProxy.isCollectionDefined += value;
            remove => On.PlayMakerArrayListProxy.isCollectionDefined -= value;
        }

        public static event On.PlayMakerArrayListProxy.hook_TakeSnapShot TakeSnapShot
        {
            add => On.PlayMakerArrayListProxy.TakeSnapShot += value;
            remove => On.PlayMakerArrayListProxy.TakeSnapShot -= value;
        }

        public static event On.PlayMakerArrayListProxy.hook_RevertToSnapShot RevertToSnapShot
        {
            add => On.PlayMakerArrayListProxy.RevertToSnapShot += value;
            remove => On.PlayMakerArrayListProxy.RevertToSnapShot -= value;
        }

        public static event On.PlayMakerArrayListProxy.hook_Add Add
        {
            add => On.PlayMakerArrayListProxy.Add += value;
            remove => On.PlayMakerArrayListProxy.Add -= value;
        }

        public static event On.PlayMakerArrayListProxy.hook_AddRange AddRange
        {
            add => On.PlayMakerArrayListProxy.AddRange += value;
            remove => On.PlayMakerArrayListProxy.AddRange -= value;
        }

        public static event On.PlayMakerArrayListProxy.hook_InspectorEdit InspectorEdit
        {
            add => On.PlayMakerArrayListProxy.InspectorEdit += value;
            remove => On.PlayMakerArrayListProxy.InspectorEdit -= value;
        }

        public static event On.PlayMakerArrayListProxy.hook_Set Set
        {
            add => On.PlayMakerArrayListProxy.Set += value;
            remove => On.PlayMakerArrayListProxy.Set -= value;
        }

        public static event On.PlayMakerArrayListProxy.hook_Remove Remove
        {
            add => On.PlayMakerArrayListProxy.Remove += value;
            remove => On.PlayMakerArrayListProxy.Remove -= value;
        }

        public static event On.PlayMakerArrayListProxy.hook_PreFillArrayList PreFillArrayList
        {
            add => On.PlayMakerArrayListProxy.PreFillArrayList += value;
            remove => On.PlayMakerArrayListProxy.PreFillArrayList -= value;
        }
    }
}