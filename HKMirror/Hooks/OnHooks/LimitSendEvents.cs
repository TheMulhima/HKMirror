namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for LimitSendEvents class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnLimitSendEvents
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.LimitSendEvents.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.LimitSendEvents.orig_OnEnable orig, LimitSendEvents self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.LimitSendEvents.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.LimitSendEvents.orig_Update orig, LimitSendEvents self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookAdd()
        {
            if (!HookedList.Contains("Add"))
            {
                HookedList.Add("Add");
                On.LimitSendEvents.Add += Add;
            }
        }

        internal static event Delegates.Add_BeforeArgs _beforeAdd;
        internal static event Delegates.Add_NormalArgs _afterAdd;

        private static bool Add(On.LimitSendEvents.orig_Add orig, LimitSendEvents self, GameObject obj)
        {
            Delegates.Params_Add @params = new()
            {
                self = self, obj = obj
            };
            _beforeAdd?.Invoke(@params);
            self = @params.self;
            obj = @params.obj;
            var retVal = orig(self, obj);
            if (_afterAdd != null) retVal = _afterAdd.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Add_BeforeArgs(Params_Add args);

        public delegate bool Add_NormalArgs(Params_Add args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_OnEnable
        {
            public LimitSendEvents self;
        }

        public sealed class Params_Update
        {
            public LimitSendEvents self;
        }

        public sealed class Params_Add
        {
            public GameObject obj;
            public LimitSendEvents self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.Add_BeforeArgs Add
        {
            add
            {
                HookHandler._beforeAdd += value;
                HookHandler.HookAdd();
            }
            remove => HookHandler._beforeAdd -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.Add_NormalArgs Add
        {
            add
            {
                HookHandler._afterAdd += value;
                HookHandler.HookAdd();
            }
            remove => HookHandler._afterAdd -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.LimitSendEvents.hook_OnEnable OnEnable
        {
            add => On.LimitSendEvents.OnEnable += value;
            remove => On.LimitSendEvents.OnEnable -= value;
        }

        public static event On.LimitSendEvents.hook_Update Update
        {
            add => On.LimitSendEvents.Update += value;
            remove => On.LimitSendEvents.Update -= value;
        }

        public static event On.LimitSendEvents.hook_Add Add
        {
            add => On.LimitSendEvents.Add += value;
            remove => On.LimitSendEvents.Add -= value;
        }
    }
}