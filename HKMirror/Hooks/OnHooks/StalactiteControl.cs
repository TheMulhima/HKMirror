namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for StalactiteControl class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnStalactiteControl
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.StalactiteControl.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.StalactiteControl.orig_Awake orig, StalactiteControl self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.StalactiteControl.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.StalactiteControl.orig_Start orig, StalactiteControl self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookHandleTriggerEnter()
        {
            if (!HookedList.Contains("HandleTriggerEnter"))
            {
                HookedList.Add("HandleTriggerEnter");
                On.StalactiteControl.HandleTriggerEnter += HandleTriggerEnter;
            }
        }

        internal static event Delegates.HandleTriggerEnter_BeforeArgs _beforeHandleTriggerEnter;
        internal static event Delegates.HandleTriggerEnter_NormalArgs _afterHandleTriggerEnter;

        private static void HandleTriggerEnter(On.StalactiteControl.orig_HandleTriggerEnter orig,
            StalactiteControl self, Collider2D collider, GameObject sender)
        {
            Delegates.Params_HandleTriggerEnter @params = new()
            {
                self = self, collider = collider, sender = sender
            };
            _beforeHandleTriggerEnter?.Invoke(@params);
            self = @params.self;
            collider = @params.collider;
            sender = @params.sender;
            orig(self, collider, sender);
            if (_afterHandleTriggerEnter != null) _afterHandleTriggerEnter.Invoke(@params);
        }

        internal static void HookFall()
        {
            if (!HookedList.Contains("Fall"))
            {
                HookedList.Add("Fall");
                On.StalactiteControl.Fall += Fall;
            }
        }

        internal static event Delegates.Fall_BeforeArgs _beforeFall;

        private static IEnumerator Fall(On.StalactiteControl.orig_Fall orig, StalactiteControl self, float delay)
        {
            Delegates.Params_Fall @params = new()
            {
                self = self, delay = delay
            };
            _beforeFall?.Invoke(@params);
            self = @params.self;
            delay = @params.delay;
            return orig(self, delay);
        }

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.StalactiteControl.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_NormalArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.StalactiteControl.orig_OnTriggerEnter2D orig, StalactiteControl self,
            Collider2D collision)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, collision = collision
            };
            _beforeOnTriggerEnter2D?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnTriggerEnter2D != null) _afterOnTriggerEnter2D.Invoke(@params);
        }

        internal static void HookFlingObjects()
        {
            if (!HookedList.Contains("FlingObjects"))
            {
                HookedList.Add("FlingObjects");
                On.StalactiteControl.FlingObjects += FlingObjects;
            }
        }

        internal static event Delegates.FlingObjects_BeforeArgs _beforeFlingObjects;
        internal static event Delegates.FlingObjects_NormalArgs _afterFlingObjects;

        private static void FlingObjects(On.StalactiteControl.orig_FlingObjects orig, StalactiteControl self)
        {
            Delegates.Params_FlingObjects @params = new()
            {
                self = self
            };
            _beforeFlingObjects?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFlingObjects != null) _afterFlingObjects.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void Fall_BeforeArgs(Params_Fall args);

        public delegate IEnumerator Fall_NormalArgs(Params_Fall args);

        public delegate void FlingObjects_BeforeArgs(Params_FlingObjects args);

        public delegate void FlingObjects_NormalArgs(Params_FlingObjects args);

        public delegate void HandleTriggerEnter_BeforeArgs(Params_HandleTriggerEnter args);

        public delegate void HandleTriggerEnter_NormalArgs(Params_HandleTriggerEnter args);

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_NormalArgs(Params_OnTriggerEnter2D args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Awake
        {
            public StalactiteControl self;
        }

        public sealed class Params_Start
        {
            public StalactiteControl self;
        }

        public sealed class Params_HandleTriggerEnter
        {
            public Collider2D collider;
            public StalactiteControl self;
            public GameObject sender;
        }

        public sealed class Params_Fall
        {
            public float delay;
            public StalactiteControl self;
        }

        public sealed class Params_OnTriggerEnter2D
        {
            public Collider2D collision;
            public StalactiteControl self;
        }

        public sealed class Params_FlingObjects
        {
            public StalactiteControl self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.HandleTriggerEnter_BeforeArgs HandleTriggerEnter
        {
            add
            {
                HookHandler._beforeHandleTriggerEnter += value;
                HookHandler.HookHandleTriggerEnter();
            }
            remove => HookHandler._beforeHandleTriggerEnter -= value;
        }

        public static event Delegates.Fall_BeforeArgs Fall
        {
            add
            {
                HookHandler._beforeFall += value;
                HookHandler.HookFall();
            }
            remove => HookHandler._beforeFall -= value;
        }

        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.FlingObjects_BeforeArgs FlingObjects
        {
            add
            {
                HookHandler._beforeFlingObjects += value;
                HookHandler.HookFlingObjects();
            }
            remove => HookHandler._beforeFlingObjects -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.HandleTriggerEnter_NormalArgs HandleTriggerEnter
        {
            add
            {
                HookHandler._afterHandleTriggerEnter += value;
                HookHandler.HookHandleTriggerEnter();
            }
            remove => HookHandler._afterHandleTriggerEnter -= value;
        }

        public static event Delegates.OnTriggerEnter2D_NormalArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }

        public static event Delegates.FlingObjects_NormalArgs FlingObjects
        {
            add
            {
                HookHandler._afterFlingObjects += value;
                HookHandler.HookFlingObjects();
            }
            remove => HookHandler._afterFlingObjects -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.StalactiteControl.hook_Awake Awake
        {
            add => On.StalactiteControl.Awake += value;
            remove => On.StalactiteControl.Awake -= value;
        }

        public static event On.StalactiteControl.hook_Start Start
        {
            add => On.StalactiteControl.Start += value;
            remove => On.StalactiteControl.Start -= value;
        }

        public static event On.StalactiteControl.hook_HandleTriggerEnter HandleTriggerEnter
        {
            add => On.StalactiteControl.HandleTriggerEnter += value;
            remove => On.StalactiteControl.HandleTriggerEnter -= value;
        }

        public static event On.StalactiteControl.hook_Fall Fall
        {
            add => On.StalactiteControl.Fall += value;
            remove => On.StalactiteControl.Fall -= value;
        }

        public static event On.StalactiteControl.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.StalactiteControl.OnTriggerEnter2D += value;
            remove => On.StalactiteControl.OnTriggerEnter2D -= value;
        }

        public static event On.StalactiteControl.hook_FlingObjects FlingObjects
        {
            add => On.StalactiteControl.FlingObjects += value;
            remove => On.StalactiteControl.FlingObjects -= value;
        }
    }
}