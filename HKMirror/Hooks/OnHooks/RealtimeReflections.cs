using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for RealtimeReflections class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnRealtimeReflections
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
On.RealtimeReflections.OnEnable += OnEnable;

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(On.RealtimeReflections.orig_OnEnable orig,RealtimeReflections self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.RealtimeReflections.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.RealtimeReflections.orig_Start orig,RealtimeReflections self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookLateUpdate()
{
if (!HookedList.Contains("LateUpdate"))
{
HookedList.Add("LateUpdate");
On.RealtimeReflections.LateUpdate += LateUpdate;

}
}
internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
internal static event Delegates.LateUpdate_AfterArgs _afterLateUpdate;
private static void LateUpdate(On.RealtimeReflections.orig_LateUpdate orig,RealtimeReflections self)
{
Delegates.Params_LateUpdate @params = new() 
{
self = self
};
if (_beforeLateUpdate != null)
{
foreach (Delegates.LateUpdate_BeforeArgs toInvoke in _beforeLateUpdate.GetInvocationList())
{
try
{
_beforeLateUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterLateUpdate != null)
{
foreach (Delegates.LateUpdate_AfterArgs toInvoke in _afterLateUpdate.GetInvocationList())
{
try
{
_afterLateUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateCubemap()
{
if (!HookedList.Contains("UpdateCubemap"))
{
HookedList.Add("UpdateCubemap");
On.RealtimeReflections.UpdateCubemap += UpdateCubemap;

}
}
internal static event Delegates.UpdateCubemap_BeforeArgs _beforeUpdateCubemap;
internal static event Delegates.UpdateCubemap_AfterArgs _afterUpdateCubemap;
private static void UpdateCubemap(On.RealtimeReflections.orig_UpdateCubemap orig,RealtimeReflections self,  int faceMask)
{
Delegates.Params_UpdateCubemap @params = new() 
{
self = self
, faceMask = faceMask
};
if (_beforeUpdateCubemap != null)
{
foreach (Delegates.UpdateCubemap_BeforeArgs toInvoke in _beforeUpdateCubemap.GetInvocationList())
{
try
{
_beforeUpdateCubemap?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
faceMask = @params.faceMask;
orig(self, faceMask);
if (_afterUpdateCubemap != null)
{
foreach (Delegates.UpdateCubemap_AfterArgs toInvoke in _afterUpdateCubemap.GetInvocationList())
{
try
{
_afterUpdateCubemap.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDisable()
{
if (!HookedList.Contains("OnDisable"))
{
HookedList.Add("OnDisable");
On.RealtimeReflections.OnDisable += OnDisable;

}
}
internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;
private static void OnDisable(On.RealtimeReflections.orig_OnDisable orig,RealtimeReflections self)
{
Delegates.Params_OnDisable @params = new() 
{
self = self
};
if (_beforeOnDisable != null)
{
foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
{
try
{
_beforeOnDisable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDisable != null)
{
foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
{
try
{
_afterOnDisable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_OnEnable
{
public RealtimeReflections self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<RealtimeReflections> orig, RealtimeReflections self);
public sealed class Params_Start
{
public RealtimeReflections self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<RealtimeReflections> orig, RealtimeReflections self);
public sealed class Params_LateUpdate
{
public RealtimeReflections self;
}
public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);
public delegate void LateUpdate_AfterArgs(Params_LateUpdate args);
public delegate void LateUpdate_WithArgs (Action<RealtimeReflections> orig, RealtimeReflections self);
public sealed class Params_UpdateCubemap
{
public RealtimeReflections self;
public int faceMask;
}
public delegate void UpdateCubemap_BeforeArgs(Params_UpdateCubemap args);
public delegate void UpdateCubemap_AfterArgs(Params_UpdateCubemap args);
public delegate void UpdateCubemap_WithArgs (Action<RealtimeReflections,  int> orig, RealtimeReflections self,  int faceMask);
public sealed class Params_OnDisable
{
public RealtimeReflections self;
}
public delegate void OnDisable_BeforeArgs(Params_OnDisable args);
public delegate void OnDisable_AfterArgs(Params_OnDisable args);
public delegate void OnDisable_WithArgs (Action<RealtimeReflections> orig, RealtimeReflections self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.LateUpdate_BeforeArgs LateUpdate
{
add
{

HookHandler._beforeLateUpdate += value;
HookHandler.HookLateUpdate();
}
remove => HookHandler._beforeLateUpdate -= value;
}
public static event Delegates.UpdateCubemap_BeforeArgs UpdateCubemap
{
add
{

HookHandler._beforeUpdateCubemap += value;
HookHandler.HookUpdateCubemap();
}
remove => HookHandler._beforeUpdateCubemap -= value;
}
public static event Delegates.OnDisable_BeforeArgs OnDisable
{
add
{

HookHandler._beforeOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._beforeOnDisable -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.LateUpdate_AfterArgs LateUpdate
{
add
{

HookHandler._afterLateUpdate += value;
HookHandler.HookLateUpdate();
}
remove => HookHandler._afterLateUpdate -= value;
}
public static event Delegates.UpdateCubemap_AfterArgs UpdateCubemap
{
add
{

HookHandler._afterUpdateCubemap += value;
HookHandler.HookUpdateCubemap();
}
remove => HookHandler._afterUpdateCubemap -= value;
}
public static event Delegates.OnDisable_AfterArgs OnDisable
{
add
{

HookHandler._afterOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._afterOnDisable -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.RealtimeReflections.hook_OnEnable OnEnable
{
add => On.RealtimeReflections.OnEnable += value;
remove => On.RealtimeReflections.OnEnable -= value;
}
public static event On.RealtimeReflections.hook_Start Start
{
add => On.RealtimeReflections.Start += value;
remove => On.RealtimeReflections.Start -= value;
}
public static event On.RealtimeReflections.hook_LateUpdate LateUpdate
{
add => On.RealtimeReflections.LateUpdate += value;
remove => On.RealtimeReflections.LateUpdate -= value;
}
public static event On.RealtimeReflections.hook_UpdateCubemap UpdateCubemap
{
add => On.RealtimeReflections.UpdateCubemap += value;
remove => On.RealtimeReflections.UpdateCubemap -= value;
}
public static event On.RealtimeReflections.hook_OnDisable OnDisable
{
add => On.RealtimeReflections.OnDisable += value;
remove => On.RealtimeReflections.OnDisable -= value;
}
}

}
