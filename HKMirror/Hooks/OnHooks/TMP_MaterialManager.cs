using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TMP_MaterialManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTMP_MaterialManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookGetStencilMaterial()
        {
            if (!HookedList.Contains("GetStencilMaterial"))
            {
                HookedList.Add("GetStencilMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "GetStencilMaterial", false),
                    GetStencilMaterial);
            }
        }

        internal static event Delegates.GetStencilMaterial_BeforeArgs _beforeGetStencilMaterial;
        internal static event Delegates.GetStencilMaterial_AfterArgs _afterGetStencilMaterial;

        private static Material GetStencilMaterial(Func<Material, int, Material> orig, Material baseMaterial,
            int stencilID)
        {
            Delegates.Params_GetStencilMaterial @params = new()
            {
                baseMaterial = baseMaterial, stencilID = stencilID
            };
            if (_beforeGetStencilMaterial != null)
                foreach (Delegates.GetStencilMaterial_BeforeArgs toInvoke in
                         _beforeGetStencilMaterial.GetInvocationList())
                    try
                    {
                        _beforeGetStencilMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            baseMaterial = @params.baseMaterial;
            stencilID = @params.stencilID;
            var retVal = orig(baseMaterial, stencilID);
            if (_afterGetStencilMaterial != null)
                foreach (Delegates.GetStencilMaterial_AfterArgs toInvoke in
                         _afterGetStencilMaterial.GetInvocationList())
                    try
                    {
                        retVal = _afterGetStencilMaterial.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookReleaseStencilMaterial()
        {
            if (!HookedList.Contains("ReleaseStencilMaterial"))
            {
                HookedList.Add("ReleaseStencilMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "ReleaseStencilMaterial", false),
                    ReleaseStencilMaterial);
            }
        }

        internal static event Delegates.ReleaseStencilMaterial_BeforeArgs _beforeReleaseStencilMaterial;
        internal static event Delegates.ReleaseStencilMaterial_AfterArgs _afterReleaseStencilMaterial;

        private static void ReleaseStencilMaterial(Action<Material> orig, Material stencilMaterial)
        {
            Delegates.Params_ReleaseStencilMaterial @params = new()
            {
                stencilMaterial = stencilMaterial
            };
            if (_beforeReleaseStencilMaterial != null)
                foreach (Delegates.ReleaseStencilMaterial_BeforeArgs toInvoke in _beforeReleaseStencilMaterial
                             .GetInvocationList())
                    try
                    {
                        _beforeReleaseStencilMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            stencilMaterial = @params.stencilMaterial;
            orig(stencilMaterial);
            if (_afterReleaseStencilMaterial != null)
                foreach (Delegates.ReleaseStencilMaterial_AfterArgs toInvoke in _afterReleaseStencilMaterial
                             .GetInvocationList())
                    try
                    {
                        _afterReleaseStencilMaterial.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetBaseMaterial()
        {
            if (!HookedList.Contains("GetBaseMaterial"))
            {
                HookedList.Add("GetBaseMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "GetBaseMaterial", false),
                    GetBaseMaterial);
            }
        }

        internal static event Delegates.GetBaseMaterial_BeforeArgs _beforeGetBaseMaterial;
        internal static event Delegates.GetBaseMaterial_AfterArgs _afterGetBaseMaterial;

        private static Material GetBaseMaterial(Func<Material, Material> orig, Material stencilMaterial)
        {
            Delegates.Params_GetBaseMaterial @params = new()
            {
                stencilMaterial = stencilMaterial
            };
            if (_beforeGetBaseMaterial != null)
                foreach (Delegates.GetBaseMaterial_BeforeArgs toInvoke in _beforeGetBaseMaterial.GetInvocationList())
                    try
                    {
                        _beforeGetBaseMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            stencilMaterial = @params.stencilMaterial;
            var retVal = orig(stencilMaterial);
            if (_afterGetBaseMaterial != null)
                foreach (Delegates.GetBaseMaterial_AfterArgs toInvoke in _afterGetBaseMaterial.GetInvocationList())
                    try
                    {
                        retVal = _afterGetBaseMaterial.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetStencil()
        {
            if (!HookedList.Contains("SetStencil"))
            {
                HookedList.Add("SetStencil");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "SetStencil", false), SetStencil);
            }
        }

        internal static event Delegates.SetStencil_BeforeArgs _beforeSetStencil;
        internal static event Delegates.SetStencil_AfterArgs _afterSetStencil;

        private static Material SetStencil(Func<Material, int, Material> orig, Material material, int stencilID)
        {
            Delegates.Params_SetStencil @params = new()
            {
                material = material, stencilID = stencilID
            };
            if (_beforeSetStencil != null)
                foreach (Delegates.SetStencil_BeforeArgs toInvoke in _beforeSetStencil.GetInvocationList())
                    try
                    {
                        _beforeSetStencil?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            material = @params.material;
            stencilID = @params.stencilID;
            var retVal = orig(material, stencilID);
            if (_afterSetStencil != null)
                foreach (Delegates.SetStencil_AfterArgs toInvoke in _afterSetStencil.GetInvocationList())
                    try
                    {
                        retVal = _afterSetStencil.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAddMaskingMaterial()
        {
            if (!HookedList.Contains("AddMaskingMaterial"))
            {
                HookedList.Add("AddMaskingMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "AddMaskingMaterial", false),
                    AddMaskingMaterial);
            }
        }

        internal static event Delegates.AddMaskingMaterial_BeforeArgs _beforeAddMaskingMaterial;
        internal static event Delegates.AddMaskingMaterial_AfterArgs _afterAddMaskingMaterial;

        private static void AddMaskingMaterial(Action<Material, Material, int> orig, Material baseMaterial,
            Material stencilMaterial, int stencilID)
        {
            Delegates.Params_AddMaskingMaterial @params = new()
            {
                baseMaterial = baseMaterial, stencilMaterial = stencilMaterial, stencilID = stencilID
            };
            if (_beforeAddMaskingMaterial != null)
                foreach (Delegates.AddMaskingMaterial_BeforeArgs toInvoke in
                         _beforeAddMaskingMaterial.GetInvocationList())
                    try
                    {
                        _beforeAddMaskingMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            baseMaterial = @params.baseMaterial;
            stencilMaterial = @params.stencilMaterial;
            stencilID = @params.stencilID;
            orig(baseMaterial, stencilMaterial, stencilID);
            if (_afterAddMaskingMaterial != null)
                foreach (Delegates.AddMaskingMaterial_AfterArgs toInvoke in
                         _afterAddMaskingMaterial.GetInvocationList())
                    try
                    {
                        _afterAddMaskingMaterial.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRemoveStencilMaterial()
        {
            if (!HookedList.Contains("RemoveStencilMaterial"))
            {
                HookedList.Add("RemoveStencilMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "RemoveStencilMaterial", false),
                    RemoveStencilMaterial);
            }
        }

        internal static event Delegates.RemoveStencilMaterial_BeforeArgs _beforeRemoveStencilMaterial;
        internal static event Delegates.RemoveStencilMaterial_AfterArgs _afterRemoveStencilMaterial;

        private static void RemoveStencilMaterial(Action<Material> orig, Material stencilMaterial)
        {
            Delegates.Params_RemoveStencilMaterial @params = new()
            {
                stencilMaterial = stencilMaterial
            };
            if (_beforeRemoveStencilMaterial != null)
                foreach (Delegates.RemoveStencilMaterial_BeforeArgs toInvoke in _beforeRemoveStencilMaterial
                             .GetInvocationList())
                    try
                    {
                        _beforeRemoveStencilMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            stencilMaterial = @params.stencilMaterial;
            orig(stencilMaterial);
            if (_afterRemoveStencilMaterial != null)
                foreach (Delegates.RemoveStencilMaterial_AfterArgs toInvoke in _afterRemoveStencilMaterial
                             .GetInvocationList())
                    try
                    {
                        _afterRemoveStencilMaterial.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookReleaseBaseMaterial()
        {
            if (!HookedList.Contains("ReleaseBaseMaterial"))
            {
                HookedList.Add("ReleaseBaseMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "ReleaseBaseMaterial", false),
                    ReleaseBaseMaterial);
            }
        }

        internal static event Delegates.ReleaseBaseMaterial_BeforeArgs _beforeReleaseBaseMaterial;
        internal static event Delegates.ReleaseBaseMaterial_AfterArgs _afterReleaseBaseMaterial;

        private static void ReleaseBaseMaterial(Action<Material> orig, Material baseMaterial)
        {
            Delegates.Params_ReleaseBaseMaterial @params = new()
            {
                baseMaterial = baseMaterial
            };
            if (_beforeReleaseBaseMaterial != null)
                foreach (Delegates.ReleaseBaseMaterial_BeforeArgs toInvoke in _beforeReleaseBaseMaterial
                             .GetInvocationList())
                    try
                    {
                        _beforeReleaseBaseMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            baseMaterial = @params.baseMaterial;
            orig(baseMaterial);
            if (_afterReleaseBaseMaterial != null)
                foreach (Delegates.ReleaseBaseMaterial_AfterArgs toInvoke in
                         _afterReleaseBaseMaterial.GetInvocationList())
                    try
                    {
                        _afterReleaseBaseMaterial.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookClearMaterials()
        {
            if (!HookedList.Contains("ClearMaterials"))
            {
                HookedList.Add("ClearMaterials");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "ClearMaterials", false),
                    ClearMaterials);
            }
        }

        internal static event Delegates.ClearMaterials_BeforeArgs _beforeClearMaterials;
        internal static event Delegates.ClearMaterials_AfterArgs _afterClearMaterials;

        private static void ClearMaterials(Action orig)
        {
            if (_beforeClearMaterials != null)
                foreach (Delegates.ClearMaterials_BeforeArgs toInvoke in _beforeClearMaterials.GetInvocationList())
                    try
                    {
                        _beforeClearMaterials?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterClearMaterials != null)
                foreach (Delegates.ClearMaterials_AfterArgs toInvoke in _afterClearMaterials.GetInvocationList())
                    try
                    {
                        _afterClearMaterials.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetStencilID()
        {
            if (!HookedList.Contains("GetStencilID"))
            {
                HookedList.Add("GetStencilID");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "GetStencilID", false),
                    GetStencilID);
            }
        }

        internal static event Delegates.GetStencilID_BeforeArgs _beforeGetStencilID;
        internal static event Delegates.GetStencilID_AfterArgs _afterGetStencilID;

        private static int GetStencilID(Func<GameObject, int> orig, GameObject obj)
        {
            Delegates.Params_GetStencilID @params = new()
            {
                obj = obj
            };
            if (_beforeGetStencilID != null)
                foreach (Delegates.GetStencilID_BeforeArgs toInvoke in _beforeGetStencilID.GetInvocationList())
                    try
                    {
                        _beforeGetStencilID?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            obj = @params.obj;
            var retVal = orig(obj);
            if (_afterGetStencilID != null)
                foreach (Delegates.GetStencilID_AfterArgs toInvoke in _afterGetStencilID.GetInvocationList())
                    try
                    {
                        retVal = _afterGetStencilID.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetFallbackMaterial()
        {
            if (!HookedList.Contains("GetFallbackMaterial"))
            {
                HookedList.Add("GetFallbackMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "GetFallbackMaterial", false),
                    GetFallbackMaterial);
            }
        }

        internal static event Delegates.GetFallbackMaterial_BeforeArgs _beforeGetFallbackMaterial;
        internal static event Delegates.GetFallbackMaterial_AfterArgs _afterGetFallbackMaterial;

        private static Material GetFallbackMaterial(Func<Material, Material, Material> orig, Material sourceMaterial,
            Material targetMaterial)
        {
            Delegates.Params_GetFallbackMaterial @params = new()
            {
                sourceMaterial = sourceMaterial, targetMaterial = targetMaterial
            };
            if (_beforeGetFallbackMaterial != null)
                foreach (Delegates.GetFallbackMaterial_BeforeArgs toInvoke in _beforeGetFallbackMaterial
                             .GetInvocationList())
                    try
                    {
                        _beforeGetFallbackMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            sourceMaterial = @params.sourceMaterial;
            targetMaterial = @params.targetMaterial;
            var retVal = orig(sourceMaterial, targetMaterial);
            if (_afterGetFallbackMaterial != null)
                foreach (Delegates.GetFallbackMaterial_AfterArgs toInvoke in
                         _afterGetFallbackMaterial.GetInvocationList())
                    try
                    {
                        retVal = _afterGetFallbackMaterial.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAddFallbackMaterialReference()
        {
            if (!HookedList.Contains("AddFallbackMaterialReference"))
            {
                HookedList.Add("AddFallbackMaterialReference");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "AddFallbackMaterialReference", false),
                    AddFallbackMaterialReference);
            }
        }

        internal static event Delegates.AddFallbackMaterialReference_BeforeArgs _beforeAddFallbackMaterialReference;
        internal static event Delegates.AddFallbackMaterialReference_AfterArgs _afterAddFallbackMaterialReference;

        private static void AddFallbackMaterialReference(Action<Material> orig, Material targetMaterial)
        {
            Delegates.Params_AddFallbackMaterialReference @params = new()
            {
                targetMaterial = targetMaterial
            };
            if (_beforeAddFallbackMaterialReference != null)
                foreach (Delegates.AddFallbackMaterialReference_BeforeArgs toInvoke in
                         _beforeAddFallbackMaterialReference.GetInvocationList())
                    try
                    {
                        _beforeAddFallbackMaterialReference?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            targetMaterial = @params.targetMaterial;
            orig(targetMaterial);
            if (_afterAddFallbackMaterialReference != null)
                foreach (Delegates.AddFallbackMaterialReference_AfterArgs toInvoke in _afterAddFallbackMaterialReference
                             .GetInvocationList())
                    try
                    {
                        _afterAddFallbackMaterialReference.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRemoveFallbackMaterialReference()
        {
            if (!HookedList.Contains("RemoveFallbackMaterialReference"))
            {
                HookedList.Add("RemoveFallbackMaterialReference");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "RemoveFallbackMaterialReference",
                        false), RemoveFallbackMaterialReference);
            }
        }

        internal static event Delegates.RemoveFallbackMaterialReference_BeforeArgs
            _beforeRemoveFallbackMaterialReference;

        internal static event Delegates.RemoveFallbackMaterialReference_AfterArgs _afterRemoveFallbackMaterialReference;

        private static void RemoveFallbackMaterialReference(Action<Material> orig, Material targetMaterial)
        {
            Delegates.Params_RemoveFallbackMaterialReference @params = new()
            {
                targetMaterial = targetMaterial
            };
            if (_beforeRemoveFallbackMaterialReference != null)
                foreach (Delegates.RemoveFallbackMaterialReference_BeforeArgs toInvoke in
                         _beforeRemoveFallbackMaterialReference.GetInvocationList())
                    try
                    {
                        _beforeRemoveFallbackMaterialReference?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            targetMaterial = @params.targetMaterial;
            orig(targetMaterial);
            if (_afterRemoveFallbackMaterialReference != null)
                foreach (Delegates.RemoveFallbackMaterialReference_AfterArgs toInvoke in
                         _afterRemoveFallbackMaterialReference.GetInvocationList())
                    try
                    {
                        _afterRemoveFallbackMaterialReference.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCleanupFallbackMaterials()
        {
            if (!HookedList.Contains("CleanupFallbackMaterials"))
            {
                HookedList.Add("CleanupFallbackMaterials");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "CleanupFallbackMaterials", false),
                    CleanupFallbackMaterials);
            }
        }

        internal static event Delegates.CleanupFallbackMaterials_BeforeArgs _beforeCleanupFallbackMaterials;
        internal static event Delegates.CleanupFallbackMaterials_AfterArgs _afterCleanupFallbackMaterials;

        private static void CleanupFallbackMaterials(Action orig)
        {
            if (_beforeCleanupFallbackMaterials != null)
                foreach (Delegates.CleanupFallbackMaterials_BeforeArgs toInvoke in _beforeCleanupFallbackMaterials
                             .GetInvocationList())
                    try
                    {
                        _beforeCleanupFallbackMaterials?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterCleanupFallbackMaterials != null)
                foreach (Delegates.CleanupFallbackMaterials_AfterArgs toInvoke in _afterCleanupFallbackMaterials
                             .GetInvocationList())
                    try
                    {
                        _afterCleanupFallbackMaterials.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookReleaseFallbackMaterial()
        {
            if (!HookedList.Contains("ReleaseFallbackMaterial"))
            {
                HookedList.Add("ReleaseFallbackMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "ReleaseFallbackMaterial", false),
                    ReleaseFallbackMaterial);
            }
        }

        internal static event Delegates.ReleaseFallbackMaterial_BeforeArgs _beforeReleaseFallbackMaterial;
        internal static event Delegates.ReleaseFallbackMaterial_AfterArgs _afterReleaseFallbackMaterial;

        private static void ReleaseFallbackMaterial(Action<Material> orig, Material fallackMaterial)
        {
            Delegates.Params_ReleaseFallbackMaterial @params = new()
            {
                fallackMaterial = fallackMaterial
            };
            if (_beforeReleaseFallbackMaterial != null)
                foreach (Delegates.ReleaseFallbackMaterial_BeforeArgs toInvoke in _beforeReleaseFallbackMaterial
                             .GetInvocationList())
                    try
                    {
                        _beforeReleaseFallbackMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fallackMaterial = @params.fallackMaterial;
            orig(fallackMaterial);
            if (_afterReleaseFallbackMaterial != null)
                foreach (Delegates.ReleaseFallbackMaterial_AfterArgs toInvoke in _afterReleaseFallbackMaterial
                             .GetInvocationList())
                    try
                    {
                        _afterReleaseFallbackMaterial.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCopyMaterialPresetProperties()
        {
            if (!HookedList.Contains("CopyMaterialPresetProperties"))
            {
                HookedList.Add("CopyMaterialPresetProperties");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "CopyMaterialPresetProperties", false),
                    CopyMaterialPresetProperties);
            }
        }

        internal static event Delegates.CopyMaterialPresetProperties_BeforeArgs _beforeCopyMaterialPresetProperties;
        internal static event Delegates.CopyMaterialPresetProperties_AfterArgs _afterCopyMaterialPresetProperties;

        private static void CopyMaterialPresetProperties(Action<Material, Material> orig, Material source,
            Material destination)
        {
            Delegates.Params_CopyMaterialPresetProperties @params = new()
            {
                source = source, destination = destination
            };
            if (_beforeCopyMaterialPresetProperties != null)
                foreach (Delegates.CopyMaterialPresetProperties_BeforeArgs toInvoke in
                         _beforeCopyMaterialPresetProperties.GetInvocationList())
                    try
                    {
                        _beforeCopyMaterialPresetProperties?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            source = @params.source;
            destination = @params.destination;
            orig(source, destination);
            if (_afterCopyMaterialPresetProperties != null)
                foreach (Delegates.CopyMaterialPresetProperties_AfterArgs toInvoke in _afterCopyMaterialPresetProperties
                             .GetInvocationList())
                    try
                    {
                        _afterCopyMaterialPresetProperties.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AddFallbackMaterialReference_AfterArgs(Params_AddFallbackMaterialReference args);

        public delegate void AddFallbackMaterialReference_BeforeArgs(Params_AddFallbackMaterialReference args);

        public delegate void AddFallbackMaterialReference_WithArgs(Action<Material> orig, Material targetMaterial);

        public delegate void AddMaskingMaterial_AfterArgs(Params_AddMaskingMaterial args);

        public delegate void AddMaskingMaterial_BeforeArgs(Params_AddMaskingMaterial args);

        public delegate void AddMaskingMaterial_WithArgs(Action<Material, Material, int> orig, Material baseMaterial,
            Material stencilMaterial, int stencilID);

        public delegate void CleanupFallbackMaterials_AfterArgs();

        public delegate void CleanupFallbackMaterials_BeforeArgs();

        public delegate void CleanupFallbackMaterials_WithArgs(Action orig);

        public delegate void ClearMaterials_AfterArgs();

        public delegate void ClearMaterials_BeforeArgs();

        public delegate void ClearMaterials_WithArgs(Action orig);

        public delegate void CopyMaterialPresetProperties_AfterArgs(Params_CopyMaterialPresetProperties args);

        public delegate void CopyMaterialPresetProperties_BeforeArgs(Params_CopyMaterialPresetProperties args);

        public delegate void CopyMaterialPresetProperties_WithArgs(Action<Material, Material> orig, Material source,
            Material destination);

        public delegate Material GetBaseMaterial_AfterArgs(Params_GetBaseMaterial args, Material ret);

        public delegate void GetBaseMaterial_BeforeArgs(Params_GetBaseMaterial args);

        public delegate Material GetBaseMaterial_WithArgs(Func<Material, Material> orig, Material stencilMaterial);

        public delegate Material GetFallbackMaterial_AfterArgs(Params_GetFallbackMaterial args, Material ret);

        public delegate void GetFallbackMaterial_BeforeArgs(Params_GetFallbackMaterial args);

        public delegate Material GetFallbackMaterial_WithArgs(Func<Material, Material, Material> orig,
            Material sourceMaterial, Material targetMaterial);

        public delegate int GetStencilID_AfterArgs(Params_GetStencilID args, int ret);

        public delegate void GetStencilID_BeforeArgs(Params_GetStencilID args);

        public delegate int GetStencilID_WithArgs(Func<GameObject, int> orig, GameObject obj);

        public delegate Material GetStencilMaterial_AfterArgs(Params_GetStencilMaterial args, Material ret);

        public delegate void GetStencilMaterial_BeforeArgs(Params_GetStencilMaterial args);

        public delegate Material GetStencilMaterial_WithArgs(Func<Material, int, Material> orig, Material baseMaterial,
            int stencilID);

        public delegate void ReleaseBaseMaterial_AfterArgs(Params_ReleaseBaseMaterial args);

        public delegate void ReleaseBaseMaterial_BeforeArgs(Params_ReleaseBaseMaterial args);

        public delegate void ReleaseBaseMaterial_WithArgs(Action<Material> orig, Material baseMaterial);

        public delegate void ReleaseFallbackMaterial_AfterArgs(Params_ReleaseFallbackMaterial args);

        public delegate void ReleaseFallbackMaterial_BeforeArgs(Params_ReleaseFallbackMaterial args);

        public delegate void ReleaseFallbackMaterial_WithArgs(Action<Material> orig, Material fallackMaterial);

        public delegate void ReleaseStencilMaterial_AfterArgs(Params_ReleaseStencilMaterial args);

        public delegate void ReleaseStencilMaterial_BeforeArgs(Params_ReleaseStencilMaterial args);

        public delegate void ReleaseStencilMaterial_WithArgs(Action<Material> orig, Material stencilMaterial);

        public delegate void RemoveFallbackMaterialReference_AfterArgs(Params_RemoveFallbackMaterialReference args);

        public delegate void RemoveFallbackMaterialReference_BeforeArgs(Params_RemoveFallbackMaterialReference args);

        public delegate void RemoveFallbackMaterialReference_WithArgs(Action<Material> orig, Material targetMaterial);

        public delegate void RemoveStencilMaterial_AfterArgs(Params_RemoveStencilMaterial args);

        public delegate void RemoveStencilMaterial_BeforeArgs(Params_RemoveStencilMaterial args);

        public delegate void RemoveStencilMaterial_WithArgs(Action<Material> orig, Material stencilMaterial);

        public delegate Material SetStencil_AfterArgs(Params_SetStencil args, Material ret);

        public delegate void SetStencil_BeforeArgs(Params_SetStencil args);

        public delegate Material SetStencil_WithArgs(Func<Material, int, Material> orig, Material material,
            int stencilID);

        public sealed class Params_GetStencilMaterial
        {
            public Material baseMaterial;
            public int stencilID;
        }

        public sealed class Params_ReleaseStencilMaterial
        {
            public Material stencilMaterial;
        }

        public sealed class Params_GetBaseMaterial
        {
            public Material stencilMaterial;
        }

        public sealed class Params_SetStencil
        {
            public Material material;
            public int stencilID;
        }

        public sealed class Params_AddMaskingMaterial
        {
            public Material baseMaterial;
            public int stencilID;
            public Material stencilMaterial;
        }

        public sealed class Params_RemoveStencilMaterial
        {
            public Material stencilMaterial;
        }

        public sealed class Params_ReleaseBaseMaterial
        {
            public Material baseMaterial;
        }

        public sealed class Params_GetStencilID
        {
            public GameObject obj;
        }

        public sealed class Params_GetFallbackMaterial
        {
            public Material sourceMaterial;
            public Material targetMaterial;
        }

        public sealed class Params_AddFallbackMaterialReference
        {
            public Material targetMaterial;
        }

        public sealed class Params_RemoveFallbackMaterialReference
        {
            public Material targetMaterial;
        }

        public sealed class Params_ReleaseFallbackMaterial
        {
            public Material fallackMaterial;
        }

        public sealed class Params_CopyMaterialPresetProperties
        {
            public Material destination;
            public Material source;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.GetStencilMaterial_BeforeArgs GetStencilMaterial
        {
            add
            {
                HookHandler._beforeGetStencilMaterial += value;
                HookHandler.HookGetStencilMaterial();
            }
            remove => HookHandler._beforeGetStencilMaterial -= value;
        }

        public static event Delegates.ReleaseStencilMaterial_BeforeArgs ReleaseStencilMaterial
        {
            add
            {
                HookHandler._beforeReleaseStencilMaterial += value;
                HookHandler.HookReleaseStencilMaterial();
            }
            remove => HookHandler._beforeReleaseStencilMaterial -= value;
        }

        public static event Delegates.GetBaseMaterial_BeforeArgs GetBaseMaterial
        {
            add
            {
                HookHandler._beforeGetBaseMaterial += value;
                HookHandler.HookGetBaseMaterial();
            }
            remove => HookHandler._beforeGetBaseMaterial -= value;
        }

        public static event Delegates.SetStencil_BeforeArgs SetStencil
        {
            add
            {
                HookHandler._beforeSetStencil += value;
                HookHandler.HookSetStencil();
            }
            remove => HookHandler._beforeSetStencil -= value;
        }

        public static event Delegates.AddMaskingMaterial_BeforeArgs AddMaskingMaterial
        {
            add
            {
                HookHandler._beforeAddMaskingMaterial += value;
                HookHandler.HookAddMaskingMaterial();
            }
            remove => HookHandler._beforeAddMaskingMaterial -= value;
        }

        public static event Delegates.RemoveStencilMaterial_BeforeArgs RemoveStencilMaterial
        {
            add
            {
                HookHandler._beforeRemoveStencilMaterial += value;
                HookHandler.HookRemoveStencilMaterial();
            }
            remove => HookHandler._beforeRemoveStencilMaterial -= value;
        }

        public static event Delegates.ReleaseBaseMaterial_BeforeArgs ReleaseBaseMaterial
        {
            add
            {
                HookHandler._beforeReleaseBaseMaterial += value;
                HookHandler.HookReleaseBaseMaterial();
            }
            remove => HookHandler._beforeReleaseBaseMaterial -= value;
        }

        public static event Delegates.ClearMaterials_BeforeArgs ClearMaterials
        {
            add
            {
                HookHandler._beforeClearMaterials += value;
                HookHandler.HookClearMaterials();
            }
            remove => HookHandler._beforeClearMaterials -= value;
        }

        public static event Delegates.GetStencilID_BeforeArgs GetStencilID
        {
            add
            {
                HookHandler._beforeGetStencilID += value;
                HookHandler.HookGetStencilID();
            }
            remove => HookHandler._beforeGetStencilID -= value;
        }

        public static event Delegates.GetFallbackMaterial_BeforeArgs GetFallbackMaterial
        {
            add
            {
                HookHandler._beforeGetFallbackMaterial += value;
                HookHandler.HookGetFallbackMaterial();
            }
            remove => HookHandler._beforeGetFallbackMaterial -= value;
        }

        public static event Delegates.AddFallbackMaterialReference_BeforeArgs AddFallbackMaterialReference
        {
            add
            {
                HookHandler._beforeAddFallbackMaterialReference += value;
                HookHandler.HookAddFallbackMaterialReference();
            }
            remove => HookHandler._beforeAddFallbackMaterialReference -= value;
        }

        public static event Delegates.RemoveFallbackMaterialReference_BeforeArgs RemoveFallbackMaterialReference
        {
            add
            {
                HookHandler._beforeRemoveFallbackMaterialReference += value;
                HookHandler.HookRemoveFallbackMaterialReference();
            }
            remove => HookHandler._beforeRemoveFallbackMaterialReference -= value;
        }

        public static event Delegates.CleanupFallbackMaterials_BeforeArgs CleanupFallbackMaterials
        {
            add
            {
                HookHandler._beforeCleanupFallbackMaterials += value;
                HookHandler.HookCleanupFallbackMaterials();
            }
            remove => HookHandler._beforeCleanupFallbackMaterials -= value;
        }

        public static event Delegates.ReleaseFallbackMaterial_BeforeArgs ReleaseFallbackMaterial
        {
            add
            {
                HookHandler._beforeReleaseFallbackMaterial += value;
                HookHandler.HookReleaseFallbackMaterial();
            }
            remove => HookHandler._beforeReleaseFallbackMaterial -= value;
        }

        public static event Delegates.CopyMaterialPresetProperties_BeforeArgs CopyMaterialPresetProperties
        {
            add
            {
                HookHandler._beforeCopyMaterialPresetProperties += value;
                HookHandler.HookCopyMaterialPresetProperties();
            }
            remove => HookHandler._beforeCopyMaterialPresetProperties -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.GetStencilMaterial_AfterArgs GetStencilMaterial
        {
            add
            {
                HookHandler._afterGetStencilMaterial += value;
                HookHandler.HookGetStencilMaterial();
            }
            remove => HookHandler._afterGetStencilMaterial -= value;
        }

        public static event Delegates.ReleaseStencilMaterial_AfterArgs ReleaseStencilMaterial
        {
            add
            {
                HookHandler._afterReleaseStencilMaterial += value;
                HookHandler.HookReleaseStencilMaterial();
            }
            remove => HookHandler._afterReleaseStencilMaterial -= value;
        }

        public static event Delegates.GetBaseMaterial_AfterArgs GetBaseMaterial
        {
            add
            {
                HookHandler._afterGetBaseMaterial += value;
                HookHandler.HookGetBaseMaterial();
            }
            remove => HookHandler._afterGetBaseMaterial -= value;
        }

        public static event Delegates.SetStencil_AfterArgs SetStencil
        {
            add
            {
                HookHandler._afterSetStencil += value;
                HookHandler.HookSetStencil();
            }
            remove => HookHandler._afterSetStencil -= value;
        }

        public static event Delegates.AddMaskingMaterial_AfterArgs AddMaskingMaterial
        {
            add
            {
                HookHandler._afterAddMaskingMaterial += value;
                HookHandler.HookAddMaskingMaterial();
            }
            remove => HookHandler._afterAddMaskingMaterial -= value;
        }

        public static event Delegates.RemoveStencilMaterial_AfterArgs RemoveStencilMaterial
        {
            add
            {
                HookHandler._afterRemoveStencilMaterial += value;
                HookHandler.HookRemoveStencilMaterial();
            }
            remove => HookHandler._afterRemoveStencilMaterial -= value;
        }

        public static event Delegates.ReleaseBaseMaterial_AfterArgs ReleaseBaseMaterial
        {
            add
            {
                HookHandler._afterReleaseBaseMaterial += value;
                HookHandler.HookReleaseBaseMaterial();
            }
            remove => HookHandler._afterReleaseBaseMaterial -= value;
        }

        public static event Delegates.ClearMaterials_AfterArgs ClearMaterials
        {
            add
            {
                HookHandler._afterClearMaterials += value;
                HookHandler.HookClearMaterials();
            }
            remove => HookHandler._afterClearMaterials -= value;
        }

        public static event Delegates.GetStencilID_AfterArgs GetStencilID
        {
            add
            {
                HookHandler._afterGetStencilID += value;
                HookHandler.HookGetStencilID();
            }
            remove => HookHandler._afterGetStencilID -= value;
        }

        public static event Delegates.GetFallbackMaterial_AfterArgs GetFallbackMaterial
        {
            add
            {
                HookHandler._afterGetFallbackMaterial += value;
                HookHandler.HookGetFallbackMaterial();
            }
            remove => HookHandler._afterGetFallbackMaterial -= value;
        }

        public static event Delegates.AddFallbackMaterialReference_AfterArgs AddFallbackMaterialReference
        {
            add
            {
                HookHandler._afterAddFallbackMaterialReference += value;
                HookHandler.HookAddFallbackMaterialReference();
            }
            remove => HookHandler._afterAddFallbackMaterialReference -= value;
        }

        public static event Delegates.RemoveFallbackMaterialReference_AfterArgs RemoveFallbackMaterialReference
        {
            add
            {
                HookHandler._afterRemoveFallbackMaterialReference += value;
                HookHandler.HookRemoveFallbackMaterialReference();
            }
            remove => HookHandler._afterRemoveFallbackMaterialReference -= value;
        }

        public static event Delegates.CleanupFallbackMaterials_AfterArgs CleanupFallbackMaterials
        {
            add
            {
                HookHandler._afterCleanupFallbackMaterials += value;
                HookHandler.HookCleanupFallbackMaterials();
            }
            remove => HookHandler._afterCleanupFallbackMaterials -= value;
        }

        public static event Delegates.ReleaseFallbackMaterial_AfterArgs ReleaseFallbackMaterial
        {
            add
            {
                HookHandler._afterReleaseFallbackMaterial += value;
                HookHandler.HookReleaseFallbackMaterial();
            }
            remove => HookHandler._afterReleaseFallbackMaterial -= value;
        }

        public static event Delegates.CopyMaterialPresetProperties_AfterArgs CopyMaterialPresetProperties
        {
            add
            {
                HookHandler._afterCopyMaterialPresetProperties += value;
                HookHandler.HookCopyMaterialPresetProperties();
            }
            remove => HookHandler._afterCopyMaterialPresetProperties -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.GetStencilMaterial_WithArgs GetStencilMaterial
        {
            add => HookEndpointManager.Add<Delegates.GetStencilMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "GetStencilMaterial", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetStencilMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "GetStencilMaterial", false), value);
        }

        public static event Delegates.ReleaseStencilMaterial_WithArgs ReleaseStencilMaterial
        {
            add => HookEndpointManager.Add<Delegates.ReleaseStencilMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "ReleaseStencilMaterial", false), value);
            remove => HookEndpointManager.Remove<Delegates.ReleaseStencilMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "ReleaseStencilMaterial", false), value);
        }

        public static event Delegates.GetBaseMaterial_WithArgs GetBaseMaterial
        {
            add => HookEndpointManager.Add<Delegates.GetBaseMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "GetBaseMaterial", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetBaseMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "GetBaseMaterial", false), value);
        }

        public static event Delegates.SetStencil_WithArgs SetStencil
        {
            add => HookEndpointManager.Add<Delegates.SetStencil_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "SetStencil", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetStencil_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "SetStencil", false), value);
        }

        public static event Delegates.AddMaskingMaterial_WithArgs AddMaskingMaterial
        {
            add => HookEndpointManager.Add<Delegates.AddMaskingMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "AddMaskingMaterial", false), value);
            remove => HookEndpointManager.Remove<Delegates.AddMaskingMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "AddMaskingMaterial", false), value);
        }

        public static event Delegates.RemoveStencilMaterial_WithArgs RemoveStencilMaterial
        {
            add => HookEndpointManager.Add<Delegates.RemoveStencilMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "RemoveStencilMaterial", false), value);
            remove => HookEndpointManager.Remove<Delegates.RemoveStencilMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "RemoveStencilMaterial", false), value);
        }

        public static event Delegates.ReleaseBaseMaterial_WithArgs ReleaseBaseMaterial
        {
            add => HookEndpointManager.Add<Delegates.ReleaseBaseMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "ReleaseBaseMaterial", false), value);
            remove => HookEndpointManager.Remove<Delegates.ReleaseBaseMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "ReleaseBaseMaterial", false), value);
        }

        public static event Delegates.ClearMaterials_WithArgs ClearMaterials
        {
            add => HookEndpointManager.Add<Delegates.ClearMaterials_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "ClearMaterials", false), value);
            remove => HookEndpointManager.Remove<Delegates.ClearMaterials_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "ClearMaterials", false), value);
        }

        public static event Delegates.GetStencilID_WithArgs GetStencilID
        {
            add => HookEndpointManager.Add<Delegates.GetStencilID_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "GetStencilID", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetStencilID_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "GetStencilID", false), value);
        }

        public static event Delegates.GetFallbackMaterial_WithArgs GetFallbackMaterial
        {
            add => HookEndpointManager.Add<Delegates.GetFallbackMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "GetFallbackMaterial", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetFallbackMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "GetFallbackMaterial", false), value);
        }

        public static event Delegates.AddFallbackMaterialReference_WithArgs AddFallbackMaterialReference
        {
            add => HookEndpointManager.Add<Delegates.AddFallbackMaterialReference_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "AddFallbackMaterialReference", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.AddFallbackMaterialReference_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "AddFallbackMaterialReference", false),
                value);
        }

        public static event Delegates.RemoveFallbackMaterialReference_WithArgs RemoveFallbackMaterialReference
        {
            add => HookEndpointManager.Add<Delegates.RemoveFallbackMaterialReference_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "RemoveFallbackMaterialReference", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.RemoveFallbackMaterialReference_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "RemoveFallbackMaterialReference", false),
                value);
        }

        public static event Delegates.CleanupFallbackMaterials_WithArgs CleanupFallbackMaterials
        {
            add => HookEndpointManager.Add<Delegates.CleanupFallbackMaterials_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "CleanupFallbackMaterials", false), value);
            remove => HookEndpointManager.Remove<Delegates.CleanupFallbackMaterials_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "CleanupFallbackMaterials", false), value);
        }

        public static event Delegates.ReleaseFallbackMaterial_WithArgs ReleaseFallbackMaterial
        {
            add => HookEndpointManager.Add<Delegates.ReleaseFallbackMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "ReleaseFallbackMaterial", false), value);
            remove => HookEndpointManager.Remove<Delegates.ReleaseFallbackMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "ReleaseFallbackMaterial", false), value);
        }

        public static event Delegates.CopyMaterialPresetProperties_WithArgs CopyMaterialPresetProperties
        {
            add => HookEndpointManager.Add<Delegates.CopyMaterialPresetProperties_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "CopyMaterialPresetProperties", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.CopyMaterialPresetProperties_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_MaterialManager), "CopyMaterialPresetProperties", false),
                value);
        }
    }
}