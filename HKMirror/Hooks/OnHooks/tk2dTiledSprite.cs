using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dTiledSprite class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dTiledSprite
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_dimensions()
        {
            if (!HookedList.Contains("get_dimensions"))
            {
                HookedList.Add("get_dimensions");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTiledSprite), "get_dimensions"), get_dimensions);
            }
        }

        internal static event Delegates.get_dimensions_BeforeArgs _beforeget_dimensions;
        internal static event Delegates.get_dimensions_NormalArgs _afterget_dimensions;

        private static Vector2 get_dimensions(Func<tk2dTiledSprite, Vector2> orig, tk2dTiledSprite self)
        {
            Delegates.Params_get_dimensions @params = new()
            {
                self = self
            };
            _beforeget_dimensions?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_dimensions != null) retVal = _afterget_dimensions.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_dimensions()
        {
            if (!HookedList.Contains("set_dimensions"))
            {
                HookedList.Add("set_dimensions");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTiledSprite), "set_dimensions"), set_dimensions);
            }
        }

        internal static event Delegates.set_dimensions_BeforeArgs _beforeset_dimensions;
        internal static event Delegates.set_dimensions_NormalArgs _afterset_dimensions;

        private static void set_dimensions(Action<tk2dTiledSprite, Vector2> orig, tk2dTiledSprite self, Vector2 value)
        {
            Delegates.Params_set_dimensions @params = new()
            {
                self = self, value = value
            };
            _beforeset_dimensions?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_dimensions != null) _afterset_dimensions.Invoke(@params);
        }

        internal static void Hookget_CreateBoxCollider()
        {
            if (!HookedList.Contains("get_CreateBoxCollider"))
            {
                HookedList.Add("get_CreateBoxCollider");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTiledSprite), "get_CreateBoxCollider"),
                    get_CreateBoxCollider);
            }
        }

        internal static event Delegates.get_CreateBoxCollider_BeforeArgs _beforeget_CreateBoxCollider;
        internal static event Delegates.get_CreateBoxCollider_NormalArgs _afterget_CreateBoxCollider;

        private static bool get_CreateBoxCollider(Func<tk2dTiledSprite, bool> orig, tk2dTiledSprite self)
        {
            Delegates.Params_get_CreateBoxCollider @params = new()
            {
                self = self
            };
            _beforeget_CreateBoxCollider?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_CreateBoxCollider != null) retVal = _afterget_CreateBoxCollider.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_CreateBoxCollider()
        {
            if (!HookedList.Contains("set_CreateBoxCollider"))
            {
                HookedList.Add("set_CreateBoxCollider");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTiledSprite), "set_CreateBoxCollider"),
                    set_CreateBoxCollider);
            }
        }

        internal static event Delegates.set_CreateBoxCollider_BeforeArgs _beforeset_CreateBoxCollider;
        internal static event Delegates.set_CreateBoxCollider_NormalArgs _afterset_CreateBoxCollider;

        private static void set_CreateBoxCollider(Action<tk2dTiledSprite, bool> orig, tk2dTiledSprite self, bool value)
        {
            Delegates.Params_set_CreateBoxCollider @params = new()
            {
                self = self, value = value
            };
            _beforeset_CreateBoxCollider?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_CreateBoxCollider != null) _afterset_CreateBoxCollider.Invoke(@params);
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.tk2dTiledSprite.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.tk2dTiledSprite.orig_Awake orig, tk2dTiledSprite self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.tk2dTiledSprite.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_NormalArgs _afterOnDestroy;

        private static void OnDestroy(On.tk2dTiledSprite.orig_OnDestroy orig, tk2dTiledSprite self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            _beforeOnDestroy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null) _afterOnDestroy.Invoke(@params);
        }

        internal static void HookSetColors()
        {
            if (!HookedList.Contains("SetColors"))
            {
                HookedList.Add("SetColors");
                On.tk2dTiledSprite.SetColors += SetColors;
            }
        }

        internal static event Delegates.SetColors_BeforeArgs _beforeSetColors;
        internal static event Delegates.SetColors_NormalArgs _afterSetColors;

        private static void SetColors(On.tk2dTiledSprite.orig_SetColors orig, tk2dTiledSprite self, Color32[] dest)
        {
            Delegates.Params_SetColors @params = new()
            {
                self = self, dest = dest
            };
            _beforeSetColors?.Invoke(@params);
            self = @params.self;
            dest = @params.dest;
            orig(self, dest);
            if (_afterSetColors != null) _afterSetColors.Invoke(@params);
        }

        internal static void HookBuild()
        {
            if (!HookedList.Contains("Build"))
            {
                HookedList.Add("Build");
                On.tk2dTiledSprite.Build += Build;
            }
        }

        internal static event Delegates.Build_BeforeArgs _beforeBuild;
        internal static event Delegates.Build_NormalArgs _afterBuild;

        private static void Build(On.tk2dTiledSprite.orig_Build orig, tk2dTiledSprite self)
        {
            Delegates.Params_Build @params = new()
            {
                self = self
            };
            _beforeBuild?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBuild != null) _afterBuild.Invoke(@params);
        }

        internal static void HookUpdateGeometry()
        {
            if (!HookedList.Contains("UpdateGeometry"))
            {
                HookedList.Add("UpdateGeometry");
                On.tk2dTiledSprite.UpdateGeometry += UpdateGeometry;
            }
        }

        internal static event Delegates.UpdateGeometry_BeforeArgs _beforeUpdateGeometry;
        internal static event Delegates.UpdateGeometry_NormalArgs _afterUpdateGeometry;

        private static void UpdateGeometry(On.tk2dTiledSprite.orig_UpdateGeometry orig, tk2dTiledSprite self)
        {
            Delegates.Params_UpdateGeometry @params = new()
            {
                self = self
            };
            _beforeUpdateGeometry?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateGeometry != null) _afterUpdateGeometry.Invoke(@params);
        }

        internal static void HookUpdateColors()
        {
            if (!HookedList.Contains("UpdateColors"))
            {
                HookedList.Add("UpdateColors");
                On.tk2dTiledSprite.UpdateColors += UpdateColors;
            }
        }

        internal static event Delegates.UpdateColors_BeforeArgs _beforeUpdateColors;
        internal static event Delegates.UpdateColors_NormalArgs _afterUpdateColors;

        private static void UpdateColors(On.tk2dTiledSprite.orig_UpdateColors orig, tk2dTiledSprite self)
        {
            Delegates.Params_UpdateColors @params = new()
            {
                self = self
            };
            _beforeUpdateColors?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateColors != null) _afterUpdateColors.Invoke(@params);
        }

        internal static void HookUpdateVertices()
        {
            if (!HookedList.Contains("UpdateVertices"))
            {
                HookedList.Add("UpdateVertices");
                On.tk2dTiledSprite.UpdateVertices += UpdateVertices;
            }
        }

        internal static event Delegates.UpdateVertices_BeforeArgs _beforeUpdateVertices;
        internal static event Delegates.UpdateVertices_NormalArgs _afterUpdateVertices;

        private static void UpdateVertices(On.tk2dTiledSprite.orig_UpdateVertices orig, tk2dTiledSprite self)
        {
            Delegates.Params_UpdateVertices @params = new()
            {
                self = self
            };
            _beforeUpdateVertices?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateVertices != null) _afterUpdateVertices.Invoke(@params);
        }

        internal static void HookUpdateColorsImpl()
        {
            if (!HookedList.Contains("UpdateColorsImpl"))
            {
                HookedList.Add("UpdateColorsImpl");
                On.tk2dTiledSprite.UpdateColorsImpl += UpdateColorsImpl;
            }
        }

        internal static event Delegates.UpdateColorsImpl_BeforeArgs _beforeUpdateColorsImpl;
        internal static event Delegates.UpdateColorsImpl_NormalArgs _afterUpdateColorsImpl;

        private static void UpdateColorsImpl(On.tk2dTiledSprite.orig_UpdateColorsImpl orig, tk2dTiledSprite self)
        {
            Delegates.Params_UpdateColorsImpl @params = new()
            {
                self = self
            };
            _beforeUpdateColorsImpl?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateColorsImpl != null) _afterUpdateColorsImpl.Invoke(@params);
        }

        internal static void HookUpdateGeometryImpl()
        {
            if (!HookedList.Contains("UpdateGeometryImpl"))
            {
                HookedList.Add("UpdateGeometryImpl");
                On.tk2dTiledSprite.UpdateGeometryImpl += UpdateGeometryImpl;
            }
        }

        internal static event Delegates.UpdateGeometryImpl_BeforeArgs _beforeUpdateGeometryImpl;
        internal static event Delegates.UpdateGeometryImpl_NormalArgs _afterUpdateGeometryImpl;

        private static void UpdateGeometryImpl(On.tk2dTiledSprite.orig_UpdateGeometryImpl orig, tk2dTiledSprite self)
        {
            Delegates.Params_UpdateGeometryImpl @params = new()
            {
                self = self
            };
            _beforeUpdateGeometryImpl?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateGeometryImpl != null) _afterUpdateGeometryImpl.Invoke(@params);
        }

        internal static void HookUpdateCollider()
        {
            if (!HookedList.Contains("UpdateCollider"))
            {
                HookedList.Add("UpdateCollider");
                On.tk2dTiledSprite.UpdateCollider += UpdateCollider;
            }
        }

        internal static event Delegates.UpdateCollider_BeforeArgs _beforeUpdateCollider;
        internal static event Delegates.UpdateCollider_NormalArgs _afterUpdateCollider;

        private static void UpdateCollider(On.tk2dTiledSprite.orig_UpdateCollider orig, tk2dTiledSprite self)
        {
            Delegates.Params_UpdateCollider @params = new()
            {
                self = self
            };
            _beforeUpdateCollider?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateCollider != null) _afterUpdateCollider.Invoke(@params);
        }

        internal static void HookCreateCollider()
        {
            if (!HookedList.Contains("CreateCollider"))
            {
                HookedList.Add("CreateCollider");
                On.tk2dTiledSprite.CreateCollider += CreateCollider;
            }
        }

        internal static event Delegates.CreateCollider_BeforeArgs _beforeCreateCollider;
        internal static event Delegates.CreateCollider_NormalArgs _afterCreateCollider;

        private static void CreateCollider(On.tk2dTiledSprite.orig_CreateCollider orig, tk2dTiledSprite self)
        {
            Delegates.Params_CreateCollider @params = new()
            {
                self = self
            };
            _beforeCreateCollider?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCreateCollider != null) _afterCreateCollider.Invoke(@params);
        }

        internal static void HookUpdateMaterial()
        {
            if (!HookedList.Contains("UpdateMaterial"))
            {
                HookedList.Add("UpdateMaterial");
                On.tk2dTiledSprite.UpdateMaterial += UpdateMaterial;
            }
        }

        internal static event Delegates.UpdateMaterial_BeforeArgs _beforeUpdateMaterial;
        internal static event Delegates.UpdateMaterial_NormalArgs _afterUpdateMaterial;

        private static void UpdateMaterial(On.tk2dTiledSprite.orig_UpdateMaterial orig, tk2dTiledSprite self)
        {
            Delegates.Params_UpdateMaterial @params = new()
            {
                self = self
            };
            _beforeUpdateMaterial?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateMaterial != null) _afterUpdateMaterial.Invoke(@params);
        }

        internal static void HookGetCurrentVertexCount()
        {
            if (!HookedList.Contains("GetCurrentVertexCount"))
            {
                HookedList.Add("GetCurrentVertexCount");
                On.tk2dTiledSprite.GetCurrentVertexCount += GetCurrentVertexCount;
            }
        }

        internal static event Delegates.GetCurrentVertexCount_BeforeArgs _beforeGetCurrentVertexCount;
        internal static event Delegates.GetCurrentVertexCount_NormalArgs _afterGetCurrentVertexCount;

        private static int GetCurrentVertexCount(On.tk2dTiledSprite.orig_GetCurrentVertexCount orig,
            tk2dTiledSprite self)
        {
            Delegates.Params_GetCurrentVertexCount @params = new()
            {
                self = self
            };
            _beforeGetCurrentVertexCount?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetCurrentVertexCount != null) retVal = _afterGetCurrentVertexCount.Invoke(@params);
            return retVal;
        }

        internal static void HookReshapeBounds()
        {
            if (!HookedList.Contains("ReshapeBounds"))
            {
                HookedList.Add("ReshapeBounds");
                On.tk2dTiledSprite.ReshapeBounds += ReshapeBounds;
            }
        }

        internal static event Delegates.ReshapeBounds_BeforeArgs _beforeReshapeBounds;
        internal static event Delegates.ReshapeBounds_NormalArgs _afterReshapeBounds;

        private static void ReshapeBounds(On.tk2dTiledSprite.orig_ReshapeBounds orig, tk2dTiledSprite self,
            Vector3 dMin, Vector3 dMax)
        {
            Delegates.Params_ReshapeBounds @params = new()
            {
                self = self, dMin = dMin, dMax = dMax
            };
            _beforeReshapeBounds?.Invoke(@params);
            self = @params.self;
            dMin = @params.dMin;
            dMax = @params.dMax;
            orig(self, dMin, dMax);
            if (_afterReshapeBounds != null) _afterReshapeBounds.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void Build_BeforeArgs(Params_Build args);

        public delegate void Build_NormalArgs(Params_Build args);

        public delegate void CreateCollider_BeforeArgs(Params_CreateCollider args);

        public delegate void CreateCollider_NormalArgs(Params_CreateCollider args);

        public delegate void get_CreateBoxCollider_BeforeArgs(Params_get_CreateBoxCollider args);

        public delegate bool get_CreateBoxCollider_NormalArgs(Params_get_CreateBoxCollider args);

        public delegate void get_dimensions_BeforeArgs(Params_get_dimensions args);

        public delegate Vector2 get_dimensions_NormalArgs(Params_get_dimensions args);

        public delegate void GetCurrentVertexCount_BeforeArgs(Params_GetCurrentVertexCount args);

        public delegate int GetCurrentVertexCount_NormalArgs(Params_GetCurrentVertexCount args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_NormalArgs(Params_OnDestroy args);

        public delegate void ReshapeBounds_BeforeArgs(Params_ReshapeBounds args);

        public delegate void ReshapeBounds_NormalArgs(Params_ReshapeBounds args);

        public delegate void set_CreateBoxCollider_BeforeArgs(Params_set_CreateBoxCollider args);

        public delegate void set_CreateBoxCollider_NormalArgs(Params_set_CreateBoxCollider args);

        public delegate void set_dimensions_BeforeArgs(Params_set_dimensions args);

        public delegate void set_dimensions_NormalArgs(Params_set_dimensions args);

        public delegate void SetColors_BeforeArgs(Params_SetColors args);

        public delegate void SetColors_NormalArgs(Params_SetColors args);

        public delegate void UpdateCollider_BeforeArgs(Params_UpdateCollider args);

        public delegate void UpdateCollider_NormalArgs(Params_UpdateCollider args);

        public delegate void UpdateColors_BeforeArgs(Params_UpdateColors args);

        public delegate void UpdateColors_NormalArgs(Params_UpdateColors args);

        public delegate void UpdateColorsImpl_BeforeArgs(Params_UpdateColorsImpl args);

        public delegate void UpdateColorsImpl_NormalArgs(Params_UpdateColorsImpl args);

        public delegate void UpdateGeometry_BeforeArgs(Params_UpdateGeometry args);

        public delegate void UpdateGeometry_NormalArgs(Params_UpdateGeometry args);

        public delegate void UpdateGeometryImpl_BeforeArgs(Params_UpdateGeometryImpl args);

        public delegate void UpdateGeometryImpl_NormalArgs(Params_UpdateGeometryImpl args);

        public delegate void UpdateMaterial_BeforeArgs(Params_UpdateMaterial args);

        public delegate void UpdateMaterial_NormalArgs(Params_UpdateMaterial args);

        public delegate void UpdateVertices_BeforeArgs(Params_UpdateVertices args);

        public delegate void UpdateVertices_NormalArgs(Params_UpdateVertices args);

        public sealed class Params_get_dimensions
        {
            public tk2dTiledSprite self;
        }

        public sealed class Params_set_dimensions
        {
            public tk2dTiledSprite self;
            public Vector2 value;
        }

        public sealed class Params_get_CreateBoxCollider
        {
            public tk2dTiledSprite self;
        }

        public sealed class Params_set_CreateBoxCollider
        {
            public tk2dTiledSprite self;
            public bool value;
        }

        public sealed class Params_Awake
        {
            public tk2dTiledSprite self;
        }

        public sealed class Params_OnDestroy
        {
            public tk2dTiledSprite self;
        }

        public sealed class Params_SetColors
        {
            public Color32[] dest;
            public tk2dTiledSprite self;
        }

        public sealed class Params_Build
        {
            public tk2dTiledSprite self;
        }

        public sealed class Params_UpdateGeometry
        {
            public tk2dTiledSprite self;
        }

        public sealed class Params_UpdateColors
        {
            public tk2dTiledSprite self;
        }

        public sealed class Params_UpdateVertices
        {
            public tk2dTiledSprite self;
        }

        public sealed class Params_UpdateColorsImpl
        {
            public tk2dTiledSprite self;
        }

        public sealed class Params_UpdateGeometryImpl
        {
            public tk2dTiledSprite self;
        }

        public sealed class Params_UpdateCollider
        {
            public tk2dTiledSprite self;
        }

        public sealed class Params_CreateCollider
        {
            public tk2dTiledSprite self;
        }

        public sealed class Params_UpdateMaterial
        {
            public tk2dTiledSprite self;
        }

        public sealed class Params_GetCurrentVertexCount
        {
            public tk2dTiledSprite self;
        }

        public sealed class Params_ReshapeBounds
        {
            public Vector3 dMax;
            public Vector3 dMin;
            public tk2dTiledSprite self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_dimensions_BeforeArgs get_dimensions
        {
            add
            {
                HookHandler._beforeget_dimensions += value;
                HookHandler.Hookget_dimensions();
            }
            remove => HookHandler._beforeget_dimensions -= value;
        }

        public static event Delegates.set_dimensions_BeforeArgs set_dimensions
        {
            add
            {
                HookHandler._beforeset_dimensions += value;
                HookHandler.Hookset_dimensions();
            }
            remove => HookHandler._beforeset_dimensions -= value;
        }

        public static event Delegates.get_CreateBoxCollider_BeforeArgs get_CreateBoxCollider
        {
            add
            {
                HookHandler._beforeget_CreateBoxCollider += value;
                HookHandler.Hookget_CreateBoxCollider();
            }
            remove => HookHandler._beforeget_CreateBoxCollider -= value;
        }

        public static event Delegates.set_CreateBoxCollider_BeforeArgs set_CreateBoxCollider
        {
            add
            {
                HookHandler._beforeset_CreateBoxCollider += value;
                HookHandler.Hookset_CreateBoxCollider();
            }
            remove => HookHandler._beforeset_CreateBoxCollider -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.SetColors_BeforeArgs SetColors
        {
            add
            {
                HookHandler._beforeSetColors += value;
                HookHandler.HookSetColors();
            }
            remove => HookHandler._beforeSetColors -= value;
        }

        public static event Delegates.Build_BeforeArgs Build
        {
            add
            {
                HookHandler._beforeBuild += value;
                HookHandler.HookBuild();
            }
            remove => HookHandler._beforeBuild -= value;
        }

        public static event Delegates.UpdateGeometry_BeforeArgs UpdateGeometry
        {
            add
            {
                HookHandler._beforeUpdateGeometry += value;
                HookHandler.HookUpdateGeometry();
            }
            remove => HookHandler._beforeUpdateGeometry -= value;
        }

        public static event Delegates.UpdateColors_BeforeArgs UpdateColors
        {
            add
            {
                HookHandler._beforeUpdateColors += value;
                HookHandler.HookUpdateColors();
            }
            remove => HookHandler._beforeUpdateColors -= value;
        }

        public static event Delegates.UpdateVertices_BeforeArgs UpdateVertices
        {
            add
            {
                HookHandler._beforeUpdateVertices += value;
                HookHandler.HookUpdateVertices();
            }
            remove => HookHandler._beforeUpdateVertices -= value;
        }

        public static event Delegates.UpdateColorsImpl_BeforeArgs UpdateColorsImpl
        {
            add
            {
                HookHandler._beforeUpdateColorsImpl += value;
                HookHandler.HookUpdateColorsImpl();
            }
            remove => HookHandler._beforeUpdateColorsImpl -= value;
        }

        public static event Delegates.UpdateGeometryImpl_BeforeArgs UpdateGeometryImpl
        {
            add
            {
                HookHandler._beforeUpdateGeometryImpl += value;
                HookHandler.HookUpdateGeometryImpl();
            }
            remove => HookHandler._beforeUpdateGeometryImpl -= value;
        }

        public static event Delegates.UpdateCollider_BeforeArgs UpdateCollider
        {
            add
            {
                HookHandler._beforeUpdateCollider += value;
                HookHandler.HookUpdateCollider();
            }
            remove => HookHandler._beforeUpdateCollider -= value;
        }

        public static event Delegates.CreateCollider_BeforeArgs CreateCollider
        {
            add
            {
                HookHandler._beforeCreateCollider += value;
                HookHandler.HookCreateCollider();
            }
            remove => HookHandler._beforeCreateCollider -= value;
        }

        public static event Delegates.UpdateMaterial_BeforeArgs UpdateMaterial
        {
            add
            {
                HookHandler._beforeUpdateMaterial += value;
                HookHandler.HookUpdateMaterial();
            }
            remove => HookHandler._beforeUpdateMaterial -= value;
        }

        public static event Delegates.GetCurrentVertexCount_BeforeArgs GetCurrentVertexCount
        {
            add
            {
                HookHandler._beforeGetCurrentVertexCount += value;
                HookHandler.HookGetCurrentVertexCount();
            }
            remove => HookHandler._beforeGetCurrentVertexCount -= value;
        }

        public static event Delegates.ReshapeBounds_BeforeArgs ReshapeBounds
        {
            add
            {
                HookHandler._beforeReshapeBounds += value;
                HookHandler.HookReshapeBounds();
            }
            remove => HookHandler._beforeReshapeBounds -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_dimensions_NormalArgs get_dimensions
        {
            add
            {
                HookHandler._afterget_dimensions += value;
                HookHandler.Hookget_dimensions();
            }
            remove => HookHandler._afterget_dimensions -= value;
        }

        public static event Delegates.set_dimensions_NormalArgs set_dimensions
        {
            add
            {
                HookHandler._afterset_dimensions += value;
                HookHandler.Hookset_dimensions();
            }
            remove => HookHandler._afterset_dimensions -= value;
        }

        public static event Delegates.get_CreateBoxCollider_NormalArgs get_CreateBoxCollider
        {
            add
            {
                HookHandler._afterget_CreateBoxCollider += value;
                HookHandler.Hookget_CreateBoxCollider();
            }
            remove => HookHandler._afterget_CreateBoxCollider -= value;
        }

        public static event Delegates.set_CreateBoxCollider_NormalArgs set_CreateBoxCollider
        {
            add
            {
                HookHandler._afterset_CreateBoxCollider += value;
                HookHandler.Hookset_CreateBoxCollider();
            }
            remove => HookHandler._afterset_CreateBoxCollider -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.SetColors_NormalArgs SetColors
        {
            add
            {
                HookHandler._afterSetColors += value;
                HookHandler.HookSetColors();
            }
            remove => HookHandler._afterSetColors -= value;
        }

        public static event Delegates.Build_NormalArgs Build
        {
            add
            {
                HookHandler._afterBuild += value;
                HookHandler.HookBuild();
            }
            remove => HookHandler._afterBuild -= value;
        }

        public static event Delegates.UpdateGeometry_NormalArgs UpdateGeometry
        {
            add
            {
                HookHandler._afterUpdateGeometry += value;
                HookHandler.HookUpdateGeometry();
            }
            remove => HookHandler._afterUpdateGeometry -= value;
        }

        public static event Delegates.UpdateColors_NormalArgs UpdateColors
        {
            add
            {
                HookHandler._afterUpdateColors += value;
                HookHandler.HookUpdateColors();
            }
            remove => HookHandler._afterUpdateColors -= value;
        }

        public static event Delegates.UpdateVertices_NormalArgs UpdateVertices
        {
            add
            {
                HookHandler._afterUpdateVertices += value;
                HookHandler.HookUpdateVertices();
            }
            remove => HookHandler._afterUpdateVertices -= value;
        }

        public static event Delegates.UpdateColorsImpl_NormalArgs UpdateColorsImpl
        {
            add
            {
                HookHandler._afterUpdateColorsImpl += value;
                HookHandler.HookUpdateColorsImpl();
            }
            remove => HookHandler._afterUpdateColorsImpl -= value;
        }

        public static event Delegates.UpdateGeometryImpl_NormalArgs UpdateGeometryImpl
        {
            add
            {
                HookHandler._afterUpdateGeometryImpl += value;
                HookHandler.HookUpdateGeometryImpl();
            }
            remove => HookHandler._afterUpdateGeometryImpl -= value;
        }

        public static event Delegates.UpdateCollider_NormalArgs UpdateCollider
        {
            add
            {
                HookHandler._afterUpdateCollider += value;
                HookHandler.HookUpdateCollider();
            }
            remove => HookHandler._afterUpdateCollider -= value;
        }

        public static event Delegates.CreateCollider_NormalArgs CreateCollider
        {
            add
            {
                HookHandler._afterCreateCollider += value;
                HookHandler.HookCreateCollider();
            }
            remove => HookHandler._afterCreateCollider -= value;
        }

        public static event Delegates.UpdateMaterial_NormalArgs UpdateMaterial
        {
            add
            {
                HookHandler._afterUpdateMaterial += value;
                HookHandler.HookUpdateMaterial();
            }
            remove => HookHandler._afterUpdateMaterial -= value;
        }

        public static event Delegates.GetCurrentVertexCount_NormalArgs GetCurrentVertexCount
        {
            add
            {
                HookHandler._afterGetCurrentVertexCount += value;
                HookHandler.HookGetCurrentVertexCount();
            }
            remove => HookHandler._afterGetCurrentVertexCount -= value;
        }

        public static event Delegates.ReshapeBounds_NormalArgs ReshapeBounds
        {
            add
            {
                HookHandler._afterReshapeBounds += value;
                HookHandler.HookReshapeBounds();
            }
            remove => HookHandler._afterReshapeBounds -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_dimensions_NormalArgs get_dimensions
        {
            add => HookEndpointManager.Add<Delegates.get_dimensions_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTiledSprite), "get_dimensions"), value);
            remove => HookEndpointManager.Remove<Delegates.get_dimensions_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTiledSprite), "get_dimensions"), value);
        }

        public static event Delegates.set_dimensions_NormalArgs set_dimensions
        {
            add => HookEndpointManager.Add<Delegates.set_dimensions_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTiledSprite), "set_dimensions"), value);
            remove => HookEndpointManager.Remove<Delegates.set_dimensions_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTiledSprite), "set_dimensions"), value);
        }

        public static event Delegates.get_CreateBoxCollider_NormalArgs get_CreateBoxCollider
        {
            add => HookEndpointManager.Add<Delegates.get_CreateBoxCollider_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTiledSprite), "get_CreateBoxCollider"), value);
            remove => HookEndpointManager.Remove<Delegates.get_CreateBoxCollider_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTiledSprite), "get_CreateBoxCollider"), value);
        }

        public static event Delegates.set_CreateBoxCollider_NormalArgs set_CreateBoxCollider
        {
            add => HookEndpointManager.Add<Delegates.set_CreateBoxCollider_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTiledSprite), "set_CreateBoxCollider"), value);
            remove => HookEndpointManager.Remove<Delegates.set_CreateBoxCollider_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTiledSprite), "set_CreateBoxCollider"), value);
        }

        public static event On.tk2dTiledSprite.hook_Awake Awake
        {
            add => On.tk2dTiledSprite.Awake += value;
            remove => On.tk2dTiledSprite.Awake -= value;
        }

        public static event On.tk2dTiledSprite.hook_OnDestroy OnDestroy
        {
            add => On.tk2dTiledSprite.OnDestroy += value;
            remove => On.tk2dTiledSprite.OnDestroy -= value;
        }

        public static event On.tk2dTiledSprite.hook_SetColors SetColors
        {
            add => On.tk2dTiledSprite.SetColors += value;
            remove => On.tk2dTiledSprite.SetColors -= value;
        }

        public static event On.tk2dTiledSprite.hook_Build Build
        {
            add => On.tk2dTiledSprite.Build += value;
            remove => On.tk2dTiledSprite.Build -= value;
        }

        public static event On.tk2dTiledSprite.hook_UpdateGeometry UpdateGeometry
        {
            add => On.tk2dTiledSprite.UpdateGeometry += value;
            remove => On.tk2dTiledSprite.UpdateGeometry -= value;
        }

        public static event On.tk2dTiledSprite.hook_UpdateColors UpdateColors
        {
            add => On.tk2dTiledSprite.UpdateColors += value;
            remove => On.tk2dTiledSprite.UpdateColors -= value;
        }

        public static event On.tk2dTiledSprite.hook_UpdateVertices UpdateVertices
        {
            add => On.tk2dTiledSprite.UpdateVertices += value;
            remove => On.tk2dTiledSprite.UpdateVertices -= value;
        }

        public static event On.tk2dTiledSprite.hook_UpdateColorsImpl UpdateColorsImpl
        {
            add => On.tk2dTiledSprite.UpdateColorsImpl += value;
            remove => On.tk2dTiledSprite.UpdateColorsImpl -= value;
        }

        public static event On.tk2dTiledSprite.hook_UpdateGeometryImpl UpdateGeometryImpl
        {
            add => On.tk2dTiledSprite.UpdateGeometryImpl += value;
            remove => On.tk2dTiledSprite.UpdateGeometryImpl -= value;
        }

        public static event On.tk2dTiledSprite.hook_UpdateCollider UpdateCollider
        {
            add => On.tk2dTiledSprite.UpdateCollider += value;
            remove => On.tk2dTiledSprite.UpdateCollider -= value;
        }

        public static event On.tk2dTiledSprite.hook_CreateCollider CreateCollider
        {
            add => On.tk2dTiledSprite.CreateCollider += value;
            remove => On.tk2dTiledSprite.CreateCollider -= value;
        }

        public static event On.tk2dTiledSprite.hook_UpdateMaterial UpdateMaterial
        {
            add => On.tk2dTiledSprite.UpdateMaterial += value;
            remove => On.tk2dTiledSprite.UpdateMaterial -= value;
        }

        public static event On.tk2dTiledSprite.hook_GetCurrentVertexCount GetCurrentVertexCount
        {
            add => On.tk2dTiledSprite.GetCurrentVertexCount += value;
            remove => On.tk2dTiledSprite.GetCurrentVertexCount -= value;
        }

        public static event On.tk2dTiledSprite.hook_ReshapeBounds ReshapeBounds
        {
            add => On.tk2dTiledSprite.ReshapeBounds += value;
            remove => On.tk2dTiledSprite.ReshapeBounds -= value;
        }
    }
}