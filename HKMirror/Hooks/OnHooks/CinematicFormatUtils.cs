namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for CinematicFormatUtils class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCinematicFormatUtils
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookGetExtension()
        {
            if (!HookedList.Contains("GetExtension"))
            {
                HookedList.Add("GetExtension");
                On.CinematicFormatUtils.GetExtension += GetExtension;
            }
        }

        internal static event Delegates.GetExtension_BeforeArgs _beforeGetExtension;
        internal static event Delegates.GetExtension_AfterArgs _afterGetExtension;

        private static string GetExtension(On.CinematicFormatUtils.orig_GetExtension orig, CinematicFormats format)
        {
            Delegates.Params_GetExtension @params = new()
            {
                format = format
            };
            if (_beforeGetExtension != null)
                foreach (Delegates.GetExtension_BeforeArgs toInvoke in _beforeGetExtension.GetInvocationList())
                    try
                    {
                        _beforeGetExtension?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            format = @params.format;
            var retVal = orig(format);
            if (_afterGetExtension != null)
                foreach (Delegates.GetExtension_AfterArgs toInvoke in _afterGetExtension.GetInvocationList())
                    try
                    {
                        retVal = _afterGetExtension.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate string GetExtension_AfterArgs(Params_GetExtension args, string ret);

        public delegate void GetExtension_BeforeArgs(Params_GetExtension args);

        public delegate string GetExtension_WithArgs(Func<CinematicFormats, string> orig, CinematicFormats format);

        public sealed class Params_GetExtension
        {
            public CinematicFormats format;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.GetExtension_BeforeArgs GetExtension
        {
            add
            {
                HookHandler._beforeGetExtension += value;
                HookHandler.HookGetExtension();
            }
            remove => HookHandler._beforeGetExtension -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.GetExtension_AfterArgs GetExtension
        {
            add
            {
                HookHandler._afterGetExtension += value;
                HookHandler.HookGetExtension();
            }
            remove => HookHandler._afterGetExtension -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.CinematicFormatUtils.hook_GetExtension GetExtension
        {
            add => On.CinematicFormatUtils.GetExtension += value;
            remove => On.CinematicFormatUtils.GetExtension -= value;
        }
    }
}