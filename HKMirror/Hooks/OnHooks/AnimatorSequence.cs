using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for AnimatorSequence class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnAnimatorSequence
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.AnimatorSequence.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.AnimatorSequence.orig_Awake orig, AnimatorSequence self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.AnimatorSequence.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.AnimatorSequence.orig_Update orig, AnimatorSequence self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookBegin()
        {
            if (!HookedList.Contains("Begin"))
            {
                HookedList.Add("Begin");
                On.AnimatorSequence.Begin += Begin;
            }
        }

        internal static event Delegates.Begin_BeforeArgs _beforeBegin;
        internal static event Delegates.Begin_NormalArgs _afterBegin;

        private static void Begin(On.AnimatorSequence.orig_Begin orig, AnimatorSequence self)
        {
            Delegates.Params_Begin @params = new()
            {
                self = self
            };
            _beforeBegin?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBegin != null) _afterBegin.Invoke(@params);
        }

        internal static void Hookget_IsPlaying()
        {
            if (!HookedList.Contains("get_IsPlaying"))
            {
                HookedList.Add("get_IsPlaying");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(AnimatorSequence), "get_IsPlaying"), get_IsPlaying);
            }
        }

        internal static event Delegates.get_IsPlaying_BeforeArgs _beforeget_IsPlaying;
        internal static event Delegates.get_IsPlaying_NormalArgs _afterget_IsPlaying;

        private static bool get_IsPlaying(Func<AnimatorSequence, bool> orig, AnimatorSequence self)
        {
            Delegates.Params_get_IsPlaying @params = new()
            {
                self = self
            };
            _beforeget_IsPlaying?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsPlaying != null) retVal = _afterget_IsPlaying.Invoke(@params);
            return retVal;
        }

        internal static void HookSkip()
        {
            if (!HookedList.Contains("Skip"))
            {
                HookedList.Add("Skip");
                On.AnimatorSequence.Skip += Skip;
            }
        }

        internal static event Delegates.Skip_BeforeArgs _beforeSkip;
        internal static event Delegates.Skip_NormalArgs _afterSkip;

        private static void Skip(On.AnimatorSequence.orig_Skip orig, AnimatorSequence self)
        {
            Delegates.Params_Skip @params = new()
            {
                self = self
            };
            _beforeSkip?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSkip != null) _afterSkip.Invoke(@params);
        }

        internal static void Hookget_IsSkipped()
        {
            if (!HookedList.Contains("get_IsSkipped"))
            {
                HookedList.Add("get_IsSkipped");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(AnimatorSequence), "get_IsSkipped"), get_IsSkipped);
            }
        }

        internal static event Delegates.get_IsSkipped_BeforeArgs _beforeget_IsSkipped;
        internal static event Delegates.get_IsSkipped_NormalArgs _afterget_IsSkipped;

        private static bool get_IsSkipped(Func<AnimatorSequence, bool> orig, AnimatorSequence self)
        {
            Delegates.Params_get_IsSkipped @params = new()
            {
                self = self
            };
            _beforeget_IsSkipped?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsSkipped != null) retVal = _afterget_IsSkipped.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_FadeByController()
        {
            if (!HookedList.Contains("get_FadeByController"))
            {
                HookedList.Add("get_FadeByController");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(AnimatorSequence), "get_FadeByController"),
                    get_FadeByController);
            }
        }

        internal static event Delegates.get_FadeByController_BeforeArgs _beforeget_FadeByController;
        internal static event Delegates.get_FadeByController_NormalArgs _afterget_FadeByController;

        private static float get_FadeByController(Func<AnimatorSequence, float> orig, AnimatorSequence self)
        {
            Delegates.Params_get_FadeByController @params = new()
            {
                self = self
            };
            _beforeget_FadeByController?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_FadeByController != null) retVal = _afterget_FadeByController.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_FadeByController()
        {
            if (!HookedList.Contains("set_FadeByController"))
            {
                HookedList.Add("set_FadeByController");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(AnimatorSequence), "set_FadeByController"),
                    set_FadeByController);
            }
        }

        internal static event Delegates.set_FadeByController_BeforeArgs _beforeset_FadeByController;
        internal static event Delegates.set_FadeByController_NormalArgs _afterset_FadeByController;

        private static void set_FadeByController(Action<AnimatorSequence, float> orig, AnimatorSequence self,
            float value)
        {
            Delegates.Params_set_FadeByController @params = new()
            {
                self = self, value = value
            };
            _beforeset_FadeByController?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_FadeByController != null) _afterset_FadeByController.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void Begin_BeforeArgs(Params_Begin args);

        public delegate void Begin_NormalArgs(Params_Begin args);

        public delegate void get_FadeByController_BeforeArgs(Params_get_FadeByController args);

        public delegate float get_FadeByController_NormalArgs(Params_get_FadeByController args);

        public delegate void get_IsPlaying_BeforeArgs(Params_get_IsPlaying args);

        public delegate bool get_IsPlaying_NormalArgs(Params_get_IsPlaying args);

        public delegate void get_IsSkipped_BeforeArgs(Params_get_IsSkipped args);

        public delegate bool get_IsSkipped_NormalArgs(Params_get_IsSkipped args);

        public delegate void set_FadeByController_BeforeArgs(Params_set_FadeByController args);

        public delegate void set_FadeByController_NormalArgs(Params_set_FadeByController args);

        public delegate void Skip_BeforeArgs(Params_Skip args);

        public delegate void Skip_NormalArgs(Params_Skip args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_Awake
        {
            public AnimatorSequence self;
        }

        public sealed class Params_Update
        {
            public AnimatorSequence self;
        }

        public sealed class Params_Begin
        {
            public AnimatorSequence self;
        }

        public sealed class Params_get_IsPlaying
        {
            public AnimatorSequence self;
        }

        public sealed class Params_Skip
        {
            public AnimatorSequence self;
        }

        public sealed class Params_get_IsSkipped
        {
            public AnimatorSequence self;
        }

        public sealed class Params_get_FadeByController
        {
            public AnimatorSequence self;
        }

        public sealed class Params_set_FadeByController
        {
            public AnimatorSequence self;
            public float value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.Begin_BeforeArgs Begin
        {
            add
            {
                HookHandler._beforeBegin += value;
                HookHandler.HookBegin();
            }
            remove => HookHandler._beforeBegin -= value;
        }

        public static event Delegates.get_IsPlaying_BeforeArgs get_IsPlaying
        {
            add
            {
                HookHandler._beforeget_IsPlaying += value;
                HookHandler.Hookget_IsPlaying();
            }
            remove => HookHandler._beforeget_IsPlaying -= value;
        }

        public static event Delegates.Skip_BeforeArgs Skip
        {
            add
            {
                HookHandler._beforeSkip += value;
                HookHandler.HookSkip();
            }
            remove => HookHandler._beforeSkip -= value;
        }

        public static event Delegates.get_IsSkipped_BeforeArgs get_IsSkipped
        {
            add
            {
                HookHandler._beforeget_IsSkipped += value;
                HookHandler.Hookget_IsSkipped();
            }
            remove => HookHandler._beforeget_IsSkipped -= value;
        }

        public static event Delegates.get_FadeByController_BeforeArgs get_FadeByController
        {
            add
            {
                HookHandler._beforeget_FadeByController += value;
                HookHandler.Hookget_FadeByController();
            }
            remove => HookHandler._beforeget_FadeByController -= value;
        }

        public static event Delegates.set_FadeByController_BeforeArgs set_FadeByController
        {
            add
            {
                HookHandler._beforeset_FadeByController += value;
                HookHandler.Hookset_FadeByController();
            }
            remove => HookHandler._beforeset_FadeByController -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.Begin_NormalArgs Begin
        {
            add
            {
                HookHandler._afterBegin += value;
                HookHandler.HookBegin();
            }
            remove => HookHandler._afterBegin -= value;
        }

        public static event Delegates.get_IsPlaying_NormalArgs get_IsPlaying
        {
            add
            {
                HookHandler._afterget_IsPlaying += value;
                HookHandler.Hookget_IsPlaying();
            }
            remove => HookHandler._afterget_IsPlaying -= value;
        }

        public static event Delegates.Skip_NormalArgs Skip
        {
            add
            {
                HookHandler._afterSkip += value;
                HookHandler.HookSkip();
            }
            remove => HookHandler._afterSkip -= value;
        }

        public static event Delegates.get_IsSkipped_NormalArgs get_IsSkipped
        {
            add
            {
                HookHandler._afterget_IsSkipped += value;
                HookHandler.Hookget_IsSkipped();
            }
            remove => HookHandler._afterget_IsSkipped -= value;
        }

        public static event Delegates.get_FadeByController_NormalArgs get_FadeByController
        {
            add
            {
                HookHandler._afterget_FadeByController += value;
                HookHandler.Hookget_FadeByController();
            }
            remove => HookHandler._afterget_FadeByController -= value;
        }

        public static event Delegates.set_FadeByController_NormalArgs set_FadeByController
        {
            add
            {
                HookHandler._afterset_FadeByController += value;
                HookHandler.Hookset_FadeByController();
            }
            remove => HookHandler._afterset_FadeByController -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.AnimatorSequence.hook_Awake Awake
        {
            add => On.AnimatorSequence.Awake += value;
            remove => On.AnimatorSequence.Awake -= value;
        }

        public static event On.AnimatorSequence.hook_Update Update
        {
            add => On.AnimatorSequence.Update += value;
            remove => On.AnimatorSequence.Update -= value;
        }

        public static event On.AnimatorSequence.hook_Begin Begin
        {
            add => On.AnimatorSequence.Begin += value;
            remove => On.AnimatorSequence.Begin -= value;
        }

        public static event Delegates.get_IsPlaying_NormalArgs get_IsPlaying
        {
            add => HookEndpointManager.Add<Delegates.get_IsPlaying_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(AnimatorSequence), "get_IsPlaying"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsPlaying_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(AnimatorSequence), "get_IsPlaying"), value);
        }

        public static event On.AnimatorSequence.hook_Skip Skip
        {
            add => On.AnimatorSequence.Skip += value;
            remove => On.AnimatorSequence.Skip -= value;
        }

        public static event Delegates.get_IsSkipped_NormalArgs get_IsSkipped
        {
            add => HookEndpointManager.Add<Delegates.get_IsSkipped_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(AnimatorSequence), "get_IsSkipped"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsSkipped_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(AnimatorSequence), "get_IsSkipped"), value);
        }

        public static event Delegates.get_FadeByController_NormalArgs get_FadeByController
        {
            add => HookEndpointManager.Add<Delegates.get_FadeByController_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(AnimatorSequence), "get_FadeByController"), value);
            remove => HookEndpointManager.Remove<Delegates.get_FadeByController_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(AnimatorSequence), "get_FadeByController"), value);
        }

        public static event Delegates.set_FadeByController_NormalArgs set_FadeByController
        {
            add => HookEndpointManager.Add<Delegates.set_FadeByController_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(AnimatorSequence), "set_FadeByController"), value);
            remove => HookEndpointManager.Remove<Delegates.set_FadeByController_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(AnimatorSequence), "set_FadeByController"), value);
        }
    }
}