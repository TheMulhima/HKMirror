using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for AlertRange class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnAlertRange
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_IsHeroInRange()
        {
            if (!HookedList.Contains("get_IsHeroInRange"))
            {
                HookedList.Add("get_IsHeroInRange");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(AlertRange), "get_IsHeroInRange"), get_IsHeroInRange);
            }
        }

        internal static event Delegates.get_IsHeroInRange_BeforeArgs _beforeget_IsHeroInRange;
        internal static event Delegates.get_IsHeroInRange_NormalArgs _afterget_IsHeroInRange;

        private static bool get_IsHeroInRange(Func<AlertRange, bool> orig, AlertRange self)
        {
            Delegates.Params_get_IsHeroInRange @params = new()
            {
                self = self
            };
            _beforeget_IsHeroInRange?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsHeroInRange != null) retVal = _afterget_IsHeroInRange.Invoke(@params);
            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.AlertRange.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.AlertRange.orig_Awake orig, AlertRange self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.AlertRange.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_NormalArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.AlertRange.orig_OnTriggerEnter2D orig, AlertRange self,
            Collider2D other)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, other = other
            };
            _beforeOnTriggerEnter2D?.Invoke(@params);
            self = @params.self;
            other = @params.other;
            orig(self, other);
            if (_afterOnTriggerEnter2D != null) _afterOnTriggerEnter2D.Invoke(@params);
        }

        internal static void HookOnTriggerExit2D()
        {
            if (!HookedList.Contains("OnTriggerExit2D"))
            {
                HookedList.Add("OnTriggerExit2D");
                On.AlertRange.OnTriggerExit2D += OnTriggerExit2D;
            }
        }

        internal static event Delegates.OnTriggerExit2D_BeforeArgs _beforeOnTriggerExit2D;
        internal static event Delegates.OnTriggerExit2D_NormalArgs _afterOnTriggerExit2D;

        private static void OnTriggerExit2D(On.AlertRange.orig_OnTriggerExit2D orig, AlertRange self, Collider2D other)
        {
            Delegates.Params_OnTriggerExit2D @params = new()
            {
                self = self, other = other
            };
            _beforeOnTriggerExit2D?.Invoke(@params);
            self = @params.self;
            other = @params.other;
            orig(self, other);
            if (_afterOnTriggerExit2D != null) _afterOnTriggerExit2D.Invoke(@params);
        }

        internal static void HookStillInColliders()
        {
            if (!HookedList.Contains("StillInColliders"))
            {
                HookedList.Add("StillInColliders");
                On.AlertRange.StillInColliders += StillInColliders;
            }
        }

        internal static event Delegates.StillInColliders_BeforeArgs _beforeStillInColliders;
        internal static event Delegates.StillInColliders_NormalArgs _afterStillInColliders;

        private static bool StillInColliders(On.AlertRange.orig_StillInColliders orig, AlertRange self)
        {
            Delegates.Params_StillInColliders @params = new()
            {
                self = self
            };
            _beforeStillInColliders?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterStillInColliders != null) retVal = _afterStillInColliders.Invoke(@params);
            return retVal;
        }

        internal static void HookFind()
        {
            if (!HookedList.Contains("Find"))
            {
                HookedList.Add("Find");
                On.AlertRange.Find += Find;
            }
        }

        internal static event Delegates.Find_BeforeArgs _beforeFind;
        internal static event Delegates.Find_NormalArgs _afterFind;

        private static AlertRange Find(On.AlertRange.orig_Find orig, GameObject root, string childName)
        {
            Delegates.Params_Find @params = new()
            {
                root = root, childName = childName
            };
            _beforeFind?.Invoke(@params);
            root = @params.root;
            childName = @params.childName;
            var retVal = orig(root, childName);
            if (_afterFind != null) retVal = _afterFind.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void Find_BeforeArgs(Params_Find args);

        public delegate AlertRange Find_NormalArgs(Params_Find args);

        public delegate void get_IsHeroInRange_BeforeArgs(Params_get_IsHeroInRange args);

        public delegate bool get_IsHeroInRange_NormalArgs(Params_get_IsHeroInRange args);

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_NormalArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerExit2D_BeforeArgs(Params_OnTriggerExit2D args);

        public delegate void OnTriggerExit2D_NormalArgs(Params_OnTriggerExit2D args);

        public delegate void StillInColliders_BeforeArgs(Params_StillInColliders args);

        public delegate bool StillInColliders_NormalArgs(Params_StillInColliders args);

        public sealed class Params_get_IsHeroInRange
        {
            public AlertRange self;
        }

        public sealed class Params_Awake
        {
            public AlertRange self;
        }

        public sealed class Params_OnTriggerEnter2D
        {
            public Collider2D other;
            public AlertRange self;
        }

        public sealed class Params_OnTriggerExit2D
        {
            public Collider2D other;
            public AlertRange self;
        }

        public sealed class Params_StillInColliders
        {
            public AlertRange self;
        }

        public sealed class Params_Find
        {
            public string childName;
            public GameObject root;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_IsHeroInRange_BeforeArgs get_IsHeroInRange
        {
            add
            {
                HookHandler._beforeget_IsHeroInRange += value;
                HookHandler.Hookget_IsHeroInRange();
            }
            remove => HookHandler._beforeget_IsHeroInRange -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.OnTriggerExit2D_BeforeArgs OnTriggerExit2D
        {
            add
            {
                HookHandler._beforeOnTriggerExit2D += value;
                HookHandler.HookOnTriggerExit2D();
            }
            remove => HookHandler._beforeOnTriggerExit2D -= value;
        }

        public static event Delegates.StillInColliders_BeforeArgs StillInColliders
        {
            add
            {
                HookHandler._beforeStillInColliders += value;
                HookHandler.HookStillInColliders();
            }
            remove => HookHandler._beforeStillInColliders -= value;
        }

        public static event Delegates.Find_BeforeArgs Find
        {
            add
            {
                HookHandler._beforeFind += value;
                HookHandler.HookFind();
            }
            remove => HookHandler._beforeFind -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_IsHeroInRange_NormalArgs get_IsHeroInRange
        {
            add
            {
                HookHandler._afterget_IsHeroInRange += value;
                HookHandler.Hookget_IsHeroInRange();
            }
            remove => HookHandler._afterget_IsHeroInRange -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnTriggerEnter2D_NormalArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }

        public static event Delegates.OnTriggerExit2D_NormalArgs OnTriggerExit2D
        {
            add
            {
                HookHandler._afterOnTriggerExit2D += value;
                HookHandler.HookOnTriggerExit2D();
            }
            remove => HookHandler._afterOnTriggerExit2D -= value;
        }

        public static event Delegates.StillInColliders_NormalArgs StillInColliders
        {
            add
            {
                HookHandler._afterStillInColliders += value;
                HookHandler.HookStillInColliders();
            }
            remove => HookHandler._afterStillInColliders -= value;
        }

        public static event Delegates.Find_NormalArgs Find
        {
            add
            {
                HookHandler._afterFind += value;
                HookHandler.HookFind();
            }
            remove => HookHandler._afterFind -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_IsHeroInRange_NormalArgs get_IsHeroInRange
        {
            add => HookEndpointManager.Add<Delegates.get_IsHeroInRange_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(AlertRange), "get_IsHeroInRange"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsHeroInRange_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(AlertRange), "get_IsHeroInRange"), value);
        }

        public static event On.AlertRange.hook_Awake Awake
        {
            add => On.AlertRange.Awake += value;
            remove => On.AlertRange.Awake -= value;
        }

        public static event On.AlertRange.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.AlertRange.OnTriggerEnter2D += value;
            remove => On.AlertRange.OnTriggerEnter2D -= value;
        }

        public static event On.AlertRange.hook_OnTriggerExit2D OnTriggerExit2D
        {
            add => On.AlertRange.OnTriggerExit2D += value;
            remove => On.AlertRange.OnTriggerExit2D -= value;
        }

        public static event On.AlertRange.hook_StillInColliders StillInColliders
        {
            add => On.AlertRange.StillInColliders += value;
            remove => On.AlertRange.StillInColliders -= value;
        }

        public static event On.AlertRange.hook_Find Find
        {
            add => On.AlertRange.Find += value;
            remove => On.AlertRange.Find -= value;
        }
    }
}