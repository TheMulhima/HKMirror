using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for TouchShake class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTouchShake
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.TouchShake.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.TouchShake.orig_Start orig, TouchShake self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.TouchShake.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_AfterArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.TouchShake.orig_OnTriggerEnter2D orig, TouchShake self,
            UnityEngine.Collider2D collision)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, collision = collision
            };
            if (_beforeOnTriggerEnter2D != null)
            {
                foreach (Delegates.OnTriggerEnter2D_BeforeArgs toInvoke in _beforeOnTriggerEnter2D.GetInvocationList())
                {
                    try
                    {
                        _beforeOnTriggerEnter2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnTriggerEnter2D != null)
            {
                foreach (Delegates.OnTriggerEnter2D_AfterArgs toInvoke in _afterOnTriggerEnter2D.GetInvocationList())
                {
                    try
                    {
                        _afterOnTriggerEnter2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDoAnimation()
        {
            if (!HookedList.Contains("DoAnimation"))
            {
                HookedList.Add("DoAnimation");
                On.TouchShake.DoAnimation += DoAnimation;
            }
        }

        internal static event Delegates.DoAnimation_BeforeArgs _beforeDoAnimation;

        private static System.Collections.IEnumerator DoAnimation(On.TouchShake.orig_DoAnimation orig, TouchShake self)
        {
            Delegates.Params_DoAnimation @params = new()
            {
                self = self
            };
            if (_beforeDoAnimation != null)
            {
                foreach (Delegates.DoAnimation_BeforeArgs toInvoke in _beforeDoAnimation.GetInvocationList())
                {
                    try
                    {
                        _beforeDoAnimation?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            return orig(self);
        }

        internal static void HookSpriteAnimation()
        {
            if (!HookedList.Contains("SpriteAnimation"))
            {
                HookedList.Add("SpriteAnimation");
                On.TouchShake.SpriteAnimation += SpriteAnimation;
            }
        }

        internal static event Delegates.SpriteAnimation_BeforeArgs _beforeSpriteAnimation;

        private static System.Collections.IEnumerator SpriteAnimation(On.TouchShake.orig_SpriteAnimation orig,
            TouchShake self)
        {
            Delegates.Params_SpriteAnimation @params = new()
            {
                self = self
            };
            if (_beforeSpriteAnimation != null)
            {
                foreach (Delegates.SpriteAnimation_BeforeArgs toInvoke in _beforeSpriteAnimation.GetInvocationList())
                {
                    try
                    {
                        _beforeSpriteAnimation?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            return orig(self);
        }

        internal static void Hooktk2dAnimation()
        {
            if (!HookedList.Contains("tk2dAnimation"))
            {
                HookedList.Add("tk2dAnimation");
                On.TouchShake.tk2dAnimation += tk2dAnimation;
            }
        }

        internal static event Delegates.tk2dAnimation_BeforeArgs _beforetk2dAnimation;

        private static System.Collections.IEnumerator tk2dAnimation(On.TouchShake.orig_tk2dAnimation orig,
            TouchShake self)
        {
            Delegates.Params_tk2dAnimation @params = new()
            {
                self = self
            };
            if (_beforetk2dAnimation != null)
            {
                foreach (Delegates.tk2dAnimation_BeforeArgs toInvoke in _beforetk2dAnimation.GetInvocationList())
                {
                    try
                    {
                        _beforetk2dAnimation?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            return orig(self);
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Start
        {
            public TouchShake self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<TouchShake> orig, TouchShake self);

        public sealed class Params_OnTriggerEnter2D
        {
            public TouchShake self;
            public UnityEngine.Collider2D collision;
        }

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_AfterArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_WithArgs(Action<TouchShake, UnityEngine.Collider2D> orig, TouchShake self,
            UnityEngine.Collider2D collision);

        public sealed class Params_DoAnimation
        {
            public TouchShake self;
        }

        public delegate void DoAnimation_BeforeArgs(Params_DoAnimation args);

        public delegate System.Collections.IEnumerator DoAnimation_AfterArgs(Params_DoAnimation args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator DoAnimation_WithArgs(
            Func<TouchShake, System.Collections.IEnumerator> orig, TouchShake self);

        public sealed class Params_SpriteAnimation
        {
            public TouchShake self;
        }

        public delegate void SpriteAnimation_BeforeArgs(Params_SpriteAnimation args);

        public delegate System.Collections.IEnumerator SpriteAnimation_AfterArgs(Params_SpriteAnimation args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator SpriteAnimation_WithArgs(
            Func<TouchShake, System.Collections.IEnumerator> orig, TouchShake self);

        public sealed class Params_tk2dAnimation
        {
            public TouchShake self;
        }

        public delegate void tk2dAnimation_BeforeArgs(Params_tk2dAnimation args);

        public delegate System.Collections.IEnumerator tk2dAnimation_AfterArgs(Params_tk2dAnimation args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator tk2dAnimation_WithArgs(
            Func<TouchShake, System.Collections.IEnumerator> orig, TouchShake self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.DoAnimation_BeforeArgs DoAnimation
        {
            add
            {
                HookHandler._beforeDoAnimation += value;
                HookHandler.HookDoAnimation();
            }
            remove => HookHandler._beforeDoAnimation -= value;
        }

        public static event Delegates.SpriteAnimation_BeforeArgs SpriteAnimation
        {
            add
            {
                HookHandler._beforeSpriteAnimation += value;
                HookHandler.HookSpriteAnimation();
            }
            remove => HookHandler._beforeSpriteAnimation -= value;
        }

        public static event Delegates.tk2dAnimation_BeforeArgs tk2dAnimation
        {
            add
            {
                HookHandler._beforetk2dAnimation += value;
                HookHandler.Hooktk2dAnimation();
            }
            remove => HookHandler._beforetk2dAnimation -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnTriggerEnter2D_AfterArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.TouchShake.hook_Start Start
        {
            add => On.TouchShake.Start += value;
            remove => On.TouchShake.Start -= value;
        }

        public static event On.TouchShake.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.TouchShake.OnTriggerEnter2D += value;
            remove => On.TouchShake.OnTriggerEnter2D -= value;
        }

        public static event On.TouchShake.hook_DoAnimation DoAnimation
        {
            add => On.TouchShake.DoAnimation += value;
            remove => On.TouchShake.DoAnimation -= value;
        }

        public static event On.TouchShake.hook_SpriteAnimation SpriteAnimation
        {
            add => On.TouchShake.SpriteAnimation += value;
            remove => On.TouchShake.SpriteAnimation -= value;
        }

        public static event On.TouchShake.hook_tk2dAnimation tk2dAnimation
        {
            add => On.TouchShake.tk2dAnimation += value;
            remove => On.TouchShake.tk2dAnimation -= value;
        }
    }
}