using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for BossSequenceDoor class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBossSequenceDoor
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.BossSequenceDoor.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.BossSequenceDoor.orig_Start orig, BossSequenceDoor self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSaveState()
        {
            if (!HookedList.Contains("SaveState"))
            {
                HookedList.Add("SaveState");
                On.BossSequenceDoor.SaveState += SaveState;
            }
        }

        internal static event Delegates.SaveState_BeforeArgs _beforeSaveState;
        internal static event Delegates.SaveState_AfterArgs _afterSaveState;

        private static void SaveState(On.BossSequenceDoor.orig_SaveState orig, BossSequenceDoor self)
        {
            Delegates.Params_SaveState @params = new()
            {
                self = self
            };
            if (_beforeSaveState != null)
            {
                foreach (Delegates.SaveState_BeforeArgs toInvoke in _beforeSaveState.GetInvocationList())
                {
                    try
                    {
                        _beforeSaveState?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterSaveState != null)
            {
                foreach (Delegates.SaveState_AfterArgs toInvoke in _afterSaveState.GetInvocationList())
                {
                    try
                    {
                        _afterSaveState.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookIsUnlocked()
        {
            if (!HookedList.Contains("IsUnlocked"))
            {
                HookedList.Add("IsUnlocked");
                On.BossSequenceDoor.IsUnlocked += IsUnlocked;
            }
        }

        internal static event Delegates.IsUnlocked_BeforeArgs _beforeIsUnlocked;
        internal static event Delegates.IsUnlocked_AfterArgs _afterIsUnlocked;

        private static bool IsUnlocked(On.BossSequenceDoor.orig_IsUnlocked orig, BossSequenceDoor self)
        {
            Delegates.Params_IsUnlocked @params = new()
            {
                self = self
            };
            if (_beforeIsUnlocked != null)
            {
                foreach (Delegates.IsUnlocked_BeforeArgs toInvoke in _beforeIsUnlocked.GetInvocationList())
                {
                    try
                    {
                        _beforeIsUnlocked?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterIsUnlocked != null)
            {
                foreach (Delegates.IsUnlocked_AfterArgs toInvoke in _afterIsUnlocked.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterIsUnlocked.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookShowLockUI()
        {
            if (!HookedList.Contains("ShowLockUI"))
            {
                HookedList.Add("ShowLockUI");
                On.BossSequenceDoor.ShowLockUI += ShowLockUI;
            }
        }

        internal static event Delegates.ShowLockUI_BeforeArgs _beforeShowLockUI;
        internal static event Delegates.ShowLockUI_AfterArgs _afterShowLockUI;

        private static void ShowLockUI(On.BossSequenceDoor.orig_ShowLockUI orig, BossSequenceDoor self, bool value)
        {
            Delegates.Params_ShowLockUI @params = new()
            {
                self = self, value = value
            };
            if (_beforeShowLockUI != null)
            {
                foreach (Delegates.ShowLockUI_BeforeArgs toInvoke in _beforeShowLockUI.GetInvocationList())
                {
                    try
                    {
                        _beforeShowLockUI?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterShowLockUI != null)
            {
                foreach (Delegates.ShowLockUI_AfterArgs toInvoke in _afterShowLockUI.GetInvocationList())
                {
                    try
                    {
                        _afterShowLockUI.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.BossSequenceDoor.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_AfterArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.BossSequenceDoor.orig_OnTriggerEnter2D orig, BossSequenceDoor self,
            UnityEngine.Collider2D collision)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, collision = collision
            };
            if (_beforeOnTriggerEnter2D != null)
            {
                foreach (Delegates.OnTriggerEnter2D_BeforeArgs toInvoke in _beforeOnTriggerEnter2D.GetInvocationList())
                {
                    try
                    {
                        _beforeOnTriggerEnter2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnTriggerEnter2D != null)
            {
                foreach (Delegates.OnTriggerEnter2D_AfterArgs toInvoke in _afterOnTriggerEnter2D.GetInvocationList())
                {
                    try
                    {
                        _afterOnTriggerEnter2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStartShake()
        {
            if (!HookedList.Contains("StartShake"))
            {
                HookedList.Add("StartShake");
                On.BossSequenceDoor.StartShake += StartShake;
            }
        }

        internal static event Delegates.StartShake_BeforeArgs _beforeStartShake;
        internal static event Delegates.StartShake_AfterArgs _afterStartShake;

        private static void StartShake(On.BossSequenceDoor.orig_StartShake orig, BossSequenceDoor self)
        {
            Delegates.Params_StartShake @params = new()
            {
                self = self
            };
            if (_beforeStartShake != null)
            {
                foreach (Delegates.StartShake_BeforeArgs toInvoke in _beforeStartShake.GetInvocationList())
                {
                    try
                    {
                        _beforeStartShake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStartShake != null)
            {
                foreach (Delegates.StartShake_AfterArgs toInvoke in _afterStartShake.GetInvocationList())
                {
                    try
                    {
                        _afterStartShake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStopShake()
        {
            if (!HookedList.Contains("StopShake"))
            {
                HookedList.Add("StopShake");
                On.BossSequenceDoor.StopShake += StopShake;
            }
        }

        internal static event Delegates.StopShake_BeforeArgs _beforeStopShake;
        internal static event Delegates.StopShake_AfterArgs _afterStopShake;

        private static void StopShake(On.BossSequenceDoor.orig_StopShake orig, BossSequenceDoor self)
        {
            Delegates.Params_StopShake @params = new()
            {
                self = self
            };
            if (_beforeStopShake != null)
            {
                foreach (Delegates.StopShake_BeforeArgs toInvoke in _beforeStopShake.GetInvocationList())
                {
                    try
                    {
                        _beforeStopShake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStopShake != null)
            {
                foreach (Delegates.StopShake_AfterArgs toInvoke in _afterStopShake.GetInvocationList())
                {
                    try
                    {
                        _afterStopShake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDoorUnlockSequence()
        {
            if (!HookedList.Contains("DoorUnlockSequence"))
            {
                HookedList.Add("DoorUnlockSequence");
                On.BossSequenceDoor.DoorUnlockSequence += DoorUnlockSequence;
            }
        }

        internal static event Delegates.DoorUnlockSequence_BeforeArgs _beforeDoorUnlockSequence;

        private static System.Collections.IEnumerator DoorUnlockSequence(
            On.BossSequenceDoor.orig_DoorUnlockSequence orig, BossSequenceDoor self)
        {
            Delegates.Params_DoorUnlockSequence @params = new()
            {
                self = self
            };
            if (_beforeDoorUnlockSequence != null)
            {
                foreach (Delegates.DoorUnlockSequence_BeforeArgs toInvoke in
                         _beforeDoorUnlockSequence.GetInvocationList())
                {
                    try
                    {
                        _beforeDoorUnlockSequence?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            return orig(self);
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Start
        {
            public BossSequenceDoor self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<BossSequenceDoor> orig, BossSequenceDoor self);

        public sealed class Params_SaveState
        {
            public BossSequenceDoor self;
        }

        public delegate void SaveState_BeforeArgs(Params_SaveState args);

        public delegate void SaveState_AfterArgs(Params_SaveState args);

        public delegate void SaveState_WithArgs(Action<BossSequenceDoor> orig, BossSequenceDoor self);

        public sealed class Params_IsUnlocked
        {
            public BossSequenceDoor self;
        }

        public delegate void IsUnlocked_BeforeArgs(Params_IsUnlocked args);

        public delegate bool IsUnlocked_AfterArgs(Params_IsUnlocked args, bool ret);

        public delegate bool IsUnlocked_WithArgs(Func<BossSequenceDoor, bool> orig, BossSequenceDoor self);

        public sealed class Params_ShowLockUI
        {
            public BossSequenceDoor self;
            public bool value;
        }

        public delegate void ShowLockUI_BeforeArgs(Params_ShowLockUI args);

        public delegate void ShowLockUI_AfterArgs(Params_ShowLockUI args);

        public delegate void ShowLockUI_WithArgs(Action<BossSequenceDoor, bool> orig, BossSequenceDoor self,
            bool value);

        public sealed class Params_OnTriggerEnter2D
        {
            public BossSequenceDoor self;
            public UnityEngine.Collider2D collision;
        }

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_AfterArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_WithArgs(Action<BossSequenceDoor, UnityEngine.Collider2D> orig,
            BossSequenceDoor self, UnityEngine.Collider2D collision);

        public sealed class Params_StartShake
        {
            public BossSequenceDoor self;
        }

        public delegate void StartShake_BeforeArgs(Params_StartShake args);

        public delegate void StartShake_AfterArgs(Params_StartShake args);

        public delegate void StartShake_WithArgs(Action<BossSequenceDoor> orig, BossSequenceDoor self);

        public sealed class Params_StopShake
        {
            public BossSequenceDoor self;
        }

        public delegate void StopShake_BeforeArgs(Params_StopShake args);

        public delegate void StopShake_AfterArgs(Params_StopShake args);

        public delegate void StopShake_WithArgs(Action<BossSequenceDoor> orig, BossSequenceDoor self);

        public sealed class Params_DoorUnlockSequence
        {
            public BossSequenceDoor self;
        }

        public delegate void DoorUnlockSequence_BeforeArgs(Params_DoorUnlockSequence args);

        public delegate System.Collections.IEnumerator DoorUnlockSequence_AfterArgs(Params_DoorUnlockSequence args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator DoorUnlockSequence_WithArgs(
            Func<BossSequenceDoor, System.Collections.IEnumerator> orig, BossSequenceDoor self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.SaveState_BeforeArgs SaveState
        {
            add
            {
                HookHandler._beforeSaveState += value;
                HookHandler.HookSaveState();
            }
            remove => HookHandler._beforeSaveState -= value;
        }

        public static event Delegates.IsUnlocked_BeforeArgs IsUnlocked
        {
            add
            {
                HookHandler._beforeIsUnlocked += value;
                HookHandler.HookIsUnlocked();
            }
            remove => HookHandler._beforeIsUnlocked -= value;
        }

        public static event Delegates.ShowLockUI_BeforeArgs ShowLockUI
        {
            add
            {
                HookHandler._beforeShowLockUI += value;
                HookHandler.HookShowLockUI();
            }
            remove => HookHandler._beforeShowLockUI -= value;
        }

        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.StartShake_BeforeArgs StartShake
        {
            add
            {
                HookHandler._beforeStartShake += value;
                HookHandler.HookStartShake();
            }
            remove => HookHandler._beforeStartShake -= value;
        }

        public static event Delegates.StopShake_BeforeArgs StopShake
        {
            add
            {
                HookHandler._beforeStopShake += value;
                HookHandler.HookStopShake();
            }
            remove => HookHandler._beforeStopShake -= value;
        }

        public static event Delegates.DoorUnlockSequence_BeforeArgs DoorUnlockSequence
        {
            add
            {
                HookHandler._beforeDoorUnlockSequence += value;
                HookHandler.HookDoorUnlockSequence();
            }
            remove => HookHandler._beforeDoorUnlockSequence -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.SaveState_AfterArgs SaveState
        {
            add
            {
                HookHandler._afterSaveState += value;
                HookHandler.HookSaveState();
            }
            remove => HookHandler._afterSaveState -= value;
        }

        public static event Delegates.IsUnlocked_AfterArgs IsUnlocked
        {
            add
            {
                HookHandler._afterIsUnlocked += value;
                HookHandler.HookIsUnlocked();
            }
            remove => HookHandler._afterIsUnlocked -= value;
        }

        public static event Delegates.ShowLockUI_AfterArgs ShowLockUI
        {
            add
            {
                HookHandler._afterShowLockUI += value;
                HookHandler.HookShowLockUI();
            }
            remove => HookHandler._afterShowLockUI -= value;
        }

        public static event Delegates.OnTriggerEnter2D_AfterArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }

        public static event Delegates.StartShake_AfterArgs StartShake
        {
            add
            {
                HookHandler._afterStartShake += value;
                HookHandler.HookStartShake();
            }
            remove => HookHandler._afterStartShake -= value;
        }

        public static event Delegates.StopShake_AfterArgs StopShake
        {
            add
            {
                HookHandler._afterStopShake += value;
                HookHandler.HookStopShake();
            }
            remove => HookHandler._afterStopShake -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.BossSequenceDoor.hook_Start Start
        {
            add => On.BossSequenceDoor.Start += value;
            remove => On.BossSequenceDoor.Start -= value;
        }

        public static event On.BossSequenceDoor.hook_SaveState SaveState
        {
            add => On.BossSequenceDoor.SaveState += value;
            remove => On.BossSequenceDoor.SaveState -= value;
        }

        public static event On.BossSequenceDoor.hook_IsUnlocked IsUnlocked
        {
            add => On.BossSequenceDoor.IsUnlocked += value;
            remove => On.BossSequenceDoor.IsUnlocked -= value;
        }

        public static event On.BossSequenceDoor.hook_ShowLockUI ShowLockUI
        {
            add => On.BossSequenceDoor.ShowLockUI += value;
            remove => On.BossSequenceDoor.ShowLockUI -= value;
        }

        public static event On.BossSequenceDoor.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.BossSequenceDoor.OnTriggerEnter2D += value;
            remove => On.BossSequenceDoor.OnTriggerEnter2D -= value;
        }

        public static event On.BossSequenceDoor.hook_StartShake StartShake
        {
            add => On.BossSequenceDoor.StartShake += value;
            remove => On.BossSequenceDoor.StartShake -= value;
        }

        public static event On.BossSequenceDoor.hook_StopShake StopShake
        {
            add => On.BossSequenceDoor.StopShake += value;
            remove => On.BossSequenceDoor.StopShake -= value;
        }

        public static event On.BossSequenceDoor.hook_DoorUnlockSequence DoorUnlockSequence
        {
            add => On.BossSequenceDoor.DoorUnlockSequence += value;
            remove => On.BossSequenceDoor.DoorUnlockSequence -= value;
        }
    }
}