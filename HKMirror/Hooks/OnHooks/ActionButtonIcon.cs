using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for ActionButtonIcon class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnActionButtonIcon
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_Action()
{
if (!HookedList.Contains("get_Action"))
{
HookedList.Add("get_Action");
new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionButtonIcon), "get_Action", true), get_Action);

}
}
internal static event Delegates.get_Action_BeforeArgs _beforeget_Action;
internal static event Delegates.get_Action_AfterArgs _afterget_Action;
private static GlobalEnums.HeroActionButton get_Action(Func<ActionButtonIcon, GlobalEnums.HeroActionButton> orig, ActionButtonIcon self)
{
Delegates.Params_get_Action @params = new() 
{
self = self
};
if (_beforeget_Action != null)
{
foreach (Delegates.get_Action_BeforeArgs toInvoke in _beforeget_Action.GetInvocationList())
{
try
{
_beforeget_Action?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_Action != null)
{
foreach (Delegates.get_Action_AfterArgs toInvoke in _afterget_Action.GetInvocationList())
{
try
{
retVal = _afterget_Action.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
On.ActionButtonIcon.OnEnable += OnEnable;

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(On.ActionButtonIcon.orig_OnEnable orig,ActionButtonIcon self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDisable()
{
if (!HookedList.Contains("OnDisable"))
{
HookedList.Add("OnDisable");
On.ActionButtonIcon.OnDisable += OnDisable;

}
}
internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;
private static void OnDisable(On.ActionButtonIcon.orig_OnDisable orig,ActionButtonIcon self)
{
Delegates.Params_OnDisable @params = new() 
{
self = self
};
if (_beforeOnDisable != null)
{
foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
{
try
{
_beforeOnDisable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDisable != null)
{
foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
{
try
{
_afterOnDisable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCheckHideIcon()
{
if (!HookedList.Contains("CheckHideIcon"))
{
HookedList.Add("CheckHideIcon");
On.ActionButtonIcon.CheckHideIcon += CheckHideIcon;

}
}
internal static event Delegates.CheckHideIcon_BeforeArgs _beforeCheckHideIcon;
internal static event Delegates.CheckHideIcon_AfterArgs _afterCheckHideIcon;
private static void CheckHideIcon(On.ActionButtonIcon.orig_CheckHideIcon orig,ActionButtonIcon self)
{
Delegates.Params_CheckHideIcon @params = new() 
{
self = self
};
if (_beforeCheckHideIcon != null)
{
foreach (Delegates.CheckHideIcon_BeforeArgs toInvoke in _beforeCheckHideIcon.GetInvocationList())
{
try
{
_beforeCheckHideIcon?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterCheckHideIcon != null)
{
foreach (Delegates.CheckHideIcon_AfterArgs toInvoke in _afterCheckHideIcon.GetInvocationList())
{
try
{
_afterCheckHideIcon.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetAction()
{
if (!HookedList.Contains("SetAction"))
{
HookedList.Add("SetAction");
On.ActionButtonIcon.SetAction += SetAction;

}
}
internal static event Delegates.SetAction_BeforeArgs _beforeSetAction;
internal static event Delegates.SetAction_AfterArgs _afterSetAction;
private static void SetAction(On.ActionButtonIcon.orig_SetAction orig,ActionButtonIcon self,  GlobalEnums.HeroActionButton action)
{
Delegates.Params_SetAction @params = new() 
{
self = self
, action = action
};
if (_beforeSetAction != null)
{
foreach (Delegates.SetAction_BeforeArgs toInvoke in _beforeSetAction.GetInvocationList())
{
try
{
_beforeSetAction?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
action = @params.action;
orig(self, action);
if (_afterSetAction != null)
{
foreach (Delegates.SetAction_AfterArgs toInvoke in _afterSetAction.GetInvocationList())
{
try
{
_afterSetAction.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetActionString()
{
if (!HookedList.Contains("SetActionString"))
{
HookedList.Add("SetActionString");
On.ActionButtonIcon.SetActionString += SetActionString;

}
}
internal static event Delegates.SetActionString_BeforeArgs _beforeSetActionString;
internal static event Delegates.SetActionString_AfterArgs _afterSetActionString;
private static void SetActionString(On.ActionButtonIcon.orig_SetActionString orig,ActionButtonIcon self,  string action)
{
Delegates.Params_SetActionString @params = new() 
{
self = self
, action = action
};
if (_beforeSetActionString != null)
{
foreach (Delegates.SetActionString_BeforeArgs toInvoke in _beforeSetActionString.GetInvocationList())
{
try
{
_beforeSetActionString?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
action = @params.action;
orig(self, action);
if (_afterSetActionString != null)
{
foreach (Delegates.SetActionString_AfterArgs toInvoke in _afterSetActionString.GetInvocationList())
{
try
{
_afterSetActionString.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_Action
{
public ActionButtonIcon self;
}
public delegate void get_Action_BeforeArgs(Params_get_Action args);
public delegate GlobalEnums.HeroActionButton get_Action_AfterArgs(Params_get_Action args, GlobalEnums.HeroActionButton ret);
public delegate GlobalEnums.HeroActionButton get_Action_WithArgs (Func<ActionButtonIcon, GlobalEnums.HeroActionButton> orig, ActionButtonIcon self);
public sealed class Params_OnEnable
{
public ActionButtonIcon self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<ActionButtonIcon> orig, ActionButtonIcon self);
public sealed class Params_OnDisable
{
public ActionButtonIcon self;
}
public delegate void OnDisable_BeforeArgs(Params_OnDisable args);
public delegate void OnDisable_AfterArgs(Params_OnDisable args);
public delegate void OnDisable_WithArgs (Action<ActionButtonIcon> orig, ActionButtonIcon self);
public sealed class Params_CheckHideIcon
{
public ActionButtonIcon self;
}
public delegate void CheckHideIcon_BeforeArgs(Params_CheckHideIcon args);
public delegate void CheckHideIcon_AfterArgs(Params_CheckHideIcon args);
public delegate void CheckHideIcon_WithArgs (Action<ActionButtonIcon> orig, ActionButtonIcon self);
public sealed class Params_SetAction
{
public ActionButtonIcon self;
public GlobalEnums.HeroActionButton action;
}
public delegate void SetAction_BeforeArgs(Params_SetAction args);
public delegate void SetAction_AfterArgs(Params_SetAction args);
public delegate void SetAction_WithArgs (Action<ActionButtonIcon,  GlobalEnums.HeroActionButton> orig, ActionButtonIcon self,  GlobalEnums.HeroActionButton action);
public sealed class Params_SetActionString
{
public ActionButtonIcon self;
public string action;
}
public delegate void SetActionString_BeforeArgs(Params_SetActionString args);
public delegate void SetActionString_AfterArgs(Params_SetActionString args);
public delegate void SetActionString_WithArgs (Action<ActionButtonIcon,  string> orig, ActionButtonIcon self,  string action);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_Action_BeforeArgs get_Action
{
add
{

HookHandler._beforeget_Action += value;
HookHandler.Hookget_Action();
}
remove => HookHandler._beforeget_Action -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.OnDisable_BeforeArgs OnDisable
{
add
{

HookHandler._beforeOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._beforeOnDisable -= value;
}
public static event Delegates.CheckHideIcon_BeforeArgs CheckHideIcon
{
add
{

HookHandler._beforeCheckHideIcon += value;
HookHandler.HookCheckHideIcon();
}
remove => HookHandler._beforeCheckHideIcon -= value;
}
public static event Delegates.SetAction_BeforeArgs SetAction
{
add
{

HookHandler._beforeSetAction += value;
HookHandler.HookSetAction();
}
remove => HookHandler._beforeSetAction -= value;
}
public static event Delegates.SetActionString_BeforeArgs SetActionString
{
add
{

HookHandler._beforeSetActionString += value;
HookHandler.HookSetActionString();
}
remove => HookHandler._beforeSetActionString -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_Action_AfterArgs get_Action
{
add
{

HookHandler._afterget_Action += value;
HookHandler.Hookget_Action();
}
remove => HookHandler._afterget_Action -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.OnDisable_AfterArgs OnDisable
{
add
{

HookHandler._afterOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._afterOnDisable -= value;
}
public static event Delegates.CheckHideIcon_AfterArgs CheckHideIcon
{
add
{

HookHandler._afterCheckHideIcon += value;
HookHandler.HookCheckHideIcon();
}
remove => HookHandler._afterCheckHideIcon -= value;
}
public static event Delegates.SetAction_AfterArgs SetAction
{
add
{

HookHandler._afterSetAction += value;
HookHandler.HookSetAction();
}
remove => HookHandler._afterSetAction -= value;
}
public static event Delegates.SetActionString_AfterArgs SetActionString
{
add
{

HookHandler._afterSetActionString += value;
HookHandler.HookSetActionString();
}
remove => HookHandler._afterSetActionString -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_Action_WithArgs get_Action
{
add => HookEndpointManager.Add<Delegates.get_Action_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(ActionButtonIcon), "get_Action", true), value);
remove => HookEndpointManager.Remove<Delegates.get_Action_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(ActionButtonIcon), "get_Action", true), value);
}
public static event On.ActionButtonIcon.hook_OnEnable OnEnable
{
add => On.ActionButtonIcon.OnEnable += value;
remove => On.ActionButtonIcon.OnEnable -= value;
}
public static event On.ActionButtonIcon.hook_OnDisable OnDisable
{
add => On.ActionButtonIcon.OnDisable += value;
remove => On.ActionButtonIcon.OnDisable -= value;
}
public static event On.ActionButtonIcon.hook_CheckHideIcon CheckHideIcon
{
add => On.ActionButtonIcon.CheckHideIcon += value;
remove => On.ActionButtonIcon.CheckHideIcon -= value;
}
public static event On.ActionButtonIcon.hook_SetAction SetAction
{
add => On.ActionButtonIcon.SetAction += value;
remove => On.ActionButtonIcon.SetAction -= value;
}
public static event On.ActionButtonIcon.hook_SetActionString SetActionString
{
add => On.ActionButtonIcon.SetActionString += value;
remove => On.ActionButtonIcon.SetActionString -= value;
}
}

}
