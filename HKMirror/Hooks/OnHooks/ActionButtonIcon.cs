using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ActionButtonIcon class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnActionButtonIcon
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Action()
        {
            if (!HookedList.Contains("get_Action"))
            {
                HookedList.Add("get_Action");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionButtonIcon), "get_Action"), get_Action);
            }
        }

        internal static event Delegates.get_Action_BeforeArgs _beforeget_Action;
        internal static event Delegates.get_Action_NormalArgs _afterget_Action;

        private static HeroActionButton get_Action(Func<ActionButtonIcon, HeroActionButton> orig, ActionButtonIcon self)
        {
            Delegates.Params_get_Action @params = new()
            {
                self = self
            };
            _beforeget_Action?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Action != null) retVal = _afterget_Action.Invoke(@params);
            return retVal;
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.ActionButtonIcon.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.ActionButtonIcon.orig_OnEnable orig, ActionButtonIcon self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.ActionButtonIcon.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.ActionButtonIcon.orig_OnDisable orig, ActionButtonIcon self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookCheckHideIcon()
        {
            if (!HookedList.Contains("CheckHideIcon"))
            {
                HookedList.Add("CheckHideIcon");
                On.ActionButtonIcon.CheckHideIcon += CheckHideIcon;
            }
        }

        internal static event Delegates.CheckHideIcon_BeforeArgs _beforeCheckHideIcon;
        internal static event Delegates.CheckHideIcon_NormalArgs _afterCheckHideIcon;

        private static void CheckHideIcon(On.ActionButtonIcon.orig_CheckHideIcon orig, ActionButtonIcon self)
        {
            Delegates.Params_CheckHideIcon @params = new()
            {
                self = self
            };
            _beforeCheckHideIcon?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCheckHideIcon != null) _afterCheckHideIcon.Invoke(@params);
        }

        internal static void HookSetAction()
        {
            if (!HookedList.Contains("SetAction"))
            {
                HookedList.Add("SetAction");
                On.ActionButtonIcon.SetAction += SetAction;
            }
        }

        internal static event Delegates.SetAction_BeforeArgs _beforeSetAction;
        internal static event Delegates.SetAction_NormalArgs _afterSetAction;

        private static void SetAction(On.ActionButtonIcon.orig_SetAction orig, ActionButtonIcon self,
            HeroActionButton action)
        {
            Delegates.Params_SetAction @params = new()
            {
                self = self, action = action
            };
            _beforeSetAction?.Invoke(@params);
            self = @params.self;
            action = @params.action;
            orig(self, action);
            if (_afterSetAction != null) _afterSetAction.Invoke(@params);
        }

        internal static void HookSetActionString()
        {
            if (!HookedList.Contains("SetActionString"))
            {
                HookedList.Add("SetActionString");
                On.ActionButtonIcon.SetActionString += SetActionString;
            }
        }

        internal static event Delegates.SetActionString_BeforeArgs _beforeSetActionString;
        internal static event Delegates.SetActionString_NormalArgs _afterSetActionString;

        private static void SetActionString(On.ActionButtonIcon.orig_SetActionString orig, ActionButtonIcon self,
            string action)
        {
            Delegates.Params_SetActionString @params = new()
            {
                self = self, action = action
            };
            _beforeSetActionString?.Invoke(@params);
            self = @params.self;
            action = @params.action;
            orig(self, action);
            if (_afterSetActionString != null) _afterSetActionString.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void CheckHideIcon_BeforeArgs(Params_CheckHideIcon args);

        public delegate void CheckHideIcon_NormalArgs(Params_CheckHideIcon args);

        public delegate void get_Action_BeforeArgs(Params_get_Action args);

        public delegate HeroActionButton get_Action_NormalArgs(Params_get_Action args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void SetAction_BeforeArgs(Params_SetAction args);

        public delegate void SetAction_NormalArgs(Params_SetAction args);

        public delegate void SetActionString_BeforeArgs(Params_SetActionString args);

        public delegate void SetActionString_NormalArgs(Params_SetActionString args);

        public sealed class Params_get_Action
        {
            public ActionButtonIcon self;
        }

        public sealed class Params_OnEnable
        {
            public ActionButtonIcon self;
        }

        public sealed class Params_OnDisable
        {
            public ActionButtonIcon self;
        }

        public sealed class Params_CheckHideIcon
        {
            public ActionButtonIcon self;
        }

        public sealed class Params_SetAction
        {
            public HeroActionButton action;
            public ActionButtonIcon self;
        }

        public sealed class Params_SetActionString
        {
            public string action;
            public ActionButtonIcon self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Action_BeforeArgs get_Action
        {
            add
            {
                HookHandler._beforeget_Action += value;
                HookHandler.Hookget_Action();
            }
            remove => HookHandler._beforeget_Action -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.CheckHideIcon_BeforeArgs CheckHideIcon
        {
            add
            {
                HookHandler._beforeCheckHideIcon += value;
                HookHandler.HookCheckHideIcon();
            }
            remove => HookHandler._beforeCheckHideIcon -= value;
        }

        public static event Delegates.SetAction_BeforeArgs SetAction
        {
            add
            {
                HookHandler._beforeSetAction += value;
                HookHandler.HookSetAction();
            }
            remove => HookHandler._beforeSetAction -= value;
        }

        public static event Delegates.SetActionString_BeforeArgs SetActionString
        {
            add
            {
                HookHandler._beforeSetActionString += value;
                HookHandler.HookSetActionString();
            }
            remove => HookHandler._beforeSetActionString -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Action_NormalArgs get_Action
        {
            add
            {
                HookHandler._afterget_Action += value;
                HookHandler.Hookget_Action();
            }
            remove => HookHandler._afterget_Action -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.CheckHideIcon_NormalArgs CheckHideIcon
        {
            add
            {
                HookHandler._afterCheckHideIcon += value;
                HookHandler.HookCheckHideIcon();
            }
            remove => HookHandler._afterCheckHideIcon -= value;
        }

        public static event Delegates.SetAction_NormalArgs SetAction
        {
            add
            {
                HookHandler._afterSetAction += value;
                HookHandler.HookSetAction();
            }
            remove => HookHandler._afterSetAction -= value;
        }

        public static event Delegates.SetActionString_NormalArgs SetActionString
        {
            add
            {
                HookHandler._afterSetActionString += value;
                HookHandler.HookSetActionString();
            }
            remove => HookHandler._afterSetActionString -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Action_NormalArgs get_Action
        {
            add => HookEndpointManager.Add<Delegates.get_Action_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionButtonIcon), "get_Action"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Action_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionButtonIcon), "get_Action"), value);
        }

        public static event On.ActionButtonIcon.hook_OnEnable OnEnable
        {
            add => On.ActionButtonIcon.OnEnable += value;
            remove => On.ActionButtonIcon.OnEnable -= value;
        }

        public static event On.ActionButtonIcon.hook_OnDisable OnDisable
        {
            add => On.ActionButtonIcon.OnDisable += value;
            remove => On.ActionButtonIcon.OnDisable -= value;
        }

        public static event On.ActionButtonIcon.hook_CheckHideIcon CheckHideIcon
        {
            add => On.ActionButtonIcon.CheckHideIcon += value;
            remove => On.ActionButtonIcon.CheckHideIcon -= value;
        }

        public static event On.ActionButtonIcon.hook_SetAction SetAction
        {
            add => On.ActionButtonIcon.SetAction += value;
            remove => On.ActionButtonIcon.SetAction -= value;
        }

        public static event On.ActionButtonIcon.hook_SetActionString SetActionString
        {
            add => On.ActionButtonIcon.SetActionString += value;
            remove => On.ActionButtonIcon.SetActionString -= value;
        }
    }
}