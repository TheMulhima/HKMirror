using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for SaveStats class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSaveStats
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_maxHealth()
        {
            if (!HookedList.Contains("get_maxHealth"))
            {
                HookedList.Add("get_maxHealth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_maxHealth"), get_maxHealth);
            }
        }

        internal static event Delegates.get_maxHealth_BeforeArgs _beforeget_maxHealth;
        internal static event Delegates.get_maxHealth_NormalArgs _afterget_maxHealth;

        private static int get_maxHealth(Func<SaveStats, int> orig, SaveStats self)
        {
            Delegates.Params_get_maxHealth @params = new()
            {
                self = self
            };
            _beforeget_maxHealth?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_maxHealth != null) retVal = _afterget_maxHealth.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_maxHealth()
        {
            if (!HookedList.Contains("set_maxHealth"))
            {
                HookedList.Add("set_maxHealth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_maxHealth"), set_maxHealth);
            }
        }

        internal static event Delegates.set_maxHealth_BeforeArgs _beforeset_maxHealth;
        internal static event Delegates.set_maxHealth_NormalArgs _afterset_maxHealth;

        private static void set_maxHealth(Action<SaveStats, int> orig, SaveStats self, int value)
        {
            Delegates.Params_set_maxHealth @params = new()
            {
                self = self, value = value
            };
            _beforeset_maxHealth?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_maxHealth != null) _afterset_maxHealth.Invoke(@params);
        }

        internal static void Hookget_geo()
        {
            if (!HookedList.Contains("get_geo"))
            {
                HookedList.Add("get_geo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_geo"), get_geo);
            }
        }

        internal static event Delegates.get_geo_BeforeArgs _beforeget_geo;
        internal static event Delegates.get_geo_NormalArgs _afterget_geo;

        private static int get_geo(Func<SaveStats, int> orig, SaveStats self)
        {
            Delegates.Params_get_geo @params = new()
            {
                self = self
            };
            _beforeget_geo?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_geo != null) retVal = _afterget_geo.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_geo()
        {
            if (!HookedList.Contains("set_geo"))
            {
                HookedList.Add("set_geo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_geo"), set_geo);
            }
        }

        internal static event Delegates.set_geo_BeforeArgs _beforeset_geo;
        internal static event Delegates.set_geo_NormalArgs _afterset_geo;

        private static void set_geo(Action<SaveStats, int> orig, SaveStats self, int value)
        {
            Delegates.Params_set_geo @params = new()
            {
                self = self, value = value
            };
            _beforeset_geo?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_geo != null) _afterset_geo.Invoke(@params);
        }

        internal static void Hookget_mapZone()
        {
            if (!HookedList.Contains("get_mapZone"))
            {
                HookedList.Add("get_mapZone");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_mapZone"), get_mapZone);
            }
        }

        internal static event Delegates.get_mapZone_BeforeArgs _beforeget_mapZone;
        internal static event Delegates.get_mapZone_NormalArgs _afterget_mapZone;

        private static MapZone get_mapZone(Func<SaveStats, MapZone> orig, SaveStats self)
        {
            Delegates.Params_get_mapZone @params = new()
            {
                self = self
            };
            _beforeget_mapZone?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_mapZone != null) retVal = _afterget_mapZone.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_mapZone()
        {
            if (!HookedList.Contains("set_mapZone"))
            {
                HookedList.Add("set_mapZone");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_mapZone"), set_mapZone);
            }
        }

        internal static event Delegates.set_mapZone_BeforeArgs _beforeset_mapZone;
        internal static event Delegates.set_mapZone_NormalArgs _afterset_mapZone;

        private static void set_mapZone(Action<SaveStats, MapZone> orig, SaveStats self, MapZone value)
        {
            Delegates.Params_set_mapZone @params = new()
            {
                self = self, value = value
            };
            _beforeset_mapZone?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_mapZone != null) _afterset_mapZone.Invoke(@params);
        }

        internal static void Hookget_playTime()
        {
            if (!HookedList.Contains("get_playTime"))
            {
                HookedList.Add("get_playTime");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_playTime"), get_playTime);
            }
        }

        internal static event Delegates.get_playTime_BeforeArgs _beforeget_playTime;
        internal static event Delegates.get_playTime_NormalArgs _afterget_playTime;

        private static float get_playTime(Func<SaveStats, float> orig, SaveStats self)
        {
            Delegates.Params_get_playTime @params = new()
            {
                self = self
            };
            _beforeget_playTime?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_playTime != null) retVal = _afterget_playTime.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_playTime()
        {
            if (!HookedList.Contains("set_playTime"))
            {
                HookedList.Add("set_playTime");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_playTime"), set_playTime);
            }
        }

        internal static event Delegates.set_playTime_BeforeArgs _beforeset_playTime;
        internal static event Delegates.set_playTime_NormalArgs _afterset_playTime;

        private static void set_playTime(Action<SaveStats, float> orig, SaveStats self, float value)
        {
            Delegates.Params_set_playTime @params = new()
            {
                self = self, value = value
            };
            _beforeset_playTime?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_playTime != null) _afterset_playTime.Invoke(@params);
        }

        internal static void Hookget_maxMPReserve()
        {
            if (!HookedList.Contains("get_maxMPReserve"))
            {
                HookedList.Add("get_maxMPReserve");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_maxMPReserve"), get_maxMPReserve);
            }
        }

        internal static event Delegates.get_maxMPReserve_BeforeArgs _beforeget_maxMPReserve;
        internal static event Delegates.get_maxMPReserve_NormalArgs _afterget_maxMPReserve;

        private static int get_maxMPReserve(Func<SaveStats, int> orig, SaveStats self)
        {
            Delegates.Params_get_maxMPReserve @params = new()
            {
                self = self
            };
            _beforeget_maxMPReserve?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_maxMPReserve != null) retVal = _afterget_maxMPReserve.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_maxMPReserve()
        {
            if (!HookedList.Contains("set_maxMPReserve"))
            {
                HookedList.Add("set_maxMPReserve");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_maxMPReserve"), set_maxMPReserve);
            }
        }

        internal static event Delegates.set_maxMPReserve_BeforeArgs _beforeset_maxMPReserve;
        internal static event Delegates.set_maxMPReserve_NormalArgs _afterset_maxMPReserve;

        private static void set_maxMPReserve(Action<SaveStats, int> orig, SaveStats self, int value)
        {
            Delegates.Params_set_maxMPReserve @params = new()
            {
                self = self, value = value
            };
            _beforeset_maxMPReserve?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_maxMPReserve != null) _afterset_maxMPReserve.Invoke(@params);
        }

        internal static void Hookget_permadeathMode()
        {
            if (!HookedList.Contains("get_permadeathMode"))
            {
                HookedList.Add("get_permadeathMode");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_permadeathMode"), get_permadeathMode);
            }
        }

        internal static event Delegates.get_permadeathMode_BeforeArgs _beforeget_permadeathMode;
        internal static event Delegates.get_permadeathMode_NormalArgs _afterget_permadeathMode;

        private static int get_permadeathMode(Func<SaveStats, int> orig, SaveStats self)
        {
            Delegates.Params_get_permadeathMode @params = new()
            {
                self = self
            };
            _beforeget_permadeathMode?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_permadeathMode != null) retVal = _afterget_permadeathMode.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_permadeathMode()
        {
            if (!HookedList.Contains("set_permadeathMode"))
            {
                HookedList.Add("set_permadeathMode");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_permadeathMode"), set_permadeathMode);
            }
        }

        internal static event Delegates.set_permadeathMode_BeforeArgs _beforeset_permadeathMode;
        internal static event Delegates.set_permadeathMode_NormalArgs _afterset_permadeathMode;

        private static void set_permadeathMode(Action<SaveStats, int> orig, SaveStats self, int value)
        {
            Delegates.Params_set_permadeathMode @params = new()
            {
                self = self, value = value
            };
            _beforeset_permadeathMode?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_permadeathMode != null) _afterset_permadeathMode.Invoke(@params);
        }

        internal static void Hookget_bossRushMode()
        {
            if (!HookedList.Contains("get_bossRushMode"))
            {
                HookedList.Add("get_bossRushMode");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_bossRushMode"), get_bossRushMode);
            }
        }

        internal static event Delegates.get_bossRushMode_BeforeArgs _beforeget_bossRushMode;
        internal static event Delegates.get_bossRushMode_NormalArgs _afterget_bossRushMode;

        private static bool get_bossRushMode(Func<SaveStats, bool> orig, SaveStats self)
        {
            Delegates.Params_get_bossRushMode @params = new()
            {
                self = self
            };
            _beforeget_bossRushMode?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_bossRushMode != null) retVal = _afterget_bossRushMode.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_bossRushMode()
        {
            if (!HookedList.Contains("set_bossRushMode"))
            {
                HookedList.Add("set_bossRushMode");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_bossRushMode"), set_bossRushMode);
            }
        }

        internal static event Delegates.set_bossRushMode_BeforeArgs _beforeset_bossRushMode;
        internal static event Delegates.set_bossRushMode_NormalArgs _afterset_bossRushMode;

        private static void set_bossRushMode(Action<SaveStats, bool> orig, SaveStats self, bool value)
        {
            Delegates.Params_set_bossRushMode @params = new()
            {
                self = self, value = value
            };
            _beforeset_bossRushMode?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_bossRushMode != null) _afterset_bossRushMode.Invoke(@params);
        }

        internal static void Hookget_completionPercentage()
        {
            if (!HookedList.Contains("get_completionPercentage"))
            {
                HookedList.Add("get_completionPercentage");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_completionPercentage"),
                    get_completionPercentage);
            }
        }

        internal static event Delegates.get_completionPercentage_BeforeArgs _beforeget_completionPercentage;
        internal static event Delegates.get_completionPercentage_NormalArgs _afterget_completionPercentage;

        private static float get_completionPercentage(Func<SaveStats, float> orig, SaveStats self)
        {
            Delegates.Params_get_completionPercentage @params = new()
            {
                self = self
            };
            _beforeget_completionPercentage?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_completionPercentage != null) retVal = _afterget_completionPercentage.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_completionPercentage()
        {
            if (!HookedList.Contains("set_completionPercentage"))
            {
                HookedList.Add("set_completionPercentage");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_completionPercentage"),
                    set_completionPercentage);
            }
        }

        internal static event Delegates.set_completionPercentage_BeforeArgs _beforeset_completionPercentage;
        internal static event Delegates.set_completionPercentage_NormalArgs _afterset_completionPercentage;

        private static void set_completionPercentage(Action<SaveStats, float> orig, SaveStats self, float value)
        {
            Delegates.Params_set_completionPercentage @params = new()
            {
                self = self, value = value
            };
            _beforeset_completionPercentage?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_completionPercentage != null) _afterset_completionPercentage.Invoke(@params);
        }

        internal static void Hookget_unlockedCompletionRate()
        {
            if (!HookedList.Contains("get_unlockedCompletionRate"))
            {
                HookedList.Add("get_unlockedCompletionRate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_unlockedCompletionRate"),
                    get_unlockedCompletionRate);
            }
        }

        internal static event Delegates.get_unlockedCompletionRate_BeforeArgs _beforeget_unlockedCompletionRate;
        internal static event Delegates.get_unlockedCompletionRate_NormalArgs _afterget_unlockedCompletionRate;

        private static bool get_unlockedCompletionRate(Func<SaveStats, bool> orig, SaveStats self)
        {
            Delegates.Params_get_unlockedCompletionRate @params = new()
            {
                self = self
            };
            _beforeget_unlockedCompletionRate?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_unlockedCompletionRate != null) retVal = _afterget_unlockedCompletionRate.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_unlockedCompletionRate()
        {
            if (!HookedList.Contains("set_unlockedCompletionRate"))
            {
                HookedList.Add("set_unlockedCompletionRate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_unlockedCompletionRate"),
                    set_unlockedCompletionRate);
            }
        }

        internal static event Delegates.set_unlockedCompletionRate_BeforeArgs _beforeset_unlockedCompletionRate;
        internal static event Delegates.set_unlockedCompletionRate_NormalArgs _afterset_unlockedCompletionRate;

        private static void set_unlockedCompletionRate(Action<SaveStats, bool> orig, SaveStats self, bool value)
        {
            Delegates.Params_set_unlockedCompletionRate @params = new()
            {
                self = self, value = value
            };
            _beforeset_unlockedCompletionRate?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_unlockedCompletionRate != null) _afterset_unlockedCompletionRate.Invoke(@params);
        }

        internal static void HookGetPlaytimeHHMM()
        {
            if (!HookedList.Contains("GetPlaytimeHHMM"))
            {
                HookedList.Add("GetPlaytimeHHMM");
                On.SaveStats.GetPlaytimeHHMM += GetPlaytimeHHMM;
            }
        }

        internal static event Delegates.GetPlaytimeHHMM_BeforeArgs _beforeGetPlaytimeHHMM;
        internal static event Delegates.GetPlaytimeHHMM_NormalArgs _afterGetPlaytimeHHMM;

        private static string GetPlaytimeHHMM(On.SaveStats.orig_GetPlaytimeHHMM orig, SaveStats self)
        {
            Delegates.Params_GetPlaytimeHHMM @params = new()
            {
                self = self
            };
            _beforeGetPlaytimeHHMM?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetPlaytimeHHMM != null) retVal = _afterGetPlaytimeHHMM.Invoke(@params);
            return retVal;
        }

        internal static void HookGetPlaytimeHHMMSS()
        {
            if (!HookedList.Contains("GetPlaytimeHHMMSS"))
            {
                HookedList.Add("GetPlaytimeHHMMSS");
                On.SaveStats.GetPlaytimeHHMMSS += GetPlaytimeHHMMSS;
            }
        }

        internal static event Delegates.GetPlaytimeHHMMSS_BeforeArgs _beforeGetPlaytimeHHMMSS;
        internal static event Delegates.GetPlaytimeHHMMSS_NormalArgs _afterGetPlaytimeHHMMSS;

        private static string GetPlaytimeHHMMSS(On.SaveStats.orig_GetPlaytimeHHMMSS orig, SaveStats self)
        {
            Delegates.Params_GetPlaytimeHHMMSS @params = new()
            {
                self = self
            };
            _beforeGetPlaytimeHHMMSS?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetPlaytimeHHMMSS != null) retVal = _afterGetPlaytimeHHMMSS.Invoke(@params);
            return retVal;
        }

        internal static void HookGetCompletionPercentage()
        {
            if (!HookedList.Contains("GetCompletionPercentage"))
            {
                HookedList.Add("GetCompletionPercentage");
                On.SaveStats.GetCompletionPercentage += GetCompletionPercentage;
            }
        }

        internal static event Delegates.GetCompletionPercentage_BeforeArgs _beforeGetCompletionPercentage;
        internal static event Delegates.GetCompletionPercentage_NormalArgs _afterGetCompletionPercentage;

        private static string GetCompletionPercentage(On.SaveStats.orig_GetCompletionPercentage orig, SaveStats self)
        {
            Delegates.Params_GetCompletionPercentage @params = new()
            {
                self = self
            };
            _beforeGetCompletionPercentage?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetCompletionPercentage != null) retVal = _afterGetCompletionPercentage.Invoke(@params);
            return retVal;
        }

        internal static void HookGetMPSlotsVisible()
        {
            if (!HookedList.Contains("GetMPSlotsVisible"))
            {
                HookedList.Add("GetMPSlotsVisible");
                On.SaveStats.GetMPSlotsVisible += GetMPSlotsVisible;
            }
        }

        internal static event Delegates.GetMPSlotsVisible_BeforeArgs _beforeGetMPSlotsVisible;
        internal static event Delegates.GetMPSlotsVisible_NormalArgs _afterGetMPSlotsVisible;

        private static int GetMPSlotsVisible(On.SaveStats.orig_GetMPSlotsVisible orig, SaveStats self)
        {
            Delegates.Params_GetMPSlotsVisible @params = new()
            {
                self = self
            };
            _beforeGetMPSlotsVisible?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetMPSlotsVisible != null) retVal = _afterGetMPSlotsVisible.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_LoadedMods()
        {
            if (!HookedList.Contains("get_LoadedMods"))
            {
                HookedList.Add("get_LoadedMods");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_LoadedMods"), get_LoadedMods);
            }
        }

        internal static event Delegates.get_LoadedMods_BeforeArgs _beforeget_LoadedMods;
        internal static event Delegates.get_LoadedMods_NormalArgs _afterget_LoadedMods;

        private static Dictionary<string, string> get_LoadedMods(Func<SaveStats, Dictionary<string, string>> orig,
            SaveStats self)
        {
            Delegates.Params_get_LoadedMods @params = new()
            {
                self = self
            };
            _beforeget_LoadedMods?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LoadedMods != null) retVal = _afterget_LoadedMods.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_LoadedMods()
        {
            if (!HookedList.Contains("set_LoadedMods"))
            {
                HookedList.Add("set_LoadedMods");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_LoadedMods"), set_LoadedMods);
            }
        }

        internal static event Delegates.set_LoadedMods_BeforeArgs _beforeset_LoadedMods;
        internal static event Delegates.set_LoadedMods_NormalArgs _afterset_LoadedMods;

        private static void set_LoadedMods(Action<SaveStats, Dictionary<string, string>> orig, SaveStats self,
            Dictionary<string, string> value)
        {
            Delegates.Params_set_LoadedMods @params = new()
            {
                self = self, value = value
            };
            _beforeset_LoadedMods?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_LoadedMods != null) _afterset_LoadedMods.Invoke(@params);
        }

        internal static void Hookget_Name()
        {
            if (!HookedList.Contains("get_Name"))
            {
                HookedList.Add("get_Name");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_Name"), get_Name);
            }
        }

        internal static event Delegates.get_Name_BeforeArgs _beforeget_Name;
        internal static event Delegates.get_Name_NormalArgs _afterget_Name;

        private static string get_Name(Func<SaveStats, string> orig, SaveStats self)
        {
            Delegates.Params_get_Name @params = new()
            {
                self = self
            };
            _beforeget_Name?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Name != null) retVal = _afterget_Name.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Name()
        {
            if (!HookedList.Contains("set_Name"))
            {
                HookedList.Add("set_Name");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_Name"), set_Name);
            }
        }

        internal static event Delegates.set_Name_BeforeArgs _beforeset_Name;
        internal static event Delegates.set_Name_NormalArgs _afterset_Name;

        private static void set_Name(Action<SaveStats, string> orig, SaveStats self, string value)
        {
            Delegates.Params_set_Name @params = new()
            {
                self = self, value = value
            };
            _beforeset_Name?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Name != null) _afterset_Name.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_bossRushMode_BeforeArgs(Params_get_bossRushMode args);

        public delegate bool get_bossRushMode_NormalArgs(Params_get_bossRushMode args);

        public delegate void get_completionPercentage_BeforeArgs(Params_get_completionPercentage args);

        public delegate float get_completionPercentage_NormalArgs(Params_get_completionPercentage args);

        public delegate void get_geo_BeforeArgs(Params_get_geo args);

        public delegate int get_geo_NormalArgs(Params_get_geo args);

        public delegate void get_LoadedMods_BeforeArgs(Params_get_LoadedMods args);

        public delegate Dictionary<string, string> get_LoadedMods_NormalArgs(Params_get_LoadedMods args);

        public delegate void get_mapZone_BeforeArgs(Params_get_mapZone args);

        public delegate MapZone get_mapZone_NormalArgs(Params_get_mapZone args);

        public delegate void get_maxHealth_BeforeArgs(Params_get_maxHealth args);

        public delegate int get_maxHealth_NormalArgs(Params_get_maxHealth args);

        public delegate void get_maxMPReserve_BeforeArgs(Params_get_maxMPReserve args);

        public delegate int get_maxMPReserve_NormalArgs(Params_get_maxMPReserve args);

        public delegate void get_Name_BeforeArgs(Params_get_Name args);

        public delegate string get_Name_NormalArgs(Params_get_Name args);

        public delegate void get_permadeathMode_BeforeArgs(Params_get_permadeathMode args);

        public delegate int get_permadeathMode_NormalArgs(Params_get_permadeathMode args);

        public delegate void get_playTime_BeforeArgs(Params_get_playTime args);

        public delegate float get_playTime_NormalArgs(Params_get_playTime args);

        public delegate void get_unlockedCompletionRate_BeforeArgs(Params_get_unlockedCompletionRate args);

        public delegate bool get_unlockedCompletionRate_NormalArgs(Params_get_unlockedCompletionRate args);

        public delegate void GetCompletionPercentage_BeforeArgs(Params_GetCompletionPercentage args);

        public delegate string GetCompletionPercentage_NormalArgs(Params_GetCompletionPercentage args);

        public delegate void GetMPSlotsVisible_BeforeArgs(Params_GetMPSlotsVisible args);

        public delegate int GetMPSlotsVisible_NormalArgs(Params_GetMPSlotsVisible args);

        public delegate void GetPlaytimeHHMM_BeforeArgs(Params_GetPlaytimeHHMM args);

        public delegate string GetPlaytimeHHMM_NormalArgs(Params_GetPlaytimeHHMM args);

        public delegate void GetPlaytimeHHMMSS_BeforeArgs(Params_GetPlaytimeHHMMSS args);

        public delegate string GetPlaytimeHHMMSS_NormalArgs(Params_GetPlaytimeHHMMSS args);

        public delegate void set_bossRushMode_BeforeArgs(Params_set_bossRushMode args);

        public delegate void set_bossRushMode_NormalArgs(Params_set_bossRushMode args);

        public delegate void set_completionPercentage_BeforeArgs(Params_set_completionPercentage args);

        public delegate void set_completionPercentage_NormalArgs(Params_set_completionPercentage args);

        public delegate void set_geo_BeforeArgs(Params_set_geo args);

        public delegate void set_geo_NormalArgs(Params_set_geo args);

        public delegate void set_LoadedMods_BeforeArgs(Params_set_LoadedMods args);

        public delegate void set_LoadedMods_NormalArgs(Params_set_LoadedMods args);

        public delegate void set_mapZone_BeforeArgs(Params_set_mapZone args);

        public delegate void set_mapZone_NormalArgs(Params_set_mapZone args);

        public delegate void set_maxHealth_BeforeArgs(Params_set_maxHealth args);

        public delegate void set_maxHealth_NormalArgs(Params_set_maxHealth args);

        public delegate void set_maxMPReserve_BeforeArgs(Params_set_maxMPReserve args);

        public delegate void set_maxMPReserve_NormalArgs(Params_set_maxMPReserve args);

        public delegate void set_Name_BeforeArgs(Params_set_Name args);

        public delegate void set_Name_NormalArgs(Params_set_Name args);

        public delegate void set_permadeathMode_BeforeArgs(Params_set_permadeathMode args);

        public delegate void set_permadeathMode_NormalArgs(Params_set_permadeathMode args);

        public delegate void set_playTime_BeforeArgs(Params_set_playTime args);

        public delegate void set_playTime_NormalArgs(Params_set_playTime args);

        public delegate void set_unlockedCompletionRate_BeforeArgs(Params_set_unlockedCompletionRate args);

        public delegate void set_unlockedCompletionRate_NormalArgs(Params_set_unlockedCompletionRate args);

        public sealed class Params_get_maxHealth
        {
            public SaveStats self;
        }

        public sealed class Params_set_maxHealth
        {
            public SaveStats self;
            public int value;
        }

        public sealed class Params_get_geo
        {
            public SaveStats self;
        }

        public sealed class Params_set_geo
        {
            public SaveStats self;
            public int value;
        }

        public sealed class Params_get_mapZone
        {
            public SaveStats self;
        }

        public sealed class Params_set_mapZone
        {
            public SaveStats self;
            public MapZone value;
        }

        public sealed class Params_get_playTime
        {
            public SaveStats self;
        }

        public sealed class Params_set_playTime
        {
            public SaveStats self;
            public float value;
        }

        public sealed class Params_get_maxMPReserve
        {
            public SaveStats self;
        }

        public sealed class Params_set_maxMPReserve
        {
            public SaveStats self;
            public int value;
        }

        public sealed class Params_get_permadeathMode
        {
            public SaveStats self;
        }

        public sealed class Params_set_permadeathMode
        {
            public SaveStats self;
            public int value;
        }

        public sealed class Params_get_bossRushMode
        {
            public SaveStats self;
        }

        public sealed class Params_set_bossRushMode
        {
            public SaveStats self;
            public bool value;
        }

        public sealed class Params_get_completionPercentage
        {
            public SaveStats self;
        }

        public sealed class Params_set_completionPercentage
        {
            public SaveStats self;
            public float value;
        }

        public sealed class Params_get_unlockedCompletionRate
        {
            public SaveStats self;
        }

        public sealed class Params_set_unlockedCompletionRate
        {
            public SaveStats self;
            public bool value;
        }

        public sealed class Params_GetPlaytimeHHMM
        {
            public SaveStats self;
        }

        public sealed class Params_GetPlaytimeHHMMSS
        {
            public SaveStats self;
        }

        public sealed class Params_GetCompletionPercentage
        {
            public SaveStats self;
        }

        public sealed class Params_GetMPSlotsVisible
        {
            public SaveStats self;
        }

        public sealed class Params_get_LoadedMods
        {
            public SaveStats self;
        }

        public sealed class Params_set_LoadedMods
        {
            public SaveStats self;
            public Dictionary<string, string> value;
        }

        public sealed class Params_get_Name
        {
            public SaveStats self;
        }

        public sealed class Params_set_Name
        {
            public SaveStats self;
            public string value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_maxHealth_BeforeArgs get_maxHealth
        {
            add
            {
                HookHandler._beforeget_maxHealth += value;
                HookHandler.Hookget_maxHealth();
            }
            remove => HookHandler._beforeget_maxHealth -= value;
        }

        public static event Delegates.set_maxHealth_BeforeArgs set_maxHealth
        {
            add
            {
                HookHandler._beforeset_maxHealth += value;
                HookHandler.Hookset_maxHealth();
            }
            remove => HookHandler._beforeset_maxHealth -= value;
        }

        public static event Delegates.get_geo_BeforeArgs get_geo
        {
            add
            {
                HookHandler._beforeget_geo += value;
                HookHandler.Hookget_geo();
            }
            remove => HookHandler._beforeget_geo -= value;
        }

        public static event Delegates.set_geo_BeforeArgs set_geo
        {
            add
            {
                HookHandler._beforeset_geo += value;
                HookHandler.Hookset_geo();
            }
            remove => HookHandler._beforeset_geo -= value;
        }

        public static event Delegates.get_mapZone_BeforeArgs get_mapZone
        {
            add
            {
                HookHandler._beforeget_mapZone += value;
                HookHandler.Hookget_mapZone();
            }
            remove => HookHandler._beforeget_mapZone -= value;
        }

        public static event Delegates.set_mapZone_BeforeArgs set_mapZone
        {
            add
            {
                HookHandler._beforeset_mapZone += value;
                HookHandler.Hookset_mapZone();
            }
            remove => HookHandler._beforeset_mapZone -= value;
        }

        public static event Delegates.get_playTime_BeforeArgs get_playTime
        {
            add
            {
                HookHandler._beforeget_playTime += value;
                HookHandler.Hookget_playTime();
            }
            remove => HookHandler._beforeget_playTime -= value;
        }

        public static event Delegates.set_playTime_BeforeArgs set_playTime
        {
            add
            {
                HookHandler._beforeset_playTime += value;
                HookHandler.Hookset_playTime();
            }
            remove => HookHandler._beforeset_playTime -= value;
        }

        public static event Delegates.get_maxMPReserve_BeforeArgs get_maxMPReserve
        {
            add
            {
                HookHandler._beforeget_maxMPReserve += value;
                HookHandler.Hookget_maxMPReserve();
            }
            remove => HookHandler._beforeget_maxMPReserve -= value;
        }

        public static event Delegates.set_maxMPReserve_BeforeArgs set_maxMPReserve
        {
            add
            {
                HookHandler._beforeset_maxMPReserve += value;
                HookHandler.Hookset_maxMPReserve();
            }
            remove => HookHandler._beforeset_maxMPReserve -= value;
        }

        public static event Delegates.get_permadeathMode_BeforeArgs get_permadeathMode
        {
            add
            {
                HookHandler._beforeget_permadeathMode += value;
                HookHandler.Hookget_permadeathMode();
            }
            remove => HookHandler._beforeget_permadeathMode -= value;
        }

        public static event Delegates.set_permadeathMode_BeforeArgs set_permadeathMode
        {
            add
            {
                HookHandler._beforeset_permadeathMode += value;
                HookHandler.Hookset_permadeathMode();
            }
            remove => HookHandler._beforeset_permadeathMode -= value;
        }

        public static event Delegates.get_bossRushMode_BeforeArgs get_bossRushMode
        {
            add
            {
                HookHandler._beforeget_bossRushMode += value;
                HookHandler.Hookget_bossRushMode();
            }
            remove => HookHandler._beforeget_bossRushMode -= value;
        }

        public static event Delegates.set_bossRushMode_BeforeArgs set_bossRushMode
        {
            add
            {
                HookHandler._beforeset_bossRushMode += value;
                HookHandler.Hookset_bossRushMode();
            }
            remove => HookHandler._beforeset_bossRushMode -= value;
        }

        public static event Delegates.get_completionPercentage_BeforeArgs get_completionPercentage
        {
            add
            {
                HookHandler._beforeget_completionPercentage += value;
                HookHandler.Hookget_completionPercentage();
            }
            remove => HookHandler._beforeget_completionPercentage -= value;
        }

        public static event Delegates.set_completionPercentage_BeforeArgs set_completionPercentage
        {
            add
            {
                HookHandler._beforeset_completionPercentage += value;
                HookHandler.Hookset_completionPercentage();
            }
            remove => HookHandler._beforeset_completionPercentage -= value;
        }

        public static event Delegates.get_unlockedCompletionRate_BeforeArgs get_unlockedCompletionRate
        {
            add
            {
                HookHandler._beforeget_unlockedCompletionRate += value;
                HookHandler.Hookget_unlockedCompletionRate();
            }
            remove => HookHandler._beforeget_unlockedCompletionRate -= value;
        }

        public static event Delegates.set_unlockedCompletionRate_BeforeArgs set_unlockedCompletionRate
        {
            add
            {
                HookHandler._beforeset_unlockedCompletionRate += value;
                HookHandler.Hookset_unlockedCompletionRate();
            }
            remove => HookHandler._beforeset_unlockedCompletionRate -= value;
        }

        public static event Delegates.GetPlaytimeHHMM_BeforeArgs GetPlaytimeHHMM
        {
            add
            {
                HookHandler._beforeGetPlaytimeHHMM += value;
                HookHandler.HookGetPlaytimeHHMM();
            }
            remove => HookHandler._beforeGetPlaytimeHHMM -= value;
        }

        public static event Delegates.GetPlaytimeHHMMSS_BeforeArgs GetPlaytimeHHMMSS
        {
            add
            {
                HookHandler._beforeGetPlaytimeHHMMSS += value;
                HookHandler.HookGetPlaytimeHHMMSS();
            }
            remove => HookHandler._beforeGetPlaytimeHHMMSS -= value;
        }

        public static event Delegates.GetCompletionPercentage_BeforeArgs GetCompletionPercentage
        {
            add
            {
                HookHandler._beforeGetCompletionPercentage += value;
                HookHandler.HookGetCompletionPercentage();
            }
            remove => HookHandler._beforeGetCompletionPercentage -= value;
        }

        public static event Delegates.GetMPSlotsVisible_BeforeArgs GetMPSlotsVisible
        {
            add
            {
                HookHandler._beforeGetMPSlotsVisible += value;
                HookHandler.HookGetMPSlotsVisible();
            }
            remove => HookHandler._beforeGetMPSlotsVisible -= value;
        }

        public static event Delegates.get_LoadedMods_BeforeArgs get_LoadedMods
        {
            add
            {
                HookHandler._beforeget_LoadedMods += value;
                HookHandler.Hookget_LoadedMods();
            }
            remove => HookHandler._beforeget_LoadedMods -= value;
        }

        public static event Delegates.set_LoadedMods_BeforeArgs set_LoadedMods
        {
            add
            {
                HookHandler._beforeset_LoadedMods += value;
                HookHandler.Hookset_LoadedMods();
            }
            remove => HookHandler._beforeset_LoadedMods -= value;
        }

        public static event Delegates.get_Name_BeforeArgs get_Name
        {
            add
            {
                HookHandler._beforeget_Name += value;
                HookHandler.Hookget_Name();
            }
            remove => HookHandler._beforeget_Name -= value;
        }

        public static event Delegates.set_Name_BeforeArgs set_Name
        {
            add
            {
                HookHandler._beforeset_Name += value;
                HookHandler.Hookset_Name();
            }
            remove => HookHandler._beforeset_Name -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_maxHealth_NormalArgs get_maxHealth
        {
            add
            {
                HookHandler._afterget_maxHealth += value;
                HookHandler.Hookget_maxHealth();
            }
            remove => HookHandler._afterget_maxHealth -= value;
        }

        public static event Delegates.set_maxHealth_NormalArgs set_maxHealth
        {
            add
            {
                HookHandler._afterset_maxHealth += value;
                HookHandler.Hookset_maxHealth();
            }
            remove => HookHandler._afterset_maxHealth -= value;
        }

        public static event Delegates.get_geo_NormalArgs get_geo
        {
            add
            {
                HookHandler._afterget_geo += value;
                HookHandler.Hookget_geo();
            }
            remove => HookHandler._afterget_geo -= value;
        }

        public static event Delegates.set_geo_NormalArgs set_geo
        {
            add
            {
                HookHandler._afterset_geo += value;
                HookHandler.Hookset_geo();
            }
            remove => HookHandler._afterset_geo -= value;
        }

        public static event Delegates.get_mapZone_NormalArgs get_mapZone
        {
            add
            {
                HookHandler._afterget_mapZone += value;
                HookHandler.Hookget_mapZone();
            }
            remove => HookHandler._afterget_mapZone -= value;
        }

        public static event Delegates.set_mapZone_NormalArgs set_mapZone
        {
            add
            {
                HookHandler._afterset_mapZone += value;
                HookHandler.Hookset_mapZone();
            }
            remove => HookHandler._afterset_mapZone -= value;
        }

        public static event Delegates.get_playTime_NormalArgs get_playTime
        {
            add
            {
                HookHandler._afterget_playTime += value;
                HookHandler.Hookget_playTime();
            }
            remove => HookHandler._afterget_playTime -= value;
        }

        public static event Delegates.set_playTime_NormalArgs set_playTime
        {
            add
            {
                HookHandler._afterset_playTime += value;
                HookHandler.Hookset_playTime();
            }
            remove => HookHandler._afterset_playTime -= value;
        }

        public static event Delegates.get_maxMPReserve_NormalArgs get_maxMPReserve
        {
            add
            {
                HookHandler._afterget_maxMPReserve += value;
                HookHandler.Hookget_maxMPReserve();
            }
            remove => HookHandler._afterget_maxMPReserve -= value;
        }

        public static event Delegates.set_maxMPReserve_NormalArgs set_maxMPReserve
        {
            add
            {
                HookHandler._afterset_maxMPReserve += value;
                HookHandler.Hookset_maxMPReserve();
            }
            remove => HookHandler._afterset_maxMPReserve -= value;
        }

        public static event Delegates.get_permadeathMode_NormalArgs get_permadeathMode
        {
            add
            {
                HookHandler._afterget_permadeathMode += value;
                HookHandler.Hookget_permadeathMode();
            }
            remove => HookHandler._afterget_permadeathMode -= value;
        }

        public static event Delegates.set_permadeathMode_NormalArgs set_permadeathMode
        {
            add
            {
                HookHandler._afterset_permadeathMode += value;
                HookHandler.Hookset_permadeathMode();
            }
            remove => HookHandler._afterset_permadeathMode -= value;
        }

        public static event Delegates.get_bossRushMode_NormalArgs get_bossRushMode
        {
            add
            {
                HookHandler._afterget_bossRushMode += value;
                HookHandler.Hookget_bossRushMode();
            }
            remove => HookHandler._afterget_bossRushMode -= value;
        }

        public static event Delegates.set_bossRushMode_NormalArgs set_bossRushMode
        {
            add
            {
                HookHandler._afterset_bossRushMode += value;
                HookHandler.Hookset_bossRushMode();
            }
            remove => HookHandler._afterset_bossRushMode -= value;
        }

        public static event Delegates.get_completionPercentage_NormalArgs get_completionPercentage
        {
            add
            {
                HookHandler._afterget_completionPercentage += value;
                HookHandler.Hookget_completionPercentage();
            }
            remove => HookHandler._afterget_completionPercentage -= value;
        }

        public static event Delegates.set_completionPercentage_NormalArgs set_completionPercentage
        {
            add
            {
                HookHandler._afterset_completionPercentage += value;
                HookHandler.Hookset_completionPercentage();
            }
            remove => HookHandler._afterset_completionPercentage -= value;
        }

        public static event Delegates.get_unlockedCompletionRate_NormalArgs get_unlockedCompletionRate
        {
            add
            {
                HookHandler._afterget_unlockedCompletionRate += value;
                HookHandler.Hookget_unlockedCompletionRate();
            }
            remove => HookHandler._afterget_unlockedCompletionRate -= value;
        }

        public static event Delegates.set_unlockedCompletionRate_NormalArgs set_unlockedCompletionRate
        {
            add
            {
                HookHandler._afterset_unlockedCompletionRate += value;
                HookHandler.Hookset_unlockedCompletionRate();
            }
            remove => HookHandler._afterset_unlockedCompletionRate -= value;
        }

        public static event Delegates.GetPlaytimeHHMM_NormalArgs GetPlaytimeHHMM
        {
            add
            {
                HookHandler._afterGetPlaytimeHHMM += value;
                HookHandler.HookGetPlaytimeHHMM();
            }
            remove => HookHandler._afterGetPlaytimeHHMM -= value;
        }

        public static event Delegates.GetPlaytimeHHMMSS_NormalArgs GetPlaytimeHHMMSS
        {
            add
            {
                HookHandler._afterGetPlaytimeHHMMSS += value;
                HookHandler.HookGetPlaytimeHHMMSS();
            }
            remove => HookHandler._afterGetPlaytimeHHMMSS -= value;
        }

        public static event Delegates.GetCompletionPercentage_NormalArgs GetCompletionPercentage
        {
            add
            {
                HookHandler._afterGetCompletionPercentage += value;
                HookHandler.HookGetCompletionPercentage();
            }
            remove => HookHandler._afterGetCompletionPercentage -= value;
        }

        public static event Delegates.GetMPSlotsVisible_NormalArgs GetMPSlotsVisible
        {
            add
            {
                HookHandler._afterGetMPSlotsVisible += value;
                HookHandler.HookGetMPSlotsVisible();
            }
            remove => HookHandler._afterGetMPSlotsVisible -= value;
        }

        public static event Delegates.get_LoadedMods_NormalArgs get_LoadedMods
        {
            add
            {
                HookHandler._afterget_LoadedMods += value;
                HookHandler.Hookget_LoadedMods();
            }
            remove => HookHandler._afterget_LoadedMods -= value;
        }

        public static event Delegates.set_LoadedMods_NormalArgs set_LoadedMods
        {
            add
            {
                HookHandler._afterset_LoadedMods += value;
                HookHandler.Hookset_LoadedMods();
            }
            remove => HookHandler._afterset_LoadedMods -= value;
        }

        public static event Delegates.get_Name_NormalArgs get_Name
        {
            add
            {
                HookHandler._afterget_Name += value;
                HookHandler.Hookget_Name();
            }
            remove => HookHandler._afterget_Name -= value;
        }

        public static event Delegates.set_Name_NormalArgs set_Name
        {
            add
            {
                HookHandler._afterset_Name += value;
                HookHandler.Hookset_Name();
            }
            remove => HookHandler._afterset_Name -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_maxHealth_NormalArgs get_maxHealth
        {
            add => HookEndpointManager.Add<Delegates.get_maxHealth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_maxHealth"), value);
            remove => HookEndpointManager.Remove<Delegates.get_maxHealth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_maxHealth"), value);
        }

        public static event Delegates.set_maxHealth_NormalArgs set_maxHealth
        {
            add => HookEndpointManager.Add<Delegates.set_maxHealth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_maxHealth"), value);
            remove => HookEndpointManager.Remove<Delegates.set_maxHealth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_maxHealth"), value);
        }

        public static event Delegates.get_geo_NormalArgs get_geo
        {
            add => HookEndpointManager.Add<Delegates.get_geo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_geo"), value);
            remove => HookEndpointManager.Remove<Delegates.get_geo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_geo"), value);
        }

        public static event Delegates.set_geo_NormalArgs set_geo
        {
            add => HookEndpointManager.Add<Delegates.set_geo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_geo"), value);
            remove => HookEndpointManager.Remove<Delegates.set_geo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_geo"), value);
        }

        public static event Delegates.get_mapZone_NormalArgs get_mapZone
        {
            add => HookEndpointManager.Add<Delegates.get_mapZone_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_mapZone"), value);
            remove => HookEndpointManager.Remove<Delegates.get_mapZone_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_mapZone"), value);
        }

        public static event Delegates.set_mapZone_NormalArgs set_mapZone
        {
            add => HookEndpointManager.Add<Delegates.set_mapZone_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_mapZone"), value);
            remove => HookEndpointManager.Remove<Delegates.set_mapZone_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_mapZone"), value);
        }

        public static event Delegates.get_playTime_NormalArgs get_playTime
        {
            add => HookEndpointManager.Add<Delegates.get_playTime_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_playTime"), value);
            remove => HookEndpointManager.Remove<Delegates.get_playTime_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_playTime"), value);
        }

        public static event Delegates.set_playTime_NormalArgs set_playTime
        {
            add => HookEndpointManager.Add<Delegates.set_playTime_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_playTime"), value);
            remove => HookEndpointManager.Remove<Delegates.set_playTime_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_playTime"), value);
        }

        public static event Delegates.get_maxMPReserve_NormalArgs get_maxMPReserve
        {
            add => HookEndpointManager.Add<Delegates.get_maxMPReserve_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_maxMPReserve"), value);
            remove => HookEndpointManager.Remove<Delegates.get_maxMPReserve_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_maxMPReserve"), value);
        }

        public static event Delegates.set_maxMPReserve_NormalArgs set_maxMPReserve
        {
            add => HookEndpointManager.Add<Delegates.set_maxMPReserve_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_maxMPReserve"), value);
            remove => HookEndpointManager.Remove<Delegates.set_maxMPReserve_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_maxMPReserve"), value);
        }

        public static event Delegates.get_permadeathMode_NormalArgs get_permadeathMode
        {
            add => HookEndpointManager.Add<Delegates.get_permadeathMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_permadeathMode"), value);
            remove => HookEndpointManager.Remove<Delegates.get_permadeathMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_permadeathMode"), value);
        }

        public static event Delegates.set_permadeathMode_NormalArgs set_permadeathMode
        {
            add => HookEndpointManager.Add<Delegates.set_permadeathMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_permadeathMode"), value);
            remove => HookEndpointManager.Remove<Delegates.set_permadeathMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_permadeathMode"), value);
        }

        public static event Delegates.get_bossRushMode_NormalArgs get_bossRushMode
        {
            add => HookEndpointManager.Add<Delegates.get_bossRushMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_bossRushMode"), value);
            remove => HookEndpointManager.Remove<Delegates.get_bossRushMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_bossRushMode"), value);
        }

        public static event Delegates.set_bossRushMode_NormalArgs set_bossRushMode
        {
            add => HookEndpointManager.Add<Delegates.set_bossRushMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_bossRushMode"), value);
            remove => HookEndpointManager.Remove<Delegates.set_bossRushMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_bossRushMode"), value);
        }

        public static event Delegates.get_completionPercentage_NormalArgs get_completionPercentage
        {
            add => HookEndpointManager.Add<Delegates.get_completionPercentage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_completionPercentage"), value);
            remove => HookEndpointManager.Remove<Delegates.get_completionPercentage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_completionPercentage"), value);
        }

        public static event Delegates.set_completionPercentage_NormalArgs set_completionPercentage
        {
            add => HookEndpointManager.Add<Delegates.set_completionPercentage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_completionPercentage"), value);
            remove => HookEndpointManager.Remove<Delegates.set_completionPercentage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_completionPercentage"), value);
        }

        public static event Delegates.get_unlockedCompletionRate_NormalArgs get_unlockedCompletionRate
        {
            add => HookEndpointManager.Add<Delegates.get_unlockedCompletionRate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_unlockedCompletionRate"), value);
            remove => HookEndpointManager.Remove<Delegates.get_unlockedCompletionRate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_unlockedCompletionRate"), value);
        }

        public static event Delegates.set_unlockedCompletionRate_NormalArgs set_unlockedCompletionRate
        {
            add => HookEndpointManager.Add<Delegates.set_unlockedCompletionRate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_unlockedCompletionRate"), value);
            remove => HookEndpointManager.Remove<Delegates.set_unlockedCompletionRate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_unlockedCompletionRate"), value);
        }

        public static event On.SaveStats.hook_GetPlaytimeHHMM GetPlaytimeHHMM
        {
            add => On.SaveStats.GetPlaytimeHHMM += value;
            remove => On.SaveStats.GetPlaytimeHHMM -= value;
        }

        public static event On.SaveStats.hook_GetPlaytimeHHMMSS GetPlaytimeHHMMSS
        {
            add => On.SaveStats.GetPlaytimeHHMMSS += value;
            remove => On.SaveStats.GetPlaytimeHHMMSS -= value;
        }

        public static event On.SaveStats.hook_GetCompletionPercentage GetCompletionPercentage
        {
            add => On.SaveStats.GetCompletionPercentage += value;
            remove => On.SaveStats.GetCompletionPercentage -= value;
        }

        public static event On.SaveStats.hook_GetMPSlotsVisible GetMPSlotsVisible
        {
            add => On.SaveStats.GetMPSlotsVisible += value;
            remove => On.SaveStats.GetMPSlotsVisible -= value;
        }

        public static event Delegates.get_LoadedMods_NormalArgs get_LoadedMods
        {
            add => HookEndpointManager.Add<Delegates.get_LoadedMods_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_LoadedMods"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LoadedMods_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_LoadedMods"), value);
        }

        public static event Delegates.set_LoadedMods_NormalArgs set_LoadedMods
        {
            add => HookEndpointManager.Add<Delegates.set_LoadedMods_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_LoadedMods"), value);
            remove => HookEndpointManager.Remove<Delegates.set_LoadedMods_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_LoadedMods"), value);
        }

        public static event Delegates.get_Name_NormalArgs get_Name
        {
            add => HookEndpointManager.Add<Delegates.get_Name_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_Name"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Name_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "get_Name"), value);
        }

        public static event Delegates.set_Name_NormalArgs set_Name
        {
            add => HookEndpointManager.Add<Delegates.set_Name_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_Name"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Name_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveStats), "set_Name"), value);
        }
    }
}