using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for VibrationManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnVibrationManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_IsMuted()
        {
            if (!HookedList.Contains("get_IsMuted"))
            {
                HookedList.Add("get_IsMuted");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(VibrationManager), "get_IsMuted", false), get_IsMuted);
            }
        }

        internal static event Delegates.get_IsMuted_BeforeArgs _beforeget_IsMuted;
        internal static event Delegates.get_IsMuted_AfterArgs _afterget_IsMuted;

        private static bool get_IsMuted(Func<bool> orig)
        {
            if (_beforeget_IsMuted != null)
                foreach (Delegates.get_IsMuted_BeforeArgs toInvoke in _beforeget_IsMuted.GetInvocationList())
                    try
                    {
                        _beforeget_IsMuted?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_IsMuted != null)
                foreach (Delegates.get_IsMuted_AfterArgs toInvoke in _afterget_IsMuted.GetInvocationList())
                    try
                    {
                        retVal = _afterget_IsMuted.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_IsMuted()
        {
            if (!HookedList.Contains("set_IsMuted"))
            {
                HookedList.Add("set_IsMuted");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(VibrationManager), "set_IsMuted", false), set_IsMuted);
            }
        }

        internal static event Delegates.set_IsMuted_BeforeArgs _beforeset_IsMuted;
        internal static event Delegates.set_IsMuted_AfterArgs _afterset_IsMuted;

        private static void set_IsMuted(Action<bool> orig, bool value)
        {
            Delegates.Params_set_IsMuted @params = new()
            {
                value = value
            };
            if (_beforeset_IsMuted != null)
                foreach (Delegates.set_IsMuted_BeforeArgs toInvoke in _beforeset_IsMuted.GetInvocationList())
                    try
                    {
                        _beforeset_IsMuted?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_IsMuted != null)
                foreach (Delegates.set_IsMuted_AfterArgs toInvoke in _afterset_IsMuted.GetInvocationList())
                    try
                    {
                        _afterset_IsMuted.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetMixer()
        {
            if (!HookedList.Contains("GetMixer"))
            {
                HookedList.Add("GetMixer");
                On.VibrationManager.GetMixer += GetMixer;
            }
        }

        internal static event Delegates.GetMixer_BeforeArgs _beforeGetMixer;
        internal static event Delegates.GetMixer_AfterArgs _afterGetMixer;

        private static VibrationMixer GetMixer(On.VibrationManager.orig_GetMixer orig)
        {
            if (_beforeGetMixer != null)
                foreach (Delegates.GetMixer_BeforeArgs toInvoke in _beforeGetMixer.GetInvocationList())
                    try
                    {
                        _beforeGetMixer?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterGetMixer != null)
                foreach (Delegates.GetMixer_AfterArgs toInvoke in _afterGetMixer.GetInvocationList())
                    try
                    {
                        retVal = _afterGetMixer.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookPlayVibrationClipOneShot()
        {
            if (!HookedList.Contains("PlayVibrationClipOneShot"))
            {
                HookedList.Add("PlayVibrationClipOneShot");
                On.VibrationManager.PlayVibrationClipOneShot += PlayVibrationClipOneShot;
            }
        }

        internal static event Delegates.PlayVibrationClipOneShot_BeforeArgs _beforePlayVibrationClipOneShot;
        internal static event Delegates.PlayVibrationClipOneShot_AfterArgs _afterPlayVibrationClipOneShot;

        private static VibrationEmission PlayVibrationClipOneShot(
            On.VibrationManager.orig_PlayVibrationClipOneShot orig, VibrationData vibrationData,
            VibrationTarget? vibrationTarget, bool isLooping, string tag)
        {
            Delegates.Params_PlayVibrationClipOneShot @params = new()
            {
                vibrationData = vibrationData, vibrationTarget = vibrationTarget, isLooping = isLooping, tag = tag
            };
            if (_beforePlayVibrationClipOneShot != null)
                foreach (Delegates.PlayVibrationClipOneShot_BeforeArgs toInvoke in _beforePlayVibrationClipOneShot
                             .GetInvocationList())
                    try
                    {
                        _beforePlayVibrationClipOneShot?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            vibrationData = @params.vibrationData;
            vibrationTarget = @params.vibrationTarget;
            isLooping = @params.isLooping;
            tag = @params.tag;
            var retVal = orig(vibrationData, vibrationTarget, isLooping, tag);
            if (_afterPlayVibrationClipOneShot != null)
                foreach (Delegates.PlayVibrationClipOneShot_AfterArgs toInvoke in _afterPlayVibrationClipOneShot
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterPlayVibrationClipOneShot.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookStopAllVibration()
        {
            if (!HookedList.Contains("StopAllVibration"))
            {
                HookedList.Add("StopAllVibration");
                On.VibrationManager.StopAllVibration += StopAllVibration;
            }
        }

        internal static event Delegates.StopAllVibration_BeforeArgs _beforeStopAllVibration;
        internal static event Delegates.StopAllVibration_AfterArgs _afterStopAllVibration;

        private static void StopAllVibration(On.VibrationManager.orig_StopAllVibration orig)
        {
            if (_beforeStopAllVibration != null)
                foreach (Delegates.StopAllVibration_BeforeArgs toInvoke in _beforeStopAllVibration.GetInvocationList())
                    try
                    {
                        _beforeStopAllVibration?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterStopAllVibration != null)
                foreach (Delegates.StopAllVibration_AfterArgs toInvoke in _afterStopAllVibration.GetInvocationList())
                    try
                    {
                        _afterStopAllVibration.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStopAllVibrationsWithTag()
        {
            if (!HookedList.Contains("StopAllVibrationsWithTag"))
            {
                HookedList.Add("StopAllVibrationsWithTag");
                On.VibrationManager.StopAllVibrationsWithTag += StopAllVibrationsWithTag;
            }
        }

        internal static event Delegates.StopAllVibrationsWithTag_BeforeArgs _beforeStopAllVibrationsWithTag;
        internal static event Delegates.StopAllVibrationsWithTag_AfterArgs _afterStopAllVibrationsWithTag;

        private static void StopAllVibrationsWithTag(On.VibrationManager.orig_StopAllVibrationsWithTag orig, string tag)
        {
            Delegates.Params_StopAllVibrationsWithTag @params = new()
            {
                tag = tag
            };
            if (_beforeStopAllVibrationsWithTag != null)
                foreach (Delegates.StopAllVibrationsWithTag_BeforeArgs toInvoke in _beforeStopAllVibrationsWithTag
                             .GetInvocationList())
                    try
                    {
                        _beforeStopAllVibrationsWithTag?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            tag = @params.tag;
            orig(tag);
            if (_afterStopAllVibrationsWithTag != null)
                foreach (Delegates.StopAllVibrationsWithTag_AfterArgs toInvoke in _afterStopAllVibrationsWithTag
                             .GetInvocationList())
                    try
                    {
                        _afterStopAllVibrationsWithTag.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate bool get_IsMuted_AfterArgs(bool ret);

        public delegate void get_IsMuted_BeforeArgs();

        public delegate bool get_IsMuted_WithArgs(Func<bool> orig);

        public delegate VibrationMixer GetMixer_AfterArgs(VibrationMixer ret);

        public delegate void GetMixer_BeforeArgs();

        public delegate VibrationMixer GetMixer_WithArgs(Func<VibrationMixer> orig);

        public delegate VibrationEmission PlayVibrationClipOneShot_AfterArgs(Params_PlayVibrationClipOneShot args,
            VibrationEmission ret);

        public delegate void PlayVibrationClipOneShot_BeforeArgs(Params_PlayVibrationClipOneShot args);

        public delegate VibrationEmission PlayVibrationClipOneShot_WithArgs(
            Func<VibrationData, VibrationTarget?, bool, string, VibrationEmission> orig, VibrationData vibrationData,
            VibrationTarget? vibrationTarget, bool isLooping, string tag);

        public delegate void set_IsMuted_AfterArgs(Params_set_IsMuted args);

        public delegate void set_IsMuted_BeforeArgs(Params_set_IsMuted args);

        public delegate void set_IsMuted_WithArgs(Action<bool> orig, bool value);

        public delegate void StopAllVibration_AfterArgs();

        public delegate void StopAllVibration_BeforeArgs();

        public delegate void StopAllVibration_WithArgs(Action orig);

        public delegate void StopAllVibrationsWithTag_AfterArgs(Params_StopAllVibrationsWithTag args);

        public delegate void StopAllVibrationsWithTag_BeforeArgs(Params_StopAllVibrationsWithTag args);

        public delegate void StopAllVibrationsWithTag_WithArgs(Action<string> orig, string tag);

        public sealed class Params_set_IsMuted
        {
            public bool value;
        }

        public sealed class Params_PlayVibrationClipOneShot
        {
            public bool isLooping;
            public string tag;
            public VibrationData vibrationData;
            public VibrationTarget? vibrationTarget;
        }

        public sealed class Params_StopAllVibrationsWithTag
        {
            public string tag;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_IsMuted_BeforeArgs get_IsMuted
        {
            add
            {
                HookHandler._beforeget_IsMuted += value;
                HookHandler.Hookget_IsMuted();
            }
            remove => HookHandler._beforeget_IsMuted -= value;
        }

        public static event Delegates.set_IsMuted_BeforeArgs set_IsMuted
        {
            add
            {
                HookHandler._beforeset_IsMuted += value;
                HookHandler.Hookset_IsMuted();
            }
            remove => HookHandler._beforeset_IsMuted -= value;
        }

        public static event Delegates.GetMixer_BeforeArgs GetMixer
        {
            add
            {
                HookHandler._beforeGetMixer += value;
                HookHandler.HookGetMixer();
            }
            remove => HookHandler._beforeGetMixer -= value;
        }

        public static event Delegates.PlayVibrationClipOneShot_BeforeArgs PlayVibrationClipOneShot
        {
            add
            {
                HookHandler._beforePlayVibrationClipOneShot += value;
                HookHandler.HookPlayVibrationClipOneShot();
            }
            remove => HookHandler._beforePlayVibrationClipOneShot -= value;
        }

        public static event Delegates.StopAllVibration_BeforeArgs StopAllVibration
        {
            add
            {
                HookHandler._beforeStopAllVibration += value;
                HookHandler.HookStopAllVibration();
            }
            remove => HookHandler._beforeStopAllVibration -= value;
        }

        public static event Delegates.StopAllVibrationsWithTag_BeforeArgs StopAllVibrationsWithTag
        {
            add
            {
                HookHandler._beforeStopAllVibrationsWithTag += value;
                HookHandler.HookStopAllVibrationsWithTag();
            }
            remove => HookHandler._beforeStopAllVibrationsWithTag -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_IsMuted_AfterArgs get_IsMuted
        {
            add
            {
                HookHandler._afterget_IsMuted += value;
                HookHandler.Hookget_IsMuted();
            }
            remove => HookHandler._afterget_IsMuted -= value;
        }

        public static event Delegates.set_IsMuted_AfterArgs set_IsMuted
        {
            add
            {
                HookHandler._afterset_IsMuted += value;
                HookHandler.Hookset_IsMuted();
            }
            remove => HookHandler._afterset_IsMuted -= value;
        }

        public static event Delegates.GetMixer_AfterArgs GetMixer
        {
            add
            {
                HookHandler._afterGetMixer += value;
                HookHandler.HookGetMixer();
            }
            remove => HookHandler._afterGetMixer -= value;
        }

        public static event Delegates.PlayVibrationClipOneShot_AfterArgs PlayVibrationClipOneShot
        {
            add
            {
                HookHandler._afterPlayVibrationClipOneShot += value;
                HookHandler.HookPlayVibrationClipOneShot();
            }
            remove => HookHandler._afterPlayVibrationClipOneShot -= value;
        }

        public static event Delegates.StopAllVibration_AfterArgs StopAllVibration
        {
            add
            {
                HookHandler._afterStopAllVibration += value;
                HookHandler.HookStopAllVibration();
            }
            remove => HookHandler._afterStopAllVibration -= value;
        }

        public static event Delegates.StopAllVibrationsWithTag_AfterArgs StopAllVibrationsWithTag
        {
            add
            {
                HookHandler._afterStopAllVibrationsWithTag += value;
                HookHandler.HookStopAllVibrationsWithTag();
            }
            remove => HookHandler._afterStopAllVibrationsWithTag -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_IsMuted_WithArgs get_IsMuted
        {
            add => HookEndpointManager.Add<Delegates.get_IsMuted_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(VibrationManager), "get_IsMuted", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsMuted_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(VibrationManager), "get_IsMuted", false), value);
        }

        public static event Delegates.set_IsMuted_WithArgs set_IsMuted
        {
            add => HookEndpointManager.Add<Delegates.set_IsMuted_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(VibrationManager), "set_IsMuted", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_IsMuted_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(VibrationManager), "set_IsMuted", false), value);
        }

        public static event On.VibrationManager.hook_GetMixer GetMixer
        {
            add => On.VibrationManager.GetMixer += value;
            remove => On.VibrationManager.GetMixer -= value;
        }

        public static event On.VibrationManager.hook_PlayVibrationClipOneShot PlayVibrationClipOneShot
        {
            add => On.VibrationManager.PlayVibrationClipOneShot += value;
            remove => On.VibrationManager.PlayVibrationClipOneShot -= value;
        }

        public static event On.VibrationManager.hook_StopAllVibration StopAllVibration
        {
            add => On.VibrationManager.StopAllVibration += value;
            remove => On.VibrationManager.StopAllVibration -= value;
        }

        public static event On.VibrationManager.hook_StopAllVibrationsWithTag StopAllVibrationsWithTag
        {
            add => On.VibrationManager.StopAllVibrationsWithTag += value;
            remove => On.VibrationManager.StopAllVibrationsWithTag -= value;
        }
    }
}