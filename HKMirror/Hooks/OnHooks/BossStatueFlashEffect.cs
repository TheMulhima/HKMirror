namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for BossStatueFlashEffect class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBossStatueFlashEffect
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.BossStatueFlashEffect.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.BossStatueFlashEffect.orig_Awake orig, BossStatueFlashEffect self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.BossStatueFlashEffect.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.BossStatueFlashEffect.orig_Start orig, BossStatueFlashEffect self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookFlashRoutine()
        {
            if (!HookedList.Contains("FlashRoutine"))
            {
                HookedList.Add("FlashRoutine");
                On.BossStatueFlashEffect.FlashRoutine += FlashRoutine;
            }
        }

        internal static event Delegates.FlashRoutine_BeforeArgs _beforeFlashRoutine;

        private static IEnumerator FlashRoutine(On.BossStatueFlashEffect.orig_FlashRoutine orig,
            BossStatueFlashEffect self)
        {
            Delegates.Params_FlashRoutine @params = new()
            {
                self = self
            };
            _beforeFlashRoutine?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookFlashApex()
        {
            if (!HookedList.Contains("FlashApex"))
            {
                HookedList.Add("FlashApex");
                On.BossStatueFlashEffect.FlashApex += FlashApex;
            }
        }

        internal static event Delegates.FlashApex_BeforeArgs _beforeFlashApex;
        internal static event Delegates.FlashApex_NormalArgs _afterFlashApex;

        private static void FlashApex(On.BossStatueFlashEffect.orig_FlashApex orig, BossStatueFlashEffect self)
        {
            Delegates.Params_FlashApex @params = new()
            {
                self = self
            };
            _beforeFlashApex?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFlashApex != null) _afterFlashApex.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void FlashApex_BeforeArgs(Params_FlashApex args);

        public delegate void FlashApex_NormalArgs(Params_FlashApex args);

        public delegate void FlashRoutine_BeforeArgs(Params_FlashRoutine args);

        public delegate IEnumerator FlashRoutine_NormalArgs(Params_FlashRoutine args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Awake
        {
            public BossStatueFlashEffect self;
        }

        public sealed class Params_Start
        {
            public BossStatueFlashEffect self;
        }

        public sealed class Params_FlashRoutine
        {
            public BossStatueFlashEffect self;
        }

        public sealed class Params_FlashApex
        {
            public BossStatueFlashEffect self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.FlashRoutine_BeforeArgs FlashRoutine
        {
            add
            {
                HookHandler._beforeFlashRoutine += value;
                HookHandler.HookFlashRoutine();
            }
            remove => HookHandler._beforeFlashRoutine -= value;
        }

        public static event Delegates.FlashApex_BeforeArgs FlashApex
        {
            add
            {
                HookHandler._beforeFlashApex += value;
                HookHandler.HookFlashApex();
            }
            remove => HookHandler._beforeFlashApex -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.FlashApex_NormalArgs FlashApex
        {
            add
            {
                HookHandler._afterFlashApex += value;
                HookHandler.HookFlashApex();
            }
            remove => HookHandler._afterFlashApex -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.BossStatueFlashEffect.hook_Awake Awake
        {
            add => On.BossStatueFlashEffect.Awake += value;
            remove => On.BossStatueFlashEffect.Awake -= value;
        }

        public static event On.BossStatueFlashEffect.hook_Start Start
        {
            add => On.BossStatueFlashEffect.Start += value;
            remove => On.BossStatueFlashEffect.Start -= value;
        }

        public static event On.BossStatueFlashEffect.hook_FlashRoutine FlashRoutine
        {
            add => On.BossStatueFlashEffect.FlashRoutine += value;
            remove => On.BossStatueFlashEffect.FlashRoutine -= value;
        }

        public static event On.BossStatueFlashEffect.hook_FlashApex FlashApex
        {
            add => On.BossStatueFlashEffect.FlashApex += value;
            remove => On.BossStatueFlashEffect.FlashApex -= value;
        }
    }
}