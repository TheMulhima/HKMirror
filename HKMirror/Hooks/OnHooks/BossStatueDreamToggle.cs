namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for BossStatueDreamToggle class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBossStatueDreamToggle
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.BossStatueDreamToggle.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.BossStatueDreamToggle.orig_OnEnable orig, BossStatueDreamToggle self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.BossStatueDreamToggle.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.BossStatueDreamToggle.orig_Start orig, BossStatueDreamToggle self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.BossStatueDreamToggle.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_NormalArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.BossStatueDreamToggle.orig_OnTriggerEnter2D orig,
            BossStatueDreamToggle self, Collider2D collision)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, collision = collision
            };
            _beforeOnTriggerEnter2D?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnTriggerEnter2D != null) _afterOnTriggerEnter2D.Invoke(@params);
        }

        internal static void HookFade()
        {
            if (!HookedList.Contains("Fade"))
            {
                HookedList.Add("Fade");
                On.BossStatueDreamToggle.Fade += Fade;
            }
        }

        internal static event Delegates.Fade_BeforeArgs _beforeFade;

        private static IEnumerator Fade(On.BossStatueDreamToggle.orig_Fade orig, BossStatueDreamToggle self,
            bool usingDreamVersion)
        {
            Delegates.Params_Fade @params = new()
            {
                self = self, usingDreamVersion = usingDreamVersion
            };
            _beforeFade?.Invoke(@params);
            self = @params.self;
            usingDreamVersion = @params.usingDreamVersion;
            return orig(self, usingDreamVersion);
        }

        internal static void HookSetOwner()
        {
            if (!HookedList.Contains("SetOwner"))
            {
                HookedList.Add("SetOwner");
                On.BossStatueDreamToggle.SetOwner += SetOwner;
            }
        }

        internal static event Delegates.SetOwner_BeforeArgs _beforeSetOwner;
        internal static event Delegates.SetOwner_NormalArgs _afterSetOwner;

        private static void SetOwner(On.BossStatueDreamToggle.orig_SetOwner orig, BossStatueDreamToggle self,
            BossStatue statue)
        {
            Delegates.Params_SetOwner @params = new()
            {
                self = self, statue = statue
            };
            _beforeSetOwner?.Invoke(@params);
            self = @params.self;
            statue = @params.statue;
            orig(self, statue);
            if (_afterSetOwner != null) _afterSetOwner.Invoke(@params);
        }

        internal static void HookSetState()
        {
            if (!HookedList.Contains("SetState"))
            {
                HookedList.Add("SetState");
                On.BossStatueDreamToggle.SetState += SetState;
            }
        }

        internal static event Delegates.SetState_BeforeArgs _beforeSetState;
        internal static event Delegates.SetState_NormalArgs _afterSetState;

        private static void SetState(On.BossStatueDreamToggle.orig_SetState orig, BossStatueDreamToggle self,
            bool value)
        {
            Delegates.Params_SetState @params = new()
            {
                self = self, value = value
            };
            _beforeSetState?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterSetState != null) _afterSetState.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Fade_BeforeArgs(Params_Fade args);

        public delegate IEnumerator Fade_NormalArgs(Params_Fade args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_NormalArgs(Params_OnTriggerEnter2D args);

        public delegate void SetOwner_BeforeArgs(Params_SetOwner args);

        public delegate void SetOwner_NormalArgs(Params_SetOwner args);

        public delegate void SetState_BeforeArgs(Params_SetState args);

        public delegate void SetState_NormalArgs(Params_SetState args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_OnEnable
        {
            public BossStatueDreamToggle self;
        }

        public sealed class Params_Start
        {
            public BossStatueDreamToggle self;
        }

        public sealed class Params_OnTriggerEnter2D
        {
            public Collider2D collision;
            public BossStatueDreamToggle self;
        }

        public sealed class Params_Fade
        {
            public BossStatueDreamToggle self;
            public bool usingDreamVersion;
        }

        public sealed class Params_SetOwner
        {
            public BossStatueDreamToggle self;
            public BossStatue statue;
        }

        public sealed class Params_SetState
        {
            public BossStatueDreamToggle self;
            public bool value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.Fade_BeforeArgs Fade
        {
            add
            {
                HookHandler._beforeFade += value;
                HookHandler.HookFade();
            }
            remove => HookHandler._beforeFade -= value;
        }

        public static event Delegates.SetOwner_BeforeArgs SetOwner
        {
            add
            {
                HookHandler._beforeSetOwner += value;
                HookHandler.HookSetOwner();
            }
            remove => HookHandler._beforeSetOwner -= value;
        }

        public static event Delegates.SetState_BeforeArgs SetState
        {
            add
            {
                HookHandler._beforeSetState += value;
                HookHandler.HookSetState();
            }
            remove => HookHandler._beforeSetState -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnTriggerEnter2D_NormalArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }

        public static event Delegates.SetOwner_NormalArgs SetOwner
        {
            add
            {
                HookHandler._afterSetOwner += value;
                HookHandler.HookSetOwner();
            }
            remove => HookHandler._afterSetOwner -= value;
        }

        public static event Delegates.SetState_NormalArgs SetState
        {
            add
            {
                HookHandler._afterSetState += value;
                HookHandler.HookSetState();
            }
            remove => HookHandler._afterSetState -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.BossStatueDreamToggle.hook_OnEnable OnEnable
        {
            add => On.BossStatueDreamToggle.OnEnable += value;
            remove => On.BossStatueDreamToggle.OnEnable -= value;
        }

        public static event On.BossStatueDreamToggle.hook_Start Start
        {
            add => On.BossStatueDreamToggle.Start += value;
            remove => On.BossStatueDreamToggle.Start -= value;
        }

        public static event On.BossStatueDreamToggle.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.BossStatueDreamToggle.OnTriggerEnter2D += value;
            remove => On.BossStatueDreamToggle.OnTriggerEnter2D -= value;
        }

        public static event On.BossStatueDreamToggle.hook_Fade Fade
        {
            add => On.BossStatueDreamToggle.Fade += value;
            remove => On.BossStatueDreamToggle.Fade -= value;
        }

        public static event On.BossStatueDreamToggle.hook_SetOwner SetOwner
        {
            add => On.BossStatueDreamToggle.SetOwner += value;
            remove => On.BossStatueDreamToggle.SetOwner -= value;
        }

        public static event On.BossStatueDreamToggle.hook_SetState SetState
        {
            add => On.BossStatueDreamToggle.SetState += value;
            remove => On.BossStatueDreamToggle.SetState -= value;
        }
    }
}