using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using tk2dRuntime.TileMap;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dTileMap class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dTileMap
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Editor__SpriteCollection()
        {
            if (!HookedList.Contains("get_Editor__SpriteCollection"))
            {
                HookedList.Add("get_Editor__SpriteCollection");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_Editor__SpriteCollection"),
                    get_Editor__SpriteCollection);
            }
        }

        internal static event Delegates.get_Editor__SpriteCollection_BeforeArgs _beforeget_Editor__SpriteCollection;
        internal static event Delegates.get_Editor__SpriteCollection_AfterArgs _afterget_Editor__SpriteCollection;

        private static tk2dSpriteCollectionData get_Editor__SpriteCollection(
            Func<tk2dTileMap, tk2dSpriteCollectionData> orig, tk2dTileMap self)
        {
            Delegates.Params_get_Editor__SpriteCollection @params = new()
            {
                self = self
            };
            if (_beforeget_Editor__SpriteCollection != null)
                foreach (Delegates.get_Editor__SpriteCollection_BeforeArgs toInvoke in
                         _beforeget_Editor__SpriteCollection.GetInvocationList())
                    try
                    {
                        _beforeget_Editor__SpriteCollection?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Editor__SpriteCollection != null)
                foreach (Delegates.get_Editor__SpriteCollection_AfterArgs toInvoke in _afterget_Editor__SpriteCollection
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_Editor__SpriteCollection.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Editor__SpriteCollection()
        {
            if (!HookedList.Contains("set_Editor__SpriteCollection"))
            {
                HookedList.Add("set_Editor__SpriteCollection");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_Editor__SpriteCollection"),
                    set_Editor__SpriteCollection);
            }
        }

        internal static event Delegates.set_Editor__SpriteCollection_BeforeArgs _beforeset_Editor__SpriteCollection;
        internal static event Delegates.set_Editor__SpriteCollection_AfterArgs _afterset_Editor__SpriteCollection;

        private static void set_Editor__SpriteCollection(Action<tk2dTileMap, tk2dSpriteCollectionData> orig,
            tk2dTileMap self, tk2dSpriteCollectionData value)
        {
            Delegates.Params_set_Editor__SpriteCollection @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Editor__SpriteCollection != null)
                foreach (Delegates.set_Editor__SpriteCollection_BeforeArgs toInvoke in
                         _beforeset_Editor__SpriteCollection.GetInvocationList())
                    try
                    {
                        _beforeset_Editor__SpriteCollection?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Editor__SpriteCollection != null)
                foreach (Delegates.set_Editor__SpriteCollection_AfterArgs toInvoke in _afterset_Editor__SpriteCollection
                             .GetInvocationList())
                    try
                    {
                        _afterset_Editor__SpriteCollection.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_SpriteCollectionInst()
        {
            if (!HookedList.Contains("get_SpriteCollectionInst"))
            {
                HookedList.Add("get_SpriteCollectionInst");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_SpriteCollectionInst"),
                    get_SpriteCollectionInst);
            }
        }

        internal static event Delegates.get_SpriteCollectionInst_BeforeArgs _beforeget_SpriteCollectionInst;
        internal static event Delegates.get_SpriteCollectionInst_AfterArgs _afterget_SpriteCollectionInst;

        private static tk2dSpriteCollectionData get_SpriteCollectionInst(
            Func<tk2dTileMap, tk2dSpriteCollectionData> orig, tk2dTileMap self)
        {
            Delegates.Params_get_SpriteCollectionInst @params = new()
            {
                self = self
            };
            if (_beforeget_SpriteCollectionInst != null)
                foreach (Delegates.get_SpriteCollectionInst_BeforeArgs toInvoke in _beforeget_SpriteCollectionInst
                             .GetInvocationList())
                    try
                    {
                        _beforeget_SpriteCollectionInst?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SpriteCollectionInst != null)
                foreach (Delegates.get_SpriteCollectionInst_AfterArgs toInvoke in _afterget_SpriteCollectionInst
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_SpriteCollectionInst.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_AllowEdit()
        {
            if (!HookedList.Contains("get_AllowEdit"))
            {
                HookedList.Add("get_AllowEdit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_AllowEdit"), get_AllowEdit);
            }
        }

        internal static event Delegates.get_AllowEdit_BeforeArgs _beforeget_AllowEdit;
        internal static event Delegates.get_AllowEdit_AfterArgs _afterget_AllowEdit;

        private static bool get_AllowEdit(Func<tk2dTileMap, bool> orig, tk2dTileMap self)
        {
            Delegates.Params_get_AllowEdit @params = new()
            {
                self = self
            };
            if (_beforeget_AllowEdit != null)
                foreach (Delegates.get_AllowEdit_BeforeArgs toInvoke in _beforeget_AllowEdit.GetInvocationList())
                    try
                    {
                        _beforeget_AllowEdit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AllowEdit != null)
                foreach (Delegates.get_AllowEdit_AfterArgs toInvoke in _afterget_AllowEdit.GetInvocationList())
                    try
                    {
                        retVal = _afterget_AllowEdit.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.tk2dTileMap.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.tk2dTileMap.orig_Awake orig, tk2dTileMap self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.tk2dTileMap.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_AfterArgs _afterOnDestroy;

        private static void OnDestroy(On.tk2dTileMap.orig_OnDestroy orig, tk2dTileMap self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            if (_beforeOnDestroy != null)
                foreach (Delegates.OnDestroy_BeforeArgs toInvoke in _beforeOnDestroy.GetInvocationList())
                    try
                    {
                        _beforeOnDestroy?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null)
                foreach (Delegates.OnDestroy_AfterArgs toInvoke in _afterOnDestroy.GetInvocationList())
                    try
                    {
                        _afterOnDestroy.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookBuild()
        {
            if (!HookedList.Contains("Build"))
            {
                HookedList.Add("Build");
                On.tk2dTileMap.Build += Build;
            }
        }

        internal static event Delegates.Build_BeforeArgs _beforeBuild;
        internal static event Delegates.Build_AfterArgs _afterBuild;

        private static void Build(On.tk2dTileMap.orig_Build orig, tk2dTileMap self)
        {
            Delegates.Params_Build @params = new()
            {
                self = self
            };
            if (_beforeBuild != null)
                foreach (Delegates.Build_BeforeArgs toInvoke in _beforeBuild.GetInvocationList())
                    try
                    {
                        _beforeBuild?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterBuild != null)
                foreach (Delegates.Build_AfterArgs toInvoke in _afterBuild.GetInvocationList())
                    try
                    {
                        _afterBuild.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookForceBuild()
        {
            if (!HookedList.Contains("ForceBuild"))
            {
                HookedList.Add("ForceBuild");
                On.tk2dTileMap.ForceBuild += ForceBuild;
            }
        }

        internal static event Delegates.ForceBuild_BeforeArgs _beforeForceBuild;
        internal static event Delegates.ForceBuild_AfterArgs _afterForceBuild;

        private static void ForceBuild(On.tk2dTileMap.orig_ForceBuild orig, tk2dTileMap self)
        {
            Delegates.Params_ForceBuild @params = new()
            {
                self = self
            };
            if (_beforeForceBuild != null)
                foreach (Delegates.ForceBuild_BeforeArgs toInvoke in _beforeForceBuild.GetInvocationList())
                    try
                    {
                        _beforeForceBuild?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterForceBuild != null)
                foreach (Delegates.ForceBuild_AfterArgs toInvoke in _afterForceBuild.GetInvocationList())
                    try
                    {
                        _afterForceBuild.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookClearSpawnedInstances()
        {
            if (!HookedList.Contains("ClearSpawnedInstances"))
            {
                HookedList.Add("ClearSpawnedInstances");
                On.tk2dTileMap.ClearSpawnedInstances += ClearSpawnedInstances;
            }
        }

        internal static event Delegates.ClearSpawnedInstances_BeforeArgs _beforeClearSpawnedInstances;
        internal static event Delegates.ClearSpawnedInstances_AfterArgs _afterClearSpawnedInstances;

        private static void ClearSpawnedInstances(On.tk2dTileMap.orig_ClearSpawnedInstances orig, tk2dTileMap self)
        {
            Delegates.Params_ClearSpawnedInstances @params = new()
            {
                self = self
            };
            if (_beforeClearSpawnedInstances != null)
                foreach (Delegates.ClearSpawnedInstances_BeforeArgs toInvoke in _beforeClearSpawnedInstances
                             .GetInvocationList())
                    try
                    {
                        _beforeClearSpawnedInstances?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterClearSpawnedInstances != null)
                foreach (Delegates.ClearSpawnedInstances_AfterArgs toInvoke in _afterClearSpawnedInstances
                             .GetInvocationList())
                    try
                    {
                        _afterClearSpawnedInstances.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetPrefabsRootActive()
        {
            if (!HookedList.Contains("SetPrefabsRootActive"))
            {
                HookedList.Add("SetPrefabsRootActive");
                On.tk2dTileMap.SetPrefabsRootActive += SetPrefabsRootActive;
            }
        }

        internal static event Delegates.SetPrefabsRootActive_BeforeArgs _beforeSetPrefabsRootActive;
        internal static event Delegates.SetPrefabsRootActive_AfterArgs _afterSetPrefabsRootActive;

        private static void SetPrefabsRootActive(On.tk2dTileMap.orig_SetPrefabsRootActive orig, tk2dTileMap self,
            bool active)
        {
            Delegates.Params_SetPrefabsRootActive @params = new()
            {
                self = self, active = active
            };
            if (_beforeSetPrefabsRootActive != null)
                foreach (Delegates.SetPrefabsRootActive_BeforeArgs toInvoke in _beforeSetPrefabsRootActive
                             .GetInvocationList())
                    try
                    {
                        _beforeSetPrefabsRootActive?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            active = @params.active;
            orig(self, active);
            if (_afterSetPrefabsRootActive != null)
                foreach (Delegates.SetPrefabsRootActive_AfterArgs toInvoke in _afterSetPrefabsRootActive
                             .GetInvocationList())
                    try
                    {
                        _afterSetPrefabsRootActive.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetTileAtPosition()
        {
            if (!HookedList.Contains("GetTileAtPosition"))
            {
                HookedList.Add("GetTileAtPosition");
                On.tk2dTileMap.GetTileAtPosition += GetTileAtPosition;
            }
        }

        internal static event Delegates.GetTileAtPosition_BeforeArgs _beforeGetTileAtPosition;
        internal static event Delegates.GetTileAtPosition_AfterArgs _afterGetTileAtPosition;

        private static bool GetTileAtPosition(On.tk2dTileMap.orig_GetTileAtPosition orig, tk2dTileMap self,
            Vector3 position, out int x, out int y)
        {
            Delegates.Params_GetTileAtPosition @params = new()
            {
                self = self, position = position
            };
            if (_beforeGetTileAtPosition != null)
                foreach (Delegates.GetTileAtPosition_BeforeArgs toInvoke in
                         _beforeGetTileAtPosition.GetInvocationList())
                    try
                    {
                        _beforeGetTileAtPosition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            position = @params.position;
            x = @params.x;
            y = @params.y;
            var retVal = orig(self, position, out x, out y);
            if (_afterGetTileAtPosition != null)
                foreach (Delegates.GetTileAtPosition_AfterArgs toInvoke in _afterGetTileAtPosition.GetInvocationList())
                    try
                    {
                        retVal = _afterGetTileAtPosition.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetTileFracAtPosition()
        {
            if (!HookedList.Contains("GetTileFracAtPosition"))
            {
                HookedList.Add("GetTileFracAtPosition");
                On.tk2dTileMap.GetTileFracAtPosition += GetTileFracAtPosition;
            }
        }

        internal static event Delegates.GetTileFracAtPosition_BeforeArgs _beforeGetTileFracAtPosition;
        internal static event Delegates.GetTileFracAtPosition_AfterArgs _afterGetTileFracAtPosition;

        private static bool GetTileFracAtPosition(On.tk2dTileMap.orig_GetTileFracAtPosition orig, tk2dTileMap self,
            Vector3 position, out float x, out float y)
        {
            Delegates.Params_GetTileFracAtPosition @params = new()
            {
                self = self, position = position
            };
            if (_beforeGetTileFracAtPosition != null)
                foreach (Delegates.GetTileFracAtPosition_BeforeArgs toInvoke in _beforeGetTileFracAtPosition
                             .GetInvocationList())
                    try
                    {
                        _beforeGetTileFracAtPosition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            position = @params.position;
            x = @params.x;
            y = @params.y;
            var retVal = orig(self, position, out x, out y);
            if (_afterGetTileFracAtPosition != null)
                foreach (Delegates.GetTileFracAtPosition_AfterArgs toInvoke in _afterGetTileFracAtPosition
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetTileFracAtPosition.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetTilePosition()
        {
            if (!HookedList.Contains("GetTilePosition"))
            {
                HookedList.Add("GetTilePosition");
                On.tk2dTileMap.GetTilePosition += GetTilePosition;
            }
        }

        internal static event Delegates.GetTilePosition_BeforeArgs _beforeGetTilePosition;
        internal static event Delegates.GetTilePosition_AfterArgs _afterGetTilePosition;

        private static Vector3 GetTilePosition(On.tk2dTileMap.orig_GetTilePosition orig, tk2dTileMap self, int x, int y)
        {
            Delegates.Params_GetTilePosition @params = new()
            {
                self = self, x = x, y = y
            };
            if (_beforeGetTilePosition != null)
                foreach (Delegates.GetTilePosition_BeforeArgs toInvoke in _beforeGetTilePosition.GetInvocationList())
                    try
                    {
                        _beforeGetTilePosition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            x = @params.x;
            y = @params.y;
            var retVal = orig(self, x, y);
            if (_afterGetTilePosition != null)
                foreach (Delegates.GetTilePosition_AfterArgs toInvoke in _afterGetTilePosition.GetInvocationList())
                    try
                    {
                        retVal = _afterGetTilePosition.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetTileIdAtPosition()
        {
            if (!HookedList.Contains("GetTileIdAtPosition"))
            {
                HookedList.Add("GetTileIdAtPosition");
                On.tk2dTileMap.GetTileIdAtPosition += GetTileIdAtPosition;
            }
        }

        internal static event Delegates.GetTileIdAtPosition_BeforeArgs _beforeGetTileIdAtPosition;
        internal static event Delegates.GetTileIdAtPosition_AfterArgs _afterGetTileIdAtPosition;

        private static int GetTileIdAtPosition(On.tk2dTileMap.orig_GetTileIdAtPosition orig, tk2dTileMap self,
            Vector3 position, int layer)
        {
            Delegates.Params_GetTileIdAtPosition @params = new()
            {
                self = self, position = position, layer = layer
            };
            if (_beforeGetTileIdAtPosition != null)
                foreach (Delegates.GetTileIdAtPosition_BeforeArgs toInvoke in _beforeGetTileIdAtPosition
                             .GetInvocationList())
                    try
                    {
                        _beforeGetTileIdAtPosition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            position = @params.position;
            layer = @params.layer;
            var retVal = orig(self, position, layer);
            if (_afterGetTileIdAtPosition != null)
                foreach (Delegates.GetTileIdAtPosition_AfterArgs toInvoke in
                         _afterGetTileIdAtPosition.GetInvocationList())
                    try
                    {
                        retVal = _afterGetTileIdAtPosition.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetTileInfoForTileId()
        {
            if (!HookedList.Contains("GetTileInfoForTileId"))
            {
                HookedList.Add("GetTileInfoForTileId");
                On.tk2dTileMap.GetTileInfoForTileId += GetTileInfoForTileId;
            }
        }

        internal static event Delegates.GetTileInfoForTileId_BeforeArgs _beforeGetTileInfoForTileId;
        internal static event Delegates.GetTileInfoForTileId_AfterArgs _afterGetTileInfoForTileId;

        private static TileInfo GetTileInfoForTileId(On.tk2dTileMap.orig_GetTileInfoForTileId orig, tk2dTileMap self,
            int tileId)
        {
            Delegates.Params_GetTileInfoForTileId @params = new()
            {
                self = self, tileId = tileId
            };
            if (_beforeGetTileInfoForTileId != null)
                foreach (Delegates.GetTileInfoForTileId_BeforeArgs toInvoke in _beforeGetTileInfoForTileId
                             .GetInvocationList())
                    try
                    {
                        _beforeGetTileInfoForTileId?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            tileId = @params.tileId;
            var retVal = orig(self, tileId);
            if (_afterGetTileInfoForTileId != null)
                foreach (Delegates.GetTileInfoForTileId_AfterArgs toInvoke in _afterGetTileInfoForTileId
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetTileInfoForTileId.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetInterpolatedColorAtPosition()
        {
            if (!HookedList.Contains("GetInterpolatedColorAtPosition"))
            {
                HookedList.Add("GetInterpolatedColorAtPosition");
                On.tk2dTileMap.GetInterpolatedColorAtPosition += GetInterpolatedColorAtPosition;
            }
        }

        internal static event Delegates.GetInterpolatedColorAtPosition_BeforeArgs _beforeGetInterpolatedColorAtPosition;
        internal static event Delegates.GetInterpolatedColorAtPosition_AfterArgs _afterGetInterpolatedColorAtPosition;

        private static Color GetInterpolatedColorAtPosition(On.tk2dTileMap.orig_GetInterpolatedColorAtPosition orig,
            tk2dTileMap self, Vector3 position)
        {
            Delegates.Params_GetInterpolatedColorAtPosition @params = new()
            {
                self = self, position = position
            };
            if (_beforeGetInterpolatedColorAtPosition != null)
                foreach (Delegates.GetInterpolatedColorAtPosition_BeforeArgs toInvoke in
                         _beforeGetInterpolatedColorAtPosition.GetInvocationList())
                    try
                    {
                        _beforeGetInterpolatedColorAtPosition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            position = @params.position;
            var retVal = orig(self, position);
            if (_afterGetInterpolatedColorAtPosition != null)
                foreach (Delegates.GetInterpolatedColorAtPosition_AfterArgs toInvoke in
                         _afterGetInterpolatedColorAtPosition.GetInvocationList())
                    try
                    {
                        retVal = _afterGetInterpolatedColorAtPosition.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookUsesSpriteCollection()
        {
            if (!HookedList.Contains("UsesSpriteCollection"))
            {
                HookedList.Add("UsesSpriteCollection");
                On.tk2dTileMap.UsesSpriteCollection += UsesSpriteCollection;
            }
        }

        internal static event Delegates.UsesSpriteCollection_BeforeArgs _beforeUsesSpriteCollection;
        internal static event Delegates.UsesSpriteCollection_AfterArgs _afterUsesSpriteCollection;

        private static bool UsesSpriteCollection(On.tk2dTileMap.orig_UsesSpriteCollection orig, tk2dTileMap self,
            tk2dSpriteCollectionData spriteCollection)
        {
            Delegates.Params_UsesSpriteCollection @params = new()
            {
                self = self, spriteCollection = spriteCollection
            };
            if (_beforeUsesSpriteCollection != null)
                foreach (Delegates.UsesSpriteCollection_BeforeArgs toInvoke in _beforeUsesSpriteCollection
                             .GetInvocationList())
                    try
                    {
                        _beforeUsesSpriteCollection?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            spriteCollection = @params.spriteCollection;
            var retVal = orig(self, spriteCollection);
            if (_afterUsesSpriteCollection != null)
                foreach (Delegates.UsesSpriteCollection_AfterArgs toInvoke in _afterUsesSpriteCollection
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterUsesSpriteCollection.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookEndEditMode()
        {
            if (!HookedList.Contains("EndEditMode"))
            {
                HookedList.Add("EndEditMode");
                On.tk2dTileMap.EndEditMode += EndEditMode;
            }
        }

        internal static event Delegates.EndEditMode_BeforeArgs _beforeEndEditMode;
        internal static event Delegates.EndEditMode_AfterArgs _afterEndEditMode;

        private static void EndEditMode(On.tk2dTileMap.orig_EndEditMode orig, tk2dTileMap self)
        {
            Delegates.Params_EndEditMode @params = new()
            {
                self = self
            };
            if (_beforeEndEditMode != null)
                foreach (Delegates.EndEditMode_BeforeArgs toInvoke in _beforeEndEditMode.GetInvocationList())
                    try
                    {
                        _beforeEndEditMode?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterEndEditMode != null)
                foreach (Delegates.EndEditMode_AfterArgs toInvoke in _afterEndEditMode.GetInvocationList())
                    try
                    {
                        _afterEndEditMode.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookTouchMesh()
        {
            if (!HookedList.Contains("TouchMesh"))
            {
                HookedList.Add("TouchMesh");
                On.tk2dTileMap.TouchMesh += TouchMesh;
            }
        }

        internal static event Delegates.TouchMesh_BeforeArgs _beforeTouchMesh;
        internal static event Delegates.TouchMesh_AfterArgs _afterTouchMesh;

        private static void TouchMesh(On.tk2dTileMap.orig_TouchMesh orig, tk2dTileMap self, Mesh mesh)
        {
            Delegates.Params_TouchMesh @params = new()
            {
                self = self, mesh = mesh
            };
            if (_beforeTouchMesh != null)
                foreach (Delegates.TouchMesh_BeforeArgs toInvoke in _beforeTouchMesh.GetInvocationList())
                    try
                    {
                        _beforeTouchMesh?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            mesh = @params.mesh;
            orig(self, mesh);
            if (_afterTouchMesh != null)
                foreach (Delegates.TouchMesh_AfterArgs toInvoke in _afterTouchMesh.GetInvocationList())
                    try
                    {
                        _afterTouchMesh.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDestroyMesh()
        {
            if (!HookedList.Contains("DestroyMesh"))
            {
                HookedList.Add("DestroyMesh");
                On.tk2dTileMap.DestroyMesh += DestroyMesh;
            }
        }

        internal static event Delegates.DestroyMesh_BeforeArgs _beforeDestroyMesh;
        internal static event Delegates.DestroyMesh_AfterArgs _afterDestroyMesh;

        private static void DestroyMesh(On.tk2dTileMap.orig_DestroyMesh orig, tk2dTileMap self, Mesh mesh)
        {
            Delegates.Params_DestroyMesh @params = new()
            {
                self = self, mesh = mesh
            };
            if (_beforeDestroyMesh != null)
                foreach (Delegates.DestroyMesh_BeforeArgs toInvoke in _beforeDestroyMesh.GetInvocationList())
                    try
                    {
                        _beforeDestroyMesh?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            mesh = @params.mesh;
            orig(self, mesh);
            if (_afterDestroyMesh != null)
                foreach (Delegates.DestroyMesh_AfterArgs toInvoke in _afterDestroyMesh.GetInvocationList())
                    try
                    {
                        _afterDestroyMesh.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetTilePrefabsListCount()
        {
            if (!HookedList.Contains("GetTilePrefabsListCount"))
            {
                HookedList.Add("GetTilePrefabsListCount");
                On.tk2dTileMap.GetTilePrefabsListCount += GetTilePrefabsListCount;
            }
        }

        internal static event Delegates.GetTilePrefabsListCount_BeforeArgs _beforeGetTilePrefabsListCount;
        internal static event Delegates.GetTilePrefabsListCount_AfterArgs _afterGetTilePrefabsListCount;

        private static int GetTilePrefabsListCount(On.tk2dTileMap.orig_GetTilePrefabsListCount orig, tk2dTileMap self)
        {
            Delegates.Params_GetTilePrefabsListCount @params = new()
            {
                self = self
            };
            if (_beforeGetTilePrefabsListCount != null)
                foreach (Delegates.GetTilePrefabsListCount_BeforeArgs toInvoke in _beforeGetTilePrefabsListCount
                             .GetInvocationList())
                    try
                    {
                        _beforeGetTilePrefabsListCount?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetTilePrefabsListCount != null)
                foreach (Delegates.GetTilePrefabsListCount_AfterArgs toInvoke in _afterGetTilePrefabsListCount
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetTilePrefabsListCount.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_TilePrefabsList()
        {
            if (!HookedList.Contains("get_TilePrefabsList"))
            {
                HookedList.Add("get_TilePrefabsList");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_TilePrefabsList"),
                    get_TilePrefabsList);
            }
        }

        internal static event Delegates.get_TilePrefabsList_BeforeArgs _beforeget_TilePrefabsList;
        internal static event Delegates.get_TilePrefabsList_AfterArgs _afterget_TilePrefabsList;

        private static List<tk2dTileMap.TilemapPrefabInstance> get_TilePrefabsList(
            Func<tk2dTileMap, List<tk2dTileMap.TilemapPrefabInstance>> orig, tk2dTileMap self)
        {
            Delegates.Params_get_TilePrefabsList @params = new()
            {
                self = self
            };
            if (_beforeget_TilePrefabsList != null)
                foreach (Delegates.get_TilePrefabsList_BeforeArgs toInvoke in _beforeget_TilePrefabsList
                             .GetInvocationList())
                    try
                    {
                        _beforeget_TilePrefabsList?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_TilePrefabsList != null)
                foreach (Delegates.get_TilePrefabsList_AfterArgs toInvoke in
                         _afterget_TilePrefabsList.GetInvocationList())
                    try
                    {
                        retVal = _afterget_TilePrefabsList.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetTilePrefabsListItem()
        {
            if (!HookedList.Contains("GetTilePrefabsListItem"))
            {
                HookedList.Add("GetTilePrefabsListItem");
                On.tk2dTileMap.GetTilePrefabsListItem += GetTilePrefabsListItem;
            }
        }

        internal static event Delegates.GetTilePrefabsListItem_BeforeArgs _beforeGetTilePrefabsListItem;
        internal static event Delegates.GetTilePrefabsListItem_AfterArgs _afterGetTilePrefabsListItem;

        private static void GetTilePrefabsListItem(On.tk2dTileMap.orig_GetTilePrefabsListItem orig, tk2dTileMap self,
            int index, out int x, out int y, out int layer, out GameObject instance)
        {
            Delegates.Params_GetTilePrefabsListItem @params = new()
            {
                self = self, index = index
            };
            if (_beforeGetTilePrefabsListItem != null)
                foreach (Delegates.GetTilePrefabsListItem_BeforeArgs toInvoke in _beforeGetTilePrefabsListItem
                             .GetInvocationList())
                    try
                    {
                        _beforeGetTilePrefabsListItem?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            index = @params.index;
            x = @params.x;
            y = @params.y;
            layer = @params.layer;
            instance = @params.instance;
            orig(self, index, out x, out y, out layer, out instance);
            if (_afterGetTilePrefabsListItem != null)
                foreach (Delegates.GetTilePrefabsListItem_AfterArgs toInvoke in _afterGetTilePrefabsListItem
                             .GetInvocationList())
                    try
                    {
                        _afterGetTilePrefabsListItem.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetTilePrefabsList()
        {
            if (!HookedList.Contains("SetTilePrefabsList"))
            {
                HookedList.Add("SetTilePrefabsList");
                On.tk2dTileMap.SetTilePrefabsList += SetTilePrefabsList;
            }
        }

        internal static event Delegates.SetTilePrefabsList_BeforeArgs _beforeSetTilePrefabsList;
        internal static event Delegates.SetTilePrefabsList_AfterArgs _afterSetTilePrefabsList;

        private static void SetTilePrefabsList(On.tk2dTileMap.orig_SetTilePrefabsList orig, tk2dTileMap self,
            List<int> xs, List<int> ys, List<int> layers, List<GameObject> instances)
        {
            Delegates.Params_SetTilePrefabsList @params = new()
            {
                self = self, xs = xs, ys = ys, layers = layers, instances = instances
            };
            if (_beforeSetTilePrefabsList != null)
                foreach (Delegates.SetTilePrefabsList_BeforeArgs toInvoke in
                         _beforeSetTilePrefabsList.GetInvocationList())
                    try
                    {
                        _beforeSetTilePrefabsList?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            xs = @params.xs;
            ys = @params.ys;
            layers = @params.layers;
            instances = @params.instances;
            orig(self, xs, ys, layers, instances);
            if (_afterSetTilePrefabsList != null)
                foreach (Delegates.SetTilePrefabsList_AfterArgs toInvoke in
                         _afterSetTilePrefabsList.GetInvocationList())
                    try
                    {
                        _afterSetTilePrefabsList.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_Layers()
        {
            if (!HookedList.Contains("get_Layers"))
            {
                HookedList.Add("get_Layers");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_Layers"), get_Layers);
            }
        }

        internal static event Delegates.get_Layers_BeforeArgs _beforeget_Layers;
        internal static event Delegates.get_Layers_AfterArgs _afterget_Layers;

        private static Layer[] get_Layers(Func<tk2dTileMap, Layer[]> orig, tk2dTileMap self)
        {
            Delegates.Params_get_Layers @params = new()
            {
                self = self
            };
            if (_beforeget_Layers != null)
                foreach (Delegates.get_Layers_BeforeArgs toInvoke in _beforeget_Layers.GetInvocationList())
                    try
                    {
                        _beforeget_Layers?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Layers != null)
                foreach (Delegates.get_Layers_AfterArgs toInvoke in _afterget_Layers.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Layers.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Layers()
        {
            if (!HookedList.Contains("set_Layers"))
            {
                HookedList.Add("set_Layers");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_Layers"), set_Layers);
            }
        }

        internal static event Delegates.set_Layers_BeforeArgs _beforeset_Layers;
        internal static event Delegates.set_Layers_AfterArgs _afterset_Layers;

        private static void set_Layers(Action<tk2dTileMap, Layer[]> orig, tk2dTileMap self, Layer[] value)
        {
            Delegates.Params_set_Layers @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Layers != null)
                foreach (Delegates.set_Layers_BeforeArgs toInvoke in _beforeset_Layers.GetInvocationList())
                    try
                    {
                        _beforeset_Layers?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Layers != null)
                foreach (Delegates.set_Layers_AfterArgs toInvoke in _afterset_Layers.GetInvocationList())
                    try
                    {
                        _afterset_Layers.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_ColorChannel()
        {
            if (!HookedList.Contains("get_ColorChannel"))
            {
                HookedList.Add("get_ColorChannel");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_ColorChannel"), get_ColorChannel);
            }
        }

        internal static event Delegates.get_ColorChannel_BeforeArgs _beforeget_ColorChannel;
        internal static event Delegates.get_ColorChannel_AfterArgs _afterget_ColorChannel;

        private static ColorChannel get_ColorChannel(Func<tk2dTileMap, ColorChannel> orig, tk2dTileMap self)
        {
            Delegates.Params_get_ColorChannel @params = new()
            {
                self = self
            };
            if (_beforeget_ColorChannel != null)
                foreach (Delegates.get_ColorChannel_BeforeArgs toInvoke in _beforeget_ColorChannel.GetInvocationList())
                    try
                    {
                        _beforeget_ColorChannel?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ColorChannel != null)
                foreach (Delegates.get_ColorChannel_AfterArgs toInvoke in _afterget_ColorChannel.GetInvocationList())
                    try
                    {
                        retVal = _afterget_ColorChannel.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_ColorChannel()
        {
            if (!HookedList.Contains("set_ColorChannel"))
            {
                HookedList.Add("set_ColorChannel");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_ColorChannel"), set_ColorChannel);
            }
        }

        internal static event Delegates.set_ColorChannel_BeforeArgs _beforeset_ColorChannel;
        internal static event Delegates.set_ColorChannel_AfterArgs _afterset_ColorChannel;

        private static void set_ColorChannel(Action<tk2dTileMap, ColorChannel> orig, tk2dTileMap self,
            ColorChannel value)
        {
            Delegates.Params_set_ColorChannel @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_ColorChannel != null)
                foreach (Delegates.set_ColorChannel_BeforeArgs toInvoke in _beforeset_ColorChannel.GetInvocationList())
                    try
                    {
                        _beforeset_ColorChannel?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ColorChannel != null)
                foreach (Delegates.set_ColorChannel_AfterArgs toInvoke in _afterset_ColorChannel.GetInvocationList())
                    try
                    {
                        _afterset_ColorChannel.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_PrefabsRoot()
        {
            if (!HookedList.Contains("get_PrefabsRoot"))
            {
                HookedList.Add("get_PrefabsRoot");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_PrefabsRoot"), get_PrefabsRoot);
            }
        }

        internal static event Delegates.get_PrefabsRoot_BeforeArgs _beforeget_PrefabsRoot;
        internal static event Delegates.get_PrefabsRoot_AfterArgs _afterget_PrefabsRoot;

        private static GameObject get_PrefabsRoot(Func<tk2dTileMap, GameObject> orig, tk2dTileMap self)
        {
            Delegates.Params_get_PrefabsRoot @params = new()
            {
                self = self
            };
            if (_beforeget_PrefabsRoot != null)
                foreach (Delegates.get_PrefabsRoot_BeforeArgs toInvoke in _beforeget_PrefabsRoot.GetInvocationList())
                    try
                    {
                        _beforeget_PrefabsRoot?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_PrefabsRoot != null)
                foreach (Delegates.get_PrefabsRoot_AfterArgs toInvoke in _afterget_PrefabsRoot.GetInvocationList())
                    try
                    {
                        retVal = _afterget_PrefabsRoot.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_PrefabsRoot()
        {
            if (!HookedList.Contains("set_PrefabsRoot"))
            {
                HookedList.Add("set_PrefabsRoot");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_PrefabsRoot"), set_PrefabsRoot);
            }
        }

        internal static event Delegates.set_PrefabsRoot_BeforeArgs _beforeset_PrefabsRoot;
        internal static event Delegates.set_PrefabsRoot_AfterArgs _afterset_PrefabsRoot;

        private static void set_PrefabsRoot(Action<tk2dTileMap, GameObject> orig, tk2dTileMap self, GameObject value)
        {
            Delegates.Params_set_PrefabsRoot @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_PrefabsRoot != null)
                foreach (Delegates.set_PrefabsRoot_BeforeArgs toInvoke in _beforeset_PrefabsRoot.GetInvocationList())
                    try
                    {
                        _beforeset_PrefabsRoot?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_PrefabsRoot != null)
                foreach (Delegates.set_PrefabsRoot_AfterArgs toInvoke in _afterset_PrefabsRoot.GetInvocationList())
                    try
                    {
                        _afterset_PrefabsRoot.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetTile()
        {
            if (!HookedList.Contains("GetTile"))
            {
                HookedList.Add("GetTile");
                On.tk2dTileMap.GetTile += GetTile;
            }
        }

        internal static event Delegates.GetTile_BeforeArgs _beforeGetTile;
        internal static event Delegates.GetTile_AfterArgs _afterGetTile;

        private static int GetTile(On.tk2dTileMap.orig_GetTile orig, tk2dTileMap self, int x, int y, int layer)
        {
            Delegates.Params_GetTile @params = new()
            {
                self = self, x = x, y = y, layer = layer
            };
            if (_beforeGetTile != null)
                foreach (Delegates.GetTile_BeforeArgs toInvoke in _beforeGetTile.GetInvocationList())
                    try
                    {
                        _beforeGetTile?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            x = @params.x;
            y = @params.y;
            layer = @params.layer;
            var retVal = orig(self, x, y, layer);
            if (_afterGetTile != null)
                foreach (Delegates.GetTile_AfterArgs toInvoke in _afterGetTile.GetInvocationList())
                    try
                    {
                        retVal = _afterGetTile.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetTileFlags()
        {
            if (!HookedList.Contains("GetTileFlags"))
            {
                HookedList.Add("GetTileFlags");
                On.tk2dTileMap.GetTileFlags += GetTileFlags;
            }
        }

        internal static event Delegates.GetTileFlags_BeforeArgs _beforeGetTileFlags;
        internal static event Delegates.GetTileFlags_AfterArgs _afterGetTileFlags;

        private static tk2dTileFlags GetTileFlags(On.tk2dTileMap.orig_GetTileFlags orig, tk2dTileMap self, int x, int y,
            int layer)
        {
            Delegates.Params_GetTileFlags @params = new()
            {
                self = self, x = x, y = y, layer = layer
            };
            if (_beforeGetTileFlags != null)
                foreach (Delegates.GetTileFlags_BeforeArgs toInvoke in _beforeGetTileFlags.GetInvocationList())
                    try
                    {
                        _beforeGetTileFlags?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            x = @params.x;
            y = @params.y;
            layer = @params.layer;
            var retVal = orig(self, x, y, layer);
            if (_afterGetTileFlags != null)
                foreach (Delegates.GetTileFlags_AfterArgs toInvoke in _afterGetTileFlags.GetInvocationList())
                    try
                    {
                        retVal = _afterGetTileFlags.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetTile()
        {
            if (!HookedList.Contains("SetTile"))
            {
                HookedList.Add("SetTile");
                On.tk2dTileMap.SetTile += SetTile;
            }
        }

        internal static event Delegates.SetTile_BeforeArgs _beforeSetTile;
        internal static event Delegates.SetTile_AfterArgs _afterSetTile;

        private static void SetTile(On.tk2dTileMap.orig_SetTile orig, tk2dTileMap self, int x, int y, int layer,
            int tile)
        {
            Delegates.Params_SetTile @params = new()
            {
                self = self, x = x, y = y, layer = layer, tile = tile
            };
            if (_beforeSetTile != null)
                foreach (Delegates.SetTile_BeforeArgs toInvoke in _beforeSetTile.GetInvocationList())
                    try
                    {
                        _beforeSetTile?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            x = @params.x;
            y = @params.y;
            layer = @params.layer;
            tile = @params.tile;
            orig(self, x, y, layer, tile);
            if (_afterSetTile != null)
                foreach (Delegates.SetTile_AfterArgs toInvoke in _afterSetTile.GetInvocationList())
                    try
                    {
                        _afterSetTile.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetTileFlags()
        {
            if (!HookedList.Contains("SetTileFlags"))
            {
                HookedList.Add("SetTileFlags");
                On.tk2dTileMap.SetTileFlags += SetTileFlags;
            }
        }

        internal static event Delegates.SetTileFlags_BeforeArgs _beforeSetTileFlags;
        internal static event Delegates.SetTileFlags_AfterArgs _afterSetTileFlags;

        private static void SetTileFlags(On.tk2dTileMap.orig_SetTileFlags orig, tk2dTileMap self, int x, int y,
            int layer, tk2dTileFlags flags)
        {
            Delegates.Params_SetTileFlags @params = new()
            {
                self = self, x = x, y = y, layer = layer, flags = flags
            };
            if (_beforeSetTileFlags != null)
                foreach (Delegates.SetTileFlags_BeforeArgs toInvoke in _beforeSetTileFlags.GetInvocationList())
                    try
                    {
                        _beforeSetTileFlags?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            x = @params.x;
            y = @params.y;
            layer = @params.layer;
            flags = @params.flags;
            orig(self, x, y, layer, flags);
            if (_afterSetTileFlags != null)
                foreach (Delegates.SetTileFlags_AfterArgs toInvoke in _afterSetTileFlags.GetInvocationList())
                    try
                    {
                        _afterSetTileFlags.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookClearTile()
        {
            if (!HookedList.Contains("ClearTile"))
            {
                HookedList.Add("ClearTile");
                On.tk2dTileMap.ClearTile += ClearTile;
            }
        }

        internal static event Delegates.ClearTile_BeforeArgs _beforeClearTile;
        internal static event Delegates.ClearTile_AfterArgs _afterClearTile;

        private static void ClearTile(On.tk2dTileMap.orig_ClearTile orig, tk2dTileMap self, int x, int y, int layer)
        {
            Delegates.Params_ClearTile @params = new()
            {
                self = self, x = x, y = y, layer = layer
            };
            if (_beforeClearTile != null)
                foreach (Delegates.ClearTile_BeforeArgs toInvoke in _beforeClearTile.GetInvocationList())
                    try
                    {
                        _beforeClearTile?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            x = @params.x;
            y = @params.y;
            layer = @params.layer;
            orig(self, x, y, layer);
            if (_afterClearTile != null)
                foreach (Delegates.ClearTile_AfterArgs toInvoke in _afterClearTile.GetInvocationList())
                    try
                    {
                        _afterClearTile.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<tk2dTileMap> orig, tk2dTileMap self);

        public delegate void Build_AfterArgs(Params_Build args);

        public delegate void Build_BeforeArgs(Params_Build args);

        public delegate void Build_WithArgs(Action<tk2dTileMap> orig, tk2dTileMap self);

        public delegate void ClearSpawnedInstances_AfterArgs(Params_ClearSpawnedInstances args);

        public delegate void ClearSpawnedInstances_BeforeArgs(Params_ClearSpawnedInstances args);

        public delegate void ClearSpawnedInstances_WithArgs(Action<tk2dTileMap> orig, tk2dTileMap self);

        public delegate void ClearTile_AfterArgs(Params_ClearTile args);

        public delegate void ClearTile_BeforeArgs(Params_ClearTile args);

        public delegate void ClearTile_WithArgs(Action<tk2dTileMap, int, int, int> orig, tk2dTileMap self, int x, int y,
            int layer);

        public delegate void DestroyMesh_AfterArgs(Params_DestroyMesh args);

        public delegate void DestroyMesh_BeforeArgs(Params_DestroyMesh args);

        public delegate void DestroyMesh_WithArgs(Action<tk2dTileMap, Mesh> orig, tk2dTileMap self, Mesh mesh);

        public delegate void EndEditMode_AfterArgs(Params_EndEditMode args);

        public delegate void EndEditMode_BeforeArgs(Params_EndEditMode args);

        public delegate void EndEditMode_WithArgs(Action<tk2dTileMap> orig, tk2dTileMap self);

        public delegate void ForceBuild_AfterArgs(Params_ForceBuild args);

        public delegate void ForceBuild_BeforeArgs(Params_ForceBuild args);

        public delegate void ForceBuild_WithArgs(Action<tk2dTileMap> orig, tk2dTileMap self);

        public delegate bool get_AllowEdit_AfterArgs(Params_get_AllowEdit args, bool ret);

        public delegate void get_AllowEdit_BeforeArgs(Params_get_AllowEdit args);

        public delegate bool get_AllowEdit_WithArgs(Func<tk2dTileMap, bool> orig, tk2dTileMap self);

        public delegate ColorChannel get_ColorChannel_AfterArgs(Params_get_ColorChannel args, ColorChannel ret);

        public delegate void get_ColorChannel_BeforeArgs(Params_get_ColorChannel args);

        public delegate ColorChannel get_ColorChannel_WithArgs(Func<tk2dTileMap, ColorChannel> orig, tk2dTileMap self);

        public delegate tk2dSpriteCollectionData get_Editor__SpriteCollection_AfterArgs(
            Params_get_Editor__SpriteCollection args, tk2dSpriteCollectionData ret);

        public delegate void get_Editor__SpriteCollection_BeforeArgs(Params_get_Editor__SpriteCollection args);

        public delegate tk2dSpriteCollectionData get_Editor__SpriteCollection_WithArgs(
            Func<tk2dTileMap, tk2dSpriteCollectionData> orig, tk2dTileMap self);

        public delegate Layer[] get_Layers_AfterArgs(Params_get_Layers args, Layer[] ret);

        public delegate void get_Layers_BeforeArgs(Params_get_Layers args);

        public delegate Layer[] get_Layers_WithArgs(Func<tk2dTileMap, Layer[]> orig, tk2dTileMap self);

        public delegate GameObject get_PrefabsRoot_AfterArgs(Params_get_PrefabsRoot args, GameObject ret);

        public delegate void get_PrefabsRoot_BeforeArgs(Params_get_PrefabsRoot args);

        public delegate GameObject get_PrefabsRoot_WithArgs(Func<tk2dTileMap, GameObject> orig, tk2dTileMap self);

        public delegate tk2dSpriteCollectionData get_SpriteCollectionInst_AfterArgs(
            Params_get_SpriteCollectionInst args, tk2dSpriteCollectionData ret);

        public delegate void get_SpriteCollectionInst_BeforeArgs(Params_get_SpriteCollectionInst args);

        public delegate tk2dSpriteCollectionData get_SpriteCollectionInst_WithArgs(
            Func<tk2dTileMap, tk2dSpriteCollectionData> orig, tk2dTileMap self);

        public delegate List<tk2dTileMap.TilemapPrefabInstance> get_TilePrefabsList_AfterArgs(
            Params_get_TilePrefabsList args, List<tk2dTileMap.TilemapPrefabInstance> ret);

        public delegate void get_TilePrefabsList_BeforeArgs(Params_get_TilePrefabsList args);

        public delegate List<tk2dTileMap.TilemapPrefabInstance> get_TilePrefabsList_WithArgs(
            Func<tk2dTileMap, List<tk2dTileMap.TilemapPrefabInstance>> orig, tk2dTileMap self);

        public delegate Color GetInterpolatedColorAtPosition_AfterArgs(Params_GetInterpolatedColorAtPosition args,
            Color ret);

        public delegate void GetInterpolatedColorAtPosition_BeforeArgs(Params_GetInterpolatedColorAtPosition args);

        public delegate Color GetInterpolatedColorAtPosition_WithArgs(Func<tk2dTileMap, Vector3, Color> orig,
            tk2dTileMap self, Vector3 position);

        public delegate int GetTile_AfterArgs(Params_GetTile args, int ret);

        public delegate void GetTile_BeforeArgs(Params_GetTile args);

        public delegate int GetTile_WithArgs(Func<tk2dTileMap, int, int, int, int> orig, tk2dTileMap self, int x, int y,
            int layer);

        public delegate bool GetTileAtPosition_AfterArgs(Params_GetTileAtPosition args, bool ret);

        public delegate void GetTileAtPosition_BeforeArgs(Params_GetTileAtPosition args);

        public delegate bool GetTileAtPosition_WithArgs(Func<tk2dTileMap, Vector3, int, int, bool> orig,
            tk2dTileMap self, Vector3 position, out int x, out int y);

        public delegate tk2dTileFlags GetTileFlags_AfterArgs(Params_GetTileFlags args, tk2dTileFlags ret);

        public delegate void GetTileFlags_BeforeArgs(Params_GetTileFlags args);

        public delegate tk2dTileFlags GetTileFlags_WithArgs(Func<tk2dTileMap, int, int, int, tk2dTileFlags> orig,
            tk2dTileMap self, int x, int y, int layer);

        public delegate bool GetTileFracAtPosition_AfterArgs(Params_GetTileFracAtPosition args, bool ret);

        public delegate void GetTileFracAtPosition_BeforeArgs(Params_GetTileFracAtPosition args);

        public delegate bool GetTileFracAtPosition_WithArgs(Func<tk2dTileMap, Vector3, float, float, bool> orig,
            tk2dTileMap self, Vector3 position, out float x, out float y);

        public delegate int GetTileIdAtPosition_AfterArgs(Params_GetTileIdAtPosition args, int ret);

        public delegate void GetTileIdAtPosition_BeforeArgs(Params_GetTileIdAtPosition args);

        public delegate int GetTileIdAtPosition_WithArgs(Func<tk2dTileMap, Vector3, int, int> orig, tk2dTileMap self,
            Vector3 position, int layer);

        public delegate TileInfo GetTileInfoForTileId_AfterArgs(Params_GetTileInfoForTileId args, TileInfo ret);

        public delegate void GetTileInfoForTileId_BeforeArgs(Params_GetTileInfoForTileId args);

        public delegate TileInfo GetTileInfoForTileId_WithArgs(Func<tk2dTileMap, int, TileInfo> orig, tk2dTileMap self,
            int tileId);

        public delegate Vector3 GetTilePosition_AfterArgs(Params_GetTilePosition args, Vector3 ret);

        public delegate void GetTilePosition_BeforeArgs(Params_GetTilePosition args);

        public delegate Vector3 GetTilePosition_WithArgs(Func<tk2dTileMap, int, int, Vector3> orig, tk2dTileMap self,
            int x, int y);

        public delegate int GetTilePrefabsListCount_AfterArgs(Params_GetTilePrefabsListCount args, int ret);

        public delegate void GetTilePrefabsListCount_BeforeArgs(Params_GetTilePrefabsListCount args);

        public delegate int GetTilePrefabsListCount_WithArgs(Func<tk2dTileMap, int> orig, tk2dTileMap self);

        public delegate void GetTilePrefabsListItem_AfterArgs(Params_GetTilePrefabsListItem args);

        public delegate void GetTilePrefabsListItem_BeforeArgs(Params_GetTilePrefabsListItem args);

        public delegate void GetTilePrefabsListItem_WithArgs(Action<tk2dTileMap, int, int, int, int, GameObject> orig,
            tk2dTileMap self, int index, out int x, out int y, out int layer, out GameObject instance);

        public delegate void OnDestroy_AfterArgs(Params_OnDestroy args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_WithArgs(Action<tk2dTileMap> orig, tk2dTileMap self);

        public delegate void set_ColorChannel_AfterArgs(Params_set_ColorChannel args);

        public delegate void set_ColorChannel_BeforeArgs(Params_set_ColorChannel args);

        public delegate void set_ColorChannel_WithArgs(Action<tk2dTileMap, ColorChannel> orig, tk2dTileMap self,
            ColorChannel value);

        public delegate void set_Editor__SpriteCollection_AfterArgs(Params_set_Editor__SpriteCollection args);

        public delegate void set_Editor__SpriteCollection_BeforeArgs(Params_set_Editor__SpriteCollection args);

        public delegate void set_Editor__SpriteCollection_WithArgs(Action<tk2dTileMap, tk2dSpriteCollectionData> orig,
            tk2dTileMap self, tk2dSpriteCollectionData value);

        public delegate void set_Layers_AfterArgs(Params_set_Layers args);

        public delegate void set_Layers_BeforeArgs(Params_set_Layers args);

        public delegate void set_Layers_WithArgs(Action<tk2dTileMap, Layer[]> orig, tk2dTileMap self, Layer[] value);

        public delegate void set_PrefabsRoot_AfterArgs(Params_set_PrefabsRoot args);

        public delegate void set_PrefabsRoot_BeforeArgs(Params_set_PrefabsRoot args);

        public delegate void set_PrefabsRoot_WithArgs(Action<tk2dTileMap, GameObject> orig, tk2dTileMap self,
            GameObject value);

        public delegate void SetPrefabsRootActive_AfterArgs(Params_SetPrefabsRootActive args);

        public delegate void SetPrefabsRootActive_BeforeArgs(Params_SetPrefabsRootActive args);

        public delegate void SetPrefabsRootActive_WithArgs(Action<tk2dTileMap, bool> orig, tk2dTileMap self,
            bool active);

        public delegate void SetTile_AfterArgs(Params_SetTile args);

        public delegate void SetTile_BeforeArgs(Params_SetTile args);

        public delegate void SetTile_WithArgs(Action<tk2dTileMap, int, int, int, int> orig, tk2dTileMap self, int x,
            int y, int layer, int tile);

        public delegate void SetTileFlags_AfterArgs(Params_SetTileFlags args);

        public delegate void SetTileFlags_BeforeArgs(Params_SetTileFlags args);

        public delegate void SetTileFlags_WithArgs(Action<tk2dTileMap, int, int, int, tk2dTileFlags> orig,
            tk2dTileMap self, int x, int y, int layer, tk2dTileFlags flags);

        public delegate void SetTilePrefabsList_AfterArgs(Params_SetTilePrefabsList args);

        public delegate void SetTilePrefabsList_BeforeArgs(Params_SetTilePrefabsList args);

        public delegate void SetTilePrefabsList_WithArgs(
            Action<tk2dTileMap, List<int>, List<int>, List<int>, List<GameObject>> orig, tk2dTileMap self, List<int> xs,
            List<int> ys, List<int> layers, List<GameObject> instances);

        public delegate void TouchMesh_AfterArgs(Params_TouchMesh args);

        public delegate void TouchMesh_BeforeArgs(Params_TouchMesh args);

        public delegate void TouchMesh_WithArgs(Action<tk2dTileMap, Mesh> orig, tk2dTileMap self, Mesh mesh);

        public delegate bool UsesSpriteCollection_AfterArgs(Params_UsesSpriteCollection args, bool ret);

        public delegate void UsesSpriteCollection_BeforeArgs(Params_UsesSpriteCollection args);

        public delegate bool UsesSpriteCollection_WithArgs(Func<tk2dTileMap, tk2dSpriteCollectionData, bool> orig,
            tk2dTileMap self, tk2dSpriteCollectionData spriteCollection);

        public sealed class Params_get_Editor__SpriteCollection
        {
            public tk2dTileMap self;
        }

        public sealed class Params_set_Editor__SpriteCollection
        {
            public tk2dTileMap self;
            public tk2dSpriteCollectionData value;
        }

        public sealed class Params_get_SpriteCollectionInst
        {
            public tk2dTileMap self;
        }

        public sealed class Params_get_AllowEdit
        {
            public tk2dTileMap self;
        }

        public sealed class Params_Awake
        {
            public tk2dTileMap self;
        }

        public sealed class Params_OnDestroy
        {
            public tk2dTileMap self;
        }

        public sealed class Params_Build
        {
            public tk2dTileMap self;
        }

        public sealed class Params_ForceBuild
        {
            public tk2dTileMap self;
        }

        public sealed class Params_ClearSpawnedInstances
        {
            public tk2dTileMap self;
        }

        public sealed class Params_SetPrefabsRootActive
        {
            public bool active;
            public tk2dTileMap self;
        }

        public sealed class Params_GetTileAtPosition
        {
            public Vector3 position;
            public tk2dTileMap self;
            public int x;
            public int y;
        }

        public sealed class Params_GetTileFracAtPosition
        {
            public Vector3 position;
            public tk2dTileMap self;
            public float x;
            public float y;
        }

        public sealed class Params_GetTilePosition
        {
            public tk2dTileMap self;
            public int x;
            public int y;
        }

        public sealed class Params_GetTileIdAtPosition
        {
            public int layer;
            public Vector3 position;
            public tk2dTileMap self;
        }

        public sealed class Params_GetTileInfoForTileId
        {
            public tk2dTileMap self;
            public int tileId;
        }

        public sealed class Params_GetInterpolatedColorAtPosition
        {
            public Vector3 position;
            public tk2dTileMap self;
        }

        public sealed class Params_UsesSpriteCollection
        {
            public tk2dTileMap self;
            public tk2dSpriteCollectionData spriteCollection;
        }

        public sealed class Params_EndEditMode
        {
            public tk2dTileMap self;
        }

        public sealed class Params_TouchMesh
        {
            public Mesh mesh;
            public tk2dTileMap self;
        }

        public sealed class Params_DestroyMesh
        {
            public Mesh mesh;
            public tk2dTileMap self;
        }

        public sealed class Params_GetTilePrefabsListCount
        {
            public tk2dTileMap self;
        }

        public sealed class Params_get_TilePrefabsList
        {
            public tk2dTileMap self;
        }

        public sealed class Params_GetTilePrefabsListItem
        {
            public int index;
            public GameObject instance;
            public int layer;
            public tk2dTileMap self;
            public int x;
            public int y;
        }

        public sealed class Params_SetTilePrefabsList
        {
            public List<GameObject> instances;
            public List<int> layers;
            public tk2dTileMap self;
            public List<int> xs;
            public List<int> ys;
        }

        public sealed class Params_get_Layers
        {
            public tk2dTileMap self;
        }

        public sealed class Params_set_Layers
        {
            public tk2dTileMap self;
            public Layer[] value;
        }

        public sealed class Params_get_ColorChannel
        {
            public tk2dTileMap self;
        }

        public sealed class Params_set_ColorChannel
        {
            public tk2dTileMap self;
            public ColorChannel value;
        }

        public sealed class Params_get_PrefabsRoot
        {
            public tk2dTileMap self;
        }

        public sealed class Params_set_PrefabsRoot
        {
            public tk2dTileMap self;
            public GameObject value;
        }

        public sealed class Params_GetTile
        {
            public int layer;
            public tk2dTileMap self;
            public int x;
            public int y;
        }

        public sealed class Params_GetTileFlags
        {
            public int layer;
            public tk2dTileMap self;
            public int x;
            public int y;
        }

        public sealed class Params_SetTile
        {
            public int layer;
            public tk2dTileMap self;
            public int tile;
            public int x;
            public int y;
        }

        public sealed class Params_SetTileFlags
        {
            public tk2dTileFlags flags;
            public int layer;
            public tk2dTileMap self;
            public int x;
            public int y;
        }

        public sealed class Params_ClearTile
        {
            public int layer;
            public tk2dTileMap self;
            public int x;
            public int y;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Editor__SpriteCollection_BeforeArgs get_Editor__SpriteCollection
        {
            add
            {
                HookHandler._beforeget_Editor__SpriteCollection += value;
                HookHandler.Hookget_Editor__SpriteCollection();
            }
            remove => HookHandler._beforeget_Editor__SpriteCollection -= value;
        }

        public static event Delegates.set_Editor__SpriteCollection_BeforeArgs set_Editor__SpriteCollection
        {
            add
            {
                HookHandler._beforeset_Editor__SpriteCollection += value;
                HookHandler.Hookset_Editor__SpriteCollection();
            }
            remove => HookHandler._beforeset_Editor__SpriteCollection -= value;
        }

        public static event Delegates.get_SpriteCollectionInst_BeforeArgs get_SpriteCollectionInst
        {
            add
            {
                HookHandler._beforeget_SpriteCollectionInst += value;
                HookHandler.Hookget_SpriteCollectionInst();
            }
            remove => HookHandler._beforeget_SpriteCollectionInst -= value;
        }

        public static event Delegates.get_AllowEdit_BeforeArgs get_AllowEdit
        {
            add
            {
                HookHandler._beforeget_AllowEdit += value;
                HookHandler.Hookget_AllowEdit();
            }
            remove => HookHandler._beforeget_AllowEdit -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.Build_BeforeArgs Build
        {
            add
            {
                HookHandler._beforeBuild += value;
                HookHandler.HookBuild();
            }
            remove => HookHandler._beforeBuild -= value;
        }

        public static event Delegates.ForceBuild_BeforeArgs ForceBuild
        {
            add
            {
                HookHandler._beforeForceBuild += value;
                HookHandler.HookForceBuild();
            }
            remove => HookHandler._beforeForceBuild -= value;
        }

        public static event Delegates.ClearSpawnedInstances_BeforeArgs ClearSpawnedInstances
        {
            add
            {
                HookHandler._beforeClearSpawnedInstances += value;
                HookHandler.HookClearSpawnedInstances();
            }
            remove => HookHandler._beforeClearSpawnedInstances -= value;
        }

        public static event Delegates.SetPrefabsRootActive_BeforeArgs SetPrefabsRootActive
        {
            add
            {
                HookHandler._beforeSetPrefabsRootActive += value;
                HookHandler.HookSetPrefabsRootActive();
            }
            remove => HookHandler._beforeSetPrefabsRootActive -= value;
        }

        public static event Delegates.GetTileAtPosition_BeforeArgs GetTileAtPosition
        {
            add
            {
                HookHandler._beforeGetTileAtPosition += value;
                HookHandler.HookGetTileAtPosition();
            }
            remove => HookHandler._beforeGetTileAtPosition -= value;
        }

        public static event Delegates.GetTileFracAtPosition_BeforeArgs GetTileFracAtPosition
        {
            add
            {
                HookHandler._beforeGetTileFracAtPosition += value;
                HookHandler.HookGetTileFracAtPosition();
            }
            remove => HookHandler._beforeGetTileFracAtPosition -= value;
        }

        public static event Delegates.GetTilePosition_BeforeArgs GetTilePosition
        {
            add
            {
                HookHandler._beforeGetTilePosition += value;
                HookHandler.HookGetTilePosition();
            }
            remove => HookHandler._beforeGetTilePosition -= value;
        }

        public static event Delegates.GetTileIdAtPosition_BeforeArgs GetTileIdAtPosition
        {
            add
            {
                HookHandler._beforeGetTileIdAtPosition += value;
                HookHandler.HookGetTileIdAtPosition();
            }
            remove => HookHandler._beforeGetTileIdAtPosition -= value;
        }

        public static event Delegates.GetTileInfoForTileId_BeforeArgs GetTileInfoForTileId
        {
            add
            {
                HookHandler._beforeGetTileInfoForTileId += value;
                HookHandler.HookGetTileInfoForTileId();
            }
            remove => HookHandler._beforeGetTileInfoForTileId -= value;
        }

        public static event Delegates.GetInterpolatedColorAtPosition_BeforeArgs GetInterpolatedColorAtPosition
        {
            add
            {
                HookHandler._beforeGetInterpolatedColorAtPosition += value;
                HookHandler.HookGetInterpolatedColorAtPosition();
            }
            remove => HookHandler._beforeGetInterpolatedColorAtPosition -= value;
        }

        public static event Delegates.UsesSpriteCollection_BeforeArgs UsesSpriteCollection
        {
            add
            {
                HookHandler._beforeUsesSpriteCollection += value;
                HookHandler.HookUsesSpriteCollection();
            }
            remove => HookHandler._beforeUsesSpriteCollection -= value;
        }

        public static event Delegates.EndEditMode_BeforeArgs EndEditMode
        {
            add
            {
                HookHandler._beforeEndEditMode += value;
                HookHandler.HookEndEditMode();
            }
            remove => HookHandler._beforeEndEditMode -= value;
        }

        public static event Delegates.TouchMesh_BeforeArgs TouchMesh
        {
            add
            {
                HookHandler._beforeTouchMesh += value;
                HookHandler.HookTouchMesh();
            }
            remove => HookHandler._beforeTouchMesh -= value;
        }

        public static event Delegates.DestroyMesh_BeforeArgs DestroyMesh
        {
            add
            {
                HookHandler._beforeDestroyMesh += value;
                HookHandler.HookDestroyMesh();
            }
            remove => HookHandler._beforeDestroyMesh -= value;
        }

        public static event Delegates.GetTilePrefabsListCount_BeforeArgs GetTilePrefabsListCount
        {
            add
            {
                HookHandler._beforeGetTilePrefabsListCount += value;
                HookHandler.HookGetTilePrefabsListCount();
            }
            remove => HookHandler._beforeGetTilePrefabsListCount -= value;
        }

        public static event Delegates.get_TilePrefabsList_BeforeArgs get_TilePrefabsList
        {
            add
            {
                HookHandler._beforeget_TilePrefabsList += value;
                HookHandler.Hookget_TilePrefabsList();
            }
            remove => HookHandler._beforeget_TilePrefabsList -= value;
        }

        public static event Delegates.GetTilePrefabsListItem_BeforeArgs GetTilePrefabsListItem
        {
            add
            {
                HookHandler._beforeGetTilePrefabsListItem += value;
                HookHandler.HookGetTilePrefabsListItem();
            }
            remove => HookHandler._beforeGetTilePrefabsListItem -= value;
        }

        public static event Delegates.SetTilePrefabsList_BeforeArgs SetTilePrefabsList
        {
            add
            {
                HookHandler._beforeSetTilePrefabsList += value;
                HookHandler.HookSetTilePrefabsList();
            }
            remove => HookHandler._beforeSetTilePrefabsList -= value;
        }

        public static event Delegates.get_Layers_BeforeArgs get_Layers
        {
            add
            {
                HookHandler._beforeget_Layers += value;
                HookHandler.Hookget_Layers();
            }
            remove => HookHandler._beforeget_Layers -= value;
        }

        public static event Delegates.set_Layers_BeforeArgs set_Layers
        {
            add
            {
                HookHandler._beforeset_Layers += value;
                HookHandler.Hookset_Layers();
            }
            remove => HookHandler._beforeset_Layers -= value;
        }

        public static event Delegates.get_ColorChannel_BeforeArgs get_ColorChannel
        {
            add
            {
                HookHandler._beforeget_ColorChannel += value;
                HookHandler.Hookget_ColorChannel();
            }
            remove => HookHandler._beforeget_ColorChannel -= value;
        }

        public static event Delegates.set_ColorChannel_BeforeArgs set_ColorChannel
        {
            add
            {
                HookHandler._beforeset_ColorChannel += value;
                HookHandler.Hookset_ColorChannel();
            }
            remove => HookHandler._beforeset_ColorChannel -= value;
        }

        public static event Delegates.get_PrefabsRoot_BeforeArgs get_PrefabsRoot
        {
            add
            {
                HookHandler._beforeget_PrefabsRoot += value;
                HookHandler.Hookget_PrefabsRoot();
            }
            remove => HookHandler._beforeget_PrefabsRoot -= value;
        }

        public static event Delegates.set_PrefabsRoot_BeforeArgs set_PrefabsRoot
        {
            add
            {
                HookHandler._beforeset_PrefabsRoot += value;
                HookHandler.Hookset_PrefabsRoot();
            }
            remove => HookHandler._beforeset_PrefabsRoot -= value;
        }

        public static event Delegates.GetTile_BeforeArgs GetTile
        {
            add
            {
                HookHandler._beforeGetTile += value;
                HookHandler.HookGetTile();
            }
            remove => HookHandler._beforeGetTile -= value;
        }

        public static event Delegates.GetTileFlags_BeforeArgs GetTileFlags
        {
            add
            {
                HookHandler._beforeGetTileFlags += value;
                HookHandler.HookGetTileFlags();
            }
            remove => HookHandler._beforeGetTileFlags -= value;
        }

        public static event Delegates.SetTile_BeforeArgs SetTile
        {
            add
            {
                HookHandler._beforeSetTile += value;
                HookHandler.HookSetTile();
            }
            remove => HookHandler._beforeSetTile -= value;
        }

        public static event Delegates.SetTileFlags_BeforeArgs SetTileFlags
        {
            add
            {
                HookHandler._beforeSetTileFlags += value;
                HookHandler.HookSetTileFlags();
            }
            remove => HookHandler._beforeSetTileFlags -= value;
        }

        public static event Delegates.ClearTile_BeforeArgs ClearTile
        {
            add
            {
                HookHandler._beforeClearTile += value;
                HookHandler.HookClearTile();
            }
            remove => HookHandler._beforeClearTile -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Editor__SpriteCollection_AfterArgs get_Editor__SpriteCollection
        {
            add
            {
                HookHandler._afterget_Editor__SpriteCollection += value;
                HookHandler.Hookget_Editor__SpriteCollection();
            }
            remove => HookHandler._afterget_Editor__SpriteCollection -= value;
        }

        public static event Delegates.set_Editor__SpriteCollection_AfterArgs set_Editor__SpriteCollection
        {
            add
            {
                HookHandler._afterset_Editor__SpriteCollection += value;
                HookHandler.Hookset_Editor__SpriteCollection();
            }
            remove => HookHandler._afterset_Editor__SpriteCollection -= value;
        }

        public static event Delegates.get_SpriteCollectionInst_AfterArgs get_SpriteCollectionInst
        {
            add
            {
                HookHandler._afterget_SpriteCollectionInst += value;
                HookHandler.Hookget_SpriteCollectionInst();
            }
            remove => HookHandler._afterget_SpriteCollectionInst -= value;
        }

        public static event Delegates.get_AllowEdit_AfterArgs get_AllowEdit
        {
            add
            {
                HookHandler._afterget_AllowEdit += value;
                HookHandler.Hookget_AllowEdit();
            }
            remove => HookHandler._afterget_AllowEdit -= value;
        }

        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnDestroy_AfterArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.Build_AfterArgs Build
        {
            add
            {
                HookHandler._afterBuild += value;
                HookHandler.HookBuild();
            }
            remove => HookHandler._afterBuild -= value;
        }

        public static event Delegates.ForceBuild_AfterArgs ForceBuild
        {
            add
            {
                HookHandler._afterForceBuild += value;
                HookHandler.HookForceBuild();
            }
            remove => HookHandler._afterForceBuild -= value;
        }

        public static event Delegates.ClearSpawnedInstances_AfterArgs ClearSpawnedInstances
        {
            add
            {
                HookHandler._afterClearSpawnedInstances += value;
                HookHandler.HookClearSpawnedInstances();
            }
            remove => HookHandler._afterClearSpawnedInstances -= value;
        }

        public static event Delegates.SetPrefabsRootActive_AfterArgs SetPrefabsRootActive
        {
            add
            {
                HookHandler._afterSetPrefabsRootActive += value;
                HookHandler.HookSetPrefabsRootActive();
            }
            remove => HookHandler._afterSetPrefabsRootActive -= value;
        }

        public static event Delegates.GetTileAtPosition_AfterArgs GetTileAtPosition
        {
            add
            {
                HookHandler._afterGetTileAtPosition += value;
                HookHandler.HookGetTileAtPosition();
            }
            remove => HookHandler._afterGetTileAtPosition -= value;
        }

        public static event Delegates.GetTileFracAtPosition_AfterArgs GetTileFracAtPosition
        {
            add
            {
                HookHandler._afterGetTileFracAtPosition += value;
                HookHandler.HookGetTileFracAtPosition();
            }
            remove => HookHandler._afterGetTileFracAtPosition -= value;
        }

        public static event Delegates.GetTilePosition_AfterArgs GetTilePosition
        {
            add
            {
                HookHandler._afterGetTilePosition += value;
                HookHandler.HookGetTilePosition();
            }
            remove => HookHandler._afterGetTilePosition -= value;
        }

        public static event Delegates.GetTileIdAtPosition_AfterArgs GetTileIdAtPosition
        {
            add
            {
                HookHandler._afterGetTileIdAtPosition += value;
                HookHandler.HookGetTileIdAtPosition();
            }
            remove => HookHandler._afterGetTileIdAtPosition -= value;
        }

        public static event Delegates.GetTileInfoForTileId_AfterArgs GetTileInfoForTileId
        {
            add
            {
                HookHandler._afterGetTileInfoForTileId += value;
                HookHandler.HookGetTileInfoForTileId();
            }
            remove => HookHandler._afterGetTileInfoForTileId -= value;
        }

        public static event Delegates.GetInterpolatedColorAtPosition_AfterArgs GetInterpolatedColorAtPosition
        {
            add
            {
                HookHandler._afterGetInterpolatedColorAtPosition += value;
                HookHandler.HookGetInterpolatedColorAtPosition();
            }
            remove => HookHandler._afterGetInterpolatedColorAtPosition -= value;
        }

        public static event Delegates.UsesSpriteCollection_AfterArgs UsesSpriteCollection
        {
            add
            {
                HookHandler._afterUsesSpriteCollection += value;
                HookHandler.HookUsesSpriteCollection();
            }
            remove => HookHandler._afterUsesSpriteCollection -= value;
        }

        public static event Delegates.EndEditMode_AfterArgs EndEditMode
        {
            add
            {
                HookHandler._afterEndEditMode += value;
                HookHandler.HookEndEditMode();
            }
            remove => HookHandler._afterEndEditMode -= value;
        }

        public static event Delegates.TouchMesh_AfterArgs TouchMesh
        {
            add
            {
                HookHandler._afterTouchMesh += value;
                HookHandler.HookTouchMesh();
            }
            remove => HookHandler._afterTouchMesh -= value;
        }

        public static event Delegates.DestroyMesh_AfterArgs DestroyMesh
        {
            add
            {
                HookHandler._afterDestroyMesh += value;
                HookHandler.HookDestroyMesh();
            }
            remove => HookHandler._afterDestroyMesh -= value;
        }

        public static event Delegates.GetTilePrefabsListCount_AfterArgs GetTilePrefabsListCount
        {
            add
            {
                HookHandler._afterGetTilePrefabsListCount += value;
                HookHandler.HookGetTilePrefabsListCount();
            }
            remove => HookHandler._afterGetTilePrefabsListCount -= value;
        }

        public static event Delegates.get_TilePrefabsList_AfterArgs get_TilePrefabsList
        {
            add
            {
                HookHandler._afterget_TilePrefabsList += value;
                HookHandler.Hookget_TilePrefabsList();
            }
            remove => HookHandler._afterget_TilePrefabsList -= value;
        }

        public static event Delegates.GetTilePrefabsListItem_AfterArgs GetTilePrefabsListItem
        {
            add
            {
                HookHandler._afterGetTilePrefabsListItem += value;
                HookHandler.HookGetTilePrefabsListItem();
            }
            remove => HookHandler._afterGetTilePrefabsListItem -= value;
        }

        public static event Delegates.SetTilePrefabsList_AfterArgs SetTilePrefabsList
        {
            add
            {
                HookHandler._afterSetTilePrefabsList += value;
                HookHandler.HookSetTilePrefabsList();
            }
            remove => HookHandler._afterSetTilePrefabsList -= value;
        }

        public static event Delegates.get_Layers_AfterArgs get_Layers
        {
            add
            {
                HookHandler._afterget_Layers += value;
                HookHandler.Hookget_Layers();
            }
            remove => HookHandler._afterget_Layers -= value;
        }

        public static event Delegates.set_Layers_AfterArgs set_Layers
        {
            add
            {
                HookHandler._afterset_Layers += value;
                HookHandler.Hookset_Layers();
            }
            remove => HookHandler._afterset_Layers -= value;
        }

        public static event Delegates.get_ColorChannel_AfterArgs get_ColorChannel
        {
            add
            {
                HookHandler._afterget_ColorChannel += value;
                HookHandler.Hookget_ColorChannel();
            }
            remove => HookHandler._afterget_ColorChannel -= value;
        }

        public static event Delegates.set_ColorChannel_AfterArgs set_ColorChannel
        {
            add
            {
                HookHandler._afterset_ColorChannel += value;
                HookHandler.Hookset_ColorChannel();
            }
            remove => HookHandler._afterset_ColorChannel -= value;
        }

        public static event Delegates.get_PrefabsRoot_AfterArgs get_PrefabsRoot
        {
            add
            {
                HookHandler._afterget_PrefabsRoot += value;
                HookHandler.Hookget_PrefabsRoot();
            }
            remove => HookHandler._afterget_PrefabsRoot -= value;
        }

        public static event Delegates.set_PrefabsRoot_AfterArgs set_PrefabsRoot
        {
            add
            {
                HookHandler._afterset_PrefabsRoot += value;
                HookHandler.Hookset_PrefabsRoot();
            }
            remove => HookHandler._afterset_PrefabsRoot -= value;
        }

        public static event Delegates.GetTile_AfterArgs GetTile
        {
            add
            {
                HookHandler._afterGetTile += value;
                HookHandler.HookGetTile();
            }
            remove => HookHandler._afterGetTile -= value;
        }

        public static event Delegates.GetTileFlags_AfterArgs GetTileFlags
        {
            add
            {
                HookHandler._afterGetTileFlags += value;
                HookHandler.HookGetTileFlags();
            }
            remove => HookHandler._afterGetTileFlags -= value;
        }

        public static event Delegates.SetTile_AfterArgs SetTile
        {
            add
            {
                HookHandler._afterSetTile += value;
                HookHandler.HookSetTile();
            }
            remove => HookHandler._afterSetTile -= value;
        }

        public static event Delegates.SetTileFlags_AfterArgs SetTileFlags
        {
            add
            {
                HookHandler._afterSetTileFlags += value;
                HookHandler.HookSetTileFlags();
            }
            remove => HookHandler._afterSetTileFlags -= value;
        }

        public static event Delegates.ClearTile_AfterArgs ClearTile
        {
            add
            {
                HookHandler._afterClearTile += value;
                HookHandler.HookClearTile();
            }
            remove => HookHandler._afterClearTile -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Editor__SpriteCollection_WithArgs get_Editor__SpriteCollection
        {
            add => HookEndpointManager.Add<Delegates.get_Editor__SpriteCollection_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_Editor__SpriteCollection"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Editor__SpriteCollection_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_Editor__SpriteCollection"), value);
        }

        public static event Delegates.set_Editor__SpriteCollection_WithArgs set_Editor__SpriteCollection
        {
            add => HookEndpointManager.Add<Delegates.set_Editor__SpriteCollection_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_Editor__SpriteCollection"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Editor__SpriteCollection_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_Editor__SpriteCollection"), value);
        }

        public static event Delegates.get_SpriteCollectionInst_WithArgs get_SpriteCollectionInst
        {
            add => HookEndpointManager.Add<Delegates.get_SpriteCollectionInst_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_SpriteCollectionInst"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SpriteCollectionInst_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_SpriteCollectionInst"), value);
        }

        public static event Delegates.get_AllowEdit_WithArgs get_AllowEdit
        {
            add => HookEndpointManager.Add<Delegates.get_AllowEdit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_AllowEdit"), value);
            remove => HookEndpointManager.Remove<Delegates.get_AllowEdit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_AllowEdit"), value);
        }

        public static event On.tk2dTileMap.hook_Awake Awake
        {
            add => On.tk2dTileMap.Awake += value;
            remove => On.tk2dTileMap.Awake -= value;
        }

        public static event On.tk2dTileMap.hook_OnDestroy OnDestroy
        {
            add => On.tk2dTileMap.OnDestroy += value;
            remove => On.tk2dTileMap.OnDestroy -= value;
        }

        public static event On.tk2dTileMap.hook_Build Build
        {
            add => On.tk2dTileMap.Build += value;
            remove => On.tk2dTileMap.Build -= value;
        }

        public static event On.tk2dTileMap.hook_ForceBuild ForceBuild
        {
            add => On.tk2dTileMap.ForceBuild += value;
            remove => On.tk2dTileMap.ForceBuild -= value;
        }

        public static event On.tk2dTileMap.hook_ClearSpawnedInstances ClearSpawnedInstances
        {
            add => On.tk2dTileMap.ClearSpawnedInstances += value;
            remove => On.tk2dTileMap.ClearSpawnedInstances -= value;
        }

        public static event On.tk2dTileMap.hook_SetPrefabsRootActive SetPrefabsRootActive
        {
            add => On.tk2dTileMap.SetPrefabsRootActive += value;
            remove => On.tk2dTileMap.SetPrefabsRootActive -= value;
        }

        public static event On.tk2dTileMap.hook_GetTileAtPosition GetTileAtPosition
        {
            add => On.tk2dTileMap.GetTileAtPosition += value;
            remove => On.tk2dTileMap.GetTileAtPosition -= value;
        }

        public static event On.tk2dTileMap.hook_GetTileFracAtPosition GetTileFracAtPosition
        {
            add => On.tk2dTileMap.GetTileFracAtPosition += value;
            remove => On.tk2dTileMap.GetTileFracAtPosition -= value;
        }

        public static event On.tk2dTileMap.hook_GetTilePosition GetTilePosition
        {
            add => On.tk2dTileMap.GetTilePosition += value;
            remove => On.tk2dTileMap.GetTilePosition -= value;
        }

        public static event On.tk2dTileMap.hook_GetTileIdAtPosition GetTileIdAtPosition
        {
            add => On.tk2dTileMap.GetTileIdAtPosition += value;
            remove => On.tk2dTileMap.GetTileIdAtPosition -= value;
        }

        public static event On.tk2dTileMap.hook_GetTileInfoForTileId GetTileInfoForTileId
        {
            add => On.tk2dTileMap.GetTileInfoForTileId += value;
            remove => On.tk2dTileMap.GetTileInfoForTileId -= value;
        }

        public static event On.tk2dTileMap.hook_GetInterpolatedColorAtPosition GetInterpolatedColorAtPosition
        {
            add => On.tk2dTileMap.GetInterpolatedColorAtPosition += value;
            remove => On.tk2dTileMap.GetInterpolatedColorAtPosition -= value;
        }

        public static event On.tk2dTileMap.hook_UsesSpriteCollection UsesSpriteCollection
        {
            add => On.tk2dTileMap.UsesSpriteCollection += value;
            remove => On.tk2dTileMap.UsesSpriteCollection -= value;
        }

        public static event On.tk2dTileMap.hook_EndEditMode EndEditMode
        {
            add => On.tk2dTileMap.EndEditMode += value;
            remove => On.tk2dTileMap.EndEditMode -= value;
        }

        public static event On.tk2dTileMap.hook_TouchMesh TouchMesh
        {
            add => On.tk2dTileMap.TouchMesh += value;
            remove => On.tk2dTileMap.TouchMesh -= value;
        }

        public static event On.tk2dTileMap.hook_DestroyMesh DestroyMesh
        {
            add => On.tk2dTileMap.DestroyMesh += value;
            remove => On.tk2dTileMap.DestroyMesh -= value;
        }

        public static event On.tk2dTileMap.hook_GetTilePrefabsListCount GetTilePrefabsListCount
        {
            add => On.tk2dTileMap.GetTilePrefabsListCount += value;
            remove => On.tk2dTileMap.GetTilePrefabsListCount -= value;
        }

        public static event Delegates.get_TilePrefabsList_WithArgs get_TilePrefabsList
        {
            add => HookEndpointManager.Add<Delegates.get_TilePrefabsList_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_TilePrefabsList"), value);
            remove => HookEndpointManager.Remove<Delegates.get_TilePrefabsList_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_TilePrefabsList"), value);
        }

        public static event On.tk2dTileMap.hook_GetTilePrefabsListItem GetTilePrefabsListItem
        {
            add => On.tk2dTileMap.GetTilePrefabsListItem += value;
            remove => On.tk2dTileMap.GetTilePrefabsListItem -= value;
        }

        public static event On.tk2dTileMap.hook_SetTilePrefabsList SetTilePrefabsList
        {
            add => On.tk2dTileMap.SetTilePrefabsList += value;
            remove => On.tk2dTileMap.SetTilePrefabsList -= value;
        }

        public static event Delegates.get_Layers_WithArgs get_Layers
        {
            add => HookEndpointManager.Add<Delegates.get_Layers_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_Layers"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Layers_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_Layers"), value);
        }

        public static event Delegates.set_Layers_WithArgs set_Layers
        {
            add => HookEndpointManager.Add<Delegates.set_Layers_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_Layers"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Layers_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_Layers"), value);
        }

        public static event Delegates.get_ColorChannel_WithArgs get_ColorChannel
        {
            add => HookEndpointManager.Add<Delegates.get_ColorChannel_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_ColorChannel"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ColorChannel_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_ColorChannel"), value);
        }

        public static event Delegates.set_ColorChannel_WithArgs set_ColorChannel
        {
            add => HookEndpointManager.Add<Delegates.set_ColorChannel_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_ColorChannel"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ColorChannel_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_ColorChannel"), value);
        }

        public static event Delegates.get_PrefabsRoot_WithArgs get_PrefabsRoot
        {
            add => HookEndpointManager.Add<Delegates.get_PrefabsRoot_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_PrefabsRoot"), value);
            remove => HookEndpointManager.Remove<Delegates.get_PrefabsRoot_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_PrefabsRoot"), value);
        }

        public static event Delegates.set_PrefabsRoot_WithArgs set_PrefabsRoot
        {
            add => HookEndpointManager.Add<Delegates.set_PrefabsRoot_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_PrefabsRoot"), value);
            remove => HookEndpointManager.Remove<Delegates.set_PrefabsRoot_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_PrefabsRoot"), value);
        }

        public static event On.tk2dTileMap.hook_GetTile GetTile
        {
            add => On.tk2dTileMap.GetTile += value;
            remove => On.tk2dTileMap.GetTile -= value;
        }

        public static event On.tk2dTileMap.hook_GetTileFlags GetTileFlags
        {
            add => On.tk2dTileMap.GetTileFlags += value;
            remove => On.tk2dTileMap.GetTileFlags -= value;
        }

        public static event On.tk2dTileMap.hook_SetTile SetTile
        {
            add => On.tk2dTileMap.SetTile += value;
            remove => On.tk2dTileMap.SetTile -= value;
        }

        public static event On.tk2dTileMap.hook_SetTileFlags SetTileFlags
        {
            add => On.tk2dTileMap.SetTileFlags += value;
            remove => On.tk2dTileMap.SetTileFlags -= value;
        }

        public static event On.tk2dTileMap.hook_ClearTile ClearTile
        {
            add => On.tk2dTileMap.ClearTile += value;
            remove => On.tk2dTileMap.ClearTile -= value;
        }
    }
}