using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using tk2dRuntime.TileMap;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dTileMap class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dTileMap
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Editor__SpriteCollection()
        {
            if (!HookedList.Contains("get_Editor__SpriteCollection"))
            {
                HookedList.Add("get_Editor__SpriteCollection");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_Editor__SpriteCollection"),
                    get_Editor__SpriteCollection);
            }
        }

        internal static event Delegates.get_Editor__SpriteCollection_BeforeArgs _beforeget_Editor__SpriteCollection;
        internal static event Delegates.get_Editor__SpriteCollection_NormalArgs _afterget_Editor__SpriteCollection;

        private static tk2dSpriteCollectionData get_Editor__SpriteCollection(
            Func<tk2dTileMap, tk2dSpriteCollectionData> orig, tk2dTileMap self)
        {
            Delegates.Params_get_Editor__SpriteCollection @params = new()
            {
                self = self
            };
            _beforeget_Editor__SpriteCollection?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Editor__SpriteCollection != null) retVal = _afterget_Editor__SpriteCollection.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Editor__SpriteCollection()
        {
            if (!HookedList.Contains("set_Editor__SpriteCollection"))
            {
                HookedList.Add("set_Editor__SpriteCollection");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_Editor__SpriteCollection"),
                    set_Editor__SpriteCollection);
            }
        }

        internal static event Delegates.set_Editor__SpriteCollection_BeforeArgs _beforeset_Editor__SpriteCollection;
        internal static event Delegates.set_Editor__SpriteCollection_NormalArgs _afterset_Editor__SpriteCollection;

        private static void set_Editor__SpriteCollection(Action<tk2dTileMap, tk2dSpriteCollectionData> orig,
            tk2dTileMap self, tk2dSpriteCollectionData value)
        {
            Delegates.Params_set_Editor__SpriteCollection @params = new()
            {
                self = self, value = value
            };
            _beforeset_Editor__SpriteCollection?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Editor__SpriteCollection != null) _afterset_Editor__SpriteCollection.Invoke(@params);
        }

        internal static void Hookget_SpriteCollectionInst()
        {
            if (!HookedList.Contains("get_SpriteCollectionInst"))
            {
                HookedList.Add("get_SpriteCollectionInst");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_SpriteCollectionInst"),
                    get_SpriteCollectionInst);
            }
        }

        internal static event Delegates.get_SpriteCollectionInst_BeforeArgs _beforeget_SpriteCollectionInst;
        internal static event Delegates.get_SpriteCollectionInst_NormalArgs _afterget_SpriteCollectionInst;

        private static tk2dSpriteCollectionData get_SpriteCollectionInst(
            Func<tk2dTileMap, tk2dSpriteCollectionData> orig, tk2dTileMap self)
        {
            Delegates.Params_get_SpriteCollectionInst @params = new()
            {
                self = self
            };
            _beforeget_SpriteCollectionInst?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SpriteCollectionInst != null) retVal = _afterget_SpriteCollectionInst.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_AllowEdit()
        {
            if (!HookedList.Contains("get_AllowEdit"))
            {
                HookedList.Add("get_AllowEdit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_AllowEdit"), get_AllowEdit);
            }
        }

        internal static event Delegates.get_AllowEdit_BeforeArgs _beforeget_AllowEdit;
        internal static event Delegates.get_AllowEdit_NormalArgs _afterget_AllowEdit;

        private static bool get_AllowEdit(Func<tk2dTileMap, bool> orig, tk2dTileMap self)
        {
            Delegates.Params_get_AllowEdit @params = new()
            {
                self = self
            };
            _beforeget_AllowEdit?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AllowEdit != null) retVal = _afterget_AllowEdit.Invoke(@params);
            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.tk2dTileMap.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.tk2dTileMap.orig_Awake orig, tk2dTileMap self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.tk2dTileMap.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_NormalArgs _afterOnDestroy;

        private static void OnDestroy(On.tk2dTileMap.orig_OnDestroy orig, tk2dTileMap self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            _beforeOnDestroy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null) _afterOnDestroy.Invoke(@params);
        }

        internal static void HookBuild()
        {
            if (!HookedList.Contains("Build"))
            {
                HookedList.Add("Build");
                On.tk2dTileMap.Build += Build;
            }
        }

        internal static event Delegates.Build_BeforeArgs _beforeBuild;
        internal static event Delegates.Build_NormalArgs _afterBuild;

        private static void Build(On.tk2dTileMap.orig_Build orig, tk2dTileMap self)
        {
            Delegates.Params_Build @params = new()
            {
                self = self
            };
            _beforeBuild?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBuild != null) _afterBuild.Invoke(@params);
        }

        internal static void HookForceBuild()
        {
            if (!HookedList.Contains("ForceBuild"))
            {
                HookedList.Add("ForceBuild");
                On.tk2dTileMap.ForceBuild += ForceBuild;
            }
        }

        internal static event Delegates.ForceBuild_BeforeArgs _beforeForceBuild;
        internal static event Delegates.ForceBuild_NormalArgs _afterForceBuild;

        private static void ForceBuild(On.tk2dTileMap.orig_ForceBuild orig, tk2dTileMap self)
        {
            Delegates.Params_ForceBuild @params = new()
            {
                self = self
            };
            _beforeForceBuild?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterForceBuild != null) _afterForceBuild.Invoke(@params);
        }

        internal static void HookClearSpawnedInstances()
        {
            if (!HookedList.Contains("ClearSpawnedInstances"))
            {
                HookedList.Add("ClearSpawnedInstances");
                On.tk2dTileMap.ClearSpawnedInstances += ClearSpawnedInstances;
            }
        }

        internal static event Delegates.ClearSpawnedInstances_BeforeArgs _beforeClearSpawnedInstances;
        internal static event Delegates.ClearSpawnedInstances_NormalArgs _afterClearSpawnedInstances;

        private static void ClearSpawnedInstances(On.tk2dTileMap.orig_ClearSpawnedInstances orig, tk2dTileMap self)
        {
            Delegates.Params_ClearSpawnedInstances @params = new()
            {
                self = self
            };
            _beforeClearSpawnedInstances?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClearSpawnedInstances != null) _afterClearSpawnedInstances.Invoke(@params);
        }

        internal static void HookSetPrefabsRootActive()
        {
            if (!HookedList.Contains("SetPrefabsRootActive"))
            {
                HookedList.Add("SetPrefabsRootActive");
                On.tk2dTileMap.SetPrefabsRootActive += SetPrefabsRootActive;
            }
        }

        internal static event Delegates.SetPrefabsRootActive_BeforeArgs _beforeSetPrefabsRootActive;
        internal static event Delegates.SetPrefabsRootActive_NormalArgs _afterSetPrefabsRootActive;

        private static void SetPrefabsRootActive(On.tk2dTileMap.orig_SetPrefabsRootActive orig, tk2dTileMap self,
            bool active)
        {
            Delegates.Params_SetPrefabsRootActive @params = new()
            {
                self = self, active = active
            };
            _beforeSetPrefabsRootActive?.Invoke(@params);
            self = @params.self;
            active = @params.active;
            orig(self, active);
            if (_afterSetPrefabsRootActive != null) _afterSetPrefabsRootActive.Invoke(@params);
        }

        internal static void HookGetTileAtPosition()
        {
            if (!HookedList.Contains("GetTileAtPosition"))
            {
                HookedList.Add("GetTileAtPosition");
                On.tk2dTileMap.GetTileAtPosition += GetTileAtPosition;
            }
        }

        internal static event Delegates.GetTileAtPosition_BeforeArgs _beforeGetTileAtPosition;
        internal static event Delegates.GetTileAtPosition_NormalArgs _afterGetTileAtPosition;

        private static bool GetTileAtPosition(On.tk2dTileMap.orig_GetTileAtPosition orig, tk2dTileMap self,
            Vector3 position, out int x, out int y)
        {
            Delegates.Params_GetTileAtPosition @params = new()
            {
                self = self, position = position
            };
            _beforeGetTileAtPosition?.Invoke(@params);
            self = @params.self;
            position = @params.position;
            x = @params.x;
            y = @params.y;
            var retVal = orig(self, position, out x, out y);
            if (_afterGetTileAtPosition != null) retVal = _afterGetTileAtPosition.Invoke(@params);
            return retVal;
        }

        internal static void HookGetTileFracAtPosition()
        {
            if (!HookedList.Contains("GetTileFracAtPosition"))
            {
                HookedList.Add("GetTileFracAtPosition");
                On.tk2dTileMap.GetTileFracAtPosition += GetTileFracAtPosition;
            }
        }

        internal static event Delegates.GetTileFracAtPosition_BeforeArgs _beforeGetTileFracAtPosition;
        internal static event Delegates.GetTileFracAtPosition_NormalArgs _afterGetTileFracAtPosition;

        private static bool GetTileFracAtPosition(On.tk2dTileMap.orig_GetTileFracAtPosition orig, tk2dTileMap self,
            Vector3 position, out float x, out float y)
        {
            Delegates.Params_GetTileFracAtPosition @params = new()
            {
                self = self, position = position, 
            };
            _beforeGetTileFracAtPosition?.Invoke(@params);
            self = @params.self;
            position = @params.position;
            x = @params.x;
            y = @params.y;
            var retVal = orig(self, position, out x, out y);
            if (_afterGetTileFracAtPosition != null) retVal = _afterGetTileFracAtPosition.Invoke(@params);
            return retVal;
        }

        internal static void HookGetTilePosition()
        {
            if (!HookedList.Contains("GetTilePosition"))
            {
                HookedList.Add("GetTilePosition");
                On.tk2dTileMap.GetTilePosition += GetTilePosition;
            }
        }

        internal static event Delegates.GetTilePosition_BeforeArgs _beforeGetTilePosition;
        internal static event Delegates.GetTilePosition_NormalArgs _afterGetTilePosition;

        private static Vector3 GetTilePosition(On.tk2dTileMap.orig_GetTilePosition orig, tk2dTileMap self, int x, int y)
        {
            Delegates.Params_GetTilePosition @params = new()
            {
                self = self, x = x, y = y
            };
            _beforeGetTilePosition?.Invoke(@params);
            self = @params.self;
            x = @params.x;
            y = @params.y;
            var retVal = orig(self, x, y);
            if (_afterGetTilePosition != null) retVal = _afterGetTilePosition.Invoke(@params);
            return retVal;
        }

        internal static void HookGetTileIdAtPosition()
        {
            if (!HookedList.Contains("GetTileIdAtPosition"))
            {
                HookedList.Add("GetTileIdAtPosition");
                On.tk2dTileMap.GetTileIdAtPosition += GetTileIdAtPosition;
            }
        }

        internal static event Delegates.GetTileIdAtPosition_BeforeArgs _beforeGetTileIdAtPosition;
        internal static event Delegates.GetTileIdAtPosition_NormalArgs _afterGetTileIdAtPosition;

        private static int GetTileIdAtPosition(On.tk2dTileMap.orig_GetTileIdAtPosition orig, tk2dTileMap self,
            Vector3 position, int layer)
        {
            Delegates.Params_GetTileIdAtPosition @params = new()
            {
                self = self, position = position, layer = layer
            };
            _beforeGetTileIdAtPosition?.Invoke(@params);
            self = @params.self;
            position = @params.position;
            layer = @params.layer;
            var retVal = orig(self, position, layer);
            if (_afterGetTileIdAtPosition != null) retVal = _afterGetTileIdAtPosition.Invoke(@params);
            return retVal;
        }

        internal static void HookGetTileInfoForTileId()
        {
            if (!HookedList.Contains("GetTileInfoForTileId"))
            {
                HookedList.Add("GetTileInfoForTileId");
                On.tk2dTileMap.GetTileInfoForTileId += GetTileInfoForTileId;
            }
        }

        internal static event Delegates.GetTileInfoForTileId_BeforeArgs _beforeGetTileInfoForTileId;
        internal static event Delegates.GetTileInfoForTileId_NormalArgs _afterGetTileInfoForTileId;

        private static TileInfo GetTileInfoForTileId(On.tk2dTileMap.orig_GetTileInfoForTileId orig, tk2dTileMap self,
            int tileId)
        {
            Delegates.Params_GetTileInfoForTileId @params = new()
            {
                self = self, tileId = tileId
            };
            _beforeGetTileInfoForTileId?.Invoke(@params);
            self = @params.self;
            tileId = @params.tileId;
            var retVal = orig(self, tileId);
            if (_afterGetTileInfoForTileId != null) retVal = _afterGetTileInfoForTileId.Invoke(@params);
            return retVal;
        }

        internal static void HookGetInterpolatedColorAtPosition()
        {
            if (!HookedList.Contains("GetInterpolatedColorAtPosition"))
            {
                HookedList.Add("GetInterpolatedColorAtPosition");
                On.tk2dTileMap.GetInterpolatedColorAtPosition += GetInterpolatedColorAtPosition;
            }
        }

        internal static event Delegates.GetInterpolatedColorAtPosition_BeforeArgs _beforeGetInterpolatedColorAtPosition;
        internal static event Delegates.GetInterpolatedColorAtPosition_NormalArgs _afterGetInterpolatedColorAtPosition;

        private static Color GetInterpolatedColorAtPosition(On.tk2dTileMap.orig_GetInterpolatedColorAtPosition orig,
            tk2dTileMap self, Vector3 position)
        {
            Delegates.Params_GetInterpolatedColorAtPosition @params = new()
            {
                self = self, position = position
            };
            _beforeGetInterpolatedColorAtPosition?.Invoke(@params);
            self = @params.self;
            position = @params.position;
            var retVal = orig(self, position);
            if (_afterGetInterpolatedColorAtPosition != null)
                retVal = _afterGetInterpolatedColorAtPosition.Invoke(@params);
            return retVal;
        }

        internal static void HookUsesSpriteCollection()
        {
            if (!HookedList.Contains("UsesSpriteCollection"))
            {
                HookedList.Add("UsesSpriteCollection");
                On.tk2dTileMap.UsesSpriteCollection += UsesSpriteCollection;
            }
        }

        internal static event Delegates.UsesSpriteCollection_BeforeArgs _beforeUsesSpriteCollection;
        internal static event Delegates.UsesSpriteCollection_NormalArgs _afterUsesSpriteCollection;

        private static bool UsesSpriteCollection(On.tk2dTileMap.orig_UsesSpriteCollection orig, tk2dTileMap self,
            tk2dSpriteCollectionData spriteCollection)
        {
            Delegates.Params_UsesSpriteCollection @params = new()
            {
                self = self, spriteCollection = spriteCollection
            };
            _beforeUsesSpriteCollection?.Invoke(@params);
            self = @params.self;
            spriteCollection = @params.spriteCollection;
            var retVal = orig(self, spriteCollection);
            if (_afterUsesSpriteCollection != null) retVal = _afterUsesSpriteCollection.Invoke(@params);
            return retVal;
        }

        internal static void HookEndEditMode()
        {
            if (!HookedList.Contains("EndEditMode"))
            {
                HookedList.Add("EndEditMode");
                On.tk2dTileMap.EndEditMode += EndEditMode;
            }
        }

        internal static event Delegates.EndEditMode_BeforeArgs _beforeEndEditMode;
        internal static event Delegates.EndEditMode_NormalArgs _afterEndEditMode;

        private static void EndEditMode(On.tk2dTileMap.orig_EndEditMode orig, tk2dTileMap self)
        {
            Delegates.Params_EndEditMode @params = new()
            {
                self = self
            };
            _beforeEndEditMode?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterEndEditMode != null) _afterEndEditMode.Invoke(@params);
        }

        internal static void HookTouchMesh()
        {
            if (!HookedList.Contains("TouchMesh"))
            {
                HookedList.Add("TouchMesh");
                On.tk2dTileMap.TouchMesh += TouchMesh;
            }
        }

        internal static event Delegates.TouchMesh_BeforeArgs _beforeTouchMesh;
        internal static event Delegates.TouchMesh_NormalArgs _afterTouchMesh;

        private static void TouchMesh(On.tk2dTileMap.orig_TouchMesh orig, tk2dTileMap self, Mesh mesh)
        {
            Delegates.Params_TouchMesh @params = new()
            {
                self = self, mesh = mesh
            };
            _beforeTouchMesh?.Invoke(@params);
            self = @params.self;
            mesh = @params.mesh;
            orig(self, mesh);
            if (_afterTouchMesh != null) _afterTouchMesh.Invoke(@params);
        }

        internal static void HookDestroyMesh()
        {
            if (!HookedList.Contains("DestroyMesh"))
            {
                HookedList.Add("DestroyMesh");
                On.tk2dTileMap.DestroyMesh += DestroyMesh;
            }
        }

        internal static event Delegates.DestroyMesh_BeforeArgs _beforeDestroyMesh;
        internal static event Delegates.DestroyMesh_NormalArgs _afterDestroyMesh;

        private static void DestroyMesh(On.tk2dTileMap.orig_DestroyMesh orig, tk2dTileMap self, Mesh mesh)
        {
            Delegates.Params_DestroyMesh @params = new()
            {
                self = self, mesh = mesh
            };
            _beforeDestroyMesh?.Invoke(@params);
            self = @params.self;
            mesh = @params.mesh;
            orig(self, mesh);
            if (_afterDestroyMesh != null) _afterDestroyMesh.Invoke(@params);
        }

        internal static void HookGetTilePrefabsListCount()
        {
            if (!HookedList.Contains("GetTilePrefabsListCount"))
            {
                HookedList.Add("GetTilePrefabsListCount");
                On.tk2dTileMap.GetTilePrefabsListCount += GetTilePrefabsListCount;
            }
        }

        internal static event Delegates.GetTilePrefabsListCount_BeforeArgs _beforeGetTilePrefabsListCount;
        internal static event Delegates.GetTilePrefabsListCount_NormalArgs _afterGetTilePrefabsListCount;

        private static int GetTilePrefabsListCount(On.tk2dTileMap.orig_GetTilePrefabsListCount orig, tk2dTileMap self)
        {
            Delegates.Params_GetTilePrefabsListCount @params = new()
            {
                self = self
            };
            _beforeGetTilePrefabsListCount?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetTilePrefabsListCount != null) retVal = _afterGetTilePrefabsListCount.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_TilePrefabsList()
        {
            if (!HookedList.Contains("get_TilePrefabsList"))
            {
                HookedList.Add("get_TilePrefabsList");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_TilePrefabsList"),
                    get_TilePrefabsList);
            }
        }

        internal static event Delegates.get_TilePrefabsList_BeforeArgs _beforeget_TilePrefabsList;
        internal static event Delegates.get_TilePrefabsList_NormalArgs _afterget_TilePrefabsList;

        private static List<tk2dTileMap.TilemapPrefabInstance> get_TilePrefabsList(
            Func<tk2dTileMap, List<tk2dTileMap.TilemapPrefabInstance>> orig, tk2dTileMap self)
        {
            Delegates.Params_get_TilePrefabsList @params = new()
            {
                self = self
            };
            _beforeget_TilePrefabsList?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_TilePrefabsList != null) retVal = _afterget_TilePrefabsList.Invoke(@params);
            return retVal;
        }

        internal static void HookGetTilePrefabsListItem()
        {
            if (!HookedList.Contains("GetTilePrefabsListItem"))
            {
                HookedList.Add("GetTilePrefabsListItem");
                On.tk2dTileMap.GetTilePrefabsListItem += GetTilePrefabsListItem;
            }
        }

        internal static event Delegates.GetTilePrefabsListItem_BeforeArgs _beforeGetTilePrefabsListItem;
        internal static event Delegates.GetTilePrefabsListItem_NormalArgs _afterGetTilePrefabsListItem;

        private static void GetTilePrefabsListItem(On.tk2dTileMap.orig_GetTilePrefabsListItem orig, tk2dTileMap self,
            int index, out int x, out int y, out int layer, out GameObject instance)
        {
            Delegates.Params_GetTilePrefabsListItem @params = new()
            {
                self = self, index = index, 
            };
            _beforeGetTilePrefabsListItem?.Invoke(@params);
            self = @params.self;
            index = @params.index;
            x = @params.x;
            y = @params.y;
            layer = @params.layer;
            instance = @params.instance;
            orig(self, index, out x, out y, out layer, out instance);
            if (_afterGetTilePrefabsListItem != null) _afterGetTilePrefabsListItem.Invoke(@params);
        }

        internal static void HookSetTilePrefabsList()
        {
            if (!HookedList.Contains("SetTilePrefabsList"))
            {
                HookedList.Add("SetTilePrefabsList");
                On.tk2dTileMap.SetTilePrefabsList += SetTilePrefabsList;
            }
        }

        internal static event Delegates.SetTilePrefabsList_BeforeArgs _beforeSetTilePrefabsList;
        internal static event Delegates.SetTilePrefabsList_NormalArgs _afterSetTilePrefabsList;

        private static void SetTilePrefabsList(On.tk2dTileMap.orig_SetTilePrefabsList orig, tk2dTileMap self,
            List<int> xs, List<int> ys, List<int> layers, List<GameObject> instances)
        {
            Delegates.Params_SetTilePrefabsList @params = new()
            {
                self = self, xs = xs, ys = ys, layers = layers, instances = instances
            };
            _beforeSetTilePrefabsList?.Invoke(@params);
            self = @params.self;
            xs = @params.xs;
            ys = @params.ys;
            layers = @params.layers;
            instances = @params.instances;
            orig(self, xs, ys, layers, instances);
            if (_afterSetTilePrefabsList != null) _afterSetTilePrefabsList.Invoke(@params);
        }

        internal static void Hookget_Layers()
        {
            if (!HookedList.Contains("get_Layers"))
            {
                HookedList.Add("get_Layers");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_Layers"), get_Layers);
            }
        }

        internal static event Delegates.get_Layers_BeforeArgs _beforeget_Layers;
        internal static event Delegates.get_Layers_NormalArgs _afterget_Layers;

        private static Layer[] get_Layers(Func<tk2dTileMap, Layer[]> orig, tk2dTileMap self)
        {
            Delegates.Params_get_Layers @params = new()
            {
                self = self
            };
            _beforeget_Layers?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Layers != null) retVal = _afterget_Layers.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Layers()
        {
            if (!HookedList.Contains("set_Layers"))
            {
                HookedList.Add("set_Layers");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_Layers"), set_Layers);
            }
        }

        internal static event Delegates.set_Layers_BeforeArgs _beforeset_Layers;
        internal static event Delegates.set_Layers_NormalArgs _afterset_Layers;

        private static void set_Layers(Action<tk2dTileMap, Layer[]> orig, tk2dTileMap self, Layer[] value)
        {
            Delegates.Params_set_Layers @params = new()
            {
                self = self, value = value
            };
            _beforeset_Layers?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Layers != null) _afterset_Layers.Invoke(@params);
        }

        internal static void Hookget_ColorChannel()
        {
            if (!HookedList.Contains("get_ColorChannel"))
            {
                HookedList.Add("get_ColorChannel");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_ColorChannel"), get_ColorChannel);
            }
        }

        internal static event Delegates.get_ColorChannel_BeforeArgs _beforeget_ColorChannel;
        internal static event Delegates.get_ColorChannel_NormalArgs _afterget_ColorChannel;

        private static ColorChannel get_ColorChannel(Func<tk2dTileMap, ColorChannel> orig, tk2dTileMap self)
        {
            Delegates.Params_get_ColorChannel @params = new()
            {
                self = self
            };
            _beforeget_ColorChannel?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ColorChannel != null) retVal = _afterget_ColorChannel.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_ColorChannel()
        {
            if (!HookedList.Contains("set_ColorChannel"))
            {
                HookedList.Add("set_ColorChannel");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_ColorChannel"), set_ColorChannel);
            }
        }

        internal static event Delegates.set_ColorChannel_BeforeArgs _beforeset_ColorChannel;
        internal static event Delegates.set_ColorChannel_NormalArgs _afterset_ColorChannel;

        private static void set_ColorChannel(Action<tk2dTileMap, ColorChannel> orig, tk2dTileMap self,
            ColorChannel value)
        {
            Delegates.Params_set_ColorChannel @params = new()
            {
                self = self, value = value
            };
            _beforeset_ColorChannel?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ColorChannel != null) _afterset_ColorChannel.Invoke(@params);
        }

        internal static void Hookget_PrefabsRoot()
        {
            if (!HookedList.Contains("get_PrefabsRoot"))
            {
                HookedList.Add("get_PrefabsRoot");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_PrefabsRoot"), get_PrefabsRoot);
            }
        }

        internal static event Delegates.get_PrefabsRoot_BeforeArgs _beforeget_PrefabsRoot;
        internal static event Delegates.get_PrefabsRoot_NormalArgs _afterget_PrefabsRoot;

        private static GameObject get_PrefabsRoot(Func<tk2dTileMap, GameObject> orig, tk2dTileMap self)
        {
            Delegates.Params_get_PrefabsRoot @params = new()
            {
                self = self
            };
            _beforeget_PrefabsRoot?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_PrefabsRoot != null) retVal = _afterget_PrefabsRoot.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_PrefabsRoot()
        {
            if (!HookedList.Contains("set_PrefabsRoot"))
            {
                HookedList.Add("set_PrefabsRoot");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_PrefabsRoot"), set_PrefabsRoot);
            }
        }

        internal static event Delegates.set_PrefabsRoot_BeforeArgs _beforeset_PrefabsRoot;
        internal static event Delegates.set_PrefabsRoot_NormalArgs _afterset_PrefabsRoot;

        private static void set_PrefabsRoot(Action<tk2dTileMap, GameObject> orig, tk2dTileMap self, GameObject value)
        {
            Delegates.Params_set_PrefabsRoot @params = new()
            {
                self = self, value = value
            };
            _beforeset_PrefabsRoot?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_PrefabsRoot != null) _afterset_PrefabsRoot.Invoke(@params);
        }

        internal static void HookGetTile()
        {
            if (!HookedList.Contains("GetTile"))
            {
                HookedList.Add("GetTile");
                On.tk2dTileMap.GetTile += GetTile;
            }
        }

        internal static event Delegates.GetTile_BeforeArgs _beforeGetTile;
        internal static event Delegates.GetTile_NormalArgs _afterGetTile;

        private static int GetTile(On.tk2dTileMap.orig_GetTile orig, tk2dTileMap self, int x, int y, int layer)
        {
            Delegates.Params_GetTile @params = new()
            {
                self = self, x = x, y = y, layer = layer
            };
            _beforeGetTile?.Invoke(@params);
            self = @params.self;
            x = @params.x;
            y = @params.y;
            layer = @params.layer;
            var retVal = orig(self, x, y, layer);
            if (_afterGetTile != null) retVal = _afterGetTile.Invoke(@params);
            return retVal;
        }

        internal static void HookGetTileFlags()
        {
            if (!HookedList.Contains("GetTileFlags"))
            {
                HookedList.Add("GetTileFlags");
                On.tk2dTileMap.GetTileFlags += GetTileFlags;
            }
        }

        internal static event Delegates.GetTileFlags_BeforeArgs _beforeGetTileFlags;
        internal static event Delegates.GetTileFlags_NormalArgs _afterGetTileFlags;

        private static tk2dTileFlags GetTileFlags(On.tk2dTileMap.orig_GetTileFlags orig, tk2dTileMap self, int x, int y,
            int layer)
        {
            Delegates.Params_GetTileFlags @params = new()
            {
                self = self, x = x, y = y, layer = layer
            };
            _beforeGetTileFlags?.Invoke(@params);
            self = @params.self;
            x = @params.x;
            y = @params.y;
            layer = @params.layer;
            var retVal = orig(self, x, y, layer);
            if (_afterGetTileFlags != null) retVal = _afterGetTileFlags.Invoke(@params);
            return retVal;
        }

        internal static void HookSetTile()
        {
            if (!HookedList.Contains("SetTile"))
            {
                HookedList.Add("SetTile");
                On.tk2dTileMap.SetTile += SetTile;
            }
        }

        internal static event Delegates.SetTile_BeforeArgs _beforeSetTile;
        internal static event Delegates.SetTile_NormalArgs _afterSetTile;

        private static void SetTile(On.tk2dTileMap.orig_SetTile orig, tk2dTileMap self, int x, int y, int layer,
            int tile)
        {
            Delegates.Params_SetTile @params = new()
            {
                self = self, x = x, y = y, layer = layer, tile = tile
            };
            _beforeSetTile?.Invoke(@params);
            self = @params.self;
            x = @params.x;
            y = @params.y;
            layer = @params.layer;
            tile = @params.tile;
            orig(self, x, y, layer, tile);
            if (_afterSetTile != null) _afterSetTile.Invoke(@params);
        }

        internal static void HookSetTileFlags()
        {
            if (!HookedList.Contains("SetTileFlags"))
            {
                HookedList.Add("SetTileFlags");
                On.tk2dTileMap.SetTileFlags += SetTileFlags;
            }
        }

        internal static event Delegates.SetTileFlags_BeforeArgs _beforeSetTileFlags;
        internal static event Delegates.SetTileFlags_NormalArgs _afterSetTileFlags;

        private static void SetTileFlags(On.tk2dTileMap.orig_SetTileFlags orig, tk2dTileMap self, int x, int y,
            int layer, tk2dTileFlags flags)
        {
            Delegates.Params_SetTileFlags @params = new()
            {
                self = self, x = x, y = y, layer = layer, flags = flags
            };
            _beforeSetTileFlags?.Invoke(@params);
            self = @params.self;
            x = @params.x;
            y = @params.y;
            layer = @params.layer;
            flags = @params.flags;
            orig(self, x, y, layer, flags);
            if (_afterSetTileFlags != null) _afterSetTileFlags.Invoke(@params);
        }

        internal static void HookClearTile()
        {
            if (!HookedList.Contains("ClearTile"))
            {
                HookedList.Add("ClearTile");
                On.tk2dTileMap.ClearTile += ClearTile;
            }
        }

        internal static event Delegates.ClearTile_BeforeArgs _beforeClearTile;
        internal static event Delegates.ClearTile_NormalArgs _afterClearTile;

        private static void ClearTile(On.tk2dTileMap.orig_ClearTile orig, tk2dTileMap self, int x, int y, int layer)
        {
            Delegates.Params_ClearTile @params = new()
            {
                self = self, x = x, y = y, layer = layer
            };
            _beforeClearTile?.Invoke(@params);
            self = @params.self;
            x = @params.x;
            y = @params.y;
            layer = @params.layer;
            orig(self, x, y, layer);
            if (_afterClearTile != null) _afterClearTile.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void Build_BeforeArgs(Params_Build args);

        public delegate void Build_NormalArgs(Params_Build args);

        public delegate void ClearSpawnedInstances_BeforeArgs(Params_ClearSpawnedInstances args);

        public delegate void ClearSpawnedInstances_NormalArgs(Params_ClearSpawnedInstances args);

        public delegate void ClearTile_BeforeArgs(Params_ClearTile args);

        public delegate void ClearTile_NormalArgs(Params_ClearTile args);

        public delegate void DestroyMesh_BeforeArgs(Params_DestroyMesh args);

        public delegate void DestroyMesh_NormalArgs(Params_DestroyMesh args);

        public delegate void EndEditMode_BeforeArgs(Params_EndEditMode args);

        public delegate void EndEditMode_NormalArgs(Params_EndEditMode args);

        public delegate void ForceBuild_BeforeArgs(Params_ForceBuild args);

        public delegate void ForceBuild_NormalArgs(Params_ForceBuild args);

        public delegate void get_AllowEdit_BeforeArgs(Params_get_AllowEdit args);

        public delegate bool get_AllowEdit_NormalArgs(Params_get_AllowEdit args);

        public delegate void get_ColorChannel_BeforeArgs(Params_get_ColorChannel args);

        public delegate ColorChannel get_ColorChannel_NormalArgs(Params_get_ColorChannel args);

        public delegate void get_Editor__SpriteCollection_BeforeArgs(Params_get_Editor__SpriteCollection args);

        public delegate tk2dSpriteCollectionData get_Editor__SpriteCollection_NormalArgs(
            Params_get_Editor__SpriteCollection args);

        public delegate void get_Layers_BeforeArgs(Params_get_Layers args);

        public delegate Layer[] get_Layers_NormalArgs(Params_get_Layers args);

        public delegate void get_PrefabsRoot_BeforeArgs(Params_get_PrefabsRoot args);

        public delegate GameObject get_PrefabsRoot_NormalArgs(Params_get_PrefabsRoot args);

        public delegate void get_SpriteCollectionInst_BeforeArgs(Params_get_SpriteCollectionInst args);

        public delegate tk2dSpriteCollectionData get_SpriteCollectionInst_NormalArgs(
            Params_get_SpriteCollectionInst args);

        public delegate void get_TilePrefabsList_BeforeArgs(Params_get_TilePrefabsList args);

        public delegate List<tk2dTileMap.TilemapPrefabInstance> get_TilePrefabsList_NormalArgs(
            Params_get_TilePrefabsList args);

        public delegate void GetInterpolatedColorAtPosition_BeforeArgs(Params_GetInterpolatedColorAtPosition args);

        public delegate Color GetInterpolatedColorAtPosition_NormalArgs(Params_GetInterpolatedColorAtPosition args);

        public delegate void GetTile_BeforeArgs(Params_GetTile args);

        public delegate int GetTile_NormalArgs(Params_GetTile args);

        public delegate void GetTileAtPosition_BeforeArgs(Params_GetTileAtPosition args);

        public delegate bool GetTileAtPosition_NormalArgs(Params_GetTileAtPosition args);

        public delegate void GetTileFlags_BeforeArgs(Params_GetTileFlags args);

        public delegate tk2dTileFlags GetTileFlags_NormalArgs(Params_GetTileFlags args);

        public delegate void GetTileFracAtPosition_BeforeArgs(Params_GetTileFracAtPosition args);

        public delegate bool GetTileFracAtPosition_NormalArgs(Params_GetTileFracAtPosition args);

        public delegate void GetTileIdAtPosition_BeforeArgs(Params_GetTileIdAtPosition args);

        public delegate int GetTileIdAtPosition_NormalArgs(Params_GetTileIdAtPosition args);

        public delegate void GetTileInfoForTileId_BeforeArgs(Params_GetTileInfoForTileId args);

        public delegate TileInfo GetTileInfoForTileId_NormalArgs(Params_GetTileInfoForTileId args);

        public delegate void GetTilePosition_BeforeArgs(Params_GetTilePosition args);

        public delegate Vector3 GetTilePosition_NormalArgs(Params_GetTilePosition args);

        public delegate void GetTilePrefabsListCount_BeforeArgs(Params_GetTilePrefabsListCount args);

        public delegate int GetTilePrefabsListCount_NormalArgs(Params_GetTilePrefabsListCount args);

        public delegate void GetTilePrefabsListItem_BeforeArgs(Params_GetTilePrefabsListItem args);

        public delegate void GetTilePrefabsListItem_NormalArgs(Params_GetTilePrefabsListItem args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_NormalArgs(Params_OnDestroy args);

        public delegate void set_ColorChannel_BeforeArgs(Params_set_ColorChannel args);

        public delegate void set_ColorChannel_NormalArgs(Params_set_ColorChannel args);

        public delegate void set_Editor__SpriteCollection_BeforeArgs(Params_set_Editor__SpriteCollection args);

        public delegate void set_Editor__SpriteCollection_NormalArgs(Params_set_Editor__SpriteCollection args);

        public delegate void set_Layers_BeforeArgs(Params_set_Layers args);

        public delegate void set_Layers_NormalArgs(Params_set_Layers args);

        public delegate void set_PrefabsRoot_BeforeArgs(Params_set_PrefabsRoot args);

        public delegate void set_PrefabsRoot_NormalArgs(Params_set_PrefabsRoot args);

        public delegate void SetPrefabsRootActive_BeforeArgs(Params_SetPrefabsRootActive args);

        public delegate void SetPrefabsRootActive_NormalArgs(Params_SetPrefabsRootActive args);

        public delegate void SetTile_BeforeArgs(Params_SetTile args);

        public delegate void SetTile_NormalArgs(Params_SetTile args);

        public delegate void SetTileFlags_BeforeArgs(Params_SetTileFlags args);

        public delegate void SetTileFlags_NormalArgs(Params_SetTileFlags args);

        public delegate void SetTilePrefabsList_BeforeArgs(Params_SetTilePrefabsList args);

        public delegate void SetTilePrefabsList_NormalArgs(Params_SetTilePrefabsList args);

        public delegate void TouchMesh_BeforeArgs(Params_TouchMesh args);

        public delegate void TouchMesh_NormalArgs(Params_TouchMesh args);

        public delegate void UsesSpriteCollection_BeforeArgs(Params_UsesSpriteCollection args);

        public delegate bool UsesSpriteCollection_NormalArgs(Params_UsesSpriteCollection args);

        public sealed class Params_get_Editor__SpriteCollection
        {
            public tk2dTileMap self;
        }

        public sealed class Params_set_Editor__SpriteCollection
        {
            public tk2dTileMap self;
            public tk2dSpriteCollectionData value;
        }

        public sealed class Params_get_SpriteCollectionInst
        {
            public tk2dTileMap self;
        }

        public sealed class Params_get_AllowEdit
        {
            public tk2dTileMap self;
        }

        public sealed class Params_Awake
        {
            public tk2dTileMap self;
        }

        public sealed class Params_OnDestroy
        {
            public tk2dTileMap self;
        }

        public sealed class Params_Build
        {
            public tk2dTileMap self;
        }

        public sealed class Params_ForceBuild
        {
            public tk2dTileMap self;
        }

        public sealed class Params_ClearSpawnedInstances
        {
            public tk2dTileMap self;
        }

        public sealed class Params_SetPrefabsRootActive
        {
            public bool active;
            public tk2dTileMap self;
        }

        public sealed class Params_GetTileAtPosition
        {
            public Vector3 position;
            public tk2dTileMap self;
            public int x;
            public int y;
        }

        public sealed class Params_GetTileFracAtPosition
        {
            public Vector3 position;
            public tk2dTileMap self;
            public float x;
            public float y;
        }

        public sealed class Params_GetTilePosition
        {
            public tk2dTileMap self;
            public int x;
            public int y;
        }

        public sealed class Params_GetTileIdAtPosition
        {
            public int layer;
            public Vector3 position;
            public tk2dTileMap self;
        }

        public sealed class Params_GetTileInfoForTileId
        {
            public tk2dTileMap self;
            public int tileId;
        }

        public sealed class Params_GetInterpolatedColorAtPosition
        {
            public Vector3 position;
            public tk2dTileMap self;
        }

        public sealed class Params_UsesSpriteCollection
        {
            public tk2dTileMap self;
            public tk2dSpriteCollectionData spriteCollection;
        }

        public sealed class Params_EndEditMode
        {
            public tk2dTileMap self;
        }

        public sealed class Params_TouchMesh
        {
            public Mesh mesh;
            public tk2dTileMap self;
        }

        public sealed class Params_DestroyMesh
        {
            public Mesh mesh;
            public tk2dTileMap self;
        }

        public sealed class Params_GetTilePrefabsListCount
        {
            public tk2dTileMap self;
        }

        public sealed class Params_get_TilePrefabsList
        {
            public tk2dTileMap self;
        }

        public sealed class Params_GetTilePrefabsListItem
        {
            public int index;
            public GameObject instance;
            public int layer;
            public tk2dTileMap self;
            public int x;
            public int y;
        }

        public sealed class Params_SetTilePrefabsList
        {
            public List<GameObject> instances;
            public List<int> layers;
            public tk2dTileMap self;
            public List<int> xs;
            public List<int> ys;
        }

        public sealed class Params_get_Layers
        {
            public tk2dTileMap self;
        }

        public sealed class Params_set_Layers
        {
            public tk2dTileMap self;
            public Layer[] value;
        }

        public sealed class Params_get_ColorChannel
        {
            public tk2dTileMap self;
        }

        public sealed class Params_set_ColorChannel
        {
            public tk2dTileMap self;
            public ColorChannel value;
        }

        public sealed class Params_get_PrefabsRoot
        {
            public tk2dTileMap self;
        }

        public sealed class Params_set_PrefabsRoot
        {
            public tk2dTileMap self;
            public GameObject value;
        }

        public sealed class Params_GetTile
        {
            public int layer;
            public tk2dTileMap self;
            public int x;
            public int y;
        }

        public sealed class Params_GetTileFlags
        {
            public int layer;
            public tk2dTileMap self;
            public int x;
            public int y;
        }

        public sealed class Params_SetTile
        {
            public int layer;
            public tk2dTileMap self;
            public int tile;
            public int x;
            public int y;
        }

        public sealed class Params_SetTileFlags
        {
            public tk2dTileFlags flags;
            public int layer;
            public tk2dTileMap self;
            public int x;
            public int y;
        }

        public sealed class Params_ClearTile
        {
            public int layer;
            public tk2dTileMap self;
            public int x;
            public int y;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Editor__SpriteCollection_BeforeArgs get_Editor__SpriteCollection
        {
            add
            {
                HookHandler._beforeget_Editor__SpriteCollection += value;
                HookHandler.Hookget_Editor__SpriteCollection();
            }
            remove => HookHandler._beforeget_Editor__SpriteCollection -= value;
        }

        public static event Delegates.set_Editor__SpriteCollection_BeforeArgs set_Editor__SpriteCollection
        {
            add
            {
                HookHandler._beforeset_Editor__SpriteCollection += value;
                HookHandler.Hookset_Editor__SpriteCollection();
            }
            remove => HookHandler._beforeset_Editor__SpriteCollection -= value;
        }

        public static event Delegates.get_SpriteCollectionInst_BeforeArgs get_SpriteCollectionInst
        {
            add
            {
                HookHandler._beforeget_SpriteCollectionInst += value;
                HookHandler.Hookget_SpriteCollectionInst();
            }
            remove => HookHandler._beforeget_SpriteCollectionInst -= value;
        }

        public static event Delegates.get_AllowEdit_BeforeArgs get_AllowEdit
        {
            add
            {
                HookHandler._beforeget_AllowEdit += value;
                HookHandler.Hookget_AllowEdit();
            }
            remove => HookHandler._beforeget_AllowEdit -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.Build_BeforeArgs Build
        {
            add
            {
                HookHandler._beforeBuild += value;
                HookHandler.HookBuild();
            }
            remove => HookHandler._beforeBuild -= value;
        }

        public static event Delegates.ForceBuild_BeforeArgs ForceBuild
        {
            add
            {
                HookHandler._beforeForceBuild += value;
                HookHandler.HookForceBuild();
            }
            remove => HookHandler._beforeForceBuild -= value;
        }

        public static event Delegates.ClearSpawnedInstances_BeforeArgs ClearSpawnedInstances
        {
            add
            {
                HookHandler._beforeClearSpawnedInstances += value;
                HookHandler.HookClearSpawnedInstances();
            }
            remove => HookHandler._beforeClearSpawnedInstances -= value;
        }

        public static event Delegates.SetPrefabsRootActive_BeforeArgs SetPrefabsRootActive
        {
            add
            {
                HookHandler._beforeSetPrefabsRootActive += value;
                HookHandler.HookSetPrefabsRootActive();
            }
            remove => HookHandler._beforeSetPrefabsRootActive -= value;
        }

        public static event Delegates.GetTileAtPosition_BeforeArgs GetTileAtPosition
        {
            add
            {
                HookHandler._beforeGetTileAtPosition += value;
                HookHandler.HookGetTileAtPosition();
            }
            remove => HookHandler._beforeGetTileAtPosition -= value;
        }

        public static event Delegates.GetTileFracAtPosition_BeforeArgs GetTileFracAtPosition
        {
            add
            {
                HookHandler._beforeGetTileFracAtPosition += value;
                HookHandler.HookGetTileFracAtPosition();
            }
            remove => HookHandler._beforeGetTileFracAtPosition -= value;
        }

        public static event Delegates.GetTilePosition_BeforeArgs GetTilePosition
        {
            add
            {
                HookHandler._beforeGetTilePosition += value;
                HookHandler.HookGetTilePosition();
            }
            remove => HookHandler._beforeGetTilePosition -= value;
        }

        public static event Delegates.GetTileIdAtPosition_BeforeArgs GetTileIdAtPosition
        {
            add
            {
                HookHandler._beforeGetTileIdAtPosition += value;
                HookHandler.HookGetTileIdAtPosition();
            }
            remove => HookHandler._beforeGetTileIdAtPosition -= value;
        }

        public static event Delegates.GetTileInfoForTileId_BeforeArgs GetTileInfoForTileId
        {
            add
            {
                HookHandler._beforeGetTileInfoForTileId += value;
                HookHandler.HookGetTileInfoForTileId();
            }
            remove => HookHandler._beforeGetTileInfoForTileId -= value;
        }

        public static event Delegates.GetInterpolatedColorAtPosition_BeforeArgs GetInterpolatedColorAtPosition
        {
            add
            {
                HookHandler._beforeGetInterpolatedColorAtPosition += value;
                HookHandler.HookGetInterpolatedColorAtPosition();
            }
            remove => HookHandler._beforeGetInterpolatedColorAtPosition -= value;
        }

        public static event Delegates.UsesSpriteCollection_BeforeArgs UsesSpriteCollection
        {
            add
            {
                HookHandler._beforeUsesSpriteCollection += value;
                HookHandler.HookUsesSpriteCollection();
            }
            remove => HookHandler._beforeUsesSpriteCollection -= value;
        }

        public static event Delegates.EndEditMode_BeforeArgs EndEditMode
        {
            add
            {
                HookHandler._beforeEndEditMode += value;
                HookHandler.HookEndEditMode();
            }
            remove => HookHandler._beforeEndEditMode -= value;
        }

        public static event Delegates.TouchMesh_BeforeArgs TouchMesh
        {
            add
            {
                HookHandler._beforeTouchMesh += value;
                HookHandler.HookTouchMesh();
            }
            remove => HookHandler._beforeTouchMesh -= value;
        }

        public static event Delegates.DestroyMesh_BeforeArgs DestroyMesh
        {
            add
            {
                HookHandler._beforeDestroyMesh += value;
                HookHandler.HookDestroyMesh();
            }
            remove => HookHandler._beforeDestroyMesh -= value;
        }

        public static event Delegates.GetTilePrefabsListCount_BeforeArgs GetTilePrefabsListCount
        {
            add
            {
                HookHandler._beforeGetTilePrefabsListCount += value;
                HookHandler.HookGetTilePrefabsListCount();
            }
            remove => HookHandler._beforeGetTilePrefabsListCount -= value;
        }

        public static event Delegates.get_TilePrefabsList_BeforeArgs get_TilePrefabsList
        {
            add
            {
                HookHandler._beforeget_TilePrefabsList += value;
                HookHandler.Hookget_TilePrefabsList();
            }
            remove => HookHandler._beforeget_TilePrefabsList -= value;
        }

        public static event Delegates.GetTilePrefabsListItem_BeforeArgs GetTilePrefabsListItem
        {
            add
            {
                HookHandler._beforeGetTilePrefabsListItem += value;
                HookHandler.HookGetTilePrefabsListItem();
            }
            remove => HookHandler._beforeGetTilePrefabsListItem -= value;
        }

        public static event Delegates.SetTilePrefabsList_BeforeArgs SetTilePrefabsList
        {
            add
            {
                HookHandler._beforeSetTilePrefabsList += value;
                HookHandler.HookSetTilePrefabsList();
            }
            remove => HookHandler._beforeSetTilePrefabsList -= value;
        }

        public static event Delegates.get_Layers_BeforeArgs get_Layers
        {
            add
            {
                HookHandler._beforeget_Layers += value;
                HookHandler.Hookget_Layers();
            }
            remove => HookHandler._beforeget_Layers -= value;
        }

        public static event Delegates.set_Layers_BeforeArgs set_Layers
        {
            add
            {
                HookHandler._beforeset_Layers += value;
                HookHandler.Hookset_Layers();
            }
            remove => HookHandler._beforeset_Layers -= value;
        }

        public static event Delegates.get_ColorChannel_BeforeArgs get_ColorChannel
        {
            add
            {
                HookHandler._beforeget_ColorChannel += value;
                HookHandler.Hookget_ColorChannel();
            }
            remove => HookHandler._beforeget_ColorChannel -= value;
        }

        public static event Delegates.set_ColorChannel_BeforeArgs set_ColorChannel
        {
            add
            {
                HookHandler._beforeset_ColorChannel += value;
                HookHandler.Hookset_ColorChannel();
            }
            remove => HookHandler._beforeset_ColorChannel -= value;
        }

        public static event Delegates.get_PrefabsRoot_BeforeArgs get_PrefabsRoot
        {
            add
            {
                HookHandler._beforeget_PrefabsRoot += value;
                HookHandler.Hookget_PrefabsRoot();
            }
            remove => HookHandler._beforeget_PrefabsRoot -= value;
        }

        public static event Delegates.set_PrefabsRoot_BeforeArgs set_PrefabsRoot
        {
            add
            {
                HookHandler._beforeset_PrefabsRoot += value;
                HookHandler.Hookset_PrefabsRoot();
            }
            remove => HookHandler._beforeset_PrefabsRoot -= value;
        }

        public static event Delegates.GetTile_BeforeArgs GetTile
        {
            add
            {
                HookHandler._beforeGetTile += value;
                HookHandler.HookGetTile();
            }
            remove => HookHandler._beforeGetTile -= value;
        }

        public static event Delegates.GetTileFlags_BeforeArgs GetTileFlags
        {
            add
            {
                HookHandler._beforeGetTileFlags += value;
                HookHandler.HookGetTileFlags();
            }
            remove => HookHandler._beforeGetTileFlags -= value;
        }

        public static event Delegates.SetTile_BeforeArgs SetTile
        {
            add
            {
                HookHandler._beforeSetTile += value;
                HookHandler.HookSetTile();
            }
            remove => HookHandler._beforeSetTile -= value;
        }

        public static event Delegates.SetTileFlags_BeforeArgs SetTileFlags
        {
            add
            {
                HookHandler._beforeSetTileFlags += value;
                HookHandler.HookSetTileFlags();
            }
            remove => HookHandler._beforeSetTileFlags -= value;
        }

        public static event Delegates.ClearTile_BeforeArgs ClearTile
        {
            add
            {
                HookHandler._beforeClearTile += value;
                HookHandler.HookClearTile();
            }
            remove => HookHandler._beforeClearTile -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Editor__SpriteCollection_NormalArgs get_Editor__SpriteCollection
        {
            add
            {
                HookHandler._afterget_Editor__SpriteCollection += value;
                HookHandler.Hookget_Editor__SpriteCollection();
            }
            remove => HookHandler._afterget_Editor__SpriteCollection -= value;
        }

        public static event Delegates.set_Editor__SpriteCollection_NormalArgs set_Editor__SpriteCollection
        {
            add
            {
                HookHandler._afterset_Editor__SpriteCollection += value;
                HookHandler.Hookset_Editor__SpriteCollection();
            }
            remove => HookHandler._afterset_Editor__SpriteCollection -= value;
        }

        public static event Delegates.get_SpriteCollectionInst_NormalArgs get_SpriteCollectionInst
        {
            add
            {
                HookHandler._afterget_SpriteCollectionInst += value;
                HookHandler.Hookget_SpriteCollectionInst();
            }
            remove => HookHandler._afterget_SpriteCollectionInst -= value;
        }

        public static event Delegates.get_AllowEdit_NormalArgs get_AllowEdit
        {
            add
            {
                HookHandler._afterget_AllowEdit += value;
                HookHandler.Hookget_AllowEdit();
            }
            remove => HookHandler._afterget_AllowEdit -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.Build_NormalArgs Build
        {
            add
            {
                HookHandler._afterBuild += value;
                HookHandler.HookBuild();
            }
            remove => HookHandler._afterBuild -= value;
        }

        public static event Delegates.ForceBuild_NormalArgs ForceBuild
        {
            add
            {
                HookHandler._afterForceBuild += value;
                HookHandler.HookForceBuild();
            }
            remove => HookHandler._afterForceBuild -= value;
        }

        public static event Delegates.ClearSpawnedInstances_NormalArgs ClearSpawnedInstances
        {
            add
            {
                HookHandler._afterClearSpawnedInstances += value;
                HookHandler.HookClearSpawnedInstances();
            }
            remove => HookHandler._afterClearSpawnedInstances -= value;
        }

        public static event Delegates.SetPrefabsRootActive_NormalArgs SetPrefabsRootActive
        {
            add
            {
                HookHandler._afterSetPrefabsRootActive += value;
                HookHandler.HookSetPrefabsRootActive();
            }
            remove => HookHandler._afterSetPrefabsRootActive -= value;
        }

        public static event Delegates.GetTileAtPosition_NormalArgs GetTileAtPosition
        {
            add
            {
                HookHandler._afterGetTileAtPosition += value;
                HookHandler.HookGetTileAtPosition();
            }
            remove => HookHandler._afterGetTileAtPosition -= value;
        }

        public static event Delegates.GetTileFracAtPosition_NormalArgs GetTileFracAtPosition
        {
            add
            {
                HookHandler._afterGetTileFracAtPosition += value;
                HookHandler.HookGetTileFracAtPosition();
            }
            remove => HookHandler._afterGetTileFracAtPosition -= value;
        }

        public static event Delegates.GetTilePosition_NormalArgs GetTilePosition
        {
            add
            {
                HookHandler._afterGetTilePosition += value;
                HookHandler.HookGetTilePosition();
            }
            remove => HookHandler._afterGetTilePosition -= value;
        }

        public static event Delegates.GetTileIdAtPosition_NormalArgs GetTileIdAtPosition
        {
            add
            {
                HookHandler._afterGetTileIdAtPosition += value;
                HookHandler.HookGetTileIdAtPosition();
            }
            remove => HookHandler._afterGetTileIdAtPosition -= value;
        }

        public static event Delegates.GetTileInfoForTileId_NormalArgs GetTileInfoForTileId
        {
            add
            {
                HookHandler._afterGetTileInfoForTileId += value;
                HookHandler.HookGetTileInfoForTileId();
            }
            remove => HookHandler._afterGetTileInfoForTileId -= value;
        }

        public static event Delegates.GetInterpolatedColorAtPosition_NormalArgs GetInterpolatedColorAtPosition
        {
            add
            {
                HookHandler._afterGetInterpolatedColorAtPosition += value;
                HookHandler.HookGetInterpolatedColorAtPosition();
            }
            remove => HookHandler._afterGetInterpolatedColorAtPosition -= value;
        }

        public static event Delegates.UsesSpriteCollection_NormalArgs UsesSpriteCollection
        {
            add
            {
                HookHandler._afterUsesSpriteCollection += value;
                HookHandler.HookUsesSpriteCollection();
            }
            remove => HookHandler._afterUsesSpriteCollection -= value;
        }

        public static event Delegates.EndEditMode_NormalArgs EndEditMode
        {
            add
            {
                HookHandler._afterEndEditMode += value;
                HookHandler.HookEndEditMode();
            }
            remove => HookHandler._afterEndEditMode -= value;
        }

        public static event Delegates.TouchMesh_NormalArgs TouchMesh
        {
            add
            {
                HookHandler._afterTouchMesh += value;
                HookHandler.HookTouchMesh();
            }
            remove => HookHandler._afterTouchMesh -= value;
        }

        public static event Delegates.DestroyMesh_NormalArgs DestroyMesh
        {
            add
            {
                HookHandler._afterDestroyMesh += value;
                HookHandler.HookDestroyMesh();
            }
            remove => HookHandler._afterDestroyMesh -= value;
        }

        public static event Delegates.GetTilePrefabsListCount_NormalArgs GetTilePrefabsListCount
        {
            add
            {
                HookHandler._afterGetTilePrefabsListCount += value;
                HookHandler.HookGetTilePrefabsListCount();
            }
            remove => HookHandler._afterGetTilePrefabsListCount -= value;
        }

        public static event Delegates.get_TilePrefabsList_NormalArgs get_TilePrefabsList
        {
            add
            {
                HookHandler._afterget_TilePrefabsList += value;
                HookHandler.Hookget_TilePrefabsList();
            }
            remove => HookHandler._afterget_TilePrefabsList -= value;
        }

        public static event Delegates.GetTilePrefabsListItem_NormalArgs GetTilePrefabsListItem
        {
            add
            {
                HookHandler._afterGetTilePrefabsListItem += value;
                HookHandler.HookGetTilePrefabsListItem();
            }
            remove => HookHandler._afterGetTilePrefabsListItem -= value;
        }

        public static event Delegates.SetTilePrefabsList_NormalArgs SetTilePrefabsList
        {
            add
            {
                HookHandler._afterSetTilePrefabsList += value;
                HookHandler.HookSetTilePrefabsList();
            }
            remove => HookHandler._afterSetTilePrefabsList -= value;
        }

        public static event Delegates.get_Layers_NormalArgs get_Layers
        {
            add
            {
                HookHandler._afterget_Layers += value;
                HookHandler.Hookget_Layers();
            }
            remove => HookHandler._afterget_Layers -= value;
        }

        public static event Delegates.set_Layers_NormalArgs set_Layers
        {
            add
            {
                HookHandler._afterset_Layers += value;
                HookHandler.Hookset_Layers();
            }
            remove => HookHandler._afterset_Layers -= value;
        }

        public static event Delegates.get_ColorChannel_NormalArgs get_ColorChannel
        {
            add
            {
                HookHandler._afterget_ColorChannel += value;
                HookHandler.Hookget_ColorChannel();
            }
            remove => HookHandler._afterget_ColorChannel -= value;
        }

        public static event Delegates.set_ColorChannel_NormalArgs set_ColorChannel
        {
            add
            {
                HookHandler._afterset_ColorChannel += value;
                HookHandler.Hookset_ColorChannel();
            }
            remove => HookHandler._afterset_ColorChannel -= value;
        }

        public static event Delegates.get_PrefabsRoot_NormalArgs get_PrefabsRoot
        {
            add
            {
                HookHandler._afterget_PrefabsRoot += value;
                HookHandler.Hookget_PrefabsRoot();
            }
            remove => HookHandler._afterget_PrefabsRoot -= value;
        }

        public static event Delegates.set_PrefabsRoot_NormalArgs set_PrefabsRoot
        {
            add
            {
                HookHandler._afterset_PrefabsRoot += value;
                HookHandler.Hookset_PrefabsRoot();
            }
            remove => HookHandler._afterset_PrefabsRoot -= value;
        }

        public static event Delegates.GetTile_NormalArgs GetTile
        {
            add
            {
                HookHandler._afterGetTile += value;
                HookHandler.HookGetTile();
            }
            remove => HookHandler._afterGetTile -= value;
        }

        public static event Delegates.GetTileFlags_NormalArgs GetTileFlags
        {
            add
            {
                HookHandler._afterGetTileFlags += value;
                HookHandler.HookGetTileFlags();
            }
            remove => HookHandler._afterGetTileFlags -= value;
        }

        public static event Delegates.SetTile_NormalArgs SetTile
        {
            add
            {
                HookHandler._afterSetTile += value;
                HookHandler.HookSetTile();
            }
            remove => HookHandler._afterSetTile -= value;
        }

        public static event Delegates.SetTileFlags_NormalArgs SetTileFlags
        {
            add
            {
                HookHandler._afterSetTileFlags += value;
                HookHandler.HookSetTileFlags();
            }
            remove => HookHandler._afterSetTileFlags -= value;
        }

        public static event Delegates.ClearTile_NormalArgs ClearTile
        {
            add
            {
                HookHandler._afterClearTile += value;
                HookHandler.HookClearTile();
            }
            remove => HookHandler._afterClearTile -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Editor__SpriteCollection_NormalArgs get_Editor__SpriteCollection
        {
            add => HookEndpointManager.Add<Delegates.get_Editor__SpriteCollection_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_Editor__SpriteCollection"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Editor__SpriteCollection_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_Editor__SpriteCollection"), value);
        }

        public static event Delegates.set_Editor__SpriteCollection_NormalArgs set_Editor__SpriteCollection
        {
            add => HookEndpointManager.Add<Delegates.set_Editor__SpriteCollection_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_Editor__SpriteCollection"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Editor__SpriteCollection_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_Editor__SpriteCollection"), value);
        }

        public static event Delegates.get_SpriteCollectionInst_NormalArgs get_SpriteCollectionInst
        {
            add => HookEndpointManager.Add<Delegates.get_SpriteCollectionInst_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_SpriteCollectionInst"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SpriteCollectionInst_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_SpriteCollectionInst"), value);
        }

        public static event Delegates.get_AllowEdit_NormalArgs get_AllowEdit
        {
            add => HookEndpointManager.Add<Delegates.get_AllowEdit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_AllowEdit"), value);
            remove => HookEndpointManager.Remove<Delegates.get_AllowEdit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_AllowEdit"), value);
        }

        public static event On.tk2dTileMap.hook_Awake Awake
        {
            add => On.tk2dTileMap.Awake += value;
            remove => On.tk2dTileMap.Awake -= value;
        }

        public static event On.tk2dTileMap.hook_OnDestroy OnDestroy
        {
            add => On.tk2dTileMap.OnDestroy += value;
            remove => On.tk2dTileMap.OnDestroy -= value;
        }

        public static event On.tk2dTileMap.hook_Build Build
        {
            add => On.tk2dTileMap.Build += value;
            remove => On.tk2dTileMap.Build -= value;
        }

        public static event On.tk2dTileMap.hook_ForceBuild ForceBuild
        {
            add => On.tk2dTileMap.ForceBuild += value;
            remove => On.tk2dTileMap.ForceBuild -= value;
        }

        public static event On.tk2dTileMap.hook_ClearSpawnedInstances ClearSpawnedInstances
        {
            add => On.tk2dTileMap.ClearSpawnedInstances += value;
            remove => On.tk2dTileMap.ClearSpawnedInstances -= value;
        }

        public static event On.tk2dTileMap.hook_SetPrefabsRootActive SetPrefabsRootActive
        {
            add => On.tk2dTileMap.SetPrefabsRootActive += value;
            remove => On.tk2dTileMap.SetPrefabsRootActive -= value;
        }

        public static event On.tk2dTileMap.hook_GetTileAtPosition GetTileAtPosition
        {
            add => On.tk2dTileMap.GetTileAtPosition += value;
            remove => On.tk2dTileMap.GetTileAtPosition -= value;
        }

        public static event On.tk2dTileMap.hook_GetTileFracAtPosition GetTileFracAtPosition
        {
            add => On.tk2dTileMap.GetTileFracAtPosition += value;
            remove => On.tk2dTileMap.GetTileFracAtPosition -= value;
        }

        public static event On.tk2dTileMap.hook_GetTilePosition GetTilePosition
        {
            add => On.tk2dTileMap.GetTilePosition += value;
            remove => On.tk2dTileMap.GetTilePosition -= value;
        }

        public static event On.tk2dTileMap.hook_GetTileIdAtPosition GetTileIdAtPosition
        {
            add => On.tk2dTileMap.GetTileIdAtPosition += value;
            remove => On.tk2dTileMap.GetTileIdAtPosition -= value;
        }

        public static event On.tk2dTileMap.hook_GetTileInfoForTileId GetTileInfoForTileId
        {
            add => On.tk2dTileMap.GetTileInfoForTileId += value;
            remove => On.tk2dTileMap.GetTileInfoForTileId -= value;
        }

        public static event On.tk2dTileMap.hook_GetInterpolatedColorAtPosition GetInterpolatedColorAtPosition
        {
            add => On.tk2dTileMap.GetInterpolatedColorAtPosition += value;
            remove => On.tk2dTileMap.GetInterpolatedColorAtPosition -= value;
        }

        public static event On.tk2dTileMap.hook_UsesSpriteCollection UsesSpriteCollection
        {
            add => On.tk2dTileMap.UsesSpriteCollection += value;
            remove => On.tk2dTileMap.UsesSpriteCollection -= value;
        }

        public static event On.tk2dTileMap.hook_EndEditMode EndEditMode
        {
            add => On.tk2dTileMap.EndEditMode += value;
            remove => On.tk2dTileMap.EndEditMode -= value;
        }

        public static event On.tk2dTileMap.hook_TouchMesh TouchMesh
        {
            add => On.tk2dTileMap.TouchMesh += value;
            remove => On.tk2dTileMap.TouchMesh -= value;
        }

        public static event On.tk2dTileMap.hook_DestroyMesh DestroyMesh
        {
            add => On.tk2dTileMap.DestroyMesh += value;
            remove => On.tk2dTileMap.DestroyMesh -= value;
        }

        public static event On.tk2dTileMap.hook_GetTilePrefabsListCount GetTilePrefabsListCount
        {
            add => On.tk2dTileMap.GetTilePrefabsListCount += value;
            remove => On.tk2dTileMap.GetTilePrefabsListCount -= value;
        }

        public static event Delegates.get_TilePrefabsList_NormalArgs get_TilePrefabsList
        {
            add => HookEndpointManager.Add<Delegates.get_TilePrefabsList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_TilePrefabsList"), value);
            remove => HookEndpointManager.Remove<Delegates.get_TilePrefabsList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_TilePrefabsList"), value);
        }

        public static event On.tk2dTileMap.hook_GetTilePrefabsListItem GetTilePrefabsListItem
        {
            add => On.tk2dTileMap.GetTilePrefabsListItem += value;
            remove => On.tk2dTileMap.GetTilePrefabsListItem -= value;
        }

        public static event On.tk2dTileMap.hook_SetTilePrefabsList SetTilePrefabsList
        {
            add => On.tk2dTileMap.SetTilePrefabsList += value;
            remove => On.tk2dTileMap.SetTilePrefabsList -= value;
        }

        public static event Delegates.get_Layers_NormalArgs get_Layers
        {
            add => HookEndpointManager.Add<Delegates.get_Layers_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_Layers"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Layers_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_Layers"), value);
        }

        public static event Delegates.set_Layers_NormalArgs set_Layers
        {
            add => HookEndpointManager.Add<Delegates.set_Layers_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_Layers"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Layers_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_Layers"), value);
        }

        public static event Delegates.get_ColorChannel_NormalArgs get_ColorChannel
        {
            add => HookEndpointManager.Add<Delegates.get_ColorChannel_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_ColorChannel"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ColorChannel_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_ColorChannel"), value);
        }

        public static event Delegates.set_ColorChannel_NormalArgs set_ColorChannel
        {
            add => HookEndpointManager.Add<Delegates.set_ColorChannel_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_ColorChannel"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ColorChannel_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_ColorChannel"), value);
        }

        public static event Delegates.get_PrefabsRoot_NormalArgs get_PrefabsRoot
        {
            add => HookEndpointManager.Add<Delegates.get_PrefabsRoot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_PrefabsRoot"), value);
            remove => HookEndpointManager.Remove<Delegates.get_PrefabsRoot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "get_PrefabsRoot"), value);
        }

        public static event Delegates.set_PrefabsRoot_NormalArgs set_PrefabsRoot
        {
            add => HookEndpointManager.Add<Delegates.set_PrefabsRoot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_PrefabsRoot"), value);
            remove => HookEndpointManager.Remove<Delegates.set_PrefabsRoot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dTileMap), "set_PrefabsRoot"), value);
        }

        public static event On.tk2dTileMap.hook_GetTile GetTile
        {
            add => On.tk2dTileMap.GetTile += value;
            remove => On.tk2dTileMap.GetTile -= value;
        }

        public static event On.tk2dTileMap.hook_GetTileFlags GetTileFlags
        {
            add => On.tk2dTileMap.GetTileFlags += value;
            remove => On.tk2dTileMap.GetTileFlags -= value;
        }

        public static event On.tk2dTileMap.hook_SetTile SetTile
        {
            add => On.tk2dTileMap.SetTile += value;
            remove => On.tk2dTileMap.SetTile -= value;
        }

        public static event On.tk2dTileMap.hook_SetTileFlags SetTileFlags
        {
            add => On.tk2dTileMap.SetTileFlags += value;
            remove => On.tk2dTileMap.SetTileFlags -= value;
        }

        public static event On.tk2dTileMap.hook_ClearTile ClearTile
        {
            add => On.tk2dTileMap.ClearTile += value;
            remove => On.tk2dTileMap.ClearTile -= value;
        }
    }
}