using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for CollisionEvent class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCollisionEvent
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookReset()
{
if (!HookedList.Contains("Reset"))
{
HookedList.Add("Reset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "Reset", true), Reset);

}
}
internal static event Delegates.Reset_BeforeArgs _beforeReset;
internal static event Delegates.Reset_AfterArgs _afterReset;
private static void Reset(Action<HutongGames.PlayMaker.Actions.CollisionEvent> orig, HutongGames.PlayMaker.Actions.CollisionEvent self)
{
Delegates.Params_Reset @params = new() 
{
self = self
};
if (_beforeReset != null)
{
foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
{
try
{
_beforeReset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterReset != null)
{
foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
{
try
{
_afterReset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnPreprocess()
{
if (!HookedList.Contains("OnPreprocess"))
{
HookedList.Add("OnPreprocess");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "OnPreprocess", true), OnPreprocess);

}
}
internal static event Delegates.OnPreprocess_BeforeArgs _beforeOnPreprocess;
internal static event Delegates.OnPreprocess_AfterArgs _afterOnPreprocess;
private static void OnPreprocess(Action<HutongGames.PlayMaker.Actions.CollisionEvent> orig, HutongGames.PlayMaker.Actions.CollisionEvent self)
{
Delegates.Params_OnPreprocess @params = new() 
{
self = self
};
if (_beforeOnPreprocess != null)
{
foreach (Delegates.OnPreprocess_BeforeArgs toInvoke in _beforeOnPreprocess.GetInvocationList())
{
try
{
_beforeOnPreprocess?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnPreprocess != null)
{
foreach (Delegates.OnPreprocess_AfterArgs toInvoke in _afterOnPreprocess.GetInvocationList())
{
try
{
_afterOnPreprocess.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStoreCollisionInfo()
{
if (!HookedList.Contains("StoreCollisionInfo"))
{
HookedList.Add("StoreCollisionInfo");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "StoreCollisionInfo", true), StoreCollisionInfo);

}
}
internal static event Delegates.StoreCollisionInfo_BeforeArgs _beforeStoreCollisionInfo;
internal static event Delegates.StoreCollisionInfo_AfterArgs _afterStoreCollisionInfo;
private static void StoreCollisionInfo(Action<HutongGames.PlayMaker.Actions.CollisionEvent,  UnityEngine.Collision> orig, HutongGames.PlayMaker.Actions.CollisionEvent self,  UnityEngine.Collision collisionInfo)
{
Delegates.Params_StoreCollisionInfo @params = new() 
{
self = self
, collisionInfo = collisionInfo
};
if (_beforeStoreCollisionInfo != null)
{
foreach (Delegates.StoreCollisionInfo_BeforeArgs toInvoke in _beforeStoreCollisionInfo.GetInvocationList())
{
try
{
_beforeStoreCollisionInfo?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
collisionInfo = @params.collisionInfo;
orig(self, collisionInfo);
if (_afterStoreCollisionInfo != null)
{
foreach (Delegates.StoreCollisionInfo_AfterArgs toInvoke in _afterStoreCollisionInfo.GetInvocationList())
{
try
{
_afterStoreCollisionInfo.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDoCollisionEnter()
{
if (!HookedList.Contains("DoCollisionEnter"))
{
HookedList.Add("DoCollisionEnter");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "DoCollisionEnter", true), DoCollisionEnter);

}
}
internal static event Delegates.DoCollisionEnter_BeforeArgs _beforeDoCollisionEnter;
internal static event Delegates.DoCollisionEnter_AfterArgs _afterDoCollisionEnter;
private static void DoCollisionEnter(Action<HutongGames.PlayMaker.Actions.CollisionEvent,  UnityEngine.Collision> orig, HutongGames.PlayMaker.Actions.CollisionEvent self,  UnityEngine.Collision collisionInfo)
{
Delegates.Params_DoCollisionEnter @params = new() 
{
self = self
, collisionInfo = collisionInfo
};
if (_beforeDoCollisionEnter != null)
{
foreach (Delegates.DoCollisionEnter_BeforeArgs toInvoke in _beforeDoCollisionEnter.GetInvocationList())
{
try
{
_beforeDoCollisionEnter?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
collisionInfo = @params.collisionInfo;
orig(self, collisionInfo);
if (_afterDoCollisionEnter != null)
{
foreach (Delegates.DoCollisionEnter_AfterArgs toInvoke in _afterDoCollisionEnter.GetInvocationList())
{
try
{
_afterDoCollisionEnter.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDoCollisionStay()
{
if (!HookedList.Contains("DoCollisionStay"))
{
HookedList.Add("DoCollisionStay");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "DoCollisionStay", true), DoCollisionStay);

}
}
internal static event Delegates.DoCollisionStay_BeforeArgs _beforeDoCollisionStay;
internal static event Delegates.DoCollisionStay_AfterArgs _afterDoCollisionStay;
private static void DoCollisionStay(Action<HutongGames.PlayMaker.Actions.CollisionEvent,  UnityEngine.Collision> orig, HutongGames.PlayMaker.Actions.CollisionEvent self,  UnityEngine.Collision collisionInfo)
{
Delegates.Params_DoCollisionStay @params = new() 
{
self = self
, collisionInfo = collisionInfo
};
if (_beforeDoCollisionStay != null)
{
foreach (Delegates.DoCollisionStay_BeforeArgs toInvoke in _beforeDoCollisionStay.GetInvocationList())
{
try
{
_beforeDoCollisionStay?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
collisionInfo = @params.collisionInfo;
orig(self, collisionInfo);
if (_afterDoCollisionStay != null)
{
foreach (Delegates.DoCollisionStay_AfterArgs toInvoke in _afterDoCollisionStay.GetInvocationList())
{
try
{
_afterDoCollisionStay.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDoCollisionExit()
{
if (!HookedList.Contains("DoCollisionExit"))
{
HookedList.Add("DoCollisionExit");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "DoCollisionExit", true), DoCollisionExit);

}
}
internal static event Delegates.DoCollisionExit_BeforeArgs _beforeDoCollisionExit;
internal static event Delegates.DoCollisionExit_AfterArgs _afterDoCollisionExit;
private static void DoCollisionExit(Action<HutongGames.PlayMaker.Actions.CollisionEvent,  UnityEngine.Collision> orig, HutongGames.PlayMaker.Actions.CollisionEvent self,  UnityEngine.Collision collisionInfo)
{
Delegates.Params_DoCollisionExit @params = new() 
{
self = self
, collisionInfo = collisionInfo
};
if (_beforeDoCollisionExit != null)
{
foreach (Delegates.DoCollisionExit_BeforeArgs toInvoke in _beforeDoCollisionExit.GetInvocationList())
{
try
{
_beforeDoCollisionExit?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
collisionInfo = @params.collisionInfo;
orig(self, collisionInfo);
if (_afterDoCollisionExit != null)
{
foreach (Delegates.DoCollisionExit_AfterArgs toInvoke in _afterDoCollisionExit.GetInvocationList())
{
try
{
_afterDoCollisionExit.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDoControllerColliderHit()
{
if (!HookedList.Contains("DoControllerColliderHit"))
{
HookedList.Add("DoControllerColliderHit");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "DoControllerColliderHit", true), DoControllerColliderHit);

}
}
internal static event Delegates.DoControllerColliderHit_BeforeArgs _beforeDoControllerColliderHit;
internal static event Delegates.DoControllerColliderHit_AfterArgs _afterDoControllerColliderHit;
private static void DoControllerColliderHit(Action<HutongGames.PlayMaker.Actions.CollisionEvent,  UnityEngine.ControllerColliderHit> orig, HutongGames.PlayMaker.Actions.CollisionEvent self,  UnityEngine.ControllerColliderHit collisionInfo)
{
Delegates.Params_DoControllerColliderHit @params = new() 
{
self = self
, collisionInfo = collisionInfo
};
if (_beforeDoControllerColliderHit != null)
{
foreach (Delegates.DoControllerColliderHit_BeforeArgs toInvoke in _beforeDoControllerColliderHit.GetInvocationList())
{
try
{
_beforeDoControllerColliderHit?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
collisionInfo = @params.collisionInfo;
orig(self, collisionInfo);
if (_afterDoControllerColliderHit != null)
{
foreach (Delegates.DoControllerColliderHit_AfterArgs toInvoke in _afterDoControllerColliderHit.GetInvocationList())
{
try
{
_afterDoControllerColliderHit.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDoParticleCollision()
{
if (!HookedList.Contains("DoParticleCollision"))
{
HookedList.Add("DoParticleCollision");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "DoParticleCollision", true), DoParticleCollision);

}
}
internal static event Delegates.DoParticleCollision_BeforeArgs _beforeDoParticleCollision;
internal static event Delegates.DoParticleCollision_AfterArgs _afterDoParticleCollision;
private static void DoParticleCollision(Action<HutongGames.PlayMaker.Actions.CollisionEvent,  UnityEngine.GameObject> orig, HutongGames.PlayMaker.Actions.CollisionEvent self,  UnityEngine.GameObject other)
{
Delegates.Params_DoParticleCollision @params = new() 
{
self = self
, other = other
};
if (_beforeDoParticleCollision != null)
{
foreach (Delegates.DoParticleCollision_BeforeArgs toInvoke in _beforeDoParticleCollision.GetInvocationList())
{
try
{
_beforeDoParticleCollision?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
other = @params.other;
orig(self, other);
if (_afterDoParticleCollision != null)
{
foreach (Delegates.DoParticleCollision_AfterArgs toInvoke in _afterDoParticleCollision.GetInvocationList())
{
try
{
_afterDoParticleCollision.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookErrorCheck()
{
if (!HookedList.Contains("ErrorCheck"))
{
HookedList.Add("ErrorCheck");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "ErrorCheck", true), ErrorCheck);

}
}
internal static event Delegates.ErrorCheck_BeforeArgs _beforeErrorCheck;
internal static event Delegates.ErrorCheck_AfterArgs _afterErrorCheck;
private static string ErrorCheck(Func<HutongGames.PlayMaker.Actions.CollisionEvent, string> orig, HutongGames.PlayMaker.Actions.CollisionEvent self)
{
Delegates.Params_ErrorCheck @params = new() 
{
self = self
};
if (_beforeErrorCheck != null)
{
foreach (Delegates.ErrorCheck_BeforeArgs toInvoke in _beforeErrorCheck.GetInvocationList())
{
try
{
_beforeErrorCheck?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterErrorCheck != null)
{
foreach (Delegates.ErrorCheck_AfterArgs toInvoke in _afterErrorCheck.GetInvocationList())
{
try
{
retVal = _afterErrorCheck.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Reset
{
public HutongGames.PlayMaker.Actions.CollisionEvent self;
}
public delegate void Reset_BeforeArgs(Params_Reset args);
public delegate void Reset_AfterArgs(Params_Reset args);
public delegate void Reset_WithArgs (Action<HutongGames.PlayMaker.Actions.CollisionEvent> orig, HutongGames.PlayMaker.Actions.CollisionEvent self);
public sealed class Params_OnPreprocess
{
public HutongGames.PlayMaker.Actions.CollisionEvent self;
}
public delegate void OnPreprocess_BeforeArgs(Params_OnPreprocess args);
public delegate void OnPreprocess_AfterArgs(Params_OnPreprocess args);
public delegate void OnPreprocess_WithArgs (Action<HutongGames.PlayMaker.Actions.CollisionEvent> orig, HutongGames.PlayMaker.Actions.CollisionEvent self);
public sealed class Params_StoreCollisionInfo
{
public HutongGames.PlayMaker.Actions.CollisionEvent self;
public UnityEngine.Collision collisionInfo;
}
public delegate void StoreCollisionInfo_BeforeArgs(Params_StoreCollisionInfo args);
public delegate void StoreCollisionInfo_AfterArgs(Params_StoreCollisionInfo args);
public delegate void StoreCollisionInfo_WithArgs (Action<HutongGames.PlayMaker.Actions.CollisionEvent,  UnityEngine.Collision> orig, HutongGames.PlayMaker.Actions.CollisionEvent self,  UnityEngine.Collision collisionInfo);
public sealed class Params_DoCollisionEnter
{
public HutongGames.PlayMaker.Actions.CollisionEvent self;
public UnityEngine.Collision collisionInfo;
}
public delegate void DoCollisionEnter_BeforeArgs(Params_DoCollisionEnter args);
public delegate void DoCollisionEnter_AfterArgs(Params_DoCollisionEnter args);
public delegate void DoCollisionEnter_WithArgs (Action<HutongGames.PlayMaker.Actions.CollisionEvent,  UnityEngine.Collision> orig, HutongGames.PlayMaker.Actions.CollisionEvent self,  UnityEngine.Collision collisionInfo);
public sealed class Params_DoCollisionStay
{
public HutongGames.PlayMaker.Actions.CollisionEvent self;
public UnityEngine.Collision collisionInfo;
}
public delegate void DoCollisionStay_BeforeArgs(Params_DoCollisionStay args);
public delegate void DoCollisionStay_AfterArgs(Params_DoCollisionStay args);
public delegate void DoCollisionStay_WithArgs (Action<HutongGames.PlayMaker.Actions.CollisionEvent,  UnityEngine.Collision> orig, HutongGames.PlayMaker.Actions.CollisionEvent self,  UnityEngine.Collision collisionInfo);
public sealed class Params_DoCollisionExit
{
public HutongGames.PlayMaker.Actions.CollisionEvent self;
public UnityEngine.Collision collisionInfo;
}
public delegate void DoCollisionExit_BeforeArgs(Params_DoCollisionExit args);
public delegate void DoCollisionExit_AfterArgs(Params_DoCollisionExit args);
public delegate void DoCollisionExit_WithArgs (Action<HutongGames.PlayMaker.Actions.CollisionEvent,  UnityEngine.Collision> orig, HutongGames.PlayMaker.Actions.CollisionEvent self,  UnityEngine.Collision collisionInfo);
public sealed class Params_DoControllerColliderHit
{
public HutongGames.PlayMaker.Actions.CollisionEvent self;
public UnityEngine.ControllerColliderHit collisionInfo;
}
public delegate void DoControllerColliderHit_BeforeArgs(Params_DoControllerColliderHit args);
public delegate void DoControllerColliderHit_AfterArgs(Params_DoControllerColliderHit args);
public delegate void DoControllerColliderHit_WithArgs (Action<HutongGames.PlayMaker.Actions.CollisionEvent,  UnityEngine.ControllerColliderHit> orig, HutongGames.PlayMaker.Actions.CollisionEvent self,  UnityEngine.ControllerColliderHit collisionInfo);
public sealed class Params_DoParticleCollision
{
public HutongGames.PlayMaker.Actions.CollisionEvent self;
public UnityEngine.GameObject other;
}
public delegate void DoParticleCollision_BeforeArgs(Params_DoParticleCollision args);
public delegate void DoParticleCollision_AfterArgs(Params_DoParticleCollision args);
public delegate void DoParticleCollision_WithArgs (Action<HutongGames.PlayMaker.Actions.CollisionEvent,  UnityEngine.GameObject> orig, HutongGames.PlayMaker.Actions.CollisionEvent self,  UnityEngine.GameObject other);
public sealed class Params_ErrorCheck
{
public HutongGames.PlayMaker.Actions.CollisionEvent self;
}
public delegate void ErrorCheck_BeforeArgs(Params_ErrorCheck args);
public delegate string ErrorCheck_AfterArgs(Params_ErrorCheck args, string ret);
public delegate string ErrorCheck_WithArgs (Func<HutongGames.PlayMaker.Actions.CollisionEvent, string> orig, HutongGames.PlayMaker.Actions.CollisionEvent self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Reset_BeforeArgs Reset
{
add
{

HookHandler._beforeReset += value;
HookHandler.HookReset();
}
remove => HookHandler._beforeReset -= value;
}
public static event Delegates.OnPreprocess_BeforeArgs OnPreprocess
{
add
{

HookHandler._beforeOnPreprocess += value;
HookHandler.HookOnPreprocess();
}
remove => HookHandler._beforeOnPreprocess -= value;
}
public static event Delegates.StoreCollisionInfo_BeforeArgs StoreCollisionInfo
{
add
{

HookHandler._beforeStoreCollisionInfo += value;
HookHandler.HookStoreCollisionInfo();
}
remove => HookHandler._beforeStoreCollisionInfo -= value;
}
public static event Delegates.DoCollisionEnter_BeforeArgs DoCollisionEnter
{
add
{

HookHandler._beforeDoCollisionEnter += value;
HookHandler.HookDoCollisionEnter();
}
remove => HookHandler._beforeDoCollisionEnter -= value;
}
public static event Delegates.DoCollisionStay_BeforeArgs DoCollisionStay
{
add
{

HookHandler._beforeDoCollisionStay += value;
HookHandler.HookDoCollisionStay();
}
remove => HookHandler._beforeDoCollisionStay -= value;
}
public static event Delegates.DoCollisionExit_BeforeArgs DoCollisionExit
{
add
{

HookHandler._beforeDoCollisionExit += value;
HookHandler.HookDoCollisionExit();
}
remove => HookHandler._beforeDoCollisionExit -= value;
}
public static event Delegates.DoControllerColliderHit_BeforeArgs DoControllerColliderHit
{
add
{

HookHandler._beforeDoControllerColliderHit += value;
HookHandler.HookDoControllerColliderHit();
}
remove => HookHandler._beforeDoControllerColliderHit -= value;
}
public static event Delegates.DoParticleCollision_BeforeArgs DoParticleCollision
{
add
{

HookHandler._beforeDoParticleCollision += value;
HookHandler.HookDoParticleCollision();
}
remove => HookHandler._beforeDoParticleCollision -= value;
}
public static event Delegates.ErrorCheck_BeforeArgs ErrorCheck
{
add
{

HookHandler._beforeErrorCheck += value;
HookHandler.HookErrorCheck();
}
remove => HookHandler._beforeErrorCheck -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Reset_AfterArgs Reset
{
add
{

HookHandler._afterReset += value;
HookHandler.HookReset();
}
remove => HookHandler._afterReset -= value;
}
public static event Delegates.OnPreprocess_AfterArgs OnPreprocess
{
add
{

HookHandler._afterOnPreprocess += value;
HookHandler.HookOnPreprocess();
}
remove => HookHandler._afterOnPreprocess -= value;
}
public static event Delegates.StoreCollisionInfo_AfterArgs StoreCollisionInfo
{
add
{

HookHandler._afterStoreCollisionInfo += value;
HookHandler.HookStoreCollisionInfo();
}
remove => HookHandler._afterStoreCollisionInfo -= value;
}
public static event Delegates.DoCollisionEnter_AfterArgs DoCollisionEnter
{
add
{

HookHandler._afterDoCollisionEnter += value;
HookHandler.HookDoCollisionEnter();
}
remove => HookHandler._afterDoCollisionEnter -= value;
}
public static event Delegates.DoCollisionStay_AfterArgs DoCollisionStay
{
add
{

HookHandler._afterDoCollisionStay += value;
HookHandler.HookDoCollisionStay();
}
remove => HookHandler._afterDoCollisionStay -= value;
}
public static event Delegates.DoCollisionExit_AfterArgs DoCollisionExit
{
add
{

HookHandler._afterDoCollisionExit += value;
HookHandler.HookDoCollisionExit();
}
remove => HookHandler._afterDoCollisionExit -= value;
}
public static event Delegates.DoControllerColliderHit_AfterArgs DoControllerColliderHit
{
add
{

HookHandler._afterDoControllerColliderHit += value;
HookHandler.HookDoControllerColliderHit();
}
remove => HookHandler._afterDoControllerColliderHit -= value;
}
public static event Delegates.DoParticleCollision_AfterArgs DoParticleCollision
{
add
{

HookHandler._afterDoParticleCollision += value;
HookHandler.HookDoParticleCollision();
}
remove => HookHandler._afterDoParticleCollision -= value;
}
public static event Delegates.ErrorCheck_AfterArgs ErrorCheck
{
add
{

HookHandler._afterErrorCheck += value;
HookHandler.HookErrorCheck();
}
remove => HookHandler._afterErrorCheck -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.Reset_WithArgs Reset
{
add => HookEndpointManager.Add<Delegates.Reset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "Reset", true), value);
remove => HookEndpointManager.Remove<Delegates.Reset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "Reset", true), value);
}
public static event Delegates.OnPreprocess_WithArgs OnPreprocess
{
add => HookEndpointManager.Add<Delegates.OnPreprocess_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "OnPreprocess", true), value);
remove => HookEndpointManager.Remove<Delegates.OnPreprocess_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "OnPreprocess", true), value);
}
public static event Delegates.StoreCollisionInfo_WithArgs StoreCollisionInfo
{
add => HookEndpointManager.Add<Delegates.StoreCollisionInfo_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "StoreCollisionInfo", true), value);
remove => HookEndpointManager.Remove<Delegates.StoreCollisionInfo_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "StoreCollisionInfo", true), value);
}
public static event Delegates.DoCollisionEnter_WithArgs DoCollisionEnter
{
add => HookEndpointManager.Add<Delegates.DoCollisionEnter_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "DoCollisionEnter", true), value);
remove => HookEndpointManager.Remove<Delegates.DoCollisionEnter_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "DoCollisionEnter", true), value);
}
public static event Delegates.DoCollisionStay_WithArgs DoCollisionStay
{
add => HookEndpointManager.Add<Delegates.DoCollisionStay_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "DoCollisionStay", true), value);
remove => HookEndpointManager.Remove<Delegates.DoCollisionStay_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "DoCollisionStay", true), value);
}
public static event Delegates.DoCollisionExit_WithArgs DoCollisionExit
{
add => HookEndpointManager.Add<Delegates.DoCollisionExit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "DoCollisionExit", true), value);
remove => HookEndpointManager.Remove<Delegates.DoCollisionExit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "DoCollisionExit", true), value);
}
public static event Delegates.DoControllerColliderHit_WithArgs DoControllerColliderHit
{
add => HookEndpointManager.Add<Delegates.DoControllerColliderHit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "DoControllerColliderHit", true), value);
remove => HookEndpointManager.Remove<Delegates.DoControllerColliderHit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "DoControllerColliderHit", true), value);
}
public static event Delegates.DoParticleCollision_WithArgs DoParticleCollision
{
add => HookEndpointManager.Add<Delegates.DoParticleCollision_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "DoParticleCollision", true), value);
remove => HookEndpointManager.Remove<Delegates.DoParticleCollision_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "DoParticleCollision", true), value);
}
public static event Delegates.ErrorCheck_WithArgs ErrorCheck
{
add => HookEndpointManager.Add<Delegates.ErrorCheck_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "ErrorCheck", true), value);
remove => HookEndpointManager.Remove<Delegates.ErrorCheck_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.CollisionEvent), "ErrorCheck", true), value);
}
}

}
