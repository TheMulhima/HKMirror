using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for InputControlMapping class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnInputControlMapping
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Name()
        {
            if (!HookedList.Contains("get_Name"))
            {
                HookedList.Add("get_Name");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Name"), get_Name);
            }
        }

        internal static event Delegates.get_Name_BeforeArgs _beforeget_Name;
        internal static event Delegates.get_Name_AfterArgs _afterget_Name;

        private static string get_Name(Func<InputControlMapping, string> orig, InputControlMapping self)
        {
            Delegates.Params_get_Name @params = new()
            {
                self = self
            };
            if (_beforeget_Name != null)
                foreach (Delegates.get_Name_BeforeArgs toInvoke in _beforeget_Name.GetInvocationList())
                    try
                    {
                        _beforeget_Name?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Name != null)
                foreach (Delegates.get_Name_AfterArgs toInvoke in _afterget_Name.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Name.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Name()
        {
            if (!HookedList.Contains("set_Name"))
            {
                HookedList.Add("set_Name");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Name"), set_Name);
            }
        }

        internal static event Delegates.set_Name_BeforeArgs _beforeset_Name;
        internal static event Delegates.set_Name_AfterArgs _afterset_Name;

        private static void set_Name(Action<InputControlMapping, string> orig, InputControlMapping self, string value)
        {
            Delegates.Params_set_Name @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Name != null)
                foreach (Delegates.set_Name_BeforeArgs toInvoke in _beforeset_Name.GetInvocationList())
                    try
                    {
                        _beforeset_Name?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Name != null)
                foreach (Delegates.set_Name_AfterArgs toInvoke in _afterset_Name.GetInvocationList())
                    try
                    {
                        _afterset_Name.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_Invert()
        {
            if (!HookedList.Contains("get_Invert"))
            {
                HookedList.Add("get_Invert");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Invert"), get_Invert);
            }
        }

        internal static event Delegates.get_Invert_BeforeArgs _beforeget_Invert;
        internal static event Delegates.get_Invert_AfterArgs _afterget_Invert;

        private static bool get_Invert(Func<InputControlMapping, bool> orig, InputControlMapping self)
        {
            Delegates.Params_get_Invert @params = new()
            {
                self = self
            };
            if (_beforeget_Invert != null)
                foreach (Delegates.get_Invert_BeforeArgs toInvoke in _beforeget_Invert.GetInvocationList())
                    try
                    {
                        _beforeget_Invert?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Invert != null)
                foreach (Delegates.get_Invert_AfterArgs toInvoke in _afterget_Invert.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Invert.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Invert()
        {
            if (!HookedList.Contains("set_Invert"))
            {
                HookedList.Add("set_Invert");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Invert"), set_Invert);
            }
        }

        internal static event Delegates.set_Invert_BeforeArgs _beforeset_Invert;
        internal static event Delegates.set_Invert_AfterArgs _afterset_Invert;

        private static void set_Invert(Action<InputControlMapping, bool> orig, InputControlMapping self, bool value)
        {
            Delegates.Params_set_Invert @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Invert != null)
                foreach (Delegates.set_Invert_BeforeArgs toInvoke in _beforeset_Invert.GetInvocationList())
                    try
                    {
                        _beforeset_Invert?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Invert != null)
                foreach (Delegates.set_Invert_AfterArgs toInvoke in _afterset_Invert.GetInvocationList())
                    try
                    {
                        _afterset_Invert.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_Scale()
        {
            if (!HookedList.Contains("get_Scale"))
            {
                HookedList.Add("get_Scale");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Scale"), get_Scale);
            }
        }

        internal static event Delegates.get_Scale_BeforeArgs _beforeget_Scale;
        internal static event Delegates.get_Scale_AfterArgs _afterget_Scale;

        private static float get_Scale(Func<InputControlMapping, float> orig, InputControlMapping self)
        {
            Delegates.Params_get_Scale @params = new()
            {
                self = self
            };
            if (_beforeget_Scale != null)
                foreach (Delegates.get_Scale_BeforeArgs toInvoke in _beforeget_Scale.GetInvocationList())
                    try
                    {
                        _beforeget_Scale?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Scale != null)
                foreach (Delegates.get_Scale_AfterArgs toInvoke in _afterget_Scale.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Scale.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Scale()
        {
            if (!HookedList.Contains("set_Scale"))
            {
                HookedList.Add("set_Scale");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Scale"), set_Scale);
            }
        }

        internal static event Delegates.set_Scale_BeforeArgs _beforeset_Scale;
        internal static event Delegates.set_Scale_AfterArgs _afterset_Scale;

        private static void set_Scale(Action<InputControlMapping, float> orig, InputControlMapping self, float value)
        {
            Delegates.Params_set_Scale @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Scale != null)
                foreach (Delegates.set_Scale_BeforeArgs toInvoke in _beforeset_Scale.GetInvocationList())
                    try
                    {
                        _beforeset_Scale?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Scale != null)
                foreach (Delegates.set_Scale_AfterArgs toInvoke in _afterset_Scale.GetInvocationList())
                    try
                    {
                        _afterset_Scale.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_Raw()
        {
            if (!HookedList.Contains("get_Raw"))
            {
                HookedList.Add("get_Raw");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Raw"), get_Raw);
            }
        }

        internal static event Delegates.get_Raw_BeforeArgs _beforeget_Raw;
        internal static event Delegates.get_Raw_AfterArgs _afterget_Raw;

        private static bool get_Raw(Func<InputControlMapping, bool> orig, InputControlMapping self)
        {
            Delegates.Params_get_Raw @params = new()
            {
                self = self
            };
            if (_beforeget_Raw != null)
                foreach (Delegates.get_Raw_BeforeArgs toInvoke in _beforeget_Raw.GetInvocationList())
                    try
                    {
                        _beforeget_Raw?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Raw != null)
                foreach (Delegates.get_Raw_AfterArgs toInvoke in _afterget_Raw.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Raw.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Raw()
        {
            if (!HookedList.Contains("set_Raw"))
            {
                HookedList.Add("set_Raw");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Raw"), set_Raw);
            }
        }

        internal static event Delegates.set_Raw_BeforeArgs _beforeset_Raw;
        internal static event Delegates.set_Raw_AfterArgs _afterset_Raw;

        private static void set_Raw(Action<InputControlMapping, bool> orig, InputControlMapping self, bool value)
        {
            Delegates.Params_set_Raw @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Raw != null)
                foreach (Delegates.set_Raw_BeforeArgs toInvoke in _beforeset_Raw.GetInvocationList())
                    try
                    {
                        _beforeset_Raw?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Raw != null)
                foreach (Delegates.set_Raw_AfterArgs toInvoke in _afterset_Raw.GetInvocationList())
                    try
                    {
                        _afterset_Raw.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_Passive()
        {
            if (!HookedList.Contains("get_Passive"))
            {
                HookedList.Add("get_Passive");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Passive"), get_Passive);
            }
        }

        internal static event Delegates.get_Passive_BeforeArgs _beforeget_Passive;
        internal static event Delegates.get_Passive_AfterArgs _afterget_Passive;

        private static bool get_Passive(Func<InputControlMapping, bool> orig, InputControlMapping self)
        {
            Delegates.Params_get_Passive @params = new()
            {
                self = self
            };
            if (_beforeget_Passive != null)
                foreach (Delegates.get_Passive_BeforeArgs toInvoke in _beforeget_Passive.GetInvocationList())
                    try
                    {
                        _beforeget_Passive?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Passive != null)
                foreach (Delegates.get_Passive_AfterArgs toInvoke in _afterget_Passive.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Passive.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Passive()
        {
            if (!HookedList.Contains("set_Passive"))
            {
                HookedList.Add("set_Passive");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Passive"), set_Passive);
            }
        }

        internal static event Delegates.set_Passive_BeforeArgs _beforeset_Passive;
        internal static event Delegates.set_Passive_AfterArgs _afterset_Passive;

        private static void set_Passive(Action<InputControlMapping, bool> orig, InputControlMapping self, bool value)
        {
            Delegates.Params_set_Passive @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Passive != null)
                foreach (Delegates.set_Passive_BeforeArgs toInvoke in _beforeset_Passive.GetInvocationList())
                    try
                    {
                        _beforeset_Passive?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Passive != null)
                foreach (Delegates.set_Passive_AfterArgs toInvoke in _afterset_Passive.GetInvocationList())
                    try
                    {
                        _afterset_Passive.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_IgnoreInitialZeroValue()
        {
            if (!HookedList.Contains("get_IgnoreInitialZeroValue"))
            {
                HookedList.Add("get_IgnoreInitialZeroValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_IgnoreInitialZeroValue"),
                    get_IgnoreInitialZeroValue);
            }
        }

        internal static event Delegates.get_IgnoreInitialZeroValue_BeforeArgs _beforeget_IgnoreInitialZeroValue;
        internal static event Delegates.get_IgnoreInitialZeroValue_AfterArgs _afterget_IgnoreInitialZeroValue;

        private static bool get_IgnoreInitialZeroValue(Func<InputControlMapping, bool> orig, InputControlMapping self)
        {
            Delegates.Params_get_IgnoreInitialZeroValue @params = new()
            {
                self = self
            };
            if (_beforeget_IgnoreInitialZeroValue != null)
                foreach (Delegates.get_IgnoreInitialZeroValue_BeforeArgs toInvoke in _beforeget_IgnoreInitialZeroValue
                             .GetInvocationList())
                    try
                    {
                        _beforeget_IgnoreInitialZeroValue?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IgnoreInitialZeroValue != null)
                foreach (Delegates.get_IgnoreInitialZeroValue_AfterArgs toInvoke in _afterget_IgnoreInitialZeroValue
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_IgnoreInitialZeroValue.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_IgnoreInitialZeroValue()
        {
            if (!HookedList.Contains("set_IgnoreInitialZeroValue"))
            {
                HookedList.Add("set_IgnoreInitialZeroValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_IgnoreInitialZeroValue"),
                    set_IgnoreInitialZeroValue);
            }
        }

        internal static event Delegates.set_IgnoreInitialZeroValue_BeforeArgs _beforeset_IgnoreInitialZeroValue;
        internal static event Delegates.set_IgnoreInitialZeroValue_AfterArgs _afterset_IgnoreInitialZeroValue;

        private static void set_IgnoreInitialZeroValue(Action<InputControlMapping, bool> orig, InputControlMapping self,
            bool value)
        {
            Delegates.Params_set_IgnoreInitialZeroValue @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_IgnoreInitialZeroValue != null)
                foreach (Delegates.set_IgnoreInitialZeroValue_BeforeArgs toInvoke in _beforeset_IgnoreInitialZeroValue
                             .GetInvocationList())
                    try
                    {
                        _beforeset_IgnoreInitialZeroValue?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_IgnoreInitialZeroValue != null)
                foreach (Delegates.set_IgnoreInitialZeroValue_AfterArgs toInvoke in _afterset_IgnoreInitialZeroValue
                             .GetInvocationList())
                    try
                    {
                        _afterset_IgnoreInitialZeroValue.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_Sensitivity()
        {
            if (!HookedList.Contains("get_Sensitivity"))
            {
                HookedList.Add("get_Sensitivity");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Sensitivity"),
                    get_Sensitivity);
            }
        }

        internal static event Delegates.get_Sensitivity_BeforeArgs _beforeget_Sensitivity;
        internal static event Delegates.get_Sensitivity_AfterArgs _afterget_Sensitivity;

        private static float get_Sensitivity(Func<InputControlMapping, float> orig, InputControlMapping self)
        {
            Delegates.Params_get_Sensitivity @params = new()
            {
                self = self
            };
            if (_beforeget_Sensitivity != null)
                foreach (Delegates.get_Sensitivity_BeforeArgs toInvoke in _beforeget_Sensitivity.GetInvocationList())
                    try
                    {
                        _beforeget_Sensitivity?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Sensitivity != null)
                foreach (Delegates.get_Sensitivity_AfterArgs toInvoke in _afterget_Sensitivity.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Sensitivity.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Sensitivity()
        {
            if (!HookedList.Contains("set_Sensitivity"))
            {
                HookedList.Add("set_Sensitivity");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Sensitivity"),
                    set_Sensitivity);
            }
        }

        internal static event Delegates.set_Sensitivity_BeforeArgs _beforeset_Sensitivity;
        internal static event Delegates.set_Sensitivity_AfterArgs _afterset_Sensitivity;

        private static void set_Sensitivity(Action<InputControlMapping, float> orig, InputControlMapping self,
            float value)
        {
            Delegates.Params_set_Sensitivity @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Sensitivity != null)
                foreach (Delegates.set_Sensitivity_BeforeArgs toInvoke in _beforeset_Sensitivity.GetInvocationList())
                    try
                    {
                        _beforeset_Sensitivity?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Sensitivity != null)
                foreach (Delegates.set_Sensitivity_AfterArgs toInvoke in _afterset_Sensitivity.GetInvocationList())
                    try
                    {
                        _afterset_Sensitivity.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_LowerDeadZone()
        {
            if (!HookedList.Contains("get_LowerDeadZone"))
            {
                HookedList.Add("get_LowerDeadZone");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_LowerDeadZone"),
                    get_LowerDeadZone);
            }
        }

        internal static event Delegates.get_LowerDeadZone_BeforeArgs _beforeget_LowerDeadZone;
        internal static event Delegates.get_LowerDeadZone_AfterArgs _afterget_LowerDeadZone;

        private static float get_LowerDeadZone(Func<InputControlMapping, float> orig, InputControlMapping self)
        {
            Delegates.Params_get_LowerDeadZone @params = new()
            {
                self = self
            };
            if (_beforeget_LowerDeadZone != null)
                foreach (Delegates.get_LowerDeadZone_BeforeArgs toInvoke in
                         _beforeget_LowerDeadZone.GetInvocationList())
                    try
                    {
                        _beforeget_LowerDeadZone?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LowerDeadZone != null)
                foreach (Delegates.get_LowerDeadZone_AfterArgs toInvoke in _afterget_LowerDeadZone.GetInvocationList())
                    try
                    {
                        retVal = _afterget_LowerDeadZone.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_LowerDeadZone()
        {
            if (!HookedList.Contains("set_LowerDeadZone"))
            {
                HookedList.Add("set_LowerDeadZone");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_LowerDeadZone"),
                    set_LowerDeadZone);
            }
        }

        internal static event Delegates.set_LowerDeadZone_BeforeArgs _beforeset_LowerDeadZone;
        internal static event Delegates.set_LowerDeadZone_AfterArgs _afterset_LowerDeadZone;

        private static void set_LowerDeadZone(Action<InputControlMapping, float> orig, InputControlMapping self,
            float value)
        {
            Delegates.Params_set_LowerDeadZone @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_LowerDeadZone != null)
                foreach (Delegates.set_LowerDeadZone_BeforeArgs toInvoke in
                         _beforeset_LowerDeadZone.GetInvocationList())
                    try
                    {
                        _beforeset_LowerDeadZone?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_LowerDeadZone != null)
                foreach (Delegates.set_LowerDeadZone_AfterArgs toInvoke in _afterset_LowerDeadZone.GetInvocationList())
                    try
                    {
                        _afterset_LowerDeadZone.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_UpperDeadZone()
        {
            if (!HookedList.Contains("get_UpperDeadZone"))
            {
                HookedList.Add("get_UpperDeadZone");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_UpperDeadZone"),
                    get_UpperDeadZone);
            }
        }

        internal static event Delegates.get_UpperDeadZone_BeforeArgs _beforeget_UpperDeadZone;
        internal static event Delegates.get_UpperDeadZone_AfterArgs _afterget_UpperDeadZone;

        private static float get_UpperDeadZone(Func<InputControlMapping, float> orig, InputControlMapping self)
        {
            Delegates.Params_get_UpperDeadZone @params = new()
            {
                self = self
            };
            if (_beforeget_UpperDeadZone != null)
                foreach (Delegates.get_UpperDeadZone_BeforeArgs toInvoke in
                         _beforeget_UpperDeadZone.GetInvocationList())
                    try
                    {
                        _beforeget_UpperDeadZone?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_UpperDeadZone != null)
                foreach (Delegates.get_UpperDeadZone_AfterArgs toInvoke in _afterget_UpperDeadZone.GetInvocationList())
                    try
                    {
                        retVal = _afterget_UpperDeadZone.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_UpperDeadZone()
        {
            if (!HookedList.Contains("set_UpperDeadZone"))
            {
                HookedList.Add("set_UpperDeadZone");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_UpperDeadZone"),
                    set_UpperDeadZone);
            }
        }

        internal static event Delegates.set_UpperDeadZone_BeforeArgs _beforeset_UpperDeadZone;
        internal static event Delegates.set_UpperDeadZone_AfterArgs _afterset_UpperDeadZone;

        private static void set_UpperDeadZone(Action<InputControlMapping, float> orig, InputControlMapping self,
            float value)
        {
            Delegates.Params_set_UpperDeadZone @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_UpperDeadZone != null)
                foreach (Delegates.set_UpperDeadZone_BeforeArgs toInvoke in
                         _beforeset_UpperDeadZone.GetInvocationList())
                    try
                    {
                        _beforeset_UpperDeadZone?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_UpperDeadZone != null)
                foreach (Delegates.set_UpperDeadZone_AfterArgs toInvoke in _afterset_UpperDeadZone.GetInvocationList())
                    try
                    {
                        _afterset_UpperDeadZone.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_Source()
        {
            if (!HookedList.Contains("get_Source"))
            {
                HookedList.Add("get_Source");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Source"), get_Source);
            }
        }

        internal static event Delegates.get_Source_BeforeArgs _beforeget_Source;
        internal static event Delegates.get_Source_AfterArgs _afterget_Source;

        private static InputControlSource get_Source(Func<InputControlMapping, InputControlSource> orig,
            InputControlMapping self)
        {
            Delegates.Params_get_Source @params = new()
            {
                self = self
            };
            if (_beforeget_Source != null)
                foreach (Delegates.get_Source_BeforeArgs toInvoke in _beforeget_Source.GetInvocationList())
                    try
                    {
                        _beforeget_Source?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Source != null)
                foreach (Delegates.get_Source_AfterArgs toInvoke in _afterget_Source.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Source.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Source()
        {
            if (!HookedList.Contains("set_Source"))
            {
                HookedList.Add("set_Source");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Source"), set_Source);
            }
        }

        internal static event Delegates.set_Source_BeforeArgs _beforeset_Source;
        internal static event Delegates.set_Source_AfterArgs _afterset_Source;

        private static void set_Source(Action<InputControlMapping, InputControlSource> orig, InputControlMapping self,
            InputControlSource value)
        {
            Delegates.Params_set_Source @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Source != null)
                foreach (Delegates.set_Source_BeforeArgs toInvoke in _beforeset_Source.GetInvocationList())
                    try
                    {
                        _beforeset_Source?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Source != null)
                foreach (Delegates.set_Source_AfterArgs toInvoke in _afterset_Source.GetInvocationList())
                    try
                    {
                        _afterset_Source.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_Target()
        {
            if (!HookedList.Contains("get_Target"))
            {
                HookedList.Add("get_Target");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Target"), get_Target);
            }
        }

        internal static event Delegates.get_Target_BeforeArgs _beforeget_Target;
        internal static event Delegates.get_Target_AfterArgs _afterget_Target;

        private static InputControlType get_Target(Func<InputControlMapping, InputControlType> orig,
            InputControlMapping self)
        {
            Delegates.Params_get_Target @params = new()
            {
                self = self
            };
            if (_beforeget_Target != null)
                foreach (Delegates.get_Target_BeforeArgs toInvoke in _beforeget_Target.GetInvocationList())
                    try
                    {
                        _beforeget_Target?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Target != null)
                foreach (Delegates.get_Target_AfterArgs toInvoke in _afterget_Target.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Target.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Target()
        {
            if (!HookedList.Contains("set_Target"))
            {
                HookedList.Add("set_Target");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Target"), set_Target);
            }
        }

        internal static event Delegates.set_Target_BeforeArgs _beforeset_Target;
        internal static event Delegates.set_Target_AfterArgs _afterset_Target;

        private static void set_Target(Action<InputControlMapping, InputControlType> orig, InputControlMapping self,
            InputControlType value)
        {
            Delegates.Params_set_Target @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Target != null)
                foreach (Delegates.set_Target_BeforeArgs toInvoke in _beforeset_Target.GetInvocationList())
                    try
                    {
                        _beforeset_Target?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Target != null)
                foreach (Delegates.set_Target_AfterArgs toInvoke in _afterset_Target.GetInvocationList())
                    try
                    {
                        _afterset_Target.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_SourceRange()
        {
            if (!HookedList.Contains("get_SourceRange"))
            {
                HookedList.Add("get_SourceRange");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_SourceRange"),
                    get_SourceRange);
            }
        }

        internal static event Delegates.get_SourceRange_BeforeArgs _beforeget_SourceRange;
        internal static event Delegates.get_SourceRange_AfterArgs _afterget_SourceRange;

        private static InputRangeType get_SourceRange(Func<InputControlMapping, InputRangeType> orig,
            InputControlMapping self)
        {
            Delegates.Params_get_SourceRange @params = new()
            {
                self = self
            };
            if (_beforeget_SourceRange != null)
                foreach (Delegates.get_SourceRange_BeforeArgs toInvoke in _beforeget_SourceRange.GetInvocationList())
                    try
                    {
                        _beforeget_SourceRange?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SourceRange != null)
                foreach (Delegates.get_SourceRange_AfterArgs toInvoke in _afterget_SourceRange.GetInvocationList())
                    try
                    {
                        retVal = _afterget_SourceRange.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_SourceRange()
        {
            if (!HookedList.Contains("set_SourceRange"))
            {
                HookedList.Add("set_SourceRange");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_SourceRange"),
                    set_SourceRange);
            }
        }

        internal static event Delegates.set_SourceRange_BeforeArgs _beforeset_SourceRange;
        internal static event Delegates.set_SourceRange_AfterArgs _afterset_SourceRange;

        private static void set_SourceRange(Action<InputControlMapping, InputRangeType> orig, InputControlMapping self,
            InputRangeType value)
        {
            Delegates.Params_set_SourceRange @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_SourceRange != null)
                foreach (Delegates.set_SourceRange_BeforeArgs toInvoke in _beforeset_SourceRange.GetInvocationList())
                    try
                    {
                        _beforeset_SourceRange?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_SourceRange != null)
                foreach (Delegates.set_SourceRange_AfterArgs toInvoke in _afterset_SourceRange.GetInvocationList())
                    try
                    {
                        _afterset_SourceRange.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_TargetRange()
        {
            if (!HookedList.Contains("get_TargetRange"))
            {
                HookedList.Add("get_TargetRange");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_TargetRange"),
                    get_TargetRange);
            }
        }

        internal static event Delegates.get_TargetRange_BeforeArgs _beforeget_TargetRange;
        internal static event Delegates.get_TargetRange_AfterArgs _afterget_TargetRange;

        private static InputRangeType get_TargetRange(Func<InputControlMapping, InputRangeType> orig,
            InputControlMapping self)
        {
            Delegates.Params_get_TargetRange @params = new()
            {
                self = self
            };
            if (_beforeget_TargetRange != null)
                foreach (Delegates.get_TargetRange_BeforeArgs toInvoke in _beforeget_TargetRange.GetInvocationList())
                    try
                    {
                        _beforeget_TargetRange?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_TargetRange != null)
                foreach (Delegates.get_TargetRange_AfterArgs toInvoke in _afterget_TargetRange.GetInvocationList())
                    try
                    {
                        retVal = _afterget_TargetRange.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_TargetRange()
        {
            if (!HookedList.Contains("set_TargetRange"))
            {
                HookedList.Add("set_TargetRange");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_TargetRange"),
                    set_TargetRange);
            }
        }

        internal static event Delegates.set_TargetRange_BeforeArgs _beforeset_TargetRange;
        internal static event Delegates.set_TargetRange_AfterArgs _afterset_TargetRange;

        private static void set_TargetRange(Action<InputControlMapping, InputRangeType> orig, InputControlMapping self,
            InputRangeType value)
        {
            Delegates.Params_set_TargetRange @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_TargetRange != null)
                foreach (Delegates.set_TargetRange_BeforeArgs toInvoke in _beforeset_TargetRange.GetInvocationList())
                    try
                    {
                        _beforeset_TargetRange?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_TargetRange != null)
                foreach (Delegates.set_TargetRange_AfterArgs toInvoke in _afterset_TargetRange.GetInvocationList())
                    try
                    {
                        _afterset_TargetRange.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyToValue()
        {
            if (!HookedList.Contains("ApplyToValue"))
            {
                HookedList.Add("ApplyToValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "ApplyToValue"), ApplyToValue);
            }
        }

        internal static event Delegates.ApplyToValue_BeforeArgs _beforeApplyToValue;
        internal static event Delegates.ApplyToValue_AfterArgs _afterApplyToValue;

        private static float ApplyToValue(Func<InputControlMapping, float, float> orig, InputControlMapping self,
            float value)
        {
            Delegates.Params_ApplyToValue @params = new()
            {
                self = self, value = value
            };
            if (_beforeApplyToValue != null)
                foreach (Delegates.ApplyToValue_BeforeArgs toInvoke in _beforeApplyToValue.GetInvocationList())
                    try
                    {
                        _beforeApplyToValue?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            var retVal = orig(self, value);
            if (_afterApplyToValue != null)
                foreach (Delegates.ApplyToValue_AfterArgs toInvoke in _afterApplyToValue.GetInvocationList())
                    try
                    {
                        retVal = _afterApplyToValue.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate float ApplyToValue_AfterArgs(Params_ApplyToValue args, float ret);

        public delegate void ApplyToValue_BeforeArgs(Params_ApplyToValue args);

        public delegate float ApplyToValue_WithArgs(Func<InputControlMapping, float, float> orig,
            InputControlMapping self, float value);

        public delegate bool get_IgnoreInitialZeroValue_AfterArgs(Params_get_IgnoreInitialZeroValue args, bool ret);

        public delegate void get_IgnoreInitialZeroValue_BeforeArgs(Params_get_IgnoreInitialZeroValue args);

        public delegate bool get_IgnoreInitialZeroValue_WithArgs(Func<InputControlMapping, bool> orig,
            InputControlMapping self);

        public delegate bool get_Invert_AfterArgs(Params_get_Invert args, bool ret);

        public delegate void get_Invert_BeforeArgs(Params_get_Invert args);

        public delegate bool get_Invert_WithArgs(Func<InputControlMapping, bool> orig, InputControlMapping self);

        public delegate float get_LowerDeadZone_AfterArgs(Params_get_LowerDeadZone args, float ret);

        public delegate void get_LowerDeadZone_BeforeArgs(Params_get_LowerDeadZone args);

        public delegate float get_LowerDeadZone_WithArgs(Func<InputControlMapping, float> orig,
            InputControlMapping self);

        public delegate string get_Name_AfterArgs(Params_get_Name args, string ret);

        public delegate void get_Name_BeforeArgs(Params_get_Name args);

        public delegate string get_Name_WithArgs(Func<InputControlMapping, string> orig, InputControlMapping self);

        public delegate bool get_Passive_AfterArgs(Params_get_Passive args, bool ret);

        public delegate void get_Passive_BeforeArgs(Params_get_Passive args);

        public delegate bool get_Passive_WithArgs(Func<InputControlMapping, bool> orig, InputControlMapping self);

        public delegate bool get_Raw_AfterArgs(Params_get_Raw args, bool ret);

        public delegate void get_Raw_BeforeArgs(Params_get_Raw args);

        public delegate bool get_Raw_WithArgs(Func<InputControlMapping, bool> orig, InputControlMapping self);

        public delegate float get_Scale_AfterArgs(Params_get_Scale args, float ret);

        public delegate void get_Scale_BeforeArgs(Params_get_Scale args);

        public delegate float get_Scale_WithArgs(Func<InputControlMapping, float> orig, InputControlMapping self);

        public delegate float get_Sensitivity_AfterArgs(Params_get_Sensitivity args, float ret);

        public delegate void get_Sensitivity_BeforeArgs(Params_get_Sensitivity args);

        public delegate float get_Sensitivity_WithArgs(Func<InputControlMapping, float> orig, InputControlMapping self);

        public delegate InputControlSource get_Source_AfterArgs(Params_get_Source args, InputControlSource ret);

        public delegate void get_Source_BeforeArgs(Params_get_Source args);

        public delegate InputControlSource get_Source_WithArgs(Func<InputControlMapping, InputControlSource> orig,
            InputControlMapping self);

        public delegate InputRangeType get_SourceRange_AfterArgs(Params_get_SourceRange args, InputRangeType ret);

        public delegate void get_SourceRange_BeforeArgs(Params_get_SourceRange args);

        public delegate InputRangeType get_SourceRange_WithArgs(Func<InputControlMapping, InputRangeType> orig,
            InputControlMapping self);

        public delegate InputControlType get_Target_AfterArgs(Params_get_Target args, InputControlType ret);

        public delegate void get_Target_BeforeArgs(Params_get_Target args);

        public delegate InputControlType get_Target_WithArgs(Func<InputControlMapping, InputControlType> orig,
            InputControlMapping self);

        public delegate InputRangeType get_TargetRange_AfterArgs(Params_get_TargetRange args, InputRangeType ret);

        public delegate void get_TargetRange_BeforeArgs(Params_get_TargetRange args);

        public delegate InputRangeType get_TargetRange_WithArgs(Func<InputControlMapping, InputRangeType> orig,
            InputControlMapping self);

        public delegate float get_UpperDeadZone_AfterArgs(Params_get_UpperDeadZone args, float ret);

        public delegate void get_UpperDeadZone_BeforeArgs(Params_get_UpperDeadZone args);

        public delegate float get_UpperDeadZone_WithArgs(Func<InputControlMapping, float> orig,
            InputControlMapping self);

        public delegate void set_IgnoreInitialZeroValue_AfterArgs(Params_set_IgnoreInitialZeroValue args);

        public delegate void set_IgnoreInitialZeroValue_BeforeArgs(Params_set_IgnoreInitialZeroValue args);

        public delegate void set_IgnoreInitialZeroValue_WithArgs(Action<InputControlMapping, bool> orig,
            InputControlMapping self, bool value);

        public delegate void set_Invert_AfterArgs(Params_set_Invert args);

        public delegate void set_Invert_BeforeArgs(Params_set_Invert args);

        public delegate void set_Invert_WithArgs(Action<InputControlMapping, bool> orig, InputControlMapping self,
            bool value);

        public delegate void set_LowerDeadZone_AfterArgs(Params_set_LowerDeadZone args);

        public delegate void set_LowerDeadZone_BeforeArgs(Params_set_LowerDeadZone args);

        public delegate void set_LowerDeadZone_WithArgs(Action<InputControlMapping, float> orig,
            InputControlMapping self, float value);

        public delegate void set_Name_AfterArgs(Params_set_Name args);

        public delegate void set_Name_BeforeArgs(Params_set_Name args);

        public delegate void set_Name_WithArgs(Action<InputControlMapping, string> orig, InputControlMapping self,
            string value);

        public delegate void set_Passive_AfterArgs(Params_set_Passive args);

        public delegate void set_Passive_BeforeArgs(Params_set_Passive args);

        public delegate void set_Passive_WithArgs(Action<InputControlMapping, bool> orig, InputControlMapping self,
            bool value);

        public delegate void set_Raw_AfterArgs(Params_set_Raw args);

        public delegate void set_Raw_BeforeArgs(Params_set_Raw args);

        public delegate void set_Raw_WithArgs(Action<InputControlMapping, bool> orig, InputControlMapping self,
            bool value);

        public delegate void set_Scale_AfterArgs(Params_set_Scale args);

        public delegate void set_Scale_BeforeArgs(Params_set_Scale args);

        public delegate void set_Scale_WithArgs(Action<InputControlMapping, float> orig, InputControlMapping self,
            float value);

        public delegate void set_Sensitivity_AfterArgs(Params_set_Sensitivity args);

        public delegate void set_Sensitivity_BeforeArgs(Params_set_Sensitivity args);

        public delegate void set_Sensitivity_WithArgs(Action<InputControlMapping, float> orig, InputControlMapping self,
            float value);

        public delegate void set_Source_AfterArgs(Params_set_Source args);

        public delegate void set_Source_BeforeArgs(Params_set_Source args);

        public delegate void set_Source_WithArgs(Action<InputControlMapping, InputControlSource> orig,
            InputControlMapping self, InputControlSource value);

        public delegate void set_SourceRange_AfterArgs(Params_set_SourceRange args);

        public delegate void set_SourceRange_BeforeArgs(Params_set_SourceRange args);

        public delegate void set_SourceRange_WithArgs(Action<InputControlMapping, InputRangeType> orig,
            InputControlMapping self, InputRangeType value);

        public delegate void set_Target_AfterArgs(Params_set_Target args);

        public delegate void set_Target_BeforeArgs(Params_set_Target args);

        public delegate void set_Target_WithArgs(Action<InputControlMapping, InputControlType> orig,
            InputControlMapping self, InputControlType value);

        public delegate void set_TargetRange_AfterArgs(Params_set_TargetRange args);

        public delegate void set_TargetRange_BeforeArgs(Params_set_TargetRange args);

        public delegate void set_TargetRange_WithArgs(Action<InputControlMapping, InputRangeType> orig,
            InputControlMapping self, InputRangeType value);

        public delegate void set_UpperDeadZone_AfterArgs(Params_set_UpperDeadZone args);

        public delegate void set_UpperDeadZone_BeforeArgs(Params_set_UpperDeadZone args);

        public delegate void set_UpperDeadZone_WithArgs(Action<InputControlMapping, float> orig,
            InputControlMapping self, float value);

        public sealed class Params_get_Name
        {
            public InputControlMapping self;
        }

        public sealed class Params_set_Name
        {
            public InputControlMapping self;
            public string value;
        }

        public sealed class Params_get_Invert
        {
            public InputControlMapping self;
        }

        public sealed class Params_set_Invert
        {
            public InputControlMapping self;
            public bool value;
        }

        public sealed class Params_get_Scale
        {
            public InputControlMapping self;
        }

        public sealed class Params_set_Scale
        {
            public InputControlMapping self;
            public float value;
        }

        public sealed class Params_get_Raw
        {
            public InputControlMapping self;
        }

        public sealed class Params_set_Raw
        {
            public InputControlMapping self;
            public bool value;
        }

        public sealed class Params_get_Passive
        {
            public InputControlMapping self;
        }

        public sealed class Params_set_Passive
        {
            public InputControlMapping self;
            public bool value;
        }

        public sealed class Params_get_IgnoreInitialZeroValue
        {
            public InputControlMapping self;
        }

        public sealed class Params_set_IgnoreInitialZeroValue
        {
            public InputControlMapping self;
            public bool value;
        }

        public sealed class Params_get_Sensitivity
        {
            public InputControlMapping self;
        }

        public sealed class Params_set_Sensitivity
        {
            public InputControlMapping self;
            public float value;
        }

        public sealed class Params_get_LowerDeadZone
        {
            public InputControlMapping self;
        }

        public sealed class Params_set_LowerDeadZone
        {
            public InputControlMapping self;
            public float value;
        }

        public sealed class Params_get_UpperDeadZone
        {
            public InputControlMapping self;
        }

        public sealed class Params_set_UpperDeadZone
        {
            public InputControlMapping self;
            public float value;
        }

        public sealed class Params_get_Source
        {
            public InputControlMapping self;
        }

        public sealed class Params_set_Source
        {
            public InputControlMapping self;
            public InputControlSource value;
        }

        public sealed class Params_get_Target
        {
            public InputControlMapping self;
        }

        public sealed class Params_set_Target
        {
            public InputControlMapping self;
            public InputControlType value;
        }

        public sealed class Params_get_SourceRange
        {
            public InputControlMapping self;
        }

        public sealed class Params_set_SourceRange
        {
            public InputControlMapping self;
            public InputRangeType value;
        }

        public sealed class Params_get_TargetRange
        {
            public InputControlMapping self;
        }

        public sealed class Params_set_TargetRange
        {
            public InputControlMapping self;
            public InputRangeType value;
        }

        public sealed class Params_ApplyToValue
        {
            public InputControlMapping self;
            public float value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Name_BeforeArgs get_Name
        {
            add
            {
                HookHandler._beforeget_Name += value;
                HookHandler.Hookget_Name();
            }
            remove => HookHandler._beforeget_Name -= value;
        }

        public static event Delegates.set_Name_BeforeArgs set_Name
        {
            add
            {
                HookHandler._beforeset_Name += value;
                HookHandler.Hookset_Name();
            }
            remove => HookHandler._beforeset_Name -= value;
        }

        public static event Delegates.get_Invert_BeforeArgs get_Invert
        {
            add
            {
                HookHandler._beforeget_Invert += value;
                HookHandler.Hookget_Invert();
            }
            remove => HookHandler._beforeget_Invert -= value;
        }

        public static event Delegates.set_Invert_BeforeArgs set_Invert
        {
            add
            {
                HookHandler._beforeset_Invert += value;
                HookHandler.Hookset_Invert();
            }
            remove => HookHandler._beforeset_Invert -= value;
        }

        public static event Delegates.get_Scale_BeforeArgs get_Scale
        {
            add
            {
                HookHandler._beforeget_Scale += value;
                HookHandler.Hookget_Scale();
            }
            remove => HookHandler._beforeget_Scale -= value;
        }

        public static event Delegates.set_Scale_BeforeArgs set_Scale
        {
            add
            {
                HookHandler._beforeset_Scale += value;
                HookHandler.Hookset_Scale();
            }
            remove => HookHandler._beforeset_Scale -= value;
        }

        public static event Delegates.get_Raw_BeforeArgs get_Raw
        {
            add
            {
                HookHandler._beforeget_Raw += value;
                HookHandler.Hookget_Raw();
            }
            remove => HookHandler._beforeget_Raw -= value;
        }

        public static event Delegates.set_Raw_BeforeArgs set_Raw
        {
            add
            {
                HookHandler._beforeset_Raw += value;
                HookHandler.Hookset_Raw();
            }
            remove => HookHandler._beforeset_Raw -= value;
        }

        public static event Delegates.get_Passive_BeforeArgs get_Passive
        {
            add
            {
                HookHandler._beforeget_Passive += value;
                HookHandler.Hookget_Passive();
            }
            remove => HookHandler._beforeget_Passive -= value;
        }

        public static event Delegates.set_Passive_BeforeArgs set_Passive
        {
            add
            {
                HookHandler._beforeset_Passive += value;
                HookHandler.Hookset_Passive();
            }
            remove => HookHandler._beforeset_Passive -= value;
        }

        public static event Delegates.get_IgnoreInitialZeroValue_BeforeArgs get_IgnoreInitialZeroValue
        {
            add
            {
                HookHandler._beforeget_IgnoreInitialZeroValue += value;
                HookHandler.Hookget_IgnoreInitialZeroValue();
            }
            remove => HookHandler._beforeget_IgnoreInitialZeroValue -= value;
        }

        public static event Delegates.set_IgnoreInitialZeroValue_BeforeArgs set_IgnoreInitialZeroValue
        {
            add
            {
                HookHandler._beforeset_IgnoreInitialZeroValue += value;
                HookHandler.Hookset_IgnoreInitialZeroValue();
            }
            remove => HookHandler._beforeset_IgnoreInitialZeroValue -= value;
        }

        public static event Delegates.get_Sensitivity_BeforeArgs get_Sensitivity
        {
            add
            {
                HookHandler._beforeget_Sensitivity += value;
                HookHandler.Hookget_Sensitivity();
            }
            remove => HookHandler._beforeget_Sensitivity -= value;
        }

        public static event Delegates.set_Sensitivity_BeforeArgs set_Sensitivity
        {
            add
            {
                HookHandler._beforeset_Sensitivity += value;
                HookHandler.Hookset_Sensitivity();
            }
            remove => HookHandler._beforeset_Sensitivity -= value;
        }

        public static event Delegates.get_LowerDeadZone_BeforeArgs get_LowerDeadZone
        {
            add
            {
                HookHandler._beforeget_LowerDeadZone += value;
                HookHandler.Hookget_LowerDeadZone();
            }
            remove => HookHandler._beforeget_LowerDeadZone -= value;
        }

        public static event Delegates.set_LowerDeadZone_BeforeArgs set_LowerDeadZone
        {
            add
            {
                HookHandler._beforeset_LowerDeadZone += value;
                HookHandler.Hookset_LowerDeadZone();
            }
            remove => HookHandler._beforeset_LowerDeadZone -= value;
        }

        public static event Delegates.get_UpperDeadZone_BeforeArgs get_UpperDeadZone
        {
            add
            {
                HookHandler._beforeget_UpperDeadZone += value;
                HookHandler.Hookget_UpperDeadZone();
            }
            remove => HookHandler._beforeget_UpperDeadZone -= value;
        }

        public static event Delegates.set_UpperDeadZone_BeforeArgs set_UpperDeadZone
        {
            add
            {
                HookHandler._beforeset_UpperDeadZone += value;
                HookHandler.Hookset_UpperDeadZone();
            }
            remove => HookHandler._beforeset_UpperDeadZone -= value;
        }

        public static event Delegates.get_Source_BeforeArgs get_Source
        {
            add
            {
                HookHandler._beforeget_Source += value;
                HookHandler.Hookget_Source();
            }
            remove => HookHandler._beforeget_Source -= value;
        }

        public static event Delegates.set_Source_BeforeArgs set_Source
        {
            add
            {
                HookHandler._beforeset_Source += value;
                HookHandler.Hookset_Source();
            }
            remove => HookHandler._beforeset_Source -= value;
        }

        public static event Delegates.get_Target_BeforeArgs get_Target
        {
            add
            {
                HookHandler._beforeget_Target += value;
                HookHandler.Hookget_Target();
            }
            remove => HookHandler._beforeget_Target -= value;
        }

        public static event Delegates.set_Target_BeforeArgs set_Target
        {
            add
            {
                HookHandler._beforeset_Target += value;
                HookHandler.Hookset_Target();
            }
            remove => HookHandler._beforeset_Target -= value;
        }

        public static event Delegates.get_SourceRange_BeforeArgs get_SourceRange
        {
            add
            {
                HookHandler._beforeget_SourceRange += value;
                HookHandler.Hookget_SourceRange();
            }
            remove => HookHandler._beforeget_SourceRange -= value;
        }

        public static event Delegates.set_SourceRange_BeforeArgs set_SourceRange
        {
            add
            {
                HookHandler._beforeset_SourceRange += value;
                HookHandler.Hookset_SourceRange();
            }
            remove => HookHandler._beforeset_SourceRange -= value;
        }

        public static event Delegates.get_TargetRange_BeforeArgs get_TargetRange
        {
            add
            {
                HookHandler._beforeget_TargetRange += value;
                HookHandler.Hookget_TargetRange();
            }
            remove => HookHandler._beforeget_TargetRange -= value;
        }

        public static event Delegates.set_TargetRange_BeforeArgs set_TargetRange
        {
            add
            {
                HookHandler._beforeset_TargetRange += value;
                HookHandler.Hookset_TargetRange();
            }
            remove => HookHandler._beforeset_TargetRange -= value;
        }

        public static event Delegates.ApplyToValue_BeforeArgs ApplyToValue
        {
            add
            {
                HookHandler._beforeApplyToValue += value;
                HookHandler.HookApplyToValue();
            }
            remove => HookHandler._beforeApplyToValue -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Name_AfterArgs get_Name
        {
            add
            {
                HookHandler._afterget_Name += value;
                HookHandler.Hookget_Name();
            }
            remove => HookHandler._afterget_Name -= value;
        }

        public static event Delegates.set_Name_AfterArgs set_Name
        {
            add
            {
                HookHandler._afterset_Name += value;
                HookHandler.Hookset_Name();
            }
            remove => HookHandler._afterset_Name -= value;
        }

        public static event Delegates.get_Invert_AfterArgs get_Invert
        {
            add
            {
                HookHandler._afterget_Invert += value;
                HookHandler.Hookget_Invert();
            }
            remove => HookHandler._afterget_Invert -= value;
        }

        public static event Delegates.set_Invert_AfterArgs set_Invert
        {
            add
            {
                HookHandler._afterset_Invert += value;
                HookHandler.Hookset_Invert();
            }
            remove => HookHandler._afterset_Invert -= value;
        }

        public static event Delegates.get_Scale_AfterArgs get_Scale
        {
            add
            {
                HookHandler._afterget_Scale += value;
                HookHandler.Hookget_Scale();
            }
            remove => HookHandler._afterget_Scale -= value;
        }

        public static event Delegates.set_Scale_AfterArgs set_Scale
        {
            add
            {
                HookHandler._afterset_Scale += value;
                HookHandler.Hookset_Scale();
            }
            remove => HookHandler._afterset_Scale -= value;
        }

        public static event Delegates.get_Raw_AfterArgs get_Raw
        {
            add
            {
                HookHandler._afterget_Raw += value;
                HookHandler.Hookget_Raw();
            }
            remove => HookHandler._afterget_Raw -= value;
        }

        public static event Delegates.set_Raw_AfterArgs set_Raw
        {
            add
            {
                HookHandler._afterset_Raw += value;
                HookHandler.Hookset_Raw();
            }
            remove => HookHandler._afterset_Raw -= value;
        }

        public static event Delegates.get_Passive_AfterArgs get_Passive
        {
            add
            {
                HookHandler._afterget_Passive += value;
                HookHandler.Hookget_Passive();
            }
            remove => HookHandler._afterget_Passive -= value;
        }

        public static event Delegates.set_Passive_AfterArgs set_Passive
        {
            add
            {
                HookHandler._afterset_Passive += value;
                HookHandler.Hookset_Passive();
            }
            remove => HookHandler._afterset_Passive -= value;
        }

        public static event Delegates.get_IgnoreInitialZeroValue_AfterArgs get_IgnoreInitialZeroValue
        {
            add
            {
                HookHandler._afterget_IgnoreInitialZeroValue += value;
                HookHandler.Hookget_IgnoreInitialZeroValue();
            }
            remove => HookHandler._afterget_IgnoreInitialZeroValue -= value;
        }

        public static event Delegates.set_IgnoreInitialZeroValue_AfterArgs set_IgnoreInitialZeroValue
        {
            add
            {
                HookHandler._afterset_IgnoreInitialZeroValue += value;
                HookHandler.Hookset_IgnoreInitialZeroValue();
            }
            remove => HookHandler._afterset_IgnoreInitialZeroValue -= value;
        }

        public static event Delegates.get_Sensitivity_AfterArgs get_Sensitivity
        {
            add
            {
                HookHandler._afterget_Sensitivity += value;
                HookHandler.Hookget_Sensitivity();
            }
            remove => HookHandler._afterget_Sensitivity -= value;
        }

        public static event Delegates.set_Sensitivity_AfterArgs set_Sensitivity
        {
            add
            {
                HookHandler._afterset_Sensitivity += value;
                HookHandler.Hookset_Sensitivity();
            }
            remove => HookHandler._afterset_Sensitivity -= value;
        }

        public static event Delegates.get_LowerDeadZone_AfterArgs get_LowerDeadZone
        {
            add
            {
                HookHandler._afterget_LowerDeadZone += value;
                HookHandler.Hookget_LowerDeadZone();
            }
            remove => HookHandler._afterget_LowerDeadZone -= value;
        }

        public static event Delegates.set_LowerDeadZone_AfterArgs set_LowerDeadZone
        {
            add
            {
                HookHandler._afterset_LowerDeadZone += value;
                HookHandler.Hookset_LowerDeadZone();
            }
            remove => HookHandler._afterset_LowerDeadZone -= value;
        }

        public static event Delegates.get_UpperDeadZone_AfterArgs get_UpperDeadZone
        {
            add
            {
                HookHandler._afterget_UpperDeadZone += value;
                HookHandler.Hookget_UpperDeadZone();
            }
            remove => HookHandler._afterget_UpperDeadZone -= value;
        }

        public static event Delegates.set_UpperDeadZone_AfterArgs set_UpperDeadZone
        {
            add
            {
                HookHandler._afterset_UpperDeadZone += value;
                HookHandler.Hookset_UpperDeadZone();
            }
            remove => HookHandler._afterset_UpperDeadZone -= value;
        }

        public static event Delegates.get_Source_AfterArgs get_Source
        {
            add
            {
                HookHandler._afterget_Source += value;
                HookHandler.Hookget_Source();
            }
            remove => HookHandler._afterget_Source -= value;
        }

        public static event Delegates.set_Source_AfterArgs set_Source
        {
            add
            {
                HookHandler._afterset_Source += value;
                HookHandler.Hookset_Source();
            }
            remove => HookHandler._afterset_Source -= value;
        }

        public static event Delegates.get_Target_AfterArgs get_Target
        {
            add
            {
                HookHandler._afterget_Target += value;
                HookHandler.Hookget_Target();
            }
            remove => HookHandler._afterget_Target -= value;
        }

        public static event Delegates.set_Target_AfterArgs set_Target
        {
            add
            {
                HookHandler._afterset_Target += value;
                HookHandler.Hookset_Target();
            }
            remove => HookHandler._afterset_Target -= value;
        }

        public static event Delegates.get_SourceRange_AfterArgs get_SourceRange
        {
            add
            {
                HookHandler._afterget_SourceRange += value;
                HookHandler.Hookget_SourceRange();
            }
            remove => HookHandler._afterget_SourceRange -= value;
        }

        public static event Delegates.set_SourceRange_AfterArgs set_SourceRange
        {
            add
            {
                HookHandler._afterset_SourceRange += value;
                HookHandler.Hookset_SourceRange();
            }
            remove => HookHandler._afterset_SourceRange -= value;
        }

        public static event Delegates.get_TargetRange_AfterArgs get_TargetRange
        {
            add
            {
                HookHandler._afterget_TargetRange += value;
                HookHandler.Hookget_TargetRange();
            }
            remove => HookHandler._afterget_TargetRange -= value;
        }

        public static event Delegates.set_TargetRange_AfterArgs set_TargetRange
        {
            add
            {
                HookHandler._afterset_TargetRange += value;
                HookHandler.Hookset_TargetRange();
            }
            remove => HookHandler._afterset_TargetRange -= value;
        }

        public static event Delegates.ApplyToValue_AfterArgs ApplyToValue
        {
            add
            {
                HookHandler._afterApplyToValue += value;
                HookHandler.HookApplyToValue();
            }
            remove => HookHandler._afterApplyToValue -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Name_WithArgs get_Name
        {
            add => HookEndpointManager.Add<Delegates.get_Name_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Name"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Name_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Name"), value);
        }

        public static event Delegates.set_Name_WithArgs set_Name
        {
            add => HookEndpointManager.Add<Delegates.set_Name_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Name"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Name_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Name"), value);
        }

        public static event Delegates.get_Invert_WithArgs get_Invert
        {
            add => HookEndpointManager.Add<Delegates.get_Invert_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Invert"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Invert_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Invert"), value);
        }

        public static event Delegates.set_Invert_WithArgs set_Invert
        {
            add => HookEndpointManager.Add<Delegates.set_Invert_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Invert"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Invert_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Invert"), value);
        }

        public static event Delegates.get_Scale_WithArgs get_Scale
        {
            add => HookEndpointManager.Add<Delegates.get_Scale_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Scale"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Scale_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Scale"), value);
        }

        public static event Delegates.set_Scale_WithArgs set_Scale
        {
            add => HookEndpointManager.Add<Delegates.set_Scale_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Scale"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Scale_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Scale"), value);
        }

        public static event Delegates.get_Raw_WithArgs get_Raw
        {
            add => HookEndpointManager.Add<Delegates.get_Raw_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Raw"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Raw_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Raw"), value);
        }

        public static event Delegates.set_Raw_WithArgs set_Raw
        {
            add => HookEndpointManager.Add<Delegates.set_Raw_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Raw"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Raw_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Raw"), value);
        }

        public static event Delegates.get_Passive_WithArgs get_Passive
        {
            add => HookEndpointManager.Add<Delegates.get_Passive_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Passive"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Passive_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Passive"), value);
        }

        public static event Delegates.set_Passive_WithArgs set_Passive
        {
            add => HookEndpointManager.Add<Delegates.set_Passive_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Passive"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Passive_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Passive"), value);
        }

        public static event Delegates.get_IgnoreInitialZeroValue_WithArgs get_IgnoreInitialZeroValue
        {
            add => HookEndpointManager.Add<Delegates.get_IgnoreInitialZeroValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_IgnoreInitialZeroValue"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IgnoreInitialZeroValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_IgnoreInitialZeroValue"), value);
        }

        public static event Delegates.set_IgnoreInitialZeroValue_WithArgs set_IgnoreInitialZeroValue
        {
            add => HookEndpointManager.Add<Delegates.set_IgnoreInitialZeroValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_IgnoreInitialZeroValue"), value);
            remove => HookEndpointManager.Remove<Delegates.set_IgnoreInitialZeroValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_IgnoreInitialZeroValue"), value);
        }

        public static event Delegates.get_Sensitivity_WithArgs get_Sensitivity
        {
            add => HookEndpointManager.Add<Delegates.get_Sensitivity_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Sensitivity"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Sensitivity_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Sensitivity"), value);
        }

        public static event Delegates.set_Sensitivity_WithArgs set_Sensitivity
        {
            add => HookEndpointManager.Add<Delegates.set_Sensitivity_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Sensitivity"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Sensitivity_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Sensitivity"), value);
        }

        public static event Delegates.get_LowerDeadZone_WithArgs get_LowerDeadZone
        {
            add => HookEndpointManager.Add<Delegates.get_LowerDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_LowerDeadZone"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LowerDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_LowerDeadZone"), value);
        }

        public static event Delegates.set_LowerDeadZone_WithArgs set_LowerDeadZone
        {
            add => HookEndpointManager.Add<Delegates.set_LowerDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_LowerDeadZone"), value);
            remove => HookEndpointManager.Remove<Delegates.set_LowerDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_LowerDeadZone"), value);
        }

        public static event Delegates.get_UpperDeadZone_WithArgs get_UpperDeadZone
        {
            add => HookEndpointManager.Add<Delegates.get_UpperDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_UpperDeadZone"), value);
            remove => HookEndpointManager.Remove<Delegates.get_UpperDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_UpperDeadZone"), value);
        }

        public static event Delegates.set_UpperDeadZone_WithArgs set_UpperDeadZone
        {
            add => HookEndpointManager.Add<Delegates.set_UpperDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_UpperDeadZone"), value);
            remove => HookEndpointManager.Remove<Delegates.set_UpperDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_UpperDeadZone"), value);
        }

        public static event Delegates.get_Source_WithArgs get_Source
        {
            add => HookEndpointManager.Add<Delegates.get_Source_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Source"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Source_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Source"), value);
        }

        public static event Delegates.set_Source_WithArgs set_Source
        {
            add => HookEndpointManager.Add<Delegates.set_Source_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Source"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Source_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Source"), value);
        }

        public static event Delegates.get_Target_WithArgs get_Target
        {
            add => HookEndpointManager.Add<Delegates.get_Target_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Target"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Target_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_Target"), value);
        }

        public static event Delegates.set_Target_WithArgs set_Target
        {
            add => HookEndpointManager.Add<Delegates.set_Target_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Target"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Target_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_Target"), value);
        }

        public static event Delegates.get_SourceRange_WithArgs get_SourceRange
        {
            add => HookEndpointManager.Add<Delegates.get_SourceRange_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_SourceRange"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SourceRange_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_SourceRange"), value);
        }

        public static event Delegates.set_SourceRange_WithArgs set_SourceRange
        {
            add => HookEndpointManager.Add<Delegates.set_SourceRange_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_SourceRange"), value);
            remove => HookEndpointManager.Remove<Delegates.set_SourceRange_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_SourceRange"), value);
        }

        public static event Delegates.get_TargetRange_WithArgs get_TargetRange
        {
            add => HookEndpointManager.Add<Delegates.get_TargetRange_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_TargetRange"), value);
            remove => HookEndpointManager.Remove<Delegates.get_TargetRange_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "get_TargetRange"), value);
        }

        public static event Delegates.set_TargetRange_WithArgs set_TargetRange
        {
            add => HookEndpointManager.Add<Delegates.set_TargetRange_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_TargetRange"), value);
            remove => HookEndpointManager.Remove<Delegates.set_TargetRange_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "set_TargetRange"), value);
        }

        public static event Delegates.ApplyToValue_WithArgs ApplyToValue
        {
            add => HookEndpointManager.Add<Delegates.ApplyToValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "ApplyToValue"), value);
            remove => HookEndpointManager.Remove<Delegates.ApplyToValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputControlMapping), "ApplyToValue"), value);
        }
    }
}