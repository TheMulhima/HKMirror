using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for PauseMenuButton class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPauseMenuButton
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_cancelAction()
        {
            if (!HookedList.Contains("get_cancelAction"))
            {
                HookedList.Add("get_cancelAction");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PauseMenuButton), "get_cancelAction"), get_cancelAction);
            }
        }

        internal static event Delegates.get_cancelAction_BeforeArgs _beforeget_cancelAction;
        internal static event Delegates.get_cancelAction_NormalArgs _afterget_cancelAction;

        private static CancelAction get_cancelAction(Func<PauseMenuButton, CancelAction> orig, PauseMenuButton self)
        {
            Delegates.Params_get_cancelAction @params = new()
            {
                self = self
            };
            _beforeget_cancelAction?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_cancelAction != null) retVal = _afterget_cancelAction.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_cancelAction()
        {
            if (!HookedList.Contains("set_cancelAction"))
            {
                HookedList.Add("set_cancelAction");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PauseMenuButton), "set_cancelAction"), set_cancelAction);
            }
        }

        internal static event Delegates.set_cancelAction_BeforeArgs _beforeset_cancelAction;
        internal static event Delegates.set_cancelAction_NormalArgs _afterset_cancelAction;

        private static void set_cancelAction(Action<PauseMenuButton, CancelAction> orig, PauseMenuButton self,
            CancelAction value)
        {
            Delegates.Params_set_cancelAction @params = new()
            {
                self = self, value = value
            };
            _beforeset_cancelAction?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_cancelAction != null) _afterset_cancelAction.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PauseMenuButton), "Start"), Start);
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(Action<PauseMenuButton> orig, PauseMenuButton self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookOnSubmit()
        {
            if (!HookedList.Contains("OnSubmit"))
            {
                HookedList.Add("OnSubmit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PauseMenuButton), "OnSubmit"), OnSubmit);
            }
        }

        internal static event Delegates.OnSubmit_BeforeArgs _beforeOnSubmit;
        internal static event Delegates.OnSubmit_NormalArgs _afterOnSubmit;

        private static void OnSubmit(Action<PauseMenuButton, BaseEventData> orig, PauseMenuButton self,
            BaseEventData eventData)
        {
            Delegates.Params_OnSubmit @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnSubmit?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnSubmit != null) _afterOnSubmit.Invoke(@params);
        }

        internal static void HookOnCancel()
        {
            if (!HookedList.Contains("OnCancel"))
            {
                HookedList.Add("OnCancel");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PauseMenuButton), "OnCancel"), OnCancel);
            }
        }

        internal static event Delegates.OnCancel_BeforeArgs _beforeOnCancel;
        internal static event Delegates.OnCancel_NormalArgs _afterOnCancel;

        private static void OnCancel(Action<PauseMenuButton, BaseEventData> orig, PauseMenuButton self,
            BaseEventData eventData)
        {
            Delegates.Params_OnCancel @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnCancel?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnCancel != null) _afterOnCancel.Invoke(@params);
        }

        internal static void HookOnPointerClick()
        {
            if (!HookedList.Contains("OnPointerClick"))
            {
                HookedList.Add("OnPointerClick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PauseMenuButton), "OnPointerClick"), OnPointerClick);
            }
        }

        internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
        internal static event Delegates.OnPointerClick_NormalArgs _afterOnPointerClick;

        private static void OnPointerClick(Action<PauseMenuButton, PointerEventData> orig, PauseMenuButton self,
            PointerEventData eventData)
        {
            Delegates.Params_OnPointerClick @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnPointerClick?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnPointerClick != null) _afterOnPointerClick.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_cancelAction_BeforeArgs(Params_get_cancelAction args);

        public delegate CancelAction get_cancelAction_NormalArgs(Params_get_cancelAction args);

        public delegate void OnCancel_BeforeArgs(Params_OnCancel args);

        public delegate void OnCancel_NormalArgs(Params_OnCancel args);

        public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_NormalArgs(Params_OnPointerClick args);

        public delegate void OnSubmit_BeforeArgs(Params_OnSubmit args);

        public delegate void OnSubmit_NormalArgs(Params_OnSubmit args);

        public delegate void set_cancelAction_BeforeArgs(Params_set_cancelAction args);

        public delegate void set_cancelAction_NormalArgs(Params_set_cancelAction args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_get_cancelAction
        {
            public PauseMenuButton self;
        }

        public sealed class Params_set_cancelAction
        {
            public PauseMenuButton self;
            public CancelAction value;
        }

        public sealed class Params_Start
        {
            public PauseMenuButton self;
        }

        public sealed class Params_OnSubmit
        {
            public BaseEventData eventData;
            public PauseMenuButton self;
        }

        public sealed class Params_OnCancel
        {
            public BaseEventData eventData;
            public PauseMenuButton self;
        }

        public sealed class Params_OnPointerClick
        {
            public PointerEventData eventData;
            public PauseMenuButton self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_cancelAction_BeforeArgs get_cancelAction
        {
            add
            {
                HookHandler._beforeget_cancelAction += value;
                HookHandler.Hookget_cancelAction();
            }
            remove => HookHandler._beforeget_cancelAction -= value;
        }

        public static event Delegates.set_cancelAction_BeforeArgs set_cancelAction
        {
            add
            {
                HookHandler._beforeset_cancelAction += value;
                HookHandler.Hookset_cancelAction();
            }
            remove => HookHandler._beforeset_cancelAction -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnSubmit_BeforeArgs OnSubmit
        {
            add
            {
                HookHandler._beforeOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._beforeOnSubmit -= value;
        }

        public static event Delegates.OnCancel_BeforeArgs OnCancel
        {
            add
            {
                HookHandler._beforeOnCancel += value;
                HookHandler.HookOnCancel();
            }
            remove => HookHandler._beforeOnCancel -= value;
        }

        public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
        {
            add
            {
                HookHandler._beforeOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._beforeOnPointerClick -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_cancelAction_NormalArgs get_cancelAction
        {
            add
            {
                HookHandler._afterget_cancelAction += value;
                HookHandler.Hookget_cancelAction();
            }
            remove => HookHandler._afterget_cancelAction -= value;
        }

        public static event Delegates.set_cancelAction_NormalArgs set_cancelAction
        {
            add
            {
                HookHandler._afterset_cancelAction += value;
                HookHandler.Hookset_cancelAction();
            }
            remove => HookHandler._afterset_cancelAction -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnSubmit_NormalArgs OnSubmit
        {
            add
            {
                HookHandler._afterOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._afterOnSubmit -= value;
        }

        public static event Delegates.OnCancel_NormalArgs OnCancel
        {
            add
            {
                HookHandler._afterOnCancel += value;
                HookHandler.HookOnCancel();
            }
            remove => HookHandler._afterOnCancel -= value;
        }

        public static event Delegates.OnPointerClick_NormalArgs OnPointerClick
        {
            add
            {
                HookHandler._afterOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._afterOnPointerClick -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_cancelAction_NormalArgs get_cancelAction
        {
            add => HookEndpointManager.Add<Delegates.get_cancelAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PauseMenuButton), "get_cancelAction"), value);
            remove => HookEndpointManager.Remove<Delegates.get_cancelAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PauseMenuButton), "get_cancelAction"), value);
        }

        public static event Delegates.set_cancelAction_NormalArgs set_cancelAction
        {
            add => HookEndpointManager.Add<Delegates.set_cancelAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PauseMenuButton), "set_cancelAction"), value);
            remove => HookEndpointManager.Remove<Delegates.set_cancelAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PauseMenuButton), "set_cancelAction"), value);
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add => HookEndpointManager.Add<Delegates.Start_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PauseMenuButton), "Start"), value);
            remove => HookEndpointManager.Remove<Delegates.Start_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PauseMenuButton), "Start"), value);
        }

        public static event Delegates.OnSubmit_NormalArgs OnSubmit
        {
            add => HookEndpointManager.Add<Delegates.OnSubmit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PauseMenuButton), "OnSubmit"), value);
            remove => HookEndpointManager.Remove<Delegates.OnSubmit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PauseMenuButton), "OnSubmit"), value);
        }

        public static event Delegates.OnCancel_NormalArgs OnCancel
        {
            add => HookEndpointManager.Add<Delegates.OnCancel_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PauseMenuButton), "OnCancel"), value);
            remove => HookEndpointManager.Remove<Delegates.OnCancel_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PauseMenuButton), "OnCancel"), value);
        }

        public static event Delegates.OnPointerClick_NormalArgs OnPointerClick
        {
            add => HookEndpointManager.Add<Delegates.OnPointerClick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PauseMenuButton), "OnPointerClick"), value);
            remove => HookEndpointManager.Remove<Delegates.OnPointerClick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PauseMenuButton), "OnPointerClick"), value);
        }
    }
}