using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for PauseMenuButton class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPauseMenuButton
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_cancelAction()
{
if (!HookedList.Contains("get_cancelAction"))
{
HookedList.Add("get_cancelAction");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.PauseMenuButton), "get_cancelAction", true), get_cancelAction);

}
}
internal static event Delegates.get_cancelAction_BeforeArgs _beforeget_cancelAction;
internal static event Delegates.get_cancelAction_AfterArgs _afterget_cancelAction;
private static GlobalEnums.CancelAction get_cancelAction(Func<UnityEngine.UI.PauseMenuButton, GlobalEnums.CancelAction> orig, UnityEngine.UI.PauseMenuButton self)
{
Delegates.Params_get_cancelAction @params = new() 
{
self = self
};
if (_beforeget_cancelAction != null)
{
foreach (Delegates.get_cancelAction_BeforeArgs toInvoke in _beforeget_cancelAction.GetInvocationList())
{
try
{
_beforeget_cancelAction?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_cancelAction != null)
{
foreach (Delegates.get_cancelAction_AfterArgs toInvoke in _afterget_cancelAction.GetInvocationList())
{
try
{
retVal = _afterget_cancelAction.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_cancelAction()
{
if (!HookedList.Contains("set_cancelAction"))
{
HookedList.Add("set_cancelAction");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.PauseMenuButton), "set_cancelAction", true), set_cancelAction);

}
}
internal static event Delegates.set_cancelAction_BeforeArgs _beforeset_cancelAction;
internal static event Delegates.set_cancelAction_AfterArgs _afterset_cancelAction;
private static void set_cancelAction(Action<UnityEngine.UI.PauseMenuButton,  GlobalEnums.CancelAction> orig, UnityEngine.UI.PauseMenuButton self,  GlobalEnums.CancelAction value)
{
Delegates.Params_set_cancelAction @params = new() 
{
self = self
, value = value
};
if (_beforeset_cancelAction != null)
{
foreach (Delegates.set_cancelAction_BeforeArgs toInvoke in _beforeset_cancelAction.GetInvocationList())
{
try
{
_beforeset_cancelAction?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_cancelAction != null)
{
foreach (Delegates.set_cancelAction_AfterArgs toInvoke in _afterset_cancelAction.GetInvocationList())
{
try
{
_afterset_cancelAction.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.PauseMenuButton), "Start", true), Start);

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(Action<UnityEngine.UI.PauseMenuButton> orig, UnityEngine.UI.PauseMenuButton self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnSubmit()
{
if (!HookedList.Contains("OnSubmit"))
{
HookedList.Add("OnSubmit");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.PauseMenuButton), "OnSubmit", true), OnSubmit);

}
}
internal static event Delegates.OnSubmit_BeforeArgs _beforeOnSubmit;
internal static event Delegates.OnSubmit_AfterArgs _afterOnSubmit;
private static void OnSubmit(Action<UnityEngine.UI.PauseMenuButton,  UnityEngine.EventSystems.BaseEventData> orig, UnityEngine.UI.PauseMenuButton self,  UnityEngine.EventSystems.BaseEventData eventData)
{
Delegates.Params_OnSubmit @params = new() 
{
self = self
, eventData = eventData
};
if (_beforeOnSubmit != null)
{
foreach (Delegates.OnSubmit_BeforeArgs toInvoke in _beforeOnSubmit.GetInvocationList())
{
try
{
_beforeOnSubmit?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
eventData = @params.eventData;
orig(self, eventData);
if (_afterOnSubmit != null)
{
foreach (Delegates.OnSubmit_AfterArgs toInvoke in _afterOnSubmit.GetInvocationList())
{
try
{
_afterOnSubmit.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnCancel()
{
if (!HookedList.Contains("OnCancel"))
{
HookedList.Add("OnCancel");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.PauseMenuButton), "OnCancel", true), OnCancel);

}
}
internal static event Delegates.OnCancel_BeforeArgs _beforeOnCancel;
internal static event Delegates.OnCancel_AfterArgs _afterOnCancel;
private static void OnCancel(Action<UnityEngine.UI.PauseMenuButton,  UnityEngine.EventSystems.BaseEventData> orig, UnityEngine.UI.PauseMenuButton self,  UnityEngine.EventSystems.BaseEventData eventData)
{
Delegates.Params_OnCancel @params = new() 
{
self = self
, eventData = eventData
};
if (_beforeOnCancel != null)
{
foreach (Delegates.OnCancel_BeforeArgs toInvoke in _beforeOnCancel.GetInvocationList())
{
try
{
_beforeOnCancel?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
eventData = @params.eventData;
orig(self, eventData);
if (_afterOnCancel != null)
{
foreach (Delegates.OnCancel_AfterArgs toInvoke in _afterOnCancel.GetInvocationList())
{
try
{
_afterOnCancel.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnPointerClick()
{
if (!HookedList.Contains("OnPointerClick"))
{
HookedList.Add("OnPointerClick");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.PauseMenuButton), "OnPointerClick", true), OnPointerClick);

}
}
internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
internal static event Delegates.OnPointerClick_AfterArgs _afterOnPointerClick;
private static void OnPointerClick(Action<UnityEngine.UI.PauseMenuButton,  UnityEngine.EventSystems.PointerEventData> orig, UnityEngine.UI.PauseMenuButton self,  UnityEngine.EventSystems.PointerEventData eventData)
{
Delegates.Params_OnPointerClick @params = new() 
{
self = self
, eventData = eventData
};
if (_beforeOnPointerClick != null)
{
foreach (Delegates.OnPointerClick_BeforeArgs toInvoke in _beforeOnPointerClick.GetInvocationList())
{
try
{
_beforeOnPointerClick?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
eventData = @params.eventData;
orig(self, eventData);
if (_afterOnPointerClick != null)
{
foreach (Delegates.OnPointerClick_AfterArgs toInvoke in _afterOnPointerClick.GetInvocationList())
{
try
{
_afterOnPointerClick.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_cancelAction
{
public UnityEngine.UI.PauseMenuButton self;
}
public delegate void get_cancelAction_BeforeArgs(Params_get_cancelAction args);
public delegate GlobalEnums.CancelAction get_cancelAction_AfterArgs(Params_get_cancelAction args, GlobalEnums.CancelAction ret);
public delegate GlobalEnums.CancelAction get_cancelAction_WithArgs (Func<UnityEngine.UI.PauseMenuButton, GlobalEnums.CancelAction> orig, UnityEngine.UI.PauseMenuButton self);
public sealed class Params_set_cancelAction
{
public UnityEngine.UI.PauseMenuButton self;
public GlobalEnums.CancelAction value;
}
public delegate void set_cancelAction_BeforeArgs(Params_set_cancelAction args);
public delegate void set_cancelAction_AfterArgs(Params_set_cancelAction args);
public delegate void set_cancelAction_WithArgs (Action<UnityEngine.UI.PauseMenuButton,  GlobalEnums.CancelAction> orig, UnityEngine.UI.PauseMenuButton self,  GlobalEnums.CancelAction value);
public sealed class Params_Start
{
public UnityEngine.UI.PauseMenuButton self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<UnityEngine.UI.PauseMenuButton> orig, UnityEngine.UI.PauseMenuButton self);
public sealed class Params_OnSubmit
{
public UnityEngine.UI.PauseMenuButton self;
public UnityEngine.EventSystems.BaseEventData eventData;
}
public delegate void OnSubmit_BeforeArgs(Params_OnSubmit args);
public delegate void OnSubmit_AfterArgs(Params_OnSubmit args);
public delegate void OnSubmit_WithArgs (Action<UnityEngine.UI.PauseMenuButton,  UnityEngine.EventSystems.BaseEventData> orig, UnityEngine.UI.PauseMenuButton self,  UnityEngine.EventSystems.BaseEventData eventData);
public sealed class Params_OnCancel
{
public UnityEngine.UI.PauseMenuButton self;
public UnityEngine.EventSystems.BaseEventData eventData;
}
public delegate void OnCancel_BeforeArgs(Params_OnCancel args);
public delegate void OnCancel_AfterArgs(Params_OnCancel args);
public delegate void OnCancel_WithArgs (Action<UnityEngine.UI.PauseMenuButton,  UnityEngine.EventSystems.BaseEventData> orig, UnityEngine.UI.PauseMenuButton self,  UnityEngine.EventSystems.BaseEventData eventData);
public sealed class Params_OnPointerClick
{
public UnityEngine.UI.PauseMenuButton self;
public UnityEngine.EventSystems.PointerEventData eventData;
}
public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);
public delegate void OnPointerClick_AfterArgs(Params_OnPointerClick args);
public delegate void OnPointerClick_WithArgs (Action<UnityEngine.UI.PauseMenuButton,  UnityEngine.EventSystems.PointerEventData> orig, UnityEngine.UI.PauseMenuButton self,  UnityEngine.EventSystems.PointerEventData eventData);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_cancelAction_BeforeArgs get_cancelAction
{
add
{

HookHandler._beforeget_cancelAction += value;
HookHandler.Hookget_cancelAction();
}
remove => HookHandler._beforeget_cancelAction -= value;
}
public static event Delegates.set_cancelAction_BeforeArgs set_cancelAction
{
add
{

HookHandler._beforeset_cancelAction += value;
HookHandler.Hookset_cancelAction();
}
remove => HookHandler._beforeset_cancelAction -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.OnSubmit_BeforeArgs OnSubmit
{
add
{

HookHandler._beforeOnSubmit += value;
HookHandler.HookOnSubmit();
}
remove => HookHandler._beforeOnSubmit -= value;
}
public static event Delegates.OnCancel_BeforeArgs OnCancel
{
add
{

HookHandler._beforeOnCancel += value;
HookHandler.HookOnCancel();
}
remove => HookHandler._beforeOnCancel -= value;
}
public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
{
add
{

HookHandler._beforeOnPointerClick += value;
HookHandler.HookOnPointerClick();
}
remove => HookHandler._beforeOnPointerClick -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_cancelAction_AfterArgs get_cancelAction
{
add
{

HookHandler._afterget_cancelAction += value;
HookHandler.Hookget_cancelAction();
}
remove => HookHandler._afterget_cancelAction -= value;
}
public static event Delegates.set_cancelAction_AfterArgs set_cancelAction
{
add
{

HookHandler._afterset_cancelAction += value;
HookHandler.Hookset_cancelAction();
}
remove => HookHandler._afterset_cancelAction -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.OnSubmit_AfterArgs OnSubmit
{
add
{

HookHandler._afterOnSubmit += value;
HookHandler.HookOnSubmit();
}
remove => HookHandler._afterOnSubmit -= value;
}
public static event Delegates.OnCancel_AfterArgs OnCancel
{
add
{

HookHandler._afterOnCancel += value;
HookHandler.HookOnCancel();
}
remove => HookHandler._afterOnCancel -= value;
}
public static event Delegates.OnPointerClick_AfterArgs OnPointerClick
{
add
{

HookHandler._afterOnPointerClick += value;
HookHandler.HookOnPointerClick();
}
remove => HookHandler._afterOnPointerClick -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_cancelAction_WithArgs get_cancelAction
{
add => HookEndpointManager.Add<Delegates.get_cancelAction_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.PauseMenuButton), "get_cancelAction", true), value);
remove => HookEndpointManager.Remove<Delegates.get_cancelAction_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.PauseMenuButton), "get_cancelAction", true), value);
}
public static event Delegates.set_cancelAction_WithArgs set_cancelAction
{
add => HookEndpointManager.Add<Delegates.set_cancelAction_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.PauseMenuButton), "set_cancelAction", true), value);
remove => HookEndpointManager.Remove<Delegates.set_cancelAction_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.PauseMenuButton), "set_cancelAction", true), value);
}
public static event Delegates.Start_WithArgs Start
{
add => HookEndpointManager.Add<Delegates.Start_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.PauseMenuButton), "Start", true), value);
remove => HookEndpointManager.Remove<Delegates.Start_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.PauseMenuButton), "Start", true), value);
}
public static event Delegates.OnSubmit_WithArgs OnSubmit
{
add => HookEndpointManager.Add<Delegates.OnSubmit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.PauseMenuButton), "OnSubmit", true), value);
remove => HookEndpointManager.Remove<Delegates.OnSubmit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.PauseMenuButton), "OnSubmit", true), value);
}
public static event Delegates.OnCancel_WithArgs OnCancel
{
add => HookEndpointManager.Add<Delegates.OnCancel_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.PauseMenuButton), "OnCancel", true), value);
remove => HookEndpointManager.Remove<Delegates.OnCancel_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.PauseMenuButton), "OnCancel", true), value);
}
public static event Delegates.OnPointerClick_WithArgs OnPointerClick
{
add => HookEndpointManager.Add<Delegates.OnPointerClick_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.PauseMenuButton), "OnPointerClick", true), value);
remove => HookEndpointManager.Remove<Delegates.OnPointerClick_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.PauseMenuButton), "OnPointerClick", true), value);
}
}

}
