using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for SaveSlotButton class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSaveSlotButton
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_SaveSlotIndex()
        {
            if (!HookedList.Contains("get_SaveSlotIndex"))
            {
                HookedList.Add("get_SaveSlotIndex");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "get_SaveSlotIndex"),
                    get_SaveSlotIndex);
            }
        }

        internal static event Delegates.get_SaveSlotIndex_BeforeArgs _beforeget_SaveSlotIndex;
        internal static event Delegates.get_SaveSlotIndex_NormalArgs _afterget_SaveSlotIndex;

        private static int get_SaveSlotIndex(Func<SaveSlotButton, int> orig, SaveSlotButton self)
        {
            Delegates.Params_get_SaveSlotIndex @params = new()
            {
                self = self
            };
            _beforeget_SaveSlotIndex?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SaveSlotIndex != null) retVal = _afterget_SaveSlotIndex.Invoke(@params);
            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "Awake"), Awake);
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(Action<SaveSlotButton> orig, SaveSlotButton self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "OnEnable"), OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(Action<SaveSlotButton> orig, SaveSlotButton self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "Start"), Start);
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(Action<SaveSlotButton> orig, SaveSlotButton self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookPrepare()
        {
            if (!HookedList.Contains("Prepare"))
            {
                HookedList.Add("Prepare");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "Prepare"), Prepare);
            }
        }

        internal static event Delegates.Prepare_BeforeArgs _beforePrepare;
        internal static event Delegates.Prepare_NormalArgs _afterPrepare;

        private static void Prepare(Action<SaveSlotButton, GameManager, bool> orig, SaveSlotButton self,
            GameManager gameManager, bool isReload)
        {
            Delegates.Params_Prepare @params = new()
            {
                self = self, gameManager = gameManager, isReload = isReload
            };
            _beforePrepare?.Invoke(@params);
            self = @params.self;
            gameManager = @params.gameManager;
            isReload = @params.isReload;
            orig(self, gameManager, isReload);
            if (_afterPrepare != null) _afterPrepare.Invoke(@params);
        }

        internal static void HookClearCache()
        {
            if (!HookedList.Contains("ClearCache"))
            {
                HookedList.Add("ClearCache");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "ClearCache"), ClearCache);
            }
        }

        internal static event Delegates.ClearCache_BeforeArgs _beforeClearCache;
        internal static event Delegates.ClearCache_NormalArgs _afterClearCache;

        private static void ClearCache(Action<SaveSlotButton> orig, SaveSlotButton self)
        {
            Delegates.Params_ClearCache @params = new()
            {
                self = self
            };
            _beforeClearCache?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClearCache != null) _afterClearCache.Invoke(@params);
        }

        internal static void HookOnSubmit()
        {
            if (!HookedList.Contains("OnSubmit"))
            {
                HookedList.Add("OnSubmit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "OnSubmit"), OnSubmit);
            }
        }

        internal static event Delegates.OnSubmit_BeforeArgs _beforeOnSubmit;
        internal static event Delegates.OnSubmit_NormalArgs _afterOnSubmit;

        private static void OnSubmit(Action<SaveSlotButton, BaseEventData> orig, SaveSlotButton self,
            BaseEventData eventData)
        {
            Delegates.Params_OnSubmit @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnSubmit?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnSubmit != null) _afterOnSubmit.Invoke(@params);
        }

        internal static void HookReloadCorrupted()
        {
            if (!HookedList.Contains("ReloadCorrupted"))
            {
                HookedList.Add("ReloadCorrupted");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "ReloadCorrupted"), ReloadCorrupted);
            }
        }

        internal static event Delegates.ReloadCorrupted_BeforeArgs _beforeReloadCorrupted;

        private static IEnumerator ReloadCorrupted(Func<SaveSlotButton, IEnumerator> orig, SaveSlotButton self)
        {
            Delegates.Params_ReloadCorrupted @params = new()
            {
                self = self
            };
            _beforeReloadCorrupted?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookOnPointerClick()
        {
            if (!HookedList.Contains("OnPointerClick"))
            {
                HookedList.Add("OnPointerClick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "OnPointerClick"), OnPointerClick);
            }
        }

        internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
        internal static event Delegates.OnPointerClick_NormalArgs _afterOnPointerClick;

        private static void OnPointerClick(Action<SaveSlotButton, PointerEventData> orig, SaveSlotButton self,
            PointerEventData eventData)
        {
            Delegates.Params_OnPointerClick @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnPointerClick?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnPointerClick != null) _afterOnPointerClick.Invoke(@params);
        }

        internal static void HookOnSelect()
        {
            if (!HookedList.Contains("OnSelect"))
            {
                HookedList.Add("OnSelect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "OnSelect"), OnSelect);
            }
        }

        internal static event Delegates.OnSelect_BeforeArgs _beforeOnSelect;
        internal static event Delegates.OnSelect_NormalArgs _afterOnSelect;

        private static void OnSelect(Action<SaveSlotButton, BaseEventData> orig, SaveSlotButton self,
            BaseEventData eventData)
        {
            Delegates.Params_OnSelect @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnSelect?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnSelect != null) _afterOnSelect.Invoke(@params);
        }

        internal static void HookOnDeselect()
        {
            if (!HookedList.Contains("OnDeselect"))
            {
                HookedList.Add("OnDeselect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "OnDeselect"), OnDeselect);
            }
        }

        internal static event Delegates.OnDeselect_BeforeArgs _beforeOnDeselect;
        internal static event Delegates.OnDeselect_NormalArgs _afterOnDeselect;

        private static void OnDeselect(Action<SaveSlotButton, BaseEventData> orig, SaveSlotButton self,
            BaseEventData eventData)
        {
            Delegates.Params_OnDeselect @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnDeselect?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnDeselect != null) _afterOnDeselect.Invoke(@params);
        }

        internal static void HookShowRelevantModeForSaveFileState()
        {
            if (!HookedList.Contains("ShowRelevantModeForSaveFileState"))
            {
                HookedList.Add("ShowRelevantModeForSaveFileState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "ShowRelevantModeForSaveFileState"),
                    ShowRelevantModeForSaveFileState);
            }
        }

        internal static event Delegates.ShowRelevantModeForSaveFileState_BeforeArgs
            _beforeShowRelevantModeForSaveFileState;

        internal static event Delegates.ShowRelevantModeForSaveFileState_NormalArgs
            _afterShowRelevantModeForSaveFileState;

        private static void ShowRelevantModeForSaveFileState(Action<SaveSlotButton> orig, SaveSlotButton self)
        {
            Delegates.Params_ShowRelevantModeForSaveFileState @params = new()
            {
                self = self
            };
            _beforeShowRelevantModeForSaveFileState?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterShowRelevantModeForSaveFileState != null) _afterShowRelevantModeForSaveFileState.Invoke(@params);
        }

        internal static void HookHideSaveSlot()
        {
            if (!HookedList.Contains("HideSaveSlot"))
            {
                HookedList.Add("HideSaveSlot");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "HideSaveSlot"), HideSaveSlot);
            }
        }

        internal static event Delegates.HideSaveSlot_BeforeArgs _beforeHideSaveSlot;
        internal static event Delegates.HideSaveSlot_NormalArgs _afterHideSaveSlot;

        private static void HideSaveSlot(Action<SaveSlotButton> orig, SaveSlotButton self)
        {
            Delegates.Params_HideSaveSlot @params = new()
            {
                self = self
            };
            _beforeHideSaveSlot?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterHideSaveSlot != null) _afterHideSaveSlot.Invoke(@params);
        }

        internal static void HookClearSavePrompt()
        {
            if (!HookedList.Contains("ClearSavePrompt"))
            {
                HookedList.Add("ClearSavePrompt");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "ClearSavePrompt"), ClearSavePrompt);
            }
        }

        internal static event Delegates.ClearSavePrompt_BeforeArgs _beforeClearSavePrompt;
        internal static event Delegates.ClearSavePrompt_NormalArgs _afterClearSavePrompt;

        private static void ClearSavePrompt(Action<SaveSlotButton> orig, SaveSlotButton self)
        {
            Delegates.Params_ClearSavePrompt @params = new()
            {
                self = self
            };
            _beforeClearSavePrompt?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClearSavePrompt != null) _afterClearSavePrompt.Invoke(@params);
        }

        internal static void HookCancelClearSave()
        {
            if (!HookedList.Contains("CancelClearSave"))
            {
                HookedList.Add("CancelClearSave");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "CancelClearSave"), CancelClearSave);
            }
        }

        internal static event Delegates.CancelClearSave_BeforeArgs _beforeCancelClearSave;
        internal static event Delegates.CancelClearSave_NormalArgs _afterCancelClearSave;

        private static void CancelClearSave(Action<SaveSlotButton> orig, SaveSlotButton self)
        {
            Delegates.Params_CancelClearSave @params = new()
            {
                self = self
            };
            _beforeCancelClearSave?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCancelClearSave != null) _afterCancelClearSave.Invoke(@params);
        }

        internal static void HookClearSaveFile()
        {
            if (!HookedList.Contains("ClearSaveFile"))
            {
                HookedList.Add("ClearSaveFile");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "ClearSaveFile"), ClearSaveFile);
            }
        }

        internal static event Delegates.ClearSaveFile_BeforeArgs _beforeClearSaveFile;
        internal static event Delegates.ClearSaveFile_NormalArgs _afterClearSaveFile;

        private static void ClearSaveFile(Action<SaveSlotButton> orig, SaveSlotButton self)
        {
            Delegates.Params_ClearSaveFile @params = new()
            {
                self = self
            };
            _beforeClearSaveFile?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClearSaveFile != null) _afterClearSaveFile.Invoke(@params);
        }

        internal static void HookFadeInCanvasGroupAfterDelay()
        {
            if (!HookedList.Contains("FadeInCanvasGroupAfterDelay"))
            {
                HookedList.Add("FadeInCanvasGroupAfterDelay");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "FadeInCanvasGroupAfterDelay"),
                    FadeInCanvasGroupAfterDelay);
            }
        }

        internal static event Delegates.FadeInCanvasGroupAfterDelay_BeforeArgs _beforeFadeInCanvasGroupAfterDelay;

        private static IEnumerator FadeInCanvasGroupAfterDelay(
            Func<SaveSlotButton, float, CanvasGroup, IEnumerator> orig, SaveSlotButton self, float delay,
            CanvasGroup cg)
        {
            Delegates.Params_FadeInCanvasGroupAfterDelay @params = new()
            {
                self = self, delay = delay, cg = cg
            };
            _beforeFadeInCanvasGroupAfterDelay?.Invoke(@params);
            self = @params.self;
            delay = @params.delay;
            cg = @params.cg;
            return orig(self, delay, cg);
        }

        internal static void HookPresentSaveSlot()
        {
            if (!HookedList.Contains("PresentSaveSlot"))
            {
                HookedList.Add("PresentSaveSlot");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "PresentSaveSlot"), PresentSaveSlot);
            }
        }

        internal static event Delegates.PresentSaveSlot_BeforeArgs _beforePresentSaveSlot;
        internal static event Delegates.PresentSaveSlot_NormalArgs _afterPresentSaveSlot;

        private static void PresentSaveSlot(Action<SaveSlotButton, SaveStats> orig, SaveSlotButton self,
            SaveStats saveStats)
        {
            Delegates.Params_PresentSaveSlot @params = new()
            {
                self = self, saveStats = saveStats
            };
            _beforePresentSaveSlot?.Invoke(@params);
            self = @params.self;
            saveStats = @params.saveStats;
            orig(self, saveStats);
            if (_afterPresentSaveSlot != null) _afterPresentSaveSlot.Invoke(@params);
        }

        internal static void HookSetupNavs()
        {
            if (!HookedList.Contains("SetupNavs"))
            {
                HookedList.Add("SetupNavs");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "SetupNavs"), SetupNavs);
            }
        }

        internal static event Delegates.SetupNavs_BeforeArgs _beforeSetupNavs;
        internal static event Delegates.SetupNavs_NormalArgs _afterSetupNavs;

        private static void SetupNavs(Action<SaveSlotButton> orig, SaveSlotButton self)
        {
            Delegates.Params_SetupNavs @params = new()
            {
                self = self
            };
            _beforeSetupNavs?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetupNavs != null) _afterSetupNavs.Invoke(@params);
        }

        internal static void HookValidateDeselect()
        {
            if (!HookedList.Contains("ValidateDeselect"))
            {
                HookedList.Add("ValidateDeselect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "ValidateDeselect"), ValidateDeselect);
            }
        }

        internal static event Delegates.ValidateDeselect_BeforeArgs _beforeValidateDeselect;

        private static IEnumerator ValidateDeselect(Func<SaveSlotButton, IEnumerator> orig, SaveSlotButton self)
        {
            Delegates.Params_ValidateDeselect @params = new()
            {
                self = self
            };
            _beforeValidateDeselect?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void CancelClearSave_BeforeArgs(Params_CancelClearSave args);

        public delegate void CancelClearSave_NormalArgs(Params_CancelClearSave args);

        public delegate void ClearCache_BeforeArgs(Params_ClearCache args);

        public delegate void ClearCache_NormalArgs(Params_ClearCache args);

        public delegate void ClearSaveFile_BeforeArgs(Params_ClearSaveFile args);

        public delegate void ClearSaveFile_NormalArgs(Params_ClearSaveFile args);

        public delegate void ClearSavePrompt_BeforeArgs(Params_ClearSavePrompt args);

        public delegate void ClearSavePrompt_NormalArgs(Params_ClearSavePrompt args);

        public delegate void FadeInCanvasGroupAfterDelay_BeforeArgs(Params_FadeInCanvasGroupAfterDelay args);

        public delegate IEnumerator FadeInCanvasGroupAfterDelay_NormalArgs(Params_FadeInCanvasGroupAfterDelay args);

        public delegate void get_SaveSlotIndex_BeforeArgs(Params_get_SaveSlotIndex args);

        public delegate int get_SaveSlotIndex_NormalArgs(Params_get_SaveSlotIndex args);

        public delegate void HideSaveSlot_BeforeArgs(Params_HideSaveSlot args);

        public delegate void HideSaveSlot_NormalArgs(Params_HideSaveSlot args);

        public delegate void OnDeselect_BeforeArgs(Params_OnDeselect args);

        public delegate void OnDeselect_NormalArgs(Params_OnDeselect args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_NormalArgs(Params_OnPointerClick args);

        public delegate void OnSelect_BeforeArgs(Params_OnSelect args);

        public delegate void OnSelect_NormalArgs(Params_OnSelect args);

        public delegate void OnSubmit_BeforeArgs(Params_OnSubmit args);

        public delegate void OnSubmit_NormalArgs(Params_OnSubmit args);

        public delegate void Prepare_BeforeArgs(Params_Prepare args);

        public delegate void Prepare_NormalArgs(Params_Prepare args);

        public delegate void PresentSaveSlot_BeforeArgs(Params_PresentSaveSlot args);

        public delegate void PresentSaveSlot_NormalArgs(Params_PresentSaveSlot args);

        public delegate void ReloadCorrupted_BeforeArgs(Params_ReloadCorrupted args);

        public delegate IEnumerator ReloadCorrupted_NormalArgs(Params_ReloadCorrupted args);

        public delegate void SetupNavs_BeforeArgs(Params_SetupNavs args);

        public delegate void SetupNavs_NormalArgs(Params_SetupNavs args);

        public delegate void ShowRelevantModeForSaveFileState_BeforeArgs(Params_ShowRelevantModeForSaveFileState args);

        public delegate void ShowRelevantModeForSaveFileState_NormalArgs(Params_ShowRelevantModeForSaveFileState args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void ValidateDeselect_BeforeArgs(Params_ValidateDeselect args);

        public delegate IEnumerator ValidateDeselect_NormalArgs(Params_ValidateDeselect args);

        public sealed class Params_get_SaveSlotIndex
        {
            public SaveSlotButton self;
        }

        public sealed class Params_Awake
        {
            public SaveSlotButton self;
        }

        public sealed class Params_OnEnable
        {
            public SaveSlotButton self;
        }

        public sealed class Params_Start
        {
            public SaveSlotButton self;
        }

        public sealed class Params_Prepare
        {
            public GameManager gameManager;
            public bool isReload;
            public SaveSlotButton self;
        }

        public sealed class Params_ClearCache
        {
            public SaveSlotButton self;
        }

        public sealed class Params_OnSubmit
        {
            public BaseEventData eventData;
            public SaveSlotButton self;
        }

        public sealed class Params_ReloadCorrupted
        {
            public SaveSlotButton self;
        }

        public sealed class Params_OnPointerClick
        {
            public PointerEventData eventData;
            public SaveSlotButton self;
        }

        public sealed class Params_OnSelect
        {
            public BaseEventData eventData;
            public SaveSlotButton self;
        }

        public sealed class Params_OnDeselect
        {
            public BaseEventData eventData;
            public SaveSlotButton self;
        }

        public sealed class Params_ShowRelevantModeForSaveFileState
        {
            public SaveSlotButton self;
        }

        public sealed class Params_HideSaveSlot
        {
            public SaveSlotButton self;
        }

        public sealed class Params_ClearSavePrompt
        {
            public SaveSlotButton self;
        }

        public sealed class Params_CancelClearSave
        {
            public SaveSlotButton self;
        }

        public sealed class Params_ClearSaveFile
        {
            public SaveSlotButton self;
        }

        public sealed class Params_FadeInCanvasGroupAfterDelay
        {
            public CanvasGroup cg;
            public float delay;
            public SaveSlotButton self;
        }

        public sealed class Params_PresentSaveSlot
        {
            public SaveStats saveStats;
            public SaveSlotButton self;
        }

        public sealed class Params_SetupNavs
        {
            public SaveSlotButton self;
        }

        public sealed class Params_ValidateDeselect
        {
            public SaveSlotButton self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_SaveSlotIndex_BeforeArgs get_SaveSlotIndex
        {
            add
            {
                HookHandler._beforeget_SaveSlotIndex += value;
                HookHandler.Hookget_SaveSlotIndex();
            }
            remove => HookHandler._beforeget_SaveSlotIndex -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Prepare_BeforeArgs Prepare
        {
            add
            {
                HookHandler._beforePrepare += value;
                HookHandler.HookPrepare();
            }
            remove => HookHandler._beforePrepare -= value;
        }

        public static event Delegates.ClearCache_BeforeArgs ClearCache
        {
            add
            {
                HookHandler._beforeClearCache += value;
                HookHandler.HookClearCache();
            }
            remove => HookHandler._beforeClearCache -= value;
        }

        public static event Delegates.OnSubmit_BeforeArgs OnSubmit
        {
            add
            {
                HookHandler._beforeOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._beforeOnSubmit -= value;
        }

        public static event Delegates.ReloadCorrupted_BeforeArgs ReloadCorrupted
        {
            add
            {
                HookHandler._beforeReloadCorrupted += value;
                HookHandler.HookReloadCorrupted();
            }
            remove => HookHandler._beforeReloadCorrupted -= value;
        }

        public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
        {
            add
            {
                HookHandler._beforeOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._beforeOnPointerClick -= value;
        }

        public static event Delegates.OnSelect_BeforeArgs OnSelect
        {
            add
            {
                HookHandler._beforeOnSelect += value;
                HookHandler.HookOnSelect();
            }
            remove => HookHandler._beforeOnSelect -= value;
        }

        public static event Delegates.OnDeselect_BeforeArgs OnDeselect
        {
            add
            {
                HookHandler._beforeOnDeselect += value;
                HookHandler.HookOnDeselect();
            }
            remove => HookHandler._beforeOnDeselect -= value;
        }

        public static event Delegates.ShowRelevantModeForSaveFileState_BeforeArgs ShowRelevantModeForSaveFileState
        {
            add
            {
                HookHandler._beforeShowRelevantModeForSaveFileState += value;
                HookHandler.HookShowRelevantModeForSaveFileState();
            }
            remove => HookHandler._beforeShowRelevantModeForSaveFileState -= value;
        }

        public static event Delegates.HideSaveSlot_BeforeArgs HideSaveSlot
        {
            add
            {
                HookHandler._beforeHideSaveSlot += value;
                HookHandler.HookHideSaveSlot();
            }
            remove => HookHandler._beforeHideSaveSlot -= value;
        }

        public static event Delegates.ClearSavePrompt_BeforeArgs ClearSavePrompt
        {
            add
            {
                HookHandler._beforeClearSavePrompt += value;
                HookHandler.HookClearSavePrompt();
            }
            remove => HookHandler._beforeClearSavePrompt -= value;
        }

        public static event Delegates.CancelClearSave_BeforeArgs CancelClearSave
        {
            add
            {
                HookHandler._beforeCancelClearSave += value;
                HookHandler.HookCancelClearSave();
            }
            remove => HookHandler._beforeCancelClearSave -= value;
        }

        public static event Delegates.ClearSaveFile_BeforeArgs ClearSaveFile
        {
            add
            {
                HookHandler._beforeClearSaveFile += value;
                HookHandler.HookClearSaveFile();
            }
            remove => HookHandler._beforeClearSaveFile -= value;
        }

        public static event Delegates.FadeInCanvasGroupAfterDelay_BeforeArgs FadeInCanvasGroupAfterDelay
        {
            add
            {
                HookHandler._beforeFadeInCanvasGroupAfterDelay += value;
                HookHandler.HookFadeInCanvasGroupAfterDelay();
            }
            remove => HookHandler._beforeFadeInCanvasGroupAfterDelay -= value;
        }

        public static event Delegates.PresentSaveSlot_BeforeArgs PresentSaveSlot
        {
            add
            {
                HookHandler._beforePresentSaveSlot += value;
                HookHandler.HookPresentSaveSlot();
            }
            remove => HookHandler._beforePresentSaveSlot -= value;
        }

        public static event Delegates.SetupNavs_BeforeArgs SetupNavs
        {
            add
            {
                HookHandler._beforeSetupNavs += value;
                HookHandler.HookSetupNavs();
            }
            remove => HookHandler._beforeSetupNavs -= value;
        }

        public static event Delegates.ValidateDeselect_BeforeArgs ValidateDeselect
        {
            add
            {
                HookHandler._beforeValidateDeselect += value;
                HookHandler.HookValidateDeselect();
            }
            remove => HookHandler._beforeValidateDeselect -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_SaveSlotIndex_NormalArgs get_SaveSlotIndex
        {
            add
            {
                HookHandler._afterget_SaveSlotIndex += value;
                HookHandler.Hookget_SaveSlotIndex();
            }
            remove => HookHandler._afterget_SaveSlotIndex -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Prepare_NormalArgs Prepare
        {
            add
            {
                HookHandler._afterPrepare += value;
                HookHandler.HookPrepare();
            }
            remove => HookHandler._afterPrepare -= value;
        }

        public static event Delegates.ClearCache_NormalArgs ClearCache
        {
            add
            {
                HookHandler._afterClearCache += value;
                HookHandler.HookClearCache();
            }
            remove => HookHandler._afterClearCache -= value;
        }

        public static event Delegates.OnSubmit_NormalArgs OnSubmit
        {
            add
            {
                HookHandler._afterOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._afterOnSubmit -= value;
        }

        public static event Delegates.OnPointerClick_NormalArgs OnPointerClick
        {
            add
            {
                HookHandler._afterOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._afterOnPointerClick -= value;
        }

        public static event Delegates.OnSelect_NormalArgs OnSelect
        {
            add
            {
                HookHandler._afterOnSelect += value;
                HookHandler.HookOnSelect();
            }
            remove => HookHandler._afterOnSelect -= value;
        }

        public static event Delegates.OnDeselect_NormalArgs OnDeselect
        {
            add
            {
                HookHandler._afterOnDeselect += value;
                HookHandler.HookOnDeselect();
            }
            remove => HookHandler._afterOnDeselect -= value;
        }

        public static event Delegates.ShowRelevantModeForSaveFileState_NormalArgs ShowRelevantModeForSaveFileState
        {
            add
            {
                HookHandler._afterShowRelevantModeForSaveFileState += value;
                HookHandler.HookShowRelevantModeForSaveFileState();
            }
            remove => HookHandler._afterShowRelevantModeForSaveFileState -= value;
        }

        public static event Delegates.HideSaveSlot_NormalArgs HideSaveSlot
        {
            add
            {
                HookHandler._afterHideSaveSlot += value;
                HookHandler.HookHideSaveSlot();
            }
            remove => HookHandler._afterHideSaveSlot -= value;
        }

        public static event Delegates.ClearSavePrompt_NormalArgs ClearSavePrompt
        {
            add
            {
                HookHandler._afterClearSavePrompt += value;
                HookHandler.HookClearSavePrompt();
            }
            remove => HookHandler._afterClearSavePrompt -= value;
        }

        public static event Delegates.CancelClearSave_NormalArgs CancelClearSave
        {
            add
            {
                HookHandler._afterCancelClearSave += value;
                HookHandler.HookCancelClearSave();
            }
            remove => HookHandler._afterCancelClearSave -= value;
        }

        public static event Delegates.ClearSaveFile_NormalArgs ClearSaveFile
        {
            add
            {
                HookHandler._afterClearSaveFile += value;
                HookHandler.HookClearSaveFile();
            }
            remove => HookHandler._afterClearSaveFile -= value;
        }

        public static event Delegates.PresentSaveSlot_NormalArgs PresentSaveSlot
        {
            add
            {
                HookHandler._afterPresentSaveSlot += value;
                HookHandler.HookPresentSaveSlot();
            }
            remove => HookHandler._afterPresentSaveSlot -= value;
        }

        public static event Delegates.SetupNavs_NormalArgs SetupNavs
        {
            add
            {
                HookHandler._afterSetupNavs += value;
                HookHandler.HookSetupNavs();
            }
            remove => HookHandler._afterSetupNavs -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_SaveSlotIndex_NormalArgs get_SaveSlotIndex
        {
            add => HookEndpointManager.Add<Delegates.get_SaveSlotIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "get_SaveSlotIndex"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SaveSlotIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "get_SaveSlotIndex"), value);
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add => HookEndpointManager.Add<Delegates.Awake_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "Awake"), value);
            remove => HookEndpointManager.Remove<Delegates.Awake_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "Awake"), value);
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "OnEnable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "OnEnable"), value);
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add => HookEndpointManager.Add<Delegates.Start_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "Start"), value);
            remove => HookEndpointManager.Remove<Delegates.Start_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "Start"), value);
        }

        public static event Delegates.Prepare_NormalArgs Prepare
        {
            add => HookEndpointManager.Add<Delegates.Prepare_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "Prepare"), value);
            remove => HookEndpointManager.Remove<Delegates.Prepare_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "Prepare"), value);
        }

        public static event Delegates.ClearCache_NormalArgs ClearCache
        {
            add => HookEndpointManager.Add<Delegates.ClearCache_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "ClearCache"), value);
            remove => HookEndpointManager.Remove<Delegates.ClearCache_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "ClearCache"), value);
        }

        public static event Delegates.OnSubmit_NormalArgs OnSubmit
        {
            add => HookEndpointManager.Add<Delegates.OnSubmit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "OnSubmit"), value);
            remove => HookEndpointManager.Remove<Delegates.OnSubmit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "OnSubmit"), value);
        }

        public static event Delegates.ReloadCorrupted_NormalArgs ReloadCorrupted
        {
            add => HookEndpointManager.Add<Delegates.ReloadCorrupted_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "ReloadCorrupted"), value);
            remove => HookEndpointManager.Remove<Delegates.ReloadCorrupted_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "ReloadCorrupted"), value);
        }

        public static event Delegates.OnPointerClick_NormalArgs OnPointerClick
        {
            add => HookEndpointManager.Add<Delegates.OnPointerClick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "OnPointerClick"), value);
            remove => HookEndpointManager.Remove<Delegates.OnPointerClick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "OnPointerClick"), value);
        }

        public static event Delegates.OnSelect_NormalArgs OnSelect
        {
            add => HookEndpointManager.Add<Delegates.OnSelect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "OnSelect"), value);
            remove => HookEndpointManager.Remove<Delegates.OnSelect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "OnSelect"), value);
        }

        public static event Delegates.OnDeselect_NormalArgs OnDeselect
        {
            add => HookEndpointManager.Add<Delegates.OnDeselect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "OnDeselect"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDeselect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "OnDeselect"), value);
        }

        public static event Delegates.ShowRelevantModeForSaveFileState_NormalArgs ShowRelevantModeForSaveFileState
        {
            add => HookEndpointManager.Add<Delegates.ShowRelevantModeForSaveFileState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "ShowRelevantModeForSaveFileState"), value);
            remove => HookEndpointManager.Remove<Delegates.ShowRelevantModeForSaveFileState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "ShowRelevantModeForSaveFileState"), value);
        }

        public static event Delegates.HideSaveSlot_NormalArgs HideSaveSlot
        {
            add => HookEndpointManager.Add<Delegates.HideSaveSlot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "HideSaveSlot"), value);
            remove => HookEndpointManager.Remove<Delegates.HideSaveSlot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "HideSaveSlot"), value);
        }

        public static event Delegates.ClearSavePrompt_NormalArgs ClearSavePrompt
        {
            add => HookEndpointManager.Add<Delegates.ClearSavePrompt_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "ClearSavePrompt"), value);
            remove => HookEndpointManager.Remove<Delegates.ClearSavePrompt_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "ClearSavePrompt"), value);
        }

        public static event Delegates.CancelClearSave_NormalArgs CancelClearSave
        {
            add => HookEndpointManager.Add<Delegates.CancelClearSave_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "CancelClearSave"), value);
            remove => HookEndpointManager.Remove<Delegates.CancelClearSave_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "CancelClearSave"), value);
        }

        public static event Delegates.ClearSaveFile_NormalArgs ClearSaveFile
        {
            add => HookEndpointManager.Add<Delegates.ClearSaveFile_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "ClearSaveFile"), value);
            remove => HookEndpointManager.Remove<Delegates.ClearSaveFile_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "ClearSaveFile"), value);
        }

        public static event Delegates.FadeInCanvasGroupAfterDelay_NormalArgs FadeInCanvasGroupAfterDelay
        {
            add => HookEndpointManager.Add<Delegates.FadeInCanvasGroupAfterDelay_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "FadeInCanvasGroupAfterDelay"), value);
            remove => HookEndpointManager.Remove<Delegates.FadeInCanvasGroupAfterDelay_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "FadeInCanvasGroupAfterDelay"), value);
        }

        public static event Delegates.PresentSaveSlot_NormalArgs PresentSaveSlot
        {
            add => HookEndpointManager.Add<Delegates.PresentSaveSlot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "PresentSaveSlot"), value);
            remove => HookEndpointManager.Remove<Delegates.PresentSaveSlot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "PresentSaveSlot"), value);
        }

        public static event Delegates.SetupNavs_NormalArgs SetupNavs
        {
            add => HookEndpointManager.Add<Delegates.SetupNavs_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "SetupNavs"), value);
            remove => HookEndpointManager.Remove<Delegates.SetupNavs_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "SetupNavs"), value);
        }

        public static event Delegates.ValidateDeselect_NormalArgs ValidateDeselect
        {
            add => HookEndpointManager.Add<Delegates.ValidateDeselect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "ValidateDeselect"), value);
            remove => HookEndpointManager.Remove<Delegates.ValidateDeselect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SaveSlotButton), "ValidateDeselect"), value);
        }
    }
}