using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for SaveSlotButton class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSaveSlotButton
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_SaveSlotIndex()
        {
            if (!HookedList.Contains("get_SaveSlotIndex"))
            {
                HookedList.Add("get_SaveSlotIndex");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "get_SaveSlotIndex", true),
                    get_SaveSlotIndex);
            }
        }

        internal static event Delegates.get_SaveSlotIndex_BeforeArgs _beforeget_SaveSlotIndex;
        internal static event Delegates.get_SaveSlotIndex_AfterArgs _afterget_SaveSlotIndex;

        private static int get_SaveSlotIndex(Func<UnityEngine.UI.SaveSlotButton, int> orig,
            UnityEngine.UI.SaveSlotButton self)
        {
            Delegates.Params_get_SaveSlotIndex @params = new()
            {
                self = self
            };
            if (_beforeget_SaveSlotIndex != null)
            {
                foreach (Delegates.get_SaveSlotIndex_BeforeArgs toInvoke in
                         _beforeget_SaveSlotIndex.GetInvocationList())
                {
                    try
                    {
                        _beforeget_SaveSlotIndex?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SaveSlotIndex != null)
            {
                foreach (Delegates.get_SaveSlotIndex_AfterArgs toInvoke in _afterget_SaveSlotIndex.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_SaveSlotIndex.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "Awake", true), Awake);
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(Action<UnityEngine.UI.SaveSlotButton> orig, UnityEngine.UI.SaveSlotButton self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
            {
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                {
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
            {
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                {
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "OnEnable", true),
                    OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(Action<UnityEngine.UI.SaveSlotButton> orig, UnityEngine.UI.SaveSlotButton self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
            {
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
            {
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "Start", true), Start);
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(Action<UnityEngine.UI.SaveSlotButton> orig, UnityEngine.UI.SaveSlotButton self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookPrepare()
        {
            if (!HookedList.Contains("Prepare"))
            {
                HookedList.Add("Prepare");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "Prepare", true),
                    Prepare);
            }
        }

        internal static event Delegates.Prepare_BeforeArgs _beforePrepare;
        internal static event Delegates.Prepare_AfterArgs _afterPrepare;

        private static void Prepare(Action<UnityEngine.UI.SaveSlotButton, GameManager, bool> orig,
            UnityEngine.UI.SaveSlotButton self, GameManager gameManager, bool isReload)
        {
            Delegates.Params_Prepare @params = new()
            {
                self = self, gameManager = gameManager, isReload = isReload
            };
            if (_beforePrepare != null)
            {
                foreach (Delegates.Prepare_BeforeArgs toInvoke in _beforePrepare.GetInvocationList())
                {
                    try
                    {
                        _beforePrepare?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            gameManager = @params.gameManager;
            isReload = @params.isReload;
            orig(self, gameManager, isReload);
            if (_afterPrepare != null)
            {
                foreach (Delegates.Prepare_AfterArgs toInvoke in _afterPrepare.GetInvocationList())
                {
                    try
                    {
                        _afterPrepare.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookClearCache()
        {
            if (!HookedList.Contains("ClearCache"))
            {
                HookedList.Add("ClearCache");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "ClearCache", true),
                    ClearCache);
            }
        }

        internal static event Delegates.ClearCache_BeforeArgs _beforeClearCache;
        internal static event Delegates.ClearCache_AfterArgs _afterClearCache;

        private static void ClearCache(Action<UnityEngine.UI.SaveSlotButton> orig, UnityEngine.UI.SaveSlotButton self)
        {
            Delegates.Params_ClearCache @params = new()
            {
                self = self
            };
            if (_beforeClearCache != null)
            {
                foreach (Delegates.ClearCache_BeforeArgs toInvoke in _beforeClearCache.GetInvocationList())
                {
                    try
                    {
                        _beforeClearCache?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterClearCache != null)
            {
                foreach (Delegates.ClearCache_AfterArgs toInvoke in _afterClearCache.GetInvocationList())
                {
                    try
                    {
                        _afterClearCache.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnSubmit()
        {
            if (!HookedList.Contains("OnSubmit"))
            {
                HookedList.Add("OnSubmit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "OnSubmit", true),
                    OnSubmit);
            }
        }

        internal static event Delegates.OnSubmit_BeforeArgs _beforeOnSubmit;
        internal static event Delegates.OnSubmit_AfterArgs _afterOnSubmit;

        private static void OnSubmit(Action<UnityEngine.UI.SaveSlotButton, UnityEngine.EventSystems.BaseEventData> orig,
            UnityEngine.UI.SaveSlotButton self, UnityEngine.EventSystems.BaseEventData eventData)
        {
            Delegates.Params_OnSubmit @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnSubmit != null)
            {
                foreach (Delegates.OnSubmit_BeforeArgs toInvoke in _beforeOnSubmit.GetInvocationList())
                {
                    try
                    {
                        _beforeOnSubmit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnSubmit != null)
            {
                foreach (Delegates.OnSubmit_AfterArgs toInvoke in _afterOnSubmit.GetInvocationList())
                {
                    try
                    {
                        _afterOnSubmit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookReloadCorrupted()
        {
            if (!HookedList.Contains("ReloadCorrupted"))
            {
                HookedList.Add("ReloadCorrupted");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "ReloadCorrupted", true),
                    ReloadCorrupted);
            }
        }

        internal static event Delegates.ReloadCorrupted_BeforeArgs _beforeReloadCorrupted;

        private static System.Collections.IEnumerator ReloadCorrupted(
            Func<UnityEngine.UI.SaveSlotButton, System.Collections.IEnumerator> orig,
            UnityEngine.UI.SaveSlotButton self)
        {
            Delegates.Params_ReloadCorrupted @params = new()
            {
                self = self
            };
            if (_beforeReloadCorrupted != null)
            {
                foreach (Delegates.ReloadCorrupted_BeforeArgs toInvoke in _beforeReloadCorrupted.GetInvocationList())
                {
                    try
                    {
                        _beforeReloadCorrupted?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            return orig(self);
        }

        internal static void HookOnPointerClick()
        {
            if (!HookedList.Contains("OnPointerClick"))
            {
                HookedList.Add("OnPointerClick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "OnPointerClick", true),
                    OnPointerClick);
            }
        }

        internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
        internal static event Delegates.OnPointerClick_AfterArgs _afterOnPointerClick;

        private static void OnPointerClick(
            Action<UnityEngine.UI.SaveSlotButton, UnityEngine.EventSystems.PointerEventData> orig,
            UnityEngine.UI.SaveSlotButton self, UnityEngine.EventSystems.PointerEventData eventData)
        {
            Delegates.Params_OnPointerClick @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnPointerClick != null)
            {
                foreach (Delegates.OnPointerClick_BeforeArgs toInvoke in _beforeOnPointerClick.GetInvocationList())
                {
                    try
                    {
                        _beforeOnPointerClick?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnPointerClick != null)
            {
                foreach (Delegates.OnPointerClick_AfterArgs toInvoke in _afterOnPointerClick.GetInvocationList())
                {
                    try
                    {
                        _afterOnPointerClick.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnSelect()
        {
            if (!HookedList.Contains("OnSelect"))
            {
                HookedList.Add("OnSelect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "OnSelect", true),
                    OnSelect);
            }
        }

        internal static event Delegates.OnSelect_BeforeArgs _beforeOnSelect;
        internal static event Delegates.OnSelect_AfterArgs _afterOnSelect;

        private static void OnSelect(Action<UnityEngine.UI.SaveSlotButton, UnityEngine.EventSystems.BaseEventData> orig,
            UnityEngine.UI.SaveSlotButton self, UnityEngine.EventSystems.BaseEventData eventData)
        {
            Delegates.Params_OnSelect @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnSelect != null)
            {
                foreach (Delegates.OnSelect_BeforeArgs toInvoke in _beforeOnSelect.GetInvocationList())
                {
                    try
                    {
                        _beforeOnSelect?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnSelect != null)
            {
                foreach (Delegates.OnSelect_AfterArgs toInvoke in _afterOnSelect.GetInvocationList())
                {
                    try
                    {
                        _afterOnSelect.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnDeselect()
        {
            if (!HookedList.Contains("OnDeselect"))
            {
                HookedList.Add("OnDeselect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "OnDeselect", true),
                    OnDeselect);
            }
        }

        internal static event Delegates.OnDeselect_BeforeArgs _beforeOnDeselect;
        internal static event Delegates.OnDeselect_AfterArgs _afterOnDeselect;

        private static void OnDeselect(
            Action<UnityEngine.UI.SaveSlotButton, UnityEngine.EventSystems.BaseEventData> orig,
            UnityEngine.UI.SaveSlotButton self, UnityEngine.EventSystems.BaseEventData eventData)
        {
            Delegates.Params_OnDeselect @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnDeselect != null)
            {
                foreach (Delegates.OnDeselect_BeforeArgs toInvoke in _beforeOnDeselect.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDeselect?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnDeselect != null)
            {
                foreach (Delegates.OnDeselect_AfterArgs toInvoke in _afterOnDeselect.GetInvocationList())
                {
                    try
                    {
                        _afterOnDeselect.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookShowRelevantModeForSaveFileState()
        {
            if (!HookedList.Contains("ShowRelevantModeForSaveFileState"))
            {
                HookedList.Add("ShowRelevantModeForSaveFileState");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton),
                        "ShowRelevantModeForSaveFileState", true), ShowRelevantModeForSaveFileState);
            }
        }

        internal static event Delegates.ShowRelevantModeForSaveFileState_BeforeArgs
            _beforeShowRelevantModeForSaveFileState;

        internal static event Delegates.ShowRelevantModeForSaveFileState_AfterArgs
            _afterShowRelevantModeForSaveFileState;

        private static void ShowRelevantModeForSaveFileState(Action<UnityEngine.UI.SaveSlotButton> orig,
            UnityEngine.UI.SaveSlotButton self)
        {
            Delegates.Params_ShowRelevantModeForSaveFileState @params = new()
            {
                self = self
            };
            if (_beforeShowRelevantModeForSaveFileState != null)
            {
                foreach (Delegates.ShowRelevantModeForSaveFileState_BeforeArgs toInvoke in
                         _beforeShowRelevantModeForSaveFileState.GetInvocationList())
                {
                    try
                    {
                        _beforeShowRelevantModeForSaveFileState?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterShowRelevantModeForSaveFileState != null)
            {
                foreach (Delegates.ShowRelevantModeForSaveFileState_AfterArgs toInvoke in
                         _afterShowRelevantModeForSaveFileState.GetInvocationList())
                {
                    try
                    {
                        _afterShowRelevantModeForSaveFileState.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookHideSaveSlot()
        {
            if (!HookedList.Contains("HideSaveSlot"))
            {
                HookedList.Add("HideSaveSlot");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "HideSaveSlot", true),
                    HideSaveSlot);
            }
        }

        internal static event Delegates.HideSaveSlot_BeforeArgs _beforeHideSaveSlot;
        internal static event Delegates.HideSaveSlot_AfterArgs _afterHideSaveSlot;

        private static void HideSaveSlot(Action<UnityEngine.UI.SaveSlotButton> orig, UnityEngine.UI.SaveSlotButton self)
        {
            Delegates.Params_HideSaveSlot @params = new()
            {
                self = self
            };
            if (_beforeHideSaveSlot != null)
            {
                foreach (Delegates.HideSaveSlot_BeforeArgs toInvoke in _beforeHideSaveSlot.GetInvocationList())
                {
                    try
                    {
                        _beforeHideSaveSlot?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterHideSaveSlot != null)
            {
                foreach (Delegates.HideSaveSlot_AfterArgs toInvoke in _afterHideSaveSlot.GetInvocationList())
                {
                    try
                    {
                        _afterHideSaveSlot.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookClearSavePrompt()
        {
            if (!HookedList.Contains("ClearSavePrompt"))
            {
                HookedList.Add("ClearSavePrompt");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "ClearSavePrompt", true),
                    ClearSavePrompt);
            }
        }

        internal static event Delegates.ClearSavePrompt_BeforeArgs _beforeClearSavePrompt;
        internal static event Delegates.ClearSavePrompt_AfterArgs _afterClearSavePrompt;

        private static void ClearSavePrompt(Action<UnityEngine.UI.SaveSlotButton> orig,
            UnityEngine.UI.SaveSlotButton self)
        {
            Delegates.Params_ClearSavePrompt @params = new()
            {
                self = self
            };
            if (_beforeClearSavePrompt != null)
            {
                foreach (Delegates.ClearSavePrompt_BeforeArgs toInvoke in _beforeClearSavePrompt.GetInvocationList())
                {
                    try
                    {
                        _beforeClearSavePrompt?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterClearSavePrompt != null)
            {
                foreach (Delegates.ClearSavePrompt_AfterArgs toInvoke in _afterClearSavePrompt.GetInvocationList())
                {
                    try
                    {
                        _afterClearSavePrompt.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookCancelClearSave()
        {
            if (!HookedList.Contains("CancelClearSave"))
            {
                HookedList.Add("CancelClearSave");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "CancelClearSave", true),
                    CancelClearSave);
            }
        }

        internal static event Delegates.CancelClearSave_BeforeArgs _beforeCancelClearSave;
        internal static event Delegates.CancelClearSave_AfterArgs _afterCancelClearSave;

        private static void CancelClearSave(Action<UnityEngine.UI.SaveSlotButton> orig,
            UnityEngine.UI.SaveSlotButton self)
        {
            Delegates.Params_CancelClearSave @params = new()
            {
                self = self
            };
            if (_beforeCancelClearSave != null)
            {
                foreach (Delegates.CancelClearSave_BeforeArgs toInvoke in _beforeCancelClearSave.GetInvocationList())
                {
                    try
                    {
                        _beforeCancelClearSave?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterCancelClearSave != null)
            {
                foreach (Delegates.CancelClearSave_AfterArgs toInvoke in _afterCancelClearSave.GetInvocationList())
                {
                    try
                    {
                        _afterCancelClearSave.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookClearSaveFile()
        {
            if (!HookedList.Contains("ClearSaveFile"))
            {
                HookedList.Add("ClearSaveFile");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "ClearSaveFile", true),
                    ClearSaveFile);
            }
        }

        internal static event Delegates.ClearSaveFile_BeforeArgs _beforeClearSaveFile;
        internal static event Delegates.ClearSaveFile_AfterArgs _afterClearSaveFile;

        private static void ClearSaveFile(Action<UnityEngine.UI.SaveSlotButton> orig,
            UnityEngine.UI.SaveSlotButton self)
        {
            Delegates.Params_ClearSaveFile @params = new()
            {
                self = self
            };
            if (_beforeClearSaveFile != null)
            {
                foreach (Delegates.ClearSaveFile_BeforeArgs toInvoke in _beforeClearSaveFile.GetInvocationList())
                {
                    try
                    {
                        _beforeClearSaveFile?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterClearSaveFile != null)
            {
                foreach (Delegates.ClearSaveFile_AfterArgs toInvoke in _afterClearSaveFile.GetInvocationList())
                {
                    try
                    {
                        _afterClearSaveFile.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookFadeInCanvasGroupAfterDelay()
        {
            if (!HookedList.Contains("FadeInCanvasGroupAfterDelay"))
            {
                HookedList.Add("FadeInCanvasGroupAfterDelay");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "FadeInCanvasGroupAfterDelay",
                        true), FadeInCanvasGroupAfterDelay);
            }
        }

        internal static event Delegates.FadeInCanvasGroupAfterDelay_BeforeArgs _beforeFadeInCanvasGroupAfterDelay;

        private static System.Collections.IEnumerator FadeInCanvasGroupAfterDelay(
            Func<UnityEngine.UI.SaveSlotButton, float, UnityEngine.CanvasGroup, System.Collections.IEnumerator> orig,
            UnityEngine.UI.SaveSlotButton self, float delay, UnityEngine.CanvasGroup cg)
        {
            Delegates.Params_FadeInCanvasGroupAfterDelay @params = new()
            {
                self = self, delay = delay, cg = cg
            };
            if (_beforeFadeInCanvasGroupAfterDelay != null)
            {
                foreach (Delegates.FadeInCanvasGroupAfterDelay_BeforeArgs toInvoke in _beforeFadeInCanvasGroupAfterDelay
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeFadeInCanvasGroupAfterDelay?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            delay = @params.delay;
            cg = @params.cg;
            return orig(self, delay, cg);
        }

        internal static void HookPresentSaveSlot()
        {
            if (!HookedList.Contains("PresentSaveSlot"))
            {
                HookedList.Add("PresentSaveSlot");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "PresentSaveSlot", true),
                    PresentSaveSlot);
            }
        }

        internal static event Delegates.PresentSaveSlot_BeforeArgs _beforePresentSaveSlot;
        internal static event Delegates.PresentSaveSlot_AfterArgs _afterPresentSaveSlot;

        private static void PresentSaveSlot(Action<UnityEngine.UI.SaveSlotButton, SaveStats> orig,
            UnityEngine.UI.SaveSlotButton self, SaveStats saveStats)
        {
            Delegates.Params_PresentSaveSlot @params = new()
            {
                self = self, saveStats = saveStats
            };
            if (_beforePresentSaveSlot != null)
            {
                foreach (Delegates.PresentSaveSlot_BeforeArgs toInvoke in _beforePresentSaveSlot.GetInvocationList())
                {
                    try
                    {
                        _beforePresentSaveSlot?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            saveStats = @params.saveStats;
            orig(self, saveStats);
            if (_afterPresentSaveSlot != null)
            {
                foreach (Delegates.PresentSaveSlot_AfterArgs toInvoke in _afterPresentSaveSlot.GetInvocationList())
                {
                    try
                    {
                        _afterPresentSaveSlot.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetupNavs()
        {
            if (!HookedList.Contains("SetupNavs"))
            {
                HookedList.Add("SetupNavs");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "SetupNavs", true),
                    SetupNavs);
            }
        }

        internal static event Delegates.SetupNavs_BeforeArgs _beforeSetupNavs;
        internal static event Delegates.SetupNavs_AfterArgs _afterSetupNavs;

        private static void SetupNavs(Action<UnityEngine.UI.SaveSlotButton> orig, UnityEngine.UI.SaveSlotButton self)
        {
            Delegates.Params_SetupNavs @params = new()
            {
                self = self
            };
            if (_beforeSetupNavs != null)
            {
                foreach (Delegates.SetupNavs_BeforeArgs toInvoke in _beforeSetupNavs.GetInvocationList())
                {
                    try
                    {
                        _beforeSetupNavs?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterSetupNavs != null)
            {
                foreach (Delegates.SetupNavs_AfterArgs toInvoke in _afterSetupNavs.GetInvocationList())
                {
                    try
                    {
                        _afterSetupNavs.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookValidateDeselect()
        {
            if (!HookedList.Contains("ValidateDeselect"))
            {
                HookedList.Add("ValidateDeselect");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "ValidateDeselect", true),
                    ValidateDeselect);
            }
        }

        internal static event Delegates.ValidateDeselect_BeforeArgs _beforeValidateDeselect;

        private static System.Collections.IEnumerator ValidateDeselect(
            Func<UnityEngine.UI.SaveSlotButton, System.Collections.IEnumerator> orig,
            UnityEngine.UI.SaveSlotButton self)
        {
            Delegates.Params_ValidateDeselect @params = new()
            {
                self = self
            };
            if (_beforeValidateDeselect != null)
            {
                foreach (Delegates.ValidateDeselect_BeforeArgs toInvoke in _beforeValidateDeselect.GetInvocationList())
                {
                    try
                    {
                        _beforeValidateDeselect?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            return orig(self);
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_SaveSlotIndex
        {
            public UnityEngine.UI.SaveSlotButton self;
        }

        public delegate void get_SaveSlotIndex_BeforeArgs(Params_get_SaveSlotIndex args);

        public delegate int get_SaveSlotIndex_AfterArgs(Params_get_SaveSlotIndex args, int ret);

        public delegate int get_SaveSlotIndex_WithArgs(Func<UnityEngine.UI.SaveSlotButton, int> orig,
            UnityEngine.UI.SaveSlotButton self);

        public sealed class Params_Awake
        {
            public UnityEngine.UI.SaveSlotButton self;
        }

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<UnityEngine.UI.SaveSlotButton> orig,
            UnityEngine.UI.SaveSlotButton self);

        public sealed class Params_OnEnable
        {
            public UnityEngine.UI.SaveSlotButton self;
        }

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<UnityEngine.UI.SaveSlotButton> orig,
            UnityEngine.UI.SaveSlotButton self);

        public sealed class Params_Start
        {
            public UnityEngine.UI.SaveSlotButton self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<UnityEngine.UI.SaveSlotButton> orig,
            UnityEngine.UI.SaveSlotButton self);

        public sealed class Params_Prepare
        {
            public UnityEngine.UI.SaveSlotButton self;
            public GameManager gameManager;
            public bool isReload;
        }

        public delegate void Prepare_BeforeArgs(Params_Prepare args);

        public delegate void Prepare_AfterArgs(Params_Prepare args);

        public delegate void Prepare_WithArgs(Action<UnityEngine.UI.SaveSlotButton, GameManager, bool> orig,
            UnityEngine.UI.SaveSlotButton self, GameManager gameManager, bool isReload);

        public sealed class Params_ClearCache
        {
            public UnityEngine.UI.SaveSlotButton self;
        }

        public delegate void ClearCache_BeforeArgs(Params_ClearCache args);

        public delegate void ClearCache_AfterArgs(Params_ClearCache args);

        public delegate void ClearCache_WithArgs(Action<UnityEngine.UI.SaveSlotButton> orig,
            UnityEngine.UI.SaveSlotButton self);

        public sealed class Params_OnSubmit
        {
            public UnityEngine.UI.SaveSlotButton self;
            public UnityEngine.EventSystems.BaseEventData eventData;
        }

        public delegate void OnSubmit_BeforeArgs(Params_OnSubmit args);

        public delegate void OnSubmit_AfterArgs(Params_OnSubmit args);

        public delegate void OnSubmit_WithArgs(
            Action<UnityEngine.UI.SaveSlotButton, UnityEngine.EventSystems.BaseEventData> orig,
            UnityEngine.UI.SaveSlotButton self, UnityEngine.EventSystems.BaseEventData eventData);

        public sealed class Params_ReloadCorrupted
        {
            public UnityEngine.UI.SaveSlotButton self;
        }

        public delegate void ReloadCorrupted_BeforeArgs(Params_ReloadCorrupted args);

        public delegate System.Collections.IEnumerator ReloadCorrupted_AfterArgs(Params_ReloadCorrupted args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator ReloadCorrupted_WithArgs(
            Func<UnityEngine.UI.SaveSlotButton, System.Collections.IEnumerator> orig,
            UnityEngine.UI.SaveSlotButton self);

        public sealed class Params_OnPointerClick
        {
            public UnityEngine.UI.SaveSlotButton self;
            public UnityEngine.EventSystems.PointerEventData eventData;
        }

        public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_AfterArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_WithArgs(
            Action<UnityEngine.UI.SaveSlotButton, UnityEngine.EventSystems.PointerEventData> orig,
            UnityEngine.UI.SaveSlotButton self, UnityEngine.EventSystems.PointerEventData eventData);

        public sealed class Params_OnSelect
        {
            public UnityEngine.UI.SaveSlotButton self;
            public UnityEngine.EventSystems.BaseEventData eventData;
        }

        public delegate void OnSelect_BeforeArgs(Params_OnSelect args);

        public delegate void OnSelect_AfterArgs(Params_OnSelect args);

        public delegate void OnSelect_WithArgs(
            Action<UnityEngine.UI.SaveSlotButton, UnityEngine.EventSystems.BaseEventData> orig,
            UnityEngine.UI.SaveSlotButton self, UnityEngine.EventSystems.BaseEventData eventData);

        public sealed class Params_OnDeselect
        {
            public UnityEngine.UI.SaveSlotButton self;
            public UnityEngine.EventSystems.BaseEventData eventData;
        }

        public delegate void OnDeselect_BeforeArgs(Params_OnDeselect args);

        public delegate void OnDeselect_AfterArgs(Params_OnDeselect args);

        public delegate void OnDeselect_WithArgs(
            Action<UnityEngine.UI.SaveSlotButton, UnityEngine.EventSystems.BaseEventData> orig,
            UnityEngine.UI.SaveSlotButton self, UnityEngine.EventSystems.BaseEventData eventData);

        public sealed class Params_ShowRelevantModeForSaveFileState
        {
            public UnityEngine.UI.SaveSlotButton self;
        }

        public delegate void ShowRelevantModeForSaveFileState_BeforeArgs(Params_ShowRelevantModeForSaveFileState args);

        public delegate void ShowRelevantModeForSaveFileState_AfterArgs(Params_ShowRelevantModeForSaveFileState args);

        public delegate void ShowRelevantModeForSaveFileState_WithArgs(Action<UnityEngine.UI.SaveSlotButton> orig,
            UnityEngine.UI.SaveSlotButton self);

        public sealed class Params_HideSaveSlot
        {
            public UnityEngine.UI.SaveSlotButton self;
        }

        public delegate void HideSaveSlot_BeforeArgs(Params_HideSaveSlot args);

        public delegate void HideSaveSlot_AfterArgs(Params_HideSaveSlot args);

        public delegate void HideSaveSlot_WithArgs(Action<UnityEngine.UI.SaveSlotButton> orig,
            UnityEngine.UI.SaveSlotButton self);

        public sealed class Params_ClearSavePrompt
        {
            public UnityEngine.UI.SaveSlotButton self;
        }

        public delegate void ClearSavePrompt_BeforeArgs(Params_ClearSavePrompt args);

        public delegate void ClearSavePrompt_AfterArgs(Params_ClearSavePrompt args);

        public delegate void ClearSavePrompt_WithArgs(Action<UnityEngine.UI.SaveSlotButton> orig,
            UnityEngine.UI.SaveSlotButton self);

        public sealed class Params_CancelClearSave
        {
            public UnityEngine.UI.SaveSlotButton self;
        }

        public delegate void CancelClearSave_BeforeArgs(Params_CancelClearSave args);

        public delegate void CancelClearSave_AfterArgs(Params_CancelClearSave args);

        public delegate void CancelClearSave_WithArgs(Action<UnityEngine.UI.SaveSlotButton> orig,
            UnityEngine.UI.SaveSlotButton self);

        public sealed class Params_ClearSaveFile
        {
            public UnityEngine.UI.SaveSlotButton self;
        }

        public delegate void ClearSaveFile_BeforeArgs(Params_ClearSaveFile args);

        public delegate void ClearSaveFile_AfterArgs(Params_ClearSaveFile args);

        public delegate void ClearSaveFile_WithArgs(Action<UnityEngine.UI.SaveSlotButton> orig,
            UnityEngine.UI.SaveSlotButton self);

        public sealed class Params_FadeInCanvasGroupAfterDelay
        {
            public UnityEngine.UI.SaveSlotButton self;
            public float delay;
            public UnityEngine.CanvasGroup cg;
        }

        public delegate void FadeInCanvasGroupAfterDelay_BeforeArgs(Params_FadeInCanvasGroupAfterDelay args);

        public delegate System.Collections.IEnumerator FadeInCanvasGroupAfterDelay_AfterArgs(
            Params_FadeInCanvasGroupAfterDelay args, System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator FadeInCanvasGroupAfterDelay_WithArgs(
            Func<UnityEngine.UI.SaveSlotButton, float, UnityEngine.CanvasGroup, System.Collections.IEnumerator> orig,
            UnityEngine.UI.SaveSlotButton self, float delay, UnityEngine.CanvasGroup cg);

        public sealed class Params_PresentSaveSlot
        {
            public UnityEngine.UI.SaveSlotButton self;
            public SaveStats saveStats;
        }

        public delegate void PresentSaveSlot_BeforeArgs(Params_PresentSaveSlot args);

        public delegate void PresentSaveSlot_AfterArgs(Params_PresentSaveSlot args);

        public delegate void PresentSaveSlot_WithArgs(Action<UnityEngine.UI.SaveSlotButton, SaveStats> orig,
            UnityEngine.UI.SaveSlotButton self, SaveStats saveStats);

        public sealed class Params_SetupNavs
        {
            public UnityEngine.UI.SaveSlotButton self;
        }

        public delegate void SetupNavs_BeforeArgs(Params_SetupNavs args);

        public delegate void SetupNavs_AfterArgs(Params_SetupNavs args);

        public delegate void SetupNavs_WithArgs(Action<UnityEngine.UI.SaveSlotButton> orig,
            UnityEngine.UI.SaveSlotButton self);

        public sealed class Params_ValidateDeselect
        {
            public UnityEngine.UI.SaveSlotButton self;
        }

        public delegate void ValidateDeselect_BeforeArgs(Params_ValidateDeselect args);

        public delegate System.Collections.IEnumerator ValidateDeselect_AfterArgs(Params_ValidateDeselect args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator ValidateDeselect_WithArgs(
            Func<UnityEngine.UI.SaveSlotButton, System.Collections.IEnumerator> orig,
            UnityEngine.UI.SaveSlotButton self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_SaveSlotIndex_BeforeArgs get_SaveSlotIndex
        {
            add
            {
                HookHandler._beforeget_SaveSlotIndex += value;
                HookHandler.Hookget_SaveSlotIndex();
            }
            remove => HookHandler._beforeget_SaveSlotIndex -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Prepare_BeforeArgs Prepare
        {
            add
            {
                HookHandler._beforePrepare += value;
                HookHandler.HookPrepare();
            }
            remove => HookHandler._beforePrepare -= value;
        }

        public static event Delegates.ClearCache_BeforeArgs ClearCache
        {
            add
            {
                HookHandler._beforeClearCache += value;
                HookHandler.HookClearCache();
            }
            remove => HookHandler._beforeClearCache -= value;
        }

        public static event Delegates.OnSubmit_BeforeArgs OnSubmit
        {
            add
            {
                HookHandler._beforeOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._beforeOnSubmit -= value;
        }

        public static event Delegates.ReloadCorrupted_BeforeArgs ReloadCorrupted
        {
            add
            {
                HookHandler._beforeReloadCorrupted += value;
                HookHandler.HookReloadCorrupted();
            }
            remove => HookHandler._beforeReloadCorrupted -= value;
        }

        public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
        {
            add
            {
                HookHandler._beforeOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._beforeOnPointerClick -= value;
        }

        public static event Delegates.OnSelect_BeforeArgs OnSelect
        {
            add
            {
                HookHandler._beforeOnSelect += value;
                HookHandler.HookOnSelect();
            }
            remove => HookHandler._beforeOnSelect -= value;
        }

        public static event Delegates.OnDeselect_BeforeArgs OnDeselect
        {
            add
            {
                HookHandler._beforeOnDeselect += value;
                HookHandler.HookOnDeselect();
            }
            remove => HookHandler._beforeOnDeselect -= value;
        }

        public static event Delegates.ShowRelevantModeForSaveFileState_BeforeArgs ShowRelevantModeForSaveFileState
        {
            add
            {
                HookHandler._beforeShowRelevantModeForSaveFileState += value;
                HookHandler.HookShowRelevantModeForSaveFileState();
            }
            remove => HookHandler._beforeShowRelevantModeForSaveFileState -= value;
        }

        public static event Delegates.HideSaveSlot_BeforeArgs HideSaveSlot
        {
            add
            {
                HookHandler._beforeHideSaveSlot += value;
                HookHandler.HookHideSaveSlot();
            }
            remove => HookHandler._beforeHideSaveSlot -= value;
        }

        public static event Delegates.ClearSavePrompt_BeforeArgs ClearSavePrompt
        {
            add
            {
                HookHandler._beforeClearSavePrompt += value;
                HookHandler.HookClearSavePrompt();
            }
            remove => HookHandler._beforeClearSavePrompt -= value;
        }

        public static event Delegates.CancelClearSave_BeforeArgs CancelClearSave
        {
            add
            {
                HookHandler._beforeCancelClearSave += value;
                HookHandler.HookCancelClearSave();
            }
            remove => HookHandler._beforeCancelClearSave -= value;
        }

        public static event Delegates.ClearSaveFile_BeforeArgs ClearSaveFile
        {
            add
            {
                HookHandler._beforeClearSaveFile += value;
                HookHandler.HookClearSaveFile();
            }
            remove => HookHandler._beforeClearSaveFile -= value;
        }

        public static event Delegates.FadeInCanvasGroupAfterDelay_BeforeArgs FadeInCanvasGroupAfterDelay
        {
            add
            {
                HookHandler._beforeFadeInCanvasGroupAfterDelay += value;
                HookHandler.HookFadeInCanvasGroupAfterDelay();
            }
            remove => HookHandler._beforeFadeInCanvasGroupAfterDelay -= value;
        }

        public static event Delegates.PresentSaveSlot_BeforeArgs PresentSaveSlot
        {
            add
            {
                HookHandler._beforePresentSaveSlot += value;
                HookHandler.HookPresentSaveSlot();
            }
            remove => HookHandler._beforePresentSaveSlot -= value;
        }

        public static event Delegates.SetupNavs_BeforeArgs SetupNavs
        {
            add
            {
                HookHandler._beforeSetupNavs += value;
                HookHandler.HookSetupNavs();
            }
            remove => HookHandler._beforeSetupNavs -= value;
        }

        public static event Delegates.ValidateDeselect_BeforeArgs ValidateDeselect
        {
            add
            {
                HookHandler._beforeValidateDeselect += value;
                HookHandler.HookValidateDeselect();
            }
            remove => HookHandler._beforeValidateDeselect -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_SaveSlotIndex_AfterArgs get_SaveSlotIndex
        {
            add
            {
                HookHandler._afterget_SaveSlotIndex += value;
                HookHandler.Hookget_SaveSlotIndex();
            }
            remove => HookHandler._afterget_SaveSlotIndex -= value;
        }

        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Prepare_AfterArgs Prepare
        {
            add
            {
                HookHandler._afterPrepare += value;
                HookHandler.HookPrepare();
            }
            remove => HookHandler._afterPrepare -= value;
        }

        public static event Delegates.ClearCache_AfterArgs ClearCache
        {
            add
            {
                HookHandler._afterClearCache += value;
                HookHandler.HookClearCache();
            }
            remove => HookHandler._afterClearCache -= value;
        }

        public static event Delegates.OnSubmit_AfterArgs OnSubmit
        {
            add
            {
                HookHandler._afterOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._afterOnSubmit -= value;
        }

        public static event Delegates.OnPointerClick_AfterArgs OnPointerClick
        {
            add
            {
                HookHandler._afterOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._afterOnPointerClick -= value;
        }

        public static event Delegates.OnSelect_AfterArgs OnSelect
        {
            add
            {
                HookHandler._afterOnSelect += value;
                HookHandler.HookOnSelect();
            }
            remove => HookHandler._afterOnSelect -= value;
        }

        public static event Delegates.OnDeselect_AfterArgs OnDeselect
        {
            add
            {
                HookHandler._afterOnDeselect += value;
                HookHandler.HookOnDeselect();
            }
            remove => HookHandler._afterOnDeselect -= value;
        }

        public static event Delegates.ShowRelevantModeForSaveFileState_AfterArgs ShowRelevantModeForSaveFileState
        {
            add
            {
                HookHandler._afterShowRelevantModeForSaveFileState += value;
                HookHandler.HookShowRelevantModeForSaveFileState();
            }
            remove => HookHandler._afterShowRelevantModeForSaveFileState -= value;
        }

        public static event Delegates.HideSaveSlot_AfterArgs HideSaveSlot
        {
            add
            {
                HookHandler._afterHideSaveSlot += value;
                HookHandler.HookHideSaveSlot();
            }
            remove => HookHandler._afterHideSaveSlot -= value;
        }

        public static event Delegates.ClearSavePrompt_AfterArgs ClearSavePrompt
        {
            add
            {
                HookHandler._afterClearSavePrompt += value;
                HookHandler.HookClearSavePrompt();
            }
            remove => HookHandler._afterClearSavePrompt -= value;
        }

        public static event Delegates.CancelClearSave_AfterArgs CancelClearSave
        {
            add
            {
                HookHandler._afterCancelClearSave += value;
                HookHandler.HookCancelClearSave();
            }
            remove => HookHandler._afterCancelClearSave -= value;
        }

        public static event Delegates.ClearSaveFile_AfterArgs ClearSaveFile
        {
            add
            {
                HookHandler._afterClearSaveFile += value;
                HookHandler.HookClearSaveFile();
            }
            remove => HookHandler._afterClearSaveFile -= value;
        }

        public static event Delegates.PresentSaveSlot_AfterArgs PresentSaveSlot
        {
            add
            {
                HookHandler._afterPresentSaveSlot += value;
                HookHandler.HookPresentSaveSlot();
            }
            remove => HookHandler._afterPresentSaveSlot -= value;
        }

        public static event Delegates.SetupNavs_AfterArgs SetupNavs
        {
            add
            {
                HookHandler._afterSetupNavs += value;
                HookHandler.HookSetupNavs();
            }
            remove => HookHandler._afterSetupNavs -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_SaveSlotIndex_WithArgs get_SaveSlotIndex
        {
            add => HookEndpointManager.Add<Delegates.get_SaveSlotIndex_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "get_SaveSlotIndex", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_SaveSlotIndex_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "get_SaveSlotIndex", true),
                value);
        }

        public static event Delegates.Awake_WithArgs Awake
        {
            add => HookEndpointManager.Add<Delegates.Awake_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "Awake", true), value);
            remove => HookEndpointManager.Remove<Delegates.Awake_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "Awake", true), value);
        }

        public static event Delegates.OnEnable_WithArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "OnEnable", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "OnEnable", true), value);
        }

        public static event Delegates.Start_WithArgs Start
        {
            add => HookEndpointManager.Add<Delegates.Start_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "Start", true), value);
            remove => HookEndpointManager.Remove<Delegates.Start_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "Start", true), value);
        }

        public static event Delegates.Prepare_WithArgs Prepare
        {
            add => HookEndpointManager.Add<Delegates.Prepare_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "Prepare", true), value);
            remove => HookEndpointManager.Remove<Delegates.Prepare_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "Prepare", true), value);
        }

        public static event Delegates.ClearCache_WithArgs ClearCache
        {
            add => HookEndpointManager.Add<Delegates.ClearCache_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "ClearCache", true), value);
            remove => HookEndpointManager.Remove<Delegates.ClearCache_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "ClearCache", true), value);
        }

        public static event Delegates.OnSubmit_WithArgs OnSubmit
        {
            add => HookEndpointManager.Add<Delegates.OnSubmit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "OnSubmit", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnSubmit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "OnSubmit", true), value);
        }

        public static event Delegates.ReloadCorrupted_WithArgs ReloadCorrupted
        {
            add => HookEndpointManager.Add<Delegates.ReloadCorrupted_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "ReloadCorrupted", true), value);
            remove => HookEndpointManager.Remove<Delegates.ReloadCorrupted_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "ReloadCorrupted", true), value);
        }

        public static event Delegates.OnPointerClick_WithArgs OnPointerClick
        {
            add => HookEndpointManager.Add<Delegates.OnPointerClick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "OnPointerClick", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnPointerClick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "OnPointerClick", true), value);
        }

        public static event Delegates.OnSelect_WithArgs OnSelect
        {
            add => HookEndpointManager.Add<Delegates.OnSelect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "OnSelect", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnSelect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "OnSelect", true), value);
        }

        public static event Delegates.OnDeselect_WithArgs OnDeselect
        {
            add => HookEndpointManager.Add<Delegates.OnDeselect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "OnDeselect", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnDeselect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "OnDeselect", true), value);
        }

        public static event Delegates.ShowRelevantModeForSaveFileState_WithArgs ShowRelevantModeForSaveFileState
        {
            add => HookEndpointManager.Add<Delegates.ShowRelevantModeForSaveFileState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton),
                    "ShowRelevantModeForSaveFileState", true), value);
            remove => HookEndpointManager.Remove<Delegates.ShowRelevantModeForSaveFileState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton),
                    "ShowRelevantModeForSaveFileState", true), value);
        }

        public static event Delegates.HideSaveSlot_WithArgs HideSaveSlot
        {
            add => HookEndpointManager.Add<Delegates.HideSaveSlot_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "HideSaveSlot", true), value);
            remove => HookEndpointManager.Remove<Delegates.HideSaveSlot_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "HideSaveSlot", true), value);
        }

        public static event Delegates.ClearSavePrompt_WithArgs ClearSavePrompt
        {
            add => HookEndpointManager.Add<Delegates.ClearSavePrompt_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "ClearSavePrompt", true), value);
            remove => HookEndpointManager.Remove<Delegates.ClearSavePrompt_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "ClearSavePrompt", true), value);
        }

        public static event Delegates.CancelClearSave_WithArgs CancelClearSave
        {
            add => HookEndpointManager.Add<Delegates.CancelClearSave_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "CancelClearSave", true), value);
            remove => HookEndpointManager.Remove<Delegates.CancelClearSave_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "CancelClearSave", true), value);
        }

        public static event Delegates.ClearSaveFile_WithArgs ClearSaveFile
        {
            add => HookEndpointManager.Add<Delegates.ClearSaveFile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "ClearSaveFile", true), value);
            remove => HookEndpointManager.Remove<Delegates.ClearSaveFile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "ClearSaveFile", true), value);
        }

        public static event Delegates.FadeInCanvasGroupAfterDelay_WithArgs FadeInCanvasGroupAfterDelay
        {
            add => HookEndpointManager.Add<Delegates.FadeInCanvasGroupAfterDelay_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "FadeInCanvasGroupAfterDelay",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.FadeInCanvasGroupAfterDelay_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "FadeInCanvasGroupAfterDelay",
                    true), value);
        }

        public static event Delegates.PresentSaveSlot_WithArgs PresentSaveSlot
        {
            add => HookEndpointManager.Add<Delegates.PresentSaveSlot_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "PresentSaveSlot", true), value);
            remove => HookEndpointManager.Remove<Delegates.PresentSaveSlot_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "PresentSaveSlot", true), value);
        }

        public static event Delegates.SetupNavs_WithArgs SetupNavs
        {
            add => HookEndpointManager.Add<Delegates.SetupNavs_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "SetupNavs", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetupNavs_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "SetupNavs", true), value);
        }

        public static event Delegates.ValidateDeselect_WithArgs ValidateDeselect
        {
            add => HookEndpointManager.Add<Delegates.ValidateDeselect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "ValidateDeselect", true), value);
            remove => HookEndpointManager.Remove<Delegates.ValidateDeselect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.SaveSlotButton), "ValidateDeselect", true), value);
        }
    }
}