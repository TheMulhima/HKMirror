using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for PlayerAction class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPlayerAction
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_Name()
{
if (!HookedList.Contains("get_Name"))
{
HookedList.Add("get_Name");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_Name", true), get_Name);

}
}
internal static event Delegates.get_Name_BeforeArgs _beforeget_Name;
internal static event Delegates.get_Name_AfterArgs _afterget_Name;
private static string get_Name(Func<InControl.PlayerAction, string> orig, InControl.PlayerAction self)
{
Delegates.Params_get_Name @params = new() 
{
self = self
};
if (_beforeget_Name != null)
{
foreach (Delegates.get_Name_BeforeArgs toInvoke in _beforeget_Name.GetInvocationList())
{
try
{
_beforeget_Name?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_Name != null)
{
foreach (Delegates.get_Name_AfterArgs toInvoke in _afterget_Name.GetInvocationList())
{
try
{
retVal = _afterget_Name.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_Name()
{
if (!HookedList.Contains("set_Name"))
{
HookedList.Add("set_Name");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "set_Name", true), set_Name);

}
}
internal static event Delegates.set_Name_BeforeArgs _beforeset_Name;
internal static event Delegates.set_Name_AfterArgs _afterset_Name;
private static void set_Name(Action<InControl.PlayerAction,  string> orig, InControl.PlayerAction self,  string value)
{
Delegates.Params_set_Name @params = new() 
{
self = self
, value = value
};
if (_beforeset_Name != null)
{
foreach (Delegates.set_Name_BeforeArgs toInvoke in _beforeset_Name.GetInvocationList())
{
try
{
_beforeset_Name?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_Name != null)
{
foreach (Delegates.set_Name_AfterArgs toInvoke in _afterset_Name.GetInvocationList())
{
try
{
_afterset_Name.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_Owner()
{
if (!HookedList.Contains("get_Owner"))
{
HookedList.Add("get_Owner");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_Owner", true), get_Owner);

}
}
internal static event Delegates.get_Owner_BeforeArgs _beforeget_Owner;
internal static event Delegates.get_Owner_AfterArgs _afterget_Owner;
private static InControl.PlayerActionSet get_Owner(Func<InControl.PlayerAction, InControl.PlayerActionSet> orig, InControl.PlayerAction self)
{
Delegates.Params_get_Owner @params = new() 
{
self = self
};
if (_beforeget_Owner != null)
{
foreach (Delegates.get_Owner_BeforeArgs toInvoke in _beforeget_Owner.GetInvocationList())
{
try
{
_beforeget_Owner?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_Owner != null)
{
foreach (Delegates.get_Owner_AfterArgs toInvoke in _afterget_Owner.GetInvocationList())
{
try
{
retVal = _afterget_Owner.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_Owner()
{
if (!HookedList.Contains("set_Owner"))
{
HookedList.Add("set_Owner");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "set_Owner", true), set_Owner);

}
}
internal static event Delegates.set_Owner_BeforeArgs _beforeset_Owner;
internal static event Delegates.set_Owner_AfterArgs _afterset_Owner;
private static void set_Owner(Action<InControl.PlayerAction,  InControl.PlayerActionSet> orig, InControl.PlayerAction self,  InControl.PlayerActionSet value)
{
Delegates.Params_set_Owner @params = new() 
{
self = self
, value = value
};
if (_beforeset_Owner != null)
{
foreach (Delegates.set_Owner_BeforeArgs toInvoke in _beforeset_Owner.GetInvocationList())
{
try
{
_beforeset_Owner?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_Owner != null)
{
foreach (Delegates.set_Owner_AfterArgs toInvoke in _afterset_Owner.GetInvocationList())
{
try
{
_afterset_Owner.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_UserData()
{
if (!HookedList.Contains("get_UserData"))
{
HookedList.Add("get_UserData");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_UserData", true), get_UserData);

}
}
internal static event Delegates.get_UserData_BeforeArgs _beforeget_UserData;
internal static event Delegates.get_UserData_AfterArgs _afterget_UserData;
private static System.Object get_UserData(Func<InControl.PlayerAction, System.Object> orig, InControl.PlayerAction self)
{
Delegates.Params_get_UserData @params = new() 
{
self = self
};
if (_beforeget_UserData != null)
{
foreach (Delegates.get_UserData_BeforeArgs toInvoke in _beforeget_UserData.GetInvocationList())
{
try
{
_beforeget_UserData?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_UserData != null)
{
foreach (Delegates.get_UserData_AfterArgs toInvoke in _afterget_UserData.GetInvocationList())
{
try
{
retVal = _afterget_UserData.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_UserData()
{
if (!HookedList.Contains("set_UserData"))
{
HookedList.Add("set_UserData");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "set_UserData", true), set_UserData);

}
}
internal static event Delegates.set_UserData_BeforeArgs _beforeset_UserData;
internal static event Delegates.set_UserData_AfterArgs _afterset_UserData;
private static void set_UserData(Action<InControl.PlayerAction,  System.Object> orig, InControl.PlayerAction self,  System.Object value)
{
Delegates.Params_set_UserData @params = new() 
{
self = self
, value = value
};
if (_beforeset_UserData != null)
{
foreach (Delegates.set_UserData_BeforeArgs toInvoke in _beforeset_UserData.GetInvocationList())
{
try
{
_beforeset_UserData?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_UserData != null)
{
foreach (Delegates.set_UserData_AfterArgs toInvoke in _afterset_UserData.GetInvocationList())
{
try
{
_afterset_UserData.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAddDefaultBinding_BindingSource()
{
if (!HookedList.Contains("AddDefaultBinding_BindingSource"))
{
HookedList.Add("AddDefaultBinding_BindingSource");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "AddDefaultBinding_BindingSource", true), AddDefaultBinding_BindingSource);

}
}
internal static event Delegates.AddDefaultBinding_BindingSource_BeforeArgs _beforeAddDefaultBinding_BindingSource;
internal static event Delegates.AddDefaultBinding_BindingSource_AfterArgs _afterAddDefaultBinding_BindingSource;
private static void AddDefaultBinding_BindingSource(Action<InControl.PlayerAction,  InControl.BindingSource> orig, InControl.PlayerAction self,  InControl.BindingSource binding)
{
Delegates.Params_AddDefaultBinding_BindingSource @params = new() 
{
self = self
, binding = binding
};
if (_beforeAddDefaultBinding_BindingSource != null)
{
foreach (Delegates.AddDefaultBinding_BindingSource_BeforeArgs toInvoke in _beforeAddDefaultBinding_BindingSource.GetInvocationList())
{
try
{
_beforeAddDefaultBinding_BindingSource?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
binding = @params.binding;
orig(self, binding);
if (_afterAddDefaultBinding_BindingSource != null)
{
foreach (Delegates.AddDefaultBinding_BindingSource_AfterArgs toInvoke in _afterAddDefaultBinding_BindingSource.GetInvocationList())
{
try
{
_afterAddDefaultBinding_BindingSource.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAddDefaultBinding_Array()
{
if (!HookedList.Contains("AddDefaultBinding_Array"))
{
HookedList.Add("AddDefaultBinding_Array");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "AddDefaultBinding_Array", true), AddDefaultBinding_Array);

}
}
internal static event Delegates.AddDefaultBinding_Array_BeforeArgs _beforeAddDefaultBinding_Array;
internal static event Delegates.AddDefaultBinding_Array_AfterArgs _afterAddDefaultBinding_Array;
private static void AddDefaultBinding_Array(Action<InControl.PlayerAction,  InControl.Key[]> orig, InControl.PlayerAction self,  InControl.Key[] keys)
{
Delegates.Params_AddDefaultBinding_Array @params = new() 
{
self = self
, keys = keys
};
if (_beforeAddDefaultBinding_Array != null)
{
foreach (Delegates.AddDefaultBinding_Array_BeforeArgs toInvoke in _beforeAddDefaultBinding_Array.GetInvocationList())
{
try
{
_beforeAddDefaultBinding_Array?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
keys = @params.keys;
orig(self, keys);
if (_afterAddDefaultBinding_Array != null)
{
foreach (Delegates.AddDefaultBinding_Array_AfterArgs toInvoke in _afterAddDefaultBinding_Array.GetInvocationList())
{
try
{
_afterAddDefaultBinding_Array.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAddDefaultBinding_KeyCombo()
{
if (!HookedList.Contains("AddDefaultBinding_KeyCombo"))
{
HookedList.Add("AddDefaultBinding_KeyCombo");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "AddDefaultBinding_KeyCombo", true), AddDefaultBinding_KeyCombo);

}
}
internal static event Delegates.AddDefaultBinding_KeyCombo_BeforeArgs _beforeAddDefaultBinding_KeyCombo;
internal static event Delegates.AddDefaultBinding_KeyCombo_AfterArgs _afterAddDefaultBinding_KeyCombo;
private static void AddDefaultBinding_KeyCombo(Action<InControl.PlayerAction,  InControl.KeyCombo> orig, InControl.PlayerAction self,  InControl.KeyCombo keyCombo)
{
Delegates.Params_AddDefaultBinding_KeyCombo @params = new() 
{
self = self
, keyCombo = keyCombo
};
if (_beforeAddDefaultBinding_KeyCombo != null)
{
foreach (Delegates.AddDefaultBinding_KeyCombo_BeforeArgs toInvoke in _beforeAddDefaultBinding_KeyCombo.GetInvocationList())
{
try
{
_beforeAddDefaultBinding_KeyCombo?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
keyCombo = @params.keyCombo;
orig(self, keyCombo);
if (_afterAddDefaultBinding_KeyCombo != null)
{
foreach (Delegates.AddDefaultBinding_KeyCombo_AfterArgs toInvoke in _afterAddDefaultBinding_KeyCombo.GetInvocationList())
{
try
{
_afterAddDefaultBinding_KeyCombo.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAddDefaultBinding_Mouse()
{
if (!HookedList.Contains("AddDefaultBinding_Mouse"))
{
HookedList.Add("AddDefaultBinding_Mouse");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "AddDefaultBinding_Mouse", true), AddDefaultBinding_Mouse);

}
}
internal static event Delegates.AddDefaultBinding_Mouse_BeforeArgs _beforeAddDefaultBinding_Mouse;
internal static event Delegates.AddDefaultBinding_Mouse_AfterArgs _afterAddDefaultBinding_Mouse;
private static void AddDefaultBinding_Mouse(Action<InControl.PlayerAction,  InControl.Mouse> orig, InControl.PlayerAction self,  InControl.Mouse control)
{
Delegates.Params_AddDefaultBinding_Mouse @params = new() 
{
self = self
, control = control
};
if (_beforeAddDefaultBinding_Mouse != null)
{
foreach (Delegates.AddDefaultBinding_Mouse_BeforeArgs toInvoke in _beforeAddDefaultBinding_Mouse.GetInvocationList())
{
try
{
_beforeAddDefaultBinding_Mouse?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
control = @params.control;
orig(self, control);
if (_afterAddDefaultBinding_Mouse != null)
{
foreach (Delegates.AddDefaultBinding_Mouse_AfterArgs toInvoke in _afterAddDefaultBinding_Mouse.GetInvocationList())
{
try
{
_afterAddDefaultBinding_Mouse.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAddDefaultBinding_InputControlType()
{
if (!HookedList.Contains("AddDefaultBinding_InputControlType"))
{
HookedList.Add("AddDefaultBinding_InputControlType");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "AddDefaultBinding_InputControlType", true), AddDefaultBinding_InputControlType);

}
}
internal static event Delegates.AddDefaultBinding_InputControlType_BeforeArgs _beforeAddDefaultBinding_InputControlType;
internal static event Delegates.AddDefaultBinding_InputControlType_AfterArgs _afterAddDefaultBinding_InputControlType;
private static void AddDefaultBinding_InputControlType(Action<InControl.PlayerAction,  InControl.InputControlType> orig, InControl.PlayerAction self,  InControl.InputControlType control)
{
Delegates.Params_AddDefaultBinding_InputControlType @params = new() 
{
self = self
, control = control
};
if (_beforeAddDefaultBinding_InputControlType != null)
{
foreach (Delegates.AddDefaultBinding_InputControlType_BeforeArgs toInvoke in _beforeAddDefaultBinding_InputControlType.GetInvocationList())
{
try
{
_beforeAddDefaultBinding_InputControlType?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
control = @params.control;
orig(self, control);
if (_afterAddDefaultBinding_InputControlType != null)
{
foreach (Delegates.AddDefaultBinding_InputControlType_AfterArgs toInvoke in _afterAddDefaultBinding_InputControlType.GetInvocationList())
{
try
{
_afterAddDefaultBinding_InputControlType.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAddBinding()
{
if (!HookedList.Contains("AddBinding"))
{
HookedList.Add("AddBinding");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "AddBinding", true), AddBinding);

}
}
internal static event Delegates.AddBinding_BeforeArgs _beforeAddBinding;
internal static event Delegates.AddBinding_AfterArgs _afterAddBinding;
private static bool AddBinding(Func<InControl.PlayerAction,  InControl.BindingSource, bool> orig, InControl.PlayerAction self,  InControl.BindingSource binding)
{
Delegates.Params_AddBinding @params = new() 
{
self = self
, binding = binding
};
if (_beforeAddBinding != null)
{
foreach (Delegates.AddBinding_BeforeArgs toInvoke in _beforeAddBinding.GetInvocationList())
{
try
{
_beforeAddBinding?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
binding = @params.binding;
var retVal = orig(self, binding);
if (_afterAddBinding != null)
{
foreach (Delegates.AddBinding_AfterArgs toInvoke in _afterAddBinding.GetInvocationList())
{
try
{
retVal = _afterAddBinding.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookInsertBindingAt()
{
if (!HookedList.Contains("InsertBindingAt"))
{
HookedList.Add("InsertBindingAt");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "InsertBindingAt", true), InsertBindingAt);

}
}
internal static event Delegates.InsertBindingAt_BeforeArgs _beforeInsertBindingAt;
internal static event Delegates.InsertBindingAt_AfterArgs _afterInsertBindingAt;
private static bool InsertBindingAt(Func<InControl.PlayerAction,  int,  InControl.BindingSource, bool> orig, InControl.PlayerAction self,  int index,  InControl.BindingSource binding)
{
Delegates.Params_InsertBindingAt @params = new() 
{
self = self
, index = index
, binding = binding
};
if (_beforeInsertBindingAt != null)
{
foreach (Delegates.InsertBindingAt_BeforeArgs toInvoke in _beforeInsertBindingAt.GetInvocationList())
{
try
{
_beforeInsertBindingAt?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
index = @params.index;
binding = @params.binding;
var retVal = orig(self, index, binding);
if (_afterInsertBindingAt != null)
{
foreach (Delegates.InsertBindingAt_AfterArgs toInvoke in _afterInsertBindingAt.GetInvocationList())
{
try
{
retVal = _afterInsertBindingAt.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookReplaceBinding()
{
if (!HookedList.Contains("ReplaceBinding"))
{
HookedList.Add("ReplaceBinding");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "ReplaceBinding", true), ReplaceBinding);

}
}
internal static event Delegates.ReplaceBinding_BeforeArgs _beforeReplaceBinding;
internal static event Delegates.ReplaceBinding_AfterArgs _afterReplaceBinding;
private static bool ReplaceBinding(Func<InControl.PlayerAction,  InControl.BindingSource,  InControl.BindingSource, bool> orig, InControl.PlayerAction self,  InControl.BindingSource findBinding,  InControl.BindingSource withBinding)
{
Delegates.Params_ReplaceBinding @params = new() 
{
self = self
, findBinding = findBinding
, withBinding = withBinding
};
if (_beforeReplaceBinding != null)
{
foreach (Delegates.ReplaceBinding_BeforeArgs toInvoke in _beforeReplaceBinding.GetInvocationList())
{
try
{
_beforeReplaceBinding?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
findBinding = @params.findBinding;
withBinding = @params.withBinding;
var retVal = orig(self, findBinding, withBinding);
if (_afterReplaceBinding != null)
{
foreach (Delegates.ReplaceBinding_AfterArgs toInvoke in _afterReplaceBinding.GetInvocationList())
{
try
{
retVal = _afterReplaceBinding.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookHasBinding()
{
if (!HookedList.Contains("HasBinding"))
{
HookedList.Add("HasBinding");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "HasBinding", true), HasBinding);

}
}
internal static event Delegates.HasBinding_BeforeArgs _beforeHasBinding;
internal static event Delegates.HasBinding_AfterArgs _afterHasBinding;
private static bool HasBinding(Func<InControl.PlayerAction,  InControl.BindingSource, bool> orig, InControl.PlayerAction self,  InControl.BindingSource binding)
{
Delegates.Params_HasBinding @params = new() 
{
self = self
, binding = binding
};
if (_beforeHasBinding != null)
{
foreach (Delegates.HasBinding_BeforeArgs toInvoke in _beforeHasBinding.GetInvocationList())
{
try
{
_beforeHasBinding?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
binding = @params.binding;
var retVal = orig(self, binding);
if (_afterHasBinding != null)
{
foreach (Delegates.HasBinding_AfterArgs toInvoke in _afterHasBinding.GetInvocationList())
{
try
{
retVal = _afterHasBinding.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookFindBinding()
{
if (!HookedList.Contains("FindBinding"))
{
HookedList.Add("FindBinding");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "FindBinding", true), FindBinding);

}
}
internal static event Delegates.FindBinding_BeforeArgs _beforeFindBinding;
internal static event Delegates.FindBinding_AfterArgs _afterFindBinding;
private static InControl.BindingSource FindBinding(Func<InControl.PlayerAction,  InControl.BindingSource, InControl.BindingSource> orig, InControl.PlayerAction self,  InControl.BindingSource binding)
{
Delegates.Params_FindBinding @params = new() 
{
self = self
, binding = binding
};
if (_beforeFindBinding != null)
{
foreach (Delegates.FindBinding_BeforeArgs toInvoke in _beforeFindBinding.GetInvocationList())
{
try
{
_beforeFindBinding?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
binding = @params.binding;
var retVal = orig(self, binding);
if (_afterFindBinding != null)
{
foreach (Delegates.FindBinding_AfterArgs toInvoke in _afterFindBinding.GetInvocationList())
{
try
{
retVal = _afterFindBinding.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookHardRemoveBinding()
{
if (!HookedList.Contains("HardRemoveBinding"))
{
HookedList.Add("HardRemoveBinding");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "HardRemoveBinding", true), HardRemoveBinding);

}
}
internal static event Delegates.HardRemoveBinding_BeforeArgs _beforeHardRemoveBinding;
internal static event Delegates.HardRemoveBinding_AfterArgs _afterHardRemoveBinding;
private static void HardRemoveBinding(Action<InControl.PlayerAction,  InControl.BindingSource> orig, InControl.PlayerAction self,  InControl.BindingSource binding)
{
Delegates.Params_HardRemoveBinding @params = new() 
{
self = self
, binding = binding
};
if (_beforeHardRemoveBinding != null)
{
foreach (Delegates.HardRemoveBinding_BeforeArgs toInvoke in _beforeHardRemoveBinding.GetInvocationList())
{
try
{
_beforeHardRemoveBinding?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
binding = @params.binding;
orig(self, binding);
if (_afterHardRemoveBinding != null)
{
foreach (Delegates.HardRemoveBinding_AfterArgs toInvoke in _afterHardRemoveBinding.GetInvocationList())
{
try
{
_afterHardRemoveBinding.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookRemoveBinding()
{
if (!HookedList.Contains("RemoveBinding"))
{
HookedList.Add("RemoveBinding");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "RemoveBinding", true), RemoveBinding);

}
}
internal static event Delegates.RemoveBinding_BeforeArgs _beforeRemoveBinding;
internal static event Delegates.RemoveBinding_AfterArgs _afterRemoveBinding;
private static void RemoveBinding(Action<InControl.PlayerAction,  InControl.BindingSource> orig, InControl.PlayerAction self,  InControl.BindingSource binding)
{
Delegates.Params_RemoveBinding @params = new() 
{
self = self
, binding = binding
};
if (_beforeRemoveBinding != null)
{
foreach (Delegates.RemoveBinding_BeforeArgs toInvoke in _beforeRemoveBinding.GetInvocationList())
{
try
{
_beforeRemoveBinding?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
binding = @params.binding;
orig(self, binding);
if (_afterRemoveBinding != null)
{
foreach (Delegates.RemoveBinding_AfterArgs toInvoke in _afterRemoveBinding.GetInvocationList())
{
try
{
_afterRemoveBinding.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookRemoveBindingAt()
{
if (!HookedList.Contains("RemoveBindingAt"))
{
HookedList.Add("RemoveBindingAt");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "RemoveBindingAt", true), RemoveBindingAt);

}
}
internal static event Delegates.RemoveBindingAt_BeforeArgs _beforeRemoveBindingAt;
internal static event Delegates.RemoveBindingAt_AfterArgs _afterRemoveBindingAt;
private static void RemoveBindingAt(Action<InControl.PlayerAction,  int> orig, InControl.PlayerAction self,  int index)
{
Delegates.Params_RemoveBindingAt @params = new() 
{
self = self
, index = index
};
if (_beforeRemoveBindingAt != null)
{
foreach (Delegates.RemoveBindingAt_BeforeArgs toInvoke in _beforeRemoveBindingAt.GetInvocationList())
{
try
{
_beforeRemoveBindingAt?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
index = @params.index;
orig(self, index);
if (_afterRemoveBindingAt != null)
{
foreach (Delegates.RemoveBindingAt_AfterArgs toInvoke in _afterRemoveBindingAt.GetInvocationList())
{
try
{
_afterRemoveBindingAt.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCountBindingsOfType()
{
if (!HookedList.Contains("CountBindingsOfType"))
{
HookedList.Add("CountBindingsOfType");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "CountBindingsOfType", true), CountBindingsOfType);

}
}
internal static event Delegates.CountBindingsOfType_BeforeArgs _beforeCountBindingsOfType;
internal static event Delegates.CountBindingsOfType_AfterArgs _afterCountBindingsOfType;
private static int CountBindingsOfType(Func<InControl.PlayerAction,  InControl.BindingSourceType, int> orig, InControl.PlayerAction self,  InControl.BindingSourceType bindingSourceType)
{
Delegates.Params_CountBindingsOfType @params = new() 
{
self = self
, bindingSourceType = bindingSourceType
};
if (_beforeCountBindingsOfType != null)
{
foreach (Delegates.CountBindingsOfType_BeforeArgs toInvoke in _beforeCountBindingsOfType.GetInvocationList())
{
try
{
_beforeCountBindingsOfType?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
bindingSourceType = @params.bindingSourceType;
var retVal = orig(self, bindingSourceType);
if (_afterCountBindingsOfType != null)
{
foreach (Delegates.CountBindingsOfType_AfterArgs toInvoke in _afterCountBindingsOfType.GetInvocationList())
{
try
{
retVal = _afterCountBindingsOfType.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookRemoveFirstBindingOfType()
{
if (!HookedList.Contains("RemoveFirstBindingOfType"))
{
HookedList.Add("RemoveFirstBindingOfType");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "RemoveFirstBindingOfType", true), RemoveFirstBindingOfType);

}
}
internal static event Delegates.RemoveFirstBindingOfType_BeforeArgs _beforeRemoveFirstBindingOfType;
internal static event Delegates.RemoveFirstBindingOfType_AfterArgs _afterRemoveFirstBindingOfType;
private static void RemoveFirstBindingOfType(Action<InControl.PlayerAction,  InControl.BindingSourceType> orig, InControl.PlayerAction self,  InControl.BindingSourceType bindingSourceType)
{
Delegates.Params_RemoveFirstBindingOfType @params = new() 
{
self = self
, bindingSourceType = bindingSourceType
};
if (_beforeRemoveFirstBindingOfType != null)
{
foreach (Delegates.RemoveFirstBindingOfType_BeforeArgs toInvoke in _beforeRemoveFirstBindingOfType.GetInvocationList())
{
try
{
_beforeRemoveFirstBindingOfType?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
bindingSourceType = @params.bindingSourceType;
orig(self, bindingSourceType);
if (_afterRemoveFirstBindingOfType != null)
{
foreach (Delegates.RemoveFirstBindingOfType_AfterArgs toInvoke in _afterRemoveFirstBindingOfType.GetInvocationList())
{
try
{
_afterRemoveFirstBindingOfType.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookIndexOfFirstInvalidBinding()
{
if (!HookedList.Contains("IndexOfFirstInvalidBinding"))
{
HookedList.Add("IndexOfFirstInvalidBinding");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "IndexOfFirstInvalidBinding", true), IndexOfFirstInvalidBinding);

}
}
internal static event Delegates.IndexOfFirstInvalidBinding_BeforeArgs _beforeIndexOfFirstInvalidBinding;
internal static event Delegates.IndexOfFirstInvalidBinding_AfterArgs _afterIndexOfFirstInvalidBinding;
private static int IndexOfFirstInvalidBinding(Func<InControl.PlayerAction, int> orig, InControl.PlayerAction self)
{
Delegates.Params_IndexOfFirstInvalidBinding @params = new() 
{
self = self
};
if (_beforeIndexOfFirstInvalidBinding != null)
{
foreach (Delegates.IndexOfFirstInvalidBinding_BeforeArgs toInvoke in _beforeIndexOfFirstInvalidBinding.GetInvocationList())
{
try
{
_beforeIndexOfFirstInvalidBinding?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterIndexOfFirstInvalidBinding != null)
{
foreach (Delegates.IndexOfFirstInvalidBinding_AfterArgs toInvoke in _afterIndexOfFirstInvalidBinding.GetInvocationList())
{
try
{
retVal = _afterIndexOfFirstInvalidBinding.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookClearBindings()
{
if (!HookedList.Contains("ClearBindings"))
{
HookedList.Add("ClearBindings");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "ClearBindings", true), ClearBindings);

}
}
internal static event Delegates.ClearBindings_BeforeArgs _beforeClearBindings;
internal static event Delegates.ClearBindings_AfterArgs _afterClearBindings;
private static void ClearBindings(Action<InControl.PlayerAction> orig, InControl.PlayerAction self)
{
Delegates.Params_ClearBindings @params = new() 
{
self = self
};
if (_beforeClearBindings != null)
{
foreach (Delegates.ClearBindings_BeforeArgs toInvoke in _beforeClearBindings.GetInvocationList())
{
try
{
_beforeClearBindings?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterClearBindings != null)
{
foreach (Delegates.ClearBindings_AfterArgs toInvoke in _afterClearBindings.GetInvocationList())
{
try
{
_afterClearBindings.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookResetBindings()
{
if (!HookedList.Contains("ResetBindings"))
{
HookedList.Add("ResetBindings");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "ResetBindings", true), ResetBindings);

}
}
internal static event Delegates.ResetBindings_BeforeArgs _beforeResetBindings;
internal static event Delegates.ResetBindings_AfterArgs _afterResetBindings;
private static void ResetBindings(Action<InControl.PlayerAction> orig, InControl.PlayerAction self)
{
Delegates.Params_ResetBindings @params = new() 
{
self = self
};
if (_beforeResetBindings != null)
{
foreach (Delegates.ResetBindings_BeforeArgs toInvoke in _beforeResetBindings.GetInvocationList())
{
try
{
_beforeResetBindings?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterResetBindings != null)
{
foreach (Delegates.ResetBindings_AfterArgs toInvoke in _afterResetBindings.GetInvocationList())
{
try
{
_afterResetBindings.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookListenForBinding()
{
if (!HookedList.Contains("ListenForBinding"))
{
HookedList.Add("ListenForBinding");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "ListenForBinding", true), ListenForBinding);

}
}
internal static event Delegates.ListenForBinding_BeforeArgs _beforeListenForBinding;
internal static event Delegates.ListenForBinding_AfterArgs _afterListenForBinding;
private static void ListenForBinding(Action<InControl.PlayerAction> orig, InControl.PlayerAction self)
{
Delegates.Params_ListenForBinding @params = new() 
{
self = self
};
if (_beforeListenForBinding != null)
{
foreach (Delegates.ListenForBinding_BeforeArgs toInvoke in _beforeListenForBinding.GetInvocationList())
{
try
{
_beforeListenForBinding?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterListenForBinding != null)
{
foreach (Delegates.ListenForBinding_AfterArgs toInvoke in _afterListenForBinding.GetInvocationList())
{
try
{
_afterListenForBinding.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookListenForBindingReplacing()
{
if (!HookedList.Contains("ListenForBindingReplacing"))
{
HookedList.Add("ListenForBindingReplacing");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "ListenForBindingReplacing", true), ListenForBindingReplacing);

}
}
internal static event Delegates.ListenForBindingReplacing_BeforeArgs _beforeListenForBindingReplacing;
internal static event Delegates.ListenForBindingReplacing_AfterArgs _afterListenForBindingReplacing;
private static void ListenForBindingReplacing(Action<InControl.PlayerAction,  InControl.BindingSource> orig, InControl.PlayerAction self,  InControl.BindingSource binding)
{
Delegates.Params_ListenForBindingReplacing @params = new() 
{
self = self
, binding = binding
};
if (_beforeListenForBindingReplacing != null)
{
foreach (Delegates.ListenForBindingReplacing_BeforeArgs toInvoke in _beforeListenForBindingReplacing.GetInvocationList())
{
try
{
_beforeListenForBindingReplacing?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
binding = @params.binding;
orig(self, binding);
if (_afterListenForBindingReplacing != null)
{
foreach (Delegates.ListenForBindingReplacing_AfterArgs toInvoke in _afterListenForBindingReplacing.GetInvocationList())
{
try
{
_afterListenForBindingReplacing.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStopListeningForBinding()
{
if (!HookedList.Contains("StopListeningForBinding"))
{
HookedList.Add("StopListeningForBinding");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "StopListeningForBinding", true), StopListeningForBinding);

}
}
internal static event Delegates.StopListeningForBinding_BeforeArgs _beforeStopListeningForBinding;
internal static event Delegates.StopListeningForBinding_AfterArgs _afterStopListeningForBinding;
private static void StopListeningForBinding(Action<InControl.PlayerAction> orig, InControl.PlayerAction self)
{
Delegates.Params_StopListeningForBinding @params = new() 
{
self = self
};
if (_beforeStopListeningForBinding != null)
{
foreach (Delegates.StopListeningForBinding_BeforeArgs toInvoke in _beforeStopListeningForBinding.GetInvocationList())
{
try
{
_beforeStopListeningForBinding?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStopListeningForBinding != null)
{
foreach (Delegates.StopListeningForBinding_AfterArgs toInvoke in _afterStopListeningForBinding.GetInvocationList())
{
try
{
_afterStopListeningForBinding.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_IsListeningForBinding()
{
if (!HookedList.Contains("get_IsListeningForBinding"))
{
HookedList.Add("get_IsListeningForBinding");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_IsListeningForBinding", true), get_IsListeningForBinding);

}
}
internal static event Delegates.get_IsListeningForBinding_BeforeArgs _beforeget_IsListeningForBinding;
internal static event Delegates.get_IsListeningForBinding_AfterArgs _afterget_IsListeningForBinding;
private static bool get_IsListeningForBinding(Func<InControl.PlayerAction, bool> orig, InControl.PlayerAction self)
{
Delegates.Params_get_IsListeningForBinding @params = new() 
{
self = self
};
if (_beforeget_IsListeningForBinding != null)
{
foreach (Delegates.get_IsListeningForBinding_BeforeArgs toInvoke in _beforeget_IsListeningForBinding.GetInvocationList())
{
try
{
_beforeget_IsListeningForBinding?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_IsListeningForBinding != null)
{
foreach (Delegates.get_IsListeningForBinding_AfterArgs toInvoke in _afterget_IsListeningForBinding.GetInvocationList())
{
try
{
retVal = _afterget_IsListeningForBinding.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_Bindings()
{
if (!HookedList.Contains("get_Bindings"))
{
HookedList.Add("get_Bindings");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_Bindings", true), get_Bindings);

}
}
internal static event Delegates.get_Bindings_BeforeArgs _beforeget_Bindings;
internal static event Delegates.get_Bindings_AfterArgs _afterget_Bindings;
private static System.Collections.ObjectModel.ReadOnlyCollection<InControl.BindingSource> get_Bindings(Func<InControl.PlayerAction, System.Collections.ObjectModel.ReadOnlyCollection<InControl.BindingSource>> orig, InControl.PlayerAction self)
{
Delegates.Params_get_Bindings @params = new() 
{
self = self
};
if (_beforeget_Bindings != null)
{
foreach (Delegates.get_Bindings_BeforeArgs toInvoke in _beforeget_Bindings.GetInvocationList())
{
try
{
_beforeget_Bindings?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_Bindings != null)
{
foreach (Delegates.get_Bindings_AfterArgs toInvoke in _afterget_Bindings.GetInvocationList())
{
try
{
retVal = _afterget_Bindings.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_UnfilteredBindings()
{
if (!HookedList.Contains("get_UnfilteredBindings"))
{
HookedList.Add("get_UnfilteredBindings");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_UnfilteredBindings", true), get_UnfilteredBindings);

}
}
internal static event Delegates.get_UnfilteredBindings_BeforeArgs _beforeget_UnfilteredBindings;
internal static event Delegates.get_UnfilteredBindings_AfterArgs _afterget_UnfilteredBindings;
private static System.Collections.ObjectModel.ReadOnlyCollection<InControl.BindingSource> get_UnfilteredBindings(Func<InControl.PlayerAction, System.Collections.ObjectModel.ReadOnlyCollection<InControl.BindingSource>> orig, InControl.PlayerAction self)
{
Delegates.Params_get_UnfilteredBindings @params = new() 
{
self = self
};
if (_beforeget_UnfilteredBindings != null)
{
foreach (Delegates.get_UnfilteredBindings_BeforeArgs toInvoke in _beforeget_UnfilteredBindings.GetInvocationList())
{
try
{
_beforeget_UnfilteredBindings?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_UnfilteredBindings != null)
{
foreach (Delegates.get_UnfilteredBindings_AfterArgs toInvoke in _afterget_UnfilteredBindings.GetInvocationList())
{
try
{
retVal = _afterget_UnfilteredBindings.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookRemoveOrphanedBindings()
{
if (!HookedList.Contains("RemoveOrphanedBindings"))
{
HookedList.Add("RemoveOrphanedBindings");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "RemoveOrphanedBindings", true), RemoveOrphanedBindings);

}
}
internal static event Delegates.RemoveOrphanedBindings_BeforeArgs _beforeRemoveOrphanedBindings;
internal static event Delegates.RemoveOrphanedBindings_AfterArgs _afterRemoveOrphanedBindings;
private static void RemoveOrphanedBindings(Action<InControl.PlayerAction> orig, InControl.PlayerAction self)
{
Delegates.Params_RemoveOrphanedBindings @params = new() 
{
self = self
};
if (_beforeRemoveOrphanedBindings != null)
{
foreach (Delegates.RemoveOrphanedBindings_BeforeArgs toInvoke in _beforeRemoveOrphanedBindings.GetInvocationList())
{
try
{
_beforeRemoveOrphanedBindings?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterRemoveOrphanedBindings != null)
{
foreach (Delegates.RemoveOrphanedBindings_AfterArgs toInvoke in _afterRemoveOrphanedBindings.GetInvocationList())
{
try
{
_afterRemoveOrphanedBindings.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdate()
{
if (!HookedList.Contains("Update"))
{
HookedList.Add("Update");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "Update", true), Update);

}
}
internal static event Delegates.Update_BeforeArgs _beforeUpdate;
internal static event Delegates.Update_AfterArgs _afterUpdate;
private static void Update(Action<InControl.PlayerAction,  ulong,  float,  InControl.InputDevice> orig, InControl.PlayerAction self,  ulong updateTick,  float deltaTime,  InControl.InputDevice device)
{
Delegates.Params_Update @params = new() 
{
self = self
, updateTick = updateTick
, deltaTime = deltaTime
, device = device
};
if (_beforeUpdate != null)
{
foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
{
try
{
_beforeUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
updateTick = @params.updateTick;
deltaTime = @params.deltaTime;
device = @params.device;
orig(self, updateTick, deltaTime, device);
if (_afterUpdate != null)
{
foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
{
try
{
_afterUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateBindings()
{
if (!HookedList.Contains("UpdateBindings"))
{
HookedList.Add("UpdateBindings");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "UpdateBindings", true), UpdateBindings);

}
}
internal static event Delegates.UpdateBindings_BeforeArgs _beforeUpdateBindings;
internal static event Delegates.UpdateBindings_AfterArgs _afterUpdateBindings;
private static void UpdateBindings(Action<InControl.PlayerAction,  ulong,  float> orig, InControl.PlayerAction self,  ulong updateTick,  float deltaTime)
{
Delegates.Params_UpdateBindings @params = new() 
{
self = self
, updateTick = updateTick
, deltaTime = deltaTime
};
if (_beforeUpdateBindings != null)
{
foreach (Delegates.UpdateBindings_BeforeArgs toInvoke in _beforeUpdateBindings.GetInvocationList())
{
try
{
_beforeUpdateBindings?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
updateTick = @params.updateTick;
deltaTime = @params.deltaTime;
orig(self, updateTick, deltaTime);
if (_afterUpdateBindings != null)
{
foreach (Delegates.UpdateBindings_AfterArgs toInvoke in _afterUpdateBindings.GetInvocationList())
{
try
{
_afterUpdateBindings.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDetectBindings()
{
if (!HookedList.Contains("DetectBindings"))
{
HookedList.Add("DetectBindings");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "DetectBindings", true), DetectBindings);

}
}
internal static event Delegates.DetectBindings_BeforeArgs _beforeDetectBindings;
internal static event Delegates.DetectBindings_AfterArgs _afterDetectBindings;
private static void DetectBindings(Action<InControl.PlayerAction> orig, InControl.PlayerAction self)
{
Delegates.Params_DetectBindings @params = new() 
{
self = self
};
if (_beforeDetectBindings != null)
{
foreach (Delegates.DetectBindings_BeforeArgs toInvoke in _beforeDetectBindings.GetInvocationList())
{
try
{
_beforeDetectBindings?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterDetectBindings != null)
{
foreach (Delegates.DetectBindings_AfterArgs toInvoke in _afterDetectBindings.GetInvocationList())
{
try
{
_afterDetectBindings.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateVisibleBindings()
{
if (!HookedList.Contains("UpdateVisibleBindings"))
{
HookedList.Add("UpdateVisibleBindings");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "UpdateVisibleBindings", true), UpdateVisibleBindings);

}
}
internal static event Delegates.UpdateVisibleBindings_BeforeArgs _beforeUpdateVisibleBindings;
internal static event Delegates.UpdateVisibleBindings_AfterArgs _afterUpdateVisibleBindings;
private static void UpdateVisibleBindings(Action<InControl.PlayerAction> orig, InControl.PlayerAction self)
{
Delegates.Params_UpdateVisibleBindings @params = new() 
{
self = self
};
if (_beforeUpdateVisibleBindings != null)
{
foreach (Delegates.UpdateVisibleBindings_BeforeArgs toInvoke in _beforeUpdateVisibleBindings.GetInvocationList())
{
try
{
_beforeUpdateVisibleBindings?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateVisibleBindings != null)
{
foreach (Delegates.UpdateVisibleBindings_AfterArgs toInvoke in _afterUpdateVisibleBindings.GetInvocationList())
{
try
{
_afterUpdateVisibleBindings.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_Device()
{
if (!HookedList.Contains("get_Device"))
{
HookedList.Add("get_Device");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_Device", true), get_Device);

}
}
internal static event Delegates.get_Device_BeforeArgs _beforeget_Device;
internal static event Delegates.get_Device_AfterArgs _afterget_Device;
private static InControl.InputDevice get_Device(Func<InControl.PlayerAction, InControl.InputDevice> orig, InControl.PlayerAction self)
{
Delegates.Params_get_Device @params = new() 
{
self = self
};
if (_beforeget_Device != null)
{
foreach (Delegates.get_Device_BeforeArgs toInvoke in _beforeget_Device.GetInvocationList())
{
try
{
_beforeget_Device?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_Device != null)
{
foreach (Delegates.get_Device_AfterArgs toInvoke in _afterget_Device.GetInvocationList())
{
try
{
retVal = _afterget_Device.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_Device()
{
if (!HookedList.Contains("set_Device"))
{
HookedList.Add("set_Device");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "set_Device", true), set_Device);

}
}
internal static event Delegates.set_Device_BeforeArgs _beforeset_Device;
internal static event Delegates.set_Device_AfterArgs _afterset_Device;
private static void set_Device(Action<InControl.PlayerAction,  InControl.InputDevice> orig, InControl.PlayerAction self,  InControl.InputDevice value)
{
Delegates.Params_set_Device @params = new() 
{
self = self
, value = value
};
if (_beforeset_Device != null)
{
foreach (Delegates.set_Device_BeforeArgs toInvoke in _beforeset_Device.GetInvocationList())
{
try
{
_beforeset_Device?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_Device != null)
{
foreach (Delegates.set_Device_AfterArgs toInvoke in _afterset_Device.GetInvocationList())
{
try
{
_afterset_Device.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_ActiveDevice()
{
if (!HookedList.Contains("get_ActiveDevice"))
{
HookedList.Add("get_ActiveDevice");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_ActiveDevice", true), get_ActiveDevice);

}
}
internal static event Delegates.get_ActiveDevice_BeforeArgs _beforeget_ActiveDevice;
internal static event Delegates.get_ActiveDevice_AfterArgs _afterget_ActiveDevice;
private static InControl.InputDevice get_ActiveDevice(Func<InControl.PlayerAction, InControl.InputDevice> orig, InControl.PlayerAction self)
{
Delegates.Params_get_ActiveDevice @params = new() 
{
self = self
};
if (_beforeget_ActiveDevice != null)
{
foreach (Delegates.get_ActiveDevice_BeforeArgs toInvoke in _beforeget_ActiveDevice.GetInvocationList())
{
try
{
_beforeget_ActiveDevice?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_ActiveDevice != null)
{
foreach (Delegates.get_ActiveDevice_AfterArgs toInvoke in _afterget_ActiveDevice.GetInvocationList())
{
try
{
retVal = _afterget_ActiveDevice.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_LastInputTypeIsDevice()
{
if (!HookedList.Contains("get_LastInputTypeIsDevice"))
{
HookedList.Add("get_LastInputTypeIsDevice");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_LastInputTypeIsDevice", true), get_LastInputTypeIsDevice);

}
}
internal static event Delegates.get_LastInputTypeIsDevice_BeforeArgs _beforeget_LastInputTypeIsDevice;
internal static event Delegates.get_LastInputTypeIsDevice_AfterArgs _afterget_LastInputTypeIsDevice;
private static bool get_LastInputTypeIsDevice(Func<InControl.PlayerAction, bool> orig, InControl.PlayerAction self)
{
Delegates.Params_get_LastInputTypeIsDevice @params = new() 
{
self = self
};
if (_beforeget_LastInputTypeIsDevice != null)
{
foreach (Delegates.get_LastInputTypeIsDevice_BeforeArgs toInvoke in _beforeget_LastInputTypeIsDevice.GetInvocationList())
{
try
{
_beforeget_LastInputTypeIsDevice?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_LastInputTypeIsDevice != null)
{
foreach (Delegates.get_LastInputTypeIsDevice_AfterArgs toInvoke in _afterget_LastInputTypeIsDevice.GetInvocationList())
{
try
{
retVal = _afterget_LastInputTypeIsDevice.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_LowerDeadZone()
{
if (!HookedList.Contains("get_LowerDeadZone"))
{
HookedList.Add("get_LowerDeadZone");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_LowerDeadZone", true), get_LowerDeadZone);

}
}
internal static event Delegates.get_LowerDeadZone_BeforeArgs _beforeget_LowerDeadZone;
internal static event Delegates.get_LowerDeadZone_AfterArgs _afterget_LowerDeadZone;
private static float get_LowerDeadZone(Func<InControl.PlayerAction, float> orig, InControl.PlayerAction self)
{
Delegates.Params_get_LowerDeadZone @params = new() 
{
self = self
};
if (_beforeget_LowerDeadZone != null)
{
foreach (Delegates.get_LowerDeadZone_BeforeArgs toInvoke in _beforeget_LowerDeadZone.GetInvocationList())
{
try
{
_beforeget_LowerDeadZone?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_LowerDeadZone != null)
{
foreach (Delegates.get_LowerDeadZone_AfterArgs toInvoke in _afterget_LowerDeadZone.GetInvocationList())
{
try
{
retVal = _afterget_LowerDeadZone.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_LowerDeadZone()
{
if (!HookedList.Contains("set_LowerDeadZone"))
{
HookedList.Add("set_LowerDeadZone");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "set_LowerDeadZone", true), set_LowerDeadZone);

}
}
internal static event Delegates.set_LowerDeadZone_BeforeArgs _beforeset_LowerDeadZone;
internal static event Delegates.set_LowerDeadZone_AfterArgs _afterset_LowerDeadZone;
private static void set_LowerDeadZone(Action<InControl.PlayerAction,  float> orig, InControl.PlayerAction self,  float value)
{
Delegates.Params_set_LowerDeadZone @params = new() 
{
self = self
, value = value
};
if (_beforeset_LowerDeadZone != null)
{
foreach (Delegates.set_LowerDeadZone_BeforeArgs toInvoke in _beforeset_LowerDeadZone.GetInvocationList())
{
try
{
_beforeset_LowerDeadZone?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_LowerDeadZone != null)
{
foreach (Delegates.set_LowerDeadZone_AfterArgs toInvoke in _afterset_LowerDeadZone.GetInvocationList())
{
try
{
_afterset_LowerDeadZone.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_UpperDeadZone()
{
if (!HookedList.Contains("get_UpperDeadZone"))
{
HookedList.Add("get_UpperDeadZone");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_UpperDeadZone", true), get_UpperDeadZone);

}
}
internal static event Delegates.get_UpperDeadZone_BeforeArgs _beforeget_UpperDeadZone;
internal static event Delegates.get_UpperDeadZone_AfterArgs _afterget_UpperDeadZone;
private static float get_UpperDeadZone(Func<InControl.PlayerAction, float> orig, InControl.PlayerAction self)
{
Delegates.Params_get_UpperDeadZone @params = new() 
{
self = self
};
if (_beforeget_UpperDeadZone != null)
{
foreach (Delegates.get_UpperDeadZone_BeforeArgs toInvoke in _beforeget_UpperDeadZone.GetInvocationList())
{
try
{
_beforeget_UpperDeadZone?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_UpperDeadZone != null)
{
foreach (Delegates.get_UpperDeadZone_AfterArgs toInvoke in _afterget_UpperDeadZone.GetInvocationList())
{
try
{
retVal = _afterget_UpperDeadZone.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_UpperDeadZone()
{
if (!HookedList.Contains("set_UpperDeadZone"))
{
HookedList.Add("set_UpperDeadZone");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "set_UpperDeadZone", true), set_UpperDeadZone);

}
}
internal static event Delegates.set_UpperDeadZone_BeforeArgs _beforeset_UpperDeadZone;
internal static event Delegates.set_UpperDeadZone_AfterArgs _afterset_UpperDeadZone;
private static void set_UpperDeadZone(Action<InControl.PlayerAction,  float> orig, InControl.PlayerAction self,  float value)
{
Delegates.Params_set_UpperDeadZone @params = new() 
{
self = self
, value = value
};
if (_beforeset_UpperDeadZone != null)
{
foreach (Delegates.set_UpperDeadZone_BeforeArgs toInvoke in _beforeset_UpperDeadZone.GetInvocationList())
{
try
{
_beforeset_UpperDeadZone?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_UpperDeadZone != null)
{
foreach (Delegates.set_UpperDeadZone_AfterArgs toInvoke in _afterset_UpperDeadZone.GetInvocationList())
{
try
{
_afterset_UpperDeadZone.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookLoad()
{
if (!HookedList.Contains("Load"))
{
HookedList.Add("Load");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "Load", true), Load);

}
}
internal static event Delegates.Load_BeforeArgs _beforeLoad;
internal static event Delegates.Load_AfterArgs _afterLoad;
private static void Load(Action<InControl.PlayerAction,  System.IO.BinaryReader,  ushort> orig, InControl.PlayerAction self,  System.IO.BinaryReader reader,  ushort dataFormatVersion)
{
Delegates.Params_Load @params = new() 
{
self = self
, reader = reader
, dataFormatVersion = dataFormatVersion
};
if (_beforeLoad != null)
{
foreach (Delegates.Load_BeforeArgs toInvoke in _beforeLoad.GetInvocationList())
{
try
{
_beforeLoad?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
reader = @params.reader;
dataFormatVersion = @params.dataFormatVersion;
orig(self, reader, dataFormatVersion);
if (_afterLoad != null)
{
foreach (Delegates.Load_AfterArgs toInvoke in _afterLoad.GetInvocationList())
{
try
{
_afterLoad.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSave()
{
if (!HookedList.Contains("Save"))
{
HookedList.Add("Save");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "Save", true), Save);

}
}
internal static event Delegates.Save_BeforeArgs _beforeSave;
internal static event Delegates.Save_AfterArgs _afterSave;
private static void Save(Action<InControl.PlayerAction,  System.IO.BinaryWriter> orig, InControl.PlayerAction self,  System.IO.BinaryWriter writer)
{
Delegates.Params_Save @params = new() 
{
self = self
, writer = writer
};
if (_beforeSave != null)
{
foreach (Delegates.Save_BeforeArgs toInvoke in _beforeSave.GetInvocationList())
{
try
{
_beforeSave?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
writer = @params.writer;
orig(self, writer);
if (_afterSave != null)
{
foreach (Delegates.Save_AfterArgs toInvoke in _afterSave.GetInvocationList())
{
try
{
_afterSave.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_Name
{
public InControl.PlayerAction self;
}
public delegate void get_Name_BeforeArgs(Params_get_Name args);
public delegate string get_Name_AfterArgs(Params_get_Name args, string ret);
public delegate string get_Name_WithArgs (Func<InControl.PlayerAction, string> orig, InControl.PlayerAction self);
public sealed class Params_set_Name
{
public InControl.PlayerAction self;
public string value;
}
public delegate void set_Name_BeforeArgs(Params_set_Name args);
public delegate void set_Name_AfterArgs(Params_set_Name args);
public delegate void set_Name_WithArgs (Action<InControl.PlayerAction,  string> orig, InControl.PlayerAction self,  string value);
public sealed class Params_get_Owner
{
public InControl.PlayerAction self;
}
public delegate void get_Owner_BeforeArgs(Params_get_Owner args);
public delegate InControl.PlayerActionSet get_Owner_AfterArgs(Params_get_Owner args, InControl.PlayerActionSet ret);
public delegate InControl.PlayerActionSet get_Owner_WithArgs (Func<InControl.PlayerAction, InControl.PlayerActionSet> orig, InControl.PlayerAction self);
public sealed class Params_set_Owner
{
public InControl.PlayerAction self;
public InControl.PlayerActionSet value;
}
public delegate void set_Owner_BeforeArgs(Params_set_Owner args);
public delegate void set_Owner_AfterArgs(Params_set_Owner args);
public delegate void set_Owner_WithArgs (Action<InControl.PlayerAction,  InControl.PlayerActionSet> orig, InControl.PlayerAction self,  InControl.PlayerActionSet value);
public sealed class Params_get_UserData
{
public InControl.PlayerAction self;
}
public delegate void get_UserData_BeforeArgs(Params_get_UserData args);
public delegate System.Object get_UserData_AfterArgs(Params_get_UserData args, System.Object ret);
public delegate System.Object get_UserData_WithArgs (Func<InControl.PlayerAction, System.Object> orig, InControl.PlayerAction self);
public sealed class Params_set_UserData
{
public InControl.PlayerAction self;
public System.Object value;
}
public delegate void set_UserData_BeforeArgs(Params_set_UserData args);
public delegate void set_UserData_AfterArgs(Params_set_UserData args);
public delegate void set_UserData_WithArgs (Action<InControl.PlayerAction,  System.Object> orig, InControl.PlayerAction self,  System.Object value);
public sealed class Params_AddDefaultBinding_BindingSource
{
public InControl.PlayerAction self;
public InControl.BindingSource binding;
}
public delegate void AddDefaultBinding_BindingSource_BeforeArgs(Params_AddDefaultBinding_BindingSource args);
public delegate void AddDefaultBinding_BindingSource_AfterArgs(Params_AddDefaultBinding_BindingSource args);
public delegate void AddDefaultBinding_BindingSource_WithArgs (Action<InControl.PlayerAction,  InControl.BindingSource> orig, InControl.PlayerAction self,  InControl.BindingSource binding);
public sealed class Params_AddDefaultBinding_Array
{
public InControl.PlayerAction self;
public InControl.Key[] keys;
}
public delegate void AddDefaultBinding_Array_BeforeArgs(Params_AddDefaultBinding_Array args);
public delegate void AddDefaultBinding_Array_AfterArgs(Params_AddDefaultBinding_Array args);
public delegate void AddDefaultBinding_Array_WithArgs (Action<InControl.PlayerAction,  InControl.Key[]> orig, InControl.PlayerAction self,  InControl.Key[] keys);
public sealed class Params_AddDefaultBinding_KeyCombo
{
public InControl.PlayerAction self;
public InControl.KeyCombo keyCombo;
}
public delegate void AddDefaultBinding_KeyCombo_BeforeArgs(Params_AddDefaultBinding_KeyCombo args);
public delegate void AddDefaultBinding_KeyCombo_AfterArgs(Params_AddDefaultBinding_KeyCombo args);
public delegate void AddDefaultBinding_KeyCombo_WithArgs (Action<InControl.PlayerAction,  InControl.KeyCombo> orig, InControl.PlayerAction self,  InControl.KeyCombo keyCombo);
public sealed class Params_AddDefaultBinding_Mouse
{
public InControl.PlayerAction self;
public InControl.Mouse control;
}
public delegate void AddDefaultBinding_Mouse_BeforeArgs(Params_AddDefaultBinding_Mouse args);
public delegate void AddDefaultBinding_Mouse_AfterArgs(Params_AddDefaultBinding_Mouse args);
public delegate void AddDefaultBinding_Mouse_WithArgs (Action<InControl.PlayerAction,  InControl.Mouse> orig, InControl.PlayerAction self,  InControl.Mouse control);
public sealed class Params_AddDefaultBinding_InputControlType
{
public InControl.PlayerAction self;
public InControl.InputControlType control;
}
public delegate void AddDefaultBinding_InputControlType_BeforeArgs(Params_AddDefaultBinding_InputControlType args);
public delegate void AddDefaultBinding_InputControlType_AfterArgs(Params_AddDefaultBinding_InputControlType args);
public delegate void AddDefaultBinding_InputControlType_WithArgs (Action<InControl.PlayerAction,  InControl.InputControlType> orig, InControl.PlayerAction self,  InControl.InputControlType control);
public sealed class Params_AddBinding
{
public InControl.PlayerAction self;
public InControl.BindingSource binding;
}
public delegate void AddBinding_BeforeArgs(Params_AddBinding args);
public delegate bool AddBinding_AfterArgs(Params_AddBinding args, bool ret);
public delegate bool AddBinding_WithArgs (Func<InControl.PlayerAction,  InControl.BindingSource, bool> orig, InControl.PlayerAction self,  InControl.BindingSource binding);
public sealed class Params_InsertBindingAt
{
public InControl.PlayerAction self;
public int index;
public InControl.BindingSource binding;
}
public delegate void InsertBindingAt_BeforeArgs(Params_InsertBindingAt args);
public delegate bool InsertBindingAt_AfterArgs(Params_InsertBindingAt args, bool ret);
public delegate bool InsertBindingAt_WithArgs (Func<InControl.PlayerAction,  int,  InControl.BindingSource, bool> orig, InControl.PlayerAction self,  int index,  InControl.BindingSource binding);
public sealed class Params_ReplaceBinding
{
public InControl.PlayerAction self;
public InControl.BindingSource findBinding;
public InControl.BindingSource withBinding;
}
public delegate void ReplaceBinding_BeforeArgs(Params_ReplaceBinding args);
public delegate bool ReplaceBinding_AfterArgs(Params_ReplaceBinding args, bool ret);
public delegate bool ReplaceBinding_WithArgs (Func<InControl.PlayerAction,  InControl.BindingSource,  InControl.BindingSource, bool> orig, InControl.PlayerAction self,  InControl.BindingSource findBinding,  InControl.BindingSource withBinding);
public sealed class Params_HasBinding
{
public InControl.PlayerAction self;
public InControl.BindingSource binding;
}
public delegate void HasBinding_BeforeArgs(Params_HasBinding args);
public delegate bool HasBinding_AfterArgs(Params_HasBinding args, bool ret);
public delegate bool HasBinding_WithArgs (Func<InControl.PlayerAction,  InControl.BindingSource, bool> orig, InControl.PlayerAction self,  InControl.BindingSource binding);
public sealed class Params_FindBinding
{
public InControl.PlayerAction self;
public InControl.BindingSource binding;
}
public delegate void FindBinding_BeforeArgs(Params_FindBinding args);
public delegate InControl.BindingSource FindBinding_AfterArgs(Params_FindBinding args, InControl.BindingSource ret);
public delegate InControl.BindingSource FindBinding_WithArgs (Func<InControl.PlayerAction,  InControl.BindingSource, InControl.BindingSource> orig, InControl.PlayerAction self,  InControl.BindingSource binding);
public sealed class Params_HardRemoveBinding
{
public InControl.PlayerAction self;
public InControl.BindingSource binding;
}
public delegate void HardRemoveBinding_BeforeArgs(Params_HardRemoveBinding args);
public delegate void HardRemoveBinding_AfterArgs(Params_HardRemoveBinding args);
public delegate void HardRemoveBinding_WithArgs (Action<InControl.PlayerAction,  InControl.BindingSource> orig, InControl.PlayerAction self,  InControl.BindingSource binding);
public sealed class Params_RemoveBinding
{
public InControl.PlayerAction self;
public InControl.BindingSource binding;
}
public delegate void RemoveBinding_BeforeArgs(Params_RemoveBinding args);
public delegate void RemoveBinding_AfterArgs(Params_RemoveBinding args);
public delegate void RemoveBinding_WithArgs (Action<InControl.PlayerAction,  InControl.BindingSource> orig, InControl.PlayerAction self,  InControl.BindingSource binding);
public sealed class Params_RemoveBindingAt
{
public InControl.PlayerAction self;
public int index;
}
public delegate void RemoveBindingAt_BeforeArgs(Params_RemoveBindingAt args);
public delegate void RemoveBindingAt_AfterArgs(Params_RemoveBindingAt args);
public delegate void RemoveBindingAt_WithArgs (Action<InControl.PlayerAction,  int> orig, InControl.PlayerAction self,  int index);
public sealed class Params_CountBindingsOfType
{
public InControl.PlayerAction self;
public InControl.BindingSourceType bindingSourceType;
}
public delegate void CountBindingsOfType_BeforeArgs(Params_CountBindingsOfType args);
public delegate int CountBindingsOfType_AfterArgs(Params_CountBindingsOfType args, int ret);
public delegate int CountBindingsOfType_WithArgs (Func<InControl.PlayerAction,  InControl.BindingSourceType, int> orig, InControl.PlayerAction self,  InControl.BindingSourceType bindingSourceType);
public sealed class Params_RemoveFirstBindingOfType
{
public InControl.PlayerAction self;
public InControl.BindingSourceType bindingSourceType;
}
public delegate void RemoveFirstBindingOfType_BeforeArgs(Params_RemoveFirstBindingOfType args);
public delegate void RemoveFirstBindingOfType_AfterArgs(Params_RemoveFirstBindingOfType args);
public delegate void RemoveFirstBindingOfType_WithArgs (Action<InControl.PlayerAction,  InControl.BindingSourceType> orig, InControl.PlayerAction self,  InControl.BindingSourceType bindingSourceType);
public sealed class Params_IndexOfFirstInvalidBinding
{
public InControl.PlayerAction self;
}
public delegate void IndexOfFirstInvalidBinding_BeforeArgs(Params_IndexOfFirstInvalidBinding args);
public delegate int IndexOfFirstInvalidBinding_AfterArgs(Params_IndexOfFirstInvalidBinding args, int ret);
public delegate int IndexOfFirstInvalidBinding_WithArgs (Func<InControl.PlayerAction, int> orig, InControl.PlayerAction self);
public sealed class Params_ClearBindings
{
public InControl.PlayerAction self;
}
public delegate void ClearBindings_BeforeArgs(Params_ClearBindings args);
public delegate void ClearBindings_AfterArgs(Params_ClearBindings args);
public delegate void ClearBindings_WithArgs (Action<InControl.PlayerAction> orig, InControl.PlayerAction self);
public sealed class Params_ResetBindings
{
public InControl.PlayerAction self;
}
public delegate void ResetBindings_BeforeArgs(Params_ResetBindings args);
public delegate void ResetBindings_AfterArgs(Params_ResetBindings args);
public delegate void ResetBindings_WithArgs (Action<InControl.PlayerAction> orig, InControl.PlayerAction self);
public sealed class Params_ListenForBinding
{
public InControl.PlayerAction self;
}
public delegate void ListenForBinding_BeforeArgs(Params_ListenForBinding args);
public delegate void ListenForBinding_AfterArgs(Params_ListenForBinding args);
public delegate void ListenForBinding_WithArgs (Action<InControl.PlayerAction> orig, InControl.PlayerAction self);
public sealed class Params_ListenForBindingReplacing
{
public InControl.PlayerAction self;
public InControl.BindingSource binding;
}
public delegate void ListenForBindingReplacing_BeforeArgs(Params_ListenForBindingReplacing args);
public delegate void ListenForBindingReplacing_AfterArgs(Params_ListenForBindingReplacing args);
public delegate void ListenForBindingReplacing_WithArgs (Action<InControl.PlayerAction,  InControl.BindingSource> orig, InControl.PlayerAction self,  InControl.BindingSource binding);
public sealed class Params_StopListeningForBinding
{
public InControl.PlayerAction self;
}
public delegate void StopListeningForBinding_BeforeArgs(Params_StopListeningForBinding args);
public delegate void StopListeningForBinding_AfterArgs(Params_StopListeningForBinding args);
public delegate void StopListeningForBinding_WithArgs (Action<InControl.PlayerAction> orig, InControl.PlayerAction self);
public sealed class Params_get_IsListeningForBinding
{
public InControl.PlayerAction self;
}
public delegate void get_IsListeningForBinding_BeforeArgs(Params_get_IsListeningForBinding args);
public delegate bool get_IsListeningForBinding_AfterArgs(Params_get_IsListeningForBinding args, bool ret);
public delegate bool get_IsListeningForBinding_WithArgs (Func<InControl.PlayerAction, bool> orig, InControl.PlayerAction self);
public sealed class Params_get_Bindings
{
public InControl.PlayerAction self;
}
public delegate void get_Bindings_BeforeArgs(Params_get_Bindings args);
public delegate System.Collections.ObjectModel.ReadOnlyCollection<InControl.BindingSource> get_Bindings_AfterArgs(Params_get_Bindings args, System.Collections.ObjectModel.ReadOnlyCollection<InControl.BindingSource> ret);
public delegate System.Collections.ObjectModel.ReadOnlyCollection<InControl.BindingSource> get_Bindings_WithArgs (Func<InControl.PlayerAction, System.Collections.ObjectModel.ReadOnlyCollection<InControl.BindingSource>> orig, InControl.PlayerAction self);
public sealed class Params_get_UnfilteredBindings
{
public InControl.PlayerAction self;
}
public delegate void get_UnfilteredBindings_BeforeArgs(Params_get_UnfilteredBindings args);
public delegate System.Collections.ObjectModel.ReadOnlyCollection<InControl.BindingSource> get_UnfilteredBindings_AfterArgs(Params_get_UnfilteredBindings args, System.Collections.ObjectModel.ReadOnlyCollection<InControl.BindingSource> ret);
public delegate System.Collections.ObjectModel.ReadOnlyCollection<InControl.BindingSource> get_UnfilteredBindings_WithArgs (Func<InControl.PlayerAction, System.Collections.ObjectModel.ReadOnlyCollection<InControl.BindingSource>> orig, InControl.PlayerAction self);
public sealed class Params_RemoveOrphanedBindings
{
public InControl.PlayerAction self;
}
public delegate void RemoveOrphanedBindings_BeforeArgs(Params_RemoveOrphanedBindings args);
public delegate void RemoveOrphanedBindings_AfterArgs(Params_RemoveOrphanedBindings args);
public delegate void RemoveOrphanedBindings_WithArgs (Action<InControl.PlayerAction> orig, InControl.PlayerAction self);
public sealed class Params_Update
{
public InControl.PlayerAction self;
public ulong updateTick;
public float deltaTime;
public InControl.InputDevice device;
}
public delegate void Update_BeforeArgs(Params_Update args);
public delegate void Update_AfterArgs(Params_Update args);
public delegate void Update_WithArgs (Action<InControl.PlayerAction,  ulong,  float,  InControl.InputDevice> orig, InControl.PlayerAction self,  ulong updateTick,  float deltaTime,  InControl.InputDevice device);
public sealed class Params_UpdateBindings
{
public InControl.PlayerAction self;
public ulong updateTick;
public float deltaTime;
}
public delegate void UpdateBindings_BeforeArgs(Params_UpdateBindings args);
public delegate void UpdateBindings_AfterArgs(Params_UpdateBindings args);
public delegate void UpdateBindings_WithArgs (Action<InControl.PlayerAction,  ulong,  float> orig, InControl.PlayerAction self,  ulong updateTick,  float deltaTime);
public sealed class Params_DetectBindings
{
public InControl.PlayerAction self;
}
public delegate void DetectBindings_BeforeArgs(Params_DetectBindings args);
public delegate void DetectBindings_AfterArgs(Params_DetectBindings args);
public delegate void DetectBindings_WithArgs (Action<InControl.PlayerAction> orig, InControl.PlayerAction self);
public sealed class Params_UpdateVisibleBindings
{
public InControl.PlayerAction self;
}
public delegate void UpdateVisibleBindings_BeforeArgs(Params_UpdateVisibleBindings args);
public delegate void UpdateVisibleBindings_AfterArgs(Params_UpdateVisibleBindings args);
public delegate void UpdateVisibleBindings_WithArgs (Action<InControl.PlayerAction> orig, InControl.PlayerAction self);
public sealed class Params_get_Device
{
public InControl.PlayerAction self;
}
public delegate void get_Device_BeforeArgs(Params_get_Device args);
public delegate InControl.InputDevice get_Device_AfterArgs(Params_get_Device args, InControl.InputDevice ret);
public delegate InControl.InputDevice get_Device_WithArgs (Func<InControl.PlayerAction, InControl.InputDevice> orig, InControl.PlayerAction self);
public sealed class Params_set_Device
{
public InControl.PlayerAction self;
public InControl.InputDevice value;
}
public delegate void set_Device_BeforeArgs(Params_set_Device args);
public delegate void set_Device_AfterArgs(Params_set_Device args);
public delegate void set_Device_WithArgs (Action<InControl.PlayerAction,  InControl.InputDevice> orig, InControl.PlayerAction self,  InControl.InputDevice value);
public sealed class Params_get_ActiveDevice
{
public InControl.PlayerAction self;
}
public delegate void get_ActiveDevice_BeforeArgs(Params_get_ActiveDevice args);
public delegate InControl.InputDevice get_ActiveDevice_AfterArgs(Params_get_ActiveDevice args, InControl.InputDevice ret);
public delegate InControl.InputDevice get_ActiveDevice_WithArgs (Func<InControl.PlayerAction, InControl.InputDevice> orig, InControl.PlayerAction self);
public sealed class Params_get_LastInputTypeIsDevice
{
public InControl.PlayerAction self;
}
public delegate void get_LastInputTypeIsDevice_BeforeArgs(Params_get_LastInputTypeIsDevice args);
public delegate bool get_LastInputTypeIsDevice_AfterArgs(Params_get_LastInputTypeIsDevice args, bool ret);
public delegate bool get_LastInputTypeIsDevice_WithArgs (Func<InControl.PlayerAction, bool> orig, InControl.PlayerAction self);
public sealed class Params_get_LowerDeadZone
{
public InControl.PlayerAction self;
}
public delegate void get_LowerDeadZone_BeforeArgs(Params_get_LowerDeadZone args);
public delegate float get_LowerDeadZone_AfterArgs(Params_get_LowerDeadZone args, float ret);
public delegate float get_LowerDeadZone_WithArgs (Func<InControl.PlayerAction, float> orig, InControl.PlayerAction self);
public sealed class Params_set_LowerDeadZone
{
public InControl.PlayerAction self;
public float value;
}
public delegate void set_LowerDeadZone_BeforeArgs(Params_set_LowerDeadZone args);
public delegate void set_LowerDeadZone_AfterArgs(Params_set_LowerDeadZone args);
public delegate void set_LowerDeadZone_WithArgs (Action<InControl.PlayerAction,  float> orig, InControl.PlayerAction self,  float value);
public sealed class Params_get_UpperDeadZone
{
public InControl.PlayerAction self;
}
public delegate void get_UpperDeadZone_BeforeArgs(Params_get_UpperDeadZone args);
public delegate float get_UpperDeadZone_AfterArgs(Params_get_UpperDeadZone args, float ret);
public delegate float get_UpperDeadZone_WithArgs (Func<InControl.PlayerAction, float> orig, InControl.PlayerAction self);
public sealed class Params_set_UpperDeadZone
{
public InControl.PlayerAction self;
public float value;
}
public delegate void set_UpperDeadZone_BeforeArgs(Params_set_UpperDeadZone args);
public delegate void set_UpperDeadZone_AfterArgs(Params_set_UpperDeadZone args);
public delegate void set_UpperDeadZone_WithArgs (Action<InControl.PlayerAction,  float> orig, InControl.PlayerAction self,  float value);
public sealed class Params_Load
{
public InControl.PlayerAction self;
public System.IO.BinaryReader reader;
public ushort dataFormatVersion;
}
public delegate void Load_BeforeArgs(Params_Load args);
public delegate void Load_AfterArgs(Params_Load args);
public delegate void Load_WithArgs (Action<InControl.PlayerAction,  System.IO.BinaryReader,  ushort> orig, InControl.PlayerAction self,  System.IO.BinaryReader reader,  ushort dataFormatVersion);
public sealed class Params_Save
{
public InControl.PlayerAction self;
public System.IO.BinaryWriter writer;
}
public delegate void Save_BeforeArgs(Params_Save args);
public delegate void Save_AfterArgs(Params_Save args);
public delegate void Save_WithArgs (Action<InControl.PlayerAction,  System.IO.BinaryWriter> orig, InControl.PlayerAction self,  System.IO.BinaryWriter writer);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_Name_BeforeArgs get_Name
{
add
{

HookHandler._beforeget_Name += value;
HookHandler.Hookget_Name();
}
remove => HookHandler._beforeget_Name -= value;
}
public static event Delegates.set_Name_BeforeArgs set_Name
{
add
{

HookHandler._beforeset_Name += value;
HookHandler.Hookset_Name();
}
remove => HookHandler._beforeset_Name -= value;
}
public static event Delegates.get_Owner_BeforeArgs get_Owner
{
add
{

HookHandler._beforeget_Owner += value;
HookHandler.Hookget_Owner();
}
remove => HookHandler._beforeget_Owner -= value;
}
public static event Delegates.set_Owner_BeforeArgs set_Owner
{
add
{

HookHandler._beforeset_Owner += value;
HookHandler.Hookset_Owner();
}
remove => HookHandler._beforeset_Owner -= value;
}
public static event Delegates.get_UserData_BeforeArgs get_UserData
{
add
{

HookHandler._beforeget_UserData += value;
HookHandler.Hookget_UserData();
}
remove => HookHandler._beforeget_UserData -= value;
}
public static event Delegates.set_UserData_BeforeArgs set_UserData
{
add
{

HookHandler._beforeset_UserData += value;
HookHandler.Hookset_UserData();
}
remove => HookHandler._beforeset_UserData -= value;
}
public static event Delegates.AddDefaultBinding_BindingSource_BeforeArgs AddDefaultBinding_BindingSource
{
add
{

HookHandler._beforeAddDefaultBinding_BindingSource += value;
HookHandler.HookAddDefaultBinding_BindingSource();
}
remove => HookHandler._beforeAddDefaultBinding_BindingSource -= value;
}
public static event Delegates.AddDefaultBinding_Array_BeforeArgs AddDefaultBinding_Array
{
add
{

HookHandler._beforeAddDefaultBinding_Array += value;
HookHandler.HookAddDefaultBinding_Array();
}
remove => HookHandler._beforeAddDefaultBinding_Array -= value;
}
public static event Delegates.AddDefaultBinding_KeyCombo_BeforeArgs AddDefaultBinding_KeyCombo
{
add
{

HookHandler._beforeAddDefaultBinding_KeyCombo += value;
HookHandler.HookAddDefaultBinding_KeyCombo();
}
remove => HookHandler._beforeAddDefaultBinding_KeyCombo -= value;
}
public static event Delegates.AddDefaultBinding_Mouse_BeforeArgs AddDefaultBinding_Mouse
{
add
{

HookHandler._beforeAddDefaultBinding_Mouse += value;
HookHandler.HookAddDefaultBinding_Mouse();
}
remove => HookHandler._beforeAddDefaultBinding_Mouse -= value;
}
public static event Delegates.AddDefaultBinding_InputControlType_BeforeArgs AddDefaultBinding_InputControlType
{
add
{

HookHandler._beforeAddDefaultBinding_InputControlType += value;
HookHandler.HookAddDefaultBinding_InputControlType();
}
remove => HookHandler._beforeAddDefaultBinding_InputControlType -= value;
}
public static event Delegates.AddBinding_BeforeArgs AddBinding
{
add
{

HookHandler._beforeAddBinding += value;
HookHandler.HookAddBinding();
}
remove => HookHandler._beforeAddBinding -= value;
}
public static event Delegates.InsertBindingAt_BeforeArgs InsertBindingAt
{
add
{

HookHandler._beforeInsertBindingAt += value;
HookHandler.HookInsertBindingAt();
}
remove => HookHandler._beforeInsertBindingAt -= value;
}
public static event Delegates.ReplaceBinding_BeforeArgs ReplaceBinding
{
add
{

HookHandler._beforeReplaceBinding += value;
HookHandler.HookReplaceBinding();
}
remove => HookHandler._beforeReplaceBinding -= value;
}
public static event Delegates.HasBinding_BeforeArgs HasBinding
{
add
{

HookHandler._beforeHasBinding += value;
HookHandler.HookHasBinding();
}
remove => HookHandler._beforeHasBinding -= value;
}
public static event Delegates.FindBinding_BeforeArgs FindBinding
{
add
{

HookHandler._beforeFindBinding += value;
HookHandler.HookFindBinding();
}
remove => HookHandler._beforeFindBinding -= value;
}
public static event Delegates.HardRemoveBinding_BeforeArgs HardRemoveBinding
{
add
{

HookHandler._beforeHardRemoveBinding += value;
HookHandler.HookHardRemoveBinding();
}
remove => HookHandler._beforeHardRemoveBinding -= value;
}
public static event Delegates.RemoveBinding_BeforeArgs RemoveBinding
{
add
{

HookHandler._beforeRemoveBinding += value;
HookHandler.HookRemoveBinding();
}
remove => HookHandler._beforeRemoveBinding -= value;
}
public static event Delegates.RemoveBindingAt_BeforeArgs RemoveBindingAt
{
add
{

HookHandler._beforeRemoveBindingAt += value;
HookHandler.HookRemoveBindingAt();
}
remove => HookHandler._beforeRemoveBindingAt -= value;
}
public static event Delegates.CountBindingsOfType_BeforeArgs CountBindingsOfType
{
add
{

HookHandler._beforeCountBindingsOfType += value;
HookHandler.HookCountBindingsOfType();
}
remove => HookHandler._beforeCountBindingsOfType -= value;
}
public static event Delegates.RemoveFirstBindingOfType_BeforeArgs RemoveFirstBindingOfType
{
add
{

HookHandler._beforeRemoveFirstBindingOfType += value;
HookHandler.HookRemoveFirstBindingOfType();
}
remove => HookHandler._beforeRemoveFirstBindingOfType -= value;
}
public static event Delegates.IndexOfFirstInvalidBinding_BeforeArgs IndexOfFirstInvalidBinding
{
add
{

HookHandler._beforeIndexOfFirstInvalidBinding += value;
HookHandler.HookIndexOfFirstInvalidBinding();
}
remove => HookHandler._beforeIndexOfFirstInvalidBinding -= value;
}
public static event Delegates.ClearBindings_BeforeArgs ClearBindings
{
add
{

HookHandler._beforeClearBindings += value;
HookHandler.HookClearBindings();
}
remove => HookHandler._beforeClearBindings -= value;
}
public static event Delegates.ResetBindings_BeforeArgs ResetBindings
{
add
{

HookHandler._beforeResetBindings += value;
HookHandler.HookResetBindings();
}
remove => HookHandler._beforeResetBindings -= value;
}
public static event Delegates.ListenForBinding_BeforeArgs ListenForBinding
{
add
{

HookHandler._beforeListenForBinding += value;
HookHandler.HookListenForBinding();
}
remove => HookHandler._beforeListenForBinding -= value;
}
public static event Delegates.ListenForBindingReplacing_BeforeArgs ListenForBindingReplacing
{
add
{

HookHandler._beforeListenForBindingReplacing += value;
HookHandler.HookListenForBindingReplacing();
}
remove => HookHandler._beforeListenForBindingReplacing -= value;
}
public static event Delegates.StopListeningForBinding_BeforeArgs StopListeningForBinding
{
add
{

HookHandler._beforeStopListeningForBinding += value;
HookHandler.HookStopListeningForBinding();
}
remove => HookHandler._beforeStopListeningForBinding -= value;
}
public static event Delegates.get_IsListeningForBinding_BeforeArgs get_IsListeningForBinding
{
add
{

HookHandler._beforeget_IsListeningForBinding += value;
HookHandler.Hookget_IsListeningForBinding();
}
remove => HookHandler._beforeget_IsListeningForBinding -= value;
}
public static event Delegates.get_Bindings_BeforeArgs get_Bindings
{
add
{

HookHandler._beforeget_Bindings += value;
HookHandler.Hookget_Bindings();
}
remove => HookHandler._beforeget_Bindings -= value;
}
public static event Delegates.get_UnfilteredBindings_BeforeArgs get_UnfilteredBindings
{
add
{

HookHandler._beforeget_UnfilteredBindings += value;
HookHandler.Hookget_UnfilteredBindings();
}
remove => HookHandler._beforeget_UnfilteredBindings -= value;
}
public static event Delegates.RemoveOrphanedBindings_BeforeArgs RemoveOrphanedBindings
{
add
{

HookHandler._beforeRemoveOrphanedBindings += value;
HookHandler.HookRemoveOrphanedBindings();
}
remove => HookHandler._beforeRemoveOrphanedBindings -= value;
}
public static event Delegates.Update_BeforeArgs Update
{
add
{

HookHandler._beforeUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._beforeUpdate -= value;
}
public static event Delegates.UpdateBindings_BeforeArgs UpdateBindings
{
add
{

HookHandler._beforeUpdateBindings += value;
HookHandler.HookUpdateBindings();
}
remove => HookHandler._beforeUpdateBindings -= value;
}
public static event Delegates.DetectBindings_BeforeArgs DetectBindings
{
add
{

HookHandler._beforeDetectBindings += value;
HookHandler.HookDetectBindings();
}
remove => HookHandler._beforeDetectBindings -= value;
}
public static event Delegates.UpdateVisibleBindings_BeforeArgs UpdateVisibleBindings
{
add
{

HookHandler._beforeUpdateVisibleBindings += value;
HookHandler.HookUpdateVisibleBindings();
}
remove => HookHandler._beforeUpdateVisibleBindings -= value;
}
public static event Delegates.get_Device_BeforeArgs get_Device
{
add
{

HookHandler._beforeget_Device += value;
HookHandler.Hookget_Device();
}
remove => HookHandler._beforeget_Device -= value;
}
public static event Delegates.set_Device_BeforeArgs set_Device
{
add
{

HookHandler._beforeset_Device += value;
HookHandler.Hookset_Device();
}
remove => HookHandler._beforeset_Device -= value;
}
public static event Delegates.get_ActiveDevice_BeforeArgs get_ActiveDevice
{
add
{

HookHandler._beforeget_ActiveDevice += value;
HookHandler.Hookget_ActiveDevice();
}
remove => HookHandler._beforeget_ActiveDevice -= value;
}
public static event Delegates.get_LastInputTypeIsDevice_BeforeArgs get_LastInputTypeIsDevice
{
add
{

HookHandler._beforeget_LastInputTypeIsDevice += value;
HookHandler.Hookget_LastInputTypeIsDevice();
}
remove => HookHandler._beforeget_LastInputTypeIsDevice -= value;
}
public static event Delegates.get_LowerDeadZone_BeforeArgs get_LowerDeadZone
{
add
{

HookHandler._beforeget_LowerDeadZone += value;
HookHandler.Hookget_LowerDeadZone();
}
remove => HookHandler._beforeget_LowerDeadZone -= value;
}
public static event Delegates.set_LowerDeadZone_BeforeArgs set_LowerDeadZone
{
add
{

HookHandler._beforeset_LowerDeadZone += value;
HookHandler.Hookset_LowerDeadZone();
}
remove => HookHandler._beforeset_LowerDeadZone -= value;
}
public static event Delegates.get_UpperDeadZone_BeforeArgs get_UpperDeadZone
{
add
{

HookHandler._beforeget_UpperDeadZone += value;
HookHandler.Hookget_UpperDeadZone();
}
remove => HookHandler._beforeget_UpperDeadZone -= value;
}
public static event Delegates.set_UpperDeadZone_BeforeArgs set_UpperDeadZone
{
add
{

HookHandler._beforeset_UpperDeadZone += value;
HookHandler.Hookset_UpperDeadZone();
}
remove => HookHandler._beforeset_UpperDeadZone -= value;
}
public static event Delegates.Load_BeforeArgs Load
{
add
{

HookHandler._beforeLoad += value;
HookHandler.HookLoad();
}
remove => HookHandler._beforeLoad -= value;
}
public static event Delegates.Save_BeforeArgs Save
{
add
{

HookHandler._beforeSave += value;
HookHandler.HookSave();
}
remove => HookHandler._beforeSave -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_Name_AfterArgs get_Name
{
add
{

HookHandler._afterget_Name += value;
HookHandler.Hookget_Name();
}
remove => HookHandler._afterget_Name -= value;
}
public static event Delegates.set_Name_AfterArgs set_Name
{
add
{

HookHandler._afterset_Name += value;
HookHandler.Hookset_Name();
}
remove => HookHandler._afterset_Name -= value;
}
public static event Delegates.get_Owner_AfterArgs get_Owner
{
add
{

HookHandler._afterget_Owner += value;
HookHandler.Hookget_Owner();
}
remove => HookHandler._afterget_Owner -= value;
}
public static event Delegates.set_Owner_AfterArgs set_Owner
{
add
{

HookHandler._afterset_Owner += value;
HookHandler.Hookset_Owner();
}
remove => HookHandler._afterset_Owner -= value;
}
public static event Delegates.get_UserData_AfterArgs get_UserData
{
add
{

HookHandler._afterget_UserData += value;
HookHandler.Hookget_UserData();
}
remove => HookHandler._afterget_UserData -= value;
}
public static event Delegates.set_UserData_AfterArgs set_UserData
{
add
{

HookHandler._afterset_UserData += value;
HookHandler.Hookset_UserData();
}
remove => HookHandler._afterset_UserData -= value;
}
public static event Delegates.AddDefaultBinding_BindingSource_AfterArgs AddDefaultBinding_BindingSource
{
add
{

HookHandler._afterAddDefaultBinding_BindingSource += value;
HookHandler.HookAddDefaultBinding_BindingSource();
}
remove => HookHandler._afterAddDefaultBinding_BindingSource -= value;
}
public static event Delegates.AddDefaultBinding_Array_AfterArgs AddDefaultBinding_Array
{
add
{

HookHandler._afterAddDefaultBinding_Array += value;
HookHandler.HookAddDefaultBinding_Array();
}
remove => HookHandler._afterAddDefaultBinding_Array -= value;
}
public static event Delegates.AddDefaultBinding_KeyCombo_AfterArgs AddDefaultBinding_KeyCombo
{
add
{

HookHandler._afterAddDefaultBinding_KeyCombo += value;
HookHandler.HookAddDefaultBinding_KeyCombo();
}
remove => HookHandler._afterAddDefaultBinding_KeyCombo -= value;
}
public static event Delegates.AddDefaultBinding_Mouse_AfterArgs AddDefaultBinding_Mouse
{
add
{

HookHandler._afterAddDefaultBinding_Mouse += value;
HookHandler.HookAddDefaultBinding_Mouse();
}
remove => HookHandler._afterAddDefaultBinding_Mouse -= value;
}
public static event Delegates.AddDefaultBinding_InputControlType_AfterArgs AddDefaultBinding_InputControlType
{
add
{

HookHandler._afterAddDefaultBinding_InputControlType += value;
HookHandler.HookAddDefaultBinding_InputControlType();
}
remove => HookHandler._afterAddDefaultBinding_InputControlType -= value;
}
public static event Delegates.AddBinding_AfterArgs AddBinding
{
add
{

HookHandler._afterAddBinding += value;
HookHandler.HookAddBinding();
}
remove => HookHandler._afterAddBinding -= value;
}
public static event Delegates.InsertBindingAt_AfterArgs InsertBindingAt
{
add
{

HookHandler._afterInsertBindingAt += value;
HookHandler.HookInsertBindingAt();
}
remove => HookHandler._afterInsertBindingAt -= value;
}
public static event Delegates.ReplaceBinding_AfterArgs ReplaceBinding
{
add
{

HookHandler._afterReplaceBinding += value;
HookHandler.HookReplaceBinding();
}
remove => HookHandler._afterReplaceBinding -= value;
}
public static event Delegates.HasBinding_AfterArgs HasBinding
{
add
{

HookHandler._afterHasBinding += value;
HookHandler.HookHasBinding();
}
remove => HookHandler._afterHasBinding -= value;
}
public static event Delegates.FindBinding_AfterArgs FindBinding
{
add
{

HookHandler._afterFindBinding += value;
HookHandler.HookFindBinding();
}
remove => HookHandler._afterFindBinding -= value;
}
public static event Delegates.HardRemoveBinding_AfterArgs HardRemoveBinding
{
add
{

HookHandler._afterHardRemoveBinding += value;
HookHandler.HookHardRemoveBinding();
}
remove => HookHandler._afterHardRemoveBinding -= value;
}
public static event Delegates.RemoveBinding_AfterArgs RemoveBinding
{
add
{

HookHandler._afterRemoveBinding += value;
HookHandler.HookRemoveBinding();
}
remove => HookHandler._afterRemoveBinding -= value;
}
public static event Delegates.RemoveBindingAt_AfterArgs RemoveBindingAt
{
add
{

HookHandler._afterRemoveBindingAt += value;
HookHandler.HookRemoveBindingAt();
}
remove => HookHandler._afterRemoveBindingAt -= value;
}
public static event Delegates.CountBindingsOfType_AfterArgs CountBindingsOfType
{
add
{

HookHandler._afterCountBindingsOfType += value;
HookHandler.HookCountBindingsOfType();
}
remove => HookHandler._afterCountBindingsOfType -= value;
}
public static event Delegates.RemoveFirstBindingOfType_AfterArgs RemoveFirstBindingOfType
{
add
{

HookHandler._afterRemoveFirstBindingOfType += value;
HookHandler.HookRemoveFirstBindingOfType();
}
remove => HookHandler._afterRemoveFirstBindingOfType -= value;
}
public static event Delegates.IndexOfFirstInvalidBinding_AfterArgs IndexOfFirstInvalidBinding
{
add
{

HookHandler._afterIndexOfFirstInvalidBinding += value;
HookHandler.HookIndexOfFirstInvalidBinding();
}
remove => HookHandler._afterIndexOfFirstInvalidBinding -= value;
}
public static event Delegates.ClearBindings_AfterArgs ClearBindings
{
add
{

HookHandler._afterClearBindings += value;
HookHandler.HookClearBindings();
}
remove => HookHandler._afterClearBindings -= value;
}
public static event Delegates.ResetBindings_AfterArgs ResetBindings
{
add
{

HookHandler._afterResetBindings += value;
HookHandler.HookResetBindings();
}
remove => HookHandler._afterResetBindings -= value;
}
public static event Delegates.ListenForBinding_AfterArgs ListenForBinding
{
add
{

HookHandler._afterListenForBinding += value;
HookHandler.HookListenForBinding();
}
remove => HookHandler._afterListenForBinding -= value;
}
public static event Delegates.ListenForBindingReplacing_AfterArgs ListenForBindingReplacing
{
add
{

HookHandler._afterListenForBindingReplacing += value;
HookHandler.HookListenForBindingReplacing();
}
remove => HookHandler._afterListenForBindingReplacing -= value;
}
public static event Delegates.StopListeningForBinding_AfterArgs StopListeningForBinding
{
add
{

HookHandler._afterStopListeningForBinding += value;
HookHandler.HookStopListeningForBinding();
}
remove => HookHandler._afterStopListeningForBinding -= value;
}
public static event Delegates.get_IsListeningForBinding_AfterArgs get_IsListeningForBinding
{
add
{

HookHandler._afterget_IsListeningForBinding += value;
HookHandler.Hookget_IsListeningForBinding();
}
remove => HookHandler._afterget_IsListeningForBinding -= value;
}
public static event Delegates.get_Bindings_AfterArgs get_Bindings
{
add
{

HookHandler._afterget_Bindings += value;
HookHandler.Hookget_Bindings();
}
remove => HookHandler._afterget_Bindings -= value;
}
public static event Delegates.get_UnfilteredBindings_AfterArgs get_UnfilteredBindings
{
add
{

HookHandler._afterget_UnfilteredBindings += value;
HookHandler.Hookget_UnfilteredBindings();
}
remove => HookHandler._afterget_UnfilteredBindings -= value;
}
public static event Delegates.RemoveOrphanedBindings_AfterArgs RemoveOrphanedBindings
{
add
{

HookHandler._afterRemoveOrphanedBindings += value;
HookHandler.HookRemoveOrphanedBindings();
}
remove => HookHandler._afterRemoveOrphanedBindings -= value;
}
public static event Delegates.Update_AfterArgs Update
{
add
{

HookHandler._afterUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._afterUpdate -= value;
}
public static event Delegates.UpdateBindings_AfterArgs UpdateBindings
{
add
{

HookHandler._afterUpdateBindings += value;
HookHandler.HookUpdateBindings();
}
remove => HookHandler._afterUpdateBindings -= value;
}
public static event Delegates.DetectBindings_AfterArgs DetectBindings
{
add
{

HookHandler._afterDetectBindings += value;
HookHandler.HookDetectBindings();
}
remove => HookHandler._afterDetectBindings -= value;
}
public static event Delegates.UpdateVisibleBindings_AfterArgs UpdateVisibleBindings
{
add
{

HookHandler._afterUpdateVisibleBindings += value;
HookHandler.HookUpdateVisibleBindings();
}
remove => HookHandler._afterUpdateVisibleBindings -= value;
}
public static event Delegates.get_Device_AfterArgs get_Device
{
add
{

HookHandler._afterget_Device += value;
HookHandler.Hookget_Device();
}
remove => HookHandler._afterget_Device -= value;
}
public static event Delegates.set_Device_AfterArgs set_Device
{
add
{

HookHandler._afterset_Device += value;
HookHandler.Hookset_Device();
}
remove => HookHandler._afterset_Device -= value;
}
public static event Delegates.get_ActiveDevice_AfterArgs get_ActiveDevice
{
add
{

HookHandler._afterget_ActiveDevice += value;
HookHandler.Hookget_ActiveDevice();
}
remove => HookHandler._afterget_ActiveDevice -= value;
}
public static event Delegates.get_LastInputTypeIsDevice_AfterArgs get_LastInputTypeIsDevice
{
add
{

HookHandler._afterget_LastInputTypeIsDevice += value;
HookHandler.Hookget_LastInputTypeIsDevice();
}
remove => HookHandler._afterget_LastInputTypeIsDevice -= value;
}
public static event Delegates.get_LowerDeadZone_AfterArgs get_LowerDeadZone
{
add
{

HookHandler._afterget_LowerDeadZone += value;
HookHandler.Hookget_LowerDeadZone();
}
remove => HookHandler._afterget_LowerDeadZone -= value;
}
public static event Delegates.set_LowerDeadZone_AfterArgs set_LowerDeadZone
{
add
{

HookHandler._afterset_LowerDeadZone += value;
HookHandler.Hookset_LowerDeadZone();
}
remove => HookHandler._afterset_LowerDeadZone -= value;
}
public static event Delegates.get_UpperDeadZone_AfterArgs get_UpperDeadZone
{
add
{

HookHandler._afterget_UpperDeadZone += value;
HookHandler.Hookget_UpperDeadZone();
}
remove => HookHandler._afterget_UpperDeadZone -= value;
}
public static event Delegates.set_UpperDeadZone_AfterArgs set_UpperDeadZone
{
add
{

HookHandler._afterset_UpperDeadZone += value;
HookHandler.Hookset_UpperDeadZone();
}
remove => HookHandler._afterset_UpperDeadZone -= value;
}
public static event Delegates.Load_AfterArgs Load
{
add
{

HookHandler._afterLoad += value;
HookHandler.HookLoad();
}
remove => HookHandler._afterLoad -= value;
}
public static event Delegates.Save_AfterArgs Save
{
add
{

HookHandler._afterSave += value;
HookHandler.HookSave();
}
remove => HookHandler._afterSave -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_Name_WithArgs get_Name
{
add => HookEndpointManager.Add<Delegates.get_Name_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_Name", true), value);
remove => HookEndpointManager.Remove<Delegates.get_Name_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_Name", true), value);
}
public static event Delegates.set_Name_WithArgs set_Name
{
add => HookEndpointManager.Add<Delegates.set_Name_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "set_Name", true), value);
remove => HookEndpointManager.Remove<Delegates.set_Name_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "set_Name", true), value);
}
public static event Delegates.get_Owner_WithArgs get_Owner
{
add => HookEndpointManager.Add<Delegates.get_Owner_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_Owner", true), value);
remove => HookEndpointManager.Remove<Delegates.get_Owner_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_Owner", true), value);
}
public static event Delegates.set_Owner_WithArgs set_Owner
{
add => HookEndpointManager.Add<Delegates.set_Owner_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "set_Owner", true), value);
remove => HookEndpointManager.Remove<Delegates.set_Owner_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "set_Owner", true), value);
}
public static event Delegates.get_UserData_WithArgs get_UserData
{
add => HookEndpointManager.Add<Delegates.get_UserData_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_UserData", true), value);
remove => HookEndpointManager.Remove<Delegates.get_UserData_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_UserData", true), value);
}
public static event Delegates.set_UserData_WithArgs set_UserData
{
add => HookEndpointManager.Add<Delegates.set_UserData_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "set_UserData", true), value);
remove => HookEndpointManager.Remove<Delegates.set_UserData_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "set_UserData", true), value);
}
public static event Delegates.AddDefaultBinding_BindingSource_WithArgs AddDefaultBinding_BindingSource
{
add => HookEndpointManager.Add<Delegates.AddDefaultBinding_BindingSource_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "AddDefaultBinding", true), value);
remove => HookEndpointManager.Remove<Delegates.AddDefaultBinding_BindingSource_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "AddDefaultBinding", true), value);
}
public static event Delegates.AddDefaultBinding_Array_WithArgs AddDefaultBinding_Array
{
add => HookEndpointManager.Add<Delegates.AddDefaultBinding_Array_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "AddDefaultBinding", true), value);
remove => HookEndpointManager.Remove<Delegates.AddDefaultBinding_Array_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "AddDefaultBinding", true), value);
}
public static event Delegates.AddDefaultBinding_KeyCombo_WithArgs AddDefaultBinding_KeyCombo
{
add => HookEndpointManager.Add<Delegates.AddDefaultBinding_KeyCombo_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "AddDefaultBinding", true), value);
remove => HookEndpointManager.Remove<Delegates.AddDefaultBinding_KeyCombo_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "AddDefaultBinding", true), value);
}
public static event Delegates.AddDefaultBinding_Mouse_WithArgs AddDefaultBinding_Mouse
{
add => HookEndpointManager.Add<Delegates.AddDefaultBinding_Mouse_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "AddDefaultBinding", true), value);
remove => HookEndpointManager.Remove<Delegates.AddDefaultBinding_Mouse_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "AddDefaultBinding", true), value);
}
public static event Delegates.AddDefaultBinding_InputControlType_WithArgs AddDefaultBinding_InputControlType
{
add => HookEndpointManager.Add<Delegates.AddDefaultBinding_InputControlType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "AddDefaultBinding", true), value);
remove => HookEndpointManager.Remove<Delegates.AddDefaultBinding_InputControlType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "AddDefaultBinding", true), value);
}
public static event Delegates.AddBinding_WithArgs AddBinding
{
add => HookEndpointManager.Add<Delegates.AddBinding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "AddBinding", true), value);
remove => HookEndpointManager.Remove<Delegates.AddBinding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "AddBinding", true), value);
}
public static event Delegates.InsertBindingAt_WithArgs InsertBindingAt
{
add => HookEndpointManager.Add<Delegates.InsertBindingAt_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "InsertBindingAt", true), value);
remove => HookEndpointManager.Remove<Delegates.InsertBindingAt_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "InsertBindingAt", true), value);
}
public static event Delegates.ReplaceBinding_WithArgs ReplaceBinding
{
add => HookEndpointManager.Add<Delegates.ReplaceBinding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "ReplaceBinding", true), value);
remove => HookEndpointManager.Remove<Delegates.ReplaceBinding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "ReplaceBinding", true), value);
}
public static event Delegates.HasBinding_WithArgs HasBinding
{
add => HookEndpointManager.Add<Delegates.HasBinding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "HasBinding", true), value);
remove => HookEndpointManager.Remove<Delegates.HasBinding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "HasBinding", true), value);
}
public static event Delegates.FindBinding_WithArgs FindBinding
{
add => HookEndpointManager.Add<Delegates.FindBinding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "FindBinding", true), value);
remove => HookEndpointManager.Remove<Delegates.FindBinding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "FindBinding", true), value);
}
public static event Delegates.HardRemoveBinding_WithArgs HardRemoveBinding
{
add => HookEndpointManager.Add<Delegates.HardRemoveBinding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "HardRemoveBinding", true), value);
remove => HookEndpointManager.Remove<Delegates.HardRemoveBinding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "HardRemoveBinding", true), value);
}
public static event Delegates.RemoveBinding_WithArgs RemoveBinding
{
add => HookEndpointManager.Add<Delegates.RemoveBinding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "RemoveBinding", true), value);
remove => HookEndpointManager.Remove<Delegates.RemoveBinding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "RemoveBinding", true), value);
}
public static event Delegates.RemoveBindingAt_WithArgs RemoveBindingAt
{
add => HookEndpointManager.Add<Delegates.RemoveBindingAt_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "RemoveBindingAt", true), value);
remove => HookEndpointManager.Remove<Delegates.RemoveBindingAt_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "RemoveBindingAt", true), value);
}
public static event Delegates.CountBindingsOfType_WithArgs CountBindingsOfType
{
add => HookEndpointManager.Add<Delegates.CountBindingsOfType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "CountBindingsOfType", true), value);
remove => HookEndpointManager.Remove<Delegates.CountBindingsOfType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "CountBindingsOfType", true), value);
}
public static event Delegates.RemoveFirstBindingOfType_WithArgs RemoveFirstBindingOfType
{
add => HookEndpointManager.Add<Delegates.RemoveFirstBindingOfType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "RemoveFirstBindingOfType", true), value);
remove => HookEndpointManager.Remove<Delegates.RemoveFirstBindingOfType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "RemoveFirstBindingOfType", true), value);
}
public static event Delegates.IndexOfFirstInvalidBinding_WithArgs IndexOfFirstInvalidBinding
{
add => HookEndpointManager.Add<Delegates.IndexOfFirstInvalidBinding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "IndexOfFirstInvalidBinding", true), value);
remove => HookEndpointManager.Remove<Delegates.IndexOfFirstInvalidBinding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "IndexOfFirstInvalidBinding", true), value);
}
public static event Delegates.ClearBindings_WithArgs ClearBindings
{
add => HookEndpointManager.Add<Delegates.ClearBindings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "ClearBindings", true), value);
remove => HookEndpointManager.Remove<Delegates.ClearBindings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "ClearBindings", true), value);
}
public static event Delegates.ResetBindings_WithArgs ResetBindings
{
add => HookEndpointManager.Add<Delegates.ResetBindings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "ResetBindings", true), value);
remove => HookEndpointManager.Remove<Delegates.ResetBindings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "ResetBindings", true), value);
}
public static event Delegates.ListenForBinding_WithArgs ListenForBinding
{
add => HookEndpointManager.Add<Delegates.ListenForBinding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "ListenForBinding", true), value);
remove => HookEndpointManager.Remove<Delegates.ListenForBinding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "ListenForBinding", true), value);
}
public static event Delegates.ListenForBindingReplacing_WithArgs ListenForBindingReplacing
{
add => HookEndpointManager.Add<Delegates.ListenForBindingReplacing_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "ListenForBindingReplacing", true), value);
remove => HookEndpointManager.Remove<Delegates.ListenForBindingReplacing_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "ListenForBindingReplacing", true), value);
}
public static event Delegates.StopListeningForBinding_WithArgs StopListeningForBinding
{
add => HookEndpointManager.Add<Delegates.StopListeningForBinding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "StopListeningForBinding", true), value);
remove => HookEndpointManager.Remove<Delegates.StopListeningForBinding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "StopListeningForBinding", true), value);
}
public static event Delegates.get_IsListeningForBinding_WithArgs get_IsListeningForBinding
{
add => HookEndpointManager.Add<Delegates.get_IsListeningForBinding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_IsListeningForBinding", true), value);
remove => HookEndpointManager.Remove<Delegates.get_IsListeningForBinding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_IsListeningForBinding", true), value);
}
public static event Delegates.get_Bindings_WithArgs get_Bindings
{
add => HookEndpointManager.Add<Delegates.get_Bindings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_Bindings", true), value);
remove => HookEndpointManager.Remove<Delegates.get_Bindings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_Bindings", true), value);
}
public static event Delegates.get_UnfilteredBindings_WithArgs get_UnfilteredBindings
{
add => HookEndpointManager.Add<Delegates.get_UnfilteredBindings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_UnfilteredBindings", true), value);
remove => HookEndpointManager.Remove<Delegates.get_UnfilteredBindings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_UnfilteredBindings", true), value);
}
public static event Delegates.RemoveOrphanedBindings_WithArgs RemoveOrphanedBindings
{
add => HookEndpointManager.Add<Delegates.RemoveOrphanedBindings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "RemoveOrphanedBindings", true), value);
remove => HookEndpointManager.Remove<Delegates.RemoveOrphanedBindings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "RemoveOrphanedBindings", true), value);
}
public static event Delegates.Update_WithArgs Update
{
add => HookEndpointManager.Add<Delegates.Update_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "Update", true), value);
remove => HookEndpointManager.Remove<Delegates.Update_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "Update", true), value);
}
public static event Delegates.UpdateBindings_WithArgs UpdateBindings
{
add => HookEndpointManager.Add<Delegates.UpdateBindings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "UpdateBindings", true), value);
remove => HookEndpointManager.Remove<Delegates.UpdateBindings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "UpdateBindings", true), value);
}
public static event Delegates.DetectBindings_WithArgs DetectBindings
{
add => HookEndpointManager.Add<Delegates.DetectBindings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "DetectBindings", true), value);
remove => HookEndpointManager.Remove<Delegates.DetectBindings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "DetectBindings", true), value);
}
public static event Delegates.UpdateVisibleBindings_WithArgs UpdateVisibleBindings
{
add => HookEndpointManager.Add<Delegates.UpdateVisibleBindings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "UpdateVisibleBindings", true), value);
remove => HookEndpointManager.Remove<Delegates.UpdateVisibleBindings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "UpdateVisibleBindings", true), value);
}
public static event Delegates.get_Device_WithArgs get_Device
{
add => HookEndpointManager.Add<Delegates.get_Device_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_Device", true), value);
remove => HookEndpointManager.Remove<Delegates.get_Device_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_Device", true), value);
}
public static event Delegates.set_Device_WithArgs set_Device
{
add => HookEndpointManager.Add<Delegates.set_Device_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "set_Device", true), value);
remove => HookEndpointManager.Remove<Delegates.set_Device_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "set_Device", true), value);
}
public static event Delegates.get_ActiveDevice_WithArgs get_ActiveDevice
{
add => HookEndpointManager.Add<Delegates.get_ActiveDevice_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_ActiveDevice", true), value);
remove => HookEndpointManager.Remove<Delegates.get_ActiveDevice_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_ActiveDevice", true), value);
}
public static event Delegates.get_LastInputTypeIsDevice_WithArgs get_LastInputTypeIsDevice
{
add => HookEndpointManager.Add<Delegates.get_LastInputTypeIsDevice_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_LastInputTypeIsDevice", true), value);
remove => HookEndpointManager.Remove<Delegates.get_LastInputTypeIsDevice_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_LastInputTypeIsDevice", true), value);
}
public static event Delegates.get_LowerDeadZone_WithArgs get_LowerDeadZone
{
add => HookEndpointManager.Add<Delegates.get_LowerDeadZone_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_LowerDeadZone", true), value);
remove => HookEndpointManager.Remove<Delegates.get_LowerDeadZone_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_LowerDeadZone", true), value);
}
public static event Delegates.set_LowerDeadZone_WithArgs set_LowerDeadZone
{
add => HookEndpointManager.Add<Delegates.set_LowerDeadZone_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "set_LowerDeadZone", true), value);
remove => HookEndpointManager.Remove<Delegates.set_LowerDeadZone_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "set_LowerDeadZone", true), value);
}
public static event Delegates.get_UpperDeadZone_WithArgs get_UpperDeadZone
{
add => HookEndpointManager.Add<Delegates.get_UpperDeadZone_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_UpperDeadZone", true), value);
remove => HookEndpointManager.Remove<Delegates.get_UpperDeadZone_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "get_UpperDeadZone", true), value);
}
public static event Delegates.set_UpperDeadZone_WithArgs set_UpperDeadZone
{
add => HookEndpointManager.Add<Delegates.set_UpperDeadZone_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "set_UpperDeadZone", true), value);
remove => HookEndpointManager.Remove<Delegates.set_UpperDeadZone_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "set_UpperDeadZone", true), value);
}
public static event Delegates.Load_WithArgs Load
{
add => HookEndpointManager.Add<Delegates.Load_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "Load", true), value);
remove => HookEndpointManager.Remove<Delegates.Load_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "Load", true), value);
}
public static event Delegates.Save_WithArgs Save
{
add => HookEndpointManager.Add<Delegates.Save_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "Save", true), value);
remove => HookEndpointManager.Remove<Delegates.Save_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.PlayerAction), "Save", true), value);
}
}

}
