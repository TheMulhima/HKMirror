using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.Audio;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for AtmosCue class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnAtmosCue
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Snapshot()
        {
            if (!HookedList.Contains("get_Snapshot"))
            {
                HookedList.Add("get_Snapshot");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(AtmosCue), "get_Snapshot"), get_Snapshot);
            }
        }

        internal static event Delegates.get_Snapshot_BeforeArgs _beforeget_Snapshot;
        internal static event Delegates.get_Snapshot_NormalArgs _afterget_Snapshot;

        private static AudioMixerSnapshot get_Snapshot(Func<AtmosCue, AudioMixerSnapshot> orig, AtmosCue self)
        {
            Delegates.Params_get_Snapshot @params = new()
            {
                self = self
            };
            _beforeget_Snapshot?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Snapshot != null) retVal = _afterget_Snapshot.Invoke(@params);
            return retVal;
        }

        internal static void HookIsChannelEnabled()
        {
            if (!HookedList.Contains("IsChannelEnabled"))
            {
                HookedList.Add("IsChannelEnabled");
                On.AtmosCue.IsChannelEnabled += IsChannelEnabled;
            }
        }

        internal static event Delegates.IsChannelEnabled_BeforeArgs _beforeIsChannelEnabled;
        internal static event Delegates.IsChannelEnabled_NormalArgs _afterIsChannelEnabled;

        private static bool IsChannelEnabled(On.AtmosCue.orig_IsChannelEnabled orig, AtmosCue self,
            AtmosChannels channel)
        {
            Delegates.Params_IsChannelEnabled @params = new()
            {
                self = self, channel = channel
            };
            _beforeIsChannelEnabled?.Invoke(@params);
            self = @params.self;
            channel = @params.channel;
            var retVal = orig(self, channel);
            if (_afterIsChannelEnabled != null) retVal = _afterIsChannelEnabled.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_Snapshot_BeforeArgs(Params_get_Snapshot args);

        public delegate AudioMixerSnapshot get_Snapshot_NormalArgs(Params_get_Snapshot args);

        public delegate void IsChannelEnabled_BeforeArgs(Params_IsChannelEnabled args);

        public delegate bool IsChannelEnabled_NormalArgs(Params_IsChannelEnabled args);

        public sealed class Params_get_Snapshot
        {
            public AtmosCue self;
        }

        public sealed class Params_IsChannelEnabled
        {
            public AtmosChannels channel;
            public AtmosCue self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Snapshot_BeforeArgs get_Snapshot
        {
            add
            {
                HookHandler._beforeget_Snapshot += value;
                HookHandler.Hookget_Snapshot();
            }
            remove => HookHandler._beforeget_Snapshot -= value;
        }

        public static event Delegates.IsChannelEnabled_BeforeArgs IsChannelEnabled
        {
            add
            {
                HookHandler._beforeIsChannelEnabled += value;
                HookHandler.HookIsChannelEnabled();
            }
            remove => HookHandler._beforeIsChannelEnabled -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Snapshot_NormalArgs get_Snapshot
        {
            add
            {
                HookHandler._afterget_Snapshot += value;
                HookHandler.Hookget_Snapshot();
            }
            remove => HookHandler._afterget_Snapshot -= value;
        }

        public static event Delegates.IsChannelEnabled_NormalArgs IsChannelEnabled
        {
            add
            {
                HookHandler._afterIsChannelEnabled += value;
                HookHandler.HookIsChannelEnabled();
            }
            remove => HookHandler._afterIsChannelEnabled -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Snapshot_NormalArgs get_Snapshot
        {
            add => HookEndpointManager.Add<Delegates.get_Snapshot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(AtmosCue), "get_Snapshot"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Snapshot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(AtmosCue), "get_Snapshot"), value);
        }

        public static event On.AtmosCue.hook_IsChannelEnabled IsChannelEnabled
        {
            add => On.AtmosCue.IsChannelEnabled += value;
            remove => On.AtmosCue.IsChannelEnabled -= value;
        }
    }
}