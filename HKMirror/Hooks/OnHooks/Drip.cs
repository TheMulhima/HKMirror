namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for Drip class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnDrip
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.Drip.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.Drip.orig_Awake orig, Drip self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.Drip.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.Drip.orig_Start orig, Drip self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookDripRoutine()
        {
            if (!HookedList.Contains("DripRoutine"))
            {
                HookedList.Add("DripRoutine");
                On.Drip.DripRoutine += DripRoutine;
            }
        }

        internal static event Delegates.DripRoutine_BeforeArgs _beforeDripRoutine;

        private static IEnumerator DripRoutine(On.Drip.orig_DripRoutine orig, Drip self)
        {
            Delegates.Params_DripRoutine @params = new()
            {
                self = self
            };
            _beforeDripRoutine?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookDropDrip()
        {
            if (!HookedList.Contains("DropDrip"))
            {
                HookedList.Add("DropDrip");
                On.Drip.DropDrip += DropDrip;
            }
        }

        internal static event Delegates.DropDrip_BeforeArgs _beforeDropDrip;

        private static IEnumerator DropDrip(On.Drip.orig_DropDrip orig, Drip self)
        {
            Delegates.Params_DropDrip @params = new()
            {
                self = self
            };
            _beforeDropDrip?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void DripRoutine_BeforeArgs(Params_DripRoutine args);

        public delegate IEnumerator DripRoutine_NormalArgs(Params_DripRoutine args);

        public delegate void DropDrip_BeforeArgs(Params_DropDrip args);

        public delegate IEnumerator DropDrip_NormalArgs(Params_DropDrip args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Awake
        {
            public Drip self;
        }

        public sealed class Params_Start
        {
            public Drip self;
        }

        public sealed class Params_DripRoutine
        {
            public Drip self;
        }

        public sealed class Params_DropDrip
        {
            public Drip self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.DripRoutine_BeforeArgs DripRoutine
        {
            add
            {
                HookHandler._beforeDripRoutine += value;
                HookHandler.HookDripRoutine();
            }
            remove => HookHandler._beforeDripRoutine -= value;
        }

        public static event Delegates.DropDrip_BeforeArgs DropDrip
        {
            add
            {
                HookHandler._beforeDropDrip += value;
                HookHandler.HookDropDrip();
            }
            remove => HookHandler._beforeDropDrip -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.Drip.hook_Awake Awake
        {
            add => On.Drip.Awake += value;
            remove => On.Drip.Awake -= value;
        }

        public static event On.Drip.hook_Start Start
        {
            add => On.Drip.Start += value;
            remove => On.Drip.Start -= value;
        }

        public static event On.Drip.hook_DripRoutine DripRoutine
        {
            add => On.Drip.DripRoutine += value;
            remove => On.Drip.DripRoutine -= value;
        }

        public static event On.Drip.hook_DropDrip DropDrip
        {
            add => On.Drip.DropDrip += value;
            remove => On.Drip.DropDrip -= value;
        }
    }
}