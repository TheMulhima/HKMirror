using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for KerningTable class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnKerningTable
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAddKerningPair()
        {
            if (!HookedList.Contains("AddKerningPair"))
            {
                HookedList.Add("AddKerningPair");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(KerningTable), "AddKerningPair"), AddKerningPair);
            }
        }

        internal static event Delegates.AddKerningPair_BeforeArgs _beforeAddKerningPair;
        internal static event Delegates.AddKerningPair_NormalArgs _afterAddKerningPair;

        private static void AddKerningPair(Action<KerningTable> orig, KerningTable self)
        {
            Delegates.Params_AddKerningPair @params = new()
            {
                self = self
            };
            _beforeAddKerningPair?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAddKerningPair != null) _afterAddKerningPair.Invoke(@params);
        }

        internal static void HookAddKerningPair_int_int_float()
        {
            if (!HookedList.Contains("AddKerningPair_int_int_float"))
            {
                HookedList.Add("AddKerningPair_int_int_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(KerningTable), "AddKerningPair_int_int_float"),
                    AddKerningPair_int_int_float);
            }
        }

        internal static event Delegates.AddKerningPair_int_int_float_BeforeArgs _beforeAddKerningPair_int_int_float;
        internal static event Delegates.AddKerningPair_int_int_float_NormalArgs _afterAddKerningPair_int_int_float;

        private static int AddKerningPair_int_int_float(Func<KerningTable, int, int, float, int> orig,
            KerningTable self, int left, int right, float offset)
        {
            Delegates.Params_AddKerningPair_int_int_float @params = new()
            {
                self = self, left = left, right = right, offset = offset
            };
            _beforeAddKerningPair_int_int_float?.Invoke(@params);
            self = @params.self;
            left = @params.left;
            right = @params.right;
            offset = @params.offset;
            var retVal = orig(self, left, right, offset);
            if (_afterAddKerningPair_int_int_float != null) retVal = _afterAddKerningPair_int_int_float.Invoke(@params);
            return retVal;
        }

        internal static void HookRemoveKerningPair_int_int()
        {
            if (!HookedList.Contains("RemoveKerningPair_int_int"))
            {
                HookedList.Add("RemoveKerningPair_int_int");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(KerningTable), "RemoveKerningPair_int_int"),
                    RemoveKerningPair_int_int);
            }
        }

        internal static event Delegates.RemoveKerningPair_int_int_BeforeArgs _beforeRemoveKerningPair_int_int;
        internal static event Delegates.RemoveKerningPair_int_int_NormalArgs _afterRemoveKerningPair_int_int;

        private static void RemoveKerningPair_int_int(Action<KerningTable, int, int> orig, KerningTable self, int left,
            int right)
        {
            Delegates.Params_RemoveKerningPair_int_int @params = new()
            {
                self = self, left = left, right = right
            };
            _beforeRemoveKerningPair_int_int?.Invoke(@params);
            self = @params.self;
            left = @params.left;
            right = @params.right;
            orig(self, left, right);
            if (_afterRemoveKerningPair_int_int != null) _afterRemoveKerningPair_int_int.Invoke(@params);
        }

        internal static void HookRemoveKerningPair_int()
        {
            if (!HookedList.Contains("RemoveKerningPair_int"))
            {
                HookedList.Add("RemoveKerningPair_int");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(KerningTable), "RemoveKerningPair_int"),
                    RemoveKerningPair_int);
            }
        }

        internal static event Delegates.RemoveKerningPair_int_BeforeArgs _beforeRemoveKerningPair_int;
        internal static event Delegates.RemoveKerningPair_int_NormalArgs _afterRemoveKerningPair_int;

        private static void RemoveKerningPair_int(Action<KerningTable, int> orig, KerningTable self, int index)
        {
            Delegates.Params_RemoveKerningPair_int @params = new()
            {
                self = self, index = index
            };
            _beforeRemoveKerningPair_int?.Invoke(@params);
            self = @params.self;
            index = @params.index;
            orig(self, index);
            if (_afterRemoveKerningPair_int != null) _afterRemoveKerningPair_int.Invoke(@params);
        }

        internal static void HookSortKerningPairs()
        {
            if (!HookedList.Contains("SortKerningPairs"))
            {
                HookedList.Add("SortKerningPairs");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(KerningTable), "SortKerningPairs"), SortKerningPairs);
            }
        }

        internal static event Delegates.SortKerningPairs_BeforeArgs _beforeSortKerningPairs;
        internal static event Delegates.SortKerningPairs_NormalArgs _afterSortKerningPairs;

        private static void SortKerningPairs(Action<KerningTable> orig, KerningTable self)
        {
            Delegates.Params_SortKerningPairs @params = new()
            {
                self = self
            };
            _beforeSortKerningPairs?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSortKerningPairs != null) _afterSortKerningPairs.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AddKerningPair_BeforeArgs(Params_AddKerningPair args);

        public delegate void AddKerningPair_int_int_float_BeforeArgs(Params_AddKerningPair_int_int_float args);

        public delegate int AddKerningPair_int_int_float_NormalArgs(Params_AddKerningPair_int_int_float args);

        public delegate void AddKerningPair_NormalArgs(Params_AddKerningPair args);

        public delegate void RemoveKerningPair_int_BeforeArgs(Params_RemoveKerningPair_int args);

        public delegate void RemoveKerningPair_int_int_BeforeArgs(Params_RemoveKerningPair_int_int args);

        public delegate void RemoveKerningPair_int_int_NormalArgs(Params_RemoveKerningPair_int_int args);

        public delegate void RemoveKerningPair_int_NormalArgs(Params_RemoveKerningPair_int args);

        public delegate void SortKerningPairs_BeforeArgs(Params_SortKerningPairs args);

        public delegate void SortKerningPairs_NormalArgs(Params_SortKerningPairs args);

        public sealed class Params_AddKerningPair
        {
            public KerningTable self;
        }

        public sealed class Params_AddKerningPair_int_int_float
        {
            public int left;
            public float offset;
            public int right;
            public KerningTable self;
        }

        public sealed class Params_RemoveKerningPair_int_int
        {
            public int left;
            public int right;
            public KerningTable self;
        }

        public sealed class Params_RemoveKerningPair_int
        {
            public int index;
            public KerningTable self;
        }

        public sealed class Params_SortKerningPairs
        {
            public KerningTable self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.AddKerningPair_BeforeArgs AddKerningPair
        {
            add
            {
                HookHandler._beforeAddKerningPair += value;
                HookHandler.HookAddKerningPair();
            }
            remove => HookHandler._beforeAddKerningPair -= value;
        }

        public static event Delegates.AddKerningPair_int_int_float_BeforeArgs AddKerningPair_int_int_float
        {
            add
            {
                HookHandler._beforeAddKerningPair_int_int_float += value;
                HookHandler.HookAddKerningPair_int_int_float();
            }
            remove => HookHandler._beforeAddKerningPair_int_int_float -= value;
        }

        public static event Delegates.RemoveKerningPair_int_int_BeforeArgs RemoveKerningPair_int_int
        {
            add
            {
                HookHandler._beforeRemoveKerningPair_int_int += value;
                HookHandler.HookRemoveKerningPair_int_int();
            }
            remove => HookHandler._beforeRemoveKerningPair_int_int -= value;
        }

        public static event Delegates.RemoveKerningPair_int_BeforeArgs RemoveKerningPair_int
        {
            add
            {
                HookHandler._beforeRemoveKerningPair_int += value;
                HookHandler.HookRemoveKerningPair_int();
            }
            remove => HookHandler._beforeRemoveKerningPair_int -= value;
        }

        public static event Delegates.SortKerningPairs_BeforeArgs SortKerningPairs
        {
            add
            {
                HookHandler._beforeSortKerningPairs += value;
                HookHandler.HookSortKerningPairs();
            }
            remove => HookHandler._beforeSortKerningPairs -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.AddKerningPair_NormalArgs AddKerningPair
        {
            add
            {
                HookHandler._afterAddKerningPair += value;
                HookHandler.HookAddKerningPair();
            }
            remove => HookHandler._afterAddKerningPair -= value;
        }

        public static event Delegates.AddKerningPair_int_int_float_NormalArgs AddKerningPair_int_int_float
        {
            add
            {
                HookHandler._afterAddKerningPair_int_int_float += value;
                HookHandler.HookAddKerningPair_int_int_float();
            }
            remove => HookHandler._afterAddKerningPair_int_int_float -= value;
        }

        public static event Delegates.RemoveKerningPair_int_int_NormalArgs RemoveKerningPair_int_int
        {
            add
            {
                HookHandler._afterRemoveKerningPair_int_int += value;
                HookHandler.HookRemoveKerningPair_int_int();
            }
            remove => HookHandler._afterRemoveKerningPair_int_int -= value;
        }

        public static event Delegates.RemoveKerningPair_int_NormalArgs RemoveKerningPair_int
        {
            add
            {
                HookHandler._afterRemoveKerningPair_int += value;
                HookHandler.HookRemoveKerningPair_int();
            }
            remove => HookHandler._afterRemoveKerningPair_int -= value;
        }

        public static event Delegates.SortKerningPairs_NormalArgs SortKerningPairs
        {
            add
            {
                HookHandler._afterSortKerningPairs += value;
                HookHandler.HookSortKerningPairs();
            }
            remove => HookHandler._afterSortKerningPairs -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.AddKerningPair_NormalArgs AddKerningPair
        {
            add => HookEndpointManager.Add<Delegates.AddKerningPair_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(KerningTable), "AddKerningPair"), value);
            remove => HookEndpointManager.Remove<Delegates.AddKerningPair_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(KerningTable), "AddKerningPair"), value);
        }

        public static event Delegates.AddKerningPair_int_int_float_NormalArgs AddKerningPair_int_int_float
        {
            add => HookEndpointManager.Add<Delegates.AddKerningPair_int_int_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(KerningTable), "AddKerningPair"), value);
            remove => HookEndpointManager.Remove<Delegates.AddKerningPair_int_int_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(KerningTable), "AddKerningPair"), value);
        }

        public static event Delegates.RemoveKerningPair_int_int_NormalArgs RemoveKerningPair_int_int
        {
            add => HookEndpointManager.Add<Delegates.RemoveKerningPair_int_int_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(KerningTable), "RemoveKerningPair"), value);
            remove => HookEndpointManager.Remove<Delegates.RemoveKerningPair_int_int_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(KerningTable), "RemoveKerningPair"), value);
        }

        public static event Delegates.RemoveKerningPair_int_NormalArgs RemoveKerningPair_int
        {
            add => HookEndpointManager.Add<Delegates.RemoveKerningPair_int_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(KerningTable), "RemoveKerningPair"), value);
            remove => HookEndpointManager.Remove<Delegates.RemoveKerningPair_int_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(KerningTable), "RemoveKerningPair"), value);
        }

        public static event Delegates.SortKerningPairs_NormalArgs SortKerningPairs
        {
            add => HookEndpointManager.Add<Delegates.SortKerningPairs_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(KerningTable), "SortKerningPairs"), value);
            remove => HookEndpointManager.Remove<Delegates.SortKerningPairs_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(KerningTable), "SortKerningPairs"), value);
        }
    }
}