using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for KerningTable class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnKerningTable
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookAddKerningPair()
        {
            if (!HookedList.Contains("AddKerningPair"))
            {
                HookedList.Add("AddKerningPair");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.KerningTable), "AddKerningPair", true),
                    AddKerningPair);
            }
        }

        internal static event Delegates.AddKerningPair_BeforeArgs _beforeAddKerningPair;
        internal static event Delegates.AddKerningPair_AfterArgs _afterAddKerningPair;

        private static void AddKerningPair(Action<TMPro.KerningTable> orig, TMPro.KerningTable self)
        {
            Delegates.Params_AddKerningPair @params = new()
            {
                self = self
            };
            if (_beforeAddKerningPair != null)
            {
                foreach (Delegates.AddKerningPair_BeforeArgs toInvoke in _beforeAddKerningPair.GetInvocationList())
                {
                    try
                    {
                        _beforeAddKerningPair?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterAddKerningPair != null)
            {
                foreach (Delegates.AddKerningPair_AfterArgs toInvoke in _afterAddKerningPair.GetInvocationList())
                {
                    try
                    {
                        _afterAddKerningPair.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookAddKerningPair_int_int_float()
        {
            if (!HookedList.Contains("AddKerningPair_int_int_float"))
            {
                HookedList.Add("AddKerningPair_int_int_float");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.KerningTable), "AddKerningPair_int_int_float", true),
                    AddKerningPair_int_int_float);
            }
        }

        internal static event Delegates.AddKerningPair_int_int_float_BeforeArgs _beforeAddKerningPair_int_int_float;
        internal static event Delegates.AddKerningPair_int_int_float_AfterArgs _afterAddKerningPair_int_int_float;

        private static int AddKerningPair_int_int_float(Func<TMPro.KerningTable, int, int, float, int> orig,
            TMPro.KerningTable self, int left, int right, float offset)
        {
            Delegates.Params_AddKerningPair_int_int_float @params = new()
            {
                self = self, left = left, right = right, offset = offset
            };
            if (_beforeAddKerningPair_int_int_float != null)
            {
                foreach (Delegates.AddKerningPair_int_int_float_BeforeArgs toInvoke in
                         _beforeAddKerningPair_int_int_float.GetInvocationList())
                {
                    try
                    {
                        _beforeAddKerningPair_int_int_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            left = @params.left;
            right = @params.right;
            offset = @params.offset;
            var retVal = orig(self, left, right, offset);
            if (_afterAddKerningPair_int_int_float != null)
            {
                foreach (Delegates.AddKerningPair_int_int_float_AfterArgs toInvoke in _afterAddKerningPair_int_int_float
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterAddKerningPair_int_int_float.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookRemoveKerningPair_int_int()
        {
            if (!HookedList.Contains("RemoveKerningPair_int_int"))
            {
                HookedList.Add("RemoveKerningPair_int_int");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.KerningTable), "RemoveKerningPair_int_int", true),
                    RemoveKerningPair_int_int);
            }
        }

        internal static event Delegates.RemoveKerningPair_int_int_BeforeArgs _beforeRemoveKerningPair_int_int;
        internal static event Delegates.RemoveKerningPair_int_int_AfterArgs _afterRemoveKerningPair_int_int;

        private static void RemoveKerningPair_int_int(Action<TMPro.KerningTable, int, int> orig,
            TMPro.KerningTable self, int left, int right)
        {
            Delegates.Params_RemoveKerningPair_int_int @params = new()
            {
                self = self, left = left, right = right
            };
            if (_beforeRemoveKerningPair_int_int != null)
            {
                foreach (Delegates.RemoveKerningPair_int_int_BeforeArgs toInvoke in _beforeRemoveKerningPair_int_int
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeRemoveKerningPair_int_int?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            left = @params.left;
            right = @params.right;
            orig(self, left, right);
            if (_afterRemoveKerningPair_int_int != null)
            {
                foreach (Delegates.RemoveKerningPair_int_int_AfterArgs toInvoke in _afterRemoveKerningPair_int_int
                             .GetInvocationList())
                {
                    try
                    {
                        _afterRemoveKerningPair_int_int.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookRemoveKerningPair_int()
        {
            if (!HookedList.Contains("RemoveKerningPair_int"))
            {
                HookedList.Add("RemoveKerningPair_int");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.KerningTable), "RemoveKerningPair_int", true),
                    RemoveKerningPair_int);
            }
        }

        internal static event Delegates.RemoveKerningPair_int_BeforeArgs _beforeRemoveKerningPair_int;
        internal static event Delegates.RemoveKerningPair_int_AfterArgs _afterRemoveKerningPair_int;

        private static void RemoveKerningPair_int(Action<TMPro.KerningTable, int> orig, TMPro.KerningTable self,
            int index)
        {
            Delegates.Params_RemoveKerningPair_int @params = new()
            {
                self = self, index = index
            };
            if (_beforeRemoveKerningPair_int != null)
            {
                foreach (Delegates.RemoveKerningPair_int_BeforeArgs toInvoke in _beforeRemoveKerningPair_int
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeRemoveKerningPair_int?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            index = @params.index;
            orig(self, index);
            if (_afterRemoveKerningPair_int != null)
            {
                foreach (Delegates.RemoveKerningPair_int_AfterArgs toInvoke in _afterRemoveKerningPair_int
                             .GetInvocationList())
                {
                    try
                    {
                        _afterRemoveKerningPair_int.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSortKerningPairs()
        {
            if (!HookedList.Contains("SortKerningPairs"))
            {
                HookedList.Add("SortKerningPairs");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.KerningTable), "SortKerningPairs", true),
                    SortKerningPairs);
            }
        }

        internal static event Delegates.SortKerningPairs_BeforeArgs _beforeSortKerningPairs;
        internal static event Delegates.SortKerningPairs_AfterArgs _afterSortKerningPairs;

        private static void SortKerningPairs(Action<TMPro.KerningTable> orig, TMPro.KerningTable self)
        {
            Delegates.Params_SortKerningPairs @params = new()
            {
                self = self
            };
            if (_beforeSortKerningPairs != null)
            {
                foreach (Delegates.SortKerningPairs_BeforeArgs toInvoke in _beforeSortKerningPairs.GetInvocationList())
                {
                    try
                    {
                        _beforeSortKerningPairs?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterSortKerningPairs != null)
            {
                foreach (Delegates.SortKerningPairs_AfterArgs toInvoke in _afterSortKerningPairs.GetInvocationList())
                {
                    try
                    {
                        _afterSortKerningPairs.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_AddKerningPair
        {
            public TMPro.KerningTable self;
        }

        public delegate void AddKerningPair_BeforeArgs(Params_AddKerningPair args);

        public delegate void AddKerningPair_AfterArgs(Params_AddKerningPair args);

        public delegate void AddKerningPair_WithArgs(Action<TMPro.KerningTable> orig, TMPro.KerningTable self);

        public sealed class Params_AddKerningPair_int_int_float
        {
            public TMPro.KerningTable self;
            public int left;
            public int right;
            public float offset;
        }

        public delegate void AddKerningPair_int_int_float_BeforeArgs(Params_AddKerningPair_int_int_float args);

        public delegate int AddKerningPair_int_int_float_AfterArgs(Params_AddKerningPair_int_int_float args, int ret);

        public delegate int AddKerningPair_int_int_float_WithArgs(Func<TMPro.KerningTable, int, int, float, int> orig,
            TMPro.KerningTable self, int left, int right, float offset);

        public sealed class Params_RemoveKerningPair_int_int
        {
            public TMPro.KerningTable self;
            public int left;
            public int right;
        }

        public delegate void RemoveKerningPair_int_int_BeforeArgs(Params_RemoveKerningPair_int_int args);

        public delegate void RemoveKerningPair_int_int_AfterArgs(Params_RemoveKerningPair_int_int args);

        public delegate void RemoveKerningPair_int_int_WithArgs(Action<TMPro.KerningTable, int, int> orig,
            TMPro.KerningTable self, int left, int right);

        public sealed class Params_RemoveKerningPair_int
        {
            public TMPro.KerningTable self;
            public int index;
        }

        public delegate void RemoveKerningPair_int_BeforeArgs(Params_RemoveKerningPair_int args);

        public delegate void RemoveKerningPair_int_AfterArgs(Params_RemoveKerningPair_int args);

        public delegate void RemoveKerningPair_int_WithArgs(Action<TMPro.KerningTable, int> orig,
            TMPro.KerningTable self, int index);

        public sealed class Params_SortKerningPairs
        {
            public TMPro.KerningTable self;
        }

        public delegate void SortKerningPairs_BeforeArgs(Params_SortKerningPairs args);

        public delegate void SortKerningPairs_AfterArgs(Params_SortKerningPairs args);

        public delegate void SortKerningPairs_WithArgs(Action<TMPro.KerningTable> orig, TMPro.KerningTable self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.AddKerningPair_BeforeArgs AddKerningPair
        {
            add
            {
                HookHandler._beforeAddKerningPair += value;
                HookHandler.HookAddKerningPair();
            }
            remove => HookHandler._beforeAddKerningPair -= value;
        }

        public static event Delegates.AddKerningPair_int_int_float_BeforeArgs AddKerningPair_int_int_float
        {
            add
            {
                HookHandler._beforeAddKerningPair_int_int_float += value;
                HookHandler.HookAddKerningPair_int_int_float();
            }
            remove => HookHandler._beforeAddKerningPair_int_int_float -= value;
        }

        public static event Delegates.RemoveKerningPair_int_int_BeforeArgs RemoveKerningPair_int_int
        {
            add
            {
                HookHandler._beforeRemoveKerningPair_int_int += value;
                HookHandler.HookRemoveKerningPair_int_int();
            }
            remove => HookHandler._beforeRemoveKerningPair_int_int -= value;
        }

        public static event Delegates.RemoveKerningPair_int_BeforeArgs RemoveKerningPair_int
        {
            add
            {
                HookHandler._beforeRemoveKerningPair_int += value;
                HookHandler.HookRemoveKerningPair_int();
            }
            remove => HookHandler._beforeRemoveKerningPair_int -= value;
        }

        public static event Delegates.SortKerningPairs_BeforeArgs SortKerningPairs
        {
            add
            {
                HookHandler._beforeSortKerningPairs += value;
                HookHandler.HookSortKerningPairs();
            }
            remove => HookHandler._beforeSortKerningPairs -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.AddKerningPair_AfterArgs AddKerningPair
        {
            add
            {
                HookHandler._afterAddKerningPair += value;
                HookHandler.HookAddKerningPair();
            }
            remove => HookHandler._afterAddKerningPair -= value;
        }

        public static event Delegates.AddKerningPair_int_int_float_AfterArgs AddKerningPair_int_int_float
        {
            add
            {
                HookHandler._afterAddKerningPair_int_int_float += value;
                HookHandler.HookAddKerningPair_int_int_float();
            }
            remove => HookHandler._afterAddKerningPair_int_int_float -= value;
        }

        public static event Delegates.RemoveKerningPair_int_int_AfterArgs RemoveKerningPair_int_int
        {
            add
            {
                HookHandler._afterRemoveKerningPair_int_int += value;
                HookHandler.HookRemoveKerningPair_int_int();
            }
            remove => HookHandler._afterRemoveKerningPair_int_int -= value;
        }

        public static event Delegates.RemoveKerningPair_int_AfterArgs RemoveKerningPair_int
        {
            add
            {
                HookHandler._afterRemoveKerningPair_int += value;
                HookHandler.HookRemoveKerningPair_int();
            }
            remove => HookHandler._afterRemoveKerningPair_int -= value;
        }

        public static event Delegates.SortKerningPairs_AfterArgs SortKerningPairs
        {
            add
            {
                HookHandler._afterSortKerningPairs += value;
                HookHandler.HookSortKerningPairs();
            }
            remove => HookHandler._afterSortKerningPairs -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.AddKerningPair_WithArgs AddKerningPair
        {
            add => HookEndpointManager.Add<Delegates.AddKerningPair_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.KerningTable), "AddKerningPair", true), value);
            remove => HookEndpointManager.Remove<Delegates.AddKerningPair_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.KerningTable), "AddKerningPair", true), value);
        }

        public static event Delegates.AddKerningPair_int_int_float_WithArgs AddKerningPair_int_int_float
        {
            add => HookEndpointManager.Add<Delegates.AddKerningPair_int_int_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.KerningTable), "AddKerningPair", true), value);
            remove => HookEndpointManager.Remove<Delegates.AddKerningPair_int_int_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.KerningTable), "AddKerningPair", true), value);
        }

        public static event Delegates.RemoveKerningPair_int_int_WithArgs RemoveKerningPair_int_int
        {
            add => HookEndpointManager.Add<Delegates.RemoveKerningPair_int_int_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.KerningTable), "RemoveKerningPair", true), value);
            remove => HookEndpointManager.Remove<Delegates.RemoveKerningPair_int_int_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.KerningTable), "RemoveKerningPair", true), value);
        }

        public static event Delegates.RemoveKerningPair_int_WithArgs RemoveKerningPair_int
        {
            add => HookEndpointManager.Add<Delegates.RemoveKerningPair_int_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.KerningTable), "RemoveKerningPair", true), value);
            remove => HookEndpointManager.Remove<Delegates.RemoveKerningPair_int_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.KerningTable), "RemoveKerningPair", true), value);
        }

        public static event Delegates.SortKerningPairs_WithArgs SortKerningPairs
        {
            add => HookEndpointManager.Add<Delegates.SortKerningPairs_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.KerningTable), "SortKerningPairs", true), value);
            remove => HookEndpointManager.Remove<Delegates.SortKerningPairs_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.KerningTable), "SortKerningPairs", true), value);
        }
    }
}