namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for AreaTitleController class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnAreaTitleController
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.AreaTitleController.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.AreaTitleController.orig_Start orig, AreaTitleController self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFindAreaTitle()
        {
            if (!HookedList.Contains("FindAreaTitle"))
            {
                HookedList.Add("FindAreaTitle");
                On.AreaTitleController.FindAreaTitle += FindAreaTitle;
            }
        }

        internal static event Delegates.FindAreaTitle_BeforeArgs _beforeFindAreaTitle;
        internal static event Delegates.FindAreaTitle_AfterArgs _afterFindAreaTitle;

        private static void FindAreaTitle(On.AreaTitleController.orig_FindAreaTitle orig, AreaTitleController self)
        {
            Delegates.Params_FindAreaTitle @params = new()
            {
                self = self
            };
            if (_beforeFindAreaTitle != null)
                foreach (Delegates.FindAreaTitle_BeforeArgs toInvoke in _beforeFindAreaTitle.GetInvocationList())
                    try
                    {
                        _beforeFindAreaTitle?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterFindAreaTitle != null)
                foreach (Delegates.FindAreaTitle_AfterArgs toInvoke in _afterFindAreaTitle.GetInvocationList())
                    try
                    {
                        _afterFindAreaTitle.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDoPlay()
        {
            if (!HookedList.Contains("DoPlay"))
            {
                HookedList.Add("DoPlay");
                On.AreaTitleController.DoPlay += DoPlay;
            }
        }

        internal static event Delegates.DoPlay_BeforeArgs _beforeDoPlay;
        internal static event Delegates.DoPlay_AfterArgs _afterDoPlay;

        private static void DoPlay(On.AreaTitleController.orig_DoPlay orig, AreaTitleController self)
        {
            Delegates.Params_DoPlay @params = new()
            {
                self = self
            };
            if (_beforeDoPlay != null)
                foreach (Delegates.DoPlay_BeforeArgs toInvoke in _beforeDoPlay.GetInvocationList())
                    try
                    {
                        _beforeDoPlay?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterDoPlay != null)
                foreach (Delegates.DoPlay_AfterArgs toInvoke in _afterDoPlay.GetInvocationList())
                    try
                    {
                        _afterDoPlay.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.AreaTitleController.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_AfterArgs _afterOnDestroy;

        private static void OnDestroy(On.AreaTitleController.orig_OnDestroy orig, AreaTitleController self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            if (_beforeOnDestroy != null)
                foreach (Delegates.OnDestroy_BeforeArgs toInvoke in _beforeOnDestroy.GetInvocationList())
                    try
                    {
                        _beforeOnDestroy?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null)
                foreach (Delegates.OnDestroy_AfterArgs toInvoke in _afterOnDestroy.GetInvocationList())
                    try
                    {
                        _afterOnDestroy.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.AreaTitleController.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_AfterArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.AreaTitleController.orig_OnTriggerEnter2D orig,
            AreaTitleController self, Collider2D collision)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, collision = collision
            };
            if (_beforeOnTriggerEnter2D != null)
                foreach (Delegates.OnTriggerEnter2D_BeforeArgs toInvoke in _beforeOnTriggerEnter2D.GetInvocationList())
                    try
                    {
                        _beforeOnTriggerEnter2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnTriggerEnter2D != null)
                foreach (Delegates.OnTriggerEnter2D_AfterArgs toInvoke in _afterOnTriggerEnter2D.GetInvocationList())
                    try
                    {
                        _afterOnTriggerEnter2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPlay()
        {
            if (!HookedList.Contains("Play"))
            {
                HookedList.Add("Play");
                On.AreaTitleController.Play += Play;
            }
        }

        internal static event Delegates.Play_BeforeArgs _beforePlay;
        internal static event Delegates.Play_AfterArgs _afterPlay;

        private static void Play(On.AreaTitleController.orig_Play orig, AreaTitleController self)
        {
            Delegates.Params_Play @params = new()
            {
                self = self
            };
            if (_beforePlay != null)
                foreach (Delegates.Play_BeforeArgs toInvoke in _beforePlay.GetInvocationList())
                    try
                    {
                        _beforePlay?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterPlay != null)
                foreach (Delegates.Play_AfterArgs toInvoke in _afterPlay.GetInvocationList())
                    try
                    {
                        _afterPlay.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckArea()
        {
            if (!HookedList.Contains("CheckArea"))
            {
                HookedList.Add("CheckArea");
                On.AreaTitleController.CheckArea += CheckArea;
            }
        }

        internal static event Delegates.CheckArea_BeforeArgs _beforeCheckArea;
        internal static event Delegates.CheckArea_AfterArgs _afterCheckArea;

        private static void CheckArea(On.AreaTitleController.orig_CheckArea orig, AreaTitleController self)
        {
            Delegates.Params_CheckArea @params = new()
            {
                self = self
            };
            if (_beforeCheckArea != null)
                foreach (Delegates.CheckArea_BeforeArgs toInvoke in _beforeCheckArea.GetInvocationList())
                    try
                    {
                        _beforeCheckArea?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCheckArea != null)
                foreach (Delegates.CheckArea_AfterArgs toInvoke in _afterCheckArea.GetInvocationList())
                    try
                    {
                        _afterCheckArea.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFinish()
        {
            if (!HookedList.Contains("Finish"))
            {
                HookedList.Add("Finish");
                On.AreaTitleController.Finish += Finish;
            }
        }

        internal static event Delegates.Finish_BeforeArgs _beforeFinish;
        internal static event Delegates.Finish_AfterArgs _afterFinish;

        private static void Finish(On.AreaTitleController.orig_Finish orig, AreaTitleController self)
        {
            Delegates.Params_Finish @params = new()
            {
                self = self
            };
            if (_beforeFinish != null)
                foreach (Delegates.Finish_BeforeArgs toInvoke in _beforeFinish.GetInvocationList())
                    try
                    {
                        _beforeFinish?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterFinish != null)
                foreach (Delegates.Finish_AfterArgs toInvoke in _afterFinish.GetInvocationList())
                    try
                    {
                        _afterFinish.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookVisitPause()
        {
            if (!HookedList.Contains("VisitPause"))
            {
                HookedList.Add("VisitPause");
                On.AreaTitleController.VisitPause += VisitPause;
            }
        }

        internal static event Delegates.VisitPause_BeforeArgs _beforeVisitPause;

        private static IEnumerator VisitPause(On.AreaTitleController.orig_VisitPause orig, AreaTitleController self,
            bool pause)
        {
            Delegates.Params_VisitPause @params = new()
            {
                self = self, pause = pause
            };
            if (_beforeVisitPause != null)
                foreach (Delegates.VisitPause_BeforeArgs toInvoke in _beforeVisitPause.GetInvocationList())
                    try
                    {
                        _beforeVisitPause?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            pause = @params.pause;
            return orig(self, pause);
        }

        internal static void HookUnvisitPause()
        {
            if (!HookedList.Contains("UnvisitPause"))
            {
                HookedList.Add("UnvisitPause");
                On.AreaTitleController.UnvisitPause += UnvisitPause;
            }
        }

        internal static event Delegates.UnvisitPause_BeforeArgs _beforeUnvisitPause;

        private static IEnumerator UnvisitPause(On.AreaTitleController.orig_UnvisitPause orig, AreaTitleController self,
            bool pause)
        {
            Delegates.Params_UnvisitPause @params = new()
            {
                self = self, pause = pause
            };
            if (_beforeUnvisitPause != null)
                foreach (Delegates.UnvisitPause_BeforeArgs toInvoke in _beforeUnvisitPause.GetInvocationList())
                    try
                    {
                        _beforeUnvisitPause?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            pause = @params.pause;
            return orig(self, pause);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void CheckArea_AfterArgs(Params_CheckArea args);

        public delegate void CheckArea_BeforeArgs(Params_CheckArea args);

        public delegate void CheckArea_WithArgs(Action<AreaTitleController> orig, AreaTitleController self);

        public delegate void DoPlay_AfterArgs(Params_DoPlay args);

        public delegate void DoPlay_BeforeArgs(Params_DoPlay args);

        public delegate void DoPlay_WithArgs(Action<AreaTitleController> orig, AreaTitleController self);

        public delegate void FindAreaTitle_AfterArgs(Params_FindAreaTitle args);

        public delegate void FindAreaTitle_BeforeArgs(Params_FindAreaTitle args);

        public delegate void FindAreaTitle_WithArgs(Action<AreaTitleController> orig, AreaTitleController self);

        public delegate void Finish_AfterArgs(Params_Finish args);

        public delegate void Finish_BeforeArgs(Params_Finish args);

        public delegate void Finish_WithArgs(Action<AreaTitleController> orig, AreaTitleController self);

        public delegate void OnDestroy_AfterArgs(Params_OnDestroy args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_WithArgs(Action<AreaTitleController> orig, AreaTitleController self);

        public delegate void OnTriggerEnter2D_AfterArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_WithArgs(Action<AreaTitleController, Collider2D> orig,
            AreaTitleController self, Collider2D collision);

        public delegate void Play_AfterArgs(Params_Play args);

        public delegate void Play_BeforeArgs(Params_Play args);

        public delegate void Play_WithArgs(Action<AreaTitleController> orig, AreaTitleController self);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<AreaTitleController> orig, AreaTitleController self);

        public delegate IEnumerator UnvisitPause_AfterArgs(Params_UnvisitPause args, IEnumerator ret);

        public delegate void UnvisitPause_BeforeArgs(Params_UnvisitPause args);

        public delegate IEnumerator UnvisitPause_WithArgs(Func<AreaTitleController, bool, IEnumerator> orig,
            AreaTitleController self, bool pause);

        public delegate IEnumerator VisitPause_AfterArgs(Params_VisitPause args, IEnumerator ret);

        public delegate void VisitPause_BeforeArgs(Params_VisitPause args);

        public delegate IEnumerator VisitPause_WithArgs(Func<AreaTitleController, bool, IEnumerator> orig,
            AreaTitleController self, bool pause);

        public sealed class Params_Start
        {
            public AreaTitleController self;
        }

        public sealed class Params_FindAreaTitle
        {
            public AreaTitleController self;
        }

        public sealed class Params_DoPlay
        {
            public AreaTitleController self;
        }

        public sealed class Params_OnDestroy
        {
            public AreaTitleController self;
        }

        public sealed class Params_OnTriggerEnter2D
        {
            public Collider2D collision;
            public AreaTitleController self;
        }

        public sealed class Params_Play
        {
            public AreaTitleController self;
        }

        public sealed class Params_CheckArea
        {
            public AreaTitleController self;
        }

        public sealed class Params_Finish
        {
            public AreaTitleController self;
        }

        public sealed class Params_VisitPause
        {
            public bool pause;
            public AreaTitleController self;
        }

        public sealed class Params_UnvisitPause
        {
            public bool pause;
            public AreaTitleController self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.FindAreaTitle_BeforeArgs FindAreaTitle
        {
            add
            {
                HookHandler._beforeFindAreaTitle += value;
                HookHandler.HookFindAreaTitle();
            }
            remove => HookHandler._beforeFindAreaTitle -= value;
        }

        public static event Delegates.DoPlay_BeforeArgs DoPlay
        {
            add
            {
                HookHandler._beforeDoPlay += value;
                HookHandler.HookDoPlay();
            }
            remove => HookHandler._beforeDoPlay -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.Play_BeforeArgs Play
        {
            add
            {
                HookHandler._beforePlay += value;
                HookHandler.HookPlay();
            }
            remove => HookHandler._beforePlay -= value;
        }

        public static event Delegates.CheckArea_BeforeArgs CheckArea
        {
            add
            {
                HookHandler._beforeCheckArea += value;
                HookHandler.HookCheckArea();
            }
            remove => HookHandler._beforeCheckArea -= value;
        }

        public static event Delegates.Finish_BeforeArgs Finish
        {
            add
            {
                HookHandler._beforeFinish += value;
                HookHandler.HookFinish();
            }
            remove => HookHandler._beforeFinish -= value;
        }

        public static event Delegates.VisitPause_BeforeArgs VisitPause
        {
            add
            {
                HookHandler._beforeVisitPause += value;
                HookHandler.HookVisitPause();
            }
            remove => HookHandler._beforeVisitPause -= value;
        }

        public static event Delegates.UnvisitPause_BeforeArgs UnvisitPause
        {
            add
            {
                HookHandler._beforeUnvisitPause += value;
                HookHandler.HookUnvisitPause();
            }
            remove => HookHandler._beforeUnvisitPause -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.FindAreaTitle_AfterArgs FindAreaTitle
        {
            add
            {
                HookHandler._afterFindAreaTitle += value;
                HookHandler.HookFindAreaTitle();
            }
            remove => HookHandler._afterFindAreaTitle -= value;
        }

        public static event Delegates.DoPlay_AfterArgs DoPlay
        {
            add
            {
                HookHandler._afterDoPlay += value;
                HookHandler.HookDoPlay();
            }
            remove => HookHandler._afterDoPlay -= value;
        }

        public static event Delegates.OnDestroy_AfterArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.OnTriggerEnter2D_AfterArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }

        public static event Delegates.Play_AfterArgs Play
        {
            add
            {
                HookHandler._afterPlay += value;
                HookHandler.HookPlay();
            }
            remove => HookHandler._afterPlay -= value;
        }

        public static event Delegates.CheckArea_AfterArgs CheckArea
        {
            add
            {
                HookHandler._afterCheckArea += value;
                HookHandler.HookCheckArea();
            }
            remove => HookHandler._afterCheckArea -= value;
        }

        public static event Delegates.Finish_AfterArgs Finish
        {
            add
            {
                HookHandler._afterFinish += value;
                HookHandler.HookFinish();
            }
            remove => HookHandler._afterFinish -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.AreaTitleController.hook_Start Start
        {
            add => On.AreaTitleController.Start += value;
            remove => On.AreaTitleController.Start -= value;
        }

        public static event On.AreaTitleController.hook_FindAreaTitle FindAreaTitle
        {
            add => On.AreaTitleController.FindAreaTitle += value;
            remove => On.AreaTitleController.FindAreaTitle -= value;
        }

        public static event On.AreaTitleController.hook_DoPlay DoPlay
        {
            add => On.AreaTitleController.DoPlay += value;
            remove => On.AreaTitleController.DoPlay -= value;
        }

        public static event On.AreaTitleController.hook_OnDestroy OnDestroy
        {
            add => On.AreaTitleController.OnDestroy += value;
            remove => On.AreaTitleController.OnDestroy -= value;
        }

        public static event On.AreaTitleController.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.AreaTitleController.OnTriggerEnter2D += value;
            remove => On.AreaTitleController.OnTriggerEnter2D -= value;
        }

        public static event On.AreaTitleController.hook_Play Play
        {
            add => On.AreaTitleController.Play += value;
            remove => On.AreaTitleController.Play -= value;
        }

        public static event On.AreaTitleController.hook_CheckArea CheckArea
        {
            add => On.AreaTitleController.CheckArea += value;
            remove => On.AreaTitleController.CheckArea -= value;
        }

        public static event On.AreaTitleController.hook_Finish Finish
        {
            add => On.AreaTitleController.Finish += value;
            remove => On.AreaTitleController.Finish -= value;
        }

        public static event On.AreaTitleController.hook_VisitPause VisitPause
        {
            add => On.AreaTitleController.VisitPause += value;
            remove => On.AreaTitleController.VisitPause -= value;
        }

        public static event On.AreaTitleController.hook_UnvisitPause UnvisitPause
        {
            add => On.AreaTitleController.UnvisitPause += value;
            remove => On.AreaTitleController.UnvisitPause -= value;
        }
    }
}