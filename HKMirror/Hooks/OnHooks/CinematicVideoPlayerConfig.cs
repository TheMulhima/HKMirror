using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for CinematicVideoPlayerConfig class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCinematicVideoPlayerConfig
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_VideoReference()
{
if (!HookedList.Contains("get_VideoReference"))
{
HookedList.Add("get_VideoReference");
new Hook(ReflectionHelper.GetMethodInfo(typeof(CinematicVideoPlayerConfig), "get_VideoReference", true), get_VideoReference);

}
}
internal static event Delegates.get_VideoReference_BeforeArgs _beforeget_VideoReference;
internal static event Delegates.get_VideoReference_AfterArgs _afterget_VideoReference;
private static CinematicVideoReference get_VideoReference(Func<CinematicVideoPlayerConfig, CinematicVideoReference> orig, CinematicVideoPlayerConfig self)
{
Delegates.Params_get_VideoReference @params = new() 
{
self = self
};
if (_beforeget_VideoReference != null)
{
foreach (Delegates.get_VideoReference_BeforeArgs toInvoke in _beforeget_VideoReference.GetInvocationList())
{
try
{
_beforeget_VideoReference?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_VideoReference != null)
{
foreach (Delegates.get_VideoReference_AfterArgs toInvoke in _afterget_VideoReference.GetInvocationList())
{
try
{
retVal = _afterget_VideoReference.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_MeshRenderer()
{
if (!HookedList.Contains("get_MeshRenderer"))
{
HookedList.Add("get_MeshRenderer");
new Hook(ReflectionHelper.GetMethodInfo(typeof(CinematicVideoPlayerConfig), "get_MeshRenderer", true), get_MeshRenderer);

}
}
internal static event Delegates.get_MeshRenderer_BeforeArgs _beforeget_MeshRenderer;
internal static event Delegates.get_MeshRenderer_AfterArgs _afterget_MeshRenderer;
private static UnityEngine.MeshRenderer get_MeshRenderer(Func<CinematicVideoPlayerConfig, UnityEngine.MeshRenderer> orig, CinematicVideoPlayerConfig self)
{
Delegates.Params_get_MeshRenderer @params = new() 
{
self = self
};
if (_beforeget_MeshRenderer != null)
{
foreach (Delegates.get_MeshRenderer_BeforeArgs toInvoke in _beforeget_MeshRenderer.GetInvocationList())
{
try
{
_beforeget_MeshRenderer?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_MeshRenderer != null)
{
foreach (Delegates.get_MeshRenderer_AfterArgs toInvoke in _afterget_MeshRenderer.GetInvocationList())
{
try
{
retVal = _afterget_MeshRenderer.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_AudioSource()
{
if (!HookedList.Contains("get_AudioSource"))
{
HookedList.Add("get_AudioSource");
new Hook(ReflectionHelper.GetMethodInfo(typeof(CinematicVideoPlayerConfig), "get_AudioSource", true), get_AudioSource);

}
}
internal static event Delegates.get_AudioSource_BeforeArgs _beforeget_AudioSource;
internal static event Delegates.get_AudioSource_AfterArgs _afterget_AudioSource;
private static UnityEngine.AudioSource get_AudioSource(Func<CinematicVideoPlayerConfig, UnityEngine.AudioSource> orig, CinematicVideoPlayerConfig self)
{
Delegates.Params_get_AudioSource @params = new() 
{
self = self
};
if (_beforeget_AudioSource != null)
{
foreach (Delegates.get_AudioSource_BeforeArgs toInvoke in _beforeget_AudioSource.GetInvocationList())
{
try
{
_beforeget_AudioSource?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_AudioSource != null)
{
foreach (Delegates.get_AudioSource_AfterArgs toInvoke in _afterget_AudioSource.GetInvocationList())
{
try
{
retVal = _afterget_AudioSource.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_FaderStyle()
{
if (!HookedList.Contains("get_FaderStyle"))
{
HookedList.Add("get_FaderStyle");
new Hook(ReflectionHelper.GetMethodInfo(typeof(CinematicVideoPlayerConfig), "get_FaderStyle", true), get_FaderStyle);

}
}
internal static event Delegates.get_FaderStyle_BeforeArgs _beforeget_FaderStyle;
internal static event Delegates.get_FaderStyle_AfterArgs _afterget_FaderStyle;
private static CinematicVideoFaderStyles get_FaderStyle(Func<CinematicVideoPlayerConfig, CinematicVideoFaderStyles> orig, CinematicVideoPlayerConfig self)
{
Delegates.Params_get_FaderStyle @params = new() 
{
self = self
};
if (_beforeget_FaderStyle != null)
{
foreach (Delegates.get_FaderStyle_BeforeArgs toInvoke in _beforeget_FaderStyle.GetInvocationList())
{
try
{
_beforeget_FaderStyle?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_FaderStyle != null)
{
foreach (Delegates.get_FaderStyle_AfterArgs toInvoke in _afterget_FaderStyle.GetInvocationList())
{
try
{
retVal = _afterget_FaderStyle.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_ImplicitVolume()
{
if (!HookedList.Contains("get_ImplicitVolume"))
{
HookedList.Add("get_ImplicitVolume");
new Hook(ReflectionHelper.GetMethodInfo(typeof(CinematicVideoPlayerConfig), "get_ImplicitVolume", true), get_ImplicitVolume);

}
}
internal static event Delegates.get_ImplicitVolume_BeforeArgs _beforeget_ImplicitVolume;
internal static event Delegates.get_ImplicitVolume_AfterArgs _afterget_ImplicitVolume;
private static float get_ImplicitVolume(Func<CinematicVideoPlayerConfig, float> orig, CinematicVideoPlayerConfig self)
{
Delegates.Params_get_ImplicitVolume @params = new() 
{
self = self
};
if (_beforeget_ImplicitVolume != null)
{
foreach (Delegates.get_ImplicitVolume_BeforeArgs toInvoke in _beforeget_ImplicitVolume.GetInvocationList())
{
try
{
_beforeget_ImplicitVolume?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_ImplicitVolume != null)
{
foreach (Delegates.get_ImplicitVolume_AfterArgs toInvoke in _afterget_ImplicitVolume.GetInvocationList())
{
try
{
retVal = _afterget_ImplicitVolume.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_VideoReference
{
public CinematicVideoPlayerConfig self;
}
public delegate void get_VideoReference_BeforeArgs(Params_get_VideoReference args);
public delegate CinematicVideoReference get_VideoReference_AfterArgs(Params_get_VideoReference args, CinematicVideoReference ret);
public delegate CinematicVideoReference get_VideoReference_WithArgs (Func<CinematicVideoPlayerConfig, CinematicVideoReference> orig, CinematicVideoPlayerConfig self);
public sealed class Params_get_MeshRenderer
{
public CinematicVideoPlayerConfig self;
}
public delegate void get_MeshRenderer_BeforeArgs(Params_get_MeshRenderer args);
public delegate UnityEngine.MeshRenderer get_MeshRenderer_AfterArgs(Params_get_MeshRenderer args, UnityEngine.MeshRenderer ret);
public delegate UnityEngine.MeshRenderer get_MeshRenderer_WithArgs (Func<CinematicVideoPlayerConfig, UnityEngine.MeshRenderer> orig, CinematicVideoPlayerConfig self);
public sealed class Params_get_AudioSource
{
public CinematicVideoPlayerConfig self;
}
public delegate void get_AudioSource_BeforeArgs(Params_get_AudioSource args);
public delegate UnityEngine.AudioSource get_AudioSource_AfterArgs(Params_get_AudioSource args, UnityEngine.AudioSource ret);
public delegate UnityEngine.AudioSource get_AudioSource_WithArgs (Func<CinematicVideoPlayerConfig, UnityEngine.AudioSource> orig, CinematicVideoPlayerConfig self);
public sealed class Params_get_FaderStyle
{
public CinematicVideoPlayerConfig self;
}
public delegate void get_FaderStyle_BeforeArgs(Params_get_FaderStyle args);
public delegate CinematicVideoFaderStyles get_FaderStyle_AfterArgs(Params_get_FaderStyle args, CinematicVideoFaderStyles ret);
public delegate CinematicVideoFaderStyles get_FaderStyle_WithArgs (Func<CinematicVideoPlayerConfig, CinematicVideoFaderStyles> orig, CinematicVideoPlayerConfig self);
public sealed class Params_get_ImplicitVolume
{
public CinematicVideoPlayerConfig self;
}
public delegate void get_ImplicitVolume_BeforeArgs(Params_get_ImplicitVolume args);
public delegate float get_ImplicitVolume_AfterArgs(Params_get_ImplicitVolume args, float ret);
public delegate float get_ImplicitVolume_WithArgs (Func<CinematicVideoPlayerConfig, float> orig, CinematicVideoPlayerConfig self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_VideoReference_BeforeArgs get_VideoReference
{
add
{

HookHandler._beforeget_VideoReference += value;
HookHandler.Hookget_VideoReference();
}
remove => HookHandler._beforeget_VideoReference -= value;
}
public static event Delegates.get_MeshRenderer_BeforeArgs get_MeshRenderer
{
add
{

HookHandler._beforeget_MeshRenderer += value;
HookHandler.Hookget_MeshRenderer();
}
remove => HookHandler._beforeget_MeshRenderer -= value;
}
public static event Delegates.get_AudioSource_BeforeArgs get_AudioSource
{
add
{

HookHandler._beforeget_AudioSource += value;
HookHandler.Hookget_AudioSource();
}
remove => HookHandler._beforeget_AudioSource -= value;
}
public static event Delegates.get_FaderStyle_BeforeArgs get_FaderStyle
{
add
{

HookHandler._beforeget_FaderStyle += value;
HookHandler.Hookget_FaderStyle();
}
remove => HookHandler._beforeget_FaderStyle -= value;
}
public static event Delegates.get_ImplicitVolume_BeforeArgs get_ImplicitVolume
{
add
{

HookHandler._beforeget_ImplicitVolume += value;
HookHandler.Hookget_ImplicitVolume();
}
remove => HookHandler._beforeget_ImplicitVolume -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_VideoReference_AfterArgs get_VideoReference
{
add
{

HookHandler._afterget_VideoReference += value;
HookHandler.Hookget_VideoReference();
}
remove => HookHandler._afterget_VideoReference -= value;
}
public static event Delegates.get_MeshRenderer_AfterArgs get_MeshRenderer
{
add
{

HookHandler._afterget_MeshRenderer += value;
HookHandler.Hookget_MeshRenderer();
}
remove => HookHandler._afterget_MeshRenderer -= value;
}
public static event Delegates.get_AudioSource_AfterArgs get_AudioSource
{
add
{

HookHandler._afterget_AudioSource += value;
HookHandler.Hookget_AudioSource();
}
remove => HookHandler._afterget_AudioSource -= value;
}
public static event Delegates.get_FaderStyle_AfterArgs get_FaderStyle
{
add
{

HookHandler._afterget_FaderStyle += value;
HookHandler.Hookget_FaderStyle();
}
remove => HookHandler._afterget_FaderStyle -= value;
}
public static event Delegates.get_ImplicitVolume_AfterArgs get_ImplicitVolume
{
add
{

HookHandler._afterget_ImplicitVolume += value;
HookHandler.Hookget_ImplicitVolume();
}
remove => HookHandler._afterget_ImplicitVolume -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_VideoReference_WithArgs get_VideoReference
{
add => HookEndpointManager.Add<Delegates.get_VideoReference_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(CinematicVideoPlayerConfig), "get_VideoReference", true), value);
remove => HookEndpointManager.Remove<Delegates.get_VideoReference_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(CinematicVideoPlayerConfig), "get_VideoReference", true), value);
}
public static event Delegates.get_MeshRenderer_WithArgs get_MeshRenderer
{
add => HookEndpointManager.Add<Delegates.get_MeshRenderer_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(CinematicVideoPlayerConfig), "get_MeshRenderer", true), value);
remove => HookEndpointManager.Remove<Delegates.get_MeshRenderer_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(CinematicVideoPlayerConfig), "get_MeshRenderer", true), value);
}
public static event Delegates.get_AudioSource_WithArgs get_AudioSource
{
add => HookEndpointManager.Add<Delegates.get_AudioSource_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(CinematicVideoPlayerConfig), "get_AudioSource", true), value);
remove => HookEndpointManager.Remove<Delegates.get_AudioSource_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(CinematicVideoPlayerConfig), "get_AudioSource", true), value);
}
public static event Delegates.get_FaderStyle_WithArgs get_FaderStyle
{
add => HookEndpointManager.Add<Delegates.get_FaderStyle_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(CinematicVideoPlayerConfig), "get_FaderStyle", true), value);
remove => HookEndpointManager.Remove<Delegates.get_FaderStyle_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(CinematicVideoPlayerConfig), "get_FaderStyle", true), value);
}
public static event Delegates.get_ImplicitVolume_WithArgs get_ImplicitVolume
{
add => HookEndpointManager.Add<Delegates.get_ImplicitVolume_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(CinematicVideoPlayerConfig), "get_ImplicitVolume", true), value);
remove => HookEndpointManager.Remove<Delegates.get_ImplicitVolume_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(CinematicVideoPlayerConfig), "get_ImplicitVolume", true), value);
}
}

}
