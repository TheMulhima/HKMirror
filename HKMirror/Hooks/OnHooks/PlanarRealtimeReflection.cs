using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for PlanarRealtimeReflection class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPlanarRealtimeReflection
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookOnWillRenderObject()
{
if (!HookedList.Contains("OnWillRenderObject"))
{
HookedList.Add("OnWillRenderObject");
On.PlanarRealtimeReflection.OnWillRenderObject += OnWillRenderObject;

}
}
internal static event Delegates.OnWillRenderObject_BeforeArgs _beforeOnWillRenderObject;
internal static event Delegates.OnWillRenderObject_AfterArgs _afterOnWillRenderObject;
private static void OnWillRenderObject(On.PlanarRealtimeReflection.orig_OnWillRenderObject orig,PlanarRealtimeReflection self)
{
Delegates.Params_OnWillRenderObject @params = new() 
{
self = self
};
if (_beforeOnWillRenderObject != null)
{
foreach (Delegates.OnWillRenderObject_BeforeArgs toInvoke in _beforeOnWillRenderObject.GetInvocationList())
{
try
{
_beforeOnWillRenderObject?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnWillRenderObject != null)
{
foreach (Delegates.OnWillRenderObject_AfterArgs toInvoke in _afterOnWillRenderObject.GetInvocationList())
{
try
{
_afterOnWillRenderObject.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDisable()
{
if (!HookedList.Contains("OnDisable"))
{
HookedList.Add("OnDisable");
On.PlanarRealtimeReflection.OnDisable += OnDisable;

}
}
internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;
private static void OnDisable(On.PlanarRealtimeReflection.orig_OnDisable orig,PlanarRealtimeReflection self)
{
Delegates.Params_OnDisable @params = new() 
{
self = self
};
if (_beforeOnDisable != null)
{
foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
{
try
{
_beforeOnDisable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDisable != null)
{
foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
{
try
{
_afterOnDisable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateCameraModes()
{
if (!HookedList.Contains("UpdateCameraModes"))
{
HookedList.Add("UpdateCameraModes");
On.PlanarRealtimeReflection.UpdateCameraModes += UpdateCameraModes;

}
}
internal static event Delegates.UpdateCameraModes_BeforeArgs _beforeUpdateCameraModes;
internal static event Delegates.UpdateCameraModes_AfterArgs _afterUpdateCameraModes;
private static void UpdateCameraModes(On.PlanarRealtimeReflection.orig_UpdateCameraModes orig,PlanarRealtimeReflection self,  UnityEngine.Camera src,  UnityEngine.Camera dest)
{
Delegates.Params_UpdateCameraModes @params = new() 
{
self = self
, src = src
, dest = dest
};
if (_beforeUpdateCameraModes != null)
{
foreach (Delegates.UpdateCameraModes_BeforeArgs toInvoke in _beforeUpdateCameraModes.GetInvocationList())
{
try
{
_beforeUpdateCameraModes?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
src = @params.src;
dest = @params.dest;
orig(self, src, dest);
if (_afterUpdateCameraModes != null)
{
foreach (Delegates.UpdateCameraModes_AfterArgs toInvoke in _afterUpdateCameraModes.GetInvocationList())
{
try
{
_afterUpdateCameraModes.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCreateSurfaceObjects()
{
if (!HookedList.Contains("CreateSurfaceObjects"))
{
HookedList.Add("CreateSurfaceObjects");
On.PlanarRealtimeReflection.CreateSurfaceObjects += CreateSurfaceObjects;

}
}
internal static event Delegates.CreateSurfaceObjects_BeforeArgs _beforeCreateSurfaceObjects;
internal static event Delegates.CreateSurfaceObjects_AfterArgs _afterCreateSurfaceObjects;
private static void CreateSurfaceObjects(On.PlanarRealtimeReflection.orig_CreateSurfaceObjects orig,PlanarRealtimeReflection self,  UnityEngine.Camera currentCamera, out  UnityEngine.Camera reflectionCamera)
{
Delegates.Params_CreateSurfaceObjects @params = new() 
{
self = self
, currentCamera = currentCamera
};
if (_beforeCreateSurfaceObjects != null)
{
foreach (Delegates.CreateSurfaceObjects_BeforeArgs toInvoke in _beforeCreateSurfaceObjects.GetInvocationList())
{
try
{
_beforeCreateSurfaceObjects?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
currentCamera = @params.currentCamera;
reflectionCamera = @params.reflectionCamera;
orig(self, currentCamera, out reflectionCamera);
if (_afterCreateSurfaceObjects != null)
{
foreach (Delegates.CreateSurfaceObjects_AfterArgs toInvoke in _afterCreateSurfaceObjects.GetInvocationList())
{
try
{
_afterCreateSurfaceObjects.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hooksgn()
{
if (!HookedList.Contains("sgn"))
{
HookedList.Add("sgn");
On.PlanarRealtimeReflection.sgn += sgn;

}
}
internal static event Delegates.sgn_BeforeArgs _beforesgn;
internal static event Delegates.sgn_AfterArgs _aftersgn;
private static float sgn(On.PlanarRealtimeReflection.orig_sgn orig, float a)
{
Delegates.Params_sgn @params = new() 
{
a = a
};
if (_beforesgn != null)
{
foreach (Delegates.sgn_BeforeArgs toInvoke in _beforesgn.GetInvocationList())
{
try
{
_beforesgn?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
a = @params.a;
var retVal = orig(a);
if (_aftersgn != null)
{
foreach (Delegates.sgn_AfterArgs toInvoke in _aftersgn.GetInvocationList())
{
try
{
retVal = _aftersgn.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookCameraSpacePlane()
{
if (!HookedList.Contains("CameraSpacePlane"))
{
HookedList.Add("CameraSpacePlane");
On.PlanarRealtimeReflection.CameraSpacePlane += CameraSpacePlane;

}
}
internal static event Delegates.CameraSpacePlane_BeforeArgs _beforeCameraSpacePlane;
internal static event Delegates.CameraSpacePlane_AfterArgs _afterCameraSpacePlane;
private static UnityEngine.Vector4 CameraSpacePlane(On.PlanarRealtimeReflection.orig_CameraSpacePlane orig,PlanarRealtimeReflection self,  UnityEngine.Camera cam,  UnityEngine.Vector3 pos,  UnityEngine.Vector3 normal,  float sideSign)
{
Delegates.Params_CameraSpacePlane @params = new() 
{
self = self
, cam = cam
, pos = pos
, normal = normal
, sideSign = sideSign
};
if (_beforeCameraSpacePlane != null)
{
foreach (Delegates.CameraSpacePlane_BeforeArgs toInvoke in _beforeCameraSpacePlane.GetInvocationList())
{
try
{
_beforeCameraSpacePlane?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
cam = @params.cam;
pos = @params.pos;
normal = @params.normal;
sideSign = @params.sideSign;
var retVal = orig(self, cam, pos, normal, sideSign);
if (_afterCameraSpacePlane != null)
{
foreach (Delegates.CameraSpacePlane_AfterArgs toInvoke in _afterCameraSpacePlane.GetInvocationList())
{
try
{
retVal = _afterCameraSpacePlane.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookCalculateObliqueMatrix()
{
if (!HookedList.Contains("CalculateObliqueMatrix"))
{
HookedList.Add("CalculateObliqueMatrix");
On.PlanarRealtimeReflection.CalculateObliqueMatrix += CalculateObliqueMatrix;

}
}
internal static event Delegates.CalculateObliqueMatrix_BeforeArgs _beforeCalculateObliqueMatrix;
internal static event Delegates.CalculateObliqueMatrix_AfterArgs _afterCalculateObliqueMatrix;
private static void CalculateObliqueMatrix(On.PlanarRealtimeReflection.orig_CalculateObliqueMatrix orig,ref  UnityEngine.Matrix4x4 projection,  UnityEngine.Vector4 clipPlane)
{
Delegates.Params_CalculateObliqueMatrix @params = new() 
{
projection = projection
, clipPlane = clipPlane
};
if (_beforeCalculateObliqueMatrix != null)
{
foreach (Delegates.CalculateObliqueMatrix_BeforeArgs toInvoke in _beforeCalculateObliqueMatrix.GetInvocationList())
{
try
{
_beforeCalculateObliqueMatrix?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
projection = @params.projection;
clipPlane = @params.clipPlane;
orig(ref projection, clipPlane);
if (_afterCalculateObliqueMatrix != null)
{
foreach (Delegates.CalculateObliqueMatrix_AfterArgs toInvoke in _afterCalculateObliqueMatrix.GetInvocationList())
{
try
{
_afterCalculateObliqueMatrix.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCalculateReflectionMatrix()
{
if (!HookedList.Contains("CalculateReflectionMatrix"))
{
HookedList.Add("CalculateReflectionMatrix");
On.PlanarRealtimeReflection.CalculateReflectionMatrix += CalculateReflectionMatrix;

}
}
internal static event Delegates.CalculateReflectionMatrix_BeforeArgs _beforeCalculateReflectionMatrix;
internal static event Delegates.CalculateReflectionMatrix_AfterArgs _afterCalculateReflectionMatrix;
private static void CalculateReflectionMatrix(On.PlanarRealtimeReflection.orig_CalculateReflectionMatrix orig,ref  UnityEngine.Matrix4x4 reflectionMat,  UnityEngine.Vector4 plane)
{
Delegates.Params_CalculateReflectionMatrix @params = new() 
{
reflectionMat = reflectionMat
, plane = plane
};
if (_beforeCalculateReflectionMatrix != null)
{
foreach (Delegates.CalculateReflectionMatrix_BeforeArgs toInvoke in _beforeCalculateReflectionMatrix.GetInvocationList())
{
try
{
_beforeCalculateReflectionMatrix?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
reflectionMat = @params.reflectionMat;
plane = @params.plane;
orig(ref reflectionMat, plane);
if (_afterCalculateReflectionMatrix != null)
{
foreach (Delegates.CalculateReflectionMatrix_AfterArgs toInvoke in _afterCalculateReflectionMatrix.GetInvocationList())
{
try
{
_afterCalculateReflectionMatrix.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_OnWillRenderObject
{
public PlanarRealtimeReflection self;
}
public delegate void OnWillRenderObject_BeforeArgs(Params_OnWillRenderObject args);
public delegate void OnWillRenderObject_AfterArgs(Params_OnWillRenderObject args);
public delegate void OnWillRenderObject_WithArgs (Action<PlanarRealtimeReflection> orig, PlanarRealtimeReflection self);
public sealed class Params_OnDisable
{
public PlanarRealtimeReflection self;
}
public delegate void OnDisable_BeforeArgs(Params_OnDisable args);
public delegate void OnDisable_AfterArgs(Params_OnDisable args);
public delegate void OnDisable_WithArgs (Action<PlanarRealtimeReflection> orig, PlanarRealtimeReflection self);
public sealed class Params_UpdateCameraModes
{
public PlanarRealtimeReflection self;
public UnityEngine.Camera src;
public UnityEngine.Camera dest;
}
public delegate void UpdateCameraModes_BeforeArgs(Params_UpdateCameraModes args);
public delegate void UpdateCameraModes_AfterArgs(Params_UpdateCameraModes args);
public delegate void UpdateCameraModes_WithArgs (Action<PlanarRealtimeReflection,  UnityEngine.Camera,  UnityEngine.Camera> orig, PlanarRealtimeReflection self,  UnityEngine.Camera src,  UnityEngine.Camera dest);
public sealed class Params_CreateSurfaceObjects
{
public PlanarRealtimeReflection self;
public UnityEngine.Camera currentCamera;
public UnityEngine.Camera reflectionCamera;
}
public delegate void CreateSurfaceObjects_BeforeArgs(Params_CreateSurfaceObjects args);
public delegate void CreateSurfaceObjects_AfterArgs(Params_CreateSurfaceObjects args);
public delegate void CreateSurfaceObjects_WithArgs (Action<PlanarRealtimeReflection,  UnityEngine.Camera,  UnityEngine.Camera> orig, PlanarRealtimeReflection self,  UnityEngine.Camera currentCamera, out  UnityEngine.Camera reflectionCamera);
public sealed class Params_sgn
{
public float a;
}
public delegate void sgn_BeforeArgs(Params_sgn args);
public delegate float sgn_AfterArgs(Params_sgn args, float ret);
public delegate float sgn_WithArgs (Func< float, float> orig,  float a);
public sealed class Params_CameraSpacePlane
{
public PlanarRealtimeReflection self;
public UnityEngine.Camera cam;
public UnityEngine.Vector3 pos;
public UnityEngine.Vector3 normal;
public float sideSign;
}
public delegate void CameraSpacePlane_BeforeArgs(Params_CameraSpacePlane args);
public delegate UnityEngine.Vector4 CameraSpacePlane_AfterArgs(Params_CameraSpacePlane args, UnityEngine.Vector4 ret);
public delegate UnityEngine.Vector4 CameraSpacePlane_WithArgs (Func<PlanarRealtimeReflection,  UnityEngine.Camera,  UnityEngine.Vector3,  UnityEngine.Vector3,  float, UnityEngine.Vector4> orig, PlanarRealtimeReflection self,  UnityEngine.Camera cam,  UnityEngine.Vector3 pos,  UnityEngine.Vector3 normal,  float sideSign);
public sealed class Params_CalculateObliqueMatrix
{
public UnityEngine.Matrix4x4 projection;
public UnityEngine.Vector4 clipPlane;
}
public delegate void CalculateObliqueMatrix_BeforeArgs(Params_CalculateObliqueMatrix args);
public delegate void CalculateObliqueMatrix_AfterArgs(Params_CalculateObliqueMatrix args);
public delegate void CalculateObliqueMatrix_WithArgs (Action< UnityEngine.Matrix4x4,  UnityEngine.Vector4> orig, ref  UnityEngine.Matrix4x4 projection,  UnityEngine.Vector4 clipPlane);
public sealed class Params_CalculateReflectionMatrix
{
public UnityEngine.Matrix4x4 reflectionMat;
public UnityEngine.Vector4 plane;
}
public delegate void CalculateReflectionMatrix_BeforeArgs(Params_CalculateReflectionMatrix args);
public delegate void CalculateReflectionMatrix_AfterArgs(Params_CalculateReflectionMatrix args);
public delegate void CalculateReflectionMatrix_WithArgs (Action< UnityEngine.Matrix4x4,  UnityEngine.Vector4> orig, ref  UnityEngine.Matrix4x4 reflectionMat,  UnityEngine.Vector4 plane);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.OnWillRenderObject_BeforeArgs OnWillRenderObject
{
add
{

HookHandler._beforeOnWillRenderObject += value;
HookHandler.HookOnWillRenderObject();
}
remove => HookHandler._beforeOnWillRenderObject -= value;
}
public static event Delegates.OnDisable_BeforeArgs OnDisable
{
add
{

HookHandler._beforeOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._beforeOnDisable -= value;
}
public static event Delegates.UpdateCameraModes_BeforeArgs UpdateCameraModes
{
add
{

HookHandler._beforeUpdateCameraModes += value;
HookHandler.HookUpdateCameraModes();
}
remove => HookHandler._beforeUpdateCameraModes -= value;
}
public static event Delegates.CreateSurfaceObjects_BeforeArgs CreateSurfaceObjects
{
add
{

HookHandler._beforeCreateSurfaceObjects += value;
HookHandler.HookCreateSurfaceObjects();
}
remove => HookHandler._beforeCreateSurfaceObjects -= value;
}
public static event Delegates.sgn_BeforeArgs sgn
{
add
{

HookHandler._beforesgn += value;
HookHandler.Hooksgn();
}
remove => HookHandler._beforesgn -= value;
}
public static event Delegates.CameraSpacePlane_BeforeArgs CameraSpacePlane
{
add
{

HookHandler._beforeCameraSpacePlane += value;
HookHandler.HookCameraSpacePlane();
}
remove => HookHandler._beforeCameraSpacePlane -= value;
}
public static event Delegates.CalculateObliqueMatrix_BeforeArgs CalculateObliqueMatrix
{
add
{

HookHandler._beforeCalculateObliqueMatrix += value;
HookHandler.HookCalculateObliqueMatrix();
}
remove => HookHandler._beforeCalculateObliqueMatrix -= value;
}
public static event Delegates.CalculateReflectionMatrix_BeforeArgs CalculateReflectionMatrix
{
add
{

HookHandler._beforeCalculateReflectionMatrix += value;
HookHandler.HookCalculateReflectionMatrix();
}
remove => HookHandler._beforeCalculateReflectionMatrix -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.OnWillRenderObject_AfterArgs OnWillRenderObject
{
add
{

HookHandler._afterOnWillRenderObject += value;
HookHandler.HookOnWillRenderObject();
}
remove => HookHandler._afterOnWillRenderObject -= value;
}
public static event Delegates.OnDisable_AfterArgs OnDisable
{
add
{

HookHandler._afterOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._afterOnDisable -= value;
}
public static event Delegates.UpdateCameraModes_AfterArgs UpdateCameraModes
{
add
{

HookHandler._afterUpdateCameraModes += value;
HookHandler.HookUpdateCameraModes();
}
remove => HookHandler._afterUpdateCameraModes -= value;
}
public static event Delegates.CreateSurfaceObjects_AfterArgs CreateSurfaceObjects
{
add
{

HookHandler._afterCreateSurfaceObjects += value;
HookHandler.HookCreateSurfaceObjects();
}
remove => HookHandler._afterCreateSurfaceObjects -= value;
}
public static event Delegates.sgn_AfterArgs sgn
{
add
{

HookHandler._aftersgn += value;
HookHandler.Hooksgn();
}
remove => HookHandler._aftersgn -= value;
}
public static event Delegates.CameraSpacePlane_AfterArgs CameraSpacePlane
{
add
{

HookHandler._afterCameraSpacePlane += value;
HookHandler.HookCameraSpacePlane();
}
remove => HookHandler._afterCameraSpacePlane -= value;
}
public static event Delegates.CalculateObliqueMatrix_AfterArgs CalculateObliqueMatrix
{
add
{

HookHandler._afterCalculateObliqueMatrix += value;
HookHandler.HookCalculateObliqueMatrix();
}
remove => HookHandler._afterCalculateObliqueMatrix -= value;
}
public static event Delegates.CalculateReflectionMatrix_AfterArgs CalculateReflectionMatrix
{
add
{

HookHandler._afterCalculateReflectionMatrix += value;
HookHandler.HookCalculateReflectionMatrix();
}
remove => HookHandler._afterCalculateReflectionMatrix -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.PlanarRealtimeReflection.hook_OnWillRenderObject OnWillRenderObject
{
add => On.PlanarRealtimeReflection.OnWillRenderObject += value;
remove => On.PlanarRealtimeReflection.OnWillRenderObject -= value;
}
public static event On.PlanarRealtimeReflection.hook_OnDisable OnDisable
{
add => On.PlanarRealtimeReflection.OnDisable += value;
remove => On.PlanarRealtimeReflection.OnDisable -= value;
}
public static event On.PlanarRealtimeReflection.hook_UpdateCameraModes UpdateCameraModes
{
add => On.PlanarRealtimeReflection.UpdateCameraModes += value;
remove => On.PlanarRealtimeReflection.UpdateCameraModes -= value;
}
public static event On.PlanarRealtimeReflection.hook_CreateSurfaceObjects CreateSurfaceObjects
{
add => On.PlanarRealtimeReflection.CreateSurfaceObjects += value;
remove => On.PlanarRealtimeReflection.CreateSurfaceObjects -= value;
}
public static event On.PlanarRealtimeReflection.hook_sgn sgn
{
add => On.PlanarRealtimeReflection.sgn += value;
remove => On.PlanarRealtimeReflection.sgn -= value;
}
public static event On.PlanarRealtimeReflection.hook_CameraSpacePlane CameraSpacePlane
{
add => On.PlanarRealtimeReflection.CameraSpacePlane += value;
remove => On.PlanarRealtimeReflection.CameraSpacePlane -= value;
}
public static event On.PlanarRealtimeReflection.hook_CalculateObliqueMatrix CalculateObliqueMatrix
{
add => On.PlanarRealtimeReflection.CalculateObliqueMatrix += value;
remove => On.PlanarRealtimeReflection.CalculateObliqueMatrix -= value;
}
public static event On.PlanarRealtimeReflection.hook_CalculateReflectionMatrix CalculateReflectionMatrix
{
add => On.PlanarRealtimeReflection.CalculateReflectionMatrix += value;
remove => On.PlanarRealtimeReflection.CalculateReflectionMatrix -= value;
}
}

}
