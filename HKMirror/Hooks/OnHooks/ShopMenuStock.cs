namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ShopMenuStock class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnShopMenuStock
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.ShopMenuStock.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.ShopMenuStock.orig_Start orig, ShopMenuStock self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookSpawnStock()
        {
            if (!HookedList.Contains("SpawnStock"))
            {
                HookedList.Add("SpawnStock");
                On.ShopMenuStock.SpawnStock += SpawnStock;
            }
        }

        internal static event Delegates.SpawnStock_BeforeArgs _beforeSpawnStock;
        internal static event Delegates.SpawnStock_NormalArgs _afterSpawnStock;

        private static void SpawnStock(On.ShopMenuStock.orig_SpawnStock orig, ShopMenuStock self)
        {
            Delegates.Params_SpawnStock @params = new()
            {
                self = self
            };
            _beforeSpawnStock?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSpawnStock != null) _afterSpawnStock.Invoke(@params);
        }

        internal static void HookUpdateStock()
        {
            if (!HookedList.Contains("UpdateStock"))
            {
                HookedList.Add("UpdateStock");
                On.ShopMenuStock.UpdateStock += UpdateStock;
            }
        }

        internal static event Delegates.UpdateStock_BeforeArgs _beforeUpdateStock;
        internal static event Delegates.UpdateStock_NormalArgs _afterUpdateStock;

        private static void UpdateStock(On.ShopMenuStock.orig_UpdateStock orig, ShopMenuStock self)
        {
            Delegates.Params_UpdateStock @params = new()
            {
                self = self
            };
            _beforeUpdateStock?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateStock != null) _afterUpdateStock.Invoke(@params);
        }

        internal static void HookBuildFromMasterList()
        {
            if (!HookedList.Contains("BuildFromMasterList"))
            {
                HookedList.Add("BuildFromMasterList");
                On.ShopMenuStock.BuildFromMasterList += BuildFromMasterList;
            }
        }

        internal static event Delegates.BuildFromMasterList_BeforeArgs _beforeBuildFromMasterList;
        internal static event Delegates.BuildFromMasterList_NormalArgs _afterBuildFromMasterList;

        private static void BuildFromMasterList(On.ShopMenuStock.orig_BuildFromMasterList orig, ShopMenuStock self)
        {
            Delegates.Params_BuildFromMasterList @params = new()
            {
                self = self
            };
            _beforeBuildFromMasterList?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBuildFromMasterList != null) _afterBuildFromMasterList.Invoke(@params);
        }

        internal static void HookStockLeft()
        {
            if (!HookedList.Contains("StockLeft"))
            {
                HookedList.Add("StockLeft");
                On.ShopMenuStock.StockLeft += StockLeft;
            }
        }

        internal static event Delegates.StockLeft_BeforeArgs _beforeStockLeft;
        internal static event Delegates.StockLeft_NormalArgs _afterStockLeft;

        private static bool StockLeft(On.ShopMenuStock.orig_StockLeft orig, ShopMenuStock self)
        {
            Delegates.Params_StockLeft @params = new()
            {
                self = self
            };
            _beforeStockLeft?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterStockLeft != null) retVal = _afterStockLeft.Invoke(@params);
            return retVal;
        }

        internal static void HookBuildItemList()
        {
            if (!HookedList.Contains("BuildItemList"))
            {
                HookedList.Add("BuildItemList");
                On.ShopMenuStock.BuildItemList += BuildItemList;
            }
        }

        internal static event Delegates.BuildItemList_BeforeArgs _beforeBuildItemList;
        internal static event Delegates.BuildItemList_NormalArgs _afterBuildItemList;

        private static void BuildItemList(On.ShopMenuStock.orig_BuildItemList orig, ShopMenuStock self)
        {
            Delegates.Params_BuildItemList @params = new()
            {
                self = self
            };
            _beforeBuildItemList?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBuildItemList != null) _afterBuildItemList.Invoke(@params);
        }

        internal static void HookGetItemCount()
        {
            if (!HookedList.Contains("GetItemCount"))
            {
                HookedList.Add("GetItemCount");
                On.ShopMenuStock.GetItemCount += GetItemCount;
            }
        }

        internal static event Delegates.GetItemCount_BeforeArgs _beforeGetItemCount;
        internal static event Delegates.GetItemCount_NormalArgs _afterGetItemCount;

        private static int GetItemCount(On.ShopMenuStock.orig_GetItemCount orig, ShopMenuStock self)
        {
            Delegates.Params_GetItemCount @params = new()
            {
                self = self
            };
            _beforeGetItemCount?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetItemCount != null) retVal = _afterGetItemCount.Invoke(@params);
            return retVal;
        }

        internal static void HookGetCost()
        {
            if (!HookedList.Contains("GetCost"))
            {
                HookedList.Add("GetCost");
                On.ShopMenuStock.GetCost += GetCost;
            }
        }

        internal static event Delegates.GetCost_BeforeArgs _beforeGetCost;
        internal static event Delegates.GetCost_NormalArgs _afterGetCost;

        private static int GetCost(On.ShopMenuStock.orig_GetCost orig, ShopMenuStock self, int itemNum)
        {
            Delegates.Params_GetCost @params = new()
            {
                self = self, itemNum = itemNum
            };
            _beforeGetCost?.Invoke(@params);
            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetCost != null) retVal = _afterGetCost.Invoke(@params);
            return retVal;
        }

        internal static void HookGetNotchCost()
        {
            if (!HookedList.Contains("GetNotchCost"))
            {
                HookedList.Add("GetNotchCost");
                On.ShopMenuStock.GetNotchCost += GetNotchCost;
            }
        }

        internal static event Delegates.GetNotchCost_BeforeArgs _beforeGetNotchCost;
        internal static event Delegates.GetNotchCost_NormalArgs _afterGetNotchCost;

        private static int GetNotchCost(On.ShopMenuStock.orig_GetNotchCost orig, ShopMenuStock self, int itemNum)
        {
            Delegates.Params_GetNotchCost @params = new()
            {
                self = self, itemNum = itemNum
            };
            _beforeGetNotchCost?.Invoke(@params);
            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetNotchCost != null) retVal = _afterGetNotchCost.Invoke(@params);
            return retVal;
        }

        internal static void HookGetNameConvo()
        {
            if (!HookedList.Contains("GetNameConvo"))
            {
                HookedList.Add("GetNameConvo");
                On.ShopMenuStock.GetNameConvo += GetNameConvo;
            }
        }

        internal static event Delegates.GetNameConvo_BeforeArgs _beforeGetNameConvo;
        internal static event Delegates.GetNameConvo_NormalArgs _afterGetNameConvo;

        private static string GetNameConvo(On.ShopMenuStock.orig_GetNameConvo orig, ShopMenuStock self, int itemNum)
        {
            Delegates.Params_GetNameConvo @params = new()
            {
                self = self, itemNum = itemNum
            };
            _beforeGetNameConvo?.Invoke(@params);
            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetNameConvo != null) retVal = _afterGetNameConvo.Invoke(@params);
            return retVal;
        }

        internal static void HookGetDescConvo()
        {
            if (!HookedList.Contains("GetDescConvo"))
            {
                HookedList.Add("GetDescConvo");
                On.ShopMenuStock.GetDescConvo += GetDescConvo;
            }
        }

        internal static event Delegates.GetDescConvo_BeforeArgs _beforeGetDescConvo;
        internal static event Delegates.GetDescConvo_NormalArgs _afterGetDescConvo;

        private static string GetDescConvo(On.ShopMenuStock.orig_GetDescConvo orig, ShopMenuStock self, int itemNum)
        {
            Delegates.Params_GetDescConvo @params = new()
            {
                self = self, itemNum = itemNum
            };
            _beforeGetDescConvo?.Invoke(@params);
            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetDescConvo != null) retVal = _afterGetDescConvo.Invoke(@params);
            return retVal;
        }

        internal static void HookGetPlayerDataBoolName()
        {
            if (!HookedList.Contains("GetPlayerDataBoolName"))
            {
                HookedList.Add("GetPlayerDataBoolName");
                On.ShopMenuStock.GetPlayerDataBoolName += GetPlayerDataBoolName;
            }
        }

        internal static event Delegates.GetPlayerDataBoolName_BeforeArgs _beforeGetPlayerDataBoolName;
        internal static event Delegates.GetPlayerDataBoolName_NormalArgs _afterGetPlayerDataBoolName;

        private static string GetPlayerDataBoolName(On.ShopMenuStock.orig_GetPlayerDataBoolName orig,
            ShopMenuStock self, int itemNum)
        {
            Delegates.Params_GetPlayerDataBoolName @params = new()
            {
                self = self, itemNum = itemNum
            };
            _beforeGetPlayerDataBoolName?.Invoke(@params);
            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetPlayerDataBoolName != null) retVal = _afterGetPlayerDataBoolName.Invoke(@params);
            return retVal;
        }

        internal static void HookGetSpecialType()
        {
            if (!HookedList.Contains("GetSpecialType"))
            {
                HookedList.Add("GetSpecialType");
                On.ShopMenuStock.GetSpecialType += GetSpecialType;
            }
        }

        internal static event Delegates.GetSpecialType_BeforeArgs _beforeGetSpecialType;
        internal static event Delegates.GetSpecialType_NormalArgs _afterGetSpecialType;

        private static int GetSpecialType(On.ShopMenuStock.orig_GetSpecialType orig, ShopMenuStock self, int itemNum)
        {
            Delegates.Params_GetSpecialType @params = new()
            {
                self = self, itemNum = itemNum
            };
            _beforeGetSpecialType?.Invoke(@params);
            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetSpecialType != null) retVal = _afterGetSpecialType.Invoke(@params);
            return retVal;
        }

        internal static void HookGetRelicNumber()
        {
            if (!HookedList.Contains("GetRelicNumber"))
            {
                HookedList.Add("GetRelicNumber");
                On.ShopMenuStock.GetRelicNumber += GetRelicNumber;
            }
        }

        internal static event Delegates.GetRelicNumber_BeforeArgs _beforeGetRelicNumber;
        internal static event Delegates.GetRelicNumber_NormalArgs _afterGetRelicNumber;

        private static int GetRelicNumber(On.ShopMenuStock.orig_GetRelicNumber orig, ShopMenuStock self, int itemNum)
        {
            Delegates.Params_GetRelicNumber @params = new()
            {
                self = self, itemNum = itemNum
            };
            _beforeGetRelicNumber?.Invoke(@params);
            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetRelicNumber != null) retVal = _afterGetRelicNumber.Invoke(@params);
            return retVal;
        }

        internal static void HookGetCharmsRequired()
        {
            if (!HookedList.Contains("GetCharmsRequired"))
            {
                HookedList.Add("GetCharmsRequired");
                On.ShopMenuStock.GetCharmsRequired += GetCharmsRequired;
            }
        }

        internal static event Delegates.GetCharmsRequired_BeforeArgs _beforeGetCharmsRequired;
        internal static event Delegates.GetCharmsRequired_NormalArgs _afterGetCharmsRequired;

        private static int GetCharmsRequired(On.ShopMenuStock.orig_GetCharmsRequired orig, ShopMenuStock self,
            int itemNum)
        {
            Delegates.Params_GetCharmsRequired @params = new()
            {
                self = self, itemNum = itemNum
            };
            _beforeGetCharmsRequired?.Invoke(@params);
            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetCharmsRequired != null) retVal = _afterGetCharmsRequired.Invoke(@params);
            return retVal;
        }

        internal static void HookGetYDistance()
        {
            if (!HookedList.Contains("GetYDistance"))
            {
                HookedList.Add("GetYDistance");
                On.ShopMenuStock.GetYDistance += GetYDistance;
            }
        }

        internal static event Delegates.GetYDistance_BeforeArgs _beforeGetYDistance;
        internal static event Delegates.GetYDistance_NormalArgs _afterGetYDistance;

        private static float GetYDistance(On.ShopMenuStock.orig_GetYDistance orig, ShopMenuStock self)
        {
            Delegates.Params_GetYDistance @params = new()
            {
                self = self
            };
            _beforeGetYDistance?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetYDistance != null) retVal = _afterGetYDistance.Invoke(@params);
            return retVal;
        }

        internal static void HookGetItemSprite()
        {
            if (!HookedList.Contains("GetItemSprite"))
            {
                HookedList.Add("GetItemSprite");
                On.ShopMenuStock.GetItemSprite += GetItemSprite;
            }
        }

        internal static event Delegates.GetItemSprite_BeforeArgs _beforeGetItemSprite;
        internal static event Delegates.GetItemSprite_NormalArgs _afterGetItemSprite;

        private static Sprite GetItemSprite(On.ShopMenuStock.orig_GetItemSprite orig, ShopMenuStock self, int itemNum)
        {
            Delegates.Params_GetItemSprite @params = new()
            {
                self = self, itemNum = itemNum
            };
            _beforeGetItemSprite?.Invoke(@params);
            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetItemSprite != null) retVal = _afterGetItemSprite.Invoke(@params);
            return retVal;
        }

        internal static void HookGetItemSpriteScale()
        {
            if (!HookedList.Contains("GetItemSpriteScale"))
            {
                HookedList.Add("GetItemSpriteScale");
                On.ShopMenuStock.GetItemSpriteScale += GetItemSpriteScale;
            }
        }

        internal static event Delegates.GetItemSpriteScale_BeforeArgs _beforeGetItemSpriteScale;
        internal static event Delegates.GetItemSpriteScale_NormalArgs _afterGetItemSpriteScale;

        private static Vector3 GetItemSpriteScale(On.ShopMenuStock.orig_GetItemSpriteScale orig, ShopMenuStock self,
            int itemNum)
        {
            Delegates.Params_GetItemSpriteScale @params = new()
            {
                self = self, itemNum = itemNum
            };
            _beforeGetItemSpriteScale?.Invoke(@params);
            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetItemSpriteScale != null) retVal = _afterGetItemSpriteScale.Invoke(@params);
            return retVal;
        }

        internal static void HookCanBuy()
        {
            if (!HookedList.Contains("CanBuy"))
            {
                HookedList.Add("CanBuy");
                On.ShopMenuStock.CanBuy += CanBuy;
            }
        }

        internal static event Delegates.CanBuy_BeforeArgs _beforeCanBuy;
        internal static event Delegates.CanBuy_NormalArgs _afterCanBuy;

        private static bool CanBuy(On.ShopMenuStock.orig_CanBuy orig, ShopMenuStock self, int itemNum)
        {
            Delegates.Params_CanBuy @params = new()
            {
                self = self, itemNum = itemNum
            };
            _beforeCanBuy?.Invoke(@params);
            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterCanBuy != null) retVal = _afterCanBuy.Invoke(@params);
            return retVal;
        }

        internal static void HookGetItemGameObject()
        {
            if (!HookedList.Contains("GetItemGameObject"))
            {
                HookedList.Add("GetItemGameObject");
                On.ShopMenuStock.GetItemGameObject += GetItemGameObject;
            }
        }

        internal static event Delegates.GetItemGameObject_BeforeArgs _beforeGetItemGameObject;
        internal static event Delegates.GetItemGameObject_NormalArgs _afterGetItemGameObject;

        private static GameObject GetItemGameObject(On.ShopMenuStock.orig_GetItemGameObject orig, ShopMenuStock self,
            int itemNum)
        {
            Delegates.Params_GetItemGameObject @params = new()
            {
                self = self, itemNum = itemNum
            };
            _beforeGetItemGameObject?.Invoke(@params);
            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetItemGameObject != null) retVal = _afterGetItemGameObject.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void BuildFromMasterList_BeforeArgs(Params_BuildFromMasterList args);

        public delegate void BuildFromMasterList_NormalArgs(Params_BuildFromMasterList args);

        public delegate void BuildItemList_BeforeArgs(Params_BuildItemList args);

        public delegate void BuildItemList_NormalArgs(Params_BuildItemList args);

        public delegate void CanBuy_BeforeArgs(Params_CanBuy args);

        public delegate bool CanBuy_NormalArgs(Params_CanBuy args);

        public delegate void GetCharmsRequired_BeforeArgs(Params_GetCharmsRequired args);

        public delegate int GetCharmsRequired_NormalArgs(Params_GetCharmsRequired args);

        public delegate void GetCost_BeforeArgs(Params_GetCost args);

        public delegate int GetCost_NormalArgs(Params_GetCost args);

        public delegate void GetDescConvo_BeforeArgs(Params_GetDescConvo args);

        public delegate string GetDescConvo_NormalArgs(Params_GetDescConvo args);

        public delegate void GetItemCount_BeforeArgs(Params_GetItemCount args);

        public delegate int GetItemCount_NormalArgs(Params_GetItemCount args);

        public delegate void GetItemGameObject_BeforeArgs(Params_GetItemGameObject args);

        public delegate GameObject GetItemGameObject_NormalArgs(Params_GetItemGameObject args);

        public delegate void GetItemSprite_BeforeArgs(Params_GetItemSprite args);

        public delegate Sprite GetItemSprite_NormalArgs(Params_GetItemSprite args);

        public delegate void GetItemSpriteScale_BeforeArgs(Params_GetItemSpriteScale args);

        public delegate Vector3 GetItemSpriteScale_NormalArgs(Params_GetItemSpriteScale args);

        public delegate void GetNameConvo_BeforeArgs(Params_GetNameConvo args);

        public delegate string GetNameConvo_NormalArgs(Params_GetNameConvo args);

        public delegate void GetNotchCost_BeforeArgs(Params_GetNotchCost args);

        public delegate int GetNotchCost_NormalArgs(Params_GetNotchCost args);

        public delegate void GetPlayerDataBoolName_BeforeArgs(Params_GetPlayerDataBoolName args);

        public delegate string GetPlayerDataBoolName_NormalArgs(Params_GetPlayerDataBoolName args);

        public delegate void GetRelicNumber_BeforeArgs(Params_GetRelicNumber args);

        public delegate int GetRelicNumber_NormalArgs(Params_GetRelicNumber args);

        public delegate void GetSpecialType_BeforeArgs(Params_GetSpecialType args);

        public delegate int GetSpecialType_NormalArgs(Params_GetSpecialType args);

        public delegate void GetYDistance_BeforeArgs(Params_GetYDistance args);

        public delegate float GetYDistance_NormalArgs(Params_GetYDistance args);

        public delegate void SpawnStock_BeforeArgs(Params_SpawnStock args);

        public delegate void SpawnStock_NormalArgs(Params_SpawnStock args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void StockLeft_BeforeArgs(Params_StockLeft args);

        public delegate bool StockLeft_NormalArgs(Params_StockLeft args);

        public delegate void UpdateStock_BeforeArgs(Params_UpdateStock args);

        public delegate void UpdateStock_NormalArgs(Params_UpdateStock args);

        public sealed class Params_Start
        {
            public ShopMenuStock self;
        }

        public sealed class Params_SpawnStock
        {
            public ShopMenuStock self;
        }

        public sealed class Params_UpdateStock
        {
            public ShopMenuStock self;
        }

        public sealed class Params_BuildFromMasterList
        {
            public ShopMenuStock self;
        }

        public sealed class Params_StockLeft
        {
            public ShopMenuStock self;
        }

        public sealed class Params_BuildItemList
        {
            public ShopMenuStock self;
        }

        public sealed class Params_GetItemCount
        {
            public ShopMenuStock self;
        }

        public sealed class Params_GetCost
        {
            public int itemNum;
            public ShopMenuStock self;
        }

        public sealed class Params_GetNotchCost
        {
            public int itemNum;
            public ShopMenuStock self;
        }

        public sealed class Params_GetNameConvo
        {
            public int itemNum;
            public ShopMenuStock self;
        }

        public sealed class Params_GetDescConvo
        {
            public int itemNum;
            public ShopMenuStock self;
        }

        public sealed class Params_GetPlayerDataBoolName
        {
            public int itemNum;
            public ShopMenuStock self;
        }

        public sealed class Params_GetSpecialType
        {
            public int itemNum;
            public ShopMenuStock self;
        }

        public sealed class Params_GetRelicNumber
        {
            public int itemNum;
            public ShopMenuStock self;
        }

        public sealed class Params_GetCharmsRequired
        {
            public int itemNum;
            public ShopMenuStock self;
        }

        public sealed class Params_GetYDistance
        {
            public ShopMenuStock self;
        }

        public sealed class Params_GetItemSprite
        {
            public int itemNum;
            public ShopMenuStock self;
        }

        public sealed class Params_GetItemSpriteScale
        {
            public int itemNum;
            public ShopMenuStock self;
        }

        public sealed class Params_CanBuy
        {
            public int itemNum;
            public ShopMenuStock self;
        }

        public sealed class Params_GetItemGameObject
        {
            public int itemNum;
            public ShopMenuStock self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.SpawnStock_BeforeArgs SpawnStock
        {
            add
            {
                HookHandler._beforeSpawnStock += value;
                HookHandler.HookSpawnStock();
            }
            remove => HookHandler._beforeSpawnStock -= value;
        }

        public static event Delegates.UpdateStock_BeforeArgs UpdateStock
        {
            add
            {
                HookHandler._beforeUpdateStock += value;
                HookHandler.HookUpdateStock();
            }
            remove => HookHandler._beforeUpdateStock -= value;
        }

        public static event Delegates.BuildFromMasterList_BeforeArgs BuildFromMasterList
        {
            add
            {
                HookHandler._beforeBuildFromMasterList += value;
                HookHandler.HookBuildFromMasterList();
            }
            remove => HookHandler._beforeBuildFromMasterList -= value;
        }

        public static event Delegates.StockLeft_BeforeArgs StockLeft
        {
            add
            {
                HookHandler._beforeStockLeft += value;
                HookHandler.HookStockLeft();
            }
            remove => HookHandler._beforeStockLeft -= value;
        }

        public static event Delegates.BuildItemList_BeforeArgs BuildItemList
        {
            add
            {
                HookHandler._beforeBuildItemList += value;
                HookHandler.HookBuildItemList();
            }
            remove => HookHandler._beforeBuildItemList -= value;
        }

        public static event Delegates.GetItemCount_BeforeArgs GetItemCount
        {
            add
            {
                HookHandler._beforeGetItemCount += value;
                HookHandler.HookGetItemCount();
            }
            remove => HookHandler._beforeGetItemCount -= value;
        }

        public static event Delegates.GetCost_BeforeArgs GetCost
        {
            add
            {
                HookHandler._beforeGetCost += value;
                HookHandler.HookGetCost();
            }
            remove => HookHandler._beforeGetCost -= value;
        }

        public static event Delegates.GetNotchCost_BeforeArgs GetNotchCost
        {
            add
            {
                HookHandler._beforeGetNotchCost += value;
                HookHandler.HookGetNotchCost();
            }
            remove => HookHandler._beforeGetNotchCost -= value;
        }

        public static event Delegates.GetNameConvo_BeforeArgs GetNameConvo
        {
            add
            {
                HookHandler._beforeGetNameConvo += value;
                HookHandler.HookGetNameConvo();
            }
            remove => HookHandler._beforeGetNameConvo -= value;
        }

        public static event Delegates.GetDescConvo_BeforeArgs GetDescConvo
        {
            add
            {
                HookHandler._beforeGetDescConvo += value;
                HookHandler.HookGetDescConvo();
            }
            remove => HookHandler._beforeGetDescConvo -= value;
        }

        public static event Delegates.GetPlayerDataBoolName_BeforeArgs GetPlayerDataBoolName
        {
            add
            {
                HookHandler._beforeGetPlayerDataBoolName += value;
                HookHandler.HookGetPlayerDataBoolName();
            }
            remove => HookHandler._beforeGetPlayerDataBoolName -= value;
        }

        public static event Delegates.GetSpecialType_BeforeArgs GetSpecialType
        {
            add
            {
                HookHandler._beforeGetSpecialType += value;
                HookHandler.HookGetSpecialType();
            }
            remove => HookHandler._beforeGetSpecialType -= value;
        }

        public static event Delegates.GetRelicNumber_BeforeArgs GetRelicNumber
        {
            add
            {
                HookHandler._beforeGetRelicNumber += value;
                HookHandler.HookGetRelicNumber();
            }
            remove => HookHandler._beforeGetRelicNumber -= value;
        }

        public static event Delegates.GetCharmsRequired_BeforeArgs GetCharmsRequired
        {
            add
            {
                HookHandler._beforeGetCharmsRequired += value;
                HookHandler.HookGetCharmsRequired();
            }
            remove => HookHandler._beforeGetCharmsRequired -= value;
        }

        public static event Delegates.GetYDistance_BeforeArgs GetYDistance
        {
            add
            {
                HookHandler._beforeGetYDistance += value;
                HookHandler.HookGetYDistance();
            }
            remove => HookHandler._beforeGetYDistance -= value;
        }

        public static event Delegates.GetItemSprite_BeforeArgs GetItemSprite
        {
            add
            {
                HookHandler._beforeGetItemSprite += value;
                HookHandler.HookGetItemSprite();
            }
            remove => HookHandler._beforeGetItemSprite -= value;
        }

        public static event Delegates.GetItemSpriteScale_BeforeArgs GetItemSpriteScale
        {
            add
            {
                HookHandler._beforeGetItemSpriteScale += value;
                HookHandler.HookGetItemSpriteScale();
            }
            remove => HookHandler._beforeGetItemSpriteScale -= value;
        }

        public static event Delegates.CanBuy_BeforeArgs CanBuy
        {
            add
            {
                HookHandler._beforeCanBuy += value;
                HookHandler.HookCanBuy();
            }
            remove => HookHandler._beforeCanBuy -= value;
        }

        public static event Delegates.GetItemGameObject_BeforeArgs GetItemGameObject
        {
            add
            {
                HookHandler._beforeGetItemGameObject += value;
                HookHandler.HookGetItemGameObject();
            }
            remove => HookHandler._beforeGetItemGameObject -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.SpawnStock_NormalArgs SpawnStock
        {
            add
            {
                HookHandler._afterSpawnStock += value;
                HookHandler.HookSpawnStock();
            }
            remove => HookHandler._afterSpawnStock -= value;
        }

        public static event Delegates.UpdateStock_NormalArgs UpdateStock
        {
            add
            {
                HookHandler._afterUpdateStock += value;
                HookHandler.HookUpdateStock();
            }
            remove => HookHandler._afterUpdateStock -= value;
        }

        public static event Delegates.BuildFromMasterList_NormalArgs BuildFromMasterList
        {
            add
            {
                HookHandler._afterBuildFromMasterList += value;
                HookHandler.HookBuildFromMasterList();
            }
            remove => HookHandler._afterBuildFromMasterList -= value;
        }

        public static event Delegates.StockLeft_NormalArgs StockLeft
        {
            add
            {
                HookHandler._afterStockLeft += value;
                HookHandler.HookStockLeft();
            }
            remove => HookHandler._afterStockLeft -= value;
        }

        public static event Delegates.BuildItemList_NormalArgs BuildItemList
        {
            add
            {
                HookHandler._afterBuildItemList += value;
                HookHandler.HookBuildItemList();
            }
            remove => HookHandler._afterBuildItemList -= value;
        }

        public static event Delegates.GetItemCount_NormalArgs GetItemCount
        {
            add
            {
                HookHandler._afterGetItemCount += value;
                HookHandler.HookGetItemCount();
            }
            remove => HookHandler._afterGetItemCount -= value;
        }

        public static event Delegates.GetCost_NormalArgs GetCost
        {
            add
            {
                HookHandler._afterGetCost += value;
                HookHandler.HookGetCost();
            }
            remove => HookHandler._afterGetCost -= value;
        }

        public static event Delegates.GetNotchCost_NormalArgs GetNotchCost
        {
            add
            {
                HookHandler._afterGetNotchCost += value;
                HookHandler.HookGetNotchCost();
            }
            remove => HookHandler._afterGetNotchCost -= value;
        }

        public static event Delegates.GetNameConvo_NormalArgs GetNameConvo
        {
            add
            {
                HookHandler._afterGetNameConvo += value;
                HookHandler.HookGetNameConvo();
            }
            remove => HookHandler._afterGetNameConvo -= value;
        }

        public static event Delegates.GetDescConvo_NormalArgs GetDescConvo
        {
            add
            {
                HookHandler._afterGetDescConvo += value;
                HookHandler.HookGetDescConvo();
            }
            remove => HookHandler._afterGetDescConvo -= value;
        }

        public static event Delegates.GetPlayerDataBoolName_NormalArgs GetPlayerDataBoolName
        {
            add
            {
                HookHandler._afterGetPlayerDataBoolName += value;
                HookHandler.HookGetPlayerDataBoolName();
            }
            remove => HookHandler._afterGetPlayerDataBoolName -= value;
        }

        public static event Delegates.GetSpecialType_NormalArgs GetSpecialType
        {
            add
            {
                HookHandler._afterGetSpecialType += value;
                HookHandler.HookGetSpecialType();
            }
            remove => HookHandler._afterGetSpecialType -= value;
        }

        public static event Delegates.GetRelicNumber_NormalArgs GetRelicNumber
        {
            add
            {
                HookHandler._afterGetRelicNumber += value;
                HookHandler.HookGetRelicNumber();
            }
            remove => HookHandler._afterGetRelicNumber -= value;
        }

        public static event Delegates.GetCharmsRequired_NormalArgs GetCharmsRequired
        {
            add
            {
                HookHandler._afterGetCharmsRequired += value;
                HookHandler.HookGetCharmsRequired();
            }
            remove => HookHandler._afterGetCharmsRequired -= value;
        }

        public static event Delegates.GetYDistance_NormalArgs GetYDistance
        {
            add
            {
                HookHandler._afterGetYDistance += value;
                HookHandler.HookGetYDistance();
            }
            remove => HookHandler._afterGetYDistance -= value;
        }

        public static event Delegates.GetItemSprite_NormalArgs GetItemSprite
        {
            add
            {
                HookHandler._afterGetItemSprite += value;
                HookHandler.HookGetItemSprite();
            }
            remove => HookHandler._afterGetItemSprite -= value;
        }

        public static event Delegates.GetItemSpriteScale_NormalArgs GetItemSpriteScale
        {
            add
            {
                HookHandler._afterGetItemSpriteScale += value;
                HookHandler.HookGetItemSpriteScale();
            }
            remove => HookHandler._afterGetItemSpriteScale -= value;
        }

        public static event Delegates.CanBuy_NormalArgs CanBuy
        {
            add
            {
                HookHandler._afterCanBuy += value;
                HookHandler.HookCanBuy();
            }
            remove => HookHandler._afterCanBuy -= value;
        }

        public static event Delegates.GetItemGameObject_NormalArgs GetItemGameObject
        {
            add
            {
                HookHandler._afterGetItemGameObject += value;
                HookHandler.HookGetItemGameObject();
            }
            remove => HookHandler._afterGetItemGameObject -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.ShopMenuStock.hook_Start Start
        {
            add => On.ShopMenuStock.Start += value;
            remove => On.ShopMenuStock.Start -= value;
        }

        public static event On.ShopMenuStock.hook_SpawnStock SpawnStock
        {
            add => On.ShopMenuStock.SpawnStock += value;
            remove => On.ShopMenuStock.SpawnStock -= value;
        }

        public static event On.ShopMenuStock.hook_UpdateStock UpdateStock
        {
            add => On.ShopMenuStock.UpdateStock += value;
            remove => On.ShopMenuStock.UpdateStock -= value;
        }

        public static event On.ShopMenuStock.hook_BuildFromMasterList BuildFromMasterList
        {
            add => On.ShopMenuStock.BuildFromMasterList += value;
            remove => On.ShopMenuStock.BuildFromMasterList -= value;
        }

        public static event On.ShopMenuStock.hook_StockLeft StockLeft
        {
            add => On.ShopMenuStock.StockLeft += value;
            remove => On.ShopMenuStock.StockLeft -= value;
        }

        public static event On.ShopMenuStock.hook_BuildItemList BuildItemList
        {
            add => On.ShopMenuStock.BuildItemList += value;
            remove => On.ShopMenuStock.BuildItemList -= value;
        }

        public static event On.ShopMenuStock.hook_GetItemCount GetItemCount
        {
            add => On.ShopMenuStock.GetItemCount += value;
            remove => On.ShopMenuStock.GetItemCount -= value;
        }

        public static event On.ShopMenuStock.hook_GetCost GetCost
        {
            add => On.ShopMenuStock.GetCost += value;
            remove => On.ShopMenuStock.GetCost -= value;
        }

        public static event On.ShopMenuStock.hook_GetNotchCost GetNotchCost
        {
            add => On.ShopMenuStock.GetNotchCost += value;
            remove => On.ShopMenuStock.GetNotchCost -= value;
        }

        public static event On.ShopMenuStock.hook_GetNameConvo GetNameConvo
        {
            add => On.ShopMenuStock.GetNameConvo += value;
            remove => On.ShopMenuStock.GetNameConvo -= value;
        }

        public static event On.ShopMenuStock.hook_GetDescConvo GetDescConvo
        {
            add => On.ShopMenuStock.GetDescConvo += value;
            remove => On.ShopMenuStock.GetDescConvo -= value;
        }

        public static event On.ShopMenuStock.hook_GetPlayerDataBoolName GetPlayerDataBoolName
        {
            add => On.ShopMenuStock.GetPlayerDataBoolName += value;
            remove => On.ShopMenuStock.GetPlayerDataBoolName -= value;
        }

        public static event On.ShopMenuStock.hook_GetSpecialType GetSpecialType
        {
            add => On.ShopMenuStock.GetSpecialType += value;
            remove => On.ShopMenuStock.GetSpecialType -= value;
        }

        public static event On.ShopMenuStock.hook_GetRelicNumber GetRelicNumber
        {
            add => On.ShopMenuStock.GetRelicNumber += value;
            remove => On.ShopMenuStock.GetRelicNumber -= value;
        }

        public static event On.ShopMenuStock.hook_GetCharmsRequired GetCharmsRequired
        {
            add => On.ShopMenuStock.GetCharmsRequired += value;
            remove => On.ShopMenuStock.GetCharmsRequired -= value;
        }

        public static event On.ShopMenuStock.hook_GetYDistance GetYDistance
        {
            add => On.ShopMenuStock.GetYDistance += value;
            remove => On.ShopMenuStock.GetYDistance -= value;
        }

        public static event On.ShopMenuStock.hook_GetItemSprite GetItemSprite
        {
            add => On.ShopMenuStock.GetItemSprite += value;
            remove => On.ShopMenuStock.GetItemSprite -= value;
        }

        public static event On.ShopMenuStock.hook_GetItemSpriteScale GetItemSpriteScale
        {
            add => On.ShopMenuStock.GetItemSpriteScale += value;
            remove => On.ShopMenuStock.GetItemSpriteScale -= value;
        }

        public static event On.ShopMenuStock.hook_CanBuy CanBuy
        {
            add => On.ShopMenuStock.CanBuy += value;
            remove => On.ShopMenuStock.CanBuy -= value;
        }

        public static event On.ShopMenuStock.hook_GetItemGameObject GetItemGameObject
        {
            add => On.ShopMenuStock.GetItemGameObject += value;
            remove => On.ShopMenuStock.GetItemGameObject -= value;
        }
    }
}