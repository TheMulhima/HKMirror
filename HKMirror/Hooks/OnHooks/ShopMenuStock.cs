using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for ShopMenuStock class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnShopMenuStock
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.ShopMenuStock.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.ShopMenuStock.orig_Start orig,ShopMenuStock self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSpawnStock()
{
if (!HookedList.Contains("SpawnStock"))
{
HookedList.Add("SpawnStock");
On.ShopMenuStock.SpawnStock += SpawnStock;

}
}
internal static event Delegates.SpawnStock_BeforeArgs _beforeSpawnStock;
internal static event Delegates.SpawnStock_AfterArgs _afterSpawnStock;
private static void SpawnStock(On.ShopMenuStock.orig_SpawnStock orig,ShopMenuStock self)
{
Delegates.Params_SpawnStock @params = new() 
{
self = self
};
if (_beforeSpawnStock != null)
{
foreach (Delegates.SpawnStock_BeforeArgs toInvoke in _beforeSpawnStock.GetInvocationList())
{
try
{
_beforeSpawnStock?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSpawnStock != null)
{
foreach (Delegates.SpawnStock_AfterArgs toInvoke in _afterSpawnStock.GetInvocationList())
{
try
{
_afterSpawnStock.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateStock()
{
if (!HookedList.Contains("UpdateStock"))
{
HookedList.Add("UpdateStock");
On.ShopMenuStock.UpdateStock += UpdateStock;

}
}
internal static event Delegates.UpdateStock_BeforeArgs _beforeUpdateStock;
internal static event Delegates.UpdateStock_AfterArgs _afterUpdateStock;
private static void UpdateStock(On.ShopMenuStock.orig_UpdateStock orig,ShopMenuStock self)
{
Delegates.Params_UpdateStock @params = new() 
{
self = self
};
if (_beforeUpdateStock != null)
{
foreach (Delegates.UpdateStock_BeforeArgs toInvoke in _beforeUpdateStock.GetInvocationList())
{
try
{
_beforeUpdateStock?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateStock != null)
{
foreach (Delegates.UpdateStock_AfterArgs toInvoke in _afterUpdateStock.GetInvocationList())
{
try
{
_afterUpdateStock.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookBuildFromMasterList()
{
if (!HookedList.Contains("BuildFromMasterList"))
{
HookedList.Add("BuildFromMasterList");
On.ShopMenuStock.BuildFromMasterList += BuildFromMasterList;

}
}
internal static event Delegates.BuildFromMasterList_BeforeArgs _beforeBuildFromMasterList;
internal static event Delegates.BuildFromMasterList_AfterArgs _afterBuildFromMasterList;
private static void BuildFromMasterList(On.ShopMenuStock.orig_BuildFromMasterList orig,ShopMenuStock self)
{
Delegates.Params_BuildFromMasterList @params = new() 
{
self = self
};
if (_beforeBuildFromMasterList != null)
{
foreach (Delegates.BuildFromMasterList_BeforeArgs toInvoke in _beforeBuildFromMasterList.GetInvocationList())
{
try
{
_beforeBuildFromMasterList?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterBuildFromMasterList != null)
{
foreach (Delegates.BuildFromMasterList_AfterArgs toInvoke in _afterBuildFromMasterList.GetInvocationList())
{
try
{
_afterBuildFromMasterList.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStockLeft()
{
if (!HookedList.Contains("StockLeft"))
{
HookedList.Add("StockLeft");
On.ShopMenuStock.StockLeft += StockLeft;

}
}
internal static event Delegates.StockLeft_BeforeArgs _beforeStockLeft;
internal static event Delegates.StockLeft_AfterArgs _afterStockLeft;
private static bool StockLeft(On.ShopMenuStock.orig_StockLeft orig,ShopMenuStock self)
{
Delegates.Params_StockLeft @params = new() 
{
self = self
};
if (_beforeStockLeft != null)
{
foreach (Delegates.StockLeft_BeforeArgs toInvoke in _beforeStockLeft.GetInvocationList())
{
try
{
_beforeStockLeft?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterStockLeft != null)
{
foreach (Delegates.StockLeft_AfterArgs toInvoke in _afterStockLeft.GetInvocationList())
{
try
{
retVal = _afterStockLeft.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookBuildItemList()
{
if (!HookedList.Contains("BuildItemList"))
{
HookedList.Add("BuildItemList");
On.ShopMenuStock.BuildItemList += BuildItemList;

}
}
internal static event Delegates.BuildItemList_BeforeArgs _beforeBuildItemList;
internal static event Delegates.BuildItemList_AfterArgs _afterBuildItemList;
private static void BuildItemList(On.ShopMenuStock.orig_BuildItemList orig,ShopMenuStock self)
{
Delegates.Params_BuildItemList @params = new() 
{
self = self
};
if (_beforeBuildItemList != null)
{
foreach (Delegates.BuildItemList_BeforeArgs toInvoke in _beforeBuildItemList.GetInvocationList())
{
try
{
_beforeBuildItemList?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterBuildItemList != null)
{
foreach (Delegates.BuildItemList_AfterArgs toInvoke in _afterBuildItemList.GetInvocationList())
{
try
{
_afterBuildItemList.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetItemCount()
{
if (!HookedList.Contains("GetItemCount"))
{
HookedList.Add("GetItemCount");
On.ShopMenuStock.GetItemCount += GetItemCount;

}
}
internal static event Delegates.GetItemCount_BeforeArgs _beforeGetItemCount;
internal static event Delegates.GetItemCount_AfterArgs _afterGetItemCount;
private static int GetItemCount(On.ShopMenuStock.orig_GetItemCount orig,ShopMenuStock self)
{
Delegates.Params_GetItemCount @params = new() 
{
self = self
};
if (_beforeGetItemCount != null)
{
foreach (Delegates.GetItemCount_BeforeArgs toInvoke in _beforeGetItemCount.GetInvocationList())
{
try
{
_beforeGetItemCount?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetItemCount != null)
{
foreach (Delegates.GetItemCount_AfterArgs toInvoke in _afterGetItemCount.GetInvocationList())
{
try
{
retVal = _afterGetItemCount.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetCost()
{
if (!HookedList.Contains("GetCost"))
{
HookedList.Add("GetCost");
On.ShopMenuStock.GetCost += GetCost;

}
}
internal static event Delegates.GetCost_BeforeArgs _beforeGetCost;
internal static event Delegates.GetCost_AfterArgs _afterGetCost;
private static int GetCost(On.ShopMenuStock.orig_GetCost orig,ShopMenuStock self,  int itemNum)
{
Delegates.Params_GetCost @params = new() 
{
self = self
, itemNum = itemNum
};
if (_beforeGetCost != null)
{
foreach (Delegates.GetCost_BeforeArgs toInvoke in _beforeGetCost.GetInvocationList())
{
try
{
_beforeGetCost?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
itemNum = @params.itemNum;
var retVal = orig(self, itemNum);
if (_afterGetCost != null)
{
foreach (Delegates.GetCost_AfterArgs toInvoke in _afterGetCost.GetInvocationList())
{
try
{
retVal = _afterGetCost.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetNotchCost()
{
if (!HookedList.Contains("GetNotchCost"))
{
HookedList.Add("GetNotchCost");
On.ShopMenuStock.GetNotchCost += GetNotchCost;

}
}
internal static event Delegates.GetNotchCost_BeforeArgs _beforeGetNotchCost;
internal static event Delegates.GetNotchCost_AfterArgs _afterGetNotchCost;
private static int GetNotchCost(On.ShopMenuStock.orig_GetNotchCost orig,ShopMenuStock self,  int itemNum)
{
Delegates.Params_GetNotchCost @params = new() 
{
self = self
, itemNum = itemNum
};
if (_beforeGetNotchCost != null)
{
foreach (Delegates.GetNotchCost_BeforeArgs toInvoke in _beforeGetNotchCost.GetInvocationList())
{
try
{
_beforeGetNotchCost?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
itemNum = @params.itemNum;
var retVal = orig(self, itemNum);
if (_afterGetNotchCost != null)
{
foreach (Delegates.GetNotchCost_AfterArgs toInvoke in _afterGetNotchCost.GetInvocationList())
{
try
{
retVal = _afterGetNotchCost.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetNameConvo()
{
if (!HookedList.Contains("GetNameConvo"))
{
HookedList.Add("GetNameConvo");
On.ShopMenuStock.GetNameConvo += GetNameConvo;

}
}
internal static event Delegates.GetNameConvo_BeforeArgs _beforeGetNameConvo;
internal static event Delegates.GetNameConvo_AfterArgs _afterGetNameConvo;
private static string GetNameConvo(On.ShopMenuStock.orig_GetNameConvo orig,ShopMenuStock self,  int itemNum)
{
Delegates.Params_GetNameConvo @params = new() 
{
self = self
, itemNum = itemNum
};
if (_beforeGetNameConvo != null)
{
foreach (Delegates.GetNameConvo_BeforeArgs toInvoke in _beforeGetNameConvo.GetInvocationList())
{
try
{
_beforeGetNameConvo?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
itemNum = @params.itemNum;
var retVal = orig(self, itemNum);
if (_afterGetNameConvo != null)
{
foreach (Delegates.GetNameConvo_AfterArgs toInvoke in _afterGetNameConvo.GetInvocationList())
{
try
{
retVal = _afterGetNameConvo.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetDescConvo()
{
if (!HookedList.Contains("GetDescConvo"))
{
HookedList.Add("GetDescConvo");
On.ShopMenuStock.GetDescConvo += GetDescConvo;

}
}
internal static event Delegates.GetDescConvo_BeforeArgs _beforeGetDescConvo;
internal static event Delegates.GetDescConvo_AfterArgs _afterGetDescConvo;
private static string GetDescConvo(On.ShopMenuStock.orig_GetDescConvo orig,ShopMenuStock self,  int itemNum)
{
Delegates.Params_GetDescConvo @params = new() 
{
self = self
, itemNum = itemNum
};
if (_beforeGetDescConvo != null)
{
foreach (Delegates.GetDescConvo_BeforeArgs toInvoke in _beforeGetDescConvo.GetInvocationList())
{
try
{
_beforeGetDescConvo?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
itemNum = @params.itemNum;
var retVal = orig(self, itemNum);
if (_afterGetDescConvo != null)
{
foreach (Delegates.GetDescConvo_AfterArgs toInvoke in _afterGetDescConvo.GetInvocationList())
{
try
{
retVal = _afterGetDescConvo.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetPlayerDataBoolName()
{
if (!HookedList.Contains("GetPlayerDataBoolName"))
{
HookedList.Add("GetPlayerDataBoolName");
On.ShopMenuStock.GetPlayerDataBoolName += GetPlayerDataBoolName;

}
}
internal static event Delegates.GetPlayerDataBoolName_BeforeArgs _beforeGetPlayerDataBoolName;
internal static event Delegates.GetPlayerDataBoolName_AfterArgs _afterGetPlayerDataBoolName;
private static string GetPlayerDataBoolName(On.ShopMenuStock.orig_GetPlayerDataBoolName orig,ShopMenuStock self,  int itemNum)
{
Delegates.Params_GetPlayerDataBoolName @params = new() 
{
self = self
, itemNum = itemNum
};
if (_beforeGetPlayerDataBoolName != null)
{
foreach (Delegates.GetPlayerDataBoolName_BeforeArgs toInvoke in _beforeGetPlayerDataBoolName.GetInvocationList())
{
try
{
_beforeGetPlayerDataBoolName?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
itemNum = @params.itemNum;
var retVal = orig(self, itemNum);
if (_afterGetPlayerDataBoolName != null)
{
foreach (Delegates.GetPlayerDataBoolName_AfterArgs toInvoke in _afterGetPlayerDataBoolName.GetInvocationList())
{
try
{
retVal = _afterGetPlayerDataBoolName.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetSpecialType()
{
if (!HookedList.Contains("GetSpecialType"))
{
HookedList.Add("GetSpecialType");
On.ShopMenuStock.GetSpecialType += GetSpecialType;

}
}
internal static event Delegates.GetSpecialType_BeforeArgs _beforeGetSpecialType;
internal static event Delegates.GetSpecialType_AfterArgs _afterGetSpecialType;
private static int GetSpecialType(On.ShopMenuStock.orig_GetSpecialType orig,ShopMenuStock self,  int itemNum)
{
Delegates.Params_GetSpecialType @params = new() 
{
self = self
, itemNum = itemNum
};
if (_beforeGetSpecialType != null)
{
foreach (Delegates.GetSpecialType_BeforeArgs toInvoke in _beforeGetSpecialType.GetInvocationList())
{
try
{
_beforeGetSpecialType?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
itemNum = @params.itemNum;
var retVal = orig(self, itemNum);
if (_afterGetSpecialType != null)
{
foreach (Delegates.GetSpecialType_AfterArgs toInvoke in _afterGetSpecialType.GetInvocationList())
{
try
{
retVal = _afterGetSpecialType.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetRelicNumber()
{
if (!HookedList.Contains("GetRelicNumber"))
{
HookedList.Add("GetRelicNumber");
On.ShopMenuStock.GetRelicNumber += GetRelicNumber;

}
}
internal static event Delegates.GetRelicNumber_BeforeArgs _beforeGetRelicNumber;
internal static event Delegates.GetRelicNumber_AfterArgs _afterGetRelicNumber;
private static int GetRelicNumber(On.ShopMenuStock.orig_GetRelicNumber orig,ShopMenuStock self,  int itemNum)
{
Delegates.Params_GetRelicNumber @params = new() 
{
self = self
, itemNum = itemNum
};
if (_beforeGetRelicNumber != null)
{
foreach (Delegates.GetRelicNumber_BeforeArgs toInvoke in _beforeGetRelicNumber.GetInvocationList())
{
try
{
_beforeGetRelicNumber?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
itemNum = @params.itemNum;
var retVal = orig(self, itemNum);
if (_afterGetRelicNumber != null)
{
foreach (Delegates.GetRelicNumber_AfterArgs toInvoke in _afterGetRelicNumber.GetInvocationList())
{
try
{
retVal = _afterGetRelicNumber.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetCharmsRequired()
{
if (!HookedList.Contains("GetCharmsRequired"))
{
HookedList.Add("GetCharmsRequired");
On.ShopMenuStock.GetCharmsRequired += GetCharmsRequired;

}
}
internal static event Delegates.GetCharmsRequired_BeforeArgs _beforeGetCharmsRequired;
internal static event Delegates.GetCharmsRequired_AfterArgs _afterGetCharmsRequired;
private static int GetCharmsRequired(On.ShopMenuStock.orig_GetCharmsRequired orig,ShopMenuStock self,  int itemNum)
{
Delegates.Params_GetCharmsRequired @params = new() 
{
self = self
, itemNum = itemNum
};
if (_beforeGetCharmsRequired != null)
{
foreach (Delegates.GetCharmsRequired_BeforeArgs toInvoke in _beforeGetCharmsRequired.GetInvocationList())
{
try
{
_beforeGetCharmsRequired?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
itemNum = @params.itemNum;
var retVal = orig(self, itemNum);
if (_afterGetCharmsRequired != null)
{
foreach (Delegates.GetCharmsRequired_AfterArgs toInvoke in _afterGetCharmsRequired.GetInvocationList())
{
try
{
retVal = _afterGetCharmsRequired.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetYDistance()
{
if (!HookedList.Contains("GetYDistance"))
{
HookedList.Add("GetYDistance");
On.ShopMenuStock.GetYDistance += GetYDistance;

}
}
internal static event Delegates.GetYDistance_BeforeArgs _beforeGetYDistance;
internal static event Delegates.GetYDistance_AfterArgs _afterGetYDistance;
private static float GetYDistance(On.ShopMenuStock.orig_GetYDistance orig,ShopMenuStock self)
{
Delegates.Params_GetYDistance @params = new() 
{
self = self
};
if (_beforeGetYDistance != null)
{
foreach (Delegates.GetYDistance_BeforeArgs toInvoke in _beforeGetYDistance.GetInvocationList())
{
try
{
_beforeGetYDistance?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetYDistance != null)
{
foreach (Delegates.GetYDistance_AfterArgs toInvoke in _afterGetYDistance.GetInvocationList())
{
try
{
retVal = _afterGetYDistance.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetItemSprite()
{
if (!HookedList.Contains("GetItemSprite"))
{
HookedList.Add("GetItemSprite");
On.ShopMenuStock.GetItemSprite += GetItemSprite;

}
}
internal static event Delegates.GetItemSprite_BeforeArgs _beforeGetItemSprite;
internal static event Delegates.GetItemSprite_AfterArgs _afterGetItemSprite;
private static UnityEngine.Sprite GetItemSprite(On.ShopMenuStock.orig_GetItemSprite orig,ShopMenuStock self,  int itemNum)
{
Delegates.Params_GetItemSprite @params = new() 
{
self = self
, itemNum = itemNum
};
if (_beforeGetItemSprite != null)
{
foreach (Delegates.GetItemSprite_BeforeArgs toInvoke in _beforeGetItemSprite.GetInvocationList())
{
try
{
_beforeGetItemSprite?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
itemNum = @params.itemNum;
var retVal = orig(self, itemNum);
if (_afterGetItemSprite != null)
{
foreach (Delegates.GetItemSprite_AfterArgs toInvoke in _afterGetItemSprite.GetInvocationList())
{
try
{
retVal = _afterGetItemSprite.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetItemSpriteScale()
{
if (!HookedList.Contains("GetItemSpriteScale"))
{
HookedList.Add("GetItemSpriteScale");
On.ShopMenuStock.GetItemSpriteScale += GetItemSpriteScale;

}
}
internal static event Delegates.GetItemSpriteScale_BeforeArgs _beforeGetItemSpriteScale;
internal static event Delegates.GetItemSpriteScale_AfterArgs _afterGetItemSpriteScale;
private static UnityEngine.Vector3 GetItemSpriteScale(On.ShopMenuStock.orig_GetItemSpriteScale orig,ShopMenuStock self,  int itemNum)
{
Delegates.Params_GetItemSpriteScale @params = new() 
{
self = self
, itemNum = itemNum
};
if (_beforeGetItemSpriteScale != null)
{
foreach (Delegates.GetItemSpriteScale_BeforeArgs toInvoke in _beforeGetItemSpriteScale.GetInvocationList())
{
try
{
_beforeGetItemSpriteScale?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
itemNum = @params.itemNum;
var retVal = orig(self, itemNum);
if (_afterGetItemSpriteScale != null)
{
foreach (Delegates.GetItemSpriteScale_AfterArgs toInvoke in _afterGetItemSpriteScale.GetInvocationList())
{
try
{
retVal = _afterGetItemSpriteScale.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookCanBuy()
{
if (!HookedList.Contains("CanBuy"))
{
HookedList.Add("CanBuy");
On.ShopMenuStock.CanBuy += CanBuy;

}
}
internal static event Delegates.CanBuy_BeforeArgs _beforeCanBuy;
internal static event Delegates.CanBuy_AfterArgs _afterCanBuy;
private static bool CanBuy(On.ShopMenuStock.orig_CanBuy orig,ShopMenuStock self,  int itemNum)
{
Delegates.Params_CanBuy @params = new() 
{
self = self
, itemNum = itemNum
};
if (_beforeCanBuy != null)
{
foreach (Delegates.CanBuy_BeforeArgs toInvoke in _beforeCanBuy.GetInvocationList())
{
try
{
_beforeCanBuy?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
itemNum = @params.itemNum;
var retVal = orig(self, itemNum);
if (_afterCanBuy != null)
{
foreach (Delegates.CanBuy_AfterArgs toInvoke in _afterCanBuy.GetInvocationList())
{
try
{
retVal = _afterCanBuy.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetItemGameObject()
{
if (!HookedList.Contains("GetItemGameObject"))
{
HookedList.Add("GetItemGameObject");
On.ShopMenuStock.GetItemGameObject += GetItemGameObject;

}
}
internal static event Delegates.GetItemGameObject_BeforeArgs _beforeGetItemGameObject;
internal static event Delegates.GetItemGameObject_AfterArgs _afterGetItemGameObject;
private static UnityEngine.GameObject GetItemGameObject(On.ShopMenuStock.orig_GetItemGameObject orig,ShopMenuStock self,  int itemNum)
{
Delegates.Params_GetItemGameObject @params = new() 
{
self = self
, itemNum = itemNum
};
if (_beforeGetItemGameObject != null)
{
foreach (Delegates.GetItemGameObject_BeforeArgs toInvoke in _beforeGetItemGameObject.GetInvocationList())
{
try
{
_beforeGetItemGameObject?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
itemNum = @params.itemNum;
var retVal = orig(self, itemNum);
if (_afterGetItemGameObject != null)
{
foreach (Delegates.GetItemGameObject_AfterArgs toInvoke in _afterGetItemGameObject.GetInvocationList())
{
try
{
retVal = _afterGetItemGameObject.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Start
{
public ShopMenuStock self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<ShopMenuStock> orig, ShopMenuStock self);
public sealed class Params_SpawnStock
{
public ShopMenuStock self;
}
public delegate void SpawnStock_BeforeArgs(Params_SpawnStock args);
public delegate void SpawnStock_AfterArgs(Params_SpawnStock args);
public delegate void SpawnStock_WithArgs (Action<ShopMenuStock> orig, ShopMenuStock self);
public sealed class Params_UpdateStock
{
public ShopMenuStock self;
}
public delegate void UpdateStock_BeforeArgs(Params_UpdateStock args);
public delegate void UpdateStock_AfterArgs(Params_UpdateStock args);
public delegate void UpdateStock_WithArgs (Action<ShopMenuStock> orig, ShopMenuStock self);
public sealed class Params_BuildFromMasterList
{
public ShopMenuStock self;
}
public delegate void BuildFromMasterList_BeforeArgs(Params_BuildFromMasterList args);
public delegate void BuildFromMasterList_AfterArgs(Params_BuildFromMasterList args);
public delegate void BuildFromMasterList_WithArgs (Action<ShopMenuStock> orig, ShopMenuStock self);
public sealed class Params_StockLeft
{
public ShopMenuStock self;
}
public delegate void StockLeft_BeforeArgs(Params_StockLeft args);
public delegate bool StockLeft_AfterArgs(Params_StockLeft args, bool ret);
public delegate bool StockLeft_WithArgs (Func<ShopMenuStock, bool> orig, ShopMenuStock self);
public sealed class Params_BuildItemList
{
public ShopMenuStock self;
}
public delegate void BuildItemList_BeforeArgs(Params_BuildItemList args);
public delegate void BuildItemList_AfterArgs(Params_BuildItemList args);
public delegate void BuildItemList_WithArgs (Action<ShopMenuStock> orig, ShopMenuStock self);
public sealed class Params_GetItemCount
{
public ShopMenuStock self;
}
public delegate void GetItemCount_BeforeArgs(Params_GetItemCount args);
public delegate int GetItemCount_AfterArgs(Params_GetItemCount args, int ret);
public delegate int GetItemCount_WithArgs (Func<ShopMenuStock, int> orig, ShopMenuStock self);
public sealed class Params_GetCost
{
public ShopMenuStock self;
public int itemNum;
}
public delegate void GetCost_BeforeArgs(Params_GetCost args);
public delegate int GetCost_AfterArgs(Params_GetCost args, int ret);
public delegate int GetCost_WithArgs (Func<ShopMenuStock,  int, int> orig, ShopMenuStock self,  int itemNum);
public sealed class Params_GetNotchCost
{
public ShopMenuStock self;
public int itemNum;
}
public delegate void GetNotchCost_BeforeArgs(Params_GetNotchCost args);
public delegate int GetNotchCost_AfterArgs(Params_GetNotchCost args, int ret);
public delegate int GetNotchCost_WithArgs (Func<ShopMenuStock,  int, int> orig, ShopMenuStock self,  int itemNum);
public sealed class Params_GetNameConvo
{
public ShopMenuStock self;
public int itemNum;
}
public delegate void GetNameConvo_BeforeArgs(Params_GetNameConvo args);
public delegate string GetNameConvo_AfterArgs(Params_GetNameConvo args, string ret);
public delegate string GetNameConvo_WithArgs (Func<ShopMenuStock,  int, string> orig, ShopMenuStock self,  int itemNum);
public sealed class Params_GetDescConvo
{
public ShopMenuStock self;
public int itemNum;
}
public delegate void GetDescConvo_BeforeArgs(Params_GetDescConvo args);
public delegate string GetDescConvo_AfterArgs(Params_GetDescConvo args, string ret);
public delegate string GetDescConvo_WithArgs (Func<ShopMenuStock,  int, string> orig, ShopMenuStock self,  int itemNum);
public sealed class Params_GetPlayerDataBoolName
{
public ShopMenuStock self;
public int itemNum;
}
public delegate void GetPlayerDataBoolName_BeforeArgs(Params_GetPlayerDataBoolName args);
public delegate string GetPlayerDataBoolName_AfterArgs(Params_GetPlayerDataBoolName args, string ret);
public delegate string GetPlayerDataBoolName_WithArgs (Func<ShopMenuStock,  int, string> orig, ShopMenuStock self,  int itemNum);
public sealed class Params_GetSpecialType
{
public ShopMenuStock self;
public int itemNum;
}
public delegate void GetSpecialType_BeforeArgs(Params_GetSpecialType args);
public delegate int GetSpecialType_AfterArgs(Params_GetSpecialType args, int ret);
public delegate int GetSpecialType_WithArgs (Func<ShopMenuStock,  int, int> orig, ShopMenuStock self,  int itemNum);
public sealed class Params_GetRelicNumber
{
public ShopMenuStock self;
public int itemNum;
}
public delegate void GetRelicNumber_BeforeArgs(Params_GetRelicNumber args);
public delegate int GetRelicNumber_AfterArgs(Params_GetRelicNumber args, int ret);
public delegate int GetRelicNumber_WithArgs (Func<ShopMenuStock,  int, int> orig, ShopMenuStock self,  int itemNum);
public sealed class Params_GetCharmsRequired
{
public ShopMenuStock self;
public int itemNum;
}
public delegate void GetCharmsRequired_BeforeArgs(Params_GetCharmsRequired args);
public delegate int GetCharmsRequired_AfterArgs(Params_GetCharmsRequired args, int ret);
public delegate int GetCharmsRequired_WithArgs (Func<ShopMenuStock,  int, int> orig, ShopMenuStock self,  int itemNum);
public sealed class Params_GetYDistance
{
public ShopMenuStock self;
}
public delegate void GetYDistance_BeforeArgs(Params_GetYDistance args);
public delegate float GetYDistance_AfterArgs(Params_GetYDistance args, float ret);
public delegate float GetYDistance_WithArgs (Func<ShopMenuStock, float> orig, ShopMenuStock self);
public sealed class Params_GetItemSprite
{
public ShopMenuStock self;
public int itemNum;
}
public delegate void GetItemSprite_BeforeArgs(Params_GetItemSprite args);
public delegate UnityEngine.Sprite GetItemSprite_AfterArgs(Params_GetItemSprite args, UnityEngine.Sprite ret);
public delegate UnityEngine.Sprite GetItemSprite_WithArgs (Func<ShopMenuStock,  int, UnityEngine.Sprite> orig, ShopMenuStock self,  int itemNum);
public sealed class Params_GetItemSpriteScale
{
public ShopMenuStock self;
public int itemNum;
}
public delegate void GetItemSpriteScale_BeforeArgs(Params_GetItemSpriteScale args);
public delegate UnityEngine.Vector3 GetItemSpriteScale_AfterArgs(Params_GetItemSpriteScale args, UnityEngine.Vector3 ret);
public delegate UnityEngine.Vector3 GetItemSpriteScale_WithArgs (Func<ShopMenuStock,  int, UnityEngine.Vector3> orig, ShopMenuStock self,  int itemNum);
public sealed class Params_CanBuy
{
public ShopMenuStock self;
public int itemNum;
}
public delegate void CanBuy_BeforeArgs(Params_CanBuy args);
public delegate bool CanBuy_AfterArgs(Params_CanBuy args, bool ret);
public delegate bool CanBuy_WithArgs (Func<ShopMenuStock,  int, bool> orig, ShopMenuStock self,  int itemNum);
public sealed class Params_GetItemGameObject
{
public ShopMenuStock self;
public int itemNum;
}
public delegate void GetItemGameObject_BeforeArgs(Params_GetItemGameObject args);
public delegate UnityEngine.GameObject GetItemGameObject_AfterArgs(Params_GetItemGameObject args, UnityEngine.GameObject ret);
public delegate UnityEngine.GameObject GetItemGameObject_WithArgs (Func<ShopMenuStock,  int, UnityEngine.GameObject> orig, ShopMenuStock self,  int itemNum);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.SpawnStock_BeforeArgs SpawnStock
{
add
{

HookHandler._beforeSpawnStock += value;
HookHandler.HookSpawnStock();
}
remove => HookHandler._beforeSpawnStock -= value;
}
public static event Delegates.UpdateStock_BeforeArgs UpdateStock
{
add
{

HookHandler._beforeUpdateStock += value;
HookHandler.HookUpdateStock();
}
remove => HookHandler._beforeUpdateStock -= value;
}
public static event Delegates.BuildFromMasterList_BeforeArgs BuildFromMasterList
{
add
{

HookHandler._beforeBuildFromMasterList += value;
HookHandler.HookBuildFromMasterList();
}
remove => HookHandler._beforeBuildFromMasterList -= value;
}
public static event Delegates.StockLeft_BeforeArgs StockLeft
{
add
{

HookHandler._beforeStockLeft += value;
HookHandler.HookStockLeft();
}
remove => HookHandler._beforeStockLeft -= value;
}
public static event Delegates.BuildItemList_BeforeArgs BuildItemList
{
add
{

HookHandler._beforeBuildItemList += value;
HookHandler.HookBuildItemList();
}
remove => HookHandler._beforeBuildItemList -= value;
}
public static event Delegates.GetItemCount_BeforeArgs GetItemCount
{
add
{

HookHandler._beforeGetItemCount += value;
HookHandler.HookGetItemCount();
}
remove => HookHandler._beforeGetItemCount -= value;
}
public static event Delegates.GetCost_BeforeArgs GetCost
{
add
{

HookHandler._beforeGetCost += value;
HookHandler.HookGetCost();
}
remove => HookHandler._beforeGetCost -= value;
}
public static event Delegates.GetNotchCost_BeforeArgs GetNotchCost
{
add
{

HookHandler._beforeGetNotchCost += value;
HookHandler.HookGetNotchCost();
}
remove => HookHandler._beforeGetNotchCost -= value;
}
public static event Delegates.GetNameConvo_BeforeArgs GetNameConvo
{
add
{

HookHandler._beforeGetNameConvo += value;
HookHandler.HookGetNameConvo();
}
remove => HookHandler._beforeGetNameConvo -= value;
}
public static event Delegates.GetDescConvo_BeforeArgs GetDescConvo
{
add
{

HookHandler._beforeGetDescConvo += value;
HookHandler.HookGetDescConvo();
}
remove => HookHandler._beforeGetDescConvo -= value;
}
public static event Delegates.GetPlayerDataBoolName_BeforeArgs GetPlayerDataBoolName
{
add
{

HookHandler._beforeGetPlayerDataBoolName += value;
HookHandler.HookGetPlayerDataBoolName();
}
remove => HookHandler._beforeGetPlayerDataBoolName -= value;
}
public static event Delegates.GetSpecialType_BeforeArgs GetSpecialType
{
add
{

HookHandler._beforeGetSpecialType += value;
HookHandler.HookGetSpecialType();
}
remove => HookHandler._beforeGetSpecialType -= value;
}
public static event Delegates.GetRelicNumber_BeforeArgs GetRelicNumber
{
add
{

HookHandler._beforeGetRelicNumber += value;
HookHandler.HookGetRelicNumber();
}
remove => HookHandler._beforeGetRelicNumber -= value;
}
public static event Delegates.GetCharmsRequired_BeforeArgs GetCharmsRequired
{
add
{

HookHandler._beforeGetCharmsRequired += value;
HookHandler.HookGetCharmsRequired();
}
remove => HookHandler._beforeGetCharmsRequired -= value;
}
public static event Delegates.GetYDistance_BeforeArgs GetYDistance
{
add
{

HookHandler._beforeGetYDistance += value;
HookHandler.HookGetYDistance();
}
remove => HookHandler._beforeGetYDistance -= value;
}
public static event Delegates.GetItemSprite_BeforeArgs GetItemSprite
{
add
{

HookHandler._beforeGetItemSprite += value;
HookHandler.HookGetItemSprite();
}
remove => HookHandler._beforeGetItemSprite -= value;
}
public static event Delegates.GetItemSpriteScale_BeforeArgs GetItemSpriteScale
{
add
{

HookHandler._beforeGetItemSpriteScale += value;
HookHandler.HookGetItemSpriteScale();
}
remove => HookHandler._beforeGetItemSpriteScale -= value;
}
public static event Delegates.CanBuy_BeforeArgs CanBuy
{
add
{

HookHandler._beforeCanBuy += value;
HookHandler.HookCanBuy();
}
remove => HookHandler._beforeCanBuy -= value;
}
public static event Delegates.GetItemGameObject_BeforeArgs GetItemGameObject
{
add
{

HookHandler._beforeGetItemGameObject += value;
HookHandler.HookGetItemGameObject();
}
remove => HookHandler._beforeGetItemGameObject -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.SpawnStock_AfterArgs SpawnStock
{
add
{

HookHandler._afterSpawnStock += value;
HookHandler.HookSpawnStock();
}
remove => HookHandler._afterSpawnStock -= value;
}
public static event Delegates.UpdateStock_AfterArgs UpdateStock
{
add
{

HookHandler._afterUpdateStock += value;
HookHandler.HookUpdateStock();
}
remove => HookHandler._afterUpdateStock -= value;
}
public static event Delegates.BuildFromMasterList_AfterArgs BuildFromMasterList
{
add
{

HookHandler._afterBuildFromMasterList += value;
HookHandler.HookBuildFromMasterList();
}
remove => HookHandler._afterBuildFromMasterList -= value;
}
public static event Delegates.StockLeft_AfterArgs StockLeft
{
add
{

HookHandler._afterStockLeft += value;
HookHandler.HookStockLeft();
}
remove => HookHandler._afterStockLeft -= value;
}
public static event Delegates.BuildItemList_AfterArgs BuildItemList
{
add
{

HookHandler._afterBuildItemList += value;
HookHandler.HookBuildItemList();
}
remove => HookHandler._afterBuildItemList -= value;
}
public static event Delegates.GetItemCount_AfterArgs GetItemCount
{
add
{

HookHandler._afterGetItemCount += value;
HookHandler.HookGetItemCount();
}
remove => HookHandler._afterGetItemCount -= value;
}
public static event Delegates.GetCost_AfterArgs GetCost
{
add
{

HookHandler._afterGetCost += value;
HookHandler.HookGetCost();
}
remove => HookHandler._afterGetCost -= value;
}
public static event Delegates.GetNotchCost_AfterArgs GetNotchCost
{
add
{

HookHandler._afterGetNotchCost += value;
HookHandler.HookGetNotchCost();
}
remove => HookHandler._afterGetNotchCost -= value;
}
public static event Delegates.GetNameConvo_AfterArgs GetNameConvo
{
add
{

HookHandler._afterGetNameConvo += value;
HookHandler.HookGetNameConvo();
}
remove => HookHandler._afterGetNameConvo -= value;
}
public static event Delegates.GetDescConvo_AfterArgs GetDescConvo
{
add
{

HookHandler._afterGetDescConvo += value;
HookHandler.HookGetDescConvo();
}
remove => HookHandler._afterGetDescConvo -= value;
}
public static event Delegates.GetPlayerDataBoolName_AfterArgs GetPlayerDataBoolName
{
add
{

HookHandler._afterGetPlayerDataBoolName += value;
HookHandler.HookGetPlayerDataBoolName();
}
remove => HookHandler._afterGetPlayerDataBoolName -= value;
}
public static event Delegates.GetSpecialType_AfterArgs GetSpecialType
{
add
{

HookHandler._afterGetSpecialType += value;
HookHandler.HookGetSpecialType();
}
remove => HookHandler._afterGetSpecialType -= value;
}
public static event Delegates.GetRelicNumber_AfterArgs GetRelicNumber
{
add
{

HookHandler._afterGetRelicNumber += value;
HookHandler.HookGetRelicNumber();
}
remove => HookHandler._afterGetRelicNumber -= value;
}
public static event Delegates.GetCharmsRequired_AfterArgs GetCharmsRequired
{
add
{

HookHandler._afterGetCharmsRequired += value;
HookHandler.HookGetCharmsRequired();
}
remove => HookHandler._afterGetCharmsRequired -= value;
}
public static event Delegates.GetYDistance_AfterArgs GetYDistance
{
add
{

HookHandler._afterGetYDistance += value;
HookHandler.HookGetYDistance();
}
remove => HookHandler._afterGetYDistance -= value;
}
public static event Delegates.GetItemSprite_AfterArgs GetItemSprite
{
add
{

HookHandler._afterGetItemSprite += value;
HookHandler.HookGetItemSprite();
}
remove => HookHandler._afterGetItemSprite -= value;
}
public static event Delegates.GetItemSpriteScale_AfterArgs GetItemSpriteScale
{
add
{

HookHandler._afterGetItemSpriteScale += value;
HookHandler.HookGetItemSpriteScale();
}
remove => HookHandler._afterGetItemSpriteScale -= value;
}
public static event Delegates.CanBuy_AfterArgs CanBuy
{
add
{

HookHandler._afterCanBuy += value;
HookHandler.HookCanBuy();
}
remove => HookHandler._afterCanBuy -= value;
}
public static event Delegates.GetItemGameObject_AfterArgs GetItemGameObject
{
add
{

HookHandler._afterGetItemGameObject += value;
HookHandler.HookGetItemGameObject();
}
remove => HookHandler._afterGetItemGameObject -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.ShopMenuStock.hook_Start Start
{
add => On.ShopMenuStock.Start += value;
remove => On.ShopMenuStock.Start -= value;
}
public static event On.ShopMenuStock.hook_SpawnStock SpawnStock
{
add => On.ShopMenuStock.SpawnStock += value;
remove => On.ShopMenuStock.SpawnStock -= value;
}
public static event On.ShopMenuStock.hook_UpdateStock UpdateStock
{
add => On.ShopMenuStock.UpdateStock += value;
remove => On.ShopMenuStock.UpdateStock -= value;
}
public static event On.ShopMenuStock.hook_BuildFromMasterList BuildFromMasterList
{
add => On.ShopMenuStock.BuildFromMasterList += value;
remove => On.ShopMenuStock.BuildFromMasterList -= value;
}
public static event On.ShopMenuStock.hook_StockLeft StockLeft
{
add => On.ShopMenuStock.StockLeft += value;
remove => On.ShopMenuStock.StockLeft -= value;
}
public static event On.ShopMenuStock.hook_BuildItemList BuildItemList
{
add => On.ShopMenuStock.BuildItemList += value;
remove => On.ShopMenuStock.BuildItemList -= value;
}
public static event On.ShopMenuStock.hook_GetItemCount GetItemCount
{
add => On.ShopMenuStock.GetItemCount += value;
remove => On.ShopMenuStock.GetItemCount -= value;
}
public static event On.ShopMenuStock.hook_GetCost GetCost
{
add => On.ShopMenuStock.GetCost += value;
remove => On.ShopMenuStock.GetCost -= value;
}
public static event On.ShopMenuStock.hook_GetNotchCost GetNotchCost
{
add => On.ShopMenuStock.GetNotchCost += value;
remove => On.ShopMenuStock.GetNotchCost -= value;
}
public static event On.ShopMenuStock.hook_GetNameConvo GetNameConvo
{
add => On.ShopMenuStock.GetNameConvo += value;
remove => On.ShopMenuStock.GetNameConvo -= value;
}
public static event On.ShopMenuStock.hook_GetDescConvo GetDescConvo
{
add => On.ShopMenuStock.GetDescConvo += value;
remove => On.ShopMenuStock.GetDescConvo -= value;
}
public static event On.ShopMenuStock.hook_GetPlayerDataBoolName GetPlayerDataBoolName
{
add => On.ShopMenuStock.GetPlayerDataBoolName += value;
remove => On.ShopMenuStock.GetPlayerDataBoolName -= value;
}
public static event On.ShopMenuStock.hook_GetSpecialType GetSpecialType
{
add => On.ShopMenuStock.GetSpecialType += value;
remove => On.ShopMenuStock.GetSpecialType -= value;
}
public static event On.ShopMenuStock.hook_GetRelicNumber GetRelicNumber
{
add => On.ShopMenuStock.GetRelicNumber += value;
remove => On.ShopMenuStock.GetRelicNumber -= value;
}
public static event On.ShopMenuStock.hook_GetCharmsRequired GetCharmsRequired
{
add => On.ShopMenuStock.GetCharmsRequired += value;
remove => On.ShopMenuStock.GetCharmsRequired -= value;
}
public static event On.ShopMenuStock.hook_GetYDistance GetYDistance
{
add => On.ShopMenuStock.GetYDistance += value;
remove => On.ShopMenuStock.GetYDistance -= value;
}
public static event On.ShopMenuStock.hook_GetItemSprite GetItemSprite
{
add => On.ShopMenuStock.GetItemSprite += value;
remove => On.ShopMenuStock.GetItemSprite -= value;
}
public static event On.ShopMenuStock.hook_GetItemSpriteScale GetItemSpriteScale
{
add => On.ShopMenuStock.GetItemSpriteScale += value;
remove => On.ShopMenuStock.GetItemSpriteScale -= value;
}
public static event On.ShopMenuStock.hook_CanBuy CanBuy
{
add => On.ShopMenuStock.CanBuy += value;
remove => On.ShopMenuStock.CanBuy -= value;
}
public static event On.ShopMenuStock.hook_GetItemGameObject GetItemGameObject
{
add => On.ShopMenuStock.GetItemGameObject += value;
remove => On.ShopMenuStock.GetItemGameObject -= value;
}
}

}
