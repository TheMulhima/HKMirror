namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dSpriteAttachPoint class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dSpriteAttachPoint
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.tk2dSpriteAttachPoint.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.tk2dSpriteAttachPoint.orig_Awake orig, tk2dSpriteAttachPoint self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.tk2dSpriteAttachPoint.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.tk2dSpriteAttachPoint.orig_OnEnable orig, tk2dSpriteAttachPoint self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.tk2dSpriteAttachPoint.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.tk2dSpriteAttachPoint.orig_OnDisable orig, tk2dSpriteAttachPoint self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookGetInstanceName()
        {
            if (!HookedList.Contains("GetInstanceName"))
            {
                HookedList.Add("GetInstanceName");
                On.tk2dSpriteAttachPoint.GetInstanceName += GetInstanceName;
            }
        }

        internal static event Delegates.GetInstanceName_BeforeArgs _beforeGetInstanceName;
        internal static event Delegates.GetInstanceName_NormalArgs _afterGetInstanceName;

        private static string GetInstanceName(On.tk2dSpriteAttachPoint.orig_GetInstanceName orig,
            tk2dSpriteAttachPoint self, Transform t)
        {
            Delegates.Params_GetInstanceName @params = new()
            {
                self = self, t = t
            };
            _beforeGetInstanceName?.Invoke(@params);
            self = @params.self;
            t = @params.t;
            var retVal = orig(self, t);
            if (_afterGetInstanceName != null) retVal = _afterGetInstanceName.Invoke(@params);
            return retVal;
        }

        internal static void HookHandleSpriteChanged()
        {
            if (!HookedList.Contains("HandleSpriteChanged"))
            {
                HookedList.Add("HandleSpriteChanged");
                On.tk2dSpriteAttachPoint.HandleSpriteChanged += HandleSpriteChanged;
            }
        }

        internal static event Delegates.HandleSpriteChanged_BeforeArgs _beforeHandleSpriteChanged;
        internal static event Delegates.HandleSpriteChanged_NormalArgs _afterHandleSpriteChanged;

        private static void HandleSpriteChanged(On.tk2dSpriteAttachPoint.orig_HandleSpriteChanged orig,
            tk2dSpriteAttachPoint self, tk2dBaseSprite spr)
        {
            Delegates.Params_HandleSpriteChanged @params = new()
            {
                self = self, spr = spr
            };
            _beforeHandleSpriteChanged?.Invoke(@params);
            self = @params.self;
            spr = @params.spr;
            orig(self, spr);
            if (_afterHandleSpriteChanged != null) _afterHandleSpriteChanged.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void GetInstanceName_BeforeArgs(Params_GetInstanceName args);

        public delegate string GetInstanceName_NormalArgs(Params_GetInstanceName args);

        public delegate void HandleSpriteChanged_BeforeArgs(Params_HandleSpriteChanged args);

        public delegate void HandleSpriteChanged_NormalArgs(Params_HandleSpriteChanged args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public sealed class Params_Awake
        {
            public tk2dSpriteAttachPoint self;
        }

        public sealed class Params_OnEnable
        {
            public tk2dSpriteAttachPoint self;
        }

        public sealed class Params_OnDisable
        {
            public tk2dSpriteAttachPoint self;
        }

        public sealed class Params_GetInstanceName
        {
            public tk2dSpriteAttachPoint self;
            public Transform t;
        }

        public sealed class Params_HandleSpriteChanged
        {
            public tk2dSpriteAttachPoint self;
            public tk2dBaseSprite spr;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.GetInstanceName_BeforeArgs GetInstanceName
        {
            add
            {
                HookHandler._beforeGetInstanceName += value;
                HookHandler.HookGetInstanceName();
            }
            remove => HookHandler._beforeGetInstanceName -= value;
        }

        public static event Delegates.HandleSpriteChanged_BeforeArgs HandleSpriteChanged
        {
            add
            {
                HookHandler._beforeHandleSpriteChanged += value;
                HookHandler.HookHandleSpriteChanged();
            }
            remove => HookHandler._beforeHandleSpriteChanged -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.GetInstanceName_NormalArgs GetInstanceName
        {
            add
            {
                HookHandler._afterGetInstanceName += value;
                HookHandler.HookGetInstanceName();
            }
            remove => HookHandler._afterGetInstanceName -= value;
        }

        public static event Delegates.HandleSpriteChanged_NormalArgs HandleSpriteChanged
        {
            add
            {
                HookHandler._afterHandleSpriteChanged += value;
                HookHandler.HookHandleSpriteChanged();
            }
            remove => HookHandler._afterHandleSpriteChanged -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.tk2dSpriteAttachPoint.hook_Awake Awake
        {
            add => On.tk2dSpriteAttachPoint.Awake += value;
            remove => On.tk2dSpriteAttachPoint.Awake -= value;
        }

        public static event On.tk2dSpriteAttachPoint.hook_OnEnable OnEnable
        {
            add => On.tk2dSpriteAttachPoint.OnEnable += value;
            remove => On.tk2dSpriteAttachPoint.OnEnable -= value;
        }

        public static event On.tk2dSpriteAttachPoint.hook_OnDisable OnDisable
        {
            add => On.tk2dSpriteAttachPoint.OnDisable += value;
            remove => On.tk2dSpriteAttachPoint.OnDisable -= value;
        }

        public static event On.tk2dSpriteAttachPoint.hook_GetInstanceName GetInstanceName
        {
            add => On.tk2dSpriteAttachPoint.GetInstanceName += value;
            remove => On.tk2dSpriteAttachPoint.GetInstanceName -= value;
        }

        public static event On.tk2dSpriteAttachPoint.hook_HandleSpriteChanged HandleSpriteChanged
        {
            add => On.tk2dSpriteAttachPoint.HandleSpriteChanged += value;
            remove => On.tk2dSpriteAttachPoint.HandleSpriteChanged -= value;
        }
    }
}