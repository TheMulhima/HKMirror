namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for Breakable class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBreakable
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                On.Breakable.Reset += Reset;
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(On.Breakable.orig_Reset orig, Breakable self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.Breakable.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.Breakable.orig_Awake orig, Breakable self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.Breakable.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.Breakable.orig_Start orig, Breakable self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookCreateAdditionalDebrisParts()
        {
            if (!HookedList.Contains("CreateAdditionalDebrisParts"))
            {
                HookedList.Add("CreateAdditionalDebrisParts");
                On.Breakable.CreateAdditionalDebrisParts += CreateAdditionalDebrisParts;
            }
        }

        internal static event Delegates.CreateAdditionalDebrisParts_BeforeArgs _beforeCreateAdditionalDebrisParts;
        internal static event Delegates.CreateAdditionalDebrisParts_NormalArgs _afterCreateAdditionalDebrisParts;

        private static void CreateAdditionalDebrisParts(On.Breakable.orig_CreateAdditionalDebrisParts orig,
            Breakable self, List<GameObject> debrisParts)
        {
            Delegates.Params_CreateAdditionalDebrisParts @params = new()
            {
                self = self, debrisParts = debrisParts
            };
            _beforeCreateAdditionalDebrisParts?.Invoke(@params);
            self = @params.self;
            debrisParts = @params.debrisParts;
            orig(self, debrisParts);
            if (_afterCreateAdditionalDebrisParts != null) _afterCreateAdditionalDebrisParts.Invoke(@params);
        }

        internal static void HookBreakSelf()
        {
            if (!HookedList.Contains("BreakSelf"))
            {
                HookedList.Add("BreakSelf");
                On.Breakable.BreakSelf += BreakSelf;
            }
        }

        internal static event Delegates.BreakSelf_BeforeArgs _beforeBreakSelf;
        internal static event Delegates.BreakSelf_NormalArgs _afterBreakSelf;

        private static void BreakSelf(On.Breakable.orig_BreakSelf orig, Breakable self)
        {
            Delegates.Params_BreakSelf @params = new()
            {
                self = self
            };
            _beforeBreakSelf?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBreakSelf != null) _afterBreakSelf.Invoke(@params);
        }

        internal static void HookHit()
        {
            if (!HookedList.Contains("Hit"))
            {
                HookedList.Add("Hit");
                On.Breakable.Hit += Hit;
            }
        }

        internal static event Delegates.Hit_BeforeArgs _beforeHit;
        internal static event Delegates.Hit_NormalArgs _afterHit;

        private static void Hit(On.Breakable.orig_Hit orig, Breakable self, HitInstance damageInstance)
        {
            Delegates.Params_Hit @params = new()
            {
                self = self, damageInstance = damageInstance
            };
            _beforeHit?.Invoke(@params);
            self = @params.self;
            damageInstance = @params.damageInstance;
            orig(self, damageInstance);
            if (_afterHit != null) _afterHit.Invoke(@params);
        }

        internal static void HookSpawnNailHitEffect()
        {
            if (!HookedList.Contains("SpawnNailHitEffect"))
            {
                HookedList.Add("SpawnNailHitEffect");
                On.Breakable.SpawnNailHitEffect += SpawnNailHitEffect;
            }
        }

        internal static event Delegates.SpawnNailHitEffect_BeforeArgs _beforeSpawnNailHitEffect;
        internal static event Delegates.SpawnNailHitEffect_NormalArgs _afterSpawnNailHitEffect;

        private static Transform SpawnNailHitEffect(On.Breakable.orig_SpawnNailHitEffect orig,
            Transform nailHitEffectPrefab, Vector3 position, float impactAngle)
        {
            Delegates.Params_SpawnNailHitEffect @params = new()
            {
                nailHitEffectPrefab = nailHitEffectPrefab, position = position, impactAngle = impactAngle
            };
            _beforeSpawnNailHitEffect?.Invoke(@params);
            nailHitEffectPrefab = @params.nailHitEffectPrefab;
            position = @params.position;
            impactAngle = @params.impactAngle;
            var retVal = orig(nailHitEffectPrefab, position, impactAngle);
            if (_afterSpawnNailHitEffect != null) retVal = _afterSpawnNailHitEffect.Invoke(@params);
            return retVal;
        }

        internal static void HookSetStaticPartsActivation()
        {
            if (!HookedList.Contains("SetStaticPartsActivation"))
            {
                HookedList.Add("SetStaticPartsActivation");
                On.Breakable.SetStaticPartsActivation += SetStaticPartsActivation;
            }
        }

        internal static event Delegates.SetStaticPartsActivation_BeforeArgs _beforeSetStaticPartsActivation;
        internal static event Delegates.SetStaticPartsActivation_NormalArgs _afterSetStaticPartsActivation;

        private static void SetStaticPartsActivation(On.Breakable.orig_SetStaticPartsActivation orig, Breakable self,
            bool broken)
        {
            Delegates.Params_SetStaticPartsActivation @params = new()
            {
                self = self, broken = broken
            };
            _beforeSetStaticPartsActivation?.Invoke(@params);
            self = @params.self;
            broken = @params.broken;
            orig(self, broken);
            if (_afterSetStaticPartsActivation != null) _afterSetStaticPartsActivation.Invoke(@params);
        }

        internal static void HookBreak()
        {
            if (!HookedList.Contains("Break"))
            {
                HookedList.Add("Break");
                On.Breakable.Break += Break;
            }
        }

        internal static event Delegates.Break_BeforeArgs _beforeBreak;
        internal static event Delegates.Break_NormalArgs _afterBreak;

        private static void Break(On.Breakable.orig_Break orig, Breakable self, float flingAngleMin,
            float flingAngleMax, float impactMultiplier)
        {
            Delegates.Params_Break @params = new()
            {
                self = self, flingAngleMin = flingAngleMin, flingAngleMax = flingAngleMax,
                impactMultiplier = impactMultiplier
            };
            _beforeBreak?.Invoke(@params);
            self = @params.self;
            flingAngleMin = @params.flingAngleMin;
            flingAngleMax = @params.flingAngleMax;
            impactMultiplier = @params.impactMultiplier;
            orig(self, flingAngleMin, flingAngleMax, impactMultiplier);
            if (_afterBreak != null) _afterBreak.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void Break_BeforeArgs(Params_Break args);

        public delegate void Break_NormalArgs(Params_Break args);

        public delegate void BreakSelf_BeforeArgs(Params_BreakSelf args);

        public delegate void BreakSelf_NormalArgs(Params_BreakSelf args);

        public delegate void CreateAdditionalDebrisParts_BeforeArgs(Params_CreateAdditionalDebrisParts args);

        public delegate void CreateAdditionalDebrisParts_NormalArgs(Params_CreateAdditionalDebrisParts args);

        public delegate void Hit_BeforeArgs(Params_Hit args);

        public delegate void Hit_NormalArgs(Params_Hit args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public delegate void SetStaticPartsActivation_BeforeArgs(Params_SetStaticPartsActivation args);

        public delegate void SetStaticPartsActivation_NormalArgs(Params_SetStaticPartsActivation args);

        public delegate void SpawnNailHitEffect_BeforeArgs(Params_SpawnNailHitEffect args);

        public delegate Transform SpawnNailHitEffect_NormalArgs(Params_SpawnNailHitEffect args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Reset
        {
            public Breakable self;
        }

        public sealed class Params_Awake
        {
            public Breakable self;
        }

        public sealed class Params_Start
        {
            public Breakable self;
        }

        public sealed class Params_CreateAdditionalDebrisParts
        {
            public List<GameObject> debrisParts;
            public Breakable self;
        }

        public sealed class Params_BreakSelf
        {
            public Breakable self;
        }

        public sealed class Params_Hit
        {
            public HitInstance damageInstance;
            public Breakable self;
        }

        public sealed class Params_SpawnNailHitEffect
        {
            public float impactAngle;
            public Transform nailHitEffectPrefab;
            public Vector3 position;
        }

        public sealed class Params_SetStaticPartsActivation
        {
            public bool broken;
            public Breakable self;
        }

        public sealed class Params_Break
        {
            public float flingAngleMax;
            public float flingAngleMin;
            public float impactMultiplier;
            public Breakable self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.CreateAdditionalDebrisParts_BeforeArgs CreateAdditionalDebrisParts
        {
            add
            {
                HookHandler._beforeCreateAdditionalDebrisParts += value;
                HookHandler.HookCreateAdditionalDebrisParts();
            }
            remove => HookHandler._beforeCreateAdditionalDebrisParts -= value;
        }

        public static event Delegates.BreakSelf_BeforeArgs BreakSelf
        {
            add
            {
                HookHandler._beforeBreakSelf += value;
                HookHandler.HookBreakSelf();
            }
            remove => HookHandler._beforeBreakSelf -= value;
        }

        public static event Delegates.Hit_BeforeArgs Hit
        {
            add
            {
                HookHandler._beforeHit += value;
                HookHandler.HookHit();
            }
            remove => HookHandler._beforeHit -= value;
        }

        public static event Delegates.SpawnNailHitEffect_BeforeArgs SpawnNailHitEffect
        {
            add
            {
                HookHandler._beforeSpawnNailHitEffect += value;
                HookHandler.HookSpawnNailHitEffect();
            }
            remove => HookHandler._beforeSpawnNailHitEffect -= value;
        }

        public static event Delegates.SetStaticPartsActivation_BeforeArgs SetStaticPartsActivation
        {
            add
            {
                HookHandler._beforeSetStaticPartsActivation += value;
                HookHandler.HookSetStaticPartsActivation();
            }
            remove => HookHandler._beforeSetStaticPartsActivation -= value;
        }

        public static event Delegates.Break_BeforeArgs Break
        {
            add
            {
                HookHandler._beforeBreak += value;
                HookHandler.HookBreak();
            }
            remove => HookHandler._beforeBreak -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.CreateAdditionalDebrisParts_NormalArgs CreateAdditionalDebrisParts
        {
            add
            {
                HookHandler._afterCreateAdditionalDebrisParts += value;
                HookHandler.HookCreateAdditionalDebrisParts();
            }
            remove => HookHandler._afterCreateAdditionalDebrisParts -= value;
        }

        public static event Delegates.BreakSelf_NormalArgs BreakSelf
        {
            add
            {
                HookHandler._afterBreakSelf += value;
                HookHandler.HookBreakSelf();
            }
            remove => HookHandler._afterBreakSelf -= value;
        }

        public static event Delegates.Hit_NormalArgs Hit
        {
            add
            {
                HookHandler._afterHit += value;
                HookHandler.HookHit();
            }
            remove => HookHandler._afterHit -= value;
        }

        public static event Delegates.SpawnNailHitEffect_NormalArgs SpawnNailHitEffect
        {
            add
            {
                HookHandler._afterSpawnNailHitEffect += value;
                HookHandler.HookSpawnNailHitEffect();
            }
            remove => HookHandler._afterSpawnNailHitEffect -= value;
        }

        public static event Delegates.SetStaticPartsActivation_NormalArgs SetStaticPartsActivation
        {
            add
            {
                HookHandler._afterSetStaticPartsActivation += value;
                HookHandler.HookSetStaticPartsActivation();
            }
            remove => HookHandler._afterSetStaticPartsActivation -= value;
        }

        public static event Delegates.Break_NormalArgs Break
        {
            add
            {
                HookHandler._afterBreak += value;
                HookHandler.HookBreak();
            }
            remove => HookHandler._afterBreak -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.Breakable.hook_Reset Reset
        {
            add => On.Breakable.Reset += value;
            remove => On.Breakable.Reset -= value;
        }

        public static event On.Breakable.hook_Awake Awake
        {
            add => On.Breakable.Awake += value;
            remove => On.Breakable.Awake -= value;
        }

        public static event On.Breakable.hook_Start Start
        {
            add => On.Breakable.Start += value;
            remove => On.Breakable.Start -= value;
        }

        public static event On.Breakable.hook_CreateAdditionalDebrisParts CreateAdditionalDebrisParts
        {
            add => On.Breakable.CreateAdditionalDebrisParts += value;
            remove => On.Breakable.CreateAdditionalDebrisParts -= value;
        }

        public static event On.Breakable.hook_BreakSelf BreakSelf
        {
            add => On.Breakable.BreakSelf += value;
            remove => On.Breakable.BreakSelf -= value;
        }

        public static event On.Breakable.hook_Hit Hit
        {
            add => On.Breakable.Hit += value;
            remove => On.Breakable.Hit -= value;
        }

        public static event On.Breakable.hook_SpawnNailHitEffect SpawnNailHitEffect
        {
            add => On.Breakable.SpawnNailHitEffect += value;
            remove => On.Breakable.SpawnNailHitEffect -= value;
        }

        public static event On.Breakable.hook_SetStaticPartsActivation SetStaticPartsActivation
        {
            add => On.Breakable.SetStaticPartsActivation += value;
            remove => On.Breakable.SetStaticPartsActivation -= value;
        }

        public static event On.Breakable.hook_Break Break
        {
            add => On.Breakable.Break += value;
            remove => On.Breakable.Break -= value;
        }
    }
}