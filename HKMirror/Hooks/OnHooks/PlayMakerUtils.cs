namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for PlayMakerUtils class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPlayMakerUtils
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookSendEventToGameObject_PlayMakerFSM_GameObject_string_bool()
        {
            if (!HookedList.Contains("SendEventToGameObject_PlayMakerFSM_GameObject_string_bool"))
            {
                HookedList.Add("SendEventToGameObject_PlayMakerFSM_GameObject_string_bool");
                On.PlayMakerUtils.SendEventToGameObject_PlayMakerFSM_GameObject_string_bool +=
                    SendEventToGameObject_PlayMakerFSM_GameObject_string_bool;
            }
        }

        internal static event Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_BeforeArgs
            _beforeSendEventToGameObject_PlayMakerFSM_GameObject_string_bool;

        internal static event Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_AfterArgs
            _afterSendEventToGameObject_PlayMakerFSM_GameObject_string_bool;

        private static void SendEventToGameObject_PlayMakerFSM_GameObject_string_bool(
            On.PlayMakerUtils.orig_SendEventToGameObject_PlayMakerFSM_GameObject_string_bool orig, PlayMakerFSM fromFsm,
            GameObject target, string fsmEvent, bool includeChildren)
        {
            Delegates.Params_SendEventToGameObject_PlayMakerFSM_GameObject_string_bool @params = new()
            {
                fromFsm = fromFsm, target = target, fsmEvent = fsmEvent, includeChildren = includeChildren
            };
            if (_beforeSendEventToGameObject_PlayMakerFSM_GameObject_string_bool != null)
                foreach (Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_BeforeArgs toInvoke in
                         _beforeSendEventToGameObject_PlayMakerFSM_GameObject_string_bool.GetInvocationList())
                    try
                    {
                        _beforeSendEventToGameObject_PlayMakerFSM_GameObject_string_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fromFsm = @params.fromFsm;
            target = @params.target;
            fsmEvent = @params.fsmEvent;
            includeChildren = @params.includeChildren;
            orig(fromFsm, target, fsmEvent, includeChildren);
            if (_afterSendEventToGameObject_PlayMakerFSM_GameObject_string_bool != null)
                foreach (Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_AfterArgs toInvoke in
                         _afterSendEventToGameObject_PlayMakerFSM_GameObject_string_bool.GetInvocationList())
                    try
                    {
                        _afterSendEventToGameObject_PlayMakerFSM_GameObject_string_bool.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSendEventToGameObject_PlayMakerFSM_GameObject_string()
        {
            if (!HookedList.Contains("SendEventToGameObject_PlayMakerFSM_GameObject_string"))
            {
                HookedList.Add("SendEventToGameObject_PlayMakerFSM_GameObject_string");
                On.PlayMakerUtils.SendEventToGameObject_PlayMakerFSM_GameObject_string +=
                    SendEventToGameObject_PlayMakerFSM_GameObject_string;
            }
        }

        internal static event Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_BeforeArgs
            _beforeSendEventToGameObject_PlayMakerFSM_GameObject_string;

        internal static event Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_AfterArgs
            _afterSendEventToGameObject_PlayMakerFSM_GameObject_string;

        private static void SendEventToGameObject_PlayMakerFSM_GameObject_string(
            On.PlayMakerUtils.orig_SendEventToGameObject_PlayMakerFSM_GameObject_string orig, PlayMakerFSM fromFsm,
            GameObject target, string fsmEvent)
        {
            Delegates.Params_SendEventToGameObject_PlayMakerFSM_GameObject_string @params = new()
            {
                fromFsm = fromFsm, target = target, fsmEvent = fsmEvent
            };
            if (_beforeSendEventToGameObject_PlayMakerFSM_GameObject_string != null)
                foreach (Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_BeforeArgs toInvoke in
                         _beforeSendEventToGameObject_PlayMakerFSM_GameObject_string.GetInvocationList())
                    try
                    {
                        _beforeSendEventToGameObject_PlayMakerFSM_GameObject_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fromFsm = @params.fromFsm;
            target = @params.target;
            fsmEvent = @params.fsmEvent;
            orig(fromFsm, target, fsmEvent);
            if (_afterSendEventToGameObject_PlayMakerFSM_GameObject_string != null)
                foreach (Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_AfterArgs toInvoke in
                         _afterSendEventToGameObject_PlayMakerFSM_GameObject_string.GetInvocationList())
                    try
                    {
                        _afterSendEventToGameObject_PlayMakerFSM_GameObject_string.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData()
        {
            if (!HookedList.Contains("SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData"))
            {
                HookedList.Add("SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData");
                On.PlayMakerUtils.SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData +=
                    SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData;
            }
        }

        internal static event Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData_BeforeArgs
            _beforeSendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData;

        internal static event Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData_AfterArgs
            _afterSendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData;

        private static void SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData(
            On.PlayMakerUtils.orig_SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData orig,
            PlayMakerFSM fromFsm, GameObject target, string fsmEvent, FsmEventData eventData)
        {
            Delegates.Params_SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData @params = new()
            {
                fromFsm = fromFsm, target = target, fsmEvent = fsmEvent, eventData = eventData
            };
            if (_beforeSendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData != null)
                foreach (Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData_BeforeArgs toInvoke
                         in _beforeSendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData
                             .GetInvocationList())
                    try
                    {
                        _beforeSendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fromFsm = @params.fromFsm;
            target = @params.target;
            fsmEvent = @params.fsmEvent;
            eventData = @params.eventData;
            orig(fromFsm, target, fsmEvent, eventData);
            if (_afterSendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData != null)
                foreach (Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData_AfterArgs toInvoke
                         in _afterSendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData.GetInvocationList())
                    try
                    {
                        _afterSendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData()
        {
            if (!HookedList.Contains("SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData"))
            {
                HookedList.Add("SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData");
                On.PlayMakerUtils.SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData +=
                    SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData;
            }
        }

        internal static event
            Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData_BeforeArgs
            _beforeSendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData;

        internal static event Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData_AfterArgs
            _afterSendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData;

        private static void SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData(
            On.PlayMakerUtils.orig_SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData orig,
            PlayMakerFSM fromFsm, GameObject target, string fsmEvent, bool includeChildren, FsmEventData eventData)
        {
            Delegates.Params_SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData @params = new()
            {
                fromFsm = fromFsm, target = target, fsmEvent = fsmEvent, includeChildren = includeChildren,
                eventData = eventData
            };
            if (_beforeSendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData != null)
                foreach (Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData_BeforeArgs
                             toInvoke in _beforeSendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData
                             .GetInvocationList())
                    try
                    {
                        _beforeSendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fromFsm = @params.fromFsm;
            target = @params.target;
            fsmEvent = @params.fsmEvent;
            includeChildren = @params.includeChildren;
            eventData = @params.eventData;
            orig(fromFsm, target, fsmEvent, includeChildren, eventData);
            if (_afterSendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData != null)
                foreach (Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData_AfterArgs
                             toInvoke in _afterSendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData
                             .GetInvocationList())
                    try
                    {
                        _afterSendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDoesTargetImplementsEvent()
        {
            if (!HookedList.Contains("DoesTargetImplementsEvent"))
            {
                HookedList.Add("DoesTargetImplementsEvent");
                On.PlayMakerUtils.DoesTargetImplementsEvent += DoesTargetImplementsEvent;
            }
        }

        internal static event Delegates.DoesTargetImplementsEvent_BeforeArgs _beforeDoesTargetImplementsEvent;
        internal static event Delegates.DoesTargetImplementsEvent_AfterArgs _afterDoesTargetImplementsEvent;

        private static bool DoesTargetImplementsEvent(On.PlayMakerUtils.orig_DoesTargetImplementsEvent orig,
            FsmEventTarget target, string eventName)
        {
            Delegates.Params_DoesTargetImplementsEvent @params = new()
            {
                target = target, eventName = eventName
            };
            if (_beforeDoesTargetImplementsEvent != null)
                foreach (Delegates.DoesTargetImplementsEvent_BeforeArgs toInvoke in _beforeDoesTargetImplementsEvent
                             .GetInvocationList())
                    try
                    {
                        _beforeDoesTargetImplementsEvent?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            eventName = @params.eventName;
            var retVal = orig(target, eventName);
            if (_afterDoesTargetImplementsEvent != null)
                foreach (Delegates.DoesTargetImplementsEvent_AfterArgs toInvoke in _afterDoesTargetImplementsEvent
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterDoesTargetImplementsEvent.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookDoesGameObjectImplementsEvent_GameObject_string()
        {
            if (!HookedList.Contains("DoesGameObjectImplementsEvent_GameObject_string"))
            {
                HookedList.Add("DoesGameObjectImplementsEvent_GameObject_string");
                On.PlayMakerUtils.DoesGameObjectImplementsEvent_GameObject_string +=
                    DoesGameObjectImplementsEvent_GameObject_string;
            }
        }

        internal static event Delegates.DoesGameObjectImplementsEvent_GameObject_string_BeforeArgs
            _beforeDoesGameObjectImplementsEvent_GameObject_string;

        internal static event Delegates.DoesGameObjectImplementsEvent_GameObject_string_AfterArgs
            _afterDoesGameObjectImplementsEvent_GameObject_string;

        private static bool DoesGameObjectImplementsEvent_GameObject_string(
            On.PlayMakerUtils.orig_DoesGameObjectImplementsEvent_GameObject_string orig, GameObject go, string fsmEvent)
        {
            Delegates.Params_DoesGameObjectImplementsEvent_GameObject_string @params = new()
            {
                go = go, fsmEvent = fsmEvent
            };
            if (_beforeDoesGameObjectImplementsEvent_GameObject_string != null)
                foreach (Delegates.DoesGameObjectImplementsEvent_GameObject_string_BeforeArgs toInvoke in
                         _beforeDoesGameObjectImplementsEvent_GameObject_string.GetInvocationList())
                    try
                    {
                        _beforeDoesGameObjectImplementsEvent_GameObject_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            go = @params.go;
            fsmEvent = @params.fsmEvent;
            var retVal = orig(go, fsmEvent);
            if (_afterDoesGameObjectImplementsEvent_GameObject_string != null)
                foreach (Delegates.DoesGameObjectImplementsEvent_GameObject_string_AfterArgs toInvoke in
                         _afterDoesGameObjectImplementsEvent_GameObject_string.GetInvocationList())
                    try
                    {
                        retVal = _afterDoesGameObjectImplementsEvent_GameObject_string.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookDoesGameObjectImplementsEvent_GameObject_string_string()
        {
            if (!HookedList.Contains("DoesGameObjectImplementsEvent_GameObject_string_string"))
            {
                HookedList.Add("DoesGameObjectImplementsEvent_GameObject_string_string");
                On.PlayMakerUtils.DoesGameObjectImplementsEvent_GameObject_string_string +=
                    DoesGameObjectImplementsEvent_GameObject_string_string;
            }
        }

        internal static event Delegates.DoesGameObjectImplementsEvent_GameObject_string_string_BeforeArgs
            _beforeDoesGameObjectImplementsEvent_GameObject_string_string;

        internal static event Delegates.DoesGameObjectImplementsEvent_GameObject_string_string_AfterArgs
            _afterDoesGameObjectImplementsEvent_GameObject_string_string;

        private static bool DoesGameObjectImplementsEvent_GameObject_string_string(
            On.PlayMakerUtils.orig_DoesGameObjectImplementsEvent_GameObject_string_string orig, GameObject go,
            string fsmName, string fsmEvent)
        {
            Delegates.Params_DoesGameObjectImplementsEvent_GameObject_string_string @params = new()
            {
                go = go, fsmName = fsmName, fsmEvent = fsmEvent
            };
            if (_beforeDoesGameObjectImplementsEvent_GameObject_string_string != null)
                foreach (Delegates.DoesGameObjectImplementsEvent_GameObject_string_string_BeforeArgs toInvoke in
                         _beforeDoesGameObjectImplementsEvent_GameObject_string_string.GetInvocationList())
                    try
                    {
                        _beforeDoesGameObjectImplementsEvent_GameObject_string_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            go = @params.go;
            fsmName = @params.fsmName;
            fsmEvent = @params.fsmEvent;
            var retVal = orig(go, fsmName, fsmEvent);
            if (_afterDoesGameObjectImplementsEvent_GameObject_string_string != null)
                foreach (Delegates.DoesGameObjectImplementsEvent_GameObject_string_string_AfterArgs toInvoke in
                         _afterDoesGameObjectImplementsEvent_GameObject_string_string.GetInvocationList())
                    try
                    {
                        retVal = _afterDoesGameObjectImplementsEvent_GameObject_string_string.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookDoesFsmImplementsEvent()
        {
            if (!HookedList.Contains("DoesFsmImplementsEvent"))
            {
                HookedList.Add("DoesFsmImplementsEvent");
                On.PlayMakerUtils.DoesFsmImplementsEvent += DoesFsmImplementsEvent;
            }
        }

        internal static event Delegates.DoesFsmImplementsEvent_BeforeArgs _beforeDoesFsmImplementsEvent;
        internal static event Delegates.DoesFsmImplementsEvent_AfterArgs _afterDoesFsmImplementsEvent;

        private static bool DoesFsmImplementsEvent(On.PlayMakerUtils.orig_DoesFsmImplementsEvent orig, PlayMakerFSM fsm,
            string fsmEvent)
        {
            Delegates.Params_DoesFsmImplementsEvent @params = new()
            {
                fsm = fsm, fsmEvent = fsmEvent
            };
            if (_beforeDoesFsmImplementsEvent != null)
                foreach (Delegates.DoesFsmImplementsEvent_BeforeArgs toInvoke in _beforeDoesFsmImplementsEvent
                             .GetInvocationList())
                    try
                    {
                        _beforeDoesFsmImplementsEvent?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fsm = @params.fsm;
            fsmEvent = @params.fsmEvent;
            var retVal = orig(fsm, fsmEvent);
            if (_afterDoesFsmImplementsEvent != null)
                foreach (Delegates.DoesFsmImplementsEvent_AfterArgs toInvoke in _afterDoesFsmImplementsEvent
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterDoesFsmImplementsEvent.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookFindFsmOnGameObject()
        {
            if (!HookedList.Contains("FindFsmOnGameObject"))
            {
                HookedList.Add("FindFsmOnGameObject");
                On.PlayMakerUtils.FindFsmOnGameObject += FindFsmOnGameObject;
            }
        }

        internal static event Delegates.FindFsmOnGameObject_BeforeArgs _beforeFindFsmOnGameObject;
        internal static event Delegates.FindFsmOnGameObject_AfterArgs _afterFindFsmOnGameObject;

        private static PlayMakerFSM FindFsmOnGameObject(On.PlayMakerUtils.orig_FindFsmOnGameObject orig, GameObject go,
            string fsmName)
        {
            Delegates.Params_FindFsmOnGameObject @params = new()
            {
                go = go, fsmName = fsmName
            };
            if (_beforeFindFsmOnGameObject != null)
                foreach (Delegates.FindFsmOnGameObject_BeforeArgs toInvoke in _beforeFindFsmOnGameObject
                             .GetInvocationList())
                    try
                    {
                        _beforeFindFsmOnGameObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            go = @params.go;
            fsmName = @params.fsmName;
            var retVal = orig(go, fsmName);
            if (_afterFindFsmOnGameObject != null)
                foreach (Delegates.FindFsmOnGameObject_AfterArgs toInvoke in
                         _afterFindFsmOnGameObject.GetInvocationList())
                    try
                    {
                        retVal = _afterFindFsmOnGameObject.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookRefreshValueFromFsmVar()
        {
            if (!HookedList.Contains("RefreshValueFromFsmVar"))
            {
                HookedList.Add("RefreshValueFromFsmVar");
                On.PlayMakerUtils.RefreshValueFromFsmVar += RefreshValueFromFsmVar;
            }
        }

        internal static event Delegates.RefreshValueFromFsmVar_BeforeArgs _beforeRefreshValueFromFsmVar;
        internal static event Delegates.RefreshValueFromFsmVar_AfterArgs _afterRefreshValueFromFsmVar;

        private static void RefreshValueFromFsmVar(On.PlayMakerUtils.orig_RefreshValueFromFsmVar orig, Fsm fromFsm,
            FsmVar fsmVar)
        {
            Delegates.Params_RefreshValueFromFsmVar @params = new()
            {
                fromFsm = fromFsm, fsmVar = fsmVar
            };
            if (_beforeRefreshValueFromFsmVar != null)
                foreach (Delegates.RefreshValueFromFsmVar_BeforeArgs toInvoke in _beforeRefreshValueFromFsmVar
                             .GetInvocationList())
                    try
                    {
                        _beforeRefreshValueFromFsmVar?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fromFsm = @params.fromFsm;
            fsmVar = @params.fsmVar;
            orig(fromFsm, fsmVar);
            if (_afterRefreshValueFromFsmVar != null)
                foreach (Delegates.RefreshValueFromFsmVar_AfterArgs toInvoke in _afterRefreshValueFromFsmVar
                             .GetInvocationList())
                    try
                    {
                        _afterRefreshValueFromFsmVar.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetValueFromFsmVar()
        {
            if (!HookedList.Contains("GetValueFromFsmVar"))
            {
                HookedList.Add("GetValueFromFsmVar");
                On.PlayMakerUtils.GetValueFromFsmVar += GetValueFromFsmVar;
            }
        }

        internal static event Delegates.GetValueFromFsmVar_BeforeArgs _beforeGetValueFromFsmVar;
        internal static event Delegates.GetValueFromFsmVar_AfterArgs _afterGetValueFromFsmVar;

        private static object GetValueFromFsmVar(On.PlayMakerUtils.orig_GetValueFromFsmVar orig, Fsm fromFsm,
            FsmVar fsmVar)
        {
            Delegates.Params_GetValueFromFsmVar @params = new()
            {
                fromFsm = fromFsm, fsmVar = fsmVar
            };
            if (_beforeGetValueFromFsmVar != null)
                foreach (Delegates.GetValueFromFsmVar_BeforeArgs toInvoke in
                         _beforeGetValueFromFsmVar.GetInvocationList())
                    try
                    {
                        _beforeGetValueFromFsmVar?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fromFsm = @params.fromFsm;
            fsmVar = @params.fsmVar;
            var retVal = orig(fromFsm, fsmVar);
            if (_afterGetValueFromFsmVar != null)
                foreach (Delegates.GetValueFromFsmVar_AfterArgs toInvoke in
                         _afterGetValueFromFsmVar.GetInvocationList())
                    try
                    {
                        retVal = _afterGetValueFromFsmVar.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookApplyValueToFsmVar()
        {
            if (!HookedList.Contains("ApplyValueToFsmVar"))
            {
                HookedList.Add("ApplyValueToFsmVar");
                On.PlayMakerUtils.ApplyValueToFsmVar += ApplyValueToFsmVar;
            }
        }

        internal static event Delegates.ApplyValueToFsmVar_BeforeArgs _beforeApplyValueToFsmVar;
        internal static event Delegates.ApplyValueToFsmVar_AfterArgs _afterApplyValueToFsmVar;

        private static bool ApplyValueToFsmVar(On.PlayMakerUtils.orig_ApplyValueToFsmVar orig, Fsm fromFsm,
            FsmVar fsmVar, object value)
        {
            Delegates.Params_ApplyValueToFsmVar @params = new()
            {
                fromFsm = fromFsm, fsmVar = fsmVar, value = value
            };
            if (_beforeApplyValueToFsmVar != null)
                foreach (Delegates.ApplyValueToFsmVar_BeforeArgs toInvoke in
                         _beforeApplyValueToFsmVar.GetInvocationList())
                    try
                    {
                        _beforeApplyValueToFsmVar?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fromFsm = @params.fromFsm;
            fsmVar = @params.fsmVar;
            value = @params.value;
            var retVal = orig(fromFsm, fsmVar, value);
            if (_afterApplyValueToFsmVar != null)
                foreach (Delegates.ApplyValueToFsmVar_AfterArgs toInvoke in
                         _afterApplyValueToFsmVar.GetInvocationList())
                    try
                    {
                        retVal = _afterApplyValueToFsmVar.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetFloatFromObject()
        {
            if (!HookedList.Contains("GetFloatFromObject"))
            {
                HookedList.Add("GetFloatFromObject");
                On.PlayMakerUtils.GetFloatFromObject += GetFloatFromObject;
            }
        }

        internal static event Delegates.GetFloatFromObject_BeforeArgs _beforeGetFloatFromObject;
        internal static event Delegates.GetFloatFromObject_AfterArgs _afterGetFloatFromObject;

        private static float GetFloatFromObject(On.PlayMakerUtils.orig_GetFloatFromObject orig, object _obj,
            VariableType targetType, bool fastProcessingIfPossible)
        {
            Delegates.Params_GetFloatFromObject @params = new()
            {
                _obj = _obj, targetType = targetType, fastProcessingIfPossible = fastProcessingIfPossible
            };
            if (_beforeGetFloatFromObject != null)
                foreach (Delegates.GetFloatFromObject_BeforeArgs toInvoke in
                         _beforeGetFloatFromObject.GetInvocationList())
                    try
                    {
                        _beforeGetFloatFromObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            _obj = @params._obj;
            targetType = @params.targetType;
            fastProcessingIfPossible = @params.fastProcessingIfPossible;
            var retVal = orig(_obj, targetType, fastProcessingIfPossible);
            if (_afterGetFloatFromObject != null)
                foreach (Delegates.GetFloatFromObject_AfterArgs toInvoke in
                         _afterGetFloatFromObject.GetInvocationList())
                    try
                    {
                        retVal = _afterGetFloatFromObject.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookParseValueFromString_string_bool()
        {
            if (!HookedList.Contains("ParseValueFromString_string_bool"))
            {
                HookedList.Add("ParseValueFromString_string_bool");
                On.PlayMakerUtils.ParseValueFromString_string_bool += ParseValueFromString_string_bool;
            }
        }

        internal static event Delegates.ParseValueFromString_string_bool_BeforeArgs
            _beforeParseValueFromString_string_bool;

        internal static event Delegates.ParseValueFromString_string_bool_AfterArgs
            _afterParseValueFromString_string_bool;

        private static object ParseValueFromString_string_bool(
            On.PlayMakerUtils.orig_ParseValueFromString_string_bool orig, string source, bool useBytes)
        {
            Delegates.Params_ParseValueFromString_string_bool @params = new()
            {
                source = source, useBytes = useBytes
            };
            if (_beforeParseValueFromString_string_bool != null)
                foreach (Delegates.ParseValueFromString_string_bool_BeforeArgs toInvoke in
                         _beforeParseValueFromString_string_bool.GetInvocationList())
                    try
                    {
                        _beforeParseValueFromString_string_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            source = @params.source;
            useBytes = @params.useBytes;
            var retVal = orig(source, useBytes);
            if (_afterParseValueFromString_string_bool != null)
                foreach (Delegates.ParseValueFromString_string_bool_AfterArgs toInvoke in
                         _afterParseValueFromString_string_bool.GetInvocationList())
                    try
                    {
                        retVal = _afterParseValueFromString_string_bool.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookParseValueFromString_string_VariableType()
        {
            if (!HookedList.Contains("ParseValueFromString_string_VariableType"))
            {
                HookedList.Add("ParseValueFromString_string_VariableType");
                On.PlayMakerUtils.ParseValueFromString_string_VariableType += ParseValueFromString_string_VariableType;
            }
        }

        internal static event Delegates.ParseValueFromString_string_VariableType_BeforeArgs
            _beforeParseValueFromString_string_VariableType;

        internal static event Delegates.ParseValueFromString_string_VariableType_AfterArgs
            _afterParseValueFromString_string_VariableType;

        private static object ParseValueFromString_string_VariableType(
            On.PlayMakerUtils.orig_ParseValueFromString_string_VariableType orig, string source, VariableType type)
        {
            Delegates.Params_ParseValueFromString_string_VariableType @params = new()
            {
                source = source, type = type
            };
            if (_beforeParseValueFromString_string_VariableType != null)
                foreach (Delegates.ParseValueFromString_string_VariableType_BeforeArgs toInvoke in
                         _beforeParseValueFromString_string_VariableType.GetInvocationList())
                    try
                    {
                        _beforeParseValueFromString_string_VariableType?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            source = @params.source;
            type = @params.type;
            var retVal = orig(source, type);
            if (_afterParseValueFromString_string_VariableType != null)
                foreach (Delegates.ParseValueFromString_string_VariableType_AfterArgs toInvoke in
                         _afterParseValueFromString_string_VariableType.GetInvocationList())
                    try
                    {
                        retVal = _afterParseValueFromString_string_VariableType.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookParseValueFromString_string_Type()
        {
            if (!HookedList.Contains("ParseValueFromString_string_Type"))
            {
                HookedList.Add("ParseValueFromString_string_Type");
                On.PlayMakerUtils.ParseValueFromString_string_Type += ParseValueFromString_string_Type;
            }
        }

        internal static event Delegates.ParseValueFromString_string_Type_BeforeArgs
            _beforeParseValueFromString_string_Type;

        internal static event Delegates.ParseValueFromString_string_Type_AfterArgs
            _afterParseValueFromString_string_Type;

        private static object ParseValueFromString_string_Type(
            On.PlayMakerUtils.orig_ParseValueFromString_string_Type orig, string source, Type type)
        {
            Delegates.Params_ParseValueFromString_string_Type @params = new()
            {
                source = source, type = type
            };
            if (_beforeParseValueFromString_string_Type != null)
                foreach (Delegates.ParseValueFromString_string_Type_BeforeArgs toInvoke in
                         _beforeParseValueFromString_string_Type.GetInvocationList())
                    try
                    {
                        _beforeParseValueFromString_string_Type?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            source = @params.source;
            type = @params.type;
            var retVal = orig(source, type);
            if (_afterParseValueFromString_string_Type != null)
                foreach (Delegates.ParseValueFromString_string_Type_AfterArgs toInvoke in
                         _afterParseValueFromString_string_Type.GetInvocationList())
                    try
                    {
                        retVal = _afterParseValueFromString_string_Type.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookParseValueFromString_string()
        {
            if (!HookedList.Contains("ParseValueFromString_string"))
            {
                HookedList.Add("ParseValueFromString_string");
                On.PlayMakerUtils.ParseValueFromString_string += ParseValueFromString_string;
            }
        }

        internal static event Delegates.ParseValueFromString_string_BeforeArgs _beforeParseValueFromString_string;
        internal static event Delegates.ParseValueFromString_string_AfterArgs _afterParseValueFromString_string;

        private static object ParseValueFromString_string(On.PlayMakerUtils.orig_ParseValueFromString_string orig,
            string source)
        {
            Delegates.Params_ParseValueFromString_string @params = new()
            {
                source = source
            };
            if (_beforeParseValueFromString_string != null)
                foreach (Delegates.ParseValueFromString_string_BeforeArgs toInvoke in _beforeParseValueFromString_string
                             .GetInvocationList())
                    try
                    {
                        _beforeParseValueFromString_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            source = @params.source;
            var retVal = orig(source);
            if (_afterParseValueFromString_string != null)
                foreach (Delegates.ParseValueFromString_string_AfterArgs toInvoke in _afterParseValueFromString_string
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterParseValueFromString_string.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate bool ApplyValueToFsmVar_AfterArgs(Params_ApplyValueToFsmVar args, bool ret);

        public delegate void ApplyValueToFsmVar_BeforeArgs(Params_ApplyValueToFsmVar args);

        public delegate bool ApplyValueToFsmVar_WithArgs(Func<Fsm, FsmVar, object, bool> orig, Fsm fromFsm,
            FsmVar fsmVar, object value);

        public delegate bool DoesFsmImplementsEvent_AfterArgs(Params_DoesFsmImplementsEvent args, bool ret);

        public delegate void DoesFsmImplementsEvent_BeforeArgs(Params_DoesFsmImplementsEvent args);

        public delegate bool DoesFsmImplementsEvent_WithArgs(Func<PlayMakerFSM, string, bool> orig, PlayMakerFSM fsm,
            string fsmEvent);

        public delegate bool DoesGameObjectImplementsEvent_GameObject_string_AfterArgs(
            Params_DoesGameObjectImplementsEvent_GameObject_string args, bool ret);

        public delegate void DoesGameObjectImplementsEvent_GameObject_string_BeforeArgs(
            Params_DoesGameObjectImplementsEvent_GameObject_string args);

        public delegate bool DoesGameObjectImplementsEvent_GameObject_string_string_AfterArgs(
            Params_DoesGameObjectImplementsEvent_GameObject_string_string args, bool ret);

        public delegate void DoesGameObjectImplementsEvent_GameObject_string_string_BeforeArgs(
            Params_DoesGameObjectImplementsEvent_GameObject_string_string args);

        public delegate bool DoesGameObjectImplementsEvent_GameObject_string_string_WithArgs(
            Func<GameObject, string, string, bool> orig, GameObject go, string fsmName, string fsmEvent);

        public delegate bool DoesGameObjectImplementsEvent_GameObject_string_WithArgs(
            Func<GameObject, string, bool> orig, GameObject go, string fsmEvent);

        public delegate bool DoesTargetImplementsEvent_AfterArgs(Params_DoesTargetImplementsEvent args, bool ret);

        public delegate void DoesTargetImplementsEvent_BeforeArgs(Params_DoesTargetImplementsEvent args);

        public delegate bool DoesTargetImplementsEvent_WithArgs(Func<FsmEventTarget, string, bool> orig,
            FsmEventTarget target, string eventName);

        public delegate PlayMakerFSM FindFsmOnGameObject_AfterArgs(Params_FindFsmOnGameObject args, PlayMakerFSM ret);

        public delegate void FindFsmOnGameObject_BeforeArgs(Params_FindFsmOnGameObject args);

        public delegate PlayMakerFSM FindFsmOnGameObject_WithArgs(Func<GameObject, string, PlayMakerFSM> orig,
            GameObject go, string fsmName);

        public delegate float GetFloatFromObject_AfterArgs(Params_GetFloatFromObject args, float ret);

        public delegate void GetFloatFromObject_BeforeArgs(Params_GetFloatFromObject args);

        public delegate float GetFloatFromObject_WithArgs(Func<object, VariableType, bool, float> orig, object _obj,
            VariableType targetType, bool fastProcessingIfPossible);

        public delegate object GetValueFromFsmVar_AfterArgs(Params_GetValueFromFsmVar args, object ret);

        public delegate void GetValueFromFsmVar_BeforeArgs(Params_GetValueFromFsmVar args);

        public delegate object GetValueFromFsmVar_WithArgs(Func<Fsm, FsmVar, object> orig, Fsm fromFsm, FsmVar fsmVar);

        public delegate object ParseValueFromString_string_AfterArgs(Params_ParseValueFromString_string args,
            object ret);

        public delegate void ParseValueFromString_string_BeforeArgs(Params_ParseValueFromString_string args);

        public delegate object ParseValueFromString_string_bool_AfterArgs(Params_ParseValueFromString_string_bool args,
            object ret);

        public delegate void ParseValueFromString_string_bool_BeforeArgs(Params_ParseValueFromString_string_bool args);

        public delegate object ParseValueFromString_string_bool_WithArgs(Func<string, bool, object> orig, string source,
            bool useBytes);

        public delegate object ParseValueFromString_string_Type_AfterArgs(Params_ParseValueFromString_string_Type args,
            object ret);

        public delegate void ParseValueFromString_string_Type_BeforeArgs(Params_ParseValueFromString_string_Type args);

        public delegate object ParseValueFromString_string_Type_WithArgs(Func<string, Type, object> orig, string source,
            Type type);

        public delegate object ParseValueFromString_string_VariableType_AfterArgs(
            Params_ParseValueFromString_string_VariableType args, object ret);

        public delegate void ParseValueFromString_string_VariableType_BeforeArgs(
            Params_ParseValueFromString_string_VariableType args);

        public delegate object ParseValueFromString_string_VariableType_WithArgs(
            Func<string, VariableType, object> orig, string source, VariableType type);

        public delegate object ParseValueFromString_string_WithArgs(Func<string, object> orig, string source);

        public delegate void RefreshValueFromFsmVar_AfterArgs(Params_RefreshValueFromFsmVar args);

        public delegate void RefreshValueFromFsmVar_BeforeArgs(Params_RefreshValueFromFsmVar args);

        public delegate void RefreshValueFromFsmVar_WithArgs(Action<Fsm, FsmVar> orig, Fsm fromFsm, FsmVar fsmVar);

        public delegate void SendEventToGameObject_PlayMakerFSM_GameObject_string_AfterArgs(
            Params_SendEventToGameObject_PlayMakerFSM_GameObject_string args);

        public delegate void SendEventToGameObject_PlayMakerFSM_GameObject_string_BeforeArgs(
            Params_SendEventToGameObject_PlayMakerFSM_GameObject_string args);

        public delegate void SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_AfterArgs(
            Params_SendEventToGameObject_PlayMakerFSM_GameObject_string_bool args);

        public delegate void SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_BeforeArgs(
            Params_SendEventToGameObject_PlayMakerFSM_GameObject_string_bool args);

        public delegate void SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData_AfterArgs(
            Params_SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData args);

        public delegate void SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData_BeforeArgs(
            Params_SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData args);

        public delegate void SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData_WithArgs(
            Action<PlayMakerFSM, GameObject, string, bool, FsmEventData> orig, PlayMakerFSM fromFsm, GameObject target,
            string fsmEvent, bool includeChildren, FsmEventData eventData);

        public delegate void SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_WithArgs(
            Action<PlayMakerFSM, GameObject, string, bool> orig, PlayMakerFSM fromFsm, GameObject target,
            string fsmEvent, bool includeChildren);

        public delegate void SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData_AfterArgs(
            Params_SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData args);

        public delegate void SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData_BeforeArgs(
            Params_SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData args);

        public delegate void SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData_WithArgs(
            Action<PlayMakerFSM, GameObject, string, FsmEventData> orig, PlayMakerFSM fromFsm, GameObject target,
            string fsmEvent, FsmEventData eventData);

        public delegate void SendEventToGameObject_PlayMakerFSM_GameObject_string_WithArgs(
            Action<PlayMakerFSM, GameObject, string> orig, PlayMakerFSM fromFsm, GameObject target, string fsmEvent);

        public sealed class Params_SendEventToGameObject_PlayMakerFSM_GameObject_string_bool
        {
            public PlayMakerFSM fromFsm;
            public string fsmEvent;
            public bool includeChildren;
            public GameObject target;
        }

        public sealed class Params_SendEventToGameObject_PlayMakerFSM_GameObject_string
        {
            public PlayMakerFSM fromFsm;
            public string fsmEvent;
            public GameObject target;
        }

        public sealed class Params_SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData
        {
            public FsmEventData eventData;
            public PlayMakerFSM fromFsm;
            public string fsmEvent;
            public GameObject target;
        }

        public sealed class Params_SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData
        {
            public FsmEventData eventData;
            public PlayMakerFSM fromFsm;
            public string fsmEvent;
            public bool includeChildren;
            public GameObject target;
        }

        public sealed class Params_DoesTargetImplementsEvent
        {
            public string eventName;
            public FsmEventTarget target;
        }

        public sealed class Params_DoesGameObjectImplementsEvent_GameObject_string
        {
            public string fsmEvent;
            public GameObject go;
        }

        public sealed class Params_DoesGameObjectImplementsEvent_GameObject_string_string
        {
            public string fsmEvent;
            public string fsmName;
            public GameObject go;
        }

        public sealed class Params_DoesFsmImplementsEvent
        {
            public PlayMakerFSM fsm;
            public string fsmEvent;
        }

        public sealed class Params_FindFsmOnGameObject
        {
            public string fsmName;
            public GameObject go;
        }

        public sealed class Params_RefreshValueFromFsmVar
        {
            public Fsm fromFsm;
            public FsmVar fsmVar;
        }

        public sealed class Params_GetValueFromFsmVar
        {
            public Fsm fromFsm;
            public FsmVar fsmVar;
        }

        public sealed class Params_ApplyValueToFsmVar
        {
            public Fsm fromFsm;
            public FsmVar fsmVar;
            public object value;
        }

        public sealed class Params_GetFloatFromObject
        {
            public object _obj;
            public bool fastProcessingIfPossible;
            public VariableType targetType;
        }

        public sealed class Params_ParseValueFromString_string_bool
        {
            public string source;
            public bool useBytes;
        }

        public sealed class Params_ParseValueFromString_string_VariableType
        {
            public string source;
            public VariableType type;
        }

        public sealed class Params_ParseValueFromString_string_Type
        {
            public string source;
            public Type type;
        }

        public sealed class Params_ParseValueFromString_string
        {
            public string source;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_BeforeArgs
            SendEventToGameObject_PlayMakerFSM_GameObject_string_bool
            {
                add
                {
                    HookHandler._beforeSendEventToGameObject_PlayMakerFSM_GameObject_string_bool += value;
                    HookHandler.HookSendEventToGameObject_PlayMakerFSM_GameObject_string_bool();
                }
                remove => HookHandler._beforeSendEventToGameObject_PlayMakerFSM_GameObject_string_bool -= value;
            }

        public static event Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_BeforeArgs
            SendEventToGameObject_PlayMakerFSM_GameObject_string
            {
                add
                {
                    HookHandler._beforeSendEventToGameObject_PlayMakerFSM_GameObject_string += value;
                    HookHandler.HookSendEventToGameObject_PlayMakerFSM_GameObject_string();
                }
                remove => HookHandler._beforeSendEventToGameObject_PlayMakerFSM_GameObject_string -= value;
            }

        public static event Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData_BeforeArgs
            SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData
            {
                add
                {
                    HookHandler._beforeSendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData += value;
                    HookHandler.HookSendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData();
                }
                remove => HookHandler._beforeSendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData -= value;
            }

        public static event Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData_BeforeArgs
            SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData
            {
                add
                {
                    HookHandler._beforeSendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData += value;
                    HookHandler.HookSendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData();
                }
                remove => HookHandler._beforeSendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData -=
                    value;
            }

        public static event Delegates.DoesTargetImplementsEvent_BeforeArgs DoesTargetImplementsEvent
        {
            add
            {
                HookHandler._beforeDoesTargetImplementsEvent += value;
                HookHandler.HookDoesTargetImplementsEvent();
            }
            remove => HookHandler._beforeDoesTargetImplementsEvent -= value;
        }

        public static event Delegates.DoesGameObjectImplementsEvent_GameObject_string_BeforeArgs
            DoesGameObjectImplementsEvent_GameObject_string
            {
                add
                {
                    HookHandler._beforeDoesGameObjectImplementsEvent_GameObject_string += value;
                    HookHandler.HookDoesGameObjectImplementsEvent_GameObject_string();
                }
                remove => HookHandler._beforeDoesGameObjectImplementsEvent_GameObject_string -= value;
            }

        public static event Delegates.DoesGameObjectImplementsEvent_GameObject_string_string_BeforeArgs
            DoesGameObjectImplementsEvent_GameObject_string_string
            {
                add
                {
                    HookHandler._beforeDoesGameObjectImplementsEvent_GameObject_string_string += value;
                    HookHandler.HookDoesGameObjectImplementsEvent_GameObject_string_string();
                }
                remove => HookHandler._beforeDoesGameObjectImplementsEvent_GameObject_string_string -= value;
            }

        public static event Delegates.DoesFsmImplementsEvent_BeforeArgs DoesFsmImplementsEvent
        {
            add
            {
                HookHandler._beforeDoesFsmImplementsEvent += value;
                HookHandler.HookDoesFsmImplementsEvent();
            }
            remove => HookHandler._beforeDoesFsmImplementsEvent -= value;
        }

        public static event Delegates.FindFsmOnGameObject_BeforeArgs FindFsmOnGameObject
        {
            add
            {
                HookHandler._beforeFindFsmOnGameObject += value;
                HookHandler.HookFindFsmOnGameObject();
            }
            remove => HookHandler._beforeFindFsmOnGameObject -= value;
        }

        public static event Delegates.RefreshValueFromFsmVar_BeforeArgs RefreshValueFromFsmVar
        {
            add
            {
                HookHandler._beforeRefreshValueFromFsmVar += value;
                HookHandler.HookRefreshValueFromFsmVar();
            }
            remove => HookHandler._beforeRefreshValueFromFsmVar -= value;
        }

        public static event Delegates.GetValueFromFsmVar_BeforeArgs GetValueFromFsmVar
        {
            add
            {
                HookHandler._beforeGetValueFromFsmVar += value;
                HookHandler.HookGetValueFromFsmVar();
            }
            remove => HookHandler._beforeGetValueFromFsmVar -= value;
        }

        public static event Delegates.ApplyValueToFsmVar_BeforeArgs ApplyValueToFsmVar
        {
            add
            {
                HookHandler._beforeApplyValueToFsmVar += value;
                HookHandler.HookApplyValueToFsmVar();
            }
            remove => HookHandler._beforeApplyValueToFsmVar -= value;
        }

        public static event Delegates.GetFloatFromObject_BeforeArgs GetFloatFromObject
        {
            add
            {
                HookHandler._beforeGetFloatFromObject += value;
                HookHandler.HookGetFloatFromObject();
            }
            remove => HookHandler._beforeGetFloatFromObject -= value;
        }

        public static event Delegates.ParseValueFromString_string_bool_BeforeArgs ParseValueFromString_string_bool
        {
            add
            {
                HookHandler._beforeParseValueFromString_string_bool += value;
                HookHandler.HookParseValueFromString_string_bool();
            }
            remove => HookHandler._beforeParseValueFromString_string_bool -= value;
        }

        public static event Delegates.ParseValueFromString_string_VariableType_BeforeArgs
            ParseValueFromString_string_VariableType
            {
                add
                {
                    HookHandler._beforeParseValueFromString_string_VariableType += value;
                    HookHandler.HookParseValueFromString_string_VariableType();
                }
                remove => HookHandler._beforeParseValueFromString_string_VariableType -= value;
            }

        public static event Delegates.ParseValueFromString_string_Type_BeforeArgs ParseValueFromString_string_Type
        {
            add
            {
                HookHandler._beforeParseValueFromString_string_Type += value;
                HookHandler.HookParseValueFromString_string_Type();
            }
            remove => HookHandler._beforeParseValueFromString_string_Type -= value;
        }

        public static event Delegates.ParseValueFromString_string_BeforeArgs ParseValueFromString_string
        {
            add
            {
                HookHandler._beforeParseValueFromString_string += value;
                HookHandler.HookParseValueFromString_string();
            }
            remove => HookHandler._beforeParseValueFromString_string -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_AfterArgs
            SendEventToGameObject_PlayMakerFSM_GameObject_string_bool
            {
                add
                {
                    HookHandler._afterSendEventToGameObject_PlayMakerFSM_GameObject_string_bool += value;
                    HookHandler.HookSendEventToGameObject_PlayMakerFSM_GameObject_string_bool();
                }
                remove => HookHandler._afterSendEventToGameObject_PlayMakerFSM_GameObject_string_bool -= value;
            }

        public static event Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_AfterArgs
            SendEventToGameObject_PlayMakerFSM_GameObject_string
            {
                add
                {
                    HookHandler._afterSendEventToGameObject_PlayMakerFSM_GameObject_string += value;
                    HookHandler.HookSendEventToGameObject_PlayMakerFSM_GameObject_string();
                }
                remove => HookHandler._afterSendEventToGameObject_PlayMakerFSM_GameObject_string -= value;
            }

        public static event Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData_AfterArgs
            SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData
            {
                add
                {
                    HookHandler._afterSendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData += value;
                    HookHandler.HookSendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData();
                }
                remove => HookHandler._afterSendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData -= value;
            }

        public static event Delegates.SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData_AfterArgs
            SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData
            {
                add
                {
                    HookHandler._afterSendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData += value;
                    HookHandler.HookSendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData();
                }
                remove => HookHandler._afterSendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData -=
                    value;
            }

        public static event Delegates.DoesTargetImplementsEvent_AfterArgs DoesTargetImplementsEvent
        {
            add
            {
                HookHandler._afterDoesTargetImplementsEvent += value;
                HookHandler.HookDoesTargetImplementsEvent();
            }
            remove => HookHandler._afterDoesTargetImplementsEvent -= value;
        }

        public static event Delegates.DoesGameObjectImplementsEvent_GameObject_string_AfterArgs
            DoesGameObjectImplementsEvent_GameObject_string
            {
                add
                {
                    HookHandler._afterDoesGameObjectImplementsEvent_GameObject_string += value;
                    HookHandler.HookDoesGameObjectImplementsEvent_GameObject_string();
                }
                remove => HookHandler._afterDoesGameObjectImplementsEvent_GameObject_string -= value;
            }

        public static event Delegates.DoesGameObjectImplementsEvent_GameObject_string_string_AfterArgs
            DoesGameObjectImplementsEvent_GameObject_string_string
            {
                add
                {
                    HookHandler._afterDoesGameObjectImplementsEvent_GameObject_string_string += value;
                    HookHandler.HookDoesGameObjectImplementsEvent_GameObject_string_string();
                }
                remove => HookHandler._afterDoesGameObjectImplementsEvent_GameObject_string_string -= value;
            }

        public static event Delegates.DoesFsmImplementsEvent_AfterArgs DoesFsmImplementsEvent
        {
            add
            {
                HookHandler._afterDoesFsmImplementsEvent += value;
                HookHandler.HookDoesFsmImplementsEvent();
            }
            remove => HookHandler._afterDoesFsmImplementsEvent -= value;
        }

        public static event Delegates.FindFsmOnGameObject_AfterArgs FindFsmOnGameObject
        {
            add
            {
                HookHandler._afterFindFsmOnGameObject += value;
                HookHandler.HookFindFsmOnGameObject();
            }
            remove => HookHandler._afterFindFsmOnGameObject -= value;
        }

        public static event Delegates.RefreshValueFromFsmVar_AfterArgs RefreshValueFromFsmVar
        {
            add
            {
                HookHandler._afterRefreshValueFromFsmVar += value;
                HookHandler.HookRefreshValueFromFsmVar();
            }
            remove => HookHandler._afterRefreshValueFromFsmVar -= value;
        }

        public static event Delegates.GetValueFromFsmVar_AfterArgs GetValueFromFsmVar
        {
            add
            {
                HookHandler._afterGetValueFromFsmVar += value;
                HookHandler.HookGetValueFromFsmVar();
            }
            remove => HookHandler._afterGetValueFromFsmVar -= value;
        }

        public static event Delegates.ApplyValueToFsmVar_AfterArgs ApplyValueToFsmVar
        {
            add
            {
                HookHandler._afterApplyValueToFsmVar += value;
                HookHandler.HookApplyValueToFsmVar();
            }
            remove => HookHandler._afterApplyValueToFsmVar -= value;
        }

        public static event Delegates.GetFloatFromObject_AfterArgs GetFloatFromObject
        {
            add
            {
                HookHandler._afterGetFloatFromObject += value;
                HookHandler.HookGetFloatFromObject();
            }
            remove => HookHandler._afterGetFloatFromObject -= value;
        }

        public static event Delegates.ParseValueFromString_string_bool_AfterArgs ParseValueFromString_string_bool
        {
            add
            {
                HookHandler._afterParseValueFromString_string_bool += value;
                HookHandler.HookParseValueFromString_string_bool();
            }
            remove => HookHandler._afterParseValueFromString_string_bool -= value;
        }

        public static event Delegates.ParseValueFromString_string_VariableType_AfterArgs
            ParseValueFromString_string_VariableType
            {
                add
                {
                    HookHandler._afterParseValueFromString_string_VariableType += value;
                    HookHandler.HookParseValueFromString_string_VariableType();
                }
                remove => HookHandler._afterParseValueFromString_string_VariableType -= value;
            }

        public static event Delegates.ParseValueFromString_string_Type_AfterArgs ParseValueFromString_string_Type
        {
            add
            {
                HookHandler._afterParseValueFromString_string_Type += value;
                HookHandler.HookParseValueFromString_string_Type();
            }
            remove => HookHandler._afterParseValueFromString_string_Type -= value;
        }

        public static event Delegates.ParseValueFromString_string_AfterArgs ParseValueFromString_string
        {
            add
            {
                HookHandler._afterParseValueFromString_string += value;
                HookHandler.HookParseValueFromString_string();
            }
            remove => HookHandler._afterParseValueFromString_string -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.PlayMakerUtils.hook_SendEventToGameObject_PlayMakerFSM_GameObject_string_bool
            SendEventToGameObject_PlayMakerFSM_GameObject_string_bool
            {
                add => On.PlayMakerUtils.SendEventToGameObject_PlayMakerFSM_GameObject_string_bool += value;
                remove => On.PlayMakerUtils.SendEventToGameObject_PlayMakerFSM_GameObject_string_bool -= value;
            }

        public static event On.PlayMakerUtils.hook_SendEventToGameObject_PlayMakerFSM_GameObject_string
            SendEventToGameObject_PlayMakerFSM_GameObject_string
            {
                add => On.PlayMakerUtils.SendEventToGameObject_PlayMakerFSM_GameObject_string += value;
                remove => On.PlayMakerUtils.SendEventToGameObject_PlayMakerFSM_GameObject_string -= value;
            }

        public static event On.PlayMakerUtils.hook_SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData
            SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData
            {
                add => On.PlayMakerUtils.SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData += value;
                remove => On.PlayMakerUtils.SendEventToGameObject_PlayMakerFSM_GameObject_string_FsmEventData -= value;
            }

        public static event
            On.PlayMakerUtils.hook_SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData
            SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData
            {
                add => On.PlayMakerUtils.SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData +=
                    value;
                remove => On.PlayMakerUtils.SendEventToGameObject_PlayMakerFSM_GameObject_string_bool_FsmEventData -=
                    value;
            }

        public static event On.PlayMakerUtils.hook_DoesTargetImplementsEvent DoesTargetImplementsEvent
        {
            add => On.PlayMakerUtils.DoesTargetImplementsEvent += value;
            remove => On.PlayMakerUtils.DoesTargetImplementsEvent -= value;
        }

        public static event On.PlayMakerUtils.hook_DoesGameObjectImplementsEvent_GameObject_string
            DoesGameObjectImplementsEvent_GameObject_string
            {
                add => On.PlayMakerUtils.DoesGameObjectImplementsEvent_GameObject_string += value;
                remove => On.PlayMakerUtils.DoesGameObjectImplementsEvent_GameObject_string -= value;
            }

        public static event On.PlayMakerUtils.hook_DoesGameObjectImplementsEvent_GameObject_string_string
            DoesGameObjectImplementsEvent_GameObject_string_string
            {
                add => On.PlayMakerUtils.DoesGameObjectImplementsEvent_GameObject_string_string += value;
                remove => On.PlayMakerUtils.DoesGameObjectImplementsEvent_GameObject_string_string -= value;
            }

        public static event On.PlayMakerUtils.hook_DoesFsmImplementsEvent DoesFsmImplementsEvent
        {
            add => On.PlayMakerUtils.DoesFsmImplementsEvent += value;
            remove => On.PlayMakerUtils.DoesFsmImplementsEvent -= value;
        }

        public static event On.PlayMakerUtils.hook_FindFsmOnGameObject FindFsmOnGameObject
        {
            add => On.PlayMakerUtils.FindFsmOnGameObject += value;
            remove => On.PlayMakerUtils.FindFsmOnGameObject -= value;
        }

        public static event On.PlayMakerUtils.hook_RefreshValueFromFsmVar RefreshValueFromFsmVar
        {
            add => On.PlayMakerUtils.RefreshValueFromFsmVar += value;
            remove => On.PlayMakerUtils.RefreshValueFromFsmVar -= value;
        }

        public static event On.PlayMakerUtils.hook_GetValueFromFsmVar GetValueFromFsmVar
        {
            add => On.PlayMakerUtils.GetValueFromFsmVar += value;
            remove => On.PlayMakerUtils.GetValueFromFsmVar -= value;
        }

        public static event On.PlayMakerUtils.hook_ApplyValueToFsmVar ApplyValueToFsmVar
        {
            add => On.PlayMakerUtils.ApplyValueToFsmVar += value;
            remove => On.PlayMakerUtils.ApplyValueToFsmVar -= value;
        }

        public static event On.PlayMakerUtils.hook_GetFloatFromObject GetFloatFromObject
        {
            add => On.PlayMakerUtils.GetFloatFromObject += value;
            remove => On.PlayMakerUtils.GetFloatFromObject -= value;
        }

        public static event On.PlayMakerUtils.hook_ParseValueFromString_string_bool ParseValueFromString_string_bool
        {
            add => On.PlayMakerUtils.ParseValueFromString_string_bool += value;
            remove => On.PlayMakerUtils.ParseValueFromString_string_bool -= value;
        }

        public static event On.PlayMakerUtils.hook_ParseValueFromString_string_VariableType
            ParseValueFromString_string_VariableType
            {
                add => On.PlayMakerUtils.ParseValueFromString_string_VariableType += value;
                remove => On.PlayMakerUtils.ParseValueFromString_string_VariableType -= value;
            }

        public static event On.PlayMakerUtils.hook_ParseValueFromString_string_Type ParseValueFromString_string_Type
        {
            add => On.PlayMakerUtils.ParseValueFromString_string_Type += value;
            remove => On.PlayMakerUtils.ParseValueFromString_string_Type -= value;
        }

        public static event On.PlayMakerUtils.hook_ParseValueFromString_string ParseValueFromString_string
        {
            add => On.PlayMakerUtils.ParseValueFromString_string += value;
            remove => On.PlayMakerUtils.ParseValueFromString_string -= value;
        }
    }
}