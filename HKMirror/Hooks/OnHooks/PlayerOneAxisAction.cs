using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for PlayerOneAxisAction class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPlayerOneAxisAction
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_UserData()
        {
            if (!HookedList.Contains("get_UserData"))
            {
                HookedList.Add("get_UserData");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "get_UserData"), get_UserData);
            }
        }

        internal static event Delegates.get_UserData_BeforeArgs _beforeget_UserData;
        internal static event Delegates.get_UserData_NormalArgs _afterget_UserData;

        private static object get_UserData(Func<PlayerOneAxisAction, object> orig, PlayerOneAxisAction self)
        {
            Delegates.Params_get_UserData @params = new()
            {
                self = self
            };
            _beforeget_UserData?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_UserData != null) retVal = _afterget_UserData.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_UserData()
        {
            if (!HookedList.Contains("set_UserData"))
            {
                HookedList.Add("set_UserData");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "set_UserData"), set_UserData);
            }
        }

        internal static event Delegates.set_UserData_BeforeArgs _beforeset_UserData;
        internal static event Delegates.set_UserData_NormalArgs _afterset_UserData;

        private static void set_UserData(Action<PlayerOneAxisAction, object> orig, PlayerOneAxisAction self,
            object value)
        {
            Delegates.Params_set_UserData @params = new()
            {
                self = self, value = value
            };
            _beforeset_UserData?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_UserData != null) _afterset_UserData.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "Update"), Update);
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(Action<PlayerOneAxisAction, ulong, float> orig, PlayerOneAxisAction self,
            ulong updateTick, float deltaTime)
        {
            Delegates.Params_Update @params = new()
            {
                self = self, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, updateTick, deltaTime);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookProcessActionUpdate()
        {
            if (!HookedList.Contains("ProcessActionUpdate"))
            {
                HookedList.Add("ProcessActionUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "ProcessActionUpdate"),
                    ProcessActionUpdate);
            }
        }

        internal static event Delegates.ProcessActionUpdate_BeforeArgs _beforeProcessActionUpdate;
        internal static event Delegates.ProcessActionUpdate_NormalArgs _afterProcessActionUpdate;

        private static void ProcessActionUpdate(Action<PlayerOneAxisAction, PlayerAction> orig,
            PlayerOneAxisAction self, PlayerAction action)
        {
            Delegates.Params_ProcessActionUpdate @params = new()
            {
                self = self, action = action
            };
            _beforeProcessActionUpdate?.Invoke(@params);
            self = @params.self;
            action = @params.action;
            orig(self, action);
            if (_afterProcessActionUpdate != null) _afterProcessActionUpdate.Invoke(@params);
        }

        internal static void Hookget_LowerDeadZone()
        {
            if (!HookedList.Contains("get_LowerDeadZone"))
            {
                HookedList.Add("get_LowerDeadZone");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "get_LowerDeadZone"),
                    get_LowerDeadZone);
            }
        }

        internal static event Delegates.get_LowerDeadZone_BeforeArgs _beforeget_LowerDeadZone;
        internal static event Delegates.get_LowerDeadZone_NormalArgs _afterget_LowerDeadZone;

        private static float get_LowerDeadZone(Func<PlayerOneAxisAction, float> orig, PlayerOneAxisAction self)
        {
            Delegates.Params_get_LowerDeadZone @params = new()
            {
                self = self
            };
            _beforeget_LowerDeadZone?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LowerDeadZone != null) retVal = _afterget_LowerDeadZone.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_LowerDeadZone()
        {
            if (!HookedList.Contains("set_LowerDeadZone"))
            {
                HookedList.Add("set_LowerDeadZone");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "set_LowerDeadZone"),
                    set_LowerDeadZone);
            }
        }

        internal static event Delegates.set_LowerDeadZone_BeforeArgs _beforeset_LowerDeadZone;
        internal static event Delegates.set_LowerDeadZone_NormalArgs _afterset_LowerDeadZone;

        private static void set_LowerDeadZone(Action<PlayerOneAxisAction, float> orig, PlayerOneAxisAction self,
            float value)
        {
            Delegates.Params_set_LowerDeadZone @params = new()
            {
                self = self, value = value
            };
            _beforeset_LowerDeadZone?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_LowerDeadZone != null) _afterset_LowerDeadZone.Invoke(@params);
        }

        internal static void Hookget_UpperDeadZone()
        {
            if (!HookedList.Contains("get_UpperDeadZone"))
            {
                HookedList.Add("get_UpperDeadZone");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "get_UpperDeadZone"),
                    get_UpperDeadZone);
            }
        }

        internal static event Delegates.get_UpperDeadZone_BeforeArgs _beforeget_UpperDeadZone;
        internal static event Delegates.get_UpperDeadZone_NormalArgs _afterget_UpperDeadZone;

        private static float get_UpperDeadZone(Func<PlayerOneAxisAction, float> orig, PlayerOneAxisAction self)
        {
            Delegates.Params_get_UpperDeadZone @params = new()
            {
                self = self
            };
            _beforeget_UpperDeadZone?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_UpperDeadZone != null) retVal = _afterget_UpperDeadZone.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_UpperDeadZone()
        {
            if (!HookedList.Contains("set_UpperDeadZone"))
            {
                HookedList.Add("set_UpperDeadZone");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "set_UpperDeadZone"),
                    set_UpperDeadZone);
            }
        }

        internal static event Delegates.set_UpperDeadZone_BeforeArgs _beforeset_UpperDeadZone;
        internal static event Delegates.set_UpperDeadZone_NormalArgs _afterset_UpperDeadZone;

        private static void set_UpperDeadZone(Action<PlayerOneAxisAction, float> orig, PlayerOneAxisAction self,
            float value)
        {
            Delegates.Params_set_UpperDeadZone @params = new()
            {
                self = self, value = value
            };
            _beforeset_UpperDeadZone?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_UpperDeadZone != null) _afterset_UpperDeadZone.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_LowerDeadZone_BeforeArgs(Params_get_LowerDeadZone args);

        public delegate float get_LowerDeadZone_NormalArgs(Params_get_LowerDeadZone args);

        public delegate void get_UpperDeadZone_BeforeArgs(Params_get_UpperDeadZone args);

        public delegate float get_UpperDeadZone_NormalArgs(Params_get_UpperDeadZone args);

        public delegate void get_UserData_BeforeArgs(Params_get_UserData args);

        public delegate object get_UserData_NormalArgs(Params_get_UserData args);

        public delegate void ProcessActionUpdate_BeforeArgs(Params_ProcessActionUpdate args);

        public delegate void ProcessActionUpdate_NormalArgs(Params_ProcessActionUpdate args);

        public delegate void set_LowerDeadZone_BeforeArgs(Params_set_LowerDeadZone args);

        public delegate void set_LowerDeadZone_NormalArgs(Params_set_LowerDeadZone args);

        public delegate void set_UpperDeadZone_BeforeArgs(Params_set_UpperDeadZone args);

        public delegate void set_UpperDeadZone_NormalArgs(Params_set_UpperDeadZone args);

        public delegate void set_UserData_BeforeArgs(Params_set_UserData args);

        public delegate void set_UserData_NormalArgs(Params_set_UserData args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_get_UserData
        {
            public PlayerOneAxisAction self;
        }

        public sealed class Params_set_UserData
        {
            public PlayerOneAxisAction self;
            public object value;
        }

        public sealed class Params_Update
        {
            public float deltaTime;
            public PlayerOneAxisAction self;
            public ulong updateTick;
        }

        public sealed class Params_ProcessActionUpdate
        {
            public PlayerAction action;
            public PlayerOneAxisAction self;
        }

        public sealed class Params_get_LowerDeadZone
        {
            public PlayerOneAxisAction self;
        }

        public sealed class Params_set_LowerDeadZone
        {
            public PlayerOneAxisAction self;
            public float value;
        }

        public sealed class Params_get_UpperDeadZone
        {
            public PlayerOneAxisAction self;
        }

        public sealed class Params_set_UpperDeadZone
        {
            public PlayerOneAxisAction self;
            public float value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_UserData_BeforeArgs get_UserData
        {
            add
            {
                HookHandler._beforeget_UserData += value;
                HookHandler.Hookget_UserData();
            }
            remove => HookHandler._beforeget_UserData -= value;
        }

        public static event Delegates.set_UserData_BeforeArgs set_UserData
        {
            add
            {
                HookHandler._beforeset_UserData += value;
                HookHandler.Hookset_UserData();
            }
            remove => HookHandler._beforeset_UserData -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.ProcessActionUpdate_BeforeArgs ProcessActionUpdate
        {
            add
            {
                HookHandler._beforeProcessActionUpdate += value;
                HookHandler.HookProcessActionUpdate();
            }
            remove => HookHandler._beforeProcessActionUpdate -= value;
        }

        public static event Delegates.get_LowerDeadZone_BeforeArgs get_LowerDeadZone
        {
            add
            {
                HookHandler._beforeget_LowerDeadZone += value;
                HookHandler.Hookget_LowerDeadZone();
            }
            remove => HookHandler._beforeget_LowerDeadZone -= value;
        }

        public static event Delegates.set_LowerDeadZone_BeforeArgs set_LowerDeadZone
        {
            add
            {
                HookHandler._beforeset_LowerDeadZone += value;
                HookHandler.Hookset_LowerDeadZone();
            }
            remove => HookHandler._beforeset_LowerDeadZone -= value;
        }

        public static event Delegates.get_UpperDeadZone_BeforeArgs get_UpperDeadZone
        {
            add
            {
                HookHandler._beforeget_UpperDeadZone += value;
                HookHandler.Hookget_UpperDeadZone();
            }
            remove => HookHandler._beforeget_UpperDeadZone -= value;
        }

        public static event Delegates.set_UpperDeadZone_BeforeArgs set_UpperDeadZone
        {
            add
            {
                HookHandler._beforeset_UpperDeadZone += value;
                HookHandler.Hookset_UpperDeadZone();
            }
            remove => HookHandler._beforeset_UpperDeadZone -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_UserData_NormalArgs get_UserData
        {
            add
            {
                HookHandler._afterget_UserData += value;
                HookHandler.Hookget_UserData();
            }
            remove => HookHandler._afterget_UserData -= value;
        }

        public static event Delegates.set_UserData_NormalArgs set_UserData
        {
            add
            {
                HookHandler._afterset_UserData += value;
                HookHandler.Hookset_UserData();
            }
            remove => HookHandler._afterset_UserData -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.ProcessActionUpdate_NormalArgs ProcessActionUpdate
        {
            add
            {
                HookHandler._afterProcessActionUpdate += value;
                HookHandler.HookProcessActionUpdate();
            }
            remove => HookHandler._afterProcessActionUpdate -= value;
        }

        public static event Delegates.get_LowerDeadZone_NormalArgs get_LowerDeadZone
        {
            add
            {
                HookHandler._afterget_LowerDeadZone += value;
                HookHandler.Hookget_LowerDeadZone();
            }
            remove => HookHandler._afterget_LowerDeadZone -= value;
        }

        public static event Delegates.set_LowerDeadZone_NormalArgs set_LowerDeadZone
        {
            add
            {
                HookHandler._afterset_LowerDeadZone += value;
                HookHandler.Hookset_LowerDeadZone();
            }
            remove => HookHandler._afterset_LowerDeadZone -= value;
        }

        public static event Delegates.get_UpperDeadZone_NormalArgs get_UpperDeadZone
        {
            add
            {
                HookHandler._afterget_UpperDeadZone += value;
                HookHandler.Hookget_UpperDeadZone();
            }
            remove => HookHandler._afterget_UpperDeadZone -= value;
        }

        public static event Delegates.set_UpperDeadZone_NormalArgs set_UpperDeadZone
        {
            add
            {
                HookHandler._afterset_UpperDeadZone += value;
                HookHandler.Hookset_UpperDeadZone();
            }
            remove => HookHandler._afterset_UpperDeadZone -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_UserData_NormalArgs get_UserData
        {
            add => HookEndpointManager.Add<Delegates.get_UserData_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "get_UserData"), value);
            remove => HookEndpointManager.Remove<Delegates.get_UserData_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "get_UserData"), value);
        }

        public static event Delegates.set_UserData_NormalArgs set_UserData
        {
            add => HookEndpointManager.Add<Delegates.set_UserData_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "set_UserData"), value);
            remove => HookEndpointManager.Remove<Delegates.set_UserData_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "set_UserData"), value);
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add => HookEndpointManager.Add<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "Update"), value);
            remove => HookEndpointManager.Remove<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "Update"), value);
        }

        public static event Delegates.ProcessActionUpdate_NormalArgs ProcessActionUpdate
        {
            add => HookEndpointManager.Add<Delegates.ProcessActionUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "ProcessActionUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.ProcessActionUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "ProcessActionUpdate"), value);
        }

        public static event Delegates.get_LowerDeadZone_NormalArgs get_LowerDeadZone
        {
            add => HookEndpointManager.Add<Delegates.get_LowerDeadZone_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "get_LowerDeadZone"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LowerDeadZone_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "get_LowerDeadZone"), value);
        }

        public static event Delegates.set_LowerDeadZone_NormalArgs set_LowerDeadZone
        {
            add => HookEndpointManager.Add<Delegates.set_LowerDeadZone_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "set_LowerDeadZone"), value);
            remove => HookEndpointManager.Remove<Delegates.set_LowerDeadZone_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "set_LowerDeadZone"), value);
        }

        public static event Delegates.get_UpperDeadZone_NormalArgs get_UpperDeadZone
        {
            add => HookEndpointManager.Add<Delegates.get_UpperDeadZone_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "get_UpperDeadZone"), value);
            remove => HookEndpointManager.Remove<Delegates.get_UpperDeadZone_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "get_UpperDeadZone"), value);
        }

        public static event Delegates.set_UpperDeadZone_NormalArgs set_UpperDeadZone
        {
            add => HookEndpointManager.Add<Delegates.set_UpperDeadZone_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "set_UpperDeadZone"), value);
            remove => HookEndpointManager.Remove<Delegates.set_UpperDeadZone_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerOneAxisAction), "set_UpperDeadZone"), value);
        }
    }
}