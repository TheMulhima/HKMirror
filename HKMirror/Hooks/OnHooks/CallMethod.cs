using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for CallMethod class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCallMethod
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CallMethod), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<CallMethod> orig, CallMethod self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CallMethod), "OnEnter"), OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_NormalArgs _afterOnEnter;

        private static void OnEnter(Action<CallMethod> orig, CallMethod self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            _beforeOnEnter?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnter != null) _afterOnEnter.Invoke(@params);
        }

        internal static void HookOnUpdate()
        {
            if (!HookedList.Contains("OnUpdate"))
            {
                HookedList.Add("OnUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CallMethod), "OnUpdate"), OnUpdate);
            }
        }

        internal static event Delegates.OnUpdate_BeforeArgs _beforeOnUpdate;
        internal static event Delegates.OnUpdate_NormalArgs _afterOnUpdate;

        private static void OnUpdate(Action<CallMethod> orig, CallMethod self)
        {
            Delegates.Params_OnUpdate @params = new()
            {
                self = self
            };
            _beforeOnUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnUpdate != null) _afterOnUpdate.Invoke(@params);
        }

        internal static void HookDoMethodCall()
        {
            if (!HookedList.Contains("DoMethodCall"))
            {
                HookedList.Add("DoMethodCall");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CallMethod), "DoMethodCall"), DoMethodCall);
            }
        }

        internal static event Delegates.DoMethodCall_BeforeArgs _beforeDoMethodCall;
        internal static event Delegates.DoMethodCall_NormalArgs _afterDoMethodCall;

        private static void DoMethodCall(Action<CallMethod> orig, CallMethod self)
        {
            Delegates.Params_DoMethodCall @params = new()
            {
                self = self
            };
            _beforeDoMethodCall?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoMethodCall != null) _afterDoMethodCall.Invoke(@params);
        }

        internal static void HookNeedToUpdateCache()
        {
            if (!HookedList.Contains("NeedToUpdateCache"))
            {
                HookedList.Add("NeedToUpdateCache");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CallMethod), "NeedToUpdateCache"), NeedToUpdateCache);
            }
        }

        internal static event Delegates.NeedToUpdateCache_BeforeArgs _beforeNeedToUpdateCache;
        internal static event Delegates.NeedToUpdateCache_NormalArgs _afterNeedToUpdateCache;

        private static bool NeedToUpdateCache(Func<CallMethod, bool> orig, CallMethod self)
        {
            Delegates.Params_NeedToUpdateCache @params = new()
            {
                self = self
            };
            _beforeNeedToUpdateCache?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterNeedToUpdateCache != null) retVal = _afterNeedToUpdateCache.Invoke(@params);
            return retVal;
        }

        internal static void HookClearCache()
        {
            if (!HookedList.Contains("ClearCache"))
            {
                HookedList.Add("ClearCache");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CallMethod), "ClearCache"), ClearCache);
            }
        }

        internal static event Delegates.ClearCache_BeforeArgs _beforeClearCache;
        internal static event Delegates.ClearCache_NormalArgs _afterClearCache;

        private static void ClearCache(Action<CallMethod> orig, CallMethod self)
        {
            Delegates.Params_ClearCache @params = new()
            {
                self = self
            };
            _beforeClearCache?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClearCache != null) _afterClearCache.Invoke(@params);
        }

        internal static void HookDoCache()
        {
            if (!HookedList.Contains("DoCache"))
            {
                HookedList.Add("DoCache");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CallMethod), "DoCache"), DoCache);
            }
        }

        internal static event Delegates.DoCache_BeforeArgs _beforeDoCache;
        internal static event Delegates.DoCache_NormalArgs _afterDoCache;

        private static bool DoCache(Func<CallMethod, bool> orig, CallMethod self)
        {
            Delegates.Params_DoCache @params = new()
            {
                self = self
            };
            _beforeDoCache?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterDoCache != null) retVal = _afterDoCache.Invoke(@params);
            return retVal;
        }

        internal static void HookErrorCheck()
        {
            if (!HookedList.Contains("ErrorCheck"))
            {
                HookedList.Add("ErrorCheck");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CallMethod), "ErrorCheck"), ErrorCheck);
            }
        }

        internal static event Delegates.ErrorCheck_BeforeArgs _beforeErrorCheck;
        internal static event Delegates.ErrorCheck_NormalArgs _afterErrorCheck;

        private static string ErrorCheck(Func<CallMethod, string> orig, CallMethod self)
        {
            Delegates.Params_ErrorCheck @params = new()
            {
                self = self
            };
            _beforeErrorCheck?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterErrorCheck != null) retVal = _afterErrorCheck.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ClearCache_BeforeArgs(Params_ClearCache args);

        public delegate void ClearCache_NormalArgs(Params_ClearCache args);

        public delegate void DoCache_BeforeArgs(Params_DoCache args);

        public delegate bool DoCache_NormalArgs(Params_DoCache args);

        public delegate void DoMethodCall_BeforeArgs(Params_DoMethodCall args);

        public delegate void DoMethodCall_NormalArgs(Params_DoMethodCall args);

        public delegate void ErrorCheck_BeforeArgs(Params_ErrorCheck args);

        public delegate string ErrorCheck_NormalArgs(Params_ErrorCheck args);

        public delegate void NeedToUpdateCache_BeforeArgs(Params_NeedToUpdateCache args);

        public delegate bool NeedToUpdateCache_NormalArgs(Params_NeedToUpdateCache args);

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_NormalArgs(Params_OnEnter args);

        public delegate void OnUpdate_BeforeArgs(Params_OnUpdate args);

        public delegate void OnUpdate_NormalArgs(Params_OnUpdate args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public sealed class Params_Reset
        {
            public CallMethod self;
        }

        public sealed class Params_OnEnter
        {
            public CallMethod self;
        }

        public sealed class Params_OnUpdate
        {
            public CallMethod self;
        }

        public sealed class Params_DoMethodCall
        {
            public CallMethod self;
        }

        public sealed class Params_NeedToUpdateCache
        {
            public CallMethod self;
        }

        public sealed class Params_ClearCache
        {
            public CallMethod self;
        }

        public sealed class Params_DoCache
        {
            public CallMethod self;
        }

        public sealed class Params_ErrorCheck
        {
            public CallMethod self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.OnUpdate_BeforeArgs OnUpdate
        {
            add
            {
                HookHandler._beforeOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._beforeOnUpdate -= value;
        }

        public static event Delegates.DoMethodCall_BeforeArgs DoMethodCall
        {
            add
            {
                HookHandler._beforeDoMethodCall += value;
                HookHandler.HookDoMethodCall();
            }
            remove => HookHandler._beforeDoMethodCall -= value;
        }

        public static event Delegates.NeedToUpdateCache_BeforeArgs NeedToUpdateCache
        {
            add
            {
                HookHandler._beforeNeedToUpdateCache += value;
                HookHandler.HookNeedToUpdateCache();
            }
            remove => HookHandler._beforeNeedToUpdateCache -= value;
        }

        public static event Delegates.ClearCache_BeforeArgs ClearCache
        {
            add
            {
                HookHandler._beforeClearCache += value;
                HookHandler.HookClearCache();
            }
            remove => HookHandler._beforeClearCache -= value;
        }

        public static event Delegates.DoCache_BeforeArgs DoCache
        {
            add
            {
                HookHandler._beforeDoCache += value;
                HookHandler.HookDoCache();
            }
            remove => HookHandler._beforeDoCache -= value;
        }

        public static event Delegates.ErrorCheck_BeforeArgs ErrorCheck
        {
            add
            {
                HookHandler._beforeErrorCheck += value;
                HookHandler.HookErrorCheck();
            }
            remove => HookHandler._beforeErrorCheck -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.OnUpdate_NormalArgs OnUpdate
        {
            add
            {
                HookHandler._afterOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._afterOnUpdate -= value;
        }

        public static event Delegates.DoMethodCall_NormalArgs DoMethodCall
        {
            add
            {
                HookHandler._afterDoMethodCall += value;
                HookHandler.HookDoMethodCall();
            }
            remove => HookHandler._afterDoMethodCall -= value;
        }

        public static event Delegates.NeedToUpdateCache_NormalArgs NeedToUpdateCache
        {
            add
            {
                HookHandler._afterNeedToUpdateCache += value;
                HookHandler.HookNeedToUpdateCache();
            }
            remove => HookHandler._afterNeedToUpdateCache -= value;
        }

        public static event Delegates.ClearCache_NormalArgs ClearCache
        {
            add
            {
                HookHandler._afterClearCache += value;
                HookHandler.HookClearCache();
            }
            remove => HookHandler._afterClearCache -= value;
        }

        public static event Delegates.DoCache_NormalArgs DoCache
        {
            add
            {
                HookHandler._afterDoCache += value;
                HookHandler.HookDoCache();
            }
            remove => HookHandler._afterDoCache -= value;
        }

        public static event Delegates.ErrorCheck_NormalArgs ErrorCheck
        {
            add
            {
                HookHandler._afterErrorCheck += value;
                HookHandler.HookErrorCheck();
            }
            remove => HookHandler._afterErrorCheck -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CallMethod), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CallMethod), "Reset"), value);
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CallMethod), "OnEnter"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CallMethod), "OnEnter"), value);
        }

        public static event Delegates.OnUpdate_NormalArgs OnUpdate
        {
            add => HookEndpointManager.Add<Delegates.OnUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CallMethod), "OnUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.OnUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CallMethod), "OnUpdate"), value);
        }

        public static event Delegates.DoMethodCall_NormalArgs DoMethodCall
        {
            add => HookEndpointManager.Add<Delegates.DoMethodCall_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CallMethod), "DoMethodCall"), value);
            remove => HookEndpointManager.Remove<Delegates.DoMethodCall_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CallMethod), "DoMethodCall"), value);
        }

        public static event Delegates.NeedToUpdateCache_NormalArgs NeedToUpdateCache
        {
            add => HookEndpointManager.Add<Delegates.NeedToUpdateCache_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CallMethod), "NeedToUpdateCache"), value);
            remove => HookEndpointManager.Remove<Delegates.NeedToUpdateCache_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CallMethod), "NeedToUpdateCache"), value);
        }

        public static event Delegates.ClearCache_NormalArgs ClearCache
        {
            add => HookEndpointManager.Add<Delegates.ClearCache_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CallMethod), "ClearCache"), value);
            remove => HookEndpointManager.Remove<Delegates.ClearCache_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CallMethod), "ClearCache"), value);
        }

        public static event Delegates.DoCache_NormalArgs DoCache
        {
            add => HookEndpointManager.Add<Delegates.DoCache_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CallMethod), "DoCache"), value);
            remove => HookEndpointManager.Remove<Delegates.DoCache_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CallMethod), "DoCache"), value);
        }

        public static event Delegates.ErrorCheck_NormalArgs ErrorCheck
        {
            add => HookEndpointManager.Add<Delegates.ErrorCheck_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CallMethod), "ErrorCheck"), value);
            remove => HookEndpointManager.Remove<Delegates.ErrorCheck_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CallMethod), "ErrorCheck"), value);
        }
    }
}