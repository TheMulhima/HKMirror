using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TextContainer class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTextContainer
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_hasChanged()
        {
            if (!HookedList.Contains("get_hasChanged"))
            {
                HookedList.Add("get_hasChanged");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_hasChanged"), get_hasChanged);
            }
        }

        internal static event Delegates.get_hasChanged_BeforeArgs _beforeget_hasChanged;
        internal static event Delegates.get_hasChanged_NormalArgs _afterget_hasChanged;

        private static bool get_hasChanged(Func<TextContainer, bool> orig, TextContainer self)
        {
            Delegates.Params_get_hasChanged @params = new()
            {
                self = self
            };
            _beforeget_hasChanged?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_hasChanged != null) retVal = _afterget_hasChanged.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_hasChanged()
        {
            if (!HookedList.Contains("set_hasChanged"))
            {
                HookedList.Add("set_hasChanged");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_hasChanged"), set_hasChanged);
            }
        }

        internal static event Delegates.set_hasChanged_BeforeArgs _beforeset_hasChanged;
        internal static event Delegates.set_hasChanged_NormalArgs _afterset_hasChanged;

        private static void set_hasChanged(Action<TextContainer, bool> orig, TextContainer self, bool value)
        {
            Delegates.Params_set_hasChanged @params = new()
            {
                self = self, value = value
            };
            _beforeset_hasChanged?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_hasChanged != null) _afterset_hasChanged.Invoke(@params);
        }

        internal static void Hookget_pivot()
        {
            if (!HookedList.Contains("get_pivot"))
            {
                HookedList.Add("get_pivot");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_pivot"), get_pivot);
            }
        }

        internal static event Delegates.get_pivot_BeforeArgs _beforeget_pivot;
        internal static event Delegates.get_pivot_NormalArgs _afterget_pivot;

        private static Vector2 get_pivot(Func<TextContainer, Vector2> orig, TextContainer self)
        {
            Delegates.Params_get_pivot @params = new()
            {
                self = self
            };
            _beforeget_pivot?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_pivot != null) retVal = _afterget_pivot.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_pivot()
        {
            if (!HookedList.Contains("set_pivot"))
            {
                HookedList.Add("set_pivot");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_pivot"), set_pivot);
            }
        }

        internal static event Delegates.set_pivot_BeforeArgs _beforeset_pivot;
        internal static event Delegates.set_pivot_NormalArgs _afterset_pivot;

        private static void set_pivot(Action<TextContainer, Vector2> orig, TextContainer self, Vector2 value)
        {
            Delegates.Params_set_pivot @params = new()
            {
                self = self, value = value
            };
            _beforeset_pivot?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_pivot != null) _afterset_pivot.Invoke(@params);
        }

        internal static void Hookget_anchorPosition()
        {
            if (!HookedList.Contains("get_anchorPosition"))
            {
                HookedList.Add("get_anchorPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_anchorPosition"),
                    get_anchorPosition);
            }
        }

        internal static event Delegates.get_anchorPosition_BeforeArgs _beforeget_anchorPosition;
        internal static event Delegates.get_anchorPosition_NormalArgs _afterget_anchorPosition;

        private static TextContainerAnchors get_anchorPosition(Func<TextContainer, TextContainerAnchors> orig,
            TextContainer self)
        {
            Delegates.Params_get_anchorPosition @params = new()
            {
                self = self
            };
            _beforeget_anchorPosition?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_anchorPosition != null) retVal = _afterget_anchorPosition.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_anchorPosition()
        {
            if (!HookedList.Contains("set_anchorPosition"))
            {
                HookedList.Add("set_anchorPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_anchorPosition"),
                    set_anchorPosition);
            }
        }

        internal static event Delegates.set_anchorPosition_BeforeArgs _beforeset_anchorPosition;
        internal static event Delegates.set_anchorPosition_NormalArgs _afterset_anchorPosition;

        private static void set_anchorPosition(Action<TextContainer, TextContainerAnchors> orig, TextContainer self,
            TextContainerAnchors value)
        {
            Delegates.Params_set_anchorPosition @params = new()
            {
                self = self, value = value
            };
            _beforeset_anchorPosition?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_anchorPosition != null) _afterset_anchorPosition.Invoke(@params);
        }

        internal static void Hookget_rect()
        {
            if (!HookedList.Contains("get_rect"))
            {
                HookedList.Add("get_rect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_rect"), get_rect);
            }
        }

        internal static event Delegates.get_rect_BeforeArgs _beforeget_rect;
        internal static event Delegates.get_rect_NormalArgs _afterget_rect;

        private static Rect get_rect(Func<TextContainer, Rect> orig, TextContainer self)
        {
            Delegates.Params_get_rect @params = new()
            {
                self = self
            };
            _beforeget_rect?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_rect != null) retVal = _afterget_rect.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_rect()
        {
            if (!HookedList.Contains("set_rect"))
            {
                HookedList.Add("set_rect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_rect"), set_rect);
            }
        }

        internal static event Delegates.set_rect_BeforeArgs _beforeset_rect;
        internal static event Delegates.set_rect_NormalArgs _afterset_rect;

        private static void set_rect(Action<TextContainer, Rect> orig, TextContainer self, Rect value)
        {
            Delegates.Params_set_rect @params = new()
            {
                self = self, value = value
            };
            _beforeset_rect?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_rect != null) _afterset_rect.Invoke(@params);
        }

        internal static void Hookget_size()
        {
            if (!HookedList.Contains("get_size"))
            {
                HookedList.Add("get_size");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_size"), get_size);
            }
        }

        internal static event Delegates.get_size_BeforeArgs _beforeget_size;
        internal static event Delegates.get_size_NormalArgs _afterget_size;

        private static Vector2 get_size(Func<TextContainer, Vector2> orig, TextContainer self)
        {
            Delegates.Params_get_size @params = new()
            {
                self = self
            };
            _beforeget_size?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_size != null) retVal = _afterget_size.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_size()
        {
            if (!HookedList.Contains("set_size"))
            {
                HookedList.Add("set_size");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_size"), set_size);
            }
        }

        internal static event Delegates.set_size_BeforeArgs _beforeset_size;
        internal static event Delegates.set_size_NormalArgs _afterset_size;

        private static void set_size(Action<TextContainer, Vector2> orig, TextContainer self, Vector2 value)
        {
            Delegates.Params_set_size @params = new()
            {
                self = self, value = value
            };
            _beforeset_size?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_size != null) _afterset_size.Invoke(@params);
        }

        internal static void Hookget_width()
        {
            if (!HookedList.Contains("get_width"))
            {
                HookedList.Add("get_width");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_width"), get_width);
            }
        }

        internal static event Delegates.get_width_BeforeArgs _beforeget_width;
        internal static event Delegates.get_width_NormalArgs _afterget_width;

        private static float get_width(Func<TextContainer, float> orig, TextContainer self)
        {
            Delegates.Params_get_width @params = new()
            {
                self = self
            };
            _beforeget_width?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_width != null) retVal = _afterget_width.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_width()
        {
            if (!HookedList.Contains("set_width"))
            {
                HookedList.Add("set_width");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_width"), set_width);
            }
        }

        internal static event Delegates.set_width_BeforeArgs _beforeset_width;
        internal static event Delegates.set_width_NormalArgs _afterset_width;

        private static void set_width(Action<TextContainer, float> orig, TextContainer self, float value)
        {
            Delegates.Params_set_width @params = new()
            {
                self = self, value = value
            };
            _beforeset_width?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_width != null) _afterset_width.Invoke(@params);
        }

        internal static void Hookget_height()
        {
            if (!HookedList.Contains("get_height"))
            {
                HookedList.Add("get_height");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_height"), get_height);
            }
        }

        internal static event Delegates.get_height_BeforeArgs _beforeget_height;
        internal static event Delegates.get_height_NormalArgs _afterget_height;

        private static float get_height(Func<TextContainer, float> orig, TextContainer self)
        {
            Delegates.Params_get_height @params = new()
            {
                self = self
            };
            _beforeget_height?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_height != null) retVal = _afterget_height.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_height()
        {
            if (!HookedList.Contains("set_height"))
            {
                HookedList.Add("set_height");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_height"), set_height);
            }
        }

        internal static event Delegates.set_height_BeforeArgs _beforeset_height;
        internal static event Delegates.set_height_NormalArgs _afterset_height;

        private static void set_height(Action<TextContainer, float> orig, TextContainer self, float value)
        {
            Delegates.Params_set_height @params = new()
            {
                self = self, value = value
            };
            _beforeset_height?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_height != null) _afterset_height.Invoke(@params);
        }

        internal static void Hookget_isDefaultWidth()
        {
            if (!HookedList.Contains("get_isDefaultWidth"))
            {
                HookedList.Add("get_isDefaultWidth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_isDefaultWidth"),
                    get_isDefaultWidth);
            }
        }

        internal static event Delegates.get_isDefaultWidth_BeforeArgs _beforeget_isDefaultWidth;
        internal static event Delegates.get_isDefaultWidth_NormalArgs _afterget_isDefaultWidth;

        private static bool get_isDefaultWidth(Func<TextContainer, bool> orig, TextContainer self)
        {
            Delegates.Params_get_isDefaultWidth @params = new()
            {
                self = self
            };
            _beforeget_isDefaultWidth?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_isDefaultWidth != null) retVal = _afterget_isDefaultWidth.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_isDefaultHeight()
        {
            if (!HookedList.Contains("get_isDefaultHeight"))
            {
                HookedList.Add("get_isDefaultHeight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_isDefaultHeight"),
                    get_isDefaultHeight);
            }
        }

        internal static event Delegates.get_isDefaultHeight_BeforeArgs _beforeget_isDefaultHeight;
        internal static event Delegates.get_isDefaultHeight_NormalArgs _afterget_isDefaultHeight;

        private static bool get_isDefaultHeight(Func<TextContainer, bool> orig, TextContainer self)
        {
            Delegates.Params_get_isDefaultHeight @params = new()
            {
                self = self
            };
            _beforeget_isDefaultHeight?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_isDefaultHeight != null) retVal = _afterget_isDefaultHeight.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_isAutoFitting()
        {
            if (!HookedList.Contains("get_isAutoFitting"))
            {
                HookedList.Add("get_isAutoFitting");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_isAutoFitting"), get_isAutoFitting);
            }
        }

        internal static event Delegates.get_isAutoFitting_BeforeArgs _beforeget_isAutoFitting;
        internal static event Delegates.get_isAutoFitting_NormalArgs _afterget_isAutoFitting;

        private static bool get_isAutoFitting(Func<TextContainer, bool> orig, TextContainer self)
        {
            Delegates.Params_get_isAutoFitting @params = new()
            {
                self = self
            };
            _beforeget_isAutoFitting?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_isAutoFitting != null) retVal = _afterget_isAutoFitting.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_isAutoFitting()
        {
            if (!HookedList.Contains("set_isAutoFitting"))
            {
                HookedList.Add("set_isAutoFitting");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_isAutoFitting"), set_isAutoFitting);
            }
        }

        internal static event Delegates.set_isAutoFitting_BeforeArgs _beforeset_isAutoFitting;
        internal static event Delegates.set_isAutoFitting_NormalArgs _afterset_isAutoFitting;

        private static void set_isAutoFitting(Action<TextContainer, bool> orig, TextContainer self, bool value)
        {
            Delegates.Params_set_isAutoFitting @params = new()
            {
                self = self, value = value
            };
            _beforeset_isAutoFitting?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_isAutoFitting != null) _afterset_isAutoFitting.Invoke(@params);
        }

        internal static void Hookget_corners()
        {
            if (!HookedList.Contains("get_corners"))
            {
                HookedList.Add("get_corners");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_corners"), get_corners);
            }
        }

        internal static event Delegates.get_corners_BeforeArgs _beforeget_corners;
        internal static event Delegates.get_corners_NormalArgs _afterget_corners;

        private static Vector3[] get_corners(Func<TextContainer, Vector3[]> orig, TextContainer self)
        {
            Delegates.Params_get_corners @params = new()
            {
                self = self
            };
            _beforeget_corners?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_corners != null) retVal = _afterget_corners.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_worldCorners()
        {
            if (!HookedList.Contains("get_worldCorners"))
            {
                HookedList.Add("get_worldCorners");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_worldCorners"), get_worldCorners);
            }
        }

        internal static event Delegates.get_worldCorners_BeforeArgs _beforeget_worldCorners;
        internal static event Delegates.get_worldCorners_NormalArgs _afterget_worldCorners;

        private static Vector3[] get_worldCorners(Func<TextContainer, Vector3[]> orig, TextContainer self)
        {
            Delegates.Params_get_worldCorners @params = new()
            {
                self = self
            };
            _beforeget_worldCorners?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_worldCorners != null) retVal = _afterget_worldCorners.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_margins()
        {
            if (!HookedList.Contains("get_margins"))
            {
                HookedList.Add("get_margins");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_margins"), get_margins);
            }
        }

        internal static event Delegates.get_margins_BeforeArgs _beforeget_margins;
        internal static event Delegates.get_margins_NormalArgs _afterget_margins;

        private static Vector4 get_margins(Func<TextContainer, Vector4> orig, TextContainer self)
        {
            Delegates.Params_get_margins @params = new()
            {
                self = self
            };
            _beforeget_margins?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_margins != null) retVal = _afterget_margins.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_margins()
        {
            if (!HookedList.Contains("set_margins"))
            {
                HookedList.Add("set_margins");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_margins"), set_margins);
            }
        }

        internal static event Delegates.set_margins_BeforeArgs _beforeset_margins;
        internal static event Delegates.set_margins_NormalArgs _afterset_margins;

        private static void set_margins(Action<TextContainer, Vector4> orig, TextContainer self, Vector4 value)
        {
            Delegates.Params_set_margins @params = new()
            {
                self = self, value = value
            };
            _beforeset_margins?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_margins != null) _afterset_margins.Invoke(@params);
        }

        internal static void Hookget_rectTransform()
        {
            if (!HookedList.Contains("get_rectTransform"))
            {
                HookedList.Add("get_rectTransform");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_rectTransform"), get_rectTransform);
            }
        }

        internal static event Delegates.get_rectTransform_BeforeArgs _beforeget_rectTransform;
        internal static event Delegates.get_rectTransform_NormalArgs _afterget_rectTransform;

        private static RectTransform get_rectTransform(Func<TextContainer, RectTransform> orig, TextContainer self)
        {
            Delegates.Params_get_rectTransform @params = new()
            {
                self = self
            };
            _beforeget_rectTransform?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_rectTransform != null) retVal = _afterget_rectTransform.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_textMeshPro()
        {
            if (!HookedList.Contains("get_textMeshPro"))
            {
                HookedList.Add("get_textMeshPro");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_textMeshPro"), get_textMeshPro);
            }
        }

        internal static event Delegates.get_textMeshPro_BeforeArgs _beforeget_textMeshPro;
        internal static event Delegates.get_textMeshPro_NormalArgs _afterget_textMeshPro;

        private static TextMeshPro get_textMeshPro(Func<TextContainer, TextMeshPro> orig, TextContainer self)
        {
            Delegates.Params_get_textMeshPro @params = new()
            {
                self = self
            };
            _beforeget_textMeshPro?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_textMeshPro != null) retVal = _afterget_textMeshPro.Invoke(@params);
            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "Awake"), Awake);
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(Action<TextContainer> orig, TextContainer self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "OnEnable"), OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(Action<TextContainer> orig, TextContainer self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "OnDisable"), OnDisable);
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(Action<TextContainer> orig, TextContainer self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookOnContainerChanged()
        {
            if (!HookedList.Contains("OnContainerChanged"))
            {
                HookedList.Add("OnContainerChanged");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "OnContainerChanged"),
                    OnContainerChanged);
            }
        }

        internal static event Delegates.OnContainerChanged_BeforeArgs _beforeOnContainerChanged;
        internal static event Delegates.OnContainerChanged_NormalArgs _afterOnContainerChanged;

        private static void OnContainerChanged(Action<TextContainer> orig, TextContainer self)
        {
            Delegates.Params_OnContainerChanged @params = new()
            {
                self = self
            };
            _beforeOnContainerChanged?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnContainerChanged != null) _afterOnContainerChanged.Invoke(@params);
        }

        internal static void HookOnRectTransformDimensionsChange()
        {
            if (!HookedList.Contains("OnRectTransformDimensionsChange"))
            {
                HookedList.Add("OnRectTransformDimensionsChange");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "OnRectTransformDimensionsChange"),
                    OnRectTransformDimensionsChange);
            }
        }

        internal static event Delegates.OnRectTransformDimensionsChange_BeforeArgs
            _beforeOnRectTransformDimensionsChange;

        internal static event Delegates.OnRectTransformDimensionsChange_NormalArgs
            _afterOnRectTransformDimensionsChange;

        private static void OnRectTransformDimensionsChange(Action<TextContainer> orig, TextContainer self)
        {
            Delegates.Params_OnRectTransformDimensionsChange @params = new()
            {
                self = self
            };
            _beforeOnRectTransformDimensionsChange?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnRectTransformDimensionsChange != null) _afterOnRectTransformDimensionsChange.Invoke(@params);
        }

        internal static void HookSetRect()
        {
            if (!HookedList.Contains("SetRect"))
            {
                HookedList.Add("SetRect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "SetRect"), SetRect);
            }
        }

        internal static event Delegates.SetRect_BeforeArgs _beforeSetRect;
        internal static event Delegates.SetRect_NormalArgs _afterSetRect;

        private static void SetRect(Action<TextContainer, Vector2> orig, TextContainer self, Vector2 size)
        {
            Delegates.Params_SetRect @params = new()
            {
                self = self, size = size
            };
            _beforeSetRect?.Invoke(@params);
            self = @params.self;
            size = @params.size;
            orig(self, size);
            if (_afterSetRect != null) _afterSetRect.Invoke(@params);
        }

        internal static void HookUpdateCorners()
        {
            if (!HookedList.Contains("UpdateCorners"))
            {
                HookedList.Add("UpdateCorners");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "UpdateCorners"), UpdateCorners);
            }
        }

        internal static event Delegates.UpdateCorners_BeforeArgs _beforeUpdateCorners;
        internal static event Delegates.UpdateCorners_NormalArgs _afterUpdateCorners;

        private static void UpdateCorners(Action<TextContainer> orig, TextContainer self)
        {
            Delegates.Params_UpdateCorners @params = new()
            {
                self = self
            };
            _beforeUpdateCorners?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateCorners != null) _afterUpdateCorners.Invoke(@params);
        }

        internal static void HookGetPivot()
        {
            if (!HookedList.Contains("GetPivot"))
            {
                HookedList.Add("GetPivot");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "GetPivot"), GetPivot);
            }
        }

        internal static event Delegates.GetPivot_BeforeArgs _beforeGetPivot;
        internal static event Delegates.GetPivot_NormalArgs _afterGetPivot;

        private static Vector2 GetPivot(Func<TextContainer, TextContainerAnchors, Vector2> orig, TextContainer self,
            TextContainerAnchors anchor)
        {
            Delegates.Params_GetPivot @params = new()
            {
                self = self, anchor = anchor
            };
            _beforeGetPivot?.Invoke(@params);
            self = @params.self;
            anchor = @params.anchor;
            var retVal = orig(self, anchor);
            if (_afterGetPivot != null) retVal = _afterGetPivot.Invoke(@params);
            return retVal;
        }

        internal static void HookGetAnchorPosition()
        {
            if (!HookedList.Contains("GetAnchorPosition"))
            {
                HookedList.Add("GetAnchorPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextContainer), "GetAnchorPosition"), GetAnchorPosition);
            }
        }

        internal static event Delegates.GetAnchorPosition_BeforeArgs _beforeGetAnchorPosition;
        internal static event Delegates.GetAnchorPosition_NormalArgs _afterGetAnchorPosition;

        private static TextContainerAnchors GetAnchorPosition(Func<TextContainer, Vector2, TextContainerAnchors> orig,
            TextContainer self, Vector2 pivot)
        {
            Delegates.Params_GetAnchorPosition @params = new()
            {
                self = self, pivot = pivot
            };
            _beforeGetAnchorPosition?.Invoke(@params);
            self = @params.self;
            pivot = @params.pivot;
            var retVal = orig(self, pivot);
            if (_afterGetAnchorPosition != null) retVal = _afterGetAnchorPosition.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void get_anchorPosition_BeforeArgs(Params_get_anchorPosition args);

        public delegate TextContainerAnchors get_anchorPosition_NormalArgs(Params_get_anchorPosition args);

        public delegate void get_corners_BeforeArgs(Params_get_corners args);

        public delegate Vector3[] get_corners_NormalArgs(Params_get_corners args);

        public delegate void get_hasChanged_BeforeArgs(Params_get_hasChanged args);

        public delegate bool get_hasChanged_NormalArgs(Params_get_hasChanged args);

        public delegate void get_height_BeforeArgs(Params_get_height args);

        public delegate float get_height_NormalArgs(Params_get_height args);

        public delegate void get_isAutoFitting_BeforeArgs(Params_get_isAutoFitting args);

        public delegate bool get_isAutoFitting_NormalArgs(Params_get_isAutoFitting args);

        public delegate void get_isDefaultHeight_BeforeArgs(Params_get_isDefaultHeight args);

        public delegate bool get_isDefaultHeight_NormalArgs(Params_get_isDefaultHeight args);

        public delegate void get_isDefaultWidth_BeforeArgs(Params_get_isDefaultWidth args);

        public delegate bool get_isDefaultWidth_NormalArgs(Params_get_isDefaultWidth args);

        public delegate void get_margins_BeforeArgs(Params_get_margins args);

        public delegate Vector4 get_margins_NormalArgs(Params_get_margins args);

        public delegate void get_pivot_BeforeArgs(Params_get_pivot args);

        public delegate Vector2 get_pivot_NormalArgs(Params_get_pivot args);

        public delegate void get_rect_BeforeArgs(Params_get_rect args);

        public delegate Rect get_rect_NormalArgs(Params_get_rect args);

        public delegate void get_rectTransform_BeforeArgs(Params_get_rectTransform args);

        public delegate RectTransform get_rectTransform_NormalArgs(Params_get_rectTransform args);

        public delegate void get_size_BeforeArgs(Params_get_size args);

        public delegate Vector2 get_size_NormalArgs(Params_get_size args);

        public delegate void get_textMeshPro_BeforeArgs(Params_get_textMeshPro args);

        public delegate TextMeshPro get_textMeshPro_NormalArgs(Params_get_textMeshPro args);

        public delegate void get_width_BeforeArgs(Params_get_width args);

        public delegate float get_width_NormalArgs(Params_get_width args);

        public delegate void get_worldCorners_BeforeArgs(Params_get_worldCorners args);

        public delegate Vector3[] get_worldCorners_NormalArgs(Params_get_worldCorners args);

        public delegate void GetAnchorPosition_BeforeArgs(Params_GetAnchorPosition args);

        public delegate TextContainerAnchors GetAnchorPosition_NormalArgs(Params_GetAnchorPosition args);

        public delegate void GetPivot_BeforeArgs(Params_GetPivot args);

        public delegate Vector2 GetPivot_NormalArgs(Params_GetPivot args);

        public delegate void OnContainerChanged_BeforeArgs(Params_OnContainerChanged args);

        public delegate void OnContainerChanged_NormalArgs(Params_OnContainerChanged args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void OnRectTransformDimensionsChange_BeforeArgs(Params_OnRectTransformDimensionsChange args);

        public delegate void OnRectTransformDimensionsChange_NormalArgs(Params_OnRectTransformDimensionsChange args);

        public delegate void set_anchorPosition_BeforeArgs(Params_set_anchorPosition args);

        public delegate void set_anchorPosition_NormalArgs(Params_set_anchorPosition args);

        public delegate void set_hasChanged_BeforeArgs(Params_set_hasChanged args);

        public delegate void set_hasChanged_NormalArgs(Params_set_hasChanged args);

        public delegate void set_height_BeforeArgs(Params_set_height args);

        public delegate void set_height_NormalArgs(Params_set_height args);

        public delegate void set_isAutoFitting_BeforeArgs(Params_set_isAutoFitting args);

        public delegate void set_isAutoFitting_NormalArgs(Params_set_isAutoFitting args);

        public delegate void set_margins_BeforeArgs(Params_set_margins args);

        public delegate void set_margins_NormalArgs(Params_set_margins args);

        public delegate void set_pivot_BeforeArgs(Params_set_pivot args);

        public delegate void set_pivot_NormalArgs(Params_set_pivot args);

        public delegate void set_rect_BeforeArgs(Params_set_rect args);

        public delegate void set_rect_NormalArgs(Params_set_rect args);

        public delegate void set_size_BeforeArgs(Params_set_size args);

        public delegate void set_size_NormalArgs(Params_set_size args);

        public delegate void set_width_BeforeArgs(Params_set_width args);

        public delegate void set_width_NormalArgs(Params_set_width args);

        public delegate void SetRect_BeforeArgs(Params_SetRect args);

        public delegate void SetRect_NormalArgs(Params_SetRect args);

        public delegate void UpdateCorners_BeforeArgs(Params_UpdateCorners args);

        public delegate void UpdateCorners_NormalArgs(Params_UpdateCorners args);

        public sealed class Params_get_hasChanged
        {
            public TextContainer self;
        }

        public sealed class Params_set_hasChanged
        {
            public TextContainer self;
            public bool value;
        }

        public sealed class Params_get_pivot
        {
            public TextContainer self;
        }

        public sealed class Params_set_pivot
        {
            public TextContainer self;
            public Vector2 value;
        }

        public sealed class Params_get_anchorPosition
        {
            public TextContainer self;
        }

        public sealed class Params_set_anchorPosition
        {
            public TextContainer self;
            public TextContainerAnchors value;
        }

        public sealed class Params_get_rect
        {
            public TextContainer self;
        }

        public sealed class Params_set_rect
        {
            public TextContainer self;
            public Rect value;
        }

        public sealed class Params_get_size
        {
            public TextContainer self;
        }

        public sealed class Params_set_size
        {
            public TextContainer self;
            public Vector2 value;
        }

        public sealed class Params_get_width
        {
            public TextContainer self;
        }

        public sealed class Params_set_width
        {
            public TextContainer self;
            public float value;
        }

        public sealed class Params_get_height
        {
            public TextContainer self;
        }

        public sealed class Params_set_height
        {
            public TextContainer self;
            public float value;
        }

        public sealed class Params_get_isDefaultWidth
        {
            public TextContainer self;
        }

        public sealed class Params_get_isDefaultHeight
        {
            public TextContainer self;
        }

        public sealed class Params_get_isAutoFitting
        {
            public TextContainer self;
        }

        public sealed class Params_set_isAutoFitting
        {
            public TextContainer self;
            public bool value;
        }

        public sealed class Params_get_corners
        {
            public TextContainer self;
        }

        public sealed class Params_get_worldCorners
        {
            public TextContainer self;
        }

        public sealed class Params_get_margins
        {
            public TextContainer self;
        }

        public sealed class Params_set_margins
        {
            public TextContainer self;
            public Vector4 value;
        }

        public sealed class Params_get_rectTransform
        {
            public TextContainer self;
        }

        public sealed class Params_get_textMeshPro
        {
            public TextContainer self;
        }

        public sealed class Params_Awake
        {
            public TextContainer self;
        }

        public sealed class Params_OnEnable
        {
            public TextContainer self;
        }

        public sealed class Params_OnDisable
        {
            public TextContainer self;
        }

        public sealed class Params_OnContainerChanged
        {
            public TextContainer self;
        }

        public sealed class Params_OnRectTransformDimensionsChange
        {
            public TextContainer self;
        }

        public sealed class Params_SetRect
        {
            public TextContainer self;
            public Vector2 size;
        }

        public sealed class Params_UpdateCorners
        {
            public TextContainer self;
        }

        public sealed class Params_GetPivot
        {
            public TextContainerAnchors anchor;
            public TextContainer self;
        }

        public sealed class Params_GetAnchorPosition
        {
            public Vector2 pivot;
            public TextContainer self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_hasChanged_BeforeArgs get_hasChanged
        {
            add
            {
                HookHandler._beforeget_hasChanged += value;
                HookHandler.Hookget_hasChanged();
            }
            remove => HookHandler._beforeget_hasChanged -= value;
        }

        public static event Delegates.set_hasChanged_BeforeArgs set_hasChanged
        {
            add
            {
                HookHandler._beforeset_hasChanged += value;
                HookHandler.Hookset_hasChanged();
            }
            remove => HookHandler._beforeset_hasChanged -= value;
        }

        public static event Delegates.get_pivot_BeforeArgs get_pivot
        {
            add
            {
                HookHandler._beforeget_pivot += value;
                HookHandler.Hookget_pivot();
            }
            remove => HookHandler._beforeget_pivot -= value;
        }

        public static event Delegates.set_pivot_BeforeArgs set_pivot
        {
            add
            {
                HookHandler._beforeset_pivot += value;
                HookHandler.Hookset_pivot();
            }
            remove => HookHandler._beforeset_pivot -= value;
        }

        public static event Delegates.get_anchorPosition_BeforeArgs get_anchorPosition
        {
            add
            {
                HookHandler._beforeget_anchorPosition += value;
                HookHandler.Hookget_anchorPosition();
            }
            remove => HookHandler._beforeget_anchorPosition -= value;
        }

        public static event Delegates.set_anchorPosition_BeforeArgs set_anchorPosition
        {
            add
            {
                HookHandler._beforeset_anchorPosition += value;
                HookHandler.Hookset_anchorPosition();
            }
            remove => HookHandler._beforeset_anchorPosition -= value;
        }

        public static event Delegates.get_rect_BeforeArgs get_rect
        {
            add
            {
                HookHandler._beforeget_rect += value;
                HookHandler.Hookget_rect();
            }
            remove => HookHandler._beforeget_rect -= value;
        }

        public static event Delegates.set_rect_BeforeArgs set_rect
        {
            add
            {
                HookHandler._beforeset_rect += value;
                HookHandler.Hookset_rect();
            }
            remove => HookHandler._beforeset_rect -= value;
        }

        public static event Delegates.get_size_BeforeArgs get_size
        {
            add
            {
                HookHandler._beforeget_size += value;
                HookHandler.Hookget_size();
            }
            remove => HookHandler._beforeget_size -= value;
        }

        public static event Delegates.set_size_BeforeArgs set_size
        {
            add
            {
                HookHandler._beforeset_size += value;
                HookHandler.Hookset_size();
            }
            remove => HookHandler._beforeset_size -= value;
        }

        public static event Delegates.get_width_BeforeArgs get_width
        {
            add
            {
                HookHandler._beforeget_width += value;
                HookHandler.Hookget_width();
            }
            remove => HookHandler._beforeget_width -= value;
        }

        public static event Delegates.set_width_BeforeArgs set_width
        {
            add
            {
                HookHandler._beforeset_width += value;
                HookHandler.Hookset_width();
            }
            remove => HookHandler._beforeset_width -= value;
        }

        public static event Delegates.get_height_BeforeArgs get_height
        {
            add
            {
                HookHandler._beforeget_height += value;
                HookHandler.Hookget_height();
            }
            remove => HookHandler._beforeget_height -= value;
        }

        public static event Delegates.set_height_BeforeArgs set_height
        {
            add
            {
                HookHandler._beforeset_height += value;
                HookHandler.Hookset_height();
            }
            remove => HookHandler._beforeset_height -= value;
        }

        public static event Delegates.get_isDefaultWidth_BeforeArgs get_isDefaultWidth
        {
            add
            {
                HookHandler._beforeget_isDefaultWidth += value;
                HookHandler.Hookget_isDefaultWidth();
            }
            remove => HookHandler._beforeget_isDefaultWidth -= value;
        }

        public static event Delegates.get_isDefaultHeight_BeforeArgs get_isDefaultHeight
        {
            add
            {
                HookHandler._beforeget_isDefaultHeight += value;
                HookHandler.Hookget_isDefaultHeight();
            }
            remove => HookHandler._beforeget_isDefaultHeight -= value;
        }

        public static event Delegates.get_isAutoFitting_BeforeArgs get_isAutoFitting
        {
            add
            {
                HookHandler._beforeget_isAutoFitting += value;
                HookHandler.Hookget_isAutoFitting();
            }
            remove => HookHandler._beforeget_isAutoFitting -= value;
        }

        public static event Delegates.set_isAutoFitting_BeforeArgs set_isAutoFitting
        {
            add
            {
                HookHandler._beforeset_isAutoFitting += value;
                HookHandler.Hookset_isAutoFitting();
            }
            remove => HookHandler._beforeset_isAutoFitting -= value;
        }

        public static event Delegates.get_corners_BeforeArgs get_corners
        {
            add
            {
                HookHandler._beforeget_corners += value;
                HookHandler.Hookget_corners();
            }
            remove => HookHandler._beforeget_corners -= value;
        }

        public static event Delegates.get_worldCorners_BeforeArgs get_worldCorners
        {
            add
            {
                HookHandler._beforeget_worldCorners += value;
                HookHandler.Hookget_worldCorners();
            }
            remove => HookHandler._beforeget_worldCorners -= value;
        }

        public static event Delegates.get_margins_BeforeArgs get_margins
        {
            add
            {
                HookHandler._beforeget_margins += value;
                HookHandler.Hookget_margins();
            }
            remove => HookHandler._beforeget_margins -= value;
        }

        public static event Delegates.set_margins_BeforeArgs set_margins
        {
            add
            {
                HookHandler._beforeset_margins += value;
                HookHandler.Hookset_margins();
            }
            remove => HookHandler._beforeset_margins -= value;
        }

        public static event Delegates.get_rectTransform_BeforeArgs get_rectTransform
        {
            add
            {
                HookHandler._beforeget_rectTransform += value;
                HookHandler.Hookget_rectTransform();
            }
            remove => HookHandler._beforeget_rectTransform -= value;
        }

        public static event Delegates.get_textMeshPro_BeforeArgs get_textMeshPro
        {
            add
            {
                HookHandler._beforeget_textMeshPro += value;
                HookHandler.Hookget_textMeshPro();
            }
            remove => HookHandler._beforeget_textMeshPro -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.OnContainerChanged_BeforeArgs OnContainerChanged
        {
            add
            {
                HookHandler._beforeOnContainerChanged += value;
                HookHandler.HookOnContainerChanged();
            }
            remove => HookHandler._beforeOnContainerChanged -= value;
        }

        public static event Delegates.OnRectTransformDimensionsChange_BeforeArgs OnRectTransformDimensionsChange
        {
            add
            {
                HookHandler._beforeOnRectTransformDimensionsChange += value;
                HookHandler.HookOnRectTransformDimensionsChange();
            }
            remove => HookHandler._beforeOnRectTransformDimensionsChange -= value;
        }

        public static event Delegates.SetRect_BeforeArgs SetRect
        {
            add
            {
                HookHandler._beforeSetRect += value;
                HookHandler.HookSetRect();
            }
            remove => HookHandler._beforeSetRect -= value;
        }

        public static event Delegates.UpdateCorners_BeforeArgs UpdateCorners
        {
            add
            {
                HookHandler._beforeUpdateCorners += value;
                HookHandler.HookUpdateCorners();
            }
            remove => HookHandler._beforeUpdateCorners -= value;
        }

        public static event Delegates.GetPivot_BeforeArgs GetPivot
        {
            add
            {
                HookHandler._beforeGetPivot += value;
                HookHandler.HookGetPivot();
            }
            remove => HookHandler._beforeGetPivot -= value;
        }

        public static event Delegates.GetAnchorPosition_BeforeArgs GetAnchorPosition
        {
            add
            {
                HookHandler._beforeGetAnchorPosition += value;
                HookHandler.HookGetAnchorPosition();
            }
            remove => HookHandler._beforeGetAnchorPosition -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_hasChanged_NormalArgs get_hasChanged
        {
            add
            {
                HookHandler._afterget_hasChanged += value;
                HookHandler.Hookget_hasChanged();
            }
            remove => HookHandler._afterget_hasChanged -= value;
        }

        public static event Delegates.set_hasChanged_NormalArgs set_hasChanged
        {
            add
            {
                HookHandler._afterset_hasChanged += value;
                HookHandler.Hookset_hasChanged();
            }
            remove => HookHandler._afterset_hasChanged -= value;
        }

        public static event Delegates.get_pivot_NormalArgs get_pivot
        {
            add
            {
                HookHandler._afterget_pivot += value;
                HookHandler.Hookget_pivot();
            }
            remove => HookHandler._afterget_pivot -= value;
        }

        public static event Delegates.set_pivot_NormalArgs set_pivot
        {
            add
            {
                HookHandler._afterset_pivot += value;
                HookHandler.Hookset_pivot();
            }
            remove => HookHandler._afterset_pivot -= value;
        }

        public static event Delegates.get_anchorPosition_NormalArgs get_anchorPosition
        {
            add
            {
                HookHandler._afterget_anchorPosition += value;
                HookHandler.Hookget_anchorPosition();
            }
            remove => HookHandler._afterget_anchorPosition -= value;
        }

        public static event Delegates.set_anchorPosition_NormalArgs set_anchorPosition
        {
            add
            {
                HookHandler._afterset_anchorPosition += value;
                HookHandler.Hookset_anchorPosition();
            }
            remove => HookHandler._afterset_anchorPosition -= value;
        }

        public static event Delegates.get_rect_NormalArgs get_rect
        {
            add
            {
                HookHandler._afterget_rect += value;
                HookHandler.Hookget_rect();
            }
            remove => HookHandler._afterget_rect -= value;
        }

        public static event Delegates.set_rect_NormalArgs set_rect
        {
            add
            {
                HookHandler._afterset_rect += value;
                HookHandler.Hookset_rect();
            }
            remove => HookHandler._afterset_rect -= value;
        }

        public static event Delegates.get_size_NormalArgs get_size
        {
            add
            {
                HookHandler._afterget_size += value;
                HookHandler.Hookget_size();
            }
            remove => HookHandler._afterget_size -= value;
        }

        public static event Delegates.set_size_NormalArgs set_size
        {
            add
            {
                HookHandler._afterset_size += value;
                HookHandler.Hookset_size();
            }
            remove => HookHandler._afterset_size -= value;
        }

        public static event Delegates.get_width_NormalArgs get_width
        {
            add
            {
                HookHandler._afterget_width += value;
                HookHandler.Hookget_width();
            }
            remove => HookHandler._afterget_width -= value;
        }

        public static event Delegates.set_width_NormalArgs set_width
        {
            add
            {
                HookHandler._afterset_width += value;
                HookHandler.Hookset_width();
            }
            remove => HookHandler._afterset_width -= value;
        }

        public static event Delegates.get_height_NormalArgs get_height
        {
            add
            {
                HookHandler._afterget_height += value;
                HookHandler.Hookget_height();
            }
            remove => HookHandler._afterget_height -= value;
        }

        public static event Delegates.set_height_NormalArgs set_height
        {
            add
            {
                HookHandler._afterset_height += value;
                HookHandler.Hookset_height();
            }
            remove => HookHandler._afterset_height -= value;
        }

        public static event Delegates.get_isDefaultWidth_NormalArgs get_isDefaultWidth
        {
            add
            {
                HookHandler._afterget_isDefaultWidth += value;
                HookHandler.Hookget_isDefaultWidth();
            }
            remove => HookHandler._afterget_isDefaultWidth -= value;
        }

        public static event Delegates.get_isDefaultHeight_NormalArgs get_isDefaultHeight
        {
            add
            {
                HookHandler._afterget_isDefaultHeight += value;
                HookHandler.Hookget_isDefaultHeight();
            }
            remove => HookHandler._afterget_isDefaultHeight -= value;
        }

        public static event Delegates.get_isAutoFitting_NormalArgs get_isAutoFitting
        {
            add
            {
                HookHandler._afterget_isAutoFitting += value;
                HookHandler.Hookget_isAutoFitting();
            }
            remove => HookHandler._afterget_isAutoFitting -= value;
        }

        public static event Delegates.set_isAutoFitting_NormalArgs set_isAutoFitting
        {
            add
            {
                HookHandler._afterset_isAutoFitting += value;
                HookHandler.Hookset_isAutoFitting();
            }
            remove => HookHandler._afterset_isAutoFitting -= value;
        }

        public static event Delegates.get_corners_NormalArgs get_corners
        {
            add
            {
                HookHandler._afterget_corners += value;
                HookHandler.Hookget_corners();
            }
            remove => HookHandler._afterget_corners -= value;
        }

        public static event Delegates.get_worldCorners_NormalArgs get_worldCorners
        {
            add
            {
                HookHandler._afterget_worldCorners += value;
                HookHandler.Hookget_worldCorners();
            }
            remove => HookHandler._afterget_worldCorners -= value;
        }

        public static event Delegates.get_margins_NormalArgs get_margins
        {
            add
            {
                HookHandler._afterget_margins += value;
                HookHandler.Hookget_margins();
            }
            remove => HookHandler._afterget_margins -= value;
        }

        public static event Delegates.set_margins_NormalArgs set_margins
        {
            add
            {
                HookHandler._afterset_margins += value;
                HookHandler.Hookset_margins();
            }
            remove => HookHandler._afterset_margins -= value;
        }

        public static event Delegates.get_rectTransform_NormalArgs get_rectTransform
        {
            add
            {
                HookHandler._afterget_rectTransform += value;
                HookHandler.Hookget_rectTransform();
            }
            remove => HookHandler._afterget_rectTransform -= value;
        }

        public static event Delegates.get_textMeshPro_NormalArgs get_textMeshPro
        {
            add
            {
                HookHandler._afterget_textMeshPro += value;
                HookHandler.Hookget_textMeshPro();
            }
            remove => HookHandler._afterget_textMeshPro -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.OnContainerChanged_NormalArgs OnContainerChanged
        {
            add
            {
                HookHandler._afterOnContainerChanged += value;
                HookHandler.HookOnContainerChanged();
            }
            remove => HookHandler._afterOnContainerChanged -= value;
        }

        public static event Delegates.OnRectTransformDimensionsChange_NormalArgs OnRectTransformDimensionsChange
        {
            add
            {
                HookHandler._afterOnRectTransformDimensionsChange += value;
                HookHandler.HookOnRectTransformDimensionsChange();
            }
            remove => HookHandler._afterOnRectTransformDimensionsChange -= value;
        }

        public static event Delegates.SetRect_NormalArgs SetRect
        {
            add
            {
                HookHandler._afterSetRect += value;
                HookHandler.HookSetRect();
            }
            remove => HookHandler._afterSetRect -= value;
        }

        public static event Delegates.UpdateCorners_NormalArgs UpdateCorners
        {
            add
            {
                HookHandler._afterUpdateCorners += value;
                HookHandler.HookUpdateCorners();
            }
            remove => HookHandler._afterUpdateCorners -= value;
        }

        public static event Delegates.GetPivot_NormalArgs GetPivot
        {
            add
            {
                HookHandler._afterGetPivot += value;
                HookHandler.HookGetPivot();
            }
            remove => HookHandler._afterGetPivot -= value;
        }

        public static event Delegates.GetAnchorPosition_NormalArgs GetAnchorPosition
        {
            add
            {
                HookHandler._afterGetAnchorPosition += value;
                HookHandler.HookGetAnchorPosition();
            }
            remove => HookHandler._afterGetAnchorPosition -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_hasChanged_NormalArgs get_hasChanged
        {
            add => HookEndpointManager.Add<Delegates.get_hasChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_hasChanged"), value);
            remove => HookEndpointManager.Remove<Delegates.get_hasChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_hasChanged"), value);
        }

        public static event Delegates.set_hasChanged_NormalArgs set_hasChanged
        {
            add => HookEndpointManager.Add<Delegates.set_hasChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_hasChanged"), value);
            remove => HookEndpointManager.Remove<Delegates.set_hasChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_hasChanged"), value);
        }

        public static event Delegates.get_pivot_NormalArgs get_pivot
        {
            add => HookEndpointManager.Add<Delegates.get_pivot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_pivot"), value);
            remove => HookEndpointManager.Remove<Delegates.get_pivot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_pivot"), value);
        }

        public static event Delegates.set_pivot_NormalArgs set_pivot
        {
            add => HookEndpointManager.Add<Delegates.set_pivot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_pivot"), value);
            remove => HookEndpointManager.Remove<Delegates.set_pivot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_pivot"), value);
        }

        public static event Delegates.get_anchorPosition_NormalArgs get_anchorPosition
        {
            add => HookEndpointManager.Add<Delegates.get_anchorPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_anchorPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.get_anchorPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_anchorPosition"), value);
        }

        public static event Delegates.set_anchorPosition_NormalArgs set_anchorPosition
        {
            add => HookEndpointManager.Add<Delegates.set_anchorPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_anchorPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.set_anchorPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_anchorPosition"), value);
        }

        public static event Delegates.get_rect_NormalArgs get_rect
        {
            add => HookEndpointManager.Add<Delegates.get_rect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_rect"), value);
            remove => HookEndpointManager.Remove<Delegates.get_rect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_rect"), value);
        }

        public static event Delegates.set_rect_NormalArgs set_rect
        {
            add => HookEndpointManager.Add<Delegates.set_rect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_rect"), value);
            remove => HookEndpointManager.Remove<Delegates.set_rect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_rect"), value);
        }

        public static event Delegates.get_size_NormalArgs get_size
        {
            add => HookEndpointManager.Add<Delegates.get_size_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_size"), value);
            remove => HookEndpointManager.Remove<Delegates.get_size_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_size"), value);
        }

        public static event Delegates.set_size_NormalArgs set_size
        {
            add => HookEndpointManager.Add<Delegates.set_size_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_size"), value);
            remove => HookEndpointManager.Remove<Delegates.set_size_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_size"), value);
        }

        public static event Delegates.get_width_NormalArgs get_width
        {
            add => HookEndpointManager.Add<Delegates.get_width_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_width"), value);
            remove => HookEndpointManager.Remove<Delegates.get_width_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_width"), value);
        }

        public static event Delegates.set_width_NormalArgs set_width
        {
            add => HookEndpointManager.Add<Delegates.set_width_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_width"), value);
            remove => HookEndpointManager.Remove<Delegates.set_width_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_width"), value);
        }

        public static event Delegates.get_height_NormalArgs get_height
        {
            add => HookEndpointManager.Add<Delegates.get_height_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_height"), value);
            remove => HookEndpointManager.Remove<Delegates.get_height_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_height"), value);
        }

        public static event Delegates.set_height_NormalArgs set_height
        {
            add => HookEndpointManager.Add<Delegates.set_height_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_height"), value);
            remove => HookEndpointManager.Remove<Delegates.set_height_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_height"), value);
        }

        public static event Delegates.get_isDefaultWidth_NormalArgs get_isDefaultWidth
        {
            add => HookEndpointManager.Add<Delegates.get_isDefaultWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_isDefaultWidth"), value);
            remove => HookEndpointManager.Remove<Delegates.get_isDefaultWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_isDefaultWidth"), value);
        }

        public static event Delegates.get_isDefaultHeight_NormalArgs get_isDefaultHeight
        {
            add => HookEndpointManager.Add<Delegates.get_isDefaultHeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_isDefaultHeight"), value);
            remove => HookEndpointManager.Remove<Delegates.get_isDefaultHeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_isDefaultHeight"), value);
        }

        public static event Delegates.get_isAutoFitting_NormalArgs get_isAutoFitting
        {
            add => HookEndpointManager.Add<Delegates.get_isAutoFitting_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_isAutoFitting"), value);
            remove => HookEndpointManager.Remove<Delegates.get_isAutoFitting_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_isAutoFitting"), value);
        }

        public static event Delegates.set_isAutoFitting_NormalArgs set_isAutoFitting
        {
            add => HookEndpointManager.Add<Delegates.set_isAutoFitting_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_isAutoFitting"), value);
            remove => HookEndpointManager.Remove<Delegates.set_isAutoFitting_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_isAutoFitting"), value);
        }

        public static event Delegates.get_corners_NormalArgs get_corners
        {
            add => HookEndpointManager.Add<Delegates.get_corners_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_corners"), value);
            remove => HookEndpointManager.Remove<Delegates.get_corners_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_corners"), value);
        }

        public static event Delegates.get_worldCorners_NormalArgs get_worldCorners
        {
            add => HookEndpointManager.Add<Delegates.get_worldCorners_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_worldCorners"), value);
            remove => HookEndpointManager.Remove<Delegates.get_worldCorners_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_worldCorners"), value);
        }

        public static event Delegates.get_margins_NormalArgs get_margins
        {
            add => HookEndpointManager.Add<Delegates.get_margins_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_margins"), value);
            remove => HookEndpointManager.Remove<Delegates.get_margins_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_margins"), value);
        }

        public static event Delegates.set_margins_NormalArgs set_margins
        {
            add => HookEndpointManager.Add<Delegates.set_margins_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_margins"), value);
            remove => HookEndpointManager.Remove<Delegates.set_margins_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "set_margins"), value);
        }

        public static event Delegates.get_rectTransform_NormalArgs get_rectTransform
        {
            add => HookEndpointManager.Add<Delegates.get_rectTransform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_rectTransform"), value);
            remove => HookEndpointManager.Remove<Delegates.get_rectTransform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_rectTransform"), value);
        }

        public static event Delegates.get_textMeshPro_NormalArgs get_textMeshPro
        {
            add => HookEndpointManager.Add<Delegates.get_textMeshPro_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_textMeshPro"), value);
            remove => HookEndpointManager.Remove<Delegates.get_textMeshPro_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "get_textMeshPro"), value);
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add => HookEndpointManager.Add<Delegates.Awake_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "Awake"), value);
            remove => HookEndpointManager.Remove<Delegates.Awake_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "Awake"), value);
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "OnEnable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "OnEnable"), value);
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add => HookEndpointManager.Add<Delegates.OnDisable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "OnDisable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDisable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "OnDisable"), value);
        }

        public static event Delegates.OnContainerChanged_NormalArgs OnContainerChanged
        {
            add => HookEndpointManager.Add<Delegates.OnContainerChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "OnContainerChanged"), value);
            remove => HookEndpointManager.Remove<Delegates.OnContainerChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "OnContainerChanged"), value);
        }

        public static event Delegates.OnRectTransformDimensionsChange_NormalArgs OnRectTransformDimensionsChange
        {
            add => HookEndpointManager.Add<Delegates.OnRectTransformDimensionsChange_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "OnRectTransformDimensionsChange"), value);
            remove => HookEndpointManager.Remove<Delegates.OnRectTransformDimensionsChange_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "OnRectTransformDimensionsChange"), value);
        }

        public static event Delegates.SetRect_NormalArgs SetRect
        {
            add => HookEndpointManager.Add<Delegates.SetRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "SetRect"), value);
            remove => HookEndpointManager.Remove<Delegates.SetRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "SetRect"), value);
        }

        public static event Delegates.UpdateCorners_NormalArgs UpdateCorners
        {
            add => HookEndpointManager.Add<Delegates.UpdateCorners_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "UpdateCorners"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateCorners_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "UpdateCorners"), value);
        }

        public static event Delegates.GetPivot_NormalArgs GetPivot
        {
            add => HookEndpointManager.Add<Delegates.GetPivot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "GetPivot"), value);
            remove => HookEndpointManager.Remove<Delegates.GetPivot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "GetPivot"), value);
        }

        public static event Delegates.GetAnchorPosition_NormalArgs GetAnchorPosition
        {
            add => HookEndpointManager.Add<Delegates.GetAnchorPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "GetAnchorPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.GetAnchorPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextContainer), "GetAnchorPosition"), value);
        }
    }
}