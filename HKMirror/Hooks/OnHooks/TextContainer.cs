using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for TextContainer class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTextContainer
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_hasChanged()
{
if (!HookedList.Contains("get_hasChanged"))
{
HookedList.Add("get_hasChanged");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_hasChanged", true), get_hasChanged);

}
}
internal static event Delegates.get_hasChanged_BeforeArgs _beforeget_hasChanged;
internal static event Delegates.get_hasChanged_AfterArgs _afterget_hasChanged;
private static bool get_hasChanged(Func<TMPro.TextContainer, bool> orig, TMPro.TextContainer self)
{
Delegates.Params_get_hasChanged @params = new() 
{
self = self
};
if (_beforeget_hasChanged != null)
{
foreach (Delegates.get_hasChanged_BeforeArgs toInvoke in _beforeget_hasChanged.GetInvocationList())
{
try
{
_beforeget_hasChanged?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_hasChanged != null)
{
foreach (Delegates.get_hasChanged_AfterArgs toInvoke in _afterget_hasChanged.GetInvocationList())
{
try
{
retVal = _afterget_hasChanged.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_hasChanged()
{
if (!HookedList.Contains("set_hasChanged"))
{
HookedList.Add("set_hasChanged");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_hasChanged", true), set_hasChanged);

}
}
internal static event Delegates.set_hasChanged_BeforeArgs _beforeset_hasChanged;
internal static event Delegates.set_hasChanged_AfterArgs _afterset_hasChanged;
private static void set_hasChanged(Action<TMPro.TextContainer,  bool> orig, TMPro.TextContainer self,  bool value)
{
Delegates.Params_set_hasChanged @params = new() 
{
self = self
, value = value
};
if (_beforeset_hasChanged != null)
{
foreach (Delegates.set_hasChanged_BeforeArgs toInvoke in _beforeset_hasChanged.GetInvocationList())
{
try
{
_beforeset_hasChanged?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_hasChanged != null)
{
foreach (Delegates.set_hasChanged_AfterArgs toInvoke in _afterset_hasChanged.GetInvocationList())
{
try
{
_afterset_hasChanged.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_pivot()
{
if (!HookedList.Contains("get_pivot"))
{
HookedList.Add("get_pivot");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_pivot", true), get_pivot);

}
}
internal static event Delegates.get_pivot_BeforeArgs _beforeget_pivot;
internal static event Delegates.get_pivot_AfterArgs _afterget_pivot;
private static UnityEngine.Vector2 get_pivot(Func<TMPro.TextContainer, UnityEngine.Vector2> orig, TMPro.TextContainer self)
{
Delegates.Params_get_pivot @params = new() 
{
self = self
};
if (_beforeget_pivot != null)
{
foreach (Delegates.get_pivot_BeforeArgs toInvoke in _beforeget_pivot.GetInvocationList())
{
try
{
_beforeget_pivot?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_pivot != null)
{
foreach (Delegates.get_pivot_AfterArgs toInvoke in _afterget_pivot.GetInvocationList())
{
try
{
retVal = _afterget_pivot.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_pivot()
{
if (!HookedList.Contains("set_pivot"))
{
HookedList.Add("set_pivot");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_pivot", true), set_pivot);

}
}
internal static event Delegates.set_pivot_BeforeArgs _beforeset_pivot;
internal static event Delegates.set_pivot_AfterArgs _afterset_pivot;
private static void set_pivot(Action<TMPro.TextContainer,  UnityEngine.Vector2> orig, TMPro.TextContainer self,  UnityEngine.Vector2 value)
{
Delegates.Params_set_pivot @params = new() 
{
self = self
, value = value
};
if (_beforeset_pivot != null)
{
foreach (Delegates.set_pivot_BeforeArgs toInvoke in _beforeset_pivot.GetInvocationList())
{
try
{
_beforeset_pivot?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_pivot != null)
{
foreach (Delegates.set_pivot_AfterArgs toInvoke in _afterset_pivot.GetInvocationList())
{
try
{
_afterset_pivot.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_anchorPosition()
{
if (!HookedList.Contains("get_anchorPosition"))
{
HookedList.Add("get_anchorPosition");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_anchorPosition", true), get_anchorPosition);

}
}
internal static event Delegates.get_anchorPosition_BeforeArgs _beforeget_anchorPosition;
internal static event Delegates.get_anchorPosition_AfterArgs _afterget_anchorPosition;
private static TMPro.TextContainerAnchors get_anchorPosition(Func<TMPro.TextContainer, TMPro.TextContainerAnchors> orig, TMPro.TextContainer self)
{
Delegates.Params_get_anchorPosition @params = new() 
{
self = self
};
if (_beforeget_anchorPosition != null)
{
foreach (Delegates.get_anchorPosition_BeforeArgs toInvoke in _beforeget_anchorPosition.GetInvocationList())
{
try
{
_beforeget_anchorPosition?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_anchorPosition != null)
{
foreach (Delegates.get_anchorPosition_AfterArgs toInvoke in _afterget_anchorPosition.GetInvocationList())
{
try
{
retVal = _afterget_anchorPosition.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_anchorPosition()
{
if (!HookedList.Contains("set_anchorPosition"))
{
HookedList.Add("set_anchorPosition");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_anchorPosition", true), set_anchorPosition);

}
}
internal static event Delegates.set_anchorPosition_BeforeArgs _beforeset_anchorPosition;
internal static event Delegates.set_anchorPosition_AfterArgs _afterset_anchorPosition;
private static void set_anchorPosition(Action<TMPro.TextContainer,  TMPro.TextContainerAnchors> orig, TMPro.TextContainer self,  TMPro.TextContainerAnchors value)
{
Delegates.Params_set_anchorPosition @params = new() 
{
self = self
, value = value
};
if (_beforeset_anchorPosition != null)
{
foreach (Delegates.set_anchorPosition_BeforeArgs toInvoke in _beforeset_anchorPosition.GetInvocationList())
{
try
{
_beforeset_anchorPosition?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_anchorPosition != null)
{
foreach (Delegates.set_anchorPosition_AfterArgs toInvoke in _afterset_anchorPosition.GetInvocationList())
{
try
{
_afterset_anchorPosition.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_rect()
{
if (!HookedList.Contains("get_rect"))
{
HookedList.Add("get_rect");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_rect", true), get_rect);

}
}
internal static event Delegates.get_rect_BeforeArgs _beforeget_rect;
internal static event Delegates.get_rect_AfterArgs _afterget_rect;
private static UnityEngine.Rect get_rect(Func<TMPro.TextContainer, UnityEngine.Rect> orig, TMPro.TextContainer self)
{
Delegates.Params_get_rect @params = new() 
{
self = self
};
if (_beforeget_rect != null)
{
foreach (Delegates.get_rect_BeforeArgs toInvoke in _beforeget_rect.GetInvocationList())
{
try
{
_beforeget_rect?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_rect != null)
{
foreach (Delegates.get_rect_AfterArgs toInvoke in _afterget_rect.GetInvocationList())
{
try
{
retVal = _afterget_rect.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_rect()
{
if (!HookedList.Contains("set_rect"))
{
HookedList.Add("set_rect");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_rect", true), set_rect);

}
}
internal static event Delegates.set_rect_BeforeArgs _beforeset_rect;
internal static event Delegates.set_rect_AfterArgs _afterset_rect;
private static void set_rect(Action<TMPro.TextContainer,  UnityEngine.Rect> orig, TMPro.TextContainer self,  UnityEngine.Rect value)
{
Delegates.Params_set_rect @params = new() 
{
self = self
, value = value
};
if (_beforeset_rect != null)
{
foreach (Delegates.set_rect_BeforeArgs toInvoke in _beforeset_rect.GetInvocationList())
{
try
{
_beforeset_rect?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_rect != null)
{
foreach (Delegates.set_rect_AfterArgs toInvoke in _afterset_rect.GetInvocationList())
{
try
{
_afterset_rect.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_size()
{
if (!HookedList.Contains("get_size"))
{
HookedList.Add("get_size");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_size", true), get_size);

}
}
internal static event Delegates.get_size_BeforeArgs _beforeget_size;
internal static event Delegates.get_size_AfterArgs _afterget_size;
private static UnityEngine.Vector2 get_size(Func<TMPro.TextContainer, UnityEngine.Vector2> orig, TMPro.TextContainer self)
{
Delegates.Params_get_size @params = new() 
{
self = self
};
if (_beforeget_size != null)
{
foreach (Delegates.get_size_BeforeArgs toInvoke in _beforeget_size.GetInvocationList())
{
try
{
_beforeget_size?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_size != null)
{
foreach (Delegates.get_size_AfterArgs toInvoke in _afterget_size.GetInvocationList())
{
try
{
retVal = _afterget_size.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_size()
{
if (!HookedList.Contains("set_size"))
{
HookedList.Add("set_size");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_size", true), set_size);

}
}
internal static event Delegates.set_size_BeforeArgs _beforeset_size;
internal static event Delegates.set_size_AfterArgs _afterset_size;
private static void set_size(Action<TMPro.TextContainer,  UnityEngine.Vector2> orig, TMPro.TextContainer self,  UnityEngine.Vector2 value)
{
Delegates.Params_set_size @params = new() 
{
self = self
, value = value
};
if (_beforeset_size != null)
{
foreach (Delegates.set_size_BeforeArgs toInvoke in _beforeset_size.GetInvocationList())
{
try
{
_beforeset_size?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_size != null)
{
foreach (Delegates.set_size_AfterArgs toInvoke in _afterset_size.GetInvocationList())
{
try
{
_afterset_size.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_width()
{
if (!HookedList.Contains("get_width"))
{
HookedList.Add("get_width");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_width", true), get_width);

}
}
internal static event Delegates.get_width_BeforeArgs _beforeget_width;
internal static event Delegates.get_width_AfterArgs _afterget_width;
private static float get_width(Func<TMPro.TextContainer, float> orig, TMPro.TextContainer self)
{
Delegates.Params_get_width @params = new() 
{
self = self
};
if (_beforeget_width != null)
{
foreach (Delegates.get_width_BeforeArgs toInvoke in _beforeget_width.GetInvocationList())
{
try
{
_beforeget_width?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_width != null)
{
foreach (Delegates.get_width_AfterArgs toInvoke in _afterget_width.GetInvocationList())
{
try
{
retVal = _afterget_width.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_width()
{
if (!HookedList.Contains("set_width"))
{
HookedList.Add("set_width");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_width", true), set_width);

}
}
internal static event Delegates.set_width_BeforeArgs _beforeset_width;
internal static event Delegates.set_width_AfterArgs _afterset_width;
private static void set_width(Action<TMPro.TextContainer,  float> orig, TMPro.TextContainer self,  float value)
{
Delegates.Params_set_width @params = new() 
{
self = self
, value = value
};
if (_beforeset_width != null)
{
foreach (Delegates.set_width_BeforeArgs toInvoke in _beforeset_width.GetInvocationList())
{
try
{
_beforeset_width?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_width != null)
{
foreach (Delegates.set_width_AfterArgs toInvoke in _afterset_width.GetInvocationList())
{
try
{
_afterset_width.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_height()
{
if (!HookedList.Contains("get_height"))
{
HookedList.Add("get_height");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_height", true), get_height);

}
}
internal static event Delegates.get_height_BeforeArgs _beforeget_height;
internal static event Delegates.get_height_AfterArgs _afterget_height;
private static float get_height(Func<TMPro.TextContainer, float> orig, TMPro.TextContainer self)
{
Delegates.Params_get_height @params = new() 
{
self = self
};
if (_beforeget_height != null)
{
foreach (Delegates.get_height_BeforeArgs toInvoke in _beforeget_height.GetInvocationList())
{
try
{
_beforeget_height?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_height != null)
{
foreach (Delegates.get_height_AfterArgs toInvoke in _afterget_height.GetInvocationList())
{
try
{
retVal = _afterget_height.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_height()
{
if (!HookedList.Contains("set_height"))
{
HookedList.Add("set_height");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_height", true), set_height);

}
}
internal static event Delegates.set_height_BeforeArgs _beforeset_height;
internal static event Delegates.set_height_AfterArgs _afterset_height;
private static void set_height(Action<TMPro.TextContainer,  float> orig, TMPro.TextContainer self,  float value)
{
Delegates.Params_set_height @params = new() 
{
self = self
, value = value
};
if (_beforeset_height != null)
{
foreach (Delegates.set_height_BeforeArgs toInvoke in _beforeset_height.GetInvocationList())
{
try
{
_beforeset_height?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_height != null)
{
foreach (Delegates.set_height_AfterArgs toInvoke in _afterset_height.GetInvocationList())
{
try
{
_afterset_height.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_isDefaultWidth()
{
if (!HookedList.Contains("get_isDefaultWidth"))
{
HookedList.Add("get_isDefaultWidth");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_isDefaultWidth", true), get_isDefaultWidth);

}
}
internal static event Delegates.get_isDefaultWidth_BeforeArgs _beforeget_isDefaultWidth;
internal static event Delegates.get_isDefaultWidth_AfterArgs _afterget_isDefaultWidth;
private static bool get_isDefaultWidth(Func<TMPro.TextContainer, bool> orig, TMPro.TextContainer self)
{
Delegates.Params_get_isDefaultWidth @params = new() 
{
self = self
};
if (_beforeget_isDefaultWidth != null)
{
foreach (Delegates.get_isDefaultWidth_BeforeArgs toInvoke in _beforeget_isDefaultWidth.GetInvocationList())
{
try
{
_beforeget_isDefaultWidth?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_isDefaultWidth != null)
{
foreach (Delegates.get_isDefaultWidth_AfterArgs toInvoke in _afterget_isDefaultWidth.GetInvocationList())
{
try
{
retVal = _afterget_isDefaultWidth.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_isDefaultHeight()
{
if (!HookedList.Contains("get_isDefaultHeight"))
{
HookedList.Add("get_isDefaultHeight");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_isDefaultHeight", true), get_isDefaultHeight);

}
}
internal static event Delegates.get_isDefaultHeight_BeforeArgs _beforeget_isDefaultHeight;
internal static event Delegates.get_isDefaultHeight_AfterArgs _afterget_isDefaultHeight;
private static bool get_isDefaultHeight(Func<TMPro.TextContainer, bool> orig, TMPro.TextContainer self)
{
Delegates.Params_get_isDefaultHeight @params = new() 
{
self = self
};
if (_beforeget_isDefaultHeight != null)
{
foreach (Delegates.get_isDefaultHeight_BeforeArgs toInvoke in _beforeget_isDefaultHeight.GetInvocationList())
{
try
{
_beforeget_isDefaultHeight?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_isDefaultHeight != null)
{
foreach (Delegates.get_isDefaultHeight_AfterArgs toInvoke in _afterget_isDefaultHeight.GetInvocationList())
{
try
{
retVal = _afterget_isDefaultHeight.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_isAutoFitting()
{
if (!HookedList.Contains("get_isAutoFitting"))
{
HookedList.Add("get_isAutoFitting");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_isAutoFitting", true), get_isAutoFitting);

}
}
internal static event Delegates.get_isAutoFitting_BeforeArgs _beforeget_isAutoFitting;
internal static event Delegates.get_isAutoFitting_AfterArgs _afterget_isAutoFitting;
private static bool get_isAutoFitting(Func<TMPro.TextContainer, bool> orig, TMPro.TextContainer self)
{
Delegates.Params_get_isAutoFitting @params = new() 
{
self = self
};
if (_beforeget_isAutoFitting != null)
{
foreach (Delegates.get_isAutoFitting_BeforeArgs toInvoke in _beforeget_isAutoFitting.GetInvocationList())
{
try
{
_beforeget_isAutoFitting?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_isAutoFitting != null)
{
foreach (Delegates.get_isAutoFitting_AfterArgs toInvoke in _afterget_isAutoFitting.GetInvocationList())
{
try
{
retVal = _afterget_isAutoFitting.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_isAutoFitting()
{
if (!HookedList.Contains("set_isAutoFitting"))
{
HookedList.Add("set_isAutoFitting");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_isAutoFitting", true), set_isAutoFitting);

}
}
internal static event Delegates.set_isAutoFitting_BeforeArgs _beforeset_isAutoFitting;
internal static event Delegates.set_isAutoFitting_AfterArgs _afterset_isAutoFitting;
private static void set_isAutoFitting(Action<TMPro.TextContainer,  bool> orig, TMPro.TextContainer self,  bool value)
{
Delegates.Params_set_isAutoFitting @params = new() 
{
self = self
, value = value
};
if (_beforeset_isAutoFitting != null)
{
foreach (Delegates.set_isAutoFitting_BeforeArgs toInvoke in _beforeset_isAutoFitting.GetInvocationList())
{
try
{
_beforeset_isAutoFitting?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_isAutoFitting != null)
{
foreach (Delegates.set_isAutoFitting_AfterArgs toInvoke in _afterset_isAutoFitting.GetInvocationList())
{
try
{
_afterset_isAutoFitting.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_corners()
{
if (!HookedList.Contains("get_corners"))
{
HookedList.Add("get_corners");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_corners", true), get_corners);

}
}
internal static event Delegates.get_corners_BeforeArgs _beforeget_corners;
internal static event Delegates.get_corners_AfterArgs _afterget_corners;
private static UnityEngine.Vector3[] get_corners(Func<TMPro.TextContainer, UnityEngine.Vector3[]> orig, TMPro.TextContainer self)
{
Delegates.Params_get_corners @params = new() 
{
self = self
};
if (_beforeget_corners != null)
{
foreach (Delegates.get_corners_BeforeArgs toInvoke in _beforeget_corners.GetInvocationList())
{
try
{
_beforeget_corners?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_corners != null)
{
foreach (Delegates.get_corners_AfterArgs toInvoke in _afterget_corners.GetInvocationList())
{
try
{
retVal = _afterget_corners.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_worldCorners()
{
if (!HookedList.Contains("get_worldCorners"))
{
HookedList.Add("get_worldCorners");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_worldCorners", true), get_worldCorners);

}
}
internal static event Delegates.get_worldCorners_BeforeArgs _beforeget_worldCorners;
internal static event Delegates.get_worldCorners_AfterArgs _afterget_worldCorners;
private static UnityEngine.Vector3[] get_worldCorners(Func<TMPro.TextContainer, UnityEngine.Vector3[]> orig, TMPro.TextContainer self)
{
Delegates.Params_get_worldCorners @params = new() 
{
self = self
};
if (_beforeget_worldCorners != null)
{
foreach (Delegates.get_worldCorners_BeforeArgs toInvoke in _beforeget_worldCorners.GetInvocationList())
{
try
{
_beforeget_worldCorners?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_worldCorners != null)
{
foreach (Delegates.get_worldCorners_AfterArgs toInvoke in _afterget_worldCorners.GetInvocationList())
{
try
{
retVal = _afterget_worldCorners.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_margins()
{
if (!HookedList.Contains("get_margins"))
{
HookedList.Add("get_margins");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_margins", true), get_margins);

}
}
internal static event Delegates.get_margins_BeforeArgs _beforeget_margins;
internal static event Delegates.get_margins_AfterArgs _afterget_margins;
private static UnityEngine.Vector4 get_margins(Func<TMPro.TextContainer, UnityEngine.Vector4> orig, TMPro.TextContainer self)
{
Delegates.Params_get_margins @params = new() 
{
self = self
};
if (_beforeget_margins != null)
{
foreach (Delegates.get_margins_BeforeArgs toInvoke in _beforeget_margins.GetInvocationList())
{
try
{
_beforeget_margins?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_margins != null)
{
foreach (Delegates.get_margins_AfterArgs toInvoke in _afterget_margins.GetInvocationList())
{
try
{
retVal = _afterget_margins.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_margins()
{
if (!HookedList.Contains("set_margins"))
{
HookedList.Add("set_margins");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_margins", true), set_margins);

}
}
internal static event Delegates.set_margins_BeforeArgs _beforeset_margins;
internal static event Delegates.set_margins_AfterArgs _afterset_margins;
private static void set_margins(Action<TMPro.TextContainer,  UnityEngine.Vector4> orig, TMPro.TextContainer self,  UnityEngine.Vector4 value)
{
Delegates.Params_set_margins @params = new() 
{
self = self
, value = value
};
if (_beforeset_margins != null)
{
foreach (Delegates.set_margins_BeforeArgs toInvoke in _beforeset_margins.GetInvocationList())
{
try
{
_beforeset_margins?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_margins != null)
{
foreach (Delegates.set_margins_AfterArgs toInvoke in _afterset_margins.GetInvocationList())
{
try
{
_afterset_margins.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_rectTransform()
{
if (!HookedList.Contains("get_rectTransform"))
{
HookedList.Add("get_rectTransform");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_rectTransform", true), get_rectTransform);

}
}
internal static event Delegates.get_rectTransform_BeforeArgs _beforeget_rectTransform;
internal static event Delegates.get_rectTransform_AfterArgs _afterget_rectTransform;
private static UnityEngine.RectTransform get_rectTransform(Func<TMPro.TextContainer, UnityEngine.RectTransform> orig, TMPro.TextContainer self)
{
Delegates.Params_get_rectTransform @params = new() 
{
self = self
};
if (_beforeget_rectTransform != null)
{
foreach (Delegates.get_rectTransform_BeforeArgs toInvoke in _beforeget_rectTransform.GetInvocationList())
{
try
{
_beforeget_rectTransform?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_rectTransform != null)
{
foreach (Delegates.get_rectTransform_AfterArgs toInvoke in _afterget_rectTransform.GetInvocationList())
{
try
{
retVal = _afterget_rectTransform.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_textMeshPro()
{
if (!HookedList.Contains("get_textMeshPro"))
{
HookedList.Add("get_textMeshPro");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_textMeshPro", true), get_textMeshPro);

}
}
internal static event Delegates.get_textMeshPro_BeforeArgs _beforeget_textMeshPro;
internal static event Delegates.get_textMeshPro_AfterArgs _afterget_textMeshPro;
private static TMPro.TextMeshPro get_textMeshPro(Func<TMPro.TextContainer, TMPro.TextMeshPro> orig, TMPro.TextContainer self)
{
Delegates.Params_get_textMeshPro @params = new() 
{
self = self
};
if (_beforeget_textMeshPro != null)
{
foreach (Delegates.get_textMeshPro_BeforeArgs toInvoke in _beforeget_textMeshPro.GetInvocationList())
{
try
{
_beforeget_textMeshPro?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_textMeshPro != null)
{
foreach (Delegates.get_textMeshPro_AfterArgs toInvoke in _afterget_textMeshPro.GetInvocationList())
{
try
{
retVal = _afterget_textMeshPro.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "Awake", true), Awake);

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(Action<TMPro.TextContainer> orig, TMPro.TextContainer self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "OnEnable", true), OnEnable);

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(Action<TMPro.TextContainer> orig, TMPro.TextContainer self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDisable()
{
if (!HookedList.Contains("OnDisable"))
{
HookedList.Add("OnDisable");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "OnDisable", true), OnDisable);

}
}
internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;
private static void OnDisable(Action<TMPro.TextContainer> orig, TMPro.TextContainer self)
{
Delegates.Params_OnDisable @params = new() 
{
self = self
};
if (_beforeOnDisable != null)
{
foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
{
try
{
_beforeOnDisable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDisable != null)
{
foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
{
try
{
_afterOnDisable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnContainerChanged()
{
if (!HookedList.Contains("OnContainerChanged"))
{
HookedList.Add("OnContainerChanged");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "OnContainerChanged", true), OnContainerChanged);

}
}
internal static event Delegates.OnContainerChanged_BeforeArgs _beforeOnContainerChanged;
internal static event Delegates.OnContainerChanged_AfterArgs _afterOnContainerChanged;
private static void OnContainerChanged(Action<TMPro.TextContainer> orig, TMPro.TextContainer self)
{
Delegates.Params_OnContainerChanged @params = new() 
{
self = self
};
if (_beforeOnContainerChanged != null)
{
foreach (Delegates.OnContainerChanged_BeforeArgs toInvoke in _beforeOnContainerChanged.GetInvocationList())
{
try
{
_beforeOnContainerChanged?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnContainerChanged != null)
{
foreach (Delegates.OnContainerChanged_AfterArgs toInvoke in _afterOnContainerChanged.GetInvocationList())
{
try
{
_afterOnContainerChanged.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnRectTransformDimensionsChange()
{
if (!HookedList.Contains("OnRectTransformDimensionsChange"))
{
HookedList.Add("OnRectTransformDimensionsChange");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "OnRectTransformDimensionsChange", true), OnRectTransformDimensionsChange);

}
}
internal static event Delegates.OnRectTransformDimensionsChange_BeforeArgs _beforeOnRectTransformDimensionsChange;
internal static event Delegates.OnRectTransformDimensionsChange_AfterArgs _afterOnRectTransformDimensionsChange;
private static void OnRectTransformDimensionsChange(Action<TMPro.TextContainer> orig, TMPro.TextContainer self)
{
Delegates.Params_OnRectTransformDimensionsChange @params = new() 
{
self = self
};
if (_beforeOnRectTransformDimensionsChange != null)
{
foreach (Delegates.OnRectTransformDimensionsChange_BeforeArgs toInvoke in _beforeOnRectTransformDimensionsChange.GetInvocationList())
{
try
{
_beforeOnRectTransformDimensionsChange?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnRectTransformDimensionsChange != null)
{
foreach (Delegates.OnRectTransformDimensionsChange_AfterArgs toInvoke in _afterOnRectTransformDimensionsChange.GetInvocationList())
{
try
{
_afterOnRectTransformDimensionsChange.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetRect()
{
if (!HookedList.Contains("SetRect"))
{
HookedList.Add("SetRect");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "SetRect", true), SetRect);

}
}
internal static event Delegates.SetRect_BeforeArgs _beforeSetRect;
internal static event Delegates.SetRect_AfterArgs _afterSetRect;
private static void SetRect(Action<TMPro.TextContainer,  UnityEngine.Vector2> orig, TMPro.TextContainer self,  UnityEngine.Vector2 size)
{
Delegates.Params_SetRect @params = new() 
{
self = self
, size = size
};
if (_beforeSetRect != null)
{
foreach (Delegates.SetRect_BeforeArgs toInvoke in _beforeSetRect.GetInvocationList())
{
try
{
_beforeSetRect?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
size = @params.size;
orig(self, size);
if (_afterSetRect != null)
{
foreach (Delegates.SetRect_AfterArgs toInvoke in _afterSetRect.GetInvocationList())
{
try
{
_afterSetRect.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateCorners()
{
if (!HookedList.Contains("UpdateCorners"))
{
HookedList.Add("UpdateCorners");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "UpdateCorners", true), UpdateCorners);

}
}
internal static event Delegates.UpdateCorners_BeforeArgs _beforeUpdateCorners;
internal static event Delegates.UpdateCorners_AfterArgs _afterUpdateCorners;
private static void UpdateCorners(Action<TMPro.TextContainer> orig, TMPro.TextContainer self)
{
Delegates.Params_UpdateCorners @params = new() 
{
self = self
};
if (_beforeUpdateCorners != null)
{
foreach (Delegates.UpdateCorners_BeforeArgs toInvoke in _beforeUpdateCorners.GetInvocationList())
{
try
{
_beforeUpdateCorners?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateCorners != null)
{
foreach (Delegates.UpdateCorners_AfterArgs toInvoke in _afterUpdateCorners.GetInvocationList())
{
try
{
_afterUpdateCorners.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetPivot()
{
if (!HookedList.Contains("GetPivot"))
{
HookedList.Add("GetPivot");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "GetPivot", true), GetPivot);

}
}
internal static event Delegates.GetPivot_BeforeArgs _beforeGetPivot;
internal static event Delegates.GetPivot_AfterArgs _afterGetPivot;
private static UnityEngine.Vector2 GetPivot(Func<TMPro.TextContainer,  TMPro.TextContainerAnchors, UnityEngine.Vector2> orig, TMPro.TextContainer self,  TMPro.TextContainerAnchors anchor)
{
Delegates.Params_GetPivot @params = new() 
{
self = self
, anchor = anchor
};
if (_beforeGetPivot != null)
{
foreach (Delegates.GetPivot_BeforeArgs toInvoke in _beforeGetPivot.GetInvocationList())
{
try
{
_beforeGetPivot?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
anchor = @params.anchor;
var retVal = orig(self, anchor);
if (_afterGetPivot != null)
{
foreach (Delegates.GetPivot_AfterArgs toInvoke in _afterGetPivot.GetInvocationList())
{
try
{
retVal = _afterGetPivot.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetAnchorPosition()
{
if (!HookedList.Contains("GetAnchorPosition"))
{
HookedList.Add("GetAnchorPosition");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "GetAnchorPosition", true), GetAnchorPosition);

}
}
internal static event Delegates.GetAnchorPosition_BeforeArgs _beforeGetAnchorPosition;
internal static event Delegates.GetAnchorPosition_AfterArgs _afterGetAnchorPosition;
private static TMPro.TextContainerAnchors GetAnchorPosition(Func<TMPro.TextContainer,  UnityEngine.Vector2, TMPro.TextContainerAnchors> orig, TMPro.TextContainer self,  UnityEngine.Vector2 pivot)
{
Delegates.Params_GetAnchorPosition @params = new() 
{
self = self
, pivot = pivot
};
if (_beforeGetAnchorPosition != null)
{
foreach (Delegates.GetAnchorPosition_BeforeArgs toInvoke in _beforeGetAnchorPosition.GetInvocationList())
{
try
{
_beforeGetAnchorPosition?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
pivot = @params.pivot;
var retVal = orig(self, pivot);
if (_afterGetAnchorPosition != null)
{
foreach (Delegates.GetAnchorPosition_AfterArgs toInvoke in _afterGetAnchorPosition.GetInvocationList())
{
try
{
retVal = _afterGetAnchorPosition.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_hasChanged
{
public TMPro.TextContainer self;
}
public delegate void get_hasChanged_BeforeArgs(Params_get_hasChanged args);
public delegate bool get_hasChanged_AfterArgs(Params_get_hasChanged args, bool ret);
public delegate bool get_hasChanged_WithArgs (Func<TMPro.TextContainer, bool> orig, TMPro.TextContainer self);
public sealed class Params_set_hasChanged
{
public TMPro.TextContainer self;
public bool value;
}
public delegate void set_hasChanged_BeforeArgs(Params_set_hasChanged args);
public delegate void set_hasChanged_AfterArgs(Params_set_hasChanged args);
public delegate void set_hasChanged_WithArgs (Action<TMPro.TextContainer,  bool> orig, TMPro.TextContainer self,  bool value);
public sealed class Params_get_pivot
{
public TMPro.TextContainer self;
}
public delegate void get_pivot_BeforeArgs(Params_get_pivot args);
public delegate UnityEngine.Vector2 get_pivot_AfterArgs(Params_get_pivot args, UnityEngine.Vector2 ret);
public delegate UnityEngine.Vector2 get_pivot_WithArgs (Func<TMPro.TextContainer, UnityEngine.Vector2> orig, TMPro.TextContainer self);
public sealed class Params_set_pivot
{
public TMPro.TextContainer self;
public UnityEngine.Vector2 value;
}
public delegate void set_pivot_BeforeArgs(Params_set_pivot args);
public delegate void set_pivot_AfterArgs(Params_set_pivot args);
public delegate void set_pivot_WithArgs (Action<TMPro.TextContainer,  UnityEngine.Vector2> orig, TMPro.TextContainer self,  UnityEngine.Vector2 value);
public sealed class Params_get_anchorPosition
{
public TMPro.TextContainer self;
}
public delegate void get_anchorPosition_BeforeArgs(Params_get_anchorPosition args);
public delegate TMPro.TextContainerAnchors get_anchorPosition_AfterArgs(Params_get_anchorPosition args, TMPro.TextContainerAnchors ret);
public delegate TMPro.TextContainerAnchors get_anchorPosition_WithArgs (Func<TMPro.TextContainer, TMPro.TextContainerAnchors> orig, TMPro.TextContainer self);
public sealed class Params_set_anchorPosition
{
public TMPro.TextContainer self;
public TMPro.TextContainerAnchors value;
}
public delegate void set_anchorPosition_BeforeArgs(Params_set_anchorPosition args);
public delegate void set_anchorPosition_AfterArgs(Params_set_anchorPosition args);
public delegate void set_anchorPosition_WithArgs (Action<TMPro.TextContainer,  TMPro.TextContainerAnchors> orig, TMPro.TextContainer self,  TMPro.TextContainerAnchors value);
public sealed class Params_get_rect
{
public TMPro.TextContainer self;
}
public delegate void get_rect_BeforeArgs(Params_get_rect args);
public delegate UnityEngine.Rect get_rect_AfterArgs(Params_get_rect args, UnityEngine.Rect ret);
public delegate UnityEngine.Rect get_rect_WithArgs (Func<TMPro.TextContainer, UnityEngine.Rect> orig, TMPro.TextContainer self);
public sealed class Params_set_rect
{
public TMPro.TextContainer self;
public UnityEngine.Rect value;
}
public delegate void set_rect_BeforeArgs(Params_set_rect args);
public delegate void set_rect_AfterArgs(Params_set_rect args);
public delegate void set_rect_WithArgs (Action<TMPro.TextContainer,  UnityEngine.Rect> orig, TMPro.TextContainer self,  UnityEngine.Rect value);
public sealed class Params_get_size
{
public TMPro.TextContainer self;
}
public delegate void get_size_BeforeArgs(Params_get_size args);
public delegate UnityEngine.Vector2 get_size_AfterArgs(Params_get_size args, UnityEngine.Vector2 ret);
public delegate UnityEngine.Vector2 get_size_WithArgs (Func<TMPro.TextContainer, UnityEngine.Vector2> orig, TMPro.TextContainer self);
public sealed class Params_set_size
{
public TMPro.TextContainer self;
public UnityEngine.Vector2 value;
}
public delegate void set_size_BeforeArgs(Params_set_size args);
public delegate void set_size_AfterArgs(Params_set_size args);
public delegate void set_size_WithArgs (Action<TMPro.TextContainer,  UnityEngine.Vector2> orig, TMPro.TextContainer self,  UnityEngine.Vector2 value);
public sealed class Params_get_width
{
public TMPro.TextContainer self;
}
public delegate void get_width_BeforeArgs(Params_get_width args);
public delegate float get_width_AfterArgs(Params_get_width args, float ret);
public delegate float get_width_WithArgs (Func<TMPro.TextContainer, float> orig, TMPro.TextContainer self);
public sealed class Params_set_width
{
public TMPro.TextContainer self;
public float value;
}
public delegate void set_width_BeforeArgs(Params_set_width args);
public delegate void set_width_AfterArgs(Params_set_width args);
public delegate void set_width_WithArgs (Action<TMPro.TextContainer,  float> orig, TMPro.TextContainer self,  float value);
public sealed class Params_get_height
{
public TMPro.TextContainer self;
}
public delegate void get_height_BeforeArgs(Params_get_height args);
public delegate float get_height_AfterArgs(Params_get_height args, float ret);
public delegate float get_height_WithArgs (Func<TMPro.TextContainer, float> orig, TMPro.TextContainer self);
public sealed class Params_set_height
{
public TMPro.TextContainer self;
public float value;
}
public delegate void set_height_BeforeArgs(Params_set_height args);
public delegate void set_height_AfterArgs(Params_set_height args);
public delegate void set_height_WithArgs (Action<TMPro.TextContainer,  float> orig, TMPro.TextContainer self,  float value);
public sealed class Params_get_isDefaultWidth
{
public TMPro.TextContainer self;
}
public delegate void get_isDefaultWidth_BeforeArgs(Params_get_isDefaultWidth args);
public delegate bool get_isDefaultWidth_AfterArgs(Params_get_isDefaultWidth args, bool ret);
public delegate bool get_isDefaultWidth_WithArgs (Func<TMPro.TextContainer, bool> orig, TMPro.TextContainer self);
public sealed class Params_get_isDefaultHeight
{
public TMPro.TextContainer self;
}
public delegate void get_isDefaultHeight_BeforeArgs(Params_get_isDefaultHeight args);
public delegate bool get_isDefaultHeight_AfterArgs(Params_get_isDefaultHeight args, bool ret);
public delegate bool get_isDefaultHeight_WithArgs (Func<TMPro.TextContainer, bool> orig, TMPro.TextContainer self);
public sealed class Params_get_isAutoFitting
{
public TMPro.TextContainer self;
}
public delegate void get_isAutoFitting_BeforeArgs(Params_get_isAutoFitting args);
public delegate bool get_isAutoFitting_AfterArgs(Params_get_isAutoFitting args, bool ret);
public delegate bool get_isAutoFitting_WithArgs (Func<TMPro.TextContainer, bool> orig, TMPro.TextContainer self);
public sealed class Params_set_isAutoFitting
{
public TMPro.TextContainer self;
public bool value;
}
public delegate void set_isAutoFitting_BeforeArgs(Params_set_isAutoFitting args);
public delegate void set_isAutoFitting_AfterArgs(Params_set_isAutoFitting args);
public delegate void set_isAutoFitting_WithArgs (Action<TMPro.TextContainer,  bool> orig, TMPro.TextContainer self,  bool value);
public sealed class Params_get_corners
{
public TMPro.TextContainer self;
}
public delegate void get_corners_BeforeArgs(Params_get_corners args);
public delegate UnityEngine.Vector3[] get_corners_AfterArgs(Params_get_corners args, UnityEngine.Vector3[] ret);
public delegate UnityEngine.Vector3[] get_corners_WithArgs (Func<TMPro.TextContainer, UnityEngine.Vector3[]> orig, TMPro.TextContainer self);
public sealed class Params_get_worldCorners
{
public TMPro.TextContainer self;
}
public delegate void get_worldCorners_BeforeArgs(Params_get_worldCorners args);
public delegate UnityEngine.Vector3[] get_worldCorners_AfterArgs(Params_get_worldCorners args, UnityEngine.Vector3[] ret);
public delegate UnityEngine.Vector3[] get_worldCorners_WithArgs (Func<TMPro.TextContainer, UnityEngine.Vector3[]> orig, TMPro.TextContainer self);
public sealed class Params_get_margins
{
public TMPro.TextContainer self;
}
public delegate void get_margins_BeforeArgs(Params_get_margins args);
public delegate UnityEngine.Vector4 get_margins_AfterArgs(Params_get_margins args, UnityEngine.Vector4 ret);
public delegate UnityEngine.Vector4 get_margins_WithArgs (Func<TMPro.TextContainer, UnityEngine.Vector4> orig, TMPro.TextContainer self);
public sealed class Params_set_margins
{
public TMPro.TextContainer self;
public UnityEngine.Vector4 value;
}
public delegate void set_margins_BeforeArgs(Params_set_margins args);
public delegate void set_margins_AfterArgs(Params_set_margins args);
public delegate void set_margins_WithArgs (Action<TMPro.TextContainer,  UnityEngine.Vector4> orig, TMPro.TextContainer self,  UnityEngine.Vector4 value);
public sealed class Params_get_rectTransform
{
public TMPro.TextContainer self;
}
public delegate void get_rectTransform_BeforeArgs(Params_get_rectTransform args);
public delegate UnityEngine.RectTransform get_rectTransform_AfterArgs(Params_get_rectTransform args, UnityEngine.RectTransform ret);
public delegate UnityEngine.RectTransform get_rectTransform_WithArgs (Func<TMPro.TextContainer, UnityEngine.RectTransform> orig, TMPro.TextContainer self);
public sealed class Params_get_textMeshPro
{
public TMPro.TextContainer self;
}
public delegate void get_textMeshPro_BeforeArgs(Params_get_textMeshPro args);
public delegate TMPro.TextMeshPro get_textMeshPro_AfterArgs(Params_get_textMeshPro args, TMPro.TextMeshPro ret);
public delegate TMPro.TextMeshPro get_textMeshPro_WithArgs (Func<TMPro.TextContainer, TMPro.TextMeshPro> orig, TMPro.TextContainer self);
public sealed class Params_Awake
{
public TMPro.TextContainer self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<TMPro.TextContainer> orig, TMPro.TextContainer self);
public sealed class Params_OnEnable
{
public TMPro.TextContainer self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<TMPro.TextContainer> orig, TMPro.TextContainer self);
public sealed class Params_OnDisable
{
public TMPro.TextContainer self;
}
public delegate void OnDisable_BeforeArgs(Params_OnDisable args);
public delegate void OnDisable_AfterArgs(Params_OnDisable args);
public delegate void OnDisable_WithArgs (Action<TMPro.TextContainer> orig, TMPro.TextContainer self);
public sealed class Params_OnContainerChanged
{
public TMPro.TextContainer self;
}
public delegate void OnContainerChanged_BeforeArgs(Params_OnContainerChanged args);
public delegate void OnContainerChanged_AfterArgs(Params_OnContainerChanged args);
public delegate void OnContainerChanged_WithArgs (Action<TMPro.TextContainer> orig, TMPro.TextContainer self);
public sealed class Params_OnRectTransformDimensionsChange
{
public TMPro.TextContainer self;
}
public delegate void OnRectTransformDimensionsChange_BeforeArgs(Params_OnRectTransformDimensionsChange args);
public delegate void OnRectTransformDimensionsChange_AfterArgs(Params_OnRectTransformDimensionsChange args);
public delegate void OnRectTransformDimensionsChange_WithArgs (Action<TMPro.TextContainer> orig, TMPro.TextContainer self);
public sealed class Params_SetRect
{
public TMPro.TextContainer self;
public UnityEngine.Vector2 size;
}
public delegate void SetRect_BeforeArgs(Params_SetRect args);
public delegate void SetRect_AfterArgs(Params_SetRect args);
public delegate void SetRect_WithArgs (Action<TMPro.TextContainer,  UnityEngine.Vector2> orig, TMPro.TextContainer self,  UnityEngine.Vector2 size);
public sealed class Params_UpdateCorners
{
public TMPro.TextContainer self;
}
public delegate void UpdateCorners_BeforeArgs(Params_UpdateCorners args);
public delegate void UpdateCorners_AfterArgs(Params_UpdateCorners args);
public delegate void UpdateCorners_WithArgs (Action<TMPro.TextContainer> orig, TMPro.TextContainer self);
public sealed class Params_GetPivot
{
public TMPro.TextContainer self;
public TMPro.TextContainerAnchors anchor;
}
public delegate void GetPivot_BeforeArgs(Params_GetPivot args);
public delegate UnityEngine.Vector2 GetPivot_AfterArgs(Params_GetPivot args, UnityEngine.Vector2 ret);
public delegate UnityEngine.Vector2 GetPivot_WithArgs (Func<TMPro.TextContainer,  TMPro.TextContainerAnchors, UnityEngine.Vector2> orig, TMPro.TextContainer self,  TMPro.TextContainerAnchors anchor);
public sealed class Params_GetAnchorPosition
{
public TMPro.TextContainer self;
public UnityEngine.Vector2 pivot;
}
public delegate void GetAnchorPosition_BeforeArgs(Params_GetAnchorPosition args);
public delegate TMPro.TextContainerAnchors GetAnchorPosition_AfterArgs(Params_GetAnchorPosition args, TMPro.TextContainerAnchors ret);
public delegate TMPro.TextContainerAnchors GetAnchorPosition_WithArgs (Func<TMPro.TextContainer,  UnityEngine.Vector2, TMPro.TextContainerAnchors> orig, TMPro.TextContainer self,  UnityEngine.Vector2 pivot);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_hasChanged_BeforeArgs get_hasChanged
{
add
{

HookHandler._beforeget_hasChanged += value;
HookHandler.Hookget_hasChanged();
}
remove => HookHandler._beforeget_hasChanged -= value;
}
public static event Delegates.set_hasChanged_BeforeArgs set_hasChanged
{
add
{

HookHandler._beforeset_hasChanged += value;
HookHandler.Hookset_hasChanged();
}
remove => HookHandler._beforeset_hasChanged -= value;
}
public static event Delegates.get_pivot_BeforeArgs get_pivot
{
add
{

HookHandler._beforeget_pivot += value;
HookHandler.Hookget_pivot();
}
remove => HookHandler._beforeget_pivot -= value;
}
public static event Delegates.set_pivot_BeforeArgs set_pivot
{
add
{

HookHandler._beforeset_pivot += value;
HookHandler.Hookset_pivot();
}
remove => HookHandler._beforeset_pivot -= value;
}
public static event Delegates.get_anchorPosition_BeforeArgs get_anchorPosition
{
add
{

HookHandler._beforeget_anchorPosition += value;
HookHandler.Hookget_anchorPosition();
}
remove => HookHandler._beforeget_anchorPosition -= value;
}
public static event Delegates.set_anchorPosition_BeforeArgs set_anchorPosition
{
add
{

HookHandler._beforeset_anchorPosition += value;
HookHandler.Hookset_anchorPosition();
}
remove => HookHandler._beforeset_anchorPosition -= value;
}
public static event Delegates.get_rect_BeforeArgs get_rect
{
add
{

HookHandler._beforeget_rect += value;
HookHandler.Hookget_rect();
}
remove => HookHandler._beforeget_rect -= value;
}
public static event Delegates.set_rect_BeforeArgs set_rect
{
add
{

HookHandler._beforeset_rect += value;
HookHandler.Hookset_rect();
}
remove => HookHandler._beforeset_rect -= value;
}
public static event Delegates.get_size_BeforeArgs get_size
{
add
{

HookHandler._beforeget_size += value;
HookHandler.Hookget_size();
}
remove => HookHandler._beforeget_size -= value;
}
public static event Delegates.set_size_BeforeArgs set_size
{
add
{

HookHandler._beforeset_size += value;
HookHandler.Hookset_size();
}
remove => HookHandler._beforeset_size -= value;
}
public static event Delegates.get_width_BeforeArgs get_width
{
add
{

HookHandler._beforeget_width += value;
HookHandler.Hookget_width();
}
remove => HookHandler._beforeget_width -= value;
}
public static event Delegates.set_width_BeforeArgs set_width
{
add
{

HookHandler._beforeset_width += value;
HookHandler.Hookset_width();
}
remove => HookHandler._beforeset_width -= value;
}
public static event Delegates.get_height_BeforeArgs get_height
{
add
{

HookHandler._beforeget_height += value;
HookHandler.Hookget_height();
}
remove => HookHandler._beforeget_height -= value;
}
public static event Delegates.set_height_BeforeArgs set_height
{
add
{

HookHandler._beforeset_height += value;
HookHandler.Hookset_height();
}
remove => HookHandler._beforeset_height -= value;
}
public static event Delegates.get_isDefaultWidth_BeforeArgs get_isDefaultWidth
{
add
{

HookHandler._beforeget_isDefaultWidth += value;
HookHandler.Hookget_isDefaultWidth();
}
remove => HookHandler._beforeget_isDefaultWidth -= value;
}
public static event Delegates.get_isDefaultHeight_BeforeArgs get_isDefaultHeight
{
add
{

HookHandler._beforeget_isDefaultHeight += value;
HookHandler.Hookget_isDefaultHeight();
}
remove => HookHandler._beforeget_isDefaultHeight -= value;
}
public static event Delegates.get_isAutoFitting_BeforeArgs get_isAutoFitting
{
add
{

HookHandler._beforeget_isAutoFitting += value;
HookHandler.Hookget_isAutoFitting();
}
remove => HookHandler._beforeget_isAutoFitting -= value;
}
public static event Delegates.set_isAutoFitting_BeforeArgs set_isAutoFitting
{
add
{

HookHandler._beforeset_isAutoFitting += value;
HookHandler.Hookset_isAutoFitting();
}
remove => HookHandler._beforeset_isAutoFitting -= value;
}
public static event Delegates.get_corners_BeforeArgs get_corners
{
add
{

HookHandler._beforeget_corners += value;
HookHandler.Hookget_corners();
}
remove => HookHandler._beforeget_corners -= value;
}
public static event Delegates.get_worldCorners_BeforeArgs get_worldCorners
{
add
{

HookHandler._beforeget_worldCorners += value;
HookHandler.Hookget_worldCorners();
}
remove => HookHandler._beforeget_worldCorners -= value;
}
public static event Delegates.get_margins_BeforeArgs get_margins
{
add
{

HookHandler._beforeget_margins += value;
HookHandler.Hookget_margins();
}
remove => HookHandler._beforeget_margins -= value;
}
public static event Delegates.set_margins_BeforeArgs set_margins
{
add
{

HookHandler._beforeset_margins += value;
HookHandler.Hookset_margins();
}
remove => HookHandler._beforeset_margins -= value;
}
public static event Delegates.get_rectTransform_BeforeArgs get_rectTransform
{
add
{

HookHandler._beforeget_rectTransform += value;
HookHandler.Hookget_rectTransform();
}
remove => HookHandler._beforeget_rectTransform -= value;
}
public static event Delegates.get_textMeshPro_BeforeArgs get_textMeshPro
{
add
{

HookHandler._beforeget_textMeshPro += value;
HookHandler.Hookget_textMeshPro();
}
remove => HookHandler._beforeget_textMeshPro -= value;
}
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.OnDisable_BeforeArgs OnDisable
{
add
{

HookHandler._beforeOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._beforeOnDisable -= value;
}
public static event Delegates.OnContainerChanged_BeforeArgs OnContainerChanged
{
add
{

HookHandler._beforeOnContainerChanged += value;
HookHandler.HookOnContainerChanged();
}
remove => HookHandler._beforeOnContainerChanged -= value;
}
public static event Delegates.OnRectTransformDimensionsChange_BeforeArgs OnRectTransformDimensionsChange
{
add
{

HookHandler._beforeOnRectTransformDimensionsChange += value;
HookHandler.HookOnRectTransformDimensionsChange();
}
remove => HookHandler._beforeOnRectTransformDimensionsChange -= value;
}
public static event Delegates.SetRect_BeforeArgs SetRect
{
add
{

HookHandler._beforeSetRect += value;
HookHandler.HookSetRect();
}
remove => HookHandler._beforeSetRect -= value;
}
public static event Delegates.UpdateCorners_BeforeArgs UpdateCorners
{
add
{

HookHandler._beforeUpdateCorners += value;
HookHandler.HookUpdateCorners();
}
remove => HookHandler._beforeUpdateCorners -= value;
}
public static event Delegates.GetPivot_BeforeArgs GetPivot
{
add
{

HookHandler._beforeGetPivot += value;
HookHandler.HookGetPivot();
}
remove => HookHandler._beforeGetPivot -= value;
}
public static event Delegates.GetAnchorPosition_BeforeArgs GetAnchorPosition
{
add
{

HookHandler._beforeGetAnchorPosition += value;
HookHandler.HookGetAnchorPosition();
}
remove => HookHandler._beforeGetAnchorPosition -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_hasChanged_AfterArgs get_hasChanged
{
add
{

HookHandler._afterget_hasChanged += value;
HookHandler.Hookget_hasChanged();
}
remove => HookHandler._afterget_hasChanged -= value;
}
public static event Delegates.set_hasChanged_AfterArgs set_hasChanged
{
add
{

HookHandler._afterset_hasChanged += value;
HookHandler.Hookset_hasChanged();
}
remove => HookHandler._afterset_hasChanged -= value;
}
public static event Delegates.get_pivot_AfterArgs get_pivot
{
add
{

HookHandler._afterget_pivot += value;
HookHandler.Hookget_pivot();
}
remove => HookHandler._afterget_pivot -= value;
}
public static event Delegates.set_pivot_AfterArgs set_pivot
{
add
{

HookHandler._afterset_pivot += value;
HookHandler.Hookset_pivot();
}
remove => HookHandler._afterset_pivot -= value;
}
public static event Delegates.get_anchorPosition_AfterArgs get_anchorPosition
{
add
{

HookHandler._afterget_anchorPosition += value;
HookHandler.Hookget_anchorPosition();
}
remove => HookHandler._afterget_anchorPosition -= value;
}
public static event Delegates.set_anchorPosition_AfterArgs set_anchorPosition
{
add
{

HookHandler._afterset_anchorPosition += value;
HookHandler.Hookset_anchorPosition();
}
remove => HookHandler._afterset_anchorPosition -= value;
}
public static event Delegates.get_rect_AfterArgs get_rect
{
add
{

HookHandler._afterget_rect += value;
HookHandler.Hookget_rect();
}
remove => HookHandler._afterget_rect -= value;
}
public static event Delegates.set_rect_AfterArgs set_rect
{
add
{

HookHandler._afterset_rect += value;
HookHandler.Hookset_rect();
}
remove => HookHandler._afterset_rect -= value;
}
public static event Delegates.get_size_AfterArgs get_size
{
add
{

HookHandler._afterget_size += value;
HookHandler.Hookget_size();
}
remove => HookHandler._afterget_size -= value;
}
public static event Delegates.set_size_AfterArgs set_size
{
add
{

HookHandler._afterset_size += value;
HookHandler.Hookset_size();
}
remove => HookHandler._afterset_size -= value;
}
public static event Delegates.get_width_AfterArgs get_width
{
add
{

HookHandler._afterget_width += value;
HookHandler.Hookget_width();
}
remove => HookHandler._afterget_width -= value;
}
public static event Delegates.set_width_AfterArgs set_width
{
add
{

HookHandler._afterset_width += value;
HookHandler.Hookset_width();
}
remove => HookHandler._afterset_width -= value;
}
public static event Delegates.get_height_AfterArgs get_height
{
add
{

HookHandler._afterget_height += value;
HookHandler.Hookget_height();
}
remove => HookHandler._afterget_height -= value;
}
public static event Delegates.set_height_AfterArgs set_height
{
add
{

HookHandler._afterset_height += value;
HookHandler.Hookset_height();
}
remove => HookHandler._afterset_height -= value;
}
public static event Delegates.get_isDefaultWidth_AfterArgs get_isDefaultWidth
{
add
{

HookHandler._afterget_isDefaultWidth += value;
HookHandler.Hookget_isDefaultWidth();
}
remove => HookHandler._afterget_isDefaultWidth -= value;
}
public static event Delegates.get_isDefaultHeight_AfterArgs get_isDefaultHeight
{
add
{

HookHandler._afterget_isDefaultHeight += value;
HookHandler.Hookget_isDefaultHeight();
}
remove => HookHandler._afterget_isDefaultHeight -= value;
}
public static event Delegates.get_isAutoFitting_AfterArgs get_isAutoFitting
{
add
{

HookHandler._afterget_isAutoFitting += value;
HookHandler.Hookget_isAutoFitting();
}
remove => HookHandler._afterget_isAutoFitting -= value;
}
public static event Delegates.set_isAutoFitting_AfterArgs set_isAutoFitting
{
add
{

HookHandler._afterset_isAutoFitting += value;
HookHandler.Hookset_isAutoFitting();
}
remove => HookHandler._afterset_isAutoFitting -= value;
}
public static event Delegates.get_corners_AfterArgs get_corners
{
add
{

HookHandler._afterget_corners += value;
HookHandler.Hookget_corners();
}
remove => HookHandler._afterget_corners -= value;
}
public static event Delegates.get_worldCorners_AfterArgs get_worldCorners
{
add
{

HookHandler._afterget_worldCorners += value;
HookHandler.Hookget_worldCorners();
}
remove => HookHandler._afterget_worldCorners -= value;
}
public static event Delegates.get_margins_AfterArgs get_margins
{
add
{

HookHandler._afterget_margins += value;
HookHandler.Hookget_margins();
}
remove => HookHandler._afterget_margins -= value;
}
public static event Delegates.set_margins_AfterArgs set_margins
{
add
{

HookHandler._afterset_margins += value;
HookHandler.Hookset_margins();
}
remove => HookHandler._afterset_margins -= value;
}
public static event Delegates.get_rectTransform_AfterArgs get_rectTransform
{
add
{

HookHandler._afterget_rectTransform += value;
HookHandler.Hookget_rectTransform();
}
remove => HookHandler._afterget_rectTransform -= value;
}
public static event Delegates.get_textMeshPro_AfterArgs get_textMeshPro
{
add
{

HookHandler._afterget_textMeshPro += value;
HookHandler.Hookget_textMeshPro();
}
remove => HookHandler._afterget_textMeshPro -= value;
}
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.OnDisable_AfterArgs OnDisable
{
add
{

HookHandler._afterOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._afterOnDisable -= value;
}
public static event Delegates.OnContainerChanged_AfterArgs OnContainerChanged
{
add
{

HookHandler._afterOnContainerChanged += value;
HookHandler.HookOnContainerChanged();
}
remove => HookHandler._afterOnContainerChanged -= value;
}
public static event Delegates.OnRectTransformDimensionsChange_AfterArgs OnRectTransformDimensionsChange
{
add
{

HookHandler._afterOnRectTransformDimensionsChange += value;
HookHandler.HookOnRectTransformDimensionsChange();
}
remove => HookHandler._afterOnRectTransformDimensionsChange -= value;
}
public static event Delegates.SetRect_AfterArgs SetRect
{
add
{

HookHandler._afterSetRect += value;
HookHandler.HookSetRect();
}
remove => HookHandler._afterSetRect -= value;
}
public static event Delegates.UpdateCorners_AfterArgs UpdateCorners
{
add
{

HookHandler._afterUpdateCorners += value;
HookHandler.HookUpdateCorners();
}
remove => HookHandler._afterUpdateCorners -= value;
}
public static event Delegates.GetPivot_AfterArgs GetPivot
{
add
{

HookHandler._afterGetPivot += value;
HookHandler.HookGetPivot();
}
remove => HookHandler._afterGetPivot -= value;
}
public static event Delegates.GetAnchorPosition_AfterArgs GetAnchorPosition
{
add
{

HookHandler._afterGetAnchorPosition += value;
HookHandler.HookGetAnchorPosition();
}
remove => HookHandler._afterGetAnchorPosition -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_hasChanged_WithArgs get_hasChanged
{
add => HookEndpointManager.Add<Delegates.get_hasChanged_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_hasChanged", true), value);
remove => HookEndpointManager.Remove<Delegates.get_hasChanged_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_hasChanged", true), value);
}
public static event Delegates.set_hasChanged_WithArgs set_hasChanged
{
add => HookEndpointManager.Add<Delegates.set_hasChanged_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_hasChanged", true), value);
remove => HookEndpointManager.Remove<Delegates.set_hasChanged_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_hasChanged", true), value);
}
public static event Delegates.get_pivot_WithArgs get_pivot
{
add => HookEndpointManager.Add<Delegates.get_pivot_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_pivot", true), value);
remove => HookEndpointManager.Remove<Delegates.get_pivot_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_pivot", true), value);
}
public static event Delegates.set_pivot_WithArgs set_pivot
{
add => HookEndpointManager.Add<Delegates.set_pivot_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_pivot", true), value);
remove => HookEndpointManager.Remove<Delegates.set_pivot_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_pivot", true), value);
}
public static event Delegates.get_anchorPosition_WithArgs get_anchorPosition
{
add => HookEndpointManager.Add<Delegates.get_anchorPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_anchorPosition", true), value);
remove => HookEndpointManager.Remove<Delegates.get_anchorPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_anchorPosition", true), value);
}
public static event Delegates.set_anchorPosition_WithArgs set_anchorPosition
{
add => HookEndpointManager.Add<Delegates.set_anchorPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_anchorPosition", true), value);
remove => HookEndpointManager.Remove<Delegates.set_anchorPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_anchorPosition", true), value);
}
public static event Delegates.get_rect_WithArgs get_rect
{
add => HookEndpointManager.Add<Delegates.get_rect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_rect", true), value);
remove => HookEndpointManager.Remove<Delegates.get_rect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_rect", true), value);
}
public static event Delegates.set_rect_WithArgs set_rect
{
add => HookEndpointManager.Add<Delegates.set_rect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_rect", true), value);
remove => HookEndpointManager.Remove<Delegates.set_rect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_rect", true), value);
}
public static event Delegates.get_size_WithArgs get_size
{
add => HookEndpointManager.Add<Delegates.get_size_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_size", true), value);
remove => HookEndpointManager.Remove<Delegates.get_size_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_size", true), value);
}
public static event Delegates.set_size_WithArgs set_size
{
add => HookEndpointManager.Add<Delegates.set_size_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_size", true), value);
remove => HookEndpointManager.Remove<Delegates.set_size_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_size", true), value);
}
public static event Delegates.get_width_WithArgs get_width
{
add => HookEndpointManager.Add<Delegates.get_width_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_width", true), value);
remove => HookEndpointManager.Remove<Delegates.get_width_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_width", true), value);
}
public static event Delegates.set_width_WithArgs set_width
{
add => HookEndpointManager.Add<Delegates.set_width_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_width", true), value);
remove => HookEndpointManager.Remove<Delegates.set_width_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_width", true), value);
}
public static event Delegates.get_height_WithArgs get_height
{
add => HookEndpointManager.Add<Delegates.get_height_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_height", true), value);
remove => HookEndpointManager.Remove<Delegates.get_height_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_height", true), value);
}
public static event Delegates.set_height_WithArgs set_height
{
add => HookEndpointManager.Add<Delegates.set_height_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_height", true), value);
remove => HookEndpointManager.Remove<Delegates.set_height_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_height", true), value);
}
public static event Delegates.get_isDefaultWidth_WithArgs get_isDefaultWidth
{
add => HookEndpointManager.Add<Delegates.get_isDefaultWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_isDefaultWidth", true), value);
remove => HookEndpointManager.Remove<Delegates.get_isDefaultWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_isDefaultWidth", true), value);
}
public static event Delegates.get_isDefaultHeight_WithArgs get_isDefaultHeight
{
add => HookEndpointManager.Add<Delegates.get_isDefaultHeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_isDefaultHeight", true), value);
remove => HookEndpointManager.Remove<Delegates.get_isDefaultHeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_isDefaultHeight", true), value);
}
public static event Delegates.get_isAutoFitting_WithArgs get_isAutoFitting
{
add => HookEndpointManager.Add<Delegates.get_isAutoFitting_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_isAutoFitting", true), value);
remove => HookEndpointManager.Remove<Delegates.get_isAutoFitting_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_isAutoFitting", true), value);
}
public static event Delegates.set_isAutoFitting_WithArgs set_isAutoFitting
{
add => HookEndpointManager.Add<Delegates.set_isAutoFitting_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_isAutoFitting", true), value);
remove => HookEndpointManager.Remove<Delegates.set_isAutoFitting_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_isAutoFitting", true), value);
}
public static event Delegates.get_corners_WithArgs get_corners
{
add => HookEndpointManager.Add<Delegates.get_corners_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_corners", true), value);
remove => HookEndpointManager.Remove<Delegates.get_corners_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_corners", true), value);
}
public static event Delegates.get_worldCorners_WithArgs get_worldCorners
{
add => HookEndpointManager.Add<Delegates.get_worldCorners_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_worldCorners", true), value);
remove => HookEndpointManager.Remove<Delegates.get_worldCorners_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_worldCorners", true), value);
}
public static event Delegates.get_margins_WithArgs get_margins
{
add => HookEndpointManager.Add<Delegates.get_margins_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_margins", true), value);
remove => HookEndpointManager.Remove<Delegates.get_margins_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_margins", true), value);
}
public static event Delegates.set_margins_WithArgs set_margins
{
add => HookEndpointManager.Add<Delegates.set_margins_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_margins", true), value);
remove => HookEndpointManager.Remove<Delegates.set_margins_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "set_margins", true), value);
}
public static event Delegates.get_rectTransform_WithArgs get_rectTransform
{
add => HookEndpointManager.Add<Delegates.get_rectTransform_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_rectTransform", true), value);
remove => HookEndpointManager.Remove<Delegates.get_rectTransform_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_rectTransform", true), value);
}
public static event Delegates.get_textMeshPro_WithArgs get_textMeshPro
{
add => HookEndpointManager.Add<Delegates.get_textMeshPro_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_textMeshPro", true), value);
remove => HookEndpointManager.Remove<Delegates.get_textMeshPro_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "get_textMeshPro", true), value);
}
public static event Delegates.Awake_WithArgs Awake
{
add => HookEndpointManager.Add<Delegates.Awake_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "Awake", true), value);
remove => HookEndpointManager.Remove<Delegates.Awake_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "Awake", true), value);
}
public static event Delegates.OnEnable_WithArgs OnEnable
{
add => HookEndpointManager.Add<Delegates.OnEnable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "OnEnable", true), value);
remove => HookEndpointManager.Remove<Delegates.OnEnable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "OnEnable", true), value);
}
public static event Delegates.OnDisable_WithArgs OnDisable
{
add => HookEndpointManager.Add<Delegates.OnDisable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "OnDisable", true), value);
remove => HookEndpointManager.Remove<Delegates.OnDisable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "OnDisable", true), value);
}
public static event Delegates.OnContainerChanged_WithArgs OnContainerChanged
{
add => HookEndpointManager.Add<Delegates.OnContainerChanged_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "OnContainerChanged", true), value);
remove => HookEndpointManager.Remove<Delegates.OnContainerChanged_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "OnContainerChanged", true), value);
}
public static event Delegates.OnRectTransformDimensionsChange_WithArgs OnRectTransformDimensionsChange
{
add => HookEndpointManager.Add<Delegates.OnRectTransformDimensionsChange_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "OnRectTransformDimensionsChange", true), value);
remove => HookEndpointManager.Remove<Delegates.OnRectTransformDimensionsChange_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "OnRectTransformDimensionsChange", true), value);
}
public static event Delegates.SetRect_WithArgs SetRect
{
add => HookEndpointManager.Add<Delegates.SetRect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "SetRect", true), value);
remove => HookEndpointManager.Remove<Delegates.SetRect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "SetRect", true), value);
}
public static event Delegates.UpdateCorners_WithArgs UpdateCorners
{
add => HookEndpointManager.Add<Delegates.UpdateCorners_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "UpdateCorners", true), value);
remove => HookEndpointManager.Remove<Delegates.UpdateCorners_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "UpdateCorners", true), value);
}
public static event Delegates.GetPivot_WithArgs GetPivot
{
add => HookEndpointManager.Add<Delegates.GetPivot_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "GetPivot", true), value);
remove => HookEndpointManager.Remove<Delegates.GetPivot_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "GetPivot", true), value);
}
public static event Delegates.GetAnchorPosition_WithArgs GetAnchorPosition
{
add => HookEndpointManager.Add<Delegates.GetAnchorPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "GetAnchorPosition", true), value);
remove => HookEndpointManager.Remove<Delegates.GetAnchorPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextContainer), "GetAnchorPosition", true), value);
}
}

}
