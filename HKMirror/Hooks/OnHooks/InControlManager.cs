using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for InControlManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnInControlManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControlManager), "OnEnable"), OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(Action<InControlManager> orig, InControlManager self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControlManager), "OnDisable"), OnDisable);
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(Action<InControlManager> orig, InControlManager self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControlManager), "Update"), Update);
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(Action<InControlManager> orig, InControlManager self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFixedUpdate()
        {
            if (!HookedList.Contains("FixedUpdate"))
            {
                HookedList.Add("FixedUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControlManager), "FixedUpdate"), FixedUpdate);
            }
        }

        internal static event Delegates.FixedUpdate_BeforeArgs _beforeFixedUpdate;
        internal static event Delegates.FixedUpdate_AfterArgs _afterFixedUpdate;

        private static void FixedUpdate(Action<InControlManager> orig, InControlManager self)
        {
            Delegates.Params_FixedUpdate @params = new()
            {
                self = self
            };
            if (_beforeFixedUpdate != null)
                foreach (Delegates.FixedUpdate_BeforeArgs toInvoke in _beforeFixedUpdate.GetInvocationList())
                    try
                    {
                        _beforeFixedUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterFixedUpdate != null)
                foreach (Delegates.FixedUpdate_AfterArgs toInvoke in _afterFixedUpdate.GetInvocationList())
                    try
                    {
                        _afterFixedUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnApplicationFocus()
        {
            if (!HookedList.Contains("OnApplicationFocus"))
            {
                HookedList.Add("OnApplicationFocus");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControlManager), "OnApplicationFocus"),
                    OnApplicationFocus);
            }
        }

        internal static event Delegates.OnApplicationFocus_BeforeArgs _beforeOnApplicationFocus;
        internal static event Delegates.OnApplicationFocus_AfterArgs _afterOnApplicationFocus;

        private static void OnApplicationFocus(Action<InControlManager, bool> orig, InControlManager self,
            bool focusState)
        {
            Delegates.Params_OnApplicationFocus @params = new()
            {
                self = self, focusState = focusState
            };
            if (_beforeOnApplicationFocus != null)
                foreach (Delegates.OnApplicationFocus_BeforeArgs toInvoke in
                         _beforeOnApplicationFocus.GetInvocationList())
                    try
                    {
                        _beforeOnApplicationFocus?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            focusState = @params.focusState;
            orig(self, focusState);
            if (_afterOnApplicationFocus != null)
                foreach (Delegates.OnApplicationFocus_AfterArgs toInvoke in
                         _afterOnApplicationFocus.GetInvocationList())
                    try
                    {
                        _afterOnApplicationFocus.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnApplicationPause()
        {
            if (!HookedList.Contains("OnApplicationPause"))
            {
                HookedList.Add("OnApplicationPause");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControlManager), "OnApplicationPause"),
                    OnApplicationPause);
            }
        }

        internal static event Delegates.OnApplicationPause_BeforeArgs _beforeOnApplicationPause;
        internal static event Delegates.OnApplicationPause_AfterArgs _afterOnApplicationPause;

        private static void OnApplicationPause(Action<InControlManager, bool> orig, InControlManager self,
            bool pauseState)
        {
            Delegates.Params_OnApplicationPause @params = new()
            {
                self = self, pauseState = pauseState
            };
            if (_beforeOnApplicationPause != null)
                foreach (Delegates.OnApplicationPause_BeforeArgs toInvoke in
                         _beforeOnApplicationPause.GetInvocationList())
                    try
                    {
                        _beforeOnApplicationPause?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            pauseState = @params.pauseState;
            orig(self, pauseState);
            if (_afterOnApplicationPause != null)
                foreach (Delegates.OnApplicationPause_AfterArgs toInvoke in
                         _afterOnApplicationPause.GetInvocationList())
                    try
                    {
                        _afterOnApplicationPause.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnApplicationQuit()
        {
            if (!HookedList.Contains("OnApplicationQuit"))
            {
                HookedList.Add("OnApplicationQuit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControlManager), "OnApplicationQuit"),
                    OnApplicationQuit);
            }
        }

        internal static event Delegates.OnApplicationQuit_BeforeArgs _beforeOnApplicationQuit;
        internal static event Delegates.OnApplicationQuit_AfterArgs _afterOnApplicationQuit;

        private static void OnApplicationQuit(Action<InControlManager> orig, InControlManager self)
        {
            Delegates.Params_OnApplicationQuit @params = new()
            {
                self = self
            };
            if (_beforeOnApplicationQuit != null)
                foreach (Delegates.OnApplicationQuit_BeforeArgs toInvoke in
                         _beforeOnApplicationQuit.GetInvocationList())
                    try
                    {
                        _beforeOnApplicationQuit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnApplicationQuit != null)
                foreach (Delegates.OnApplicationQuit_AfterArgs toInvoke in _afterOnApplicationQuit.GetInvocationList())
                    try
                    {
                        _afterOnApplicationQuit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnSceneWasLoaded()
        {
            if (!HookedList.Contains("OnSceneWasLoaded"))
            {
                HookedList.Add("OnSceneWasLoaded");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControlManager), "OnSceneWasLoaded"),
                    OnSceneWasLoaded);
            }
        }

        internal static event Delegates.OnSceneWasLoaded_BeforeArgs _beforeOnSceneWasLoaded;
        internal static event Delegates.OnSceneWasLoaded_AfterArgs _afterOnSceneWasLoaded;

        private static void OnSceneWasLoaded(Action<InControlManager, Scene, LoadSceneMode> orig, InControlManager self,
            Scene scene, LoadSceneMode loadSceneMode)
        {
            Delegates.Params_OnSceneWasLoaded @params = new()
            {
                self = self, scene = scene, loadSceneMode = loadSceneMode
            };
            if (_beforeOnSceneWasLoaded != null)
                foreach (Delegates.OnSceneWasLoaded_BeforeArgs toInvoke in _beforeOnSceneWasLoaded.GetInvocationList())
                    try
                    {
                        _beforeOnSceneWasLoaded?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            scene = @params.scene;
            loadSceneMode = @params.loadSceneMode;
            orig(self, scene, loadSceneMode);
            if (_afterOnSceneWasLoaded != null)
                foreach (Delegates.OnSceneWasLoaded_AfterArgs toInvoke in _afterOnSceneWasLoaded.GetInvocationList())
                    try
                    {
                        _afterOnSceneWasLoaded.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLogMessage()
        {
            if (!HookedList.Contains("LogMessage"))
            {
                HookedList.Add("LogMessage");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControlManager), "LogMessage", false), LogMessage);
            }
        }

        internal static event Delegates.LogMessage_BeforeArgs _beforeLogMessage;
        internal static event Delegates.LogMessage_AfterArgs _afterLogMessage;

        private static void LogMessage(Action<LogMessage> orig, LogMessage logMessage)
        {
            Delegates.Params_LogMessage @params = new()
            {
                logMessage = logMessage
            };
            if (_beforeLogMessage != null)
                foreach (Delegates.LogMessage_BeforeArgs toInvoke in _beforeLogMessage.GetInvocationList())
                    try
                    {
                        _beforeLogMessage?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            logMessage = @params.logMessage;
            orig(logMessage);
            if (_afterLogMessage != null)
                foreach (Delegates.LogMessage_AfterArgs toInvoke in _afterLogMessage.GetInvocationList())
                    try
                    {
                        _afterLogMessage.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void FixedUpdate_AfterArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_BeforeArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_WithArgs(Action<InControlManager> orig, InControlManager self);

        public delegate void LogMessage_AfterArgs(Params_LogMessage args);

        public delegate void LogMessage_BeforeArgs(Params_LogMessage args);

        public delegate void LogMessage_WithArgs(Action<LogMessage> orig, LogMessage logMessage);

        public delegate void OnApplicationFocus_AfterArgs(Params_OnApplicationFocus args);

        public delegate void OnApplicationFocus_BeforeArgs(Params_OnApplicationFocus args);

        public delegate void OnApplicationFocus_WithArgs(Action<InControlManager, bool> orig, InControlManager self,
            bool focusState);

        public delegate void OnApplicationPause_AfterArgs(Params_OnApplicationPause args);

        public delegate void OnApplicationPause_BeforeArgs(Params_OnApplicationPause args);

        public delegate void OnApplicationPause_WithArgs(Action<InControlManager, bool> orig, InControlManager self,
            bool pauseState);

        public delegate void OnApplicationQuit_AfterArgs(Params_OnApplicationQuit args);

        public delegate void OnApplicationQuit_BeforeArgs(Params_OnApplicationQuit args);

        public delegate void OnApplicationQuit_WithArgs(Action<InControlManager> orig, InControlManager self);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<InControlManager> orig, InControlManager self);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<InControlManager> orig, InControlManager self);

        public delegate void OnSceneWasLoaded_AfterArgs(Params_OnSceneWasLoaded args);

        public delegate void OnSceneWasLoaded_BeforeArgs(Params_OnSceneWasLoaded args);

        public delegate void OnSceneWasLoaded_WithArgs(Action<InControlManager, Scene, LoadSceneMode> orig,
            InControlManager self, Scene scene, LoadSceneMode loadSceneMode);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<InControlManager> orig, InControlManager self);

        public sealed class Params_OnEnable
        {
            public InControlManager self;
        }

        public sealed class Params_OnDisable
        {
            public InControlManager self;
        }

        public sealed class Params_Update
        {
            public InControlManager self;
        }

        public sealed class Params_FixedUpdate
        {
            public InControlManager self;
        }

        public sealed class Params_OnApplicationFocus
        {
            public bool focusState;
            public InControlManager self;
        }

        public sealed class Params_OnApplicationPause
        {
            public bool pauseState;
            public InControlManager self;
        }

        public sealed class Params_OnApplicationQuit
        {
            public InControlManager self;
        }

        public sealed class Params_OnSceneWasLoaded
        {
            public LoadSceneMode loadSceneMode;
            public Scene scene;
            public InControlManager self;
        }

        public sealed class Params_LogMessage
        {
            public LogMessage logMessage;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.FixedUpdate_BeforeArgs FixedUpdate
        {
            add
            {
                HookHandler._beforeFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._beforeFixedUpdate -= value;
        }

        public static event Delegates.OnApplicationFocus_BeforeArgs OnApplicationFocus
        {
            add
            {
                HookHandler._beforeOnApplicationFocus += value;
                HookHandler.HookOnApplicationFocus();
            }
            remove => HookHandler._beforeOnApplicationFocus -= value;
        }

        public static event Delegates.OnApplicationPause_BeforeArgs OnApplicationPause
        {
            add
            {
                HookHandler._beforeOnApplicationPause += value;
                HookHandler.HookOnApplicationPause();
            }
            remove => HookHandler._beforeOnApplicationPause -= value;
        }

        public static event Delegates.OnApplicationQuit_BeforeArgs OnApplicationQuit
        {
            add
            {
                HookHandler._beforeOnApplicationQuit += value;
                HookHandler.HookOnApplicationQuit();
            }
            remove => HookHandler._beforeOnApplicationQuit -= value;
        }

        public static event Delegates.OnSceneWasLoaded_BeforeArgs OnSceneWasLoaded
        {
            add
            {
                HookHandler._beforeOnSceneWasLoaded += value;
                HookHandler.HookOnSceneWasLoaded();
            }
            remove => HookHandler._beforeOnSceneWasLoaded -= value;
        }

        public static event Delegates.LogMessage_BeforeArgs LogMessage
        {
            add
            {
                HookHandler._beforeLogMessage += value;
                HookHandler.HookLogMessage();
            }
            remove => HookHandler._beforeLogMessage -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.FixedUpdate_AfterArgs FixedUpdate
        {
            add
            {
                HookHandler._afterFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._afterFixedUpdate -= value;
        }

        public static event Delegates.OnApplicationFocus_AfterArgs OnApplicationFocus
        {
            add
            {
                HookHandler._afterOnApplicationFocus += value;
                HookHandler.HookOnApplicationFocus();
            }
            remove => HookHandler._afterOnApplicationFocus -= value;
        }

        public static event Delegates.OnApplicationPause_AfterArgs OnApplicationPause
        {
            add
            {
                HookHandler._afterOnApplicationPause += value;
                HookHandler.HookOnApplicationPause();
            }
            remove => HookHandler._afterOnApplicationPause -= value;
        }

        public static event Delegates.OnApplicationQuit_AfterArgs OnApplicationQuit
        {
            add
            {
                HookHandler._afterOnApplicationQuit += value;
                HookHandler.HookOnApplicationQuit();
            }
            remove => HookHandler._afterOnApplicationQuit -= value;
        }

        public static event Delegates.OnSceneWasLoaded_AfterArgs OnSceneWasLoaded
        {
            add
            {
                HookHandler._afterOnSceneWasLoaded += value;
                HookHandler.HookOnSceneWasLoaded();
            }
            remove => HookHandler._afterOnSceneWasLoaded -= value;
        }

        public static event Delegates.LogMessage_AfterArgs LogMessage
        {
            add
            {
                HookHandler._afterLogMessage += value;
                HookHandler.HookLogMessage();
            }
            remove => HookHandler._afterLogMessage -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.OnEnable_WithArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControlManager), "OnEnable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControlManager), "OnEnable"), value);
        }

        public static event Delegates.OnDisable_WithArgs OnDisable
        {
            add => HookEndpointManager.Add<Delegates.OnDisable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControlManager), "OnDisable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDisable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControlManager), "OnDisable"), value);
        }

        public static event Delegates.Update_WithArgs Update
        {
            add => HookEndpointManager.Add<Delegates.Update_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControlManager), "Update"), value);
            remove => HookEndpointManager.Remove<Delegates.Update_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControlManager), "Update"), value);
        }

        public static event Delegates.FixedUpdate_WithArgs FixedUpdate
        {
            add => HookEndpointManager.Add<Delegates.FixedUpdate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControlManager), "FixedUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.FixedUpdate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControlManager), "FixedUpdate"), value);
        }

        public static event Delegates.OnApplicationFocus_WithArgs OnApplicationFocus
        {
            add => HookEndpointManager.Add<Delegates.OnApplicationFocus_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControlManager), "OnApplicationFocus"), value);
            remove => HookEndpointManager.Remove<Delegates.OnApplicationFocus_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControlManager), "OnApplicationFocus"), value);
        }

        public static event Delegates.OnApplicationPause_WithArgs OnApplicationPause
        {
            add => HookEndpointManager.Add<Delegates.OnApplicationPause_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControlManager), "OnApplicationPause"), value);
            remove => HookEndpointManager.Remove<Delegates.OnApplicationPause_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControlManager), "OnApplicationPause"), value);
        }

        public static event Delegates.OnApplicationQuit_WithArgs OnApplicationQuit
        {
            add => HookEndpointManager.Add<Delegates.OnApplicationQuit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControlManager), "OnApplicationQuit"), value);
            remove => HookEndpointManager.Remove<Delegates.OnApplicationQuit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControlManager), "OnApplicationQuit"), value);
        }

        public static event Delegates.OnSceneWasLoaded_WithArgs OnSceneWasLoaded
        {
            add => HookEndpointManager.Add<Delegates.OnSceneWasLoaded_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControlManager), "OnSceneWasLoaded"), value);
            remove => HookEndpointManager.Remove<Delegates.OnSceneWasLoaded_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControlManager), "OnSceneWasLoaded"), value);
        }

        public static event Delegates.LogMessage_WithArgs LogMessage
        {
            add => HookEndpointManager.Add<Delegates.LogMessage_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControlManager), "LogMessage", false), value);
            remove => HookEndpointManager.Remove<Delegates.LogMessage_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControlManager), "LogMessage", false), value);
        }
    }
}