using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for MenuStyles class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuStyles
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_CurrentStyle()
{
if (!HookedList.Contains("get_CurrentStyle"))
{
HookedList.Add("get_CurrentStyle");
new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuStyles), "get_CurrentStyle", true), get_CurrentStyle);

}
}
internal static event Delegates.get_CurrentStyle_BeforeArgs _beforeget_CurrentStyle;
internal static event Delegates.get_CurrentStyle_AfterArgs _afterget_CurrentStyle;
private static int get_CurrentStyle(Func<MenuStyles, int> orig, MenuStyles self)
{
Delegates.Params_get_CurrentStyle @params = new() 
{
self = self
};
if (_beforeget_CurrentStyle != null)
{
foreach (Delegates.get_CurrentStyle_BeforeArgs toInvoke in _beforeget_CurrentStyle.GetInvocationList())
{
try
{
_beforeget_CurrentStyle?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_CurrentStyle != null)
{
foreach (Delegates.get_CurrentStyle_AfterArgs toInvoke in _afterget_CurrentStyle.GetInvocationList())
{
try
{
retVal = _afterget_CurrentStyle.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.MenuStyles.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.MenuStyles.orig_Awake orig,MenuStyles self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.MenuStyles.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.MenuStyles.orig_Start orig,MenuStyles self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookLoadStyle()
{
if (!HookedList.Contains("LoadStyle"))
{
HookedList.Add("LoadStyle");
On.MenuStyles.LoadStyle += LoadStyle;

}
}
internal static event Delegates.LoadStyle_BeforeArgs _beforeLoadStyle;
internal static event Delegates.LoadStyle_AfterArgs _afterLoadStyle;
private static void LoadStyle(On.MenuStyles.orig_LoadStyle orig,MenuStyles self,  bool force,  bool fade)
{
Delegates.Params_LoadStyle @params = new() 
{
self = self
, force = force
, fade = fade
};
if (_beforeLoadStyle != null)
{
foreach (Delegates.LoadStyle_BeforeArgs toInvoke in _beforeLoadStyle.GetInvocationList())
{
try
{
_beforeLoadStyle?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
force = @params.force;
fade = @params.fade;
orig(self, force, fade);
if (_afterLoadStyle != null)
{
foreach (Delegates.LoadStyle_AfterArgs toInvoke in _afterLoadStyle.GetInvocationList())
{
try
{
_afterLoadStyle.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDestroy()
{
if (!HookedList.Contains("OnDestroy"))
{
HookedList.Add("OnDestroy");
On.MenuStyles.OnDestroy += OnDestroy;

}
}
internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
internal static event Delegates.OnDestroy_AfterArgs _afterOnDestroy;
private static void OnDestroy(On.MenuStyles.orig_OnDestroy orig,MenuStyles self)
{
Delegates.Params_OnDestroy @params = new() 
{
self = self
};
if (_beforeOnDestroy != null)
{
foreach (Delegates.OnDestroy_BeforeArgs toInvoke in _beforeOnDestroy.GetInvocationList())
{
try
{
_beforeOnDestroy?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDestroy != null)
{
foreach (Delegates.OnDestroy_AfterArgs toInvoke in _afterOnDestroy.GetInvocationList())
{
try
{
_afterOnDestroy.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetStyle()
{
if (!HookedList.Contains("SetStyle"))
{
HookedList.Add("SetStyle");
On.MenuStyles.SetStyle += SetStyle;

}
}
internal static event Delegates.SetStyle_BeforeArgs _beforeSetStyle;
internal static event Delegates.SetStyle_AfterArgs _afterSetStyle;
private static void SetStyle(On.MenuStyles.orig_SetStyle orig,MenuStyles self,  int index,  bool fade,  bool save)
{
Delegates.Params_SetStyle @params = new() 
{
self = self
, index = index
, fade = fade
, save = save
};
if (_beforeSetStyle != null)
{
foreach (Delegates.SetStyle_BeforeArgs toInvoke in _beforeSetStyle.GetInvocationList())
{
try
{
_beforeSetStyle?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
index = @params.index;
fade = @params.fade;
save = @params.save;
orig(self, index, fade, save);
if (_afterSetStyle != null)
{
foreach (Delegates.SetStyle_AfterArgs toInvoke in _afterSetStyle.GetInvocationList())
{
try
{
_afterSetStyle.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSwitchStyle()
{
if (!HookedList.Contains("SwitchStyle"))
{
HookedList.Add("SwitchStyle");
On.MenuStyles.SwitchStyle += SwitchStyle;

}
}
internal static event Delegates.SwitchStyle_BeforeArgs _beforeSwitchStyle;
private static System.Collections.IEnumerator SwitchStyle(On.MenuStyles.orig_SwitchStyle orig,MenuStyles self,  int index,  bool fade,  int oldIndex)
{
Delegates.Params_SwitchStyle @params = new() 
{
self = self
, index = index
, fade = fade
, oldIndex = oldIndex
};
if (_beforeSwitchStyle != null)
{
foreach (Delegates.SwitchStyle_BeforeArgs toInvoke in _beforeSwitchStyle.GetInvocationList())
{
try
{
_beforeSwitchStyle?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
index = @params.index;
fade = @params.fade;
oldIndex = @params.oldIndex;
return orig(self, index, fade, oldIndex);
}
internal static void HookStopAudio()
{
if (!HookedList.Contains("StopAudio"))
{
HookedList.Add("StopAudio");
On.MenuStyles.StopAudio += StopAudio;

}
}
internal static event Delegates.StopAudio_BeforeArgs _beforeStopAudio;
internal static event Delegates.StopAudio_AfterArgs _afterStopAudio;
private static void StopAudio(On.MenuStyles.orig_StopAudio orig,MenuStyles self)
{
Delegates.Params_StopAudio @params = new() 
{
self = self
};
if (_beforeStopAudio != null)
{
foreach (Delegates.StopAudio_BeforeArgs toInvoke in _beforeStopAudio.GetInvocationList())
{
try
{
_beforeStopAudio?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStopAudio != null)
{
foreach (Delegates.StopAudio_AfterArgs toInvoke in _afterStopAudio.GetInvocationList())
{
try
{
_afterStopAudio.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookFadeOutAudio()
{
if (!HookedList.Contains("FadeOutAudio"))
{
HookedList.Add("FadeOutAudio");
On.MenuStyles.FadeOutAudio += FadeOutAudio;

}
}
internal static event Delegates.FadeOutAudio_BeforeArgs _beforeFadeOutAudio;
private static System.Collections.IEnumerator FadeOutAudio(On.MenuStyles.orig_FadeOutAudio orig,MenuStyles self,  UnityEngine.AudioSource[] audioSources)
{
Delegates.Params_FadeOutAudio @params = new() 
{
self = self
, audioSources = audioSources
};
if (_beforeFadeOutAudio != null)
{
foreach (Delegates.FadeOutAudio_BeforeArgs toInvoke in _beforeFadeOutAudio.GetInvocationList())
{
try
{
_beforeFadeOutAudio?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
audioSources = @params.audioSources;
return orig(self, audioSources);
}
internal static void HookUnlockFromAchievements()
{
if (!HookedList.Contains("UnlockFromAchievements"))
{
HookedList.Add("UnlockFromAchievements");
On.MenuStyles.UnlockFromAchievements += UnlockFromAchievements;

}
}
internal static event Delegates.UnlockFromAchievements_BeforeArgs _beforeUnlockFromAchievements;
internal static event Delegates.UnlockFromAchievements_AfterArgs _afterUnlockFromAchievements;
private static void UnlockFromAchievements(On.MenuStyles.orig_UnlockFromAchievements orig,MenuStyles self)
{
Delegates.Params_UnlockFromAchievements @params = new() 
{
self = self
};
if (_beforeUnlockFromAchievements != null)
{
foreach (Delegates.UnlockFromAchievements_BeforeArgs toInvoke in _beforeUnlockFromAchievements.GetInvocationList())
{
try
{
_beforeUnlockFromAchievements?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUnlockFromAchievements != null)
{
foreach (Delegates.UnlockFromAchievements_AfterArgs toInvoke in _afterUnlockFromAchievements.GetInvocationList())
{
try
{
_afterUnlockFromAchievements.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateTitle()
{
if (!HookedList.Contains("UpdateTitle"))
{
HookedList.Add("UpdateTitle");
On.MenuStyles.UpdateTitle += UpdateTitle;

}
}
internal static event Delegates.UpdateTitle_BeforeArgs _beforeUpdateTitle;
internal static event Delegates.UpdateTitle_AfterArgs _afterUpdateTitle;
private static void UpdateTitle(On.MenuStyles.orig_UpdateTitle orig,MenuStyles self)
{
Delegates.Params_UpdateTitle @params = new() 
{
self = self
};
if (_beforeUpdateTitle != null)
{
foreach (Delegates.UpdateTitle_BeforeArgs toInvoke in _beforeUpdateTitle.GetInvocationList())
{
try
{
_beforeUpdateTitle?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateTitle != null)
{
foreach (Delegates.UpdateTitle_AfterArgs toInvoke in _afterUpdateTitle.GetInvocationList())
{
try
{
_afterUpdateTitle.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_CurrentStyle
{
public MenuStyles self;
}
public delegate void get_CurrentStyle_BeforeArgs(Params_get_CurrentStyle args);
public delegate int get_CurrentStyle_AfterArgs(Params_get_CurrentStyle args, int ret);
public delegate int get_CurrentStyle_WithArgs (Func<MenuStyles, int> orig, MenuStyles self);
public sealed class Params_Awake
{
public MenuStyles self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<MenuStyles> orig, MenuStyles self);
public sealed class Params_Start
{
public MenuStyles self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<MenuStyles> orig, MenuStyles self);
public sealed class Params_LoadStyle
{
public MenuStyles self;
public bool force;
public bool fade;
}
public delegate void LoadStyle_BeforeArgs(Params_LoadStyle args);
public delegate void LoadStyle_AfterArgs(Params_LoadStyle args);
public delegate void LoadStyle_WithArgs (Action<MenuStyles,  bool,  bool> orig, MenuStyles self,  bool force,  bool fade);
public sealed class Params_OnDestroy
{
public MenuStyles self;
}
public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);
public delegate void OnDestroy_AfterArgs(Params_OnDestroy args);
public delegate void OnDestroy_WithArgs (Action<MenuStyles> orig, MenuStyles self);
public sealed class Params_SetStyle
{
public MenuStyles self;
public int index;
public bool fade;
public bool save;
}
public delegate void SetStyle_BeforeArgs(Params_SetStyle args);
public delegate void SetStyle_AfterArgs(Params_SetStyle args);
public delegate void SetStyle_WithArgs (Action<MenuStyles,  int,  bool,  bool> orig, MenuStyles self,  int index,  bool fade,  bool save);
public sealed class Params_SwitchStyle
{
public MenuStyles self;
public int index;
public bool fade;
public int oldIndex;
}
public delegate void SwitchStyle_BeforeArgs(Params_SwitchStyle args);
public delegate System.Collections.IEnumerator SwitchStyle_AfterArgs(Params_SwitchStyle args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator SwitchStyle_WithArgs (Func<MenuStyles,  int,  bool,  int, System.Collections.IEnumerator> orig, MenuStyles self,  int index,  bool fade,  int oldIndex);
public sealed class Params_StopAudio
{
public MenuStyles self;
}
public delegate void StopAudio_BeforeArgs(Params_StopAudio args);
public delegate void StopAudio_AfterArgs(Params_StopAudio args);
public delegate void StopAudio_WithArgs (Action<MenuStyles> orig, MenuStyles self);
public sealed class Params_FadeOutAudio
{
public MenuStyles self;
public UnityEngine.AudioSource[] audioSources;
}
public delegate void FadeOutAudio_BeforeArgs(Params_FadeOutAudio args);
public delegate System.Collections.IEnumerator FadeOutAudio_AfterArgs(Params_FadeOutAudio args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator FadeOutAudio_WithArgs (Func<MenuStyles,  UnityEngine.AudioSource[], System.Collections.IEnumerator> orig, MenuStyles self,  UnityEngine.AudioSource[] audioSources);
public sealed class Params_UnlockFromAchievements
{
public MenuStyles self;
}
public delegate void UnlockFromAchievements_BeforeArgs(Params_UnlockFromAchievements args);
public delegate void UnlockFromAchievements_AfterArgs(Params_UnlockFromAchievements args);
public delegate void UnlockFromAchievements_WithArgs (Action<MenuStyles> orig, MenuStyles self);
public sealed class Params_UpdateTitle
{
public MenuStyles self;
}
public delegate void UpdateTitle_BeforeArgs(Params_UpdateTitle args);
public delegate void UpdateTitle_AfterArgs(Params_UpdateTitle args);
public delegate void UpdateTitle_WithArgs (Action<MenuStyles> orig, MenuStyles self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_CurrentStyle_BeforeArgs get_CurrentStyle
{
add
{

HookHandler._beforeget_CurrentStyle += value;
HookHandler.Hookget_CurrentStyle();
}
remove => HookHandler._beforeget_CurrentStyle -= value;
}
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.LoadStyle_BeforeArgs LoadStyle
{
add
{

HookHandler._beforeLoadStyle += value;
HookHandler.HookLoadStyle();
}
remove => HookHandler._beforeLoadStyle -= value;
}
public static event Delegates.OnDestroy_BeforeArgs OnDestroy
{
add
{

HookHandler._beforeOnDestroy += value;
HookHandler.HookOnDestroy();
}
remove => HookHandler._beforeOnDestroy -= value;
}
public static event Delegates.SetStyle_BeforeArgs SetStyle
{
add
{

HookHandler._beforeSetStyle += value;
HookHandler.HookSetStyle();
}
remove => HookHandler._beforeSetStyle -= value;
}
public static event Delegates.SwitchStyle_BeforeArgs SwitchStyle
{
add
{

HookHandler._beforeSwitchStyle += value;
HookHandler.HookSwitchStyle();
}
remove => HookHandler._beforeSwitchStyle -= value;
}
public static event Delegates.StopAudio_BeforeArgs StopAudio
{
add
{

HookHandler._beforeStopAudio += value;
HookHandler.HookStopAudio();
}
remove => HookHandler._beforeStopAudio -= value;
}
public static event Delegates.FadeOutAudio_BeforeArgs FadeOutAudio
{
add
{

HookHandler._beforeFadeOutAudio += value;
HookHandler.HookFadeOutAudio();
}
remove => HookHandler._beforeFadeOutAudio -= value;
}
public static event Delegates.UnlockFromAchievements_BeforeArgs UnlockFromAchievements
{
add
{

HookHandler._beforeUnlockFromAchievements += value;
HookHandler.HookUnlockFromAchievements();
}
remove => HookHandler._beforeUnlockFromAchievements -= value;
}
public static event Delegates.UpdateTitle_BeforeArgs UpdateTitle
{
add
{

HookHandler._beforeUpdateTitle += value;
HookHandler.HookUpdateTitle();
}
remove => HookHandler._beforeUpdateTitle -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_CurrentStyle_AfterArgs get_CurrentStyle
{
add
{

HookHandler._afterget_CurrentStyle += value;
HookHandler.Hookget_CurrentStyle();
}
remove => HookHandler._afterget_CurrentStyle -= value;
}
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.LoadStyle_AfterArgs LoadStyle
{
add
{

HookHandler._afterLoadStyle += value;
HookHandler.HookLoadStyle();
}
remove => HookHandler._afterLoadStyle -= value;
}
public static event Delegates.OnDestroy_AfterArgs OnDestroy
{
add
{

HookHandler._afterOnDestroy += value;
HookHandler.HookOnDestroy();
}
remove => HookHandler._afterOnDestroy -= value;
}
public static event Delegates.SetStyle_AfterArgs SetStyle
{
add
{

HookHandler._afterSetStyle += value;
HookHandler.HookSetStyle();
}
remove => HookHandler._afterSetStyle -= value;
}
public static event Delegates.StopAudio_AfterArgs StopAudio
{
add
{

HookHandler._afterStopAudio += value;
HookHandler.HookStopAudio();
}
remove => HookHandler._afterStopAudio -= value;
}
public static event Delegates.UnlockFromAchievements_AfterArgs UnlockFromAchievements
{
add
{

HookHandler._afterUnlockFromAchievements += value;
HookHandler.HookUnlockFromAchievements();
}
remove => HookHandler._afterUnlockFromAchievements -= value;
}
public static event Delegates.UpdateTitle_AfterArgs UpdateTitle
{
add
{

HookHandler._afterUpdateTitle += value;
HookHandler.HookUpdateTitle();
}
remove => HookHandler._afterUpdateTitle -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_CurrentStyle_WithArgs get_CurrentStyle
{
add => HookEndpointManager.Add<Delegates.get_CurrentStyle_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(MenuStyles), "get_CurrentStyle", true), value);
remove => HookEndpointManager.Remove<Delegates.get_CurrentStyle_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(MenuStyles), "get_CurrentStyle", true), value);
}
public static event On.MenuStyles.hook_Awake Awake
{
add => On.MenuStyles.Awake += value;
remove => On.MenuStyles.Awake -= value;
}
public static event On.MenuStyles.hook_Start Start
{
add => On.MenuStyles.Start += value;
remove => On.MenuStyles.Start -= value;
}
public static event On.MenuStyles.hook_LoadStyle LoadStyle
{
add => On.MenuStyles.LoadStyle += value;
remove => On.MenuStyles.LoadStyle -= value;
}
public static event On.MenuStyles.hook_OnDestroy OnDestroy
{
add => On.MenuStyles.OnDestroy += value;
remove => On.MenuStyles.OnDestroy -= value;
}
public static event On.MenuStyles.hook_SetStyle SetStyle
{
add => On.MenuStyles.SetStyle += value;
remove => On.MenuStyles.SetStyle -= value;
}
public static event On.MenuStyles.hook_SwitchStyle SwitchStyle
{
add => On.MenuStyles.SwitchStyle += value;
remove => On.MenuStyles.SwitchStyle -= value;
}
public static event On.MenuStyles.hook_StopAudio StopAudio
{
add => On.MenuStyles.StopAudio += value;
remove => On.MenuStyles.StopAudio -= value;
}
public static event On.MenuStyles.hook_FadeOutAudio FadeOutAudio
{
add => On.MenuStyles.FadeOutAudio += value;
remove => On.MenuStyles.FadeOutAudio -= value;
}
public static event On.MenuStyles.hook_UnlockFromAchievements UnlockFromAchievements
{
add => On.MenuStyles.UnlockFromAchievements += value;
remove => On.MenuStyles.UnlockFromAchievements -= value;
}
public static event On.MenuStyles.hook_UpdateTitle UpdateTitle
{
add => On.MenuStyles.UpdateTitle += value;
remove => On.MenuStyles.UpdateTitle -= value;
}
}

}
