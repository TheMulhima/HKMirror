using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MenuScroller class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuScroller
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnSelect()
        {
            if (!HookedList.Contains("OnSelect"))
            {
                HookedList.Add("OnSelect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuScroller), "OnSelect"), OnSelect);
            }
        }

        internal static event Delegates.OnSelect_BeforeArgs _beforeOnSelect;
        internal static event Delegates.OnSelect_AfterArgs _afterOnSelect;

        private static void OnSelect(Action<MenuScroller, BaseEventData> orig, MenuScroller self,
            BaseEventData eventData)
        {
            Delegates.Params_OnSelect @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnSelect != null)
                foreach (Delegates.OnSelect_BeforeArgs toInvoke in _beforeOnSelect.GetInvocationList())
                    try
                    {
                        _beforeOnSelect?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnSelect != null)
                foreach (Delegates.OnSelect_AfterArgs toInvoke in _afterOnSelect.GetInvocationList())
                    try
                    {
                        _afterOnSelect.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnDeselect()
        {
            if (!HookedList.Contains("OnDeselect"))
            {
                HookedList.Add("OnDeselect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuScroller), "OnDeselect"), OnDeselect);
            }
        }

        internal static event Delegates.OnDeselect_BeforeArgs _beforeOnDeselect;
        internal static event Delegates.OnDeselect_AfterArgs _afterOnDeselect;

        private static void OnDeselect(Action<MenuScroller, BaseEventData> orig, MenuScroller self,
            BaseEventData eventData)
        {
            Delegates.Params_OnDeselect @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnDeselect != null)
                foreach (Delegates.OnDeselect_BeforeArgs toInvoke in _beforeOnDeselect.GetInvocationList())
                    try
                    {
                        _beforeOnDeselect?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnDeselect != null)
                foreach (Delegates.OnDeselect_AfterArgs toInvoke in _afterOnDeselect.GetInvocationList())
                    try
                    {
                        _afterOnDeselect.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnSubmit()
        {
            if (!HookedList.Contains("OnSubmit"))
            {
                HookedList.Add("OnSubmit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuScroller), "OnSubmit"), OnSubmit);
            }
        }

        internal static event Delegates.OnSubmit_BeforeArgs _beforeOnSubmit;
        internal static event Delegates.OnSubmit_AfterArgs _afterOnSubmit;

        private static void OnSubmit(Action<MenuScroller, BaseEventData> orig, MenuScroller self,
            BaseEventData eventData)
        {
            Delegates.Params_OnSubmit @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnSubmit != null)
                foreach (Delegates.OnSubmit_BeforeArgs toInvoke in _beforeOnSubmit.GetInvocationList())
                    try
                    {
                        _beforeOnSubmit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnSubmit != null)
                foreach (Delegates.OnSubmit_AfterArgs toInvoke in _afterOnSubmit.GetInvocationList())
                    try
                    {
                        _afterOnSubmit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnPointerClick()
        {
            if (!HookedList.Contains("OnPointerClick"))
            {
                HookedList.Add("OnPointerClick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuScroller), "OnPointerClick"), OnPointerClick);
            }
        }

        internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
        internal static event Delegates.OnPointerClick_AfterArgs _afterOnPointerClick;

        private static void OnPointerClick(Action<MenuScroller, PointerEventData> orig, MenuScroller self,
            PointerEventData eventData)
        {
            Delegates.Params_OnPointerClick @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnPointerClick != null)
                foreach (Delegates.OnPointerClick_BeforeArgs toInvoke in _beforeOnPointerClick.GetInvocationList())
                    try
                    {
                        _beforeOnPointerClick?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnPointerClick != null)
                foreach (Delegates.OnPointerClick_AfterArgs toInvoke in _afterOnPointerClick.GetInvocationList())
                    try
                    {
                        _afterOnPointerClick.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnCancel()
        {
            if (!HookedList.Contains("OnCancel"))
            {
                HookedList.Add("OnCancel");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuScroller), "OnCancel"), OnCancel);
            }
        }

        internal static event Delegates.OnCancel_BeforeArgs _beforeOnCancel;
        internal static event Delegates.OnCancel_AfterArgs _afterOnCancel;

        private static void OnCancel(Action<MenuScroller, BaseEventData> orig, MenuScroller self,
            BaseEventData eventData)
        {
            Delegates.Params_OnCancel @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnCancel != null)
                foreach (Delegates.OnCancel_BeforeArgs toInvoke in _beforeOnCancel.GetInvocationList())
                    try
                    {
                        _beforeOnCancel?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnCancel != null)
                foreach (Delegates.OnCancel_AfterArgs toInvoke in _afterOnCancel.GetInvocationList())
                    try
                    {
                        _afterOnCancel.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnMove()
        {
            if (!HookedList.Contains("OnMove"))
            {
                HookedList.Add("OnMove");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuScroller), "OnMove"), OnMove);
            }
        }

        internal static event Delegates.OnMove_BeforeArgs _beforeOnMove;
        internal static event Delegates.OnMove_AfterArgs _afterOnMove;

        private static void OnMove(Action<MenuScroller, AxisEventData> orig, MenuScroller self, AxisEventData move)
        {
            Delegates.Params_OnMove @params = new()
            {
                self = self, move = move
            };
            if (_beforeOnMove != null)
                foreach (Delegates.OnMove_BeforeArgs toInvoke in _beforeOnMove.GetInvocationList())
                    try
                    {
                        _beforeOnMove?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            move = @params.move;
            orig(self, move);
            if (_afterOnMove != null)
                foreach (Delegates.OnMove_AfterArgs toInvoke in _afterOnMove.GetInvocationList())
                    try
                    {
                        _afterOnMove.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void OnCancel_AfterArgs(Params_OnCancel args);

        public delegate void OnCancel_BeforeArgs(Params_OnCancel args);

        public delegate void OnCancel_WithArgs(Action<MenuScroller, BaseEventData> orig, MenuScroller self,
            BaseEventData eventData);

        public delegate void OnDeselect_AfterArgs(Params_OnDeselect args);

        public delegate void OnDeselect_BeforeArgs(Params_OnDeselect args);

        public delegate void OnDeselect_WithArgs(Action<MenuScroller, BaseEventData> orig, MenuScroller self,
            BaseEventData eventData);

        public delegate void OnMove_AfterArgs(Params_OnMove args);

        public delegate void OnMove_BeforeArgs(Params_OnMove args);

        public delegate void OnMove_WithArgs(Action<MenuScroller, AxisEventData> orig, MenuScroller self,
            AxisEventData move);

        public delegate void OnPointerClick_AfterArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_WithArgs(Action<MenuScroller, PointerEventData> orig, MenuScroller self,
            PointerEventData eventData);

        public delegate void OnSelect_AfterArgs(Params_OnSelect args);

        public delegate void OnSelect_BeforeArgs(Params_OnSelect args);

        public delegate void OnSelect_WithArgs(Action<MenuScroller, BaseEventData> orig, MenuScroller self,
            BaseEventData eventData);

        public delegate void OnSubmit_AfterArgs(Params_OnSubmit args);

        public delegate void OnSubmit_BeforeArgs(Params_OnSubmit args);

        public delegate void OnSubmit_WithArgs(Action<MenuScroller, BaseEventData> orig, MenuScroller self,
            BaseEventData eventData);

        public sealed class Params_OnSelect
        {
            public BaseEventData eventData;
            public MenuScroller self;
        }

        public sealed class Params_OnDeselect
        {
            public BaseEventData eventData;
            public MenuScroller self;
        }

        public sealed class Params_OnSubmit
        {
            public BaseEventData eventData;
            public MenuScroller self;
        }

        public sealed class Params_OnPointerClick
        {
            public PointerEventData eventData;
            public MenuScroller self;
        }

        public sealed class Params_OnCancel
        {
            public BaseEventData eventData;
            public MenuScroller self;
        }

        public sealed class Params_OnMove
        {
            public AxisEventData move;
            public MenuScroller self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnSelect_BeforeArgs OnSelect
        {
            add
            {
                HookHandler._beforeOnSelect += value;
                HookHandler.HookOnSelect();
            }
            remove => HookHandler._beforeOnSelect -= value;
        }

        public static event Delegates.OnDeselect_BeforeArgs OnDeselect
        {
            add
            {
                HookHandler._beforeOnDeselect += value;
                HookHandler.HookOnDeselect();
            }
            remove => HookHandler._beforeOnDeselect -= value;
        }

        public static event Delegates.OnSubmit_BeforeArgs OnSubmit
        {
            add
            {
                HookHandler._beforeOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._beforeOnSubmit -= value;
        }

        public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
        {
            add
            {
                HookHandler._beforeOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._beforeOnPointerClick -= value;
        }

        public static event Delegates.OnCancel_BeforeArgs OnCancel
        {
            add
            {
                HookHandler._beforeOnCancel += value;
                HookHandler.HookOnCancel();
            }
            remove => HookHandler._beforeOnCancel -= value;
        }

        public static event Delegates.OnMove_BeforeArgs OnMove
        {
            add
            {
                HookHandler._beforeOnMove += value;
                HookHandler.HookOnMove();
            }
            remove => HookHandler._beforeOnMove -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnSelect_AfterArgs OnSelect
        {
            add
            {
                HookHandler._afterOnSelect += value;
                HookHandler.HookOnSelect();
            }
            remove => HookHandler._afterOnSelect -= value;
        }

        public static event Delegates.OnDeselect_AfterArgs OnDeselect
        {
            add
            {
                HookHandler._afterOnDeselect += value;
                HookHandler.HookOnDeselect();
            }
            remove => HookHandler._afterOnDeselect -= value;
        }

        public static event Delegates.OnSubmit_AfterArgs OnSubmit
        {
            add
            {
                HookHandler._afterOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._afterOnSubmit -= value;
        }

        public static event Delegates.OnPointerClick_AfterArgs OnPointerClick
        {
            add
            {
                HookHandler._afterOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._afterOnPointerClick -= value;
        }

        public static event Delegates.OnCancel_AfterArgs OnCancel
        {
            add
            {
                HookHandler._afterOnCancel += value;
                HookHandler.HookOnCancel();
            }
            remove => HookHandler._afterOnCancel -= value;
        }

        public static event Delegates.OnMove_AfterArgs OnMove
        {
            add
            {
                HookHandler._afterOnMove += value;
                HookHandler.HookOnMove();
            }
            remove => HookHandler._afterOnMove -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.OnSelect_WithArgs OnSelect
        {
            add => HookEndpointManager.Add<Delegates.OnSelect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuScroller), "OnSelect"), value);
            remove => HookEndpointManager.Remove<Delegates.OnSelect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuScroller), "OnSelect"), value);
        }

        public static event Delegates.OnDeselect_WithArgs OnDeselect
        {
            add => HookEndpointManager.Add<Delegates.OnDeselect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuScroller), "OnDeselect"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDeselect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuScroller), "OnDeselect"), value);
        }

        public static event Delegates.OnSubmit_WithArgs OnSubmit
        {
            add => HookEndpointManager.Add<Delegates.OnSubmit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuScroller), "OnSubmit"), value);
            remove => HookEndpointManager.Remove<Delegates.OnSubmit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuScroller), "OnSubmit"), value);
        }

        public static event Delegates.OnPointerClick_WithArgs OnPointerClick
        {
            add => HookEndpointManager.Add<Delegates.OnPointerClick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuScroller), "OnPointerClick"), value);
            remove => HookEndpointManager.Remove<Delegates.OnPointerClick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuScroller), "OnPointerClick"), value);
        }

        public static event Delegates.OnCancel_WithArgs OnCancel
        {
            add => HookEndpointManager.Add<Delegates.OnCancel_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuScroller), "OnCancel"), value);
            remove => HookEndpointManager.Remove<Delegates.OnCancel_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuScroller), "OnCancel"), value);
        }

        public static event Delegates.OnMove_WithArgs OnMove
        {
            add => HookEndpointManager.Add<Delegates.OnMove_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuScroller), "OnMove"), value);
            remove => HookEndpointManager.Remove<Delegates.OnMove_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuScroller), "OnMove"), value);
        }
    }
}