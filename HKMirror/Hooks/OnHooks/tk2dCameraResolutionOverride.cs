using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dCameraResolutionOverride class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dCameraResolutionOverride
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookMatch()
        {
            if (!HookedList.Contains("Match"))
            {
                HookedList.Add("Match");
                On.tk2dCameraResolutionOverride.Match += Match;
            }
        }

        internal static event Delegates.Match_BeforeArgs _beforeMatch;
        internal static event Delegates.Match_NormalArgs _afterMatch;

        private static bool Match(On.tk2dCameraResolutionOverride.orig_Match orig, tk2dCameraResolutionOverride self,
            int pixelWidth, int pixelHeight)
        {
            Delegates.Params_Match @params = new()
            {
                self = self, pixelWidth = pixelWidth, pixelHeight = pixelHeight
            };
            _beforeMatch?.Invoke(@params);
            self = @params.self;
            pixelWidth = @params.pixelWidth;
            pixelHeight = @params.pixelHeight;
            var retVal = orig(self, pixelWidth, pixelHeight);
            if (_afterMatch != null) retVal = _afterMatch.Invoke(@params);
            return retVal;
        }

        internal static void HookUpgrade()
        {
            if (!HookedList.Contains("Upgrade"))
            {
                HookedList.Add("Upgrade");
                On.tk2dCameraResolutionOverride.Upgrade += Upgrade;
            }
        }

        internal static event Delegates.Upgrade_BeforeArgs _beforeUpgrade;
        internal static event Delegates.Upgrade_NormalArgs _afterUpgrade;

        private static void Upgrade(On.tk2dCameraResolutionOverride.orig_Upgrade orig,
            tk2dCameraResolutionOverride self, int version)
        {
            Delegates.Params_Upgrade @params = new()
            {
                self = self, version = version
            };
            _beforeUpgrade?.Invoke(@params);
            self = @params.self;
            version = @params.version;
            orig(self, version);
            if (_afterUpgrade != null) _afterUpgrade.Invoke(@params);
        }

        internal static void Hookget_DefaultOverride()
        {
            if (!HookedList.Contains("get_DefaultOverride"))
            {
                HookedList.Add("get_DefaultOverride");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(tk2dCameraResolutionOverride), "get_DefaultOverride", false),
                    get_DefaultOverride);
            }
        }

        internal static event Delegates.get_DefaultOverride_BeforeArgs _beforeget_DefaultOverride;
        internal static event Delegates.get_DefaultOverride_NormalArgs _afterget_DefaultOverride;

        private static tk2dCameraResolutionOverride get_DefaultOverride(Func<tk2dCameraResolutionOverride> orig)
        {
            _beforeget_DefaultOverride?.Invoke();
            var retVal = orig();
            if (_afterget_DefaultOverride != null) retVal = _afterget_DefaultOverride.Invoke();
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_DefaultOverride_BeforeArgs();

        public delegate tk2dCameraResolutionOverride get_DefaultOverride_NormalArgs();

        public delegate void Match_BeforeArgs(Params_Match args);

        public delegate bool Match_NormalArgs(Params_Match args);

        public delegate void Upgrade_BeforeArgs(Params_Upgrade args);

        public delegate void Upgrade_NormalArgs(Params_Upgrade args);

        public sealed class Params_Match
        {
            public int pixelHeight;
            public int pixelWidth;
            public tk2dCameraResolutionOverride self;
        }

        public sealed class Params_Upgrade
        {
            public tk2dCameraResolutionOverride self;
            public int version;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Match_BeforeArgs Match
        {
            add
            {
                HookHandler._beforeMatch += value;
                HookHandler.HookMatch();
            }
            remove => HookHandler._beforeMatch -= value;
        }

        public static event Delegates.Upgrade_BeforeArgs Upgrade
        {
            add
            {
                HookHandler._beforeUpgrade += value;
                HookHandler.HookUpgrade();
            }
            remove => HookHandler._beforeUpgrade -= value;
        }

        public static event Delegates.get_DefaultOverride_BeforeArgs get_DefaultOverride
        {
            add
            {
                HookHandler._beforeget_DefaultOverride += value;
                HookHandler.Hookget_DefaultOverride();
            }
            remove => HookHandler._beforeget_DefaultOverride -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Match_NormalArgs Match
        {
            add
            {
                HookHandler._afterMatch += value;
                HookHandler.HookMatch();
            }
            remove => HookHandler._afterMatch -= value;
        }

        public static event Delegates.Upgrade_NormalArgs Upgrade
        {
            add
            {
                HookHandler._afterUpgrade += value;
                HookHandler.HookUpgrade();
            }
            remove => HookHandler._afterUpgrade -= value;
        }

        public static event Delegates.get_DefaultOverride_NormalArgs get_DefaultOverride
        {
            add
            {
                HookHandler._afterget_DefaultOverride += value;
                HookHandler.Hookget_DefaultOverride();
            }
            remove => HookHandler._afterget_DefaultOverride -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.tk2dCameraResolutionOverride.hook_Match Match
        {
            add => On.tk2dCameraResolutionOverride.Match += value;
            remove => On.tk2dCameraResolutionOverride.Match -= value;
        }

        public static event On.tk2dCameraResolutionOverride.hook_Upgrade Upgrade
        {
            add => On.tk2dCameraResolutionOverride.Upgrade += value;
            remove => On.tk2dCameraResolutionOverride.Upgrade -= value;
        }

        public static event Delegates.get_DefaultOverride_NormalArgs get_DefaultOverride
        {
            add => HookEndpointManager.Add<Delegates.get_DefaultOverride_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCameraResolutionOverride), "get_DefaultOverride", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_DefaultOverride_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCameraResolutionOverride), "get_DefaultOverride", false),
                value);
        }
    }
}