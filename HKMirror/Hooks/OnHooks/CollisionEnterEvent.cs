namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for CollisionEnterEvent class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCollisionEnterEvent
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.CollisionEnterEvent.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.CollisionEnterEvent.orig_Awake orig, CollisionEnterEvent self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnCollisionEnter2D()
        {
            if (!HookedList.Contains("OnCollisionEnter2D"))
            {
                HookedList.Add("OnCollisionEnter2D");
                On.CollisionEnterEvent.OnCollisionEnter2D += OnCollisionEnter2D;
            }
        }

        internal static event Delegates.OnCollisionEnter2D_BeforeArgs _beforeOnCollisionEnter2D;
        internal static event Delegates.OnCollisionEnter2D_NormalArgs _afterOnCollisionEnter2D;

        private static void OnCollisionEnter2D(On.CollisionEnterEvent.orig_OnCollisionEnter2D orig,
            CollisionEnterEvent self, Collision2D collision)
        {
            Delegates.Params_OnCollisionEnter2D @params = new()
            {
                self = self, collision = collision
            };
            _beforeOnCollisionEnter2D?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnCollisionEnter2D != null) _afterOnCollisionEnter2D.Invoke(@params);
        }

        internal static void HookOnCollisionStay2D()
        {
            if (!HookedList.Contains("OnCollisionStay2D"))
            {
                HookedList.Add("OnCollisionStay2D");
                On.CollisionEnterEvent.OnCollisionStay2D += OnCollisionStay2D;
            }
        }

        internal static event Delegates.OnCollisionStay2D_BeforeArgs _beforeOnCollisionStay2D;
        internal static event Delegates.OnCollisionStay2D_NormalArgs _afterOnCollisionStay2D;

        private static void OnCollisionStay2D(On.CollisionEnterEvent.orig_OnCollisionStay2D orig,
            CollisionEnterEvent self, Collision2D collision)
        {
            Delegates.Params_OnCollisionStay2D @params = new()
            {
                self = self, collision = collision
            };
            _beforeOnCollisionStay2D?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnCollisionStay2D != null) _afterOnCollisionStay2D.Invoke(@params);
        }

        internal static void HookHandleCollision()
        {
            if (!HookedList.Contains("HandleCollision"))
            {
                HookedList.Add("HandleCollision");
                On.CollisionEnterEvent.HandleCollision += HandleCollision;
            }
        }

        internal static event Delegates.HandleCollision_BeforeArgs _beforeHandleCollision;
        internal static event Delegates.HandleCollision_NormalArgs _afterHandleCollision;

        private static void HandleCollision(On.CollisionEnterEvent.orig_HandleCollision orig, CollisionEnterEvent self,
            Collision2D collision)
        {
            Delegates.Params_HandleCollision @params = new()
            {
                self = self, collision = collision
            };
            _beforeHandleCollision?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterHandleCollision != null) _afterHandleCollision.Invoke(@params);
        }

        internal static void HookCheckTouching()
        {
            if (!HookedList.Contains("CheckTouching"))
            {
                HookedList.Add("CheckTouching");
                On.CollisionEnterEvent.CheckTouching += CheckTouching;
            }
        }

        internal static event Delegates.CheckTouching_BeforeArgs _beforeCheckTouching;
        internal static event Delegates.CheckTouching_NormalArgs _afterCheckTouching;

        private static void CheckTouching(On.CollisionEnterEvent.orig_CheckTouching orig, CollisionEnterEvent self,
            LayerMask layer, Collision2D collision)
        {
            Delegates.Params_CheckTouching @params = new()
            {
                self = self, layer = layer, collision = collision
            };
            _beforeCheckTouching?.Invoke(@params);
            self = @params.self;
            layer = @params.layer;
            collision = @params.collision;
            orig(self, layer, collision);
            if (_afterCheckTouching != null) _afterCheckTouching.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void CheckTouching_BeforeArgs(Params_CheckTouching args);

        public delegate void CheckTouching_NormalArgs(Params_CheckTouching args);

        public delegate void HandleCollision_BeforeArgs(Params_HandleCollision args);

        public delegate void HandleCollision_NormalArgs(Params_HandleCollision args);

        public delegate void OnCollisionEnter2D_BeforeArgs(Params_OnCollisionEnter2D args);

        public delegate void OnCollisionEnter2D_NormalArgs(Params_OnCollisionEnter2D args);

        public delegate void OnCollisionStay2D_BeforeArgs(Params_OnCollisionStay2D args);

        public delegate void OnCollisionStay2D_NormalArgs(Params_OnCollisionStay2D args);

        public sealed class Params_Awake
        {
            public CollisionEnterEvent self;
        }

        public sealed class Params_OnCollisionEnter2D
        {
            public Collision2D collision;
            public CollisionEnterEvent self;
        }

        public sealed class Params_OnCollisionStay2D
        {
            public Collision2D collision;
            public CollisionEnterEvent self;
        }

        public sealed class Params_HandleCollision
        {
            public Collision2D collision;
            public CollisionEnterEvent self;
        }

        public sealed class Params_CheckTouching
        {
            public Collision2D collision;
            public LayerMask layer;
            public CollisionEnterEvent self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnCollisionEnter2D_BeforeArgs OnCollisionEnter2D
        {
            add
            {
                HookHandler._beforeOnCollisionEnter2D += value;
                HookHandler.HookOnCollisionEnter2D();
            }
            remove => HookHandler._beforeOnCollisionEnter2D -= value;
        }

        public static event Delegates.OnCollisionStay2D_BeforeArgs OnCollisionStay2D
        {
            add
            {
                HookHandler._beforeOnCollisionStay2D += value;
                HookHandler.HookOnCollisionStay2D();
            }
            remove => HookHandler._beforeOnCollisionStay2D -= value;
        }

        public static event Delegates.HandleCollision_BeforeArgs HandleCollision
        {
            add
            {
                HookHandler._beforeHandleCollision += value;
                HookHandler.HookHandleCollision();
            }
            remove => HookHandler._beforeHandleCollision -= value;
        }

        public static event Delegates.CheckTouching_BeforeArgs CheckTouching
        {
            add
            {
                HookHandler._beforeCheckTouching += value;
                HookHandler.HookCheckTouching();
            }
            remove => HookHandler._beforeCheckTouching -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnCollisionEnter2D_NormalArgs OnCollisionEnter2D
        {
            add
            {
                HookHandler._afterOnCollisionEnter2D += value;
                HookHandler.HookOnCollisionEnter2D();
            }
            remove => HookHandler._afterOnCollisionEnter2D -= value;
        }

        public static event Delegates.OnCollisionStay2D_NormalArgs OnCollisionStay2D
        {
            add
            {
                HookHandler._afterOnCollisionStay2D += value;
                HookHandler.HookOnCollisionStay2D();
            }
            remove => HookHandler._afterOnCollisionStay2D -= value;
        }

        public static event Delegates.HandleCollision_NormalArgs HandleCollision
        {
            add
            {
                HookHandler._afterHandleCollision += value;
                HookHandler.HookHandleCollision();
            }
            remove => HookHandler._afterHandleCollision -= value;
        }

        public static event Delegates.CheckTouching_NormalArgs CheckTouching
        {
            add
            {
                HookHandler._afterCheckTouching += value;
                HookHandler.HookCheckTouching();
            }
            remove => HookHandler._afterCheckTouching -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.CollisionEnterEvent.hook_Awake Awake
        {
            add => On.CollisionEnterEvent.Awake += value;
            remove => On.CollisionEnterEvent.Awake -= value;
        }

        public static event On.CollisionEnterEvent.hook_OnCollisionEnter2D OnCollisionEnter2D
        {
            add => On.CollisionEnterEvent.OnCollisionEnter2D += value;
            remove => On.CollisionEnterEvent.OnCollisionEnter2D -= value;
        }

        public static event On.CollisionEnterEvent.hook_OnCollisionStay2D OnCollisionStay2D
        {
            add => On.CollisionEnterEvent.OnCollisionStay2D += value;
            remove => On.CollisionEnterEvent.OnCollisionStay2D -= value;
        }

        public static event On.CollisionEnterEvent.hook_HandleCollision HandleCollision
        {
            add => On.CollisionEnterEvent.HandleCollision += value;
            remove => On.CollisionEnterEvent.HandleCollision -= value;
        }

        public static event On.CollisionEnterEvent.hook_CheckTouching CheckTouching
        {
            add => On.CollisionEnterEvent.CheckTouching += value;
            remove => On.CollisionEnterEvent.CheckTouching -= value;
        }
    }
}