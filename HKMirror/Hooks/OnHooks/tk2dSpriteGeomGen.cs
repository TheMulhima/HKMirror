namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dSpriteGeomGen class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dSpriteGeomGen
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookSetSpriteColors()
        {
            if (!HookedList.Contains("SetSpriteColors"))
            {
                HookedList.Add("SetSpriteColors");
                On.tk2dSpriteGeomGen.SetSpriteColors += SetSpriteColors;
            }
        }

        internal static event Delegates.SetSpriteColors_BeforeArgs _beforeSetSpriteColors;
        internal static event Delegates.SetSpriteColors_AfterArgs _afterSetSpriteColors;

        private static void SetSpriteColors(On.tk2dSpriteGeomGen.orig_SetSpriteColors orig, Color32[] dest, int offset,
            int numVertices, Color c, bool premulAlpha)
        {
            Delegates.Params_SetSpriteColors @params = new()
            {
                dest = dest, offset = offset, numVertices = numVertices, c = c, premulAlpha = premulAlpha
            };
            if (_beforeSetSpriteColors != null)
                foreach (Delegates.SetSpriteColors_BeforeArgs toInvoke in _beforeSetSpriteColors.GetInvocationList())
                    try
                    {
                        _beforeSetSpriteColors?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            dest = @params.dest;
            offset = @params.offset;
            numVertices = @params.numVertices;
            c = @params.c;
            premulAlpha = @params.premulAlpha;
            orig(dest, offset, numVertices, c, premulAlpha);
            if (_afterSetSpriteColors != null)
                foreach (Delegates.SetSpriteColors_AfterArgs toInvoke in _afterSetSpriteColors.GetInvocationList())
                    try
                    {
                        _afterSetSpriteColors.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetSpriteGeomDesc()
        {
            if (!HookedList.Contains("GetSpriteGeomDesc"))
            {
                HookedList.Add("GetSpriteGeomDesc");
                On.tk2dSpriteGeomGen.GetSpriteGeomDesc += GetSpriteGeomDesc;
            }
        }

        internal static event Delegates.GetSpriteGeomDesc_BeforeArgs _beforeGetSpriteGeomDesc;
        internal static event Delegates.GetSpriteGeomDesc_AfterArgs _afterGetSpriteGeomDesc;

        private static void GetSpriteGeomDesc(On.tk2dSpriteGeomGen.orig_GetSpriteGeomDesc orig, out int numVertices,
            out int numIndices, tk2dSpriteDefinition spriteDef)
        {
            Delegates.Params_GetSpriteGeomDesc @params = new()
            {
                spriteDef = spriteDef
            };
            if (_beforeGetSpriteGeomDesc != null)
                foreach (Delegates.GetSpriteGeomDesc_BeforeArgs toInvoke in
                         _beforeGetSpriteGeomDesc.GetInvocationList())
                    try
                    {
                        _beforeGetSpriteGeomDesc?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            numVertices = @params.numVertices;
            numIndices = @params.numIndices;
            spriteDef = @params.spriteDef;
            orig(out numVertices, out numIndices, spriteDef);
            if (_afterGetSpriteGeomDesc != null)
                foreach (Delegates.GetSpriteGeomDesc_AfterArgs toInvoke in _afterGetSpriteGeomDesc.GetInvocationList())
                    try
                    {
                        _afterGetSpriteGeomDesc.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetSpriteGeom()
        {
            if (!HookedList.Contains("SetSpriteGeom"))
            {
                HookedList.Add("SetSpriteGeom");
                On.tk2dSpriteGeomGen.SetSpriteGeom += SetSpriteGeom;
            }
        }

        internal static event Delegates.SetSpriteGeom_BeforeArgs _beforeSetSpriteGeom;
        internal static event Delegates.SetSpriteGeom_AfterArgs _afterSetSpriteGeom;

        private static void SetSpriteGeom(On.tk2dSpriteGeomGen.orig_SetSpriteGeom orig, Vector3[] pos, Vector2[] uv,
            Vector3[] norm, Vector4[] tang, int offset, tk2dSpriteDefinition spriteDef, Vector3 scale)
        {
            Delegates.Params_SetSpriteGeom @params = new()
            {
                pos = pos, uv = uv, norm = norm, tang = tang, offset = offset, spriteDef = spriteDef, scale = scale
            };
            if (_beforeSetSpriteGeom != null)
                foreach (Delegates.SetSpriteGeom_BeforeArgs toInvoke in _beforeSetSpriteGeom.GetInvocationList())
                    try
                    {
                        _beforeSetSpriteGeom?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            pos = @params.pos;
            uv = @params.uv;
            norm = @params.norm;
            tang = @params.tang;
            offset = @params.offset;
            spriteDef = @params.spriteDef;
            scale = @params.scale;
            orig(pos, uv, norm, tang, offset, spriteDef, scale);
            if (_afterSetSpriteGeom != null)
                foreach (Delegates.SetSpriteGeom_AfterArgs toInvoke in _afterSetSpriteGeom.GetInvocationList())
                    try
                    {
                        _afterSetSpriteGeom.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetSpriteIndices()
        {
            if (!HookedList.Contains("SetSpriteIndices"))
            {
                HookedList.Add("SetSpriteIndices");
                On.tk2dSpriteGeomGen.SetSpriteIndices += SetSpriteIndices;
            }
        }

        internal static event Delegates.SetSpriteIndices_BeforeArgs _beforeSetSpriteIndices;
        internal static event Delegates.SetSpriteIndices_AfterArgs _afterSetSpriteIndices;

        private static void SetSpriteIndices(On.tk2dSpriteGeomGen.orig_SetSpriteIndices orig, int[] indices, int offset,
            int vStart, tk2dSpriteDefinition spriteDef)
        {
            Delegates.Params_SetSpriteIndices @params = new()
            {
                indices = indices, offset = offset, vStart = vStart, spriteDef = spriteDef
            };
            if (_beforeSetSpriteIndices != null)
                foreach (Delegates.SetSpriteIndices_BeforeArgs toInvoke in _beforeSetSpriteIndices.GetInvocationList())
                    try
                    {
                        _beforeSetSpriteIndices?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            indices = @params.indices;
            offset = @params.offset;
            vStart = @params.vStart;
            spriteDef = @params.spriteDef;
            orig(indices, offset, vStart, spriteDef);
            if (_afterSetSpriteIndices != null)
                foreach (Delegates.SetSpriteIndices_AfterArgs toInvoke in _afterSetSpriteIndices.GetInvocationList())
                    try
                    {
                        _afterSetSpriteIndices.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetClippedSpriteGeomDesc()
        {
            if (!HookedList.Contains("GetClippedSpriteGeomDesc"))
            {
                HookedList.Add("GetClippedSpriteGeomDesc");
                On.tk2dSpriteGeomGen.GetClippedSpriteGeomDesc += GetClippedSpriteGeomDesc;
            }
        }

        internal static event Delegates.GetClippedSpriteGeomDesc_BeforeArgs _beforeGetClippedSpriteGeomDesc;
        internal static event Delegates.GetClippedSpriteGeomDesc_AfterArgs _afterGetClippedSpriteGeomDesc;

        private static void GetClippedSpriteGeomDesc(On.tk2dSpriteGeomGen.orig_GetClippedSpriteGeomDesc orig,
            out int numVertices, out int numIndices, tk2dSpriteDefinition spriteDef)
        {
            Delegates.Params_GetClippedSpriteGeomDesc @params = new()
            {
                spriteDef = spriteDef
            };
            if (_beforeGetClippedSpriteGeomDesc != null)
                foreach (Delegates.GetClippedSpriteGeomDesc_BeforeArgs toInvoke in _beforeGetClippedSpriteGeomDesc
                             .GetInvocationList())
                    try
                    {
                        _beforeGetClippedSpriteGeomDesc?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            numVertices = @params.numVertices;
            numIndices = @params.numIndices;
            spriteDef = @params.spriteDef;
            orig(out numVertices, out numIndices, spriteDef);
            if (_afterGetClippedSpriteGeomDesc != null)
                foreach (Delegates.GetClippedSpriteGeomDesc_AfterArgs toInvoke in _afterGetClippedSpriteGeomDesc
                             .GetInvocationList())
                    try
                    {
                        _afterGetClippedSpriteGeomDesc.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetClippedSpriteGeom()
        {
            if (!HookedList.Contains("SetClippedSpriteGeom"))
            {
                HookedList.Add("SetClippedSpriteGeom");
                On.tk2dSpriteGeomGen.SetClippedSpriteGeom += SetClippedSpriteGeom;
            }
        }

        internal static event Delegates.SetClippedSpriteGeom_BeforeArgs _beforeSetClippedSpriteGeom;
        internal static event Delegates.SetClippedSpriteGeom_AfterArgs _afterSetClippedSpriteGeom;

        private static void SetClippedSpriteGeom(On.tk2dSpriteGeomGen.orig_SetClippedSpriteGeom orig, Vector3[] pos,
            Vector2[] uv, int offset, out Vector3 boundsCenter, out Vector3 boundsExtents,
            tk2dSpriteDefinition spriteDef, Vector3 scale, Vector2 clipBottomLeft, Vector2 clipTopRight,
            float colliderOffsetZ, float colliderExtentZ)
        {
            Delegates.Params_SetClippedSpriteGeom @params = new()
            {
                pos = pos, uv = uv, offset = offset,
                spriteDef = spriteDef, scale = scale, clipBottomLeft = clipBottomLeft, clipTopRight = clipTopRight,
                colliderOffsetZ = colliderOffsetZ, colliderExtentZ = colliderExtentZ
            };
            if (_beforeSetClippedSpriteGeom != null)
                foreach (Delegates.SetClippedSpriteGeom_BeforeArgs toInvoke in _beforeSetClippedSpriteGeom
                             .GetInvocationList())
                    try
                    {
                        _beforeSetClippedSpriteGeom?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            pos = @params.pos;
            uv = @params.uv;
            offset = @params.offset;
            boundsCenter = @params.boundsCenter;
            boundsExtents = @params.boundsExtents;
            spriteDef = @params.spriteDef;
            scale = @params.scale;
            clipBottomLeft = @params.clipBottomLeft;
            clipTopRight = @params.clipTopRight;
            colliderOffsetZ = @params.colliderOffsetZ;
            colliderExtentZ = @params.colliderExtentZ;
            orig(pos, uv, offset, out boundsCenter, out boundsExtents, spriteDef, scale, clipBottomLeft, clipTopRight,
                colliderOffsetZ, colliderExtentZ);
            if (_afterSetClippedSpriteGeom != null)
                foreach (Delegates.SetClippedSpriteGeom_AfterArgs toInvoke in _afterSetClippedSpriteGeom
                             .GetInvocationList())
                    try
                    {
                        _afterSetClippedSpriteGeom.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetClippedSpriteIndices()
        {
            if (!HookedList.Contains("SetClippedSpriteIndices"))
            {
                HookedList.Add("SetClippedSpriteIndices");
                On.tk2dSpriteGeomGen.SetClippedSpriteIndices += SetClippedSpriteIndices;
            }
        }

        internal static event Delegates.SetClippedSpriteIndices_BeforeArgs _beforeSetClippedSpriteIndices;
        internal static event Delegates.SetClippedSpriteIndices_AfterArgs _afterSetClippedSpriteIndices;

        private static void SetClippedSpriteIndices(On.tk2dSpriteGeomGen.orig_SetClippedSpriteIndices orig,
            int[] indices, int offset, int vStart, tk2dSpriteDefinition spriteDef)
        {
            Delegates.Params_SetClippedSpriteIndices @params = new()
            {
                indices = indices, offset = offset, vStart = vStart, spriteDef = spriteDef
            };
            if (_beforeSetClippedSpriteIndices != null)
                foreach (Delegates.SetClippedSpriteIndices_BeforeArgs toInvoke in _beforeSetClippedSpriteIndices
                             .GetInvocationList())
                    try
                    {
                        _beforeSetClippedSpriteIndices?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            indices = @params.indices;
            offset = @params.offset;
            vStart = @params.vStart;
            spriteDef = @params.spriteDef;
            orig(indices, offset, vStart, spriteDef);
            if (_afterSetClippedSpriteIndices != null)
                foreach (Delegates.SetClippedSpriteIndices_AfterArgs toInvoke in _afterSetClippedSpriteIndices
                             .GetInvocationList())
                    try
                    {
                        _afterSetClippedSpriteIndices.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetSlicedSpriteGeomDesc()
        {
            if (!HookedList.Contains("GetSlicedSpriteGeomDesc"))
            {
                HookedList.Add("GetSlicedSpriteGeomDesc");
                On.tk2dSpriteGeomGen.GetSlicedSpriteGeomDesc += GetSlicedSpriteGeomDesc;
            }
        }

        internal static event Delegates.GetSlicedSpriteGeomDesc_BeforeArgs _beforeGetSlicedSpriteGeomDesc;
        internal static event Delegates.GetSlicedSpriteGeomDesc_AfterArgs _afterGetSlicedSpriteGeomDesc;

        private static void GetSlicedSpriteGeomDesc(On.tk2dSpriteGeomGen.orig_GetSlicedSpriteGeomDesc orig,
            out int numVertices, out int numIndices, tk2dSpriteDefinition spriteDef, bool borderOnly)
        {
            Delegates.Params_GetSlicedSpriteGeomDesc @params = new()
            {
                spriteDef = spriteDef, borderOnly = borderOnly
            };
            if (_beforeGetSlicedSpriteGeomDesc != null)
                foreach (Delegates.GetSlicedSpriteGeomDesc_BeforeArgs toInvoke in _beforeGetSlicedSpriteGeomDesc
                             .GetInvocationList())
                    try
                    {
                        _beforeGetSlicedSpriteGeomDesc?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            numVertices = @params.numVertices;
            numIndices = @params.numIndices;
            spriteDef = @params.spriteDef;
            borderOnly = @params.borderOnly;
            orig(out numVertices, out numIndices, spriteDef, borderOnly);
            if (_afterGetSlicedSpriteGeomDesc != null)
                foreach (Delegates.GetSlicedSpriteGeomDesc_AfterArgs toInvoke in _afterGetSlicedSpriteGeomDesc
                             .GetInvocationList())
                    try
                    {
                        _afterGetSlicedSpriteGeomDesc.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetSlicedSpriteIndices()
        {
            if (!HookedList.Contains("SetSlicedSpriteIndices"))
            {
                HookedList.Add("SetSlicedSpriteIndices");
                On.tk2dSpriteGeomGen.SetSlicedSpriteIndices += SetSlicedSpriteIndices;
            }
        }

        internal static event Delegates.SetSlicedSpriteIndices_BeforeArgs _beforeSetSlicedSpriteIndices;
        internal static event Delegates.SetSlicedSpriteIndices_AfterArgs _afterSetSlicedSpriteIndices;

        private static void SetSlicedSpriteIndices(On.tk2dSpriteGeomGen.orig_SetSlicedSpriteIndices orig, int[] indices,
            int offset, int vStart, tk2dSpriteDefinition spriteDef, bool borderOnly)
        {
            Delegates.Params_SetSlicedSpriteIndices @params = new()
            {
                indices = indices, offset = offset, vStart = vStart, spriteDef = spriteDef, borderOnly = borderOnly
            };
            if (_beforeSetSlicedSpriteIndices != null)
                foreach (Delegates.SetSlicedSpriteIndices_BeforeArgs toInvoke in _beforeSetSlicedSpriteIndices
                             .GetInvocationList())
                    try
                    {
                        _beforeSetSlicedSpriteIndices?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            indices = @params.indices;
            offset = @params.offset;
            vStart = @params.vStart;
            spriteDef = @params.spriteDef;
            borderOnly = @params.borderOnly;
            orig(indices, offset, vStart, spriteDef, borderOnly);
            if (_afterSetSlicedSpriteIndices != null)
                foreach (Delegates.SetSlicedSpriteIndices_AfterArgs toInvoke in _afterSetSlicedSpriteIndices
                             .GetInvocationList())
                    try
                    {
                        _afterSetSlicedSpriteIndices.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetTiledSpriteGeomDesc()
        {
            if (!HookedList.Contains("GetTiledSpriteGeomDesc"))
            {
                HookedList.Add("GetTiledSpriteGeomDesc");
                On.tk2dSpriteGeomGen.GetTiledSpriteGeomDesc += GetTiledSpriteGeomDesc;
            }
        }

        internal static event Delegates.GetTiledSpriteGeomDesc_BeforeArgs _beforeGetTiledSpriteGeomDesc;
        internal static event Delegates.GetTiledSpriteGeomDesc_AfterArgs _afterGetTiledSpriteGeomDesc;

        private static void GetTiledSpriteGeomDesc(On.tk2dSpriteGeomGen.orig_GetTiledSpriteGeomDesc orig,
            out int numVertices, out int numIndices, tk2dSpriteDefinition spriteDef, Vector2 dimensions)
        {
            Delegates.Params_GetTiledSpriteGeomDesc @params = new()
            {
                spriteDef = spriteDef, dimensions = dimensions
            };
            if (_beforeGetTiledSpriteGeomDesc != null)
                foreach (Delegates.GetTiledSpriteGeomDesc_BeforeArgs toInvoke in _beforeGetTiledSpriteGeomDesc
                             .GetInvocationList())
                    try
                    {
                        _beforeGetTiledSpriteGeomDesc?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            numVertices = @params.numVertices;
            numIndices = @params.numIndices;
            spriteDef = @params.spriteDef;
            dimensions = @params.dimensions;
            orig(out numVertices, out numIndices, spriteDef, dimensions);
            if (_afterGetTiledSpriteGeomDesc != null)
                foreach (Delegates.GetTiledSpriteGeomDesc_AfterArgs toInvoke in _afterGetTiledSpriteGeomDesc
                             .GetInvocationList())
                    try
                    {
                        _afterGetTiledSpriteGeomDesc.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetTiledSpriteIndices()
        {
            if (!HookedList.Contains("SetTiledSpriteIndices"))
            {
                HookedList.Add("SetTiledSpriteIndices");
                On.tk2dSpriteGeomGen.SetTiledSpriteIndices += SetTiledSpriteIndices;
            }
        }

        internal static event Delegates.SetTiledSpriteIndices_BeforeArgs _beforeSetTiledSpriteIndices;
        internal static event Delegates.SetTiledSpriteIndices_AfterArgs _afterSetTiledSpriteIndices;

        private static void SetTiledSpriteIndices(On.tk2dSpriteGeomGen.orig_SetTiledSpriteIndices orig, int[] indices,
            int offset, int vStart, tk2dSpriteDefinition spriteDef, Vector2 dimensions)
        {
            Delegates.Params_SetTiledSpriteIndices @params = new()
            {
                indices = indices, offset = offset, vStart = vStart, spriteDef = spriteDef, dimensions = dimensions
            };
            if (_beforeSetTiledSpriteIndices != null)
                foreach (Delegates.SetTiledSpriteIndices_BeforeArgs toInvoke in _beforeSetTiledSpriteIndices
                             .GetInvocationList())
                    try
                    {
                        _beforeSetTiledSpriteIndices?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            indices = @params.indices;
            offset = @params.offset;
            vStart = @params.vStart;
            spriteDef = @params.spriteDef;
            dimensions = @params.dimensions;
            orig(indices, offset, vStart, spriteDef, dimensions);
            if (_afterSetTiledSpriteIndices != null)
                foreach (Delegates.SetTiledSpriteIndices_AfterArgs toInvoke in _afterSetTiledSpriteIndices
                             .GetInvocationList())
                    try
                    {
                        _afterSetTiledSpriteIndices.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetBoxMeshData()
        {
            if (!HookedList.Contains("SetBoxMeshData"))
            {
                HookedList.Add("SetBoxMeshData");
                On.tk2dSpriteGeomGen.SetBoxMeshData += SetBoxMeshData;
            }
        }

        internal static event Delegates.SetBoxMeshData_BeforeArgs _beforeSetBoxMeshData;
        internal static event Delegates.SetBoxMeshData_AfterArgs _afterSetBoxMeshData;

        private static void SetBoxMeshData(On.tk2dSpriteGeomGen.orig_SetBoxMeshData orig, Vector3[] pos, int[] indices,
            int posOffset, int indicesOffset, int vStart, Vector3 origin, Vector3 extents, Matrix4x4 mat,
            Vector3 baseScale)
        {
            Delegates.Params_SetBoxMeshData @params = new()
            {
                pos = pos, indices = indices, posOffset = posOffset, indicesOffset = indicesOffset, vStart = vStart,
                origin = origin, extents = extents, mat = mat, baseScale = baseScale
            };
            if (_beforeSetBoxMeshData != null)
                foreach (Delegates.SetBoxMeshData_BeforeArgs toInvoke in _beforeSetBoxMeshData.GetInvocationList())
                    try
                    {
                        _beforeSetBoxMeshData?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            pos = @params.pos;
            indices = @params.indices;
            posOffset = @params.posOffset;
            indicesOffset = @params.indicesOffset;
            vStart = @params.vStart;
            origin = @params.origin;
            extents = @params.extents;
            mat = @params.mat;
            baseScale = @params.baseScale;
            orig(pos, indices, posOffset, indicesOffset, vStart, origin, extents, mat, baseScale);
            if (_afterSetBoxMeshData != null)
                foreach (Delegates.SetBoxMeshData_AfterArgs toInvoke in _afterSetBoxMeshData.GetInvocationList())
                    try
                    {
                        _afterSetBoxMeshData.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetSpriteDefinitionMeshData()
        {
            if (!HookedList.Contains("SetSpriteDefinitionMeshData"))
            {
                HookedList.Add("SetSpriteDefinitionMeshData");
                On.tk2dSpriteGeomGen.SetSpriteDefinitionMeshData += SetSpriteDefinitionMeshData;
            }
        }

        internal static event Delegates.SetSpriteDefinitionMeshData_BeforeArgs _beforeSetSpriteDefinitionMeshData;
        internal static event Delegates.SetSpriteDefinitionMeshData_AfterArgs _afterSetSpriteDefinitionMeshData;

        private static void SetSpriteDefinitionMeshData(On.tk2dSpriteGeomGen.orig_SetSpriteDefinitionMeshData orig,
            Vector3[] pos, int[] indices, int posOffset, int indicesOffset, int vStart, tk2dSpriteDefinition spriteDef,
            Matrix4x4 mat, Vector3 baseScale)
        {
            Delegates.Params_SetSpriteDefinitionMeshData @params = new()
            {
                pos = pos, indices = indices, posOffset = posOffset, indicesOffset = indicesOffset, vStart = vStart,
                spriteDef = spriteDef, mat = mat, baseScale = baseScale
            };
            if (_beforeSetSpriteDefinitionMeshData != null)
                foreach (Delegates.SetSpriteDefinitionMeshData_BeforeArgs toInvoke in _beforeSetSpriteDefinitionMeshData
                             .GetInvocationList())
                    try
                    {
                        _beforeSetSpriteDefinitionMeshData?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            pos = @params.pos;
            indices = @params.indices;
            posOffset = @params.posOffset;
            indicesOffset = @params.indicesOffset;
            vStart = @params.vStart;
            spriteDef = @params.spriteDef;
            mat = @params.mat;
            baseScale = @params.baseScale;
            orig(pos, indices, posOffset, indicesOffset, vStart, spriteDef, mat, baseScale);
            if (_afterSetSpriteDefinitionMeshData != null)
                foreach (Delegates.SetSpriteDefinitionMeshData_AfterArgs toInvoke in _afterSetSpriteDefinitionMeshData
                             .GetInvocationList())
                    try
                    {
                        _afterSetSpriteDefinitionMeshData.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetSpriteVertexNormals()
        {
            if (!HookedList.Contains("SetSpriteVertexNormals"))
            {
                HookedList.Add("SetSpriteVertexNormals");
                On.tk2dSpriteGeomGen.SetSpriteVertexNormals += SetSpriteVertexNormals;
            }
        }

        internal static event Delegates.SetSpriteVertexNormals_BeforeArgs _beforeSetSpriteVertexNormals;
        internal static event Delegates.SetSpriteVertexNormals_AfterArgs _afterSetSpriteVertexNormals;

        private static void SetSpriteVertexNormals(On.tk2dSpriteGeomGen.orig_SetSpriteVertexNormals orig, Vector3[] pos,
            Vector3 pMin, Vector3 pMax, Vector3[] spriteDefNormals, Vector4[] spriteDefTangents, Vector3[] normals,
            Vector4[] tangents)
        {
            Delegates.Params_SetSpriteVertexNormals @params = new()
            {
                pos = pos, pMin = pMin, pMax = pMax, spriteDefNormals = spriteDefNormals,
                spriteDefTangents = spriteDefTangents, normals = normals, tangents = tangents
            };
            if (_beforeSetSpriteVertexNormals != null)
                foreach (Delegates.SetSpriteVertexNormals_BeforeArgs toInvoke in _beforeSetSpriteVertexNormals
                             .GetInvocationList())
                    try
                    {
                        _beforeSetSpriteVertexNormals?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            pos = @params.pos;
            pMin = @params.pMin;
            pMax = @params.pMax;
            spriteDefNormals = @params.spriteDefNormals;
            spriteDefTangents = @params.spriteDefTangents;
            normals = @params.normals;
            tangents = @params.tangents;
            orig(pos, pMin, pMax, spriteDefNormals, spriteDefTangents, normals, tangents);
            if (_afterSetSpriteVertexNormals != null)
                foreach (Delegates.SetSpriteVertexNormals_AfterArgs toInvoke in _afterSetSpriteVertexNormals
                             .GetInvocationList())
                    try
                    {
                        _afterSetSpriteVertexNormals.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void GetClippedSpriteGeomDesc_AfterArgs(Params_GetClippedSpriteGeomDesc args);

        public delegate void GetClippedSpriteGeomDesc_BeforeArgs(Params_GetClippedSpriteGeomDesc args);

        public delegate void GetClippedSpriteGeomDesc_WithArgs(Action<int, int, tk2dSpriteDefinition> orig,
            out int numVertices, out int numIndices, tk2dSpriteDefinition spriteDef);

        public delegate void GetSlicedSpriteGeomDesc_AfterArgs(Params_GetSlicedSpriteGeomDesc args);

        public delegate void GetSlicedSpriteGeomDesc_BeforeArgs(Params_GetSlicedSpriteGeomDesc args);

        public delegate void GetSlicedSpriteGeomDesc_WithArgs(Action<int, int, tk2dSpriteDefinition, bool> orig,
            out int numVertices, out int numIndices, tk2dSpriteDefinition spriteDef, bool borderOnly);

        public delegate void GetSpriteGeomDesc_AfterArgs(Params_GetSpriteGeomDesc args);

        public delegate void GetSpriteGeomDesc_BeforeArgs(Params_GetSpriteGeomDesc args);

        public delegate void GetSpriteGeomDesc_WithArgs(Action<int, int, tk2dSpriteDefinition> orig,
            out int numVertices, out int numIndices, tk2dSpriteDefinition spriteDef);

        public delegate void GetTiledSpriteGeomDesc_AfterArgs(Params_GetTiledSpriteGeomDesc args);

        public delegate void GetTiledSpriteGeomDesc_BeforeArgs(Params_GetTiledSpriteGeomDesc args);

        public delegate void GetTiledSpriteGeomDesc_WithArgs(Action<int, int, tk2dSpriteDefinition, Vector2> orig,
            out int numVertices, out int numIndices, tk2dSpriteDefinition spriteDef, Vector2 dimensions);

        public delegate void SetBoxMeshData_AfterArgs(Params_SetBoxMeshData args);

        public delegate void SetBoxMeshData_BeforeArgs(Params_SetBoxMeshData args);

        public delegate void SetBoxMeshData_WithArgs(
            Action<Vector3[], int[], int, int, int, Vector3, Vector3, Matrix4x4, Vector3> orig, Vector3[] pos,
            int[] indices, int posOffset, int indicesOffset, int vStart, Vector3 origin, Vector3 extents, Matrix4x4 mat,
            Vector3 baseScale);

        public delegate void SetClippedSpriteGeom_AfterArgs(Params_SetClippedSpriteGeom args);

        public delegate void SetClippedSpriteGeom_BeforeArgs(Params_SetClippedSpriteGeom args);

        public delegate void SetClippedSpriteGeom_WithArgs(
            Action<Vector3[], Vector2[], int, Vector3, Vector3, tk2dSpriteDefinition, Vector3, Vector2, Vector2, float,
                float> orig, Vector3[] pos, Vector2[] uv, int offset, out Vector3 boundsCenter,
            out Vector3 boundsExtents, tk2dSpriteDefinition spriteDef, Vector3 scale, Vector2 clipBottomLeft,
            Vector2 clipTopRight, float colliderOffsetZ, float colliderExtentZ);

        public delegate void SetClippedSpriteIndices_AfterArgs(Params_SetClippedSpriteIndices args);

        public delegate void SetClippedSpriteIndices_BeforeArgs(Params_SetClippedSpriteIndices args);

        public delegate void SetClippedSpriteIndices_WithArgs(Action<int[], int, int, tk2dSpriteDefinition> orig,
            int[] indices, int offset, int vStart, tk2dSpriteDefinition spriteDef);

        public delegate void SetSlicedSpriteIndices_AfterArgs(Params_SetSlicedSpriteIndices args);

        public delegate void SetSlicedSpriteIndices_BeforeArgs(Params_SetSlicedSpriteIndices args);

        public delegate void SetSlicedSpriteIndices_WithArgs(Action<int[], int, int, tk2dSpriteDefinition, bool> orig,
            int[] indices, int offset, int vStart, tk2dSpriteDefinition spriteDef, bool borderOnly);

        public delegate void SetSpriteColors_AfterArgs(Params_SetSpriteColors args);

        public delegate void SetSpriteColors_BeforeArgs(Params_SetSpriteColors args);

        public delegate void SetSpriteColors_WithArgs(Action<Color32[], int, int, Color, bool> orig, Color32[] dest,
            int offset, int numVertices, Color c, bool premulAlpha);

        public delegate void SetSpriteDefinitionMeshData_AfterArgs(Params_SetSpriteDefinitionMeshData args);

        public delegate void SetSpriteDefinitionMeshData_BeforeArgs(Params_SetSpriteDefinitionMeshData args);

        public delegate void SetSpriteDefinitionMeshData_WithArgs(
            Action<Vector3[], int[], int, int, int, tk2dSpriteDefinition, Matrix4x4, Vector3> orig, Vector3[] pos,
            int[] indices, int posOffset, int indicesOffset, int vStart, tk2dSpriteDefinition spriteDef, Matrix4x4 mat,
            Vector3 baseScale);

        public delegate void SetSpriteGeom_AfterArgs(Params_SetSpriteGeom args);

        public delegate void SetSpriteGeom_BeforeArgs(Params_SetSpriteGeom args);

        public delegate void SetSpriteGeom_WithArgs(
            Action<Vector3[], Vector2[], Vector3[], Vector4[], int, tk2dSpriteDefinition, Vector3> orig, Vector3[] pos,
            Vector2[] uv, Vector3[] norm, Vector4[] tang, int offset, tk2dSpriteDefinition spriteDef, Vector3 scale);

        public delegate void SetSpriteIndices_AfterArgs(Params_SetSpriteIndices args);

        public delegate void SetSpriteIndices_BeforeArgs(Params_SetSpriteIndices args);

        public delegate void SetSpriteIndices_WithArgs(Action<int[], int, int, tk2dSpriteDefinition> orig,
            int[] indices, int offset, int vStart, tk2dSpriteDefinition spriteDef);

        public delegate void SetSpriteVertexNormals_AfterArgs(Params_SetSpriteVertexNormals args);

        public delegate void SetSpriteVertexNormals_BeforeArgs(Params_SetSpriteVertexNormals args);

        public delegate void SetSpriteVertexNormals_WithArgs(
            Action<Vector3[], Vector3, Vector3, Vector3[], Vector4[], Vector3[], Vector4[]> orig, Vector3[] pos,
            Vector3 pMin, Vector3 pMax, Vector3[] spriteDefNormals, Vector4[] spriteDefTangents, Vector3[] normals,
            Vector4[] tangents);

        public delegate void SetTiledSpriteIndices_AfterArgs(Params_SetTiledSpriteIndices args);

        public delegate void SetTiledSpriteIndices_BeforeArgs(Params_SetTiledSpriteIndices args);

        public delegate void SetTiledSpriteIndices_WithArgs(Action<int[], int, int, tk2dSpriteDefinition, Vector2> orig,
            int[] indices, int offset, int vStart, tk2dSpriteDefinition spriteDef, Vector2 dimensions);

        public sealed class Params_SetSpriteColors
        {
            public Color c;
            public Color32[] dest;
            public int numVertices;
            public int offset;
            public bool premulAlpha;
        }

        public sealed class Params_GetSpriteGeomDesc
        {
            public int numIndices;
            public int numVertices;
            public tk2dSpriteDefinition spriteDef;
        }

        public sealed class Params_SetSpriteGeom
        {
            public Vector3[] norm;
            public int offset;
            public Vector3[] pos;
            public Vector3 scale;
            public tk2dSpriteDefinition spriteDef;
            public Vector4[] tang;
            public Vector2[] uv;
        }

        public sealed class Params_SetSpriteIndices
        {
            public int[] indices;
            public int offset;
            public tk2dSpriteDefinition spriteDef;
            public int vStart;
        }

        public sealed class Params_GetClippedSpriteGeomDesc
        {
            public int numIndices;
            public int numVertices;
            public tk2dSpriteDefinition spriteDef;
        }

        public sealed class Params_SetClippedSpriteGeom
        {
            public Vector3 boundsCenter;
            public Vector3 boundsExtents;
            public Vector2 clipBottomLeft;
            public Vector2 clipTopRight;
            public float colliderExtentZ;
            public float colliderOffsetZ;
            public int offset;
            public Vector3[] pos;
            public Vector3 scale;
            public tk2dSpriteDefinition spriteDef;
            public Vector2[] uv;
        }

        public sealed class Params_SetClippedSpriteIndices
        {
            public int[] indices;
            public int offset;
            public tk2dSpriteDefinition spriteDef;
            public int vStart;
        }

        public sealed class Params_GetSlicedSpriteGeomDesc
        {
            public bool borderOnly;
            public int numIndices;
            public int numVertices;
            public tk2dSpriteDefinition spriteDef;
        }

        public sealed class Params_SetSlicedSpriteIndices
        {
            public bool borderOnly;
            public int[] indices;
            public int offset;
            public tk2dSpriteDefinition spriteDef;
            public int vStart;
        }

        public sealed class Params_GetTiledSpriteGeomDesc
        {
            public Vector2 dimensions;
            public int numIndices;
            public int numVertices;
            public tk2dSpriteDefinition spriteDef;
        }

        public sealed class Params_SetTiledSpriteIndices
        {
            public Vector2 dimensions;
            public int[] indices;
            public int offset;
            public tk2dSpriteDefinition spriteDef;
            public int vStart;
        }

        public sealed class Params_SetBoxMeshData
        {
            public Vector3 baseScale;
            public Vector3 extents;
            public int[] indices;
            public int indicesOffset;
            public Matrix4x4 mat;
            public Vector3 origin;
            public Vector3[] pos;
            public int posOffset;
            public int vStart;
        }

        public sealed class Params_SetSpriteDefinitionMeshData
        {
            public Vector3 baseScale;
            public int[] indices;
            public int indicesOffset;
            public Matrix4x4 mat;
            public Vector3[] pos;
            public int posOffset;
            public tk2dSpriteDefinition spriteDef;
            public int vStart;
        }

        public sealed class Params_SetSpriteVertexNormals
        {
            public Vector3[] normals;
            public Vector3 pMax;
            public Vector3 pMin;
            public Vector3[] pos;
            public Vector3[] spriteDefNormals;
            public Vector4[] spriteDefTangents;
            public Vector4[] tangents;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.SetSpriteColors_BeforeArgs SetSpriteColors
        {
            add
            {
                HookHandler._beforeSetSpriteColors += value;
                HookHandler.HookSetSpriteColors();
            }
            remove => HookHandler._beforeSetSpriteColors -= value;
        }

        public static event Delegates.GetSpriteGeomDesc_BeforeArgs GetSpriteGeomDesc
        {
            add
            {
                HookHandler._beforeGetSpriteGeomDesc += value;
                HookHandler.HookGetSpriteGeomDesc();
            }
            remove => HookHandler._beforeGetSpriteGeomDesc -= value;
        }

        public static event Delegates.SetSpriteGeom_BeforeArgs SetSpriteGeom
        {
            add
            {
                HookHandler._beforeSetSpriteGeom += value;
                HookHandler.HookSetSpriteGeom();
            }
            remove => HookHandler._beforeSetSpriteGeom -= value;
        }

        public static event Delegates.SetSpriteIndices_BeforeArgs SetSpriteIndices
        {
            add
            {
                HookHandler._beforeSetSpriteIndices += value;
                HookHandler.HookSetSpriteIndices();
            }
            remove => HookHandler._beforeSetSpriteIndices -= value;
        }

        public static event Delegates.GetClippedSpriteGeomDesc_BeforeArgs GetClippedSpriteGeomDesc
        {
            add
            {
                HookHandler._beforeGetClippedSpriteGeomDesc += value;
                HookHandler.HookGetClippedSpriteGeomDesc();
            }
            remove => HookHandler._beforeGetClippedSpriteGeomDesc -= value;
        }

        public static event Delegates.SetClippedSpriteGeom_BeforeArgs SetClippedSpriteGeom
        {
            add
            {
                HookHandler._beforeSetClippedSpriteGeom += value;
                HookHandler.HookSetClippedSpriteGeom();
            }
            remove => HookHandler._beforeSetClippedSpriteGeom -= value;
        }

        public static event Delegates.SetClippedSpriteIndices_BeforeArgs SetClippedSpriteIndices
        {
            add
            {
                HookHandler._beforeSetClippedSpriteIndices += value;
                HookHandler.HookSetClippedSpriteIndices();
            }
            remove => HookHandler._beforeSetClippedSpriteIndices -= value;
        }

        public static event Delegates.GetSlicedSpriteGeomDesc_BeforeArgs GetSlicedSpriteGeomDesc
        {
            add
            {
                HookHandler._beforeGetSlicedSpriteGeomDesc += value;
                HookHandler.HookGetSlicedSpriteGeomDesc();
            }
            remove => HookHandler._beforeGetSlicedSpriteGeomDesc -= value;
        }

        public static event Delegates.SetSlicedSpriteIndices_BeforeArgs SetSlicedSpriteIndices
        {
            add
            {
                HookHandler._beforeSetSlicedSpriteIndices += value;
                HookHandler.HookSetSlicedSpriteIndices();
            }
            remove => HookHandler._beforeSetSlicedSpriteIndices -= value;
        }

        public static event Delegates.GetTiledSpriteGeomDesc_BeforeArgs GetTiledSpriteGeomDesc
        {
            add
            {
                HookHandler._beforeGetTiledSpriteGeomDesc += value;
                HookHandler.HookGetTiledSpriteGeomDesc();
            }
            remove => HookHandler._beforeGetTiledSpriteGeomDesc -= value;
        }

        public static event Delegates.SetTiledSpriteIndices_BeforeArgs SetTiledSpriteIndices
        {
            add
            {
                HookHandler._beforeSetTiledSpriteIndices += value;
                HookHandler.HookSetTiledSpriteIndices();
            }
            remove => HookHandler._beforeSetTiledSpriteIndices -= value;
        }

        public static event Delegates.SetBoxMeshData_BeforeArgs SetBoxMeshData
        {
            add
            {
                HookHandler._beforeSetBoxMeshData += value;
                HookHandler.HookSetBoxMeshData();
            }
            remove => HookHandler._beforeSetBoxMeshData -= value;
        }

        public static event Delegates.SetSpriteDefinitionMeshData_BeforeArgs SetSpriteDefinitionMeshData
        {
            add
            {
                HookHandler._beforeSetSpriteDefinitionMeshData += value;
                HookHandler.HookSetSpriteDefinitionMeshData();
            }
            remove => HookHandler._beforeSetSpriteDefinitionMeshData -= value;
        }

        public static event Delegates.SetSpriteVertexNormals_BeforeArgs SetSpriteVertexNormals
        {
            add
            {
                HookHandler._beforeSetSpriteVertexNormals += value;
                HookHandler.HookSetSpriteVertexNormals();
            }
            remove => HookHandler._beforeSetSpriteVertexNormals -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.SetSpriteColors_AfterArgs SetSpriteColors
        {
            add
            {
                HookHandler._afterSetSpriteColors += value;
                HookHandler.HookSetSpriteColors();
            }
            remove => HookHandler._afterSetSpriteColors -= value;
        }

        public static event Delegates.GetSpriteGeomDesc_AfterArgs GetSpriteGeomDesc
        {
            add
            {
                HookHandler._afterGetSpriteGeomDesc += value;
                HookHandler.HookGetSpriteGeomDesc();
            }
            remove => HookHandler._afterGetSpriteGeomDesc -= value;
        }

        public static event Delegates.SetSpriteGeom_AfterArgs SetSpriteGeom
        {
            add
            {
                HookHandler._afterSetSpriteGeom += value;
                HookHandler.HookSetSpriteGeom();
            }
            remove => HookHandler._afterSetSpriteGeom -= value;
        }

        public static event Delegates.SetSpriteIndices_AfterArgs SetSpriteIndices
        {
            add
            {
                HookHandler._afterSetSpriteIndices += value;
                HookHandler.HookSetSpriteIndices();
            }
            remove => HookHandler._afterSetSpriteIndices -= value;
        }

        public static event Delegates.GetClippedSpriteGeomDesc_AfterArgs GetClippedSpriteGeomDesc
        {
            add
            {
                HookHandler._afterGetClippedSpriteGeomDesc += value;
                HookHandler.HookGetClippedSpriteGeomDesc();
            }
            remove => HookHandler._afterGetClippedSpriteGeomDesc -= value;
        }

        public static event Delegates.SetClippedSpriteGeom_AfterArgs SetClippedSpriteGeom
        {
            add
            {
                HookHandler._afterSetClippedSpriteGeom += value;
                HookHandler.HookSetClippedSpriteGeom();
            }
            remove => HookHandler._afterSetClippedSpriteGeom -= value;
        }

        public static event Delegates.SetClippedSpriteIndices_AfterArgs SetClippedSpriteIndices
        {
            add
            {
                HookHandler._afterSetClippedSpriteIndices += value;
                HookHandler.HookSetClippedSpriteIndices();
            }
            remove => HookHandler._afterSetClippedSpriteIndices -= value;
        }

        public static event Delegates.GetSlicedSpriteGeomDesc_AfterArgs GetSlicedSpriteGeomDesc
        {
            add
            {
                HookHandler._afterGetSlicedSpriteGeomDesc += value;
                HookHandler.HookGetSlicedSpriteGeomDesc();
            }
            remove => HookHandler._afterGetSlicedSpriteGeomDesc -= value;
        }

        public static event Delegates.SetSlicedSpriteIndices_AfterArgs SetSlicedSpriteIndices
        {
            add
            {
                HookHandler._afterSetSlicedSpriteIndices += value;
                HookHandler.HookSetSlicedSpriteIndices();
            }
            remove => HookHandler._afterSetSlicedSpriteIndices -= value;
        }

        public static event Delegates.GetTiledSpriteGeomDesc_AfterArgs GetTiledSpriteGeomDesc
        {
            add
            {
                HookHandler._afterGetTiledSpriteGeomDesc += value;
                HookHandler.HookGetTiledSpriteGeomDesc();
            }
            remove => HookHandler._afterGetTiledSpriteGeomDesc -= value;
        }

        public static event Delegates.SetTiledSpriteIndices_AfterArgs SetTiledSpriteIndices
        {
            add
            {
                HookHandler._afterSetTiledSpriteIndices += value;
                HookHandler.HookSetTiledSpriteIndices();
            }
            remove => HookHandler._afterSetTiledSpriteIndices -= value;
        }

        public static event Delegates.SetBoxMeshData_AfterArgs SetBoxMeshData
        {
            add
            {
                HookHandler._afterSetBoxMeshData += value;
                HookHandler.HookSetBoxMeshData();
            }
            remove => HookHandler._afterSetBoxMeshData -= value;
        }

        public static event Delegates.SetSpriteDefinitionMeshData_AfterArgs SetSpriteDefinitionMeshData
        {
            add
            {
                HookHandler._afterSetSpriteDefinitionMeshData += value;
                HookHandler.HookSetSpriteDefinitionMeshData();
            }
            remove => HookHandler._afterSetSpriteDefinitionMeshData -= value;
        }

        public static event Delegates.SetSpriteVertexNormals_AfterArgs SetSpriteVertexNormals
        {
            add
            {
                HookHandler._afterSetSpriteVertexNormals += value;
                HookHandler.HookSetSpriteVertexNormals();
            }
            remove => HookHandler._afterSetSpriteVertexNormals -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.tk2dSpriteGeomGen.hook_SetSpriteColors SetSpriteColors
        {
            add => On.tk2dSpriteGeomGen.SetSpriteColors += value;
            remove => On.tk2dSpriteGeomGen.SetSpriteColors -= value;
        }

        public static event On.tk2dSpriteGeomGen.hook_GetSpriteGeomDesc GetSpriteGeomDesc
        {
            add => On.tk2dSpriteGeomGen.GetSpriteGeomDesc += value;
            remove => On.tk2dSpriteGeomGen.GetSpriteGeomDesc -= value;
        }

        public static event On.tk2dSpriteGeomGen.hook_SetSpriteGeom SetSpriteGeom
        {
            add => On.tk2dSpriteGeomGen.SetSpriteGeom += value;
            remove => On.tk2dSpriteGeomGen.SetSpriteGeom -= value;
        }

        public static event On.tk2dSpriteGeomGen.hook_SetSpriteIndices SetSpriteIndices
        {
            add => On.tk2dSpriteGeomGen.SetSpriteIndices += value;
            remove => On.tk2dSpriteGeomGen.SetSpriteIndices -= value;
        }

        public static event On.tk2dSpriteGeomGen.hook_GetClippedSpriteGeomDesc GetClippedSpriteGeomDesc
        {
            add => On.tk2dSpriteGeomGen.GetClippedSpriteGeomDesc += value;
            remove => On.tk2dSpriteGeomGen.GetClippedSpriteGeomDesc -= value;
        }

        public static event On.tk2dSpriteGeomGen.hook_SetClippedSpriteGeom SetClippedSpriteGeom
        {
            add => On.tk2dSpriteGeomGen.SetClippedSpriteGeom += value;
            remove => On.tk2dSpriteGeomGen.SetClippedSpriteGeom -= value;
        }

        public static event On.tk2dSpriteGeomGen.hook_SetClippedSpriteIndices SetClippedSpriteIndices
        {
            add => On.tk2dSpriteGeomGen.SetClippedSpriteIndices += value;
            remove => On.tk2dSpriteGeomGen.SetClippedSpriteIndices -= value;
        }

        public static event On.tk2dSpriteGeomGen.hook_GetSlicedSpriteGeomDesc GetSlicedSpriteGeomDesc
        {
            add => On.tk2dSpriteGeomGen.GetSlicedSpriteGeomDesc += value;
            remove => On.tk2dSpriteGeomGen.GetSlicedSpriteGeomDesc -= value;
        }

        public static event On.tk2dSpriteGeomGen.hook_SetSlicedSpriteIndices SetSlicedSpriteIndices
        {
            add => On.tk2dSpriteGeomGen.SetSlicedSpriteIndices += value;
            remove => On.tk2dSpriteGeomGen.SetSlicedSpriteIndices -= value;
        }

        public static event On.tk2dSpriteGeomGen.hook_GetTiledSpriteGeomDesc GetTiledSpriteGeomDesc
        {
            add => On.tk2dSpriteGeomGen.GetTiledSpriteGeomDesc += value;
            remove => On.tk2dSpriteGeomGen.GetTiledSpriteGeomDesc -= value;
        }

        public static event On.tk2dSpriteGeomGen.hook_SetTiledSpriteIndices SetTiledSpriteIndices
        {
            add => On.tk2dSpriteGeomGen.SetTiledSpriteIndices += value;
            remove => On.tk2dSpriteGeomGen.SetTiledSpriteIndices -= value;
        }

        public static event On.tk2dSpriteGeomGen.hook_SetBoxMeshData SetBoxMeshData
        {
            add => On.tk2dSpriteGeomGen.SetBoxMeshData += value;
            remove => On.tk2dSpriteGeomGen.SetBoxMeshData -= value;
        }

        public static event On.tk2dSpriteGeomGen.hook_SetSpriteDefinitionMeshData SetSpriteDefinitionMeshData
        {
            add => On.tk2dSpriteGeomGen.SetSpriteDefinitionMeshData += value;
            remove => On.tk2dSpriteGeomGen.SetSpriteDefinitionMeshData -= value;
        }

        public static event On.tk2dSpriteGeomGen.hook_SetSpriteVertexNormals SetSpriteVertexNormals
        {
            add => On.tk2dSpriteGeomGen.SetSpriteVertexNormals += value;
            remove => On.tk2dSpriteGeomGen.SetSpriteVertexNormals -= value;
        }
    }
}