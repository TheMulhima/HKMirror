using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for Extensions class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnExtensions
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookGetFirstInteractable()
        {
            if (!HookedList.Contains("GetFirstInteractable"))
            {
                HookedList.Add("GetFirstInteractable");
                On.Extensions.GetFirstInteractable += GetFirstInteractable;
            }
        }

        internal static event Delegates.GetFirstInteractable_BeforeArgs _beforeGetFirstInteractable;
        internal static event Delegates.GetFirstInteractable_AfterArgs _afterGetFirstInteractable;

        private static Selectable GetFirstInteractable(On.Extensions.orig_GetFirstInteractable orig, Selectable start)
        {
            Delegates.Params_GetFirstInteractable @params = new()
            {
                start = start
            };
            if (_beforeGetFirstInteractable != null)
                foreach (Delegates.GetFirstInteractable_BeforeArgs toInvoke in _beforeGetFirstInteractable
                             .GetInvocationList())
                    try
                    {
                        _beforeGetFirstInteractable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            start = @params.start;
            var retVal = orig(start);
            if (_afterGetFirstInteractable != null)
                foreach (Delegates.GetFirstInteractable_AfterArgs toInvoke in _afterGetFirstInteractable
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetFirstInteractable.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookPlayOnSource()
        {
            if (!HookedList.Contains("PlayOnSource"))
            {
                HookedList.Add("PlayOnSource");
                On.Extensions.PlayOnSource += PlayOnSource;
            }
        }

        internal static event Delegates.PlayOnSource_BeforeArgs _beforePlayOnSource;
        internal static event Delegates.PlayOnSource_AfterArgs _afterPlayOnSource;

        private static void PlayOnSource(On.Extensions.orig_PlayOnSource orig, AudioClip self, AudioSource source,
            float pitchMin, float pitchMax)
        {
            Delegates.Params_PlayOnSource @params = new()
            {
                self = self, source = source, pitchMin = pitchMin, pitchMax = pitchMax
            };
            if (_beforePlayOnSource != null)
                foreach (Delegates.PlayOnSource_BeforeArgs toInvoke in _beforePlayOnSource.GetInvocationList())
                    try
                    {
                        _beforePlayOnSource?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            source = @params.source;
            pitchMin = @params.pitchMin;
            pitchMax = @params.pitchMax;
            orig(self, source, pitchMin, pitchMax);
            if (_afterPlayOnSource != null)
                foreach (Delegates.PlayOnSource_AfterArgs toInvoke in _afterPlayOnSource.GetInvocationList())
                    try
                    {
                        _afterPlayOnSource.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetActiveChildren()
        {
            if (!HookedList.Contains("SetActiveChildren"))
            {
                HookedList.Add("SetActiveChildren");
                On.Extensions.SetActiveChildren += SetActiveChildren;
            }
        }

        internal static event Delegates.SetActiveChildren_BeforeArgs _beforeSetActiveChildren;
        internal static event Delegates.SetActiveChildren_AfterArgs _afterSetActiveChildren;

        private static void SetActiveChildren(On.Extensions.orig_SetActiveChildren orig, GameObject self, bool value)
        {
            Delegates.Params_SetActiveChildren @params = new()
            {
                self = self, value = value
            };
            if (_beforeSetActiveChildren != null)
                foreach (Delegates.SetActiveChildren_BeforeArgs toInvoke in
                         _beforeSetActiveChildren.GetInvocationList())
                    try
                    {
                        _beforeSetActiveChildren?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterSetActiveChildren != null)
                foreach (Delegates.SetActiveChildren_AfterArgs toInvoke in _afterSetActiveChildren.GetInvocationList())
                    try
                    {
                        _afterSetActiveChildren.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetActiveWithChildren()
        {
            if (!HookedList.Contains("SetActiveWithChildren"))
            {
                HookedList.Add("SetActiveWithChildren");
                On.Extensions.SetActiveWithChildren += SetActiveWithChildren;
            }
        }

        internal static event Delegates.SetActiveWithChildren_BeforeArgs _beforeSetActiveWithChildren;
        internal static event Delegates.SetActiveWithChildren_AfterArgs _afterSetActiveWithChildren;

        private static void SetActiveWithChildren(On.Extensions.orig_SetActiveWithChildren orig, MeshRenderer self,
            bool value)
        {
            Delegates.Params_SetActiveWithChildren @params = new()
            {
                self = self, value = value
            };
            if (_beforeSetActiveWithChildren != null)
                foreach (Delegates.SetActiveWithChildren_BeforeArgs toInvoke in _beforeSetActiveWithChildren
                             .GetInvocationList())
                    try
                    {
                        _beforeSetActiveWithChildren?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterSetActiveWithChildren != null)
                foreach (Delegates.SetActiveWithChildren_AfterArgs toInvoke in _afterSetActiveWithChildren
                             .GetInvocationList())
                    try
                    {
                        _afterSetActiveWithChildren.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookHasParameter()
        {
            if (!HookedList.Contains("HasParameter"))
            {
                HookedList.Add("HasParameter");
                On.Extensions.HasParameter += HasParameter;
            }
        }

        internal static event Delegates.HasParameter_BeforeArgs _beforeHasParameter;
        internal static event Delegates.HasParameter_AfterArgs _afterHasParameter;

        private static bool HasParameter(On.Extensions.orig_HasParameter orig, Animator self, string paramName,
            AnimatorControllerParameterType? type)
        {
            Delegates.Params_HasParameter @params = new()
            {
                self = self, paramName = paramName, type = type
            };
            if (_beforeHasParameter != null)
                foreach (Delegates.HasParameter_BeforeArgs toInvoke in _beforeHasParameter.GetInvocationList())
                    try
                    {
                        _beforeHasParameter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            paramName = @params.paramName;
            type = @params.type;
            var retVal = orig(self, paramName, type);
            if (_afterHasParameter != null)
                foreach (Delegates.HasParameter_AfterArgs toInvoke in _afterHasParameter.GetInvocationList())
                    try
                    {
                        retVal = _afterHasParameter.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookPlayAnimWait()
        {
            if (!HookedList.Contains("PlayAnimWait"))
            {
                HookedList.Add("PlayAnimWait");
                On.Extensions.PlayAnimWait += PlayAnimWait;
            }
        }

        internal static event Delegates.PlayAnimWait_BeforeArgs _beforePlayAnimWait;

        private static IEnumerator PlayAnimWait(On.Extensions.orig_PlayAnimWait orig, tk2dSpriteAnimator self,
            string anim)
        {
            Delegates.Params_PlayAnimWait @params = new()
            {
                self = self, anim = anim
            };
            if (_beforePlayAnimWait != null)
                foreach (Delegates.PlayAnimWait_BeforeArgs toInvoke in _beforePlayAnimWait.GetInvocationList())
                    try
                    {
                        _beforePlayAnimWait?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            anim = @params.anim;
            return orig(self, anim);
        }

        internal static void HookPlayAnimGetTime()
        {
            if (!HookedList.Contains("PlayAnimGetTime"))
            {
                HookedList.Add("PlayAnimGetTime");
                On.Extensions.PlayAnimGetTime += PlayAnimGetTime;
            }
        }

        internal static event Delegates.PlayAnimGetTime_BeforeArgs _beforePlayAnimGetTime;
        internal static event Delegates.PlayAnimGetTime_AfterArgs _afterPlayAnimGetTime;

        private static float PlayAnimGetTime(On.Extensions.orig_PlayAnimGetTime orig, tk2dSpriteAnimator self,
            string anim)
        {
            Delegates.Params_PlayAnimGetTime @params = new()
            {
                self = self, anim = anim
            };
            if (_beforePlayAnimGetTime != null)
                foreach (Delegates.PlayAnimGetTime_BeforeArgs toInvoke in _beforePlayAnimGetTime.GetInvocationList())
                    try
                    {
                        _beforePlayAnimGetTime?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            anim = @params.anim;
            var retVal = orig(self, anim);
            if (_afterPlayAnimGetTime != null)
                foreach (Delegates.PlayAnimGetTime_AfterArgs toInvoke in _afterPlayAnimGetTime.GetInvocationList())
                    try
                    {
                        retVal = _afterPlayAnimGetTime.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookMultiplyElements_Vector3_Vector3()
        {
            if (!HookedList.Contains("MultiplyElements_Vector3_Vector3"))
            {
                HookedList.Add("MultiplyElements_Vector3_Vector3");
                On.Extensions.MultiplyElements_Vector3_Vector3 += MultiplyElements_Vector3_Vector3;
            }
        }

        internal static event Delegates.MultiplyElements_Vector3_Vector3_BeforeArgs
            _beforeMultiplyElements_Vector3_Vector3;

        internal static event Delegates.MultiplyElements_Vector3_Vector3_AfterArgs
            _afterMultiplyElements_Vector3_Vector3;

        private static Vector3 MultiplyElements_Vector3_Vector3(
            On.Extensions.orig_MultiplyElements_Vector3_Vector3 orig, Vector3 self, Vector3 other)
        {
            Delegates.Params_MultiplyElements_Vector3_Vector3 @params = new()
            {
                self = self, other = other
            };
            if (_beforeMultiplyElements_Vector3_Vector3 != null)
                foreach (Delegates.MultiplyElements_Vector3_Vector3_BeforeArgs toInvoke in
                         _beforeMultiplyElements_Vector3_Vector3.GetInvocationList())
                    try
                    {
                        _beforeMultiplyElements_Vector3_Vector3?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            other = @params.other;
            var retVal = orig(self, other);
            if (_afterMultiplyElements_Vector3_Vector3 != null)
                foreach (Delegates.MultiplyElements_Vector3_Vector3_AfterArgs toInvoke in
                         _afterMultiplyElements_Vector3_Vector3.GetInvocationList())
                    try
                    {
                        retVal = _afterMultiplyElements_Vector3_Vector3.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookMultiplyElements_Vector2_Vector2()
        {
            if (!HookedList.Contains("MultiplyElements_Vector2_Vector2"))
            {
                HookedList.Add("MultiplyElements_Vector2_Vector2");
                On.Extensions.MultiplyElements_Vector2_Vector2 += MultiplyElements_Vector2_Vector2;
            }
        }

        internal static event Delegates.MultiplyElements_Vector2_Vector2_BeforeArgs
            _beforeMultiplyElements_Vector2_Vector2;

        internal static event Delegates.MultiplyElements_Vector2_Vector2_AfterArgs
            _afterMultiplyElements_Vector2_Vector2;

        private static Vector2 MultiplyElements_Vector2_Vector2(
            On.Extensions.orig_MultiplyElements_Vector2_Vector2 orig, Vector2 self, Vector2 other)
        {
            Delegates.Params_MultiplyElements_Vector2_Vector2 @params = new()
            {
                self = self, other = other
            };
            if (_beforeMultiplyElements_Vector2_Vector2 != null)
                foreach (Delegates.MultiplyElements_Vector2_Vector2_BeforeArgs toInvoke in
                         _beforeMultiplyElements_Vector2_Vector2.GetInvocationList())
                    try
                    {
                        _beforeMultiplyElements_Vector2_Vector2?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            other = @params.other;
            var retVal = orig(self, other);
            if (_afterMultiplyElements_Vector2_Vector2 != null)
                foreach (Delegates.MultiplyElements_Vector2_Vector2_AfterArgs toInvoke in
                         _afterMultiplyElements_Vector2_Vector2.GetInvocationList())
                    try
                    {
                        retVal = _afterMultiplyElements_Vector2_Vector2.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetPositionX()
        {
            if (!HookedList.Contains("SetPositionX"))
            {
                HookedList.Add("SetPositionX");
                On.Extensions.SetPositionX += SetPositionX;
            }
        }

        internal static event Delegates.SetPositionX_BeforeArgs _beforeSetPositionX;
        internal static event Delegates.SetPositionX_AfterArgs _afterSetPositionX;

        private static void SetPositionX(On.Extensions.orig_SetPositionX orig, Transform t, float newX)
        {
            Delegates.Params_SetPositionX @params = new()
            {
                t = t, newX = newX
            };
            if (_beforeSetPositionX != null)
                foreach (Delegates.SetPositionX_BeforeArgs toInvoke in _beforeSetPositionX.GetInvocationList())
                    try
                    {
                        _beforeSetPositionX?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            t = @params.t;
            newX = @params.newX;
            orig(t, newX);
            if (_afterSetPositionX != null)
                foreach (Delegates.SetPositionX_AfterArgs toInvoke in _afterSetPositionX.GetInvocationList())
                    try
                    {
                        _afterSetPositionX.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetPositionY()
        {
            if (!HookedList.Contains("SetPositionY"))
            {
                HookedList.Add("SetPositionY");
                On.Extensions.SetPositionY += SetPositionY;
            }
        }

        internal static event Delegates.SetPositionY_BeforeArgs _beforeSetPositionY;
        internal static event Delegates.SetPositionY_AfterArgs _afterSetPositionY;

        private static void SetPositionY(On.Extensions.orig_SetPositionY orig, Transform t, float newY)
        {
            Delegates.Params_SetPositionY @params = new()
            {
                t = t, newY = newY
            };
            if (_beforeSetPositionY != null)
                foreach (Delegates.SetPositionY_BeforeArgs toInvoke in _beforeSetPositionY.GetInvocationList())
                    try
                    {
                        _beforeSetPositionY?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            t = @params.t;
            newY = @params.newY;
            orig(t, newY);
            if (_afterSetPositionY != null)
                foreach (Delegates.SetPositionY_AfterArgs toInvoke in _afterSetPositionY.GetInvocationList())
                    try
                    {
                        _afterSetPositionY.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetPositionZ()
        {
            if (!HookedList.Contains("SetPositionZ"))
            {
                HookedList.Add("SetPositionZ");
                On.Extensions.SetPositionZ += SetPositionZ;
            }
        }

        internal static event Delegates.SetPositionZ_BeforeArgs _beforeSetPositionZ;
        internal static event Delegates.SetPositionZ_AfterArgs _afterSetPositionZ;

        private static void SetPositionZ(On.Extensions.orig_SetPositionZ orig, Transform t, float newZ)
        {
            Delegates.Params_SetPositionZ @params = new()
            {
                t = t, newZ = newZ
            };
            if (_beforeSetPositionZ != null)
                foreach (Delegates.SetPositionZ_BeforeArgs toInvoke in _beforeSetPositionZ.GetInvocationList())
                    try
                    {
                        _beforeSetPositionZ?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            t = @params.t;
            newZ = @params.newZ;
            orig(t, newZ);
            if (_afterSetPositionZ != null)
                foreach (Delegates.SetPositionZ_AfterArgs toInvoke in _afterSetPositionZ.GetInvocationList())
                    try
                    {
                        _afterSetPositionZ.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetPosition2D_Transform_float_float()
        {
            if (!HookedList.Contains("SetPosition2D_Transform_float_float"))
            {
                HookedList.Add("SetPosition2D_Transform_float_float");
                On.Extensions.SetPosition2D_Transform_float_float += SetPosition2D_Transform_float_float;
            }
        }

        internal static event Delegates.SetPosition2D_Transform_float_float_BeforeArgs
            _beforeSetPosition2D_Transform_float_float;

        internal static event Delegates.SetPosition2D_Transform_float_float_AfterArgs
            _afterSetPosition2D_Transform_float_float;

        private static void SetPosition2D_Transform_float_float(
            On.Extensions.orig_SetPosition2D_Transform_float_float orig, Transform t, float x, float y)
        {
            Delegates.Params_SetPosition2D_Transform_float_float @params = new()
            {
                t = t, x = x, y = y
            };
            if (_beforeSetPosition2D_Transform_float_float != null)
                foreach (Delegates.SetPosition2D_Transform_float_float_BeforeArgs toInvoke in
                         _beforeSetPosition2D_Transform_float_float.GetInvocationList())
                    try
                    {
                        _beforeSetPosition2D_Transform_float_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            t = @params.t;
            x = @params.x;
            y = @params.y;
            orig(t, x, y);
            if (_afterSetPosition2D_Transform_float_float != null)
                foreach (Delegates.SetPosition2D_Transform_float_float_AfterArgs toInvoke in
                         _afterSetPosition2D_Transform_float_float.GetInvocationList())
                    try
                    {
                        _afterSetPosition2D_Transform_float_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetPosition2D_Transform_Vector2()
        {
            if (!HookedList.Contains("SetPosition2D_Transform_Vector2"))
            {
                HookedList.Add("SetPosition2D_Transform_Vector2");
                On.Extensions.SetPosition2D_Transform_Vector2 += SetPosition2D_Transform_Vector2;
            }
        }

        internal static event Delegates.SetPosition2D_Transform_Vector2_BeforeArgs
            _beforeSetPosition2D_Transform_Vector2;

        internal static event Delegates.SetPosition2D_Transform_Vector2_AfterArgs _afterSetPosition2D_Transform_Vector2;

        private static void SetPosition2D_Transform_Vector2(On.Extensions.orig_SetPosition2D_Transform_Vector2 orig,
            Transform t, Vector2 position)
        {
            Delegates.Params_SetPosition2D_Transform_Vector2 @params = new()
            {
                t = t, position = position
            };
            if (_beforeSetPosition2D_Transform_Vector2 != null)
                foreach (Delegates.SetPosition2D_Transform_Vector2_BeforeArgs toInvoke in
                         _beforeSetPosition2D_Transform_Vector2.GetInvocationList())
                    try
                    {
                        _beforeSetPosition2D_Transform_Vector2?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            t = @params.t;
            position = @params.position;
            orig(t, position);
            if (_afterSetPosition2D_Transform_Vector2 != null)
                foreach (Delegates.SetPosition2D_Transform_Vector2_AfterArgs toInvoke in
                         _afterSetPosition2D_Transform_Vector2.GetInvocationList())
                    try
                    {
                        _afterSetPosition2D_Transform_Vector2.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetPosition3D()
        {
            if (!HookedList.Contains("SetPosition3D"))
            {
                HookedList.Add("SetPosition3D");
                On.Extensions.SetPosition3D += SetPosition3D;
            }
        }

        internal static event Delegates.SetPosition3D_BeforeArgs _beforeSetPosition3D;
        internal static event Delegates.SetPosition3D_AfterArgs _afterSetPosition3D;

        private static void SetPosition3D(On.Extensions.orig_SetPosition3D orig, Transform t, float x, float y, float z)
        {
            Delegates.Params_SetPosition3D @params = new()
            {
                t = t, x = x, y = y, z = z
            };
            if (_beforeSetPosition3D != null)
                foreach (Delegates.SetPosition3D_BeforeArgs toInvoke in _beforeSetPosition3D.GetInvocationList())
                    try
                    {
                        _beforeSetPosition3D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            t = @params.t;
            x = @params.x;
            y = @params.y;
            z = @params.z;
            orig(t, x, y, z);
            if (_afterSetPosition3D != null)
                foreach (Delegates.SetPosition3D_AfterArgs toInvoke in _afterSetPosition3D.GetInvocationList())
                    try
                    {
                        _afterSetPosition3D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetScaleX()
        {
            if (!HookedList.Contains("SetScaleX"))
            {
                HookedList.Add("SetScaleX");
                On.Extensions.SetScaleX += SetScaleX;
            }
        }

        internal static event Delegates.SetScaleX_BeforeArgs _beforeSetScaleX;
        internal static event Delegates.SetScaleX_AfterArgs _afterSetScaleX;

        private static void SetScaleX(On.Extensions.orig_SetScaleX orig, Transform t, float newXScale)
        {
            Delegates.Params_SetScaleX @params = new()
            {
                t = t, newXScale = newXScale
            };
            if (_beforeSetScaleX != null)
                foreach (Delegates.SetScaleX_BeforeArgs toInvoke in _beforeSetScaleX.GetInvocationList())
                    try
                    {
                        _beforeSetScaleX?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            t = @params.t;
            newXScale = @params.newXScale;
            orig(t, newXScale);
            if (_afterSetScaleX != null)
                foreach (Delegates.SetScaleX_AfterArgs toInvoke in _afterSetScaleX.GetInvocationList())
                    try
                    {
                        _afterSetScaleX.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetScaleY()
        {
            if (!HookedList.Contains("SetScaleY"))
            {
                HookedList.Add("SetScaleY");
                On.Extensions.SetScaleY += SetScaleY;
            }
        }

        internal static event Delegates.SetScaleY_BeforeArgs _beforeSetScaleY;
        internal static event Delegates.SetScaleY_AfterArgs _afterSetScaleY;

        private static void SetScaleY(On.Extensions.orig_SetScaleY orig, Transform t, float newYScale)
        {
            Delegates.Params_SetScaleY @params = new()
            {
                t = t, newYScale = newYScale
            };
            if (_beforeSetScaleY != null)
                foreach (Delegates.SetScaleY_BeforeArgs toInvoke in _beforeSetScaleY.GetInvocationList())
                    try
                    {
                        _beforeSetScaleY?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            t = @params.t;
            newYScale = @params.newYScale;
            orig(t, newYScale);
            if (_afterSetScaleY != null)
                foreach (Delegates.SetScaleY_AfterArgs toInvoke in _afterSetScaleY.GetInvocationList())
                    try
                    {
                        _afterSetScaleY.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetScaleZ()
        {
            if (!HookedList.Contains("SetScaleZ"))
            {
                HookedList.Add("SetScaleZ");
                On.Extensions.SetScaleZ += SetScaleZ;
            }
        }

        internal static event Delegates.SetScaleZ_BeforeArgs _beforeSetScaleZ;
        internal static event Delegates.SetScaleZ_AfterArgs _afterSetScaleZ;

        private static void SetScaleZ(On.Extensions.orig_SetScaleZ orig, Transform t, float newZScale)
        {
            Delegates.Params_SetScaleZ @params = new()
            {
                t = t, newZScale = newZScale
            };
            if (_beforeSetScaleZ != null)
                foreach (Delegates.SetScaleZ_BeforeArgs toInvoke in _beforeSetScaleZ.GetInvocationList())
                    try
                    {
                        _beforeSetScaleZ?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            t = @params.t;
            newZScale = @params.newZScale;
            orig(t, newZScale);
            if (_afterSetScaleZ != null)
                foreach (Delegates.SetScaleZ_AfterArgs toInvoke in _afterSetScaleZ.GetInvocationList())
                    try
                    {
                        _afterSetScaleZ.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetRotationZ()
        {
            if (!HookedList.Contains("SetRotationZ"))
            {
                HookedList.Add("SetRotationZ");
                On.Extensions.SetRotationZ += SetRotationZ;
            }
        }

        internal static event Delegates.SetRotationZ_BeforeArgs _beforeSetRotationZ;
        internal static event Delegates.SetRotationZ_AfterArgs _afterSetRotationZ;

        private static void SetRotationZ(On.Extensions.orig_SetRotationZ orig, Transform t, float newZRotation)
        {
            Delegates.Params_SetRotationZ @params = new()
            {
                t = t, newZRotation = newZRotation
            };
            if (_beforeSetRotationZ != null)
                foreach (Delegates.SetRotationZ_BeforeArgs toInvoke in _beforeSetRotationZ.GetInvocationList())
                    try
                    {
                        _beforeSetRotationZ?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            t = @params.t;
            newZRotation = @params.newZRotation;
            orig(t, newZRotation);
            if (_afterSetRotationZ != null)
                foreach (Delegates.SetRotationZ_AfterArgs toInvoke in _afterSetRotationZ.GetInvocationList())
                    try
                    {
                        _afterSetRotationZ.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetScaleMatching()
        {
            if (!HookedList.Contains("SetScaleMatching"))
            {
                HookedList.Add("SetScaleMatching");
                On.Extensions.SetScaleMatching += SetScaleMatching;
            }
        }

        internal static event Delegates.SetScaleMatching_BeforeArgs _beforeSetScaleMatching;
        internal static event Delegates.SetScaleMatching_AfterArgs _afterSetScaleMatching;

        private static void SetScaleMatching(On.Extensions.orig_SetScaleMatching orig, Transform t, float newScale)
        {
            Delegates.Params_SetScaleMatching @params = new()
            {
                t = t, newScale = newScale
            };
            if (_beforeSetScaleMatching != null)
                foreach (Delegates.SetScaleMatching_BeforeArgs toInvoke in _beforeSetScaleMatching.GetInvocationList())
                    try
                    {
                        _beforeSetScaleMatching?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            t = @params.t;
            newScale = @params.newScale;
            orig(t, newScale);
            if (_afterSetScaleMatching != null)
                foreach (Delegates.SetScaleMatching_AfterArgs toInvoke in _afterSetScaleMatching.GetInvocationList())
                    try
                    {
                        _afterSetScaleMatching.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetPositionX()
        {
            if (!HookedList.Contains("GetPositionX"))
            {
                HookedList.Add("GetPositionX");
                On.Extensions.GetPositionX += GetPositionX;
            }
        }

        internal static event Delegates.GetPositionX_BeforeArgs _beforeGetPositionX;
        internal static event Delegates.GetPositionX_AfterArgs _afterGetPositionX;

        private static float GetPositionX(On.Extensions.orig_GetPositionX orig, Transform t)
        {
            Delegates.Params_GetPositionX @params = new()
            {
                t = t
            };
            if (_beforeGetPositionX != null)
                foreach (Delegates.GetPositionX_BeforeArgs toInvoke in _beforeGetPositionX.GetInvocationList())
                    try
                    {
                        _beforeGetPositionX?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            t = @params.t;
            var retVal = orig(t);
            if (_afterGetPositionX != null)
                foreach (Delegates.GetPositionX_AfterArgs toInvoke in _afterGetPositionX.GetInvocationList())
                    try
                    {
                        retVal = _afterGetPositionX.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetPositionY()
        {
            if (!HookedList.Contains("GetPositionY"))
            {
                HookedList.Add("GetPositionY");
                On.Extensions.GetPositionY += GetPositionY;
            }
        }

        internal static event Delegates.GetPositionY_BeforeArgs _beforeGetPositionY;
        internal static event Delegates.GetPositionY_AfterArgs _afterGetPositionY;

        private static float GetPositionY(On.Extensions.orig_GetPositionY orig, Transform t)
        {
            Delegates.Params_GetPositionY @params = new()
            {
                t = t
            };
            if (_beforeGetPositionY != null)
                foreach (Delegates.GetPositionY_BeforeArgs toInvoke in _beforeGetPositionY.GetInvocationList())
                    try
                    {
                        _beforeGetPositionY?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            t = @params.t;
            var retVal = orig(t);
            if (_afterGetPositionY != null)
                foreach (Delegates.GetPositionY_AfterArgs toInvoke in _afterGetPositionY.GetInvocationList())
                    try
                    {
                        retVal = _afterGetPositionY.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetPositionZ()
        {
            if (!HookedList.Contains("GetPositionZ"))
            {
                HookedList.Add("GetPositionZ");
                On.Extensions.GetPositionZ += GetPositionZ;
            }
        }

        internal static event Delegates.GetPositionZ_BeforeArgs _beforeGetPositionZ;
        internal static event Delegates.GetPositionZ_AfterArgs _afterGetPositionZ;

        private static float GetPositionZ(On.Extensions.orig_GetPositionZ orig, Transform t)
        {
            Delegates.Params_GetPositionZ @params = new()
            {
                t = t
            };
            if (_beforeGetPositionZ != null)
                foreach (Delegates.GetPositionZ_BeforeArgs toInvoke in _beforeGetPositionZ.GetInvocationList())
                    try
                    {
                        _beforeGetPositionZ?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            t = @params.t;
            var retVal = orig(t);
            if (_afterGetPositionZ != null)
                foreach (Delegates.GetPositionZ_AfterArgs toInvoke in _afterGetPositionZ.GetInvocationList())
                    try
                    {
                        retVal = _afterGetPositionZ.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetScaleX()
        {
            if (!HookedList.Contains("GetScaleX"))
            {
                HookedList.Add("GetScaleX");
                On.Extensions.GetScaleX += GetScaleX;
            }
        }

        internal static event Delegates.GetScaleX_BeforeArgs _beforeGetScaleX;
        internal static event Delegates.GetScaleX_AfterArgs _afterGetScaleX;

        private static float GetScaleX(On.Extensions.orig_GetScaleX orig, Transform t)
        {
            Delegates.Params_GetScaleX @params = new()
            {
                t = t
            };
            if (_beforeGetScaleX != null)
                foreach (Delegates.GetScaleX_BeforeArgs toInvoke in _beforeGetScaleX.GetInvocationList())
                    try
                    {
                        _beforeGetScaleX?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            t = @params.t;
            var retVal = orig(t);
            if (_afterGetScaleX != null)
                foreach (Delegates.GetScaleX_AfterArgs toInvoke in _afterGetScaleX.GetInvocationList())
                    try
                    {
                        retVal = _afterGetScaleX.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetScaleY()
        {
            if (!HookedList.Contains("GetScaleY"))
            {
                HookedList.Add("GetScaleY");
                On.Extensions.GetScaleY += GetScaleY;
            }
        }

        internal static event Delegates.GetScaleY_BeforeArgs _beforeGetScaleY;
        internal static event Delegates.GetScaleY_AfterArgs _afterGetScaleY;

        private static float GetScaleY(On.Extensions.orig_GetScaleY orig, Transform t)
        {
            Delegates.Params_GetScaleY @params = new()
            {
                t = t
            };
            if (_beforeGetScaleY != null)
                foreach (Delegates.GetScaleY_BeforeArgs toInvoke in _beforeGetScaleY.GetInvocationList())
                    try
                    {
                        _beforeGetScaleY?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            t = @params.t;
            var retVal = orig(t);
            if (_afterGetScaleY != null)
                foreach (Delegates.GetScaleY_AfterArgs toInvoke in _afterGetScaleY.GetInvocationList())
                    try
                    {
                        retVal = _afterGetScaleY.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetScaleZ()
        {
            if (!HookedList.Contains("GetScaleZ"))
            {
                HookedList.Add("GetScaleZ");
                On.Extensions.GetScaleZ += GetScaleZ;
            }
        }

        internal static event Delegates.GetScaleZ_BeforeArgs _beforeGetScaleZ;
        internal static event Delegates.GetScaleZ_AfterArgs _afterGetScaleZ;

        private static float GetScaleZ(On.Extensions.orig_GetScaleZ orig, Transform t)
        {
            Delegates.Params_GetScaleZ @params = new()
            {
                t = t
            };
            if (_beforeGetScaleZ != null)
                foreach (Delegates.GetScaleZ_BeforeArgs toInvoke in _beforeGetScaleZ.GetInvocationList())
                    try
                    {
                        _beforeGetScaleZ?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            t = @params.t;
            var retVal = orig(t);
            if (_afterGetScaleZ != null)
                foreach (Delegates.GetScaleZ_AfterArgs toInvoke in _afterGetScaleZ.GetInvocationList())
                    try
                    {
                        retVal = _afterGetScaleZ.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetRotation2D()
        {
            if (!HookedList.Contains("GetRotation2D"))
            {
                HookedList.Add("GetRotation2D");
                On.Extensions.GetRotation2D += GetRotation2D;
            }
        }

        internal static event Delegates.GetRotation2D_BeforeArgs _beforeGetRotation2D;
        internal static event Delegates.GetRotation2D_AfterArgs _afterGetRotation2D;

        private static float GetRotation2D(On.Extensions.orig_GetRotation2D orig, Transform t)
        {
            Delegates.Params_GetRotation2D @params = new()
            {
                t = t
            };
            if (_beforeGetRotation2D != null)
                foreach (Delegates.GetRotation2D_BeforeArgs toInvoke in _beforeGetRotation2D.GetInvocationList())
                    try
                    {
                        _beforeGetRotation2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            t = @params.t;
            var retVal = orig(t);
            if (_afterGetRotation2D != null)
                foreach (Delegates.GetRotation2D_AfterArgs toInvoke in _afterGetRotation2D.GetInvocationList())
                    try
                    {
                        retVal = _afterGetRotation2D.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetRotation2D()
        {
            if (!HookedList.Contains("SetRotation2D"))
            {
                HookedList.Add("SetRotation2D");
                On.Extensions.SetRotation2D += SetRotation2D;
            }
        }

        internal static event Delegates.SetRotation2D_BeforeArgs _beforeSetRotation2D;
        internal static event Delegates.SetRotation2D_AfterArgs _afterSetRotation2D;

        private static void SetRotation2D(On.Extensions.orig_SetRotation2D orig, Transform t, float rotation)
        {
            Delegates.Params_SetRotation2D @params = new()
            {
                t = t, rotation = rotation
            };
            if (_beforeSetRotation2D != null)
                foreach (Delegates.SetRotation2D_BeforeArgs toInvoke in _beforeSetRotation2D.GetInvocationList())
                    try
                    {
                        _beforeSetRotation2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            t = @params.t;
            rotation = @params.rotation;
            orig(t, rotation);
            if (_afterSetRotation2D != null)
                foreach (Delegates.SetRotation2D_AfterArgs toInvoke in _afterSetRotation2D.GetInvocationList())
                    try
                    {
                        _afterSetRotation2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookIsAny()
        {
            if (!HookedList.Contains("IsAny"))
            {
                HookedList.Add("IsAny");
                On.Extensions.IsAny += IsAny;
            }
        }

        internal static event Delegates.IsAny_BeforeArgs _beforeIsAny;
        internal static event Delegates.IsAny_AfterArgs _afterIsAny;

        private static bool IsAny(On.Extensions.orig_IsAny orig, string value, string[] others)
        {
            Delegates.Params_IsAny @params = new()
            {
                value = value, others = others
            };
            if (_beforeIsAny != null)
                foreach (Delegates.IsAny_BeforeArgs toInvoke in _beforeIsAny.GetInvocationList())
                    try
                    {
                        _beforeIsAny?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            others = @params.others;
            var retVal = orig(value, others);
            if (_afterIsAny != null)
                foreach (Delegates.IsAny_AfterArgs toInvoke in _afterIsAny.GetInvocationList())
                    try
                    {
                        retVal = _afterIsAny.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate Selectable GetFirstInteractable_AfterArgs(Params_GetFirstInteractable args, Selectable ret);

        public delegate void GetFirstInteractable_BeforeArgs(Params_GetFirstInteractable args);

        public delegate Selectable GetFirstInteractable_WithArgs(Func<Selectable, Selectable> orig, Selectable start);

        public delegate float GetPositionX_AfterArgs(Params_GetPositionX args, float ret);

        public delegate void GetPositionX_BeforeArgs(Params_GetPositionX args);

        public delegate float GetPositionX_WithArgs(Func<Transform, float> orig, Transform t);

        public delegate float GetPositionY_AfterArgs(Params_GetPositionY args, float ret);

        public delegate void GetPositionY_BeforeArgs(Params_GetPositionY args);

        public delegate float GetPositionY_WithArgs(Func<Transform, float> orig, Transform t);

        public delegate float GetPositionZ_AfterArgs(Params_GetPositionZ args, float ret);

        public delegate void GetPositionZ_BeforeArgs(Params_GetPositionZ args);

        public delegate float GetPositionZ_WithArgs(Func<Transform, float> orig, Transform t);

        public delegate float GetRotation2D_AfterArgs(Params_GetRotation2D args, float ret);

        public delegate void GetRotation2D_BeforeArgs(Params_GetRotation2D args);

        public delegate float GetRotation2D_WithArgs(Func<Transform, float> orig, Transform t);

        public delegate float GetScaleX_AfterArgs(Params_GetScaleX args, float ret);

        public delegate void GetScaleX_BeforeArgs(Params_GetScaleX args);

        public delegate float GetScaleX_WithArgs(Func<Transform, float> orig, Transform t);

        public delegate float GetScaleY_AfterArgs(Params_GetScaleY args, float ret);

        public delegate void GetScaleY_BeforeArgs(Params_GetScaleY args);

        public delegate float GetScaleY_WithArgs(Func<Transform, float> orig, Transform t);

        public delegate float GetScaleZ_AfterArgs(Params_GetScaleZ args, float ret);

        public delegate void GetScaleZ_BeforeArgs(Params_GetScaleZ args);

        public delegate float GetScaleZ_WithArgs(Func<Transform, float> orig, Transform t);

        public delegate bool HasParameter_AfterArgs(Params_HasParameter args, bool ret);

        public delegate void HasParameter_BeforeArgs(Params_HasParameter args);

        public delegate bool HasParameter_WithArgs(Func<Animator, string, AnimatorControllerParameterType?, bool> orig,
            Animator self, string paramName, AnimatorControllerParameterType? type);

        public delegate bool IsAny_AfterArgs(Params_IsAny args, bool ret);

        public delegate void IsAny_BeforeArgs(Params_IsAny args);

        public delegate bool IsAny_WithArgs(Func<string, string[], bool> orig, string value, string[] others);

        public delegate Vector2 MultiplyElements_Vector2_Vector2_AfterArgs(Params_MultiplyElements_Vector2_Vector2 args,
            Vector2 ret);

        public delegate void MultiplyElements_Vector2_Vector2_BeforeArgs(Params_MultiplyElements_Vector2_Vector2 args);

        public delegate Vector2 MultiplyElements_Vector2_Vector2_WithArgs(Func<Vector2, Vector2, Vector2> orig,
            Vector2 self, Vector2 other);

        public delegate Vector3 MultiplyElements_Vector3_Vector3_AfterArgs(Params_MultiplyElements_Vector3_Vector3 args,
            Vector3 ret);

        public delegate void MultiplyElements_Vector3_Vector3_BeforeArgs(Params_MultiplyElements_Vector3_Vector3 args);

        public delegate Vector3 MultiplyElements_Vector3_Vector3_WithArgs(Func<Vector3, Vector3, Vector3> orig,
            Vector3 self, Vector3 other);

        public delegate float PlayAnimGetTime_AfterArgs(Params_PlayAnimGetTime args, float ret);

        public delegate void PlayAnimGetTime_BeforeArgs(Params_PlayAnimGetTime args);

        public delegate float PlayAnimGetTime_WithArgs(Func<tk2dSpriteAnimator, string, float> orig,
            tk2dSpriteAnimator self, string anim);

        public delegate IEnumerator PlayAnimWait_AfterArgs(Params_PlayAnimWait args, IEnumerator ret);

        public delegate void PlayAnimWait_BeforeArgs(Params_PlayAnimWait args);

        public delegate IEnumerator PlayAnimWait_WithArgs(Func<tk2dSpriteAnimator, string, IEnumerator> orig,
            tk2dSpriteAnimator self, string anim);

        public delegate void PlayOnSource_AfterArgs(Params_PlayOnSource args);

        public delegate void PlayOnSource_BeforeArgs(Params_PlayOnSource args);

        public delegate void PlayOnSource_WithArgs(Action<AudioClip, AudioSource, float, float> orig, AudioClip self,
            AudioSource source, float pitchMin, float pitchMax);

        public delegate void SetActiveChildren_AfterArgs(Params_SetActiveChildren args);

        public delegate void SetActiveChildren_BeforeArgs(Params_SetActiveChildren args);

        public delegate void SetActiveChildren_WithArgs(Action<GameObject, bool> orig, GameObject self, bool value);

        public delegate void SetActiveWithChildren_AfterArgs(Params_SetActiveWithChildren args);

        public delegate void SetActiveWithChildren_BeforeArgs(Params_SetActiveWithChildren args);

        public delegate void SetActiveWithChildren_WithArgs(Action<MeshRenderer, bool> orig, MeshRenderer self,
            bool value);

        public delegate void SetPosition2D_Transform_float_float_AfterArgs(
            Params_SetPosition2D_Transform_float_float args);

        public delegate void SetPosition2D_Transform_float_float_BeforeArgs(
            Params_SetPosition2D_Transform_float_float args);

        public delegate void SetPosition2D_Transform_float_float_WithArgs(Action<Transform, float, float> orig,
            Transform t, float x, float y);

        public delegate void SetPosition2D_Transform_Vector2_AfterArgs(Params_SetPosition2D_Transform_Vector2 args);

        public delegate void SetPosition2D_Transform_Vector2_BeforeArgs(Params_SetPosition2D_Transform_Vector2 args);

        public delegate void SetPosition2D_Transform_Vector2_WithArgs(Action<Transform, Vector2> orig, Transform t,
            Vector2 position);

        public delegate void SetPosition3D_AfterArgs(Params_SetPosition3D args);

        public delegate void SetPosition3D_BeforeArgs(Params_SetPosition3D args);

        public delegate void SetPosition3D_WithArgs(Action<Transform, float, float, float> orig, Transform t, float x,
            float y, float z);

        public delegate void SetPositionX_AfterArgs(Params_SetPositionX args);

        public delegate void SetPositionX_BeforeArgs(Params_SetPositionX args);

        public delegate void SetPositionX_WithArgs(Action<Transform, float> orig, Transform t, float newX);

        public delegate void SetPositionY_AfterArgs(Params_SetPositionY args);

        public delegate void SetPositionY_BeforeArgs(Params_SetPositionY args);

        public delegate void SetPositionY_WithArgs(Action<Transform, float> orig, Transform t, float newY);

        public delegate void SetPositionZ_AfterArgs(Params_SetPositionZ args);

        public delegate void SetPositionZ_BeforeArgs(Params_SetPositionZ args);

        public delegate void SetPositionZ_WithArgs(Action<Transform, float> orig, Transform t, float newZ);

        public delegate void SetRotation2D_AfterArgs(Params_SetRotation2D args);

        public delegate void SetRotation2D_BeforeArgs(Params_SetRotation2D args);

        public delegate void SetRotation2D_WithArgs(Action<Transform, float> orig, Transform t, float rotation);

        public delegate void SetRotationZ_AfterArgs(Params_SetRotationZ args);

        public delegate void SetRotationZ_BeforeArgs(Params_SetRotationZ args);

        public delegate void SetRotationZ_WithArgs(Action<Transform, float> orig, Transform t, float newZRotation);

        public delegate void SetScaleMatching_AfterArgs(Params_SetScaleMatching args);

        public delegate void SetScaleMatching_BeforeArgs(Params_SetScaleMatching args);

        public delegate void SetScaleMatching_WithArgs(Action<Transform, float> orig, Transform t, float newScale);

        public delegate void SetScaleX_AfterArgs(Params_SetScaleX args);

        public delegate void SetScaleX_BeforeArgs(Params_SetScaleX args);

        public delegate void SetScaleX_WithArgs(Action<Transform, float> orig, Transform t, float newXScale);

        public delegate void SetScaleY_AfterArgs(Params_SetScaleY args);

        public delegate void SetScaleY_BeforeArgs(Params_SetScaleY args);

        public delegate void SetScaleY_WithArgs(Action<Transform, float> orig, Transform t, float newYScale);

        public delegate void SetScaleZ_AfterArgs(Params_SetScaleZ args);

        public delegate void SetScaleZ_BeforeArgs(Params_SetScaleZ args);

        public delegate void SetScaleZ_WithArgs(Action<Transform, float> orig, Transform t, float newZScale);

        public sealed class Params_GetFirstInteractable
        {
            public Selectable start;
        }

        public sealed class Params_PlayOnSource
        {
            public float pitchMax;
            public float pitchMin;
            public AudioClip self;
            public AudioSource source;
        }

        public sealed class Params_SetActiveChildren
        {
            public GameObject self;
            public bool value;
        }

        public sealed class Params_SetActiveWithChildren
        {
            public MeshRenderer self;
            public bool value;
        }

        public sealed class Params_HasParameter
        {
            public string paramName;
            public Animator self;
            public AnimatorControllerParameterType? type;
        }

        public sealed class Params_PlayAnimWait
        {
            public string anim;
            public tk2dSpriteAnimator self;
        }

        public sealed class Params_PlayAnimGetTime
        {
            public string anim;
            public tk2dSpriteAnimator self;
        }

        public sealed class Params_MultiplyElements_Vector3_Vector3
        {
            public Vector3 other;
            public Vector3 self;
        }

        public sealed class Params_MultiplyElements_Vector2_Vector2
        {
            public Vector2 other;
            public Vector2 self;
        }

        public sealed class Params_SetPositionX
        {
            public float newX;
            public Transform t;
        }

        public sealed class Params_SetPositionY
        {
            public float newY;
            public Transform t;
        }

        public sealed class Params_SetPositionZ
        {
            public float newZ;
            public Transform t;
        }

        public sealed class Params_SetPosition2D_Transform_float_float
        {
            public Transform t;
            public float x;
            public float y;
        }

        public sealed class Params_SetPosition2D_Transform_Vector2
        {
            public Vector2 position;
            public Transform t;
        }

        public sealed class Params_SetPosition3D
        {
            public Transform t;
            public float x;
            public float y;
            public float z;
        }

        public sealed class Params_SetScaleX
        {
            public float newXScale;
            public Transform t;
        }

        public sealed class Params_SetScaleY
        {
            public float newYScale;
            public Transform t;
        }

        public sealed class Params_SetScaleZ
        {
            public float newZScale;
            public Transform t;
        }

        public sealed class Params_SetRotationZ
        {
            public float newZRotation;
            public Transform t;
        }

        public sealed class Params_SetScaleMatching
        {
            public float newScale;
            public Transform t;
        }

        public sealed class Params_GetPositionX
        {
            public Transform t;
        }

        public sealed class Params_GetPositionY
        {
            public Transform t;
        }

        public sealed class Params_GetPositionZ
        {
            public Transform t;
        }

        public sealed class Params_GetScaleX
        {
            public Transform t;
        }

        public sealed class Params_GetScaleY
        {
            public Transform t;
        }

        public sealed class Params_GetScaleZ
        {
            public Transform t;
        }

        public sealed class Params_GetRotation2D
        {
            public Transform t;
        }

        public sealed class Params_SetRotation2D
        {
            public float rotation;
            public Transform t;
        }

        public sealed class Params_IsAny
        {
            public string[] others;
            public string value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.GetFirstInteractable_BeforeArgs GetFirstInteractable
        {
            add
            {
                HookHandler._beforeGetFirstInteractable += value;
                HookHandler.HookGetFirstInteractable();
            }
            remove => HookHandler._beforeGetFirstInteractable -= value;
        }

        public static event Delegates.PlayOnSource_BeforeArgs PlayOnSource
        {
            add
            {
                HookHandler._beforePlayOnSource += value;
                HookHandler.HookPlayOnSource();
            }
            remove => HookHandler._beforePlayOnSource -= value;
        }

        public static event Delegates.SetActiveChildren_BeforeArgs SetActiveChildren
        {
            add
            {
                HookHandler._beforeSetActiveChildren += value;
                HookHandler.HookSetActiveChildren();
            }
            remove => HookHandler._beforeSetActiveChildren -= value;
        }

        public static event Delegates.SetActiveWithChildren_BeforeArgs SetActiveWithChildren
        {
            add
            {
                HookHandler._beforeSetActiveWithChildren += value;
                HookHandler.HookSetActiveWithChildren();
            }
            remove => HookHandler._beforeSetActiveWithChildren -= value;
        }

        public static event Delegates.HasParameter_BeforeArgs HasParameter
        {
            add
            {
                HookHandler._beforeHasParameter += value;
                HookHandler.HookHasParameter();
            }
            remove => HookHandler._beforeHasParameter -= value;
        }

        public static event Delegates.PlayAnimWait_BeforeArgs PlayAnimWait
        {
            add
            {
                HookHandler._beforePlayAnimWait += value;
                HookHandler.HookPlayAnimWait();
            }
            remove => HookHandler._beforePlayAnimWait -= value;
        }

        public static event Delegates.PlayAnimGetTime_BeforeArgs PlayAnimGetTime
        {
            add
            {
                HookHandler._beforePlayAnimGetTime += value;
                HookHandler.HookPlayAnimGetTime();
            }
            remove => HookHandler._beforePlayAnimGetTime -= value;
        }

        public static event Delegates.MultiplyElements_Vector3_Vector3_BeforeArgs MultiplyElements_Vector3_Vector3
        {
            add
            {
                HookHandler._beforeMultiplyElements_Vector3_Vector3 += value;
                HookHandler.HookMultiplyElements_Vector3_Vector3();
            }
            remove => HookHandler._beforeMultiplyElements_Vector3_Vector3 -= value;
        }

        public static event Delegates.MultiplyElements_Vector2_Vector2_BeforeArgs MultiplyElements_Vector2_Vector2
        {
            add
            {
                HookHandler._beforeMultiplyElements_Vector2_Vector2 += value;
                HookHandler.HookMultiplyElements_Vector2_Vector2();
            }
            remove => HookHandler._beforeMultiplyElements_Vector2_Vector2 -= value;
        }

        public static event Delegates.SetPositionX_BeforeArgs SetPositionX
        {
            add
            {
                HookHandler._beforeSetPositionX += value;
                HookHandler.HookSetPositionX();
            }
            remove => HookHandler._beforeSetPositionX -= value;
        }

        public static event Delegates.SetPositionY_BeforeArgs SetPositionY
        {
            add
            {
                HookHandler._beforeSetPositionY += value;
                HookHandler.HookSetPositionY();
            }
            remove => HookHandler._beforeSetPositionY -= value;
        }

        public static event Delegates.SetPositionZ_BeforeArgs SetPositionZ
        {
            add
            {
                HookHandler._beforeSetPositionZ += value;
                HookHandler.HookSetPositionZ();
            }
            remove => HookHandler._beforeSetPositionZ -= value;
        }

        public static event Delegates.SetPosition2D_Transform_float_float_BeforeArgs SetPosition2D_Transform_float_float
        {
            add
            {
                HookHandler._beforeSetPosition2D_Transform_float_float += value;
                HookHandler.HookSetPosition2D_Transform_float_float();
            }
            remove => HookHandler._beforeSetPosition2D_Transform_float_float -= value;
        }

        public static event Delegates.SetPosition2D_Transform_Vector2_BeforeArgs SetPosition2D_Transform_Vector2
        {
            add
            {
                HookHandler._beforeSetPosition2D_Transform_Vector2 += value;
                HookHandler.HookSetPosition2D_Transform_Vector2();
            }
            remove => HookHandler._beforeSetPosition2D_Transform_Vector2 -= value;
        }

        public static event Delegates.SetPosition3D_BeforeArgs SetPosition3D
        {
            add
            {
                HookHandler._beforeSetPosition3D += value;
                HookHandler.HookSetPosition3D();
            }
            remove => HookHandler._beforeSetPosition3D -= value;
        }

        public static event Delegates.SetScaleX_BeforeArgs SetScaleX
        {
            add
            {
                HookHandler._beforeSetScaleX += value;
                HookHandler.HookSetScaleX();
            }
            remove => HookHandler._beforeSetScaleX -= value;
        }

        public static event Delegates.SetScaleY_BeforeArgs SetScaleY
        {
            add
            {
                HookHandler._beforeSetScaleY += value;
                HookHandler.HookSetScaleY();
            }
            remove => HookHandler._beforeSetScaleY -= value;
        }

        public static event Delegates.SetScaleZ_BeforeArgs SetScaleZ
        {
            add
            {
                HookHandler._beforeSetScaleZ += value;
                HookHandler.HookSetScaleZ();
            }
            remove => HookHandler._beforeSetScaleZ -= value;
        }

        public static event Delegates.SetRotationZ_BeforeArgs SetRotationZ
        {
            add
            {
                HookHandler._beforeSetRotationZ += value;
                HookHandler.HookSetRotationZ();
            }
            remove => HookHandler._beforeSetRotationZ -= value;
        }

        public static event Delegates.SetScaleMatching_BeforeArgs SetScaleMatching
        {
            add
            {
                HookHandler._beforeSetScaleMatching += value;
                HookHandler.HookSetScaleMatching();
            }
            remove => HookHandler._beforeSetScaleMatching -= value;
        }

        public static event Delegates.GetPositionX_BeforeArgs GetPositionX
        {
            add
            {
                HookHandler._beforeGetPositionX += value;
                HookHandler.HookGetPositionX();
            }
            remove => HookHandler._beforeGetPositionX -= value;
        }

        public static event Delegates.GetPositionY_BeforeArgs GetPositionY
        {
            add
            {
                HookHandler._beforeGetPositionY += value;
                HookHandler.HookGetPositionY();
            }
            remove => HookHandler._beforeGetPositionY -= value;
        }

        public static event Delegates.GetPositionZ_BeforeArgs GetPositionZ
        {
            add
            {
                HookHandler._beforeGetPositionZ += value;
                HookHandler.HookGetPositionZ();
            }
            remove => HookHandler._beforeGetPositionZ -= value;
        }

        public static event Delegates.GetScaleX_BeforeArgs GetScaleX
        {
            add
            {
                HookHandler._beforeGetScaleX += value;
                HookHandler.HookGetScaleX();
            }
            remove => HookHandler._beforeGetScaleX -= value;
        }

        public static event Delegates.GetScaleY_BeforeArgs GetScaleY
        {
            add
            {
                HookHandler._beforeGetScaleY += value;
                HookHandler.HookGetScaleY();
            }
            remove => HookHandler._beforeGetScaleY -= value;
        }

        public static event Delegates.GetScaleZ_BeforeArgs GetScaleZ
        {
            add
            {
                HookHandler._beforeGetScaleZ += value;
                HookHandler.HookGetScaleZ();
            }
            remove => HookHandler._beforeGetScaleZ -= value;
        }

        public static event Delegates.GetRotation2D_BeforeArgs GetRotation2D
        {
            add
            {
                HookHandler._beforeGetRotation2D += value;
                HookHandler.HookGetRotation2D();
            }
            remove => HookHandler._beforeGetRotation2D -= value;
        }

        public static event Delegates.SetRotation2D_BeforeArgs SetRotation2D
        {
            add
            {
                HookHandler._beforeSetRotation2D += value;
                HookHandler.HookSetRotation2D();
            }
            remove => HookHandler._beforeSetRotation2D -= value;
        }

        public static event Delegates.IsAny_BeforeArgs IsAny
        {
            add
            {
                HookHandler._beforeIsAny += value;
                HookHandler.HookIsAny();
            }
            remove => HookHandler._beforeIsAny -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.GetFirstInteractable_AfterArgs GetFirstInteractable
        {
            add
            {
                HookHandler._afterGetFirstInteractable += value;
                HookHandler.HookGetFirstInteractable();
            }
            remove => HookHandler._afterGetFirstInteractable -= value;
        }

        public static event Delegates.PlayOnSource_AfterArgs PlayOnSource
        {
            add
            {
                HookHandler._afterPlayOnSource += value;
                HookHandler.HookPlayOnSource();
            }
            remove => HookHandler._afterPlayOnSource -= value;
        }

        public static event Delegates.SetActiveChildren_AfterArgs SetActiveChildren
        {
            add
            {
                HookHandler._afterSetActiveChildren += value;
                HookHandler.HookSetActiveChildren();
            }
            remove => HookHandler._afterSetActiveChildren -= value;
        }

        public static event Delegates.SetActiveWithChildren_AfterArgs SetActiveWithChildren
        {
            add
            {
                HookHandler._afterSetActiveWithChildren += value;
                HookHandler.HookSetActiveWithChildren();
            }
            remove => HookHandler._afterSetActiveWithChildren -= value;
        }

        public static event Delegates.HasParameter_AfterArgs HasParameter
        {
            add
            {
                HookHandler._afterHasParameter += value;
                HookHandler.HookHasParameter();
            }
            remove => HookHandler._afterHasParameter -= value;
        }

        public static event Delegates.PlayAnimGetTime_AfterArgs PlayAnimGetTime
        {
            add
            {
                HookHandler._afterPlayAnimGetTime += value;
                HookHandler.HookPlayAnimGetTime();
            }
            remove => HookHandler._afterPlayAnimGetTime -= value;
        }

        public static event Delegates.MultiplyElements_Vector3_Vector3_AfterArgs MultiplyElements_Vector3_Vector3
        {
            add
            {
                HookHandler._afterMultiplyElements_Vector3_Vector3 += value;
                HookHandler.HookMultiplyElements_Vector3_Vector3();
            }
            remove => HookHandler._afterMultiplyElements_Vector3_Vector3 -= value;
        }

        public static event Delegates.MultiplyElements_Vector2_Vector2_AfterArgs MultiplyElements_Vector2_Vector2
        {
            add
            {
                HookHandler._afterMultiplyElements_Vector2_Vector2 += value;
                HookHandler.HookMultiplyElements_Vector2_Vector2();
            }
            remove => HookHandler._afterMultiplyElements_Vector2_Vector2 -= value;
        }

        public static event Delegates.SetPositionX_AfterArgs SetPositionX
        {
            add
            {
                HookHandler._afterSetPositionX += value;
                HookHandler.HookSetPositionX();
            }
            remove => HookHandler._afterSetPositionX -= value;
        }

        public static event Delegates.SetPositionY_AfterArgs SetPositionY
        {
            add
            {
                HookHandler._afterSetPositionY += value;
                HookHandler.HookSetPositionY();
            }
            remove => HookHandler._afterSetPositionY -= value;
        }

        public static event Delegates.SetPositionZ_AfterArgs SetPositionZ
        {
            add
            {
                HookHandler._afterSetPositionZ += value;
                HookHandler.HookSetPositionZ();
            }
            remove => HookHandler._afterSetPositionZ -= value;
        }

        public static event Delegates.SetPosition2D_Transform_float_float_AfterArgs SetPosition2D_Transform_float_float
        {
            add
            {
                HookHandler._afterSetPosition2D_Transform_float_float += value;
                HookHandler.HookSetPosition2D_Transform_float_float();
            }
            remove => HookHandler._afterSetPosition2D_Transform_float_float -= value;
        }

        public static event Delegates.SetPosition2D_Transform_Vector2_AfterArgs SetPosition2D_Transform_Vector2
        {
            add
            {
                HookHandler._afterSetPosition2D_Transform_Vector2 += value;
                HookHandler.HookSetPosition2D_Transform_Vector2();
            }
            remove => HookHandler._afterSetPosition2D_Transform_Vector2 -= value;
        }

        public static event Delegates.SetPosition3D_AfterArgs SetPosition3D
        {
            add
            {
                HookHandler._afterSetPosition3D += value;
                HookHandler.HookSetPosition3D();
            }
            remove => HookHandler._afterSetPosition3D -= value;
        }

        public static event Delegates.SetScaleX_AfterArgs SetScaleX
        {
            add
            {
                HookHandler._afterSetScaleX += value;
                HookHandler.HookSetScaleX();
            }
            remove => HookHandler._afterSetScaleX -= value;
        }

        public static event Delegates.SetScaleY_AfterArgs SetScaleY
        {
            add
            {
                HookHandler._afterSetScaleY += value;
                HookHandler.HookSetScaleY();
            }
            remove => HookHandler._afterSetScaleY -= value;
        }

        public static event Delegates.SetScaleZ_AfterArgs SetScaleZ
        {
            add
            {
                HookHandler._afterSetScaleZ += value;
                HookHandler.HookSetScaleZ();
            }
            remove => HookHandler._afterSetScaleZ -= value;
        }

        public static event Delegates.SetRotationZ_AfterArgs SetRotationZ
        {
            add
            {
                HookHandler._afterSetRotationZ += value;
                HookHandler.HookSetRotationZ();
            }
            remove => HookHandler._afterSetRotationZ -= value;
        }

        public static event Delegates.SetScaleMatching_AfterArgs SetScaleMatching
        {
            add
            {
                HookHandler._afterSetScaleMatching += value;
                HookHandler.HookSetScaleMatching();
            }
            remove => HookHandler._afterSetScaleMatching -= value;
        }

        public static event Delegates.GetPositionX_AfterArgs GetPositionX
        {
            add
            {
                HookHandler._afterGetPositionX += value;
                HookHandler.HookGetPositionX();
            }
            remove => HookHandler._afterGetPositionX -= value;
        }

        public static event Delegates.GetPositionY_AfterArgs GetPositionY
        {
            add
            {
                HookHandler._afterGetPositionY += value;
                HookHandler.HookGetPositionY();
            }
            remove => HookHandler._afterGetPositionY -= value;
        }

        public static event Delegates.GetPositionZ_AfterArgs GetPositionZ
        {
            add
            {
                HookHandler._afterGetPositionZ += value;
                HookHandler.HookGetPositionZ();
            }
            remove => HookHandler._afterGetPositionZ -= value;
        }

        public static event Delegates.GetScaleX_AfterArgs GetScaleX
        {
            add
            {
                HookHandler._afterGetScaleX += value;
                HookHandler.HookGetScaleX();
            }
            remove => HookHandler._afterGetScaleX -= value;
        }

        public static event Delegates.GetScaleY_AfterArgs GetScaleY
        {
            add
            {
                HookHandler._afterGetScaleY += value;
                HookHandler.HookGetScaleY();
            }
            remove => HookHandler._afterGetScaleY -= value;
        }

        public static event Delegates.GetScaleZ_AfterArgs GetScaleZ
        {
            add
            {
                HookHandler._afterGetScaleZ += value;
                HookHandler.HookGetScaleZ();
            }
            remove => HookHandler._afterGetScaleZ -= value;
        }

        public static event Delegates.GetRotation2D_AfterArgs GetRotation2D
        {
            add
            {
                HookHandler._afterGetRotation2D += value;
                HookHandler.HookGetRotation2D();
            }
            remove => HookHandler._afterGetRotation2D -= value;
        }

        public static event Delegates.SetRotation2D_AfterArgs SetRotation2D
        {
            add
            {
                HookHandler._afterSetRotation2D += value;
                HookHandler.HookSetRotation2D();
            }
            remove => HookHandler._afterSetRotation2D -= value;
        }

        public static event Delegates.IsAny_AfterArgs IsAny
        {
            add
            {
                HookHandler._afterIsAny += value;
                HookHandler.HookIsAny();
            }
            remove => HookHandler._afterIsAny -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.Extensions.hook_GetFirstInteractable GetFirstInteractable
        {
            add => On.Extensions.GetFirstInteractable += value;
            remove => On.Extensions.GetFirstInteractable -= value;
        }

        public static event On.Extensions.hook_PlayOnSource PlayOnSource
        {
            add => On.Extensions.PlayOnSource += value;
            remove => On.Extensions.PlayOnSource -= value;
        }

        public static event On.Extensions.hook_SetActiveChildren SetActiveChildren
        {
            add => On.Extensions.SetActiveChildren += value;
            remove => On.Extensions.SetActiveChildren -= value;
        }

        public static event On.Extensions.hook_SetActiveWithChildren SetActiveWithChildren
        {
            add => On.Extensions.SetActiveWithChildren += value;
            remove => On.Extensions.SetActiveWithChildren -= value;
        }

        public static event On.Extensions.hook_HasParameter HasParameter
        {
            add => On.Extensions.HasParameter += value;
            remove => On.Extensions.HasParameter -= value;
        }

        public static event On.Extensions.hook_PlayAnimWait PlayAnimWait
        {
            add => On.Extensions.PlayAnimWait += value;
            remove => On.Extensions.PlayAnimWait -= value;
        }

        public static event On.Extensions.hook_PlayAnimGetTime PlayAnimGetTime
        {
            add => On.Extensions.PlayAnimGetTime += value;
            remove => On.Extensions.PlayAnimGetTime -= value;
        }

        public static event On.Extensions.hook_MultiplyElements_Vector3_Vector3 MultiplyElements_Vector3_Vector3
        {
            add => On.Extensions.MultiplyElements_Vector3_Vector3 += value;
            remove => On.Extensions.MultiplyElements_Vector3_Vector3 -= value;
        }

        public static event On.Extensions.hook_MultiplyElements_Vector2_Vector2 MultiplyElements_Vector2_Vector2
        {
            add => On.Extensions.MultiplyElements_Vector2_Vector2 += value;
            remove => On.Extensions.MultiplyElements_Vector2_Vector2 -= value;
        }

        public static event On.Extensions.hook_SetPositionX SetPositionX
        {
            add => On.Extensions.SetPositionX += value;
            remove => On.Extensions.SetPositionX -= value;
        }

        public static event On.Extensions.hook_SetPositionY SetPositionY
        {
            add => On.Extensions.SetPositionY += value;
            remove => On.Extensions.SetPositionY -= value;
        }

        public static event On.Extensions.hook_SetPositionZ SetPositionZ
        {
            add => On.Extensions.SetPositionZ += value;
            remove => On.Extensions.SetPositionZ -= value;
        }

        public static event On.Extensions.hook_SetPosition2D_Transform_float_float SetPosition2D_Transform_float_float
        {
            add => On.Extensions.SetPosition2D_Transform_float_float += value;
            remove => On.Extensions.SetPosition2D_Transform_float_float -= value;
        }

        public static event On.Extensions.hook_SetPosition2D_Transform_Vector2 SetPosition2D_Transform_Vector2
        {
            add => On.Extensions.SetPosition2D_Transform_Vector2 += value;
            remove => On.Extensions.SetPosition2D_Transform_Vector2 -= value;
        }

        public static event On.Extensions.hook_SetPosition3D SetPosition3D
        {
            add => On.Extensions.SetPosition3D += value;
            remove => On.Extensions.SetPosition3D -= value;
        }

        public static event On.Extensions.hook_SetScaleX SetScaleX
        {
            add => On.Extensions.SetScaleX += value;
            remove => On.Extensions.SetScaleX -= value;
        }

        public static event On.Extensions.hook_SetScaleY SetScaleY
        {
            add => On.Extensions.SetScaleY += value;
            remove => On.Extensions.SetScaleY -= value;
        }

        public static event On.Extensions.hook_SetScaleZ SetScaleZ
        {
            add => On.Extensions.SetScaleZ += value;
            remove => On.Extensions.SetScaleZ -= value;
        }

        public static event On.Extensions.hook_SetRotationZ SetRotationZ
        {
            add => On.Extensions.SetRotationZ += value;
            remove => On.Extensions.SetRotationZ -= value;
        }

        public static event On.Extensions.hook_SetScaleMatching SetScaleMatching
        {
            add => On.Extensions.SetScaleMatching += value;
            remove => On.Extensions.SetScaleMatching -= value;
        }

        public static event On.Extensions.hook_GetPositionX GetPositionX
        {
            add => On.Extensions.GetPositionX += value;
            remove => On.Extensions.GetPositionX -= value;
        }

        public static event On.Extensions.hook_GetPositionY GetPositionY
        {
            add => On.Extensions.GetPositionY += value;
            remove => On.Extensions.GetPositionY -= value;
        }

        public static event On.Extensions.hook_GetPositionZ GetPositionZ
        {
            add => On.Extensions.GetPositionZ += value;
            remove => On.Extensions.GetPositionZ -= value;
        }

        public static event On.Extensions.hook_GetScaleX GetScaleX
        {
            add => On.Extensions.GetScaleX += value;
            remove => On.Extensions.GetScaleX -= value;
        }

        public static event On.Extensions.hook_GetScaleY GetScaleY
        {
            add => On.Extensions.GetScaleY += value;
            remove => On.Extensions.GetScaleY -= value;
        }

        public static event On.Extensions.hook_GetScaleZ GetScaleZ
        {
            add => On.Extensions.GetScaleZ += value;
            remove => On.Extensions.GetScaleZ -= value;
        }

        public static event On.Extensions.hook_GetRotation2D GetRotation2D
        {
            add => On.Extensions.GetRotation2D += value;
            remove => On.Extensions.GetRotation2D -= value;
        }

        public static event On.Extensions.hook_SetRotation2D SetRotation2D
        {
            add => On.Extensions.SetRotation2D += value;
            remove => On.Extensions.SetRotation2D -= value;
        }

        public static event On.Extensions.hook_IsAny IsAny
        {
            add => On.Extensions.IsAny += value;
            remove => On.Extensions.IsAny -= value;
        }
    }
}