using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for SceneAdditiveLoadConditional class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSceneAdditiveLoadConditional
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_SceneNameToLoad()
{
if (!HookedList.Contains("get_SceneNameToLoad"))
{
HookedList.Add("get_SceneNameToLoad");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneAdditiveLoadConditional), "get_SceneNameToLoad", true), get_SceneNameToLoad);

}
}
internal static event Delegates.get_SceneNameToLoad_BeforeArgs _beforeget_SceneNameToLoad;
internal static event Delegates.get_SceneNameToLoad_AfterArgs _afterget_SceneNameToLoad;
private static string get_SceneNameToLoad(Func<SceneAdditiveLoadConditional, string> orig, SceneAdditiveLoadConditional self)
{
Delegates.Params_get_SceneNameToLoad @params = new() 
{
self = self
};
if (_beforeget_SceneNameToLoad != null)
{
foreach (Delegates.get_SceneNameToLoad_BeforeArgs toInvoke in _beforeget_SceneNameToLoad.GetInvocationList())
{
try
{
_beforeget_SceneNameToLoad?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_SceneNameToLoad != null)
{
foreach (Delegates.get_SceneNameToLoad_AfterArgs toInvoke in _afterget_SceneNameToLoad.GetInvocationList())
{
try
{
retVal = _afterget_SceneNameToLoad.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_ShouldLoadBoss()
{
if (!HookedList.Contains("get_ShouldLoadBoss"))
{
HookedList.Add("get_ShouldLoadBoss");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneAdditiveLoadConditional), "get_ShouldLoadBoss", false), get_ShouldLoadBoss);

}
}
internal static event Delegates.get_ShouldLoadBoss_BeforeArgs _beforeget_ShouldLoadBoss;
internal static event Delegates.get_ShouldLoadBoss_AfterArgs _afterget_ShouldLoadBoss;
private static bool get_ShouldLoadBoss(Func<bool> orig)
{
if (_beforeget_ShouldLoadBoss != null)
{
foreach (Delegates.get_ShouldLoadBoss_BeforeArgs toInvoke in _beforeget_ShouldLoadBoss.GetInvocationList())
{
try
{
_beforeget_ShouldLoadBoss?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
var retVal = orig();
if (_afterget_ShouldLoadBoss != null)
{
foreach (Delegates.get_ShouldLoadBoss_AfterArgs toInvoke in _afterget_ShouldLoadBoss.GetInvocationList())
{
try
{
retVal = _afterget_ShouldLoadBoss.Invoke(retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
On.SceneAdditiveLoadConditional.OnEnable += OnEnable;

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(On.SceneAdditiveLoadConditional.orig_OnEnable orig,SceneAdditiveLoadConditional self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDisable()
{
if (!HookedList.Contains("OnDisable"))
{
HookedList.Add("OnDisable");
On.SceneAdditiveLoadConditional.OnDisable += OnDisable;

}
}
internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;
private static void OnDisable(On.SceneAdditiveLoadConditional.orig_OnDisable orig,SceneAdditiveLoadConditional self)
{
Delegates.Params_OnDisable @params = new() 
{
self = self
};
if (_beforeOnDisable != null)
{
foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
{
try
{
_beforeOnDisable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDisable != null)
{
foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
{
try
{
_afterOnDisable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookLoadAll()
{
if (!HookedList.Contains("LoadAll"))
{
HookedList.Add("LoadAll");
On.SceneAdditiveLoadConditional.LoadAll += LoadAll;

}
}
internal static event Delegates.LoadAll_BeforeArgs _beforeLoadAll;
private static System.Collections.IEnumerator LoadAll(On.SceneAdditiveLoadConditional.orig_LoadAll orig)
{
if (_beforeLoadAll != null)
{
foreach (Delegates.LoadAll_BeforeArgs toInvoke in _beforeLoadAll.GetInvocationList())
{
try
{
_beforeLoadAll?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return orig();
}
internal static void HookLoadRoutine()
{
if (!HookedList.Contains("LoadRoutine"))
{
HookedList.Add("LoadRoutine");
On.SceneAdditiveLoadConditional.LoadRoutine += LoadRoutine;

}
}
internal static event Delegates.LoadRoutine_BeforeArgs _beforeLoadRoutine;
private static System.Collections.IEnumerator LoadRoutine(On.SceneAdditiveLoadConditional.orig_LoadRoutine orig,SceneAdditiveLoadConditional self,  bool callEvent)
{
Delegates.Params_LoadRoutine @params = new() 
{
self = self
, callEvent = callEvent
};
if (_beforeLoadRoutine != null)
{
foreach (Delegates.LoadRoutine_BeforeArgs toInvoke in _beforeLoadRoutine.GetInvocationList())
{
try
{
_beforeLoadRoutine?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
callEvent = @params.callEvent;
return orig(self, callEvent);
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_SceneNameToLoad
{
public SceneAdditiveLoadConditional self;
}
public delegate void get_SceneNameToLoad_BeforeArgs(Params_get_SceneNameToLoad args);
public delegate string get_SceneNameToLoad_AfterArgs(Params_get_SceneNameToLoad args, string ret);
public delegate string get_SceneNameToLoad_WithArgs (Func<SceneAdditiveLoadConditional, string> orig, SceneAdditiveLoadConditional self);
public delegate void get_ShouldLoadBoss_BeforeArgs();
public delegate bool get_ShouldLoadBoss_AfterArgs(bool ret);
public delegate bool get_ShouldLoadBoss_WithArgs (Func<bool> orig);
public sealed class Params_OnEnable
{
public SceneAdditiveLoadConditional self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<SceneAdditiveLoadConditional> orig, SceneAdditiveLoadConditional self);
public sealed class Params_OnDisable
{
public SceneAdditiveLoadConditional self;
}
public delegate void OnDisable_BeforeArgs(Params_OnDisable args);
public delegate void OnDisable_AfterArgs(Params_OnDisable args);
public delegate void OnDisable_WithArgs (Action<SceneAdditiveLoadConditional> orig, SceneAdditiveLoadConditional self);
public delegate void LoadAll_BeforeArgs();
public delegate System.Collections.IEnumerator LoadAll_AfterArgs(System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator LoadAll_WithArgs (Func<System.Collections.IEnumerator> orig);
public sealed class Params_LoadRoutine
{
public SceneAdditiveLoadConditional self;
public bool callEvent;
}
public delegate void LoadRoutine_BeforeArgs(Params_LoadRoutine args);
public delegate System.Collections.IEnumerator LoadRoutine_AfterArgs(Params_LoadRoutine args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator LoadRoutine_WithArgs (Func<SceneAdditiveLoadConditional,  bool, System.Collections.IEnumerator> orig, SceneAdditiveLoadConditional self,  bool callEvent);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_SceneNameToLoad_BeforeArgs get_SceneNameToLoad
{
add
{

HookHandler._beforeget_SceneNameToLoad += value;
HookHandler.Hookget_SceneNameToLoad();
}
remove => HookHandler._beforeget_SceneNameToLoad -= value;
}
public static event Delegates.get_ShouldLoadBoss_BeforeArgs get_ShouldLoadBoss
{
add
{

HookHandler._beforeget_ShouldLoadBoss += value;
HookHandler.Hookget_ShouldLoadBoss();
}
remove => HookHandler._beforeget_ShouldLoadBoss -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.OnDisable_BeforeArgs OnDisable
{
add
{

HookHandler._beforeOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._beforeOnDisable -= value;
}
public static event Delegates.LoadAll_BeforeArgs LoadAll
{
add
{

HookHandler._beforeLoadAll += value;
HookHandler.HookLoadAll();
}
remove => HookHandler._beforeLoadAll -= value;
}
public static event Delegates.LoadRoutine_BeforeArgs LoadRoutine
{
add
{

HookHandler._beforeLoadRoutine += value;
HookHandler.HookLoadRoutine();
}
remove => HookHandler._beforeLoadRoutine -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_SceneNameToLoad_AfterArgs get_SceneNameToLoad
{
add
{

HookHandler._afterget_SceneNameToLoad += value;
HookHandler.Hookget_SceneNameToLoad();
}
remove => HookHandler._afterget_SceneNameToLoad -= value;
}
public static event Delegates.get_ShouldLoadBoss_AfterArgs get_ShouldLoadBoss
{
add
{

HookHandler._afterget_ShouldLoadBoss += value;
HookHandler.Hookget_ShouldLoadBoss();
}
remove => HookHandler._afterget_ShouldLoadBoss -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.OnDisable_AfterArgs OnDisable
{
add
{

HookHandler._afterOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._afterOnDisable -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_SceneNameToLoad_WithArgs get_SceneNameToLoad
{
add => HookEndpointManager.Add<Delegates.get_SceneNameToLoad_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneAdditiveLoadConditional), "get_SceneNameToLoad", true), value);
remove => HookEndpointManager.Remove<Delegates.get_SceneNameToLoad_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneAdditiveLoadConditional), "get_SceneNameToLoad", true), value);
}
public static event Delegates.get_ShouldLoadBoss_WithArgs get_ShouldLoadBoss
{
add => HookEndpointManager.Add<Delegates.get_ShouldLoadBoss_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneAdditiveLoadConditional), "get_ShouldLoadBoss", false), value);
remove => HookEndpointManager.Remove<Delegates.get_ShouldLoadBoss_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneAdditiveLoadConditional), "get_ShouldLoadBoss", false), value);
}
public static event On.SceneAdditiveLoadConditional.hook_OnEnable OnEnable
{
add => On.SceneAdditiveLoadConditional.OnEnable += value;
remove => On.SceneAdditiveLoadConditional.OnEnable -= value;
}
public static event On.SceneAdditiveLoadConditional.hook_OnDisable OnDisable
{
add => On.SceneAdditiveLoadConditional.OnDisable += value;
remove => On.SceneAdditiveLoadConditional.OnDisable -= value;
}
public static event On.SceneAdditiveLoadConditional.hook_LoadAll LoadAll
{
add => On.SceneAdditiveLoadConditional.LoadAll += value;
remove => On.SceneAdditiveLoadConditional.LoadAll -= value;
}
public static event On.SceneAdditiveLoadConditional.hook_LoadRoutine LoadRoutine
{
add => On.SceneAdditiveLoadConditional.LoadRoutine += value;
remove => On.SceneAdditiveLoadConditional.LoadRoutine -= value;
}
}

}
