using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for SceneAdditiveLoadConditional class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSceneAdditiveLoadConditional
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_SceneNameToLoad()
        {
            if (!HookedList.Contains("get_SceneNameToLoad"))
            {
                HookedList.Add("get_SceneNameToLoad");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneAdditiveLoadConditional), "get_SceneNameToLoad"),
                    get_SceneNameToLoad);
            }
        }

        internal static event Delegates.get_SceneNameToLoad_BeforeArgs _beforeget_SceneNameToLoad;
        internal static event Delegates.get_SceneNameToLoad_NormalArgs _afterget_SceneNameToLoad;

        private static string get_SceneNameToLoad(Func<SceneAdditiveLoadConditional, string> orig,
            SceneAdditiveLoadConditional self)
        {
            Delegates.Params_get_SceneNameToLoad @params = new()
            {
                self = self
            };
            _beforeget_SceneNameToLoad?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SceneNameToLoad != null) retVal = _afterget_SceneNameToLoad.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_ShouldLoadBoss()
        {
            if (!HookedList.Contains("get_ShouldLoadBoss"))
            {
                HookedList.Add("get_ShouldLoadBoss");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(SceneAdditiveLoadConditional), "get_ShouldLoadBoss", false),
                    get_ShouldLoadBoss);
            }
        }

        internal static event Delegates.get_ShouldLoadBoss_BeforeArgs _beforeget_ShouldLoadBoss;
        internal static event Delegates.get_ShouldLoadBoss_NormalArgs _afterget_ShouldLoadBoss;

        private static bool get_ShouldLoadBoss(Func<bool> orig)
        {
            _beforeget_ShouldLoadBoss?.Invoke();
            var retVal = orig();
            if (_afterget_ShouldLoadBoss != null) retVal = _afterget_ShouldLoadBoss.Invoke();
            return retVal;
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.SceneAdditiveLoadConditional.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.SceneAdditiveLoadConditional.orig_OnEnable orig,
            SceneAdditiveLoadConditional self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.SceneAdditiveLoadConditional.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.SceneAdditiveLoadConditional.orig_OnDisable orig,
            SceneAdditiveLoadConditional self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookLoadAll()
        {
            if (!HookedList.Contains("LoadAll"))
            {
                HookedList.Add("LoadAll");
                On.SceneAdditiveLoadConditional.LoadAll += LoadAll;
            }
        }

        internal static event Delegates.LoadAll_BeforeArgs _beforeLoadAll;

        private static IEnumerator LoadAll(On.SceneAdditiveLoadConditional.orig_LoadAll orig)
        {
            _beforeLoadAll?.Invoke();
            return orig();
        }

        internal static void HookLoadRoutine()
        {
            if (!HookedList.Contains("LoadRoutine"))
            {
                HookedList.Add("LoadRoutine");
                On.SceneAdditiveLoadConditional.LoadRoutine += LoadRoutine;
            }
        }

        internal static event Delegates.LoadRoutine_BeforeArgs _beforeLoadRoutine;

        private static IEnumerator LoadRoutine(On.SceneAdditiveLoadConditional.orig_LoadRoutine orig,
            SceneAdditiveLoadConditional self, bool callEvent)
        {
            Delegates.Params_LoadRoutine @params = new()
            {
                self = self, callEvent = callEvent
            };
            _beforeLoadRoutine?.Invoke(@params);
            self = @params.self;
            callEvent = @params.callEvent;
            return orig(self, callEvent);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_SceneNameToLoad_BeforeArgs(Params_get_SceneNameToLoad args);

        public delegate string get_SceneNameToLoad_NormalArgs(Params_get_SceneNameToLoad args);

        public delegate void get_ShouldLoadBoss_BeforeArgs();

        public delegate bool get_ShouldLoadBoss_NormalArgs();

        public delegate void LoadAll_BeforeArgs();

        public delegate IEnumerator LoadAll_NormalArgs();

        public delegate void LoadRoutine_BeforeArgs(Params_LoadRoutine args);

        public delegate IEnumerator LoadRoutine_NormalArgs(Params_LoadRoutine args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public sealed class Params_get_SceneNameToLoad
        {
            public SceneAdditiveLoadConditional self;
        }

        public sealed class Params_OnEnable
        {
            public SceneAdditiveLoadConditional self;
        }

        public sealed class Params_OnDisable
        {
            public SceneAdditiveLoadConditional self;
        }

        public sealed class Params_LoadRoutine
        {
            public bool callEvent;
            public SceneAdditiveLoadConditional self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_SceneNameToLoad_BeforeArgs get_SceneNameToLoad
        {
            add
            {
                HookHandler._beforeget_SceneNameToLoad += value;
                HookHandler.Hookget_SceneNameToLoad();
            }
            remove => HookHandler._beforeget_SceneNameToLoad -= value;
        }

        public static event Delegates.get_ShouldLoadBoss_BeforeArgs get_ShouldLoadBoss
        {
            add
            {
                HookHandler._beforeget_ShouldLoadBoss += value;
                HookHandler.Hookget_ShouldLoadBoss();
            }
            remove => HookHandler._beforeget_ShouldLoadBoss -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.LoadAll_BeforeArgs LoadAll
        {
            add
            {
                HookHandler._beforeLoadAll += value;
                HookHandler.HookLoadAll();
            }
            remove => HookHandler._beforeLoadAll -= value;
        }

        public static event Delegates.LoadRoutine_BeforeArgs LoadRoutine
        {
            add
            {
                HookHandler._beforeLoadRoutine += value;
                HookHandler.HookLoadRoutine();
            }
            remove => HookHandler._beforeLoadRoutine -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_SceneNameToLoad_NormalArgs get_SceneNameToLoad
        {
            add
            {
                HookHandler._afterget_SceneNameToLoad += value;
                HookHandler.Hookget_SceneNameToLoad();
            }
            remove => HookHandler._afterget_SceneNameToLoad -= value;
        }

        public static event Delegates.get_ShouldLoadBoss_NormalArgs get_ShouldLoadBoss
        {
            add
            {
                HookHandler._afterget_ShouldLoadBoss += value;
                HookHandler.Hookget_ShouldLoadBoss();
            }
            remove => HookHandler._afterget_ShouldLoadBoss -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_SceneNameToLoad_NormalArgs get_SceneNameToLoad
        {
            add => HookEndpointManager.Add<Delegates.get_SceneNameToLoad_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneAdditiveLoadConditional), "get_SceneNameToLoad"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SceneNameToLoad_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneAdditiveLoadConditional), "get_SceneNameToLoad"), value);
        }

        public static event Delegates.get_ShouldLoadBoss_NormalArgs get_ShouldLoadBoss
        {
            add => HookEndpointManager.Add<Delegates.get_ShouldLoadBoss_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneAdditiveLoadConditional), "get_ShouldLoadBoss", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_ShouldLoadBoss_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneAdditiveLoadConditional), "get_ShouldLoadBoss", false),
                value);
        }

        public static event On.SceneAdditiveLoadConditional.hook_OnEnable OnEnable
        {
            add => On.SceneAdditiveLoadConditional.OnEnable += value;
            remove => On.SceneAdditiveLoadConditional.OnEnable -= value;
        }

        public static event On.SceneAdditiveLoadConditional.hook_OnDisable OnDisable
        {
            add => On.SceneAdditiveLoadConditional.OnDisable += value;
            remove => On.SceneAdditiveLoadConditional.OnDisable -= value;
        }

        public static event On.SceneAdditiveLoadConditional.hook_LoadAll LoadAll
        {
            add => On.SceneAdditiveLoadConditional.LoadAll += value;
            remove => On.SceneAdditiveLoadConditional.LoadAll -= value;
        }

        public static event On.SceneAdditiveLoadConditional.hook_LoadRoutine LoadRoutine
        {
            add => On.SceneAdditiveLoadConditional.LoadRoutine += value;
            remove => On.SceneAdditiveLoadConditional.LoadRoutine -= value;
        }
    }
}