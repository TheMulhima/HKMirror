using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dUIUpDownHoverButton class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUIUpDownHoverButton
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_UseOnReleaseInsteadOfOnUp()
        {
            if (!HookedList.Contains("get_UseOnReleaseInsteadOfOnUp"))
            {
                HookedList.Add("get_UseOnReleaseInsteadOfOnUp");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(tk2dUIUpDownHoverButton), "get_UseOnReleaseInsteadOfOnUp"),
                    get_UseOnReleaseInsteadOfOnUp);
            }
        }

        internal static event Delegates.get_UseOnReleaseInsteadOfOnUp_BeforeArgs _beforeget_UseOnReleaseInsteadOfOnUp;
        internal static event Delegates.get_UseOnReleaseInsteadOfOnUp_NormalArgs _afterget_UseOnReleaseInsteadOfOnUp;

        private static bool get_UseOnReleaseInsteadOfOnUp(Func<tk2dUIUpDownHoverButton, bool> orig,
            tk2dUIUpDownHoverButton self)
        {
            Delegates.Params_get_UseOnReleaseInsteadOfOnUp @params = new()
            {
                self = self
            };
            _beforeget_UseOnReleaseInsteadOfOnUp?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_UseOnReleaseInsteadOfOnUp != null)
                retVal = _afterget_UseOnReleaseInsteadOfOnUp.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_IsOver()
        {
            if (!HookedList.Contains("get_IsOver"))
            {
                HookedList.Add("get_IsOver");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIUpDownHoverButton), "get_IsOver"), get_IsOver);
            }
        }

        internal static event Delegates.get_IsOver_BeforeArgs _beforeget_IsOver;
        internal static event Delegates.get_IsOver_NormalArgs _afterget_IsOver;

        private static bool get_IsOver(Func<tk2dUIUpDownHoverButton, bool> orig, tk2dUIUpDownHoverButton self)
        {
            Delegates.Params_get_IsOver @params = new()
            {
                self = self
            };
            _beforeget_IsOver?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsOver != null) retVal = _afterget_IsOver.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_IsOver()
        {
            if (!HookedList.Contains("set_IsOver"))
            {
                HookedList.Add("set_IsOver");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIUpDownHoverButton), "set_IsOver"), set_IsOver);
            }
        }

        internal static event Delegates.set_IsOver_BeforeArgs _beforeset_IsOver;
        internal static event Delegates.set_IsOver_NormalArgs _afterset_IsOver;

        private static void set_IsOver(Action<tk2dUIUpDownHoverButton, bool> orig, tk2dUIUpDownHoverButton self,
            bool value)
        {
            Delegates.Params_set_IsOver @params = new()
            {
                self = self, value = value
            };
            _beforeset_IsOver?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_IsOver != null) _afterset_IsOver.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.tk2dUIUpDownHoverButton.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.tk2dUIUpDownHoverButton.orig_Start orig, tk2dUIUpDownHoverButton self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.tk2dUIUpDownHoverButton.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.tk2dUIUpDownHoverButton.orig_OnEnable orig, tk2dUIUpDownHoverButton self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.tk2dUIUpDownHoverButton.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.tk2dUIUpDownHoverButton.orig_OnDisable orig, tk2dUIUpDownHoverButton self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookButtonUp()
        {
            if (!HookedList.Contains("ButtonUp"))
            {
                HookedList.Add("ButtonUp");
                On.tk2dUIUpDownHoverButton.ButtonUp += ButtonUp;
            }
        }

        internal static event Delegates.ButtonUp_BeforeArgs _beforeButtonUp;
        internal static event Delegates.ButtonUp_NormalArgs _afterButtonUp;

        private static void ButtonUp(On.tk2dUIUpDownHoverButton.orig_ButtonUp orig, tk2dUIUpDownHoverButton self)
        {
            Delegates.Params_ButtonUp @params = new()
            {
                self = self
            };
            _beforeButtonUp?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterButtonUp != null) _afterButtonUp.Invoke(@params);
        }

        internal static void HookButtonDown()
        {
            if (!HookedList.Contains("ButtonDown"))
            {
                HookedList.Add("ButtonDown");
                On.tk2dUIUpDownHoverButton.ButtonDown += ButtonDown;
            }
        }

        internal static event Delegates.ButtonDown_BeforeArgs _beforeButtonDown;
        internal static event Delegates.ButtonDown_NormalArgs _afterButtonDown;

        private static void ButtonDown(On.tk2dUIUpDownHoverButton.orig_ButtonDown orig, tk2dUIUpDownHoverButton self)
        {
            Delegates.Params_ButtonDown @params = new()
            {
                self = self
            };
            _beforeButtonDown?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterButtonDown != null) _afterButtonDown.Invoke(@params);
        }

        internal static void HookButtonHoverOver()
        {
            if (!HookedList.Contains("ButtonHoverOver"))
            {
                HookedList.Add("ButtonHoverOver");
                On.tk2dUIUpDownHoverButton.ButtonHoverOver += ButtonHoverOver;
            }
        }

        internal static event Delegates.ButtonHoverOver_BeforeArgs _beforeButtonHoverOver;
        internal static event Delegates.ButtonHoverOver_NormalArgs _afterButtonHoverOver;

        private static void ButtonHoverOver(On.tk2dUIUpDownHoverButton.orig_ButtonHoverOver orig,
            tk2dUIUpDownHoverButton self)
        {
            Delegates.Params_ButtonHoverOver @params = new()
            {
                self = self
            };
            _beforeButtonHoverOver?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterButtonHoverOver != null) _afterButtonHoverOver.Invoke(@params);
        }

        internal static void HookButtonHoverOut()
        {
            if (!HookedList.Contains("ButtonHoverOut"))
            {
                HookedList.Add("ButtonHoverOut");
                On.tk2dUIUpDownHoverButton.ButtonHoverOut += ButtonHoverOut;
            }
        }

        internal static event Delegates.ButtonHoverOut_BeforeArgs _beforeButtonHoverOut;
        internal static event Delegates.ButtonHoverOut_NormalArgs _afterButtonHoverOut;

        private static void ButtonHoverOut(On.tk2dUIUpDownHoverButton.orig_ButtonHoverOut orig,
            tk2dUIUpDownHoverButton self)
        {
            Delegates.Params_ButtonHoverOut @params = new()
            {
                self = self
            };
            _beforeButtonHoverOut?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterButtonHoverOut != null) _afterButtonHoverOut.Invoke(@params);
        }

        internal static void HookSetState()
        {
            if (!HookedList.Contains("SetState"))
            {
                HookedList.Add("SetState");
                On.tk2dUIUpDownHoverButton.SetState += SetState;
            }
        }

        internal static event Delegates.SetState_BeforeArgs _beforeSetState;
        internal static event Delegates.SetState_NormalArgs _afterSetState;

        private static void SetState(On.tk2dUIUpDownHoverButton.orig_SetState orig, tk2dUIUpDownHoverButton self)
        {
            Delegates.Params_SetState @params = new()
            {
                self = self
            };
            _beforeSetState?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetState != null) _afterSetState.Invoke(@params);
        }

        internal static void HookInternalSetUseOnReleaseInsteadOfOnUp()
        {
            if (!HookedList.Contains("InternalSetUseOnReleaseInsteadOfOnUp"))
            {
                HookedList.Add("InternalSetUseOnReleaseInsteadOfOnUp");
                On.tk2dUIUpDownHoverButton.InternalSetUseOnReleaseInsteadOfOnUp += InternalSetUseOnReleaseInsteadOfOnUp;
            }
        }

        internal static event Delegates.InternalSetUseOnReleaseInsteadOfOnUp_BeforeArgs
            _beforeInternalSetUseOnReleaseInsteadOfOnUp;

        internal static event Delegates.InternalSetUseOnReleaseInsteadOfOnUp_NormalArgs
            _afterInternalSetUseOnReleaseInsteadOfOnUp;

        private static void InternalSetUseOnReleaseInsteadOfOnUp(
            On.tk2dUIUpDownHoverButton.orig_InternalSetUseOnReleaseInsteadOfOnUp orig, tk2dUIUpDownHoverButton self,
            bool state)
        {
            Delegates.Params_InternalSetUseOnReleaseInsteadOfOnUp @params = new()
            {
                self = self, state = state
            };
            _beforeInternalSetUseOnReleaseInsteadOfOnUp?.Invoke(@params);
            self = @params.self;
            state = @params.state;
            orig(self, state);
            if (_afterInternalSetUseOnReleaseInsteadOfOnUp != null)
                _afterInternalSetUseOnReleaseInsteadOfOnUp.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ButtonDown_BeforeArgs(Params_ButtonDown args);

        public delegate void ButtonDown_NormalArgs(Params_ButtonDown args);

        public delegate void ButtonHoverOut_BeforeArgs(Params_ButtonHoverOut args);

        public delegate void ButtonHoverOut_NormalArgs(Params_ButtonHoverOut args);

        public delegate void ButtonHoverOver_BeforeArgs(Params_ButtonHoverOver args);

        public delegate void ButtonHoverOver_NormalArgs(Params_ButtonHoverOver args);

        public delegate void ButtonUp_BeforeArgs(Params_ButtonUp args);

        public delegate void ButtonUp_NormalArgs(Params_ButtonUp args);

        public delegate void get_IsOver_BeforeArgs(Params_get_IsOver args);

        public delegate bool get_IsOver_NormalArgs(Params_get_IsOver args);

        public delegate void get_UseOnReleaseInsteadOfOnUp_BeforeArgs(Params_get_UseOnReleaseInsteadOfOnUp args);

        public delegate bool get_UseOnReleaseInsteadOfOnUp_NormalArgs(Params_get_UseOnReleaseInsteadOfOnUp args);

        public delegate void InternalSetUseOnReleaseInsteadOfOnUp_BeforeArgs(
            Params_InternalSetUseOnReleaseInsteadOfOnUp args);

        public delegate void InternalSetUseOnReleaseInsteadOfOnUp_NormalArgs(
            Params_InternalSetUseOnReleaseInsteadOfOnUp args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void set_IsOver_BeforeArgs(Params_set_IsOver args);

        public delegate void set_IsOver_NormalArgs(Params_set_IsOver args);

        public delegate void SetState_BeforeArgs(Params_SetState args);

        public delegate void SetState_NormalArgs(Params_SetState args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_get_UseOnReleaseInsteadOfOnUp
        {
            public tk2dUIUpDownHoverButton self;
        }

        public sealed class Params_get_IsOver
        {
            public tk2dUIUpDownHoverButton self;
        }

        public sealed class Params_set_IsOver
        {
            public tk2dUIUpDownHoverButton self;
            public bool value;
        }

        public sealed class Params_Start
        {
            public tk2dUIUpDownHoverButton self;
        }

        public sealed class Params_OnEnable
        {
            public tk2dUIUpDownHoverButton self;
        }

        public sealed class Params_OnDisable
        {
            public tk2dUIUpDownHoverButton self;
        }

        public sealed class Params_ButtonUp
        {
            public tk2dUIUpDownHoverButton self;
        }

        public sealed class Params_ButtonDown
        {
            public tk2dUIUpDownHoverButton self;
        }

        public sealed class Params_ButtonHoverOver
        {
            public tk2dUIUpDownHoverButton self;
        }

        public sealed class Params_ButtonHoverOut
        {
            public tk2dUIUpDownHoverButton self;
        }

        public sealed class Params_SetState
        {
            public tk2dUIUpDownHoverButton self;
        }

        public sealed class Params_InternalSetUseOnReleaseInsteadOfOnUp
        {
            public tk2dUIUpDownHoverButton self;
            public bool state;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_UseOnReleaseInsteadOfOnUp_BeforeArgs get_UseOnReleaseInsteadOfOnUp
        {
            add
            {
                HookHandler._beforeget_UseOnReleaseInsteadOfOnUp += value;
                HookHandler.Hookget_UseOnReleaseInsteadOfOnUp();
            }
            remove => HookHandler._beforeget_UseOnReleaseInsteadOfOnUp -= value;
        }

        public static event Delegates.get_IsOver_BeforeArgs get_IsOver
        {
            add
            {
                HookHandler._beforeget_IsOver += value;
                HookHandler.Hookget_IsOver();
            }
            remove => HookHandler._beforeget_IsOver -= value;
        }

        public static event Delegates.set_IsOver_BeforeArgs set_IsOver
        {
            add
            {
                HookHandler._beforeset_IsOver += value;
                HookHandler.Hookset_IsOver();
            }
            remove => HookHandler._beforeset_IsOver -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.ButtonUp_BeforeArgs ButtonUp
        {
            add
            {
                HookHandler._beforeButtonUp += value;
                HookHandler.HookButtonUp();
            }
            remove => HookHandler._beforeButtonUp -= value;
        }

        public static event Delegates.ButtonDown_BeforeArgs ButtonDown
        {
            add
            {
                HookHandler._beforeButtonDown += value;
                HookHandler.HookButtonDown();
            }
            remove => HookHandler._beforeButtonDown -= value;
        }

        public static event Delegates.ButtonHoverOver_BeforeArgs ButtonHoverOver
        {
            add
            {
                HookHandler._beforeButtonHoverOver += value;
                HookHandler.HookButtonHoverOver();
            }
            remove => HookHandler._beforeButtonHoverOver -= value;
        }

        public static event Delegates.ButtonHoverOut_BeforeArgs ButtonHoverOut
        {
            add
            {
                HookHandler._beforeButtonHoverOut += value;
                HookHandler.HookButtonHoverOut();
            }
            remove => HookHandler._beforeButtonHoverOut -= value;
        }

        public static event Delegates.SetState_BeforeArgs SetState
        {
            add
            {
                HookHandler._beforeSetState += value;
                HookHandler.HookSetState();
            }
            remove => HookHandler._beforeSetState -= value;
        }

        public static event Delegates.InternalSetUseOnReleaseInsteadOfOnUp_BeforeArgs
            InternalSetUseOnReleaseInsteadOfOnUp
            {
                add
                {
                    HookHandler._beforeInternalSetUseOnReleaseInsteadOfOnUp += value;
                    HookHandler.HookInternalSetUseOnReleaseInsteadOfOnUp();
                }
                remove => HookHandler._beforeInternalSetUseOnReleaseInsteadOfOnUp -= value;
            }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_UseOnReleaseInsteadOfOnUp_NormalArgs get_UseOnReleaseInsteadOfOnUp
        {
            add
            {
                HookHandler._afterget_UseOnReleaseInsteadOfOnUp += value;
                HookHandler.Hookget_UseOnReleaseInsteadOfOnUp();
            }
            remove => HookHandler._afterget_UseOnReleaseInsteadOfOnUp -= value;
        }

        public static event Delegates.get_IsOver_NormalArgs get_IsOver
        {
            add
            {
                HookHandler._afterget_IsOver += value;
                HookHandler.Hookget_IsOver();
            }
            remove => HookHandler._afterget_IsOver -= value;
        }

        public static event Delegates.set_IsOver_NormalArgs set_IsOver
        {
            add
            {
                HookHandler._afterset_IsOver += value;
                HookHandler.Hookset_IsOver();
            }
            remove => HookHandler._afterset_IsOver -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.ButtonUp_NormalArgs ButtonUp
        {
            add
            {
                HookHandler._afterButtonUp += value;
                HookHandler.HookButtonUp();
            }
            remove => HookHandler._afterButtonUp -= value;
        }

        public static event Delegates.ButtonDown_NormalArgs ButtonDown
        {
            add
            {
                HookHandler._afterButtonDown += value;
                HookHandler.HookButtonDown();
            }
            remove => HookHandler._afterButtonDown -= value;
        }

        public static event Delegates.ButtonHoverOver_NormalArgs ButtonHoverOver
        {
            add
            {
                HookHandler._afterButtonHoverOver += value;
                HookHandler.HookButtonHoverOver();
            }
            remove => HookHandler._afterButtonHoverOver -= value;
        }

        public static event Delegates.ButtonHoverOut_NormalArgs ButtonHoverOut
        {
            add
            {
                HookHandler._afterButtonHoverOut += value;
                HookHandler.HookButtonHoverOut();
            }
            remove => HookHandler._afterButtonHoverOut -= value;
        }

        public static event Delegates.SetState_NormalArgs SetState
        {
            add
            {
                HookHandler._afterSetState += value;
                HookHandler.HookSetState();
            }
            remove => HookHandler._afterSetState -= value;
        }

        public static event Delegates.InternalSetUseOnReleaseInsteadOfOnUp_NormalArgs
            InternalSetUseOnReleaseInsteadOfOnUp
            {
                add
                {
                    HookHandler._afterInternalSetUseOnReleaseInsteadOfOnUp += value;
                    HookHandler.HookInternalSetUseOnReleaseInsteadOfOnUp();
                }
                remove => HookHandler._afterInternalSetUseOnReleaseInsteadOfOnUp -= value;
            }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_UseOnReleaseInsteadOfOnUp_NormalArgs get_UseOnReleaseInsteadOfOnUp
        {
            add => HookEndpointManager.Add<Delegates.get_UseOnReleaseInsteadOfOnUp_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIUpDownHoverButton), "get_UseOnReleaseInsteadOfOnUp"),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_UseOnReleaseInsteadOfOnUp_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIUpDownHoverButton), "get_UseOnReleaseInsteadOfOnUp"),
                value);
        }

        public static event Delegates.get_IsOver_NormalArgs get_IsOver
        {
            add => HookEndpointManager.Add<Delegates.get_IsOver_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIUpDownHoverButton), "get_IsOver"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsOver_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIUpDownHoverButton), "get_IsOver"), value);
        }

        public static event Delegates.set_IsOver_NormalArgs set_IsOver
        {
            add => HookEndpointManager.Add<Delegates.set_IsOver_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIUpDownHoverButton), "set_IsOver"), value);
            remove => HookEndpointManager.Remove<Delegates.set_IsOver_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIUpDownHoverButton), "set_IsOver"), value);
        }

        public static event On.tk2dUIUpDownHoverButton.hook_Start Start
        {
            add => On.tk2dUIUpDownHoverButton.Start += value;
            remove => On.tk2dUIUpDownHoverButton.Start -= value;
        }

        public static event On.tk2dUIUpDownHoverButton.hook_OnEnable OnEnable
        {
            add => On.tk2dUIUpDownHoverButton.OnEnable += value;
            remove => On.tk2dUIUpDownHoverButton.OnEnable -= value;
        }

        public static event On.tk2dUIUpDownHoverButton.hook_OnDisable OnDisable
        {
            add => On.tk2dUIUpDownHoverButton.OnDisable += value;
            remove => On.tk2dUIUpDownHoverButton.OnDisable -= value;
        }

        public static event On.tk2dUIUpDownHoverButton.hook_ButtonUp ButtonUp
        {
            add => On.tk2dUIUpDownHoverButton.ButtonUp += value;
            remove => On.tk2dUIUpDownHoverButton.ButtonUp -= value;
        }

        public static event On.tk2dUIUpDownHoverButton.hook_ButtonDown ButtonDown
        {
            add => On.tk2dUIUpDownHoverButton.ButtonDown += value;
            remove => On.tk2dUIUpDownHoverButton.ButtonDown -= value;
        }

        public static event On.tk2dUIUpDownHoverButton.hook_ButtonHoverOver ButtonHoverOver
        {
            add => On.tk2dUIUpDownHoverButton.ButtonHoverOver += value;
            remove => On.tk2dUIUpDownHoverButton.ButtonHoverOver -= value;
        }

        public static event On.tk2dUIUpDownHoverButton.hook_ButtonHoverOut ButtonHoverOut
        {
            add => On.tk2dUIUpDownHoverButton.ButtonHoverOut += value;
            remove => On.tk2dUIUpDownHoverButton.ButtonHoverOut -= value;
        }

        public static event On.tk2dUIUpDownHoverButton.hook_SetState SetState
        {
            add => On.tk2dUIUpDownHoverButton.SetState += value;
            remove => On.tk2dUIUpDownHoverButton.SetState -= value;
        }

        public static event On.tk2dUIUpDownHoverButton.hook_InternalSetUseOnReleaseInsteadOfOnUp
            InternalSetUseOnReleaseInsteadOfOnUp
            {
                add => On.tk2dUIUpDownHoverButton.InternalSetUseOnReleaseInsteadOfOnUp += value;
                remove => On.tk2dUIUpDownHoverButton.InternalSetUseOnReleaseInsteadOfOnUp -= value;
            }
    }
}