using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for tk2dCamera class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dCamera
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_CameraSettings()
        {
            if (!HookedList.Contains("get_CameraSettings"))
            {
                HookedList.Add("get_CameraSettings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_CameraSettings", true),
                    get_CameraSettings);
            }
        }

        internal static event Delegates.get_CameraSettings_BeforeArgs _beforeget_CameraSettings;
        internal static event Delegates.get_CameraSettings_AfterArgs _afterget_CameraSettings;

        private static tk2dCameraSettings get_CameraSettings(Func<tk2dCamera, tk2dCameraSettings> orig, tk2dCamera self)
        {
            Delegates.Params_get_CameraSettings @params = new()
            {
                self = self
            };
            if (_beforeget_CameraSettings != null)
            {
                foreach (Delegates.get_CameraSettings_BeforeArgs toInvoke in
                         _beforeget_CameraSettings.GetInvocationList())
                {
                    try
                    {
                        _beforeget_CameraSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_CameraSettings != null)
            {
                foreach (Delegates.get_CameraSettings_AfterArgs toInvoke in
                         _afterget_CameraSettings.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_CameraSettings.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_CurrentResolutionOverride()
        {
            if (!HookedList.Contains("get_CurrentResolutionOverride"))
            {
                HookedList.Add("get_CurrentResolutionOverride");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_CurrentResolutionOverride", true),
                    get_CurrentResolutionOverride);
            }
        }

        internal static event Delegates.get_CurrentResolutionOverride_BeforeArgs _beforeget_CurrentResolutionOverride;
        internal static event Delegates.get_CurrentResolutionOverride_AfterArgs _afterget_CurrentResolutionOverride;

        private static tk2dCameraResolutionOverride get_CurrentResolutionOverride(
            Func<tk2dCamera, tk2dCameraResolutionOverride> orig, tk2dCamera self)
        {
            Delegates.Params_get_CurrentResolutionOverride @params = new()
            {
                self = self
            };
            if (_beforeget_CurrentResolutionOverride != null)
            {
                foreach (Delegates.get_CurrentResolutionOverride_BeforeArgs toInvoke in
                         _beforeget_CurrentResolutionOverride.GetInvocationList())
                {
                    try
                    {
                        _beforeget_CurrentResolutionOverride?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_CurrentResolutionOverride != null)
            {
                foreach (Delegates.get_CurrentResolutionOverride_AfterArgs toInvoke in
                         _afterget_CurrentResolutionOverride.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_CurrentResolutionOverride.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_InheritConfig()
        {
            if (!HookedList.Contains("get_InheritConfig"))
            {
                HookedList.Add("get_InheritConfig");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_InheritConfig", true),
                    get_InheritConfig);
            }
        }

        internal static event Delegates.get_InheritConfig_BeforeArgs _beforeget_InheritConfig;
        internal static event Delegates.get_InheritConfig_AfterArgs _afterget_InheritConfig;

        private static tk2dCamera get_InheritConfig(Func<tk2dCamera, tk2dCamera> orig, tk2dCamera self)
        {
            Delegates.Params_get_InheritConfig @params = new()
            {
                self = self
            };
            if (_beforeget_InheritConfig != null)
            {
                foreach (Delegates.get_InheritConfig_BeforeArgs toInvoke in
                         _beforeget_InheritConfig.GetInvocationList())
                {
                    try
                    {
                        _beforeget_InheritConfig?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_InheritConfig != null)
            {
                foreach (Delegates.get_InheritConfig_AfterArgs toInvoke in _afterget_InheritConfig.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_InheritConfig.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_InheritConfig()
        {
            if (!HookedList.Contains("set_InheritConfig"))
            {
                HookedList.Add("set_InheritConfig");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "set_InheritConfig", true),
                    set_InheritConfig);
            }
        }

        internal static event Delegates.set_InheritConfig_BeforeArgs _beforeset_InheritConfig;
        internal static event Delegates.set_InheritConfig_AfterArgs _afterset_InheritConfig;

        private static void set_InheritConfig(Action<tk2dCamera, tk2dCamera> orig, tk2dCamera self, tk2dCamera value)
        {
            Delegates.Params_set_InheritConfig @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_InheritConfig != null)
            {
                foreach (Delegates.set_InheritConfig_BeforeArgs toInvoke in
                         _beforeset_InheritConfig.GetInvocationList())
                {
                    try
                    {
                        _beforeset_InheritConfig?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_InheritConfig != null)
            {
                foreach (Delegates.set_InheritConfig_AfterArgs toInvoke in _afterset_InheritConfig.GetInvocationList())
                {
                    try
                    {
                        _afterset_InheritConfig.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_UnityCamera()
        {
            if (!HookedList.Contains("get_UnityCamera"))
            {
                HookedList.Add("get_UnityCamera");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_UnityCamera", true), get_UnityCamera);
            }
        }

        internal static event Delegates.get_UnityCamera_BeforeArgs _beforeget_UnityCamera;
        internal static event Delegates.get_UnityCamera_AfterArgs _afterget_UnityCamera;

        private static UnityEngine.Camera get_UnityCamera(Func<tk2dCamera, UnityEngine.Camera> orig, tk2dCamera self)
        {
            Delegates.Params_get_UnityCamera @params = new()
            {
                self = self
            };
            if (_beforeget_UnityCamera != null)
            {
                foreach (Delegates.get_UnityCamera_BeforeArgs toInvoke in _beforeget_UnityCamera.GetInvocationList())
                {
                    try
                    {
                        _beforeget_UnityCamera?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_UnityCamera != null)
            {
                foreach (Delegates.get_UnityCamera_AfterArgs toInvoke in _afterget_UnityCamera.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_UnityCamera.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_Instance()
        {
            if (!HookedList.Contains("get_Instance"))
            {
                HookedList.Add("get_Instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_Instance", false), get_Instance);
            }
        }

        internal static event Delegates.get_Instance_BeforeArgs _beforeget_Instance;
        internal static event Delegates.get_Instance_AfterArgs _afterget_Instance;

        private static tk2dCamera get_Instance(Func<tk2dCamera> orig)
        {
            if (_beforeget_Instance != null)
            {
                foreach (Delegates.get_Instance_BeforeArgs toInvoke in _beforeget_Instance.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Instance?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            var retVal = orig();
            if (_afterget_Instance != null)
            {
                foreach (Delegates.get_Instance_AfterArgs toInvoke in _afterget_Instance.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Instance.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookCameraForLayer()
        {
            if (!HookedList.Contains("CameraForLayer"))
            {
                HookedList.Add("CameraForLayer");
                On.tk2dCamera.CameraForLayer += CameraForLayer;
            }
        }

        internal static event Delegates.CameraForLayer_BeforeArgs _beforeCameraForLayer;
        internal static event Delegates.CameraForLayer_AfterArgs _afterCameraForLayer;

        private static tk2dCamera CameraForLayer(On.tk2dCamera.orig_CameraForLayer orig, int layer)
        {
            Delegates.Params_CameraForLayer @params = new()
            {
                layer = layer
            };
            if (_beforeCameraForLayer != null)
            {
                foreach (Delegates.CameraForLayer_BeforeArgs toInvoke in _beforeCameraForLayer.GetInvocationList())
                {
                    try
                    {
                        _beforeCameraForLayer?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            layer = @params.layer;
            var retVal = orig(layer);
            if (_afterCameraForLayer != null)
            {
                foreach (Delegates.CameraForLayer_AfterArgs toInvoke in _afterCameraForLayer.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterCameraForLayer.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_ScreenExtents()
        {
            if (!HookedList.Contains("get_ScreenExtents"))
            {
                HookedList.Add("get_ScreenExtents");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_ScreenExtents", true),
                    get_ScreenExtents);
            }
        }

        internal static event Delegates.get_ScreenExtents_BeforeArgs _beforeget_ScreenExtents;
        internal static event Delegates.get_ScreenExtents_AfterArgs _afterget_ScreenExtents;

        private static UnityEngine.Rect get_ScreenExtents(Func<tk2dCamera, UnityEngine.Rect> orig, tk2dCamera self)
        {
            Delegates.Params_get_ScreenExtents @params = new()
            {
                self = self
            };
            if (_beforeget_ScreenExtents != null)
            {
                foreach (Delegates.get_ScreenExtents_BeforeArgs toInvoke in
                         _beforeget_ScreenExtents.GetInvocationList())
                {
                    try
                    {
                        _beforeget_ScreenExtents?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ScreenExtents != null)
            {
                foreach (Delegates.get_ScreenExtents_AfterArgs toInvoke in _afterget_ScreenExtents.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_ScreenExtents.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_NativeScreenExtents()
        {
            if (!HookedList.Contains("get_NativeScreenExtents"))
            {
                HookedList.Add("get_NativeScreenExtents");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_NativeScreenExtents", true),
                    get_NativeScreenExtents);
            }
        }

        internal static event Delegates.get_NativeScreenExtents_BeforeArgs _beforeget_NativeScreenExtents;
        internal static event Delegates.get_NativeScreenExtents_AfterArgs _afterget_NativeScreenExtents;

        private static UnityEngine.Rect get_NativeScreenExtents(Func<tk2dCamera, UnityEngine.Rect> orig,
            tk2dCamera self)
        {
            Delegates.Params_get_NativeScreenExtents @params = new()
            {
                self = self
            };
            if (_beforeget_NativeScreenExtents != null)
            {
                foreach (Delegates.get_NativeScreenExtents_BeforeArgs toInvoke in _beforeget_NativeScreenExtents
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_NativeScreenExtents?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_NativeScreenExtents != null)
            {
                foreach (Delegates.get_NativeScreenExtents_AfterArgs toInvoke in _afterget_NativeScreenExtents
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_NativeScreenExtents.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_TargetResolution()
        {
            if (!HookedList.Contains("get_TargetResolution"))
            {
                HookedList.Add("get_TargetResolution");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_TargetResolution", true),
                    get_TargetResolution);
            }
        }

        internal static event Delegates.get_TargetResolution_BeforeArgs _beforeget_TargetResolution;
        internal static event Delegates.get_TargetResolution_AfterArgs _afterget_TargetResolution;

        private static UnityEngine.Vector2 get_TargetResolution(Func<tk2dCamera, UnityEngine.Vector2> orig,
            tk2dCamera self)
        {
            Delegates.Params_get_TargetResolution @params = new()
            {
                self = self
            };
            if (_beforeget_TargetResolution != null)
            {
                foreach (Delegates.get_TargetResolution_BeforeArgs toInvoke in _beforeget_TargetResolution
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_TargetResolution?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_TargetResolution != null)
            {
                foreach (Delegates.get_TargetResolution_AfterArgs toInvoke in _afterget_TargetResolution
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_TargetResolution.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_NativeResolution()
        {
            if (!HookedList.Contains("get_NativeResolution"))
            {
                HookedList.Add("get_NativeResolution");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_NativeResolution", true),
                    get_NativeResolution);
            }
        }

        internal static event Delegates.get_NativeResolution_BeforeArgs _beforeget_NativeResolution;
        internal static event Delegates.get_NativeResolution_AfterArgs _afterget_NativeResolution;

        private static UnityEngine.Vector2 get_NativeResolution(Func<tk2dCamera, UnityEngine.Vector2> orig,
            tk2dCamera self)
        {
            Delegates.Params_get_NativeResolution @params = new()
            {
                self = self
            };
            if (_beforeget_NativeResolution != null)
            {
                foreach (Delegates.get_NativeResolution_BeforeArgs toInvoke in _beforeget_NativeResolution
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_NativeResolution?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_NativeResolution != null)
            {
                foreach (Delegates.get_NativeResolution_AfterArgs toInvoke in _afterget_NativeResolution
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_NativeResolution.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_ScreenOffset()
        {
            if (!HookedList.Contains("get_ScreenOffset"))
            {
                HookedList.Add("get_ScreenOffset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_ScreenOffset", true),
                    get_ScreenOffset);
            }
        }

        internal static event Delegates.get_ScreenOffset_BeforeArgs _beforeget_ScreenOffset;
        internal static event Delegates.get_ScreenOffset_AfterArgs _afterget_ScreenOffset;

        private static UnityEngine.Vector2 get_ScreenOffset(Func<tk2dCamera, UnityEngine.Vector2> orig, tk2dCamera self)
        {
            Delegates.Params_get_ScreenOffset @params = new()
            {
                self = self
            };
            if (_beforeget_ScreenOffset != null)
            {
                foreach (Delegates.get_ScreenOffset_BeforeArgs toInvoke in _beforeget_ScreenOffset.GetInvocationList())
                {
                    try
                    {
                        _beforeget_ScreenOffset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ScreenOffset != null)
            {
                foreach (Delegates.get_ScreenOffset_AfterArgs toInvoke in _afterget_ScreenOffset.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_ScreenOffset.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_resolution()
        {
            if (!HookedList.Contains("get_resolution"))
            {
                HookedList.Add("get_resolution");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_resolution", true), get_resolution);
            }
        }

        internal static event Delegates.get_resolution_BeforeArgs _beforeget_resolution;
        internal static event Delegates.get_resolution_AfterArgs _afterget_resolution;

        private static UnityEngine.Vector2 get_resolution(Func<tk2dCamera, UnityEngine.Vector2> orig, tk2dCamera self)
        {
            Delegates.Params_get_resolution @params = new()
            {
                self = self
            };
            if (_beforeget_resolution != null)
            {
                foreach (Delegates.get_resolution_BeforeArgs toInvoke in _beforeget_resolution.GetInvocationList())
                {
                    try
                    {
                        _beforeget_resolution?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_resolution != null)
            {
                foreach (Delegates.get_resolution_AfterArgs toInvoke in _afterget_resolution.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_resolution.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_ScreenResolution()
        {
            if (!HookedList.Contains("get_ScreenResolution"))
            {
                HookedList.Add("get_ScreenResolution");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_ScreenResolution", true),
                    get_ScreenResolution);
            }
        }

        internal static event Delegates.get_ScreenResolution_BeforeArgs _beforeget_ScreenResolution;
        internal static event Delegates.get_ScreenResolution_AfterArgs _afterget_ScreenResolution;

        private static UnityEngine.Vector2 get_ScreenResolution(Func<tk2dCamera, UnityEngine.Vector2> orig,
            tk2dCamera self)
        {
            Delegates.Params_get_ScreenResolution @params = new()
            {
                self = self
            };
            if (_beforeget_ScreenResolution != null)
            {
                foreach (Delegates.get_ScreenResolution_BeforeArgs toInvoke in _beforeget_ScreenResolution
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_ScreenResolution?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ScreenResolution != null)
            {
                foreach (Delegates.get_ScreenResolution_AfterArgs toInvoke in _afterget_ScreenResolution
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_ScreenResolution.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_ScaledResolution()
        {
            if (!HookedList.Contains("get_ScaledResolution"))
            {
                HookedList.Add("get_ScaledResolution");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_ScaledResolution", true),
                    get_ScaledResolution);
            }
        }

        internal static event Delegates.get_ScaledResolution_BeforeArgs _beforeget_ScaledResolution;
        internal static event Delegates.get_ScaledResolution_AfterArgs _afterget_ScaledResolution;

        private static UnityEngine.Vector2 get_ScaledResolution(Func<tk2dCamera, UnityEngine.Vector2> orig,
            tk2dCamera self)
        {
            Delegates.Params_get_ScaledResolution @params = new()
            {
                self = self
            };
            if (_beforeget_ScaledResolution != null)
            {
                foreach (Delegates.get_ScaledResolution_BeforeArgs toInvoke in _beforeget_ScaledResolution
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_ScaledResolution?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ScaledResolution != null)
            {
                foreach (Delegates.get_ScaledResolution_AfterArgs toInvoke in _afterget_ScaledResolution
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_ScaledResolution.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_ZoomFactor()
        {
            if (!HookedList.Contains("get_ZoomFactor"))
            {
                HookedList.Add("get_ZoomFactor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_ZoomFactor", true), get_ZoomFactor);
            }
        }

        internal static event Delegates.get_ZoomFactor_BeforeArgs _beforeget_ZoomFactor;
        internal static event Delegates.get_ZoomFactor_AfterArgs _afterget_ZoomFactor;

        private static float get_ZoomFactor(Func<tk2dCamera, float> orig, tk2dCamera self)
        {
            Delegates.Params_get_ZoomFactor @params = new()
            {
                self = self
            };
            if (_beforeget_ZoomFactor != null)
            {
                foreach (Delegates.get_ZoomFactor_BeforeArgs toInvoke in _beforeget_ZoomFactor.GetInvocationList())
                {
                    try
                    {
                        _beforeget_ZoomFactor?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ZoomFactor != null)
            {
                foreach (Delegates.get_ZoomFactor_AfterArgs toInvoke in _afterget_ZoomFactor.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_ZoomFactor.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_ZoomFactor()
        {
            if (!HookedList.Contains("set_ZoomFactor"))
            {
                HookedList.Add("set_ZoomFactor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "set_ZoomFactor", true), set_ZoomFactor);
            }
        }

        internal static event Delegates.set_ZoomFactor_BeforeArgs _beforeset_ZoomFactor;
        internal static event Delegates.set_ZoomFactor_AfterArgs _afterset_ZoomFactor;

        private static void set_ZoomFactor(Action<tk2dCamera, float> orig, tk2dCamera self, float value)
        {
            Delegates.Params_set_ZoomFactor @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_ZoomFactor != null)
            {
                foreach (Delegates.set_ZoomFactor_BeforeArgs toInvoke in _beforeset_ZoomFactor.GetInvocationList())
                {
                    try
                    {
                        _beforeset_ZoomFactor?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ZoomFactor != null)
            {
                foreach (Delegates.set_ZoomFactor_AfterArgs toInvoke in _afterset_ZoomFactor.GetInvocationList())
                {
                    try
                    {
                        _afterset_ZoomFactor.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_zoomScale()
        {
            if (!HookedList.Contains("get_zoomScale"))
            {
                HookedList.Add("get_zoomScale");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_zoomScale", true), get_zoomScale);
            }
        }

        internal static event Delegates.get_zoomScale_BeforeArgs _beforeget_zoomScale;
        internal static event Delegates.get_zoomScale_AfterArgs _afterget_zoomScale;

        private static float get_zoomScale(Func<tk2dCamera, float> orig, tk2dCamera self)
        {
            Delegates.Params_get_zoomScale @params = new()
            {
                self = self
            };
            if (_beforeget_zoomScale != null)
            {
                foreach (Delegates.get_zoomScale_BeforeArgs toInvoke in _beforeget_zoomScale.GetInvocationList())
                {
                    try
                    {
                        _beforeget_zoomScale?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_zoomScale != null)
            {
                foreach (Delegates.get_zoomScale_AfterArgs toInvoke in _afterget_zoomScale.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_zoomScale.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_zoomScale()
        {
            if (!HookedList.Contains("set_zoomScale"))
            {
                HookedList.Add("set_zoomScale");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "set_zoomScale", true), set_zoomScale);
            }
        }

        internal static event Delegates.set_zoomScale_BeforeArgs _beforeset_zoomScale;
        internal static event Delegates.set_zoomScale_AfterArgs _afterset_zoomScale;

        private static void set_zoomScale(Action<tk2dCamera, float> orig, tk2dCamera self, float value)
        {
            Delegates.Params_set_zoomScale @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_zoomScale != null)
            {
                foreach (Delegates.set_zoomScale_BeforeArgs toInvoke in _beforeset_zoomScale.GetInvocationList())
                {
                    try
                    {
                        _beforeset_zoomScale?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_zoomScale != null)
            {
                foreach (Delegates.set_zoomScale_AfterArgs toInvoke in _afterset_zoomScale.GetInvocationList())
                {
                    try
                    {
                        _afterset_zoomScale.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_ScreenCamera()
        {
            if (!HookedList.Contains("get_ScreenCamera"))
            {
                HookedList.Add("get_ScreenCamera");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_ScreenCamera", true),
                    get_ScreenCamera);
            }
        }

        internal static event Delegates.get_ScreenCamera_BeforeArgs _beforeget_ScreenCamera;
        internal static event Delegates.get_ScreenCamera_AfterArgs _afterget_ScreenCamera;

        private static UnityEngine.Camera get_ScreenCamera(Func<tk2dCamera, UnityEngine.Camera> orig, tk2dCamera self)
        {
            Delegates.Params_get_ScreenCamera @params = new()
            {
                self = self
            };
            if (_beforeget_ScreenCamera != null)
            {
                foreach (Delegates.get_ScreenCamera_BeforeArgs toInvoke in _beforeget_ScreenCamera.GetInvocationList())
                {
                    try
                    {
                        _beforeget_ScreenCamera?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ScreenCamera != null)
            {
                foreach (Delegates.get_ScreenCamera_AfterArgs toInvoke in _afterget_ScreenCamera.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_ScreenCamera.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.tk2dCamera.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.tk2dCamera.orig_Awake orig, tk2dCamera self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
            {
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                {
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
            {
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                {
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.tk2dCamera.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.tk2dCamera.orig_OnEnable orig, tk2dCamera self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
            {
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
            {
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.tk2dCamera.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_AfterArgs _afterOnDestroy;

        private static void OnDestroy(On.tk2dCamera.orig_OnDestroy orig, tk2dCamera self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            if (_beforeOnDestroy != null)
            {
                foreach (Delegates.OnDestroy_BeforeArgs toInvoke in _beforeOnDestroy.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDestroy?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null)
            {
                foreach (Delegates.OnDestroy_AfterArgs toInvoke in _afterOnDestroy.GetInvocationList())
                {
                    try
                    {
                        _afterOnDestroy.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnPreCull()
        {
            if (!HookedList.Contains("OnPreCull"))
            {
                HookedList.Add("OnPreCull");
                On.tk2dCamera.OnPreCull += OnPreCull;
            }
        }

        internal static event Delegates.OnPreCull_BeforeArgs _beforeOnPreCull;
        internal static event Delegates.OnPreCull_AfterArgs _afterOnPreCull;

        private static void OnPreCull(On.tk2dCamera.orig_OnPreCull orig, tk2dCamera self)
        {
            Delegates.Params_OnPreCull @params = new()
            {
                self = self
            };
            if (_beforeOnPreCull != null)
            {
                foreach (Delegates.OnPreCull_BeforeArgs toInvoke in _beforeOnPreCull.GetInvocationList())
                {
                    try
                    {
                        _beforeOnPreCull?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnPreCull != null)
            {
                foreach (Delegates.OnPreCull_AfterArgs toInvoke in _afterOnPreCull.GetInvocationList())
                {
                    try
                    {
                        _afterOnPreCull.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetSizeAtDistance()
        {
            if (!HookedList.Contains("GetSizeAtDistance"))
            {
                HookedList.Add("GetSizeAtDistance");
                On.tk2dCamera.GetSizeAtDistance += GetSizeAtDistance;
            }
        }

        internal static event Delegates.GetSizeAtDistance_BeforeArgs _beforeGetSizeAtDistance;
        internal static event Delegates.GetSizeAtDistance_AfterArgs _afterGetSizeAtDistance;

        private static float GetSizeAtDistance(On.tk2dCamera.orig_GetSizeAtDistance orig, tk2dCamera self,
            float distance)
        {
            Delegates.Params_GetSizeAtDistance @params = new()
            {
                self = self, distance = distance
            };
            if (_beforeGetSizeAtDistance != null)
            {
                foreach (Delegates.GetSizeAtDistance_BeforeArgs toInvoke in
                         _beforeGetSizeAtDistance.GetInvocationList())
                {
                    try
                    {
                        _beforeGetSizeAtDistance?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            distance = @params.distance;
            var retVal = orig(self, distance);
            if (_afterGetSizeAtDistance != null)
            {
                foreach (Delegates.GetSizeAtDistance_AfterArgs toInvoke in _afterGetSizeAtDistance.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetSizeAtDistance.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_SettingsRoot()
        {
            if (!HookedList.Contains("get_SettingsRoot"))
            {
                HookedList.Add("get_SettingsRoot");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_SettingsRoot", true),
                    get_SettingsRoot);
            }
        }

        internal static event Delegates.get_SettingsRoot_BeforeArgs _beforeget_SettingsRoot;
        internal static event Delegates.get_SettingsRoot_AfterArgs _afterget_SettingsRoot;

        private static tk2dCamera get_SettingsRoot(Func<tk2dCamera, tk2dCamera> orig, tk2dCamera self)
        {
            Delegates.Params_get_SettingsRoot @params = new()
            {
                self = self
            };
            if (_beforeget_SettingsRoot != null)
            {
                foreach (Delegates.get_SettingsRoot_BeforeArgs toInvoke in _beforeget_SettingsRoot.GetInvocationList())
                {
                    try
                    {
                        _beforeget_SettingsRoot?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SettingsRoot != null)
            {
                foreach (Delegates.get_SettingsRoot_AfterArgs toInvoke in _afterget_SettingsRoot.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_SettingsRoot.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookOrthoOffCenter()
        {
            if (!HookedList.Contains("OrthoOffCenter"))
            {
                HookedList.Add("OrthoOffCenter");
                On.tk2dCamera.OrthoOffCenter += OrthoOffCenter;
            }
        }

        internal static event Delegates.OrthoOffCenter_BeforeArgs _beforeOrthoOffCenter;
        internal static event Delegates.OrthoOffCenter_AfterArgs _afterOrthoOffCenter;

        private static UnityEngine.Matrix4x4 OrthoOffCenter(On.tk2dCamera.orig_OrthoOffCenter orig, tk2dCamera self,
            UnityEngine.Vector2 scale, float left, float right, float bottom, float top, float near, float far)
        {
            Delegates.Params_OrthoOffCenter @params = new()
            {
                self = self, scale = scale, left = left, right = right, bottom = bottom, top = top, near = near,
                far = far
            };
            if (_beforeOrthoOffCenter != null)
            {
                foreach (Delegates.OrthoOffCenter_BeforeArgs toInvoke in _beforeOrthoOffCenter.GetInvocationList())
                {
                    try
                    {
                        _beforeOrthoOffCenter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            scale = @params.scale;
            left = @params.left;
            right = @params.right;
            bottom = @params.bottom;
            top = @params.top;
            near = @params.near;
            far = @params.far;
            var retVal = orig(self, scale, left, right, bottom, top, near, far);
            if (_afterOrthoOffCenter != null)
            {
                foreach (Delegates.OrthoOffCenter_AfterArgs toInvoke in _afterOrthoOffCenter.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterOrthoOffCenter.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetScaleForOverride()
        {
            if (!HookedList.Contains("GetScaleForOverride"))
            {
                HookedList.Add("GetScaleForOverride");
                On.tk2dCamera.GetScaleForOverride += GetScaleForOverride;
            }
        }

        internal static event Delegates.GetScaleForOverride_BeforeArgs _beforeGetScaleForOverride;
        internal static event Delegates.GetScaleForOverride_AfterArgs _afterGetScaleForOverride;

        private static UnityEngine.Vector2 GetScaleForOverride(On.tk2dCamera.orig_GetScaleForOverride orig,
            tk2dCamera self, tk2dCamera settings, tk2dCameraResolutionOverride currentOverride, float width,
            float height)
        {
            Delegates.Params_GetScaleForOverride @params = new()
            {
                self = self, settings = settings, currentOverride = currentOverride, width = width, height = height
            };
            if (_beforeGetScaleForOverride != null)
            {
                foreach (Delegates.GetScaleForOverride_BeforeArgs toInvoke in _beforeGetScaleForOverride
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeGetScaleForOverride?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            settings = @params.settings;
            currentOverride = @params.currentOverride;
            width = @params.width;
            height = @params.height;
            var retVal = orig(self, settings, currentOverride, width, height);
            if (_afterGetScaleForOverride != null)
            {
                foreach (Delegates.GetScaleForOverride_AfterArgs toInvoke in
                         _afterGetScaleForOverride.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetScaleForOverride.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetOffsetForOverride()
        {
            if (!HookedList.Contains("GetOffsetForOverride"))
            {
                HookedList.Add("GetOffsetForOverride");
                On.tk2dCamera.GetOffsetForOverride += GetOffsetForOverride;
            }
        }

        internal static event Delegates.GetOffsetForOverride_BeforeArgs _beforeGetOffsetForOverride;
        internal static event Delegates.GetOffsetForOverride_AfterArgs _afterGetOffsetForOverride;

        private static UnityEngine.Vector2 GetOffsetForOverride(On.tk2dCamera.orig_GetOffsetForOverride orig,
            tk2dCamera self, tk2dCamera settings, tk2dCameraResolutionOverride currentOverride,
            UnityEngine.Vector2 scale, float width, float height)
        {
            Delegates.Params_GetOffsetForOverride @params = new()
            {
                self = self, settings = settings, currentOverride = currentOverride, scale = scale, width = width,
                height = height
            };
            if (_beforeGetOffsetForOverride != null)
            {
                foreach (Delegates.GetOffsetForOverride_BeforeArgs toInvoke in _beforeGetOffsetForOverride
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeGetOffsetForOverride?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            settings = @params.settings;
            currentOverride = @params.currentOverride;
            scale = @params.scale;
            width = @params.width;
            height = @params.height;
            var retVal = orig(self, settings, currentOverride, scale, width, height);
            if (_afterGetOffsetForOverride != null)
            {
                foreach (Delegates.GetOffsetForOverride_AfterArgs toInvoke in _afterGetOffsetForOverride
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetOffsetForOverride.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetProjectionMatrixForOverride()
        {
            if (!HookedList.Contains("GetProjectionMatrixForOverride"))
            {
                HookedList.Add("GetProjectionMatrixForOverride");
                On.tk2dCamera.GetProjectionMatrixForOverride += GetProjectionMatrixForOverride;
            }
        }

        internal static event Delegates.GetProjectionMatrixForOverride_BeforeArgs _beforeGetProjectionMatrixForOverride;
        internal static event Delegates.GetProjectionMatrixForOverride_AfterArgs _afterGetProjectionMatrixForOverride;

        private static UnityEngine.Matrix4x4 GetProjectionMatrixForOverride(
            On.tk2dCamera.orig_GetProjectionMatrixForOverride orig, tk2dCamera self, tk2dCamera settings,
            tk2dCameraResolutionOverride currentOverride, float pixelWidth, float pixelHeight, bool halfTexelOffset,
            out UnityEngine.Rect screenExtents, out UnityEngine.Rect unscaledScreenExtents)
        {
            Delegates.Params_GetProjectionMatrixForOverride @params = new()
            {
                self = self, settings = settings, currentOverride = currentOverride, pixelWidth = pixelWidth,
                pixelHeight = pixelHeight, halfTexelOffset = halfTexelOffset,
            };
            if (_beforeGetProjectionMatrixForOverride != null)
            {
                foreach (Delegates.GetProjectionMatrixForOverride_BeforeArgs toInvoke in
                         _beforeGetProjectionMatrixForOverride.GetInvocationList())
                {
                    try
                    {
                        _beforeGetProjectionMatrixForOverride?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            settings = @params.settings;
            currentOverride = @params.currentOverride;
            pixelWidth = @params.pixelWidth;
            pixelHeight = @params.pixelHeight;
            halfTexelOffset = @params.halfTexelOffset;
            screenExtents = @params.screenExtents;
            unscaledScreenExtents = @params.unscaledScreenExtents;
            var retVal = orig(self, settings, currentOverride, pixelWidth, pixelHeight, halfTexelOffset,
                out screenExtents, out unscaledScreenExtents);
            if (_afterGetProjectionMatrixForOverride != null)
            {
                foreach (Delegates.GetProjectionMatrixForOverride_AfterArgs toInvoke in
                         _afterGetProjectionMatrixForOverride.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetProjectionMatrixForOverride.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetScreenPixelDimensions()
        {
            if (!HookedList.Contains("GetScreenPixelDimensions"))
            {
                HookedList.Add("GetScreenPixelDimensions");
                On.tk2dCamera.GetScreenPixelDimensions += GetScreenPixelDimensions;
            }
        }

        internal static event Delegates.GetScreenPixelDimensions_BeforeArgs _beforeGetScreenPixelDimensions;
        internal static event Delegates.GetScreenPixelDimensions_AfterArgs _afterGetScreenPixelDimensions;

        private static UnityEngine.Vector2 GetScreenPixelDimensions(On.tk2dCamera.orig_GetScreenPixelDimensions orig,
            tk2dCamera self, tk2dCamera settings)
        {
            Delegates.Params_GetScreenPixelDimensions @params = new()
            {
                self = self, settings = settings
            };
            if (_beforeGetScreenPixelDimensions != null)
            {
                foreach (Delegates.GetScreenPixelDimensions_BeforeArgs toInvoke in _beforeGetScreenPixelDimensions
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeGetScreenPixelDimensions?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            settings = @params.settings;
            var retVal = orig(self, settings);
            if (_afterGetScreenPixelDimensions != null)
            {
                foreach (Delegates.GetScreenPixelDimensions_AfterArgs toInvoke in _afterGetScreenPixelDimensions
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetScreenPixelDimensions.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookUpgrade()
        {
            if (!HookedList.Contains("Upgrade"))
            {
                HookedList.Add("Upgrade");
                On.tk2dCamera.Upgrade += Upgrade;
            }
        }

        internal static event Delegates.Upgrade_BeforeArgs _beforeUpgrade;
        internal static event Delegates.Upgrade_AfterArgs _afterUpgrade;

        private static void Upgrade(On.tk2dCamera.orig_Upgrade orig, tk2dCamera self)
        {
            Delegates.Params_Upgrade @params = new()
            {
                self = self
            };
            if (_beforeUpgrade != null)
            {
                foreach (Delegates.Upgrade_BeforeArgs toInvoke in _beforeUpgrade.GetInvocationList())
                {
                    try
                    {
                        _beforeUpgrade?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpgrade != null)
            {
                foreach (Delegates.Upgrade_AfterArgs toInvoke in _afterUpgrade.GetInvocationList())
                {
                    try
                    {
                        _afterUpgrade.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateCameraMatrix()
        {
            if (!HookedList.Contains("UpdateCameraMatrix"))
            {
                HookedList.Add("UpdateCameraMatrix");
                On.tk2dCamera.UpdateCameraMatrix += UpdateCameraMatrix;
            }
        }

        internal static event Delegates.UpdateCameraMatrix_BeforeArgs _beforeUpdateCameraMatrix;
        internal static event Delegates.UpdateCameraMatrix_AfterArgs _afterUpdateCameraMatrix;

        private static void UpdateCameraMatrix(On.tk2dCamera.orig_UpdateCameraMatrix orig, tk2dCamera self)
        {
            Delegates.Params_UpdateCameraMatrix @params = new()
            {
                self = self
            };
            if (_beforeUpdateCameraMatrix != null)
            {
                foreach (Delegates.UpdateCameraMatrix_BeforeArgs toInvoke in
                         _beforeUpdateCameraMatrix.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateCameraMatrix?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdateCameraMatrix != null)
            {
                foreach (Delegates.UpdateCameraMatrix_AfterArgs toInvoke in
                         _afterUpdateCameraMatrix.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateCameraMatrix.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_CameraSettings
        {
            public tk2dCamera self;
        }

        public delegate void get_CameraSettings_BeforeArgs(Params_get_CameraSettings args);

        public delegate tk2dCameraSettings get_CameraSettings_AfterArgs(Params_get_CameraSettings args,
            tk2dCameraSettings ret);

        public delegate tk2dCameraSettings get_CameraSettings_WithArgs(Func<tk2dCamera, tk2dCameraSettings> orig,
            tk2dCamera self);

        public sealed class Params_get_CurrentResolutionOverride
        {
            public tk2dCamera self;
        }

        public delegate void get_CurrentResolutionOverride_BeforeArgs(Params_get_CurrentResolutionOverride args);

        public delegate tk2dCameraResolutionOverride get_CurrentResolutionOverride_AfterArgs(
            Params_get_CurrentResolutionOverride args, tk2dCameraResolutionOverride ret);

        public delegate tk2dCameraResolutionOverride get_CurrentResolutionOverride_WithArgs(
            Func<tk2dCamera, tk2dCameraResolutionOverride> orig, tk2dCamera self);

        public sealed class Params_get_InheritConfig
        {
            public tk2dCamera self;
        }

        public delegate void get_InheritConfig_BeforeArgs(Params_get_InheritConfig args);

        public delegate tk2dCamera get_InheritConfig_AfterArgs(Params_get_InheritConfig args, tk2dCamera ret);

        public delegate tk2dCamera get_InheritConfig_WithArgs(Func<tk2dCamera, tk2dCamera> orig, tk2dCamera self);

        public sealed class Params_set_InheritConfig
        {
            public tk2dCamera self;
            public tk2dCamera value;
        }

        public delegate void set_InheritConfig_BeforeArgs(Params_set_InheritConfig args);

        public delegate void set_InheritConfig_AfterArgs(Params_set_InheritConfig args);

        public delegate void set_InheritConfig_WithArgs(Action<tk2dCamera, tk2dCamera> orig, tk2dCamera self,
            tk2dCamera value);

        public sealed class Params_get_UnityCamera
        {
            public tk2dCamera self;
        }

        public delegate void get_UnityCamera_BeforeArgs(Params_get_UnityCamera args);

        public delegate UnityEngine.Camera get_UnityCamera_AfterArgs(Params_get_UnityCamera args,
            UnityEngine.Camera ret);

        public delegate UnityEngine.Camera get_UnityCamera_WithArgs(Func<tk2dCamera, UnityEngine.Camera> orig,
            tk2dCamera self);

        public delegate void get_Instance_BeforeArgs();

        public delegate tk2dCamera get_Instance_AfterArgs(tk2dCamera ret);

        public delegate tk2dCamera get_Instance_WithArgs(Func<tk2dCamera> orig);

        public sealed class Params_CameraForLayer
        {
            public int layer;
        }

        public delegate void CameraForLayer_BeforeArgs(Params_CameraForLayer args);

        public delegate tk2dCamera CameraForLayer_AfterArgs(Params_CameraForLayer args, tk2dCamera ret);

        public delegate tk2dCamera CameraForLayer_WithArgs(Func<int, tk2dCamera> orig, int layer);

        public sealed class Params_get_ScreenExtents
        {
            public tk2dCamera self;
        }

        public delegate void get_ScreenExtents_BeforeArgs(Params_get_ScreenExtents args);

        public delegate UnityEngine.Rect get_ScreenExtents_AfterArgs(Params_get_ScreenExtents args,
            UnityEngine.Rect ret);

        public delegate UnityEngine.Rect get_ScreenExtents_WithArgs(Func<tk2dCamera, UnityEngine.Rect> orig,
            tk2dCamera self);

        public sealed class Params_get_NativeScreenExtents
        {
            public tk2dCamera self;
        }

        public delegate void get_NativeScreenExtents_BeforeArgs(Params_get_NativeScreenExtents args);

        public delegate UnityEngine.Rect get_NativeScreenExtents_AfterArgs(Params_get_NativeScreenExtents args,
            UnityEngine.Rect ret);

        public delegate UnityEngine.Rect get_NativeScreenExtents_WithArgs(Func<tk2dCamera, UnityEngine.Rect> orig,
            tk2dCamera self);

        public sealed class Params_get_TargetResolution
        {
            public tk2dCamera self;
        }

        public delegate void get_TargetResolution_BeforeArgs(Params_get_TargetResolution args);

        public delegate UnityEngine.Vector2 get_TargetResolution_AfterArgs(Params_get_TargetResolution args,
            UnityEngine.Vector2 ret);

        public delegate UnityEngine.Vector2 get_TargetResolution_WithArgs(Func<tk2dCamera, UnityEngine.Vector2> orig,
            tk2dCamera self);

        public sealed class Params_get_NativeResolution
        {
            public tk2dCamera self;
        }

        public delegate void get_NativeResolution_BeforeArgs(Params_get_NativeResolution args);

        public delegate UnityEngine.Vector2 get_NativeResolution_AfterArgs(Params_get_NativeResolution args,
            UnityEngine.Vector2 ret);

        public delegate UnityEngine.Vector2 get_NativeResolution_WithArgs(Func<tk2dCamera, UnityEngine.Vector2> orig,
            tk2dCamera self);

        public sealed class Params_get_ScreenOffset
        {
            public tk2dCamera self;
        }

        public delegate void get_ScreenOffset_BeforeArgs(Params_get_ScreenOffset args);

        public delegate UnityEngine.Vector2 get_ScreenOffset_AfterArgs(Params_get_ScreenOffset args,
            UnityEngine.Vector2 ret);

        public delegate UnityEngine.Vector2 get_ScreenOffset_WithArgs(Func<tk2dCamera, UnityEngine.Vector2> orig,
            tk2dCamera self);

        public sealed class Params_get_resolution
        {
            public tk2dCamera self;
        }

        public delegate void get_resolution_BeforeArgs(Params_get_resolution args);

        public delegate UnityEngine.Vector2 get_resolution_AfterArgs(Params_get_resolution args,
            UnityEngine.Vector2 ret);

        public delegate UnityEngine.Vector2 get_resolution_WithArgs(Func<tk2dCamera, UnityEngine.Vector2> orig,
            tk2dCamera self);

        public sealed class Params_get_ScreenResolution
        {
            public tk2dCamera self;
        }

        public delegate void get_ScreenResolution_BeforeArgs(Params_get_ScreenResolution args);

        public delegate UnityEngine.Vector2 get_ScreenResolution_AfterArgs(Params_get_ScreenResolution args,
            UnityEngine.Vector2 ret);

        public delegate UnityEngine.Vector2 get_ScreenResolution_WithArgs(Func<tk2dCamera, UnityEngine.Vector2> orig,
            tk2dCamera self);

        public sealed class Params_get_ScaledResolution
        {
            public tk2dCamera self;
        }

        public delegate void get_ScaledResolution_BeforeArgs(Params_get_ScaledResolution args);

        public delegate UnityEngine.Vector2 get_ScaledResolution_AfterArgs(Params_get_ScaledResolution args,
            UnityEngine.Vector2 ret);

        public delegate UnityEngine.Vector2 get_ScaledResolution_WithArgs(Func<tk2dCamera, UnityEngine.Vector2> orig,
            tk2dCamera self);

        public sealed class Params_get_ZoomFactor
        {
            public tk2dCamera self;
        }

        public delegate void get_ZoomFactor_BeforeArgs(Params_get_ZoomFactor args);

        public delegate float get_ZoomFactor_AfterArgs(Params_get_ZoomFactor args, float ret);

        public delegate float get_ZoomFactor_WithArgs(Func<tk2dCamera, float> orig, tk2dCamera self);

        public sealed class Params_set_ZoomFactor
        {
            public tk2dCamera self;
            public float value;
        }

        public delegate void set_ZoomFactor_BeforeArgs(Params_set_ZoomFactor args);

        public delegate void set_ZoomFactor_AfterArgs(Params_set_ZoomFactor args);

        public delegate void set_ZoomFactor_WithArgs(Action<tk2dCamera, float> orig, tk2dCamera self, float value);

        public sealed class Params_get_zoomScale
        {
            public tk2dCamera self;
        }

        public delegate void get_zoomScale_BeforeArgs(Params_get_zoomScale args);

        public delegate float get_zoomScale_AfterArgs(Params_get_zoomScale args, float ret);

        public delegate float get_zoomScale_WithArgs(Func<tk2dCamera, float> orig, tk2dCamera self);

        public sealed class Params_set_zoomScale
        {
            public tk2dCamera self;
            public float value;
        }

        public delegate void set_zoomScale_BeforeArgs(Params_set_zoomScale args);

        public delegate void set_zoomScale_AfterArgs(Params_set_zoomScale args);

        public delegate void set_zoomScale_WithArgs(Action<tk2dCamera, float> orig, tk2dCamera self, float value);

        public sealed class Params_get_ScreenCamera
        {
            public tk2dCamera self;
        }

        public delegate void get_ScreenCamera_BeforeArgs(Params_get_ScreenCamera args);

        public delegate UnityEngine.Camera get_ScreenCamera_AfterArgs(Params_get_ScreenCamera args,
            UnityEngine.Camera ret);

        public delegate UnityEngine.Camera get_ScreenCamera_WithArgs(Func<tk2dCamera, UnityEngine.Camera> orig,
            tk2dCamera self);

        public sealed class Params_Awake
        {
            public tk2dCamera self;
        }

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<tk2dCamera> orig, tk2dCamera self);

        public sealed class Params_OnEnable
        {
            public tk2dCamera self;
        }

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<tk2dCamera> orig, tk2dCamera self);

        public sealed class Params_OnDestroy
        {
            public tk2dCamera self;
        }

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_AfterArgs(Params_OnDestroy args);

        public delegate void OnDestroy_WithArgs(Action<tk2dCamera> orig, tk2dCamera self);

        public sealed class Params_OnPreCull
        {
            public tk2dCamera self;
        }

        public delegate void OnPreCull_BeforeArgs(Params_OnPreCull args);

        public delegate void OnPreCull_AfterArgs(Params_OnPreCull args);

        public delegate void OnPreCull_WithArgs(Action<tk2dCamera> orig, tk2dCamera self);

        public sealed class Params_GetSizeAtDistance
        {
            public tk2dCamera self;
            public float distance;
        }

        public delegate void GetSizeAtDistance_BeforeArgs(Params_GetSizeAtDistance args);

        public delegate float GetSizeAtDistance_AfterArgs(Params_GetSizeAtDistance args, float ret);

        public delegate float GetSizeAtDistance_WithArgs(Func<tk2dCamera, float, float> orig, tk2dCamera self,
            float distance);

        public sealed class Params_get_SettingsRoot
        {
            public tk2dCamera self;
        }

        public delegate void get_SettingsRoot_BeforeArgs(Params_get_SettingsRoot args);

        public delegate tk2dCamera get_SettingsRoot_AfterArgs(Params_get_SettingsRoot args, tk2dCamera ret);

        public delegate tk2dCamera get_SettingsRoot_WithArgs(Func<tk2dCamera, tk2dCamera> orig, tk2dCamera self);

        public sealed class Params_OrthoOffCenter
        {
            public tk2dCamera self;
            public UnityEngine.Vector2 scale;
            public float left;
            public float right;
            public float bottom;
            public float top;
            public float near;
            public float far;
        }

        public delegate void OrthoOffCenter_BeforeArgs(Params_OrthoOffCenter args);

        public delegate UnityEngine.Matrix4x4 OrthoOffCenter_AfterArgs(Params_OrthoOffCenter args,
            UnityEngine.Matrix4x4 ret);

        public delegate UnityEngine.Matrix4x4 OrthoOffCenter_WithArgs(
            Func<tk2dCamera, UnityEngine.Vector2, float, float, float, float, float, float, UnityEngine.Matrix4x4> orig,
            tk2dCamera self, UnityEngine.Vector2 scale, float left, float right, float bottom, float top, float near,
            float far);

        public sealed class Params_GetScaleForOverride
        {
            public tk2dCamera self;
            public tk2dCamera settings;
            public tk2dCameraResolutionOverride currentOverride;
            public float width;
            public float height;
        }

        public delegate void GetScaleForOverride_BeforeArgs(Params_GetScaleForOverride args);

        public delegate UnityEngine.Vector2 GetScaleForOverride_AfterArgs(Params_GetScaleForOverride args,
            UnityEngine.Vector2 ret);

        public delegate UnityEngine.Vector2 GetScaleForOverride_WithArgs(
            Func<tk2dCamera, tk2dCamera, tk2dCameraResolutionOverride, float, float, UnityEngine.Vector2> orig,
            tk2dCamera self, tk2dCamera settings, tk2dCameraResolutionOverride currentOverride, float width,
            float height);

        public sealed class Params_GetOffsetForOverride
        {
            public tk2dCamera self;
            public tk2dCamera settings;
            public tk2dCameraResolutionOverride currentOverride;
            public UnityEngine.Vector2 scale;
            public float width;
            public float height;
        }

        public delegate void GetOffsetForOverride_BeforeArgs(Params_GetOffsetForOverride args);

        public delegate UnityEngine.Vector2 GetOffsetForOverride_AfterArgs(Params_GetOffsetForOverride args,
            UnityEngine.Vector2 ret);

        public delegate UnityEngine.Vector2 GetOffsetForOverride_WithArgs(
            Func<tk2dCamera, tk2dCamera, tk2dCameraResolutionOverride, UnityEngine.Vector2, float, float,
                UnityEngine.Vector2> orig, tk2dCamera self, tk2dCamera settings,
            tk2dCameraResolutionOverride currentOverride, UnityEngine.Vector2 scale, float width, float height);

        public sealed class Params_GetProjectionMatrixForOverride
        {
            public tk2dCamera self;
            public tk2dCamera settings;
            public tk2dCameraResolutionOverride currentOverride;
            public float pixelWidth;
            public float pixelHeight;
            public bool halfTexelOffset;
            public UnityEngine.Rect screenExtents;
            public UnityEngine.Rect unscaledScreenExtents;
        }

        public delegate void GetProjectionMatrixForOverride_BeforeArgs(Params_GetProjectionMatrixForOverride args);

        public delegate UnityEngine.Matrix4x4 GetProjectionMatrixForOverride_AfterArgs(
            Params_GetProjectionMatrixForOverride args, UnityEngine.Matrix4x4 ret);

        public delegate UnityEngine.Matrix4x4 GetProjectionMatrixForOverride_WithArgs(
            Func<tk2dCamera, tk2dCamera, tk2dCameraResolutionOverride, float, float, bool, UnityEngine.Rect,
                UnityEngine.Rect, UnityEngine.Matrix4x4> orig, tk2dCamera self, tk2dCamera settings,
            tk2dCameraResolutionOverride currentOverride, float pixelWidth, float pixelHeight, bool halfTexelOffset,
            out UnityEngine.Rect screenExtents, out UnityEngine.Rect unscaledScreenExtents);

        public sealed class Params_GetScreenPixelDimensions
        {
            public tk2dCamera self;
            public tk2dCamera settings;
        }

        public delegate void GetScreenPixelDimensions_BeforeArgs(Params_GetScreenPixelDimensions args);

        public delegate UnityEngine.Vector2 GetScreenPixelDimensions_AfterArgs(Params_GetScreenPixelDimensions args,
            UnityEngine.Vector2 ret);

        public delegate UnityEngine.Vector2 GetScreenPixelDimensions_WithArgs(
            Func<tk2dCamera, tk2dCamera, UnityEngine.Vector2> orig, tk2dCamera self, tk2dCamera settings);

        public sealed class Params_Upgrade
        {
            public tk2dCamera self;
        }

        public delegate void Upgrade_BeforeArgs(Params_Upgrade args);

        public delegate void Upgrade_AfterArgs(Params_Upgrade args);

        public delegate void Upgrade_WithArgs(Action<tk2dCamera> orig, tk2dCamera self);

        public sealed class Params_UpdateCameraMatrix
        {
            public tk2dCamera self;
        }

        public delegate void UpdateCameraMatrix_BeforeArgs(Params_UpdateCameraMatrix args);

        public delegate void UpdateCameraMatrix_AfterArgs(Params_UpdateCameraMatrix args);

        public delegate void UpdateCameraMatrix_WithArgs(Action<tk2dCamera> orig, tk2dCamera self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_CameraSettings_BeforeArgs get_CameraSettings
        {
            add
            {
                HookHandler._beforeget_CameraSettings += value;
                HookHandler.Hookget_CameraSettings();
            }
            remove => HookHandler._beforeget_CameraSettings -= value;
        }

        public static event Delegates.get_CurrentResolutionOverride_BeforeArgs get_CurrentResolutionOverride
        {
            add
            {
                HookHandler._beforeget_CurrentResolutionOverride += value;
                HookHandler.Hookget_CurrentResolutionOverride();
            }
            remove => HookHandler._beforeget_CurrentResolutionOverride -= value;
        }

        public static event Delegates.get_InheritConfig_BeforeArgs get_InheritConfig
        {
            add
            {
                HookHandler._beforeget_InheritConfig += value;
                HookHandler.Hookget_InheritConfig();
            }
            remove => HookHandler._beforeget_InheritConfig -= value;
        }

        public static event Delegates.set_InheritConfig_BeforeArgs set_InheritConfig
        {
            add
            {
                HookHandler._beforeset_InheritConfig += value;
                HookHandler.Hookset_InheritConfig();
            }
            remove => HookHandler._beforeset_InheritConfig -= value;
        }

        public static event Delegates.get_UnityCamera_BeforeArgs get_UnityCamera
        {
            add
            {
                HookHandler._beforeget_UnityCamera += value;
                HookHandler.Hookget_UnityCamera();
            }
            remove => HookHandler._beforeget_UnityCamera -= value;
        }

        public static event Delegates.get_Instance_BeforeArgs get_Instance
        {
            add
            {
                HookHandler._beforeget_Instance += value;
                HookHandler.Hookget_Instance();
            }
            remove => HookHandler._beforeget_Instance -= value;
        }

        public static event Delegates.CameraForLayer_BeforeArgs CameraForLayer
        {
            add
            {
                HookHandler._beforeCameraForLayer += value;
                HookHandler.HookCameraForLayer();
            }
            remove => HookHandler._beforeCameraForLayer -= value;
        }

        public static event Delegates.get_ScreenExtents_BeforeArgs get_ScreenExtents
        {
            add
            {
                HookHandler._beforeget_ScreenExtents += value;
                HookHandler.Hookget_ScreenExtents();
            }
            remove => HookHandler._beforeget_ScreenExtents -= value;
        }

        public static event Delegates.get_NativeScreenExtents_BeforeArgs get_NativeScreenExtents
        {
            add
            {
                HookHandler._beforeget_NativeScreenExtents += value;
                HookHandler.Hookget_NativeScreenExtents();
            }
            remove => HookHandler._beforeget_NativeScreenExtents -= value;
        }

        public static event Delegates.get_TargetResolution_BeforeArgs get_TargetResolution
        {
            add
            {
                HookHandler._beforeget_TargetResolution += value;
                HookHandler.Hookget_TargetResolution();
            }
            remove => HookHandler._beforeget_TargetResolution -= value;
        }

        public static event Delegates.get_NativeResolution_BeforeArgs get_NativeResolution
        {
            add
            {
                HookHandler._beforeget_NativeResolution += value;
                HookHandler.Hookget_NativeResolution();
            }
            remove => HookHandler._beforeget_NativeResolution -= value;
        }

        public static event Delegates.get_ScreenOffset_BeforeArgs get_ScreenOffset
        {
            add
            {
                HookHandler._beforeget_ScreenOffset += value;
                HookHandler.Hookget_ScreenOffset();
            }
            remove => HookHandler._beforeget_ScreenOffset -= value;
        }

        public static event Delegates.get_resolution_BeforeArgs get_resolution
        {
            add
            {
                HookHandler._beforeget_resolution += value;
                HookHandler.Hookget_resolution();
            }
            remove => HookHandler._beforeget_resolution -= value;
        }

        public static event Delegates.get_ScreenResolution_BeforeArgs get_ScreenResolution
        {
            add
            {
                HookHandler._beforeget_ScreenResolution += value;
                HookHandler.Hookget_ScreenResolution();
            }
            remove => HookHandler._beforeget_ScreenResolution -= value;
        }

        public static event Delegates.get_ScaledResolution_BeforeArgs get_ScaledResolution
        {
            add
            {
                HookHandler._beforeget_ScaledResolution += value;
                HookHandler.Hookget_ScaledResolution();
            }
            remove => HookHandler._beforeget_ScaledResolution -= value;
        }

        public static event Delegates.get_ZoomFactor_BeforeArgs get_ZoomFactor
        {
            add
            {
                HookHandler._beforeget_ZoomFactor += value;
                HookHandler.Hookget_ZoomFactor();
            }
            remove => HookHandler._beforeget_ZoomFactor -= value;
        }

        public static event Delegates.set_ZoomFactor_BeforeArgs set_ZoomFactor
        {
            add
            {
                HookHandler._beforeset_ZoomFactor += value;
                HookHandler.Hookset_ZoomFactor();
            }
            remove => HookHandler._beforeset_ZoomFactor -= value;
        }

        public static event Delegates.get_zoomScale_BeforeArgs get_zoomScale
        {
            add
            {
                HookHandler._beforeget_zoomScale += value;
                HookHandler.Hookget_zoomScale();
            }
            remove => HookHandler._beforeget_zoomScale -= value;
        }

        public static event Delegates.set_zoomScale_BeforeArgs set_zoomScale
        {
            add
            {
                HookHandler._beforeset_zoomScale += value;
                HookHandler.Hookset_zoomScale();
            }
            remove => HookHandler._beforeset_zoomScale -= value;
        }

        public static event Delegates.get_ScreenCamera_BeforeArgs get_ScreenCamera
        {
            add
            {
                HookHandler._beforeget_ScreenCamera += value;
                HookHandler.Hookget_ScreenCamera();
            }
            remove => HookHandler._beforeget_ScreenCamera -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.OnPreCull_BeforeArgs OnPreCull
        {
            add
            {
                HookHandler._beforeOnPreCull += value;
                HookHandler.HookOnPreCull();
            }
            remove => HookHandler._beforeOnPreCull -= value;
        }

        public static event Delegates.GetSizeAtDistance_BeforeArgs GetSizeAtDistance
        {
            add
            {
                HookHandler._beforeGetSizeAtDistance += value;
                HookHandler.HookGetSizeAtDistance();
            }
            remove => HookHandler._beforeGetSizeAtDistance -= value;
        }

        public static event Delegates.get_SettingsRoot_BeforeArgs get_SettingsRoot
        {
            add
            {
                HookHandler._beforeget_SettingsRoot += value;
                HookHandler.Hookget_SettingsRoot();
            }
            remove => HookHandler._beforeget_SettingsRoot -= value;
        }

        public static event Delegates.OrthoOffCenter_BeforeArgs OrthoOffCenter
        {
            add
            {
                HookHandler._beforeOrthoOffCenter += value;
                HookHandler.HookOrthoOffCenter();
            }
            remove => HookHandler._beforeOrthoOffCenter -= value;
        }

        public static event Delegates.GetScaleForOverride_BeforeArgs GetScaleForOverride
        {
            add
            {
                HookHandler._beforeGetScaleForOverride += value;
                HookHandler.HookGetScaleForOverride();
            }
            remove => HookHandler._beforeGetScaleForOverride -= value;
        }

        public static event Delegates.GetOffsetForOverride_BeforeArgs GetOffsetForOverride
        {
            add
            {
                HookHandler._beforeGetOffsetForOverride += value;
                HookHandler.HookGetOffsetForOverride();
            }
            remove => HookHandler._beforeGetOffsetForOverride -= value;
        }

        public static event Delegates.GetProjectionMatrixForOverride_BeforeArgs GetProjectionMatrixForOverride
        {
            add
            {
                HookHandler._beforeGetProjectionMatrixForOverride += value;
                HookHandler.HookGetProjectionMatrixForOverride();
            }
            remove => HookHandler._beforeGetProjectionMatrixForOverride -= value;
        }

        public static event Delegates.GetScreenPixelDimensions_BeforeArgs GetScreenPixelDimensions
        {
            add
            {
                HookHandler._beforeGetScreenPixelDimensions += value;
                HookHandler.HookGetScreenPixelDimensions();
            }
            remove => HookHandler._beforeGetScreenPixelDimensions -= value;
        }

        public static event Delegates.Upgrade_BeforeArgs Upgrade
        {
            add
            {
                HookHandler._beforeUpgrade += value;
                HookHandler.HookUpgrade();
            }
            remove => HookHandler._beforeUpgrade -= value;
        }

        public static event Delegates.UpdateCameraMatrix_BeforeArgs UpdateCameraMatrix
        {
            add
            {
                HookHandler._beforeUpdateCameraMatrix += value;
                HookHandler.HookUpdateCameraMatrix();
            }
            remove => HookHandler._beforeUpdateCameraMatrix -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_CameraSettings_AfterArgs get_CameraSettings
        {
            add
            {
                HookHandler._afterget_CameraSettings += value;
                HookHandler.Hookget_CameraSettings();
            }
            remove => HookHandler._afterget_CameraSettings -= value;
        }

        public static event Delegates.get_CurrentResolutionOverride_AfterArgs get_CurrentResolutionOverride
        {
            add
            {
                HookHandler._afterget_CurrentResolutionOverride += value;
                HookHandler.Hookget_CurrentResolutionOverride();
            }
            remove => HookHandler._afterget_CurrentResolutionOverride -= value;
        }

        public static event Delegates.get_InheritConfig_AfterArgs get_InheritConfig
        {
            add
            {
                HookHandler._afterget_InheritConfig += value;
                HookHandler.Hookget_InheritConfig();
            }
            remove => HookHandler._afterget_InheritConfig -= value;
        }

        public static event Delegates.set_InheritConfig_AfterArgs set_InheritConfig
        {
            add
            {
                HookHandler._afterset_InheritConfig += value;
                HookHandler.Hookset_InheritConfig();
            }
            remove => HookHandler._afterset_InheritConfig -= value;
        }

        public static event Delegates.get_UnityCamera_AfterArgs get_UnityCamera
        {
            add
            {
                HookHandler._afterget_UnityCamera += value;
                HookHandler.Hookget_UnityCamera();
            }
            remove => HookHandler._afterget_UnityCamera -= value;
        }

        public static event Delegates.get_Instance_AfterArgs get_Instance
        {
            add
            {
                HookHandler._afterget_Instance += value;
                HookHandler.Hookget_Instance();
            }
            remove => HookHandler._afterget_Instance -= value;
        }

        public static event Delegates.CameraForLayer_AfterArgs CameraForLayer
        {
            add
            {
                HookHandler._afterCameraForLayer += value;
                HookHandler.HookCameraForLayer();
            }
            remove => HookHandler._afterCameraForLayer -= value;
        }

        public static event Delegates.get_ScreenExtents_AfterArgs get_ScreenExtents
        {
            add
            {
                HookHandler._afterget_ScreenExtents += value;
                HookHandler.Hookget_ScreenExtents();
            }
            remove => HookHandler._afterget_ScreenExtents -= value;
        }

        public static event Delegates.get_NativeScreenExtents_AfterArgs get_NativeScreenExtents
        {
            add
            {
                HookHandler._afterget_NativeScreenExtents += value;
                HookHandler.Hookget_NativeScreenExtents();
            }
            remove => HookHandler._afterget_NativeScreenExtents -= value;
        }

        public static event Delegates.get_TargetResolution_AfterArgs get_TargetResolution
        {
            add
            {
                HookHandler._afterget_TargetResolution += value;
                HookHandler.Hookget_TargetResolution();
            }
            remove => HookHandler._afterget_TargetResolution -= value;
        }

        public static event Delegates.get_NativeResolution_AfterArgs get_NativeResolution
        {
            add
            {
                HookHandler._afterget_NativeResolution += value;
                HookHandler.Hookget_NativeResolution();
            }
            remove => HookHandler._afterget_NativeResolution -= value;
        }

        public static event Delegates.get_ScreenOffset_AfterArgs get_ScreenOffset
        {
            add
            {
                HookHandler._afterget_ScreenOffset += value;
                HookHandler.Hookget_ScreenOffset();
            }
            remove => HookHandler._afterget_ScreenOffset -= value;
        }

        public static event Delegates.get_resolution_AfterArgs get_resolution
        {
            add
            {
                HookHandler._afterget_resolution += value;
                HookHandler.Hookget_resolution();
            }
            remove => HookHandler._afterget_resolution -= value;
        }

        public static event Delegates.get_ScreenResolution_AfterArgs get_ScreenResolution
        {
            add
            {
                HookHandler._afterget_ScreenResolution += value;
                HookHandler.Hookget_ScreenResolution();
            }
            remove => HookHandler._afterget_ScreenResolution -= value;
        }

        public static event Delegates.get_ScaledResolution_AfterArgs get_ScaledResolution
        {
            add
            {
                HookHandler._afterget_ScaledResolution += value;
                HookHandler.Hookget_ScaledResolution();
            }
            remove => HookHandler._afterget_ScaledResolution -= value;
        }

        public static event Delegates.get_ZoomFactor_AfterArgs get_ZoomFactor
        {
            add
            {
                HookHandler._afterget_ZoomFactor += value;
                HookHandler.Hookget_ZoomFactor();
            }
            remove => HookHandler._afterget_ZoomFactor -= value;
        }

        public static event Delegates.set_ZoomFactor_AfterArgs set_ZoomFactor
        {
            add
            {
                HookHandler._afterset_ZoomFactor += value;
                HookHandler.Hookset_ZoomFactor();
            }
            remove => HookHandler._afterset_ZoomFactor -= value;
        }

        public static event Delegates.get_zoomScale_AfterArgs get_zoomScale
        {
            add
            {
                HookHandler._afterget_zoomScale += value;
                HookHandler.Hookget_zoomScale();
            }
            remove => HookHandler._afterget_zoomScale -= value;
        }

        public static event Delegates.set_zoomScale_AfterArgs set_zoomScale
        {
            add
            {
                HookHandler._afterset_zoomScale += value;
                HookHandler.Hookset_zoomScale();
            }
            remove => HookHandler._afterset_zoomScale -= value;
        }

        public static event Delegates.get_ScreenCamera_AfterArgs get_ScreenCamera
        {
            add
            {
                HookHandler._afterget_ScreenCamera += value;
                HookHandler.Hookget_ScreenCamera();
            }
            remove => HookHandler._afterget_ScreenCamera -= value;
        }

        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDestroy_AfterArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.OnPreCull_AfterArgs OnPreCull
        {
            add
            {
                HookHandler._afterOnPreCull += value;
                HookHandler.HookOnPreCull();
            }
            remove => HookHandler._afterOnPreCull -= value;
        }

        public static event Delegates.GetSizeAtDistance_AfterArgs GetSizeAtDistance
        {
            add
            {
                HookHandler._afterGetSizeAtDistance += value;
                HookHandler.HookGetSizeAtDistance();
            }
            remove => HookHandler._afterGetSizeAtDistance -= value;
        }

        public static event Delegates.get_SettingsRoot_AfterArgs get_SettingsRoot
        {
            add
            {
                HookHandler._afterget_SettingsRoot += value;
                HookHandler.Hookget_SettingsRoot();
            }
            remove => HookHandler._afterget_SettingsRoot -= value;
        }

        public static event Delegates.OrthoOffCenter_AfterArgs OrthoOffCenter
        {
            add
            {
                HookHandler._afterOrthoOffCenter += value;
                HookHandler.HookOrthoOffCenter();
            }
            remove => HookHandler._afterOrthoOffCenter -= value;
        }

        public static event Delegates.GetScaleForOverride_AfterArgs GetScaleForOverride
        {
            add
            {
                HookHandler._afterGetScaleForOverride += value;
                HookHandler.HookGetScaleForOverride();
            }
            remove => HookHandler._afterGetScaleForOverride -= value;
        }

        public static event Delegates.GetOffsetForOverride_AfterArgs GetOffsetForOverride
        {
            add
            {
                HookHandler._afterGetOffsetForOverride += value;
                HookHandler.HookGetOffsetForOverride();
            }
            remove => HookHandler._afterGetOffsetForOverride -= value;
        }

        public static event Delegates.GetProjectionMatrixForOverride_AfterArgs GetProjectionMatrixForOverride
        {
            add
            {
                HookHandler._afterGetProjectionMatrixForOverride += value;
                HookHandler.HookGetProjectionMatrixForOverride();
            }
            remove => HookHandler._afterGetProjectionMatrixForOverride -= value;
        }

        public static event Delegates.GetScreenPixelDimensions_AfterArgs GetScreenPixelDimensions
        {
            add
            {
                HookHandler._afterGetScreenPixelDimensions += value;
                HookHandler.HookGetScreenPixelDimensions();
            }
            remove => HookHandler._afterGetScreenPixelDimensions -= value;
        }

        public static event Delegates.Upgrade_AfterArgs Upgrade
        {
            add
            {
                HookHandler._afterUpgrade += value;
                HookHandler.HookUpgrade();
            }
            remove => HookHandler._afterUpgrade -= value;
        }

        public static event Delegates.UpdateCameraMatrix_AfterArgs UpdateCameraMatrix
        {
            add
            {
                HookHandler._afterUpdateCameraMatrix += value;
                HookHandler.HookUpdateCameraMatrix();
            }
            remove => HookHandler._afterUpdateCameraMatrix -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_CameraSettings_WithArgs get_CameraSettings
        {
            add => HookEndpointManager.Add<Delegates.get_CameraSettings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_CameraSettings", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_CameraSettings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_CameraSettings", true), value);
        }

        public static event Delegates.get_CurrentResolutionOverride_WithArgs get_CurrentResolutionOverride
        {
            add => HookEndpointManager.Add<Delegates.get_CurrentResolutionOverride_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_CurrentResolutionOverride", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_CurrentResolutionOverride_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_CurrentResolutionOverride", true), value);
        }

        public static event Delegates.get_InheritConfig_WithArgs get_InheritConfig
        {
            add => HookEndpointManager.Add<Delegates.get_InheritConfig_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_InheritConfig", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_InheritConfig_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_InheritConfig", true), value);
        }

        public static event Delegates.set_InheritConfig_WithArgs set_InheritConfig
        {
            add => HookEndpointManager.Add<Delegates.set_InheritConfig_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "set_InheritConfig", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_InheritConfig_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "set_InheritConfig", true), value);
        }

        public static event Delegates.get_UnityCamera_WithArgs get_UnityCamera
        {
            add => HookEndpointManager.Add<Delegates.get_UnityCamera_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_UnityCamera", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_UnityCamera_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_UnityCamera", true), value);
        }

        public static event Delegates.get_Instance_WithArgs get_Instance
        {
            add => HookEndpointManager.Add<Delegates.get_Instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_Instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_Instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_Instance", false), value);
        }

        public static event On.tk2dCamera.hook_CameraForLayer CameraForLayer
        {
            add => On.tk2dCamera.CameraForLayer += value;
            remove => On.tk2dCamera.CameraForLayer -= value;
        }

        public static event Delegates.get_ScreenExtents_WithArgs get_ScreenExtents
        {
            add => HookEndpointManager.Add<Delegates.get_ScreenExtents_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_ScreenExtents", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_ScreenExtents_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_ScreenExtents", true), value);
        }

        public static event Delegates.get_NativeScreenExtents_WithArgs get_NativeScreenExtents
        {
            add => HookEndpointManager.Add<Delegates.get_NativeScreenExtents_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_NativeScreenExtents", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_NativeScreenExtents_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_NativeScreenExtents", true), value);
        }

        public static event Delegates.get_TargetResolution_WithArgs get_TargetResolution
        {
            add => HookEndpointManager.Add<Delegates.get_TargetResolution_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_TargetResolution", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_TargetResolution_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_TargetResolution", true), value);
        }

        public static event Delegates.get_NativeResolution_WithArgs get_NativeResolution
        {
            add => HookEndpointManager.Add<Delegates.get_NativeResolution_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_NativeResolution", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_NativeResolution_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_NativeResolution", true), value);
        }

        public static event Delegates.get_ScreenOffset_WithArgs get_ScreenOffset
        {
            add => HookEndpointManager.Add<Delegates.get_ScreenOffset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_ScreenOffset", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_ScreenOffset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_ScreenOffset", true), value);
        }

        public static event Delegates.get_resolution_WithArgs get_resolution
        {
            add => HookEndpointManager.Add<Delegates.get_resolution_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_resolution", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_resolution_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_resolution", true), value);
        }

        public static event Delegates.get_ScreenResolution_WithArgs get_ScreenResolution
        {
            add => HookEndpointManager.Add<Delegates.get_ScreenResolution_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_ScreenResolution", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_ScreenResolution_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_ScreenResolution", true), value);
        }

        public static event Delegates.get_ScaledResolution_WithArgs get_ScaledResolution
        {
            add => HookEndpointManager.Add<Delegates.get_ScaledResolution_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_ScaledResolution", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_ScaledResolution_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_ScaledResolution", true), value);
        }

        public static event Delegates.get_ZoomFactor_WithArgs get_ZoomFactor
        {
            add => HookEndpointManager.Add<Delegates.get_ZoomFactor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_ZoomFactor", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_ZoomFactor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_ZoomFactor", true), value);
        }

        public static event Delegates.set_ZoomFactor_WithArgs set_ZoomFactor
        {
            add => HookEndpointManager.Add<Delegates.set_ZoomFactor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "set_ZoomFactor", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_ZoomFactor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "set_ZoomFactor", true), value);
        }

        public static event Delegates.get_zoomScale_WithArgs get_zoomScale
        {
            add => HookEndpointManager.Add<Delegates.get_zoomScale_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_zoomScale", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_zoomScale_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_zoomScale", true), value);
        }

        public static event Delegates.set_zoomScale_WithArgs set_zoomScale
        {
            add => HookEndpointManager.Add<Delegates.set_zoomScale_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "set_zoomScale", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_zoomScale_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "set_zoomScale", true), value);
        }

        public static event Delegates.get_ScreenCamera_WithArgs get_ScreenCamera
        {
            add => HookEndpointManager.Add<Delegates.get_ScreenCamera_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_ScreenCamera", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_ScreenCamera_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_ScreenCamera", true), value);
        }

        public static event On.tk2dCamera.hook_Awake Awake
        {
            add => On.tk2dCamera.Awake += value;
            remove => On.tk2dCamera.Awake -= value;
        }

        public static event On.tk2dCamera.hook_OnEnable OnEnable
        {
            add => On.tk2dCamera.OnEnable += value;
            remove => On.tk2dCamera.OnEnable -= value;
        }

        public static event On.tk2dCamera.hook_OnDestroy OnDestroy
        {
            add => On.tk2dCamera.OnDestroy += value;
            remove => On.tk2dCamera.OnDestroy -= value;
        }

        public static event On.tk2dCamera.hook_OnPreCull OnPreCull
        {
            add => On.tk2dCamera.OnPreCull += value;
            remove => On.tk2dCamera.OnPreCull -= value;
        }

        public static event On.tk2dCamera.hook_GetSizeAtDistance GetSizeAtDistance
        {
            add => On.tk2dCamera.GetSizeAtDistance += value;
            remove => On.tk2dCamera.GetSizeAtDistance -= value;
        }

        public static event Delegates.get_SettingsRoot_WithArgs get_SettingsRoot
        {
            add => HookEndpointManager.Add<Delegates.get_SettingsRoot_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_SettingsRoot", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_SettingsRoot_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCamera), "get_SettingsRoot", true), value);
        }

        public static event On.tk2dCamera.hook_OrthoOffCenter OrthoOffCenter
        {
            add => On.tk2dCamera.OrthoOffCenter += value;
            remove => On.tk2dCamera.OrthoOffCenter -= value;
        }

        public static event On.tk2dCamera.hook_GetScaleForOverride GetScaleForOverride
        {
            add => On.tk2dCamera.GetScaleForOverride += value;
            remove => On.tk2dCamera.GetScaleForOverride -= value;
        }

        public static event On.tk2dCamera.hook_GetOffsetForOverride GetOffsetForOverride
        {
            add => On.tk2dCamera.GetOffsetForOverride += value;
            remove => On.tk2dCamera.GetOffsetForOverride -= value;
        }

        public static event On.tk2dCamera.hook_GetProjectionMatrixForOverride GetProjectionMatrixForOverride
        {
            add => On.tk2dCamera.GetProjectionMatrixForOverride += value;
            remove => On.tk2dCamera.GetProjectionMatrixForOverride -= value;
        }

        public static event On.tk2dCamera.hook_GetScreenPixelDimensions GetScreenPixelDimensions
        {
            add => On.tk2dCamera.GetScreenPixelDimensions += value;
            remove => On.tk2dCamera.GetScreenPixelDimensions -= value;
        }

        public static event On.tk2dCamera.hook_Upgrade Upgrade
        {
            add => On.tk2dCamera.Upgrade += value;
            remove => On.tk2dCamera.Upgrade -= value;
        }

        public static event On.tk2dCamera.hook_UpdateCameraMatrix UpdateCameraMatrix
        {
            add => On.tk2dCamera.UpdateCameraMatrix += value;
            remove => On.tk2dCamera.UpdateCameraMatrix -= value;
        }
    }
}