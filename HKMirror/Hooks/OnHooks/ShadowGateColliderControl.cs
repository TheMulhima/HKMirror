namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ShadowGateColliderControl class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnShadowGateColliderControl
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.ShadowGateColliderControl.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.ShadowGateColliderControl.orig_Awake orig, ShadowGateColliderControl self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.ShadowGateColliderControl.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.ShadowGateColliderControl.orig_Start orig, ShadowGateColliderControl self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.ShadowGateColliderControl.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_NormalArgs _afterOnDestroy;

        private static void OnDestroy(On.ShadowGateColliderControl.orig_OnDestroy orig, ShadowGateColliderControl self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            _beforeOnDestroy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null) _afterOnDestroy.Invoke(@params);
        }

        internal static void HookSetup()
        {
            if (!HookedList.Contains("Setup"))
            {
                HookedList.Add("Setup");
                On.ShadowGateColliderControl.Setup += Setup;
            }
        }

        internal static event Delegates.Setup_BeforeArgs _beforeSetup;
        internal static event Delegates.Setup_NormalArgs _afterSetup;

        private static void Setup(On.ShadowGateColliderControl.orig_Setup orig, ShadowGateColliderControl self)
        {
            Delegates.Params_Setup @params = new()
            {
                self = self
            };
            _beforeSetup?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetup != null) _afterSetup.Invoke(@params);
        }

        internal static void HookFixedUpdate()
        {
            if (!HookedList.Contains("FixedUpdate"))
            {
                HookedList.Add("FixedUpdate");
                On.ShadowGateColliderControl.FixedUpdate += FixedUpdate;
            }
        }

        internal static event Delegates.FixedUpdate_BeforeArgs _beforeFixedUpdate;
        internal static event Delegates.FixedUpdate_NormalArgs _afterFixedUpdate;

        private static void FixedUpdate(On.ShadowGateColliderControl.orig_FixedUpdate orig,
            ShadowGateColliderControl self)
        {
            Delegates.Params_FixedUpdate @params = new()
            {
                self = self
            };
            _beforeFixedUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFixedUpdate != null) _afterFixedUpdate.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void FixedUpdate_BeforeArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_NormalArgs(Params_FixedUpdate args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_NormalArgs(Params_OnDestroy args);

        public delegate void Setup_BeforeArgs(Params_Setup args);

        public delegate void Setup_NormalArgs(Params_Setup args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Awake
        {
            public ShadowGateColliderControl self;
        }

        public sealed class Params_Start
        {
            public ShadowGateColliderControl self;
        }

        public sealed class Params_OnDestroy
        {
            public ShadowGateColliderControl self;
        }

        public sealed class Params_Setup
        {
            public ShadowGateColliderControl self;
        }

        public sealed class Params_FixedUpdate
        {
            public ShadowGateColliderControl self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.Setup_BeforeArgs Setup
        {
            add
            {
                HookHandler._beforeSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._beforeSetup -= value;
        }

        public static event Delegates.FixedUpdate_BeforeArgs FixedUpdate
        {
            add
            {
                HookHandler._beforeFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._beforeFixedUpdate -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.Setup_NormalArgs Setup
        {
            add
            {
                HookHandler._afterSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._afterSetup -= value;
        }

        public static event Delegates.FixedUpdate_NormalArgs FixedUpdate
        {
            add
            {
                HookHandler._afterFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._afterFixedUpdate -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.ShadowGateColliderControl.hook_Awake Awake
        {
            add => On.ShadowGateColliderControl.Awake += value;
            remove => On.ShadowGateColliderControl.Awake -= value;
        }

        public static event On.ShadowGateColliderControl.hook_Start Start
        {
            add => On.ShadowGateColliderControl.Start += value;
            remove => On.ShadowGateColliderControl.Start -= value;
        }

        public static event On.ShadowGateColliderControl.hook_OnDestroy OnDestroy
        {
            add => On.ShadowGateColliderControl.OnDestroy += value;
            remove => On.ShadowGateColliderControl.OnDestroy -= value;
        }

        public static event On.ShadowGateColliderControl.hook_Setup Setup
        {
            add => On.ShadowGateColliderControl.Setup += value;
            remove => On.ShadowGateColliderControl.Setup -= value;
        }

        public static event On.ShadowGateColliderControl.hook_FixedUpdate FixedUpdate
        {
            add => On.ShadowGateColliderControl.FixedUpdate += value;
            remove => On.ShadowGateColliderControl.FixedUpdate -= value;
        }
    }
}