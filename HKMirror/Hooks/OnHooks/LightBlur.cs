using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for LightBlur class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnLightBlur
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_PassGroupCount()
{
if (!HookedList.Contains("get_PassGroupCount"))
{
HookedList.Add("get_PassGroupCount");
new Hook(ReflectionHelper.GetMethodInfo(typeof(LightBlur), "get_PassGroupCount", true), get_PassGroupCount);

}
}
internal static event Delegates.get_PassGroupCount_BeforeArgs _beforeget_PassGroupCount;
internal static event Delegates.get_PassGroupCount_AfterArgs _afterget_PassGroupCount;
private static int get_PassGroupCount(Func<LightBlur, int> orig, LightBlur self)
{
Delegates.Params_get_PassGroupCount @params = new() 
{
self = self
};
if (_beforeget_PassGroupCount != null)
{
foreach (Delegates.get_PassGroupCount_BeforeArgs toInvoke in _beforeget_PassGroupCount.GetInvocationList())
{
try
{
_beforeget_PassGroupCount?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_PassGroupCount != null)
{
foreach (Delegates.get_PassGroupCount_AfterArgs toInvoke in _afterget_PassGroupCount.GetInvocationList())
{
try
{
retVal = _afterget_PassGroupCount.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_PassGroupCount()
{
if (!HookedList.Contains("set_PassGroupCount"))
{
HookedList.Add("set_PassGroupCount");
new Hook(ReflectionHelper.GetMethodInfo(typeof(LightBlur), "set_PassGroupCount", true), set_PassGroupCount);

}
}
internal static event Delegates.set_PassGroupCount_BeforeArgs _beforeset_PassGroupCount;
internal static event Delegates.set_PassGroupCount_AfterArgs _afterset_PassGroupCount;
private static void set_PassGroupCount(Action<LightBlur,  int> orig, LightBlur self,  int value)
{
Delegates.Params_set_PassGroupCount @params = new() 
{
self = self
, value = value
};
if (_beforeset_PassGroupCount != null)
{
foreach (Delegates.set_PassGroupCount_BeforeArgs toInvoke in _beforeset_PassGroupCount.GetInvocationList())
{
try
{
_beforeset_PassGroupCount?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_PassGroupCount != null)
{
foreach (Delegates.set_PassGroupCount_AfterArgs toInvoke in _afterset_PassGroupCount.GetInvocationList())
{
try
{
_afterset_PassGroupCount.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_BlurPassCount()
{
if (!HookedList.Contains("get_BlurPassCount"))
{
HookedList.Add("get_BlurPassCount");
new Hook(ReflectionHelper.GetMethodInfo(typeof(LightBlur), "get_BlurPassCount", true), get_BlurPassCount);

}
}
internal static event Delegates.get_BlurPassCount_BeforeArgs _beforeget_BlurPassCount;
internal static event Delegates.get_BlurPassCount_AfterArgs _afterget_BlurPassCount;
private static int get_BlurPassCount(Func<LightBlur, int> orig, LightBlur self)
{
Delegates.Params_get_BlurPassCount @params = new() 
{
self = self
};
if (_beforeget_BlurPassCount != null)
{
foreach (Delegates.get_BlurPassCount_BeforeArgs toInvoke in _beforeget_BlurPassCount.GetInvocationList())
{
try
{
_beforeget_BlurPassCount?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_BlurPassCount != null)
{
foreach (Delegates.get_BlurPassCount_AfterArgs toInvoke in _afterget_BlurPassCount.GetInvocationList())
{
try
{
retVal = _afterget_BlurPassCount.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.LightBlur.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.LightBlur.orig_Awake orig,LightBlur self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDestroy()
{
if (!HookedList.Contains("OnDestroy"))
{
HookedList.Add("OnDestroy");
On.LightBlur.OnDestroy += OnDestroy;

}
}
internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
internal static event Delegates.OnDestroy_AfterArgs _afterOnDestroy;
private static void OnDestroy(On.LightBlur.orig_OnDestroy orig,LightBlur self)
{
Delegates.Params_OnDestroy @params = new() 
{
self = self
};
if (_beforeOnDestroy != null)
{
foreach (Delegates.OnDestroy_BeforeArgs toInvoke in _beforeOnDestroy.GetInvocationList())
{
try
{
_beforeOnDestroy?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDestroy != null)
{
foreach (Delegates.OnDestroy_AfterArgs toInvoke in _afterOnDestroy.GetInvocationList())
{
try
{
_afterOnDestroy.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCheckResources()
{
if (!HookedList.Contains("CheckResources"))
{
HookedList.Add("CheckResources");
On.LightBlur.CheckResources += CheckResources;

}
}
internal static event Delegates.CheckResources_BeforeArgs _beforeCheckResources;
internal static event Delegates.CheckResources_AfterArgs _afterCheckResources;
private static bool CheckResources(On.LightBlur.orig_CheckResources orig,LightBlur self)
{
Delegates.Params_CheckResources @params = new() 
{
self = self
};
if (_beforeCheckResources != null)
{
foreach (Delegates.CheckResources_BeforeArgs toInvoke in _beforeCheckResources.GetInvocationList())
{
try
{
_beforeCheckResources?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterCheckResources != null)
{
foreach (Delegates.CheckResources_AfterArgs toInvoke in _afterCheckResources.GetInvocationList())
{
try
{
retVal = _afterCheckResources.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookOnRenderImage()
{
if (!HookedList.Contains("OnRenderImage"))
{
HookedList.Add("OnRenderImage");
On.LightBlur.OnRenderImage += OnRenderImage;

}
}
internal static event Delegates.OnRenderImage_BeforeArgs _beforeOnRenderImage;
internal static event Delegates.OnRenderImage_AfterArgs _afterOnRenderImage;
private static void OnRenderImage(On.LightBlur.orig_OnRenderImage orig,LightBlur self,  UnityEngine.RenderTexture source,  UnityEngine.RenderTexture destination)
{
Delegates.Params_OnRenderImage @params = new() 
{
self = self
, source = source
, destination = destination
};
if (_beforeOnRenderImage != null)
{
foreach (Delegates.OnRenderImage_BeforeArgs toInvoke in _beforeOnRenderImage.GetInvocationList())
{
try
{
_beforeOnRenderImage?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
source = @params.source;
destination = @params.destination;
orig(self, source, destination);
if (_afterOnRenderImage != null)
{
foreach (Delegates.OnRenderImage_AfterArgs toInvoke in _afterOnRenderImage.GetInvocationList())
{
try
{
_afterOnRenderImage.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_PassGroupCount
{
public LightBlur self;
}
public delegate void get_PassGroupCount_BeforeArgs(Params_get_PassGroupCount args);
public delegate int get_PassGroupCount_AfterArgs(Params_get_PassGroupCount args, int ret);
public delegate int get_PassGroupCount_WithArgs (Func<LightBlur, int> orig, LightBlur self);
public sealed class Params_set_PassGroupCount
{
public LightBlur self;
public int value;
}
public delegate void set_PassGroupCount_BeforeArgs(Params_set_PassGroupCount args);
public delegate void set_PassGroupCount_AfterArgs(Params_set_PassGroupCount args);
public delegate void set_PassGroupCount_WithArgs (Action<LightBlur,  int> orig, LightBlur self,  int value);
public sealed class Params_get_BlurPassCount
{
public LightBlur self;
}
public delegate void get_BlurPassCount_BeforeArgs(Params_get_BlurPassCount args);
public delegate int get_BlurPassCount_AfterArgs(Params_get_BlurPassCount args, int ret);
public delegate int get_BlurPassCount_WithArgs (Func<LightBlur, int> orig, LightBlur self);
public sealed class Params_Awake
{
public LightBlur self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<LightBlur> orig, LightBlur self);
public sealed class Params_OnDestroy
{
public LightBlur self;
}
public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);
public delegate void OnDestroy_AfterArgs(Params_OnDestroy args);
public delegate void OnDestroy_WithArgs (Action<LightBlur> orig, LightBlur self);
public sealed class Params_CheckResources
{
public LightBlur self;
}
public delegate void CheckResources_BeforeArgs(Params_CheckResources args);
public delegate bool CheckResources_AfterArgs(Params_CheckResources args, bool ret);
public delegate bool CheckResources_WithArgs (Func<LightBlur, bool> orig, LightBlur self);
public sealed class Params_OnRenderImage
{
public LightBlur self;
public UnityEngine.RenderTexture source;
public UnityEngine.RenderTexture destination;
}
public delegate void OnRenderImage_BeforeArgs(Params_OnRenderImage args);
public delegate void OnRenderImage_AfterArgs(Params_OnRenderImage args);
public delegate void OnRenderImage_WithArgs (Action<LightBlur,  UnityEngine.RenderTexture,  UnityEngine.RenderTexture> orig, LightBlur self,  UnityEngine.RenderTexture source,  UnityEngine.RenderTexture destination);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_PassGroupCount_BeforeArgs get_PassGroupCount
{
add
{

HookHandler._beforeget_PassGroupCount += value;
HookHandler.Hookget_PassGroupCount();
}
remove => HookHandler._beforeget_PassGroupCount -= value;
}
public static event Delegates.set_PassGroupCount_BeforeArgs set_PassGroupCount
{
add
{

HookHandler._beforeset_PassGroupCount += value;
HookHandler.Hookset_PassGroupCount();
}
remove => HookHandler._beforeset_PassGroupCount -= value;
}
public static event Delegates.get_BlurPassCount_BeforeArgs get_BlurPassCount
{
add
{

HookHandler._beforeget_BlurPassCount += value;
HookHandler.Hookget_BlurPassCount();
}
remove => HookHandler._beforeget_BlurPassCount -= value;
}
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.OnDestroy_BeforeArgs OnDestroy
{
add
{

HookHandler._beforeOnDestroy += value;
HookHandler.HookOnDestroy();
}
remove => HookHandler._beforeOnDestroy -= value;
}
public static event Delegates.CheckResources_BeforeArgs CheckResources
{
add
{

HookHandler._beforeCheckResources += value;
HookHandler.HookCheckResources();
}
remove => HookHandler._beforeCheckResources -= value;
}
public static event Delegates.OnRenderImage_BeforeArgs OnRenderImage
{
add
{

HookHandler._beforeOnRenderImage += value;
HookHandler.HookOnRenderImage();
}
remove => HookHandler._beforeOnRenderImage -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_PassGroupCount_AfterArgs get_PassGroupCount
{
add
{

HookHandler._afterget_PassGroupCount += value;
HookHandler.Hookget_PassGroupCount();
}
remove => HookHandler._afterget_PassGroupCount -= value;
}
public static event Delegates.set_PassGroupCount_AfterArgs set_PassGroupCount
{
add
{

HookHandler._afterset_PassGroupCount += value;
HookHandler.Hookset_PassGroupCount();
}
remove => HookHandler._afterset_PassGroupCount -= value;
}
public static event Delegates.get_BlurPassCount_AfterArgs get_BlurPassCount
{
add
{

HookHandler._afterget_BlurPassCount += value;
HookHandler.Hookget_BlurPassCount();
}
remove => HookHandler._afterget_BlurPassCount -= value;
}
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.OnDestroy_AfterArgs OnDestroy
{
add
{

HookHandler._afterOnDestroy += value;
HookHandler.HookOnDestroy();
}
remove => HookHandler._afterOnDestroy -= value;
}
public static event Delegates.CheckResources_AfterArgs CheckResources
{
add
{

HookHandler._afterCheckResources += value;
HookHandler.HookCheckResources();
}
remove => HookHandler._afterCheckResources -= value;
}
public static event Delegates.OnRenderImage_AfterArgs OnRenderImage
{
add
{

HookHandler._afterOnRenderImage += value;
HookHandler.HookOnRenderImage();
}
remove => HookHandler._afterOnRenderImage -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_PassGroupCount_WithArgs get_PassGroupCount
{
add => HookEndpointManager.Add<Delegates.get_PassGroupCount_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(LightBlur), "get_PassGroupCount", true), value);
remove => HookEndpointManager.Remove<Delegates.get_PassGroupCount_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(LightBlur), "get_PassGroupCount", true), value);
}
public static event Delegates.set_PassGroupCount_WithArgs set_PassGroupCount
{
add => HookEndpointManager.Add<Delegates.set_PassGroupCount_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(LightBlur), "set_PassGroupCount", true), value);
remove => HookEndpointManager.Remove<Delegates.set_PassGroupCount_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(LightBlur), "set_PassGroupCount", true), value);
}
public static event Delegates.get_BlurPassCount_WithArgs get_BlurPassCount
{
add => HookEndpointManager.Add<Delegates.get_BlurPassCount_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(LightBlur), "get_BlurPassCount", true), value);
remove => HookEndpointManager.Remove<Delegates.get_BlurPassCount_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(LightBlur), "get_BlurPassCount", true), value);
}
public static event On.LightBlur.hook_Awake Awake
{
add => On.LightBlur.Awake += value;
remove => On.LightBlur.Awake -= value;
}
public static event On.LightBlur.hook_OnDestroy OnDestroy
{
add => On.LightBlur.OnDestroy += value;
remove => On.LightBlur.OnDestroy -= value;
}
public static event On.LightBlur.hook_CheckResources CheckResources
{
add => On.LightBlur.CheckResources += value;
remove => On.LightBlur.CheckResources -= value;
}
public static event On.LightBlur.hook_OnRenderImage OnRenderImage
{
add => On.LightBlur.OnRenderImage += value;
remove => On.LightBlur.OnRenderImage -= value;
}
}

}
