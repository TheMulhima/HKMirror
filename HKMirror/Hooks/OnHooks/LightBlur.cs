using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for LightBlur class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnLightBlur
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_PassGroupCount()
        {
            if (!HookedList.Contains("get_PassGroupCount"))
            {
                HookedList.Add("get_PassGroupCount");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(LightBlur), "get_PassGroupCount"), get_PassGroupCount);
            }
        }

        internal static event Delegates.get_PassGroupCount_BeforeArgs _beforeget_PassGroupCount;
        internal static event Delegates.get_PassGroupCount_NormalArgs _afterget_PassGroupCount;

        private static int get_PassGroupCount(Func<LightBlur, int> orig, LightBlur self)
        {
            Delegates.Params_get_PassGroupCount @params = new()
            {
                self = self
            };
            _beforeget_PassGroupCount?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_PassGroupCount != null) retVal = _afterget_PassGroupCount.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_PassGroupCount()
        {
            if (!HookedList.Contains("set_PassGroupCount"))
            {
                HookedList.Add("set_PassGroupCount");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(LightBlur), "set_PassGroupCount"), set_PassGroupCount);
            }
        }

        internal static event Delegates.set_PassGroupCount_BeforeArgs _beforeset_PassGroupCount;
        internal static event Delegates.set_PassGroupCount_NormalArgs _afterset_PassGroupCount;

        private static void set_PassGroupCount(Action<LightBlur, int> orig, LightBlur self, int value)
        {
            Delegates.Params_set_PassGroupCount @params = new()
            {
                self = self, value = value
            };
            _beforeset_PassGroupCount?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_PassGroupCount != null) _afterset_PassGroupCount.Invoke(@params);
        }

        internal static void Hookget_BlurPassCount()
        {
            if (!HookedList.Contains("get_BlurPassCount"))
            {
                HookedList.Add("get_BlurPassCount");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(LightBlur), "get_BlurPassCount"), get_BlurPassCount);
            }
        }

        internal static event Delegates.get_BlurPassCount_BeforeArgs _beforeget_BlurPassCount;
        internal static event Delegates.get_BlurPassCount_NormalArgs _afterget_BlurPassCount;

        private static int get_BlurPassCount(Func<LightBlur, int> orig, LightBlur self)
        {
            Delegates.Params_get_BlurPassCount @params = new()
            {
                self = self
            };
            _beforeget_BlurPassCount?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_BlurPassCount != null) retVal = _afterget_BlurPassCount.Invoke(@params);
            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.LightBlur.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.LightBlur.orig_Awake orig, LightBlur self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.LightBlur.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_NormalArgs _afterOnDestroy;

        private static void OnDestroy(On.LightBlur.orig_OnDestroy orig, LightBlur self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            _beforeOnDestroy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null) _afterOnDestroy.Invoke(@params);
        }

        internal static void HookCheckResources()
        {
            if (!HookedList.Contains("CheckResources"))
            {
                HookedList.Add("CheckResources");
                On.LightBlur.CheckResources += CheckResources;
            }
        }

        internal static event Delegates.CheckResources_BeforeArgs _beforeCheckResources;
        internal static event Delegates.CheckResources_NormalArgs _afterCheckResources;

        private static bool CheckResources(On.LightBlur.orig_CheckResources orig, LightBlur self)
        {
            Delegates.Params_CheckResources @params = new()
            {
                self = self
            };
            _beforeCheckResources?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCheckResources != null) retVal = _afterCheckResources.Invoke(@params);
            return retVal;
        }

        internal static void HookOnRenderImage()
        {
            if (!HookedList.Contains("OnRenderImage"))
            {
                HookedList.Add("OnRenderImage");
                On.LightBlur.OnRenderImage += OnRenderImage;
            }
        }

        internal static event Delegates.OnRenderImage_BeforeArgs _beforeOnRenderImage;
        internal static event Delegates.OnRenderImage_NormalArgs _afterOnRenderImage;

        private static void OnRenderImage(On.LightBlur.orig_OnRenderImage orig, LightBlur self, RenderTexture source,
            RenderTexture destination)
        {
            Delegates.Params_OnRenderImage @params = new()
            {
                self = self, source = source, destination = destination
            };
            _beforeOnRenderImage?.Invoke(@params);
            self = @params.self;
            source = @params.source;
            destination = @params.destination;
            orig(self, source, destination);
            if (_afterOnRenderImage != null) _afterOnRenderImage.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void CheckResources_BeforeArgs(Params_CheckResources args);

        public delegate bool CheckResources_NormalArgs(Params_CheckResources args);

        public delegate void get_BlurPassCount_BeforeArgs(Params_get_BlurPassCount args);

        public delegate int get_BlurPassCount_NormalArgs(Params_get_BlurPassCount args);

        public delegate void get_PassGroupCount_BeforeArgs(Params_get_PassGroupCount args);

        public delegate int get_PassGroupCount_NormalArgs(Params_get_PassGroupCount args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_NormalArgs(Params_OnDestroy args);

        public delegate void OnRenderImage_BeforeArgs(Params_OnRenderImage args);

        public delegate void OnRenderImage_NormalArgs(Params_OnRenderImage args);

        public delegate void set_PassGroupCount_BeforeArgs(Params_set_PassGroupCount args);

        public delegate void set_PassGroupCount_NormalArgs(Params_set_PassGroupCount args);

        public sealed class Params_get_PassGroupCount
        {
            public LightBlur self;
        }

        public sealed class Params_set_PassGroupCount
        {
            public LightBlur self;
            public int value;
        }

        public sealed class Params_get_BlurPassCount
        {
            public LightBlur self;
        }

        public sealed class Params_Awake
        {
            public LightBlur self;
        }

        public sealed class Params_OnDestroy
        {
            public LightBlur self;
        }

        public sealed class Params_CheckResources
        {
            public LightBlur self;
        }

        public sealed class Params_OnRenderImage
        {
            public RenderTexture destination;
            public LightBlur self;
            public RenderTexture source;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_PassGroupCount_BeforeArgs get_PassGroupCount
        {
            add
            {
                HookHandler._beforeget_PassGroupCount += value;
                HookHandler.Hookget_PassGroupCount();
            }
            remove => HookHandler._beforeget_PassGroupCount -= value;
        }

        public static event Delegates.set_PassGroupCount_BeforeArgs set_PassGroupCount
        {
            add
            {
                HookHandler._beforeset_PassGroupCount += value;
                HookHandler.Hookset_PassGroupCount();
            }
            remove => HookHandler._beforeset_PassGroupCount -= value;
        }

        public static event Delegates.get_BlurPassCount_BeforeArgs get_BlurPassCount
        {
            add
            {
                HookHandler._beforeget_BlurPassCount += value;
                HookHandler.Hookget_BlurPassCount();
            }
            remove => HookHandler._beforeget_BlurPassCount -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.CheckResources_BeforeArgs CheckResources
        {
            add
            {
                HookHandler._beforeCheckResources += value;
                HookHandler.HookCheckResources();
            }
            remove => HookHandler._beforeCheckResources -= value;
        }

        public static event Delegates.OnRenderImage_BeforeArgs OnRenderImage
        {
            add
            {
                HookHandler._beforeOnRenderImage += value;
                HookHandler.HookOnRenderImage();
            }
            remove => HookHandler._beforeOnRenderImage -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_PassGroupCount_NormalArgs get_PassGroupCount
        {
            add
            {
                HookHandler._afterget_PassGroupCount += value;
                HookHandler.Hookget_PassGroupCount();
            }
            remove => HookHandler._afterget_PassGroupCount -= value;
        }

        public static event Delegates.set_PassGroupCount_NormalArgs set_PassGroupCount
        {
            add
            {
                HookHandler._afterset_PassGroupCount += value;
                HookHandler.Hookset_PassGroupCount();
            }
            remove => HookHandler._afterset_PassGroupCount -= value;
        }

        public static event Delegates.get_BlurPassCount_NormalArgs get_BlurPassCount
        {
            add
            {
                HookHandler._afterget_BlurPassCount += value;
                HookHandler.Hookget_BlurPassCount();
            }
            remove => HookHandler._afterget_BlurPassCount -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.CheckResources_NormalArgs CheckResources
        {
            add
            {
                HookHandler._afterCheckResources += value;
                HookHandler.HookCheckResources();
            }
            remove => HookHandler._afterCheckResources -= value;
        }

        public static event Delegates.OnRenderImage_NormalArgs OnRenderImage
        {
            add
            {
                HookHandler._afterOnRenderImage += value;
                HookHandler.HookOnRenderImage();
            }
            remove => HookHandler._afterOnRenderImage -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_PassGroupCount_NormalArgs get_PassGroupCount
        {
            add => HookEndpointManager.Add<Delegates.get_PassGroupCount_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LightBlur), "get_PassGroupCount"), value);
            remove => HookEndpointManager.Remove<Delegates.get_PassGroupCount_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LightBlur), "get_PassGroupCount"), value);
        }

        public static event Delegates.set_PassGroupCount_NormalArgs set_PassGroupCount
        {
            add => HookEndpointManager.Add<Delegates.set_PassGroupCount_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LightBlur), "set_PassGroupCount"), value);
            remove => HookEndpointManager.Remove<Delegates.set_PassGroupCount_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LightBlur), "set_PassGroupCount"), value);
        }

        public static event Delegates.get_BlurPassCount_NormalArgs get_BlurPassCount
        {
            add => HookEndpointManager.Add<Delegates.get_BlurPassCount_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LightBlur), "get_BlurPassCount"), value);
            remove => HookEndpointManager.Remove<Delegates.get_BlurPassCount_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LightBlur), "get_BlurPassCount"), value);
        }

        public static event On.LightBlur.hook_Awake Awake
        {
            add => On.LightBlur.Awake += value;
            remove => On.LightBlur.Awake -= value;
        }

        public static event On.LightBlur.hook_OnDestroy OnDestroy
        {
            add => On.LightBlur.OnDestroy += value;
            remove => On.LightBlur.OnDestroy -= value;
        }

        public static event On.LightBlur.hook_CheckResources CheckResources
        {
            add => On.LightBlur.CheckResources += value;
            remove => On.LightBlur.CheckResources -= value;
        }

        public static event On.LightBlur.hook_OnRenderImage OnRenderImage
        {
            add => On.LightBlur.OnRenderImage += value;
            remove => On.LightBlur.OnRenderImage -= value;
        }
    }
}