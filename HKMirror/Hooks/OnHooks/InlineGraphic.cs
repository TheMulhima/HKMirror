using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for InlineGraphic class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnInlineGraphic
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_mainTexture()
        {
            if (!HookedList.Contains("get_mainTexture"))
            {
                HookedList.Add("get_mainTexture");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "get_mainTexture", true),
                    get_mainTexture);
            }
        }

        internal static event Delegates.get_mainTexture_BeforeArgs _beforeget_mainTexture;
        internal static event Delegates.get_mainTexture_AfterArgs _afterget_mainTexture;

        private static UnityEngine.Texture get_mainTexture(Func<TMPro.InlineGraphic, UnityEngine.Texture> orig,
            TMPro.InlineGraphic self)
        {
            Delegates.Params_get_mainTexture @params = new()
            {
                self = self
            };
            if (_beforeget_mainTexture != null)
            {
                foreach (Delegates.get_mainTexture_BeforeArgs toInvoke in _beforeget_mainTexture.GetInvocationList())
                {
                    try
                    {
                        _beforeget_mainTexture?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_mainTexture != null)
            {
                foreach (Delegates.get_mainTexture_AfterArgs toInvoke in _afterget_mainTexture.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_mainTexture.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "Awake", true), Awake);
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(Action<TMPro.InlineGraphic> orig, TMPro.InlineGraphic self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
            {
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                {
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
            {
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                {
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "OnEnable", true), OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(Action<TMPro.InlineGraphic> orig, TMPro.InlineGraphic self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
            {
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
            {
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "OnDisable", true), OnDisable);
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(Action<TMPro.InlineGraphic> orig, TMPro.InlineGraphic self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
            {
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
            {
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                {
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnTransformParentChanged()
        {
            if (!HookedList.Contains("OnTransformParentChanged"))
            {
                HookedList.Add("OnTransformParentChanged");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "OnTransformParentChanged", true),
                    OnTransformParentChanged);
            }
        }

        internal static event Delegates.OnTransformParentChanged_BeforeArgs _beforeOnTransformParentChanged;
        internal static event Delegates.OnTransformParentChanged_AfterArgs _afterOnTransformParentChanged;

        private static void OnTransformParentChanged(Action<TMPro.InlineGraphic> orig, TMPro.InlineGraphic self)
        {
            Delegates.Params_OnTransformParentChanged @params = new()
            {
                self = self
            };
            if (_beforeOnTransformParentChanged != null)
            {
                foreach (Delegates.OnTransformParentChanged_BeforeArgs toInvoke in _beforeOnTransformParentChanged
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeOnTransformParentChanged?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnTransformParentChanged != null)
            {
                foreach (Delegates.OnTransformParentChanged_AfterArgs toInvoke in _afterOnTransformParentChanged
                             .GetInvocationList())
                {
                    try
                    {
                        _afterOnTransformParentChanged.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnRectTransformDimensionsChange()
        {
            if (!HookedList.Contains("OnRectTransformDimensionsChange"))
            {
                HookedList.Add("OnRectTransformDimensionsChange");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "OnRectTransformDimensionsChange",
                        true), OnRectTransformDimensionsChange);
            }
        }

        internal static event Delegates.OnRectTransformDimensionsChange_BeforeArgs
            _beforeOnRectTransformDimensionsChange;

        internal static event Delegates.OnRectTransformDimensionsChange_AfterArgs _afterOnRectTransformDimensionsChange;

        private static void OnRectTransformDimensionsChange(Action<TMPro.InlineGraphic> orig, TMPro.InlineGraphic self)
        {
            Delegates.Params_OnRectTransformDimensionsChange @params = new()
            {
                self = self
            };
            if (_beforeOnRectTransformDimensionsChange != null)
            {
                foreach (Delegates.OnRectTransformDimensionsChange_BeforeArgs toInvoke in
                         _beforeOnRectTransformDimensionsChange.GetInvocationList())
                {
                    try
                    {
                        _beforeOnRectTransformDimensionsChange?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnRectTransformDimensionsChange != null)
            {
                foreach (Delegates.OnRectTransformDimensionsChange_AfterArgs toInvoke in
                         _afterOnRectTransformDimensionsChange.GetInvocationList())
                {
                    try
                    {
                        _afterOnRectTransformDimensionsChange.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateMaterial()
        {
            if (!HookedList.Contains("UpdateMaterial"))
            {
                HookedList.Add("UpdateMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "UpdateMaterial", true),
                    UpdateMaterial);
            }
        }

        internal static event Delegates.UpdateMaterial_BeforeArgs _beforeUpdateMaterial;
        internal static event Delegates.UpdateMaterial_AfterArgs _afterUpdateMaterial;

        private static void UpdateMaterial(Action<TMPro.InlineGraphic> orig, TMPro.InlineGraphic self)
        {
            Delegates.Params_UpdateMaterial @params = new()
            {
                self = self
            };
            if (_beforeUpdateMaterial != null)
            {
                foreach (Delegates.UpdateMaterial_BeforeArgs toInvoke in _beforeUpdateMaterial.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdateMaterial != null)
            {
                foreach (Delegates.UpdateMaterial_AfterArgs toInvoke in _afterUpdateMaterial.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateMaterial.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateGeometry()
        {
            if (!HookedList.Contains("UpdateGeometry"))
            {
                HookedList.Add("UpdateGeometry");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "UpdateGeometry", true),
                    UpdateGeometry);
            }
        }

        internal static event Delegates.UpdateGeometry_BeforeArgs _beforeUpdateGeometry;
        internal static event Delegates.UpdateGeometry_AfterArgs _afterUpdateGeometry;

        private static void UpdateGeometry(Action<TMPro.InlineGraphic> orig, TMPro.InlineGraphic self)
        {
            Delegates.Params_UpdateGeometry @params = new()
            {
                self = self
            };
            if (_beforeUpdateGeometry != null)
            {
                foreach (Delegates.UpdateGeometry_BeforeArgs toInvoke in _beforeUpdateGeometry.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateGeometry?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdateGeometry != null)
            {
                foreach (Delegates.UpdateGeometry_AfterArgs toInvoke in _afterUpdateGeometry.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateGeometry.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_mainTexture
        {
            public TMPro.InlineGraphic self;
        }

        public delegate void get_mainTexture_BeforeArgs(Params_get_mainTexture args);

        public delegate UnityEngine.Texture get_mainTexture_AfterArgs(Params_get_mainTexture args,
            UnityEngine.Texture ret);

        public delegate UnityEngine.Texture get_mainTexture_WithArgs(
            Func<TMPro.InlineGraphic, UnityEngine.Texture> orig, TMPro.InlineGraphic self);

        public sealed class Params_Awake
        {
            public TMPro.InlineGraphic self;
        }

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<TMPro.InlineGraphic> orig, TMPro.InlineGraphic self);

        public sealed class Params_OnEnable
        {
            public TMPro.InlineGraphic self;
        }

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<TMPro.InlineGraphic> orig, TMPro.InlineGraphic self);

        public sealed class Params_OnDisable
        {
            public TMPro.InlineGraphic self;
        }

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<TMPro.InlineGraphic> orig, TMPro.InlineGraphic self);

        public sealed class Params_OnTransformParentChanged
        {
            public TMPro.InlineGraphic self;
        }

        public delegate void OnTransformParentChanged_BeforeArgs(Params_OnTransformParentChanged args);

        public delegate void OnTransformParentChanged_AfterArgs(Params_OnTransformParentChanged args);

        public delegate void OnTransformParentChanged_WithArgs(Action<TMPro.InlineGraphic> orig,
            TMPro.InlineGraphic self);

        public sealed class Params_OnRectTransformDimensionsChange
        {
            public TMPro.InlineGraphic self;
        }

        public delegate void OnRectTransformDimensionsChange_BeforeArgs(Params_OnRectTransformDimensionsChange args);

        public delegate void OnRectTransformDimensionsChange_AfterArgs(Params_OnRectTransformDimensionsChange args);

        public delegate void OnRectTransformDimensionsChange_WithArgs(Action<TMPro.InlineGraphic> orig,
            TMPro.InlineGraphic self);

        public sealed class Params_UpdateMaterial
        {
            public TMPro.InlineGraphic self;
        }

        public delegate void UpdateMaterial_BeforeArgs(Params_UpdateMaterial args);

        public delegate void UpdateMaterial_AfterArgs(Params_UpdateMaterial args);

        public delegate void UpdateMaterial_WithArgs(Action<TMPro.InlineGraphic> orig, TMPro.InlineGraphic self);

        public sealed class Params_UpdateGeometry
        {
            public TMPro.InlineGraphic self;
        }

        public delegate void UpdateGeometry_BeforeArgs(Params_UpdateGeometry args);

        public delegate void UpdateGeometry_AfterArgs(Params_UpdateGeometry args);

        public delegate void UpdateGeometry_WithArgs(Action<TMPro.InlineGraphic> orig, TMPro.InlineGraphic self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_mainTexture_BeforeArgs get_mainTexture
        {
            add
            {
                HookHandler._beforeget_mainTexture += value;
                HookHandler.Hookget_mainTexture();
            }
            remove => HookHandler._beforeget_mainTexture -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.OnTransformParentChanged_BeforeArgs OnTransformParentChanged
        {
            add
            {
                HookHandler._beforeOnTransformParentChanged += value;
                HookHandler.HookOnTransformParentChanged();
            }
            remove => HookHandler._beforeOnTransformParentChanged -= value;
        }

        public static event Delegates.OnRectTransformDimensionsChange_BeforeArgs OnRectTransformDimensionsChange
        {
            add
            {
                HookHandler._beforeOnRectTransformDimensionsChange += value;
                HookHandler.HookOnRectTransformDimensionsChange();
            }
            remove => HookHandler._beforeOnRectTransformDimensionsChange -= value;
        }

        public static event Delegates.UpdateMaterial_BeforeArgs UpdateMaterial
        {
            add
            {
                HookHandler._beforeUpdateMaterial += value;
                HookHandler.HookUpdateMaterial();
            }
            remove => HookHandler._beforeUpdateMaterial -= value;
        }

        public static event Delegates.UpdateGeometry_BeforeArgs UpdateGeometry
        {
            add
            {
                HookHandler._beforeUpdateGeometry += value;
                HookHandler.HookUpdateGeometry();
            }
            remove => HookHandler._beforeUpdateGeometry -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_mainTexture_AfterArgs get_mainTexture
        {
            add
            {
                HookHandler._afterget_mainTexture += value;
                HookHandler.Hookget_mainTexture();
            }
            remove => HookHandler._afterget_mainTexture -= value;
        }

        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.OnTransformParentChanged_AfterArgs OnTransformParentChanged
        {
            add
            {
                HookHandler._afterOnTransformParentChanged += value;
                HookHandler.HookOnTransformParentChanged();
            }
            remove => HookHandler._afterOnTransformParentChanged -= value;
        }

        public static event Delegates.OnRectTransformDimensionsChange_AfterArgs OnRectTransformDimensionsChange
        {
            add
            {
                HookHandler._afterOnRectTransformDimensionsChange += value;
                HookHandler.HookOnRectTransformDimensionsChange();
            }
            remove => HookHandler._afterOnRectTransformDimensionsChange -= value;
        }

        public static event Delegates.UpdateMaterial_AfterArgs UpdateMaterial
        {
            add
            {
                HookHandler._afterUpdateMaterial += value;
                HookHandler.HookUpdateMaterial();
            }
            remove => HookHandler._afterUpdateMaterial -= value;
        }

        public static event Delegates.UpdateGeometry_AfterArgs UpdateGeometry
        {
            add
            {
                HookHandler._afterUpdateGeometry += value;
                HookHandler.HookUpdateGeometry();
            }
            remove => HookHandler._afterUpdateGeometry -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_mainTexture_WithArgs get_mainTexture
        {
            add => HookEndpointManager.Add<Delegates.get_mainTexture_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "get_mainTexture", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_mainTexture_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "get_mainTexture", true), value);
        }

        public static event Delegates.Awake_WithArgs Awake
        {
            add => HookEndpointManager.Add<Delegates.Awake_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "Awake", true), value);
            remove => HookEndpointManager.Remove<Delegates.Awake_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "Awake", true), value);
        }

        public static event Delegates.OnEnable_WithArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "OnEnable", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "OnEnable", true), value);
        }

        public static event Delegates.OnDisable_WithArgs OnDisable
        {
            add => HookEndpointManager.Add<Delegates.OnDisable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "OnDisable", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnDisable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "OnDisable", true), value);
        }

        public static event Delegates.OnTransformParentChanged_WithArgs OnTransformParentChanged
        {
            add => HookEndpointManager.Add<Delegates.OnTransformParentChanged_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "OnTransformParentChanged", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnTransformParentChanged_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "OnTransformParentChanged", true), value);
        }

        public static event Delegates.OnRectTransformDimensionsChange_WithArgs OnRectTransformDimensionsChange
        {
            add => HookEndpointManager.Add<Delegates.OnRectTransformDimensionsChange_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "OnRectTransformDimensionsChange", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.OnRectTransformDimensionsChange_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "OnRectTransformDimensionsChange", true),
                value);
        }

        public static event Delegates.UpdateMaterial_WithArgs UpdateMaterial
        {
            add => HookEndpointManager.Add<Delegates.UpdateMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "UpdateMaterial", true), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "UpdateMaterial", true), value);
        }

        public static event Delegates.UpdateGeometry_WithArgs UpdateGeometry
        {
            add => HookEndpointManager.Add<Delegates.UpdateGeometry_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "UpdateGeometry", true), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateGeometry_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.InlineGraphic), "UpdateGeometry", true), value);
        }
    }
}