namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ExtraDamageable class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnExtraDamageable
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.ExtraDamageable.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.ExtraDamageable.orig_Awake orig, ExtraDamageable self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLateUpdate()
        {
            if (!HookedList.Contains("LateUpdate"))
            {
                HookedList.Add("LateUpdate");
                On.ExtraDamageable.LateUpdate += LateUpdate;
            }
        }

        internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
        internal static event Delegates.LateUpdate_AfterArgs _afterLateUpdate;

        private static void LateUpdate(On.ExtraDamageable.orig_LateUpdate orig, ExtraDamageable self)
        {
            Delegates.Params_LateUpdate @params = new()
            {
                self = self
            };
            if (_beforeLateUpdate != null)
                foreach (Delegates.LateUpdate_BeforeArgs toInvoke in _beforeLateUpdate.GetInvocationList())
                    try
                    {
                        _beforeLateUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterLateUpdate != null)
                foreach (Delegates.LateUpdate_AfterArgs toInvoke in _afterLateUpdate.GetInvocationList())
                    try
                    {
                        _afterLateUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRecieveExtraDamage()
        {
            if (!HookedList.Contains("RecieveExtraDamage"))
            {
                HookedList.Add("RecieveExtraDamage");
                On.ExtraDamageable.RecieveExtraDamage += RecieveExtraDamage;
            }
        }

        internal static event Delegates.RecieveExtraDamage_BeforeArgs _beforeRecieveExtraDamage;
        internal static event Delegates.RecieveExtraDamage_AfterArgs _afterRecieveExtraDamage;

        private static void RecieveExtraDamage(On.ExtraDamageable.orig_RecieveExtraDamage orig, ExtraDamageable self,
            ExtraDamageTypes extraDamageType)
        {
            Delegates.Params_RecieveExtraDamage @params = new()
            {
                self = self, extraDamageType = extraDamageType
            };
            if (_beforeRecieveExtraDamage != null)
                foreach (Delegates.RecieveExtraDamage_BeforeArgs toInvoke in
                         _beforeRecieveExtraDamage.GetInvocationList())
                    try
                    {
                        _beforeRecieveExtraDamage?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            extraDamageType = @params.extraDamageType;
            orig(self, extraDamageType);
            if (_afterRecieveExtraDamage != null)
                foreach (Delegates.RecieveExtraDamage_AfterArgs toInvoke in
                         _afterRecieveExtraDamage.GetInvocationList())
                    try
                    {
                        _afterRecieveExtraDamage.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetDamageOfType()
        {
            if (!HookedList.Contains("GetDamageOfType"))
            {
                HookedList.Add("GetDamageOfType");
                On.ExtraDamageable.GetDamageOfType += GetDamageOfType;
            }
        }

        internal static event Delegates.GetDamageOfType_BeforeArgs _beforeGetDamageOfType;
        internal static event Delegates.GetDamageOfType_AfterArgs _afterGetDamageOfType;

        private static int GetDamageOfType(On.ExtraDamageable.orig_GetDamageOfType orig,
            ExtraDamageTypes extraDamageTypes)
        {
            Delegates.Params_GetDamageOfType @params = new()
            {
                extraDamageTypes = extraDamageTypes
            };
            if (_beforeGetDamageOfType != null)
                foreach (Delegates.GetDamageOfType_BeforeArgs toInvoke in _beforeGetDamageOfType.GetInvocationList())
                    try
                    {
                        _beforeGetDamageOfType?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            extraDamageTypes = @params.extraDamageTypes;
            var retVal = orig(extraDamageTypes);
            if (_afterGetDamageOfType != null)
                foreach (Delegates.GetDamageOfType_AfterArgs toInvoke in _afterGetDamageOfType.GetInvocationList())
                    try
                    {
                        retVal = _afterGetDamageOfType.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookApplyExtraDamageToHealthManager()
        {
            if (!HookedList.Contains("ApplyExtraDamageToHealthManager"))
            {
                HookedList.Add("ApplyExtraDamageToHealthManager");
                On.ExtraDamageable.ApplyExtraDamageToHealthManager += ApplyExtraDamageToHealthManager;
            }
        }

        internal static event Delegates.ApplyExtraDamageToHealthManager_BeforeArgs
            _beforeApplyExtraDamageToHealthManager;

        internal static event Delegates.ApplyExtraDamageToHealthManager_AfterArgs _afterApplyExtraDamageToHealthManager;

        private static void ApplyExtraDamageToHealthManager(
            On.ExtraDamageable.orig_ApplyExtraDamageToHealthManager orig, ExtraDamageable self, int damageAmount)
        {
            Delegates.Params_ApplyExtraDamageToHealthManager @params = new()
            {
                self = self, damageAmount = damageAmount
            };
            if (_beforeApplyExtraDamageToHealthManager != null)
                foreach (Delegates.ApplyExtraDamageToHealthManager_BeforeArgs toInvoke in
                         _beforeApplyExtraDamageToHealthManager.GetInvocationList())
                    try
                    {
                        _beforeApplyExtraDamageToHealthManager?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            damageAmount = @params.damageAmount;
            orig(self, damageAmount);
            if (_afterApplyExtraDamageToHealthManager != null)
                foreach (Delegates.ApplyExtraDamageToHealthManager_AfterArgs toInvoke in
                         _afterApplyExtraDamageToHealthManager.GetInvocationList())
                    try
                    {
                        _afterApplyExtraDamageToHealthManager.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ApplyExtraDamageToHealthManager_AfterArgs(Params_ApplyExtraDamageToHealthManager args);

        public delegate void ApplyExtraDamageToHealthManager_BeforeArgs(Params_ApplyExtraDamageToHealthManager args);

        public delegate void ApplyExtraDamageToHealthManager_WithArgs(Action<ExtraDamageable, int> orig,
            ExtraDamageable self, int damageAmount);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<ExtraDamageable> orig, ExtraDamageable self);

        public delegate int GetDamageOfType_AfterArgs(Params_GetDamageOfType args, int ret);

        public delegate void GetDamageOfType_BeforeArgs(Params_GetDamageOfType args);

        public delegate int GetDamageOfType_WithArgs(Func<ExtraDamageTypes, int> orig,
            ExtraDamageTypes extraDamageTypes);

        public delegate void LateUpdate_AfterArgs(Params_LateUpdate args);

        public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);

        public delegate void LateUpdate_WithArgs(Action<ExtraDamageable> orig, ExtraDamageable self);

        public delegate void RecieveExtraDamage_AfterArgs(Params_RecieveExtraDamage args);

        public delegate void RecieveExtraDamage_BeforeArgs(Params_RecieveExtraDamage args);

        public delegate void RecieveExtraDamage_WithArgs(Action<ExtraDamageable, ExtraDamageTypes> orig,
            ExtraDamageable self, ExtraDamageTypes extraDamageType);

        public sealed class Params_Awake
        {
            public ExtraDamageable self;
        }

        public sealed class Params_LateUpdate
        {
            public ExtraDamageable self;
        }

        public sealed class Params_RecieveExtraDamage
        {
            public ExtraDamageTypes extraDamageType;
            public ExtraDamageable self;
        }

        public sealed class Params_GetDamageOfType
        {
            public ExtraDamageTypes extraDamageTypes;
        }

        public sealed class Params_ApplyExtraDamageToHealthManager
        {
            public int damageAmount;
            public ExtraDamageable self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.LateUpdate_BeforeArgs LateUpdate
        {
            add
            {
                HookHandler._beforeLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._beforeLateUpdate -= value;
        }

        public static event Delegates.RecieveExtraDamage_BeforeArgs RecieveExtraDamage
        {
            add
            {
                HookHandler._beforeRecieveExtraDamage += value;
                HookHandler.HookRecieveExtraDamage();
            }
            remove => HookHandler._beforeRecieveExtraDamage -= value;
        }

        public static event Delegates.GetDamageOfType_BeforeArgs GetDamageOfType
        {
            add
            {
                HookHandler._beforeGetDamageOfType += value;
                HookHandler.HookGetDamageOfType();
            }
            remove => HookHandler._beforeGetDamageOfType -= value;
        }

        public static event Delegates.ApplyExtraDamageToHealthManager_BeforeArgs ApplyExtraDamageToHealthManager
        {
            add
            {
                HookHandler._beforeApplyExtraDamageToHealthManager += value;
                HookHandler.HookApplyExtraDamageToHealthManager();
            }
            remove => HookHandler._beforeApplyExtraDamageToHealthManager -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.LateUpdate_AfterArgs LateUpdate
        {
            add
            {
                HookHandler._afterLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._afterLateUpdate -= value;
        }

        public static event Delegates.RecieveExtraDamage_AfterArgs RecieveExtraDamage
        {
            add
            {
                HookHandler._afterRecieveExtraDamage += value;
                HookHandler.HookRecieveExtraDamage();
            }
            remove => HookHandler._afterRecieveExtraDamage -= value;
        }

        public static event Delegates.GetDamageOfType_AfterArgs GetDamageOfType
        {
            add
            {
                HookHandler._afterGetDamageOfType += value;
                HookHandler.HookGetDamageOfType();
            }
            remove => HookHandler._afterGetDamageOfType -= value;
        }

        public static event Delegates.ApplyExtraDamageToHealthManager_AfterArgs ApplyExtraDamageToHealthManager
        {
            add
            {
                HookHandler._afterApplyExtraDamageToHealthManager += value;
                HookHandler.HookApplyExtraDamageToHealthManager();
            }
            remove => HookHandler._afterApplyExtraDamageToHealthManager -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.ExtraDamageable.hook_Awake Awake
        {
            add => On.ExtraDamageable.Awake += value;
            remove => On.ExtraDamageable.Awake -= value;
        }

        public static event On.ExtraDamageable.hook_LateUpdate LateUpdate
        {
            add => On.ExtraDamageable.LateUpdate += value;
            remove => On.ExtraDamageable.LateUpdate -= value;
        }

        public static event On.ExtraDamageable.hook_RecieveExtraDamage RecieveExtraDamage
        {
            add => On.ExtraDamageable.RecieveExtraDamage += value;
            remove => On.ExtraDamageable.RecieveExtraDamage -= value;
        }

        public static event On.ExtraDamageable.hook_GetDamageOfType GetDamageOfType
        {
            add => On.ExtraDamageable.GetDamageOfType += value;
            remove => On.ExtraDamageable.GetDamageOfType -= value;
        }

        public static event On.ExtraDamageable.hook_ApplyExtraDamageToHealthManager ApplyExtraDamageToHealthManager
        {
            add => On.ExtraDamageable.ApplyExtraDamageToHealthManager += value;
            remove => On.ExtraDamageable.ApplyExtraDamageToHealthManager -= value;
        }
    }
}