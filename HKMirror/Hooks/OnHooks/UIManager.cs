using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for UIManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnUIManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_IsFadingMenu()
        {
            if (!HookedList.Contains("get_IsFadingMenu"))
            {
                HookedList.Add("get_IsFadingMenu");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIManager), "get_IsFadingMenu"), get_IsFadingMenu);
            }
        }

        internal static event Delegates.get_IsFadingMenu_BeforeArgs _beforeget_IsFadingMenu;
        internal static event Delegates.get_IsFadingMenu_NormalArgs _afterget_IsFadingMenu;

        private static bool get_IsFadingMenu(Func<UIManager, bool> orig, UIManager self)
        {
            Delegates.Params_get_IsFadingMenu @params = new()
            {
                self = self
            };
            _beforeget_IsFadingMenu?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsFadingMenu != null) retVal = _afterget_IsFadingMenu.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_IsAnimatingMenus()
        {
            if (!HookedList.Contains("get_IsAnimatingMenus"))
            {
                HookedList.Add("get_IsAnimatingMenus");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIManager), "get_IsAnimatingMenus"),
                    get_IsAnimatingMenus);
            }
        }

        internal static event Delegates.get_IsAnimatingMenus_BeforeArgs _beforeget_IsAnimatingMenus;
        internal static event Delegates.get_IsAnimatingMenus_NormalArgs _afterget_IsAnimatingMenus;

        private static bool get_IsAnimatingMenus(Func<UIManager, bool> orig, UIManager self)
        {
            Delegates.Params_get_IsAnimatingMenus @params = new()
            {
                self = self
            };
            _beforeget_IsAnimatingMenus?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsAnimatingMenus != null) retVal = _afterget_IsAnimatingMenus.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_instance()
        {
            if (!HookedList.Contains("get_instance"))
            {
                HookedList.Add("get_instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIManager), "get_instance", false), get_instance);
            }
        }

        internal static event Delegates.get_instance_BeforeArgs _beforeget_instance;
        internal static event Delegates.get_instance_NormalArgs _afterget_instance;

        private static UIManager get_instance(Func<UIManager> orig)
        {
            _beforeget_instance?.Invoke();
            var retVal = orig();
            if (_afterget_instance != null) retVal = _afterget_instance.Invoke();
            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.UIManager.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.UIManager.orig_Awake orig, UIManager self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookSceneInit()
        {
            if (!HookedList.Contains("SceneInit"))
            {
                HookedList.Add("SceneInit");
                On.UIManager.SceneInit += SceneInit;
            }
        }

        internal static event Delegates.SceneInit_BeforeArgs _beforeSceneInit;
        internal static event Delegates.SceneInit_NormalArgs _afterSceneInit;

        private static void SceneInit(On.UIManager.orig_SceneInit orig, UIManager self)
        {
            Delegates.Params_SceneInit @params = new()
            {
                self = self
            };
            _beforeSceneInit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSceneInit != null) _afterSceneInit.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.UIManager.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.UIManager.orig_Start orig, UIManager self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookSetState()
        {
            if (!HookedList.Contains("SetState"))
            {
                HookedList.Add("SetState");
                On.UIManager.SetState += SetState;
            }
        }

        internal static event Delegates.SetState_BeforeArgs _beforeSetState;
        internal static event Delegates.SetState_NormalArgs _afterSetState;

        private static void SetState(On.UIManager.orig_SetState orig, UIManager self, UIState newState)
        {
            Delegates.Params_SetState @params = new()
            {
                self = self, newState = newState
            };
            _beforeSetState?.Invoke(@params);
            self = @params.self;
            newState = @params.newState;
            orig(self, newState);
            if (_afterSetState != null) _afterSetState.Invoke(@params);
        }

        internal static void HookSetMenuState()
        {
            if (!HookedList.Contains("SetMenuState"))
            {
                HookedList.Add("SetMenuState");
                On.UIManager.SetMenuState += SetMenuState;
            }
        }

        internal static event Delegates.SetMenuState_BeforeArgs _beforeSetMenuState;
        internal static event Delegates.SetMenuState_NormalArgs _afterSetMenuState;

        private static void SetMenuState(On.UIManager.orig_SetMenuState orig, UIManager self, MainMenuState newState)
        {
            Delegates.Params_SetMenuState @params = new()
            {
                self = self, newState = newState
            };
            _beforeSetMenuState?.Invoke(@params);
            self = @params.self;
            newState = @params.newState;
            orig(self, newState);
            if (_afterSetMenuState != null) _afterSetMenuState.Invoke(@params);
        }

        internal static void HookSetupRefs()
        {
            if (!HookedList.Contains("SetupRefs"))
            {
                HookedList.Add("SetupRefs");
                On.UIManager.SetupRefs += SetupRefs;
            }
        }

        internal static event Delegates.SetupRefs_BeforeArgs _beforeSetupRefs;
        internal static event Delegates.SetupRefs_NormalArgs _afterSetupRefs;

        private static void SetupRefs(On.UIManager.orig_SetupRefs orig, UIManager self)
        {
            Delegates.Params_SetupRefs @params = new()
            {
                self = self
            };
            _beforeSetupRefs?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetupRefs != null) _afterSetupRefs.Invoke(@params);
        }

        internal static void HookSetUIStartState()
        {
            if (!HookedList.Contains("SetUIStartState"))
            {
                HookedList.Add("SetUIStartState");
                On.UIManager.SetUIStartState += SetUIStartState;
            }
        }

        internal static event Delegates.SetUIStartState_BeforeArgs _beforeSetUIStartState;
        internal static event Delegates.SetUIStartState_NormalArgs _afterSetUIStartState;

        private static void SetUIStartState(On.UIManager.orig_SetUIStartState orig, UIManager self, GameState gameState)
        {
            Delegates.Params_SetUIStartState @params = new()
            {
                self = self, gameState = gameState
            };
            _beforeSetUIStartState?.Invoke(@params);
            self = @params.self;
            gameState = @params.gameState;
            orig(self, gameState);
            if (_afterSetUIStartState != null) _afterSetUIStartState.Invoke(@params);
        }

        internal static void HookShowMainMenuHome()
        {
            if (!HookedList.Contains("ShowMainMenuHome"))
            {
                HookedList.Add("ShowMainMenuHome");
                On.UIManager.ShowMainMenuHome += ShowMainMenuHome;
            }
        }

        internal static event Delegates.ShowMainMenuHome_BeforeArgs _beforeShowMainMenuHome;

        private static IEnumerator ShowMainMenuHome(On.UIManager.orig_ShowMainMenuHome orig, UIManager self)
        {
            Delegates.Params_ShowMainMenuHome @params = new()
            {
                self = self
            };
            _beforeShowMainMenuHome?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookStartMenuAnimationCoroutine()
        {
            if (!HookedList.Contains("StartMenuAnimationCoroutine"))
            {
                HookedList.Add("StartMenuAnimationCoroutine");
                On.UIManager.StartMenuAnimationCoroutine += StartMenuAnimationCoroutine;
            }
        }

        internal static event Delegates.StartMenuAnimationCoroutine_BeforeArgs _beforeStartMenuAnimationCoroutine;
        internal static event Delegates.StartMenuAnimationCoroutine_NormalArgs _afterStartMenuAnimationCoroutine;

        private static Coroutine StartMenuAnimationCoroutine(On.UIManager.orig_StartMenuAnimationCoroutine orig,
            UIManager self, IEnumerator routine)
        {
            Delegates.Params_StartMenuAnimationCoroutine @params = new()
            {
                self = self, routine = routine
            };
            _beforeStartMenuAnimationCoroutine?.Invoke(@params);
            self = @params.self;
            routine = @params.routine;
            var retVal = orig(self, routine);
            if (_afterStartMenuAnimationCoroutine != null) retVal = _afterStartMenuAnimationCoroutine.Invoke(@params);
            return retVal;
        }

        internal static void HookStartMenuAnimationCoroutineWorker()
        {
            if (!HookedList.Contains("StartMenuAnimationCoroutineWorker"))
            {
                HookedList.Add("StartMenuAnimationCoroutineWorker");
                On.UIManager.StartMenuAnimationCoroutineWorker += StartMenuAnimationCoroutineWorker;
            }
        }

        internal static event Delegates.StartMenuAnimationCoroutineWorker_BeforeArgs
            _beforeStartMenuAnimationCoroutineWorker;

        private static IEnumerator StartMenuAnimationCoroutineWorker(
            On.UIManager.orig_StartMenuAnimationCoroutineWorker orig, UIManager self, IEnumerator routine)
        {
            Delegates.Params_StartMenuAnimationCoroutineWorker @params = new()
            {
                self = self, routine = routine
            };
            _beforeStartMenuAnimationCoroutineWorker?.Invoke(@params);
            self = @params.self;
            routine = @params.routine;
            return orig(self, routine);
        }

        internal static void HookUIGoToOptionsMenu()
        {
            if (!HookedList.Contains("UIGoToOptionsMenu"))
            {
                HookedList.Add("UIGoToOptionsMenu");
                On.UIManager.UIGoToOptionsMenu += UIGoToOptionsMenu;
            }
        }

        internal static event Delegates.UIGoToOptionsMenu_BeforeArgs _beforeUIGoToOptionsMenu;
        internal static event Delegates.UIGoToOptionsMenu_NormalArgs _afterUIGoToOptionsMenu;

        private static void UIGoToOptionsMenu(On.UIManager.orig_UIGoToOptionsMenu orig, UIManager self)
        {
            Delegates.Params_UIGoToOptionsMenu @params = new()
            {
                self = self
            };
            _beforeUIGoToOptionsMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIGoToOptionsMenu != null) _afterUIGoToOptionsMenu.Invoke(@params);
        }

        internal static void HookUILeaveOptionsMenu()
        {
            if (!HookedList.Contains("UILeaveOptionsMenu"))
            {
                HookedList.Add("UILeaveOptionsMenu");
                On.UIManager.UILeaveOptionsMenu += UILeaveOptionsMenu;
            }
        }

        internal static event Delegates.UILeaveOptionsMenu_BeforeArgs _beforeUILeaveOptionsMenu;
        internal static event Delegates.UILeaveOptionsMenu_NormalArgs _afterUILeaveOptionsMenu;

        private static void UILeaveOptionsMenu(On.UIManager.orig_UILeaveOptionsMenu orig, UIManager self)
        {
            Delegates.Params_UILeaveOptionsMenu @params = new()
            {
                self = self
            };
            _beforeUILeaveOptionsMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUILeaveOptionsMenu != null) _afterUILeaveOptionsMenu.Invoke(@params);
        }

        internal static void HookUIExplicitSwitchUser()
        {
            if (!HookedList.Contains("UIExplicitSwitchUser"))
            {
                HookedList.Add("UIExplicitSwitchUser");
                On.UIManager.UIExplicitSwitchUser += UIExplicitSwitchUser;
            }
        }

        internal static event Delegates.UIExplicitSwitchUser_BeforeArgs _beforeUIExplicitSwitchUser;
        internal static event Delegates.UIExplicitSwitchUser_NormalArgs _afterUIExplicitSwitchUser;

        private static void UIExplicitSwitchUser(On.UIManager.orig_UIExplicitSwitchUser orig, UIManager self)
        {
            Delegates.Params_UIExplicitSwitchUser @params = new()
            {
                self = self
            };
            _beforeUIExplicitSwitchUser?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIExplicitSwitchUser != null) _afterUIExplicitSwitchUser.Invoke(@params);
        }

        internal static void HookUIGoToEngageMenu()
        {
            if (!HookedList.Contains("UIGoToEngageMenu"))
            {
                HookedList.Add("UIGoToEngageMenu");
                On.UIManager.UIGoToEngageMenu += UIGoToEngageMenu;
            }
        }

        internal static event Delegates.UIGoToEngageMenu_BeforeArgs _beforeUIGoToEngageMenu;
        internal static event Delegates.UIGoToEngageMenu_NormalArgs _afterUIGoToEngageMenu;

        private static void UIGoToEngageMenu(On.UIManager.orig_UIGoToEngageMenu orig, UIManager self)
        {
            Delegates.Params_UIGoToEngageMenu @params = new()
            {
                self = self
            };
            _beforeUIGoToEngageMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIGoToEngageMenu != null) _afterUIGoToEngageMenu.Invoke(@params);
        }

        internal static void HookUIGoToNoSaveMenu()
        {
            if (!HookedList.Contains("UIGoToNoSaveMenu"))
            {
                HookedList.Add("UIGoToNoSaveMenu");
                On.UIManager.UIGoToNoSaveMenu += UIGoToNoSaveMenu;
            }
        }

        internal static event Delegates.UIGoToNoSaveMenu_BeforeArgs _beforeUIGoToNoSaveMenu;
        internal static event Delegates.UIGoToNoSaveMenu_NormalArgs _afterUIGoToNoSaveMenu;

        private static void UIGoToNoSaveMenu(On.UIManager.orig_UIGoToNoSaveMenu orig, UIManager self)
        {
            Delegates.Params_UIGoToNoSaveMenu @params = new()
            {
                self = self
            };
            _beforeUIGoToNoSaveMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIGoToNoSaveMenu != null) _afterUIGoToNoSaveMenu.Invoke(@params);
        }

        internal static void HookUIGoToMainMenu()
        {
            if (!HookedList.Contains("UIGoToMainMenu"))
            {
                HookedList.Add("UIGoToMainMenu");
                On.UIManager.UIGoToMainMenu += UIGoToMainMenu;
            }
        }

        internal static event Delegates.UIGoToMainMenu_BeforeArgs _beforeUIGoToMainMenu;
        internal static event Delegates.UIGoToMainMenu_NormalArgs _afterUIGoToMainMenu;

        private static void UIGoToMainMenu(On.UIManager.orig_UIGoToMainMenu orig, UIManager self)
        {
            Delegates.Params_UIGoToMainMenu @params = new()
            {
                self = self
            };
            _beforeUIGoToMainMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIGoToMainMenu != null) _afterUIGoToMainMenu.Invoke(@params);
        }

        internal static void HookUIGoToProfileMenu()
        {
            if (!HookedList.Contains("UIGoToProfileMenu"))
            {
                HookedList.Add("UIGoToProfileMenu");
                On.UIManager.UIGoToProfileMenu += UIGoToProfileMenu;
            }
        }

        internal static event Delegates.UIGoToProfileMenu_BeforeArgs _beforeUIGoToProfileMenu;
        internal static event Delegates.UIGoToProfileMenu_NormalArgs _afterUIGoToProfileMenu;

        private static void UIGoToProfileMenu(On.UIManager.orig_UIGoToProfileMenu orig, UIManager self)
        {
            Delegates.Params_UIGoToProfileMenu @params = new()
            {
                self = self
            };
            _beforeUIGoToProfileMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIGoToProfileMenu != null) _afterUIGoToProfileMenu.Invoke(@params);
        }

        internal static void HookUIReturnToProfileMenu()
        {
            if (!HookedList.Contains("UIReturnToProfileMenu"))
            {
                HookedList.Add("UIReturnToProfileMenu");
                On.UIManager.UIReturnToProfileMenu += UIReturnToProfileMenu;
            }
        }

        internal static event Delegates.UIReturnToProfileMenu_BeforeArgs _beforeUIReturnToProfileMenu;
        internal static event Delegates.UIReturnToProfileMenu_NormalArgs _afterUIReturnToProfileMenu;

        private static void UIReturnToProfileMenu(On.UIManager.orig_UIReturnToProfileMenu orig, UIManager self)
        {
            Delegates.Params_UIReturnToProfileMenu @params = new()
            {
                self = self
            };
            _beforeUIReturnToProfileMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIReturnToProfileMenu != null) _afterUIReturnToProfileMenu.Invoke(@params);
        }

        internal static void HookUIMainStartGame()
        {
            if (!HookedList.Contains("UIMainStartGame"))
            {
                HookedList.Add("UIMainStartGame");
                On.UIManager.UIMainStartGame += UIMainStartGame;
            }
        }

        internal static event Delegates.UIMainStartGame_BeforeArgs _beforeUIMainStartGame;
        internal static event Delegates.UIMainStartGame_NormalArgs _afterUIMainStartGame;

        private static void UIMainStartGame(On.UIManager.orig_UIMainStartGame orig, UIManager self)
        {
            Delegates.Params_UIMainStartGame @params = new()
            {
                self = self
            };
            _beforeUIMainStartGame?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIMainStartGame != null) _afterUIMainStartGame.Invoke(@params);
        }

        internal static void HookUIGoToControllerMenu()
        {
            if (!HookedList.Contains("UIGoToControllerMenu"))
            {
                HookedList.Add("UIGoToControllerMenu");
                On.UIManager.UIGoToControllerMenu += UIGoToControllerMenu;
            }
        }

        internal static event Delegates.UIGoToControllerMenu_BeforeArgs _beforeUIGoToControllerMenu;
        internal static event Delegates.UIGoToControllerMenu_NormalArgs _afterUIGoToControllerMenu;

        private static void UIGoToControllerMenu(On.UIManager.orig_UIGoToControllerMenu orig, UIManager self)
        {
            Delegates.Params_UIGoToControllerMenu @params = new()
            {
                self = self
            };
            _beforeUIGoToControllerMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIGoToControllerMenu != null) _afterUIGoToControllerMenu.Invoke(@params);
        }

        internal static void HookUIGoToRemapControllerMenu()
        {
            if (!HookedList.Contains("UIGoToRemapControllerMenu"))
            {
                HookedList.Add("UIGoToRemapControllerMenu");
                On.UIManager.UIGoToRemapControllerMenu += UIGoToRemapControllerMenu;
            }
        }

        internal static event Delegates.UIGoToRemapControllerMenu_BeforeArgs _beforeUIGoToRemapControllerMenu;
        internal static event Delegates.UIGoToRemapControllerMenu_NormalArgs _afterUIGoToRemapControllerMenu;

        private static void UIGoToRemapControllerMenu(On.UIManager.orig_UIGoToRemapControllerMenu orig, UIManager self)
        {
            Delegates.Params_UIGoToRemapControllerMenu @params = new()
            {
                self = self
            };
            _beforeUIGoToRemapControllerMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIGoToRemapControllerMenu != null) _afterUIGoToRemapControllerMenu.Invoke(@params);
        }

        internal static void HookUIGoToKeyboardMenu()
        {
            if (!HookedList.Contains("UIGoToKeyboardMenu"))
            {
                HookedList.Add("UIGoToKeyboardMenu");
                On.UIManager.UIGoToKeyboardMenu += UIGoToKeyboardMenu;
            }
        }

        internal static event Delegates.UIGoToKeyboardMenu_BeforeArgs _beforeUIGoToKeyboardMenu;
        internal static event Delegates.UIGoToKeyboardMenu_NormalArgs _afterUIGoToKeyboardMenu;

        private static void UIGoToKeyboardMenu(On.UIManager.orig_UIGoToKeyboardMenu orig, UIManager self)
        {
            Delegates.Params_UIGoToKeyboardMenu @params = new()
            {
                self = self
            };
            _beforeUIGoToKeyboardMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIGoToKeyboardMenu != null) _afterUIGoToKeyboardMenu.Invoke(@params);
        }

        internal static void HookUIGoToAudioMenu()
        {
            if (!HookedList.Contains("UIGoToAudioMenu"))
            {
                HookedList.Add("UIGoToAudioMenu");
                On.UIManager.UIGoToAudioMenu += UIGoToAudioMenu;
            }
        }

        internal static event Delegates.UIGoToAudioMenu_BeforeArgs _beforeUIGoToAudioMenu;
        internal static event Delegates.UIGoToAudioMenu_NormalArgs _afterUIGoToAudioMenu;

        private static void UIGoToAudioMenu(On.UIManager.orig_UIGoToAudioMenu orig, UIManager self)
        {
            Delegates.Params_UIGoToAudioMenu @params = new()
            {
                self = self
            };
            _beforeUIGoToAudioMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIGoToAudioMenu != null) _afterUIGoToAudioMenu.Invoke(@params);
        }

        internal static void HookUIGoToVideoMenu()
        {
            if (!HookedList.Contains("UIGoToVideoMenu"))
            {
                HookedList.Add("UIGoToVideoMenu");
                On.UIManager.UIGoToVideoMenu += UIGoToVideoMenu;
            }
        }

        internal static event Delegates.UIGoToVideoMenu_BeforeArgs _beforeUIGoToVideoMenu;
        internal static event Delegates.UIGoToVideoMenu_NormalArgs _afterUIGoToVideoMenu;

        private static void UIGoToVideoMenu(On.UIManager.orig_UIGoToVideoMenu orig, UIManager self, bool rollbackRes)
        {
            Delegates.Params_UIGoToVideoMenu @params = new()
            {
                self = self, rollbackRes = rollbackRes
            };
            _beforeUIGoToVideoMenu?.Invoke(@params);
            self = @params.self;
            rollbackRes = @params.rollbackRes;
            orig(self, rollbackRes);
            if (_afterUIGoToVideoMenu != null) _afterUIGoToVideoMenu.Invoke(@params);
        }

        internal static void HookUIGoToPauseMenu()
        {
            if (!HookedList.Contains("UIGoToPauseMenu"))
            {
                HookedList.Add("UIGoToPauseMenu");
                On.UIManager.UIGoToPauseMenu += UIGoToPauseMenu;
            }
        }

        internal static event Delegates.UIGoToPauseMenu_BeforeArgs _beforeUIGoToPauseMenu;
        internal static event Delegates.UIGoToPauseMenu_NormalArgs _afterUIGoToPauseMenu;

        private static void UIGoToPauseMenu(On.UIManager.orig_UIGoToPauseMenu orig, UIManager self)
        {
            Delegates.Params_UIGoToPauseMenu @params = new()
            {
                self = self
            };
            _beforeUIGoToPauseMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIGoToPauseMenu != null) _afterUIGoToPauseMenu.Invoke(@params);
        }

        internal static void HookUIClosePauseMenu()
        {
            if (!HookedList.Contains("UIClosePauseMenu"))
            {
                HookedList.Add("UIClosePauseMenu");
                On.UIManager.UIClosePauseMenu += UIClosePauseMenu;
            }
        }

        internal static event Delegates.UIClosePauseMenu_BeforeArgs _beforeUIClosePauseMenu;
        internal static event Delegates.UIClosePauseMenu_NormalArgs _afterUIClosePauseMenu;

        private static void UIClosePauseMenu(On.UIManager.orig_UIClosePauseMenu orig, UIManager self)
        {
            Delegates.Params_UIClosePauseMenu @params = new()
            {
                self = self
            };
            _beforeUIClosePauseMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIClosePauseMenu != null) _afterUIClosePauseMenu.Invoke(@params);
        }

        internal static void HookUIClearPauseMenu()
        {
            if (!HookedList.Contains("UIClearPauseMenu"))
            {
                HookedList.Add("UIClearPauseMenu");
                On.UIManager.UIClearPauseMenu += UIClearPauseMenu;
            }
        }

        internal static event Delegates.UIClearPauseMenu_BeforeArgs _beforeUIClearPauseMenu;
        internal static event Delegates.UIClearPauseMenu_NormalArgs _afterUIClearPauseMenu;

        private static void UIClearPauseMenu(On.UIManager.orig_UIClearPauseMenu orig, UIManager self)
        {
            Delegates.Params_UIClearPauseMenu @params = new()
            {
                self = self
            };
            _beforeUIClearPauseMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIClearPauseMenu != null) _afterUIClearPauseMenu.Invoke(@params);
        }

        internal static void HookUnClearPauseMenu()
        {
            if (!HookedList.Contains("UnClearPauseMenu"))
            {
                HookedList.Add("UnClearPauseMenu");
                On.UIManager.UnClearPauseMenu += UnClearPauseMenu;
            }
        }

        internal static event Delegates.UnClearPauseMenu_BeforeArgs _beforeUnClearPauseMenu;
        internal static event Delegates.UnClearPauseMenu_NormalArgs _afterUnClearPauseMenu;

        private static void UnClearPauseMenu(On.UIManager.orig_UnClearPauseMenu orig, UIManager self)
        {
            Delegates.Params_UnClearPauseMenu @params = new()
            {
                self = self
            };
            _beforeUnClearPauseMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUnClearPauseMenu != null) _afterUnClearPauseMenu.Invoke(@params);
        }

        internal static void HookUIGoToOverscanMenu()
        {
            if (!HookedList.Contains("UIGoToOverscanMenu"))
            {
                HookedList.Add("UIGoToOverscanMenu");
                On.UIManager.UIGoToOverscanMenu += UIGoToOverscanMenu;
            }
        }

        internal static event Delegates.UIGoToOverscanMenu_BeforeArgs _beforeUIGoToOverscanMenu;
        internal static event Delegates.UIGoToOverscanMenu_NormalArgs _afterUIGoToOverscanMenu;

        private static void UIGoToOverscanMenu(On.UIManager.orig_UIGoToOverscanMenu orig, UIManager self)
        {
            Delegates.Params_UIGoToOverscanMenu @params = new()
            {
                self = self
            };
            _beforeUIGoToOverscanMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIGoToOverscanMenu != null) _afterUIGoToOverscanMenu.Invoke(@params);
        }

        internal static void HookUIGoToBrightnessMenu()
        {
            if (!HookedList.Contains("UIGoToBrightnessMenu"))
            {
                HookedList.Add("UIGoToBrightnessMenu");
                On.UIManager.UIGoToBrightnessMenu += UIGoToBrightnessMenu;
            }
        }

        internal static event Delegates.UIGoToBrightnessMenu_BeforeArgs _beforeUIGoToBrightnessMenu;
        internal static event Delegates.UIGoToBrightnessMenu_NormalArgs _afterUIGoToBrightnessMenu;

        private static void UIGoToBrightnessMenu(On.UIManager.orig_UIGoToBrightnessMenu orig, UIManager self)
        {
            Delegates.Params_UIGoToBrightnessMenu @params = new()
            {
                self = self
            };
            _beforeUIGoToBrightnessMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIGoToBrightnessMenu != null) _afterUIGoToBrightnessMenu.Invoke(@params);
        }

        internal static void HookUIGoToGameOptionsMenu()
        {
            if (!HookedList.Contains("UIGoToGameOptionsMenu"))
            {
                HookedList.Add("UIGoToGameOptionsMenu");
                On.UIManager.UIGoToGameOptionsMenu += UIGoToGameOptionsMenu;
            }
        }

        internal static event Delegates.UIGoToGameOptionsMenu_BeforeArgs _beforeUIGoToGameOptionsMenu;
        internal static event Delegates.UIGoToGameOptionsMenu_NormalArgs _afterUIGoToGameOptionsMenu;

        private static void UIGoToGameOptionsMenu(On.UIManager.orig_UIGoToGameOptionsMenu orig, UIManager self)
        {
            Delegates.Params_UIGoToGameOptionsMenu @params = new()
            {
                self = self
            };
            _beforeUIGoToGameOptionsMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIGoToGameOptionsMenu != null) _afterUIGoToGameOptionsMenu.Invoke(@params);
        }

        internal static void HookUIGoToAchievementsMenu()
        {
            if (!HookedList.Contains("UIGoToAchievementsMenu"))
            {
                HookedList.Add("UIGoToAchievementsMenu");
                On.UIManager.UIGoToAchievementsMenu += UIGoToAchievementsMenu;
            }
        }

        internal static event Delegates.UIGoToAchievementsMenu_BeforeArgs _beforeUIGoToAchievementsMenu;
        internal static event Delegates.UIGoToAchievementsMenu_NormalArgs _afterUIGoToAchievementsMenu;

        private static void UIGoToAchievementsMenu(On.UIManager.orig_UIGoToAchievementsMenu orig, UIManager self)
        {
            Delegates.Params_UIGoToAchievementsMenu @params = new()
            {
                self = self
            };
            _beforeUIGoToAchievementsMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIGoToAchievementsMenu != null) _afterUIGoToAchievementsMenu.Invoke(@params);
        }

        internal static void HookUIGoToExtrasMenu()
        {
            if (!HookedList.Contains("UIGoToExtrasMenu"))
            {
                HookedList.Add("UIGoToExtrasMenu");
                On.UIManager.UIGoToExtrasMenu += UIGoToExtrasMenu;
            }
        }

        internal static event Delegates.UIGoToExtrasMenu_BeforeArgs _beforeUIGoToExtrasMenu;
        internal static event Delegates.UIGoToExtrasMenu_NormalArgs _afterUIGoToExtrasMenu;

        private static void UIGoToExtrasMenu(On.UIManager.orig_UIGoToExtrasMenu orig, UIManager self)
        {
            Delegates.Params_UIGoToExtrasMenu @params = new()
            {
                self = self
            };
            _beforeUIGoToExtrasMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIGoToExtrasMenu != null) _afterUIGoToExtrasMenu.Invoke(@params);
        }

        internal static void HookUIGoToExtrasContentMenu()
        {
            if (!HookedList.Contains("UIGoToExtrasContentMenu"))
            {
                HookedList.Add("UIGoToExtrasContentMenu");
                On.UIManager.UIGoToExtrasContentMenu += UIGoToExtrasContentMenu;
            }
        }

        internal static event Delegates.UIGoToExtrasContentMenu_BeforeArgs _beforeUIGoToExtrasContentMenu;
        internal static event Delegates.UIGoToExtrasContentMenu_NormalArgs _afterUIGoToExtrasContentMenu;

        private static void UIGoToExtrasContentMenu(On.UIManager.orig_UIGoToExtrasContentMenu orig, UIManager self)
        {
            Delegates.Params_UIGoToExtrasContentMenu @params = new()
            {
                self = self
            };
            _beforeUIGoToExtrasContentMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIGoToExtrasContentMenu != null) _afterUIGoToExtrasContentMenu.Invoke(@params);
        }

        internal static void HookUIShowQuitGamePrompt()
        {
            if (!HookedList.Contains("UIShowQuitGamePrompt"))
            {
                HookedList.Add("UIShowQuitGamePrompt");
                On.UIManager.UIShowQuitGamePrompt += UIShowQuitGamePrompt;
            }
        }

        internal static event Delegates.UIShowQuitGamePrompt_BeforeArgs _beforeUIShowQuitGamePrompt;
        internal static event Delegates.UIShowQuitGamePrompt_NormalArgs _afterUIShowQuitGamePrompt;

        private static void UIShowQuitGamePrompt(On.UIManager.orig_UIShowQuitGamePrompt orig, UIManager self)
        {
            Delegates.Params_UIShowQuitGamePrompt @params = new()
            {
                self = self
            };
            _beforeUIShowQuitGamePrompt?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIShowQuitGamePrompt != null) _afterUIShowQuitGamePrompt.Invoke(@params);
        }

        internal static void HookUIShowReturnMenuPrompt()
        {
            if (!HookedList.Contains("UIShowReturnMenuPrompt"))
            {
                HookedList.Add("UIShowReturnMenuPrompt");
                On.UIManager.UIShowReturnMenuPrompt += UIShowReturnMenuPrompt;
            }
        }

        internal static event Delegates.UIShowReturnMenuPrompt_BeforeArgs _beforeUIShowReturnMenuPrompt;
        internal static event Delegates.UIShowReturnMenuPrompt_NormalArgs _afterUIShowReturnMenuPrompt;

        private static void UIShowReturnMenuPrompt(On.UIManager.orig_UIShowReturnMenuPrompt orig, UIManager self)
        {
            Delegates.Params_UIShowReturnMenuPrompt @params = new()
            {
                self = self
            };
            _beforeUIShowReturnMenuPrompt?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIShowReturnMenuPrompt != null) _afterUIShowReturnMenuPrompt.Invoke(@params);
        }

        internal static void HookUIShowResolutionPrompt()
        {
            if (!HookedList.Contains("UIShowResolutionPrompt"))
            {
                HookedList.Add("UIShowResolutionPrompt");
                On.UIManager.UIShowResolutionPrompt += UIShowResolutionPrompt;
            }
        }

        internal static event Delegates.UIShowResolutionPrompt_BeforeArgs _beforeUIShowResolutionPrompt;
        internal static event Delegates.UIShowResolutionPrompt_NormalArgs _afterUIShowResolutionPrompt;

        private static void UIShowResolutionPrompt(On.UIManager.orig_UIShowResolutionPrompt orig, UIManager self,
            bool startTimer)
        {
            Delegates.Params_UIShowResolutionPrompt @params = new()
            {
                self = self, startTimer = startTimer
            };
            _beforeUIShowResolutionPrompt?.Invoke(@params);
            self = @params.self;
            startTimer = @params.startTimer;
            orig(self, startTimer);
            if (_afterUIShowResolutionPrompt != null) _afterUIShowResolutionPrompt.Invoke(@params);
        }

        internal static void HookUILeaveExitToMenuPrompt()
        {
            if (!HookedList.Contains("UILeaveExitToMenuPrompt"))
            {
                HookedList.Add("UILeaveExitToMenuPrompt");
                On.UIManager.UILeaveExitToMenuPrompt += UILeaveExitToMenuPrompt;
            }
        }

        internal static event Delegates.UILeaveExitToMenuPrompt_BeforeArgs _beforeUILeaveExitToMenuPrompt;
        internal static event Delegates.UILeaveExitToMenuPrompt_NormalArgs _afterUILeaveExitToMenuPrompt;

        private static void UILeaveExitToMenuPrompt(On.UIManager.orig_UILeaveExitToMenuPrompt orig, UIManager self)
        {
            Delegates.Params_UILeaveExitToMenuPrompt @params = new()
            {
                self = self
            };
            _beforeUILeaveExitToMenuPrompt?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUILeaveExitToMenuPrompt != null) _afterUILeaveExitToMenuPrompt.Invoke(@params);
        }

        internal static void HookUIGoToPlayModeMenu()
        {
            if (!HookedList.Contains("UIGoToPlayModeMenu"))
            {
                HookedList.Add("UIGoToPlayModeMenu");
                On.UIManager.UIGoToPlayModeMenu += UIGoToPlayModeMenu;
            }
        }

        internal static event Delegates.UIGoToPlayModeMenu_BeforeArgs _beforeUIGoToPlayModeMenu;
        internal static event Delegates.UIGoToPlayModeMenu_NormalArgs _afterUIGoToPlayModeMenu;

        private static void UIGoToPlayModeMenu(On.UIManager.orig_UIGoToPlayModeMenu orig, UIManager self)
        {
            Delegates.Params_UIGoToPlayModeMenu @params = new()
            {
                self = self
            };
            _beforeUIGoToPlayModeMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIGoToPlayModeMenu != null) _afterUIGoToPlayModeMenu.Invoke(@params);
        }

        internal static void HookUIReturnToMainMenu()
        {
            if (!HookedList.Contains("UIReturnToMainMenu"))
            {
                HookedList.Add("UIReturnToMainMenu");
                On.UIManager.UIReturnToMainMenu += UIReturnToMainMenu;
            }
        }

        internal static event Delegates.UIReturnToMainMenu_BeforeArgs _beforeUIReturnToMainMenu;
        internal static event Delegates.UIReturnToMainMenu_NormalArgs _afterUIReturnToMainMenu;

        private static void UIReturnToMainMenu(On.UIManager.orig_UIReturnToMainMenu orig, UIManager self)
        {
            Delegates.Params_UIReturnToMainMenu @params = new()
            {
                self = self
            };
            _beforeUIReturnToMainMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIReturnToMainMenu != null) _afterUIReturnToMainMenu.Invoke(@params);
        }

        internal static void HookUIGoToMenuCredits()
        {
            if (!HookedList.Contains("UIGoToMenuCredits"))
            {
                HookedList.Add("UIGoToMenuCredits");
                On.UIManager.UIGoToMenuCredits += UIGoToMenuCredits;
            }
        }

        internal static event Delegates.UIGoToMenuCredits_BeforeArgs _beforeUIGoToMenuCredits;
        internal static event Delegates.UIGoToMenuCredits_NormalArgs _afterUIGoToMenuCredits;

        private static void UIGoToMenuCredits(On.UIManager.orig_UIGoToMenuCredits orig, UIManager self)
        {
            Delegates.Params_UIGoToMenuCredits @params = new()
            {
                self = self
            };
            _beforeUIGoToMenuCredits?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIGoToMenuCredits != null) _afterUIGoToMenuCredits.Invoke(@params);
        }

        internal static void HookUIStartNewGame()
        {
            if (!HookedList.Contains("UIStartNewGame"))
            {
                HookedList.Add("UIStartNewGame");
                On.UIManager.UIStartNewGame += UIStartNewGame;
            }
        }

        internal static event Delegates.UIStartNewGame_BeforeArgs _beforeUIStartNewGame;
        internal static event Delegates.UIStartNewGame_NormalArgs _afterUIStartNewGame;

        private static void UIStartNewGame(On.UIManager.orig_UIStartNewGame orig, UIManager self)
        {
            Delegates.Params_UIStartNewGame @params = new()
            {
                self = self
            };
            _beforeUIStartNewGame?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIStartNewGame != null) _afterUIStartNewGame.Invoke(@params);
        }

        internal static void HookUIStartNewGameContinue()
        {
            if (!HookedList.Contains("UIStartNewGameContinue"))
            {
                HookedList.Add("UIStartNewGameContinue");
                On.UIManager.UIStartNewGameContinue += UIStartNewGameContinue;
            }
        }

        internal static event Delegates.UIStartNewGameContinue_BeforeArgs _beforeUIStartNewGameContinue;
        internal static event Delegates.UIStartNewGameContinue_NormalArgs _afterUIStartNewGameContinue;

        private static void UIStartNewGameContinue(On.UIManager.orig_UIStartNewGameContinue orig, UIManager self)
        {
            Delegates.Params_UIStartNewGameContinue @params = new()
            {
                self = self
            };
            _beforeUIStartNewGameContinue?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUIStartNewGameContinue != null) _afterUIStartNewGameContinue.Invoke(@params);
        }

        internal static void HookStartNewGame()
        {
            if (!HookedList.Contains("StartNewGame"))
            {
                HookedList.Add("StartNewGame");
                On.UIManager.StartNewGame += StartNewGame;
            }
        }

        internal static event Delegates.StartNewGame_BeforeArgs _beforeStartNewGame;
        internal static event Delegates.StartNewGame_NormalArgs _afterStartNewGame;

        private static void StartNewGame(On.UIManager.orig_StartNewGame orig, UIManager self, bool permaDeath,
            bool bossRush)
        {
            Delegates.Params_StartNewGame @params = new()
            {
                self = self, permaDeath = permaDeath, bossRush = bossRush
            };
            _beforeStartNewGame?.Invoke(@params);
            self = @params.self;
            permaDeath = @params.permaDeath;
            bossRush = @params.bossRush;
            orig(self, permaDeath, bossRush);
            if (_afterStartNewGame != null) _afterStartNewGame.Invoke(@params);
        }

        internal static void HookContinueGame()
        {
            if (!HookedList.Contains("ContinueGame"))
            {
                HookedList.Add("ContinueGame");
                On.UIManager.ContinueGame += ContinueGame;
            }
        }

        internal static event Delegates.ContinueGame_BeforeArgs _beforeContinueGame;
        internal static event Delegates.ContinueGame_NormalArgs _afterContinueGame;

        private static void ContinueGame(On.UIManager.orig_ContinueGame orig, UIManager self)
        {
            Delegates.Params_ContinueGame @params = new()
            {
                self = self
            };
            _beforeContinueGame?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterContinueGame != null) _afterContinueGame.Invoke(@params);
        }

        internal static void HookGoToEngageMenu()
        {
            if (!HookedList.Contains("GoToEngageMenu"))
            {
                HookedList.Add("GoToEngageMenu");
                On.UIManager.GoToEngageMenu += GoToEngageMenu;
            }
        }

        internal static event Delegates.GoToEngageMenu_BeforeArgs _beforeGoToEngageMenu;

        private static IEnumerator GoToEngageMenu(On.UIManager.orig_GoToEngageMenu orig, UIManager self)
        {
            Delegates.Params_GoToEngageMenu @params = new()
            {
                self = self
            };
            _beforeGoToEngageMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookGoToNoSaveMenu()
        {
            if (!HookedList.Contains("GoToNoSaveMenu"))
            {
                HookedList.Add("GoToNoSaveMenu");
                On.UIManager.GoToNoSaveMenu += GoToNoSaveMenu;
            }
        }

        internal static event Delegates.GoToNoSaveMenu_BeforeArgs _beforeGoToNoSaveMenu;

        private static IEnumerator GoToNoSaveMenu(On.UIManager.orig_GoToNoSaveMenu orig, UIManager self)
        {
            Delegates.Params_GoToNoSaveMenu @params = new()
            {
                self = self
            };
            _beforeGoToNoSaveMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookGoToMainMenu()
        {
            if (!HookedList.Contains("GoToMainMenu"))
            {
                HookedList.Add("GoToMainMenu");
                On.UIManager.GoToMainMenu += GoToMainMenu;
            }
        }

        internal static event Delegates.GoToMainMenu_BeforeArgs _beforeGoToMainMenu;

        private static IEnumerator GoToMainMenu(On.UIManager.orig_GoToMainMenu orig, UIManager self)
        {
            Delegates.Params_GoToMainMenu @params = new()
            {
                self = self
            };
            _beforeGoToMainMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookGoToProfileMenu()
        {
            if (!HookedList.Contains("GoToProfileMenu"))
            {
                HookedList.Add("GoToProfileMenu");
                On.UIManager.GoToProfileMenu += GoToProfileMenu;
            }
        }

        internal static event Delegates.GoToProfileMenu_BeforeArgs _beforeGoToProfileMenu;

        private static IEnumerator GoToProfileMenu(On.UIManager.orig_GoToProfileMenu orig, UIManager self)
        {
            Delegates.Params_GoToProfileMenu @params = new()
            {
                self = self
            };
            _beforeGoToProfileMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookPrepareSaveFilesInOrder()
        {
            if (!HookedList.Contains("PrepareSaveFilesInOrder"))
            {
                HookedList.Add("PrepareSaveFilesInOrder");
                On.UIManager.PrepareSaveFilesInOrder += PrepareSaveFilesInOrder;
            }
        }

        internal static event Delegates.PrepareSaveFilesInOrder_BeforeArgs _beforePrepareSaveFilesInOrder;

        private static IEnumerator PrepareSaveFilesInOrder(On.UIManager.orig_PrepareSaveFilesInOrder orig,
            UIManager self)
        {
            Delegates.Params_PrepareSaveFilesInOrder @params = new()
            {
                self = self
            };
            _beforePrepareSaveFilesInOrder?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookGoToOptionsMenu()
        {
            if (!HookedList.Contains("GoToOptionsMenu"))
            {
                HookedList.Add("GoToOptionsMenu");
                On.UIManager.GoToOptionsMenu += GoToOptionsMenu;
            }
        }

        internal static event Delegates.GoToOptionsMenu_BeforeArgs _beforeGoToOptionsMenu;

        private static IEnumerator GoToOptionsMenu(On.UIManager.orig_GoToOptionsMenu orig, UIManager self)
        {
            Delegates.Params_GoToOptionsMenu @params = new()
            {
                self = self
            };
            _beforeGoToOptionsMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookGoToControllerMenu()
        {
            if (!HookedList.Contains("GoToControllerMenu"))
            {
                HookedList.Add("GoToControllerMenu");
                On.UIManager.GoToControllerMenu += GoToControllerMenu;
            }
        }

        internal static event Delegates.GoToControllerMenu_BeforeArgs _beforeGoToControllerMenu;

        private static IEnumerator GoToControllerMenu(On.UIManager.orig_GoToControllerMenu orig, UIManager self)
        {
            Delegates.Params_GoToControllerMenu @params = new()
            {
                self = self
            };
            _beforeGoToControllerMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookGoToRemapControllerMenu()
        {
            if (!HookedList.Contains("GoToRemapControllerMenu"))
            {
                HookedList.Add("GoToRemapControllerMenu");
                On.UIManager.GoToRemapControllerMenu += GoToRemapControllerMenu;
            }
        }

        internal static event Delegates.GoToRemapControllerMenu_BeforeArgs _beforeGoToRemapControllerMenu;

        private static IEnumerator GoToRemapControllerMenu(On.UIManager.orig_GoToRemapControllerMenu orig,
            UIManager self)
        {
            Delegates.Params_GoToRemapControllerMenu @params = new()
            {
                self = self
            };
            _beforeGoToRemapControllerMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookGoToKeyboardMenu()
        {
            if (!HookedList.Contains("GoToKeyboardMenu"))
            {
                HookedList.Add("GoToKeyboardMenu");
                On.UIManager.GoToKeyboardMenu += GoToKeyboardMenu;
            }
        }

        internal static event Delegates.GoToKeyboardMenu_BeforeArgs _beforeGoToKeyboardMenu;

        private static IEnumerator GoToKeyboardMenu(On.UIManager.orig_GoToKeyboardMenu orig, UIManager self)
        {
            Delegates.Params_GoToKeyboardMenu @params = new()
            {
                self = self
            };
            _beforeGoToKeyboardMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookGoToAudioMenu()
        {
            if (!HookedList.Contains("GoToAudioMenu"))
            {
                HookedList.Add("GoToAudioMenu");
                On.UIManager.GoToAudioMenu += GoToAudioMenu;
            }
        }

        internal static event Delegates.GoToAudioMenu_BeforeArgs _beforeGoToAudioMenu;

        private static IEnumerator GoToAudioMenu(On.UIManager.orig_GoToAudioMenu orig, UIManager self)
        {
            Delegates.Params_GoToAudioMenu @params = new()
            {
                self = self
            };
            _beforeGoToAudioMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookGoToVideoMenu()
        {
            if (!HookedList.Contains("GoToVideoMenu"))
            {
                HookedList.Add("GoToVideoMenu");
                On.UIManager.GoToVideoMenu += GoToVideoMenu;
            }
        }

        internal static event Delegates.GoToVideoMenu_BeforeArgs _beforeGoToVideoMenu;

        private static IEnumerator GoToVideoMenu(On.UIManager.orig_GoToVideoMenu orig, UIManager self, bool rollbackRes)
        {
            Delegates.Params_GoToVideoMenu @params = new()
            {
                self = self, rollbackRes = rollbackRes
            };
            _beforeGoToVideoMenu?.Invoke(@params);
            self = @params.self;
            rollbackRes = @params.rollbackRes;
            return orig(self, rollbackRes);
        }

        internal static void HookGoToOverscanMenu()
        {
            if (!HookedList.Contains("GoToOverscanMenu"))
            {
                HookedList.Add("GoToOverscanMenu");
                On.UIManager.GoToOverscanMenu += GoToOverscanMenu;
            }
        }

        internal static event Delegates.GoToOverscanMenu_BeforeArgs _beforeGoToOverscanMenu;

        private static IEnumerator GoToOverscanMenu(On.UIManager.orig_GoToOverscanMenu orig, UIManager self)
        {
            Delegates.Params_GoToOverscanMenu @params = new()
            {
                self = self
            };
            _beforeGoToOverscanMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookGoToBrightnessMenu()
        {
            if (!HookedList.Contains("GoToBrightnessMenu"))
            {
                HookedList.Add("GoToBrightnessMenu");
                On.UIManager.GoToBrightnessMenu += GoToBrightnessMenu;
            }
        }

        internal static event Delegates.GoToBrightnessMenu_BeforeArgs _beforeGoToBrightnessMenu;

        private static IEnumerator GoToBrightnessMenu(On.UIManager.orig_GoToBrightnessMenu orig, UIManager self)
        {
            Delegates.Params_GoToBrightnessMenu @params = new()
            {
                self = self
            };
            _beforeGoToBrightnessMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookGoToGameOptionsMenu()
        {
            if (!HookedList.Contains("GoToGameOptionsMenu"))
            {
                HookedList.Add("GoToGameOptionsMenu");
                On.UIManager.GoToGameOptionsMenu += GoToGameOptionsMenu;
            }
        }

        internal static event Delegates.GoToGameOptionsMenu_BeforeArgs _beforeGoToGameOptionsMenu;

        private static IEnumerator GoToGameOptionsMenu(On.UIManager.orig_GoToGameOptionsMenu orig, UIManager self)
        {
            Delegates.Params_GoToGameOptionsMenu @params = new()
            {
                self = self
            };
            _beforeGoToGameOptionsMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookGoToAchievementsMenu()
        {
            if (!HookedList.Contains("GoToAchievementsMenu"))
            {
                HookedList.Add("GoToAchievementsMenu");
                On.UIManager.GoToAchievementsMenu += GoToAchievementsMenu;
            }
        }

        internal static event Delegates.GoToAchievementsMenu_BeforeArgs _beforeGoToAchievementsMenu;

        private static IEnumerator GoToAchievementsMenu(On.UIManager.orig_GoToAchievementsMenu orig, UIManager self)
        {
            Delegates.Params_GoToAchievementsMenu @params = new()
            {
                self = self
            };
            _beforeGoToAchievementsMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookGoToExtrasMenu()
        {
            if (!HookedList.Contains("GoToExtrasMenu"))
            {
                HookedList.Add("GoToExtrasMenu");
                On.UIManager.GoToExtrasMenu += GoToExtrasMenu;
            }
        }

        internal static event Delegates.GoToExtrasMenu_BeforeArgs _beforeGoToExtrasMenu;

        private static IEnumerator GoToExtrasMenu(On.UIManager.orig_GoToExtrasMenu orig, UIManager self)
        {
            Delegates.Params_GoToExtrasMenu @params = new()
            {
                self = self
            };
            _beforeGoToExtrasMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookGoToExtrasContentMenu()
        {
            if (!HookedList.Contains("GoToExtrasContentMenu"))
            {
                HookedList.Add("GoToExtrasContentMenu");
                On.UIManager.GoToExtrasContentMenu += GoToExtrasContentMenu;
            }
        }

        internal static event Delegates.GoToExtrasContentMenu_BeforeArgs _beforeGoToExtrasContentMenu;

        private static IEnumerator GoToExtrasContentMenu(On.UIManager.orig_GoToExtrasContentMenu orig, UIManager self)
        {
            Delegates.Params_GoToExtrasContentMenu @params = new()
            {
                self = self
            };
            _beforeGoToExtrasContentMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookGoToQuitGamePrompt()
        {
            if (!HookedList.Contains("GoToQuitGamePrompt"))
            {
                HookedList.Add("GoToQuitGamePrompt");
                On.UIManager.GoToQuitGamePrompt += GoToQuitGamePrompt;
            }
        }

        internal static event Delegates.GoToQuitGamePrompt_BeforeArgs _beforeGoToQuitGamePrompt;

        private static IEnumerator GoToQuitGamePrompt(On.UIManager.orig_GoToQuitGamePrompt orig, UIManager self)
        {
            Delegates.Params_GoToQuitGamePrompt @params = new()
            {
                self = self
            };
            _beforeGoToQuitGamePrompt?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookGoToReturnMenuPrompt()
        {
            if (!HookedList.Contains("GoToReturnMenuPrompt"))
            {
                HookedList.Add("GoToReturnMenuPrompt");
                On.UIManager.GoToReturnMenuPrompt += GoToReturnMenuPrompt;
            }
        }

        internal static event Delegates.GoToReturnMenuPrompt_BeforeArgs _beforeGoToReturnMenuPrompt;

        private static IEnumerator GoToReturnMenuPrompt(On.UIManager.orig_GoToReturnMenuPrompt orig, UIManager self)
        {
            Delegates.Params_GoToReturnMenuPrompt @params = new()
            {
                self = self
            };
            _beforeGoToReturnMenuPrompt?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookGoToResolutionPrompt()
        {
            if (!HookedList.Contains("GoToResolutionPrompt"))
            {
                HookedList.Add("GoToResolutionPrompt");
                On.UIManager.GoToResolutionPrompt += GoToResolutionPrompt;
            }
        }

        internal static event Delegates.GoToResolutionPrompt_BeforeArgs _beforeGoToResolutionPrompt;

        private static IEnumerator GoToResolutionPrompt(On.UIManager.orig_GoToResolutionPrompt orig, UIManager self,
            bool startTimer)
        {
            Delegates.Params_GoToResolutionPrompt @params = new()
            {
                self = self, startTimer = startTimer
            };
            _beforeGoToResolutionPrompt?.Invoke(@params);
            self = @params.self;
            startTimer = @params.startTimer;
            return orig(self, startTimer);
        }

        internal static void HookLeaveOptionsMenu()
        {
            if (!HookedList.Contains("LeaveOptionsMenu"))
            {
                HookedList.Add("LeaveOptionsMenu");
                On.UIManager.LeaveOptionsMenu += LeaveOptionsMenu;
            }
        }

        internal static event Delegates.LeaveOptionsMenu_BeforeArgs _beforeLeaveOptionsMenu;

        private static IEnumerator LeaveOptionsMenu(On.UIManager.orig_LeaveOptionsMenu orig, UIManager self)
        {
            Delegates.Params_LeaveOptionsMenu @params = new()
            {
                self = self
            };
            _beforeLeaveOptionsMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookLeaveExitToMenuPrompt()
        {
            if (!HookedList.Contains("LeaveExitToMenuPrompt"))
            {
                HookedList.Add("LeaveExitToMenuPrompt");
                On.UIManager.LeaveExitToMenuPrompt += LeaveExitToMenuPrompt;
            }
        }

        internal static event Delegates.LeaveExitToMenuPrompt_BeforeArgs _beforeLeaveExitToMenuPrompt;

        private static IEnumerator LeaveExitToMenuPrompt(On.UIManager.orig_LeaveExitToMenuPrompt orig, UIManager self)
        {
            Delegates.Params_LeaveExitToMenuPrompt @params = new()
            {
                self = self
            };
            _beforeLeaveExitToMenuPrompt?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookGoToPlayModeMenu()
        {
            if (!HookedList.Contains("GoToPlayModeMenu"))
            {
                HookedList.Add("GoToPlayModeMenu");
                On.UIManager.GoToPlayModeMenu += GoToPlayModeMenu;
            }
        }

        internal static event Delegates.GoToPlayModeMenu_BeforeArgs _beforeGoToPlayModeMenu;

        private static IEnumerator GoToPlayModeMenu(On.UIManager.orig_GoToPlayModeMenu orig, UIManager self)
        {
            Delegates.Params_GoToPlayModeMenu @params = new()
            {
                self = self
            };
            _beforeGoToPlayModeMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookReturnToMainMenu()
        {
            if (!HookedList.Contains("ReturnToMainMenu"))
            {
                HookedList.Add("ReturnToMainMenu");
                On.UIManager.ReturnToMainMenu += ReturnToMainMenu;
            }
        }

        internal static event Delegates.ReturnToMainMenu_BeforeArgs _beforeReturnToMainMenu;

        private static IEnumerator ReturnToMainMenu(On.UIManager.orig_ReturnToMainMenu orig, UIManager self)
        {
            Delegates.Params_ReturnToMainMenu @params = new()
            {
                self = self
            };
            _beforeReturnToMainMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookGoToPauseMenu()
        {
            if (!HookedList.Contains("GoToPauseMenu"))
            {
                HookedList.Add("GoToPauseMenu");
                On.UIManager.GoToPauseMenu += GoToPauseMenu;
            }
        }

        internal static event Delegates.GoToPauseMenu_BeforeArgs _beforeGoToPauseMenu;

        private static IEnumerator GoToPauseMenu(On.UIManager.orig_GoToPauseMenu orig, UIManager self)
        {
            Delegates.Params_GoToPauseMenu @params = new()
            {
                self = self
            };
            _beforeGoToPauseMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookGoToMenuCredits()
        {
            if (!HookedList.Contains("GoToMenuCredits"))
            {
                HookedList.Add("GoToMenuCredits");
                On.UIManager.GoToMenuCredits += GoToMenuCredits;
            }
        }

        internal static event Delegates.GoToMenuCredits_BeforeArgs _beforeGoToMenuCredits;

        private static IEnumerator GoToMenuCredits(On.UIManager.orig_GoToMenuCredits orig, UIManager self)
        {
            Delegates.Params_GoToMenuCredits @params = new()
            {
                self = self
            };
            _beforeGoToMenuCredits?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookHideCutscenePrompt()
        {
            if (!HookedList.Contains("HideCutscenePrompt"))
            {
                HookedList.Add("HideCutscenePrompt");
                On.UIManager.HideCutscenePrompt += HideCutscenePrompt;
            }
        }

        internal static event Delegates.HideCutscenePrompt_BeforeArgs _beforeHideCutscenePrompt;
        internal static event Delegates.HideCutscenePrompt_NormalArgs _afterHideCutscenePrompt;

        private static void HideCutscenePrompt(On.UIManager.orig_HideCutscenePrompt orig, UIManager self)
        {
            Delegates.Params_HideCutscenePrompt @params = new()
            {
                self = self
            };
            _beforeHideCutscenePrompt?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterHideCutscenePrompt != null) _afterHideCutscenePrompt.Invoke(@params);
        }

        internal static void HookApplyAudioMenuSettings()
        {
            if (!HookedList.Contains("ApplyAudioMenuSettings"))
            {
                HookedList.Add("ApplyAudioMenuSettings");
                On.UIManager.ApplyAudioMenuSettings += ApplyAudioMenuSettings;
            }
        }

        internal static event Delegates.ApplyAudioMenuSettings_BeforeArgs _beforeApplyAudioMenuSettings;
        internal static event Delegates.ApplyAudioMenuSettings_NormalArgs _afterApplyAudioMenuSettings;

        private static void ApplyAudioMenuSettings(On.UIManager.orig_ApplyAudioMenuSettings orig, UIManager self)
        {
            Delegates.Params_ApplyAudioMenuSettings @params = new()
            {
                self = self
            };
            _beforeApplyAudioMenuSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterApplyAudioMenuSettings != null) _afterApplyAudioMenuSettings.Invoke(@params);
        }

        internal static void HookApplyVideoMenuSettings()
        {
            if (!HookedList.Contains("ApplyVideoMenuSettings"))
            {
                HookedList.Add("ApplyVideoMenuSettings");
                On.UIManager.ApplyVideoMenuSettings += ApplyVideoMenuSettings;
            }
        }

        internal static event Delegates.ApplyVideoMenuSettings_BeforeArgs _beforeApplyVideoMenuSettings;
        internal static event Delegates.ApplyVideoMenuSettings_NormalArgs _afterApplyVideoMenuSettings;

        private static void ApplyVideoMenuSettings(On.UIManager.orig_ApplyVideoMenuSettings orig, UIManager self)
        {
            Delegates.Params_ApplyVideoMenuSettings @params = new()
            {
                self = self
            };
            _beforeApplyVideoMenuSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterApplyVideoMenuSettings != null) _afterApplyVideoMenuSettings.Invoke(@params);
        }

        internal static void HookApplyControllerMenuSettings()
        {
            if (!HookedList.Contains("ApplyControllerMenuSettings"))
            {
                HookedList.Add("ApplyControllerMenuSettings");
                On.UIManager.ApplyControllerMenuSettings += ApplyControllerMenuSettings;
            }
        }

        internal static event Delegates.ApplyControllerMenuSettings_BeforeArgs _beforeApplyControllerMenuSettings;
        internal static event Delegates.ApplyControllerMenuSettings_NormalArgs _afterApplyControllerMenuSettings;

        private static void ApplyControllerMenuSettings(On.UIManager.orig_ApplyControllerMenuSettings orig,
            UIManager self)
        {
            Delegates.Params_ApplyControllerMenuSettings @params = new()
            {
                self = self
            };
            _beforeApplyControllerMenuSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterApplyControllerMenuSettings != null) _afterApplyControllerMenuSettings.Invoke(@params);
        }

        internal static void HookApplyRemapGamepadMenuSettings()
        {
            if (!HookedList.Contains("ApplyRemapGamepadMenuSettings"))
            {
                HookedList.Add("ApplyRemapGamepadMenuSettings");
                On.UIManager.ApplyRemapGamepadMenuSettings += ApplyRemapGamepadMenuSettings;
            }
        }

        internal static event Delegates.ApplyRemapGamepadMenuSettings_BeforeArgs _beforeApplyRemapGamepadMenuSettings;
        internal static event Delegates.ApplyRemapGamepadMenuSettings_NormalArgs _afterApplyRemapGamepadMenuSettings;

        private static void ApplyRemapGamepadMenuSettings(On.UIManager.orig_ApplyRemapGamepadMenuSettings orig,
            UIManager self)
        {
            Delegates.Params_ApplyRemapGamepadMenuSettings @params = new()
            {
                self = self
            };
            _beforeApplyRemapGamepadMenuSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterApplyRemapGamepadMenuSettings != null) _afterApplyRemapGamepadMenuSettings.Invoke(@params);
        }

        internal static void HookApplyKeyboardMenuSettings()
        {
            if (!HookedList.Contains("ApplyKeyboardMenuSettings"))
            {
                HookedList.Add("ApplyKeyboardMenuSettings");
                On.UIManager.ApplyKeyboardMenuSettings += ApplyKeyboardMenuSettings;
            }
        }

        internal static event Delegates.ApplyKeyboardMenuSettings_BeforeArgs _beforeApplyKeyboardMenuSettings;
        internal static event Delegates.ApplyKeyboardMenuSettings_NormalArgs _afterApplyKeyboardMenuSettings;

        private static void ApplyKeyboardMenuSettings(On.UIManager.orig_ApplyKeyboardMenuSettings orig, UIManager self)
        {
            Delegates.Params_ApplyKeyboardMenuSettings @params = new()
            {
                self = self
            };
            _beforeApplyKeyboardMenuSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterApplyKeyboardMenuSettings != null) _afterApplyKeyboardMenuSettings.Invoke(@params);
        }

        internal static void HookApplyOverscanSettings()
        {
            if (!HookedList.Contains("ApplyOverscanSettings"))
            {
                HookedList.Add("ApplyOverscanSettings");
                On.UIManager.ApplyOverscanSettings += ApplyOverscanSettings;
            }
        }

        internal static event Delegates.ApplyOverscanSettings_BeforeArgs _beforeApplyOverscanSettings;
        internal static event Delegates.ApplyOverscanSettings_NormalArgs _afterApplyOverscanSettings;

        private static void ApplyOverscanSettings(On.UIManager.orig_ApplyOverscanSettings orig, UIManager self,
            bool goToBrightness)
        {
            Delegates.Params_ApplyOverscanSettings @params = new()
            {
                self = self, goToBrightness = goToBrightness
            };
            _beforeApplyOverscanSettings?.Invoke(@params);
            self = @params.self;
            goToBrightness = @params.goToBrightness;
            orig(self, goToBrightness);
            if (_afterApplyOverscanSettings != null) _afterApplyOverscanSettings.Invoke(@params);
        }

        internal static void HookApplyBrightnessSettings()
        {
            if (!HookedList.Contains("ApplyBrightnessSettings"))
            {
                HookedList.Add("ApplyBrightnessSettings");
                On.UIManager.ApplyBrightnessSettings += ApplyBrightnessSettings;
            }
        }

        internal static event Delegates.ApplyBrightnessSettings_BeforeArgs _beforeApplyBrightnessSettings;
        internal static event Delegates.ApplyBrightnessSettings_NormalArgs _afterApplyBrightnessSettings;

        private static void ApplyBrightnessSettings(On.UIManager.orig_ApplyBrightnessSettings orig, UIManager self)
        {
            Delegates.Params_ApplyBrightnessSettings @params = new()
            {
                self = self
            };
            _beforeApplyBrightnessSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterApplyBrightnessSettings != null) _afterApplyBrightnessSettings.Invoke(@params);
        }

        internal static void HookApplyGameMenuSettings()
        {
            if (!HookedList.Contains("ApplyGameMenuSettings"))
            {
                HookedList.Add("ApplyGameMenuSettings");
                On.UIManager.ApplyGameMenuSettings += ApplyGameMenuSettings;
            }
        }

        internal static event Delegates.ApplyGameMenuSettings_BeforeArgs _beforeApplyGameMenuSettings;
        internal static event Delegates.ApplyGameMenuSettings_NormalArgs _afterApplyGameMenuSettings;

        private static void ApplyGameMenuSettings(On.UIManager.orig_ApplyGameMenuSettings orig, UIManager self)
        {
            Delegates.Params_ApplyGameMenuSettings @params = new()
            {
                self = self
            };
            _beforeApplyGameMenuSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterApplyGameMenuSettings != null) _afterApplyGameMenuSettings.Invoke(@params);
        }

        internal static void HookSaveOverscanSettings()
        {
            if (!HookedList.Contains("SaveOverscanSettings"))
            {
                HookedList.Add("SaveOverscanSettings");
                On.UIManager.SaveOverscanSettings += SaveOverscanSettings;
            }
        }

        internal static event Delegates.SaveOverscanSettings_BeforeArgs _beforeSaveOverscanSettings;
        internal static event Delegates.SaveOverscanSettings_NormalArgs _afterSaveOverscanSettings;

        private static void SaveOverscanSettings(On.UIManager.orig_SaveOverscanSettings orig, UIManager self)
        {
            Delegates.Params_SaveOverscanSettings @params = new()
            {
                self = self
            };
            _beforeSaveOverscanSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSaveOverscanSettings != null) _afterSaveOverscanSettings.Invoke(@params);
        }

        internal static void HookSaveBrightnessSettings()
        {
            if (!HookedList.Contains("SaveBrightnessSettings"))
            {
                HookedList.Add("SaveBrightnessSettings");
                On.UIManager.SaveBrightnessSettings += SaveBrightnessSettings;
            }
        }

        internal static event Delegates.SaveBrightnessSettings_BeforeArgs _beforeSaveBrightnessSettings;
        internal static event Delegates.SaveBrightnessSettings_NormalArgs _afterSaveBrightnessSettings;

        private static void SaveBrightnessSettings(On.UIManager.orig_SaveBrightnessSettings orig, UIManager self)
        {
            Delegates.Params_SaveBrightnessSettings @params = new()
            {
                self = self
            };
            _beforeSaveBrightnessSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSaveBrightnessSettings != null) _afterSaveBrightnessSettings.Invoke(@params);
        }

        internal static void HookDefaultAudioMenuSettings()
        {
            if (!HookedList.Contains("DefaultAudioMenuSettings"))
            {
                HookedList.Add("DefaultAudioMenuSettings");
                On.UIManager.DefaultAudioMenuSettings += DefaultAudioMenuSettings;
            }
        }

        internal static event Delegates.DefaultAudioMenuSettings_BeforeArgs _beforeDefaultAudioMenuSettings;
        internal static event Delegates.DefaultAudioMenuSettings_NormalArgs _afterDefaultAudioMenuSettings;

        private static void DefaultAudioMenuSettings(On.UIManager.orig_DefaultAudioMenuSettings orig, UIManager self)
        {
            Delegates.Params_DefaultAudioMenuSettings @params = new()
            {
                self = self
            };
            _beforeDefaultAudioMenuSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDefaultAudioMenuSettings != null) _afterDefaultAudioMenuSettings.Invoke(@params);
        }

        internal static void HookDefaultVideoMenuSettings()
        {
            if (!HookedList.Contains("DefaultVideoMenuSettings"))
            {
                HookedList.Add("DefaultVideoMenuSettings");
                On.UIManager.DefaultVideoMenuSettings += DefaultVideoMenuSettings;
            }
        }

        internal static event Delegates.DefaultVideoMenuSettings_BeforeArgs _beforeDefaultVideoMenuSettings;
        internal static event Delegates.DefaultVideoMenuSettings_NormalArgs _afterDefaultVideoMenuSettings;

        private static void DefaultVideoMenuSettings(On.UIManager.orig_DefaultVideoMenuSettings orig, UIManager self)
        {
            Delegates.Params_DefaultVideoMenuSettings @params = new()
            {
                self = self
            };
            _beforeDefaultVideoMenuSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDefaultVideoMenuSettings != null) _afterDefaultVideoMenuSettings.Invoke(@params);
        }

        internal static void HookDefaultGamepadMenuSettings()
        {
            if (!HookedList.Contains("DefaultGamepadMenuSettings"))
            {
                HookedList.Add("DefaultGamepadMenuSettings");
                On.UIManager.DefaultGamepadMenuSettings += DefaultGamepadMenuSettings;
            }
        }

        internal static event Delegates.DefaultGamepadMenuSettings_BeforeArgs _beforeDefaultGamepadMenuSettings;
        internal static event Delegates.DefaultGamepadMenuSettings_NormalArgs _afterDefaultGamepadMenuSettings;

        private static void DefaultGamepadMenuSettings(On.UIManager.orig_DefaultGamepadMenuSettings orig,
            UIManager self)
        {
            Delegates.Params_DefaultGamepadMenuSettings @params = new()
            {
                self = self
            };
            _beforeDefaultGamepadMenuSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDefaultGamepadMenuSettings != null) _afterDefaultGamepadMenuSettings.Invoke(@params);
        }

        internal static void HookDefaultKeyboardMenuSettings()
        {
            if (!HookedList.Contains("DefaultKeyboardMenuSettings"))
            {
                HookedList.Add("DefaultKeyboardMenuSettings");
                On.UIManager.DefaultKeyboardMenuSettings += DefaultKeyboardMenuSettings;
            }
        }

        internal static event Delegates.DefaultKeyboardMenuSettings_BeforeArgs _beforeDefaultKeyboardMenuSettings;
        internal static event Delegates.DefaultKeyboardMenuSettings_NormalArgs _afterDefaultKeyboardMenuSettings;

        private static void DefaultKeyboardMenuSettings(On.UIManager.orig_DefaultKeyboardMenuSettings orig,
            UIManager self)
        {
            Delegates.Params_DefaultKeyboardMenuSettings @params = new()
            {
                self = self
            };
            _beforeDefaultKeyboardMenuSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDefaultKeyboardMenuSettings != null) _afterDefaultKeyboardMenuSettings.Invoke(@params);
        }

        internal static void HookDefaultGameMenuSettings()
        {
            if (!HookedList.Contains("DefaultGameMenuSettings"))
            {
                HookedList.Add("DefaultGameMenuSettings");
                On.UIManager.DefaultGameMenuSettings += DefaultGameMenuSettings;
            }
        }

        internal static event Delegates.DefaultGameMenuSettings_BeforeArgs _beforeDefaultGameMenuSettings;
        internal static event Delegates.DefaultGameMenuSettings_NormalArgs _afterDefaultGameMenuSettings;

        private static void DefaultGameMenuSettings(On.UIManager.orig_DefaultGameMenuSettings orig, UIManager self)
        {
            Delegates.Params_DefaultGameMenuSettings @params = new()
            {
                self = self
            };
            _beforeDefaultGameMenuSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDefaultGameMenuSettings != null) _afterDefaultGameMenuSettings.Invoke(@params);
        }

        internal static void HookLoadStoredSettings()
        {
            if (!HookedList.Contains("LoadStoredSettings"))
            {
                HookedList.Add("LoadStoredSettings");
                On.UIManager.LoadStoredSettings += LoadStoredSettings;
            }
        }

        internal static event Delegates.LoadStoredSettings_BeforeArgs _beforeLoadStoredSettings;
        internal static event Delegates.LoadStoredSettings_NormalArgs _afterLoadStoredSettings;

        private static void LoadStoredSettings(On.UIManager.orig_LoadStoredSettings orig, UIManager self)
        {
            Delegates.Params_LoadStoredSettings @params = new()
            {
                self = self
            };
            _beforeLoadStoredSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLoadStoredSettings != null) _afterLoadStoredSettings.Invoke(@params);
        }

        internal static void HookLoadAudioSettings()
        {
            if (!HookedList.Contains("LoadAudioSettings"))
            {
                HookedList.Add("LoadAudioSettings");
                On.UIManager.LoadAudioSettings += LoadAudioSettings;
            }
        }

        internal static event Delegates.LoadAudioSettings_BeforeArgs _beforeLoadAudioSettings;
        internal static event Delegates.LoadAudioSettings_NormalArgs _afterLoadAudioSettings;

        private static void LoadAudioSettings(On.UIManager.orig_LoadAudioSettings orig, UIManager self)
        {
            Delegates.Params_LoadAudioSettings @params = new()
            {
                self = self
            };
            _beforeLoadAudioSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLoadAudioSettings != null) _afterLoadAudioSettings.Invoke(@params);
        }

        internal static void HookLoadVideoSettings()
        {
            if (!HookedList.Contains("LoadVideoSettings"))
            {
                HookedList.Add("LoadVideoSettings");
                On.UIManager.LoadVideoSettings += LoadVideoSettings;
            }
        }

        internal static event Delegates.LoadVideoSettings_BeforeArgs _beforeLoadVideoSettings;
        internal static event Delegates.LoadVideoSettings_NormalArgs _afterLoadVideoSettings;

        private static void LoadVideoSettings(On.UIManager.orig_LoadVideoSettings orig, UIManager self)
        {
            Delegates.Params_LoadVideoSettings @params = new()
            {
                self = self
            };
            _beforeLoadVideoSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLoadVideoSettings != null) _afterLoadVideoSettings.Invoke(@params);
        }

        internal static void HookLoadGameOptionsSettings()
        {
            if (!HookedList.Contains("LoadGameOptionsSettings"))
            {
                HookedList.Add("LoadGameOptionsSettings");
                On.UIManager.LoadGameOptionsSettings += LoadGameOptionsSettings;
            }
        }

        internal static event Delegates.LoadGameOptionsSettings_BeforeArgs _beforeLoadGameOptionsSettings;
        internal static event Delegates.LoadGameOptionsSettings_NormalArgs _afterLoadGameOptionsSettings;

        private static void LoadGameOptionsSettings(On.UIManager.orig_LoadGameOptionsSettings orig, UIManager self)
        {
            Delegates.Params_LoadGameOptionsSettings @params = new()
            {
                self = self
            };
            _beforeLoadGameOptionsSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLoadGameOptionsSettings != null) _afterLoadGameOptionsSettings.Invoke(@params);
        }

        internal static void HookLoadControllerSettings()
        {
            if (!HookedList.Contains("LoadControllerSettings"))
            {
                HookedList.Add("LoadControllerSettings");
                On.UIManager.LoadControllerSettings += LoadControllerSettings;
            }
        }

        internal static event Delegates.LoadControllerSettings_BeforeArgs _beforeLoadControllerSettings;
        internal static event Delegates.LoadControllerSettings_NormalArgs _afterLoadControllerSettings;

        private static void LoadControllerSettings(On.UIManager.orig_LoadControllerSettings orig, UIManager self)
        {
            Delegates.Params_LoadControllerSettings @params = new()
            {
                self = self
            };
            _beforeLoadControllerSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLoadControllerSettings != null) _afterLoadControllerSettings.Invoke(@params);
        }

        internal static void HookRefreshAudioControls()
        {
            if (!HookedList.Contains("RefreshAudioControls"))
            {
                HookedList.Add("RefreshAudioControls");
                On.UIManager.RefreshAudioControls += RefreshAudioControls;
            }
        }

        internal static event Delegates.RefreshAudioControls_BeforeArgs _beforeRefreshAudioControls;
        internal static event Delegates.RefreshAudioControls_NormalArgs _afterRefreshAudioControls;

        private static void RefreshAudioControls(On.UIManager.orig_RefreshAudioControls orig, UIManager self)
        {
            Delegates.Params_RefreshAudioControls @params = new()
            {
                self = self
            };
            _beforeRefreshAudioControls?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRefreshAudioControls != null) _afterRefreshAudioControls.Invoke(@params);
        }

        internal static void HookRefreshVideoControls()
        {
            if (!HookedList.Contains("RefreshVideoControls"))
            {
                HookedList.Add("RefreshVideoControls");
                On.UIManager.RefreshVideoControls += RefreshVideoControls;
            }
        }

        internal static event Delegates.RefreshVideoControls_BeforeArgs _beforeRefreshVideoControls;
        internal static event Delegates.RefreshVideoControls_NormalArgs _afterRefreshVideoControls;

        private static void RefreshVideoControls(On.UIManager.orig_RefreshVideoControls orig, UIManager self)
        {
            Delegates.Params_RefreshVideoControls @params = new()
            {
                self = self
            };
            _beforeRefreshVideoControls?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRefreshVideoControls != null) _afterRefreshVideoControls.Invoke(@params);
        }

        internal static void HookDisableFrameCapSetting()
        {
            if (!HookedList.Contains("DisableFrameCapSetting"))
            {
                HookedList.Add("DisableFrameCapSetting");
                On.UIManager.DisableFrameCapSetting += DisableFrameCapSetting;
            }
        }

        internal static event Delegates.DisableFrameCapSetting_BeforeArgs _beforeDisableFrameCapSetting;
        internal static event Delegates.DisableFrameCapSetting_NormalArgs _afterDisableFrameCapSetting;

        private static void DisableFrameCapSetting(On.UIManager.orig_DisableFrameCapSetting orig, UIManager self)
        {
            Delegates.Params_DisableFrameCapSetting @params = new()
            {
                self = self
            };
            _beforeDisableFrameCapSetting?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDisableFrameCapSetting != null) _afterDisableFrameCapSetting.Invoke(@params);
        }

        internal static void HookDisableVsyncSetting()
        {
            if (!HookedList.Contains("DisableVsyncSetting"))
            {
                HookedList.Add("DisableVsyncSetting");
                On.UIManager.DisableVsyncSetting += DisableVsyncSetting;
            }
        }

        internal static event Delegates.DisableVsyncSetting_BeforeArgs _beforeDisableVsyncSetting;
        internal static event Delegates.DisableVsyncSetting_NormalArgs _afterDisableVsyncSetting;

        private static void DisableVsyncSetting(On.UIManager.orig_DisableVsyncSetting orig, UIManager self)
        {
            Delegates.Params_DisableVsyncSetting @params = new()
            {
                self = self
            };
            _beforeDisableVsyncSetting?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDisableVsyncSetting != null) _afterDisableVsyncSetting.Invoke(@params);
        }

        internal static void HookRefreshKeyboardControls()
        {
            if (!HookedList.Contains("RefreshKeyboardControls"))
            {
                HookedList.Add("RefreshKeyboardControls");
                On.UIManager.RefreshKeyboardControls += RefreshKeyboardControls;
            }
        }

        internal static event Delegates.RefreshKeyboardControls_BeforeArgs _beforeRefreshKeyboardControls;
        internal static event Delegates.RefreshKeyboardControls_NormalArgs _afterRefreshKeyboardControls;

        private static void RefreshKeyboardControls(On.UIManager.orig_RefreshKeyboardControls orig, UIManager self)
        {
            Delegates.Params_RefreshKeyboardControls @params = new()
            {
                self = self
            };
            _beforeRefreshKeyboardControls?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRefreshKeyboardControls != null) _afterRefreshKeyboardControls.Invoke(@params);
        }

        internal static void HookRefreshGameOptionsControls()
        {
            if (!HookedList.Contains("RefreshGameOptionsControls"))
            {
                HookedList.Add("RefreshGameOptionsControls");
                On.UIManager.RefreshGameOptionsControls += RefreshGameOptionsControls;
            }
        }

        internal static event Delegates.RefreshGameOptionsControls_BeforeArgs _beforeRefreshGameOptionsControls;
        internal static event Delegates.RefreshGameOptionsControls_NormalArgs _afterRefreshGameOptionsControls;

        private static void RefreshGameOptionsControls(On.UIManager.orig_RefreshGameOptionsControls orig,
            UIManager self)
        {
            Delegates.Params_RefreshGameOptionsControls @params = new()
            {
                self = self
            };
            _beforeRefreshGameOptionsControls?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRefreshGameOptionsControls != null) _afterRefreshGameOptionsControls.Invoke(@params);
        }

        internal static void HookRefreshAchievementsList()
        {
            if (!HookedList.Contains("RefreshAchievementsList"))
            {
                HookedList.Add("RefreshAchievementsList");
                On.UIManager.RefreshAchievementsList += RefreshAchievementsList;
            }
        }

        internal static event Delegates.RefreshAchievementsList_BeforeArgs _beforeRefreshAchievementsList;
        internal static event Delegates.RefreshAchievementsList_NormalArgs _afterRefreshAchievementsList;

        private static void RefreshAchievementsList(On.UIManager.orig_RefreshAchievementsList orig, UIManager self)
        {
            Delegates.Params_RefreshAchievementsList @params = new()
            {
                self = self
            };
            _beforeRefreshAchievementsList?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRefreshAchievementsList != null) _afterRefreshAchievementsList.Invoke(@params);
        }

        internal static void HookUpdateMenuAchievementStatus()
        {
            if (!HookedList.Contains("UpdateMenuAchievementStatus"))
            {
                HookedList.Add("UpdateMenuAchievementStatus");
                On.UIManager.UpdateMenuAchievementStatus += UpdateMenuAchievementStatus;
            }
        }

        internal static event Delegates.UpdateMenuAchievementStatus_BeforeArgs _beforeUpdateMenuAchievementStatus;
        internal static event Delegates.UpdateMenuAchievementStatus_NormalArgs _afterUpdateMenuAchievementStatus;

        private static void UpdateMenuAchievementStatus(On.UIManager.orig_UpdateMenuAchievementStatus orig,
            UIManager self, Achievement ach, MenuAchievement menuAch)
        {
            Delegates.Params_UpdateMenuAchievementStatus @params = new()
            {
                self = self, ach = ach, menuAch = menuAch
            };
            _beforeUpdateMenuAchievementStatus?.Invoke(@params);
            self = @params.self;
            ach = @params.ach;
            menuAch = @params.menuAch;
            orig(self, ach, menuAch);
            if (_afterUpdateMenuAchievementStatus != null) _afterUpdateMenuAchievementStatus.Invoke(@params);
        }

        internal static void HookTogglePauseGame()
        {
            if (!HookedList.Contains("TogglePauseGame"))
            {
                HookedList.Add("TogglePauseGame");
                On.UIManager.TogglePauseGame += TogglePauseGame;
            }
        }

        internal static event Delegates.TogglePauseGame_BeforeArgs _beforeTogglePauseGame;
        internal static event Delegates.TogglePauseGame_NormalArgs _afterTogglePauseGame;

        private static void TogglePauseGame(On.UIManager.orig_TogglePauseGame orig, UIManager self)
        {
            Delegates.Params_TogglePauseGame @params = new()
            {
                self = self
            };
            _beforeTogglePauseGame?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterTogglePauseGame != null) _afterTogglePauseGame.Invoke(@params);
        }

        internal static void HookQuitGame()
        {
            if (!HookedList.Contains("QuitGame"))
            {
                HookedList.Add("QuitGame");
                On.UIManager.QuitGame += QuitGame;
            }
        }

        internal static event Delegates.QuitGame_BeforeArgs _beforeQuitGame;
        internal static event Delegates.QuitGame_NormalArgs _afterQuitGame;

        private static void QuitGame(On.UIManager.orig_QuitGame orig, UIManager self)
        {
            Delegates.Params_QuitGame @params = new()
            {
                self = self
            };
            _beforeQuitGame?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterQuitGame != null) _afterQuitGame.Invoke(@params);
        }

        internal static void HookFadeOutMenuAudio()
        {
            if (!HookedList.Contains("FadeOutMenuAudio"))
            {
                HookedList.Add("FadeOutMenuAudio");
                On.UIManager.FadeOutMenuAudio += FadeOutMenuAudio;
            }
        }

        internal static event Delegates.FadeOutMenuAudio_BeforeArgs _beforeFadeOutMenuAudio;
        internal static event Delegates.FadeOutMenuAudio_NormalArgs _afterFadeOutMenuAudio;

        private static void FadeOutMenuAudio(On.UIManager.orig_FadeOutMenuAudio orig, UIManager self, float duration)
        {
            Delegates.Params_FadeOutMenuAudio @params = new()
            {
                self = self, duration = duration
            };
            _beforeFadeOutMenuAudio?.Invoke(@params);
            self = @params.self;
            duration = @params.duration;
            orig(self, duration);
            if (_afterFadeOutMenuAudio != null) _afterFadeOutMenuAudio.Invoke(@params);
        }

        internal static void HookAudioGoToPauseMenu()
        {
            if (!HookedList.Contains("AudioGoToPauseMenu"))
            {
                HookedList.Add("AudioGoToPauseMenu");
                On.UIManager.AudioGoToPauseMenu += AudioGoToPauseMenu;
            }
        }

        internal static event Delegates.AudioGoToPauseMenu_BeforeArgs _beforeAudioGoToPauseMenu;
        internal static event Delegates.AudioGoToPauseMenu_NormalArgs _afterAudioGoToPauseMenu;

        private static void AudioGoToPauseMenu(On.UIManager.orig_AudioGoToPauseMenu orig, UIManager self,
            float duration)
        {
            Delegates.Params_AudioGoToPauseMenu @params = new()
            {
                self = self, duration = duration
            };
            _beforeAudioGoToPauseMenu?.Invoke(@params);
            self = @params.self;
            duration = @params.duration;
            orig(self, duration);
            if (_afterAudioGoToPauseMenu != null) _afterAudioGoToPauseMenu.Invoke(@params);
        }

        internal static void HookAudioGoToGameplay()
        {
            if (!HookedList.Contains("AudioGoToGameplay"))
            {
                HookedList.Add("AudioGoToGameplay");
                On.UIManager.AudioGoToGameplay += AudioGoToGameplay;
            }
        }

        internal static event Delegates.AudioGoToGameplay_BeforeArgs _beforeAudioGoToGameplay;
        internal static event Delegates.AudioGoToGameplay_NormalArgs _afterAudioGoToGameplay;

        private static void AudioGoToGameplay(On.UIManager.orig_AudioGoToGameplay orig, UIManager self, float duration)
        {
            Delegates.Params_AudioGoToGameplay @params = new()
            {
                self = self, duration = duration
            };
            _beforeAudioGoToGameplay?.Invoke(@params);
            self = @params.self;
            duration = @params.duration;
            orig(self, duration);
            if (_afterAudioGoToGameplay != null) _afterAudioGoToGameplay.Invoke(@params);
        }

        internal static void HookConfigureMenu()
        {
            if (!HookedList.Contains("ConfigureMenu"))
            {
                HookedList.Add("ConfigureMenu");
                On.UIManager.ConfigureMenu += ConfigureMenu;
            }
        }

        internal static event Delegates.ConfigureMenu_BeforeArgs _beforeConfigureMenu;
        internal static event Delegates.ConfigureMenu_NormalArgs _afterConfigureMenu;

        private static void ConfigureMenu(On.UIManager.orig_ConfigureMenu orig, UIManager self)
        {
            Delegates.Params_ConfigureMenu @params = new()
            {
                self = self
            };
            _beforeConfigureMenu?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterConfigureMenu != null) _afterConfigureMenu.Invoke(@params);
        }

        internal static void HookHideCurrentMenu()
        {
            if (!HookedList.Contains("HideCurrentMenu"))
            {
                HookedList.Add("HideCurrentMenu");
                On.UIManager.HideCurrentMenu += HideCurrentMenu;
            }
        }

        internal static event Delegates.HideCurrentMenu_BeforeArgs _beforeHideCurrentMenu;

        private static IEnumerator HideCurrentMenu(On.UIManager.orig_HideCurrentMenu orig, UIManager self)
        {
            Delegates.Params_HideCurrentMenu @params = new()
            {
                self = self
            };
            _beforeHideCurrentMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookShowMenu()
        {
            if (!HookedList.Contains("ShowMenu"))
            {
                HookedList.Add("ShowMenu");
                On.UIManager.ShowMenu += ShowMenu;
            }
        }

        internal static event Delegates.ShowMenu_BeforeArgs _beforeShowMenu;

        private static IEnumerator ShowMenu(On.UIManager.orig_ShowMenu orig, UIManager self, MenuScreen menu)
        {
            Delegates.Params_ShowMenu @params = new()
            {
                self = self, menu = menu
            };
            _beforeShowMenu?.Invoke(@params);
            self = @params.self;
            menu = @params.menu;
            return orig(self, menu);
        }

        internal static void HookHideMenu()
        {
            if (!HookedList.Contains("HideMenu"))
            {
                HookedList.Add("HideMenu");
                On.UIManager.HideMenu += HideMenu;
            }
        }

        internal static event Delegates.HideMenu_BeforeArgs _beforeHideMenu;

        private static IEnumerator HideMenu(On.UIManager.orig_HideMenu orig, UIManager self, MenuScreen menu)
        {
            Delegates.Params_HideMenu @params = new()
            {
                self = self, menu = menu
            };
            _beforeHideMenu?.Invoke(@params);
            self = @params.self;
            menu = @params.menu;
            return orig(self, menu);
        }

        internal static void HookHideMenuInstant()
        {
            if (!HookedList.Contains("HideMenuInstant"))
            {
                HookedList.Add("HideMenuInstant");
                On.UIManager.HideMenuInstant += HideMenuInstant;
            }
        }

        internal static event Delegates.HideMenuInstant_BeforeArgs _beforeHideMenuInstant;
        internal static event Delegates.HideMenuInstant_NormalArgs _afterHideMenuInstant;

        private static void HideMenuInstant(On.UIManager.orig_HideMenuInstant orig, UIManager self, MenuScreen menu)
        {
            Delegates.Params_HideMenuInstant @params = new()
            {
                self = self, menu = menu
            };
            _beforeHideMenuInstant?.Invoke(@params);
            self = @params.self;
            menu = @params.menu;
            orig(self, menu);
            if (_afterHideMenuInstant != null) _afterHideMenuInstant.Invoke(@params);
        }

        internal static void HookHideSaveProfileMenu()
        {
            if (!HookedList.Contains("HideSaveProfileMenu"))
            {
                HookedList.Add("HideSaveProfileMenu");
                On.UIManager.HideSaveProfileMenu += HideSaveProfileMenu;
            }
        }

        internal static event Delegates.HideSaveProfileMenu_BeforeArgs _beforeHideSaveProfileMenu;

        private static IEnumerator HideSaveProfileMenu(On.UIManager.orig_HideSaveProfileMenu orig, UIManager self)
        {
            Delegates.Params_HideSaveProfileMenu @params = new()
            {
                self = self
            };
            _beforeHideSaveProfileMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookDisableScreens()
        {
            if (!HookedList.Contains("DisableScreens"))
            {
                HookedList.Add("DisableScreens");
                On.UIManager.DisableScreens += DisableScreens;
            }
        }

        internal static event Delegates.DisableScreens_BeforeArgs _beforeDisableScreens;
        internal static event Delegates.DisableScreens_NormalArgs _afterDisableScreens;

        private static void DisableScreens(On.UIManager.orig_DisableScreens orig, UIManager self)
        {
            Delegates.Params_DisableScreens @params = new()
            {
                self = self
            };
            _beforeDisableScreens?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDisableScreens != null) _afterDisableScreens.Invoke(@params);
        }

        internal static void HookShowCanvas()
        {
            if (!HookedList.Contains("ShowCanvas"))
            {
                HookedList.Add("ShowCanvas");
                On.UIManager.ShowCanvas += ShowCanvas;
            }
        }

        internal static event Delegates.ShowCanvas_BeforeArgs _beforeShowCanvas;
        internal static event Delegates.ShowCanvas_NormalArgs _afterShowCanvas;

        private static void ShowCanvas(On.UIManager.orig_ShowCanvas orig, UIManager self, Canvas canvas)
        {
            Delegates.Params_ShowCanvas @params = new()
            {
                self = self, canvas = canvas
            };
            _beforeShowCanvas?.Invoke(@params);
            self = @params.self;
            canvas = @params.canvas;
            orig(self, canvas);
            if (_afterShowCanvas != null) _afterShowCanvas.Invoke(@params);
        }

        internal static void HookHideCanvas()
        {
            if (!HookedList.Contains("HideCanvas"))
            {
                HookedList.Add("HideCanvas");
                On.UIManager.HideCanvas += HideCanvas;
            }
        }

        internal static event Delegates.HideCanvas_BeforeArgs _beforeHideCanvas;
        internal static event Delegates.HideCanvas_NormalArgs _afterHideCanvas;

        private static void HideCanvas(On.UIManager.orig_HideCanvas orig, UIManager self, Canvas canvas)
        {
            Delegates.Params_HideCanvas @params = new()
            {
                self = self, canvas = canvas
            };
            _beforeHideCanvas?.Invoke(@params);
            self = @params.self;
            canvas = @params.canvas;
            orig(self, canvas);
            if (_afterHideCanvas != null) _afterHideCanvas.Invoke(@params);
        }

        internal static void HookShowCanvasGroup()
        {
            if (!HookedList.Contains("ShowCanvasGroup"))
            {
                HookedList.Add("ShowCanvasGroup");
                On.UIManager.ShowCanvasGroup += ShowCanvasGroup;
            }
        }

        internal static event Delegates.ShowCanvasGroup_BeforeArgs _beforeShowCanvasGroup;
        internal static event Delegates.ShowCanvasGroup_NormalArgs _afterShowCanvasGroup;

        private static void ShowCanvasGroup(On.UIManager.orig_ShowCanvasGroup orig, UIManager self, CanvasGroup cg)
        {
            Delegates.Params_ShowCanvasGroup @params = new()
            {
                self = self, cg = cg
            };
            _beforeShowCanvasGroup?.Invoke(@params);
            self = @params.self;
            cg = @params.cg;
            orig(self, cg);
            if (_afterShowCanvasGroup != null) _afterShowCanvasGroup.Invoke(@params);
        }

        internal static void HookHideCanvasGroup()
        {
            if (!HookedList.Contains("HideCanvasGroup"))
            {
                HookedList.Add("HideCanvasGroup");
                On.UIManager.HideCanvasGroup += HideCanvasGroup;
            }
        }

        internal static event Delegates.HideCanvasGroup_BeforeArgs _beforeHideCanvasGroup;
        internal static event Delegates.HideCanvasGroup_NormalArgs _afterHideCanvasGroup;

        private static void HideCanvasGroup(On.UIManager.orig_HideCanvasGroup orig, UIManager self, CanvasGroup cg)
        {
            Delegates.Params_HideCanvasGroup @params = new()
            {
                self = self, cg = cg
            };
            _beforeHideCanvasGroup?.Invoke(@params);
            self = @params.self;
            cg = @params.cg;
            orig(self, cg);
            if (_afterHideCanvasGroup != null) _afterHideCanvasGroup.Invoke(@params);
        }

        internal static void HookFadeInCanvasGroup()
        {
            if (!HookedList.Contains("FadeInCanvasGroup"))
            {
                HookedList.Add("FadeInCanvasGroup");
                On.UIManager.FadeInCanvasGroup += FadeInCanvasGroup;
            }
        }

        internal static event Delegates.FadeInCanvasGroup_BeforeArgs _beforeFadeInCanvasGroup;

        private static IEnumerator FadeInCanvasGroup(On.UIManager.orig_FadeInCanvasGroup orig, UIManager self,
            CanvasGroup cg)
        {
            Delegates.Params_FadeInCanvasGroup @params = new()
            {
                self = self, cg = cg
            };
            _beforeFadeInCanvasGroup?.Invoke(@params);
            self = @params.self;
            cg = @params.cg;
            return orig(self, cg);
        }

        internal static void HookFadeInCanvasGroupAlpha()
        {
            if (!HookedList.Contains("FadeInCanvasGroupAlpha"))
            {
                HookedList.Add("FadeInCanvasGroupAlpha");
                On.UIManager.FadeInCanvasGroupAlpha += FadeInCanvasGroupAlpha;
            }
        }

        internal static event Delegates.FadeInCanvasGroupAlpha_BeforeArgs _beforeFadeInCanvasGroupAlpha;

        private static IEnumerator FadeInCanvasGroupAlpha(On.UIManager.orig_FadeInCanvasGroupAlpha orig, UIManager self,
            CanvasGroup cg, float endAlpha)
        {
            Delegates.Params_FadeInCanvasGroupAlpha @params = new()
            {
                self = self, cg = cg, endAlpha = endAlpha
            };
            _beforeFadeInCanvasGroupAlpha?.Invoke(@params);
            self = @params.self;
            cg = @params.cg;
            endAlpha = @params.endAlpha;
            return orig(self, cg, endAlpha);
        }

        internal static void HookFadeOutCanvasGroup()
        {
            if (!HookedList.Contains("FadeOutCanvasGroup"))
            {
                HookedList.Add("FadeOutCanvasGroup");
                On.UIManager.FadeOutCanvasGroup += FadeOutCanvasGroup;
            }
        }

        internal static event Delegates.FadeOutCanvasGroup_BeforeArgs _beforeFadeOutCanvasGroup;

        private static IEnumerator FadeOutCanvasGroup(On.UIManager.orig_FadeOutCanvasGroup orig, UIManager self,
            CanvasGroup cg)
        {
            Delegates.Params_FadeOutCanvasGroup @params = new()
            {
                self = self, cg = cg
            };
            _beforeFadeOutCanvasGroup?.Invoke(@params);
            self = @params.self;
            cg = @params.cg;
            return orig(self, cg);
        }

        internal static void HookFadeInSprite()
        {
            if (!HookedList.Contains("FadeInSprite"))
            {
                HookedList.Add("FadeInSprite");
                On.UIManager.FadeInSprite += FadeInSprite;
            }
        }

        internal static event Delegates.FadeInSprite_BeforeArgs _beforeFadeInSprite;

        private static IEnumerator FadeInSprite(On.UIManager.orig_FadeInSprite orig, UIManager self,
            SpriteRenderer sprite)
        {
            Delegates.Params_FadeInSprite @params = new()
            {
                self = self, sprite = sprite
            };
            _beforeFadeInSprite?.Invoke(@params);
            self = @params.self;
            sprite = @params.sprite;
            return orig(self, sprite);
        }

        internal static void HookFadeOutSprite()
        {
            if (!HookedList.Contains("FadeOutSprite"))
            {
                HookedList.Add("FadeOutSprite");
                On.UIManager.FadeOutSprite += FadeOutSprite;
            }
        }

        internal static event Delegates.FadeOutSprite_BeforeArgs _beforeFadeOutSprite;

        private static IEnumerator FadeOutSprite(On.UIManager.orig_FadeOutSprite orig, UIManager self,
            SpriteRenderer sprite)
        {
            Delegates.Params_FadeOutSprite @params = new()
            {
                self = self, sprite = sprite
            };
            _beforeFadeOutSprite?.Invoke(@params);
            self = @params.self;
            sprite = @params.sprite;
            return orig(self, sprite);
        }

        internal static void HookEnableChildren_RectTransform()
        {
            if (!HookedList.Contains("EnableChildren_RectTransform"))
            {
                HookedList.Add("EnableChildren_RectTransform");
                On.UIManager.EnableChildren_RectTransform += EnableChildren_RectTransform;
            }
        }

        internal static event Delegates.EnableChildren_RectTransform_BeforeArgs _beforeEnableChildren_RectTransform;
        internal static event Delegates.EnableChildren_RectTransform_NormalArgs _afterEnableChildren_RectTransform;

        private static void EnableChildren_RectTransform(On.UIManager.orig_EnableChildren_RectTransform orig,
            UIManager self, RectTransform parent)
        {
            Delegates.Params_EnableChildren_RectTransform @params = new()
            {
                self = self, parent = parent
            };
            _beforeEnableChildren_RectTransform?.Invoke(@params);
            self = @params.self;
            parent = @params.parent;
            orig(self, parent);
            if (_afterEnableChildren_RectTransform != null) _afterEnableChildren_RectTransform.Invoke(@params);
        }

        internal static void HookEnableChildren_Canvas()
        {
            if (!HookedList.Contains("EnableChildren_Canvas"))
            {
                HookedList.Add("EnableChildren_Canvas");
                On.UIManager.EnableChildren_Canvas += EnableChildren_Canvas;
            }
        }

        internal static event Delegates.EnableChildren_Canvas_BeforeArgs _beforeEnableChildren_Canvas;
        internal static event Delegates.EnableChildren_Canvas_NormalArgs _afterEnableChildren_Canvas;

        private static void EnableChildren_Canvas(On.UIManager.orig_EnableChildren_Canvas orig, UIManager self,
            Canvas parent)
        {
            Delegates.Params_EnableChildren_Canvas @params = new()
            {
                self = self, parent = parent
            };
            _beforeEnableChildren_Canvas?.Invoke(@params);
            self = @params.self;
            parent = @params.parent;
            orig(self, parent);
            if (_afterEnableChildren_Canvas != null) _afterEnableChildren_Canvas.Invoke(@params);
        }

        internal static void HookDisableChildren()
        {
            if (!HookedList.Contains("DisableChildren"))
            {
                HookedList.Add("DisableChildren");
                On.UIManager.DisableChildren += DisableChildren;
            }
        }

        internal static event Delegates.DisableChildren_BeforeArgs _beforeDisableChildren;
        internal static event Delegates.DisableChildren_NormalArgs _afterDisableChildren;

        private static void DisableChildren(On.UIManager.orig_DisableChildren orig, UIManager self, Canvas parent)
        {
            Delegates.Params_DisableChildren @params = new()
            {
                self = self, parent = parent
            };
            _beforeDisableChildren?.Invoke(@params);
            self = @params.self;
            parent = @params.parent;
            orig(self, parent);
            if (_afterDisableChildren != null) _afterDisableChildren.Invoke(@params);
        }

        internal static void HookGetAnimationClipLength()
        {
            if (!HookedList.Contains("GetAnimationClipLength"))
            {
                HookedList.Add("GetAnimationClipLength");
                On.UIManager.GetAnimationClipLength += GetAnimationClipLength;
            }
        }

        internal static event Delegates.GetAnimationClipLength_BeforeArgs _beforeGetAnimationClipLength;
        internal static event Delegates.GetAnimationClipLength_NormalArgs _afterGetAnimationClipLength;

        private static float GetAnimationClipLength(On.UIManager.orig_GetAnimationClipLength orig, UIManager self,
            Animator animator, string clipName)
        {
            Delegates.Params_GetAnimationClipLength @params = new()
            {
                self = self, animator = animator, clipName = clipName
            };
            _beforeGetAnimationClipLength?.Invoke(@params);
            self = @params.self;
            animator = @params.animator;
            clipName = @params.clipName;
            var retVal = orig(self, animator, clipName);
            if (_afterGetAnimationClipLength != null) retVal = _afterGetAnimationClipLength.Invoke(@params);
            return retVal;
        }

        internal static void HookMakeMenuLean()
        {
            if (!HookedList.Contains("MakeMenuLean"))
            {
                HookedList.Add("MakeMenuLean");
                On.UIManager.MakeMenuLean += MakeMenuLean;
            }
        }

        internal static event Delegates.MakeMenuLean_BeforeArgs _beforeMakeMenuLean;
        internal static event Delegates.MakeMenuLean_NormalArgs _afterMakeMenuLean;

        private static void MakeMenuLean(On.UIManager.orig_MakeMenuLean orig, UIManager self)
        {
            Delegates.Params_MakeMenuLean @params = new()
            {
                self = self
            };
            _beforeMakeMenuLean?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterMakeMenuLean != null) _afterMakeMenuLean.Invoke(@params);
        }

        internal static void Hookget_currentDynamicMenu()
        {
            if (!HookedList.Contains("get_currentDynamicMenu"))
            {
                HookedList.Add("get_currentDynamicMenu");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIManager), "get_currentDynamicMenu"),
                    get_currentDynamicMenu);
            }
        }

        internal static event Delegates.get_currentDynamicMenu_BeforeArgs _beforeget_currentDynamicMenu;
        internal static event Delegates.get_currentDynamicMenu_NormalArgs _afterget_currentDynamicMenu;

        private static MenuScreen get_currentDynamicMenu(Func<UIManager, MenuScreen> orig, UIManager self)
        {
            Delegates.Params_get_currentDynamicMenu @params = new()
            {
                self = self
            };
            _beforeget_currentDynamicMenu?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_currentDynamicMenu != null) retVal = _afterget_currentDynamicMenu.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_currentDynamicMenu()
        {
            if (!HookedList.Contains("set_currentDynamicMenu"))
            {
                HookedList.Add("set_currentDynamicMenu");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIManager), "set_currentDynamicMenu"),
                    set_currentDynamicMenu);
            }
        }

        internal static event Delegates.set_currentDynamicMenu_BeforeArgs _beforeset_currentDynamicMenu;
        internal static event Delegates.set_currentDynamicMenu_NormalArgs _afterset_currentDynamicMenu;

        private static void set_currentDynamicMenu(Action<UIManager, MenuScreen> orig, UIManager self, MenuScreen value)
        {
            Delegates.Params_set_currentDynamicMenu @params = new()
            {
                self = self, value = value
            };
            _beforeset_currentDynamicMenu?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_currentDynamicMenu != null) _afterset_currentDynamicMenu.Invoke(@params);
        }

        internal static void Hookorig_get_instance()
        {
            if (!HookedList.Contains("orig_get_instance"))
            {
                HookedList.Add("orig_get_instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIManager), "orig_get_instance", false),
                    orig_get_instance);
            }
        }

        internal static event Delegates.orig_get_instance_BeforeArgs _beforeorig_get_instance;
        internal static event Delegates.orig_get_instance_NormalArgs _afterorig_get_instance;

        private static UIManager orig_get_instance(Func<UIManager> orig)
        {
            _beforeorig_get_instance?.Invoke();
            var retVal = orig();
            if (_afterorig_get_instance != null) retVal = _afterorig_get_instance.Invoke();
            return retVal;
        }

        internal static void HookLoadImage()
        {
            if (!HookedList.Contains("LoadImage"))
            {
                HookedList.Add("LoadImage");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIManager), "LoadImage"), LoadImage);
            }
        }

        internal static event Delegates.LoadImage_BeforeArgs _beforeLoadImage;
        internal static event Delegates.LoadImage_NormalArgs _afterLoadImage;

        private static Sprite LoadImage(Func<UIManager, Sprite> orig, UIManager self)
        {
            Delegates.Params_LoadImage @params = new()
            {
                self = self
            };
            _beforeLoadImage?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterLoadImage != null) retVal = _afterLoadImage.Invoke(@params);
            return retVal;
        }

        internal static void Hookorig_Awake()
        {
            if (!HookedList.Contains("orig_Awake"))
            {
                HookedList.Add("orig_Awake");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIManager), "orig_Awake"), orig_Awake);
            }
        }

        internal static event Delegates.orig_Awake_BeforeArgs _beforeorig_Awake;
        internal static event Delegates.orig_Awake_NormalArgs _afterorig_Awake;

        private static void orig_Awake(Action<UIManager> orig, UIManager self)
        {
            Delegates.Params_orig_Awake @params = new()
            {
                self = self
            };
            _beforeorig_Awake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterorig_Awake != null) _afterorig_Awake.Invoke(@params);
        }

        internal static void Hookorig_Start()
        {
            if (!HookedList.Contains("orig_Start"))
            {
                HookedList.Add("orig_Start");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIManager), "orig_Start"), orig_Start);
            }
        }

        internal static event Delegates.orig_Start_BeforeArgs _beforeorig_Start;
        internal static event Delegates.orig_Start_NormalArgs _afterorig_Start;

        private static void orig_Start(Action<UIManager> orig, UIManager self)
        {
            Delegates.Params_orig_Start @params = new()
            {
                self = self
            };
            _beforeorig_Start?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterorig_Start != null) _afterorig_Start.Invoke(@params);
        }

        internal static void Hookorig_HideCurrentMenu()
        {
            if (!HookedList.Contains("orig_HideCurrentMenu"))
            {
                HookedList.Add("orig_HideCurrentMenu");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIManager), "orig_HideCurrentMenu"),
                    orig_HideCurrentMenu);
            }
        }

        internal static event Delegates.orig_HideCurrentMenu_BeforeArgs _beforeorig_HideCurrentMenu;

        private static IEnumerator orig_HideCurrentMenu(Func<UIManager, IEnumerator> orig, UIManager self)
        {
            Delegates.Params_orig_HideCurrentMenu @params = new()
            {
                self = self
            };
            _beforeorig_HideCurrentMenu?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookUIGoToDynamicMenu()
        {
            if (!HookedList.Contains("UIGoToDynamicMenu"))
            {
                HookedList.Add("UIGoToDynamicMenu");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIManager), "UIGoToDynamicMenu"), UIGoToDynamicMenu);
            }
        }

        internal static event Delegates.UIGoToDynamicMenu_BeforeArgs _beforeUIGoToDynamicMenu;
        internal static event Delegates.UIGoToDynamicMenu_NormalArgs _afterUIGoToDynamicMenu;

        private static void UIGoToDynamicMenu(Action<UIManager, MenuScreen> orig, UIManager self, MenuScreen menu)
        {
            Delegates.Params_UIGoToDynamicMenu @params = new()
            {
                self = self, menu = menu
            };
            _beforeUIGoToDynamicMenu?.Invoke(@params);
            self = @params.self;
            menu = @params.menu;
            orig(self, menu);
            if (_afterUIGoToDynamicMenu != null) _afterUIGoToDynamicMenu.Invoke(@params);
        }

        internal static void HookGoToDynamicMenu()
        {
            if (!HookedList.Contains("GoToDynamicMenu"))
            {
                HookedList.Add("GoToDynamicMenu");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIManager), "GoToDynamicMenu"), GoToDynamicMenu);
            }
        }

        internal static event Delegates.GoToDynamicMenu_BeforeArgs _beforeGoToDynamicMenu;

        private static IEnumerator GoToDynamicMenu(Func<UIManager, MenuScreen, IEnumerator> orig, UIManager self,
            MenuScreen menu)
        {
            Delegates.Params_GoToDynamicMenu @params = new()
            {
                self = self, menu = menu
            };
            _beforeGoToDynamicMenu?.Invoke(@params);
            self = @params.self;
            menu = @params.menu;
            return orig(self, menu);
        }

        internal static void HookUILeaveDynamicMenu()
        {
            if (!HookedList.Contains("UILeaveDynamicMenu"))
            {
                HookedList.Add("UILeaveDynamicMenu");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIManager), "UILeaveDynamicMenu"), UILeaveDynamicMenu);
            }
        }

        internal static event Delegates.UILeaveDynamicMenu_BeforeArgs _beforeUILeaveDynamicMenu;
        internal static event Delegates.UILeaveDynamicMenu_NormalArgs _afterUILeaveDynamicMenu;

        private static void UILeaveDynamicMenu(Action<UIManager, MenuScreen, MainMenuState> orig, UIManager self,
            MenuScreen to, MainMenuState state)
        {
            Delegates.Params_UILeaveDynamicMenu @params = new()
            {
                self = self, to = to, state = state
            };
            _beforeUILeaveDynamicMenu?.Invoke(@params);
            self = @params.self;
            to = @params.to;
            state = @params.state;
            orig(self, to, state);
            if (_afterUILeaveDynamicMenu != null) _afterUILeaveDynamicMenu.Invoke(@params);
        }

        internal static void HookLeaveDynamicMenu()
        {
            if (!HookedList.Contains("LeaveDynamicMenu"))
            {
                HookedList.Add("LeaveDynamicMenu");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIManager), "LeaveDynamicMenu"), LeaveDynamicMenu);
            }
        }

        internal static event Delegates.LeaveDynamicMenu_BeforeArgs _beforeLeaveDynamicMenu;

        private static IEnumerator LeaveDynamicMenu(Func<UIManager, MenuScreen, MainMenuState, IEnumerator> orig,
            UIManager self, MenuScreen to, MainMenuState state)
        {
            Delegates.Params_LeaveDynamicMenu @params = new()
            {
                self = self, to = to, state = state
            };
            _beforeLeaveDynamicMenu?.Invoke(@params);
            self = @params.self;
            to = @params.to;
            state = @params.state;
            return orig(self, to, state);
        }

        internal static void HookUIPauseToDynamicMenu()
        {
            if (!HookedList.Contains("UIPauseToDynamicMenu"))
            {
                HookedList.Add("UIPauseToDynamicMenu");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIManager), "UIPauseToDynamicMenu"),
                    UIPauseToDynamicMenu);
            }
        }

        internal static event Delegates.UIPauseToDynamicMenu_BeforeArgs _beforeUIPauseToDynamicMenu;
        internal static event Delegates.UIPauseToDynamicMenu_NormalArgs _afterUIPauseToDynamicMenu;

        private static void UIPauseToDynamicMenu(Action<UIManager, MenuScreen> orig, UIManager self, MenuScreen to)
        {
            Delegates.Params_UIPauseToDynamicMenu @params = new()
            {
                self = self, to = to
            };
            _beforeUIPauseToDynamicMenu?.Invoke(@params);
            self = @params.self;
            to = @params.to;
            orig(self, to);
            if (_afterUIPauseToDynamicMenu != null) _afterUIPauseToDynamicMenu.Invoke(@params);
        }

        internal static void HookPauseToDynamicMenu()
        {
            if (!HookedList.Contains("PauseToDynamicMenu"))
            {
                HookedList.Add("PauseToDynamicMenu");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UIManager), "PauseToDynamicMenu"), PauseToDynamicMenu);
            }
        }

        internal static event Delegates.PauseToDynamicMenu_BeforeArgs _beforePauseToDynamicMenu;

        private static IEnumerator PauseToDynamicMenu(Func<UIManager, MenuScreen, IEnumerator> orig, UIManager self,
            MenuScreen to)
        {
            Delegates.Params_PauseToDynamicMenu @params = new()
            {
                self = self, to = to
            };
            _beforePauseToDynamicMenu?.Invoke(@params);
            self = @params.self;
            to = @params.to;
            return orig(self, to);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ApplyAudioMenuSettings_BeforeArgs(Params_ApplyAudioMenuSettings args);

        public delegate void ApplyAudioMenuSettings_NormalArgs(Params_ApplyAudioMenuSettings args);

        public delegate void ApplyBrightnessSettings_BeforeArgs(Params_ApplyBrightnessSettings args);

        public delegate void ApplyBrightnessSettings_NormalArgs(Params_ApplyBrightnessSettings args);

        public delegate void ApplyControllerMenuSettings_BeforeArgs(Params_ApplyControllerMenuSettings args);

        public delegate void ApplyControllerMenuSettings_NormalArgs(Params_ApplyControllerMenuSettings args);

        public delegate void ApplyGameMenuSettings_BeforeArgs(Params_ApplyGameMenuSettings args);

        public delegate void ApplyGameMenuSettings_NormalArgs(Params_ApplyGameMenuSettings args);

        public delegate void ApplyKeyboardMenuSettings_BeforeArgs(Params_ApplyKeyboardMenuSettings args);

        public delegate void ApplyKeyboardMenuSettings_NormalArgs(Params_ApplyKeyboardMenuSettings args);

        public delegate void ApplyOverscanSettings_BeforeArgs(Params_ApplyOverscanSettings args);

        public delegate void ApplyOverscanSettings_NormalArgs(Params_ApplyOverscanSettings args);

        public delegate void ApplyRemapGamepadMenuSettings_BeforeArgs(Params_ApplyRemapGamepadMenuSettings args);

        public delegate void ApplyRemapGamepadMenuSettings_NormalArgs(Params_ApplyRemapGamepadMenuSettings args);

        public delegate void ApplyVideoMenuSettings_BeforeArgs(Params_ApplyVideoMenuSettings args);

        public delegate void ApplyVideoMenuSettings_NormalArgs(Params_ApplyVideoMenuSettings args);

        public delegate void AudioGoToGameplay_BeforeArgs(Params_AudioGoToGameplay args);

        public delegate void AudioGoToGameplay_NormalArgs(Params_AudioGoToGameplay args);

        public delegate void AudioGoToPauseMenu_BeforeArgs(Params_AudioGoToPauseMenu args);

        public delegate void AudioGoToPauseMenu_NormalArgs(Params_AudioGoToPauseMenu args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void ConfigureMenu_BeforeArgs(Params_ConfigureMenu args);

        public delegate void ConfigureMenu_NormalArgs(Params_ConfigureMenu args);

        public delegate void ContinueGame_BeforeArgs(Params_ContinueGame args);

        public delegate void ContinueGame_NormalArgs(Params_ContinueGame args);

        public delegate void DefaultAudioMenuSettings_BeforeArgs(Params_DefaultAudioMenuSettings args);

        public delegate void DefaultAudioMenuSettings_NormalArgs(Params_DefaultAudioMenuSettings args);

        public delegate void DefaultGameMenuSettings_BeforeArgs(Params_DefaultGameMenuSettings args);

        public delegate void DefaultGameMenuSettings_NormalArgs(Params_DefaultGameMenuSettings args);

        public delegate void DefaultGamepadMenuSettings_BeforeArgs(Params_DefaultGamepadMenuSettings args);

        public delegate void DefaultGamepadMenuSettings_NormalArgs(Params_DefaultGamepadMenuSettings args);

        public delegate void DefaultKeyboardMenuSettings_BeforeArgs(Params_DefaultKeyboardMenuSettings args);

        public delegate void DefaultKeyboardMenuSettings_NormalArgs(Params_DefaultKeyboardMenuSettings args);

        public delegate void DefaultVideoMenuSettings_BeforeArgs(Params_DefaultVideoMenuSettings args);

        public delegate void DefaultVideoMenuSettings_NormalArgs(Params_DefaultVideoMenuSettings args);

        public delegate void DisableChildren_BeforeArgs(Params_DisableChildren args);

        public delegate void DisableChildren_NormalArgs(Params_DisableChildren args);

        public delegate void DisableFrameCapSetting_BeforeArgs(Params_DisableFrameCapSetting args);

        public delegate void DisableFrameCapSetting_NormalArgs(Params_DisableFrameCapSetting args);

        public delegate void DisableScreens_BeforeArgs(Params_DisableScreens args);

        public delegate void DisableScreens_NormalArgs(Params_DisableScreens args);

        public delegate void DisableVsyncSetting_BeforeArgs(Params_DisableVsyncSetting args);

        public delegate void DisableVsyncSetting_NormalArgs(Params_DisableVsyncSetting args);

        public delegate void EnableChildren_Canvas_BeforeArgs(Params_EnableChildren_Canvas args);

        public delegate void EnableChildren_Canvas_NormalArgs(Params_EnableChildren_Canvas args);

        public delegate void EnableChildren_RectTransform_BeforeArgs(Params_EnableChildren_RectTransform args);

        public delegate void EnableChildren_RectTransform_NormalArgs(Params_EnableChildren_RectTransform args);

        public delegate void FadeInCanvasGroup_BeforeArgs(Params_FadeInCanvasGroup args);

        public delegate IEnumerator FadeInCanvasGroup_NormalArgs(Params_FadeInCanvasGroup args);

        public delegate void FadeInCanvasGroupAlpha_BeforeArgs(Params_FadeInCanvasGroupAlpha args);

        public delegate IEnumerator FadeInCanvasGroupAlpha_NormalArgs(Params_FadeInCanvasGroupAlpha args);

        public delegate void FadeInSprite_BeforeArgs(Params_FadeInSprite args);

        public delegate IEnumerator FadeInSprite_NormalArgs(Params_FadeInSprite args);

        public delegate void FadeOutCanvasGroup_BeforeArgs(Params_FadeOutCanvasGroup args);

        public delegate IEnumerator FadeOutCanvasGroup_NormalArgs(Params_FadeOutCanvasGroup args);

        public delegate void FadeOutMenuAudio_BeforeArgs(Params_FadeOutMenuAudio args);

        public delegate void FadeOutMenuAudio_NormalArgs(Params_FadeOutMenuAudio args);

        public delegate void FadeOutSprite_BeforeArgs(Params_FadeOutSprite args);

        public delegate IEnumerator FadeOutSprite_NormalArgs(Params_FadeOutSprite args);

        public delegate void get_currentDynamicMenu_BeforeArgs(Params_get_currentDynamicMenu args);

        public delegate MenuScreen get_currentDynamicMenu_NormalArgs(Params_get_currentDynamicMenu args);

        public delegate void get_instance_BeforeArgs();

        public delegate UIManager get_instance_NormalArgs();

        public delegate void get_IsAnimatingMenus_BeforeArgs(Params_get_IsAnimatingMenus args);

        public delegate bool get_IsAnimatingMenus_NormalArgs(Params_get_IsAnimatingMenus args);

        public delegate void get_IsFadingMenu_BeforeArgs(Params_get_IsFadingMenu args);

        public delegate bool get_IsFadingMenu_NormalArgs(Params_get_IsFadingMenu args);

        public delegate void GetAnimationClipLength_BeforeArgs(Params_GetAnimationClipLength args);

        public delegate float GetAnimationClipLength_NormalArgs(Params_GetAnimationClipLength args);

        public delegate void GoToAchievementsMenu_BeforeArgs(Params_GoToAchievementsMenu args);

        public delegate IEnumerator GoToAchievementsMenu_NormalArgs(Params_GoToAchievementsMenu args);

        public delegate void GoToAudioMenu_BeforeArgs(Params_GoToAudioMenu args);

        public delegate IEnumerator GoToAudioMenu_NormalArgs(Params_GoToAudioMenu args);

        public delegate void GoToBrightnessMenu_BeforeArgs(Params_GoToBrightnessMenu args);

        public delegate IEnumerator GoToBrightnessMenu_NormalArgs(Params_GoToBrightnessMenu args);

        public delegate void GoToControllerMenu_BeforeArgs(Params_GoToControllerMenu args);

        public delegate IEnumerator GoToControllerMenu_NormalArgs(Params_GoToControllerMenu args);

        public delegate void GoToDynamicMenu_BeforeArgs(Params_GoToDynamicMenu args);

        public delegate IEnumerator GoToDynamicMenu_NormalArgs(Params_GoToDynamicMenu args);

        public delegate void GoToEngageMenu_BeforeArgs(Params_GoToEngageMenu args);

        public delegate IEnumerator GoToEngageMenu_NormalArgs(Params_GoToEngageMenu args);

        public delegate void GoToExtrasContentMenu_BeforeArgs(Params_GoToExtrasContentMenu args);

        public delegate IEnumerator GoToExtrasContentMenu_NormalArgs(Params_GoToExtrasContentMenu args);

        public delegate void GoToExtrasMenu_BeforeArgs(Params_GoToExtrasMenu args);

        public delegate IEnumerator GoToExtrasMenu_NormalArgs(Params_GoToExtrasMenu args);

        public delegate void GoToGameOptionsMenu_BeforeArgs(Params_GoToGameOptionsMenu args);

        public delegate IEnumerator GoToGameOptionsMenu_NormalArgs(Params_GoToGameOptionsMenu args);

        public delegate void GoToKeyboardMenu_BeforeArgs(Params_GoToKeyboardMenu args);

        public delegate IEnumerator GoToKeyboardMenu_NormalArgs(Params_GoToKeyboardMenu args);

        public delegate void GoToMainMenu_BeforeArgs(Params_GoToMainMenu args);

        public delegate IEnumerator GoToMainMenu_NormalArgs(Params_GoToMainMenu args);

        public delegate void GoToMenuCredits_BeforeArgs(Params_GoToMenuCredits args);

        public delegate IEnumerator GoToMenuCredits_NormalArgs(Params_GoToMenuCredits args);

        public delegate void GoToNoSaveMenu_BeforeArgs(Params_GoToNoSaveMenu args);

        public delegate IEnumerator GoToNoSaveMenu_NormalArgs(Params_GoToNoSaveMenu args);

        public delegate void GoToOptionsMenu_BeforeArgs(Params_GoToOptionsMenu args);

        public delegate IEnumerator GoToOptionsMenu_NormalArgs(Params_GoToOptionsMenu args);

        public delegate void GoToOverscanMenu_BeforeArgs(Params_GoToOverscanMenu args);

        public delegate IEnumerator GoToOverscanMenu_NormalArgs(Params_GoToOverscanMenu args);

        public delegate void GoToPauseMenu_BeforeArgs(Params_GoToPauseMenu args);

        public delegate IEnumerator GoToPauseMenu_NormalArgs(Params_GoToPauseMenu args);

        public delegate void GoToPlayModeMenu_BeforeArgs(Params_GoToPlayModeMenu args);

        public delegate IEnumerator GoToPlayModeMenu_NormalArgs(Params_GoToPlayModeMenu args);

        public delegate void GoToProfileMenu_BeforeArgs(Params_GoToProfileMenu args);

        public delegate IEnumerator GoToProfileMenu_NormalArgs(Params_GoToProfileMenu args);

        public delegate void GoToQuitGamePrompt_BeforeArgs(Params_GoToQuitGamePrompt args);

        public delegate IEnumerator GoToQuitGamePrompt_NormalArgs(Params_GoToQuitGamePrompt args);

        public delegate void GoToRemapControllerMenu_BeforeArgs(Params_GoToRemapControllerMenu args);

        public delegate IEnumerator GoToRemapControllerMenu_NormalArgs(Params_GoToRemapControllerMenu args);

        public delegate void GoToResolutionPrompt_BeforeArgs(Params_GoToResolutionPrompt args);

        public delegate IEnumerator GoToResolutionPrompt_NormalArgs(Params_GoToResolutionPrompt args);

        public delegate void GoToReturnMenuPrompt_BeforeArgs(Params_GoToReturnMenuPrompt args);

        public delegate IEnumerator GoToReturnMenuPrompt_NormalArgs(Params_GoToReturnMenuPrompt args);

        public delegate void GoToVideoMenu_BeforeArgs(Params_GoToVideoMenu args);

        public delegate IEnumerator GoToVideoMenu_NormalArgs(Params_GoToVideoMenu args);

        public delegate void HideCanvas_BeforeArgs(Params_HideCanvas args);

        public delegate void HideCanvas_NormalArgs(Params_HideCanvas args);

        public delegate void HideCanvasGroup_BeforeArgs(Params_HideCanvasGroup args);

        public delegate void HideCanvasGroup_NormalArgs(Params_HideCanvasGroup args);

        public delegate void HideCurrentMenu_BeforeArgs(Params_HideCurrentMenu args);

        public delegate IEnumerator HideCurrentMenu_NormalArgs(Params_HideCurrentMenu args);

        public delegate void HideCutscenePrompt_BeforeArgs(Params_HideCutscenePrompt args);

        public delegate void HideCutscenePrompt_NormalArgs(Params_HideCutscenePrompt args);

        public delegate void HideMenu_BeforeArgs(Params_HideMenu args);

        public delegate IEnumerator HideMenu_NormalArgs(Params_HideMenu args);

        public delegate void HideMenuInstant_BeforeArgs(Params_HideMenuInstant args);

        public delegate void HideMenuInstant_NormalArgs(Params_HideMenuInstant args);

        public delegate void HideSaveProfileMenu_BeforeArgs(Params_HideSaveProfileMenu args);

        public delegate IEnumerator HideSaveProfileMenu_NormalArgs(Params_HideSaveProfileMenu args);

        public delegate void LeaveDynamicMenu_BeforeArgs(Params_LeaveDynamicMenu args);

        public delegate IEnumerator LeaveDynamicMenu_NormalArgs(Params_LeaveDynamicMenu args);

        public delegate void LeaveExitToMenuPrompt_BeforeArgs(Params_LeaveExitToMenuPrompt args);

        public delegate IEnumerator LeaveExitToMenuPrompt_NormalArgs(Params_LeaveExitToMenuPrompt args);

        public delegate void LeaveOptionsMenu_BeforeArgs(Params_LeaveOptionsMenu args);

        public delegate IEnumerator LeaveOptionsMenu_NormalArgs(Params_LeaveOptionsMenu args);

        public delegate void LoadAudioSettings_BeforeArgs(Params_LoadAudioSettings args);

        public delegate void LoadAudioSettings_NormalArgs(Params_LoadAudioSettings args);

        public delegate void LoadControllerSettings_BeforeArgs(Params_LoadControllerSettings args);

        public delegate void LoadControllerSettings_NormalArgs(Params_LoadControllerSettings args);

        public delegate void LoadGameOptionsSettings_BeforeArgs(Params_LoadGameOptionsSettings args);

        public delegate void LoadGameOptionsSettings_NormalArgs(Params_LoadGameOptionsSettings args);

        public delegate void LoadImage_BeforeArgs(Params_LoadImage args);

        public delegate Sprite LoadImage_NormalArgs(Params_LoadImage args);

        public delegate void LoadStoredSettings_BeforeArgs(Params_LoadStoredSettings args);

        public delegate void LoadStoredSettings_NormalArgs(Params_LoadStoredSettings args);

        public delegate void LoadVideoSettings_BeforeArgs(Params_LoadVideoSettings args);

        public delegate void LoadVideoSettings_NormalArgs(Params_LoadVideoSettings args);

        public delegate void MakeMenuLean_BeforeArgs(Params_MakeMenuLean args);

        public delegate void MakeMenuLean_NormalArgs(Params_MakeMenuLean args);

        public delegate void orig_Awake_BeforeArgs(Params_orig_Awake args);

        public delegate void orig_Awake_NormalArgs(Params_orig_Awake args);

        public delegate void orig_get_instance_BeforeArgs();

        public delegate UIManager orig_get_instance_NormalArgs();

        public delegate void orig_HideCurrentMenu_BeforeArgs(Params_orig_HideCurrentMenu args);

        public delegate IEnumerator orig_HideCurrentMenu_NormalArgs(Params_orig_HideCurrentMenu args);

        public delegate void orig_Start_BeforeArgs(Params_orig_Start args);

        public delegate void orig_Start_NormalArgs(Params_orig_Start args);

        public delegate void PauseToDynamicMenu_BeforeArgs(Params_PauseToDynamicMenu args);

        public delegate IEnumerator PauseToDynamicMenu_NormalArgs(Params_PauseToDynamicMenu args);

        public delegate void PrepareSaveFilesInOrder_BeforeArgs(Params_PrepareSaveFilesInOrder args);

        public delegate IEnumerator PrepareSaveFilesInOrder_NormalArgs(Params_PrepareSaveFilesInOrder args);

        public delegate void QuitGame_BeforeArgs(Params_QuitGame args);

        public delegate void QuitGame_NormalArgs(Params_QuitGame args);

        public delegate void RefreshAchievementsList_BeforeArgs(Params_RefreshAchievementsList args);

        public delegate void RefreshAchievementsList_NormalArgs(Params_RefreshAchievementsList args);

        public delegate void RefreshAudioControls_BeforeArgs(Params_RefreshAudioControls args);

        public delegate void RefreshAudioControls_NormalArgs(Params_RefreshAudioControls args);

        public delegate void RefreshGameOptionsControls_BeforeArgs(Params_RefreshGameOptionsControls args);

        public delegate void RefreshGameOptionsControls_NormalArgs(Params_RefreshGameOptionsControls args);

        public delegate void RefreshKeyboardControls_BeforeArgs(Params_RefreshKeyboardControls args);

        public delegate void RefreshKeyboardControls_NormalArgs(Params_RefreshKeyboardControls args);

        public delegate void RefreshVideoControls_BeforeArgs(Params_RefreshVideoControls args);

        public delegate void RefreshVideoControls_NormalArgs(Params_RefreshVideoControls args);

        public delegate void ReturnToMainMenu_BeforeArgs(Params_ReturnToMainMenu args);

        public delegate IEnumerator ReturnToMainMenu_NormalArgs(Params_ReturnToMainMenu args);

        public delegate void SaveBrightnessSettings_BeforeArgs(Params_SaveBrightnessSettings args);

        public delegate void SaveBrightnessSettings_NormalArgs(Params_SaveBrightnessSettings args);

        public delegate void SaveOverscanSettings_BeforeArgs(Params_SaveOverscanSettings args);

        public delegate void SaveOverscanSettings_NormalArgs(Params_SaveOverscanSettings args);

        public delegate void SceneInit_BeforeArgs(Params_SceneInit args);

        public delegate void SceneInit_NormalArgs(Params_SceneInit args);

        public delegate void set_currentDynamicMenu_BeforeArgs(Params_set_currentDynamicMenu args);

        public delegate void set_currentDynamicMenu_NormalArgs(Params_set_currentDynamicMenu args);

        public delegate void SetMenuState_BeforeArgs(Params_SetMenuState args);

        public delegate void SetMenuState_NormalArgs(Params_SetMenuState args);

        public delegate void SetState_BeforeArgs(Params_SetState args);

        public delegate void SetState_NormalArgs(Params_SetState args);

        public delegate void SetUIStartState_BeforeArgs(Params_SetUIStartState args);

        public delegate void SetUIStartState_NormalArgs(Params_SetUIStartState args);

        public delegate void SetupRefs_BeforeArgs(Params_SetupRefs args);

        public delegate void SetupRefs_NormalArgs(Params_SetupRefs args);

        public delegate void ShowCanvas_BeforeArgs(Params_ShowCanvas args);

        public delegate void ShowCanvas_NormalArgs(Params_ShowCanvas args);

        public delegate void ShowCanvasGroup_BeforeArgs(Params_ShowCanvasGroup args);

        public delegate void ShowCanvasGroup_NormalArgs(Params_ShowCanvasGroup args);

        public delegate void ShowMainMenuHome_BeforeArgs(Params_ShowMainMenuHome args);

        public delegate IEnumerator ShowMainMenuHome_NormalArgs(Params_ShowMainMenuHome args);

        public delegate void ShowMenu_BeforeArgs(Params_ShowMenu args);

        public delegate IEnumerator ShowMenu_NormalArgs(Params_ShowMenu args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void StartMenuAnimationCoroutine_BeforeArgs(Params_StartMenuAnimationCoroutine args);

        public delegate Coroutine StartMenuAnimationCoroutine_NormalArgs(Params_StartMenuAnimationCoroutine args);

        public delegate void
            StartMenuAnimationCoroutineWorker_BeforeArgs(Params_StartMenuAnimationCoroutineWorker args);

        public delegate IEnumerator StartMenuAnimationCoroutineWorker_NormalArgs(
            Params_StartMenuAnimationCoroutineWorker args);

        public delegate void StartNewGame_BeforeArgs(Params_StartNewGame args);

        public delegate void StartNewGame_NormalArgs(Params_StartNewGame args);

        public delegate void TogglePauseGame_BeforeArgs(Params_TogglePauseGame args);

        public delegate void TogglePauseGame_NormalArgs(Params_TogglePauseGame args);

        public delegate void UIClearPauseMenu_BeforeArgs(Params_UIClearPauseMenu args);

        public delegate void UIClearPauseMenu_NormalArgs(Params_UIClearPauseMenu args);

        public delegate void UIClosePauseMenu_BeforeArgs(Params_UIClosePauseMenu args);

        public delegate void UIClosePauseMenu_NormalArgs(Params_UIClosePauseMenu args);

        public delegate void UIExplicitSwitchUser_BeforeArgs(Params_UIExplicitSwitchUser args);

        public delegate void UIExplicitSwitchUser_NormalArgs(Params_UIExplicitSwitchUser args);

        public delegate void UIGoToAchievementsMenu_BeforeArgs(Params_UIGoToAchievementsMenu args);

        public delegate void UIGoToAchievementsMenu_NormalArgs(Params_UIGoToAchievementsMenu args);

        public delegate void UIGoToAudioMenu_BeforeArgs(Params_UIGoToAudioMenu args);

        public delegate void UIGoToAudioMenu_NormalArgs(Params_UIGoToAudioMenu args);

        public delegate void UIGoToBrightnessMenu_BeforeArgs(Params_UIGoToBrightnessMenu args);

        public delegate void UIGoToBrightnessMenu_NormalArgs(Params_UIGoToBrightnessMenu args);

        public delegate void UIGoToControllerMenu_BeforeArgs(Params_UIGoToControllerMenu args);

        public delegate void UIGoToControllerMenu_NormalArgs(Params_UIGoToControllerMenu args);

        public delegate void UIGoToDynamicMenu_BeforeArgs(Params_UIGoToDynamicMenu args);

        public delegate void UIGoToDynamicMenu_NormalArgs(Params_UIGoToDynamicMenu args);

        public delegate void UIGoToEngageMenu_BeforeArgs(Params_UIGoToEngageMenu args);

        public delegate void UIGoToEngageMenu_NormalArgs(Params_UIGoToEngageMenu args);

        public delegate void UIGoToExtrasContentMenu_BeforeArgs(Params_UIGoToExtrasContentMenu args);

        public delegate void UIGoToExtrasContentMenu_NormalArgs(Params_UIGoToExtrasContentMenu args);

        public delegate void UIGoToExtrasMenu_BeforeArgs(Params_UIGoToExtrasMenu args);

        public delegate void UIGoToExtrasMenu_NormalArgs(Params_UIGoToExtrasMenu args);

        public delegate void UIGoToGameOptionsMenu_BeforeArgs(Params_UIGoToGameOptionsMenu args);

        public delegate void UIGoToGameOptionsMenu_NormalArgs(Params_UIGoToGameOptionsMenu args);

        public delegate void UIGoToKeyboardMenu_BeforeArgs(Params_UIGoToKeyboardMenu args);

        public delegate void UIGoToKeyboardMenu_NormalArgs(Params_UIGoToKeyboardMenu args);

        public delegate void UIGoToMainMenu_BeforeArgs(Params_UIGoToMainMenu args);

        public delegate void UIGoToMainMenu_NormalArgs(Params_UIGoToMainMenu args);

        public delegate void UIGoToMenuCredits_BeforeArgs(Params_UIGoToMenuCredits args);

        public delegate void UIGoToMenuCredits_NormalArgs(Params_UIGoToMenuCredits args);

        public delegate void UIGoToNoSaveMenu_BeforeArgs(Params_UIGoToNoSaveMenu args);

        public delegate void UIGoToNoSaveMenu_NormalArgs(Params_UIGoToNoSaveMenu args);

        public delegate void UIGoToOptionsMenu_BeforeArgs(Params_UIGoToOptionsMenu args);

        public delegate void UIGoToOptionsMenu_NormalArgs(Params_UIGoToOptionsMenu args);

        public delegate void UIGoToOverscanMenu_BeforeArgs(Params_UIGoToOverscanMenu args);

        public delegate void UIGoToOverscanMenu_NormalArgs(Params_UIGoToOverscanMenu args);

        public delegate void UIGoToPauseMenu_BeforeArgs(Params_UIGoToPauseMenu args);

        public delegate void UIGoToPauseMenu_NormalArgs(Params_UIGoToPauseMenu args);

        public delegate void UIGoToPlayModeMenu_BeforeArgs(Params_UIGoToPlayModeMenu args);

        public delegate void UIGoToPlayModeMenu_NormalArgs(Params_UIGoToPlayModeMenu args);

        public delegate void UIGoToProfileMenu_BeforeArgs(Params_UIGoToProfileMenu args);

        public delegate void UIGoToProfileMenu_NormalArgs(Params_UIGoToProfileMenu args);

        public delegate void UIGoToRemapControllerMenu_BeforeArgs(Params_UIGoToRemapControllerMenu args);

        public delegate void UIGoToRemapControllerMenu_NormalArgs(Params_UIGoToRemapControllerMenu args);

        public delegate void UIGoToVideoMenu_BeforeArgs(Params_UIGoToVideoMenu args);

        public delegate void UIGoToVideoMenu_NormalArgs(Params_UIGoToVideoMenu args);

        public delegate void UILeaveDynamicMenu_BeforeArgs(Params_UILeaveDynamicMenu args);

        public delegate void UILeaveDynamicMenu_NormalArgs(Params_UILeaveDynamicMenu args);

        public delegate void UILeaveExitToMenuPrompt_BeforeArgs(Params_UILeaveExitToMenuPrompt args);

        public delegate void UILeaveExitToMenuPrompt_NormalArgs(Params_UILeaveExitToMenuPrompt args);

        public delegate void UILeaveOptionsMenu_BeforeArgs(Params_UILeaveOptionsMenu args);

        public delegate void UILeaveOptionsMenu_NormalArgs(Params_UILeaveOptionsMenu args);

        public delegate void UIMainStartGame_BeforeArgs(Params_UIMainStartGame args);

        public delegate void UIMainStartGame_NormalArgs(Params_UIMainStartGame args);

        public delegate void UIPauseToDynamicMenu_BeforeArgs(Params_UIPauseToDynamicMenu args);

        public delegate void UIPauseToDynamicMenu_NormalArgs(Params_UIPauseToDynamicMenu args);

        public delegate void UIReturnToMainMenu_BeforeArgs(Params_UIReturnToMainMenu args);

        public delegate void UIReturnToMainMenu_NormalArgs(Params_UIReturnToMainMenu args);

        public delegate void UIReturnToProfileMenu_BeforeArgs(Params_UIReturnToProfileMenu args);

        public delegate void UIReturnToProfileMenu_NormalArgs(Params_UIReturnToProfileMenu args);

        public delegate void UIShowQuitGamePrompt_BeforeArgs(Params_UIShowQuitGamePrompt args);

        public delegate void UIShowQuitGamePrompt_NormalArgs(Params_UIShowQuitGamePrompt args);

        public delegate void UIShowResolutionPrompt_BeforeArgs(Params_UIShowResolutionPrompt args);

        public delegate void UIShowResolutionPrompt_NormalArgs(Params_UIShowResolutionPrompt args);

        public delegate void UIShowReturnMenuPrompt_BeforeArgs(Params_UIShowReturnMenuPrompt args);

        public delegate void UIShowReturnMenuPrompt_NormalArgs(Params_UIShowReturnMenuPrompt args);

        public delegate void UIStartNewGame_BeforeArgs(Params_UIStartNewGame args);

        public delegate void UIStartNewGame_NormalArgs(Params_UIStartNewGame args);

        public delegate void UIStartNewGameContinue_BeforeArgs(Params_UIStartNewGameContinue args);

        public delegate void UIStartNewGameContinue_NormalArgs(Params_UIStartNewGameContinue args);

        public delegate void UnClearPauseMenu_BeforeArgs(Params_UnClearPauseMenu args);

        public delegate void UnClearPauseMenu_NormalArgs(Params_UnClearPauseMenu args);

        public delegate void UpdateMenuAchievementStatus_BeforeArgs(Params_UpdateMenuAchievementStatus args);

        public delegate void UpdateMenuAchievementStatus_NormalArgs(Params_UpdateMenuAchievementStatus args);

        public sealed class Params_get_IsFadingMenu
        {
            public UIManager self;
        }

        public sealed class Params_get_IsAnimatingMenus
        {
            public UIManager self;
        }

        public sealed class Params_Awake
        {
            public UIManager self;
        }

        public sealed class Params_SceneInit
        {
            public UIManager self;
        }

        public sealed class Params_Start
        {
            public UIManager self;
        }

        public sealed class Params_SetState
        {
            public UIState newState;
            public UIManager self;
        }

        public sealed class Params_SetMenuState
        {
            public MainMenuState newState;
            public UIManager self;
        }

        public sealed class Params_SetupRefs
        {
            public UIManager self;
        }

        public sealed class Params_SetUIStartState
        {
            public GameState gameState;
            public UIManager self;
        }

        public sealed class Params_ShowMainMenuHome
        {
            public UIManager self;
        }

        public sealed class Params_StartMenuAnimationCoroutine
        {
            public IEnumerator routine;
            public UIManager self;
        }

        public sealed class Params_StartMenuAnimationCoroutineWorker
        {
            public IEnumerator routine;
            public UIManager self;
        }

        public sealed class Params_UIGoToOptionsMenu
        {
            public UIManager self;
        }

        public sealed class Params_UILeaveOptionsMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIExplicitSwitchUser
        {
            public UIManager self;
        }

        public sealed class Params_UIGoToEngageMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIGoToNoSaveMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIGoToMainMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIGoToProfileMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIReturnToProfileMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIMainStartGame
        {
            public UIManager self;
        }

        public sealed class Params_UIGoToControllerMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIGoToRemapControllerMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIGoToKeyboardMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIGoToAudioMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIGoToVideoMenu
        {
            public bool rollbackRes;
            public UIManager self;
        }

        public sealed class Params_UIGoToPauseMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIClosePauseMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIClearPauseMenu
        {
            public UIManager self;
        }

        public sealed class Params_UnClearPauseMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIGoToOverscanMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIGoToBrightnessMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIGoToGameOptionsMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIGoToAchievementsMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIGoToExtrasMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIGoToExtrasContentMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIShowQuitGamePrompt
        {
            public UIManager self;
        }

        public sealed class Params_UIShowReturnMenuPrompt
        {
            public UIManager self;
        }

        public sealed class Params_UIShowResolutionPrompt
        {
            public UIManager self;
            public bool startTimer;
        }

        public sealed class Params_UILeaveExitToMenuPrompt
        {
            public UIManager self;
        }

        public sealed class Params_UIGoToPlayModeMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIReturnToMainMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIGoToMenuCredits
        {
            public UIManager self;
        }

        public sealed class Params_UIStartNewGame
        {
            public UIManager self;
        }

        public sealed class Params_UIStartNewGameContinue
        {
            public UIManager self;
        }

        public sealed class Params_StartNewGame
        {
            public bool bossRush;
            public bool permaDeath;
            public UIManager self;
        }

        public sealed class Params_ContinueGame
        {
            public UIManager self;
        }

        public sealed class Params_GoToEngageMenu
        {
            public UIManager self;
        }

        public sealed class Params_GoToNoSaveMenu
        {
            public UIManager self;
        }

        public sealed class Params_GoToMainMenu
        {
            public UIManager self;
        }

        public sealed class Params_GoToProfileMenu
        {
            public UIManager self;
        }

        public sealed class Params_PrepareSaveFilesInOrder
        {
            public UIManager self;
        }

        public sealed class Params_GoToOptionsMenu
        {
            public UIManager self;
        }

        public sealed class Params_GoToControllerMenu
        {
            public UIManager self;
        }

        public sealed class Params_GoToRemapControllerMenu
        {
            public UIManager self;
        }

        public sealed class Params_GoToKeyboardMenu
        {
            public UIManager self;
        }

        public sealed class Params_GoToAudioMenu
        {
            public UIManager self;
        }

        public sealed class Params_GoToVideoMenu
        {
            public bool rollbackRes;
            public UIManager self;
        }

        public sealed class Params_GoToOverscanMenu
        {
            public UIManager self;
        }

        public sealed class Params_GoToBrightnessMenu
        {
            public UIManager self;
        }

        public sealed class Params_GoToGameOptionsMenu
        {
            public UIManager self;
        }

        public sealed class Params_GoToAchievementsMenu
        {
            public UIManager self;
        }

        public sealed class Params_GoToExtrasMenu
        {
            public UIManager self;
        }

        public sealed class Params_GoToExtrasContentMenu
        {
            public UIManager self;
        }

        public sealed class Params_GoToQuitGamePrompt
        {
            public UIManager self;
        }

        public sealed class Params_GoToReturnMenuPrompt
        {
            public UIManager self;
        }

        public sealed class Params_GoToResolutionPrompt
        {
            public UIManager self;
            public bool startTimer;
        }

        public sealed class Params_LeaveOptionsMenu
        {
            public UIManager self;
        }

        public sealed class Params_LeaveExitToMenuPrompt
        {
            public UIManager self;
        }

        public sealed class Params_GoToPlayModeMenu
        {
            public UIManager self;
        }

        public sealed class Params_ReturnToMainMenu
        {
            public UIManager self;
        }

        public sealed class Params_GoToPauseMenu
        {
            public UIManager self;
        }

        public sealed class Params_GoToMenuCredits
        {
            public UIManager self;
        }

        public sealed class Params_HideCutscenePrompt
        {
            public UIManager self;
        }

        public sealed class Params_ApplyAudioMenuSettings
        {
            public UIManager self;
        }

        public sealed class Params_ApplyVideoMenuSettings
        {
            public UIManager self;
        }

        public sealed class Params_ApplyControllerMenuSettings
        {
            public UIManager self;
        }

        public sealed class Params_ApplyRemapGamepadMenuSettings
        {
            public UIManager self;
        }

        public sealed class Params_ApplyKeyboardMenuSettings
        {
            public UIManager self;
        }

        public sealed class Params_ApplyOverscanSettings
        {
            public bool goToBrightness;
            public UIManager self;
        }

        public sealed class Params_ApplyBrightnessSettings
        {
            public UIManager self;
        }

        public sealed class Params_ApplyGameMenuSettings
        {
            public UIManager self;
        }

        public sealed class Params_SaveOverscanSettings
        {
            public UIManager self;
        }

        public sealed class Params_SaveBrightnessSettings
        {
            public UIManager self;
        }

        public sealed class Params_DefaultAudioMenuSettings
        {
            public UIManager self;
        }

        public sealed class Params_DefaultVideoMenuSettings
        {
            public UIManager self;
        }

        public sealed class Params_DefaultGamepadMenuSettings
        {
            public UIManager self;
        }

        public sealed class Params_DefaultKeyboardMenuSettings
        {
            public UIManager self;
        }

        public sealed class Params_DefaultGameMenuSettings
        {
            public UIManager self;
        }

        public sealed class Params_LoadStoredSettings
        {
            public UIManager self;
        }

        public sealed class Params_LoadAudioSettings
        {
            public UIManager self;
        }

        public sealed class Params_LoadVideoSettings
        {
            public UIManager self;
        }

        public sealed class Params_LoadGameOptionsSettings
        {
            public UIManager self;
        }

        public sealed class Params_LoadControllerSettings
        {
            public UIManager self;
        }

        public sealed class Params_RefreshAudioControls
        {
            public UIManager self;
        }

        public sealed class Params_RefreshVideoControls
        {
            public UIManager self;
        }

        public sealed class Params_DisableFrameCapSetting
        {
            public UIManager self;
        }

        public sealed class Params_DisableVsyncSetting
        {
            public UIManager self;
        }

        public sealed class Params_RefreshKeyboardControls
        {
            public UIManager self;
        }

        public sealed class Params_RefreshGameOptionsControls
        {
            public UIManager self;
        }

        public sealed class Params_RefreshAchievementsList
        {
            public UIManager self;
        }

        public sealed class Params_UpdateMenuAchievementStatus
        {
            public Achievement ach;
            public MenuAchievement menuAch;
            public UIManager self;
        }

        public sealed class Params_TogglePauseGame
        {
            public UIManager self;
        }

        public sealed class Params_QuitGame
        {
            public UIManager self;
        }

        public sealed class Params_FadeOutMenuAudio
        {
            public float duration;
            public UIManager self;
        }

        public sealed class Params_AudioGoToPauseMenu
        {
            public float duration;
            public UIManager self;
        }

        public sealed class Params_AudioGoToGameplay
        {
            public float duration;
            public UIManager self;
        }

        public sealed class Params_ConfigureMenu
        {
            public UIManager self;
        }

        public sealed class Params_HideCurrentMenu
        {
            public UIManager self;
        }

        public sealed class Params_ShowMenu
        {
            public MenuScreen menu;
            public UIManager self;
        }

        public sealed class Params_HideMenu
        {
            public MenuScreen menu;
            public UIManager self;
        }

        public sealed class Params_HideMenuInstant
        {
            public MenuScreen menu;
            public UIManager self;
        }

        public sealed class Params_HideSaveProfileMenu
        {
            public UIManager self;
        }

        public sealed class Params_DisableScreens
        {
            public UIManager self;
        }

        public sealed class Params_ShowCanvas
        {
            public Canvas canvas;
            public UIManager self;
        }

        public sealed class Params_HideCanvas
        {
            public Canvas canvas;
            public UIManager self;
        }

        public sealed class Params_ShowCanvasGroup
        {
            public CanvasGroup cg;
            public UIManager self;
        }

        public sealed class Params_HideCanvasGroup
        {
            public CanvasGroup cg;
            public UIManager self;
        }

        public sealed class Params_FadeInCanvasGroup
        {
            public CanvasGroup cg;
            public UIManager self;
        }

        public sealed class Params_FadeInCanvasGroupAlpha
        {
            public CanvasGroup cg;
            public float endAlpha;
            public UIManager self;
        }

        public sealed class Params_FadeOutCanvasGroup
        {
            public CanvasGroup cg;
            public UIManager self;
        }

        public sealed class Params_FadeInSprite
        {
            public UIManager self;
            public SpriteRenderer sprite;
        }

        public sealed class Params_FadeOutSprite
        {
            public UIManager self;
            public SpriteRenderer sprite;
        }

        public sealed class Params_EnableChildren_RectTransform
        {
            public RectTransform parent;
            public UIManager self;
        }

        public sealed class Params_EnableChildren_Canvas
        {
            public Canvas parent;
            public UIManager self;
        }

        public sealed class Params_DisableChildren
        {
            public Canvas parent;
            public UIManager self;
        }

        public sealed class Params_GetAnimationClipLength
        {
            public Animator animator;
            public string clipName;
            public UIManager self;
        }

        public sealed class Params_MakeMenuLean
        {
            public UIManager self;
        }

        public sealed class Params_get_currentDynamicMenu
        {
            public UIManager self;
        }

        public sealed class Params_set_currentDynamicMenu
        {
            public UIManager self;
            public MenuScreen value;
        }

        public sealed class Params_LoadImage
        {
            public UIManager self;
        }

        public sealed class Params_orig_Awake
        {
            public UIManager self;
        }

        public sealed class Params_orig_Start
        {
            public UIManager self;
        }

        public sealed class Params_orig_HideCurrentMenu
        {
            public UIManager self;
        }

        public sealed class Params_UIGoToDynamicMenu
        {
            public MenuScreen menu;
            public UIManager self;
        }

        public sealed class Params_GoToDynamicMenu
        {
            public MenuScreen menu;
            public UIManager self;
        }

        public sealed class Params_UILeaveDynamicMenu
        {
            public UIManager self;
            public MainMenuState state;
            public MenuScreen to;
        }

        public sealed class Params_LeaveDynamicMenu
        {
            public UIManager self;
            public MainMenuState state;
            public MenuScreen to;
        }

        public sealed class Params_UIPauseToDynamicMenu
        {
            public UIManager self;
            public MenuScreen to;
        }

        public sealed class Params_PauseToDynamicMenu
        {
            public UIManager self;
            public MenuScreen to;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_IsFadingMenu_BeforeArgs get_IsFadingMenu
        {
            add
            {
                HookHandler._beforeget_IsFadingMenu += value;
                HookHandler.Hookget_IsFadingMenu();
            }
            remove => HookHandler._beforeget_IsFadingMenu -= value;
        }

        public static event Delegates.get_IsAnimatingMenus_BeforeArgs get_IsAnimatingMenus
        {
            add
            {
                HookHandler._beforeget_IsAnimatingMenus += value;
                HookHandler.Hookget_IsAnimatingMenus();
            }
            remove => HookHandler._beforeget_IsAnimatingMenus -= value;
        }

        public static event Delegates.get_instance_BeforeArgs get_instance
        {
            add
            {
                HookHandler._beforeget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._beforeget_instance -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.SceneInit_BeforeArgs SceneInit
        {
            add
            {
                HookHandler._beforeSceneInit += value;
                HookHandler.HookSceneInit();
            }
            remove => HookHandler._beforeSceneInit -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.SetState_BeforeArgs SetState
        {
            add
            {
                HookHandler._beforeSetState += value;
                HookHandler.HookSetState();
            }
            remove => HookHandler._beforeSetState -= value;
        }

        public static event Delegates.SetMenuState_BeforeArgs SetMenuState
        {
            add
            {
                HookHandler._beforeSetMenuState += value;
                HookHandler.HookSetMenuState();
            }
            remove => HookHandler._beforeSetMenuState -= value;
        }

        public static event Delegates.SetupRefs_BeforeArgs SetupRefs
        {
            add
            {
                HookHandler._beforeSetupRefs += value;
                HookHandler.HookSetupRefs();
            }
            remove => HookHandler._beforeSetupRefs -= value;
        }

        public static event Delegates.SetUIStartState_BeforeArgs SetUIStartState
        {
            add
            {
                HookHandler._beforeSetUIStartState += value;
                HookHandler.HookSetUIStartState();
            }
            remove => HookHandler._beforeSetUIStartState -= value;
        }

        public static event Delegates.ShowMainMenuHome_BeforeArgs ShowMainMenuHome
        {
            add
            {
                HookHandler._beforeShowMainMenuHome += value;
                HookHandler.HookShowMainMenuHome();
            }
            remove => HookHandler._beforeShowMainMenuHome -= value;
        }

        public static event Delegates.StartMenuAnimationCoroutine_BeforeArgs StartMenuAnimationCoroutine
        {
            add
            {
                HookHandler._beforeStartMenuAnimationCoroutine += value;
                HookHandler.HookStartMenuAnimationCoroutine();
            }
            remove => HookHandler._beforeStartMenuAnimationCoroutine -= value;
        }

        public static event Delegates.StartMenuAnimationCoroutineWorker_BeforeArgs StartMenuAnimationCoroutineWorker
        {
            add
            {
                HookHandler._beforeStartMenuAnimationCoroutineWorker += value;
                HookHandler.HookStartMenuAnimationCoroutineWorker();
            }
            remove => HookHandler._beforeStartMenuAnimationCoroutineWorker -= value;
        }

        public static event Delegates.UIGoToOptionsMenu_BeforeArgs UIGoToOptionsMenu
        {
            add
            {
                HookHandler._beforeUIGoToOptionsMenu += value;
                HookHandler.HookUIGoToOptionsMenu();
            }
            remove => HookHandler._beforeUIGoToOptionsMenu -= value;
        }

        public static event Delegates.UILeaveOptionsMenu_BeforeArgs UILeaveOptionsMenu
        {
            add
            {
                HookHandler._beforeUILeaveOptionsMenu += value;
                HookHandler.HookUILeaveOptionsMenu();
            }
            remove => HookHandler._beforeUILeaveOptionsMenu -= value;
        }

        public static event Delegates.UIExplicitSwitchUser_BeforeArgs UIExplicitSwitchUser
        {
            add
            {
                HookHandler._beforeUIExplicitSwitchUser += value;
                HookHandler.HookUIExplicitSwitchUser();
            }
            remove => HookHandler._beforeUIExplicitSwitchUser -= value;
        }

        public static event Delegates.UIGoToEngageMenu_BeforeArgs UIGoToEngageMenu
        {
            add
            {
                HookHandler._beforeUIGoToEngageMenu += value;
                HookHandler.HookUIGoToEngageMenu();
            }
            remove => HookHandler._beforeUIGoToEngageMenu -= value;
        }

        public static event Delegates.UIGoToNoSaveMenu_BeforeArgs UIGoToNoSaveMenu
        {
            add
            {
                HookHandler._beforeUIGoToNoSaveMenu += value;
                HookHandler.HookUIGoToNoSaveMenu();
            }
            remove => HookHandler._beforeUIGoToNoSaveMenu -= value;
        }

        public static event Delegates.UIGoToMainMenu_BeforeArgs UIGoToMainMenu
        {
            add
            {
                HookHandler._beforeUIGoToMainMenu += value;
                HookHandler.HookUIGoToMainMenu();
            }
            remove => HookHandler._beforeUIGoToMainMenu -= value;
        }

        public static event Delegates.UIGoToProfileMenu_BeforeArgs UIGoToProfileMenu
        {
            add
            {
                HookHandler._beforeUIGoToProfileMenu += value;
                HookHandler.HookUIGoToProfileMenu();
            }
            remove => HookHandler._beforeUIGoToProfileMenu -= value;
        }

        public static event Delegates.UIReturnToProfileMenu_BeforeArgs UIReturnToProfileMenu
        {
            add
            {
                HookHandler._beforeUIReturnToProfileMenu += value;
                HookHandler.HookUIReturnToProfileMenu();
            }
            remove => HookHandler._beforeUIReturnToProfileMenu -= value;
        }

        public static event Delegates.UIMainStartGame_BeforeArgs UIMainStartGame
        {
            add
            {
                HookHandler._beforeUIMainStartGame += value;
                HookHandler.HookUIMainStartGame();
            }
            remove => HookHandler._beforeUIMainStartGame -= value;
        }

        public static event Delegates.UIGoToControllerMenu_BeforeArgs UIGoToControllerMenu
        {
            add
            {
                HookHandler._beforeUIGoToControllerMenu += value;
                HookHandler.HookUIGoToControllerMenu();
            }
            remove => HookHandler._beforeUIGoToControllerMenu -= value;
        }

        public static event Delegates.UIGoToRemapControllerMenu_BeforeArgs UIGoToRemapControllerMenu
        {
            add
            {
                HookHandler._beforeUIGoToRemapControllerMenu += value;
                HookHandler.HookUIGoToRemapControllerMenu();
            }
            remove => HookHandler._beforeUIGoToRemapControllerMenu -= value;
        }

        public static event Delegates.UIGoToKeyboardMenu_BeforeArgs UIGoToKeyboardMenu
        {
            add
            {
                HookHandler._beforeUIGoToKeyboardMenu += value;
                HookHandler.HookUIGoToKeyboardMenu();
            }
            remove => HookHandler._beforeUIGoToKeyboardMenu -= value;
        }

        public static event Delegates.UIGoToAudioMenu_BeforeArgs UIGoToAudioMenu
        {
            add
            {
                HookHandler._beforeUIGoToAudioMenu += value;
                HookHandler.HookUIGoToAudioMenu();
            }
            remove => HookHandler._beforeUIGoToAudioMenu -= value;
        }

        public static event Delegates.UIGoToVideoMenu_BeforeArgs UIGoToVideoMenu
        {
            add
            {
                HookHandler._beforeUIGoToVideoMenu += value;
                HookHandler.HookUIGoToVideoMenu();
            }
            remove => HookHandler._beforeUIGoToVideoMenu -= value;
        }

        public static event Delegates.UIGoToPauseMenu_BeforeArgs UIGoToPauseMenu
        {
            add
            {
                HookHandler._beforeUIGoToPauseMenu += value;
                HookHandler.HookUIGoToPauseMenu();
            }
            remove => HookHandler._beforeUIGoToPauseMenu -= value;
        }

        public static event Delegates.UIClosePauseMenu_BeforeArgs UIClosePauseMenu
        {
            add
            {
                HookHandler._beforeUIClosePauseMenu += value;
                HookHandler.HookUIClosePauseMenu();
            }
            remove => HookHandler._beforeUIClosePauseMenu -= value;
        }

        public static event Delegates.UIClearPauseMenu_BeforeArgs UIClearPauseMenu
        {
            add
            {
                HookHandler._beforeUIClearPauseMenu += value;
                HookHandler.HookUIClearPauseMenu();
            }
            remove => HookHandler._beforeUIClearPauseMenu -= value;
        }

        public static event Delegates.UnClearPauseMenu_BeforeArgs UnClearPauseMenu
        {
            add
            {
                HookHandler._beforeUnClearPauseMenu += value;
                HookHandler.HookUnClearPauseMenu();
            }
            remove => HookHandler._beforeUnClearPauseMenu -= value;
        }

        public static event Delegates.UIGoToOverscanMenu_BeforeArgs UIGoToOverscanMenu
        {
            add
            {
                HookHandler._beforeUIGoToOverscanMenu += value;
                HookHandler.HookUIGoToOverscanMenu();
            }
            remove => HookHandler._beforeUIGoToOverscanMenu -= value;
        }

        public static event Delegates.UIGoToBrightnessMenu_BeforeArgs UIGoToBrightnessMenu
        {
            add
            {
                HookHandler._beforeUIGoToBrightnessMenu += value;
                HookHandler.HookUIGoToBrightnessMenu();
            }
            remove => HookHandler._beforeUIGoToBrightnessMenu -= value;
        }

        public static event Delegates.UIGoToGameOptionsMenu_BeforeArgs UIGoToGameOptionsMenu
        {
            add
            {
                HookHandler._beforeUIGoToGameOptionsMenu += value;
                HookHandler.HookUIGoToGameOptionsMenu();
            }
            remove => HookHandler._beforeUIGoToGameOptionsMenu -= value;
        }

        public static event Delegates.UIGoToAchievementsMenu_BeforeArgs UIGoToAchievementsMenu
        {
            add
            {
                HookHandler._beforeUIGoToAchievementsMenu += value;
                HookHandler.HookUIGoToAchievementsMenu();
            }
            remove => HookHandler._beforeUIGoToAchievementsMenu -= value;
        }

        public static event Delegates.UIGoToExtrasMenu_BeforeArgs UIGoToExtrasMenu
        {
            add
            {
                HookHandler._beforeUIGoToExtrasMenu += value;
                HookHandler.HookUIGoToExtrasMenu();
            }
            remove => HookHandler._beforeUIGoToExtrasMenu -= value;
        }

        public static event Delegates.UIGoToExtrasContentMenu_BeforeArgs UIGoToExtrasContentMenu
        {
            add
            {
                HookHandler._beforeUIGoToExtrasContentMenu += value;
                HookHandler.HookUIGoToExtrasContentMenu();
            }
            remove => HookHandler._beforeUIGoToExtrasContentMenu -= value;
        }

        public static event Delegates.UIShowQuitGamePrompt_BeforeArgs UIShowQuitGamePrompt
        {
            add
            {
                HookHandler._beforeUIShowQuitGamePrompt += value;
                HookHandler.HookUIShowQuitGamePrompt();
            }
            remove => HookHandler._beforeUIShowQuitGamePrompt -= value;
        }

        public static event Delegates.UIShowReturnMenuPrompt_BeforeArgs UIShowReturnMenuPrompt
        {
            add
            {
                HookHandler._beforeUIShowReturnMenuPrompt += value;
                HookHandler.HookUIShowReturnMenuPrompt();
            }
            remove => HookHandler._beforeUIShowReturnMenuPrompt -= value;
        }

        public static event Delegates.UIShowResolutionPrompt_BeforeArgs UIShowResolutionPrompt
        {
            add
            {
                HookHandler._beforeUIShowResolutionPrompt += value;
                HookHandler.HookUIShowResolutionPrompt();
            }
            remove => HookHandler._beforeUIShowResolutionPrompt -= value;
        }

        public static event Delegates.UILeaveExitToMenuPrompt_BeforeArgs UILeaveExitToMenuPrompt
        {
            add
            {
                HookHandler._beforeUILeaveExitToMenuPrompt += value;
                HookHandler.HookUILeaveExitToMenuPrompt();
            }
            remove => HookHandler._beforeUILeaveExitToMenuPrompt -= value;
        }

        public static event Delegates.UIGoToPlayModeMenu_BeforeArgs UIGoToPlayModeMenu
        {
            add
            {
                HookHandler._beforeUIGoToPlayModeMenu += value;
                HookHandler.HookUIGoToPlayModeMenu();
            }
            remove => HookHandler._beforeUIGoToPlayModeMenu -= value;
        }

        public static event Delegates.UIReturnToMainMenu_BeforeArgs UIReturnToMainMenu
        {
            add
            {
                HookHandler._beforeUIReturnToMainMenu += value;
                HookHandler.HookUIReturnToMainMenu();
            }
            remove => HookHandler._beforeUIReturnToMainMenu -= value;
        }

        public static event Delegates.UIGoToMenuCredits_BeforeArgs UIGoToMenuCredits
        {
            add
            {
                HookHandler._beforeUIGoToMenuCredits += value;
                HookHandler.HookUIGoToMenuCredits();
            }
            remove => HookHandler._beforeUIGoToMenuCredits -= value;
        }

        public static event Delegates.UIStartNewGame_BeforeArgs UIStartNewGame
        {
            add
            {
                HookHandler._beforeUIStartNewGame += value;
                HookHandler.HookUIStartNewGame();
            }
            remove => HookHandler._beforeUIStartNewGame -= value;
        }

        public static event Delegates.UIStartNewGameContinue_BeforeArgs UIStartNewGameContinue
        {
            add
            {
                HookHandler._beforeUIStartNewGameContinue += value;
                HookHandler.HookUIStartNewGameContinue();
            }
            remove => HookHandler._beforeUIStartNewGameContinue -= value;
        }

        public static event Delegates.StartNewGame_BeforeArgs StartNewGame
        {
            add
            {
                HookHandler._beforeStartNewGame += value;
                HookHandler.HookStartNewGame();
            }
            remove => HookHandler._beforeStartNewGame -= value;
        }

        public static event Delegates.ContinueGame_BeforeArgs ContinueGame
        {
            add
            {
                HookHandler._beforeContinueGame += value;
                HookHandler.HookContinueGame();
            }
            remove => HookHandler._beforeContinueGame -= value;
        }

        public static event Delegates.GoToEngageMenu_BeforeArgs GoToEngageMenu
        {
            add
            {
                HookHandler._beforeGoToEngageMenu += value;
                HookHandler.HookGoToEngageMenu();
            }
            remove => HookHandler._beforeGoToEngageMenu -= value;
        }

        public static event Delegates.GoToNoSaveMenu_BeforeArgs GoToNoSaveMenu
        {
            add
            {
                HookHandler._beforeGoToNoSaveMenu += value;
                HookHandler.HookGoToNoSaveMenu();
            }
            remove => HookHandler._beforeGoToNoSaveMenu -= value;
        }

        public static event Delegates.GoToMainMenu_BeforeArgs GoToMainMenu
        {
            add
            {
                HookHandler._beforeGoToMainMenu += value;
                HookHandler.HookGoToMainMenu();
            }
            remove => HookHandler._beforeGoToMainMenu -= value;
        }

        public static event Delegates.GoToProfileMenu_BeforeArgs GoToProfileMenu
        {
            add
            {
                HookHandler._beforeGoToProfileMenu += value;
                HookHandler.HookGoToProfileMenu();
            }
            remove => HookHandler._beforeGoToProfileMenu -= value;
        }

        public static event Delegates.PrepareSaveFilesInOrder_BeforeArgs PrepareSaveFilesInOrder
        {
            add
            {
                HookHandler._beforePrepareSaveFilesInOrder += value;
                HookHandler.HookPrepareSaveFilesInOrder();
            }
            remove => HookHandler._beforePrepareSaveFilesInOrder -= value;
        }

        public static event Delegates.GoToOptionsMenu_BeforeArgs GoToOptionsMenu
        {
            add
            {
                HookHandler._beforeGoToOptionsMenu += value;
                HookHandler.HookGoToOptionsMenu();
            }
            remove => HookHandler._beforeGoToOptionsMenu -= value;
        }

        public static event Delegates.GoToControllerMenu_BeforeArgs GoToControllerMenu
        {
            add
            {
                HookHandler._beforeGoToControllerMenu += value;
                HookHandler.HookGoToControllerMenu();
            }
            remove => HookHandler._beforeGoToControllerMenu -= value;
        }

        public static event Delegates.GoToRemapControllerMenu_BeforeArgs GoToRemapControllerMenu
        {
            add
            {
                HookHandler._beforeGoToRemapControllerMenu += value;
                HookHandler.HookGoToRemapControllerMenu();
            }
            remove => HookHandler._beforeGoToRemapControllerMenu -= value;
        }

        public static event Delegates.GoToKeyboardMenu_BeforeArgs GoToKeyboardMenu
        {
            add
            {
                HookHandler._beforeGoToKeyboardMenu += value;
                HookHandler.HookGoToKeyboardMenu();
            }
            remove => HookHandler._beforeGoToKeyboardMenu -= value;
        }

        public static event Delegates.GoToAudioMenu_BeforeArgs GoToAudioMenu
        {
            add
            {
                HookHandler._beforeGoToAudioMenu += value;
                HookHandler.HookGoToAudioMenu();
            }
            remove => HookHandler._beforeGoToAudioMenu -= value;
        }

        public static event Delegates.GoToVideoMenu_BeforeArgs GoToVideoMenu
        {
            add
            {
                HookHandler._beforeGoToVideoMenu += value;
                HookHandler.HookGoToVideoMenu();
            }
            remove => HookHandler._beforeGoToVideoMenu -= value;
        }

        public static event Delegates.GoToOverscanMenu_BeforeArgs GoToOverscanMenu
        {
            add
            {
                HookHandler._beforeGoToOverscanMenu += value;
                HookHandler.HookGoToOverscanMenu();
            }
            remove => HookHandler._beforeGoToOverscanMenu -= value;
        }

        public static event Delegates.GoToBrightnessMenu_BeforeArgs GoToBrightnessMenu
        {
            add
            {
                HookHandler._beforeGoToBrightnessMenu += value;
                HookHandler.HookGoToBrightnessMenu();
            }
            remove => HookHandler._beforeGoToBrightnessMenu -= value;
        }

        public static event Delegates.GoToGameOptionsMenu_BeforeArgs GoToGameOptionsMenu
        {
            add
            {
                HookHandler._beforeGoToGameOptionsMenu += value;
                HookHandler.HookGoToGameOptionsMenu();
            }
            remove => HookHandler._beforeGoToGameOptionsMenu -= value;
        }

        public static event Delegates.GoToAchievementsMenu_BeforeArgs GoToAchievementsMenu
        {
            add
            {
                HookHandler._beforeGoToAchievementsMenu += value;
                HookHandler.HookGoToAchievementsMenu();
            }
            remove => HookHandler._beforeGoToAchievementsMenu -= value;
        }

        public static event Delegates.GoToExtrasMenu_BeforeArgs GoToExtrasMenu
        {
            add
            {
                HookHandler._beforeGoToExtrasMenu += value;
                HookHandler.HookGoToExtrasMenu();
            }
            remove => HookHandler._beforeGoToExtrasMenu -= value;
        }

        public static event Delegates.GoToExtrasContentMenu_BeforeArgs GoToExtrasContentMenu
        {
            add
            {
                HookHandler._beforeGoToExtrasContentMenu += value;
                HookHandler.HookGoToExtrasContentMenu();
            }
            remove => HookHandler._beforeGoToExtrasContentMenu -= value;
        }

        public static event Delegates.GoToQuitGamePrompt_BeforeArgs GoToQuitGamePrompt
        {
            add
            {
                HookHandler._beforeGoToQuitGamePrompt += value;
                HookHandler.HookGoToQuitGamePrompt();
            }
            remove => HookHandler._beforeGoToQuitGamePrompt -= value;
        }

        public static event Delegates.GoToReturnMenuPrompt_BeforeArgs GoToReturnMenuPrompt
        {
            add
            {
                HookHandler._beforeGoToReturnMenuPrompt += value;
                HookHandler.HookGoToReturnMenuPrompt();
            }
            remove => HookHandler._beforeGoToReturnMenuPrompt -= value;
        }

        public static event Delegates.GoToResolutionPrompt_BeforeArgs GoToResolutionPrompt
        {
            add
            {
                HookHandler._beforeGoToResolutionPrompt += value;
                HookHandler.HookGoToResolutionPrompt();
            }
            remove => HookHandler._beforeGoToResolutionPrompt -= value;
        }

        public static event Delegates.LeaveOptionsMenu_BeforeArgs LeaveOptionsMenu
        {
            add
            {
                HookHandler._beforeLeaveOptionsMenu += value;
                HookHandler.HookLeaveOptionsMenu();
            }
            remove => HookHandler._beforeLeaveOptionsMenu -= value;
        }

        public static event Delegates.LeaveExitToMenuPrompt_BeforeArgs LeaveExitToMenuPrompt
        {
            add
            {
                HookHandler._beforeLeaveExitToMenuPrompt += value;
                HookHandler.HookLeaveExitToMenuPrompt();
            }
            remove => HookHandler._beforeLeaveExitToMenuPrompt -= value;
        }

        public static event Delegates.GoToPlayModeMenu_BeforeArgs GoToPlayModeMenu
        {
            add
            {
                HookHandler._beforeGoToPlayModeMenu += value;
                HookHandler.HookGoToPlayModeMenu();
            }
            remove => HookHandler._beforeGoToPlayModeMenu -= value;
        }

        public static event Delegates.ReturnToMainMenu_BeforeArgs ReturnToMainMenu
        {
            add
            {
                HookHandler._beforeReturnToMainMenu += value;
                HookHandler.HookReturnToMainMenu();
            }
            remove => HookHandler._beforeReturnToMainMenu -= value;
        }

        public static event Delegates.GoToPauseMenu_BeforeArgs GoToPauseMenu
        {
            add
            {
                HookHandler._beforeGoToPauseMenu += value;
                HookHandler.HookGoToPauseMenu();
            }
            remove => HookHandler._beforeGoToPauseMenu -= value;
        }

        public static event Delegates.GoToMenuCredits_BeforeArgs GoToMenuCredits
        {
            add
            {
                HookHandler._beforeGoToMenuCredits += value;
                HookHandler.HookGoToMenuCredits();
            }
            remove => HookHandler._beforeGoToMenuCredits -= value;
        }

        public static event Delegates.HideCutscenePrompt_BeforeArgs HideCutscenePrompt
        {
            add
            {
                HookHandler._beforeHideCutscenePrompt += value;
                HookHandler.HookHideCutscenePrompt();
            }
            remove => HookHandler._beforeHideCutscenePrompt -= value;
        }

        public static event Delegates.ApplyAudioMenuSettings_BeforeArgs ApplyAudioMenuSettings
        {
            add
            {
                HookHandler._beforeApplyAudioMenuSettings += value;
                HookHandler.HookApplyAudioMenuSettings();
            }
            remove => HookHandler._beforeApplyAudioMenuSettings -= value;
        }

        public static event Delegates.ApplyVideoMenuSettings_BeforeArgs ApplyVideoMenuSettings
        {
            add
            {
                HookHandler._beforeApplyVideoMenuSettings += value;
                HookHandler.HookApplyVideoMenuSettings();
            }
            remove => HookHandler._beforeApplyVideoMenuSettings -= value;
        }

        public static event Delegates.ApplyControllerMenuSettings_BeforeArgs ApplyControllerMenuSettings
        {
            add
            {
                HookHandler._beforeApplyControllerMenuSettings += value;
                HookHandler.HookApplyControllerMenuSettings();
            }
            remove => HookHandler._beforeApplyControllerMenuSettings -= value;
        }

        public static event Delegates.ApplyRemapGamepadMenuSettings_BeforeArgs ApplyRemapGamepadMenuSettings
        {
            add
            {
                HookHandler._beforeApplyRemapGamepadMenuSettings += value;
                HookHandler.HookApplyRemapGamepadMenuSettings();
            }
            remove => HookHandler._beforeApplyRemapGamepadMenuSettings -= value;
        }

        public static event Delegates.ApplyKeyboardMenuSettings_BeforeArgs ApplyKeyboardMenuSettings
        {
            add
            {
                HookHandler._beforeApplyKeyboardMenuSettings += value;
                HookHandler.HookApplyKeyboardMenuSettings();
            }
            remove => HookHandler._beforeApplyKeyboardMenuSettings -= value;
        }

        public static event Delegates.ApplyOverscanSettings_BeforeArgs ApplyOverscanSettings
        {
            add
            {
                HookHandler._beforeApplyOverscanSettings += value;
                HookHandler.HookApplyOverscanSettings();
            }
            remove => HookHandler._beforeApplyOverscanSettings -= value;
        }

        public static event Delegates.ApplyBrightnessSettings_BeforeArgs ApplyBrightnessSettings
        {
            add
            {
                HookHandler._beforeApplyBrightnessSettings += value;
                HookHandler.HookApplyBrightnessSettings();
            }
            remove => HookHandler._beforeApplyBrightnessSettings -= value;
        }

        public static event Delegates.ApplyGameMenuSettings_BeforeArgs ApplyGameMenuSettings
        {
            add
            {
                HookHandler._beforeApplyGameMenuSettings += value;
                HookHandler.HookApplyGameMenuSettings();
            }
            remove => HookHandler._beforeApplyGameMenuSettings -= value;
        }

        public static event Delegates.SaveOverscanSettings_BeforeArgs SaveOverscanSettings
        {
            add
            {
                HookHandler._beforeSaveOverscanSettings += value;
                HookHandler.HookSaveOverscanSettings();
            }
            remove => HookHandler._beforeSaveOverscanSettings -= value;
        }

        public static event Delegates.SaveBrightnessSettings_BeforeArgs SaveBrightnessSettings
        {
            add
            {
                HookHandler._beforeSaveBrightnessSettings += value;
                HookHandler.HookSaveBrightnessSettings();
            }
            remove => HookHandler._beforeSaveBrightnessSettings -= value;
        }

        public static event Delegates.DefaultAudioMenuSettings_BeforeArgs DefaultAudioMenuSettings
        {
            add
            {
                HookHandler._beforeDefaultAudioMenuSettings += value;
                HookHandler.HookDefaultAudioMenuSettings();
            }
            remove => HookHandler._beforeDefaultAudioMenuSettings -= value;
        }

        public static event Delegates.DefaultVideoMenuSettings_BeforeArgs DefaultVideoMenuSettings
        {
            add
            {
                HookHandler._beforeDefaultVideoMenuSettings += value;
                HookHandler.HookDefaultVideoMenuSettings();
            }
            remove => HookHandler._beforeDefaultVideoMenuSettings -= value;
        }

        public static event Delegates.DefaultGamepadMenuSettings_BeforeArgs DefaultGamepadMenuSettings
        {
            add
            {
                HookHandler._beforeDefaultGamepadMenuSettings += value;
                HookHandler.HookDefaultGamepadMenuSettings();
            }
            remove => HookHandler._beforeDefaultGamepadMenuSettings -= value;
        }

        public static event Delegates.DefaultKeyboardMenuSettings_BeforeArgs DefaultKeyboardMenuSettings
        {
            add
            {
                HookHandler._beforeDefaultKeyboardMenuSettings += value;
                HookHandler.HookDefaultKeyboardMenuSettings();
            }
            remove => HookHandler._beforeDefaultKeyboardMenuSettings -= value;
        }

        public static event Delegates.DefaultGameMenuSettings_BeforeArgs DefaultGameMenuSettings
        {
            add
            {
                HookHandler._beforeDefaultGameMenuSettings += value;
                HookHandler.HookDefaultGameMenuSettings();
            }
            remove => HookHandler._beforeDefaultGameMenuSettings -= value;
        }

        public static event Delegates.LoadStoredSettings_BeforeArgs LoadStoredSettings
        {
            add
            {
                HookHandler._beforeLoadStoredSettings += value;
                HookHandler.HookLoadStoredSettings();
            }
            remove => HookHandler._beforeLoadStoredSettings -= value;
        }

        public static event Delegates.LoadAudioSettings_BeforeArgs LoadAudioSettings
        {
            add
            {
                HookHandler._beforeLoadAudioSettings += value;
                HookHandler.HookLoadAudioSettings();
            }
            remove => HookHandler._beforeLoadAudioSettings -= value;
        }

        public static event Delegates.LoadVideoSettings_BeforeArgs LoadVideoSettings
        {
            add
            {
                HookHandler._beforeLoadVideoSettings += value;
                HookHandler.HookLoadVideoSettings();
            }
            remove => HookHandler._beforeLoadVideoSettings -= value;
        }

        public static event Delegates.LoadGameOptionsSettings_BeforeArgs LoadGameOptionsSettings
        {
            add
            {
                HookHandler._beforeLoadGameOptionsSettings += value;
                HookHandler.HookLoadGameOptionsSettings();
            }
            remove => HookHandler._beforeLoadGameOptionsSettings -= value;
        }

        public static event Delegates.LoadControllerSettings_BeforeArgs LoadControllerSettings
        {
            add
            {
                HookHandler._beforeLoadControllerSettings += value;
                HookHandler.HookLoadControllerSettings();
            }
            remove => HookHandler._beforeLoadControllerSettings -= value;
        }

        public static event Delegates.RefreshAudioControls_BeforeArgs RefreshAudioControls
        {
            add
            {
                HookHandler._beforeRefreshAudioControls += value;
                HookHandler.HookRefreshAudioControls();
            }
            remove => HookHandler._beforeRefreshAudioControls -= value;
        }

        public static event Delegates.RefreshVideoControls_BeforeArgs RefreshVideoControls
        {
            add
            {
                HookHandler._beforeRefreshVideoControls += value;
                HookHandler.HookRefreshVideoControls();
            }
            remove => HookHandler._beforeRefreshVideoControls -= value;
        }

        public static event Delegates.DisableFrameCapSetting_BeforeArgs DisableFrameCapSetting
        {
            add
            {
                HookHandler._beforeDisableFrameCapSetting += value;
                HookHandler.HookDisableFrameCapSetting();
            }
            remove => HookHandler._beforeDisableFrameCapSetting -= value;
        }

        public static event Delegates.DisableVsyncSetting_BeforeArgs DisableVsyncSetting
        {
            add
            {
                HookHandler._beforeDisableVsyncSetting += value;
                HookHandler.HookDisableVsyncSetting();
            }
            remove => HookHandler._beforeDisableVsyncSetting -= value;
        }

        public static event Delegates.RefreshKeyboardControls_BeforeArgs RefreshKeyboardControls
        {
            add
            {
                HookHandler._beforeRefreshKeyboardControls += value;
                HookHandler.HookRefreshKeyboardControls();
            }
            remove => HookHandler._beforeRefreshKeyboardControls -= value;
        }

        public static event Delegates.RefreshGameOptionsControls_BeforeArgs RefreshGameOptionsControls
        {
            add
            {
                HookHandler._beforeRefreshGameOptionsControls += value;
                HookHandler.HookRefreshGameOptionsControls();
            }
            remove => HookHandler._beforeRefreshGameOptionsControls -= value;
        }

        public static event Delegates.RefreshAchievementsList_BeforeArgs RefreshAchievementsList
        {
            add
            {
                HookHandler._beforeRefreshAchievementsList += value;
                HookHandler.HookRefreshAchievementsList();
            }
            remove => HookHandler._beforeRefreshAchievementsList -= value;
        }

        public static event Delegates.UpdateMenuAchievementStatus_BeforeArgs UpdateMenuAchievementStatus
        {
            add
            {
                HookHandler._beforeUpdateMenuAchievementStatus += value;
                HookHandler.HookUpdateMenuAchievementStatus();
            }
            remove => HookHandler._beforeUpdateMenuAchievementStatus -= value;
        }

        public static event Delegates.TogglePauseGame_BeforeArgs TogglePauseGame
        {
            add
            {
                HookHandler._beforeTogglePauseGame += value;
                HookHandler.HookTogglePauseGame();
            }
            remove => HookHandler._beforeTogglePauseGame -= value;
        }

        public static event Delegates.QuitGame_BeforeArgs QuitGame
        {
            add
            {
                HookHandler._beforeQuitGame += value;
                HookHandler.HookQuitGame();
            }
            remove => HookHandler._beforeQuitGame -= value;
        }

        public static event Delegates.FadeOutMenuAudio_BeforeArgs FadeOutMenuAudio
        {
            add
            {
                HookHandler._beforeFadeOutMenuAudio += value;
                HookHandler.HookFadeOutMenuAudio();
            }
            remove => HookHandler._beforeFadeOutMenuAudio -= value;
        }

        public static event Delegates.AudioGoToPauseMenu_BeforeArgs AudioGoToPauseMenu
        {
            add
            {
                HookHandler._beforeAudioGoToPauseMenu += value;
                HookHandler.HookAudioGoToPauseMenu();
            }
            remove => HookHandler._beforeAudioGoToPauseMenu -= value;
        }

        public static event Delegates.AudioGoToGameplay_BeforeArgs AudioGoToGameplay
        {
            add
            {
                HookHandler._beforeAudioGoToGameplay += value;
                HookHandler.HookAudioGoToGameplay();
            }
            remove => HookHandler._beforeAudioGoToGameplay -= value;
        }

        public static event Delegates.ConfigureMenu_BeforeArgs ConfigureMenu
        {
            add
            {
                HookHandler._beforeConfigureMenu += value;
                HookHandler.HookConfigureMenu();
            }
            remove => HookHandler._beforeConfigureMenu -= value;
        }

        public static event Delegates.HideCurrentMenu_BeforeArgs HideCurrentMenu
        {
            add
            {
                HookHandler._beforeHideCurrentMenu += value;
                HookHandler.HookHideCurrentMenu();
            }
            remove => HookHandler._beforeHideCurrentMenu -= value;
        }

        public static event Delegates.ShowMenu_BeforeArgs ShowMenu
        {
            add
            {
                HookHandler._beforeShowMenu += value;
                HookHandler.HookShowMenu();
            }
            remove => HookHandler._beforeShowMenu -= value;
        }

        public static event Delegates.HideMenu_BeforeArgs HideMenu
        {
            add
            {
                HookHandler._beforeHideMenu += value;
                HookHandler.HookHideMenu();
            }
            remove => HookHandler._beforeHideMenu -= value;
        }

        public static event Delegates.HideMenuInstant_BeforeArgs HideMenuInstant
        {
            add
            {
                HookHandler._beforeHideMenuInstant += value;
                HookHandler.HookHideMenuInstant();
            }
            remove => HookHandler._beforeHideMenuInstant -= value;
        }

        public static event Delegates.HideSaveProfileMenu_BeforeArgs HideSaveProfileMenu
        {
            add
            {
                HookHandler._beforeHideSaveProfileMenu += value;
                HookHandler.HookHideSaveProfileMenu();
            }
            remove => HookHandler._beforeHideSaveProfileMenu -= value;
        }

        public static event Delegates.DisableScreens_BeforeArgs DisableScreens
        {
            add
            {
                HookHandler._beforeDisableScreens += value;
                HookHandler.HookDisableScreens();
            }
            remove => HookHandler._beforeDisableScreens -= value;
        }

        public static event Delegates.ShowCanvas_BeforeArgs ShowCanvas
        {
            add
            {
                HookHandler._beforeShowCanvas += value;
                HookHandler.HookShowCanvas();
            }
            remove => HookHandler._beforeShowCanvas -= value;
        }

        public static event Delegates.HideCanvas_BeforeArgs HideCanvas
        {
            add
            {
                HookHandler._beforeHideCanvas += value;
                HookHandler.HookHideCanvas();
            }
            remove => HookHandler._beforeHideCanvas -= value;
        }

        public static event Delegates.ShowCanvasGroup_BeforeArgs ShowCanvasGroup
        {
            add
            {
                HookHandler._beforeShowCanvasGroup += value;
                HookHandler.HookShowCanvasGroup();
            }
            remove => HookHandler._beforeShowCanvasGroup -= value;
        }

        public static event Delegates.HideCanvasGroup_BeforeArgs HideCanvasGroup
        {
            add
            {
                HookHandler._beforeHideCanvasGroup += value;
                HookHandler.HookHideCanvasGroup();
            }
            remove => HookHandler._beforeHideCanvasGroup -= value;
        }

        public static event Delegates.FadeInCanvasGroup_BeforeArgs FadeInCanvasGroup
        {
            add
            {
                HookHandler._beforeFadeInCanvasGroup += value;
                HookHandler.HookFadeInCanvasGroup();
            }
            remove => HookHandler._beforeFadeInCanvasGroup -= value;
        }

        public static event Delegates.FadeInCanvasGroupAlpha_BeforeArgs FadeInCanvasGroupAlpha
        {
            add
            {
                HookHandler._beforeFadeInCanvasGroupAlpha += value;
                HookHandler.HookFadeInCanvasGroupAlpha();
            }
            remove => HookHandler._beforeFadeInCanvasGroupAlpha -= value;
        }

        public static event Delegates.FadeOutCanvasGroup_BeforeArgs FadeOutCanvasGroup
        {
            add
            {
                HookHandler._beforeFadeOutCanvasGroup += value;
                HookHandler.HookFadeOutCanvasGroup();
            }
            remove => HookHandler._beforeFadeOutCanvasGroup -= value;
        }

        public static event Delegates.FadeInSprite_BeforeArgs FadeInSprite
        {
            add
            {
                HookHandler._beforeFadeInSprite += value;
                HookHandler.HookFadeInSprite();
            }
            remove => HookHandler._beforeFadeInSprite -= value;
        }

        public static event Delegates.FadeOutSprite_BeforeArgs FadeOutSprite
        {
            add
            {
                HookHandler._beforeFadeOutSprite += value;
                HookHandler.HookFadeOutSprite();
            }
            remove => HookHandler._beforeFadeOutSprite -= value;
        }

        public static event Delegates.EnableChildren_RectTransform_BeforeArgs EnableChildren_RectTransform
        {
            add
            {
                HookHandler._beforeEnableChildren_RectTransform += value;
                HookHandler.HookEnableChildren_RectTransform();
            }
            remove => HookHandler._beforeEnableChildren_RectTransform -= value;
        }

        public static event Delegates.EnableChildren_Canvas_BeforeArgs EnableChildren_Canvas
        {
            add
            {
                HookHandler._beforeEnableChildren_Canvas += value;
                HookHandler.HookEnableChildren_Canvas();
            }
            remove => HookHandler._beforeEnableChildren_Canvas -= value;
        }

        public static event Delegates.DisableChildren_BeforeArgs DisableChildren
        {
            add
            {
                HookHandler._beforeDisableChildren += value;
                HookHandler.HookDisableChildren();
            }
            remove => HookHandler._beforeDisableChildren -= value;
        }

        public static event Delegates.GetAnimationClipLength_BeforeArgs GetAnimationClipLength
        {
            add
            {
                HookHandler._beforeGetAnimationClipLength += value;
                HookHandler.HookGetAnimationClipLength();
            }
            remove => HookHandler._beforeGetAnimationClipLength -= value;
        }

        public static event Delegates.MakeMenuLean_BeforeArgs MakeMenuLean
        {
            add
            {
                HookHandler._beforeMakeMenuLean += value;
                HookHandler.HookMakeMenuLean();
            }
            remove => HookHandler._beforeMakeMenuLean -= value;
        }

        public static event Delegates.get_currentDynamicMenu_BeforeArgs get_currentDynamicMenu
        {
            add
            {
                HookHandler._beforeget_currentDynamicMenu += value;
                HookHandler.Hookget_currentDynamicMenu();
            }
            remove => HookHandler._beforeget_currentDynamicMenu -= value;
        }

        public static event Delegates.set_currentDynamicMenu_BeforeArgs set_currentDynamicMenu
        {
            add
            {
                HookHandler._beforeset_currentDynamicMenu += value;
                HookHandler.Hookset_currentDynamicMenu();
            }
            remove => HookHandler._beforeset_currentDynamicMenu -= value;
        }

        public static event Delegates.orig_get_instance_BeforeArgs orig_get_instance
        {
            add
            {
                HookHandler._beforeorig_get_instance += value;
                HookHandler.Hookorig_get_instance();
            }
            remove => HookHandler._beforeorig_get_instance -= value;
        }

        public static event Delegates.LoadImage_BeforeArgs LoadImage
        {
            add
            {
                HookHandler._beforeLoadImage += value;
                HookHandler.HookLoadImage();
            }
            remove => HookHandler._beforeLoadImage -= value;
        }

        public static event Delegates.orig_Awake_BeforeArgs orig_Awake
        {
            add
            {
                HookHandler._beforeorig_Awake += value;
                HookHandler.Hookorig_Awake();
            }
            remove => HookHandler._beforeorig_Awake -= value;
        }

        public static event Delegates.orig_Start_BeforeArgs orig_Start
        {
            add
            {
                HookHandler._beforeorig_Start += value;
                HookHandler.Hookorig_Start();
            }
            remove => HookHandler._beforeorig_Start -= value;
        }

        public static event Delegates.orig_HideCurrentMenu_BeforeArgs orig_HideCurrentMenu
        {
            add
            {
                HookHandler._beforeorig_HideCurrentMenu += value;
                HookHandler.Hookorig_HideCurrentMenu();
            }
            remove => HookHandler._beforeorig_HideCurrentMenu -= value;
        }

        public static event Delegates.UIGoToDynamicMenu_BeforeArgs UIGoToDynamicMenu
        {
            add
            {
                HookHandler._beforeUIGoToDynamicMenu += value;
                HookHandler.HookUIGoToDynamicMenu();
            }
            remove => HookHandler._beforeUIGoToDynamicMenu -= value;
        }

        public static event Delegates.GoToDynamicMenu_BeforeArgs GoToDynamicMenu
        {
            add
            {
                HookHandler._beforeGoToDynamicMenu += value;
                HookHandler.HookGoToDynamicMenu();
            }
            remove => HookHandler._beforeGoToDynamicMenu -= value;
        }

        public static event Delegates.UILeaveDynamicMenu_BeforeArgs UILeaveDynamicMenu
        {
            add
            {
                HookHandler._beforeUILeaveDynamicMenu += value;
                HookHandler.HookUILeaveDynamicMenu();
            }
            remove => HookHandler._beforeUILeaveDynamicMenu -= value;
        }

        public static event Delegates.LeaveDynamicMenu_BeforeArgs LeaveDynamicMenu
        {
            add
            {
                HookHandler._beforeLeaveDynamicMenu += value;
                HookHandler.HookLeaveDynamicMenu();
            }
            remove => HookHandler._beforeLeaveDynamicMenu -= value;
        }

        public static event Delegates.UIPauseToDynamicMenu_BeforeArgs UIPauseToDynamicMenu
        {
            add
            {
                HookHandler._beforeUIPauseToDynamicMenu += value;
                HookHandler.HookUIPauseToDynamicMenu();
            }
            remove => HookHandler._beforeUIPauseToDynamicMenu -= value;
        }

        public static event Delegates.PauseToDynamicMenu_BeforeArgs PauseToDynamicMenu
        {
            add
            {
                HookHandler._beforePauseToDynamicMenu += value;
                HookHandler.HookPauseToDynamicMenu();
            }
            remove => HookHandler._beforePauseToDynamicMenu -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_IsFadingMenu_NormalArgs get_IsFadingMenu
        {
            add
            {
                HookHandler._afterget_IsFadingMenu += value;
                HookHandler.Hookget_IsFadingMenu();
            }
            remove => HookHandler._afterget_IsFadingMenu -= value;
        }

        public static event Delegates.get_IsAnimatingMenus_NormalArgs get_IsAnimatingMenus
        {
            add
            {
                HookHandler._afterget_IsAnimatingMenus += value;
                HookHandler.Hookget_IsAnimatingMenus();
            }
            remove => HookHandler._afterget_IsAnimatingMenus -= value;
        }

        public static event Delegates.get_instance_NormalArgs get_instance
        {
            add
            {
                HookHandler._afterget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._afterget_instance -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.SceneInit_NormalArgs SceneInit
        {
            add
            {
                HookHandler._afterSceneInit += value;
                HookHandler.HookSceneInit();
            }
            remove => HookHandler._afterSceneInit -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.SetState_NormalArgs SetState
        {
            add
            {
                HookHandler._afterSetState += value;
                HookHandler.HookSetState();
            }
            remove => HookHandler._afterSetState -= value;
        }

        public static event Delegates.SetMenuState_NormalArgs SetMenuState
        {
            add
            {
                HookHandler._afterSetMenuState += value;
                HookHandler.HookSetMenuState();
            }
            remove => HookHandler._afterSetMenuState -= value;
        }

        public static event Delegates.SetupRefs_NormalArgs SetupRefs
        {
            add
            {
                HookHandler._afterSetupRefs += value;
                HookHandler.HookSetupRefs();
            }
            remove => HookHandler._afterSetupRefs -= value;
        }

        public static event Delegates.SetUIStartState_NormalArgs SetUIStartState
        {
            add
            {
                HookHandler._afterSetUIStartState += value;
                HookHandler.HookSetUIStartState();
            }
            remove => HookHandler._afterSetUIStartState -= value;
        }

        public static event Delegates.StartMenuAnimationCoroutine_NormalArgs StartMenuAnimationCoroutine
        {
            add
            {
                HookHandler._afterStartMenuAnimationCoroutine += value;
                HookHandler.HookStartMenuAnimationCoroutine();
            }
            remove => HookHandler._afterStartMenuAnimationCoroutine -= value;
        }

        public static event Delegates.UIGoToOptionsMenu_NormalArgs UIGoToOptionsMenu
        {
            add
            {
                HookHandler._afterUIGoToOptionsMenu += value;
                HookHandler.HookUIGoToOptionsMenu();
            }
            remove => HookHandler._afterUIGoToOptionsMenu -= value;
        }

        public static event Delegates.UILeaveOptionsMenu_NormalArgs UILeaveOptionsMenu
        {
            add
            {
                HookHandler._afterUILeaveOptionsMenu += value;
                HookHandler.HookUILeaveOptionsMenu();
            }
            remove => HookHandler._afterUILeaveOptionsMenu -= value;
        }

        public static event Delegates.UIExplicitSwitchUser_NormalArgs UIExplicitSwitchUser
        {
            add
            {
                HookHandler._afterUIExplicitSwitchUser += value;
                HookHandler.HookUIExplicitSwitchUser();
            }
            remove => HookHandler._afterUIExplicitSwitchUser -= value;
        }

        public static event Delegates.UIGoToEngageMenu_NormalArgs UIGoToEngageMenu
        {
            add
            {
                HookHandler._afterUIGoToEngageMenu += value;
                HookHandler.HookUIGoToEngageMenu();
            }
            remove => HookHandler._afterUIGoToEngageMenu -= value;
        }

        public static event Delegates.UIGoToNoSaveMenu_NormalArgs UIGoToNoSaveMenu
        {
            add
            {
                HookHandler._afterUIGoToNoSaveMenu += value;
                HookHandler.HookUIGoToNoSaveMenu();
            }
            remove => HookHandler._afterUIGoToNoSaveMenu -= value;
        }

        public static event Delegates.UIGoToMainMenu_NormalArgs UIGoToMainMenu
        {
            add
            {
                HookHandler._afterUIGoToMainMenu += value;
                HookHandler.HookUIGoToMainMenu();
            }
            remove => HookHandler._afterUIGoToMainMenu -= value;
        }

        public static event Delegates.UIGoToProfileMenu_NormalArgs UIGoToProfileMenu
        {
            add
            {
                HookHandler._afterUIGoToProfileMenu += value;
                HookHandler.HookUIGoToProfileMenu();
            }
            remove => HookHandler._afterUIGoToProfileMenu -= value;
        }

        public static event Delegates.UIReturnToProfileMenu_NormalArgs UIReturnToProfileMenu
        {
            add
            {
                HookHandler._afterUIReturnToProfileMenu += value;
                HookHandler.HookUIReturnToProfileMenu();
            }
            remove => HookHandler._afterUIReturnToProfileMenu -= value;
        }

        public static event Delegates.UIMainStartGame_NormalArgs UIMainStartGame
        {
            add
            {
                HookHandler._afterUIMainStartGame += value;
                HookHandler.HookUIMainStartGame();
            }
            remove => HookHandler._afterUIMainStartGame -= value;
        }

        public static event Delegates.UIGoToControllerMenu_NormalArgs UIGoToControllerMenu
        {
            add
            {
                HookHandler._afterUIGoToControllerMenu += value;
                HookHandler.HookUIGoToControllerMenu();
            }
            remove => HookHandler._afterUIGoToControllerMenu -= value;
        }

        public static event Delegates.UIGoToRemapControllerMenu_NormalArgs UIGoToRemapControllerMenu
        {
            add
            {
                HookHandler._afterUIGoToRemapControllerMenu += value;
                HookHandler.HookUIGoToRemapControllerMenu();
            }
            remove => HookHandler._afterUIGoToRemapControllerMenu -= value;
        }

        public static event Delegates.UIGoToKeyboardMenu_NormalArgs UIGoToKeyboardMenu
        {
            add
            {
                HookHandler._afterUIGoToKeyboardMenu += value;
                HookHandler.HookUIGoToKeyboardMenu();
            }
            remove => HookHandler._afterUIGoToKeyboardMenu -= value;
        }

        public static event Delegates.UIGoToAudioMenu_NormalArgs UIGoToAudioMenu
        {
            add
            {
                HookHandler._afterUIGoToAudioMenu += value;
                HookHandler.HookUIGoToAudioMenu();
            }
            remove => HookHandler._afterUIGoToAudioMenu -= value;
        }

        public static event Delegates.UIGoToVideoMenu_NormalArgs UIGoToVideoMenu
        {
            add
            {
                HookHandler._afterUIGoToVideoMenu += value;
                HookHandler.HookUIGoToVideoMenu();
            }
            remove => HookHandler._afterUIGoToVideoMenu -= value;
        }

        public static event Delegates.UIGoToPauseMenu_NormalArgs UIGoToPauseMenu
        {
            add
            {
                HookHandler._afterUIGoToPauseMenu += value;
                HookHandler.HookUIGoToPauseMenu();
            }
            remove => HookHandler._afterUIGoToPauseMenu -= value;
        }

        public static event Delegates.UIClosePauseMenu_NormalArgs UIClosePauseMenu
        {
            add
            {
                HookHandler._afterUIClosePauseMenu += value;
                HookHandler.HookUIClosePauseMenu();
            }
            remove => HookHandler._afterUIClosePauseMenu -= value;
        }

        public static event Delegates.UIClearPauseMenu_NormalArgs UIClearPauseMenu
        {
            add
            {
                HookHandler._afterUIClearPauseMenu += value;
                HookHandler.HookUIClearPauseMenu();
            }
            remove => HookHandler._afterUIClearPauseMenu -= value;
        }

        public static event Delegates.UnClearPauseMenu_NormalArgs UnClearPauseMenu
        {
            add
            {
                HookHandler._afterUnClearPauseMenu += value;
                HookHandler.HookUnClearPauseMenu();
            }
            remove => HookHandler._afterUnClearPauseMenu -= value;
        }

        public static event Delegates.UIGoToOverscanMenu_NormalArgs UIGoToOverscanMenu
        {
            add
            {
                HookHandler._afterUIGoToOverscanMenu += value;
                HookHandler.HookUIGoToOverscanMenu();
            }
            remove => HookHandler._afterUIGoToOverscanMenu -= value;
        }

        public static event Delegates.UIGoToBrightnessMenu_NormalArgs UIGoToBrightnessMenu
        {
            add
            {
                HookHandler._afterUIGoToBrightnessMenu += value;
                HookHandler.HookUIGoToBrightnessMenu();
            }
            remove => HookHandler._afterUIGoToBrightnessMenu -= value;
        }

        public static event Delegates.UIGoToGameOptionsMenu_NormalArgs UIGoToGameOptionsMenu
        {
            add
            {
                HookHandler._afterUIGoToGameOptionsMenu += value;
                HookHandler.HookUIGoToGameOptionsMenu();
            }
            remove => HookHandler._afterUIGoToGameOptionsMenu -= value;
        }

        public static event Delegates.UIGoToAchievementsMenu_NormalArgs UIGoToAchievementsMenu
        {
            add
            {
                HookHandler._afterUIGoToAchievementsMenu += value;
                HookHandler.HookUIGoToAchievementsMenu();
            }
            remove => HookHandler._afterUIGoToAchievementsMenu -= value;
        }

        public static event Delegates.UIGoToExtrasMenu_NormalArgs UIGoToExtrasMenu
        {
            add
            {
                HookHandler._afterUIGoToExtrasMenu += value;
                HookHandler.HookUIGoToExtrasMenu();
            }
            remove => HookHandler._afterUIGoToExtrasMenu -= value;
        }

        public static event Delegates.UIGoToExtrasContentMenu_NormalArgs UIGoToExtrasContentMenu
        {
            add
            {
                HookHandler._afterUIGoToExtrasContentMenu += value;
                HookHandler.HookUIGoToExtrasContentMenu();
            }
            remove => HookHandler._afterUIGoToExtrasContentMenu -= value;
        }

        public static event Delegates.UIShowQuitGamePrompt_NormalArgs UIShowQuitGamePrompt
        {
            add
            {
                HookHandler._afterUIShowQuitGamePrompt += value;
                HookHandler.HookUIShowQuitGamePrompt();
            }
            remove => HookHandler._afterUIShowQuitGamePrompt -= value;
        }

        public static event Delegates.UIShowReturnMenuPrompt_NormalArgs UIShowReturnMenuPrompt
        {
            add
            {
                HookHandler._afterUIShowReturnMenuPrompt += value;
                HookHandler.HookUIShowReturnMenuPrompt();
            }
            remove => HookHandler._afterUIShowReturnMenuPrompt -= value;
        }

        public static event Delegates.UIShowResolutionPrompt_NormalArgs UIShowResolutionPrompt
        {
            add
            {
                HookHandler._afterUIShowResolutionPrompt += value;
                HookHandler.HookUIShowResolutionPrompt();
            }
            remove => HookHandler._afterUIShowResolutionPrompt -= value;
        }

        public static event Delegates.UILeaveExitToMenuPrompt_NormalArgs UILeaveExitToMenuPrompt
        {
            add
            {
                HookHandler._afterUILeaveExitToMenuPrompt += value;
                HookHandler.HookUILeaveExitToMenuPrompt();
            }
            remove => HookHandler._afterUILeaveExitToMenuPrompt -= value;
        }

        public static event Delegates.UIGoToPlayModeMenu_NormalArgs UIGoToPlayModeMenu
        {
            add
            {
                HookHandler._afterUIGoToPlayModeMenu += value;
                HookHandler.HookUIGoToPlayModeMenu();
            }
            remove => HookHandler._afterUIGoToPlayModeMenu -= value;
        }

        public static event Delegates.UIReturnToMainMenu_NormalArgs UIReturnToMainMenu
        {
            add
            {
                HookHandler._afterUIReturnToMainMenu += value;
                HookHandler.HookUIReturnToMainMenu();
            }
            remove => HookHandler._afterUIReturnToMainMenu -= value;
        }

        public static event Delegates.UIGoToMenuCredits_NormalArgs UIGoToMenuCredits
        {
            add
            {
                HookHandler._afterUIGoToMenuCredits += value;
                HookHandler.HookUIGoToMenuCredits();
            }
            remove => HookHandler._afterUIGoToMenuCredits -= value;
        }

        public static event Delegates.UIStartNewGame_NormalArgs UIStartNewGame
        {
            add
            {
                HookHandler._afterUIStartNewGame += value;
                HookHandler.HookUIStartNewGame();
            }
            remove => HookHandler._afterUIStartNewGame -= value;
        }

        public static event Delegates.UIStartNewGameContinue_NormalArgs UIStartNewGameContinue
        {
            add
            {
                HookHandler._afterUIStartNewGameContinue += value;
                HookHandler.HookUIStartNewGameContinue();
            }
            remove => HookHandler._afterUIStartNewGameContinue -= value;
        }

        public static event Delegates.StartNewGame_NormalArgs StartNewGame
        {
            add
            {
                HookHandler._afterStartNewGame += value;
                HookHandler.HookStartNewGame();
            }
            remove => HookHandler._afterStartNewGame -= value;
        }

        public static event Delegates.ContinueGame_NormalArgs ContinueGame
        {
            add
            {
                HookHandler._afterContinueGame += value;
                HookHandler.HookContinueGame();
            }
            remove => HookHandler._afterContinueGame -= value;
        }

        public static event Delegates.HideCutscenePrompt_NormalArgs HideCutscenePrompt
        {
            add
            {
                HookHandler._afterHideCutscenePrompt += value;
                HookHandler.HookHideCutscenePrompt();
            }
            remove => HookHandler._afterHideCutscenePrompt -= value;
        }

        public static event Delegates.ApplyAudioMenuSettings_NormalArgs ApplyAudioMenuSettings
        {
            add
            {
                HookHandler._afterApplyAudioMenuSettings += value;
                HookHandler.HookApplyAudioMenuSettings();
            }
            remove => HookHandler._afterApplyAudioMenuSettings -= value;
        }

        public static event Delegates.ApplyVideoMenuSettings_NormalArgs ApplyVideoMenuSettings
        {
            add
            {
                HookHandler._afterApplyVideoMenuSettings += value;
                HookHandler.HookApplyVideoMenuSettings();
            }
            remove => HookHandler._afterApplyVideoMenuSettings -= value;
        }

        public static event Delegates.ApplyControllerMenuSettings_NormalArgs ApplyControllerMenuSettings
        {
            add
            {
                HookHandler._afterApplyControllerMenuSettings += value;
                HookHandler.HookApplyControllerMenuSettings();
            }
            remove => HookHandler._afterApplyControllerMenuSettings -= value;
        }

        public static event Delegates.ApplyRemapGamepadMenuSettings_NormalArgs ApplyRemapGamepadMenuSettings
        {
            add
            {
                HookHandler._afterApplyRemapGamepadMenuSettings += value;
                HookHandler.HookApplyRemapGamepadMenuSettings();
            }
            remove => HookHandler._afterApplyRemapGamepadMenuSettings -= value;
        }

        public static event Delegates.ApplyKeyboardMenuSettings_NormalArgs ApplyKeyboardMenuSettings
        {
            add
            {
                HookHandler._afterApplyKeyboardMenuSettings += value;
                HookHandler.HookApplyKeyboardMenuSettings();
            }
            remove => HookHandler._afterApplyKeyboardMenuSettings -= value;
        }

        public static event Delegates.ApplyOverscanSettings_NormalArgs ApplyOverscanSettings
        {
            add
            {
                HookHandler._afterApplyOverscanSettings += value;
                HookHandler.HookApplyOverscanSettings();
            }
            remove => HookHandler._afterApplyOverscanSettings -= value;
        }

        public static event Delegates.ApplyBrightnessSettings_NormalArgs ApplyBrightnessSettings
        {
            add
            {
                HookHandler._afterApplyBrightnessSettings += value;
                HookHandler.HookApplyBrightnessSettings();
            }
            remove => HookHandler._afterApplyBrightnessSettings -= value;
        }

        public static event Delegates.ApplyGameMenuSettings_NormalArgs ApplyGameMenuSettings
        {
            add
            {
                HookHandler._afterApplyGameMenuSettings += value;
                HookHandler.HookApplyGameMenuSettings();
            }
            remove => HookHandler._afterApplyGameMenuSettings -= value;
        }

        public static event Delegates.SaveOverscanSettings_NormalArgs SaveOverscanSettings
        {
            add
            {
                HookHandler._afterSaveOverscanSettings += value;
                HookHandler.HookSaveOverscanSettings();
            }
            remove => HookHandler._afterSaveOverscanSettings -= value;
        }

        public static event Delegates.SaveBrightnessSettings_NormalArgs SaveBrightnessSettings
        {
            add
            {
                HookHandler._afterSaveBrightnessSettings += value;
                HookHandler.HookSaveBrightnessSettings();
            }
            remove => HookHandler._afterSaveBrightnessSettings -= value;
        }

        public static event Delegates.DefaultAudioMenuSettings_NormalArgs DefaultAudioMenuSettings
        {
            add
            {
                HookHandler._afterDefaultAudioMenuSettings += value;
                HookHandler.HookDefaultAudioMenuSettings();
            }
            remove => HookHandler._afterDefaultAudioMenuSettings -= value;
        }

        public static event Delegates.DefaultVideoMenuSettings_NormalArgs DefaultVideoMenuSettings
        {
            add
            {
                HookHandler._afterDefaultVideoMenuSettings += value;
                HookHandler.HookDefaultVideoMenuSettings();
            }
            remove => HookHandler._afterDefaultVideoMenuSettings -= value;
        }

        public static event Delegates.DefaultGamepadMenuSettings_NormalArgs DefaultGamepadMenuSettings
        {
            add
            {
                HookHandler._afterDefaultGamepadMenuSettings += value;
                HookHandler.HookDefaultGamepadMenuSettings();
            }
            remove => HookHandler._afterDefaultGamepadMenuSettings -= value;
        }

        public static event Delegates.DefaultKeyboardMenuSettings_NormalArgs DefaultKeyboardMenuSettings
        {
            add
            {
                HookHandler._afterDefaultKeyboardMenuSettings += value;
                HookHandler.HookDefaultKeyboardMenuSettings();
            }
            remove => HookHandler._afterDefaultKeyboardMenuSettings -= value;
        }

        public static event Delegates.DefaultGameMenuSettings_NormalArgs DefaultGameMenuSettings
        {
            add
            {
                HookHandler._afterDefaultGameMenuSettings += value;
                HookHandler.HookDefaultGameMenuSettings();
            }
            remove => HookHandler._afterDefaultGameMenuSettings -= value;
        }

        public static event Delegates.LoadStoredSettings_NormalArgs LoadStoredSettings
        {
            add
            {
                HookHandler._afterLoadStoredSettings += value;
                HookHandler.HookLoadStoredSettings();
            }
            remove => HookHandler._afterLoadStoredSettings -= value;
        }

        public static event Delegates.LoadAudioSettings_NormalArgs LoadAudioSettings
        {
            add
            {
                HookHandler._afterLoadAudioSettings += value;
                HookHandler.HookLoadAudioSettings();
            }
            remove => HookHandler._afterLoadAudioSettings -= value;
        }

        public static event Delegates.LoadVideoSettings_NormalArgs LoadVideoSettings
        {
            add
            {
                HookHandler._afterLoadVideoSettings += value;
                HookHandler.HookLoadVideoSettings();
            }
            remove => HookHandler._afterLoadVideoSettings -= value;
        }

        public static event Delegates.LoadGameOptionsSettings_NormalArgs LoadGameOptionsSettings
        {
            add
            {
                HookHandler._afterLoadGameOptionsSettings += value;
                HookHandler.HookLoadGameOptionsSettings();
            }
            remove => HookHandler._afterLoadGameOptionsSettings -= value;
        }

        public static event Delegates.LoadControllerSettings_NormalArgs LoadControllerSettings
        {
            add
            {
                HookHandler._afterLoadControllerSettings += value;
                HookHandler.HookLoadControllerSettings();
            }
            remove => HookHandler._afterLoadControllerSettings -= value;
        }

        public static event Delegates.RefreshAudioControls_NormalArgs RefreshAudioControls
        {
            add
            {
                HookHandler._afterRefreshAudioControls += value;
                HookHandler.HookRefreshAudioControls();
            }
            remove => HookHandler._afterRefreshAudioControls -= value;
        }

        public static event Delegates.RefreshVideoControls_NormalArgs RefreshVideoControls
        {
            add
            {
                HookHandler._afterRefreshVideoControls += value;
                HookHandler.HookRefreshVideoControls();
            }
            remove => HookHandler._afterRefreshVideoControls -= value;
        }

        public static event Delegates.DisableFrameCapSetting_NormalArgs DisableFrameCapSetting
        {
            add
            {
                HookHandler._afterDisableFrameCapSetting += value;
                HookHandler.HookDisableFrameCapSetting();
            }
            remove => HookHandler._afterDisableFrameCapSetting -= value;
        }

        public static event Delegates.DisableVsyncSetting_NormalArgs DisableVsyncSetting
        {
            add
            {
                HookHandler._afterDisableVsyncSetting += value;
                HookHandler.HookDisableVsyncSetting();
            }
            remove => HookHandler._afterDisableVsyncSetting -= value;
        }

        public static event Delegates.RefreshKeyboardControls_NormalArgs RefreshKeyboardControls
        {
            add
            {
                HookHandler._afterRefreshKeyboardControls += value;
                HookHandler.HookRefreshKeyboardControls();
            }
            remove => HookHandler._afterRefreshKeyboardControls -= value;
        }

        public static event Delegates.RefreshGameOptionsControls_NormalArgs RefreshGameOptionsControls
        {
            add
            {
                HookHandler._afterRefreshGameOptionsControls += value;
                HookHandler.HookRefreshGameOptionsControls();
            }
            remove => HookHandler._afterRefreshGameOptionsControls -= value;
        }

        public static event Delegates.RefreshAchievementsList_NormalArgs RefreshAchievementsList
        {
            add
            {
                HookHandler._afterRefreshAchievementsList += value;
                HookHandler.HookRefreshAchievementsList();
            }
            remove => HookHandler._afterRefreshAchievementsList -= value;
        }

        public static event Delegates.UpdateMenuAchievementStatus_NormalArgs UpdateMenuAchievementStatus
        {
            add
            {
                HookHandler._afterUpdateMenuAchievementStatus += value;
                HookHandler.HookUpdateMenuAchievementStatus();
            }
            remove => HookHandler._afterUpdateMenuAchievementStatus -= value;
        }

        public static event Delegates.TogglePauseGame_NormalArgs TogglePauseGame
        {
            add
            {
                HookHandler._afterTogglePauseGame += value;
                HookHandler.HookTogglePauseGame();
            }
            remove => HookHandler._afterTogglePauseGame -= value;
        }

        public static event Delegates.QuitGame_NormalArgs QuitGame
        {
            add
            {
                HookHandler._afterQuitGame += value;
                HookHandler.HookQuitGame();
            }
            remove => HookHandler._afterQuitGame -= value;
        }

        public static event Delegates.FadeOutMenuAudio_NormalArgs FadeOutMenuAudio
        {
            add
            {
                HookHandler._afterFadeOutMenuAudio += value;
                HookHandler.HookFadeOutMenuAudio();
            }
            remove => HookHandler._afterFadeOutMenuAudio -= value;
        }

        public static event Delegates.AudioGoToPauseMenu_NormalArgs AudioGoToPauseMenu
        {
            add
            {
                HookHandler._afterAudioGoToPauseMenu += value;
                HookHandler.HookAudioGoToPauseMenu();
            }
            remove => HookHandler._afterAudioGoToPauseMenu -= value;
        }

        public static event Delegates.AudioGoToGameplay_NormalArgs AudioGoToGameplay
        {
            add
            {
                HookHandler._afterAudioGoToGameplay += value;
                HookHandler.HookAudioGoToGameplay();
            }
            remove => HookHandler._afterAudioGoToGameplay -= value;
        }

        public static event Delegates.ConfigureMenu_NormalArgs ConfigureMenu
        {
            add
            {
                HookHandler._afterConfigureMenu += value;
                HookHandler.HookConfigureMenu();
            }
            remove => HookHandler._afterConfigureMenu -= value;
        }

        public static event Delegates.HideMenuInstant_NormalArgs HideMenuInstant
        {
            add
            {
                HookHandler._afterHideMenuInstant += value;
                HookHandler.HookHideMenuInstant();
            }
            remove => HookHandler._afterHideMenuInstant -= value;
        }

        public static event Delegates.DisableScreens_NormalArgs DisableScreens
        {
            add
            {
                HookHandler._afterDisableScreens += value;
                HookHandler.HookDisableScreens();
            }
            remove => HookHandler._afterDisableScreens -= value;
        }

        public static event Delegates.ShowCanvas_NormalArgs ShowCanvas
        {
            add
            {
                HookHandler._afterShowCanvas += value;
                HookHandler.HookShowCanvas();
            }
            remove => HookHandler._afterShowCanvas -= value;
        }

        public static event Delegates.HideCanvas_NormalArgs HideCanvas
        {
            add
            {
                HookHandler._afterHideCanvas += value;
                HookHandler.HookHideCanvas();
            }
            remove => HookHandler._afterHideCanvas -= value;
        }

        public static event Delegates.ShowCanvasGroup_NormalArgs ShowCanvasGroup
        {
            add
            {
                HookHandler._afterShowCanvasGroup += value;
                HookHandler.HookShowCanvasGroup();
            }
            remove => HookHandler._afterShowCanvasGroup -= value;
        }

        public static event Delegates.HideCanvasGroup_NormalArgs HideCanvasGroup
        {
            add
            {
                HookHandler._afterHideCanvasGroup += value;
                HookHandler.HookHideCanvasGroup();
            }
            remove => HookHandler._afterHideCanvasGroup -= value;
        }

        public static event Delegates.EnableChildren_RectTransform_NormalArgs EnableChildren_RectTransform
        {
            add
            {
                HookHandler._afterEnableChildren_RectTransform += value;
                HookHandler.HookEnableChildren_RectTransform();
            }
            remove => HookHandler._afterEnableChildren_RectTransform -= value;
        }

        public static event Delegates.EnableChildren_Canvas_NormalArgs EnableChildren_Canvas
        {
            add
            {
                HookHandler._afterEnableChildren_Canvas += value;
                HookHandler.HookEnableChildren_Canvas();
            }
            remove => HookHandler._afterEnableChildren_Canvas -= value;
        }

        public static event Delegates.DisableChildren_NormalArgs DisableChildren
        {
            add
            {
                HookHandler._afterDisableChildren += value;
                HookHandler.HookDisableChildren();
            }
            remove => HookHandler._afterDisableChildren -= value;
        }

        public static event Delegates.GetAnimationClipLength_NormalArgs GetAnimationClipLength
        {
            add
            {
                HookHandler._afterGetAnimationClipLength += value;
                HookHandler.HookGetAnimationClipLength();
            }
            remove => HookHandler._afterGetAnimationClipLength -= value;
        }

        public static event Delegates.MakeMenuLean_NormalArgs MakeMenuLean
        {
            add
            {
                HookHandler._afterMakeMenuLean += value;
                HookHandler.HookMakeMenuLean();
            }
            remove => HookHandler._afterMakeMenuLean -= value;
        }

        public static event Delegates.get_currentDynamicMenu_NormalArgs get_currentDynamicMenu
        {
            add
            {
                HookHandler._afterget_currentDynamicMenu += value;
                HookHandler.Hookget_currentDynamicMenu();
            }
            remove => HookHandler._afterget_currentDynamicMenu -= value;
        }

        public static event Delegates.set_currentDynamicMenu_NormalArgs set_currentDynamicMenu
        {
            add
            {
                HookHandler._afterset_currentDynamicMenu += value;
                HookHandler.Hookset_currentDynamicMenu();
            }
            remove => HookHandler._afterset_currentDynamicMenu -= value;
        }

        public static event Delegates.orig_get_instance_NormalArgs orig_get_instance
        {
            add
            {
                HookHandler._afterorig_get_instance += value;
                HookHandler.Hookorig_get_instance();
            }
            remove => HookHandler._afterorig_get_instance -= value;
        }

        public static event Delegates.LoadImage_NormalArgs LoadImage
        {
            add
            {
                HookHandler._afterLoadImage += value;
                HookHandler.HookLoadImage();
            }
            remove => HookHandler._afterLoadImage -= value;
        }

        public static event Delegates.orig_Awake_NormalArgs orig_Awake
        {
            add
            {
                HookHandler._afterorig_Awake += value;
                HookHandler.Hookorig_Awake();
            }
            remove => HookHandler._afterorig_Awake -= value;
        }

        public static event Delegates.orig_Start_NormalArgs orig_Start
        {
            add
            {
                HookHandler._afterorig_Start += value;
                HookHandler.Hookorig_Start();
            }
            remove => HookHandler._afterorig_Start -= value;
        }

        public static event Delegates.UIGoToDynamicMenu_NormalArgs UIGoToDynamicMenu
        {
            add
            {
                HookHandler._afterUIGoToDynamicMenu += value;
                HookHandler.HookUIGoToDynamicMenu();
            }
            remove => HookHandler._afterUIGoToDynamicMenu -= value;
        }

        public static event Delegates.UILeaveDynamicMenu_NormalArgs UILeaveDynamicMenu
        {
            add
            {
                HookHandler._afterUILeaveDynamicMenu += value;
                HookHandler.HookUILeaveDynamicMenu();
            }
            remove => HookHandler._afterUILeaveDynamicMenu -= value;
        }

        public static event Delegates.UIPauseToDynamicMenu_NormalArgs UIPauseToDynamicMenu
        {
            add
            {
                HookHandler._afterUIPauseToDynamicMenu += value;
                HookHandler.HookUIPauseToDynamicMenu();
            }
            remove => HookHandler._afterUIPauseToDynamicMenu -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_IsFadingMenu_NormalArgs get_IsFadingMenu
        {
            add => HookEndpointManager.Add<Delegates.get_IsFadingMenu_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "get_IsFadingMenu"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsFadingMenu_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "get_IsFadingMenu"), value);
        }

        public static event Delegates.get_IsAnimatingMenus_NormalArgs get_IsAnimatingMenus
        {
            add => HookEndpointManager.Add<Delegates.get_IsAnimatingMenus_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "get_IsAnimatingMenus"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsAnimatingMenus_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "get_IsAnimatingMenus"), value);
        }

        public static event Delegates.get_instance_NormalArgs get_instance
        {
            add => HookEndpointManager.Add<Delegates.get_instance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "get_instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_instance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "get_instance", false), value);
        }

        public static event On.UIManager.hook_Awake Awake
        {
            add => On.UIManager.Awake += value;
            remove => On.UIManager.Awake -= value;
        }

        public static event On.UIManager.hook_SceneInit SceneInit
        {
            add => On.UIManager.SceneInit += value;
            remove => On.UIManager.SceneInit -= value;
        }

        public static event On.UIManager.hook_Start Start
        {
            add => On.UIManager.Start += value;
            remove => On.UIManager.Start -= value;
        }

        public static event On.UIManager.hook_SetState SetState
        {
            add => On.UIManager.SetState += value;
            remove => On.UIManager.SetState -= value;
        }

        public static event On.UIManager.hook_SetMenuState SetMenuState
        {
            add => On.UIManager.SetMenuState += value;
            remove => On.UIManager.SetMenuState -= value;
        }

        public static event On.UIManager.hook_SetupRefs SetupRefs
        {
            add => On.UIManager.SetupRefs += value;
            remove => On.UIManager.SetupRefs -= value;
        }

        public static event On.UIManager.hook_SetUIStartState SetUIStartState
        {
            add => On.UIManager.SetUIStartState += value;
            remove => On.UIManager.SetUIStartState -= value;
        }

        public static event On.UIManager.hook_ShowMainMenuHome ShowMainMenuHome
        {
            add => On.UIManager.ShowMainMenuHome += value;
            remove => On.UIManager.ShowMainMenuHome -= value;
        }

        public static event On.UIManager.hook_StartMenuAnimationCoroutine StartMenuAnimationCoroutine
        {
            add => On.UIManager.StartMenuAnimationCoroutine += value;
            remove => On.UIManager.StartMenuAnimationCoroutine -= value;
        }

        public static event On.UIManager.hook_StartMenuAnimationCoroutineWorker StartMenuAnimationCoroutineWorker
        {
            add => On.UIManager.StartMenuAnimationCoroutineWorker += value;
            remove => On.UIManager.StartMenuAnimationCoroutineWorker -= value;
        }

        public static event On.UIManager.hook_UIGoToOptionsMenu UIGoToOptionsMenu
        {
            add => On.UIManager.UIGoToOptionsMenu += value;
            remove => On.UIManager.UIGoToOptionsMenu -= value;
        }

        public static event On.UIManager.hook_UILeaveOptionsMenu UILeaveOptionsMenu
        {
            add => On.UIManager.UILeaveOptionsMenu += value;
            remove => On.UIManager.UILeaveOptionsMenu -= value;
        }

        public static event On.UIManager.hook_UIExplicitSwitchUser UIExplicitSwitchUser
        {
            add => On.UIManager.UIExplicitSwitchUser += value;
            remove => On.UIManager.UIExplicitSwitchUser -= value;
        }

        public static event On.UIManager.hook_UIGoToEngageMenu UIGoToEngageMenu
        {
            add => On.UIManager.UIGoToEngageMenu += value;
            remove => On.UIManager.UIGoToEngageMenu -= value;
        }

        public static event On.UIManager.hook_UIGoToNoSaveMenu UIGoToNoSaveMenu
        {
            add => On.UIManager.UIGoToNoSaveMenu += value;
            remove => On.UIManager.UIGoToNoSaveMenu -= value;
        }

        public static event On.UIManager.hook_UIGoToMainMenu UIGoToMainMenu
        {
            add => On.UIManager.UIGoToMainMenu += value;
            remove => On.UIManager.UIGoToMainMenu -= value;
        }

        public static event On.UIManager.hook_UIGoToProfileMenu UIGoToProfileMenu
        {
            add => On.UIManager.UIGoToProfileMenu += value;
            remove => On.UIManager.UIGoToProfileMenu -= value;
        }

        public static event On.UIManager.hook_UIReturnToProfileMenu UIReturnToProfileMenu
        {
            add => On.UIManager.UIReturnToProfileMenu += value;
            remove => On.UIManager.UIReturnToProfileMenu -= value;
        }

        public static event On.UIManager.hook_UIMainStartGame UIMainStartGame
        {
            add => On.UIManager.UIMainStartGame += value;
            remove => On.UIManager.UIMainStartGame -= value;
        }

        public static event On.UIManager.hook_UIGoToControllerMenu UIGoToControllerMenu
        {
            add => On.UIManager.UIGoToControllerMenu += value;
            remove => On.UIManager.UIGoToControllerMenu -= value;
        }

        public static event On.UIManager.hook_UIGoToRemapControllerMenu UIGoToRemapControllerMenu
        {
            add => On.UIManager.UIGoToRemapControllerMenu += value;
            remove => On.UIManager.UIGoToRemapControllerMenu -= value;
        }

        public static event On.UIManager.hook_UIGoToKeyboardMenu UIGoToKeyboardMenu
        {
            add => On.UIManager.UIGoToKeyboardMenu += value;
            remove => On.UIManager.UIGoToKeyboardMenu -= value;
        }

        public static event On.UIManager.hook_UIGoToAudioMenu UIGoToAudioMenu
        {
            add => On.UIManager.UIGoToAudioMenu += value;
            remove => On.UIManager.UIGoToAudioMenu -= value;
        }

        public static event On.UIManager.hook_UIGoToVideoMenu UIGoToVideoMenu
        {
            add => On.UIManager.UIGoToVideoMenu += value;
            remove => On.UIManager.UIGoToVideoMenu -= value;
        }

        public static event On.UIManager.hook_UIGoToPauseMenu UIGoToPauseMenu
        {
            add => On.UIManager.UIGoToPauseMenu += value;
            remove => On.UIManager.UIGoToPauseMenu -= value;
        }

        public static event On.UIManager.hook_UIClosePauseMenu UIClosePauseMenu
        {
            add => On.UIManager.UIClosePauseMenu += value;
            remove => On.UIManager.UIClosePauseMenu -= value;
        }

        public static event On.UIManager.hook_UIClearPauseMenu UIClearPauseMenu
        {
            add => On.UIManager.UIClearPauseMenu += value;
            remove => On.UIManager.UIClearPauseMenu -= value;
        }

        public static event On.UIManager.hook_UnClearPauseMenu UnClearPauseMenu
        {
            add => On.UIManager.UnClearPauseMenu += value;
            remove => On.UIManager.UnClearPauseMenu -= value;
        }

        public static event On.UIManager.hook_UIGoToOverscanMenu UIGoToOverscanMenu
        {
            add => On.UIManager.UIGoToOverscanMenu += value;
            remove => On.UIManager.UIGoToOverscanMenu -= value;
        }

        public static event On.UIManager.hook_UIGoToBrightnessMenu UIGoToBrightnessMenu
        {
            add => On.UIManager.UIGoToBrightnessMenu += value;
            remove => On.UIManager.UIGoToBrightnessMenu -= value;
        }

        public static event On.UIManager.hook_UIGoToGameOptionsMenu UIGoToGameOptionsMenu
        {
            add => On.UIManager.UIGoToGameOptionsMenu += value;
            remove => On.UIManager.UIGoToGameOptionsMenu -= value;
        }

        public static event On.UIManager.hook_UIGoToAchievementsMenu UIGoToAchievementsMenu
        {
            add => On.UIManager.UIGoToAchievementsMenu += value;
            remove => On.UIManager.UIGoToAchievementsMenu -= value;
        }

        public static event On.UIManager.hook_UIGoToExtrasMenu UIGoToExtrasMenu
        {
            add => On.UIManager.UIGoToExtrasMenu += value;
            remove => On.UIManager.UIGoToExtrasMenu -= value;
        }

        public static event On.UIManager.hook_UIGoToExtrasContentMenu UIGoToExtrasContentMenu
        {
            add => On.UIManager.UIGoToExtrasContentMenu += value;
            remove => On.UIManager.UIGoToExtrasContentMenu -= value;
        }

        public static event On.UIManager.hook_UIShowQuitGamePrompt UIShowQuitGamePrompt
        {
            add => On.UIManager.UIShowQuitGamePrompt += value;
            remove => On.UIManager.UIShowQuitGamePrompt -= value;
        }

        public static event On.UIManager.hook_UIShowReturnMenuPrompt UIShowReturnMenuPrompt
        {
            add => On.UIManager.UIShowReturnMenuPrompt += value;
            remove => On.UIManager.UIShowReturnMenuPrompt -= value;
        }

        public static event On.UIManager.hook_UIShowResolutionPrompt UIShowResolutionPrompt
        {
            add => On.UIManager.UIShowResolutionPrompt += value;
            remove => On.UIManager.UIShowResolutionPrompt -= value;
        }

        public static event On.UIManager.hook_UILeaveExitToMenuPrompt UILeaveExitToMenuPrompt
        {
            add => On.UIManager.UILeaveExitToMenuPrompt += value;
            remove => On.UIManager.UILeaveExitToMenuPrompt -= value;
        }

        public static event On.UIManager.hook_UIGoToPlayModeMenu UIGoToPlayModeMenu
        {
            add => On.UIManager.UIGoToPlayModeMenu += value;
            remove => On.UIManager.UIGoToPlayModeMenu -= value;
        }

        public static event On.UIManager.hook_UIReturnToMainMenu UIReturnToMainMenu
        {
            add => On.UIManager.UIReturnToMainMenu += value;
            remove => On.UIManager.UIReturnToMainMenu -= value;
        }

        public static event On.UIManager.hook_UIGoToMenuCredits UIGoToMenuCredits
        {
            add => On.UIManager.UIGoToMenuCredits += value;
            remove => On.UIManager.UIGoToMenuCredits -= value;
        }

        public static event On.UIManager.hook_UIStartNewGame UIStartNewGame
        {
            add => On.UIManager.UIStartNewGame += value;
            remove => On.UIManager.UIStartNewGame -= value;
        }

        public static event On.UIManager.hook_UIStartNewGameContinue UIStartNewGameContinue
        {
            add => On.UIManager.UIStartNewGameContinue += value;
            remove => On.UIManager.UIStartNewGameContinue -= value;
        }

        public static event On.UIManager.hook_StartNewGame StartNewGame
        {
            add => On.UIManager.StartNewGame += value;
            remove => On.UIManager.StartNewGame -= value;
        }

        public static event On.UIManager.hook_ContinueGame ContinueGame
        {
            add => On.UIManager.ContinueGame += value;
            remove => On.UIManager.ContinueGame -= value;
        }

        public static event On.UIManager.hook_GoToEngageMenu GoToEngageMenu
        {
            add => On.UIManager.GoToEngageMenu += value;
            remove => On.UIManager.GoToEngageMenu -= value;
        }

        public static event On.UIManager.hook_GoToNoSaveMenu GoToNoSaveMenu
        {
            add => On.UIManager.GoToNoSaveMenu += value;
            remove => On.UIManager.GoToNoSaveMenu -= value;
        }

        public static event On.UIManager.hook_GoToMainMenu GoToMainMenu
        {
            add => On.UIManager.GoToMainMenu += value;
            remove => On.UIManager.GoToMainMenu -= value;
        }

        public static event On.UIManager.hook_GoToProfileMenu GoToProfileMenu
        {
            add => On.UIManager.GoToProfileMenu += value;
            remove => On.UIManager.GoToProfileMenu -= value;
        }

        public static event On.UIManager.hook_PrepareSaveFilesInOrder PrepareSaveFilesInOrder
        {
            add => On.UIManager.PrepareSaveFilesInOrder += value;
            remove => On.UIManager.PrepareSaveFilesInOrder -= value;
        }

        public static event On.UIManager.hook_GoToOptionsMenu GoToOptionsMenu
        {
            add => On.UIManager.GoToOptionsMenu += value;
            remove => On.UIManager.GoToOptionsMenu -= value;
        }

        public static event On.UIManager.hook_GoToControllerMenu GoToControllerMenu
        {
            add => On.UIManager.GoToControllerMenu += value;
            remove => On.UIManager.GoToControllerMenu -= value;
        }

        public static event On.UIManager.hook_GoToRemapControllerMenu GoToRemapControllerMenu
        {
            add => On.UIManager.GoToRemapControllerMenu += value;
            remove => On.UIManager.GoToRemapControllerMenu -= value;
        }

        public static event On.UIManager.hook_GoToKeyboardMenu GoToKeyboardMenu
        {
            add => On.UIManager.GoToKeyboardMenu += value;
            remove => On.UIManager.GoToKeyboardMenu -= value;
        }

        public static event On.UIManager.hook_GoToAudioMenu GoToAudioMenu
        {
            add => On.UIManager.GoToAudioMenu += value;
            remove => On.UIManager.GoToAudioMenu -= value;
        }

        public static event On.UIManager.hook_GoToVideoMenu GoToVideoMenu
        {
            add => On.UIManager.GoToVideoMenu += value;
            remove => On.UIManager.GoToVideoMenu -= value;
        }

        public static event On.UIManager.hook_GoToOverscanMenu GoToOverscanMenu
        {
            add => On.UIManager.GoToOverscanMenu += value;
            remove => On.UIManager.GoToOverscanMenu -= value;
        }

        public static event On.UIManager.hook_GoToBrightnessMenu GoToBrightnessMenu
        {
            add => On.UIManager.GoToBrightnessMenu += value;
            remove => On.UIManager.GoToBrightnessMenu -= value;
        }

        public static event On.UIManager.hook_GoToGameOptionsMenu GoToGameOptionsMenu
        {
            add => On.UIManager.GoToGameOptionsMenu += value;
            remove => On.UIManager.GoToGameOptionsMenu -= value;
        }

        public static event On.UIManager.hook_GoToAchievementsMenu GoToAchievementsMenu
        {
            add => On.UIManager.GoToAchievementsMenu += value;
            remove => On.UIManager.GoToAchievementsMenu -= value;
        }

        public static event On.UIManager.hook_GoToExtrasMenu GoToExtrasMenu
        {
            add => On.UIManager.GoToExtrasMenu += value;
            remove => On.UIManager.GoToExtrasMenu -= value;
        }

        public static event On.UIManager.hook_GoToExtrasContentMenu GoToExtrasContentMenu
        {
            add => On.UIManager.GoToExtrasContentMenu += value;
            remove => On.UIManager.GoToExtrasContentMenu -= value;
        }

        public static event On.UIManager.hook_GoToQuitGamePrompt GoToQuitGamePrompt
        {
            add => On.UIManager.GoToQuitGamePrompt += value;
            remove => On.UIManager.GoToQuitGamePrompt -= value;
        }

        public static event On.UIManager.hook_GoToReturnMenuPrompt GoToReturnMenuPrompt
        {
            add => On.UIManager.GoToReturnMenuPrompt += value;
            remove => On.UIManager.GoToReturnMenuPrompt -= value;
        }

        public static event On.UIManager.hook_GoToResolutionPrompt GoToResolutionPrompt
        {
            add => On.UIManager.GoToResolutionPrompt += value;
            remove => On.UIManager.GoToResolutionPrompt -= value;
        }

        public static event On.UIManager.hook_LeaveOptionsMenu LeaveOptionsMenu
        {
            add => On.UIManager.LeaveOptionsMenu += value;
            remove => On.UIManager.LeaveOptionsMenu -= value;
        }

        public static event On.UIManager.hook_LeaveExitToMenuPrompt LeaveExitToMenuPrompt
        {
            add => On.UIManager.LeaveExitToMenuPrompt += value;
            remove => On.UIManager.LeaveExitToMenuPrompt -= value;
        }

        public static event On.UIManager.hook_GoToPlayModeMenu GoToPlayModeMenu
        {
            add => On.UIManager.GoToPlayModeMenu += value;
            remove => On.UIManager.GoToPlayModeMenu -= value;
        }

        public static event On.UIManager.hook_ReturnToMainMenu ReturnToMainMenu
        {
            add => On.UIManager.ReturnToMainMenu += value;
            remove => On.UIManager.ReturnToMainMenu -= value;
        }

        public static event On.UIManager.hook_GoToPauseMenu GoToPauseMenu
        {
            add => On.UIManager.GoToPauseMenu += value;
            remove => On.UIManager.GoToPauseMenu -= value;
        }

        public static event On.UIManager.hook_GoToMenuCredits GoToMenuCredits
        {
            add => On.UIManager.GoToMenuCredits += value;
            remove => On.UIManager.GoToMenuCredits -= value;
        }

        public static event On.UIManager.hook_HideCutscenePrompt HideCutscenePrompt
        {
            add => On.UIManager.HideCutscenePrompt += value;
            remove => On.UIManager.HideCutscenePrompt -= value;
        }

        public static event On.UIManager.hook_ApplyAudioMenuSettings ApplyAudioMenuSettings
        {
            add => On.UIManager.ApplyAudioMenuSettings += value;
            remove => On.UIManager.ApplyAudioMenuSettings -= value;
        }

        public static event On.UIManager.hook_ApplyVideoMenuSettings ApplyVideoMenuSettings
        {
            add => On.UIManager.ApplyVideoMenuSettings += value;
            remove => On.UIManager.ApplyVideoMenuSettings -= value;
        }

        public static event On.UIManager.hook_ApplyControllerMenuSettings ApplyControllerMenuSettings
        {
            add => On.UIManager.ApplyControllerMenuSettings += value;
            remove => On.UIManager.ApplyControllerMenuSettings -= value;
        }

        public static event On.UIManager.hook_ApplyRemapGamepadMenuSettings ApplyRemapGamepadMenuSettings
        {
            add => On.UIManager.ApplyRemapGamepadMenuSettings += value;
            remove => On.UIManager.ApplyRemapGamepadMenuSettings -= value;
        }

        public static event On.UIManager.hook_ApplyKeyboardMenuSettings ApplyKeyboardMenuSettings
        {
            add => On.UIManager.ApplyKeyboardMenuSettings += value;
            remove => On.UIManager.ApplyKeyboardMenuSettings -= value;
        }

        public static event On.UIManager.hook_ApplyOverscanSettings ApplyOverscanSettings
        {
            add => On.UIManager.ApplyOverscanSettings += value;
            remove => On.UIManager.ApplyOverscanSettings -= value;
        }

        public static event On.UIManager.hook_ApplyBrightnessSettings ApplyBrightnessSettings
        {
            add => On.UIManager.ApplyBrightnessSettings += value;
            remove => On.UIManager.ApplyBrightnessSettings -= value;
        }

        public static event On.UIManager.hook_ApplyGameMenuSettings ApplyGameMenuSettings
        {
            add => On.UIManager.ApplyGameMenuSettings += value;
            remove => On.UIManager.ApplyGameMenuSettings -= value;
        }

        public static event On.UIManager.hook_SaveOverscanSettings SaveOverscanSettings
        {
            add => On.UIManager.SaveOverscanSettings += value;
            remove => On.UIManager.SaveOverscanSettings -= value;
        }

        public static event On.UIManager.hook_SaveBrightnessSettings SaveBrightnessSettings
        {
            add => On.UIManager.SaveBrightnessSettings += value;
            remove => On.UIManager.SaveBrightnessSettings -= value;
        }

        public static event On.UIManager.hook_DefaultAudioMenuSettings DefaultAudioMenuSettings
        {
            add => On.UIManager.DefaultAudioMenuSettings += value;
            remove => On.UIManager.DefaultAudioMenuSettings -= value;
        }

        public static event On.UIManager.hook_DefaultVideoMenuSettings DefaultVideoMenuSettings
        {
            add => On.UIManager.DefaultVideoMenuSettings += value;
            remove => On.UIManager.DefaultVideoMenuSettings -= value;
        }

        public static event On.UIManager.hook_DefaultGamepadMenuSettings DefaultGamepadMenuSettings
        {
            add => On.UIManager.DefaultGamepadMenuSettings += value;
            remove => On.UIManager.DefaultGamepadMenuSettings -= value;
        }

        public static event On.UIManager.hook_DefaultKeyboardMenuSettings DefaultKeyboardMenuSettings
        {
            add => On.UIManager.DefaultKeyboardMenuSettings += value;
            remove => On.UIManager.DefaultKeyboardMenuSettings -= value;
        }

        public static event On.UIManager.hook_DefaultGameMenuSettings DefaultGameMenuSettings
        {
            add => On.UIManager.DefaultGameMenuSettings += value;
            remove => On.UIManager.DefaultGameMenuSettings -= value;
        }

        public static event On.UIManager.hook_LoadStoredSettings LoadStoredSettings
        {
            add => On.UIManager.LoadStoredSettings += value;
            remove => On.UIManager.LoadStoredSettings -= value;
        }

        public static event On.UIManager.hook_LoadAudioSettings LoadAudioSettings
        {
            add => On.UIManager.LoadAudioSettings += value;
            remove => On.UIManager.LoadAudioSettings -= value;
        }

        public static event On.UIManager.hook_LoadVideoSettings LoadVideoSettings
        {
            add => On.UIManager.LoadVideoSettings += value;
            remove => On.UIManager.LoadVideoSettings -= value;
        }

        public static event On.UIManager.hook_LoadGameOptionsSettings LoadGameOptionsSettings
        {
            add => On.UIManager.LoadGameOptionsSettings += value;
            remove => On.UIManager.LoadGameOptionsSettings -= value;
        }

        public static event On.UIManager.hook_LoadControllerSettings LoadControllerSettings
        {
            add => On.UIManager.LoadControllerSettings += value;
            remove => On.UIManager.LoadControllerSettings -= value;
        }

        public static event On.UIManager.hook_RefreshAudioControls RefreshAudioControls
        {
            add => On.UIManager.RefreshAudioControls += value;
            remove => On.UIManager.RefreshAudioControls -= value;
        }

        public static event On.UIManager.hook_RefreshVideoControls RefreshVideoControls
        {
            add => On.UIManager.RefreshVideoControls += value;
            remove => On.UIManager.RefreshVideoControls -= value;
        }

        public static event On.UIManager.hook_DisableFrameCapSetting DisableFrameCapSetting
        {
            add => On.UIManager.DisableFrameCapSetting += value;
            remove => On.UIManager.DisableFrameCapSetting -= value;
        }

        public static event On.UIManager.hook_DisableVsyncSetting DisableVsyncSetting
        {
            add => On.UIManager.DisableVsyncSetting += value;
            remove => On.UIManager.DisableVsyncSetting -= value;
        }

        public static event On.UIManager.hook_RefreshKeyboardControls RefreshKeyboardControls
        {
            add => On.UIManager.RefreshKeyboardControls += value;
            remove => On.UIManager.RefreshKeyboardControls -= value;
        }

        public static event On.UIManager.hook_RefreshGameOptionsControls RefreshGameOptionsControls
        {
            add => On.UIManager.RefreshGameOptionsControls += value;
            remove => On.UIManager.RefreshGameOptionsControls -= value;
        }

        public static event On.UIManager.hook_RefreshAchievementsList RefreshAchievementsList
        {
            add => On.UIManager.RefreshAchievementsList += value;
            remove => On.UIManager.RefreshAchievementsList -= value;
        }

        public static event On.UIManager.hook_UpdateMenuAchievementStatus UpdateMenuAchievementStatus
        {
            add => On.UIManager.UpdateMenuAchievementStatus += value;
            remove => On.UIManager.UpdateMenuAchievementStatus -= value;
        }

        public static event On.UIManager.hook_TogglePauseGame TogglePauseGame
        {
            add => On.UIManager.TogglePauseGame += value;
            remove => On.UIManager.TogglePauseGame -= value;
        }

        public static event On.UIManager.hook_QuitGame QuitGame
        {
            add => On.UIManager.QuitGame += value;
            remove => On.UIManager.QuitGame -= value;
        }

        public static event On.UIManager.hook_FadeOutMenuAudio FadeOutMenuAudio
        {
            add => On.UIManager.FadeOutMenuAudio += value;
            remove => On.UIManager.FadeOutMenuAudio -= value;
        }

        public static event On.UIManager.hook_AudioGoToPauseMenu AudioGoToPauseMenu
        {
            add => On.UIManager.AudioGoToPauseMenu += value;
            remove => On.UIManager.AudioGoToPauseMenu -= value;
        }

        public static event On.UIManager.hook_AudioGoToGameplay AudioGoToGameplay
        {
            add => On.UIManager.AudioGoToGameplay += value;
            remove => On.UIManager.AudioGoToGameplay -= value;
        }

        public static event On.UIManager.hook_ConfigureMenu ConfigureMenu
        {
            add => On.UIManager.ConfigureMenu += value;
            remove => On.UIManager.ConfigureMenu -= value;
        }

        public static event On.UIManager.hook_HideCurrentMenu HideCurrentMenu
        {
            add => On.UIManager.HideCurrentMenu += value;
            remove => On.UIManager.HideCurrentMenu -= value;
        }

        public static event On.UIManager.hook_ShowMenu ShowMenu
        {
            add => On.UIManager.ShowMenu += value;
            remove => On.UIManager.ShowMenu -= value;
        }

        public static event On.UIManager.hook_HideMenu HideMenu
        {
            add => On.UIManager.HideMenu += value;
            remove => On.UIManager.HideMenu -= value;
        }

        public static event On.UIManager.hook_HideMenuInstant HideMenuInstant
        {
            add => On.UIManager.HideMenuInstant += value;
            remove => On.UIManager.HideMenuInstant -= value;
        }

        public static event On.UIManager.hook_HideSaveProfileMenu HideSaveProfileMenu
        {
            add => On.UIManager.HideSaveProfileMenu += value;
            remove => On.UIManager.HideSaveProfileMenu -= value;
        }

        public static event On.UIManager.hook_DisableScreens DisableScreens
        {
            add => On.UIManager.DisableScreens += value;
            remove => On.UIManager.DisableScreens -= value;
        }

        public static event On.UIManager.hook_ShowCanvas ShowCanvas
        {
            add => On.UIManager.ShowCanvas += value;
            remove => On.UIManager.ShowCanvas -= value;
        }

        public static event On.UIManager.hook_HideCanvas HideCanvas
        {
            add => On.UIManager.HideCanvas += value;
            remove => On.UIManager.HideCanvas -= value;
        }

        public static event On.UIManager.hook_ShowCanvasGroup ShowCanvasGroup
        {
            add => On.UIManager.ShowCanvasGroup += value;
            remove => On.UIManager.ShowCanvasGroup -= value;
        }

        public static event On.UIManager.hook_HideCanvasGroup HideCanvasGroup
        {
            add => On.UIManager.HideCanvasGroup += value;
            remove => On.UIManager.HideCanvasGroup -= value;
        }

        public static event On.UIManager.hook_FadeInCanvasGroup FadeInCanvasGroup
        {
            add => On.UIManager.FadeInCanvasGroup += value;
            remove => On.UIManager.FadeInCanvasGroup -= value;
        }

        public static event On.UIManager.hook_FadeInCanvasGroupAlpha FadeInCanvasGroupAlpha
        {
            add => On.UIManager.FadeInCanvasGroupAlpha += value;
            remove => On.UIManager.FadeInCanvasGroupAlpha -= value;
        }

        public static event On.UIManager.hook_FadeOutCanvasGroup FadeOutCanvasGroup
        {
            add => On.UIManager.FadeOutCanvasGroup += value;
            remove => On.UIManager.FadeOutCanvasGroup -= value;
        }

        public static event On.UIManager.hook_FadeInSprite FadeInSprite
        {
            add => On.UIManager.FadeInSprite += value;
            remove => On.UIManager.FadeInSprite -= value;
        }

        public static event On.UIManager.hook_FadeOutSprite FadeOutSprite
        {
            add => On.UIManager.FadeOutSprite += value;
            remove => On.UIManager.FadeOutSprite -= value;
        }

        public static event On.UIManager.hook_EnableChildren_RectTransform EnableChildren_RectTransform
        {
            add => On.UIManager.EnableChildren_RectTransform += value;
            remove => On.UIManager.EnableChildren_RectTransform -= value;
        }

        public static event On.UIManager.hook_EnableChildren_Canvas EnableChildren_Canvas
        {
            add => On.UIManager.EnableChildren_Canvas += value;
            remove => On.UIManager.EnableChildren_Canvas -= value;
        }

        public static event On.UIManager.hook_DisableChildren DisableChildren
        {
            add => On.UIManager.DisableChildren += value;
            remove => On.UIManager.DisableChildren -= value;
        }

        public static event On.UIManager.hook_GetAnimationClipLength GetAnimationClipLength
        {
            add => On.UIManager.GetAnimationClipLength += value;
            remove => On.UIManager.GetAnimationClipLength -= value;
        }

        public static event On.UIManager.hook_MakeMenuLean MakeMenuLean
        {
            add => On.UIManager.MakeMenuLean += value;
            remove => On.UIManager.MakeMenuLean -= value;
        }

        public static event Delegates.get_currentDynamicMenu_NormalArgs get_currentDynamicMenu
        {
            add => HookEndpointManager.Add<Delegates.get_currentDynamicMenu_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "get_currentDynamicMenu"), value);
            remove => HookEndpointManager.Remove<Delegates.get_currentDynamicMenu_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "get_currentDynamicMenu"), value);
        }

        public static event Delegates.set_currentDynamicMenu_NormalArgs set_currentDynamicMenu
        {
            add => HookEndpointManager.Add<Delegates.set_currentDynamicMenu_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "set_currentDynamicMenu"), value);
            remove => HookEndpointManager.Remove<Delegates.set_currentDynamicMenu_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "set_currentDynamicMenu"), value);
        }

        public static event Delegates.orig_get_instance_NormalArgs orig_get_instance
        {
            add => HookEndpointManager.Add<Delegates.orig_get_instance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "orig_get_instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.orig_get_instance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "orig_get_instance", false), value);
        }

        public static event Delegates.LoadImage_NormalArgs LoadImage
        {
            add => HookEndpointManager.Add<Delegates.LoadImage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "LoadImage"), value);
            remove => HookEndpointManager.Remove<Delegates.LoadImage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "LoadImage"), value);
        }

        public static event Delegates.orig_Awake_NormalArgs orig_Awake
        {
            add => HookEndpointManager.Add<Delegates.orig_Awake_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "orig_Awake"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_Awake_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "orig_Awake"), value);
        }

        public static event Delegates.orig_Start_NormalArgs orig_Start
        {
            add => HookEndpointManager.Add<Delegates.orig_Start_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "orig_Start"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_Start_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "orig_Start"), value);
        }

        public static event Delegates.orig_HideCurrentMenu_NormalArgs orig_HideCurrentMenu
        {
            add => HookEndpointManager.Add<Delegates.orig_HideCurrentMenu_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "orig_HideCurrentMenu"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_HideCurrentMenu_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "orig_HideCurrentMenu"), value);
        }

        public static event Delegates.UIGoToDynamicMenu_NormalArgs UIGoToDynamicMenu
        {
            add => HookEndpointManager.Add<Delegates.UIGoToDynamicMenu_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "UIGoToDynamicMenu"), value);
            remove => HookEndpointManager.Remove<Delegates.UIGoToDynamicMenu_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "UIGoToDynamicMenu"), value);
        }

        public static event Delegates.GoToDynamicMenu_NormalArgs GoToDynamicMenu
        {
            add => HookEndpointManager.Add<Delegates.GoToDynamicMenu_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "GoToDynamicMenu"), value);
            remove => HookEndpointManager.Remove<Delegates.GoToDynamicMenu_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "GoToDynamicMenu"), value);
        }

        public static event Delegates.UILeaveDynamicMenu_NormalArgs UILeaveDynamicMenu
        {
            add => HookEndpointManager.Add<Delegates.UILeaveDynamicMenu_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "UILeaveDynamicMenu"), value);
            remove => HookEndpointManager.Remove<Delegates.UILeaveDynamicMenu_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "UILeaveDynamicMenu"), value);
        }

        public static event Delegates.LeaveDynamicMenu_NormalArgs LeaveDynamicMenu
        {
            add => HookEndpointManager.Add<Delegates.LeaveDynamicMenu_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "LeaveDynamicMenu"), value);
            remove => HookEndpointManager.Remove<Delegates.LeaveDynamicMenu_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "LeaveDynamicMenu"), value);
        }

        public static event Delegates.UIPauseToDynamicMenu_NormalArgs UIPauseToDynamicMenu
        {
            add => HookEndpointManager.Add<Delegates.UIPauseToDynamicMenu_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "UIPauseToDynamicMenu"), value);
            remove => HookEndpointManager.Remove<Delegates.UIPauseToDynamicMenu_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "UIPauseToDynamicMenu"), value);
        }

        public static event Delegates.PauseToDynamicMenu_NormalArgs PauseToDynamicMenu
        {
            add => HookEndpointManager.Add<Delegates.PauseToDynamicMenu_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "PauseToDynamicMenu"), value);
            remove => HookEndpointManager.Remove<Delegates.PauseToDynamicMenu_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UIManager), "PauseToDynamicMenu"), value);
        }
    }
}