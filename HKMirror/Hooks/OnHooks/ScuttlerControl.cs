namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ScuttlerControl class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnScuttlerControl
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.ScuttlerControl.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.ScuttlerControl.orig_Awake orig, ScuttlerControl self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.ScuttlerControl.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.ScuttlerControl.orig_Start orig, ScuttlerControl self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.ScuttlerControl.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.ScuttlerControl.orig_Update orig, ScuttlerControl self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookLand()
        {
            if (!HookedList.Contains("Land"))
            {
                HookedList.Add("Land");
                On.ScuttlerControl.Land += Land;
            }
        }

        internal static event Delegates.Land_BeforeArgs _beforeLand;

        private static IEnumerator Land(On.ScuttlerControl.orig_Land orig, ScuttlerControl self)
        {
            Delegates.Params_Land @params = new()
            {
                self = self
            };
            _beforeLand?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookRun()
        {
            if (!HookedList.Contains("Run"))
            {
                HookedList.Add("Run");
                On.ScuttlerControl.Run += Run;
            }
        }

        internal static event Delegates.Run_BeforeArgs _beforeRun;

        private static IEnumerator Run(On.ScuttlerControl.orig_Run orig, ScuttlerControl self)
        {
            Delegates.Params_Run @params = new()
            {
                self = self
            };
            _beforeRun?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookBounce()
        {
            if (!HookedList.Contains("Bounce"))
            {
                HookedList.Add("Bounce");
                On.ScuttlerControl.Bounce += Bounce;
            }
        }

        internal static event Delegates.Bounce_BeforeArgs _beforeBounce;

        private static IEnumerator Bounce(On.ScuttlerControl.orig_Bounce orig, ScuttlerControl self, float angleMin,
            float angleMax)
        {
            Delegates.Params_Bounce @params = new()
            {
                self = self, angleMin = angleMin, angleMax = angleMax
            };
            _beforeBounce?.Invoke(@params);
            self = @params.self;
            angleMin = @params.angleMin;
            angleMax = @params.angleMax;
            return orig(self, angleMin, angleMax);
        }

        internal static void HookHeal()
        {
            if (!HookedList.Contains("Heal"))
            {
                HookedList.Add("Heal");
                On.ScuttlerControl.Heal += Heal;
            }
        }

        internal static event Delegates.Heal_BeforeArgs _beforeHeal;

        private static IEnumerator Heal(On.ScuttlerControl.orig_Heal orig, ScuttlerControl self)
        {
            Delegates.Params_Heal @params = new()
            {
                self = self
            };
            _beforeHeal?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookHit()
        {
            if (!HookedList.Contains("Hit"))
            {
                HookedList.Add("Hit");
                On.ScuttlerControl.Hit += Hit;
            }
        }

        internal static event Delegates.Hit_BeforeArgs _beforeHit;
        internal static event Delegates.Hit_NormalArgs _afterHit;

        private static void Hit(On.ScuttlerControl.orig_Hit orig, ScuttlerControl self, HitInstance damageInstance)
        {
            Delegates.Params_Hit @params = new()
            {
                self = self, damageInstance = damageInstance
            };
            _beforeHit?.Invoke(@params);
            self = @params.self;
            damageInstance = @params.damageInstance;
            orig(self, damageInstance);
            if (_afterHit != null) _afterHit.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void Bounce_BeforeArgs(Params_Bounce args);

        public delegate IEnumerator Bounce_NormalArgs(Params_Bounce args);

        public delegate void Heal_BeforeArgs(Params_Heal args);

        public delegate IEnumerator Heal_NormalArgs(Params_Heal args);

        public delegate void Hit_BeforeArgs(Params_Hit args);

        public delegate void Hit_NormalArgs(Params_Hit args);

        public delegate void Land_BeforeArgs(Params_Land args);

        public delegate IEnumerator Land_NormalArgs(Params_Land args);

        public delegate void Run_BeforeArgs(Params_Run args);

        public delegate IEnumerator Run_NormalArgs(Params_Run args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_Awake
        {
            public ScuttlerControl self;
        }

        public sealed class Params_Start
        {
            public ScuttlerControl self;
        }

        public sealed class Params_Update
        {
            public ScuttlerControl self;
        }

        public sealed class Params_Land
        {
            public ScuttlerControl self;
        }

        public sealed class Params_Run
        {
            public ScuttlerControl self;
        }

        public sealed class Params_Bounce
        {
            public float angleMax;
            public float angleMin;
            public ScuttlerControl self;
        }

        public sealed class Params_Heal
        {
            public ScuttlerControl self;
        }

        public sealed class Params_Hit
        {
            public HitInstance damageInstance;
            public ScuttlerControl self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.Land_BeforeArgs Land
        {
            add
            {
                HookHandler._beforeLand += value;
                HookHandler.HookLand();
            }
            remove => HookHandler._beforeLand -= value;
        }

        public static event Delegates.Run_BeforeArgs Run
        {
            add
            {
                HookHandler._beforeRun += value;
                HookHandler.HookRun();
            }
            remove => HookHandler._beforeRun -= value;
        }

        public static event Delegates.Bounce_BeforeArgs Bounce
        {
            add
            {
                HookHandler._beforeBounce += value;
                HookHandler.HookBounce();
            }
            remove => HookHandler._beforeBounce -= value;
        }

        public static event Delegates.Heal_BeforeArgs Heal
        {
            add
            {
                HookHandler._beforeHeal += value;
                HookHandler.HookHeal();
            }
            remove => HookHandler._beforeHeal -= value;
        }

        public static event Delegates.Hit_BeforeArgs Hit
        {
            add
            {
                HookHandler._beforeHit += value;
                HookHandler.HookHit();
            }
            remove => HookHandler._beforeHit -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.Hit_NormalArgs Hit
        {
            add
            {
                HookHandler._afterHit += value;
                HookHandler.HookHit();
            }
            remove => HookHandler._afterHit -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.ScuttlerControl.hook_Awake Awake
        {
            add => On.ScuttlerControl.Awake += value;
            remove => On.ScuttlerControl.Awake -= value;
        }

        public static event On.ScuttlerControl.hook_Start Start
        {
            add => On.ScuttlerControl.Start += value;
            remove => On.ScuttlerControl.Start -= value;
        }

        public static event On.ScuttlerControl.hook_Update Update
        {
            add => On.ScuttlerControl.Update += value;
            remove => On.ScuttlerControl.Update -= value;
        }

        public static event On.ScuttlerControl.hook_Land Land
        {
            add => On.ScuttlerControl.Land += value;
            remove => On.ScuttlerControl.Land -= value;
        }

        public static event On.ScuttlerControl.hook_Run Run
        {
            add => On.ScuttlerControl.Run += value;
            remove => On.ScuttlerControl.Run -= value;
        }

        public static event On.ScuttlerControl.hook_Bounce Bounce
        {
            add => On.ScuttlerControl.Bounce += value;
            remove => On.ScuttlerControl.Bounce -= value;
        }

        public static event On.ScuttlerControl.hook_Heal Heal
        {
            add => On.ScuttlerControl.Heal += value;
            remove => On.ScuttlerControl.Heal -= value;
        }

        public static event On.ScuttlerControl.hook_Hit Hit
        {
            add => On.ScuttlerControl.Hit += value;
            remove => On.ScuttlerControl.Hit -= value;
        }
    }
}