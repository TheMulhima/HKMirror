using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ObjectPool class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnObjectPool
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_instance()
        {
            if (!HookedList.Contains("get_instance"))
            {
                HookedList.Add("get_instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ObjectPool), "get_instance", false), get_instance);
            }
        }

        internal static event Delegates.get_instance_BeforeArgs _beforeget_instance;
        internal static event Delegates.get_instance_NormalArgs _afterget_instance;

        private static ObjectPool get_instance(Func<ObjectPool> orig)
        {
            _beforeget_instance?.Invoke();
            var retVal = orig();
            if (_afterget_instance != null) retVal = _afterget_instance.Invoke();
            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.ObjectPool.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.ObjectPool.orig_Awake orig, ObjectPool self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.ObjectPool.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.ObjectPool.orig_Start orig, ObjectPool self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookCreateStartupPools()
        {
            if (!HookedList.Contains("CreateStartupPools"))
            {
                HookedList.Add("CreateStartupPools");
                On.ObjectPool.CreateStartupPools += CreateStartupPools;
            }
        }

        internal static event Delegates.CreateStartupPools_BeforeArgs _beforeCreateStartupPools;
        internal static event Delegates.CreateStartupPools_NormalArgs _afterCreateStartupPools;

        private static void CreateStartupPools(On.ObjectPool.orig_CreateStartupPools orig)
        {
            _beforeCreateStartupPools?.Invoke();
            orig();
            if (_afterCreateStartupPools != null) _afterCreateStartupPools.Invoke();
        }

        internal static void HookCreatePool()
        {
            if (!HookedList.Contains("CreatePool"))
            {
                HookedList.Add("CreatePool");
                On.ObjectPool.CreatePool += CreatePool;
            }
        }

        internal static event Delegates.CreatePool_BeforeArgs _beforeCreatePool;
        internal static event Delegates.CreatePool_NormalArgs _afterCreatePool;

        private static void CreatePool(On.ObjectPool.orig_CreatePool orig, GameObject prefab, int initialPoolSize)
        {
            Delegates.Params_CreatePool @params = new()
            {
                prefab = prefab, initialPoolSize = initialPoolSize
            };
            _beforeCreatePool?.Invoke(@params);
            prefab = @params.prefab;
            initialPoolSize = @params.initialPoolSize;
            orig(prefab, initialPoolSize);
            if (_afterCreatePool != null) _afterCreatePool.Invoke(@params);
        }

        internal static void HookRevertToStartState()
        {
            if (!HookedList.Contains("RevertToStartState"))
            {
                HookedList.Add("RevertToStartState");
                On.ObjectPool.RevertToStartState += RevertToStartState;
            }
        }

        internal static event Delegates.RevertToStartState_BeforeArgs _beforeRevertToStartState;
        internal static event Delegates.RevertToStartState_NormalArgs _afterRevertToStartState;

        private static void RevertToStartState(On.ObjectPool.orig_RevertToStartState orig, ObjectPool self)
        {
            Delegates.Params_RevertToStartState @params = new()
            {
                self = self
            };
            _beforeRevertToStartState?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRevertToStartState != null) _afterRevertToStartState.Invoke(@params);
        }

        internal static void HookSpawn_GameObject_Transform_Vector3_Quaternion()
        {
            if (!HookedList.Contains("Spawn_GameObject_Transform_Vector3_Quaternion"))
            {
                HookedList.Add("Spawn_GameObject_Transform_Vector3_Quaternion");
                On.ObjectPool.Spawn_GameObject_Transform_Vector3_Quaternion +=
                    Spawn_GameObject_Transform_Vector3_Quaternion;
            }
        }

        internal static event Delegates.Spawn_GameObject_Transform_Vector3_Quaternion_BeforeArgs
            _beforeSpawn_GameObject_Transform_Vector3_Quaternion;

        internal static event Delegates.Spawn_GameObject_Transform_Vector3_Quaternion_NormalArgs
            _afterSpawn_GameObject_Transform_Vector3_Quaternion;

        private static GameObject Spawn_GameObject_Transform_Vector3_Quaternion(
            On.ObjectPool.orig_Spawn_GameObject_Transform_Vector3_Quaternion orig, GameObject prefab, Transform parent,
            Vector3 position, Quaternion rotation)
        {
            Delegates.Params_Spawn_GameObject_Transform_Vector3_Quaternion @params = new()
            {
                prefab = prefab, parent = parent, position = position, rotation = rotation
            };
            _beforeSpawn_GameObject_Transform_Vector3_Quaternion?.Invoke(@params);
            prefab = @params.prefab;
            parent = @params.parent;
            position = @params.position;
            rotation = @params.rotation;
            var retVal = orig(prefab, parent, position, rotation);
            if (_afterSpawn_GameObject_Transform_Vector3_Quaternion != null)
                retVal = _afterSpawn_GameObject_Transform_Vector3_Quaternion.Invoke(@params);
            return retVal;
        }

        internal static void HookSpawn_GameObject_Transform_Vector3()
        {
            if (!HookedList.Contains("Spawn_GameObject_Transform_Vector3"))
            {
                HookedList.Add("Spawn_GameObject_Transform_Vector3");
                On.ObjectPool.Spawn_GameObject_Transform_Vector3 += Spawn_GameObject_Transform_Vector3;
            }
        }

        internal static event Delegates.Spawn_GameObject_Transform_Vector3_BeforeArgs
            _beforeSpawn_GameObject_Transform_Vector3;

        internal static event Delegates.Spawn_GameObject_Transform_Vector3_NormalArgs
            _afterSpawn_GameObject_Transform_Vector3;

        private static GameObject Spawn_GameObject_Transform_Vector3(
            On.ObjectPool.orig_Spawn_GameObject_Transform_Vector3 orig, GameObject prefab, Transform parent,
            Vector3 position)
        {
            Delegates.Params_Spawn_GameObject_Transform_Vector3 @params = new()
            {
                prefab = prefab, parent = parent, position = position
            };
            _beforeSpawn_GameObject_Transform_Vector3?.Invoke(@params);
            prefab = @params.prefab;
            parent = @params.parent;
            position = @params.position;
            var retVal = orig(prefab, parent, position);
            if (_afterSpawn_GameObject_Transform_Vector3 != null)
                retVal = _afterSpawn_GameObject_Transform_Vector3.Invoke(@params);
            return retVal;
        }

        internal static void HookSpawn_GameObject_Vector3_Quaternion()
        {
            if (!HookedList.Contains("Spawn_GameObject_Vector3_Quaternion"))
            {
                HookedList.Add("Spawn_GameObject_Vector3_Quaternion");
                On.ObjectPool.Spawn_GameObject_Vector3_Quaternion += Spawn_GameObject_Vector3_Quaternion;
            }
        }

        internal static event Delegates.Spawn_GameObject_Vector3_Quaternion_BeforeArgs
            _beforeSpawn_GameObject_Vector3_Quaternion;

        internal static event Delegates.Spawn_GameObject_Vector3_Quaternion_NormalArgs
            _afterSpawn_GameObject_Vector3_Quaternion;

        private static GameObject Spawn_GameObject_Vector3_Quaternion(
            On.ObjectPool.orig_Spawn_GameObject_Vector3_Quaternion orig, GameObject prefab, Vector3 position,
            Quaternion rotation)
        {
            Delegates.Params_Spawn_GameObject_Vector3_Quaternion @params = new()
            {
                prefab = prefab, position = position, rotation = rotation
            };
            _beforeSpawn_GameObject_Vector3_Quaternion?.Invoke(@params);
            prefab = @params.prefab;
            position = @params.position;
            rotation = @params.rotation;
            var retVal = orig(prefab, position, rotation);
            if (_afterSpawn_GameObject_Vector3_Quaternion != null)
                retVal = _afterSpawn_GameObject_Vector3_Quaternion.Invoke(@params);
            return retVal;
        }

        internal static void HookSpawn_GameObject_Transform()
        {
            if (!HookedList.Contains("Spawn_GameObject_Transform"))
            {
                HookedList.Add("Spawn_GameObject_Transform");
                On.ObjectPool.Spawn_GameObject_Transform += Spawn_GameObject_Transform;
            }
        }

        internal static event Delegates.Spawn_GameObject_Transform_BeforeArgs _beforeSpawn_GameObject_Transform;
        internal static event Delegates.Spawn_GameObject_Transform_NormalArgs _afterSpawn_GameObject_Transform;

        private static GameObject Spawn_GameObject_Transform(On.ObjectPool.orig_Spawn_GameObject_Transform orig,
            GameObject prefab, Transform parent)
        {
            Delegates.Params_Spawn_GameObject_Transform @params = new()
            {
                prefab = prefab, parent = parent
            };
            _beforeSpawn_GameObject_Transform?.Invoke(@params);
            prefab = @params.prefab;
            parent = @params.parent;
            var retVal = orig(prefab, parent);
            if (_afterSpawn_GameObject_Transform != null) retVal = _afterSpawn_GameObject_Transform.Invoke(@params);
            return retVal;
        }

        internal static void HookSpawn_GameObject_Vector3()
        {
            if (!HookedList.Contains("Spawn_GameObject_Vector3"))
            {
                HookedList.Add("Spawn_GameObject_Vector3");
                On.ObjectPool.Spawn_GameObject_Vector3 += Spawn_GameObject_Vector3;
            }
        }

        internal static event Delegates.Spawn_GameObject_Vector3_BeforeArgs _beforeSpawn_GameObject_Vector3;
        internal static event Delegates.Spawn_GameObject_Vector3_NormalArgs _afterSpawn_GameObject_Vector3;

        private static GameObject Spawn_GameObject_Vector3(On.ObjectPool.orig_Spawn_GameObject_Vector3 orig,
            GameObject prefab, Vector3 position)
        {
            Delegates.Params_Spawn_GameObject_Vector3 @params = new()
            {
                prefab = prefab, position = position
            };
            _beforeSpawn_GameObject_Vector3?.Invoke(@params);
            prefab = @params.prefab;
            position = @params.position;
            var retVal = orig(prefab, position);
            if (_afterSpawn_GameObject_Vector3 != null) retVal = _afterSpawn_GameObject_Vector3.Invoke(@params);
            return retVal;
        }

        internal static void HookSpawn_GameObject()
        {
            if (!HookedList.Contains("Spawn_GameObject"))
            {
                HookedList.Add("Spawn_GameObject");
                On.ObjectPool.Spawn_GameObject += Spawn_GameObject;
            }
        }

        internal static event Delegates.Spawn_GameObject_BeforeArgs _beforeSpawn_GameObject;
        internal static event Delegates.Spawn_GameObject_NormalArgs _afterSpawn_GameObject;

        private static GameObject Spawn_GameObject(On.ObjectPool.orig_Spawn_GameObject orig, GameObject prefab)
        {
            Delegates.Params_Spawn_GameObject @params = new()
            {
                prefab = prefab
            };
            _beforeSpawn_GameObject?.Invoke(@params);
            prefab = @params.prefab;
            var retVal = orig(prefab);
            if (_afterSpawn_GameObject != null) retVal = _afterSpawn_GameObject.Invoke(@params);
            return retVal;
        }

        internal static void HookRecycle_GameObject()
        {
            if (!HookedList.Contains("Recycle_GameObject"))
            {
                HookedList.Add("Recycle_GameObject");
                On.ObjectPool.Recycle_GameObject += Recycle_GameObject;
            }
        }

        internal static event Delegates.Recycle_GameObject_BeforeArgs _beforeRecycle_GameObject;
        internal static event Delegates.Recycle_GameObject_NormalArgs _afterRecycle_GameObject;

        private static void Recycle_GameObject(On.ObjectPool.orig_Recycle_GameObject orig, GameObject obj)
        {
            Delegates.Params_Recycle_GameObject @params = new()
            {
                obj = obj
            };
            _beforeRecycle_GameObject?.Invoke(@params);
            obj = @params.obj;
            orig(obj);
            if (_afterRecycle_GameObject != null) _afterRecycle_GameObject.Invoke(@params);
        }

        internal static void HookRecycle_GameObject_GameObject()
        {
            if (!HookedList.Contains("Recycle_GameObject_GameObject"))
            {
                HookedList.Add("Recycle_GameObject_GameObject");
                On.ObjectPool.Recycle_GameObject_GameObject += Recycle_GameObject_GameObject;
            }
        }

        internal static event Delegates.Recycle_GameObject_GameObject_BeforeArgs _beforeRecycle_GameObject_GameObject;
        internal static event Delegates.Recycle_GameObject_GameObject_NormalArgs _afterRecycle_GameObject_GameObject;

        private static void Recycle_GameObject_GameObject(On.ObjectPool.orig_Recycle_GameObject_GameObject orig,
            GameObject obj, GameObject prefab)
        {
            Delegates.Params_Recycle_GameObject_GameObject @params = new()
            {
                obj = obj, prefab = prefab
            };
            _beforeRecycle_GameObject_GameObject?.Invoke(@params);
            obj = @params.obj;
            prefab = @params.prefab;
            orig(obj, prefab);
            if (_afterRecycle_GameObject_GameObject != null) _afterRecycle_GameObject_GameObject.Invoke(@params);
        }

        internal static void HookRecycleAll_GameObject()
        {
            if (!HookedList.Contains("RecycleAll_GameObject"))
            {
                HookedList.Add("RecycleAll_GameObject");
                On.ObjectPool.RecycleAll_GameObject += RecycleAll_GameObject;
            }
        }

        internal static event Delegates.RecycleAll_GameObject_BeforeArgs _beforeRecycleAll_GameObject;
        internal static event Delegates.RecycleAll_GameObject_NormalArgs _afterRecycleAll_GameObject;

        private static void RecycleAll_GameObject(On.ObjectPool.orig_RecycleAll_GameObject orig, GameObject prefab)
        {
            Delegates.Params_RecycleAll_GameObject @params = new()
            {
                prefab = prefab
            };
            _beforeRecycleAll_GameObject?.Invoke(@params);
            prefab = @params.prefab;
            orig(prefab);
            if (_afterRecycleAll_GameObject != null) _afterRecycleAll_GameObject.Invoke(@params);
        }

        internal static void HookRecycleAll()
        {
            if (!HookedList.Contains("RecycleAll"))
            {
                HookedList.Add("RecycleAll");
                On.ObjectPool.RecycleAll += RecycleAll;
            }
        }

        internal static event Delegates.RecycleAll_BeforeArgs _beforeRecycleAll;
        internal static event Delegates.RecycleAll_NormalArgs _afterRecycleAll;

        private static void RecycleAll(On.ObjectPool.orig_RecycleAll orig)
        {
            _beforeRecycleAll?.Invoke();
            orig();
            if (_afterRecycleAll != null) _afterRecycleAll.Invoke();
        }

        internal static void HookIsSpawned()
        {
            if (!HookedList.Contains("IsSpawned"))
            {
                HookedList.Add("IsSpawned");
                On.ObjectPool.IsSpawned += IsSpawned;
            }
        }

        internal static event Delegates.IsSpawned_BeforeArgs _beforeIsSpawned;
        internal static event Delegates.IsSpawned_NormalArgs _afterIsSpawned;

        private static bool IsSpawned(On.ObjectPool.orig_IsSpawned orig, GameObject obj)
        {
            Delegates.Params_IsSpawned @params = new()
            {
                obj = obj
            };
            _beforeIsSpawned?.Invoke(@params);
            obj = @params.obj;
            var retVal = orig(obj);
            if (_afterIsSpawned != null) retVal = _afterIsSpawned.Invoke(@params);
            return retVal;
        }

        internal static void HookCountPooled()
        {
            if (!HookedList.Contains("CountPooled"))
            {
                HookedList.Add("CountPooled");
                On.ObjectPool.CountPooled += CountPooled;
            }
        }

        internal static event Delegates.CountPooled_BeforeArgs _beforeCountPooled;
        internal static event Delegates.CountPooled_NormalArgs _afterCountPooled;

        private static int CountPooled(On.ObjectPool.orig_CountPooled orig, GameObject prefab)
        {
            Delegates.Params_CountPooled @params = new()
            {
                prefab = prefab
            };
            _beforeCountPooled?.Invoke(@params);
            prefab = @params.prefab;
            var retVal = orig(prefab);
            if (_afterCountPooled != null) retVal = _afterCountPooled.Invoke(@params);
            return retVal;
        }

        internal static void HookCountSpawned()
        {
            if (!HookedList.Contains("CountSpawned"))
            {
                HookedList.Add("CountSpawned");
                On.ObjectPool.CountSpawned += CountSpawned;
            }
        }

        internal static event Delegates.CountSpawned_BeforeArgs _beforeCountSpawned;
        internal static event Delegates.CountSpawned_NormalArgs _afterCountSpawned;

        private static int CountSpawned(On.ObjectPool.orig_CountSpawned orig, GameObject prefab)
        {
            Delegates.Params_CountSpawned @params = new()
            {
                prefab = prefab
            };
            _beforeCountSpawned?.Invoke(@params);
            prefab = @params.prefab;
            var retVal = orig(prefab);
            if (_afterCountSpawned != null) retVal = _afterCountSpawned.Invoke(@params);
            return retVal;
        }

        internal static void HookCountAllPooled()
        {
            if (!HookedList.Contains("CountAllPooled"))
            {
                HookedList.Add("CountAllPooled");
                On.ObjectPool.CountAllPooled += CountAllPooled;
            }
        }

        internal static event Delegates.CountAllPooled_BeforeArgs _beforeCountAllPooled;
        internal static event Delegates.CountAllPooled_NormalArgs _afterCountAllPooled;

        private static int CountAllPooled(On.ObjectPool.orig_CountAllPooled orig)
        {
            _beforeCountAllPooled?.Invoke();
            var retVal = orig();
            if (_afterCountAllPooled != null) retVal = _afterCountAllPooled.Invoke();
            return retVal;
        }

        internal static void HookGetPooled()
        {
            if (!HookedList.Contains("GetPooled"))
            {
                HookedList.Add("GetPooled");
                On.ObjectPool.GetPooled += GetPooled;
            }
        }

        internal static event Delegates.GetPooled_BeforeArgs _beforeGetPooled;
        internal static event Delegates.GetPooled_NormalArgs _afterGetPooled;

        private static List<GameObject> GetPooled(On.ObjectPool.orig_GetPooled orig, GameObject prefab,
            List<GameObject> list, bool appendList)
        {
            Delegates.Params_GetPooled @params = new()
            {
                prefab = prefab, list = list, appendList = appendList
            };
            _beforeGetPooled?.Invoke(@params);
            prefab = @params.prefab;
            list = @params.list;
            appendList = @params.appendList;
            var retVal = orig(prefab, list, appendList);
            if (_afterGetPooled != null) retVal = _afterGetPooled.Invoke(@params);
            return retVal;
        }

        internal static void HookGetSpawned()
        {
            if (!HookedList.Contains("GetSpawned"))
            {
                HookedList.Add("GetSpawned");
                On.ObjectPool.GetSpawned += GetSpawned;
            }
        }

        internal static event Delegates.GetSpawned_BeforeArgs _beforeGetSpawned;
        internal static event Delegates.GetSpawned_NormalArgs _afterGetSpawned;

        private static List<GameObject> GetSpawned(On.ObjectPool.orig_GetSpawned orig, GameObject prefab,
            List<GameObject> list, bool appendList)
        {
            Delegates.Params_GetSpawned @params = new()
            {
                prefab = prefab, list = list, appendList = appendList
            };
            _beforeGetSpawned?.Invoke(@params);
            prefab = @params.prefab;
            list = @params.list;
            appendList = @params.appendList;
            var retVal = orig(prefab, list, appendList);
            if (_afterGetSpawned != null) retVal = _afterGetSpawned.Invoke(@params);
            return retVal;
        }

        internal static void HookDestroyPooled_GameObject()
        {
            if (!HookedList.Contains("DestroyPooled_GameObject"))
            {
                HookedList.Add("DestroyPooled_GameObject");
                On.ObjectPool.DestroyPooled_GameObject += DestroyPooled_GameObject;
            }
        }

        internal static event Delegates.DestroyPooled_GameObject_BeforeArgs _beforeDestroyPooled_GameObject;
        internal static event Delegates.DestroyPooled_GameObject_NormalArgs _afterDestroyPooled_GameObject;

        private static void DestroyPooled_GameObject(On.ObjectPool.orig_DestroyPooled_GameObject orig,
            GameObject prefab)
        {
            Delegates.Params_DestroyPooled_GameObject @params = new()
            {
                prefab = prefab
            };
            _beforeDestroyPooled_GameObject?.Invoke(@params);
            prefab = @params.prefab;
            orig(prefab);
            if (_afterDestroyPooled_GameObject != null) _afterDestroyPooled_GameObject.Invoke(@params);
        }

        internal static void HookDestroyPooled_GameObject_int()
        {
            if (!HookedList.Contains("DestroyPooled_GameObject_int"))
            {
                HookedList.Add("DestroyPooled_GameObject_int");
                On.ObjectPool.DestroyPooled_GameObject_int += DestroyPooled_GameObject_int;
            }
        }

        internal static event Delegates.DestroyPooled_GameObject_int_BeforeArgs _beforeDestroyPooled_GameObject_int;
        internal static event Delegates.DestroyPooled_GameObject_int_NormalArgs _afterDestroyPooled_GameObject_int;

        private static void DestroyPooled_GameObject_int(On.ObjectPool.orig_DestroyPooled_GameObject_int orig,
            GameObject prefab, int amountToRemove)
        {
            Delegates.Params_DestroyPooled_GameObject_int @params = new()
            {
                prefab = prefab, amountToRemove = amountToRemove
            };
            _beforeDestroyPooled_GameObject_int?.Invoke(@params);
            prefab = @params.prefab;
            amountToRemove = @params.amountToRemove;
            orig(prefab, amountToRemove);
            if (_afterDestroyPooled_GameObject_int != null) _afterDestroyPooled_GameObject_int.Invoke(@params);
        }

        internal static void HookDestroyAll()
        {
            if (!HookedList.Contains("DestroyAll"))
            {
                HookedList.Add("DestroyAll");
                On.ObjectPool.DestroyAll += DestroyAll;
            }
        }

        internal static event Delegates.DestroyAll_BeforeArgs _beforeDestroyAll;
        internal static event Delegates.DestroyAll_NormalArgs _afterDestroyAll;

        private static void DestroyAll(On.ObjectPool.orig_DestroyAll orig, GameObject prefab)
        {
            Delegates.Params_DestroyAll @params = new()
            {
                prefab = prefab
            };
            _beforeDestroyAll?.Invoke(@params);
            prefab = @params.prefab;
            orig(prefab);
            if (_afterDestroyAll != null) _afterDestroyAll.Invoke(@params);
        }

        internal static void Hookorig_Spawn()
        {
            if (!HookedList.Contains("orig_Spawn"))
            {
                HookedList.Add("orig_Spawn");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ObjectPool), "orig_Spawn", false), orig_Spawn);
            }
        }

        internal static event Delegates.orig_Spawn_BeforeArgs _beforeorig_Spawn;
        internal static event Delegates.orig_Spawn_NormalArgs _afterorig_Spawn;

        private static GameObject orig_Spawn(Func<GameObject, Transform, Vector3, Quaternion, GameObject> orig,
            GameObject prefab, Transform parent, Vector3 position, Quaternion rotation)
        {
            Delegates.Params_orig_Spawn @params = new()
            {
                prefab = prefab, parent = parent, position = position, rotation = rotation
            };
            _beforeorig_Spawn?.Invoke(@params);
            prefab = @params.prefab;
            parent = @params.parent;
            position = @params.position;
            rotation = @params.rotation;
            var retVal = orig(prefab, parent, position, rotation);
            if (_afterorig_Spawn != null) retVal = _afterorig_Spawn.Invoke(@params);
            return retVal;
        }

        internal static void Hookorig_CreatePool()
        {
            if (!HookedList.Contains("orig_CreatePool"))
            {
                HookedList.Add("orig_CreatePool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ObjectPool), "orig_CreatePool", false), orig_CreatePool);
            }
        }

        internal static event Delegates.orig_CreatePool_BeforeArgs _beforeorig_CreatePool;
        internal static event Delegates.orig_CreatePool_NormalArgs _afterorig_CreatePool;

        private static void orig_CreatePool(Action<GameObject, int> orig, GameObject prefab, int initialPoolSize)
        {
            Delegates.Params_orig_CreatePool @params = new()
            {
                prefab = prefab, initialPoolSize = initialPoolSize
            };
            _beforeorig_CreatePool?.Invoke(@params);
            prefab = @params.prefab;
            initialPoolSize = @params.initialPoolSize;
            orig(prefab, initialPoolSize);
            if (_afterorig_CreatePool != null) _afterorig_CreatePool.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void CountAllPooled_BeforeArgs();

        public delegate int CountAllPooled_NormalArgs();

        public delegate void CountPooled_BeforeArgs(Params_CountPooled args);

        public delegate int CountPooled_NormalArgs(Params_CountPooled args);

        public delegate void CountSpawned_BeforeArgs(Params_CountSpawned args);

        public delegate int CountSpawned_NormalArgs(Params_CountSpawned args);

        public delegate void CreatePool_BeforeArgs(Params_CreatePool args);

        public delegate void CreatePool_NormalArgs(Params_CreatePool args);

        public delegate void CreateStartupPools_BeforeArgs();

        public delegate void CreateStartupPools_NormalArgs();

        public delegate void DestroyAll_BeforeArgs(Params_DestroyAll args);

        public delegate void DestroyAll_NormalArgs(Params_DestroyAll args);

        public delegate void DestroyPooled_GameObject_BeforeArgs(Params_DestroyPooled_GameObject args);

        public delegate void DestroyPooled_GameObject_int_BeforeArgs(Params_DestroyPooled_GameObject_int args);

        public delegate void DestroyPooled_GameObject_int_NormalArgs(Params_DestroyPooled_GameObject_int args);

        public delegate void DestroyPooled_GameObject_NormalArgs(Params_DestroyPooled_GameObject args);

        public delegate void get_instance_BeforeArgs();

        public delegate ObjectPool get_instance_NormalArgs();

        public delegate void GetPooled_BeforeArgs(Params_GetPooled args);

        public delegate List<GameObject> GetPooled_NormalArgs(Params_GetPooled args);

        public delegate void GetSpawned_BeforeArgs(Params_GetSpawned args);

        public delegate List<GameObject> GetSpawned_NormalArgs(Params_GetSpawned args);

        public delegate void IsSpawned_BeforeArgs(Params_IsSpawned args);

        public delegate bool IsSpawned_NormalArgs(Params_IsSpawned args);

        public delegate void orig_CreatePool_BeforeArgs(Params_orig_CreatePool args);

        public delegate void orig_CreatePool_NormalArgs(Params_orig_CreatePool args);

        public delegate void orig_Spawn_BeforeArgs(Params_orig_Spawn args);

        public delegate GameObject orig_Spawn_NormalArgs(Params_orig_Spawn args);

        public delegate void Recycle_GameObject_BeforeArgs(Params_Recycle_GameObject args);

        public delegate void Recycle_GameObject_GameObject_BeforeArgs(Params_Recycle_GameObject_GameObject args);

        public delegate void Recycle_GameObject_GameObject_NormalArgs(Params_Recycle_GameObject_GameObject args);

        public delegate void Recycle_GameObject_NormalArgs(Params_Recycle_GameObject args);

        public delegate void RecycleAll_BeforeArgs();

        public delegate void RecycleAll_GameObject_BeforeArgs(Params_RecycleAll_GameObject args);

        public delegate void RecycleAll_GameObject_NormalArgs(Params_RecycleAll_GameObject args);

        public delegate void RecycleAll_NormalArgs();

        public delegate void RevertToStartState_BeforeArgs(Params_RevertToStartState args);

        public delegate void RevertToStartState_NormalArgs(Params_RevertToStartState args);

        public delegate void Spawn_GameObject_BeforeArgs(Params_Spawn_GameObject args);

        public delegate GameObject Spawn_GameObject_NormalArgs(Params_Spawn_GameObject args);

        public delegate void Spawn_GameObject_Transform_BeforeArgs(Params_Spawn_GameObject_Transform args);

        public delegate GameObject Spawn_GameObject_Transform_NormalArgs(Params_Spawn_GameObject_Transform args);

        public delegate void Spawn_GameObject_Transform_Vector3_BeforeArgs(
            Params_Spawn_GameObject_Transform_Vector3 args);

        public delegate GameObject Spawn_GameObject_Transform_Vector3_NormalArgs(
            Params_Spawn_GameObject_Transform_Vector3 args);

        public delegate void Spawn_GameObject_Transform_Vector3_Quaternion_BeforeArgs(
            Params_Spawn_GameObject_Transform_Vector3_Quaternion args);

        public delegate GameObject Spawn_GameObject_Transform_Vector3_Quaternion_NormalArgs(
            Params_Spawn_GameObject_Transform_Vector3_Quaternion args);

        public delegate void Spawn_GameObject_Vector3_BeforeArgs(Params_Spawn_GameObject_Vector3 args);

        public delegate GameObject Spawn_GameObject_Vector3_NormalArgs(Params_Spawn_GameObject_Vector3 args);

        public delegate void Spawn_GameObject_Vector3_Quaternion_BeforeArgs(
            Params_Spawn_GameObject_Vector3_Quaternion args);

        public delegate GameObject Spawn_GameObject_Vector3_Quaternion_NormalArgs(
            Params_Spawn_GameObject_Vector3_Quaternion args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Awake
        {
            public ObjectPool self;
        }

        public sealed class Params_Start
        {
            public ObjectPool self;
        }

        public sealed class Params_CreatePool
        {
            public int initialPoolSize;
            public GameObject prefab;
        }

        public sealed class Params_RevertToStartState
        {
            public ObjectPool self;
        }

        public sealed class Params_Spawn_GameObject_Transform_Vector3_Quaternion
        {
            public Transform parent;
            public Vector3 position;
            public GameObject prefab;
            public Quaternion rotation;
        }

        public sealed class Params_Spawn_GameObject_Transform_Vector3
        {
            public Transform parent;
            public Vector3 position;
            public GameObject prefab;
        }

        public sealed class Params_Spawn_GameObject_Vector3_Quaternion
        {
            public Vector3 position;
            public GameObject prefab;
            public Quaternion rotation;
        }

        public sealed class Params_Spawn_GameObject_Transform
        {
            public Transform parent;
            public GameObject prefab;
        }

        public sealed class Params_Spawn_GameObject_Vector3
        {
            public Vector3 position;
            public GameObject prefab;
        }

        public sealed class Params_Spawn_GameObject
        {
            public GameObject prefab;
        }

        public sealed class Params_Recycle_GameObject
        {
            public GameObject obj;
        }

        public sealed class Params_Recycle_GameObject_GameObject
        {
            public GameObject obj;
            public GameObject prefab;
        }

        public sealed class Params_RecycleAll_GameObject
        {
            public GameObject prefab;
        }

        public sealed class Params_IsSpawned
        {
            public GameObject obj;
        }

        public sealed class Params_CountPooled
        {
            public GameObject prefab;
        }

        public sealed class Params_CountSpawned
        {
            public GameObject prefab;
        }

        public sealed class Params_GetPooled
        {
            public bool appendList;
            public List<GameObject> list;
            public GameObject prefab;
        }

        public sealed class Params_GetSpawned
        {
            public bool appendList;
            public List<GameObject> list;
            public GameObject prefab;
        }

        public sealed class Params_DestroyPooled_GameObject
        {
            public GameObject prefab;
        }

        public sealed class Params_DestroyPooled_GameObject_int
        {
            public int amountToRemove;
            public GameObject prefab;
        }

        public sealed class Params_DestroyAll
        {
            public GameObject prefab;
        }

        public sealed class Params_orig_Spawn
        {
            public Transform parent;
            public Vector3 position;
            public GameObject prefab;
            public Quaternion rotation;
        }

        public sealed class Params_orig_CreatePool
        {
            public int initialPoolSize;
            public GameObject prefab;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_instance_BeforeArgs get_instance
        {
            add
            {
                HookHandler._beforeget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._beforeget_instance -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.CreateStartupPools_BeforeArgs CreateStartupPools
        {
            add
            {
                HookHandler._beforeCreateStartupPools += value;
                HookHandler.HookCreateStartupPools();
            }
            remove => HookHandler._beforeCreateStartupPools -= value;
        }

        public static event Delegates.CreatePool_BeforeArgs CreatePool
        {
            add
            {
                HookHandler._beforeCreatePool += value;
                HookHandler.HookCreatePool();
            }
            remove => HookHandler._beforeCreatePool -= value;
        }

        public static event Delegates.RevertToStartState_BeforeArgs RevertToStartState
        {
            add
            {
                HookHandler._beforeRevertToStartState += value;
                HookHandler.HookRevertToStartState();
            }
            remove => HookHandler._beforeRevertToStartState -= value;
        }

        public static event Delegates.Spawn_GameObject_Transform_Vector3_Quaternion_BeforeArgs
            Spawn_GameObject_Transform_Vector3_Quaternion
            {
                add
                {
                    HookHandler._beforeSpawn_GameObject_Transform_Vector3_Quaternion += value;
                    HookHandler.HookSpawn_GameObject_Transform_Vector3_Quaternion();
                }
                remove => HookHandler._beforeSpawn_GameObject_Transform_Vector3_Quaternion -= value;
            }

        public static event Delegates.Spawn_GameObject_Transform_Vector3_BeforeArgs Spawn_GameObject_Transform_Vector3
        {
            add
            {
                HookHandler._beforeSpawn_GameObject_Transform_Vector3 += value;
                HookHandler.HookSpawn_GameObject_Transform_Vector3();
            }
            remove => HookHandler._beforeSpawn_GameObject_Transform_Vector3 -= value;
        }

        public static event Delegates.Spawn_GameObject_Vector3_Quaternion_BeforeArgs Spawn_GameObject_Vector3_Quaternion
        {
            add
            {
                HookHandler._beforeSpawn_GameObject_Vector3_Quaternion += value;
                HookHandler.HookSpawn_GameObject_Vector3_Quaternion();
            }
            remove => HookHandler._beforeSpawn_GameObject_Vector3_Quaternion -= value;
        }

        public static event Delegates.Spawn_GameObject_Transform_BeforeArgs Spawn_GameObject_Transform
        {
            add
            {
                HookHandler._beforeSpawn_GameObject_Transform += value;
                HookHandler.HookSpawn_GameObject_Transform();
            }
            remove => HookHandler._beforeSpawn_GameObject_Transform -= value;
        }

        public static event Delegates.Spawn_GameObject_Vector3_BeforeArgs Spawn_GameObject_Vector3
        {
            add
            {
                HookHandler._beforeSpawn_GameObject_Vector3 += value;
                HookHandler.HookSpawn_GameObject_Vector3();
            }
            remove => HookHandler._beforeSpawn_GameObject_Vector3 -= value;
        }

        public static event Delegates.Spawn_GameObject_BeforeArgs Spawn_GameObject
        {
            add
            {
                HookHandler._beforeSpawn_GameObject += value;
                HookHandler.HookSpawn_GameObject();
            }
            remove => HookHandler._beforeSpawn_GameObject -= value;
        }

        public static event Delegates.Recycle_GameObject_BeforeArgs Recycle_GameObject
        {
            add
            {
                HookHandler._beforeRecycle_GameObject += value;
                HookHandler.HookRecycle_GameObject();
            }
            remove => HookHandler._beforeRecycle_GameObject -= value;
        }

        public static event Delegates.Recycle_GameObject_GameObject_BeforeArgs Recycle_GameObject_GameObject
        {
            add
            {
                HookHandler._beforeRecycle_GameObject_GameObject += value;
                HookHandler.HookRecycle_GameObject_GameObject();
            }
            remove => HookHandler._beforeRecycle_GameObject_GameObject -= value;
        }

        public static event Delegates.RecycleAll_GameObject_BeforeArgs RecycleAll_GameObject
        {
            add
            {
                HookHandler._beforeRecycleAll_GameObject += value;
                HookHandler.HookRecycleAll_GameObject();
            }
            remove => HookHandler._beforeRecycleAll_GameObject -= value;
        }

        public static event Delegates.RecycleAll_BeforeArgs RecycleAll
        {
            add
            {
                HookHandler._beforeRecycleAll += value;
                HookHandler.HookRecycleAll();
            }
            remove => HookHandler._beforeRecycleAll -= value;
        }

        public static event Delegates.IsSpawned_BeforeArgs IsSpawned
        {
            add
            {
                HookHandler._beforeIsSpawned += value;
                HookHandler.HookIsSpawned();
            }
            remove => HookHandler._beforeIsSpawned -= value;
        }

        public static event Delegates.CountPooled_BeforeArgs CountPooled
        {
            add
            {
                HookHandler._beforeCountPooled += value;
                HookHandler.HookCountPooled();
            }
            remove => HookHandler._beforeCountPooled -= value;
        }

        public static event Delegates.CountSpawned_BeforeArgs CountSpawned
        {
            add
            {
                HookHandler._beforeCountSpawned += value;
                HookHandler.HookCountSpawned();
            }
            remove => HookHandler._beforeCountSpawned -= value;
        }

        public static event Delegates.CountAllPooled_BeforeArgs CountAllPooled
        {
            add
            {
                HookHandler._beforeCountAllPooled += value;
                HookHandler.HookCountAllPooled();
            }
            remove => HookHandler._beforeCountAllPooled -= value;
        }

        public static event Delegates.GetPooled_BeforeArgs GetPooled
        {
            add
            {
                HookHandler._beforeGetPooled += value;
                HookHandler.HookGetPooled();
            }
            remove => HookHandler._beforeGetPooled -= value;
        }

        public static event Delegates.GetSpawned_BeforeArgs GetSpawned
        {
            add
            {
                HookHandler._beforeGetSpawned += value;
                HookHandler.HookGetSpawned();
            }
            remove => HookHandler._beforeGetSpawned -= value;
        }

        public static event Delegates.DestroyPooled_GameObject_BeforeArgs DestroyPooled_GameObject
        {
            add
            {
                HookHandler._beforeDestroyPooled_GameObject += value;
                HookHandler.HookDestroyPooled_GameObject();
            }
            remove => HookHandler._beforeDestroyPooled_GameObject -= value;
        }

        public static event Delegates.DestroyPooled_GameObject_int_BeforeArgs DestroyPooled_GameObject_int
        {
            add
            {
                HookHandler._beforeDestroyPooled_GameObject_int += value;
                HookHandler.HookDestroyPooled_GameObject_int();
            }
            remove => HookHandler._beforeDestroyPooled_GameObject_int -= value;
        }

        public static event Delegates.DestroyAll_BeforeArgs DestroyAll
        {
            add
            {
                HookHandler._beforeDestroyAll += value;
                HookHandler.HookDestroyAll();
            }
            remove => HookHandler._beforeDestroyAll -= value;
        }

        public static event Delegates.orig_Spawn_BeforeArgs orig_Spawn
        {
            add
            {
                HookHandler._beforeorig_Spawn += value;
                HookHandler.Hookorig_Spawn();
            }
            remove => HookHandler._beforeorig_Spawn -= value;
        }

        public static event Delegates.orig_CreatePool_BeforeArgs orig_CreatePool
        {
            add
            {
                HookHandler._beforeorig_CreatePool += value;
                HookHandler.Hookorig_CreatePool();
            }
            remove => HookHandler._beforeorig_CreatePool -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_instance_NormalArgs get_instance
        {
            add
            {
                HookHandler._afterget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._afterget_instance -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.CreateStartupPools_NormalArgs CreateStartupPools
        {
            add
            {
                HookHandler._afterCreateStartupPools += value;
                HookHandler.HookCreateStartupPools();
            }
            remove => HookHandler._afterCreateStartupPools -= value;
        }

        public static event Delegates.CreatePool_NormalArgs CreatePool
        {
            add
            {
                HookHandler._afterCreatePool += value;
                HookHandler.HookCreatePool();
            }
            remove => HookHandler._afterCreatePool -= value;
        }

        public static event Delegates.RevertToStartState_NormalArgs RevertToStartState
        {
            add
            {
                HookHandler._afterRevertToStartState += value;
                HookHandler.HookRevertToStartState();
            }
            remove => HookHandler._afterRevertToStartState -= value;
        }

        public static event Delegates.Spawn_GameObject_Transform_Vector3_Quaternion_NormalArgs
            Spawn_GameObject_Transform_Vector3_Quaternion
            {
                add
                {
                    HookHandler._afterSpawn_GameObject_Transform_Vector3_Quaternion += value;
                    HookHandler.HookSpawn_GameObject_Transform_Vector3_Quaternion();
                }
                remove => HookHandler._afterSpawn_GameObject_Transform_Vector3_Quaternion -= value;
            }

        public static event Delegates.Spawn_GameObject_Transform_Vector3_NormalArgs Spawn_GameObject_Transform_Vector3
        {
            add
            {
                HookHandler._afterSpawn_GameObject_Transform_Vector3 += value;
                HookHandler.HookSpawn_GameObject_Transform_Vector3();
            }
            remove => HookHandler._afterSpawn_GameObject_Transform_Vector3 -= value;
        }

        public static event Delegates.Spawn_GameObject_Vector3_Quaternion_NormalArgs Spawn_GameObject_Vector3_Quaternion
        {
            add
            {
                HookHandler._afterSpawn_GameObject_Vector3_Quaternion += value;
                HookHandler.HookSpawn_GameObject_Vector3_Quaternion();
            }
            remove => HookHandler._afterSpawn_GameObject_Vector3_Quaternion -= value;
        }

        public static event Delegates.Spawn_GameObject_Transform_NormalArgs Spawn_GameObject_Transform
        {
            add
            {
                HookHandler._afterSpawn_GameObject_Transform += value;
                HookHandler.HookSpawn_GameObject_Transform();
            }
            remove => HookHandler._afterSpawn_GameObject_Transform -= value;
        }

        public static event Delegates.Spawn_GameObject_Vector3_NormalArgs Spawn_GameObject_Vector3
        {
            add
            {
                HookHandler._afterSpawn_GameObject_Vector3 += value;
                HookHandler.HookSpawn_GameObject_Vector3();
            }
            remove => HookHandler._afterSpawn_GameObject_Vector3 -= value;
        }

        public static event Delegates.Spawn_GameObject_NormalArgs Spawn_GameObject
        {
            add
            {
                HookHandler._afterSpawn_GameObject += value;
                HookHandler.HookSpawn_GameObject();
            }
            remove => HookHandler._afterSpawn_GameObject -= value;
        }

        public static event Delegates.Recycle_GameObject_NormalArgs Recycle_GameObject
        {
            add
            {
                HookHandler._afterRecycle_GameObject += value;
                HookHandler.HookRecycle_GameObject();
            }
            remove => HookHandler._afterRecycle_GameObject -= value;
        }

        public static event Delegates.Recycle_GameObject_GameObject_NormalArgs Recycle_GameObject_GameObject
        {
            add
            {
                HookHandler._afterRecycle_GameObject_GameObject += value;
                HookHandler.HookRecycle_GameObject_GameObject();
            }
            remove => HookHandler._afterRecycle_GameObject_GameObject -= value;
        }

        public static event Delegates.RecycleAll_GameObject_NormalArgs RecycleAll_GameObject
        {
            add
            {
                HookHandler._afterRecycleAll_GameObject += value;
                HookHandler.HookRecycleAll_GameObject();
            }
            remove => HookHandler._afterRecycleAll_GameObject -= value;
        }

        public static event Delegates.RecycleAll_NormalArgs RecycleAll
        {
            add
            {
                HookHandler._afterRecycleAll += value;
                HookHandler.HookRecycleAll();
            }
            remove => HookHandler._afterRecycleAll -= value;
        }

        public static event Delegates.IsSpawned_NormalArgs IsSpawned
        {
            add
            {
                HookHandler._afterIsSpawned += value;
                HookHandler.HookIsSpawned();
            }
            remove => HookHandler._afterIsSpawned -= value;
        }

        public static event Delegates.CountPooled_NormalArgs CountPooled
        {
            add
            {
                HookHandler._afterCountPooled += value;
                HookHandler.HookCountPooled();
            }
            remove => HookHandler._afterCountPooled -= value;
        }

        public static event Delegates.CountSpawned_NormalArgs CountSpawned
        {
            add
            {
                HookHandler._afterCountSpawned += value;
                HookHandler.HookCountSpawned();
            }
            remove => HookHandler._afterCountSpawned -= value;
        }

        public static event Delegates.CountAllPooled_NormalArgs CountAllPooled
        {
            add
            {
                HookHandler._afterCountAllPooled += value;
                HookHandler.HookCountAllPooled();
            }
            remove => HookHandler._afterCountAllPooled -= value;
        }

        public static event Delegates.GetPooled_NormalArgs GetPooled
        {
            add
            {
                HookHandler._afterGetPooled += value;
                HookHandler.HookGetPooled();
            }
            remove => HookHandler._afterGetPooled -= value;
        }

        public static event Delegates.GetSpawned_NormalArgs GetSpawned
        {
            add
            {
                HookHandler._afterGetSpawned += value;
                HookHandler.HookGetSpawned();
            }
            remove => HookHandler._afterGetSpawned -= value;
        }

        public static event Delegates.DestroyPooled_GameObject_NormalArgs DestroyPooled_GameObject
        {
            add
            {
                HookHandler._afterDestroyPooled_GameObject += value;
                HookHandler.HookDestroyPooled_GameObject();
            }
            remove => HookHandler._afterDestroyPooled_GameObject -= value;
        }

        public static event Delegates.DestroyPooled_GameObject_int_NormalArgs DestroyPooled_GameObject_int
        {
            add
            {
                HookHandler._afterDestroyPooled_GameObject_int += value;
                HookHandler.HookDestroyPooled_GameObject_int();
            }
            remove => HookHandler._afterDestroyPooled_GameObject_int -= value;
        }

        public static event Delegates.DestroyAll_NormalArgs DestroyAll
        {
            add
            {
                HookHandler._afterDestroyAll += value;
                HookHandler.HookDestroyAll();
            }
            remove => HookHandler._afterDestroyAll -= value;
        }

        public static event Delegates.orig_Spawn_NormalArgs orig_Spawn
        {
            add
            {
                HookHandler._afterorig_Spawn += value;
                HookHandler.Hookorig_Spawn();
            }
            remove => HookHandler._afterorig_Spawn -= value;
        }

        public static event Delegates.orig_CreatePool_NormalArgs orig_CreatePool
        {
            add
            {
                HookHandler._afterorig_CreatePool += value;
                HookHandler.Hookorig_CreatePool();
            }
            remove => HookHandler._afterorig_CreatePool -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_instance_NormalArgs get_instance
        {
            add => HookEndpointManager.Add<Delegates.get_instance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ObjectPool), "get_instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_instance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ObjectPool), "get_instance", false), value);
        }

        public static event On.ObjectPool.hook_Awake Awake
        {
            add => On.ObjectPool.Awake += value;
            remove => On.ObjectPool.Awake -= value;
        }

        public static event On.ObjectPool.hook_Start Start
        {
            add => On.ObjectPool.Start += value;
            remove => On.ObjectPool.Start -= value;
        }

        public static event On.ObjectPool.hook_CreateStartupPools CreateStartupPools
        {
            add => On.ObjectPool.CreateStartupPools += value;
            remove => On.ObjectPool.CreateStartupPools -= value;
        }

        public static event On.ObjectPool.hook_CreatePool CreatePool
        {
            add => On.ObjectPool.CreatePool += value;
            remove => On.ObjectPool.CreatePool -= value;
        }

        public static event On.ObjectPool.hook_RevertToStartState RevertToStartState
        {
            add => On.ObjectPool.RevertToStartState += value;
            remove => On.ObjectPool.RevertToStartState -= value;
        }

        public static event On.ObjectPool.hook_Spawn_GameObject_Transform_Vector3_Quaternion
            Spawn_GameObject_Transform_Vector3_Quaternion
            {
                add => On.ObjectPool.Spawn_GameObject_Transform_Vector3_Quaternion += value;
                remove => On.ObjectPool.Spawn_GameObject_Transform_Vector3_Quaternion -= value;
            }

        public static event On.ObjectPool.hook_Spawn_GameObject_Transform_Vector3 Spawn_GameObject_Transform_Vector3
        {
            add => On.ObjectPool.Spawn_GameObject_Transform_Vector3 += value;
            remove => On.ObjectPool.Spawn_GameObject_Transform_Vector3 -= value;
        }

        public static event On.ObjectPool.hook_Spawn_GameObject_Vector3_Quaternion Spawn_GameObject_Vector3_Quaternion
        {
            add => On.ObjectPool.Spawn_GameObject_Vector3_Quaternion += value;
            remove => On.ObjectPool.Spawn_GameObject_Vector3_Quaternion -= value;
        }

        public static event On.ObjectPool.hook_Spawn_GameObject_Transform Spawn_GameObject_Transform
        {
            add => On.ObjectPool.Spawn_GameObject_Transform += value;
            remove => On.ObjectPool.Spawn_GameObject_Transform -= value;
        }

        public static event On.ObjectPool.hook_Spawn_GameObject_Vector3 Spawn_GameObject_Vector3
        {
            add => On.ObjectPool.Spawn_GameObject_Vector3 += value;
            remove => On.ObjectPool.Spawn_GameObject_Vector3 -= value;
        }

        public static event On.ObjectPool.hook_Spawn_GameObject Spawn_GameObject
        {
            add => On.ObjectPool.Spawn_GameObject += value;
            remove => On.ObjectPool.Spawn_GameObject -= value;
        }

        public static event On.ObjectPool.hook_Recycle_GameObject Recycle_GameObject
        {
            add => On.ObjectPool.Recycle_GameObject += value;
            remove => On.ObjectPool.Recycle_GameObject -= value;
        }

        public static event On.ObjectPool.hook_Recycle_GameObject_GameObject Recycle_GameObject_GameObject
        {
            add => On.ObjectPool.Recycle_GameObject_GameObject += value;
            remove => On.ObjectPool.Recycle_GameObject_GameObject -= value;
        }

        public static event On.ObjectPool.hook_RecycleAll_GameObject RecycleAll_GameObject
        {
            add => On.ObjectPool.RecycleAll_GameObject += value;
            remove => On.ObjectPool.RecycleAll_GameObject -= value;
        }

        public static event On.ObjectPool.hook_RecycleAll RecycleAll
        {
            add => On.ObjectPool.RecycleAll += value;
            remove => On.ObjectPool.RecycleAll -= value;
        }

        public static event On.ObjectPool.hook_IsSpawned IsSpawned
        {
            add => On.ObjectPool.IsSpawned += value;
            remove => On.ObjectPool.IsSpawned -= value;
        }

        public static event On.ObjectPool.hook_CountPooled CountPooled
        {
            add => On.ObjectPool.CountPooled += value;
            remove => On.ObjectPool.CountPooled -= value;
        }

        public static event On.ObjectPool.hook_CountSpawned CountSpawned
        {
            add => On.ObjectPool.CountSpawned += value;
            remove => On.ObjectPool.CountSpawned -= value;
        }

        public static event On.ObjectPool.hook_CountAllPooled CountAllPooled
        {
            add => On.ObjectPool.CountAllPooled += value;
            remove => On.ObjectPool.CountAllPooled -= value;
        }

        public static event On.ObjectPool.hook_GetPooled GetPooled
        {
            add => On.ObjectPool.GetPooled += value;
            remove => On.ObjectPool.GetPooled -= value;
        }

        public static event On.ObjectPool.hook_GetSpawned GetSpawned
        {
            add => On.ObjectPool.GetSpawned += value;
            remove => On.ObjectPool.GetSpawned -= value;
        }

        public static event On.ObjectPool.hook_DestroyPooled_GameObject DestroyPooled_GameObject
        {
            add => On.ObjectPool.DestroyPooled_GameObject += value;
            remove => On.ObjectPool.DestroyPooled_GameObject -= value;
        }

        public static event On.ObjectPool.hook_DestroyPooled_GameObject_int DestroyPooled_GameObject_int
        {
            add => On.ObjectPool.DestroyPooled_GameObject_int += value;
            remove => On.ObjectPool.DestroyPooled_GameObject_int -= value;
        }

        public static event On.ObjectPool.hook_DestroyAll DestroyAll
        {
            add => On.ObjectPool.DestroyAll += value;
            remove => On.ObjectPool.DestroyAll -= value;
        }

        public static event Delegates.orig_Spawn_NormalArgs orig_Spawn
        {
            add => HookEndpointManager.Add<Delegates.orig_Spawn_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ObjectPool), "orig_Spawn", false), value);
            remove => HookEndpointManager.Remove<Delegates.orig_Spawn_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ObjectPool), "orig_Spawn", false), value);
        }

        public static event Delegates.orig_CreatePool_NormalArgs orig_CreatePool
        {
            add => HookEndpointManager.Add<Delegates.orig_CreatePool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ObjectPool), "orig_CreatePool", false), value);
            remove => HookEndpointManager.Remove<Delegates.orig_CreatePool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ObjectPool), "orig_CreatePool", false), value);
        }
    }
}