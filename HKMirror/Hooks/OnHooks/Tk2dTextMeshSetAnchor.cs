using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for Tk2dTextMeshSetAnchor class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTk2dTextMeshSetAnchor
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hook_getTextMesh()
        {
            if (!HookedList.Contains("_getTextMesh"))
            {
                HookedList.Add("_getTextMesh");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Tk2dTextMeshSetAnchor), "_getTextMesh"), _getTextMesh);
            }
        }

        internal static event Delegates._getTextMesh_BeforeArgs _before_getTextMesh;
        internal static event Delegates._getTextMesh_AfterArgs _after_getTextMesh;

        private static void _getTextMesh(Action<Tk2dTextMeshSetAnchor> orig, Tk2dTextMeshSetAnchor self)
        {
            Delegates.Params__getTextMesh @params = new()
            {
                self = self
            };
            if (_before_getTextMesh != null)
                foreach (Delegates._getTextMesh_BeforeArgs toInvoke in _before_getTextMesh.GetInvocationList())
                    try
                    {
                        _before_getTextMesh?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_after_getTextMesh != null)
                foreach (Delegates._getTextMesh_AfterArgs toInvoke in _after_getTextMesh.GetInvocationList())
                    try
                    {
                        _after_getTextMesh.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Tk2dTextMeshSetAnchor), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_AfterArgs _afterReset;

        private static void Reset(Action<Tk2dTextMeshSetAnchor> orig, Tk2dTextMeshSetAnchor self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            if (_beforeReset != null)
                foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
                    try
                    {
                        _beforeReset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterReset != null)
                foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
                    try
                    {
                        _afterReset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Tk2dTextMeshSetAnchor), "OnEnter"), OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_AfterArgs _afterOnEnter;

        private static void OnEnter(Action<Tk2dTextMeshSetAnchor> orig, Tk2dTextMeshSetAnchor self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            if (_beforeOnEnter != null)
                foreach (Delegates.OnEnter_BeforeArgs toInvoke in _beforeOnEnter.GetInvocationList())
                    try
                    {
                        _beforeOnEnter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnter != null)
                foreach (Delegates.OnEnter_AfterArgs toInvoke in _afterOnEnter.GetInvocationList())
                    try
                    {
                        _afterOnEnter.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDoSetAnchor()
        {
            if (!HookedList.Contains("DoSetAnchor"))
            {
                HookedList.Add("DoSetAnchor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Tk2dTextMeshSetAnchor), "DoSetAnchor"), DoSetAnchor);
            }
        }

        internal static event Delegates.DoSetAnchor_BeforeArgs _beforeDoSetAnchor;
        internal static event Delegates.DoSetAnchor_AfterArgs _afterDoSetAnchor;

        private static void DoSetAnchor(Action<Tk2dTextMeshSetAnchor> orig, Tk2dTextMeshSetAnchor self)
        {
            Delegates.Params_DoSetAnchor @params = new()
            {
                self = self
            };
            if (_beforeDoSetAnchor != null)
                foreach (Delegates.DoSetAnchor_BeforeArgs toInvoke in _beforeDoSetAnchor.GetInvocationList())
                    try
                    {
                        _beforeDoSetAnchor?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterDoSetAnchor != null)
                foreach (Delegates.DoSetAnchor_AfterArgs toInvoke in _afterDoSetAnchor.GetInvocationList())
                    try
                    {
                        _afterDoSetAnchor.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookErrorCheck()
        {
            if (!HookedList.Contains("ErrorCheck"))
            {
                HookedList.Add("ErrorCheck");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Tk2dTextMeshSetAnchor), "ErrorCheck"), ErrorCheck);
            }
        }

        internal static event Delegates.ErrorCheck_BeforeArgs _beforeErrorCheck;
        internal static event Delegates.ErrorCheck_AfterArgs _afterErrorCheck;

        private static string ErrorCheck(Func<Tk2dTextMeshSetAnchor, string> orig, Tk2dTextMeshSetAnchor self)
        {
            Delegates.Params_ErrorCheck @params = new()
            {
                self = self
            };
            if (_beforeErrorCheck != null)
                foreach (Delegates.ErrorCheck_BeforeArgs toInvoke in _beforeErrorCheck.GetInvocationList())
                    try
                    {
                        _beforeErrorCheck?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterErrorCheck != null)
                foreach (Delegates.ErrorCheck_AfterArgs toInvoke in _afterErrorCheck.GetInvocationList())
                    try
                    {
                        retVal = _afterErrorCheck.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookgetTextAnchorFromString()
        {
            if (!HookedList.Contains("getTextAnchorFromString"))
            {
                HookedList.Add("getTextAnchorFromString");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Tk2dTextMeshSetAnchor), "getTextAnchorFromString"),
                    getTextAnchorFromString);
            }
        }

        internal static event Delegates.getTextAnchorFromString_BeforeArgs _beforegetTextAnchorFromString;
        internal static event Delegates.getTextAnchorFromString_AfterArgs _aftergetTextAnchorFromString;

        private static TextAnchor getTextAnchorFromString(Func<Tk2dTextMeshSetAnchor, string, bool, TextAnchor> orig,
            Tk2dTextMeshSetAnchor self, string textAnchorString, bool isValid)
        {
            Delegates.Params_getTextAnchorFromString @params = new()
            {
                self = self, textAnchorString = textAnchorString, isValid = isValid
            };
            if (_beforegetTextAnchorFromString != null)
                foreach (Delegates.getTextAnchorFromString_BeforeArgs toInvoke in _beforegetTextAnchorFromString
                             .GetInvocationList())
                    try
                    {
                        _beforegetTextAnchorFromString?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            textAnchorString = @params.textAnchorString;
            isValid = @params.isValid;
            var retVal = orig(self, textAnchorString, isValid);
            if (_aftergetTextAnchorFromString != null)
                foreach (Delegates.getTextAnchorFromString_AfterArgs toInvoke in _aftergetTextAnchorFromString
                             .GetInvocationList())
                    try
                    {
                        retVal = _aftergetTextAnchorFromString.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void _getTextMesh_AfterArgs(Params__getTextMesh args);

        public delegate void _getTextMesh_BeforeArgs(Params__getTextMesh args);

        public delegate void _getTextMesh_WithArgs(Action<Tk2dTextMeshSetAnchor> orig, Tk2dTextMeshSetAnchor self);

        public delegate void DoSetAnchor_AfterArgs(Params_DoSetAnchor args);

        public delegate void DoSetAnchor_BeforeArgs(Params_DoSetAnchor args);

        public delegate void DoSetAnchor_WithArgs(Action<Tk2dTextMeshSetAnchor> orig, Tk2dTextMeshSetAnchor self);

        public delegate string ErrorCheck_AfterArgs(Params_ErrorCheck args, string ret);

        public delegate void ErrorCheck_BeforeArgs(Params_ErrorCheck args);

        public delegate string ErrorCheck_WithArgs(Func<Tk2dTextMeshSetAnchor, string> orig,
            Tk2dTextMeshSetAnchor self);

        public delegate TextAnchor getTextAnchorFromString_AfterArgs(Params_getTextAnchorFromString args,
            TextAnchor ret);

        public delegate void getTextAnchorFromString_BeforeArgs(Params_getTextAnchorFromString args);

        public delegate TextAnchor getTextAnchorFromString_WithArgs(
            Func<Tk2dTextMeshSetAnchor, string, bool, TextAnchor> orig, Tk2dTextMeshSetAnchor self,
            string textAnchorString, bool isValid);

        public delegate void OnEnter_AfterArgs(Params_OnEnter args);

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_WithArgs(Action<Tk2dTextMeshSetAnchor> orig, Tk2dTextMeshSetAnchor self);

        public delegate void Reset_AfterArgs(Params_Reset args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_WithArgs(Action<Tk2dTextMeshSetAnchor> orig, Tk2dTextMeshSetAnchor self);

        public sealed class Params__getTextMesh
        {
            public Tk2dTextMeshSetAnchor self;
        }

        public sealed class Params_Reset
        {
            public Tk2dTextMeshSetAnchor self;
        }

        public sealed class Params_OnEnter
        {
            public Tk2dTextMeshSetAnchor self;
        }

        public sealed class Params_DoSetAnchor
        {
            public Tk2dTextMeshSetAnchor self;
        }

        public sealed class Params_ErrorCheck
        {
            public Tk2dTextMeshSetAnchor self;
        }

        public sealed class Params_getTextAnchorFromString
        {
            public bool isValid;
            public Tk2dTextMeshSetAnchor self;
            public string textAnchorString;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates._getTextMesh_BeforeArgs _getTextMesh
        {
            add
            {
                HookHandler._before_getTextMesh += value;
                HookHandler.Hook_getTextMesh();
            }
            remove => HookHandler._before_getTextMesh -= value;
        }

        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.DoSetAnchor_BeforeArgs DoSetAnchor
        {
            add
            {
                HookHandler._beforeDoSetAnchor += value;
                HookHandler.HookDoSetAnchor();
            }
            remove => HookHandler._beforeDoSetAnchor -= value;
        }

        public static event Delegates.ErrorCheck_BeforeArgs ErrorCheck
        {
            add
            {
                HookHandler._beforeErrorCheck += value;
                HookHandler.HookErrorCheck();
            }
            remove => HookHandler._beforeErrorCheck -= value;
        }

        public static event Delegates.getTextAnchorFromString_BeforeArgs getTextAnchorFromString
        {
            add
            {
                HookHandler._beforegetTextAnchorFromString += value;
                HookHandler.HookgetTextAnchorFromString();
            }
            remove => HookHandler._beforegetTextAnchorFromString -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates._getTextMesh_AfterArgs _getTextMesh
        {
            add
            {
                HookHandler._after_getTextMesh += value;
                HookHandler.Hook_getTextMesh();
            }
            remove => HookHandler._after_getTextMesh -= value;
        }

        public static event Delegates.Reset_AfterArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_AfterArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.DoSetAnchor_AfterArgs DoSetAnchor
        {
            add
            {
                HookHandler._afterDoSetAnchor += value;
                HookHandler.HookDoSetAnchor();
            }
            remove => HookHandler._afterDoSetAnchor -= value;
        }

        public static event Delegates.ErrorCheck_AfterArgs ErrorCheck
        {
            add
            {
                HookHandler._afterErrorCheck += value;
                HookHandler.HookErrorCheck();
            }
            remove => HookHandler._afterErrorCheck -= value;
        }

        public static event Delegates.getTextAnchorFromString_AfterArgs getTextAnchorFromString
        {
            add
            {
                HookHandler._aftergetTextAnchorFromString += value;
                HookHandler.HookgetTextAnchorFromString();
            }
            remove => HookHandler._aftergetTextAnchorFromString -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates._getTextMesh_WithArgs _getTextMesh
        {
            add => HookEndpointManager.Add<Delegates._getTextMesh_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dTextMeshSetAnchor), "_getTextMesh"), value);
            remove => HookEndpointManager.Remove<Delegates._getTextMesh_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dTextMeshSetAnchor), "_getTextMesh"), value);
        }

        public static event Delegates.Reset_WithArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dTextMeshSetAnchor), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dTextMeshSetAnchor), "Reset"), value);
        }

        public static event Delegates.OnEnter_WithArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dTextMeshSetAnchor), "OnEnter"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dTextMeshSetAnchor), "OnEnter"), value);
        }

        public static event Delegates.DoSetAnchor_WithArgs DoSetAnchor
        {
            add => HookEndpointManager.Add<Delegates.DoSetAnchor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dTextMeshSetAnchor), "DoSetAnchor"), value);
            remove => HookEndpointManager.Remove<Delegates.DoSetAnchor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dTextMeshSetAnchor), "DoSetAnchor"), value);
        }

        public static event Delegates.ErrorCheck_WithArgs ErrorCheck
        {
            add => HookEndpointManager.Add<Delegates.ErrorCheck_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dTextMeshSetAnchor), "ErrorCheck"), value);
            remove => HookEndpointManager.Remove<Delegates.ErrorCheck_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dTextMeshSetAnchor), "ErrorCheck"), value);
        }

        public static event Delegates.getTextAnchorFromString_WithArgs getTextAnchorFromString
        {
            add => HookEndpointManager.Add<Delegates.getTextAnchorFromString_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dTextMeshSetAnchor), "getTextAnchorFromString"), value);
            remove => HookEndpointManager.Remove<Delegates.getTextAnchorFromString_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dTextMeshSetAnchor), "getTextAnchorFromString"), value);
        }
    }
}