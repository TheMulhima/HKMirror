using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for BossSceneController class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBossSceneController
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_IsBossScene()
        {
            if (!HookedList.Contains("get_IsBossScene"))
            {
                HookedList.Add("get_IsBossScene");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "get_IsBossScene", false),
                    get_IsBossScene);
            }
        }

        internal static event Delegates.get_IsBossScene_BeforeArgs _beforeget_IsBossScene;
        internal static event Delegates.get_IsBossScene_NormalArgs _afterget_IsBossScene;

        private static bool get_IsBossScene(Func<bool> orig)
        {
            _beforeget_IsBossScene?.Invoke();
            var retVal = orig();
            if (_afterget_IsBossScene != null) retVal = _afterget_IsBossScene.Invoke();
            return retVal;
        }

        internal static void Hookget_HasTransitionedIn()
        {
            if (!HookedList.Contains("get_HasTransitionedIn"))
            {
                HookedList.Add("get_HasTransitionedIn");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "get_HasTransitionedIn"),
                    get_HasTransitionedIn);
            }
        }

        internal static event Delegates.get_HasTransitionedIn_BeforeArgs _beforeget_HasTransitionedIn;
        internal static event Delegates.get_HasTransitionedIn_NormalArgs _afterget_HasTransitionedIn;

        private static bool get_HasTransitionedIn(Func<BossSceneController, bool> orig, BossSceneController self)
        {
            Delegates.Params_get_HasTransitionedIn @params = new()
            {
                self = self
            };
            _beforeget_HasTransitionedIn?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_HasTransitionedIn != null) retVal = _afterget_HasTransitionedIn.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_HasTransitionedIn()
        {
            if (!HookedList.Contains("set_HasTransitionedIn"))
            {
                HookedList.Add("set_HasTransitionedIn");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "set_HasTransitionedIn"),
                    set_HasTransitionedIn);
            }
        }

        internal static event Delegates.set_HasTransitionedIn_BeforeArgs _beforeset_HasTransitionedIn;
        internal static event Delegates.set_HasTransitionedIn_NormalArgs _afterset_HasTransitionedIn;

        private static void set_HasTransitionedIn(Action<BossSceneController, bool> orig, BossSceneController self,
            bool value)
        {
            Delegates.Params_set_HasTransitionedIn @params = new()
            {
                self = self, value = value
            };
            _beforeset_HasTransitionedIn?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_HasTransitionedIn != null) _afterset_HasTransitionedIn.Invoke(@params);
        }

        internal static void Hookget_IsTransitioning()
        {
            if (!HookedList.Contains("get_IsTransitioning"))
            {
                HookedList.Add("get_IsTransitioning");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "get_IsTransitioning", false),
                    get_IsTransitioning);
            }
        }

        internal static event Delegates.get_IsTransitioning_BeforeArgs _beforeget_IsTransitioning;
        internal static event Delegates.get_IsTransitioning_NormalArgs _afterget_IsTransitioning;

        private static bool get_IsTransitioning(Func<bool> orig)
        {
            _beforeget_IsTransitioning?.Invoke();
            var retVal = orig();
            if (_afterget_IsTransitioning != null) retVal = _afterget_IsTransitioning.Invoke();
            return retVal;
        }

        internal static void Hookget_CanTransition()
        {
            if (!HookedList.Contains("get_CanTransition"))
            {
                HookedList.Add("get_CanTransition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "get_CanTransition"),
                    get_CanTransition);
            }
        }

        internal static event Delegates.get_CanTransition_BeforeArgs _beforeget_CanTransition;
        internal static event Delegates.get_CanTransition_NormalArgs _afterget_CanTransition;

        private static bool get_CanTransition(Func<BossSceneController, bool> orig, BossSceneController self)
        {
            Delegates.Params_get_CanTransition @params = new()
            {
                self = self
            };
            _beforeget_CanTransition?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_CanTransition != null) retVal = _afterget_CanTransition.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_CanTransition()
        {
            if (!HookedList.Contains("set_CanTransition"))
            {
                HookedList.Add("set_CanTransition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "set_CanTransition"),
                    set_CanTransition);
            }
        }

        internal static event Delegates.set_CanTransition_BeforeArgs _beforeset_CanTransition;
        internal static event Delegates.set_CanTransition_NormalArgs _afterset_CanTransition;

        private static void set_CanTransition(Action<BossSceneController, bool> orig, BossSceneController self,
            bool value)
        {
            Delegates.Params_set_CanTransition @params = new()
            {
                self = self, value = value
            };
            _beforeset_CanTransition?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_CanTransition != null) _afterset_CanTransition.Invoke(@params);
        }

        internal static void Hookget_BossLevel()
        {
            if (!HookedList.Contains("get_BossLevel"))
            {
                HookedList.Add("get_BossLevel");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "get_BossLevel"), get_BossLevel);
            }
        }

        internal static event Delegates.get_BossLevel_BeforeArgs _beforeget_BossLevel;
        internal static event Delegates.get_BossLevel_NormalArgs _afterget_BossLevel;

        private static int get_BossLevel(Func<BossSceneController, int> orig, BossSceneController self)
        {
            Delegates.Params_get_BossLevel @params = new()
            {
                self = self
            };
            _beforeget_BossLevel?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_BossLevel != null) retVal = _afterget_BossLevel.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_BossLevel()
        {
            if (!HookedList.Contains("set_BossLevel"))
            {
                HookedList.Add("set_BossLevel");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "set_BossLevel"), set_BossLevel);
            }
        }

        internal static event Delegates.set_BossLevel_BeforeArgs _beforeset_BossLevel;
        internal static event Delegates.set_BossLevel_NormalArgs _afterset_BossLevel;

        private static void set_BossLevel(Action<BossSceneController, int> orig, BossSceneController self, int value)
        {
            Delegates.Params_set_BossLevel @params = new()
            {
                self = self, value = value
            };
            _beforeset_BossLevel?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_BossLevel != null) _afterset_BossLevel.Invoke(@params);
        }

        internal static void Hookget_DreamReturnEvent()
        {
            if (!HookedList.Contains("get_DreamReturnEvent"))
            {
                HookedList.Add("get_DreamReturnEvent");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "get_DreamReturnEvent"),
                    get_DreamReturnEvent);
            }
        }

        internal static event Delegates.get_DreamReturnEvent_BeforeArgs _beforeget_DreamReturnEvent;
        internal static event Delegates.get_DreamReturnEvent_NormalArgs _afterget_DreamReturnEvent;

        private static string get_DreamReturnEvent(Func<BossSceneController, string> orig, BossSceneController self)
        {
            Delegates.Params_get_DreamReturnEvent @params = new()
            {
                self = self
            };
            _beforeget_DreamReturnEvent?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DreamReturnEvent != null) retVal = _afterget_DreamReturnEvent.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_DreamReturnEvent()
        {
            if (!HookedList.Contains("set_DreamReturnEvent"))
            {
                HookedList.Add("set_DreamReturnEvent");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "set_DreamReturnEvent"),
                    set_DreamReturnEvent);
            }
        }

        internal static event Delegates.set_DreamReturnEvent_BeforeArgs _beforeset_DreamReturnEvent;
        internal static event Delegates.set_DreamReturnEvent_NormalArgs _afterset_DreamReturnEvent;

        private static void set_DreamReturnEvent(Action<BossSceneController, string> orig, BossSceneController self,
            string value)
        {
            Delegates.Params_set_DreamReturnEvent @params = new()
            {
                self = self, value = value
            };
            _beforeset_DreamReturnEvent?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_DreamReturnEvent != null) _afterset_DreamReturnEvent.Invoke(@params);
        }

        internal static void Hookget_BossHealthLookup()
        {
            if (!HookedList.Contains("get_BossHealthLookup"))
            {
                HookedList.Add("get_BossHealthLookup");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "get_BossHealthLookup"),
                    get_BossHealthLookup);
            }
        }

        internal static event Delegates.get_BossHealthLookup_BeforeArgs _beforeget_BossHealthLookup;
        internal static event Delegates.get_BossHealthLookup_NormalArgs _afterget_BossHealthLookup;

        private static Dictionary<HealthManager, BossSceneController.BossHealthDetails> get_BossHealthLookup(
            Func<BossSceneController, Dictionary<HealthManager, BossSceneController.BossHealthDetails>> orig,
            BossSceneController self)
        {
            Delegates.Params_get_BossHealthLookup @params = new()
            {
                self = self
            };
            _beforeget_BossHealthLookup?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_BossHealthLookup != null) retVal = _afterget_BossHealthLookup.Invoke(@params);
            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.BossSceneController.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.BossSceneController.orig_Awake orig, BossSceneController self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.BossSceneController.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_NormalArgs _afterOnDestroy;

        private static void OnDestroy(On.BossSceneController.orig_OnDestroy orig, BossSceneController self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            _beforeOnDestroy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null) _afterOnDestroy.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.BossSceneController.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;

        private static IEnumerator Start(On.BossSceneController.orig_Start orig, BossSceneController self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.BossSceneController.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.BossSceneController.orig_Update orig, BossSceneController self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookSetup()
        {
            if (!HookedList.Contains("Setup"))
            {
                HookedList.Add("Setup");
                On.BossSceneController.Setup += Setup;
            }
        }

        internal static event Delegates.Setup_BeforeArgs _beforeSetup;
        internal static event Delegates.Setup_NormalArgs _afterSetup;

        private static void Setup(On.BossSceneController.orig_Setup orig, BossSceneController self)
        {
            Delegates.Params_Setup @params = new()
            {
                self = self
            };
            _beforeSetup?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetup != null) _afterSetup.Invoke(@params);
        }

        internal static void HookSetKnightDamaged()
        {
            if (!HookedList.Contains("SetKnightDamaged"))
            {
                HookedList.Add("SetKnightDamaged");
                On.BossSceneController.SetKnightDamaged += SetKnightDamaged;
            }
        }

        internal static event Delegates.SetKnightDamaged_BeforeArgs _beforeSetKnightDamaged;
        internal static event Delegates.SetKnightDamaged_NormalArgs _afterSetKnightDamaged;

        private static void SetKnightDamaged(On.BossSceneController.orig_SetKnightDamaged orig,
            BossSceneController self)
        {
            Delegates.Params_SetKnightDamaged @params = new()
            {
                self = self
            };
            _beforeSetKnightDamaged?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetKnightDamaged != null) _afterSetKnightDamaged.Invoke(@params);
        }

        internal static void HookCheckBossesDead()
        {
            if (!HookedList.Contains("CheckBossesDead"))
            {
                HookedList.Add("CheckBossesDead");
                On.BossSceneController.CheckBossesDead += CheckBossesDead;
            }
        }

        internal static event Delegates.CheckBossesDead_BeforeArgs _beforeCheckBossesDead;
        internal static event Delegates.CheckBossesDead_NormalArgs _afterCheckBossesDead;

        private static void CheckBossesDead(On.BossSceneController.orig_CheckBossesDead orig, BossSceneController self)
        {
            Delegates.Params_CheckBossesDead @params = new()
            {
                self = self
            };
            _beforeCheckBossesDead?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCheckBossesDead != null) _afterCheckBossesDead.Invoke(@params);
        }

        internal static void HookEndBossScene()
        {
            if (!HookedList.Contains("EndBossScene"))
            {
                HookedList.Add("EndBossScene");
                On.BossSceneController.EndBossScene += EndBossScene;
            }
        }

        internal static event Delegates.EndBossScene_BeforeArgs _beforeEndBossScene;
        internal static event Delegates.EndBossScene_NormalArgs _afterEndBossScene;

        private static void EndBossScene(On.BossSceneController.orig_EndBossScene orig, BossSceneController self)
        {
            Delegates.Params_EndBossScene @params = new()
            {
                self = self
            };
            _beforeEndBossScene?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterEndBossScene != null) _afterEndBossScene.Invoke(@params);
        }

        internal static void HookEndSceneDelayed()
        {
            if (!HookedList.Contains("EndSceneDelayed"))
            {
                HookedList.Add("EndSceneDelayed");
                On.BossSceneController.EndSceneDelayed += EndSceneDelayed;
            }
        }

        internal static event Delegates.EndSceneDelayed_BeforeArgs _beforeEndSceneDelayed;

        private static IEnumerator EndSceneDelayed(On.BossSceneController.orig_EndSceneDelayed orig,
            BossSceneController self)
        {
            Delegates.Params_EndSceneDelayed @params = new()
            {
                self = self
            };
            _beforeEndSceneDelayed?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookDoDreamReturn()
        {
            if (!HookedList.Contains("DoDreamReturn"))
            {
                HookedList.Add("DoDreamReturn");
                On.BossSceneController.DoDreamReturn += DoDreamReturn;
            }
        }

        internal static event Delegates.DoDreamReturn_BeforeArgs _beforeDoDreamReturn;
        internal static event Delegates.DoDreamReturn_NormalArgs _afterDoDreamReturn;

        private static void DoDreamReturn(On.BossSceneController.orig_DoDreamReturn orig, BossSceneController self)
        {
            Delegates.Params_DoDreamReturn @params = new()
            {
                self = self
            };
            _beforeDoDreamReturn?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoDreamReturn != null) _afterDoDreamReturn.Invoke(@params);
        }

        internal static void HookApplyBindings()
        {
            if (!HookedList.Contains("ApplyBindings"))
            {
                HookedList.Add("ApplyBindings");
                On.BossSceneController.ApplyBindings += ApplyBindings;
            }
        }

        internal static event Delegates.ApplyBindings_BeforeArgs _beforeApplyBindings;
        internal static event Delegates.ApplyBindings_NormalArgs _afterApplyBindings;

        private static void ApplyBindings(On.BossSceneController.orig_ApplyBindings orig, BossSceneController self)
        {
            Delegates.Params_ApplyBindings @params = new()
            {
                self = self
            };
            _beforeApplyBindings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterApplyBindings != null) _afterApplyBindings.Invoke(@params);
        }

        internal static void HookRestoreBindings()
        {
            if (!HookedList.Contains("RestoreBindings"))
            {
                HookedList.Add("RestoreBindings");
                On.BossSceneController.RestoreBindings += RestoreBindings;
            }
        }

        internal static event Delegates.RestoreBindings_BeforeArgs _beforeRestoreBindings;
        internal static event Delegates.RestoreBindings_NormalArgs _afterRestoreBindings;

        private static void RestoreBindings(On.BossSceneController.orig_RestoreBindings orig, BossSceneController self)
        {
            Delegates.Params_RestoreBindings @params = new()
            {
                self = self
            };
            _beforeRestoreBindings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRestoreBindings != null) _afterRestoreBindings.Invoke(@params);
        }

        internal static void HookReportHealth()
        {
            if (!HookedList.Contains("ReportHealth"))
            {
                HookedList.Add("ReportHealth");
                On.BossSceneController.ReportHealth += ReportHealth;
            }
        }

        internal static event Delegates.ReportHealth_BeforeArgs _beforeReportHealth;
        internal static event Delegates.ReportHealth_NormalArgs _afterReportHealth;

        private static void ReportHealth(On.BossSceneController.orig_ReportHealth orig, HealthManager healthManager,
            int baseHP, int adjustedHP, bool forceAdd)
        {
            Delegates.Params_ReportHealth @params = new()
            {
                healthManager = healthManager, baseHP = baseHP, adjustedHP = adjustedHP, forceAdd = forceAdd
            };
            _beforeReportHealth?.Invoke(@params);
            healthManager = @params.healthManager;
            baseHP = @params.baseHP;
            adjustedHP = @params.adjustedHP;
            forceAdd = @params.forceAdd;
            orig(healthManager, baseHP, adjustedHP, forceAdd);
            if (_afterReportHealth != null) _afterReportHealth.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ApplyBindings_BeforeArgs(Params_ApplyBindings args);

        public delegate void ApplyBindings_NormalArgs(Params_ApplyBindings args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void CheckBossesDead_BeforeArgs(Params_CheckBossesDead args);

        public delegate void CheckBossesDead_NormalArgs(Params_CheckBossesDead args);

        public delegate void DoDreamReturn_BeforeArgs(Params_DoDreamReturn args);

        public delegate void DoDreamReturn_NormalArgs(Params_DoDreamReturn args);

        public delegate void EndBossScene_BeforeArgs(Params_EndBossScene args);

        public delegate void EndBossScene_NormalArgs(Params_EndBossScene args);

        public delegate void EndSceneDelayed_BeforeArgs(Params_EndSceneDelayed args);

        public delegate IEnumerator EndSceneDelayed_NormalArgs(Params_EndSceneDelayed args);

        public delegate void get_BossHealthLookup_BeforeArgs(Params_get_BossHealthLookup args);

        public delegate Dictionary<HealthManager, BossSceneController.BossHealthDetails>
            get_BossHealthLookup_NormalArgs(Params_get_BossHealthLookup args);

        public delegate void get_BossLevel_BeforeArgs(Params_get_BossLevel args);

        public delegate int get_BossLevel_NormalArgs(Params_get_BossLevel args);

        public delegate void get_CanTransition_BeforeArgs(Params_get_CanTransition args);

        public delegate bool get_CanTransition_NormalArgs(Params_get_CanTransition args);

        public delegate void get_DreamReturnEvent_BeforeArgs(Params_get_DreamReturnEvent args);

        public delegate string get_DreamReturnEvent_NormalArgs(Params_get_DreamReturnEvent args);

        public delegate void get_HasTransitionedIn_BeforeArgs(Params_get_HasTransitionedIn args);

        public delegate bool get_HasTransitionedIn_NormalArgs(Params_get_HasTransitionedIn args);

        public delegate void get_IsBossScene_BeforeArgs();

        public delegate bool get_IsBossScene_NormalArgs();

        public delegate void get_IsTransitioning_BeforeArgs();

        public delegate bool get_IsTransitioning_NormalArgs();

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_NormalArgs(Params_OnDestroy args);

        public delegate void ReportHealth_BeforeArgs(Params_ReportHealth args);

        public delegate void ReportHealth_NormalArgs(Params_ReportHealth args);

        public delegate void RestoreBindings_BeforeArgs(Params_RestoreBindings args);

        public delegate void RestoreBindings_NormalArgs(Params_RestoreBindings args);

        public delegate void set_BossLevel_BeforeArgs(Params_set_BossLevel args);

        public delegate void set_BossLevel_NormalArgs(Params_set_BossLevel args);

        public delegate void set_CanTransition_BeforeArgs(Params_set_CanTransition args);

        public delegate void set_CanTransition_NormalArgs(Params_set_CanTransition args);

        public delegate void set_DreamReturnEvent_BeforeArgs(Params_set_DreamReturnEvent args);

        public delegate void set_DreamReturnEvent_NormalArgs(Params_set_DreamReturnEvent args);

        public delegate void set_HasTransitionedIn_BeforeArgs(Params_set_HasTransitionedIn args);

        public delegate void set_HasTransitionedIn_NormalArgs(Params_set_HasTransitionedIn args);

        public delegate void SetKnightDamaged_BeforeArgs(Params_SetKnightDamaged args);

        public delegate void SetKnightDamaged_NormalArgs(Params_SetKnightDamaged args);

        public delegate void Setup_BeforeArgs(Params_Setup args);

        public delegate void Setup_NormalArgs(Params_Setup args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate IEnumerator Start_NormalArgs(Params_Start args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_get_HasTransitionedIn
        {
            public BossSceneController self;
        }

        public sealed class Params_set_HasTransitionedIn
        {
            public BossSceneController self;
            public bool value;
        }

        public sealed class Params_get_CanTransition
        {
            public BossSceneController self;
        }

        public sealed class Params_set_CanTransition
        {
            public BossSceneController self;
            public bool value;
        }

        public sealed class Params_get_BossLevel
        {
            public BossSceneController self;
        }

        public sealed class Params_set_BossLevel
        {
            public BossSceneController self;
            public int value;
        }

        public sealed class Params_get_DreamReturnEvent
        {
            public BossSceneController self;
        }

        public sealed class Params_set_DreamReturnEvent
        {
            public BossSceneController self;
            public string value;
        }

        public sealed class Params_get_BossHealthLookup
        {
            public BossSceneController self;
        }

        public sealed class Params_Awake
        {
            public BossSceneController self;
        }

        public sealed class Params_OnDestroy
        {
            public BossSceneController self;
        }

        public sealed class Params_Start
        {
            public BossSceneController self;
        }

        public sealed class Params_Update
        {
            public BossSceneController self;
        }

        public sealed class Params_Setup
        {
            public BossSceneController self;
        }

        public sealed class Params_SetKnightDamaged
        {
            public BossSceneController self;
        }

        public sealed class Params_CheckBossesDead
        {
            public BossSceneController self;
        }

        public sealed class Params_EndBossScene
        {
            public BossSceneController self;
        }

        public sealed class Params_EndSceneDelayed
        {
            public BossSceneController self;
        }

        public sealed class Params_DoDreamReturn
        {
            public BossSceneController self;
        }

        public sealed class Params_ApplyBindings
        {
            public BossSceneController self;
        }

        public sealed class Params_RestoreBindings
        {
            public BossSceneController self;
        }

        public sealed class Params_ReportHealth
        {
            public int adjustedHP;
            public int baseHP;
            public bool forceAdd;
            public HealthManager healthManager;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_IsBossScene_BeforeArgs get_IsBossScene
        {
            add
            {
                HookHandler._beforeget_IsBossScene += value;
                HookHandler.Hookget_IsBossScene();
            }
            remove => HookHandler._beforeget_IsBossScene -= value;
        }

        public static event Delegates.get_HasTransitionedIn_BeforeArgs get_HasTransitionedIn
        {
            add
            {
                HookHandler._beforeget_HasTransitionedIn += value;
                HookHandler.Hookget_HasTransitionedIn();
            }
            remove => HookHandler._beforeget_HasTransitionedIn -= value;
        }

        public static event Delegates.set_HasTransitionedIn_BeforeArgs set_HasTransitionedIn
        {
            add
            {
                HookHandler._beforeset_HasTransitionedIn += value;
                HookHandler.Hookset_HasTransitionedIn();
            }
            remove => HookHandler._beforeset_HasTransitionedIn -= value;
        }

        public static event Delegates.get_IsTransitioning_BeforeArgs get_IsTransitioning
        {
            add
            {
                HookHandler._beforeget_IsTransitioning += value;
                HookHandler.Hookget_IsTransitioning();
            }
            remove => HookHandler._beforeget_IsTransitioning -= value;
        }

        public static event Delegates.get_CanTransition_BeforeArgs get_CanTransition
        {
            add
            {
                HookHandler._beforeget_CanTransition += value;
                HookHandler.Hookget_CanTransition();
            }
            remove => HookHandler._beforeget_CanTransition -= value;
        }

        public static event Delegates.set_CanTransition_BeforeArgs set_CanTransition
        {
            add
            {
                HookHandler._beforeset_CanTransition += value;
                HookHandler.Hookset_CanTransition();
            }
            remove => HookHandler._beforeset_CanTransition -= value;
        }

        public static event Delegates.get_BossLevel_BeforeArgs get_BossLevel
        {
            add
            {
                HookHandler._beforeget_BossLevel += value;
                HookHandler.Hookget_BossLevel();
            }
            remove => HookHandler._beforeget_BossLevel -= value;
        }

        public static event Delegates.set_BossLevel_BeforeArgs set_BossLevel
        {
            add
            {
                HookHandler._beforeset_BossLevel += value;
                HookHandler.Hookset_BossLevel();
            }
            remove => HookHandler._beforeset_BossLevel -= value;
        }

        public static event Delegates.get_DreamReturnEvent_BeforeArgs get_DreamReturnEvent
        {
            add
            {
                HookHandler._beforeget_DreamReturnEvent += value;
                HookHandler.Hookget_DreamReturnEvent();
            }
            remove => HookHandler._beforeget_DreamReturnEvent -= value;
        }

        public static event Delegates.set_DreamReturnEvent_BeforeArgs set_DreamReturnEvent
        {
            add
            {
                HookHandler._beforeset_DreamReturnEvent += value;
                HookHandler.Hookset_DreamReturnEvent();
            }
            remove => HookHandler._beforeset_DreamReturnEvent -= value;
        }

        public static event Delegates.get_BossHealthLookup_BeforeArgs get_BossHealthLookup
        {
            add
            {
                HookHandler._beforeget_BossHealthLookup += value;
                HookHandler.Hookget_BossHealthLookup();
            }
            remove => HookHandler._beforeget_BossHealthLookup -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.Setup_BeforeArgs Setup
        {
            add
            {
                HookHandler._beforeSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._beforeSetup -= value;
        }

        public static event Delegates.SetKnightDamaged_BeforeArgs SetKnightDamaged
        {
            add
            {
                HookHandler._beforeSetKnightDamaged += value;
                HookHandler.HookSetKnightDamaged();
            }
            remove => HookHandler._beforeSetKnightDamaged -= value;
        }

        public static event Delegates.CheckBossesDead_BeforeArgs CheckBossesDead
        {
            add
            {
                HookHandler._beforeCheckBossesDead += value;
                HookHandler.HookCheckBossesDead();
            }
            remove => HookHandler._beforeCheckBossesDead -= value;
        }

        public static event Delegates.EndBossScene_BeforeArgs EndBossScene
        {
            add
            {
                HookHandler._beforeEndBossScene += value;
                HookHandler.HookEndBossScene();
            }
            remove => HookHandler._beforeEndBossScene -= value;
        }

        public static event Delegates.EndSceneDelayed_BeforeArgs EndSceneDelayed
        {
            add
            {
                HookHandler._beforeEndSceneDelayed += value;
                HookHandler.HookEndSceneDelayed();
            }
            remove => HookHandler._beforeEndSceneDelayed -= value;
        }

        public static event Delegates.DoDreamReturn_BeforeArgs DoDreamReturn
        {
            add
            {
                HookHandler._beforeDoDreamReturn += value;
                HookHandler.HookDoDreamReturn();
            }
            remove => HookHandler._beforeDoDreamReturn -= value;
        }

        public static event Delegates.ApplyBindings_BeforeArgs ApplyBindings
        {
            add
            {
                HookHandler._beforeApplyBindings += value;
                HookHandler.HookApplyBindings();
            }
            remove => HookHandler._beforeApplyBindings -= value;
        }

        public static event Delegates.RestoreBindings_BeforeArgs RestoreBindings
        {
            add
            {
                HookHandler._beforeRestoreBindings += value;
                HookHandler.HookRestoreBindings();
            }
            remove => HookHandler._beforeRestoreBindings -= value;
        }

        public static event Delegates.ReportHealth_BeforeArgs ReportHealth
        {
            add
            {
                HookHandler._beforeReportHealth += value;
                HookHandler.HookReportHealth();
            }
            remove => HookHandler._beforeReportHealth -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_IsBossScene_NormalArgs get_IsBossScene
        {
            add
            {
                HookHandler._afterget_IsBossScene += value;
                HookHandler.Hookget_IsBossScene();
            }
            remove => HookHandler._afterget_IsBossScene -= value;
        }

        public static event Delegates.get_HasTransitionedIn_NormalArgs get_HasTransitionedIn
        {
            add
            {
                HookHandler._afterget_HasTransitionedIn += value;
                HookHandler.Hookget_HasTransitionedIn();
            }
            remove => HookHandler._afterget_HasTransitionedIn -= value;
        }

        public static event Delegates.set_HasTransitionedIn_NormalArgs set_HasTransitionedIn
        {
            add
            {
                HookHandler._afterset_HasTransitionedIn += value;
                HookHandler.Hookset_HasTransitionedIn();
            }
            remove => HookHandler._afterset_HasTransitionedIn -= value;
        }

        public static event Delegates.get_IsTransitioning_NormalArgs get_IsTransitioning
        {
            add
            {
                HookHandler._afterget_IsTransitioning += value;
                HookHandler.Hookget_IsTransitioning();
            }
            remove => HookHandler._afterget_IsTransitioning -= value;
        }

        public static event Delegates.get_CanTransition_NormalArgs get_CanTransition
        {
            add
            {
                HookHandler._afterget_CanTransition += value;
                HookHandler.Hookget_CanTransition();
            }
            remove => HookHandler._afterget_CanTransition -= value;
        }

        public static event Delegates.set_CanTransition_NormalArgs set_CanTransition
        {
            add
            {
                HookHandler._afterset_CanTransition += value;
                HookHandler.Hookset_CanTransition();
            }
            remove => HookHandler._afterset_CanTransition -= value;
        }

        public static event Delegates.get_BossLevel_NormalArgs get_BossLevel
        {
            add
            {
                HookHandler._afterget_BossLevel += value;
                HookHandler.Hookget_BossLevel();
            }
            remove => HookHandler._afterget_BossLevel -= value;
        }

        public static event Delegates.set_BossLevel_NormalArgs set_BossLevel
        {
            add
            {
                HookHandler._afterset_BossLevel += value;
                HookHandler.Hookset_BossLevel();
            }
            remove => HookHandler._afterset_BossLevel -= value;
        }

        public static event Delegates.get_DreamReturnEvent_NormalArgs get_DreamReturnEvent
        {
            add
            {
                HookHandler._afterget_DreamReturnEvent += value;
                HookHandler.Hookget_DreamReturnEvent();
            }
            remove => HookHandler._afterget_DreamReturnEvent -= value;
        }

        public static event Delegates.set_DreamReturnEvent_NormalArgs set_DreamReturnEvent
        {
            add
            {
                HookHandler._afterset_DreamReturnEvent += value;
                HookHandler.Hookset_DreamReturnEvent();
            }
            remove => HookHandler._afterset_DreamReturnEvent -= value;
        }

        public static event Delegates.get_BossHealthLookup_NormalArgs get_BossHealthLookup
        {
            add
            {
                HookHandler._afterget_BossHealthLookup += value;
                HookHandler.Hookget_BossHealthLookup();
            }
            remove => HookHandler._afterget_BossHealthLookup -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.Setup_NormalArgs Setup
        {
            add
            {
                HookHandler._afterSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._afterSetup -= value;
        }

        public static event Delegates.SetKnightDamaged_NormalArgs SetKnightDamaged
        {
            add
            {
                HookHandler._afterSetKnightDamaged += value;
                HookHandler.HookSetKnightDamaged();
            }
            remove => HookHandler._afterSetKnightDamaged -= value;
        }

        public static event Delegates.CheckBossesDead_NormalArgs CheckBossesDead
        {
            add
            {
                HookHandler._afterCheckBossesDead += value;
                HookHandler.HookCheckBossesDead();
            }
            remove => HookHandler._afterCheckBossesDead -= value;
        }

        public static event Delegates.EndBossScene_NormalArgs EndBossScene
        {
            add
            {
                HookHandler._afterEndBossScene += value;
                HookHandler.HookEndBossScene();
            }
            remove => HookHandler._afterEndBossScene -= value;
        }

        public static event Delegates.DoDreamReturn_NormalArgs DoDreamReturn
        {
            add
            {
                HookHandler._afterDoDreamReturn += value;
                HookHandler.HookDoDreamReturn();
            }
            remove => HookHandler._afterDoDreamReturn -= value;
        }

        public static event Delegates.ApplyBindings_NormalArgs ApplyBindings
        {
            add
            {
                HookHandler._afterApplyBindings += value;
                HookHandler.HookApplyBindings();
            }
            remove => HookHandler._afterApplyBindings -= value;
        }

        public static event Delegates.RestoreBindings_NormalArgs RestoreBindings
        {
            add
            {
                HookHandler._afterRestoreBindings += value;
                HookHandler.HookRestoreBindings();
            }
            remove => HookHandler._afterRestoreBindings -= value;
        }

        public static event Delegates.ReportHealth_NormalArgs ReportHealth
        {
            add
            {
                HookHandler._afterReportHealth += value;
                HookHandler.HookReportHealth();
            }
            remove => HookHandler._afterReportHealth -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_IsBossScene_NormalArgs get_IsBossScene
        {
            add => HookEndpointManager.Add<Delegates.get_IsBossScene_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "get_IsBossScene", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsBossScene_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "get_IsBossScene", false), value);
        }

        public static event Delegates.get_HasTransitionedIn_NormalArgs get_HasTransitionedIn
        {
            add => HookEndpointManager.Add<Delegates.get_HasTransitionedIn_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "get_HasTransitionedIn"), value);
            remove => HookEndpointManager.Remove<Delegates.get_HasTransitionedIn_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "get_HasTransitionedIn"), value);
        }

        public static event Delegates.set_HasTransitionedIn_NormalArgs set_HasTransitionedIn
        {
            add => HookEndpointManager.Add<Delegates.set_HasTransitionedIn_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "set_HasTransitionedIn"), value);
            remove => HookEndpointManager.Remove<Delegates.set_HasTransitionedIn_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "set_HasTransitionedIn"), value);
        }

        public static event Delegates.get_IsTransitioning_NormalArgs get_IsTransitioning
        {
            add => HookEndpointManager.Add<Delegates.get_IsTransitioning_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "get_IsTransitioning", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsTransitioning_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "get_IsTransitioning", false), value);
        }

        public static event Delegates.get_CanTransition_NormalArgs get_CanTransition
        {
            add => HookEndpointManager.Add<Delegates.get_CanTransition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "get_CanTransition"), value);
            remove => HookEndpointManager.Remove<Delegates.get_CanTransition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "get_CanTransition"), value);
        }

        public static event Delegates.set_CanTransition_NormalArgs set_CanTransition
        {
            add => HookEndpointManager.Add<Delegates.set_CanTransition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "set_CanTransition"), value);
            remove => HookEndpointManager.Remove<Delegates.set_CanTransition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "set_CanTransition"), value);
        }

        public static event Delegates.get_BossLevel_NormalArgs get_BossLevel
        {
            add => HookEndpointManager.Add<Delegates.get_BossLevel_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "get_BossLevel"), value);
            remove => HookEndpointManager.Remove<Delegates.get_BossLevel_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "get_BossLevel"), value);
        }

        public static event Delegates.set_BossLevel_NormalArgs set_BossLevel
        {
            add => HookEndpointManager.Add<Delegates.set_BossLevel_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "set_BossLevel"), value);
            remove => HookEndpointManager.Remove<Delegates.set_BossLevel_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "set_BossLevel"), value);
        }

        public static event Delegates.get_DreamReturnEvent_NormalArgs get_DreamReturnEvent
        {
            add => HookEndpointManager.Add<Delegates.get_DreamReturnEvent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "get_DreamReturnEvent"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DreamReturnEvent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "get_DreamReturnEvent"), value);
        }

        public static event Delegates.set_DreamReturnEvent_NormalArgs set_DreamReturnEvent
        {
            add => HookEndpointManager.Add<Delegates.set_DreamReturnEvent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "set_DreamReturnEvent"), value);
            remove => HookEndpointManager.Remove<Delegates.set_DreamReturnEvent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "set_DreamReturnEvent"), value);
        }

        public static event Delegates.get_BossHealthLookup_NormalArgs get_BossHealthLookup
        {
            add => HookEndpointManager.Add<Delegates.get_BossHealthLookup_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "get_BossHealthLookup"), value);
            remove => HookEndpointManager.Remove<Delegates.get_BossHealthLookup_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSceneController), "get_BossHealthLookup"), value);
        }

        public static event On.BossSceneController.hook_Awake Awake
        {
            add => On.BossSceneController.Awake += value;
            remove => On.BossSceneController.Awake -= value;
        }

        public static event On.BossSceneController.hook_OnDestroy OnDestroy
        {
            add => On.BossSceneController.OnDestroy += value;
            remove => On.BossSceneController.OnDestroy -= value;
        }

        public static event On.BossSceneController.hook_Start Start
        {
            add => On.BossSceneController.Start += value;
            remove => On.BossSceneController.Start -= value;
        }

        public static event On.BossSceneController.hook_Update Update
        {
            add => On.BossSceneController.Update += value;
            remove => On.BossSceneController.Update -= value;
        }

        public static event On.BossSceneController.hook_Setup Setup
        {
            add => On.BossSceneController.Setup += value;
            remove => On.BossSceneController.Setup -= value;
        }

        public static event On.BossSceneController.hook_SetKnightDamaged SetKnightDamaged
        {
            add => On.BossSceneController.SetKnightDamaged += value;
            remove => On.BossSceneController.SetKnightDamaged -= value;
        }

        public static event On.BossSceneController.hook_CheckBossesDead CheckBossesDead
        {
            add => On.BossSceneController.CheckBossesDead += value;
            remove => On.BossSceneController.CheckBossesDead -= value;
        }

        public static event On.BossSceneController.hook_EndBossScene EndBossScene
        {
            add => On.BossSceneController.EndBossScene += value;
            remove => On.BossSceneController.EndBossScene -= value;
        }

        public static event On.BossSceneController.hook_EndSceneDelayed EndSceneDelayed
        {
            add => On.BossSceneController.EndSceneDelayed += value;
            remove => On.BossSceneController.EndSceneDelayed -= value;
        }

        public static event On.BossSceneController.hook_DoDreamReturn DoDreamReturn
        {
            add => On.BossSceneController.DoDreamReturn += value;
            remove => On.BossSceneController.DoDreamReturn -= value;
        }

        public static event On.BossSceneController.hook_ApplyBindings ApplyBindings
        {
            add => On.BossSceneController.ApplyBindings += value;
            remove => On.BossSceneController.ApplyBindings -= value;
        }

        public static event On.BossSceneController.hook_RestoreBindings RestoreBindings
        {
            add => On.BossSceneController.RestoreBindings += value;
            remove => On.BossSceneController.RestoreBindings -= value;
        }

        public static event On.BossSceneController.hook_ReportHealth ReportHealth
        {
            add => On.BossSceneController.ReportHealth += value;
            remove => On.BossSceneController.ReportHealth -= value;
        }
    }
}