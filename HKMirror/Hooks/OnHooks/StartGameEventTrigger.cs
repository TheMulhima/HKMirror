using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for StartGameEventTrigger class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnStartGameEventTrigger
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookOnSubmit()
{
if (!HookedList.Contains("OnSubmit"))
{
HookedList.Add("OnSubmit");
On.StartGameEventTrigger.OnSubmit += OnSubmit;

}
}
internal static event Delegates.OnSubmit_BeforeArgs _beforeOnSubmit;
internal static event Delegates.OnSubmit_AfterArgs _afterOnSubmit;
private static void OnSubmit(On.StartGameEventTrigger.orig_OnSubmit orig,StartGameEventTrigger self,  UnityEngine.EventSystems.BaseEventData eventData)
{
Delegates.Params_OnSubmit @params = new() 
{
self = self
, eventData = eventData
};
if (_beforeOnSubmit != null)
{
foreach (Delegates.OnSubmit_BeforeArgs toInvoke in _beforeOnSubmit.GetInvocationList())
{
try
{
_beforeOnSubmit?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
eventData = @params.eventData;
orig(self, eventData);
if (_afterOnSubmit != null)
{
foreach (Delegates.OnSubmit_AfterArgs toInvoke in _afterOnSubmit.GetInvocationList())
{
try
{
_afterOnSubmit.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnPointerClick()
{
if (!HookedList.Contains("OnPointerClick"))
{
HookedList.Add("OnPointerClick");
On.StartGameEventTrigger.OnPointerClick += OnPointerClick;

}
}
internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
internal static event Delegates.OnPointerClick_AfterArgs _afterOnPointerClick;
private static void OnPointerClick(On.StartGameEventTrigger.orig_OnPointerClick orig,StartGameEventTrigger self,  UnityEngine.EventSystems.PointerEventData eventData)
{
Delegates.Params_OnPointerClick @params = new() 
{
self = self
, eventData = eventData
};
if (_beforeOnPointerClick != null)
{
foreach (Delegates.OnPointerClick_BeforeArgs toInvoke in _beforeOnPointerClick.GetInvocationList())
{
try
{
_beforeOnPointerClick?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
eventData = @params.eventData;
orig(self, eventData);
if (_afterOnPointerClick != null)
{
foreach (Delegates.OnPointerClick_AfterArgs toInvoke in _afterOnPointerClick.GetInvocationList())
{
try
{
_afterOnPointerClick.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookIsFulfilled()
{
if (!HookedList.Contains("IsFulfilled"))
{
HookedList.Add("IsFulfilled");
On.StartGameEventTrigger.IsFulfilled += IsFulfilled;

}
}
internal static event Delegates.IsFulfilled_BeforeArgs _beforeIsFulfilled;
internal static event Delegates.IsFulfilled_AfterArgs _afterIsFulfilled;
private static bool IsFulfilled(On.StartGameEventTrigger.orig_IsFulfilled orig,StartGameEventTrigger self)
{
Delegates.Params_IsFulfilled @params = new() 
{
self = self
};
if (_beforeIsFulfilled != null)
{
foreach (Delegates.IsFulfilled_BeforeArgs toInvoke in _beforeIsFulfilled.GetInvocationList())
{
try
{
_beforeIsFulfilled?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterIsFulfilled != null)
{
foreach (Delegates.IsFulfilled_AfterArgs toInvoke in _afterIsFulfilled.GetInvocationList())
{
try
{
retVal = _afterIsFulfilled.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_OnSubmit
{
public StartGameEventTrigger self;
public UnityEngine.EventSystems.BaseEventData eventData;
}
public delegate void OnSubmit_BeforeArgs(Params_OnSubmit args);
public delegate void OnSubmit_AfterArgs(Params_OnSubmit args);
public delegate void OnSubmit_WithArgs (Action<StartGameEventTrigger,  UnityEngine.EventSystems.BaseEventData> orig, StartGameEventTrigger self,  UnityEngine.EventSystems.BaseEventData eventData);
public sealed class Params_OnPointerClick
{
public StartGameEventTrigger self;
public UnityEngine.EventSystems.PointerEventData eventData;
}
public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);
public delegate void OnPointerClick_AfterArgs(Params_OnPointerClick args);
public delegate void OnPointerClick_WithArgs (Action<StartGameEventTrigger,  UnityEngine.EventSystems.PointerEventData> orig, StartGameEventTrigger self,  UnityEngine.EventSystems.PointerEventData eventData);
public sealed class Params_IsFulfilled
{
public StartGameEventTrigger self;
}
public delegate void IsFulfilled_BeforeArgs(Params_IsFulfilled args);
public delegate bool IsFulfilled_AfterArgs(Params_IsFulfilled args, bool ret);
public delegate bool IsFulfilled_WithArgs (Func<StartGameEventTrigger, bool> orig, StartGameEventTrigger self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.OnSubmit_BeforeArgs OnSubmit
{
add
{

HookHandler._beforeOnSubmit += value;
HookHandler.HookOnSubmit();
}
remove => HookHandler._beforeOnSubmit -= value;
}
public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
{
add
{

HookHandler._beforeOnPointerClick += value;
HookHandler.HookOnPointerClick();
}
remove => HookHandler._beforeOnPointerClick -= value;
}
public static event Delegates.IsFulfilled_BeforeArgs IsFulfilled
{
add
{

HookHandler._beforeIsFulfilled += value;
HookHandler.HookIsFulfilled();
}
remove => HookHandler._beforeIsFulfilled -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.OnSubmit_AfterArgs OnSubmit
{
add
{

HookHandler._afterOnSubmit += value;
HookHandler.HookOnSubmit();
}
remove => HookHandler._afterOnSubmit -= value;
}
public static event Delegates.OnPointerClick_AfterArgs OnPointerClick
{
add
{

HookHandler._afterOnPointerClick += value;
HookHandler.HookOnPointerClick();
}
remove => HookHandler._afterOnPointerClick -= value;
}
public static event Delegates.IsFulfilled_AfterArgs IsFulfilled
{
add
{

HookHandler._afterIsFulfilled += value;
HookHandler.HookIsFulfilled();
}
remove => HookHandler._afterIsFulfilled -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.StartGameEventTrigger.hook_OnSubmit OnSubmit
{
add => On.StartGameEventTrigger.OnSubmit += value;
remove => On.StartGameEventTrigger.OnSubmit -= value;
}
public static event On.StartGameEventTrigger.hook_OnPointerClick OnPointerClick
{
add => On.StartGameEventTrigger.OnPointerClick += value;
remove => On.StartGameEventTrigger.OnPointerClick -= value;
}
public static event On.StartGameEventTrigger.hook_IsFulfilled IsFulfilled
{
add => On.StartGameEventTrigger.IsFulfilled += value;
remove => On.StartGameEventTrigger.IsFulfilled -= value;
}
}

}
