using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for SetAnimatorTarget class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSetAnimatorTarget
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorTarget), "Reset",
                        true), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_AfterArgs _afterReset;

        private static void Reset(Action<HutongGames.PlayMaker.Actions.SetAnimatorTarget> orig,
            HutongGames.PlayMaker.Actions.SetAnimatorTarget self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            if (_beforeReset != null)
            {
                foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
                {
                    try
                    {
                        _beforeReset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterReset != null)
            {
                foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
                {
                    try
                    {
                        _afterReset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnPreprocess()
        {
            if (!HookedList.Contains("OnPreprocess"))
            {
                HookedList.Add("OnPreprocess");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorTarget),
                        "OnPreprocess", true), OnPreprocess);
            }
        }

        internal static event Delegates.OnPreprocess_BeforeArgs _beforeOnPreprocess;
        internal static event Delegates.OnPreprocess_AfterArgs _afterOnPreprocess;

        private static void OnPreprocess(Action<HutongGames.PlayMaker.Actions.SetAnimatorTarget> orig,
            HutongGames.PlayMaker.Actions.SetAnimatorTarget self)
        {
            Delegates.Params_OnPreprocess @params = new()
            {
                self = self
            };
            if (_beforeOnPreprocess != null)
            {
                foreach (Delegates.OnPreprocess_BeforeArgs toInvoke in _beforeOnPreprocess.GetInvocationList())
                {
                    try
                    {
                        _beforeOnPreprocess?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnPreprocess != null)
            {
                foreach (Delegates.OnPreprocess_AfterArgs toInvoke in _afterOnPreprocess.GetInvocationList())
                {
                    try
                    {
                        _afterOnPreprocess.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorTarget), "OnEnter",
                        true), OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_AfterArgs _afterOnEnter;

        private static void OnEnter(Action<HutongGames.PlayMaker.Actions.SetAnimatorTarget> orig,
            HutongGames.PlayMaker.Actions.SetAnimatorTarget self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            if (_beforeOnEnter != null)
            {
                foreach (Delegates.OnEnter_BeforeArgs toInvoke in _beforeOnEnter.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnter != null)
            {
                foreach (Delegates.OnEnter_AfterArgs toInvoke in _afterOnEnter.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnter.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDoAnimatorMove()
        {
            if (!HookedList.Contains("DoAnimatorMove"))
            {
                HookedList.Add("DoAnimatorMove");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorTarget),
                        "DoAnimatorMove", true), DoAnimatorMove);
            }
        }

        internal static event Delegates.DoAnimatorMove_BeforeArgs _beforeDoAnimatorMove;
        internal static event Delegates.DoAnimatorMove_AfterArgs _afterDoAnimatorMove;

        private static void DoAnimatorMove(Action<HutongGames.PlayMaker.Actions.SetAnimatorTarget> orig,
            HutongGames.PlayMaker.Actions.SetAnimatorTarget self)
        {
            Delegates.Params_DoAnimatorMove @params = new()
            {
                self = self
            };
            if (_beforeDoAnimatorMove != null)
            {
                foreach (Delegates.DoAnimatorMove_BeforeArgs toInvoke in _beforeDoAnimatorMove.GetInvocationList())
                {
                    try
                    {
                        _beforeDoAnimatorMove?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterDoAnimatorMove != null)
            {
                foreach (Delegates.DoAnimatorMove_AfterArgs toInvoke in _afterDoAnimatorMove.GetInvocationList())
                {
                    try
                    {
                        _afterDoAnimatorMove.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetTarget()
        {
            if (!HookedList.Contains("SetTarget"))
            {
                HookedList.Add("SetTarget");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorTarget), "SetTarget",
                        true), SetTarget);
            }
        }

        internal static event Delegates.SetTarget_BeforeArgs _beforeSetTarget;
        internal static event Delegates.SetTarget_AfterArgs _afterSetTarget;

        private static void SetTarget(Action<HutongGames.PlayMaker.Actions.SetAnimatorTarget> orig,
            HutongGames.PlayMaker.Actions.SetAnimatorTarget self)
        {
            Delegates.Params_SetTarget @params = new()
            {
                self = self
            };
            if (_beforeSetTarget != null)
            {
                foreach (Delegates.SetTarget_BeforeArgs toInvoke in _beforeSetTarget.GetInvocationList())
                {
                    try
                    {
                        _beforeSetTarget?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterSetTarget != null)
            {
                foreach (Delegates.SetTarget_AfterArgs toInvoke in _afterSetTarget.GetInvocationList())
                {
                    try
                    {
                        _afterSetTarget.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Reset
        {
            public HutongGames.PlayMaker.Actions.SetAnimatorTarget self;
        }

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_AfterArgs(Params_Reset args);

        public delegate void Reset_WithArgs(Action<HutongGames.PlayMaker.Actions.SetAnimatorTarget> orig,
            HutongGames.PlayMaker.Actions.SetAnimatorTarget self);

        public sealed class Params_OnPreprocess
        {
            public HutongGames.PlayMaker.Actions.SetAnimatorTarget self;
        }

        public delegate void OnPreprocess_BeforeArgs(Params_OnPreprocess args);

        public delegate void OnPreprocess_AfterArgs(Params_OnPreprocess args);

        public delegate void OnPreprocess_WithArgs(Action<HutongGames.PlayMaker.Actions.SetAnimatorTarget> orig,
            HutongGames.PlayMaker.Actions.SetAnimatorTarget self);

        public sealed class Params_OnEnter
        {
            public HutongGames.PlayMaker.Actions.SetAnimatorTarget self;
        }

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_AfterArgs(Params_OnEnter args);

        public delegate void OnEnter_WithArgs(Action<HutongGames.PlayMaker.Actions.SetAnimatorTarget> orig,
            HutongGames.PlayMaker.Actions.SetAnimatorTarget self);

        public sealed class Params_DoAnimatorMove
        {
            public HutongGames.PlayMaker.Actions.SetAnimatorTarget self;
        }

        public delegate void DoAnimatorMove_BeforeArgs(Params_DoAnimatorMove args);

        public delegate void DoAnimatorMove_AfterArgs(Params_DoAnimatorMove args);

        public delegate void DoAnimatorMove_WithArgs(Action<HutongGames.PlayMaker.Actions.SetAnimatorTarget> orig,
            HutongGames.PlayMaker.Actions.SetAnimatorTarget self);

        public sealed class Params_SetTarget
        {
            public HutongGames.PlayMaker.Actions.SetAnimatorTarget self;
        }

        public delegate void SetTarget_BeforeArgs(Params_SetTarget args);

        public delegate void SetTarget_AfterArgs(Params_SetTarget args);

        public delegate void SetTarget_WithArgs(Action<HutongGames.PlayMaker.Actions.SetAnimatorTarget> orig,
            HutongGames.PlayMaker.Actions.SetAnimatorTarget self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnPreprocess_BeforeArgs OnPreprocess
        {
            add
            {
                HookHandler._beforeOnPreprocess += value;
                HookHandler.HookOnPreprocess();
            }
            remove => HookHandler._beforeOnPreprocess -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.DoAnimatorMove_BeforeArgs DoAnimatorMove
        {
            add
            {
                HookHandler._beforeDoAnimatorMove += value;
                HookHandler.HookDoAnimatorMove();
            }
            remove => HookHandler._beforeDoAnimatorMove -= value;
        }

        public static event Delegates.SetTarget_BeforeArgs SetTarget
        {
            add
            {
                HookHandler._beforeSetTarget += value;
                HookHandler.HookSetTarget();
            }
            remove => HookHandler._beforeSetTarget -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_AfterArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnPreprocess_AfterArgs OnPreprocess
        {
            add
            {
                HookHandler._afterOnPreprocess += value;
                HookHandler.HookOnPreprocess();
            }
            remove => HookHandler._afterOnPreprocess -= value;
        }

        public static event Delegates.OnEnter_AfterArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.DoAnimatorMove_AfterArgs DoAnimatorMove
        {
            add
            {
                HookHandler._afterDoAnimatorMove += value;
                HookHandler.HookDoAnimatorMove();
            }
            remove => HookHandler._afterDoAnimatorMove -= value;
        }

        public static event Delegates.SetTarget_AfterArgs SetTarget
        {
            add
            {
                HookHandler._afterSetTarget += value;
                HookHandler.HookSetTarget();
            }
            remove => HookHandler._afterSetTarget -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_WithArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorTarget), "Reset", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorTarget), "Reset", true),
                value);
        }

        public static event Delegates.OnPreprocess_WithArgs OnPreprocess
        {
            add => HookEndpointManager.Add<Delegates.OnPreprocess_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorTarget), "OnPreprocess",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.OnPreprocess_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorTarget), "OnPreprocess",
                    true), value);
        }

        public static event Delegates.OnEnter_WithArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorTarget), "OnEnter",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorTarget), "OnEnter",
                    true), value);
        }

        public static event Delegates.DoAnimatorMove_WithArgs DoAnimatorMove
        {
            add => HookEndpointManager.Add<Delegates.DoAnimatorMove_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorTarget),
                    "DoAnimatorMove", true), value);
            remove => HookEndpointManager.Remove<Delegates.DoAnimatorMove_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorTarget),
                    "DoAnimatorMove", true), value);
        }

        public static event Delegates.SetTarget_WithArgs SetTarget
        {
            add => HookEndpointManager.Add<Delegates.SetTarget_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorTarget), "SetTarget",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.SetTarget_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.SetAnimatorTarget), "SetTarget",
                    true), value);
        }
    }
}