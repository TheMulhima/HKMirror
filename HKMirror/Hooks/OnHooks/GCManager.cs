using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GCManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGCManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_IsSupported()
        {
            if (!HookedList.Contains("get_IsSupported"))
            {
                HookedList.Add("get_IsSupported");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GCManager), "get_IsSupported", false), get_IsSupported);
            }
        }

        internal static event Delegates.get_IsSupported_BeforeArgs _beforeget_IsSupported;
        internal static event Delegates.get_IsSupported_AfterArgs _afterget_IsSupported;

        private static bool get_IsSupported(Func<bool> orig)
        {
            if (_beforeget_IsSupported != null)
                foreach (Delegates.get_IsSupported_BeforeArgs toInvoke in _beforeget_IsSupported.GetInvocationList())
                    try
                    {
                        _beforeget_IsSupported?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_IsSupported != null)
                foreach (Delegates.get_IsSupported_AfterArgs toInvoke in _afterget_IsSupported.GetInvocationList())
                    try
                    {
                        retVal = _afterget_IsSupported.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_IsAutomaticCollectionEnabled()
        {
            if (!HookedList.Contains("get_IsAutomaticCollectionEnabled"))
            {
                HookedList.Add("get_IsAutomaticCollectionEnabled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GCManager), "get_IsAutomaticCollectionEnabled", false),
                    get_IsAutomaticCollectionEnabled);
            }
        }

        internal static event Delegates.get_IsAutomaticCollectionEnabled_BeforeArgs
            _beforeget_IsAutomaticCollectionEnabled;

        internal static event Delegates.get_IsAutomaticCollectionEnabled_AfterArgs
            _afterget_IsAutomaticCollectionEnabled;

        private static bool get_IsAutomaticCollectionEnabled(Func<bool> orig)
        {
            if (_beforeget_IsAutomaticCollectionEnabled != null)
                foreach (Delegates.get_IsAutomaticCollectionEnabled_BeforeArgs toInvoke in
                         _beforeget_IsAutomaticCollectionEnabled.GetInvocationList())
                    try
                    {
                        _beforeget_IsAutomaticCollectionEnabled?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_IsAutomaticCollectionEnabled != null)
                foreach (Delegates.get_IsAutomaticCollectionEnabled_AfterArgs toInvoke in
                         _afterget_IsAutomaticCollectionEnabled.GetInvocationList())
                    try
                    {
                        retVal = _afterget_IsAutomaticCollectionEnabled.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_IsAutomaticCollectionEnabled()
        {
            if (!HookedList.Contains("set_IsAutomaticCollectionEnabled"))
            {
                HookedList.Add("set_IsAutomaticCollectionEnabled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GCManager), "set_IsAutomaticCollectionEnabled", false),
                    set_IsAutomaticCollectionEnabled);
            }
        }

        internal static event Delegates.set_IsAutomaticCollectionEnabled_BeforeArgs
            _beforeset_IsAutomaticCollectionEnabled;

        internal static event Delegates.set_IsAutomaticCollectionEnabled_AfterArgs
            _afterset_IsAutomaticCollectionEnabled;

        private static void set_IsAutomaticCollectionEnabled(Action<bool> orig, bool value)
        {
            Delegates.Params_set_IsAutomaticCollectionEnabled @params = new()
            {
                value = value
            };
            if (_beforeset_IsAutomaticCollectionEnabled != null)
                foreach (Delegates.set_IsAutomaticCollectionEnabled_BeforeArgs toInvoke in
                         _beforeset_IsAutomaticCollectionEnabled.GetInvocationList())
                    try
                    {
                        _beforeset_IsAutomaticCollectionEnabled?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_IsAutomaticCollectionEnabled != null)
                foreach (Delegates.set_IsAutomaticCollectionEnabled_AfterArgs toInvoke in
                         _afterset_IsAutomaticCollectionEnabled.GetInvocationList())
                    try
                    {
                        _afterset_IsAutomaticCollectionEnabled.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCollect()
        {
            if (!HookedList.Contains("Collect"))
            {
                HookedList.Add("Collect");
                On.GCManager.Collect += Collect;
            }
        }

        internal static event Delegates.Collect_BeforeArgs _beforeCollect;
        internal static event Delegates.Collect_AfterArgs _afterCollect;

        private static void Collect(On.GCManager.orig_Collect orig)
        {
            if (_beforeCollect != null)
                foreach (Delegates.Collect_BeforeArgs toInvoke in _beforeCollect.GetInvocationList())
                    try
                    {
                        _beforeCollect?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterCollect != null)
                foreach (Delegates.Collect_AfterArgs toInvoke in _afterCollect.GetInvocationList())
                    try
                    {
                        _afterCollect.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookInit()
        {
            if (!HookedList.Contains("Init"))
            {
                HookedList.Add("Init");
                On.GCManager.Init += Init;
            }
        }

        internal static event Delegates.Init_BeforeArgs _beforeInit;
        internal static event Delegates.Init_AfterArgs _afterInit;

        private static void Init(On.GCManager.orig_Init orig)
        {
            if (_beforeInit != null)
                foreach (Delegates.Init_BeforeArgs toInvoke in _beforeInit.GetInvocationList())
                    try
                    {
                        _beforeInit?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterInit != null)
                foreach (Delegates.Init_AfterArgs toInvoke in _afterInit.GetInvocationList())
                    try
                    {
                        _afterInit.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetMemoryUsage()
        {
            if (!HookedList.Contains("GetMemoryUsage"))
            {
                HookedList.Add("GetMemoryUsage");
                On.GCManager.GetMemoryUsage += GetMemoryUsage;
            }
        }

        internal static event Delegates.GetMemoryUsage_BeforeArgs _beforeGetMemoryUsage;
        internal static event Delegates.GetMemoryUsage_AfterArgs _afterGetMemoryUsage;

        private static long GetMemoryUsage(On.GCManager.orig_GetMemoryUsage orig)
        {
            if (_beforeGetMemoryUsage != null)
                foreach (Delegates.GetMemoryUsage_BeforeArgs toInvoke in _beforeGetMemoryUsage.GetInvocationList())
                    try
                    {
                        _beforeGetMemoryUsage?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterGetMemoryUsage != null)
                foreach (Delegates.GetMemoryUsage_AfterArgs toInvoke in _afterGetMemoryUsage.GetInvocationList())
                    try
                    {
                        retVal = _afterGetMemoryUsage.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.GCManager.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.GCManager.orig_Update orig, GCManager self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Collect_AfterArgs();

        public delegate void Collect_BeforeArgs();

        public delegate void Collect_WithArgs(Action orig);

        public delegate bool get_IsAutomaticCollectionEnabled_AfterArgs(bool ret);

        public delegate void get_IsAutomaticCollectionEnabled_BeforeArgs();

        public delegate bool get_IsAutomaticCollectionEnabled_WithArgs(Func<bool> orig);

        public delegate bool get_IsSupported_AfterArgs(bool ret);

        public delegate void get_IsSupported_BeforeArgs();

        public delegate bool get_IsSupported_WithArgs(Func<bool> orig);

        public delegate long GetMemoryUsage_AfterArgs(long ret);

        public delegate void GetMemoryUsage_BeforeArgs();

        public delegate long GetMemoryUsage_WithArgs(Func<long> orig);

        public delegate void Init_AfterArgs();

        public delegate void Init_BeforeArgs();

        public delegate void Init_WithArgs(Action orig);

        public delegate void set_IsAutomaticCollectionEnabled_AfterArgs(Params_set_IsAutomaticCollectionEnabled args);

        public delegate void set_IsAutomaticCollectionEnabled_BeforeArgs(Params_set_IsAutomaticCollectionEnabled args);

        public delegate void set_IsAutomaticCollectionEnabled_WithArgs(Action<bool> orig, bool value);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<GCManager> orig, GCManager self);

        public sealed class Params_set_IsAutomaticCollectionEnabled
        {
            public bool value;
        }

        public sealed class Params_Update
        {
            public GCManager self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_IsSupported_BeforeArgs get_IsSupported
        {
            add
            {
                HookHandler._beforeget_IsSupported += value;
                HookHandler.Hookget_IsSupported();
            }
            remove => HookHandler._beforeget_IsSupported -= value;
        }

        public static event Delegates.get_IsAutomaticCollectionEnabled_BeforeArgs get_IsAutomaticCollectionEnabled
        {
            add
            {
                HookHandler._beforeget_IsAutomaticCollectionEnabled += value;
                HookHandler.Hookget_IsAutomaticCollectionEnabled();
            }
            remove => HookHandler._beforeget_IsAutomaticCollectionEnabled -= value;
        }

        public static event Delegates.set_IsAutomaticCollectionEnabled_BeforeArgs set_IsAutomaticCollectionEnabled
        {
            add
            {
                HookHandler._beforeset_IsAutomaticCollectionEnabled += value;
                HookHandler.Hookset_IsAutomaticCollectionEnabled();
            }
            remove => HookHandler._beforeset_IsAutomaticCollectionEnabled -= value;
        }

        public static event Delegates.Collect_BeforeArgs Collect
        {
            add
            {
                HookHandler._beforeCollect += value;
                HookHandler.HookCollect();
            }
            remove => HookHandler._beforeCollect -= value;
        }

        public static event Delegates.Init_BeforeArgs Init
        {
            add
            {
                HookHandler._beforeInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._beforeInit -= value;
        }

        public static event Delegates.GetMemoryUsage_BeforeArgs GetMemoryUsage
        {
            add
            {
                HookHandler._beforeGetMemoryUsage += value;
                HookHandler.HookGetMemoryUsage();
            }
            remove => HookHandler._beforeGetMemoryUsage -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_IsSupported_AfterArgs get_IsSupported
        {
            add
            {
                HookHandler._afterget_IsSupported += value;
                HookHandler.Hookget_IsSupported();
            }
            remove => HookHandler._afterget_IsSupported -= value;
        }

        public static event Delegates.get_IsAutomaticCollectionEnabled_AfterArgs get_IsAutomaticCollectionEnabled
        {
            add
            {
                HookHandler._afterget_IsAutomaticCollectionEnabled += value;
                HookHandler.Hookget_IsAutomaticCollectionEnabled();
            }
            remove => HookHandler._afterget_IsAutomaticCollectionEnabled -= value;
        }

        public static event Delegates.set_IsAutomaticCollectionEnabled_AfterArgs set_IsAutomaticCollectionEnabled
        {
            add
            {
                HookHandler._afterset_IsAutomaticCollectionEnabled += value;
                HookHandler.Hookset_IsAutomaticCollectionEnabled();
            }
            remove => HookHandler._afterset_IsAutomaticCollectionEnabled -= value;
        }

        public static event Delegates.Collect_AfterArgs Collect
        {
            add
            {
                HookHandler._afterCollect += value;
                HookHandler.HookCollect();
            }
            remove => HookHandler._afterCollect -= value;
        }

        public static event Delegates.Init_AfterArgs Init
        {
            add
            {
                HookHandler._afterInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._afterInit -= value;
        }

        public static event Delegates.GetMemoryUsage_AfterArgs GetMemoryUsage
        {
            add
            {
                HookHandler._afterGetMemoryUsage += value;
                HookHandler.HookGetMemoryUsage();
            }
            remove => HookHandler._afterGetMemoryUsage -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_IsSupported_WithArgs get_IsSupported
        {
            add => HookEndpointManager.Add<Delegates.get_IsSupported_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GCManager), "get_IsSupported", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsSupported_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GCManager), "get_IsSupported", false), value);
        }

        public static event Delegates.get_IsAutomaticCollectionEnabled_WithArgs get_IsAutomaticCollectionEnabled
        {
            add => HookEndpointManager.Add<Delegates.get_IsAutomaticCollectionEnabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GCManager), "get_IsAutomaticCollectionEnabled", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsAutomaticCollectionEnabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GCManager), "get_IsAutomaticCollectionEnabled", false), value);
        }

        public static event Delegates.set_IsAutomaticCollectionEnabled_WithArgs set_IsAutomaticCollectionEnabled
        {
            add => HookEndpointManager.Add<Delegates.set_IsAutomaticCollectionEnabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GCManager), "set_IsAutomaticCollectionEnabled", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_IsAutomaticCollectionEnabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GCManager), "set_IsAutomaticCollectionEnabled", false), value);
        }

        public static event On.GCManager.hook_Collect Collect
        {
            add => On.GCManager.Collect += value;
            remove => On.GCManager.Collect -= value;
        }

        public static event On.GCManager.hook_Init Init
        {
            add => On.GCManager.Init += value;
            remove => On.GCManager.Init -= value;
        }

        public static event On.GCManager.hook_GetMemoryUsage GetMemoryUsage
        {
            add => On.GCManager.GetMemoryUsage += value;
            remove => On.GCManager.GetMemoryUsage -= value;
        }

        public static event On.GCManager.hook_Update Update
        {
            add => On.GCManager.Update += value;
            remove => On.GCManager.Update -= value;
        }
    }
}