namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for InputModuleBinder class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnInputModuleBinder
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.InputModuleBinder.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.InputModuleBinder.orig_OnEnable orig, InputModuleBinder self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.InputModuleBinder.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.InputModuleBinder.orig_OnDisable orig, InputModuleBinder self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookOnAcceptRejectInputStyleChanged()
        {
            if (!HookedList.Contains("OnAcceptRejectInputStyleChanged"))
            {
                HookedList.Add("OnAcceptRejectInputStyleChanged");
                On.InputModuleBinder.OnAcceptRejectInputStyleChanged += OnAcceptRejectInputStyleChanged;
            }
        }

        internal static event Delegates.OnAcceptRejectInputStyleChanged_BeforeArgs
            _beforeOnAcceptRejectInputStyleChanged;

        internal static event Delegates.OnAcceptRejectInputStyleChanged_NormalArgs
            _afterOnAcceptRejectInputStyleChanged;

        private static void OnAcceptRejectInputStyleChanged(
            On.InputModuleBinder.orig_OnAcceptRejectInputStyleChanged orig, InputModuleBinder self)
        {
            Delegates.Params_OnAcceptRejectInputStyleChanged @params = new()
            {
                self = self
            };
            _beforeOnAcceptRejectInputStyleChanged?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnAcceptRejectInputStyleChanged != null) _afterOnAcceptRejectInputStyleChanged.Invoke(@params);
        }

        internal static void HookBindAndApplyActions()
        {
            if (!HookedList.Contains("BindAndApplyActions"))
            {
                HookedList.Add("BindAndApplyActions");
                On.InputModuleBinder.BindAndApplyActions += BindAndApplyActions;
            }
        }

        internal static event Delegates.BindAndApplyActions_BeforeArgs _beforeBindAndApplyActions;
        internal static event Delegates.BindAndApplyActions_NormalArgs _afterBindAndApplyActions;

        private static void BindAndApplyActions(On.InputModuleBinder.orig_BindAndApplyActions orig,
            InputModuleBinder self)
        {
            Delegates.Params_BindAndApplyActions @params = new()
            {
                self = self
            };
            _beforeBindAndApplyActions?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBindAndApplyActions != null) _afterBindAndApplyActions.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void BindAndApplyActions_BeforeArgs(Params_BindAndApplyActions args);

        public delegate void BindAndApplyActions_NormalArgs(Params_BindAndApplyActions args);

        public delegate void OnAcceptRejectInputStyleChanged_BeforeArgs(Params_OnAcceptRejectInputStyleChanged args);

        public delegate void OnAcceptRejectInputStyleChanged_NormalArgs(Params_OnAcceptRejectInputStyleChanged args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public sealed class Params_OnEnable
        {
            public InputModuleBinder self;
        }

        public sealed class Params_OnDisable
        {
            public InputModuleBinder self;
        }

        public sealed class Params_OnAcceptRejectInputStyleChanged
        {
            public InputModuleBinder self;
        }

        public sealed class Params_BindAndApplyActions
        {
            public InputModuleBinder self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.OnAcceptRejectInputStyleChanged_BeforeArgs OnAcceptRejectInputStyleChanged
        {
            add
            {
                HookHandler._beforeOnAcceptRejectInputStyleChanged += value;
                HookHandler.HookOnAcceptRejectInputStyleChanged();
            }
            remove => HookHandler._beforeOnAcceptRejectInputStyleChanged -= value;
        }

        public static event Delegates.BindAndApplyActions_BeforeArgs BindAndApplyActions
        {
            add
            {
                HookHandler._beforeBindAndApplyActions += value;
                HookHandler.HookBindAndApplyActions();
            }
            remove => HookHandler._beforeBindAndApplyActions -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.OnAcceptRejectInputStyleChanged_NormalArgs OnAcceptRejectInputStyleChanged
        {
            add
            {
                HookHandler._afterOnAcceptRejectInputStyleChanged += value;
                HookHandler.HookOnAcceptRejectInputStyleChanged();
            }
            remove => HookHandler._afterOnAcceptRejectInputStyleChanged -= value;
        }

        public static event Delegates.BindAndApplyActions_NormalArgs BindAndApplyActions
        {
            add
            {
                HookHandler._afterBindAndApplyActions += value;
                HookHandler.HookBindAndApplyActions();
            }
            remove => HookHandler._afterBindAndApplyActions -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.InputModuleBinder.hook_OnEnable OnEnable
        {
            add => On.InputModuleBinder.OnEnable += value;
            remove => On.InputModuleBinder.OnEnable -= value;
        }

        public static event On.InputModuleBinder.hook_OnDisable OnDisable
        {
            add => On.InputModuleBinder.OnDisable += value;
            remove => On.InputModuleBinder.OnDisable -= value;
        }

        public static event On.InputModuleBinder.hook_OnAcceptRejectInputStyleChanged OnAcceptRejectInputStyleChanged
        {
            add => On.InputModuleBinder.OnAcceptRejectInputStyleChanged += value;
            remove => On.InputModuleBinder.OnAcceptRejectInputStyleChanged -= value;
        }

        public static event On.InputModuleBinder.hook_BindAndApplyActions BindAndApplyActions
        {
            add => On.InputModuleBinder.BindAndApplyActions += value;
            remove => On.InputModuleBinder.BindAndApplyActions -= value;
        }
    }
}