namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for CharmVibrations class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCharmVibrations
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookPlayRegularPlace()
        {
            if (!HookedList.Contains("PlayRegularPlace"))
            {
                HookedList.Add("PlayRegularPlace");
                On.CharmVibrations.PlayRegularPlace += PlayRegularPlace;
            }
        }

        internal static event Delegates.PlayRegularPlace_BeforeArgs _beforePlayRegularPlace;
        internal static event Delegates.PlayRegularPlace_NormalArgs _afterPlayRegularPlace;

        private static void PlayRegularPlace(On.CharmVibrations.orig_PlayRegularPlace orig, CharmVibrations self)
        {
            Delegates.Params_PlayRegularPlace @params = new()
            {
                self = self
            };
            _beforePlayRegularPlace?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPlayRegularPlace != null) _afterPlayRegularPlace.Invoke(@params);
        }

        internal static void HookPlayFailedPlace()
        {
            if (!HookedList.Contains("PlayFailedPlace"))
            {
                HookedList.Add("PlayFailedPlace");
                On.CharmVibrations.PlayFailedPlace += PlayFailedPlace;
            }
        }

        internal static event Delegates.PlayFailedPlace_BeforeArgs _beforePlayFailedPlace;
        internal static event Delegates.PlayFailedPlace_NormalArgs _afterPlayFailedPlace;

        private static void PlayFailedPlace(On.CharmVibrations.orig_PlayFailedPlace orig, CharmVibrations self)
        {
            Delegates.Params_PlayFailedPlace @params = new()
            {
                self = self
            };
            _beforePlayFailedPlace?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPlayFailedPlace != null) _afterPlayFailedPlace.Invoke(@params);
        }

        internal static void HookPlayOvercharmPlace()
        {
            if (!HookedList.Contains("PlayOvercharmPlace"))
            {
                HookedList.Add("PlayOvercharmPlace");
                On.CharmVibrations.PlayOvercharmPlace += PlayOvercharmPlace;
            }
        }

        internal static event Delegates.PlayOvercharmPlace_BeforeArgs _beforePlayOvercharmPlace;
        internal static event Delegates.PlayOvercharmPlace_NormalArgs _afterPlayOvercharmPlace;

        private static void PlayOvercharmPlace(On.CharmVibrations.orig_PlayOvercharmPlace orig, CharmVibrations self)
        {
            Delegates.Params_PlayOvercharmPlace @params = new()
            {
                self = self
            };
            _beforePlayOvercharmPlace?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPlayOvercharmPlace != null) _afterPlayOvercharmPlace.Invoke(@params);
        }

        internal static void HookPlayOvercharmHit()
        {
            if (!HookedList.Contains("PlayOvercharmHit"))
            {
                HookedList.Add("PlayOvercharmHit");
                On.CharmVibrations.PlayOvercharmHit += PlayOvercharmHit;
            }
        }

        internal static event Delegates.PlayOvercharmHit_BeforeArgs _beforePlayOvercharmHit;
        internal static event Delegates.PlayOvercharmHit_NormalArgs _afterPlayOvercharmHit;

        private static void PlayOvercharmHit(On.CharmVibrations.orig_PlayOvercharmHit orig, CharmVibrations self)
        {
            Delegates.Params_PlayOvercharmHit @params = new()
            {
                self = self
            };
            _beforePlayOvercharmHit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPlayOvercharmHit != null) _afterPlayOvercharmHit.Invoke(@params);
        }

        internal static void HookPlayOvercharmFinalHit()
        {
            if (!HookedList.Contains("PlayOvercharmFinalHit"))
            {
                HookedList.Add("PlayOvercharmFinalHit");
                On.CharmVibrations.PlayOvercharmFinalHit += PlayOvercharmFinalHit;
            }
        }

        internal static event Delegates.PlayOvercharmFinalHit_BeforeArgs _beforePlayOvercharmFinalHit;
        internal static event Delegates.PlayOvercharmFinalHit_NormalArgs _afterPlayOvercharmFinalHit;

        private static void PlayOvercharmFinalHit(On.CharmVibrations.orig_PlayOvercharmFinalHit orig,
            CharmVibrations self)
        {
            Delegates.Params_PlayOvercharmFinalHit @params = new()
            {
                self = self
            };
            _beforePlayOvercharmFinalHit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPlayOvercharmFinalHit != null) _afterPlayOvercharmFinalHit.Invoke(@params);
        }

        internal static void HookPlayDelayedVibration()
        {
            if (!HookedList.Contains("PlayDelayedVibration"))
            {
                HookedList.Add("PlayDelayedVibration");
                On.CharmVibrations.PlayDelayedVibration += PlayDelayedVibration;
            }
        }

        internal static event Delegates.PlayDelayedVibration_BeforeArgs _beforePlayDelayedVibration;
        internal static event Delegates.PlayDelayedVibration_NormalArgs _afterPlayDelayedVibration;

        private static void PlayDelayedVibration(On.CharmVibrations.orig_PlayDelayedVibration orig,
            CharmVibrations self, VibrationData vibrationData)
        {
            Delegates.Params_PlayDelayedVibration @params = new()
            {
                self = self, vibrationData = vibrationData
            };
            _beforePlayDelayedVibration?.Invoke(@params);
            self = @params.self;
            vibrationData = @params.vibrationData;
            orig(self, vibrationData);
            if (_afterPlayDelayedVibration != null) _afterPlayDelayedVibration.Invoke(@params);
        }

        internal static void HookPlayDelayedVibrationRoutine()
        {
            if (!HookedList.Contains("PlayDelayedVibrationRoutine"))
            {
                HookedList.Add("PlayDelayedVibrationRoutine");
                On.CharmVibrations.PlayDelayedVibrationRoutine += PlayDelayedVibrationRoutine;
            }
        }

        internal static event Delegates.PlayDelayedVibrationRoutine_BeforeArgs _beforePlayDelayedVibrationRoutine;

        private static IEnumerator PlayDelayedVibrationRoutine(On.CharmVibrations.orig_PlayDelayedVibrationRoutine orig,
            CharmVibrations self, VibrationData vibrationData)
        {
            Delegates.Params_PlayDelayedVibrationRoutine @params = new()
            {
                self = self, vibrationData = vibrationData
            };
            _beforePlayDelayedVibrationRoutine?.Invoke(@params);
            self = @params.self;
            vibrationData = @params.vibrationData;
            return orig(self, vibrationData);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void PlayDelayedVibration_BeforeArgs(Params_PlayDelayedVibration args);

        public delegate void PlayDelayedVibration_NormalArgs(Params_PlayDelayedVibration args);

        public delegate void PlayDelayedVibrationRoutine_BeforeArgs(Params_PlayDelayedVibrationRoutine args);

        public delegate IEnumerator PlayDelayedVibrationRoutine_NormalArgs(Params_PlayDelayedVibrationRoutine args);

        public delegate void PlayFailedPlace_BeforeArgs(Params_PlayFailedPlace args);

        public delegate void PlayFailedPlace_NormalArgs(Params_PlayFailedPlace args);

        public delegate void PlayOvercharmFinalHit_BeforeArgs(Params_PlayOvercharmFinalHit args);

        public delegate void PlayOvercharmFinalHit_NormalArgs(Params_PlayOvercharmFinalHit args);

        public delegate void PlayOvercharmHit_BeforeArgs(Params_PlayOvercharmHit args);

        public delegate void PlayOvercharmHit_NormalArgs(Params_PlayOvercharmHit args);

        public delegate void PlayOvercharmPlace_BeforeArgs(Params_PlayOvercharmPlace args);

        public delegate void PlayOvercharmPlace_NormalArgs(Params_PlayOvercharmPlace args);

        public delegate void PlayRegularPlace_BeforeArgs(Params_PlayRegularPlace args);

        public delegate void PlayRegularPlace_NormalArgs(Params_PlayRegularPlace args);

        public sealed class Params_PlayRegularPlace
        {
            public CharmVibrations self;
        }

        public sealed class Params_PlayFailedPlace
        {
            public CharmVibrations self;
        }

        public sealed class Params_PlayOvercharmPlace
        {
            public CharmVibrations self;
        }

        public sealed class Params_PlayOvercharmHit
        {
            public CharmVibrations self;
        }

        public sealed class Params_PlayOvercharmFinalHit
        {
            public CharmVibrations self;
        }

        public sealed class Params_PlayDelayedVibration
        {
            public CharmVibrations self;
            public VibrationData vibrationData;
        }

        public sealed class Params_PlayDelayedVibrationRoutine
        {
            public CharmVibrations self;
            public VibrationData vibrationData;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.PlayRegularPlace_BeforeArgs PlayRegularPlace
        {
            add
            {
                HookHandler._beforePlayRegularPlace += value;
                HookHandler.HookPlayRegularPlace();
            }
            remove => HookHandler._beforePlayRegularPlace -= value;
        }

        public static event Delegates.PlayFailedPlace_BeforeArgs PlayFailedPlace
        {
            add
            {
                HookHandler._beforePlayFailedPlace += value;
                HookHandler.HookPlayFailedPlace();
            }
            remove => HookHandler._beforePlayFailedPlace -= value;
        }

        public static event Delegates.PlayOvercharmPlace_BeforeArgs PlayOvercharmPlace
        {
            add
            {
                HookHandler._beforePlayOvercharmPlace += value;
                HookHandler.HookPlayOvercharmPlace();
            }
            remove => HookHandler._beforePlayOvercharmPlace -= value;
        }

        public static event Delegates.PlayOvercharmHit_BeforeArgs PlayOvercharmHit
        {
            add
            {
                HookHandler._beforePlayOvercharmHit += value;
                HookHandler.HookPlayOvercharmHit();
            }
            remove => HookHandler._beforePlayOvercharmHit -= value;
        }

        public static event Delegates.PlayOvercharmFinalHit_BeforeArgs PlayOvercharmFinalHit
        {
            add
            {
                HookHandler._beforePlayOvercharmFinalHit += value;
                HookHandler.HookPlayOvercharmFinalHit();
            }
            remove => HookHandler._beforePlayOvercharmFinalHit -= value;
        }

        public static event Delegates.PlayDelayedVibration_BeforeArgs PlayDelayedVibration
        {
            add
            {
                HookHandler._beforePlayDelayedVibration += value;
                HookHandler.HookPlayDelayedVibration();
            }
            remove => HookHandler._beforePlayDelayedVibration -= value;
        }

        public static event Delegates.PlayDelayedVibrationRoutine_BeforeArgs PlayDelayedVibrationRoutine
        {
            add
            {
                HookHandler._beforePlayDelayedVibrationRoutine += value;
                HookHandler.HookPlayDelayedVibrationRoutine();
            }
            remove => HookHandler._beforePlayDelayedVibrationRoutine -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.PlayRegularPlace_NormalArgs PlayRegularPlace
        {
            add
            {
                HookHandler._afterPlayRegularPlace += value;
                HookHandler.HookPlayRegularPlace();
            }
            remove => HookHandler._afterPlayRegularPlace -= value;
        }

        public static event Delegates.PlayFailedPlace_NormalArgs PlayFailedPlace
        {
            add
            {
                HookHandler._afterPlayFailedPlace += value;
                HookHandler.HookPlayFailedPlace();
            }
            remove => HookHandler._afterPlayFailedPlace -= value;
        }

        public static event Delegates.PlayOvercharmPlace_NormalArgs PlayOvercharmPlace
        {
            add
            {
                HookHandler._afterPlayOvercharmPlace += value;
                HookHandler.HookPlayOvercharmPlace();
            }
            remove => HookHandler._afterPlayOvercharmPlace -= value;
        }

        public static event Delegates.PlayOvercharmHit_NormalArgs PlayOvercharmHit
        {
            add
            {
                HookHandler._afterPlayOvercharmHit += value;
                HookHandler.HookPlayOvercharmHit();
            }
            remove => HookHandler._afterPlayOvercharmHit -= value;
        }

        public static event Delegates.PlayOvercharmFinalHit_NormalArgs PlayOvercharmFinalHit
        {
            add
            {
                HookHandler._afterPlayOvercharmFinalHit += value;
                HookHandler.HookPlayOvercharmFinalHit();
            }
            remove => HookHandler._afterPlayOvercharmFinalHit -= value;
        }

        public static event Delegates.PlayDelayedVibration_NormalArgs PlayDelayedVibration
        {
            add
            {
                HookHandler._afterPlayDelayedVibration += value;
                HookHandler.HookPlayDelayedVibration();
            }
            remove => HookHandler._afterPlayDelayedVibration -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.CharmVibrations.hook_PlayRegularPlace PlayRegularPlace
        {
            add => On.CharmVibrations.PlayRegularPlace += value;
            remove => On.CharmVibrations.PlayRegularPlace -= value;
        }

        public static event On.CharmVibrations.hook_PlayFailedPlace PlayFailedPlace
        {
            add => On.CharmVibrations.PlayFailedPlace += value;
            remove => On.CharmVibrations.PlayFailedPlace -= value;
        }

        public static event On.CharmVibrations.hook_PlayOvercharmPlace PlayOvercharmPlace
        {
            add => On.CharmVibrations.PlayOvercharmPlace += value;
            remove => On.CharmVibrations.PlayOvercharmPlace -= value;
        }

        public static event On.CharmVibrations.hook_PlayOvercharmHit PlayOvercharmHit
        {
            add => On.CharmVibrations.PlayOvercharmHit += value;
            remove => On.CharmVibrations.PlayOvercharmHit -= value;
        }

        public static event On.CharmVibrations.hook_PlayOvercharmFinalHit PlayOvercharmFinalHit
        {
            add => On.CharmVibrations.PlayOvercharmFinalHit += value;
            remove => On.CharmVibrations.PlayOvercharmFinalHit -= value;
        }

        public static event On.CharmVibrations.hook_PlayDelayedVibration PlayDelayedVibration
        {
            add => On.CharmVibrations.PlayDelayedVibration += value;
            remove => On.CharmVibrations.PlayDelayedVibration -= value;
        }

        public static event On.CharmVibrations.hook_PlayDelayedVibrationRoutine PlayDelayedVibrationRoutine
        {
            add => On.CharmVibrations.PlayDelayedVibrationRoutine += value;
            remove => On.CharmVibrations.PlayDelayedVibrationRoutine -= value;
        }
    }
}