using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for CharmVibrations class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCharmVibrations
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookPlayRegularPlace()
{
if (!HookedList.Contains("PlayRegularPlace"))
{
HookedList.Add("PlayRegularPlace");
On.CharmVibrations.PlayRegularPlace += PlayRegularPlace;

}
}
internal static event Delegates.PlayRegularPlace_BeforeArgs _beforePlayRegularPlace;
internal static event Delegates.PlayRegularPlace_AfterArgs _afterPlayRegularPlace;
private static void PlayRegularPlace(On.CharmVibrations.orig_PlayRegularPlace orig,CharmVibrations self)
{
Delegates.Params_PlayRegularPlace @params = new() 
{
self = self
};
if (_beforePlayRegularPlace != null)
{
foreach (Delegates.PlayRegularPlace_BeforeArgs toInvoke in _beforePlayRegularPlace.GetInvocationList())
{
try
{
_beforePlayRegularPlace?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterPlayRegularPlace != null)
{
foreach (Delegates.PlayRegularPlace_AfterArgs toInvoke in _afterPlayRegularPlace.GetInvocationList())
{
try
{
_afterPlayRegularPlace.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookPlayFailedPlace()
{
if (!HookedList.Contains("PlayFailedPlace"))
{
HookedList.Add("PlayFailedPlace");
On.CharmVibrations.PlayFailedPlace += PlayFailedPlace;

}
}
internal static event Delegates.PlayFailedPlace_BeforeArgs _beforePlayFailedPlace;
internal static event Delegates.PlayFailedPlace_AfterArgs _afterPlayFailedPlace;
private static void PlayFailedPlace(On.CharmVibrations.orig_PlayFailedPlace orig,CharmVibrations self)
{
Delegates.Params_PlayFailedPlace @params = new() 
{
self = self
};
if (_beforePlayFailedPlace != null)
{
foreach (Delegates.PlayFailedPlace_BeforeArgs toInvoke in _beforePlayFailedPlace.GetInvocationList())
{
try
{
_beforePlayFailedPlace?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterPlayFailedPlace != null)
{
foreach (Delegates.PlayFailedPlace_AfterArgs toInvoke in _afterPlayFailedPlace.GetInvocationList())
{
try
{
_afterPlayFailedPlace.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookPlayOvercharmPlace()
{
if (!HookedList.Contains("PlayOvercharmPlace"))
{
HookedList.Add("PlayOvercharmPlace");
On.CharmVibrations.PlayOvercharmPlace += PlayOvercharmPlace;

}
}
internal static event Delegates.PlayOvercharmPlace_BeforeArgs _beforePlayOvercharmPlace;
internal static event Delegates.PlayOvercharmPlace_AfterArgs _afterPlayOvercharmPlace;
private static void PlayOvercharmPlace(On.CharmVibrations.orig_PlayOvercharmPlace orig,CharmVibrations self)
{
Delegates.Params_PlayOvercharmPlace @params = new() 
{
self = self
};
if (_beforePlayOvercharmPlace != null)
{
foreach (Delegates.PlayOvercharmPlace_BeforeArgs toInvoke in _beforePlayOvercharmPlace.GetInvocationList())
{
try
{
_beforePlayOvercharmPlace?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterPlayOvercharmPlace != null)
{
foreach (Delegates.PlayOvercharmPlace_AfterArgs toInvoke in _afterPlayOvercharmPlace.GetInvocationList())
{
try
{
_afterPlayOvercharmPlace.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookPlayOvercharmHit()
{
if (!HookedList.Contains("PlayOvercharmHit"))
{
HookedList.Add("PlayOvercharmHit");
On.CharmVibrations.PlayOvercharmHit += PlayOvercharmHit;

}
}
internal static event Delegates.PlayOvercharmHit_BeforeArgs _beforePlayOvercharmHit;
internal static event Delegates.PlayOvercharmHit_AfterArgs _afterPlayOvercharmHit;
private static void PlayOvercharmHit(On.CharmVibrations.orig_PlayOvercharmHit orig,CharmVibrations self)
{
Delegates.Params_PlayOvercharmHit @params = new() 
{
self = self
};
if (_beforePlayOvercharmHit != null)
{
foreach (Delegates.PlayOvercharmHit_BeforeArgs toInvoke in _beforePlayOvercharmHit.GetInvocationList())
{
try
{
_beforePlayOvercharmHit?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterPlayOvercharmHit != null)
{
foreach (Delegates.PlayOvercharmHit_AfterArgs toInvoke in _afterPlayOvercharmHit.GetInvocationList())
{
try
{
_afterPlayOvercharmHit.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookPlayOvercharmFinalHit()
{
if (!HookedList.Contains("PlayOvercharmFinalHit"))
{
HookedList.Add("PlayOvercharmFinalHit");
On.CharmVibrations.PlayOvercharmFinalHit += PlayOvercharmFinalHit;

}
}
internal static event Delegates.PlayOvercharmFinalHit_BeforeArgs _beforePlayOvercharmFinalHit;
internal static event Delegates.PlayOvercharmFinalHit_AfterArgs _afterPlayOvercharmFinalHit;
private static void PlayOvercharmFinalHit(On.CharmVibrations.orig_PlayOvercharmFinalHit orig,CharmVibrations self)
{
Delegates.Params_PlayOvercharmFinalHit @params = new() 
{
self = self
};
if (_beforePlayOvercharmFinalHit != null)
{
foreach (Delegates.PlayOvercharmFinalHit_BeforeArgs toInvoke in _beforePlayOvercharmFinalHit.GetInvocationList())
{
try
{
_beforePlayOvercharmFinalHit?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterPlayOvercharmFinalHit != null)
{
foreach (Delegates.PlayOvercharmFinalHit_AfterArgs toInvoke in _afterPlayOvercharmFinalHit.GetInvocationList())
{
try
{
_afterPlayOvercharmFinalHit.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookPlayDelayedVibration()
{
if (!HookedList.Contains("PlayDelayedVibration"))
{
HookedList.Add("PlayDelayedVibration");
On.CharmVibrations.PlayDelayedVibration += PlayDelayedVibration;

}
}
internal static event Delegates.PlayDelayedVibration_BeforeArgs _beforePlayDelayedVibration;
internal static event Delegates.PlayDelayedVibration_AfterArgs _afterPlayDelayedVibration;
private static void PlayDelayedVibration(On.CharmVibrations.orig_PlayDelayedVibration orig,CharmVibrations self,  VibrationData vibrationData)
{
Delegates.Params_PlayDelayedVibration @params = new() 
{
self = self
, vibrationData = vibrationData
};
if (_beforePlayDelayedVibration != null)
{
foreach (Delegates.PlayDelayedVibration_BeforeArgs toInvoke in _beforePlayDelayedVibration.GetInvocationList())
{
try
{
_beforePlayDelayedVibration?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
vibrationData = @params.vibrationData;
orig(self, vibrationData);
if (_afterPlayDelayedVibration != null)
{
foreach (Delegates.PlayDelayedVibration_AfterArgs toInvoke in _afterPlayDelayedVibration.GetInvocationList())
{
try
{
_afterPlayDelayedVibration.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookPlayDelayedVibrationRoutine()
{
if (!HookedList.Contains("PlayDelayedVibrationRoutine"))
{
HookedList.Add("PlayDelayedVibrationRoutine");
On.CharmVibrations.PlayDelayedVibrationRoutine += PlayDelayedVibrationRoutine;

}
}
internal static event Delegates.PlayDelayedVibrationRoutine_BeforeArgs _beforePlayDelayedVibrationRoutine;
private static System.Collections.IEnumerator PlayDelayedVibrationRoutine(On.CharmVibrations.orig_PlayDelayedVibrationRoutine orig,CharmVibrations self,  VibrationData vibrationData)
{
Delegates.Params_PlayDelayedVibrationRoutine @params = new() 
{
self = self
, vibrationData = vibrationData
};
if (_beforePlayDelayedVibrationRoutine != null)
{
foreach (Delegates.PlayDelayedVibrationRoutine_BeforeArgs toInvoke in _beforePlayDelayedVibrationRoutine.GetInvocationList())
{
try
{
_beforePlayDelayedVibrationRoutine?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
vibrationData = @params.vibrationData;
return orig(self, vibrationData);
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_PlayRegularPlace
{
public CharmVibrations self;
}
public delegate void PlayRegularPlace_BeforeArgs(Params_PlayRegularPlace args);
public delegate void PlayRegularPlace_AfterArgs(Params_PlayRegularPlace args);
public delegate void PlayRegularPlace_WithArgs (Action<CharmVibrations> orig, CharmVibrations self);
public sealed class Params_PlayFailedPlace
{
public CharmVibrations self;
}
public delegate void PlayFailedPlace_BeforeArgs(Params_PlayFailedPlace args);
public delegate void PlayFailedPlace_AfterArgs(Params_PlayFailedPlace args);
public delegate void PlayFailedPlace_WithArgs (Action<CharmVibrations> orig, CharmVibrations self);
public sealed class Params_PlayOvercharmPlace
{
public CharmVibrations self;
}
public delegate void PlayOvercharmPlace_BeforeArgs(Params_PlayOvercharmPlace args);
public delegate void PlayOvercharmPlace_AfterArgs(Params_PlayOvercharmPlace args);
public delegate void PlayOvercharmPlace_WithArgs (Action<CharmVibrations> orig, CharmVibrations self);
public sealed class Params_PlayOvercharmHit
{
public CharmVibrations self;
}
public delegate void PlayOvercharmHit_BeforeArgs(Params_PlayOvercharmHit args);
public delegate void PlayOvercharmHit_AfterArgs(Params_PlayOvercharmHit args);
public delegate void PlayOvercharmHit_WithArgs (Action<CharmVibrations> orig, CharmVibrations self);
public sealed class Params_PlayOvercharmFinalHit
{
public CharmVibrations self;
}
public delegate void PlayOvercharmFinalHit_BeforeArgs(Params_PlayOvercharmFinalHit args);
public delegate void PlayOvercharmFinalHit_AfterArgs(Params_PlayOvercharmFinalHit args);
public delegate void PlayOvercharmFinalHit_WithArgs (Action<CharmVibrations> orig, CharmVibrations self);
public sealed class Params_PlayDelayedVibration
{
public CharmVibrations self;
public VibrationData vibrationData;
}
public delegate void PlayDelayedVibration_BeforeArgs(Params_PlayDelayedVibration args);
public delegate void PlayDelayedVibration_AfterArgs(Params_PlayDelayedVibration args);
public delegate void PlayDelayedVibration_WithArgs (Action<CharmVibrations,  VibrationData> orig, CharmVibrations self,  VibrationData vibrationData);
public sealed class Params_PlayDelayedVibrationRoutine
{
public CharmVibrations self;
public VibrationData vibrationData;
}
public delegate void PlayDelayedVibrationRoutine_BeforeArgs(Params_PlayDelayedVibrationRoutine args);
public delegate System.Collections.IEnumerator PlayDelayedVibrationRoutine_AfterArgs(Params_PlayDelayedVibrationRoutine args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator PlayDelayedVibrationRoutine_WithArgs (Func<CharmVibrations,  VibrationData, System.Collections.IEnumerator> orig, CharmVibrations self,  VibrationData vibrationData);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.PlayRegularPlace_BeforeArgs PlayRegularPlace
{
add
{

HookHandler._beforePlayRegularPlace += value;
HookHandler.HookPlayRegularPlace();
}
remove => HookHandler._beforePlayRegularPlace -= value;
}
public static event Delegates.PlayFailedPlace_BeforeArgs PlayFailedPlace
{
add
{

HookHandler._beforePlayFailedPlace += value;
HookHandler.HookPlayFailedPlace();
}
remove => HookHandler._beforePlayFailedPlace -= value;
}
public static event Delegates.PlayOvercharmPlace_BeforeArgs PlayOvercharmPlace
{
add
{

HookHandler._beforePlayOvercharmPlace += value;
HookHandler.HookPlayOvercharmPlace();
}
remove => HookHandler._beforePlayOvercharmPlace -= value;
}
public static event Delegates.PlayOvercharmHit_BeforeArgs PlayOvercharmHit
{
add
{

HookHandler._beforePlayOvercharmHit += value;
HookHandler.HookPlayOvercharmHit();
}
remove => HookHandler._beforePlayOvercharmHit -= value;
}
public static event Delegates.PlayOvercharmFinalHit_BeforeArgs PlayOvercharmFinalHit
{
add
{

HookHandler._beforePlayOvercharmFinalHit += value;
HookHandler.HookPlayOvercharmFinalHit();
}
remove => HookHandler._beforePlayOvercharmFinalHit -= value;
}
public static event Delegates.PlayDelayedVibration_BeforeArgs PlayDelayedVibration
{
add
{

HookHandler._beforePlayDelayedVibration += value;
HookHandler.HookPlayDelayedVibration();
}
remove => HookHandler._beforePlayDelayedVibration -= value;
}
public static event Delegates.PlayDelayedVibrationRoutine_BeforeArgs PlayDelayedVibrationRoutine
{
add
{

HookHandler._beforePlayDelayedVibrationRoutine += value;
HookHandler.HookPlayDelayedVibrationRoutine();
}
remove => HookHandler._beforePlayDelayedVibrationRoutine -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.PlayRegularPlace_AfterArgs PlayRegularPlace
{
add
{

HookHandler._afterPlayRegularPlace += value;
HookHandler.HookPlayRegularPlace();
}
remove => HookHandler._afterPlayRegularPlace -= value;
}
public static event Delegates.PlayFailedPlace_AfterArgs PlayFailedPlace
{
add
{

HookHandler._afterPlayFailedPlace += value;
HookHandler.HookPlayFailedPlace();
}
remove => HookHandler._afterPlayFailedPlace -= value;
}
public static event Delegates.PlayOvercharmPlace_AfterArgs PlayOvercharmPlace
{
add
{

HookHandler._afterPlayOvercharmPlace += value;
HookHandler.HookPlayOvercharmPlace();
}
remove => HookHandler._afterPlayOvercharmPlace -= value;
}
public static event Delegates.PlayOvercharmHit_AfterArgs PlayOvercharmHit
{
add
{

HookHandler._afterPlayOvercharmHit += value;
HookHandler.HookPlayOvercharmHit();
}
remove => HookHandler._afterPlayOvercharmHit -= value;
}
public static event Delegates.PlayOvercharmFinalHit_AfterArgs PlayOvercharmFinalHit
{
add
{

HookHandler._afterPlayOvercharmFinalHit += value;
HookHandler.HookPlayOvercharmFinalHit();
}
remove => HookHandler._afterPlayOvercharmFinalHit -= value;
}
public static event Delegates.PlayDelayedVibration_AfterArgs PlayDelayedVibration
{
add
{

HookHandler._afterPlayDelayedVibration += value;
HookHandler.HookPlayDelayedVibration();
}
remove => HookHandler._afterPlayDelayedVibration -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.CharmVibrations.hook_PlayRegularPlace PlayRegularPlace
{
add => On.CharmVibrations.PlayRegularPlace += value;
remove => On.CharmVibrations.PlayRegularPlace -= value;
}
public static event On.CharmVibrations.hook_PlayFailedPlace PlayFailedPlace
{
add => On.CharmVibrations.PlayFailedPlace += value;
remove => On.CharmVibrations.PlayFailedPlace -= value;
}
public static event On.CharmVibrations.hook_PlayOvercharmPlace PlayOvercharmPlace
{
add => On.CharmVibrations.PlayOvercharmPlace += value;
remove => On.CharmVibrations.PlayOvercharmPlace -= value;
}
public static event On.CharmVibrations.hook_PlayOvercharmHit PlayOvercharmHit
{
add => On.CharmVibrations.PlayOvercharmHit += value;
remove => On.CharmVibrations.PlayOvercharmHit -= value;
}
public static event On.CharmVibrations.hook_PlayOvercharmFinalHit PlayOvercharmFinalHit
{
add => On.CharmVibrations.PlayOvercharmFinalHit += value;
remove => On.CharmVibrations.PlayOvercharmFinalHit -= value;
}
public static event On.CharmVibrations.hook_PlayDelayedVibration PlayDelayedVibration
{
add => On.CharmVibrations.PlayDelayedVibration += value;
remove => On.CharmVibrations.PlayDelayedVibration -= value;
}
public static event On.CharmVibrations.hook_PlayDelayedVibrationRoutine PlayDelayedVibrationRoutine
{
add => On.CharmVibrations.PlayDelayedVibrationRoutine += value;
remove => On.CharmVibrations.PlayDelayedVibrationRoutine -= value;
}
}

}
