using UnityEngine.EventSystems;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for UIWindowBase class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnUIWindowBase
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.UIWindowBase.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.UIWindowBase.orig_Start orig, UIWindowBase self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnDrag()
        {
            if (!HookedList.Contains("OnDrag"))
            {
                HookedList.Add("OnDrag");
                On.UIWindowBase.OnDrag += OnDrag;
            }
        }

        internal static event Delegates.OnDrag_BeforeArgs _beforeOnDrag;
        internal static event Delegates.OnDrag_AfterArgs _afterOnDrag;

        private static void OnDrag(On.UIWindowBase.orig_OnDrag orig, UIWindowBase self, PointerEventData eventData)
        {
            Delegates.Params_OnDrag @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnDrag != null)
                foreach (Delegates.OnDrag_BeforeArgs toInvoke in _beforeOnDrag.GetInvocationList())
                    try
                    {
                        _beforeOnDrag?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnDrag != null)
                foreach (Delegates.OnDrag_AfterArgs toInvoke in _afterOnDrag.GetInvocationList())
                    try
                    {
                        _afterOnDrag.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookChangeStrength()
        {
            if (!HookedList.Contains("ChangeStrength"))
            {
                HookedList.Add("ChangeStrength");
                On.UIWindowBase.ChangeStrength += ChangeStrength;
            }
        }

        internal static event Delegates.ChangeStrength_BeforeArgs _beforeChangeStrength;
        internal static event Delegates.ChangeStrength_AfterArgs _afterChangeStrength;

        private static void ChangeStrength(On.UIWindowBase.orig_ChangeStrength orig, UIWindowBase self, float value)
        {
            Delegates.Params_ChangeStrength @params = new()
            {
                self = self, value = value
            };
            if (_beforeChangeStrength != null)
                foreach (Delegates.ChangeStrength_BeforeArgs toInvoke in _beforeChangeStrength.GetInvocationList())
                    try
                    {
                        _beforeChangeStrength?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterChangeStrength != null)
                foreach (Delegates.ChangeStrength_AfterArgs toInvoke in _afterChangeStrength.GetInvocationList())
                    try
                    {
                        _afterChangeStrength.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookChangeVibrancy()
        {
            if (!HookedList.Contains("ChangeVibrancy"))
            {
                HookedList.Add("ChangeVibrancy");
                On.UIWindowBase.ChangeVibrancy += ChangeVibrancy;
            }
        }

        internal static event Delegates.ChangeVibrancy_BeforeArgs _beforeChangeVibrancy;
        internal static event Delegates.ChangeVibrancy_AfterArgs _afterChangeVibrancy;

        private static void ChangeVibrancy(On.UIWindowBase.orig_ChangeVibrancy orig, UIWindowBase self, float value)
        {
            Delegates.Params_ChangeVibrancy @params = new()
            {
                self = self, value = value
            };
            if (_beforeChangeVibrancy != null)
                foreach (Delegates.ChangeVibrancy_BeforeArgs toInvoke in _beforeChangeVibrancy.GetInvocationList())
                    try
                    {
                        _beforeChangeVibrancy?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterChangeVibrancy != null)
                foreach (Delegates.ChangeVibrancy_AfterArgs toInvoke in _afterChangeVibrancy.GetInvocationList())
                    try
                    {
                        _afterChangeVibrancy.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ChangeStrength_AfterArgs(Params_ChangeStrength args);

        public delegate void ChangeStrength_BeforeArgs(Params_ChangeStrength args);

        public delegate void ChangeStrength_WithArgs(Action<UIWindowBase, float> orig, UIWindowBase self, float value);

        public delegate void ChangeVibrancy_AfterArgs(Params_ChangeVibrancy args);

        public delegate void ChangeVibrancy_BeforeArgs(Params_ChangeVibrancy args);

        public delegate void ChangeVibrancy_WithArgs(Action<UIWindowBase, float> orig, UIWindowBase self, float value);

        public delegate void OnDrag_AfterArgs(Params_OnDrag args);

        public delegate void OnDrag_BeforeArgs(Params_OnDrag args);

        public delegate void OnDrag_WithArgs(Action<UIWindowBase, PointerEventData> orig, UIWindowBase self,
            PointerEventData eventData);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<UIWindowBase> orig, UIWindowBase self);

        public sealed class Params_Start
        {
            public UIWindowBase self;
        }

        public sealed class Params_OnDrag
        {
            public PointerEventData eventData;
            public UIWindowBase self;
        }

        public sealed class Params_ChangeStrength
        {
            public UIWindowBase self;
            public float value;
        }

        public sealed class Params_ChangeVibrancy
        {
            public UIWindowBase self;
            public float value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnDrag_BeforeArgs OnDrag
        {
            add
            {
                HookHandler._beforeOnDrag += value;
                HookHandler.HookOnDrag();
            }
            remove => HookHandler._beforeOnDrag -= value;
        }

        public static event Delegates.ChangeStrength_BeforeArgs ChangeStrength
        {
            add
            {
                HookHandler._beforeChangeStrength += value;
                HookHandler.HookChangeStrength();
            }
            remove => HookHandler._beforeChangeStrength -= value;
        }

        public static event Delegates.ChangeVibrancy_BeforeArgs ChangeVibrancy
        {
            add
            {
                HookHandler._beforeChangeVibrancy += value;
                HookHandler.HookChangeVibrancy();
            }
            remove => HookHandler._beforeChangeVibrancy -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnDrag_AfterArgs OnDrag
        {
            add
            {
                HookHandler._afterOnDrag += value;
                HookHandler.HookOnDrag();
            }
            remove => HookHandler._afterOnDrag -= value;
        }

        public static event Delegates.ChangeStrength_AfterArgs ChangeStrength
        {
            add
            {
                HookHandler._afterChangeStrength += value;
                HookHandler.HookChangeStrength();
            }
            remove => HookHandler._afterChangeStrength -= value;
        }

        public static event Delegates.ChangeVibrancy_AfterArgs ChangeVibrancy
        {
            add
            {
                HookHandler._afterChangeVibrancy += value;
                HookHandler.HookChangeVibrancy();
            }
            remove => HookHandler._afterChangeVibrancy -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.UIWindowBase.hook_Start Start
        {
            add => On.UIWindowBase.Start += value;
            remove => On.UIWindowBase.Start -= value;
        }

        public static event On.UIWindowBase.hook_OnDrag OnDrag
        {
            add => On.UIWindowBase.OnDrag += value;
            remove => On.UIWindowBase.OnDrag -= value;
        }

        public static event On.UIWindowBase.hook_ChangeStrength ChangeStrength
        {
            add => On.UIWindowBase.ChangeStrength += value;
            remove => On.UIWindowBase.ChangeStrength -= value;
        }

        public static event On.UIWindowBase.hook_ChangeVibrancy ChangeVibrancy
        {
            add => On.UIWindowBase.ChangeVibrancy += value;
            remove => On.UIWindowBase.ChangeVibrancy -= value;
        }
    }
}