using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for BossStatueCompletionStates class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBossStatueCompletionStates
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookOnValidate()
{
if (!HookedList.Contains("OnValidate"))
{
HookedList.Add("OnValidate");
On.BossStatueCompletionStates.OnValidate += OnValidate;

}
}
internal static event Delegates.OnValidate_BeforeArgs _beforeOnValidate;
internal static event Delegates.OnValidate_AfterArgs _afterOnValidate;
private static void OnValidate(On.BossStatueCompletionStates.orig_OnValidate orig,BossStatueCompletionStates self)
{
Delegates.Params_OnValidate @params = new() 
{
self = self
};
if (_beforeOnValidate != null)
{
foreach (Delegates.OnValidate_BeforeArgs toInvoke in _beforeOnValidate.GetInvocationList())
{
try
{
_beforeOnValidate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnValidate != null)
{
foreach (Delegates.OnValidate_AfterArgs toInvoke in _afterOnValidate.GetInvocationList())
{
try
{
_afterOnValidate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.BossStatueCompletionStates.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.BossStatueCompletionStates.orig_Start orig,BossStatueCompletionStates self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetHighestCompletedTier()
{
if (!HookedList.Contains("GetHighestCompletedTier"))
{
HookedList.Add("GetHighestCompletedTier");
On.BossStatueCompletionStates.GetHighestCompletedTier += GetHighestCompletedTier;

}
}
internal static event Delegates.GetHighestCompletedTier_BeforeArgs _beforeGetHighestCompletedTier;
internal static event Delegates.GetHighestCompletedTier_AfterArgs _afterGetHighestCompletedTier;
private static BossStatueCompletionStates.Tiers? GetHighestCompletedTier(On.BossStatueCompletionStates.orig_GetHighestCompletedTier orig,BossStatueCompletionStates self)
{
Delegates.Params_GetHighestCompletedTier @params = new() 
{
self = self
};
if (_beforeGetHighestCompletedTier != null)
{
foreach (Delegates.GetHighestCompletedTier_BeforeArgs toInvoke in _beforeGetHighestCompletedTier.GetInvocationList())
{
try
{
_beforeGetHighestCompletedTier?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetHighestCompletedTier != null)
{
foreach (Delegates.GetHighestCompletedTier_AfterArgs toInvoke in _afterGetHighestCompletedTier.GetInvocationList())
{
try
{
retVal = _afterGetHighestCompletedTier.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_OnValidate
{
public BossStatueCompletionStates self;
}
public delegate void OnValidate_BeforeArgs(Params_OnValidate args);
public delegate void OnValidate_AfterArgs(Params_OnValidate args);
public delegate void OnValidate_WithArgs (Action<BossStatueCompletionStates> orig, BossStatueCompletionStates self);
public sealed class Params_Start
{
public BossStatueCompletionStates self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<BossStatueCompletionStates> orig, BossStatueCompletionStates self);
public sealed class Params_GetHighestCompletedTier
{
public BossStatueCompletionStates self;
}
public delegate void GetHighestCompletedTier_BeforeArgs(Params_GetHighestCompletedTier args);
public delegate BossStatueCompletionStates.Tiers? GetHighestCompletedTier_AfterArgs(Params_GetHighestCompletedTier args, BossStatueCompletionStates.Tiers? ret);
public delegate BossStatueCompletionStates.Tiers? GetHighestCompletedTier_WithArgs (Func<BossStatueCompletionStates, BossStatueCompletionStates.Tiers?> orig, BossStatueCompletionStates self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.OnValidate_BeforeArgs OnValidate
{
add
{

HookHandler._beforeOnValidate += value;
HookHandler.HookOnValidate();
}
remove => HookHandler._beforeOnValidate -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.GetHighestCompletedTier_BeforeArgs GetHighestCompletedTier
{
add
{

HookHandler._beforeGetHighestCompletedTier += value;
HookHandler.HookGetHighestCompletedTier();
}
remove => HookHandler._beforeGetHighestCompletedTier -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.OnValidate_AfterArgs OnValidate
{
add
{

HookHandler._afterOnValidate += value;
HookHandler.HookOnValidate();
}
remove => HookHandler._afterOnValidate -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.GetHighestCompletedTier_AfterArgs GetHighestCompletedTier
{
add
{

HookHandler._afterGetHighestCompletedTier += value;
HookHandler.HookGetHighestCompletedTier();
}
remove => HookHandler._afterGetHighestCompletedTier -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.BossStatueCompletionStates.hook_OnValidate OnValidate
{
add => On.BossStatueCompletionStates.OnValidate += value;
remove => On.BossStatueCompletionStates.OnValidate -= value;
}
public static event On.BossStatueCompletionStates.hook_Start Start
{
add => On.BossStatueCompletionStates.Start += value;
remove => On.BossStatueCompletionStates.Start -= value;
}
public static event On.BossStatueCompletionStates.hook_GetHighestCompletedTier GetHighestCompletedTier
{
add => On.BossStatueCompletionStates.GetHighestCompletedTier += value;
remove => On.BossStatueCompletionStates.GetHighestCompletedTier -= value;
}
}

}
