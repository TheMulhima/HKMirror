using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.EventSystems;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for HollowKnightInputModule class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnHollowKnightInputModule
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_SubmitAction()
        {
            if (!HookedList.Contains("get_SubmitAction"))
            {
                HookedList.Add("get_SubmitAction");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_SubmitAction"),
                    get_SubmitAction);
            }
        }

        internal static event Delegates.get_SubmitAction_BeforeArgs _beforeget_SubmitAction;
        internal static event Delegates.get_SubmitAction_NormalArgs _afterget_SubmitAction;

        private static PlayerAction get_SubmitAction(Func<HollowKnightInputModule, PlayerAction> orig,
            HollowKnightInputModule self)
        {
            Delegates.Params_get_SubmitAction @params = new()
            {
                self = self
            };
            _beforeget_SubmitAction?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SubmitAction != null) retVal = _afterget_SubmitAction.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_SubmitAction()
        {
            if (!HookedList.Contains("set_SubmitAction"))
            {
                HookedList.Add("set_SubmitAction");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "set_SubmitAction"),
                    set_SubmitAction);
            }
        }

        internal static event Delegates.set_SubmitAction_BeforeArgs _beforeset_SubmitAction;
        internal static event Delegates.set_SubmitAction_NormalArgs _afterset_SubmitAction;

        private static void set_SubmitAction(Action<HollowKnightInputModule, PlayerAction> orig,
            HollowKnightInputModule self, PlayerAction value)
        {
            Delegates.Params_set_SubmitAction @params = new()
            {
                self = self, value = value
            };
            _beforeset_SubmitAction?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_SubmitAction != null) _afterset_SubmitAction.Invoke(@params);
        }

        internal static void Hookget_CancelAction()
        {
            if (!HookedList.Contains("get_CancelAction"))
            {
                HookedList.Add("get_CancelAction");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_CancelAction"),
                    get_CancelAction);
            }
        }

        internal static event Delegates.get_CancelAction_BeforeArgs _beforeget_CancelAction;
        internal static event Delegates.get_CancelAction_NormalArgs _afterget_CancelAction;

        private static PlayerAction get_CancelAction(Func<HollowKnightInputModule, PlayerAction> orig,
            HollowKnightInputModule self)
        {
            Delegates.Params_get_CancelAction @params = new()
            {
                self = self
            };
            _beforeget_CancelAction?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_CancelAction != null) retVal = _afterget_CancelAction.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_CancelAction()
        {
            if (!HookedList.Contains("set_CancelAction"))
            {
                HookedList.Add("set_CancelAction");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "set_CancelAction"),
                    set_CancelAction);
            }
        }

        internal static event Delegates.set_CancelAction_BeforeArgs _beforeset_CancelAction;
        internal static event Delegates.set_CancelAction_NormalArgs _afterset_CancelAction;

        private static void set_CancelAction(Action<HollowKnightInputModule, PlayerAction> orig,
            HollowKnightInputModule self, PlayerAction value)
        {
            Delegates.Params_set_CancelAction @params = new()
            {
                self = self, value = value
            };
            _beforeset_CancelAction?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_CancelAction != null) _afterset_CancelAction.Invoke(@params);
        }

        internal static void Hookget_JumpAction()
        {
            if (!HookedList.Contains("get_JumpAction"))
            {
                HookedList.Add("get_JumpAction");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_JumpAction"),
                    get_JumpAction);
            }
        }

        internal static event Delegates.get_JumpAction_BeforeArgs _beforeget_JumpAction;
        internal static event Delegates.get_JumpAction_NormalArgs _afterget_JumpAction;

        private static PlayerAction get_JumpAction(Func<HollowKnightInputModule, PlayerAction> orig,
            HollowKnightInputModule self)
        {
            Delegates.Params_get_JumpAction @params = new()
            {
                self = self
            };
            _beforeget_JumpAction?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_JumpAction != null) retVal = _afterget_JumpAction.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_JumpAction()
        {
            if (!HookedList.Contains("set_JumpAction"))
            {
                HookedList.Add("set_JumpAction");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "set_JumpAction"),
                    set_JumpAction);
            }
        }

        internal static event Delegates.set_JumpAction_BeforeArgs _beforeset_JumpAction;
        internal static event Delegates.set_JumpAction_NormalArgs _afterset_JumpAction;

        private static void set_JumpAction(Action<HollowKnightInputModule, PlayerAction> orig,
            HollowKnightInputModule self, PlayerAction value)
        {
            Delegates.Params_set_JumpAction @params = new()
            {
                self = self, value = value
            };
            _beforeset_JumpAction?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_JumpAction != null) _afterset_JumpAction.Invoke(@params);
        }

        internal static void Hookget_CastAction()
        {
            if (!HookedList.Contains("get_CastAction"))
            {
                HookedList.Add("get_CastAction");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_CastAction"),
                    get_CastAction);
            }
        }

        internal static event Delegates.get_CastAction_BeforeArgs _beforeget_CastAction;
        internal static event Delegates.get_CastAction_NormalArgs _afterget_CastAction;

        private static PlayerAction get_CastAction(Func<HollowKnightInputModule, PlayerAction> orig,
            HollowKnightInputModule self)
        {
            Delegates.Params_get_CastAction @params = new()
            {
                self = self
            };
            _beforeget_CastAction?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_CastAction != null) retVal = _afterget_CastAction.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_CastAction()
        {
            if (!HookedList.Contains("set_CastAction"))
            {
                HookedList.Add("set_CastAction");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "set_CastAction"),
                    set_CastAction);
            }
        }

        internal static event Delegates.set_CastAction_BeforeArgs _beforeset_CastAction;
        internal static event Delegates.set_CastAction_NormalArgs _afterset_CastAction;

        private static void set_CastAction(Action<HollowKnightInputModule, PlayerAction> orig,
            HollowKnightInputModule self, PlayerAction value)
        {
            Delegates.Params_set_CastAction @params = new()
            {
                self = self, value = value
            };
            _beforeset_CastAction?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_CastAction != null) _afterset_CastAction.Invoke(@params);
        }

        internal static void Hookget_AttackAction()
        {
            if (!HookedList.Contains("get_AttackAction"))
            {
                HookedList.Add("get_AttackAction");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_AttackAction"),
                    get_AttackAction);
            }
        }

        internal static event Delegates.get_AttackAction_BeforeArgs _beforeget_AttackAction;
        internal static event Delegates.get_AttackAction_NormalArgs _afterget_AttackAction;

        private static PlayerAction get_AttackAction(Func<HollowKnightInputModule, PlayerAction> orig,
            HollowKnightInputModule self)
        {
            Delegates.Params_get_AttackAction @params = new()
            {
                self = self
            };
            _beforeget_AttackAction?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AttackAction != null) retVal = _afterget_AttackAction.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_AttackAction()
        {
            if (!HookedList.Contains("set_AttackAction"))
            {
                HookedList.Add("set_AttackAction");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "set_AttackAction"),
                    set_AttackAction);
            }
        }

        internal static event Delegates.set_AttackAction_BeforeArgs _beforeset_AttackAction;
        internal static event Delegates.set_AttackAction_NormalArgs _afterset_AttackAction;

        private static void set_AttackAction(Action<HollowKnightInputModule, PlayerAction> orig,
            HollowKnightInputModule self, PlayerAction value)
        {
            Delegates.Params_set_AttackAction @params = new()
            {
                self = self, value = value
            };
            _beforeset_AttackAction?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_AttackAction != null) _afterset_AttackAction.Invoke(@params);
        }

        internal static void Hookget_MoveAction()
        {
            if (!HookedList.Contains("get_MoveAction"))
            {
                HookedList.Add("get_MoveAction");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_MoveAction"),
                    get_MoveAction);
            }
        }

        internal static event Delegates.get_MoveAction_BeforeArgs _beforeget_MoveAction;
        internal static event Delegates.get_MoveAction_NormalArgs _afterget_MoveAction;

        private static PlayerTwoAxisAction get_MoveAction(Func<HollowKnightInputModule, PlayerTwoAxisAction> orig,
            HollowKnightInputModule self)
        {
            Delegates.Params_get_MoveAction @params = new()
            {
                self = self
            };
            _beforeget_MoveAction?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_MoveAction != null) retVal = _afterget_MoveAction.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_MoveAction()
        {
            if (!HookedList.Contains("set_MoveAction"))
            {
                HookedList.Add("set_MoveAction");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "set_MoveAction"),
                    set_MoveAction);
            }
        }

        internal static event Delegates.set_MoveAction_BeforeArgs _beforeset_MoveAction;
        internal static event Delegates.set_MoveAction_NormalArgs _afterset_MoveAction;

        private static void set_MoveAction(Action<HollowKnightInputModule, PlayerTwoAxisAction> orig,
            HollowKnightInputModule self, PlayerTwoAxisAction value)
        {
            Delegates.Params_set_MoveAction @params = new()
            {
                self = self, value = value
            };
            _beforeset_MoveAction?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_MoveAction != null) _afterset_MoveAction.Invoke(@params);
        }

        internal static void HookUpdateModule()
        {
            if (!HookedList.Contains("UpdateModule"))
            {
                HookedList.Add("UpdateModule");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "UpdateModule"), UpdateModule);
            }
        }

        internal static event Delegates.UpdateModule_BeforeArgs _beforeUpdateModule;
        internal static event Delegates.UpdateModule_NormalArgs _afterUpdateModule;

        private static void UpdateModule(Action<HollowKnightInputModule> orig, HollowKnightInputModule self)
        {
            Delegates.Params_UpdateModule @params = new()
            {
                self = self
            };
            _beforeUpdateModule?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateModule != null) _afterUpdateModule.Invoke(@params);
        }

        internal static void HookIsModuleSupported()
        {
            if (!HookedList.Contains("IsModuleSupported"))
            {
                HookedList.Add("IsModuleSupported");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "IsModuleSupported"),
                    IsModuleSupported);
            }
        }

        internal static event Delegates.IsModuleSupported_BeforeArgs _beforeIsModuleSupported;
        internal static event Delegates.IsModuleSupported_NormalArgs _afterIsModuleSupported;

        private static bool IsModuleSupported(Func<HollowKnightInputModule, bool> orig, HollowKnightInputModule self)
        {
            Delegates.Params_IsModuleSupported @params = new()
            {
                self = self
            };
            _beforeIsModuleSupported?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterIsModuleSupported != null) retVal = _afterIsModuleSupported.Invoke(@params);
            return retVal;
        }

        internal static void HookShouldActivateModule()
        {
            if (!HookedList.Contains("ShouldActivateModule"))
            {
                HookedList.Add("ShouldActivateModule");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "ShouldActivateModule"),
                    ShouldActivateModule);
            }
        }

        internal static event Delegates.ShouldActivateModule_BeforeArgs _beforeShouldActivateModule;
        internal static event Delegates.ShouldActivateModule_NormalArgs _afterShouldActivateModule;

        private static bool ShouldActivateModule(Func<HollowKnightInputModule, bool> orig, HollowKnightInputModule self)
        {
            Delegates.Params_ShouldActivateModule @params = new()
            {
                self = self
            };
            _beforeShouldActivateModule?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterShouldActivateModule != null) retVal = _afterShouldActivateModule.Invoke(@params);
            return retVal;
        }

        internal static void HookActivateModule()
        {
            if (!HookedList.Contains("ActivateModule"))
            {
                HookedList.Add("ActivateModule");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "ActivateModule"),
                    ActivateModule);
            }
        }

        internal static event Delegates.ActivateModule_BeforeArgs _beforeActivateModule;
        internal static event Delegates.ActivateModule_NormalArgs _afterActivateModule;

        private static void ActivateModule(Action<HollowKnightInputModule> orig, HollowKnightInputModule self)
        {
            Delegates.Params_ActivateModule @params = new()
            {
                self = self
            };
            _beforeActivateModule?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterActivateModule != null) _afterActivateModule.Invoke(@params);
        }

        internal static void HookProcess()
        {
            if (!HookedList.Contains("Process"))
            {
                HookedList.Add("Process");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "Process"), Process);
            }
        }

        internal static event Delegates.Process_BeforeArgs _beforeProcess;
        internal static event Delegates.Process_NormalArgs _afterProcess;

        private static void Process(Action<HollowKnightInputModule> orig, HollowKnightInputModule self)
        {
            Delegates.Params_Process @params = new()
            {
                self = self
            };
            _beforeProcess?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterProcess != null) _afterProcess.Invoke(@params);
        }

        internal static void HookSendButtonEventToSelectedObject()
        {
            if (!HookedList.Contains("SendButtonEventToSelectedObject"))
            {
                HookedList.Add("SendButtonEventToSelectedObject");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "SendButtonEventToSelectedObject"),
                    SendButtonEventToSelectedObject);
            }
        }

        internal static event Delegates.SendButtonEventToSelectedObject_BeforeArgs
            _beforeSendButtonEventToSelectedObject;

        internal static event Delegates.SendButtonEventToSelectedObject_NormalArgs
            _afterSendButtonEventToSelectedObject;

        private static bool SendButtonEventToSelectedObject(Func<HollowKnightInputModule, bool> orig,
            HollowKnightInputModule self)
        {
            Delegates.Params_SendButtonEventToSelectedObject @params = new()
            {
                self = self
            };
            _beforeSendButtonEventToSelectedObject?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterSendButtonEventToSelectedObject != null)
                retVal = _afterSendButtonEventToSelectedObject.Invoke(@params);
            return retVal;
        }

        internal static void HookSendVectorEventToSelectedObject()
        {
            if (!HookedList.Contains("SendVectorEventToSelectedObject"))
            {
                HookedList.Add("SendVectorEventToSelectedObject");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "SendVectorEventToSelectedObject"),
                    SendVectorEventToSelectedObject);
            }
        }

        internal static event Delegates.SendVectorEventToSelectedObject_BeforeArgs
            _beforeSendVectorEventToSelectedObject;

        internal static event Delegates.SendVectorEventToSelectedObject_NormalArgs
            _afterSendVectorEventToSelectedObject;

        private static bool SendVectorEventToSelectedObject(Func<HollowKnightInputModule, bool> orig,
            HollowKnightInputModule self)
        {
            Delegates.Params_SendVectorEventToSelectedObject @params = new()
            {
                self = self
            };
            _beforeSendVectorEventToSelectedObject?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterSendVectorEventToSelectedObject != null)
                retVal = _afterSendVectorEventToSelectedObject.Invoke(@params);
            return retVal;
        }

        internal static void HookProcessMove()
        {
            if (!HookedList.Contains("ProcessMove"))
            {
                HookedList.Add("ProcessMove");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "ProcessMove"), ProcessMove);
            }
        }

        internal static event Delegates.ProcessMove_BeforeArgs _beforeProcessMove;
        internal static event Delegates.ProcessMove_NormalArgs _afterProcessMove;

        private static void ProcessMove(Action<HollowKnightInputModule, PointerEventData> orig,
            HollowKnightInputModule self, PointerEventData pointerEvent)
        {
            Delegates.Params_ProcessMove @params = new()
            {
                self = self, pointerEvent = pointerEvent
            };
            _beforeProcessMove?.Invoke(@params);
            self = @params.self;
            pointerEvent = @params.pointerEvent;
            orig(self, pointerEvent);
            if (_afterProcessMove != null) _afterProcessMove.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "Update"), Update);
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(Action<HollowKnightInputModule> orig, HollowKnightInputModule self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookUpdateInputState()
        {
            if (!HookedList.Contains("UpdateInputState"))
            {
                HookedList.Add("UpdateInputState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "UpdateInputState"),
                    UpdateInputState);
            }
        }

        internal static event Delegates.UpdateInputState_BeforeArgs _beforeUpdateInputState;
        internal static event Delegates.UpdateInputState_NormalArgs _afterUpdateInputState;

        private static void UpdateInputState(Action<HollowKnightInputModule> orig, HollowKnightInputModule self)
        {
            Delegates.Params_UpdateInputState @params = new()
            {
                self = self
            };
            _beforeUpdateInputState?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateInputState != null) _afterUpdateInputState.Invoke(@params);
        }

        internal static void Hookset_Device()
        {
            if (!HookedList.Contains("set_Device"))
            {
                HookedList.Add("set_Device");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "set_Device"), set_Device);
            }
        }

        internal static event Delegates.set_Device_BeforeArgs _beforeset_Device;
        internal static event Delegates.set_Device_NormalArgs _afterset_Device;

        private static void set_Device(Action<HollowKnightInputModule, InputDevice> orig, HollowKnightInputModule self,
            InputDevice value)
        {
            Delegates.Params_set_Device @params = new()
            {
                self = self, value = value
            };
            _beforeset_Device?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Device != null) _afterset_Device.Invoke(@params);
        }

        internal static void Hookget_Device()
        {
            if (!HookedList.Contains("get_Device"))
            {
                HookedList.Add("get_Device");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_Device"), get_Device);
            }
        }

        internal static event Delegates.get_Device_BeforeArgs _beforeget_Device;
        internal static event Delegates.get_Device_NormalArgs _afterget_Device;

        private static InputDevice get_Device(Func<HollowKnightInputModule, InputDevice> orig,
            HollowKnightInputModule self)
        {
            Delegates.Params_get_Device @params = new()
            {
                self = self
            };
            _beforeget_Device?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Device != null) retVal = _afterget_Device.Invoke(@params);
            return retVal;
        }

        internal static void HookSetVectorRepeatTimer()
        {
            if (!HookedList.Contains("SetVectorRepeatTimer"))
            {
                HookedList.Add("SetVectorRepeatTimer");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "SetVectorRepeatTimer"),
                    SetVectorRepeatTimer);
            }
        }

        internal static event Delegates.SetVectorRepeatTimer_BeforeArgs _beforeSetVectorRepeatTimer;
        internal static event Delegates.SetVectorRepeatTimer_NormalArgs _afterSetVectorRepeatTimer;

        private static void SetVectorRepeatTimer(Action<HollowKnightInputModule> orig, HollowKnightInputModule self)
        {
            Delegates.Params_SetVectorRepeatTimer @params = new()
            {
                self = self
            };
            _beforeSetVectorRepeatTimer?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetVectorRepeatTimer != null) _afterSetVectorRepeatTimer.Invoke(@params);
        }

        internal static void Hookget_VectorIsPressed()
        {
            if (!HookedList.Contains("get_VectorIsPressed"))
            {
                HookedList.Add("get_VectorIsPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_VectorIsPressed"),
                    get_VectorIsPressed);
            }
        }

        internal static event Delegates.get_VectorIsPressed_BeforeArgs _beforeget_VectorIsPressed;
        internal static event Delegates.get_VectorIsPressed_NormalArgs _afterget_VectorIsPressed;

        private static bool get_VectorIsPressed(Func<HollowKnightInputModule, bool> orig, HollowKnightInputModule self)
        {
            Delegates.Params_get_VectorIsPressed @params = new()
            {
                self = self
            };
            _beforeget_VectorIsPressed?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_VectorIsPressed != null) retVal = _afterget_VectorIsPressed.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_VectorIsReleased()
        {
            if (!HookedList.Contains("get_VectorIsReleased"))
            {
                HookedList.Add("get_VectorIsReleased");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_VectorIsReleased"),
                    get_VectorIsReleased);
            }
        }

        internal static event Delegates.get_VectorIsReleased_BeforeArgs _beforeget_VectorIsReleased;
        internal static event Delegates.get_VectorIsReleased_NormalArgs _afterget_VectorIsReleased;

        private static bool get_VectorIsReleased(Func<HollowKnightInputModule, bool> orig, HollowKnightInputModule self)
        {
            Delegates.Params_get_VectorIsReleased @params = new()
            {
                self = self
            };
            _beforeget_VectorIsReleased?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_VectorIsReleased != null) retVal = _afterget_VectorIsReleased.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_VectorHasChanged()
        {
            if (!HookedList.Contains("get_VectorHasChanged"))
            {
                HookedList.Add("get_VectorHasChanged");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_VectorHasChanged"),
                    get_VectorHasChanged);
            }
        }

        internal static event Delegates.get_VectorHasChanged_BeforeArgs _beforeget_VectorHasChanged;
        internal static event Delegates.get_VectorHasChanged_NormalArgs _afterget_VectorHasChanged;

        private static bool get_VectorHasChanged(Func<HollowKnightInputModule, bool> orig, HollowKnightInputModule self)
        {
            Delegates.Params_get_VectorHasChanged @params = new()
            {
                self = self
            };
            _beforeget_VectorHasChanged?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_VectorHasChanged != null) retVal = _afterget_VectorHasChanged.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_VectorWasPressed()
        {
            if (!HookedList.Contains("get_VectorWasPressed"))
            {
                HookedList.Add("get_VectorWasPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_VectorWasPressed"),
                    get_VectorWasPressed);
            }
        }

        internal static event Delegates.get_VectorWasPressed_BeforeArgs _beforeget_VectorWasPressed;
        internal static event Delegates.get_VectorWasPressed_NormalArgs _afterget_VectorWasPressed;

        private static bool get_VectorWasPressed(Func<HollowKnightInputModule, bool> orig, HollowKnightInputModule self)
        {
            Delegates.Params_get_VectorWasPressed @params = new()
            {
                self = self
            };
            _beforeget_VectorWasPressed?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_VectorWasPressed != null) retVal = _afterget_VectorWasPressed.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_MouseHasMoved()
        {
            if (!HookedList.Contains("get_MouseHasMoved"))
            {
                HookedList.Add("get_MouseHasMoved");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_MouseHasMoved"),
                    get_MouseHasMoved);
            }
        }

        internal static event Delegates.get_MouseHasMoved_BeforeArgs _beforeget_MouseHasMoved;
        internal static event Delegates.get_MouseHasMoved_NormalArgs _afterget_MouseHasMoved;

        private static bool get_MouseHasMoved(Func<HollowKnightInputModule, bool> orig, HollowKnightInputModule self)
        {
            Delegates.Params_get_MouseHasMoved @params = new()
            {
                self = self
            };
            _beforeget_MouseHasMoved?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_MouseHasMoved != null) retVal = _afterget_MouseHasMoved.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_MouseButtonIsPressed()
        {
            if (!HookedList.Contains("get_MouseButtonIsPressed"))
            {
                HookedList.Add("get_MouseButtonIsPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_MouseButtonIsPressed"),
                    get_MouseButtonIsPressed);
            }
        }

        internal static event Delegates.get_MouseButtonIsPressed_BeforeArgs _beforeget_MouseButtonIsPressed;
        internal static event Delegates.get_MouseButtonIsPressed_NormalArgs _afterget_MouseButtonIsPressed;

        private static bool get_MouseButtonIsPressed(Func<HollowKnightInputModule, bool> orig,
            HollowKnightInputModule self)
        {
            Delegates.Params_get_MouseButtonIsPressed @params = new()
            {
                self = self
            };
            _beforeget_MouseButtonIsPressed?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_MouseButtonIsPressed != null) retVal = _afterget_MouseButtonIsPressed.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ActivateModule_BeforeArgs(Params_ActivateModule args);

        public delegate void ActivateModule_NormalArgs(Params_ActivateModule args);

        public delegate void get_AttackAction_BeforeArgs(Params_get_AttackAction args);

        public delegate PlayerAction get_AttackAction_NormalArgs(Params_get_AttackAction args);

        public delegate void get_CancelAction_BeforeArgs(Params_get_CancelAction args);

        public delegate PlayerAction get_CancelAction_NormalArgs(Params_get_CancelAction args);

        public delegate void get_CastAction_BeforeArgs(Params_get_CastAction args);

        public delegate PlayerAction get_CastAction_NormalArgs(Params_get_CastAction args);

        public delegate void get_Device_BeforeArgs(Params_get_Device args);

        public delegate InputDevice get_Device_NormalArgs(Params_get_Device args);

        public delegate void get_JumpAction_BeforeArgs(Params_get_JumpAction args);

        public delegate PlayerAction get_JumpAction_NormalArgs(Params_get_JumpAction args);

        public delegate void get_MouseButtonIsPressed_BeforeArgs(Params_get_MouseButtonIsPressed args);

        public delegate bool get_MouseButtonIsPressed_NormalArgs(Params_get_MouseButtonIsPressed args);

        public delegate void get_MouseHasMoved_BeforeArgs(Params_get_MouseHasMoved args);

        public delegate bool get_MouseHasMoved_NormalArgs(Params_get_MouseHasMoved args);

        public delegate void get_MoveAction_BeforeArgs(Params_get_MoveAction args);

        public delegate PlayerTwoAxisAction get_MoveAction_NormalArgs(Params_get_MoveAction args);

        public delegate void get_SubmitAction_BeforeArgs(Params_get_SubmitAction args);

        public delegate PlayerAction get_SubmitAction_NormalArgs(Params_get_SubmitAction args);

        public delegate void get_VectorHasChanged_BeforeArgs(Params_get_VectorHasChanged args);

        public delegate bool get_VectorHasChanged_NormalArgs(Params_get_VectorHasChanged args);

        public delegate void get_VectorIsPressed_BeforeArgs(Params_get_VectorIsPressed args);

        public delegate bool get_VectorIsPressed_NormalArgs(Params_get_VectorIsPressed args);

        public delegate void get_VectorIsReleased_BeforeArgs(Params_get_VectorIsReleased args);

        public delegate bool get_VectorIsReleased_NormalArgs(Params_get_VectorIsReleased args);

        public delegate void get_VectorWasPressed_BeforeArgs(Params_get_VectorWasPressed args);

        public delegate bool get_VectorWasPressed_NormalArgs(Params_get_VectorWasPressed args);

        public delegate void IsModuleSupported_BeforeArgs(Params_IsModuleSupported args);

        public delegate bool IsModuleSupported_NormalArgs(Params_IsModuleSupported args);

        public delegate void Process_BeforeArgs(Params_Process args);

        public delegate void Process_NormalArgs(Params_Process args);

        public delegate void ProcessMove_BeforeArgs(Params_ProcessMove args);

        public delegate void ProcessMove_NormalArgs(Params_ProcessMove args);

        public delegate void SendButtonEventToSelectedObject_BeforeArgs(Params_SendButtonEventToSelectedObject args);

        public delegate bool SendButtonEventToSelectedObject_NormalArgs(Params_SendButtonEventToSelectedObject args);

        public delegate void SendVectorEventToSelectedObject_BeforeArgs(Params_SendVectorEventToSelectedObject args);

        public delegate bool SendVectorEventToSelectedObject_NormalArgs(Params_SendVectorEventToSelectedObject args);

        public delegate void set_AttackAction_BeforeArgs(Params_set_AttackAction args);

        public delegate void set_AttackAction_NormalArgs(Params_set_AttackAction args);

        public delegate void set_CancelAction_BeforeArgs(Params_set_CancelAction args);

        public delegate void set_CancelAction_NormalArgs(Params_set_CancelAction args);

        public delegate void set_CastAction_BeforeArgs(Params_set_CastAction args);

        public delegate void set_CastAction_NormalArgs(Params_set_CastAction args);

        public delegate void set_Device_BeforeArgs(Params_set_Device args);

        public delegate void set_Device_NormalArgs(Params_set_Device args);

        public delegate void set_JumpAction_BeforeArgs(Params_set_JumpAction args);

        public delegate void set_JumpAction_NormalArgs(Params_set_JumpAction args);

        public delegate void set_MoveAction_BeforeArgs(Params_set_MoveAction args);

        public delegate void set_MoveAction_NormalArgs(Params_set_MoveAction args);

        public delegate void set_SubmitAction_BeforeArgs(Params_set_SubmitAction args);

        public delegate void set_SubmitAction_NormalArgs(Params_set_SubmitAction args);

        public delegate void SetVectorRepeatTimer_BeforeArgs(Params_SetVectorRepeatTimer args);

        public delegate void SetVectorRepeatTimer_NormalArgs(Params_SetVectorRepeatTimer args);

        public delegate void ShouldActivateModule_BeforeArgs(Params_ShouldActivateModule args);

        public delegate bool ShouldActivateModule_NormalArgs(Params_ShouldActivateModule args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public delegate void UpdateInputState_BeforeArgs(Params_UpdateInputState args);

        public delegate void UpdateInputState_NormalArgs(Params_UpdateInputState args);

        public delegate void UpdateModule_BeforeArgs(Params_UpdateModule args);

        public delegate void UpdateModule_NormalArgs(Params_UpdateModule args);

        public sealed class Params_get_SubmitAction
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_set_SubmitAction
        {
            public HollowKnightInputModule self;
            public PlayerAction value;
        }

        public sealed class Params_get_CancelAction
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_set_CancelAction
        {
            public HollowKnightInputModule self;
            public PlayerAction value;
        }

        public sealed class Params_get_JumpAction
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_set_JumpAction
        {
            public HollowKnightInputModule self;
            public PlayerAction value;
        }

        public sealed class Params_get_CastAction
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_set_CastAction
        {
            public HollowKnightInputModule self;
            public PlayerAction value;
        }

        public sealed class Params_get_AttackAction
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_set_AttackAction
        {
            public HollowKnightInputModule self;
            public PlayerAction value;
        }

        public sealed class Params_get_MoveAction
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_set_MoveAction
        {
            public HollowKnightInputModule self;
            public PlayerTwoAxisAction value;
        }

        public sealed class Params_UpdateModule
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_IsModuleSupported
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_ShouldActivateModule
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_ActivateModule
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_Process
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_SendButtonEventToSelectedObject
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_SendVectorEventToSelectedObject
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_ProcessMove
        {
            public PointerEventData pointerEvent;
            public HollowKnightInputModule self;
        }

        public sealed class Params_Update
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_UpdateInputState
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_set_Device
        {
            public HollowKnightInputModule self;
            public InputDevice value;
        }

        public sealed class Params_get_Device
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_SetVectorRepeatTimer
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_get_VectorIsPressed
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_get_VectorIsReleased
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_get_VectorHasChanged
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_get_VectorWasPressed
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_get_MouseHasMoved
        {
            public HollowKnightInputModule self;
        }

        public sealed class Params_get_MouseButtonIsPressed
        {
            public HollowKnightInputModule self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_SubmitAction_BeforeArgs get_SubmitAction
        {
            add
            {
                HookHandler._beforeget_SubmitAction += value;
                HookHandler.Hookget_SubmitAction();
            }
            remove => HookHandler._beforeget_SubmitAction -= value;
        }

        public static event Delegates.set_SubmitAction_BeforeArgs set_SubmitAction
        {
            add
            {
                HookHandler._beforeset_SubmitAction += value;
                HookHandler.Hookset_SubmitAction();
            }
            remove => HookHandler._beforeset_SubmitAction -= value;
        }

        public static event Delegates.get_CancelAction_BeforeArgs get_CancelAction
        {
            add
            {
                HookHandler._beforeget_CancelAction += value;
                HookHandler.Hookget_CancelAction();
            }
            remove => HookHandler._beforeget_CancelAction -= value;
        }

        public static event Delegates.set_CancelAction_BeforeArgs set_CancelAction
        {
            add
            {
                HookHandler._beforeset_CancelAction += value;
                HookHandler.Hookset_CancelAction();
            }
            remove => HookHandler._beforeset_CancelAction -= value;
        }

        public static event Delegates.get_JumpAction_BeforeArgs get_JumpAction
        {
            add
            {
                HookHandler._beforeget_JumpAction += value;
                HookHandler.Hookget_JumpAction();
            }
            remove => HookHandler._beforeget_JumpAction -= value;
        }

        public static event Delegates.set_JumpAction_BeforeArgs set_JumpAction
        {
            add
            {
                HookHandler._beforeset_JumpAction += value;
                HookHandler.Hookset_JumpAction();
            }
            remove => HookHandler._beforeset_JumpAction -= value;
        }

        public static event Delegates.get_CastAction_BeforeArgs get_CastAction
        {
            add
            {
                HookHandler._beforeget_CastAction += value;
                HookHandler.Hookget_CastAction();
            }
            remove => HookHandler._beforeget_CastAction -= value;
        }

        public static event Delegates.set_CastAction_BeforeArgs set_CastAction
        {
            add
            {
                HookHandler._beforeset_CastAction += value;
                HookHandler.Hookset_CastAction();
            }
            remove => HookHandler._beforeset_CastAction -= value;
        }

        public static event Delegates.get_AttackAction_BeforeArgs get_AttackAction
        {
            add
            {
                HookHandler._beforeget_AttackAction += value;
                HookHandler.Hookget_AttackAction();
            }
            remove => HookHandler._beforeget_AttackAction -= value;
        }

        public static event Delegates.set_AttackAction_BeforeArgs set_AttackAction
        {
            add
            {
                HookHandler._beforeset_AttackAction += value;
                HookHandler.Hookset_AttackAction();
            }
            remove => HookHandler._beforeset_AttackAction -= value;
        }

        public static event Delegates.get_MoveAction_BeforeArgs get_MoveAction
        {
            add
            {
                HookHandler._beforeget_MoveAction += value;
                HookHandler.Hookget_MoveAction();
            }
            remove => HookHandler._beforeget_MoveAction -= value;
        }

        public static event Delegates.set_MoveAction_BeforeArgs set_MoveAction
        {
            add
            {
                HookHandler._beforeset_MoveAction += value;
                HookHandler.Hookset_MoveAction();
            }
            remove => HookHandler._beforeset_MoveAction -= value;
        }

        public static event Delegates.UpdateModule_BeforeArgs UpdateModule
        {
            add
            {
                HookHandler._beforeUpdateModule += value;
                HookHandler.HookUpdateModule();
            }
            remove => HookHandler._beforeUpdateModule -= value;
        }

        public static event Delegates.IsModuleSupported_BeforeArgs IsModuleSupported
        {
            add
            {
                HookHandler._beforeIsModuleSupported += value;
                HookHandler.HookIsModuleSupported();
            }
            remove => HookHandler._beforeIsModuleSupported -= value;
        }

        public static event Delegates.ShouldActivateModule_BeforeArgs ShouldActivateModule
        {
            add
            {
                HookHandler._beforeShouldActivateModule += value;
                HookHandler.HookShouldActivateModule();
            }
            remove => HookHandler._beforeShouldActivateModule -= value;
        }

        public static event Delegates.ActivateModule_BeforeArgs ActivateModule
        {
            add
            {
                HookHandler._beforeActivateModule += value;
                HookHandler.HookActivateModule();
            }
            remove => HookHandler._beforeActivateModule -= value;
        }

        public static event Delegates.Process_BeforeArgs Process
        {
            add
            {
                HookHandler._beforeProcess += value;
                HookHandler.HookProcess();
            }
            remove => HookHandler._beforeProcess -= value;
        }

        public static event Delegates.SendButtonEventToSelectedObject_BeforeArgs SendButtonEventToSelectedObject
        {
            add
            {
                HookHandler._beforeSendButtonEventToSelectedObject += value;
                HookHandler.HookSendButtonEventToSelectedObject();
            }
            remove => HookHandler._beforeSendButtonEventToSelectedObject -= value;
        }

        public static event Delegates.SendVectorEventToSelectedObject_BeforeArgs SendVectorEventToSelectedObject
        {
            add
            {
                HookHandler._beforeSendVectorEventToSelectedObject += value;
                HookHandler.HookSendVectorEventToSelectedObject();
            }
            remove => HookHandler._beforeSendVectorEventToSelectedObject -= value;
        }

        public static event Delegates.ProcessMove_BeforeArgs ProcessMove
        {
            add
            {
                HookHandler._beforeProcessMove += value;
                HookHandler.HookProcessMove();
            }
            remove => HookHandler._beforeProcessMove -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.UpdateInputState_BeforeArgs UpdateInputState
        {
            add
            {
                HookHandler._beforeUpdateInputState += value;
                HookHandler.HookUpdateInputState();
            }
            remove => HookHandler._beforeUpdateInputState -= value;
        }

        public static event Delegates.set_Device_BeforeArgs set_Device
        {
            add
            {
                HookHandler._beforeset_Device += value;
                HookHandler.Hookset_Device();
            }
            remove => HookHandler._beforeset_Device -= value;
        }

        public static event Delegates.get_Device_BeforeArgs get_Device
        {
            add
            {
                HookHandler._beforeget_Device += value;
                HookHandler.Hookget_Device();
            }
            remove => HookHandler._beforeget_Device -= value;
        }

        public static event Delegates.SetVectorRepeatTimer_BeforeArgs SetVectorRepeatTimer
        {
            add
            {
                HookHandler._beforeSetVectorRepeatTimer += value;
                HookHandler.HookSetVectorRepeatTimer();
            }
            remove => HookHandler._beforeSetVectorRepeatTimer -= value;
        }

        public static event Delegates.get_VectorIsPressed_BeforeArgs get_VectorIsPressed
        {
            add
            {
                HookHandler._beforeget_VectorIsPressed += value;
                HookHandler.Hookget_VectorIsPressed();
            }
            remove => HookHandler._beforeget_VectorIsPressed -= value;
        }

        public static event Delegates.get_VectorIsReleased_BeforeArgs get_VectorIsReleased
        {
            add
            {
                HookHandler._beforeget_VectorIsReleased += value;
                HookHandler.Hookget_VectorIsReleased();
            }
            remove => HookHandler._beforeget_VectorIsReleased -= value;
        }

        public static event Delegates.get_VectorHasChanged_BeforeArgs get_VectorHasChanged
        {
            add
            {
                HookHandler._beforeget_VectorHasChanged += value;
                HookHandler.Hookget_VectorHasChanged();
            }
            remove => HookHandler._beforeget_VectorHasChanged -= value;
        }

        public static event Delegates.get_VectorWasPressed_BeforeArgs get_VectorWasPressed
        {
            add
            {
                HookHandler._beforeget_VectorWasPressed += value;
                HookHandler.Hookget_VectorWasPressed();
            }
            remove => HookHandler._beforeget_VectorWasPressed -= value;
        }

        public static event Delegates.get_MouseHasMoved_BeforeArgs get_MouseHasMoved
        {
            add
            {
                HookHandler._beforeget_MouseHasMoved += value;
                HookHandler.Hookget_MouseHasMoved();
            }
            remove => HookHandler._beforeget_MouseHasMoved -= value;
        }

        public static event Delegates.get_MouseButtonIsPressed_BeforeArgs get_MouseButtonIsPressed
        {
            add
            {
                HookHandler._beforeget_MouseButtonIsPressed += value;
                HookHandler.Hookget_MouseButtonIsPressed();
            }
            remove => HookHandler._beforeget_MouseButtonIsPressed -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_SubmitAction_NormalArgs get_SubmitAction
        {
            add
            {
                HookHandler._afterget_SubmitAction += value;
                HookHandler.Hookget_SubmitAction();
            }
            remove => HookHandler._afterget_SubmitAction -= value;
        }

        public static event Delegates.set_SubmitAction_NormalArgs set_SubmitAction
        {
            add
            {
                HookHandler._afterset_SubmitAction += value;
                HookHandler.Hookset_SubmitAction();
            }
            remove => HookHandler._afterset_SubmitAction -= value;
        }

        public static event Delegates.get_CancelAction_NormalArgs get_CancelAction
        {
            add
            {
                HookHandler._afterget_CancelAction += value;
                HookHandler.Hookget_CancelAction();
            }
            remove => HookHandler._afterget_CancelAction -= value;
        }

        public static event Delegates.set_CancelAction_NormalArgs set_CancelAction
        {
            add
            {
                HookHandler._afterset_CancelAction += value;
                HookHandler.Hookset_CancelAction();
            }
            remove => HookHandler._afterset_CancelAction -= value;
        }

        public static event Delegates.get_JumpAction_NormalArgs get_JumpAction
        {
            add
            {
                HookHandler._afterget_JumpAction += value;
                HookHandler.Hookget_JumpAction();
            }
            remove => HookHandler._afterget_JumpAction -= value;
        }

        public static event Delegates.set_JumpAction_NormalArgs set_JumpAction
        {
            add
            {
                HookHandler._afterset_JumpAction += value;
                HookHandler.Hookset_JumpAction();
            }
            remove => HookHandler._afterset_JumpAction -= value;
        }

        public static event Delegates.get_CastAction_NormalArgs get_CastAction
        {
            add
            {
                HookHandler._afterget_CastAction += value;
                HookHandler.Hookget_CastAction();
            }
            remove => HookHandler._afterget_CastAction -= value;
        }

        public static event Delegates.set_CastAction_NormalArgs set_CastAction
        {
            add
            {
                HookHandler._afterset_CastAction += value;
                HookHandler.Hookset_CastAction();
            }
            remove => HookHandler._afterset_CastAction -= value;
        }

        public static event Delegates.get_AttackAction_NormalArgs get_AttackAction
        {
            add
            {
                HookHandler._afterget_AttackAction += value;
                HookHandler.Hookget_AttackAction();
            }
            remove => HookHandler._afterget_AttackAction -= value;
        }

        public static event Delegates.set_AttackAction_NormalArgs set_AttackAction
        {
            add
            {
                HookHandler._afterset_AttackAction += value;
                HookHandler.Hookset_AttackAction();
            }
            remove => HookHandler._afterset_AttackAction -= value;
        }

        public static event Delegates.get_MoveAction_NormalArgs get_MoveAction
        {
            add
            {
                HookHandler._afterget_MoveAction += value;
                HookHandler.Hookget_MoveAction();
            }
            remove => HookHandler._afterget_MoveAction -= value;
        }

        public static event Delegates.set_MoveAction_NormalArgs set_MoveAction
        {
            add
            {
                HookHandler._afterset_MoveAction += value;
                HookHandler.Hookset_MoveAction();
            }
            remove => HookHandler._afterset_MoveAction -= value;
        }

        public static event Delegates.UpdateModule_NormalArgs UpdateModule
        {
            add
            {
                HookHandler._afterUpdateModule += value;
                HookHandler.HookUpdateModule();
            }
            remove => HookHandler._afterUpdateModule -= value;
        }

        public static event Delegates.IsModuleSupported_NormalArgs IsModuleSupported
        {
            add
            {
                HookHandler._afterIsModuleSupported += value;
                HookHandler.HookIsModuleSupported();
            }
            remove => HookHandler._afterIsModuleSupported -= value;
        }

        public static event Delegates.ShouldActivateModule_NormalArgs ShouldActivateModule
        {
            add
            {
                HookHandler._afterShouldActivateModule += value;
                HookHandler.HookShouldActivateModule();
            }
            remove => HookHandler._afterShouldActivateModule -= value;
        }

        public static event Delegates.ActivateModule_NormalArgs ActivateModule
        {
            add
            {
                HookHandler._afterActivateModule += value;
                HookHandler.HookActivateModule();
            }
            remove => HookHandler._afterActivateModule -= value;
        }

        public static event Delegates.Process_NormalArgs Process
        {
            add
            {
                HookHandler._afterProcess += value;
                HookHandler.HookProcess();
            }
            remove => HookHandler._afterProcess -= value;
        }

        public static event Delegates.SendButtonEventToSelectedObject_NormalArgs SendButtonEventToSelectedObject
        {
            add
            {
                HookHandler._afterSendButtonEventToSelectedObject += value;
                HookHandler.HookSendButtonEventToSelectedObject();
            }
            remove => HookHandler._afterSendButtonEventToSelectedObject -= value;
        }

        public static event Delegates.SendVectorEventToSelectedObject_NormalArgs SendVectorEventToSelectedObject
        {
            add
            {
                HookHandler._afterSendVectorEventToSelectedObject += value;
                HookHandler.HookSendVectorEventToSelectedObject();
            }
            remove => HookHandler._afterSendVectorEventToSelectedObject -= value;
        }

        public static event Delegates.ProcessMove_NormalArgs ProcessMove
        {
            add
            {
                HookHandler._afterProcessMove += value;
                HookHandler.HookProcessMove();
            }
            remove => HookHandler._afterProcessMove -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.UpdateInputState_NormalArgs UpdateInputState
        {
            add
            {
                HookHandler._afterUpdateInputState += value;
                HookHandler.HookUpdateInputState();
            }
            remove => HookHandler._afterUpdateInputState -= value;
        }

        public static event Delegates.set_Device_NormalArgs set_Device
        {
            add
            {
                HookHandler._afterset_Device += value;
                HookHandler.Hookset_Device();
            }
            remove => HookHandler._afterset_Device -= value;
        }

        public static event Delegates.get_Device_NormalArgs get_Device
        {
            add
            {
                HookHandler._afterget_Device += value;
                HookHandler.Hookget_Device();
            }
            remove => HookHandler._afterget_Device -= value;
        }

        public static event Delegates.SetVectorRepeatTimer_NormalArgs SetVectorRepeatTimer
        {
            add
            {
                HookHandler._afterSetVectorRepeatTimer += value;
                HookHandler.HookSetVectorRepeatTimer();
            }
            remove => HookHandler._afterSetVectorRepeatTimer -= value;
        }

        public static event Delegates.get_VectorIsPressed_NormalArgs get_VectorIsPressed
        {
            add
            {
                HookHandler._afterget_VectorIsPressed += value;
                HookHandler.Hookget_VectorIsPressed();
            }
            remove => HookHandler._afterget_VectorIsPressed -= value;
        }

        public static event Delegates.get_VectorIsReleased_NormalArgs get_VectorIsReleased
        {
            add
            {
                HookHandler._afterget_VectorIsReleased += value;
                HookHandler.Hookget_VectorIsReleased();
            }
            remove => HookHandler._afterget_VectorIsReleased -= value;
        }

        public static event Delegates.get_VectorHasChanged_NormalArgs get_VectorHasChanged
        {
            add
            {
                HookHandler._afterget_VectorHasChanged += value;
                HookHandler.Hookget_VectorHasChanged();
            }
            remove => HookHandler._afterget_VectorHasChanged -= value;
        }

        public static event Delegates.get_VectorWasPressed_NormalArgs get_VectorWasPressed
        {
            add
            {
                HookHandler._afterget_VectorWasPressed += value;
                HookHandler.Hookget_VectorWasPressed();
            }
            remove => HookHandler._afterget_VectorWasPressed -= value;
        }

        public static event Delegates.get_MouseHasMoved_NormalArgs get_MouseHasMoved
        {
            add
            {
                HookHandler._afterget_MouseHasMoved += value;
                HookHandler.Hookget_MouseHasMoved();
            }
            remove => HookHandler._afterget_MouseHasMoved -= value;
        }

        public static event Delegates.get_MouseButtonIsPressed_NormalArgs get_MouseButtonIsPressed
        {
            add
            {
                HookHandler._afterget_MouseButtonIsPressed += value;
                HookHandler.Hookget_MouseButtonIsPressed();
            }
            remove => HookHandler._afterget_MouseButtonIsPressed -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_SubmitAction_NormalArgs get_SubmitAction
        {
            add => HookEndpointManager.Add<Delegates.get_SubmitAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_SubmitAction"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SubmitAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_SubmitAction"), value);
        }

        public static event Delegates.set_SubmitAction_NormalArgs set_SubmitAction
        {
            add => HookEndpointManager.Add<Delegates.set_SubmitAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "set_SubmitAction"), value);
            remove => HookEndpointManager.Remove<Delegates.set_SubmitAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "set_SubmitAction"), value);
        }

        public static event Delegates.get_CancelAction_NormalArgs get_CancelAction
        {
            add => HookEndpointManager.Add<Delegates.get_CancelAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_CancelAction"), value);
            remove => HookEndpointManager.Remove<Delegates.get_CancelAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_CancelAction"), value);
        }

        public static event Delegates.set_CancelAction_NormalArgs set_CancelAction
        {
            add => HookEndpointManager.Add<Delegates.set_CancelAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "set_CancelAction"), value);
            remove => HookEndpointManager.Remove<Delegates.set_CancelAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "set_CancelAction"), value);
        }

        public static event Delegates.get_JumpAction_NormalArgs get_JumpAction
        {
            add => HookEndpointManager.Add<Delegates.get_JumpAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_JumpAction"), value);
            remove => HookEndpointManager.Remove<Delegates.get_JumpAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_JumpAction"), value);
        }

        public static event Delegates.set_JumpAction_NormalArgs set_JumpAction
        {
            add => HookEndpointManager.Add<Delegates.set_JumpAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "set_JumpAction"), value);
            remove => HookEndpointManager.Remove<Delegates.set_JumpAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "set_JumpAction"), value);
        }

        public static event Delegates.get_CastAction_NormalArgs get_CastAction
        {
            add => HookEndpointManager.Add<Delegates.get_CastAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_CastAction"), value);
            remove => HookEndpointManager.Remove<Delegates.get_CastAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_CastAction"), value);
        }

        public static event Delegates.set_CastAction_NormalArgs set_CastAction
        {
            add => HookEndpointManager.Add<Delegates.set_CastAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "set_CastAction"), value);
            remove => HookEndpointManager.Remove<Delegates.set_CastAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "set_CastAction"), value);
        }

        public static event Delegates.get_AttackAction_NormalArgs get_AttackAction
        {
            add => HookEndpointManager.Add<Delegates.get_AttackAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_AttackAction"), value);
            remove => HookEndpointManager.Remove<Delegates.get_AttackAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_AttackAction"), value);
        }

        public static event Delegates.set_AttackAction_NormalArgs set_AttackAction
        {
            add => HookEndpointManager.Add<Delegates.set_AttackAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "set_AttackAction"), value);
            remove => HookEndpointManager.Remove<Delegates.set_AttackAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "set_AttackAction"), value);
        }

        public static event Delegates.get_MoveAction_NormalArgs get_MoveAction
        {
            add => HookEndpointManager.Add<Delegates.get_MoveAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_MoveAction"), value);
            remove => HookEndpointManager.Remove<Delegates.get_MoveAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_MoveAction"), value);
        }

        public static event Delegates.set_MoveAction_NormalArgs set_MoveAction
        {
            add => HookEndpointManager.Add<Delegates.set_MoveAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "set_MoveAction"), value);
            remove => HookEndpointManager.Remove<Delegates.set_MoveAction_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "set_MoveAction"), value);
        }

        public static event Delegates.UpdateModule_NormalArgs UpdateModule
        {
            add => HookEndpointManager.Add<Delegates.UpdateModule_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "UpdateModule"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateModule_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "UpdateModule"), value);
        }

        public static event Delegates.IsModuleSupported_NormalArgs IsModuleSupported
        {
            add => HookEndpointManager.Add<Delegates.IsModuleSupported_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "IsModuleSupported"), value);
            remove => HookEndpointManager.Remove<Delegates.IsModuleSupported_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "IsModuleSupported"), value);
        }

        public static event Delegates.ShouldActivateModule_NormalArgs ShouldActivateModule
        {
            add => HookEndpointManager.Add<Delegates.ShouldActivateModule_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "ShouldActivateModule"), value);
            remove => HookEndpointManager.Remove<Delegates.ShouldActivateModule_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "ShouldActivateModule"), value);
        }

        public static event Delegates.ActivateModule_NormalArgs ActivateModule
        {
            add => HookEndpointManager.Add<Delegates.ActivateModule_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "ActivateModule"), value);
            remove => HookEndpointManager.Remove<Delegates.ActivateModule_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "ActivateModule"), value);
        }

        public static event Delegates.Process_NormalArgs Process
        {
            add => HookEndpointManager.Add<Delegates.Process_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "Process"), value);
            remove => HookEndpointManager.Remove<Delegates.Process_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "Process"), value);
        }

        public static event Delegates.SendButtonEventToSelectedObject_NormalArgs SendButtonEventToSelectedObject
        {
            add => HookEndpointManager.Add<Delegates.SendButtonEventToSelectedObject_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "SendButtonEventToSelectedObject"),
                value);
            remove => HookEndpointManager.Remove<Delegates.SendButtonEventToSelectedObject_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "SendButtonEventToSelectedObject"),
                value);
        }

        public static event Delegates.SendVectorEventToSelectedObject_NormalArgs SendVectorEventToSelectedObject
        {
            add => HookEndpointManager.Add<Delegates.SendVectorEventToSelectedObject_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "SendVectorEventToSelectedObject"),
                value);
            remove => HookEndpointManager.Remove<Delegates.SendVectorEventToSelectedObject_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "SendVectorEventToSelectedObject"),
                value);
        }

        public static event Delegates.ProcessMove_NormalArgs ProcessMove
        {
            add => HookEndpointManager.Add<Delegates.ProcessMove_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "ProcessMove"), value);
            remove => HookEndpointManager.Remove<Delegates.ProcessMove_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "ProcessMove"), value);
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add => HookEndpointManager.Add<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "Update"), value);
            remove => HookEndpointManager.Remove<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "Update"), value);
        }

        public static event Delegates.UpdateInputState_NormalArgs UpdateInputState
        {
            add => HookEndpointManager.Add<Delegates.UpdateInputState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "UpdateInputState"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateInputState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "UpdateInputState"), value);
        }

        public static event Delegates.set_Device_NormalArgs set_Device
        {
            add => HookEndpointManager.Add<Delegates.set_Device_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "set_Device"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Device_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "set_Device"), value);
        }

        public static event Delegates.get_Device_NormalArgs get_Device
        {
            add => HookEndpointManager.Add<Delegates.get_Device_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_Device"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Device_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_Device"), value);
        }

        public static event Delegates.SetVectorRepeatTimer_NormalArgs SetVectorRepeatTimer
        {
            add => HookEndpointManager.Add<Delegates.SetVectorRepeatTimer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "SetVectorRepeatTimer"), value);
            remove => HookEndpointManager.Remove<Delegates.SetVectorRepeatTimer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "SetVectorRepeatTimer"), value);
        }

        public static event Delegates.get_VectorIsPressed_NormalArgs get_VectorIsPressed
        {
            add => HookEndpointManager.Add<Delegates.get_VectorIsPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_VectorIsPressed"), value);
            remove => HookEndpointManager.Remove<Delegates.get_VectorIsPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_VectorIsPressed"), value);
        }

        public static event Delegates.get_VectorIsReleased_NormalArgs get_VectorIsReleased
        {
            add => HookEndpointManager.Add<Delegates.get_VectorIsReleased_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_VectorIsReleased"), value);
            remove => HookEndpointManager.Remove<Delegates.get_VectorIsReleased_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_VectorIsReleased"), value);
        }

        public static event Delegates.get_VectorHasChanged_NormalArgs get_VectorHasChanged
        {
            add => HookEndpointManager.Add<Delegates.get_VectorHasChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_VectorHasChanged"), value);
            remove => HookEndpointManager.Remove<Delegates.get_VectorHasChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_VectorHasChanged"), value);
        }

        public static event Delegates.get_VectorWasPressed_NormalArgs get_VectorWasPressed
        {
            add => HookEndpointManager.Add<Delegates.get_VectorWasPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_VectorWasPressed"), value);
            remove => HookEndpointManager.Remove<Delegates.get_VectorWasPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_VectorWasPressed"), value);
        }

        public static event Delegates.get_MouseHasMoved_NormalArgs get_MouseHasMoved
        {
            add => HookEndpointManager.Add<Delegates.get_MouseHasMoved_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_MouseHasMoved"), value);
            remove => HookEndpointManager.Remove<Delegates.get_MouseHasMoved_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_MouseHasMoved"), value);
        }

        public static event Delegates.get_MouseButtonIsPressed_NormalArgs get_MouseButtonIsPressed
        {
            add => HookEndpointManager.Add<Delegates.get_MouseButtonIsPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_MouseButtonIsPressed"), value);
            remove => HookEndpointManager.Remove<Delegates.get_MouseButtonIsPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HollowKnightInputModule), "get_MouseButtonIsPressed"), value);
        }
    }
}