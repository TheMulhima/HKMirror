using Modding.Delegates;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for OnReceiveDeathEventHandler class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnOnReceiveDeathEventHandler
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookInvoke()
        {
            if (!HookedList.Contains("Invoke"))
            {
                HookedList.Add("Invoke");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OnReceiveDeathEventHandler), "Invoke"), Invoke);
            }
        }

        internal static event Delegates.Invoke_BeforeArgs _beforeInvoke;
        internal static event Delegates.Invoke_AfterArgs _afterInvoke;

        private static void Invoke(
            Action<OnReceiveDeathEventHandler, EnemyDeathEffects, bool, float?, bool, bool, bool> orig,
            OnReceiveDeathEventHandler self, EnemyDeathEffects enemyDeathEffects, bool eventAlreadyReceived,
            float? attackDirection, bool resetDeathEvent, bool spellBurn, bool isWatery)
        {
            Delegates.Params_Invoke @params = new()
            {
                self = self, enemyDeathEffects = enemyDeathEffects, eventAlreadyReceived = eventAlreadyReceived,
                attackDirection = attackDirection, resetDeathEvent = resetDeathEvent, spellBurn = spellBurn,
                isWatery = isWatery
            };
            if (_beforeInvoke != null)
                foreach (Delegates.Invoke_BeforeArgs toInvoke in _beforeInvoke.GetInvocationList())
                    try
                    {
                        _beforeInvoke?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            enemyDeathEffects = @params.enemyDeathEffects;
            eventAlreadyReceived = @params.eventAlreadyReceived;
            attackDirection = @params.attackDirection;
            resetDeathEvent = @params.resetDeathEvent;
            spellBurn = @params.spellBurn;
            isWatery = @params.isWatery;
            orig(self, enemyDeathEffects, eventAlreadyReceived, attackDirection, resetDeathEvent, spellBurn, isWatery);
            if (_afterInvoke != null)
                foreach (Delegates.Invoke_AfterArgs toInvoke in _afterInvoke.GetInvocationList())
                    try
                    {
                        _afterInvoke.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookEndInvoke()
        {
            if (!HookedList.Contains("EndInvoke"))
            {
                HookedList.Add("EndInvoke");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OnReceiveDeathEventHandler), "EndInvoke"), EndInvoke);
            }
        }

        internal static event Delegates.EndInvoke_BeforeArgs _beforeEndInvoke;
        internal static event Delegates.EndInvoke_AfterArgs _afterEndInvoke;

        private static void EndInvoke(Action<OnReceiveDeathEventHandler, float?, bool, bool, bool, IAsyncResult> orig,
            OnReceiveDeathEventHandler self, float? attackDirection, bool resetDeathEvent, bool spellBurn,
            bool isWatery, IAsyncResult result)
        {
            Delegates.Params_EndInvoke @params = new()
            {
                self = self, attackDirection = attackDirection, resetDeathEvent = resetDeathEvent,
                spellBurn = spellBurn, isWatery = isWatery, result = result
            };
            if (_beforeEndInvoke != null)
                foreach (Delegates.EndInvoke_BeforeArgs toInvoke in _beforeEndInvoke.GetInvocationList())
                    try
                    {
                        _beforeEndInvoke?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            attackDirection = @params.attackDirection;
            resetDeathEvent = @params.resetDeathEvent;
            spellBurn = @params.spellBurn;
            isWatery = @params.isWatery;
            result = @params.result;
            orig(self, attackDirection, resetDeathEvent, spellBurn, isWatery, result);
            if (_afterEndInvoke != null)
                foreach (Delegates.EndInvoke_AfterArgs toInvoke in _afterEndInvoke.GetInvocationList())
                    try
                    {
                        _afterEndInvoke.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void EndInvoke_AfterArgs(Params_EndInvoke args);

        public delegate void EndInvoke_BeforeArgs(Params_EndInvoke args);

        public delegate void EndInvoke_WithArgs(
            Action<OnReceiveDeathEventHandler, float?, bool, bool, bool, IAsyncResult> orig,
            OnReceiveDeathEventHandler self, float? attackDirection, bool resetDeathEvent, bool spellBurn,
            bool isWatery, IAsyncResult result);

        public delegate void Invoke_AfterArgs(Params_Invoke args);

        public delegate void Invoke_BeforeArgs(Params_Invoke args);

        public delegate void Invoke_WithArgs(
            Action<OnReceiveDeathEventHandler, EnemyDeathEffects, bool, float?, bool, bool, bool> orig,
            OnReceiveDeathEventHandler self, EnemyDeathEffects enemyDeathEffects, bool eventAlreadyReceived,
            float? attackDirection, bool resetDeathEvent, bool spellBurn, bool isWatery);

        public sealed class Params_Invoke
        {
            public float? attackDirection;
            public EnemyDeathEffects enemyDeathEffects;
            public bool eventAlreadyReceived;
            public bool isWatery;
            public bool resetDeathEvent;
            public OnReceiveDeathEventHandler self;
            public bool spellBurn;
        }

        public sealed class Params_EndInvoke
        {
            public float? attackDirection;
            public bool isWatery;
            public bool resetDeathEvent;
            public IAsyncResult result;
            public OnReceiveDeathEventHandler self;
            public bool spellBurn;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Invoke_BeforeArgs Invoke
        {
            add
            {
                HookHandler._beforeInvoke += value;
                HookHandler.HookInvoke();
            }
            remove => HookHandler._beforeInvoke -= value;
        }

        public static event Delegates.EndInvoke_BeforeArgs EndInvoke
        {
            add
            {
                HookHandler._beforeEndInvoke += value;
                HookHandler.HookEndInvoke();
            }
            remove => HookHandler._beforeEndInvoke -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Invoke_AfterArgs Invoke
        {
            add
            {
                HookHandler._afterInvoke += value;
                HookHandler.HookInvoke();
            }
            remove => HookHandler._afterInvoke -= value;
        }

        public static event Delegates.EndInvoke_AfterArgs EndInvoke
        {
            add
            {
                HookHandler._afterEndInvoke += value;
                HookHandler.HookEndInvoke();
            }
            remove => HookHandler._afterEndInvoke -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Invoke_WithArgs Invoke
        {
            add => HookEndpointManager.Add<Delegates.Invoke_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OnReceiveDeathEventHandler), "Invoke"), value);
            remove => HookEndpointManager.Remove<Delegates.Invoke_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OnReceiveDeathEventHandler), "Invoke"), value);
        }

        public static event Delegates.EndInvoke_WithArgs EndInvoke
        {
            add => HookEndpointManager.Add<Delegates.EndInvoke_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OnReceiveDeathEventHandler), "EndInvoke"), value);
            remove => HookEndpointManager.Remove<Delegates.EndInvoke_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OnReceiveDeathEventHandler), "EndInvoke"), value);
        }
    }
}