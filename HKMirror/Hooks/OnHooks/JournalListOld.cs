namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for JournalListOld class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnJournalListOld
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.JournalListOld.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.JournalListOld.orig_Start orig, JournalListOld self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookBuildItemList()
        {
            if (!HookedList.Contains("BuildItemList"))
            {
                HookedList.Add("BuildItemList");
                On.JournalListOld.BuildItemList += BuildItemList;
            }
        }

        internal static event Delegates.BuildItemList_BeforeArgs _beforeBuildItemList;
        internal static event Delegates.BuildItemList_AfterArgs _afterBuildItemList;

        private static void BuildItemList(On.JournalListOld.orig_BuildItemList orig, JournalListOld self)
        {
            Delegates.Params_BuildItemList @params = new()
            {
                self = self
            };
            if (_beforeBuildItemList != null)
                foreach (Delegates.BuildItemList_BeforeArgs toInvoke in _beforeBuildItemList.GetInvocationList())
                    try
                    {
                        _beforeBuildItemList?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterBuildItemList != null)
                foreach (Delegates.BuildItemList_AfterArgs toInvoke in _afterBuildItemList.GetInvocationList())
                    try
                    {
                        _afterBuildItemList.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetItemCount()
        {
            if (!HookedList.Contains("GetItemCount"))
            {
                HookedList.Add("GetItemCount");
                On.JournalListOld.GetItemCount += GetItemCount;
            }
        }

        internal static event Delegates.GetItemCount_BeforeArgs _beforeGetItemCount;
        internal static event Delegates.GetItemCount_AfterArgs _afterGetItemCount;

        private static int GetItemCount(On.JournalListOld.orig_GetItemCount orig, JournalListOld self)
        {
            Delegates.Params_GetItemCount @params = new()
            {
                self = self
            };
            if (_beforeGetItemCount != null)
                foreach (Delegates.GetItemCount_BeforeArgs toInvoke in _beforeGetItemCount.GetInvocationList())
                    try
                    {
                        _beforeGetItemCount?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetItemCount != null)
                foreach (Delegates.GetItemCount_AfterArgs toInvoke in _afterGetItemCount.GetInvocationList())
                    try
                    {
                        retVal = _afterGetItemCount.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetNameConvo()
        {
            if (!HookedList.Contains("GetNameConvo"))
            {
                HookedList.Add("GetNameConvo");
                On.JournalListOld.GetNameConvo += GetNameConvo;
            }
        }

        internal static event Delegates.GetNameConvo_BeforeArgs _beforeGetNameConvo;
        internal static event Delegates.GetNameConvo_AfterArgs _afterGetNameConvo;

        private static string GetNameConvo(On.JournalListOld.orig_GetNameConvo orig, JournalListOld self, int itemNum)
        {
            Delegates.Params_GetNameConvo @params = new()
            {
                self = self, itemNum = itemNum
            };
            if (_beforeGetNameConvo != null)
                foreach (Delegates.GetNameConvo_BeforeArgs toInvoke in _beforeGetNameConvo.GetInvocationList())
                    try
                    {
                        _beforeGetNameConvo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetNameConvo != null)
                foreach (Delegates.GetNameConvo_AfterArgs toInvoke in _afterGetNameConvo.GetInvocationList())
                    try
                    {
                        retVal = _afterGetNameConvo.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetDescConvo()
        {
            if (!HookedList.Contains("GetDescConvo"))
            {
                HookedList.Add("GetDescConvo");
                On.JournalListOld.GetDescConvo += GetDescConvo;
            }
        }

        internal static event Delegates.GetDescConvo_BeforeArgs _beforeGetDescConvo;
        internal static event Delegates.GetDescConvo_AfterArgs _afterGetDescConvo;

        private static string GetDescConvo(On.JournalListOld.orig_GetDescConvo orig, JournalListOld self, int itemNum)
        {
            Delegates.Params_GetDescConvo @params = new()
            {
                self = self, itemNum = itemNum
            };
            if (_beforeGetDescConvo != null)
                foreach (Delegates.GetDescConvo_BeforeArgs toInvoke in _beforeGetDescConvo.GetInvocationList())
                    try
                    {
                        _beforeGetDescConvo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetDescConvo != null)
                foreach (Delegates.GetDescConvo_AfterArgs toInvoke in _afterGetDescConvo.GetInvocationList())
                    try
                    {
                        retVal = _afterGetDescConvo.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetWarriorGhost()
        {
            if (!HookedList.Contains("GetWarriorGhost"))
            {
                HookedList.Add("GetWarriorGhost");
                On.JournalListOld.GetWarriorGhost += GetWarriorGhost;
            }
        }

        internal static event Delegates.GetWarriorGhost_BeforeArgs _beforeGetWarriorGhost;
        internal static event Delegates.GetWarriorGhost_AfterArgs _afterGetWarriorGhost;

        private static bool GetWarriorGhost(On.JournalListOld.orig_GetWarriorGhost orig, JournalListOld self,
            int itemNum)
        {
            Delegates.Params_GetWarriorGhost @params = new()
            {
                self = self, itemNum = itemNum
            };
            if (_beforeGetWarriorGhost != null)
                foreach (Delegates.GetWarriorGhost_BeforeArgs toInvoke in _beforeGetWarriorGhost.GetInvocationList())
                    try
                    {
                        _beforeGetWarriorGhost?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetWarriorGhost != null)
                foreach (Delegates.GetWarriorGhost_AfterArgs toInvoke in _afterGetWarriorGhost.GetInvocationList())
                    try
                    {
                        retVal = _afterGetWarriorGhost.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetNotesConvo()
        {
            if (!HookedList.Contains("GetNotesConvo"))
            {
                HookedList.Add("GetNotesConvo");
                On.JournalListOld.GetNotesConvo += GetNotesConvo;
            }
        }

        internal static event Delegates.GetNotesConvo_BeforeArgs _beforeGetNotesConvo;
        internal static event Delegates.GetNotesConvo_AfterArgs _afterGetNotesConvo;

        private static string GetNotesConvo(On.JournalListOld.orig_GetNotesConvo orig, JournalListOld self, int itemNum)
        {
            Delegates.Params_GetNotesConvo @params = new()
            {
                self = self, itemNum = itemNum
            };
            if (_beforeGetNotesConvo != null)
                foreach (Delegates.GetNotesConvo_BeforeArgs toInvoke in _beforeGetNotesConvo.GetInvocationList())
                    try
                    {
                        _beforeGetNotesConvo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetNotesConvo != null)
                foreach (Delegates.GetNotesConvo_AfterArgs toInvoke in _afterGetNotesConvo.GetInvocationList())
                    try
                    {
                        retVal = _afterGetNotesConvo.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetPlayerDataBoolName()
        {
            if (!HookedList.Contains("GetPlayerDataBoolName"))
            {
                HookedList.Add("GetPlayerDataBoolName");
                On.JournalListOld.GetPlayerDataBoolName += GetPlayerDataBoolName;
            }
        }

        internal static event Delegates.GetPlayerDataBoolName_BeforeArgs _beforeGetPlayerDataBoolName;
        internal static event Delegates.GetPlayerDataBoolName_AfterArgs _afterGetPlayerDataBoolName;

        private static string GetPlayerDataBoolName(On.JournalListOld.orig_GetPlayerDataBoolName orig,
            JournalListOld self, int itemNum)
        {
            Delegates.Params_GetPlayerDataBoolName @params = new()
            {
                self = self, itemNum = itemNum
            };
            if (_beforeGetPlayerDataBoolName != null)
                foreach (Delegates.GetPlayerDataBoolName_BeforeArgs toInvoke in _beforeGetPlayerDataBoolName
                             .GetInvocationList())
                    try
                    {
                        _beforeGetPlayerDataBoolName?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetPlayerDataBoolName != null)
                foreach (Delegates.GetPlayerDataBoolName_AfterArgs toInvoke in _afterGetPlayerDataBoolName
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetPlayerDataBoolName.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetPlayerDataKillsName()
        {
            if (!HookedList.Contains("GetPlayerDataKillsName"))
            {
                HookedList.Add("GetPlayerDataKillsName");
                On.JournalListOld.GetPlayerDataKillsName += GetPlayerDataKillsName;
            }
        }

        internal static event Delegates.GetPlayerDataKillsName_BeforeArgs _beforeGetPlayerDataKillsName;
        internal static event Delegates.GetPlayerDataKillsName_AfterArgs _afterGetPlayerDataKillsName;

        private static string GetPlayerDataKillsName(On.JournalListOld.orig_GetPlayerDataKillsName orig,
            JournalListOld self, int itemNum)
        {
            Delegates.Params_GetPlayerDataKillsName @params = new()
            {
                self = self, itemNum = itemNum
            };
            if (_beforeGetPlayerDataKillsName != null)
                foreach (Delegates.GetPlayerDataKillsName_BeforeArgs toInvoke in _beforeGetPlayerDataKillsName
                             .GetInvocationList())
                    try
                    {
                        _beforeGetPlayerDataKillsName?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetPlayerDataKillsName != null)
                foreach (Delegates.GetPlayerDataKillsName_AfterArgs toInvoke in _afterGetPlayerDataKillsName
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetPlayerDataKillsName.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetPlayerDataNewDataName()
        {
            if (!HookedList.Contains("GetPlayerDataNewDataName"))
            {
                HookedList.Add("GetPlayerDataNewDataName");
                On.JournalListOld.GetPlayerDataNewDataName += GetPlayerDataNewDataName;
            }
        }

        internal static event Delegates.GetPlayerDataNewDataName_BeforeArgs _beforeGetPlayerDataNewDataName;
        internal static event Delegates.GetPlayerDataNewDataName_AfterArgs _afterGetPlayerDataNewDataName;

        private static string GetPlayerDataNewDataName(On.JournalListOld.orig_GetPlayerDataNewDataName orig,
            JournalListOld self, int itemNum)
        {
            Delegates.Params_GetPlayerDataNewDataName @params = new()
            {
                self = self, itemNum = itemNum
            };
            if (_beforeGetPlayerDataNewDataName != null)
                foreach (Delegates.GetPlayerDataNewDataName_BeforeArgs toInvoke in _beforeGetPlayerDataNewDataName
                             .GetInvocationList())
                    try
                    {
                        _beforeGetPlayerDataNewDataName?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetPlayerDataNewDataName != null)
                foreach (Delegates.GetPlayerDataNewDataName_AfterArgs toInvoke in _afterGetPlayerDataNewDataName
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetPlayerDataNewDataName.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetSprite()
        {
            if (!HookedList.Contains("GetSprite"))
            {
                HookedList.Add("GetSprite");
                On.JournalListOld.GetSprite += GetSprite;
            }
        }

        internal static event Delegates.GetSprite_BeforeArgs _beforeGetSprite;
        internal static event Delegates.GetSprite_AfterArgs _afterGetSprite;

        private static Sprite GetSprite(On.JournalListOld.orig_GetSprite orig, JournalListOld self, int itemNum)
        {
            Delegates.Params_GetSprite @params = new()
            {
                self = self, itemNum = itemNum
            };
            if (_beforeGetSprite != null)
                foreach (Delegates.GetSprite_BeforeArgs toInvoke in _beforeGetSprite.GetInvocationList())
                    try
                    {
                        _beforeGetSprite?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetSprite != null)
                foreach (Delegates.GetSprite_AfterArgs toInvoke in _afterGetSprite.GetInvocationList())
                    try
                    {
                        retVal = _afterGetSprite.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetYDistance()
        {
            if (!HookedList.Contains("GetYDistance"))
            {
                HookedList.Add("GetYDistance");
                On.JournalListOld.GetYDistance += GetYDistance;
            }
        }

        internal static event Delegates.GetYDistance_BeforeArgs _beforeGetYDistance;
        internal static event Delegates.GetYDistance_AfterArgs _afterGetYDistance;

        private static float GetYDistance(On.JournalListOld.orig_GetYDistance orig, JournalListOld self)
        {
            Delegates.Params_GetYDistance @params = new()
            {
                self = self
            };
            if (_beforeGetYDistance != null)
                foreach (Delegates.GetYDistance_BeforeArgs toInvoke in _beforeGetYDistance.GetInvocationList())
                    try
                    {
                        _beforeGetYDistance?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetYDistance != null)
                foreach (Delegates.GetYDistance_AfterArgs toInvoke in _afterGetYDistance.GetInvocationList())
                    try
                    {
                        retVal = _afterGetYDistance.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetFirstNewItem()
        {
            if (!HookedList.Contains("GetFirstNewItem"))
            {
                HookedList.Add("GetFirstNewItem");
                On.JournalListOld.GetFirstNewItem += GetFirstNewItem;
            }
        }

        internal static event Delegates.GetFirstNewItem_BeforeArgs _beforeGetFirstNewItem;
        internal static event Delegates.GetFirstNewItem_AfterArgs _afterGetFirstNewItem;

        private static int GetFirstNewItem(On.JournalListOld.orig_GetFirstNewItem orig, JournalListOld self)
        {
            Delegates.Params_GetFirstNewItem @params = new()
            {
                self = self
            };
            if (_beforeGetFirstNewItem != null)
                foreach (Delegates.GetFirstNewItem_BeforeArgs toInvoke in _beforeGetFirstNewItem.GetInvocationList())
                    try
                    {
                        _beforeGetFirstNewItem?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetFirstNewItem != null)
                foreach (Delegates.GetFirstNewItem_AfterArgs toInvoke in _afterGetFirstNewItem.GetInvocationList())
                    try
                    {
                        retVal = _afterGetFirstNewItem.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void BuildItemList_AfterArgs(Params_BuildItemList args);

        public delegate void BuildItemList_BeforeArgs(Params_BuildItemList args);

        public delegate void BuildItemList_WithArgs(Action<JournalListOld> orig, JournalListOld self);

        public delegate string GetDescConvo_AfterArgs(Params_GetDescConvo args, string ret);

        public delegate void GetDescConvo_BeforeArgs(Params_GetDescConvo args);

        public delegate string GetDescConvo_WithArgs(Func<JournalListOld, int, string> orig, JournalListOld self,
            int itemNum);

        public delegate int GetFirstNewItem_AfterArgs(Params_GetFirstNewItem args, int ret);

        public delegate void GetFirstNewItem_BeforeArgs(Params_GetFirstNewItem args);

        public delegate int GetFirstNewItem_WithArgs(Func<JournalListOld, int> orig, JournalListOld self);

        public delegate int GetItemCount_AfterArgs(Params_GetItemCount args, int ret);

        public delegate void GetItemCount_BeforeArgs(Params_GetItemCount args);

        public delegate int GetItemCount_WithArgs(Func<JournalListOld, int> orig, JournalListOld self);

        public delegate string GetNameConvo_AfterArgs(Params_GetNameConvo args, string ret);

        public delegate void GetNameConvo_BeforeArgs(Params_GetNameConvo args);

        public delegate string GetNameConvo_WithArgs(Func<JournalListOld, int, string> orig, JournalListOld self,
            int itemNum);

        public delegate string GetNotesConvo_AfterArgs(Params_GetNotesConvo args, string ret);

        public delegate void GetNotesConvo_BeforeArgs(Params_GetNotesConvo args);

        public delegate string GetNotesConvo_WithArgs(Func<JournalListOld, int, string> orig, JournalListOld self,
            int itemNum);

        public delegate string GetPlayerDataBoolName_AfterArgs(Params_GetPlayerDataBoolName args, string ret);

        public delegate void GetPlayerDataBoolName_BeforeArgs(Params_GetPlayerDataBoolName args);

        public delegate string GetPlayerDataBoolName_WithArgs(Func<JournalListOld, int, string> orig,
            JournalListOld self, int itemNum);

        public delegate string GetPlayerDataKillsName_AfterArgs(Params_GetPlayerDataKillsName args, string ret);

        public delegate void GetPlayerDataKillsName_BeforeArgs(Params_GetPlayerDataKillsName args);

        public delegate string GetPlayerDataKillsName_WithArgs(Func<JournalListOld, int, string> orig,
            JournalListOld self, int itemNum);

        public delegate string GetPlayerDataNewDataName_AfterArgs(Params_GetPlayerDataNewDataName args, string ret);

        public delegate void GetPlayerDataNewDataName_BeforeArgs(Params_GetPlayerDataNewDataName args);

        public delegate string GetPlayerDataNewDataName_WithArgs(Func<JournalListOld, int, string> orig,
            JournalListOld self, int itemNum);

        public delegate Sprite GetSprite_AfterArgs(Params_GetSprite args, Sprite ret);

        public delegate void GetSprite_BeforeArgs(Params_GetSprite args);

        public delegate Sprite GetSprite_WithArgs(Func<JournalListOld, int, Sprite> orig, JournalListOld self,
            int itemNum);

        public delegate bool GetWarriorGhost_AfterArgs(Params_GetWarriorGhost args, bool ret);

        public delegate void GetWarriorGhost_BeforeArgs(Params_GetWarriorGhost args);

        public delegate bool GetWarriorGhost_WithArgs(Func<JournalListOld, int, bool> orig, JournalListOld self,
            int itemNum);

        public delegate float GetYDistance_AfterArgs(Params_GetYDistance args, float ret);

        public delegate void GetYDistance_BeforeArgs(Params_GetYDistance args);

        public delegate float GetYDistance_WithArgs(Func<JournalListOld, float> orig, JournalListOld self);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<JournalListOld> orig, JournalListOld self);

        public sealed class Params_Start
        {
            public JournalListOld self;
        }

        public sealed class Params_BuildItemList
        {
            public JournalListOld self;
        }

        public sealed class Params_GetItemCount
        {
            public JournalListOld self;
        }

        public sealed class Params_GetNameConvo
        {
            public int itemNum;
            public JournalListOld self;
        }

        public sealed class Params_GetDescConvo
        {
            public int itemNum;
            public JournalListOld self;
        }

        public sealed class Params_GetWarriorGhost
        {
            public int itemNum;
            public JournalListOld self;
        }

        public sealed class Params_GetNotesConvo
        {
            public int itemNum;
            public JournalListOld self;
        }

        public sealed class Params_GetPlayerDataBoolName
        {
            public int itemNum;
            public JournalListOld self;
        }

        public sealed class Params_GetPlayerDataKillsName
        {
            public int itemNum;
            public JournalListOld self;
        }

        public sealed class Params_GetPlayerDataNewDataName
        {
            public int itemNum;
            public JournalListOld self;
        }

        public sealed class Params_GetSprite
        {
            public int itemNum;
            public JournalListOld self;
        }

        public sealed class Params_GetYDistance
        {
            public JournalListOld self;
        }

        public sealed class Params_GetFirstNewItem
        {
            public JournalListOld self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.BuildItemList_BeforeArgs BuildItemList
        {
            add
            {
                HookHandler._beforeBuildItemList += value;
                HookHandler.HookBuildItemList();
            }
            remove => HookHandler._beforeBuildItemList -= value;
        }

        public static event Delegates.GetItemCount_BeforeArgs GetItemCount
        {
            add
            {
                HookHandler._beforeGetItemCount += value;
                HookHandler.HookGetItemCount();
            }
            remove => HookHandler._beforeGetItemCount -= value;
        }

        public static event Delegates.GetNameConvo_BeforeArgs GetNameConvo
        {
            add
            {
                HookHandler._beforeGetNameConvo += value;
                HookHandler.HookGetNameConvo();
            }
            remove => HookHandler._beforeGetNameConvo -= value;
        }

        public static event Delegates.GetDescConvo_BeforeArgs GetDescConvo
        {
            add
            {
                HookHandler._beforeGetDescConvo += value;
                HookHandler.HookGetDescConvo();
            }
            remove => HookHandler._beforeGetDescConvo -= value;
        }

        public static event Delegates.GetWarriorGhost_BeforeArgs GetWarriorGhost
        {
            add
            {
                HookHandler._beforeGetWarriorGhost += value;
                HookHandler.HookGetWarriorGhost();
            }
            remove => HookHandler._beforeGetWarriorGhost -= value;
        }

        public static event Delegates.GetNotesConvo_BeforeArgs GetNotesConvo
        {
            add
            {
                HookHandler._beforeGetNotesConvo += value;
                HookHandler.HookGetNotesConvo();
            }
            remove => HookHandler._beforeGetNotesConvo -= value;
        }

        public static event Delegates.GetPlayerDataBoolName_BeforeArgs GetPlayerDataBoolName
        {
            add
            {
                HookHandler._beforeGetPlayerDataBoolName += value;
                HookHandler.HookGetPlayerDataBoolName();
            }
            remove => HookHandler._beforeGetPlayerDataBoolName -= value;
        }

        public static event Delegates.GetPlayerDataKillsName_BeforeArgs GetPlayerDataKillsName
        {
            add
            {
                HookHandler._beforeGetPlayerDataKillsName += value;
                HookHandler.HookGetPlayerDataKillsName();
            }
            remove => HookHandler._beforeGetPlayerDataKillsName -= value;
        }

        public static event Delegates.GetPlayerDataNewDataName_BeforeArgs GetPlayerDataNewDataName
        {
            add
            {
                HookHandler._beforeGetPlayerDataNewDataName += value;
                HookHandler.HookGetPlayerDataNewDataName();
            }
            remove => HookHandler._beforeGetPlayerDataNewDataName -= value;
        }

        public static event Delegates.GetSprite_BeforeArgs GetSprite
        {
            add
            {
                HookHandler._beforeGetSprite += value;
                HookHandler.HookGetSprite();
            }
            remove => HookHandler._beforeGetSprite -= value;
        }

        public static event Delegates.GetYDistance_BeforeArgs GetYDistance
        {
            add
            {
                HookHandler._beforeGetYDistance += value;
                HookHandler.HookGetYDistance();
            }
            remove => HookHandler._beforeGetYDistance -= value;
        }

        public static event Delegates.GetFirstNewItem_BeforeArgs GetFirstNewItem
        {
            add
            {
                HookHandler._beforeGetFirstNewItem += value;
                HookHandler.HookGetFirstNewItem();
            }
            remove => HookHandler._beforeGetFirstNewItem -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.BuildItemList_AfterArgs BuildItemList
        {
            add
            {
                HookHandler._afterBuildItemList += value;
                HookHandler.HookBuildItemList();
            }
            remove => HookHandler._afterBuildItemList -= value;
        }

        public static event Delegates.GetItemCount_AfterArgs GetItemCount
        {
            add
            {
                HookHandler._afterGetItemCount += value;
                HookHandler.HookGetItemCount();
            }
            remove => HookHandler._afterGetItemCount -= value;
        }

        public static event Delegates.GetNameConvo_AfterArgs GetNameConvo
        {
            add
            {
                HookHandler._afterGetNameConvo += value;
                HookHandler.HookGetNameConvo();
            }
            remove => HookHandler._afterGetNameConvo -= value;
        }

        public static event Delegates.GetDescConvo_AfterArgs GetDescConvo
        {
            add
            {
                HookHandler._afterGetDescConvo += value;
                HookHandler.HookGetDescConvo();
            }
            remove => HookHandler._afterGetDescConvo -= value;
        }

        public static event Delegates.GetWarriorGhost_AfterArgs GetWarriorGhost
        {
            add
            {
                HookHandler._afterGetWarriorGhost += value;
                HookHandler.HookGetWarriorGhost();
            }
            remove => HookHandler._afterGetWarriorGhost -= value;
        }

        public static event Delegates.GetNotesConvo_AfterArgs GetNotesConvo
        {
            add
            {
                HookHandler._afterGetNotesConvo += value;
                HookHandler.HookGetNotesConvo();
            }
            remove => HookHandler._afterGetNotesConvo -= value;
        }

        public static event Delegates.GetPlayerDataBoolName_AfterArgs GetPlayerDataBoolName
        {
            add
            {
                HookHandler._afterGetPlayerDataBoolName += value;
                HookHandler.HookGetPlayerDataBoolName();
            }
            remove => HookHandler._afterGetPlayerDataBoolName -= value;
        }

        public static event Delegates.GetPlayerDataKillsName_AfterArgs GetPlayerDataKillsName
        {
            add
            {
                HookHandler._afterGetPlayerDataKillsName += value;
                HookHandler.HookGetPlayerDataKillsName();
            }
            remove => HookHandler._afterGetPlayerDataKillsName -= value;
        }

        public static event Delegates.GetPlayerDataNewDataName_AfterArgs GetPlayerDataNewDataName
        {
            add
            {
                HookHandler._afterGetPlayerDataNewDataName += value;
                HookHandler.HookGetPlayerDataNewDataName();
            }
            remove => HookHandler._afterGetPlayerDataNewDataName -= value;
        }

        public static event Delegates.GetSprite_AfterArgs GetSprite
        {
            add
            {
                HookHandler._afterGetSprite += value;
                HookHandler.HookGetSprite();
            }
            remove => HookHandler._afterGetSprite -= value;
        }

        public static event Delegates.GetYDistance_AfterArgs GetYDistance
        {
            add
            {
                HookHandler._afterGetYDistance += value;
                HookHandler.HookGetYDistance();
            }
            remove => HookHandler._afterGetYDistance -= value;
        }

        public static event Delegates.GetFirstNewItem_AfterArgs GetFirstNewItem
        {
            add
            {
                HookHandler._afterGetFirstNewItem += value;
                HookHandler.HookGetFirstNewItem();
            }
            remove => HookHandler._afterGetFirstNewItem -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.JournalListOld.hook_Start Start
        {
            add => On.JournalListOld.Start += value;
            remove => On.JournalListOld.Start -= value;
        }

        public static event On.JournalListOld.hook_BuildItemList BuildItemList
        {
            add => On.JournalListOld.BuildItemList += value;
            remove => On.JournalListOld.BuildItemList -= value;
        }

        public static event On.JournalListOld.hook_GetItemCount GetItemCount
        {
            add => On.JournalListOld.GetItemCount += value;
            remove => On.JournalListOld.GetItemCount -= value;
        }

        public static event On.JournalListOld.hook_GetNameConvo GetNameConvo
        {
            add => On.JournalListOld.GetNameConvo += value;
            remove => On.JournalListOld.GetNameConvo -= value;
        }

        public static event On.JournalListOld.hook_GetDescConvo GetDescConvo
        {
            add => On.JournalListOld.GetDescConvo += value;
            remove => On.JournalListOld.GetDescConvo -= value;
        }

        public static event On.JournalListOld.hook_GetWarriorGhost GetWarriorGhost
        {
            add => On.JournalListOld.GetWarriorGhost += value;
            remove => On.JournalListOld.GetWarriorGhost -= value;
        }

        public static event On.JournalListOld.hook_GetNotesConvo GetNotesConvo
        {
            add => On.JournalListOld.GetNotesConvo += value;
            remove => On.JournalListOld.GetNotesConvo -= value;
        }

        public static event On.JournalListOld.hook_GetPlayerDataBoolName GetPlayerDataBoolName
        {
            add => On.JournalListOld.GetPlayerDataBoolName += value;
            remove => On.JournalListOld.GetPlayerDataBoolName -= value;
        }

        public static event On.JournalListOld.hook_GetPlayerDataKillsName GetPlayerDataKillsName
        {
            add => On.JournalListOld.GetPlayerDataKillsName += value;
            remove => On.JournalListOld.GetPlayerDataKillsName -= value;
        }

        public static event On.JournalListOld.hook_GetPlayerDataNewDataName GetPlayerDataNewDataName
        {
            add => On.JournalListOld.GetPlayerDataNewDataName += value;
            remove => On.JournalListOld.GetPlayerDataNewDataName -= value;
        }

        public static event On.JournalListOld.hook_GetSprite GetSprite
        {
            add => On.JournalListOld.GetSprite += value;
            remove => On.JournalListOld.GetSprite -= value;
        }

        public static event On.JournalListOld.hook_GetYDistance GetYDistance
        {
            add => On.JournalListOld.GetYDistance += value;
            remove => On.JournalListOld.GetYDistance -= value;
        }

        public static event On.JournalListOld.hook_GetFirstNewItem GetFirstNewItem
        {
            add => On.JournalListOld.GetFirstNewItem += value;
            remove => On.JournalListOld.GetFirstNewItem -= value;
        }
    }
}