using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for JournalEntryStats class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnJournalEntryStats
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.JournalEntryStats.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.JournalEntryStats.orig_Awake orig,JournalEntryStats self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
On.JournalEntryStats.OnEnable += OnEnable;

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(On.JournalEntryStats.orig_OnEnable orig,JournalEntryStats self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDisable()
{
if (!HookedList.Contains("OnDisable"))
{
HookedList.Add("OnDisable");
On.JournalEntryStats.OnDisable += OnDisable;

}
}
internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;
private static void OnDisable(On.JournalEntryStats.orig_OnDisable orig,JournalEntryStats self)
{
Delegates.Params_OnDisable @params = new() 
{
self = self
};
if (_beforeOnDisable != null)
{
foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
{
try
{
_beforeOnDisable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDisable != null)
{
foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
{
try
{
_afterOnDisable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdate()
{
if (!HookedList.Contains("Update"))
{
HookedList.Add("Update");
On.JournalEntryStats.Update += Update;

}
}
internal static event Delegates.Update_BeforeArgs _beforeUpdate;
internal static event Delegates.Update_AfterArgs _afterUpdate;
private static void Update(On.JournalEntryStats.orig_Update orig,JournalEntryStats self)
{
Delegates.Params_Update @params = new() 
{
self = self
};
if (_beforeUpdate != null)
{
foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
{
try
{
_beforeUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdate != null)
{
foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
{
try
{
_afterUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetNameConvo()
{
if (!HookedList.Contains("GetNameConvo"))
{
HookedList.Add("GetNameConvo");
On.JournalEntryStats.GetNameConvo += GetNameConvo;

}
}
internal static event Delegates.GetNameConvo_BeforeArgs _beforeGetNameConvo;
internal static event Delegates.GetNameConvo_AfterArgs _afterGetNameConvo;
private static string GetNameConvo(On.JournalEntryStats.orig_GetNameConvo orig,JournalEntryStats self)
{
Delegates.Params_GetNameConvo @params = new() 
{
self = self
};
if (_beforeGetNameConvo != null)
{
foreach (Delegates.GetNameConvo_BeforeArgs toInvoke in _beforeGetNameConvo.GetInvocationList())
{
try
{
_beforeGetNameConvo?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetNameConvo != null)
{
foreach (Delegates.GetNameConvo_AfterArgs toInvoke in _afterGetNameConvo.GetInvocationList())
{
try
{
retVal = _afterGetNameConvo.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetDescConvo()
{
if (!HookedList.Contains("GetDescConvo"))
{
HookedList.Add("GetDescConvo");
On.JournalEntryStats.GetDescConvo += GetDescConvo;

}
}
internal static event Delegates.GetDescConvo_BeforeArgs _beforeGetDescConvo;
internal static event Delegates.GetDescConvo_AfterArgs _afterGetDescConvo;
private static string GetDescConvo(On.JournalEntryStats.orig_GetDescConvo orig,JournalEntryStats self)
{
Delegates.Params_GetDescConvo @params = new() 
{
self = self
};
if (_beforeGetDescConvo != null)
{
foreach (Delegates.GetDescConvo_BeforeArgs toInvoke in _beforeGetDescConvo.GetInvocationList())
{
try
{
_beforeGetDescConvo?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetDescConvo != null)
{
foreach (Delegates.GetDescConvo_AfterArgs toInvoke in _afterGetDescConvo.GetInvocationList())
{
try
{
retVal = _afterGetDescConvo.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetNotesConvo()
{
if (!HookedList.Contains("GetNotesConvo"))
{
HookedList.Add("GetNotesConvo");
On.JournalEntryStats.GetNotesConvo += GetNotesConvo;

}
}
internal static event Delegates.GetNotesConvo_BeforeArgs _beforeGetNotesConvo;
internal static event Delegates.GetNotesConvo_AfterArgs _afterGetNotesConvo;
private static string GetNotesConvo(On.JournalEntryStats.orig_GetNotesConvo orig,JournalEntryStats self)
{
Delegates.Params_GetNotesConvo @params = new() 
{
self = self
};
if (_beforeGetNotesConvo != null)
{
foreach (Delegates.GetNotesConvo_BeforeArgs toInvoke in _beforeGetNotesConvo.GetInvocationList())
{
try
{
_beforeGetNotesConvo?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetNotesConvo != null)
{
foreach (Delegates.GetNotesConvo_AfterArgs toInvoke in _afterGetNotesConvo.GetInvocationList())
{
try
{
retVal = _afterGetNotesConvo.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetPlayerDataBoolName()
{
if (!HookedList.Contains("GetPlayerDataBoolName"))
{
HookedList.Add("GetPlayerDataBoolName");
On.JournalEntryStats.GetPlayerDataBoolName += GetPlayerDataBoolName;

}
}
internal static event Delegates.GetPlayerDataBoolName_BeforeArgs _beforeGetPlayerDataBoolName;
internal static event Delegates.GetPlayerDataBoolName_AfterArgs _afterGetPlayerDataBoolName;
private static string GetPlayerDataBoolName(On.JournalEntryStats.orig_GetPlayerDataBoolName orig,JournalEntryStats self)
{
Delegates.Params_GetPlayerDataBoolName @params = new() 
{
self = self
};
if (_beforeGetPlayerDataBoolName != null)
{
foreach (Delegates.GetPlayerDataBoolName_BeforeArgs toInvoke in _beforeGetPlayerDataBoolName.GetInvocationList())
{
try
{
_beforeGetPlayerDataBoolName?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetPlayerDataBoolName != null)
{
foreach (Delegates.GetPlayerDataBoolName_AfterArgs toInvoke in _afterGetPlayerDataBoolName.GetInvocationList())
{
try
{
retVal = _afterGetPlayerDataBoolName.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetPlayerDataKillsName()
{
if (!HookedList.Contains("GetPlayerDataKillsName"))
{
HookedList.Add("GetPlayerDataKillsName");
On.JournalEntryStats.GetPlayerDataKillsName += GetPlayerDataKillsName;

}
}
internal static event Delegates.GetPlayerDataKillsName_BeforeArgs _beforeGetPlayerDataKillsName;
internal static event Delegates.GetPlayerDataKillsName_AfterArgs _afterGetPlayerDataKillsName;
private static string GetPlayerDataKillsName(On.JournalEntryStats.orig_GetPlayerDataKillsName orig,JournalEntryStats self)
{
Delegates.Params_GetPlayerDataKillsName @params = new() 
{
self = self
};
if (_beforeGetPlayerDataKillsName != null)
{
foreach (Delegates.GetPlayerDataKillsName_BeforeArgs toInvoke in _beforeGetPlayerDataKillsName.GetInvocationList())
{
try
{
_beforeGetPlayerDataKillsName?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetPlayerDataKillsName != null)
{
foreach (Delegates.GetPlayerDataKillsName_AfterArgs toInvoke in _afterGetPlayerDataKillsName.GetInvocationList())
{
try
{
retVal = _afterGetPlayerDataKillsName.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetPlayerDataNewDataName()
{
if (!HookedList.Contains("GetPlayerDataNewDataName"))
{
HookedList.Add("GetPlayerDataNewDataName");
On.JournalEntryStats.GetPlayerDataNewDataName += GetPlayerDataNewDataName;

}
}
internal static event Delegates.GetPlayerDataNewDataName_BeforeArgs _beforeGetPlayerDataNewDataName;
internal static event Delegates.GetPlayerDataNewDataName_AfterArgs _afterGetPlayerDataNewDataName;
private static string GetPlayerDataNewDataName(On.JournalEntryStats.orig_GetPlayerDataNewDataName orig,JournalEntryStats self)
{
Delegates.Params_GetPlayerDataNewDataName @params = new() 
{
self = self
};
if (_beforeGetPlayerDataNewDataName != null)
{
foreach (Delegates.GetPlayerDataNewDataName_BeforeArgs toInvoke in _beforeGetPlayerDataNewDataName.GetInvocationList())
{
try
{
_beforeGetPlayerDataNewDataName?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetPlayerDataNewDataName != null)
{
foreach (Delegates.GetPlayerDataNewDataName_AfterArgs toInvoke in _afterGetPlayerDataNewDataName.GetInvocationList())
{
try
{
retVal = _afterGetPlayerDataNewDataName.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetItemNumber()
{
if (!HookedList.Contains("GetItemNumber"))
{
HookedList.Add("GetItemNumber");
On.JournalEntryStats.GetItemNumber += GetItemNumber;

}
}
internal static event Delegates.GetItemNumber_BeforeArgs _beforeGetItemNumber;
internal static event Delegates.GetItemNumber_AfterArgs _afterGetItemNumber;
private static int GetItemNumber(On.JournalEntryStats.orig_GetItemNumber orig,JournalEntryStats self)
{
Delegates.Params_GetItemNumber @params = new() 
{
self = self
};
if (_beforeGetItemNumber != null)
{
foreach (Delegates.GetItemNumber_BeforeArgs toInvoke in _beforeGetItemNumber.GetInvocationList())
{
try
{
_beforeGetItemNumber?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetItemNumber != null)
{
foreach (Delegates.GetItemNumber_AfterArgs toInvoke in _afterGetItemNumber.GetInvocationList())
{
try
{
retVal = _afterGetItemNumber.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetSprite()
{
if (!HookedList.Contains("GetSprite"))
{
HookedList.Add("GetSprite");
On.JournalEntryStats.GetSprite += GetSprite;

}
}
internal static event Delegates.GetSprite_BeforeArgs _beforeGetSprite;
internal static event Delegates.GetSprite_AfterArgs _afterGetSprite;
private static UnityEngine.Sprite GetSprite(On.JournalEntryStats.orig_GetSprite orig,JournalEntryStats self)
{
Delegates.Params_GetSprite @params = new() 
{
self = self
};
if (_beforeGetSprite != null)
{
foreach (Delegates.GetSprite_BeforeArgs toInvoke in _beforeGetSprite.GetInvocationList())
{
try
{
_beforeGetSprite?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetSprite != null)
{
foreach (Delegates.GetSprite_AfterArgs toInvoke in _afterGetSprite.GetInvocationList())
{
try
{
retVal = _afterGetSprite.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetWarriorGhost()
{
if (!HookedList.Contains("GetWarriorGhost"))
{
HookedList.Add("GetWarriorGhost");
On.JournalEntryStats.GetWarriorGhost += GetWarriorGhost;

}
}
internal static event Delegates.GetWarriorGhost_BeforeArgs _beforeGetWarriorGhost;
internal static event Delegates.GetWarriorGhost_AfterArgs _afterGetWarriorGhost;
private static bool GetWarriorGhost(On.JournalEntryStats.orig_GetWarriorGhost orig,JournalEntryStats self)
{
Delegates.Params_GetWarriorGhost @params = new() 
{
self = self
};
if (_beforeGetWarriorGhost != null)
{
foreach (Delegates.GetWarriorGhost_BeforeArgs toInvoke in _beforeGetWarriorGhost.GetInvocationList())
{
try
{
_beforeGetWarriorGhost?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetWarriorGhost != null)
{
foreach (Delegates.GetWarriorGhost_AfterArgs toInvoke in _afterGetWarriorGhost.GetInvocationList())
{
try
{
retVal = _afterGetWarriorGhost.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetGrimm()
{
if (!HookedList.Contains("GetGrimm"))
{
HookedList.Add("GetGrimm");
On.JournalEntryStats.GetGrimm += GetGrimm;

}
}
internal static event Delegates.GetGrimm_BeforeArgs _beforeGetGrimm;
internal static event Delegates.GetGrimm_AfterArgs _afterGetGrimm;
private static bool GetGrimm(On.JournalEntryStats.orig_GetGrimm orig,JournalEntryStats self)
{
Delegates.Params_GetGrimm @params = new() 
{
self = self
};
if (_beforeGetGrimm != null)
{
foreach (Delegates.GetGrimm_BeforeArgs toInvoke in _beforeGetGrimm.GetInvocationList())
{
try
{
_beforeGetGrimm?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetGrimm != null)
{
foreach (Delegates.GetGrimm_AfterArgs toInvoke in _afterGetGrimm.GetInvocationList())
{
try
{
retVal = _afterGetGrimm.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Awake
{
public JournalEntryStats self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<JournalEntryStats> orig, JournalEntryStats self);
public sealed class Params_OnEnable
{
public JournalEntryStats self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<JournalEntryStats> orig, JournalEntryStats self);
public sealed class Params_OnDisable
{
public JournalEntryStats self;
}
public delegate void OnDisable_BeforeArgs(Params_OnDisable args);
public delegate void OnDisable_AfterArgs(Params_OnDisable args);
public delegate void OnDisable_WithArgs (Action<JournalEntryStats> orig, JournalEntryStats self);
public sealed class Params_Update
{
public JournalEntryStats self;
}
public delegate void Update_BeforeArgs(Params_Update args);
public delegate void Update_AfterArgs(Params_Update args);
public delegate void Update_WithArgs (Action<JournalEntryStats> orig, JournalEntryStats self);
public sealed class Params_GetNameConvo
{
public JournalEntryStats self;
}
public delegate void GetNameConvo_BeforeArgs(Params_GetNameConvo args);
public delegate string GetNameConvo_AfterArgs(Params_GetNameConvo args, string ret);
public delegate string GetNameConvo_WithArgs (Func<JournalEntryStats, string> orig, JournalEntryStats self);
public sealed class Params_GetDescConvo
{
public JournalEntryStats self;
}
public delegate void GetDescConvo_BeforeArgs(Params_GetDescConvo args);
public delegate string GetDescConvo_AfterArgs(Params_GetDescConvo args, string ret);
public delegate string GetDescConvo_WithArgs (Func<JournalEntryStats, string> orig, JournalEntryStats self);
public sealed class Params_GetNotesConvo
{
public JournalEntryStats self;
}
public delegate void GetNotesConvo_BeforeArgs(Params_GetNotesConvo args);
public delegate string GetNotesConvo_AfterArgs(Params_GetNotesConvo args, string ret);
public delegate string GetNotesConvo_WithArgs (Func<JournalEntryStats, string> orig, JournalEntryStats self);
public sealed class Params_GetPlayerDataBoolName
{
public JournalEntryStats self;
}
public delegate void GetPlayerDataBoolName_BeforeArgs(Params_GetPlayerDataBoolName args);
public delegate string GetPlayerDataBoolName_AfterArgs(Params_GetPlayerDataBoolName args, string ret);
public delegate string GetPlayerDataBoolName_WithArgs (Func<JournalEntryStats, string> orig, JournalEntryStats self);
public sealed class Params_GetPlayerDataKillsName
{
public JournalEntryStats self;
}
public delegate void GetPlayerDataKillsName_BeforeArgs(Params_GetPlayerDataKillsName args);
public delegate string GetPlayerDataKillsName_AfterArgs(Params_GetPlayerDataKillsName args, string ret);
public delegate string GetPlayerDataKillsName_WithArgs (Func<JournalEntryStats, string> orig, JournalEntryStats self);
public sealed class Params_GetPlayerDataNewDataName
{
public JournalEntryStats self;
}
public delegate void GetPlayerDataNewDataName_BeforeArgs(Params_GetPlayerDataNewDataName args);
public delegate string GetPlayerDataNewDataName_AfterArgs(Params_GetPlayerDataNewDataName args, string ret);
public delegate string GetPlayerDataNewDataName_WithArgs (Func<JournalEntryStats, string> orig, JournalEntryStats self);
public sealed class Params_GetItemNumber
{
public JournalEntryStats self;
}
public delegate void GetItemNumber_BeforeArgs(Params_GetItemNumber args);
public delegate int GetItemNumber_AfterArgs(Params_GetItemNumber args, int ret);
public delegate int GetItemNumber_WithArgs (Func<JournalEntryStats, int> orig, JournalEntryStats self);
public sealed class Params_GetSprite
{
public JournalEntryStats self;
}
public delegate void GetSprite_BeforeArgs(Params_GetSprite args);
public delegate UnityEngine.Sprite GetSprite_AfterArgs(Params_GetSprite args, UnityEngine.Sprite ret);
public delegate UnityEngine.Sprite GetSprite_WithArgs (Func<JournalEntryStats, UnityEngine.Sprite> orig, JournalEntryStats self);
public sealed class Params_GetWarriorGhost
{
public JournalEntryStats self;
}
public delegate void GetWarriorGhost_BeforeArgs(Params_GetWarriorGhost args);
public delegate bool GetWarriorGhost_AfterArgs(Params_GetWarriorGhost args, bool ret);
public delegate bool GetWarriorGhost_WithArgs (Func<JournalEntryStats, bool> orig, JournalEntryStats self);
public sealed class Params_GetGrimm
{
public JournalEntryStats self;
}
public delegate void GetGrimm_BeforeArgs(Params_GetGrimm args);
public delegate bool GetGrimm_AfterArgs(Params_GetGrimm args, bool ret);
public delegate bool GetGrimm_WithArgs (Func<JournalEntryStats, bool> orig, JournalEntryStats self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.OnDisable_BeforeArgs OnDisable
{
add
{

HookHandler._beforeOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._beforeOnDisable -= value;
}
public static event Delegates.Update_BeforeArgs Update
{
add
{

HookHandler._beforeUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._beforeUpdate -= value;
}
public static event Delegates.GetNameConvo_BeforeArgs GetNameConvo
{
add
{

HookHandler._beforeGetNameConvo += value;
HookHandler.HookGetNameConvo();
}
remove => HookHandler._beforeGetNameConvo -= value;
}
public static event Delegates.GetDescConvo_BeforeArgs GetDescConvo
{
add
{

HookHandler._beforeGetDescConvo += value;
HookHandler.HookGetDescConvo();
}
remove => HookHandler._beforeGetDescConvo -= value;
}
public static event Delegates.GetNotesConvo_BeforeArgs GetNotesConvo
{
add
{

HookHandler._beforeGetNotesConvo += value;
HookHandler.HookGetNotesConvo();
}
remove => HookHandler._beforeGetNotesConvo -= value;
}
public static event Delegates.GetPlayerDataBoolName_BeforeArgs GetPlayerDataBoolName
{
add
{

HookHandler._beforeGetPlayerDataBoolName += value;
HookHandler.HookGetPlayerDataBoolName();
}
remove => HookHandler._beforeGetPlayerDataBoolName -= value;
}
public static event Delegates.GetPlayerDataKillsName_BeforeArgs GetPlayerDataKillsName
{
add
{

HookHandler._beforeGetPlayerDataKillsName += value;
HookHandler.HookGetPlayerDataKillsName();
}
remove => HookHandler._beforeGetPlayerDataKillsName -= value;
}
public static event Delegates.GetPlayerDataNewDataName_BeforeArgs GetPlayerDataNewDataName
{
add
{

HookHandler._beforeGetPlayerDataNewDataName += value;
HookHandler.HookGetPlayerDataNewDataName();
}
remove => HookHandler._beforeGetPlayerDataNewDataName -= value;
}
public static event Delegates.GetItemNumber_BeforeArgs GetItemNumber
{
add
{

HookHandler._beforeGetItemNumber += value;
HookHandler.HookGetItemNumber();
}
remove => HookHandler._beforeGetItemNumber -= value;
}
public static event Delegates.GetSprite_BeforeArgs GetSprite
{
add
{

HookHandler._beforeGetSprite += value;
HookHandler.HookGetSprite();
}
remove => HookHandler._beforeGetSprite -= value;
}
public static event Delegates.GetWarriorGhost_BeforeArgs GetWarriorGhost
{
add
{

HookHandler._beforeGetWarriorGhost += value;
HookHandler.HookGetWarriorGhost();
}
remove => HookHandler._beforeGetWarriorGhost -= value;
}
public static event Delegates.GetGrimm_BeforeArgs GetGrimm
{
add
{

HookHandler._beforeGetGrimm += value;
HookHandler.HookGetGrimm();
}
remove => HookHandler._beforeGetGrimm -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.OnDisable_AfterArgs OnDisable
{
add
{

HookHandler._afterOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._afterOnDisable -= value;
}
public static event Delegates.Update_AfterArgs Update
{
add
{

HookHandler._afterUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._afterUpdate -= value;
}
public static event Delegates.GetNameConvo_AfterArgs GetNameConvo
{
add
{

HookHandler._afterGetNameConvo += value;
HookHandler.HookGetNameConvo();
}
remove => HookHandler._afterGetNameConvo -= value;
}
public static event Delegates.GetDescConvo_AfterArgs GetDescConvo
{
add
{

HookHandler._afterGetDescConvo += value;
HookHandler.HookGetDescConvo();
}
remove => HookHandler._afterGetDescConvo -= value;
}
public static event Delegates.GetNotesConvo_AfterArgs GetNotesConvo
{
add
{

HookHandler._afterGetNotesConvo += value;
HookHandler.HookGetNotesConvo();
}
remove => HookHandler._afterGetNotesConvo -= value;
}
public static event Delegates.GetPlayerDataBoolName_AfterArgs GetPlayerDataBoolName
{
add
{

HookHandler._afterGetPlayerDataBoolName += value;
HookHandler.HookGetPlayerDataBoolName();
}
remove => HookHandler._afterGetPlayerDataBoolName -= value;
}
public static event Delegates.GetPlayerDataKillsName_AfterArgs GetPlayerDataKillsName
{
add
{

HookHandler._afterGetPlayerDataKillsName += value;
HookHandler.HookGetPlayerDataKillsName();
}
remove => HookHandler._afterGetPlayerDataKillsName -= value;
}
public static event Delegates.GetPlayerDataNewDataName_AfterArgs GetPlayerDataNewDataName
{
add
{

HookHandler._afterGetPlayerDataNewDataName += value;
HookHandler.HookGetPlayerDataNewDataName();
}
remove => HookHandler._afterGetPlayerDataNewDataName -= value;
}
public static event Delegates.GetItemNumber_AfterArgs GetItemNumber
{
add
{

HookHandler._afterGetItemNumber += value;
HookHandler.HookGetItemNumber();
}
remove => HookHandler._afterGetItemNumber -= value;
}
public static event Delegates.GetSprite_AfterArgs GetSprite
{
add
{

HookHandler._afterGetSprite += value;
HookHandler.HookGetSprite();
}
remove => HookHandler._afterGetSprite -= value;
}
public static event Delegates.GetWarriorGhost_AfterArgs GetWarriorGhost
{
add
{

HookHandler._afterGetWarriorGhost += value;
HookHandler.HookGetWarriorGhost();
}
remove => HookHandler._afterGetWarriorGhost -= value;
}
public static event Delegates.GetGrimm_AfterArgs GetGrimm
{
add
{

HookHandler._afterGetGrimm += value;
HookHandler.HookGetGrimm();
}
remove => HookHandler._afterGetGrimm -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.JournalEntryStats.hook_Awake Awake
{
add => On.JournalEntryStats.Awake += value;
remove => On.JournalEntryStats.Awake -= value;
}
public static event On.JournalEntryStats.hook_OnEnable OnEnable
{
add => On.JournalEntryStats.OnEnable += value;
remove => On.JournalEntryStats.OnEnable -= value;
}
public static event On.JournalEntryStats.hook_OnDisable OnDisable
{
add => On.JournalEntryStats.OnDisable += value;
remove => On.JournalEntryStats.OnDisable -= value;
}
public static event On.JournalEntryStats.hook_Update Update
{
add => On.JournalEntryStats.Update += value;
remove => On.JournalEntryStats.Update -= value;
}
public static event On.JournalEntryStats.hook_GetNameConvo GetNameConvo
{
add => On.JournalEntryStats.GetNameConvo += value;
remove => On.JournalEntryStats.GetNameConvo -= value;
}
public static event On.JournalEntryStats.hook_GetDescConvo GetDescConvo
{
add => On.JournalEntryStats.GetDescConvo += value;
remove => On.JournalEntryStats.GetDescConvo -= value;
}
public static event On.JournalEntryStats.hook_GetNotesConvo GetNotesConvo
{
add => On.JournalEntryStats.GetNotesConvo += value;
remove => On.JournalEntryStats.GetNotesConvo -= value;
}
public static event On.JournalEntryStats.hook_GetPlayerDataBoolName GetPlayerDataBoolName
{
add => On.JournalEntryStats.GetPlayerDataBoolName += value;
remove => On.JournalEntryStats.GetPlayerDataBoolName -= value;
}
public static event On.JournalEntryStats.hook_GetPlayerDataKillsName GetPlayerDataKillsName
{
add => On.JournalEntryStats.GetPlayerDataKillsName += value;
remove => On.JournalEntryStats.GetPlayerDataKillsName -= value;
}
public static event On.JournalEntryStats.hook_GetPlayerDataNewDataName GetPlayerDataNewDataName
{
add => On.JournalEntryStats.GetPlayerDataNewDataName += value;
remove => On.JournalEntryStats.GetPlayerDataNewDataName -= value;
}
public static event On.JournalEntryStats.hook_GetItemNumber GetItemNumber
{
add => On.JournalEntryStats.GetItemNumber += value;
remove => On.JournalEntryStats.GetItemNumber -= value;
}
public static event On.JournalEntryStats.hook_GetSprite GetSprite
{
add => On.JournalEntryStats.GetSprite += value;
remove => On.JournalEntryStats.GetSprite -= value;
}
public static event On.JournalEntryStats.hook_GetWarriorGhost GetWarriorGhost
{
add => On.JournalEntryStats.GetWarriorGhost += value;
remove => On.JournalEntryStats.GetWarriorGhost -= value;
}
public static event On.JournalEntryStats.hook_GetGrimm GetGrimm
{
add => On.JournalEntryStats.GetGrimm += value;
remove => On.JournalEntryStats.GetGrimm -= value;
}
}

}
