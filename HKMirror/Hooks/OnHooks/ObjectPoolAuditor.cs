namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ObjectPoolAuditor class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnObjectPoolAuditor
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookRecordPoolCreated()
        {
            if (!HookedList.Contains("RecordPoolCreated"))
            {
                HookedList.Add("RecordPoolCreated");
                On.ObjectPoolAuditor.RecordPoolCreated += RecordPoolCreated;
            }
        }

        internal static event Delegates.RecordPoolCreated_BeforeArgs _beforeRecordPoolCreated;
        internal static event Delegates.RecordPoolCreated_AfterArgs _afterRecordPoolCreated;

        private static void RecordPoolCreated(On.ObjectPoolAuditor.orig_RecordPoolCreated orig, GameObject prefab,
            int initialPoolSize)
        {
            Delegates.Params_RecordPoolCreated @params = new()
            {
                prefab = prefab, initialPoolSize = initialPoolSize
            };
            if (_beforeRecordPoolCreated != null)
                foreach (Delegates.RecordPoolCreated_BeforeArgs toInvoke in
                         _beforeRecordPoolCreated.GetInvocationList())
                    try
                    {
                        _beforeRecordPoolCreated?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            prefab = @params.prefab;
            initialPoolSize = @params.initialPoolSize;
            orig(prefab, initialPoolSize);
            if (_afterRecordPoolCreated != null)
                foreach (Delegates.RecordPoolCreated_AfterArgs toInvoke in _afterRecordPoolCreated.GetInvocationList())
                    try
                    {
                        _afterRecordPoolCreated.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRecordSpawned()
        {
            if (!HookedList.Contains("RecordSpawned"))
            {
                HookedList.Add("RecordSpawned");
                On.ObjectPoolAuditor.RecordSpawned += RecordSpawned;
            }
        }

        internal static event Delegates.RecordSpawned_BeforeArgs _beforeRecordSpawned;
        internal static event Delegates.RecordSpawned_AfterArgs _afterRecordSpawned;

        private static void RecordSpawned(On.ObjectPoolAuditor.orig_RecordSpawned orig, GameObject prefab,
            bool didInstantiate)
        {
            Delegates.Params_RecordSpawned @params = new()
            {
                prefab = prefab, didInstantiate = didInstantiate
            };
            if (_beforeRecordSpawned != null)
                foreach (Delegates.RecordSpawned_BeforeArgs toInvoke in _beforeRecordSpawned.GetInvocationList())
                    try
                    {
                        _beforeRecordSpawned?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            prefab = @params.prefab;
            didInstantiate = @params.didInstantiate;
            orig(prefab, didInstantiate);
            if (_afterRecordSpawned != null)
                foreach (Delegates.RecordSpawned_AfterArgs toInvoke in _afterRecordSpawned.GetInvocationList())
                    try
                    {
                        _afterRecordSpawned.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRecordDespawned()
        {
            if (!HookedList.Contains("RecordDespawned"))
            {
                HookedList.Add("RecordDespawned");
                On.ObjectPoolAuditor.RecordDespawned += RecordDespawned;
            }
        }

        internal static event Delegates.RecordDespawned_BeforeArgs _beforeRecordDespawned;
        internal static event Delegates.RecordDespawned_AfterArgs _afterRecordDespawned;

        private static void RecordDespawned(On.ObjectPoolAuditor.orig_RecordDespawned orig, GameObject instanceOrPrefab,
            bool willReuse)
        {
            Delegates.Params_RecordDespawned @params = new()
            {
                instanceOrPrefab = instanceOrPrefab, willReuse = willReuse
            };
            if (_beforeRecordDespawned != null)
                foreach (Delegates.RecordDespawned_BeforeArgs toInvoke in _beforeRecordDespawned.GetInvocationList())
                    try
                    {
                        _beforeRecordDespawned?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            instanceOrPrefab = @params.instanceOrPrefab;
            willReuse = @params.willReuse;
            orig(instanceOrPrefab, willReuse);
            if (_afterRecordDespawned != null)
                foreach (Delegates.RecordDespawned_AfterArgs toInvoke in _afterRecordDespawned.GetInvocationList())
                    try
                    {
                        _afterRecordDespawned.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void RecordDespawned_AfterArgs(Params_RecordDespawned args);

        public delegate void RecordDespawned_BeforeArgs(Params_RecordDespawned args);

        public delegate void RecordDespawned_WithArgs(Action<GameObject, bool> orig, GameObject instanceOrPrefab,
            bool willReuse);

        public delegate void RecordPoolCreated_AfterArgs(Params_RecordPoolCreated args);

        public delegate void RecordPoolCreated_BeforeArgs(Params_RecordPoolCreated args);

        public delegate void RecordPoolCreated_WithArgs(Action<GameObject, int> orig, GameObject prefab,
            int initialPoolSize);

        public delegate void RecordSpawned_AfterArgs(Params_RecordSpawned args);

        public delegate void RecordSpawned_BeforeArgs(Params_RecordSpawned args);

        public delegate void RecordSpawned_WithArgs(Action<GameObject, bool> orig, GameObject prefab,
            bool didInstantiate);

        public sealed class Params_RecordPoolCreated
        {
            public int initialPoolSize;
            public GameObject prefab;
        }

        public sealed class Params_RecordSpawned
        {
            public bool didInstantiate;
            public GameObject prefab;
        }

        public sealed class Params_RecordDespawned
        {
            public GameObject instanceOrPrefab;
            public bool willReuse;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.RecordPoolCreated_BeforeArgs RecordPoolCreated
        {
            add
            {
                HookHandler._beforeRecordPoolCreated += value;
                HookHandler.HookRecordPoolCreated();
            }
            remove => HookHandler._beforeRecordPoolCreated -= value;
        }

        public static event Delegates.RecordSpawned_BeforeArgs RecordSpawned
        {
            add
            {
                HookHandler._beforeRecordSpawned += value;
                HookHandler.HookRecordSpawned();
            }
            remove => HookHandler._beforeRecordSpawned -= value;
        }

        public static event Delegates.RecordDespawned_BeforeArgs RecordDespawned
        {
            add
            {
                HookHandler._beforeRecordDespawned += value;
                HookHandler.HookRecordDespawned();
            }
            remove => HookHandler._beforeRecordDespawned -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.RecordPoolCreated_AfterArgs RecordPoolCreated
        {
            add
            {
                HookHandler._afterRecordPoolCreated += value;
                HookHandler.HookRecordPoolCreated();
            }
            remove => HookHandler._afterRecordPoolCreated -= value;
        }

        public static event Delegates.RecordSpawned_AfterArgs RecordSpawned
        {
            add
            {
                HookHandler._afterRecordSpawned += value;
                HookHandler.HookRecordSpawned();
            }
            remove => HookHandler._afterRecordSpawned -= value;
        }

        public static event Delegates.RecordDespawned_AfterArgs RecordDespawned
        {
            add
            {
                HookHandler._afterRecordDespawned += value;
                HookHandler.HookRecordDespawned();
            }
            remove => HookHandler._afterRecordDespawned -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.ObjectPoolAuditor.hook_RecordPoolCreated RecordPoolCreated
        {
            add => On.ObjectPoolAuditor.RecordPoolCreated += value;
            remove => On.ObjectPoolAuditor.RecordPoolCreated -= value;
        }

        public static event On.ObjectPoolAuditor.hook_RecordSpawned RecordSpawned
        {
            add => On.ObjectPoolAuditor.RecordSpawned += value;
            remove => On.ObjectPoolAuditor.RecordSpawned -= value;
        }

        public static event On.ObjectPoolAuditor.hook_RecordDespawned RecordDespawned
        {
            add => On.ObjectPoolAuditor.RecordDespawned += value;
            remove => On.ObjectPoolAuditor.RecordDespawned -= value;
        }
    }
}