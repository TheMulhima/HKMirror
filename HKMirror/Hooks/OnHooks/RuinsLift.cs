namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for RuinsLift class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnRuinsLift
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.RuinsLift.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.RuinsLift.orig_Start orig, RuinsLift self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookHideChains()
        {
            if (!HookedList.Contains("HideChains"))
            {
                HookedList.Add("HideChains");
                On.RuinsLift.HideChains += HideChains;
            }
        }

        internal static event Delegates.HideChains_BeforeArgs _beforeHideChains;

        private static IEnumerator HideChains(On.RuinsLift.orig_HideChains orig, RuinsLift self)
        {
            Delegates.Params_HideChains @params = new()
            {
                self = self
            };
            _beforeHideChains?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookGetPositionY()
        {
            if (!HookedList.Contains("GetPositionY"))
            {
                HookedList.Add("GetPositionY");
                On.RuinsLift.GetPositionY += GetPositionY;
            }
        }

        internal static event Delegates.GetPositionY_BeforeArgs _beforeGetPositionY;
        internal static event Delegates.GetPositionY_NormalArgs _afterGetPositionY;

        private static float GetPositionY(On.RuinsLift.orig_GetPositionY orig, RuinsLift self, int position)
        {
            Delegates.Params_GetPositionY @params = new()
            {
                self = self, position = position
            };
            _beforeGetPositionY?.Invoke(@params);
            self = @params.self;
            position = @params.position;
            var retVal = orig(self, position);
            if (_afterGetPositionY != null) retVal = _afterGetPositionY.Invoke(@params);
            return retVal;
        }

        internal static void HookIsCurrentPositionTerminus()
        {
            if (!HookedList.Contains("IsCurrentPositionTerminus"))
            {
                HookedList.Add("IsCurrentPositionTerminus");
                On.RuinsLift.IsCurrentPositionTerminus += IsCurrentPositionTerminus;
            }
        }

        internal static event Delegates.IsCurrentPositionTerminus_BeforeArgs _beforeIsCurrentPositionTerminus;
        internal static event Delegates.IsCurrentPositionTerminus_NormalArgs _afterIsCurrentPositionTerminus;

        private static bool IsCurrentPositionTerminus(On.RuinsLift.orig_IsCurrentPositionTerminus orig, RuinsLift self,
            int position)
        {
            Delegates.Params_IsCurrentPositionTerminus @params = new()
            {
                self = self, position = position
            };
            _beforeIsCurrentPositionTerminus?.Invoke(@params);
            self = @params.self;
            position = @params.position;
            var retVal = orig(self, position);
            if (_afterIsCurrentPositionTerminus != null) retVal = _afterIsCurrentPositionTerminus.Invoke(@params);
            return retVal;
        }

        internal static void HookKeepInBounds()
        {
            if (!HookedList.Contains("KeepInBounds"))
            {
                HookedList.Add("KeepInBounds");
                On.RuinsLift.KeepInBounds += KeepInBounds;
            }
        }

        internal static event Delegates.KeepInBounds_BeforeArgs _beforeKeepInBounds;
        internal static event Delegates.KeepInBounds_NormalArgs _afterKeepInBounds;

        private static int KeepInBounds(On.RuinsLift.orig_KeepInBounds orig, RuinsLift self, int position)
        {
            Delegates.Params_KeepInBounds @params = new()
            {
                self = self, position = position
            };
            _beforeKeepInBounds?.Invoke(@params);
            self = @params.self;
            position = @params.position;
            var retVal = orig(self, position);
            if (_afterKeepInBounds != null) retVal = _afterKeepInBounds.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void GetPositionY_BeforeArgs(Params_GetPositionY args);

        public delegate float GetPositionY_NormalArgs(Params_GetPositionY args);

        public delegate void HideChains_BeforeArgs(Params_HideChains args);

        public delegate IEnumerator HideChains_NormalArgs(Params_HideChains args);

        public delegate void IsCurrentPositionTerminus_BeforeArgs(Params_IsCurrentPositionTerminus args);

        public delegate bool IsCurrentPositionTerminus_NormalArgs(Params_IsCurrentPositionTerminus args);

        public delegate void KeepInBounds_BeforeArgs(Params_KeepInBounds args);

        public delegate int KeepInBounds_NormalArgs(Params_KeepInBounds args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Start
        {
            public RuinsLift self;
        }

        public sealed class Params_HideChains
        {
            public RuinsLift self;
        }

        public sealed class Params_GetPositionY
        {
            public int position;
            public RuinsLift self;
        }

        public sealed class Params_IsCurrentPositionTerminus
        {
            public int position;
            public RuinsLift self;
        }

        public sealed class Params_KeepInBounds
        {
            public int position;
            public RuinsLift self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.HideChains_BeforeArgs HideChains
        {
            add
            {
                HookHandler._beforeHideChains += value;
                HookHandler.HookHideChains();
            }
            remove => HookHandler._beforeHideChains -= value;
        }

        public static event Delegates.GetPositionY_BeforeArgs GetPositionY
        {
            add
            {
                HookHandler._beforeGetPositionY += value;
                HookHandler.HookGetPositionY();
            }
            remove => HookHandler._beforeGetPositionY -= value;
        }

        public static event Delegates.IsCurrentPositionTerminus_BeforeArgs IsCurrentPositionTerminus
        {
            add
            {
                HookHandler._beforeIsCurrentPositionTerminus += value;
                HookHandler.HookIsCurrentPositionTerminus();
            }
            remove => HookHandler._beforeIsCurrentPositionTerminus -= value;
        }

        public static event Delegates.KeepInBounds_BeforeArgs KeepInBounds
        {
            add
            {
                HookHandler._beforeKeepInBounds += value;
                HookHandler.HookKeepInBounds();
            }
            remove => HookHandler._beforeKeepInBounds -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.GetPositionY_NormalArgs GetPositionY
        {
            add
            {
                HookHandler._afterGetPositionY += value;
                HookHandler.HookGetPositionY();
            }
            remove => HookHandler._afterGetPositionY -= value;
        }

        public static event Delegates.IsCurrentPositionTerminus_NormalArgs IsCurrentPositionTerminus
        {
            add
            {
                HookHandler._afterIsCurrentPositionTerminus += value;
                HookHandler.HookIsCurrentPositionTerminus();
            }
            remove => HookHandler._afterIsCurrentPositionTerminus -= value;
        }

        public static event Delegates.KeepInBounds_NormalArgs KeepInBounds
        {
            add
            {
                HookHandler._afterKeepInBounds += value;
                HookHandler.HookKeepInBounds();
            }
            remove => HookHandler._afterKeepInBounds -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.RuinsLift.hook_Start Start
        {
            add => On.RuinsLift.Start += value;
            remove => On.RuinsLift.Start -= value;
        }

        public static event On.RuinsLift.hook_HideChains HideChains
        {
            add => On.RuinsLift.HideChains += value;
            remove => On.RuinsLift.HideChains -= value;
        }

        public static event On.RuinsLift.hook_GetPositionY GetPositionY
        {
            add => On.RuinsLift.GetPositionY += value;
            remove => On.RuinsLift.GetPositionY -= value;
        }

        public static event On.RuinsLift.hook_IsCurrentPositionTerminus IsCurrentPositionTerminus
        {
            add => On.RuinsLift.IsCurrentPositionTerminus += value;
            remove => On.RuinsLift.IsCurrentPositionTerminus -= value;
        }

        public static event On.RuinsLift.hook_KeepInBounds KeepInBounds
        {
            add => On.RuinsLift.KeepInBounds += value;
            remove => On.RuinsLift.KeepInBounds -= value;
        }
    }
}