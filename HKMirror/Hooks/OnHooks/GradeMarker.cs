using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for GradeMarker class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGradeMarker
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.GradeMarker.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.GradeMarker.orig_OnEnable orig, GradeMarker self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
            {
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
            {
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.GradeMarker.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(On.GradeMarker.orig_OnDisable orig, GradeMarker self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
            {
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
            {
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                {
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.GradeMarker.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.GradeMarker.orig_Start orig, GradeMarker self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnUnloadingLevel()
        {
            if (!HookedList.Contains("OnUnloadingLevel"))
            {
                HookedList.Add("OnUnloadingLevel");
                On.GradeMarker.OnUnloadingLevel += OnUnloadingLevel;
            }
        }

        internal static event Delegates.OnUnloadingLevel_BeforeArgs _beforeOnUnloadingLevel;
        internal static event Delegates.OnUnloadingLevel_AfterArgs _afterOnUnloadingLevel;

        private static void OnUnloadingLevel(On.GradeMarker.orig_OnUnloadingLevel orig, GradeMarker self)
        {
            Delegates.Params_OnUnloadingLevel @params = new()
            {
                self = self
            };
            if (_beforeOnUnloadingLevel != null)
            {
                foreach (Delegates.OnUnloadingLevel_BeforeArgs toInvoke in _beforeOnUnloadingLevel.GetInvocationList())
                {
                    try
                    {
                        _beforeOnUnloadingLevel?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnUnloadingLevel != null)
            {
                foreach (Delegates.OnUnloadingLevel_AfterArgs toInvoke in _afterOnUnloadingLevel.GetInvocationList())
                {
                    try
                    {
                        _afterOnUnloadingLevel.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetStartSizeForTrigger()
        {
            if (!HookedList.Contains("SetStartSizeForTrigger"))
            {
                HookedList.Add("SetStartSizeForTrigger");
                On.GradeMarker.SetStartSizeForTrigger += SetStartSizeForTrigger;
            }
        }

        internal static event Delegates.SetStartSizeForTrigger_BeforeArgs _beforeSetStartSizeForTrigger;
        internal static event Delegates.SetStartSizeForTrigger_AfterArgs _afterSetStartSizeForTrigger;

        private static void SetStartSizeForTrigger(On.GradeMarker.orig_SetStartSizeForTrigger orig, GradeMarker self)
        {
            Delegates.Params_SetStartSizeForTrigger @params = new()
            {
                self = self
            };
            if (_beforeSetStartSizeForTrigger != null)
            {
                foreach (Delegates.SetStartSizeForTrigger_BeforeArgs toInvoke in _beforeSetStartSizeForTrigger
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeSetStartSizeForTrigger?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterSetStartSizeForTrigger != null)
            {
                foreach (Delegates.SetStartSizeForTrigger_AfterArgs toInvoke in _afterSetStartSizeForTrigger
                             .GetInvocationList())
                {
                    try
                    {
                        _afterSetStartSizeForTrigger.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookActivate()
        {
            if (!HookedList.Contains("Activate"))
            {
                HookedList.Add("Activate");
                On.GradeMarker.Activate += Activate;
            }
        }

        internal static event Delegates.Activate_BeforeArgs _beforeActivate;
        internal static event Delegates.Activate_AfterArgs _afterActivate;

        private static void Activate(On.GradeMarker.orig_Activate orig, GradeMarker self)
        {
            Delegates.Params_Activate @params = new()
            {
                self = self
            };
            if (_beforeActivate != null)
            {
                foreach (Delegates.Activate_BeforeArgs toInvoke in _beforeActivate.GetInvocationList())
                {
                    try
                    {
                        _beforeActivate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterActivate != null)
            {
                foreach (Delegates.Activate_AfterArgs toInvoke in _afterActivate.GetInvocationList())
                {
                    try
                    {
                        _afterActivate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDeactivate()
        {
            if (!HookedList.Contains("Deactivate"))
            {
                HookedList.Add("Deactivate");
                On.GradeMarker.Deactivate += Deactivate;
            }
        }

        internal static event Delegates.Deactivate_BeforeArgs _beforeDeactivate;
        internal static event Delegates.Deactivate_AfterArgs _afterDeactivate;

        private static void Deactivate(On.GradeMarker.orig_Deactivate orig, GradeMarker self)
        {
            Delegates.Params_Deactivate @params = new()
            {
                self = self
            };
            if (_beforeDeactivate != null)
            {
                foreach (Delegates.Deactivate_BeforeArgs toInvoke in _beforeDeactivate.GetInvocationList())
                {
                    try
                    {
                        _beforeDeactivate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterDeactivate != null)
            {
                foreach (Delegates.Deactivate_AfterArgs toInvoke in _afterDeactivate.GetInvocationList())
                {
                    try
                    {
                        _afterDeactivate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookActivateGradual()
        {
            if (!HookedList.Contains("ActivateGradual"))
            {
                HookedList.Add("ActivateGradual");
                On.GradeMarker.ActivateGradual += ActivateGradual;
            }
        }

        internal static event Delegates.ActivateGradual_BeforeArgs _beforeActivateGradual;
        internal static event Delegates.ActivateGradual_AfterArgs _afterActivateGradual;

        private static void ActivateGradual(On.GradeMarker.orig_ActivateGradual orig, GradeMarker self)
        {
            Delegates.Params_ActivateGradual @params = new()
            {
                self = self
            };
            if (_beforeActivateGradual != null)
            {
                foreach (Delegates.ActivateGradual_BeforeArgs toInvoke in _beforeActivateGradual.GetInvocationList())
                {
                    try
                    {
                        _beforeActivateGradual?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterActivateGradual != null)
            {
                foreach (Delegates.ActivateGradual_AfterArgs toInvoke in _afterActivateGradual.GetInvocationList())
                {
                    try
                    {
                        _afterActivateGradual.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDeactivateGradual()
        {
            if (!HookedList.Contains("DeactivateGradual"))
            {
                HookedList.Add("DeactivateGradual");
                On.GradeMarker.DeactivateGradual += DeactivateGradual;
            }
        }

        internal static event Delegates.DeactivateGradual_BeforeArgs _beforeDeactivateGradual;
        internal static event Delegates.DeactivateGradual_AfterArgs _afterDeactivateGradual;

        private static void DeactivateGradual(On.GradeMarker.orig_DeactivateGradual orig, GradeMarker self)
        {
            Delegates.Params_DeactivateGradual @params = new()
            {
                self = self
            };
            if (_beforeDeactivateGradual != null)
            {
                foreach (Delegates.DeactivateGradual_BeforeArgs toInvoke in
                         _beforeDeactivateGradual.GetInvocationList())
                {
                    try
                    {
                        _beforeDeactivateGradual?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterDeactivateGradual != null)
            {
                foreach (Delegates.DeactivateGradual_AfterArgs toInvoke in _afterDeactivateGradual.GetInvocationList())
                {
                    try
                    {
                        _afterDeactivateGradual.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.GradeMarker.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.GradeMarker.orig_Update orig, GradeMarker self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
            {
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
            {
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateLow()
        {
            if (!HookedList.Contains("UpdateLow"))
            {
                HookedList.Add("UpdateLow");
                On.GradeMarker.UpdateLow += UpdateLow;
            }
        }

        internal static event Delegates.UpdateLow_BeforeArgs _beforeUpdateLow;
        internal static event Delegates.UpdateLow_AfterArgs _afterUpdateLow;

        private static void UpdateLow(On.GradeMarker.orig_UpdateLow orig, GradeMarker self)
        {
            Delegates.Params_UpdateLow @params = new()
            {
                self = self
            };
            if (_beforeUpdateLow != null)
            {
                foreach (Delegates.UpdateLow_BeforeArgs toInvoke in _beforeUpdateLow.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateLow?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdateLow != null)
            {
                foreach (Delegates.UpdateLow_AfterArgs toInvoke in _afterUpdateLow.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateLow.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookorig_Start()
        {
            if (!HookedList.Contains("orig_Start"))
            {
                HookedList.Add("orig_Start");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GradeMarker), "orig_Start", true), orig_Start);
            }
        }

        internal static event Delegates.orig_Start_BeforeArgs _beforeorig_Start;
        internal static event Delegates.orig_Start_AfterArgs _afterorig_Start;

        private static void orig_Start(Action<GradeMarker> orig, GradeMarker self)
        {
            Delegates.Params_orig_Start @params = new()
            {
                self = self
            };
            if (_beforeorig_Start != null)
            {
                foreach (Delegates.orig_Start_BeforeArgs toInvoke in _beforeorig_Start.GetInvocationList())
                {
                    try
                    {
                        _beforeorig_Start?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterorig_Start != null)
            {
                foreach (Delegates.orig_Start_AfterArgs toInvoke in _afterorig_Start.GetInvocationList())
                {
                    try
                    {
                        _afterorig_Start.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnStart()
        {
            if (!HookedList.Contains("OnStart"))
            {
                HookedList.Add("OnStart");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GradeMarker), "OnStart", true), OnStart);
            }
        }

        internal static event Delegates.OnStart_BeforeArgs _beforeOnStart;

        private static System.Collections.IEnumerator OnStart(Func<GradeMarker, System.Collections.IEnumerator> orig,
            GradeMarker self)
        {
            Delegates.Params_OnStart @params = new()
            {
                self = self
            };
            if (_beforeOnStart != null)
            {
                foreach (Delegates.OnStart_BeforeArgs toInvoke in _beforeOnStart.GetInvocationList())
                {
                    try
                    {
                        _beforeOnStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            return orig(self);
        }

        internal static void Hookorig_Update()
        {
            if (!HookedList.Contains("orig_Update"))
            {
                HookedList.Add("orig_Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GradeMarker), "orig_Update", true), orig_Update);
            }
        }

        internal static event Delegates.orig_Update_BeforeArgs _beforeorig_Update;
        internal static event Delegates.orig_Update_AfterArgs _afterorig_Update;

        private static void orig_Update(Action<GradeMarker> orig, GradeMarker self)
        {
            Delegates.Params_orig_Update @params = new()
            {
                self = self
            };
            if (_beforeorig_Update != null)
            {
                foreach (Delegates.orig_Update_BeforeArgs toInvoke in _beforeorig_Update.GetInvocationList())
                {
                    try
                    {
                        _beforeorig_Update?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterorig_Update != null)
            {
                foreach (Delegates.orig_Update_AfterArgs toInvoke in _afterorig_Update.GetInvocationList())
                {
                    try
                    {
                        _afterorig_Update.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookorig_UpdateLow()
        {
            if (!HookedList.Contains("orig_UpdateLow"))
            {
                HookedList.Add("orig_UpdateLow");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GradeMarker), "orig_UpdateLow", true), orig_UpdateLow);
            }
        }

        internal static event Delegates.orig_UpdateLow_BeforeArgs _beforeorig_UpdateLow;
        internal static event Delegates.orig_UpdateLow_AfterArgs _afterorig_UpdateLow;

        private static void orig_UpdateLow(Action<GradeMarker> orig, GradeMarker self)
        {
            Delegates.Params_orig_UpdateLow @params = new()
            {
                self = self
            };
            if (_beforeorig_UpdateLow != null)
            {
                foreach (Delegates.orig_UpdateLow_BeforeArgs toInvoke in _beforeorig_UpdateLow.GetInvocationList())
                {
                    try
                    {
                        _beforeorig_UpdateLow?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterorig_UpdateLow != null)
            {
                foreach (Delegates.orig_UpdateLow_AfterArgs toInvoke in _afterorig_UpdateLow.GetInvocationList())
                {
                    try
                    {
                        _afterorig_UpdateLow.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookorig_Deactivate()
        {
            if (!HookedList.Contains("orig_Deactivate"))
            {
                HookedList.Add("orig_Deactivate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GradeMarker), "orig_Deactivate", true), orig_Deactivate);
            }
        }

        internal static event Delegates.orig_Deactivate_BeforeArgs _beforeorig_Deactivate;
        internal static event Delegates.orig_Deactivate_AfterArgs _afterorig_Deactivate;

        private static void orig_Deactivate(Action<GradeMarker> orig, GradeMarker self)
        {
            Delegates.Params_orig_Deactivate @params = new()
            {
                self = self
            };
            if (_beforeorig_Deactivate != null)
            {
                foreach (Delegates.orig_Deactivate_BeforeArgs toInvoke in _beforeorig_Deactivate.GetInvocationList())
                {
                    try
                    {
                        _beforeorig_Deactivate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterorig_Deactivate != null)
            {
                foreach (Delegates.orig_Deactivate_AfterArgs toInvoke in _afterorig_Deactivate.GetInvocationList())
                {
                    try
                    {
                        _afterorig_Deactivate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_OnEnable
        {
            public GradeMarker self;
        }

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<GradeMarker> orig, GradeMarker self);

        public sealed class Params_OnDisable
        {
            public GradeMarker self;
        }

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<GradeMarker> orig, GradeMarker self);

        public sealed class Params_Start
        {
            public GradeMarker self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<GradeMarker> orig, GradeMarker self);

        public sealed class Params_OnUnloadingLevel
        {
            public GradeMarker self;
        }

        public delegate void OnUnloadingLevel_BeforeArgs(Params_OnUnloadingLevel args);

        public delegate void OnUnloadingLevel_AfterArgs(Params_OnUnloadingLevel args);

        public delegate void OnUnloadingLevel_WithArgs(Action<GradeMarker> orig, GradeMarker self);

        public sealed class Params_SetStartSizeForTrigger
        {
            public GradeMarker self;
        }

        public delegate void SetStartSizeForTrigger_BeforeArgs(Params_SetStartSizeForTrigger args);

        public delegate void SetStartSizeForTrigger_AfterArgs(Params_SetStartSizeForTrigger args);

        public delegate void SetStartSizeForTrigger_WithArgs(Action<GradeMarker> orig, GradeMarker self);

        public sealed class Params_Activate
        {
            public GradeMarker self;
        }

        public delegate void Activate_BeforeArgs(Params_Activate args);

        public delegate void Activate_AfterArgs(Params_Activate args);

        public delegate void Activate_WithArgs(Action<GradeMarker> orig, GradeMarker self);

        public sealed class Params_Deactivate
        {
            public GradeMarker self;
        }

        public delegate void Deactivate_BeforeArgs(Params_Deactivate args);

        public delegate void Deactivate_AfterArgs(Params_Deactivate args);

        public delegate void Deactivate_WithArgs(Action<GradeMarker> orig, GradeMarker self);

        public sealed class Params_ActivateGradual
        {
            public GradeMarker self;
        }

        public delegate void ActivateGradual_BeforeArgs(Params_ActivateGradual args);

        public delegate void ActivateGradual_AfterArgs(Params_ActivateGradual args);

        public delegate void ActivateGradual_WithArgs(Action<GradeMarker> orig, GradeMarker self);

        public sealed class Params_DeactivateGradual
        {
            public GradeMarker self;
        }

        public delegate void DeactivateGradual_BeforeArgs(Params_DeactivateGradual args);

        public delegate void DeactivateGradual_AfterArgs(Params_DeactivateGradual args);

        public delegate void DeactivateGradual_WithArgs(Action<GradeMarker> orig, GradeMarker self);

        public sealed class Params_Update
        {
            public GradeMarker self;
        }

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<GradeMarker> orig, GradeMarker self);

        public sealed class Params_UpdateLow
        {
            public GradeMarker self;
        }

        public delegate void UpdateLow_BeforeArgs(Params_UpdateLow args);

        public delegate void UpdateLow_AfterArgs(Params_UpdateLow args);

        public delegate void UpdateLow_WithArgs(Action<GradeMarker> orig, GradeMarker self);

        public sealed class Params_orig_Start
        {
            public GradeMarker self;
        }

        public delegate void orig_Start_BeforeArgs(Params_orig_Start args);

        public delegate void orig_Start_AfterArgs(Params_orig_Start args);

        public delegate void orig_Start_WithArgs(Action<GradeMarker> orig, GradeMarker self);

        public sealed class Params_OnStart
        {
            public GradeMarker self;
        }

        public delegate void OnStart_BeforeArgs(Params_OnStart args);

        public delegate System.Collections.IEnumerator OnStart_AfterArgs(Params_OnStart args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator OnStart_WithArgs(
            Func<GradeMarker, System.Collections.IEnumerator> orig, GradeMarker self);

        public sealed class Params_orig_Update
        {
            public GradeMarker self;
        }

        public delegate void orig_Update_BeforeArgs(Params_orig_Update args);

        public delegate void orig_Update_AfterArgs(Params_orig_Update args);

        public delegate void orig_Update_WithArgs(Action<GradeMarker> orig, GradeMarker self);

        public sealed class Params_orig_UpdateLow
        {
            public GradeMarker self;
        }

        public delegate void orig_UpdateLow_BeforeArgs(Params_orig_UpdateLow args);

        public delegate void orig_UpdateLow_AfterArgs(Params_orig_UpdateLow args);

        public delegate void orig_UpdateLow_WithArgs(Action<GradeMarker> orig, GradeMarker self);

        public sealed class Params_orig_Deactivate
        {
            public GradeMarker self;
        }

        public delegate void orig_Deactivate_BeforeArgs(Params_orig_Deactivate args);

        public delegate void orig_Deactivate_AfterArgs(Params_orig_Deactivate args);

        public delegate void orig_Deactivate_WithArgs(Action<GradeMarker> orig, GradeMarker self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnUnloadingLevel_BeforeArgs OnUnloadingLevel
        {
            add
            {
                HookHandler._beforeOnUnloadingLevel += value;
                HookHandler.HookOnUnloadingLevel();
            }
            remove => HookHandler._beforeOnUnloadingLevel -= value;
        }

        public static event Delegates.SetStartSizeForTrigger_BeforeArgs SetStartSizeForTrigger
        {
            add
            {
                HookHandler._beforeSetStartSizeForTrigger += value;
                HookHandler.HookSetStartSizeForTrigger();
            }
            remove => HookHandler._beforeSetStartSizeForTrigger -= value;
        }

        public static event Delegates.Activate_BeforeArgs Activate
        {
            add
            {
                HookHandler._beforeActivate += value;
                HookHandler.HookActivate();
            }
            remove => HookHandler._beforeActivate -= value;
        }

        public static event Delegates.Deactivate_BeforeArgs Deactivate
        {
            add
            {
                HookHandler._beforeDeactivate += value;
                HookHandler.HookDeactivate();
            }
            remove => HookHandler._beforeDeactivate -= value;
        }

        public static event Delegates.ActivateGradual_BeforeArgs ActivateGradual
        {
            add
            {
                HookHandler._beforeActivateGradual += value;
                HookHandler.HookActivateGradual();
            }
            remove => HookHandler._beforeActivateGradual -= value;
        }

        public static event Delegates.DeactivateGradual_BeforeArgs DeactivateGradual
        {
            add
            {
                HookHandler._beforeDeactivateGradual += value;
                HookHandler.HookDeactivateGradual();
            }
            remove => HookHandler._beforeDeactivateGradual -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.UpdateLow_BeforeArgs UpdateLow
        {
            add
            {
                HookHandler._beforeUpdateLow += value;
                HookHandler.HookUpdateLow();
            }
            remove => HookHandler._beforeUpdateLow -= value;
        }

        public static event Delegates.orig_Start_BeforeArgs orig_Start
        {
            add
            {
                HookHandler._beforeorig_Start += value;
                HookHandler.Hookorig_Start();
            }
            remove => HookHandler._beforeorig_Start -= value;
        }

        public static event Delegates.OnStart_BeforeArgs OnStart
        {
            add
            {
                HookHandler._beforeOnStart += value;
                HookHandler.HookOnStart();
            }
            remove => HookHandler._beforeOnStart -= value;
        }

        public static event Delegates.orig_Update_BeforeArgs orig_Update
        {
            add
            {
                HookHandler._beforeorig_Update += value;
                HookHandler.Hookorig_Update();
            }
            remove => HookHandler._beforeorig_Update -= value;
        }

        public static event Delegates.orig_UpdateLow_BeforeArgs orig_UpdateLow
        {
            add
            {
                HookHandler._beforeorig_UpdateLow += value;
                HookHandler.Hookorig_UpdateLow();
            }
            remove => HookHandler._beforeorig_UpdateLow -= value;
        }

        public static event Delegates.orig_Deactivate_BeforeArgs orig_Deactivate
        {
            add
            {
                HookHandler._beforeorig_Deactivate += value;
                HookHandler.Hookorig_Deactivate();
            }
            remove => HookHandler._beforeorig_Deactivate -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnUnloadingLevel_AfterArgs OnUnloadingLevel
        {
            add
            {
                HookHandler._afterOnUnloadingLevel += value;
                HookHandler.HookOnUnloadingLevel();
            }
            remove => HookHandler._afterOnUnloadingLevel -= value;
        }

        public static event Delegates.SetStartSizeForTrigger_AfterArgs SetStartSizeForTrigger
        {
            add
            {
                HookHandler._afterSetStartSizeForTrigger += value;
                HookHandler.HookSetStartSizeForTrigger();
            }
            remove => HookHandler._afterSetStartSizeForTrigger -= value;
        }

        public static event Delegates.Activate_AfterArgs Activate
        {
            add
            {
                HookHandler._afterActivate += value;
                HookHandler.HookActivate();
            }
            remove => HookHandler._afterActivate -= value;
        }

        public static event Delegates.Deactivate_AfterArgs Deactivate
        {
            add
            {
                HookHandler._afterDeactivate += value;
                HookHandler.HookDeactivate();
            }
            remove => HookHandler._afterDeactivate -= value;
        }

        public static event Delegates.ActivateGradual_AfterArgs ActivateGradual
        {
            add
            {
                HookHandler._afterActivateGradual += value;
                HookHandler.HookActivateGradual();
            }
            remove => HookHandler._afterActivateGradual -= value;
        }

        public static event Delegates.DeactivateGradual_AfterArgs DeactivateGradual
        {
            add
            {
                HookHandler._afterDeactivateGradual += value;
                HookHandler.HookDeactivateGradual();
            }
            remove => HookHandler._afterDeactivateGradual -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.UpdateLow_AfterArgs UpdateLow
        {
            add
            {
                HookHandler._afterUpdateLow += value;
                HookHandler.HookUpdateLow();
            }
            remove => HookHandler._afterUpdateLow -= value;
        }

        public static event Delegates.orig_Start_AfterArgs orig_Start
        {
            add
            {
                HookHandler._afterorig_Start += value;
                HookHandler.Hookorig_Start();
            }
            remove => HookHandler._afterorig_Start -= value;
        }

        public static event Delegates.orig_Update_AfterArgs orig_Update
        {
            add
            {
                HookHandler._afterorig_Update += value;
                HookHandler.Hookorig_Update();
            }
            remove => HookHandler._afterorig_Update -= value;
        }

        public static event Delegates.orig_UpdateLow_AfterArgs orig_UpdateLow
        {
            add
            {
                HookHandler._afterorig_UpdateLow += value;
                HookHandler.Hookorig_UpdateLow();
            }
            remove => HookHandler._afterorig_UpdateLow -= value;
        }

        public static event Delegates.orig_Deactivate_AfterArgs orig_Deactivate
        {
            add
            {
                HookHandler._afterorig_Deactivate += value;
                HookHandler.Hookorig_Deactivate();
            }
            remove => HookHandler._afterorig_Deactivate -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.GradeMarker.hook_OnEnable OnEnable
        {
            add => On.GradeMarker.OnEnable += value;
            remove => On.GradeMarker.OnEnable -= value;
        }

        public static event On.GradeMarker.hook_OnDisable OnDisable
        {
            add => On.GradeMarker.OnDisable += value;
            remove => On.GradeMarker.OnDisable -= value;
        }

        public static event On.GradeMarker.hook_Start Start
        {
            add => On.GradeMarker.Start += value;
            remove => On.GradeMarker.Start -= value;
        }

        public static event On.GradeMarker.hook_OnUnloadingLevel OnUnloadingLevel
        {
            add => On.GradeMarker.OnUnloadingLevel += value;
            remove => On.GradeMarker.OnUnloadingLevel -= value;
        }

        public static event On.GradeMarker.hook_SetStartSizeForTrigger SetStartSizeForTrigger
        {
            add => On.GradeMarker.SetStartSizeForTrigger += value;
            remove => On.GradeMarker.SetStartSizeForTrigger -= value;
        }

        public static event On.GradeMarker.hook_Activate Activate
        {
            add => On.GradeMarker.Activate += value;
            remove => On.GradeMarker.Activate -= value;
        }

        public static event On.GradeMarker.hook_Deactivate Deactivate
        {
            add => On.GradeMarker.Deactivate += value;
            remove => On.GradeMarker.Deactivate -= value;
        }

        public static event On.GradeMarker.hook_ActivateGradual ActivateGradual
        {
            add => On.GradeMarker.ActivateGradual += value;
            remove => On.GradeMarker.ActivateGradual -= value;
        }

        public static event On.GradeMarker.hook_DeactivateGradual DeactivateGradual
        {
            add => On.GradeMarker.DeactivateGradual += value;
            remove => On.GradeMarker.DeactivateGradual -= value;
        }

        public static event On.GradeMarker.hook_Update Update
        {
            add => On.GradeMarker.Update += value;
            remove => On.GradeMarker.Update -= value;
        }

        public static event On.GradeMarker.hook_UpdateLow UpdateLow
        {
            add => On.GradeMarker.UpdateLow += value;
            remove => On.GradeMarker.UpdateLow -= value;
        }

        public static event Delegates.orig_Start_WithArgs orig_Start
        {
            add => HookEndpointManager.Add<Delegates.orig_Start_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GradeMarker), "orig_Start", true), value);
            remove => HookEndpointManager.Remove<Delegates.orig_Start_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GradeMarker), "orig_Start", true), value);
        }

        public static event Delegates.OnStart_WithArgs OnStart
        {
            add => HookEndpointManager.Add<Delegates.OnStart_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GradeMarker), "OnStart", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnStart_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GradeMarker), "OnStart", true), value);
        }

        public static event Delegates.orig_Update_WithArgs orig_Update
        {
            add => HookEndpointManager.Add<Delegates.orig_Update_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GradeMarker), "orig_Update", true), value);
            remove => HookEndpointManager.Remove<Delegates.orig_Update_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GradeMarker), "orig_Update", true), value);
        }

        public static event Delegates.orig_UpdateLow_WithArgs orig_UpdateLow
        {
            add => HookEndpointManager.Add<Delegates.orig_UpdateLow_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GradeMarker), "orig_UpdateLow", true), value);
            remove => HookEndpointManager.Remove<Delegates.orig_UpdateLow_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GradeMarker), "orig_UpdateLow", true), value);
        }

        public static event Delegates.orig_Deactivate_WithArgs orig_Deactivate
        {
            add => HookEndpointManager.Add<Delegates.orig_Deactivate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GradeMarker), "orig_Deactivate", true), value);
            remove => HookEndpointManager.Remove<Delegates.orig_Deactivate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GradeMarker), "orig_Deactivate", true), value);
        }
    }
}