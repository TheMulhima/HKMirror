namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ColorCurvesManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnColorCurvesManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookSetFactor()
        {
            if (!HookedList.Contains("SetFactor"))
            {
                HookedList.Add("SetFactor");
                On.ColorCurvesManager.SetFactor += SetFactor;
            }
        }

        internal static event Delegates.SetFactor_BeforeArgs _beforeSetFactor;
        internal static event Delegates.SetFactor_NormalArgs _afterSetFactor;

        private static void SetFactor(On.ColorCurvesManager.orig_SetFactor orig, ColorCurvesManager self, float factor)
        {
            Delegates.Params_SetFactor @params = new()
            {
                self = self, factor = factor
            };
            _beforeSetFactor?.Invoke(@params);
            self = @params.self;
            factor = @params.factor;
            orig(self, factor);
            if (_afterSetFactor != null) _afterSetFactor.Invoke(@params);
        }

        internal static void HookSetSaturationA()
        {
            if (!HookedList.Contains("SetSaturationA"))
            {
                HookedList.Add("SetSaturationA");
                On.ColorCurvesManager.SetSaturationA += SetSaturationA;
            }
        }

        internal static event Delegates.SetSaturationA_BeforeArgs _beforeSetSaturationA;
        internal static event Delegates.SetSaturationA_NormalArgs _afterSetSaturationA;

        private static void SetSaturationA(On.ColorCurvesManager.orig_SetSaturationA orig, ColorCurvesManager self,
            float saturationA)
        {
            Delegates.Params_SetSaturationA @params = new()
            {
                self = self, saturationA = saturationA
            };
            _beforeSetSaturationA?.Invoke(@params);
            self = @params.self;
            saturationA = @params.saturationA;
            orig(self, saturationA);
            if (_afterSetSaturationA != null) _afterSetSaturationA.Invoke(@params);
        }

        internal static void HookSetSaturationB()
        {
            if (!HookedList.Contains("SetSaturationB"))
            {
                HookedList.Add("SetSaturationB");
                On.ColorCurvesManager.SetSaturationB += SetSaturationB;
            }
        }

        internal static event Delegates.SetSaturationB_BeforeArgs _beforeSetSaturationB;
        internal static event Delegates.SetSaturationB_NormalArgs _afterSetSaturationB;

        private static void SetSaturationB(On.ColorCurvesManager.orig_SetSaturationB orig, ColorCurvesManager self,
            float saturationB)
        {
            Delegates.Params_SetSaturationB @params = new()
            {
                self = self, saturationB = saturationB
            };
            _beforeSetSaturationB?.Invoke(@params);
            self = @params.self;
            saturationB = @params.saturationB;
            orig(self, saturationB);
            if (_afterSetSaturationB != null) _afterSetSaturationB.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.ColorCurvesManager.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.ColorCurvesManager.orig_Start orig, ColorCurvesManager self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.ColorCurvesManager.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.ColorCurvesManager.orig_Update orig, ColorCurvesManager self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookUpdateScript()
        {
            if (!HookedList.Contains("UpdateScript"))
            {
                HookedList.Add("UpdateScript");
                On.ColorCurvesManager.UpdateScript += UpdateScript;
            }
        }

        internal static event Delegates.UpdateScript_BeforeArgs _beforeUpdateScript;
        internal static event Delegates.UpdateScript_NormalArgs _afterUpdateScript;

        private static void UpdateScript(On.ColorCurvesManager.orig_UpdateScript orig, ColorCurvesManager self)
        {
            Delegates.Params_UpdateScript @params = new()
            {
                self = self
            };
            _beforeUpdateScript?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateScript != null) _afterUpdateScript.Invoke(@params);
        }

        internal static void HookEditorHasChanged()
        {
            if (!HookedList.Contains("EditorHasChanged"))
            {
                HookedList.Add("EditorHasChanged");
                On.ColorCurvesManager.EditorHasChanged += EditorHasChanged;
            }
        }

        internal static event Delegates.EditorHasChanged_BeforeArgs _beforeEditorHasChanged;
        internal static event Delegates.EditorHasChanged_NormalArgs _afterEditorHasChanged;

        private static void EditorHasChanged(On.ColorCurvesManager.orig_EditorHasChanged orig, ColorCurvesManager self)
        {
            Delegates.Params_EditorHasChanged @params = new()
            {
                self = self
            };
            _beforeEditorHasChanged?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterEditorHasChanged != null) _afterEditorHasChanged.Invoke(@params);
        }

        internal static void HookPairKeyframes()
        {
            if (!HookedList.Contains("PairKeyframes"))
            {
                HookedList.Add("PairKeyframes");
                On.ColorCurvesManager.PairKeyframes += PairKeyframes;
            }
        }

        internal static event Delegates.PairKeyframes_BeforeArgs _beforePairKeyframes;
        internal static event Delegates.PairKeyframes_NormalArgs _afterPairKeyframes;

        private static List<Keyframe[]> PairKeyframes(On.ColorCurvesManager.orig_PairKeyframes orig,
            AnimationCurve curveA, AnimationCurve curveB)
        {
            Delegates.Params_PairKeyframes @params = new()
            {
                curveA = curveA, curveB = curveB
            };
            _beforePairKeyframes?.Invoke(@params);
            curveA = @params.curveA;
            curveB = @params.curveB;
            var retVal = orig(curveA, curveB);
            if (_afterPairKeyframes != null) retVal = _afterPairKeyframes.Invoke(@params);
            return retVal;
        }

        internal static void HookSimplePairKeyframes()
        {
            if (!HookedList.Contains("SimplePairKeyframes"))
            {
                HookedList.Add("SimplePairKeyframes");
                On.ColorCurvesManager.SimplePairKeyframes += SimplePairKeyframes;
            }
        }

        internal static event Delegates.SimplePairKeyframes_BeforeArgs _beforeSimplePairKeyframes;
        internal static event Delegates.SimplePairKeyframes_NormalArgs _afterSimplePairKeyframes;

        private static List<Keyframe[]> SimplePairKeyframes(On.ColorCurvesManager.orig_SimplePairKeyframes orig,
            AnimationCurve curveA, AnimationCurve curveB)
        {
            Delegates.Params_SimplePairKeyframes @params = new()
            {
                curveA = curveA, curveB = curveB
            };
            _beforeSimplePairKeyframes?.Invoke(@params);
            curveA = @params.curveA;
            curveB = @params.curveB;
            var retVal = orig(curveA, curveB);
            if (_afterSimplePairKeyframes != null) retVal = _afterSimplePairKeyframes.Invoke(@params);
            return retVal;
        }

        internal static void HookCreatePair()
        {
            if (!HookedList.Contains("CreatePair"))
            {
                HookedList.Add("CreatePair");
                On.ColorCurvesManager.CreatePair += CreatePair;
            }
        }

        internal static event Delegates.CreatePair_BeforeArgs _beforeCreatePair;
        internal static event Delegates.CreatePair_NormalArgs _afterCreatePair;

        private static Keyframe CreatePair(On.ColorCurvesManager.orig_CreatePair orig, Keyframe kf,
            AnimationCurve curve)
        {
            Delegates.Params_CreatePair @params = new()
            {
                kf = kf, curve = curve
            };
            _beforeCreatePair?.Invoke(@params);
            kf = @params.kf;
            curve = @params.curve;
            var retVal = orig(kf, curve);
            if (_afterCreatePair != null) retVal = _afterCreatePair.Invoke(@params);
            return retVal;
        }

        internal static void HookCreateCurveFromKeyframes()
        {
            if (!HookedList.Contains("CreateCurveFromKeyframes"))
            {
                HookedList.Add("CreateCurveFromKeyframes");
                On.ColorCurvesManager.CreateCurveFromKeyframes += CreateCurveFromKeyframes;
            }
        }

        internal static event Delegates.CreateCurveFromKeyframes_BeforeArgs _beforeCreateCurveFromKeyframes;
        internal static event Delegates.CreateCurveFromKeyframes_NormalArgs _afterCreateCurveFromKeyframes;

        private static AnimationCurve CreateCurveFromKeyframes(On.ColorCurvesManager.orig_CreateCurveFromKeyframes orig,
            IList<Keyframe[]> keyframePairs, float factor)
        {
            Delegates.Params_CreateCurveFromKeyframes @params = new()
            {
                keyframePairs = keyframePairs, factor = factor
            };
            _beforeCreateCurveFromKeyframes?.Invoke(@params);
            keyframePairs = @params.keyframePairs;
            factor = @params.factor;
            var retVal = orig(keyframePairs, factor);
            if (_afterCreateCurveFromKeyframes != null) retVal = _afterCreateCurveFromKeyframes.Invoke(@params);
            return retVal;
        }

        internal static void HookAverageKeyframe()
        {
            if (!HookedList.Contains("AverageKeyframe"))
            {
                HookedList.Add("AverageKeyframe");
                On.ColorCurvesManager.AverageKeyframe += AverageKeyframe;
            }
        }

        internal static event Delegates.AverageKeyframe_BeforeArgs _beforeAverageKeyframe;
        internal static event Delegates.AverageKeyframe_NormalArgs _afterAverageKeyframe;

        private static Keyframe AverageKeyframe(On.ColorCurvesManager.orig_AverageKeyframe orig, Keyframe a, Keyframe b,
            float factor)
        {
            Delegates.Params_AverageKeyframe @params = new()
            {
                a = a, b = b, factor = factor
            };
            _beforeAverageKeyframe?.Invoke(@params);
            a = @params.a;
            b = @params.b;
            factor = @params.factor;
            var retVal = orig(a, b, factor);
            if (_afterAverageKeyframe != null) retVal = _afterAverageKeyframe.Invoke(@params);
            return retVal;
        }

        internal static void HookPairCurvesKeyframes()
        {
            if (!HookedList.Contains("PairCurvesKeyframes"))
            {
                HookedList.Add("PairCurvesKeyframes");
                On.ColorCurvesManager.PairCurvesKeyframes += PairCurvesKeyframes;
            }
        }

        internal static event Delegates.PairCurvesKeyframes_BeforeArgs _beforePairCurvesKeyframes;
        internal static event Delegates.PairCurvesKeyframes_NormalArgs _afterPairCurvesKeyframes;

        private static void PairCurvesKeyframes(On.ColorCurvesManager.orig_PairCurvesKeyframes orig,
            ColorCurvesManager self)
        {
            Delegates.Params_PairCurvesKeyframes @params = new()
            {
                self = self
            };
            _beforePairCurvesKeyframes?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPairCurvesKeyframes != null) _afterPairCurvesKeyframes.Invoke(@params);
        }

        internal static void HookUpdateScriptParameters()
        {
            if (!HookedList.Contains("UpdateScriptParameters"))
            {
                HookedList.Add("UpdateScriptParameters");
                On.ColorCurvesManager.UpdateScriptParameters += UpdateScriptParameters;
            }
        }

        internal static event Delegates.UpdateScriptParameters_BeforeArgs _beforeUpdateScriptParameters;
        internal static event Delegates.UpdateScriptParameters_NormalArgs _afterUpdateScriptParameters;

        private static void UpdateScriptParameters(On.ColorCurvesManager.orig_UpdateScriptParameters orig,
            ColorCurvesManager self)
        {
            Delegates.Params_UpdateScriptParameters @params = new()
            {
                self = self
            };
            _beforeUpdateScriptParameters?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateScriptParameters != null) _afterUpdateScriptParameters.Invoke(@params);
        }

        internal static void HookPairedListsInitiated()
        {
            if (!HookedList.Contains("PairedListsInitiated"))
            {
                HookedList.Add("PairedListsInitiated");
                On.ColorCurvesManager.PairedListsInitiated += PairedListsInitiated;
            }
        }

        internal static event Delegates.PairedListsInitiated_BeforeArgs _beforePairedListsInitiated;
        internal static event Delegates.PairedListsInitiated_NormalArgs _afterPairedListsInitiated;

        private static bool PairedListsInitiated(On.ColorCurvesManager.orig_PairedListsInitiated orig,
            ColorCurvesManager self)
        {
            Delegates.Params_PairedListsInitiated @params = new()
            {
                self = self
            };
            _beforePairedListsInitiated?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterPairedListsInitiated != null) retVal = _afterPairedListsInitiated.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AverageKeyframe_BeforeArgs(Params_AverageKeyframe args);

        public delegate Keyframe AverageKeyframe_NormalArgs(Params_AverageKeyframe args);

        public delegate void CreateCurveFromKeyframes_BeforeArgs(Params_CreateCurveFromKeyframes args);

        public delegate AnimationCurve CreateCurveFromKeyframes_NormalArgs(Params_CreateCurveFromKeyframes args);

        public delegate void CreatePair_BeforeArgs(Params_CreatePair args);

        public delegate Keyframe CreatePair_NormalArgs(Params_CreatePair args);

        public delegate void EditorHasChanged_BeforeArgs(Params_EditorHasChanged args);

        public delegate void EditorHasChanged_NormalArgs(Params_EditorHasChanged args);

        public delegate void PairCurvesKeyframes_BeforeArgs(Params_PairCurvesKeyframes args);

        public delegate void PairCurvesKeyframes_NormalArgs(Params_PairCurvesKeyframes args);

        public delegate void PairedListsInitiated_BeforeArgs(Params_PairedListsInitiated args);

        public delegate bool PairedListsInitiated_NormalArgs(Params_PairedListsInitiated args);

        public delegate void PairKeyframes_BeforeArgs(Params_PairKeyframes args);

        public delegate List<Keyframe[]> PairKeyframes_NormalArgs(Params_PairKeyframes args);

        public delegate void SetFactor_BeforeArgs(Params_SetFactor args);

        public delegate void SetFactor_NormalArgs(Params_SetFactor args);

        public delegate void SetSaturationA_BeforeArgs(Params_SetSaturationA args);

        public delegate void SetSaturationA_NormalArgs(Params_SetSaturationA args);

        public delegate void SetSaturationB_BeforeArgs(Params_SetSaturationB args);

        public delegate void SetSaturationB_NormalArgs(Params_SetSaturationB args);

        public delegate void SimplePairKeyframes_BeforeArgs(Params_SimplePairKeyframes args);

        public delegate List<Keyframe[]> SimplePairKeyframes_NormalArgs(Params_SimplePairKeyframes args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public delegate void UpdateScript_BeforeArgs(Params_UpdateScript args);

        public delegate void UpdateScript_NormalArgs(Params_UpdateScript args);

        public delegate void UpdateScriptParameters_BeforeArgs(Params_UpdateScriptParameters args);

        public delegate void UpdateScriptParameters_NormalArgs(Params_UpdateScriptParameters args);

        public sealed class Params_SetFactor
        {
            public float factor;
            public ColorCurvesManager self;
        }

        public sealed class Params_SetSaturationA
        {
            public float saturationA;
            public ColorCurvesManager self;
        }

        public sealed class Params_SetSaturationB
        {
            public float saturationB;
            public ColorCurvesManager self;
        }

        public sealed class Params_Start
        {
            public ColorCurvesManager self;
        }

        public sealed class Params_Update
        {
            public ColorCurvesManager self;
        }

        public sealed class Params_UpdateScript
        {
            public ColorCurvesManager self;
        }

        public sealed class Params_EditorHasChanged
        {
            public ColorCurvesManager self;
        }

        public sealed class Params_PairKeyframes
        {
            public AnimationCurve curveA;
            public AnimationCurve curveB;
        }

        public sealed class Params_SimplePairKeyframes
        {
            public AnimationCurve curveA;
            public AnimationCurve curveB;
        }

        public sealed class Params_CreatePair
        {
            public AnimationCurve curve;
            public Keyframe kf;
        }

        public sealed class Params_CreateCurveFromKeyframes
        {
            public float factor;
            public IList<Keyframe[]> keyframePairs;
        }

        public sealed class Params_AverageKeyframe
        {
            public Keyframe a;
            public Keyframe b;
            public float factor;
        }

        public sealed class Params_PairCurvesKeyframes
        {
            public ColorCurvesManager self;
        }

        public sealed class Params_UpdateScriptParameters
        {
            public ColorCurvesManager self;
        }

        public sealed class Params_PairedListsInitiated
        {
            public ColorCurvesManager self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.SetFactor_BeforeArgs SetFactor
        {
            add
            {
                HookHandler._beforeSetFactor += value;
                HookHandler.HookSetFactor();
            }
            remove => HookHandler._beforeSetFactor -= value;
        }

        public static event Delegates.SetSaturationA_BeforeArgs SetSaturationA
        {
            add
            {
                HookHandler._beforeSetSaturationA += value;
                HookHandler.HookSetSaturationA();
            }
            remove => HookHandler._beforeSetSaturationA -= value;
        }

        public static event Delegates.SetSaturationB_BeforeArgs SetSaturationB
        {
            add
            {
                HookHandler._beforeSetSaturationB += value;
                HookHandler.HookSetSaturationB();
            }
            remove => HookHandler._beforeSetSaturationB -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.UpdateScript_BeforeArgs UpdateScript
        {
            add
            {
                HookHandler._beforeUpdateScript += value;
                HookHandler.HookUpdateScript();
            }
            remove => HookHandler._beforeUpdateScript -= value;
        }

        public static event Delegates.EditorHasChanged_BeforeArgs EditorHasChanged
        {
            add
            {
                HookHandler._beforeEditorHasChanged += value;
                HookHandler.HookEditorHasChanged();
            }
            remove => HookHandler._beforeEditorHasChanged -= value;
        }

        public static event Delegates.PairKeyframes_BeforeArgs PairKeyframes
        {
            add
            {
                HookHandler._beforePairKeyframes += value;
                HookHandler.HookPairKeyframes();
            }
            remove => HookHandler._beforePairKeyframes -= value;
        }

        public static event Delegates.SimplePairKeyframes_BeforeArgs SimplePairKeyframes
        {
            add
            {
                HookHandler._beforeSimplePairKeyframes += value;
                HookHandler.HookSimplePairKeyframes();
            }
            remove => HookHandler._beforeSimplePairKeyframes -= value;
        }

        public static event Delegates.CreatePair_BeforeArgs CreatePair
        {
            add
            {
                HookHandler._beforeCreatePair += value;
                HookHandler.HookCreatePair();
            }
            remove => HookHandler._beforeCreatePair -= value;
        }

        public static event Delegates.CreateCurveFromKeyframes_BeforeArgs CreateCurveFromKeyframes
        {
            add
            {
                HookHandler._beforeCreateCurveFromKeyframes += value;
                HookHandler.HookCreateCurveFromKeyframes();
            }
            remove => HookHandler._beforeCreateCurveFromKeyframes -= value;
        }

        public static event Delegates.AverageKeyframe_BeforeArgs AverageKeyframe
        {
            add
            {
                HookHandler._beforeAverageKeyframe += value;
                HookHandler.HookAverageKeyframe();
            }
            remove => HookHandler._beforeAverageKeyframe -= value;
        }

        public static event Delegates.PairCurvesKeyframes_BeforeArgs PairCurvesKeyframes
        {
            add
            {
                HookHandler._beforePairCurvesKeyframes += value;
                HookHandler.HookPairCurvesKeyframes();
            }
            remove => HookHandler._beforePairCurvesKeyframes -= value;
        }

        public static event Delegates.UpdateScriptParameters_BeforeArgs UpdateScriptParameters
        {
            add
            {
                HookHandler._beforeUpdateScriptParameters += value;
                HookHandler.HookUpdateScriptParameters();
            }
            remove => HookHandler._beforeUpdateScriptParameters -= value;
        }

        public static event Delegates.PairedListsInitiated_BeforeArgs PairedListsInitiated
        {
            add
            {
                HookHandler._beforePairedListsInitiated += value;
                HookHandler.HookPairedListsInitiated();
            }
            remove => HookHandler._beforePairedListsInitiated -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.SetFactor_NormalArgs SetFactor
        {
            add
            {
                HookHandler._afterSetFactor += value;
                HookHandler.HookSetFactor();
            }
            remove => HookHandler._afterSetFactor -= value;
        }

        public static event Delegates.SetSaturationA_NormalArgs SetSaturationA
        {
            add
            {
                HookHandler._afterSetSaturationA += value;
                HookHandler.HookSetSaturationA();
            }
            remove => HookHandler._afterSetSaturationA -= value;
        }

        public static event Delegates.SetSaturationB_NormalArgs SetSaturationB
        {
            add
            {
                HookHandler._afterSetSaturationB += value;
                HookHandler.HookSetSaturationB();
            }
            remove => HookHandler._afterSetSaturationB -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.UpdateScript_NormalArgs UpdateScript
        {
            add
            {
                HookHandler._afterUpdateScript += value;
                HookHandler.HookUpdateScript();
            }
            remove => HookHandler._afterUpdateScript -= value;
        }

        public static event Delegates.EditorHasChanged_NormalArgs EditorHasChanged
        {
            add
            {
                HookHandler._afterEditorHasChanged += value;
                HookHandler.HookEditorHasChanged();
            }
            remove => HookHandler._afterEditorHasChanged -= value;
        }

        public static event Delegates.PairKeyframes_NormalArgs PairKeyframes
        {
            add
            {
                HookHandler._afterPairKeyframes += value;
                HookHandler.HookPairKeyframes();
            }
            remove => HookHandler._afterPairKeyframes -= value;
        }

        public static event Delegates.SimplePairKeyframes_NormalArgs SimplePairKeyframes
        {
            add
            {
                HookHandler._afterSimplePairKeyframes += value;
                HookHandler.HookSimplePairKeyframes();
            }
            remove => HookHandler._afterSimplePairKeyframes -= value;
        }

        public static event Delegates.CreatePair_NormalArgs CreatePair
        {
            add
            {
                HookHandler._afterCreatePair += value;
                HookHandler.HookCreatePair();
            }
            remove => HookHandler._afterCreatePair -= value;
        }

        public static event Delegates.CreateCurveFromKeyframes_NormalArgs CreateCurveFromKeyframes
        {
            add
            {
                HookHandler._afterCreateCurveFromKeyframes += value;
                HookHandler.HookCreateCurveFromKeyframes();
            }
            remove => HookHandler._afterCreateCurveFromKeyframes -= value;
        }

        public static event Delegates.AverageKeyframe_NormalArgs AverageKeyframe
        {
            add
            {
                HookHandler._afterAverageKeyframe += value;
                HookHandler.HookAverageKeyframe();
            }
            remove => HookHandler._afterAverageKeyframe -= value;
        }

        public static event Delegates.PairCurvesKeyframes_NormalArgs PairCurvesKeyframes
        {
            add
            {
                HookHandler._afterPairCurvesKeyframes += value;
                HookHandler.HookPairCurvesKeyframes();
            }
            remove => HookHandler._afterPairCurvesKeyframes -= value;
        }

        public static event Delegates.UpdateScriptParameters_NormalArgs UpdateScriptParameters
        {
            add
            {
                HookHandler._afterUpdateScriptParameters += value;
                HookHandler.HookUpdateScriptParameters();
            }
            remove => HookHandler._afterUpdateScriptParameters -= value;
        }

        public static event Delegates.PairedListsInitiated_NormalArgs PairedListsInitiated
        {
            add
            {
                HookHandler._afterPairedListsInitiated += value;
                HookHandler.HookPairedListsInitiated();
            }
            remove => HookHandler._afterPairedListsInitiated -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.ColorCurvesManager.hook_SetFactor SetFactor
        {
            add => On.ColorCurvesManager.SetFactor += value;
            remove => On.ColorCurvesManager.SetFactor -= value;
        }

        public static event On.ColorCurvesManager.hook_SetSaturationA SetSaturationA
        {
            add => On.ColorCurvesManager.SetSaturationA += value;
            remove => On.ColorCurvesManager.SetSaturationA -= value;
        }

        public static event On.ColorCurvesManager.hook_SetSaturationB SetSaturationB
        {
            add => On.ColorCurvesManager.SetSaturationB += value;
            remove => On.ColorCurvesManager.SetSaturationB -= value;
        }

        public static event On.ColorCurvesManager.hook_Start Start
        {
            add => On.ColorCurvesManager.Start += value;
            remove => On.ColorCurvesManager.Start -= value;
        }

        public static event On.ColorCurvesManager.hook_Update Update
        {
            add => On.ColorCurvesManager.Update += value;
            remove => On.ColorCurvesManager.Update -= value;
        }

        public static event On.ColorCurvesManager.hook_UpdateScript UpdateScript
        {
            add => On.ColorCurvesManager.UpdateScript += value;
            remove => On.ColorCurvesManager.UpdateScript -= value;
        }

        public static event On.ColorCurvesManager.hook_EditorHasChanged EditorHasChanged
        {
            add => On.ColorCurvesManager.EditorHasChanged += value;
            remove => On.ColorCurvesManager.EditorHasChanged -= value;
        }

        public static event On.ColorCurvesManager.hook_PairKeyframes PairKeyframes
        {
            add => On.ColorCurvesManager.PairKeyframes += value;
            remove => On.ColorCurvesManager.PairKeyframes -= value;
        }

        public static event On.ColorCurvesManager.hook_SimplePairKeyframes SimplePairKeyframes
        {
            add => On.ColorCurvesManager.SimplePairKeyframes += value;
            remove => On.ColorCurvesManager.SimplePairKeyframes -= value;
        }

        public static event On.ColorCurvesManager.hook_CreatePair CreatePair
        {
            add => On.ColorCurvesManager.CreatePair += value;
            remove => On.ColorCurvesManager.CreatePair -= value;
        }

        public static event On.ColorCurvesManager.hook_CreateCurveFromKeyframes CreateCurveFromKeyframes
        {
            add => On.ColorCurvesManager.CreateCurveFromKeyframes += value;
            remove => On.ColorCurvesManager.CreateCurveFromKeyframes -= value;
        }

        public static event On.ColorCurvesManager.hook_AverageKeyframe AverageKeyframe
        {
            add => On.ColorCurvesManager.AverageKeyframe += value;
            remove => On.ColorCurvesManager.AverageKeyframe -= value;
        }

        public static event On.ColorCurvesManager.hook_PairCurvesKeyframes PairCurvesKeyframes
        {
            add => On.ColorCurvesManager.PairCurvesKeyframes += value;
            remove => On.ColorCurvesManager.PairCurvesKeyframes -= value;
        }

        public static event On.ColorCurvesManager.hook_UpdateScriptParameters UpdateScriptParameters
        {
            add => On.ColorCurvesManager.UpdateScriptParameters += value;
            remove => On.ColorCurvesManager.UpdateScriptParameters -= value;
        }

        public static event On.ColorCurvesManager.hook_PairedListsInitiated PairedListsInitiated
        {
            add => On.ColorCurvesManager.PairedListsInitiated += value;
            remove => On.ColorCurvesManager.PairedListsInitiated -= value;
        }
    }
}