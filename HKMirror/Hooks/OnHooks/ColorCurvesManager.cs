using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for ColorCurvesManager class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnColorCurvesManager
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookSetFactor()
{
if (!HookedList.Contains("SetFactor"))
{
HookedList.Add("SetFactor");
On.ColorCurvesManager.SetFactor += SetFactor;

}
}
internal static event Delegates.SetFactor_BeforeArgs _beforeSetFactor;
internal static event Delegates.SetFactor_AfterArgs _afterSetFactor;
private static void SetFactor(On.ColorCurvesManager.orig_SetFactor orig,ColorCurvesManager self,  float factor)
{
Delegates.Params_SetFactor @params = new() 
{
self = self
, factor = factor
};
if (_beforeSetFactor != null)
{
foreach (Delegates.SetFactor_BeforeArgs toInvoke in _beforeSetFactor.GetInvocationList())
{
try
{
_beforeSetFactor?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
factor = @params.factor;
orig(self, factor);
if (_afterSetFactor != null)
{
foreach (Delegates.SetFactor_AfterArgs toInvoke in _afterSetFactor.GetInvocationList())
{
try
{
_afterSetFactor.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetSaturationA()
{
if (!HookedList.Contains("SetSaturationA"))
{
HookedList.Add("SetSaturationA");
On.ColorCurvesManager.SetSaturationA += SetSaturationA;

}
}
internal static event Delegates.SetSaturationA_BeforeArgs _beforeSetSaturationA;
internal static event Delegates.SetSaturationA_AfterArgs _afterSetSaturationA;
private static void SetSaturationA(On.ColorCurvesManager.orig_SetSaturationA orig,ColorCurvesManager self,  float saturationA)
{
Delegates.Params_SetSaturationA @params = new() 
{
self = self
, saturationA = saturationA
};
if (_beforeSetSaturationA != null)
{
foreach (Delegates.SetSaturationA_BeforeArgs toInvoke in _beforeSetSaturationA.GetInvocationList())
{
try
{
_beforeSetSaturationA?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
saturationA = @params.saturationA;
orig(self, saturationA);
if (_afterSetSaturationA != null)
{
foreach (Delegates.SetSaturationA_AfterArgs toInvoke in _afterSetSaturationA.GetInvocationList())
{
try
{
_afterSetSaturationA.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetSaturationB()
{
if (!HookedList.Contains("SetSaturationB"))
{
HookedList.Add("SetSaturationB");
On.ColorCurvesManager.SetSaturationB += SetSaturationB;

}
}
internal static event Delegates.SetSaturationB_BeforeArgs _beforeSetSaturationB;
internal static event Delegates.SetSaturationB_AfterArgs _afterSetSaturationB;
private static void SetSaturationB(On.ColorCurvesManager.orig_SetSaturationB orig,ColorCurvesManager self,  float saturationB)
{
Delegates.Params_SetSaturationB @params = new() 
{
self = self
, saturationB = saturationB
};
if (_beforeSetSaturationB != null)
{
foreach (Delegates.SetSaturationB_BeforeArgs toInvoke in _beforeSetSaturationB.GetInvocationList())
{
try
{
_beforeSetSaturationB?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
saturationB = @params.saturationB;
orig(self, saturationB);
if (_afterSetSaturationB != null)
{
foreach (Delegates.SetSaturationB_AfterArgs toInvoke in _afterSetSaturationB.GetInvocationList())
{
try
{
_afterSetSaturationB.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.ColorCurvesManager.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.ColorCurvesManager.orig_Start orig,ColorCurvesManager self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdate()
{
if (!HookedList.Contains("Update"))
{
HookedList.Add("Update");
On.ColorCurvesManager.Update += Update;

}
}
internal static event Delegates.Update_BeforeArgs _beforeUpdate;
internal static event Delegates.Update_AfterArgs _afterUpdate;
private static void Update(On.ColorCurvesManager.orig_Update orig,ColorCurvesManager self)
{
Delegates.Params_Update @params = new() 
{
self = self
};
if (_beforeUpdate != null)
{
foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
{
try
{
_beforeUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdate != null)
{
foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
{
try
{
_afterUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateScript()
{
if (!HookedList.Contains("UpdateScript"))
{
HookedList.Add("UpdateScript");
On.ColorCurvesManager.UpdateScript += UpdateScript;

}
}
internal static event Delegates.UpdateScript_BeforeArgs _beforeUpdateScript;
internal static event Delegates.UpdateScript_AfterArgs _afterUpdateScript;
private static void UpdateScript(On.ColorCurvesManager.orig_UpdateScript orig,ColorCurvesManager self)
{
Delegates.Params_UpdateScript @params = new() 
{
self = self
};
if (_beforeUpdateScript != null)
{
foreach (Delegates.UpdateScript_BeforeArgs toInvoke in _beforeUpdateScript.GetInvocationList())
{
try
{
_beforeUpdateScript?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateScript != null)
{
foreach (Delegates.UpdateScript_AfterArgs toInvoke in _afterUpdateScript.GetInvocationList())
{
try
{
_afterUpdateScript.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookEditorHasChanged()
{
if (!HookedList.Contains("EditorHasChanged"))
{
HookedList.Add("EditorHasChanged");
On.ColorCurvesManager.EditorHasChanged += EditorHasChanged;

}
}
internal static event Delegates.EditorHasChanged_BeforeArgs _beforeEditorHasChanged;
internal static event Delegates.EditorHasChanged_AfterArgs _afterEditorHasChanged;
private static void EditorHasChanged(On.ColorCurvesManager.orig_EditorHasChanged orig,ColorCurvesManager self)
{
Delegates.Params_EditorHasChanged @params = new() 
{
self = self
};
if (_beforeEditorHasChanged != null)
{
foreach (Delegates.EditorHasChanged_BeforeArgs toInvoke in _beforeEditorHasChanged.GetInvocationList())
{
try
{
_beforeEditorHasChanged?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterEditorHasChanged != null)
{
foreach (Delegates.EditorHasChanged_AfterArgs toInvoke in _afterEditorHasChanged.GetInvocationList())
{
try
{
_afterEditorHasChanged.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookPairKeyframes()
{
if (!HookedList.Contains("PairKeyframes"))
{
HookedList.Add("PairKeyframes");
On.ColorCurvesManager.PairKeyframes += PairKeyframes;

}
}
internal static event Delegates.PairKeyframes_BeforeArgs _beforePairKeyframes;
internal static event Delegates.PairKeyframes_AfterArgs _afterPairKeyframes;
private static System.Collections.Generic.List<UnityEngine.Keyframe[]> PairKeyframes(On.ColorCurvesManager.orig_PairKeyframes orig, UnityEngine.AnimationCurve curveA,  UnityEngine.AnimationCurve curveB)
{
Delegates.Params_PairKeyframes @params = new() 
{
curveA = curveA
, curveB = curveB
};
if (_beforePairKeyframes != null)
{
foreach (Delegates.PairKeyframes_BeforeArgs toInvoke in _beforePairKeyframes.GetInvocationList())
{
try
{
_beforePairKeyframes?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
curveA = @params.curveA;
curveB = @params.curveB;
var retVal = orig(curveA, curveB);
if (_afterPairKeyframes != null)
{
foreach (Delegates.PairKeyframes_AfterArgs toInvoke in _afterPairKeyframes.GetInvocationList())
{
try
{
retVal = _afterPairKeyframes.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookSimplePairKeyframes()
{
if (!HookedList.Contains("SimplePairKeyframes"))
{
HookedList.Add("SimplePairKeyframes");
On.ColorCurvesManager.SimplePairKeyframes += SimplePairKeyframes;

}
}
internal static event Delegates.SimplePairKeyframes_BeforeArgs _beforeSimplePairKeyframes;
internal static event Delegates.SimplePairKeyframes_AfterArgs _afterSimplePairKeyframes;
private static System.Collections.Generic.List<UnityEngine.Keyframe[]> SimplePairKeyframes(On.ColorCurvesManager.orig_SimplePairKeyframes orig, UnityEngine.AnimationCurve curveA,  UnityEngine.AnimationCurve curveB)
{
Delegates.Params_SimplePairKeyframes @params = new() 
{
curveA = curveA
, curveB = curveB
};
if (_beforeSimplePairKeyframes != null)
{
foreach (Delegates.SimplePairKeyframes_BeforeArgs toInvoke in _beforeSimplePairKeyframes.GetInvocationList())
{
try
{
_beforeSimplePairKeyframes?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
curveA = @params.curveA;
curveB = @params.curveB;
var retVal = orig(curveA, curveB);
if (_afterSimplePairKeyframes != null)
{
foreach (Delegates.SimplePairKeyframes_AfterArgs toInvoke in _afterSimplePairKeyframes.GetInvocationList())
{
try
{
retVal = _afterSimplePairKeyframes.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookCreatePair()
{
if (!HookedList.Contains("CreatePair"))
{
HookedList.Add("CreatePair");
On.ColorCurvesManager.CreatePair += CreatePair;

}
}
internal static event Delegates.CreatePair_BeforeArgs _beforeCreatePair;
internal static event Delegates.CreatePair_AfterArgs _afterCreatePair;
private static UnityEngine.Keyframe CreatePair(On.ColorCurvesManager.orig_CreatePair orig, UnityEngine.Keyframe kf,  UnityEngine.AnimationCurve curve)
{
Delegates.Params_CreatePair @params = new() 
{
kf = kf
, curve = curve
};
if (_beforeCreatePair != null)
{
foreach (Delegates.CreatePair_BeforeArgs toInvoke in _beforeCreatePair.GetInvocationList())
{
try
{
_beforeCreatePair?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
kf = @params.kf;
curve = @params.curve;
var retVal = orig(kf, curve);
if (_afterCreatePair != null)
{
foreach (Delegates.CreatePair_AfterArgs toInvoke in _afterCreatePair.GetInvocationList())
{
try
{
retVal = _afterCreatePair.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookCreateCurveFromKeyframes()
{
if (!HookedList.Contains("CreateCurveFromKeyframes"))
{
HookedList.Add("CreateCurveFromKeyframes");
On.ColorCurvesManager.CreateCurveFromKeyframes += CreateCurveFromKeyframes;

}
}
internal static event Delegates.CreateCurveFromKeyframes_BeforeArgs _beforeCreateCurveFromKeyframes;
internal static event Delegates.CreateCurveFromKeyframes_AfterArgs _afterCreateCurveFromKeyframes;
private static UnityEngine.AnimationCurve CreateCurveFromKeyframes(On.ColorCurvesManager.orig_CreateCurveFromKeyframes orig, System.Collections.Generic.IList<UnityEngine.Keyframe[]> keyframePairs,  float factor)
{
Delegates.Params_CreateCurveFromKeyframes @params = new() 
{
keyframePairs = keyframePairs
, factor = factor
};
if (_beforeCreateCurveFromKeyframes != null)
{
foreach (Delegates.CreateCurveFromKeyframes_BeforeArgs toInvoke in _beforeCreateCurveFromKeyframes.GetInvocationList())
{
try
{
_beforeCreateCurveFromKeyframes?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
keyframePairs = @params.keyframePairs;
factor = @params.factor;
var retVal = orig(keyframePairs, factor);
if (_afterCreateCurveFromKeyframes != null)
{
foreach (Delegates.CreateCurveFromKeyframes_AfterArgs toInvoke in _afterCreateCurveFromKeyframes.GetInvocationList())
{
try
{
retVal = _afterCreateCurveFromKeyframes.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookAverageKeyframe()
{
if (!HookedList.Contains("AverageKeyframe"))
{
HookedList.Add("AverageKeyframe");
On.ColorCurvesManager.AverageKeyframe += AverageKeyframe;

}
}
internal static event Delegates.AverageKeyframe_BeforeArgs _beforeAverageKeyframe;
internal static event Delegates.AverageKeyframe_AfterArgs _afterAverageKeyframe;
private static UnityEngine.Keyframe AverageKeyframe(On.ColorCurvesManager.orig_AverageKeyframe orig, UnityEngine.Keyframe a,  UnityEngine.Keyframe b,  float factor)
{
Delegates.Params_AverageKeyframe @params = new() 
{
a = a
, b = b
, factor = factor
};
if (_beforeAverageKeyframe != null)
{
foreach (Delegates.AverageKeyframe_BeforeArgs toInvoke in _beforeAverageKeyframe.GetInvocationList())
{
try
{
_beforeAverageKeyframe?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
a = @params.a;
b = @params.b;
factor = @params.factor;
var retVal = orig(a, b, factor);
if (_afterAverageKeyframe != null)
{
foreach (Delegates.AverageKeyframe_AfterArgs toInvoke in _afterAverageKeyframe.GetInvocationList())
{
try
{
retVal = _afterAverageKeyframe.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookPairCurvesKeyframes()
{
if (!HookedList.Contains("PairCurvesKeyframes"))
{
HookedList.Add("PairCurvesKeyframes");
On.ColorCurvesManager.PairCurvesKeyframes += PairCurvesKeyframes;

}
}
internal static event Delegates.PairCurvesKeyframes_BeforeArgs _beforePairCurvesKeyframes;
internal static event Delegates.PairCurvesKeyframes_AfterArgs _afterPairCurvesKeyframes;
private static void PairCurvesKeyframes(On.ColorCurvesManager.orig_PairCurvesKeyframes orig,ColorCurvesManager self)
{
Delegates.Params_PairCurvesKeyframes @params = new() 
{
self = self
};
if (_beforePairCurvesKeyframes != null)
{
foreach (Delegates.PairCurvesKeyframes_BeforeArgs toInvoke in _beforePairCurvesKeyframes.GetInvocationList())
{
try
{
_beforePairCurvesKeyframes?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterPairCurvesKeyframes != null)
{
foreach (Delegates.PairCurvesKeyframes_AfterArgs toInvoke in _afterPairCurvesKeyframes.GetInvocationList())
{
try
{
_afterPairCurvesKeyframes.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateScriptParameters()
{
if (!HookedList.Contains("UpdateScriptParameters"))
{
HookedList.Add("UpdateScriptParameters");
On.ColorCurvesManager.UpdateScriptParameters += UpdateScriptParameters;

}
}
internal static event Delegates.UpdateScriptParameters_BeforeArgs _beforeUpdateScriptParameters;
internal static event Delegates.UpdateScriptParameters_AfterArgs _afterUpdateScriptParameters;
private static void UpdateScriptParameters(On.ColorCurvesManager.orig_UpdateScriptParameters orig,ColorCurvesManager self)
{
Delegates.Params_UpdateScriptParameters @params = new() 
{
self = self
};
if (_beforeUpdateScriptParameters != null)
{
foreach (Delegates.UpdateScriptParameters_BeforeArgs toInvoke in _beforeUpdateScriptParameters.GetInvocationList())
{
try
{
_beforeUpdateScriptParameters?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateScriptParameters != null)
{
foreach (Delegates.UpdateScriptParameters_AfterArgs toInvoke in _afterUpdateScriptParameters.GetInvocationList())
{
try
{
_afterUpdateScriptParameters.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookPairedListsInitiated()
{
if (!HookedList.Contains("PairedListsInitiated"))
{
HookedList.Add("PairedListsInitiated");
On.ColorCurvesManager.PairedListsInitiated += PairedListsInitiated;

}
}
internal static event Delegates.PairedListsInitiated_BeforeArgs _beforePairedListsInitiated;
internal static event Delegates.PairedListsInitiated_AfterArgs _afterPairedListsInitiated;
private static bool PairedListsInitiated(On.ColorCurvesManager.orig_PairedListsInitiated orig,ColorCurvesManager self)
{
Delegates.Params_PairedListsInitiated @params = new() 
{
self = self
};
if (_beforePairedListsInitiated != null)
{
foreach (Delegates.PairedListsInitiated_BeforeArgs toInvoke in _beforePairedListsInitiated.GetInvocationList())
{
try
{
_beforePairedListsInitiated?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterPairedListsInitiated != null)
{
foreach (Delegates.PairedListsInitiated_AfterArgs toInvoke in _afterPairedListsInitiated.GetInvocationList())
{
try
{
retVal = _afterPairedListsInitiated.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_SetFactor
{
public ColorCurvesManager self;
public float factor;
}
public delegate void SetFactor_BeforeArgs(Params_SetFactor args);
public delegate void SetFactor_AfterArgs(Params_SetFactor args);
public delegate void SetFactor_WithArgs (Action<ColorCurvesManager,  float> orig, ColorCurvesManager self,  float factor);
public sealed class Params_SetSaturationA
{
public ColorCurvesManager self;
public float saturationA;
}
public delegate void SetSaturationA_BeforeArgs(Params_SetSaturationA args);
public delegate void SetSaturationA_AfterArgs(Params_SetSaturationA args);
public delegate void SetSaturationA_WithArgs (Action<ColorCurvesManager,  float> orig, ColorCurvesManager self,  float saturationA);
public sealed class Params_SetSaturationB
{
public ColorCurvesManager self;
public float saturationB;
}
public delegate void SetSaturationB_BeforeArgs(Params_SetSaturationB args);
public delegate void SetSaturationB_AfterArgs(Params_SetSaturationB args);
public delegate void SetSaturationB_WithArgs (Action<ColorCurvesManager,  float> orig, ColorCurvesManager self,  float saturationB);
public sealed class Params_Start
{
public ColorCurvesManager self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<ColorCurvesManager> orig, ColorCurvesManager self);
public sealed class Params_Update
{
public ColorCurvesManager self;
}
public delegate void Update_BeforeArgs(Params_Update args);
public delegate void Update_AfterArgs(Params_Update args);
public delegate void Update_WithArgs (Action<ColorCurvesManager> orig, ColorCurvesManager self);
public sealed class Params_UpdateScript
{
public ColorCurvesManager self;
}
public delegate void UpdateScript_BeforeArgs(Params_UpdateScript args);
public delegate void UpdateScript_AfterArgs(Params_UpdateScript args);
public delegate void UpdateScript_WithArgs (Action<ColorCurvesManager> orig, ColorCurvesManager self);
public sealed class Params_EditorHasChanged
{
public ColorCurvesManager self;
}
public delegate void EditorHasChanged_BeforeArgs(Params_EditorHasChanged args);
public delegate void EditorHasChanged_AfterArgs(Params_EditorHasChanged args);
public delegate void EditorHasChanged_WithArgs (Action<ColorCurvesManager> orig, ColorCurvesManager self);
public sealed class Params_PairKeyframes
{
public UnityEngine.AnimationCurve curveA;
public UnityEngine.AnimationCurve curveB;
}
public delegate void PairKeyframes_BeforeArgs(Params_PairKeyframes args);
public delegate System.Collections.Generic.List<UnityEngine.Keyframe[]> PairKeyframes_AfterArgs(Params_PairKeyframes args, System.Collections.Generic.List<UnityEngine.Keyframe[]> ret);
public delegate System.Collections.Generic.List<UnityEngine.Keyframe[]> PairKeyframes_WithArgs (Func< UnityEngine.AnimationCurve,  UnityEngine.AnimationCurve, System.Collections.Generic.List<UnityEngine.Keyframe[]>> orig,  UnityEngine.AnimationCurve curveA,  UnityEngine.AnimationCurve curveB);
public sealed class Params_SimplePairKeyframes
{
public UnityEngine.AnimationCurve curveA;
public UnityEngine.AnimationCurve curveB;
}
public delegate void SimplePairKeyframes_BeforeArgs(Params_SimplePairKeyframes args);
public delegate System.Collections.Generic.List<UnityEngine.Keyframe[]> SimplePairKeyframes_AfterArgs(Params_SimplePairKeyframes args, System.Collections.Generic.List<UnityEngine.Keyframe[]> ret);
public delegate System.Collections.Generic.List<UnityEngine.Keyframe[]> SimplePairKeyframes_WithArgs (Func< UnityEngine.AnimationCurve,  UnityEngine.AnimationCurve, System.Collections.Generic.List<UnityEngine.Keyframe[]>> orig,  UnityEngine.AnimationCurve curveA,  UnityEngine.AnimationCurve curveB);
public sealed class Params_CreatePair
{
public UnityEngine.Keyframe kf;
public UnityEngine.AnimationCurve curve;
}
public delegate void CreatePair_BeforeArgs(Params_CreatePair args);
public delegate UnityEngine.Keyframe CreatePair_AfterArgs(Params_CreatePair args, UnityEngine.Keyframe ret);
public delegate UnityEngine.Keyframe CreatePair_WithArgs (Func< UnityEngine.Keyframe,  UnityEngine.AnimationCurve, UnityEngine.Keyframe> orig,  UnityEngine.Keyframe kf,  UnityEngine.AnimationCurve curve);
public sealed class Params_CreateCurveFromKeyframes
{
public System.Collections.Generic.IList<UnityEngine.Keyframe[]> keyframePairs;
public float factor;
}
public delegate void CreateCurveFromKeyframes_BeforeArgs(Params_CreateCurveFromKeyframes args);
public delegate UnityEngine.AnimationCurve CreateCurveFromKeyframes_AfterArgs(Params_CreateCurveFromKeyframes args, UnityEngine.AnimationCurve ret);
public delegate UnityEngine.AnimationCurve CreateCurveFromKeyframes_WithArgs (Func< System.Collections.Generic.IList<UnityEngine.Keyframe[]>,  float, UnityEngine.AnimationCurve> orig,  System.Collections.Generic.IList<UnityEngine.Keyframe[]> keyframePairs,  float factor);
public sealed class Params_AverageKeyframe
{
public UnityEngine.Keyframe a;
public UnityEngine.Keyframe b;
public float factor;
}
public delegate void AverageKeyframe_BeforeArgs(Params_AverageKeyframe args);
public delegate UnityEngine.Keyframe AverageKeyframe_AfterArgs(Params_AverageKeyframe args, UnityEngine.Keyframe ret);
public delegate UnityEngine.Keyframe AverageKeyframe_WithArgs (Func< UnityEngine.Keyframe,  UnityEngine.Keyframe,  float, UnityEngine.Keyframe> orig,  UnityEngine.Keyframe a,  UnityEngine.Keyframe b,  float factor);
public sealed class Params_PairCurvesKeyframes
{
public ColorCurvesManager self;
}
public delegate void PairCurvesKeyframes_BeforeArgs(Params_PairCurvesKeyframes args);
public delegate void PairCurvesKeyframes_AfterArgs(Params_PairCurvesKeyframes args);
public delegate void PairCurvesKeyframes_WithArgs (Action<ColorCurvesManager> orig, ColorCurvesManager self);
public sealed class Params_UpdateScriptParameters
{
public ColorCurvesManager self;
}
public delegate void UpdateScriptParameters_BeforeArgs(Params_UpdateScriptParameters args);
public delegate void UpdateScriptParameters_AfterArgs(Params_UpdateScriptParameters args);
public delegate void UpdateScriptParameters_WithArgs (Action<ColorCurvesManager> orig, ColorCurvesManager self);
public sealed class Params_PairedListsInitiated
{
public ColorCurvesManager self;
}
public delegate void PairedListsInitiated_BeforeArgs(Params_PairedListsInitiated args);
public delegate bool PairedListsInitiated_AfterArgs(Params_PairedListsInitiated args, bool ret);
public delegate bool PairedListsInitiated_WithArgs (Func<ColorCurvesManager, bool> orig, ColorCurvesManager self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.SetFactor_BeforeArgs SetFactor
{
add
{

HookHandler._beforeSetFactor += value;
HookHandler.HookSetFactor();
}
remove => HookHandler._beforeSetFactor -= value;
}
public static event Delegates.SetSaturationA_BeforeArgs SetSaturationA
{
add
{

HookHandler._beforeSetSaturationA += value;
HookHandler.HookSetSaturationA();
}
remove => HookHandler._beforeSetSaturationA -= value;
}
public static event Delegates.SetSaturationB_BeforeArgs SetSaturationB
{
add
{

HookHandler._beforeSetSaturationB += value;
HookHandler.HookSetSaturationB();
}
remove => HookHandler._beforeSetSaturationB -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.Update_BeforeArgs Update
{
add
{

HookHandler._beforeUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._beforeUpdate -= value;
}
public static event Delegates.UpdateScript_BeforeArgs UpdateScript
{
add
{

HookHandler._beforeUpdateScript += value;
HookHandler.HookUpdateScript();
}
remove => HookHandler._beforeUpdateScript -= value;
}
public static event Delegates.EditorHasChanged_BeforeArgs EditorHasChanged
{
add
{

HookHandler._beforeEditorHasChanged += value;
HookHandler.HookEditorHasChanged();
}
remove => HookHandler._beforeEditorHasChanged -= value;
}
public static event Delegates.PairKeyframes_BeforeArgs PairKeyframes
{
add
{

HookHandler._beforePairKeyframes += value;
HookHandler.HookPairKeyframes();
}
remove => HookHandler._beforePairKeyframes -= value;
}
public static event Delegates.SimplePairKeyframes_BeforeArgs SimplePairKeyframes
{
add
{

HookHandler._beforeSimplePairKeyframes += value;
HookHandler.HookSimplePairKeyframes();
}
remove => HookHandler._beforeSimplePairKeyframes -= value;
}
public static event Delegates.CreatePair_BeforeArgs CreatePair
{
add
{

HookHandler._beforeCreatePair += value;
HookHandler.HookCreatePair();
}
remove => HookHandler._beforeCreatePair -= value;
}
public static event Delegates.CreateCurveFromKeyframes_BeforeArgs CreateCurveFromKeyframes
{
add
{

HookHandler._beforeCreateCurveFromKeyframes += value;
HookHandler.HookCreateCurveFromKeyframes();
}
remove => HookHandler._beforeCreateCurveFromKeyframes -= value;
}
public static event Delegates.AverageKeyframe_BeforeArgs AverageKeyframe
{
add
{

HookHandler._beforeAverageKeyframe += value;
HookHandler.HookAverageKeyframe();
}
remove => HookHandler._beforeAverageKeyframe -= value;
}
public static event Delegates.PairCurvesKeyframes_BeforeArgs PairCurvesKeyframes
{
add
{

HookHandler._beforePairCurvesKeyframes += value;
HookHandler.HookPairCurvesKeyframes();
}
remove => HookHandler._beforePairCurvesKeyframes -= value;
}
public static event Delegates.UpdateScriptParameters_BeforeArgs UpdateScriptParameters
{
add
{

HookHandler._beforeUpdateScriptParameters += value;
HookHandler.HookUpdateScriptParameters();
}
remove => HookHandler._beforeUpdateScriptParameters -= value;
}
public static event Delegates.PairedListsInitiated_BeforeArgs PairedListsInitiated
{
add
{

HookHandler._beforePairedListsInitiated += value;
HookHandler.HookPairedListsInitiated();
}
remove => HookHandler._beforePairedListsInitiated -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.SetFactor_AfterArgs SetFactor
{
add
{

HookHandler._afterSetFactor += value;
HookHandler.HookSetFactor();
}
remove => HookHandler._afterSetFactor -= value;
}
public static event Delegates.SetSaturationA_AfterArgs SetSaturationA
{
add
{

HookHandler._afterSetSaturationA += value;
HookHandler.HookSetSaturationA();
}
remove => HookHandler._afterSetSaturationA -= value;
}
public static event Delegates.SetSaturationB_AfterArgs SetSaturationB
{
add
{

HookHandler._afterSetSaturationB += value;
HookHandler.HookSetSaturationB();
}
remove => HookHandler._afterSetSaturationB -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.Update_AfterArgs Update
{
add
{

HookHandler._afterUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._afterUpdate -= value;
}
public static event Delegates.UpdateScript_AfterArgs UpdateScript
{
add
{

HookHandler._afterUpdateScript += value;
HookHandler.HookUpdateScript();
}
remove => HookHandler._afterUpdateScript -= value;
}
public static event Delegates.EditorHasChanged_AfterArgs EditorHasChanged
{
add
{

HookHandler._afterEditorHasChanged += value;
HookHandler.HookEditorHasChanged();
}
remove => HookHandler._afterEditorHasChanged -= value;
}
public static event Delegates.PairKeyframes_AfterArgs PairKeyframes
{
add
{

HookHandler._afterPairKeyframes += value;
HookHandler.HookPairKeyframes();
}
remove => HookHandler._afterPairKeyframes -= value;
}
public static event Delegates.SimplePairKeyframes_AfterArgs SimplePairKeyframes
{
add
{

HookHandler._afterSimplePairKeyframes += value;
HookHandler.HookSimplePairKeyframes();
}
remove => HookHandler._afterSimplePairKeyframes -= value;
}
public static event Delegates.CreatePair_AfterArgs CreatePair
{
add
{

HookHandler._afterCreatePair += value;
HookHandler.HookCreatePair();
}
remove => HookHandler._afterCreatePair -= value;
}
public static event Delegates.CreateCurveFromKeyframes_AfterArgs CreateCurveFromKeyframes
{
add
{

HookHandler._afterCreateCurveFromKeyframes += value;
HookHandler.HookCreateCurveFromKeyframes();
}
remove => HookHandler._afterCreateCurveFromKeyframes -= value;
}
public static event Delegates.AverageKeyframe_AfterArgs AverageKeyframe
{
add
{

HookHandler._afterAverageKeyframe += value;
HookHandler.HookAverageKeyframe();
}
remove => HookHandler._afterAverageKeyframe -= value;
}
public static event Delegates.PairCurvesKeyframes_AfterArgs PairCurvesKeyframes
{
add
{

HookHandler._afterPairCurvesKeyframes += value;
HookHandler.HookPairCurvesKeyframes();
}
remove => HookHandler._afterPairCurvesKeyframes -= value;
}
public static event Delegates.UpdateScriptParameters_AfterArgs UpdateScriptParameters
{
add
{

HookHandler._afterUpdateScriptParameters += value;
HookHandler.HookUpdateScriptParameters();
}
remove => HookHandler._afterUpdateScriptParameters -= value;
}
public static event Delegates.PairedListsInitiated_AfterArgs PairedListsInitiated
{
add
{

HookHandler._afterPairedListsInitiated += value;
HookHandler.HookPairedListsInitiated();
}
remove => HookHandler._afterPairedListsInitiated -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.ColorCurvesManager.hook_SetFactor SetFactor
{
add => On.ColorCurvesManager.SetFactor += value;
remove => On.ColorCurvesManager.SetFactor -= value;
}
public static event On.ColorCurvesManager.hook_SetSaturationA SetSaturationA
{
add => On.ColorCurvesManager.SetSaturationA += value;
remove => On.ColorCurvesManager.SetSaturationA -= value;
}
public static event On.ColorCurvesManager.hook_SetSaturationB SetSaturationB
{
add => On.ColorCurvesManager.SetSaturationB += value;
remove => On.ColorCurvesManager.SetSaturationB -= value;
}
public static event On.ColorCurvesManager.hook_Start Start
{
add => On.ColorCurvesManager.Start += value;
remove => On.ColorCurvesManager.Start -= value;
}
public static event On.ColorCurvesManager.hook_Update Update
{
add => On.ColorCurvesManager.Update += value;
remove => On.ColorCurvesManager.Update -= value;
}
public static event On.ColorCurvesManager.hook_UpdateScript UpdateScript
{
add => On.ColorCurvesManager.UpdateScript += value;
remove => On.ColorCurvesManager.UpdateScript -= value;
}
public static event On.ColorCurvesManager.hook_EditorHasChanged EditorHasChanged
{
add => On.ColorCurvesManager.EditorHasChanged += value;
remove => On.ColorCurvesManager.EditorHasChanged -= value;
}
public static event On.ColorCurvesManager.hook_PairKeyframes PairKeyframes
{
add => On.ColorCurvesManager.PairKeyframes += value;
remove => On.ColorCurvesManager.PairKeyframes -= value;
}
public static event On.ColorCurvesManager.hook_SimplePairKeyframes SimplePairKeyframes
{
add => On.ColorCurvesManager.SimplePairKeyframes += value;
remove => On.ColorCurvesManager.SimplePairKeyframes -= value;
}
public static event On.ColorCurvesManager.hook_CreatePair CreatePair
{
add => On.ColorCurvesManager.CreatePair += value;
remove => On.ColorCurvesManager.CreatePair -= value;
}
public static event On.ColorCurvesManager.hook_CreateCurveFromKeyframes CreateCurveFromKeyframes
{
add => On.ColorCurvesManager.CreateCurveFromKeyframes += value;
remove => On.ColorCurvesManager.CreateCurveFromKeyframes -= value;
}
public static event On.ColorCurvesManager.hook_AverageKeyframe AverageKeyframe
{
add => On.ColorCurvesManager.AverageKeyframe += value;
remove => On.ColorCurvesManager.AverageKeyframe -= value;
}
public static event On.ColorCurvesManager.hook_PairCurvesKeyframes PairCurvesKeyframes
{
add => On.ColorCurvesManager.PairCurvesKeyframes += value;
remove => On.ColorCurvesManager.PairCurvesKeyframes -= value;
}
public static event On.ColorCurvesManager.hook_UpdateScriptParameters UpdateScriptParameters
{
add => On.ColorCurvesManager.UpdateScriptParameters += value;
remove => On.ColorCurvesManager.UpdateScriptParameters -= value;
}
public static event On.ColorCurvesManager.hook_PairedListsInitiated PairedListsInitiated
{
add => On.ColorCurvesManager.PairedListsInitiated += value;
remove => On.ColorCurvesManager.PairedListsInitiated -= value;
}
}

}
