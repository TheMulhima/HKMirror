using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for SceneryTriggerCircle class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSceneryTriggerCircle
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_active()
        {
            if (!HookedList.Contains("get_active"))
            {
                HookedList.Add("get_active");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneryTriggerCircle), "get_active"), get_active);
            }
        }

        internal static event Delegates.get_active_BeforeArgs _beforeget_active;
        internal static event Delegates.get_active_NormalArgs _afterget_active;

        private static bool get_active(Func<SceneryTriggerCircle, bool> orig, SceneryTriggerCircle self)
        {
            Delegates.Params_get_active @params = new()
            {
                self = self
            };
            _beforeget_active?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_active != null) retVal = _afterget_active.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_active()
        {
            if (!HookedList.Contains("set_active"))
            {
                HookedList.Add("set_active");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneryTriggerCircle), "set_active"), set_active);
            }
        }

        internal static event Delegates.set_active_BeforeArgs _beforeset_active;
        internal static event Delegates.set_active_NormalArgs _afterset_active;

        private static void set_active(Action<SceneryTriggerCircle, bool> orig, SceneryTriggerCircle self, bool value)
        {
            Delegates.Params_set_active @params = new()
            {
                self = self, value = value
            };
            _beforeset_active?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_active != null) _afterset_active.Invoke(@params);
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.SceneryTriggerCircle.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.SceneryTriggerCircle.orig_Awake orig, SceneryTriggerCircle self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.SceneryTriggerCircle.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_NormalArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.SceneryTriggerCircle.orig_OnTriggerEnter2D orig,
            SceneryTriggerCircle self, Collider2D other)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, other = other
            };
            _beforeOnTriggerEnter2D?.Invoke(@params);
            self = @params.self;
            other = @params.other;
            orig(self, other);
            if (_afterOnTriggerEnter2D != null) _afterOnTriggerEnter2D.Invoke(@params);
        }

        internal static void HookOnTriggerStay2D()
        {
            if (!HookedList.Contains("OnTriggerStay2D"))
            {
                HookedList.Add("OnTriggerStay2D");
                On.SceneryTriggerCircle.OnTriggerStay2D += OnTriggerStay2D;
            }
        }

        internal static event Delegates.OnTriggerStay2D_BeforeArgs _beforeOnTriggerStay2D;
        internal static event Delegates.OnTriggerStay2D_NormalArgs _afterOnTriggerStay2D;

        private static void OnTriggerStay2D(On.SceneryTriggerCircle.orig_OnTriggerStay2D orig,
            SceneryTriggerCircle self, Collider2D other)
        {
            Delegates.Params_OnTriggerStay2D @params = new()
            {
                self = self, other = other
            };
            _beforeOnTriggerStay2D?.Invoke(@params);
            self = @params.self;
            other = @params.other;
            orig(self, other);
            if (_afterOnTriggerStay2D != null) _afterOnTriggerStay2D.Invoke(@params);
        }

        internal static void HookOnTriggerExit2D()
        {
            if (!HookedList.Contains("OnTriggerExit2D"))
            {
                HookedList.Add("OnTriggerExit2D");
                On.SceneryTriggerCircle.OnTriggerExit2D += OnTriggerExit2D;
            }
        }

        internal static event Delegates.OnTriggerExit2D_BeforeArgs _beforeOnTriggerExit2D;
        internal static event Delegates.OnTriggerExit2D_NormalArgs _afterOnTriggerExit2D;

        private static void OnTriggerExit2D(On.SceneryTriggerCircle.orig_OnTriggerExit2D orig,
            SceneryTriggerCircle self, Collider2D other)
        {
            Delegates.Params_OnTriggerExit2D @params = new()
            {
                self = self, other = other
            };
            _beforeOnTriggerExit2D?.Invoke(@params);
            self = @params.self;
            other = @params.other;
            orig(self, other);
            if (_afterOnTriggerExit2D != null) _afterOnTriggerExit2D.Invoke(@params);
        }

        internal static void HookRandomizePitch()
        {
            if (!HookedList.Contains("RandomizePitch"))
            {
                HookedList.Add("RandomizePitch");
                On.SceneryTriggerCircle.RandomizePitch += RandomizePitch;
            }
        }

        internal static event Delegates.RandomizePitch_BeforeArgs _beforeRandomizePitch;
        internal static event Delegates.RandomizePitch_NormalArgs _afterRandomizePitch;

        private static void RandomizePitch(On.SceneryTriggerCircle.orig_RandomizePitch orig, SceneryTriggerCircle self,
            AudioSource src, float minPitch, float maxPitch)
        {
            Delegates.Params_RandomizePitch @params = new()
            {
                self = self, src = src, minPitch = minPitch, maxPitch = maxPitch
            };
            _beforeRandomizePitch?.Invoke(@params);
            self = @params.self;
            src = @params.src;
            minPitch = @params.minPitch;
            maxPitch = @params.maxPitch;
            orig(self, src, minPitch, maxPitch);
            if (_afterRandomizePitch != null) _afterRandomizePitch.Invoke(@params);
        }

        internal static void HookResetPitch()
        {
            if (!HookedList.Contains("ResetPitch"))
            {
                HookedList.Add("ResetPitch");
                On.SceneryTriggerCircle.ResetPitch += ResetPitch;
            }
        }

        internal static event Delegates.ResetPitch_BeforeArgs _beforeResetPitch;
        internal static event Delegates.ResetPitch_NormalArgs _afterResetPitch;

        private static void ResetPitch(On.SceneryTriggerCircle.orig_ResetPitch orig, SceneryTriggerCircle self,
            AudioSource src)
        {
            Delegates.Params_ResetPitch @params = new()
            {
                self = self, src = src
            };
            _beforeResetPitch?.Invoke(@params);
            self = @params.self;
            src = @params.src;
            orig(self, src);
            if (_afterResetPitch != null) _afterResetPitch.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void get_active_BeforeArgs(Params_get_active args);

        public delegate bool get_active_NormalArgs(Params_get_active args);

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_NormalArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerExit2D_BeforeArgs(Params_OnTriggerExit2D args);

        public delegate void OnTriggerExit2D_NormalArgs(Params_OnTriggerExit2D args);

        public delegate void OnTriggerStay2D_BeforeArgs(Params_OnTriggerStay2D args);

        public delegate void OnTriggerStay2D_NormalArgs(Params_OnTriggerStay2D args);

        public delegate void RandomizePitch_BeforeArgs(Params_RandomizePitch args);

        public delegate void RandomizePitch_NormalArgs(Params_RandomizePitch args);

        public delegate void ResetPitch_BeforeArgs(Params_ResetPitch args);

        public delegate void ResetPitch_NormalArgs(Params_ResetPitch args);

        public delegate void set_active_BeforeArgs(Params_set_active args);

        public delegate void set_active_NormalArgs(Params_set_active args);

        public sealed class Params_get_active
        {
            public SceneryTriggerCircle self;
        }

        public sealed class Params_set_active
        {
            public SceneryTriggerCircle self;
            public bool value;
        }

        public sealed class Params_Awake
        {
            public SceneryTriggerCircle self;
        }

        public sealed class Params_OnTriggerEnter2D
        {
            public Collider2D other;
            public SceneryTriggerCircle self;
        }

        public sealed class Params_OnTriggerStay2D
        {
            public Collider2D other;
            public SceneryTriggerCircle self;
        }

        public sealed class Params_OnTriggerExit2D
        {
            public Collider2D other;
            public SceneryTriggerCircle self;
        }

        public sealed class Params_RandomizePitch
        {
            public float maxPitch;
            public float minPitch;
            public SceneryTriggerCircle self;
            public AudioSource src;
        }

        public sealed class Params_ResetPitch
        {
            public SceneryTriggerCircle self;
            public AudioSource src;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_active_BeforeArgs get_active
        {
            add
            {
                HookHandler._beforeget_active += value;
                HookHandler.Hookget_active();
            }
            remove => HookHandler._beforeget_active -= value;
        }

        public static event Delegates.set_active_BeforeArgs set_active
        {
            add
            {
                HookHandler._beforeset_active += value;
                HookHandler.Hookset_active();
            }
            remove => HookHandler._beforeset_active -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.OnTriggerStay2D_BeforeArgs OnTriggerStay2D
        {
            add
            {
                HookHandler._beforeOnTriggerStay2D += value;
                HookHandler.HookOnTriggerStay2D();
            }
            remove => HookHandler._beforeOnTriggerStay2D -= value;
        }

        public static event Delegates.OnTriggerExit2D_BeforeArgs OnTriggerExit2D
        {
            add
            {
                HookHandler._beforeOnTriggerExit2D += value;
                HookHandler.HookOnTriggerExit2D();
            }
            remove => HookHandler._beforeOnTriggerExit2D -= value;
        }

        public static event Delegates.RandomizePitch_BeforeArgs RandomizePitch
        {
            add
            {
                HookHandler._beforeRandomizePitch += value;
                HookHandler.HookRandomizePitch();
            }
            remove => HookHandler._beforeRandomizePitch -= value;
        }

        public static event Delegates.ResetPitch_BeforeArgs ResetPitch
        {
            add
            {
                HookHandler._beforeResetPitch += value;
                HookHandler.HookResetPitch();
            }
            remove => HookHandler._beforeResetPitch -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_active_NormalArgs get_active
        {
            add
            {
                HookHandler._afterget_active += value;
                HookHandler.Hookget_active();
            }
            remove => HookHandler._afterget_active -= value;
        }

        public static event Delegates.set_active_NormalArgs set_active
        {
            add
            {
                HookHandler._afterset_active += value;
                HookHandler.Hookset_active();
            }
            remove => HookHandler._afterset_active -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnTriggerEnter2D_NormalArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }

        public static event Delegates.OnTriggerStay2D_NormalArgs OnTriggerStay2D
        {
            add
            {
                HookHandler._afterOnTriggerStay2D += value;
                HookHandler.HookOnTriggerStay2D();
            }
            remove => HookHandler._afterOnTriggerStay2D -= value;
        }

        public static event Delegates.OnTriggerExit2D_NormalArgs OnTriggerExit2D
        {
            add
            {
                HookHandler._afterOnTriggerExit2D += value;
                HookHandler.HookOnTriggerExit2D();
            }
            remove => HookHandler._afterOnTriggerExit2D -= value;
        }

        public static event Delegates.RandomizePitch_NormalArgs RandomizePitch
        {
            add
            {
                HookHandler._afterRandomizePitch += value;
                HookHandler.HookRandomizePitch();
            }
            remove => HookHandler._afterRandomizePitch -= value;
        }

        public static event Delegates.ResetPitch_NormalArgs ResetPitch
        {
            add
            {
                HookHandler._afterResetPitch += value;
                HookHandler.HookResetPitch();
            }
            remove => HookHandler._afterResetPitch -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_active_NormalArgs get_active
        {
            add => HookEndpointManager.Add<Delegates.get_active_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneryTriggerCircle), "get_active"), value);
            remove => HookEndpointManager.Remove<Delegates.get_active_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneryTriggerCircle), "get_active"), value);
        }

        public static event Delegates.set_active_NormalArgs set_active
        {
            add => HookEndpointManager.Add<Delegates.set_active_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneryTriggerCircle), "set_active"), value);
            remove => HookEndpointManager.Remove<Delegates.set_active_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneryTriggerCircle), "set_active"), value);
        }

        public static event On.SceneryTriggerCircle.hook_Awake Awake
        {
            add => On.SceneryTriggerCircle.Awake += value;
            remove => On.SceneryTriggerCircle.Awake -= value;
        }

        public static event On.SceneryTriggerCircle.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.SceneryTriggerCircle.OnTriggerEnter2D += value;
            remove => On.SceneryTriggerCircle.OnTriggerEnter2D -= value;
        }

        public static event On.SceneryTriggerCircle.hook_OnTriggerStay2D OnTriggerStay2D
        {
            add => On.SceneryTriggerCircle.OnTriggerStay2D += value;
            remove => On.SceneryTriggerCircle.OnTriggerStay2D -= value;
        }

        public static event On.SceneryTriggerCircle.hook_OnTriggerExit2D OnTriggerExit2D
        {
            add => On.SceneryTriggerCircle.OnTriggerExit2D += value;
            remove => On.SceneryTriggerCircle.OnTriggerExit2D -= value;
        }

        public static event On.SceneryTriggerCircle.hook_RandomizePitch RandomizePitch
        {
            add => On.SceneryTriggerCircle.RandomizePitch += value;
            remove => On.SceneryTriggerCircle.RandomizePitch -= value;
        }

        public static event On.SceneryTriggerCircle.hook_ResetPitch ResetPitch
        {
            add => On.SceneryTriggerCircle.ResetPitch += value;
            remove => On.SceneryTriggerCircle.ResetPitch -= value;
        }
    }
}