using System.Text;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;
using Bounds = UnityEngine.Bounds;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TMP_Text class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTMP_Text
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_text()
        {
            if (!HookedList.Contains("get_text"))
            {
                HookedList.Add("get_text");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_text"), get_text);
            }
        }

        internal static event Delegates.get_text_BeforeArgs _beforeget_text;
        internal static event Delegates.get_text_NormalArgs _afterget_text;

        private static string get_text(Func<TMP_Text, string> orig, TMP_Text self)
        {
            Delegates.Params_get_text @params = new()
            {
                self = self
            };
            _beforeget_text?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_text != null) retVal = _afterget_text.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_text()
        {
            if (!HookedList.Contains("set_text"))
            {
                HookedList.Add("set_text");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_text"), set_text);
            }
        }

        internal static event Delegates.set_text_BeforeArgs _beforeset_text;
        internal static event Delegates.set_text_NormalArgs _afterset_text;

        private static void set_text(Action<TMP_Text, string> orig, TMP_Text self, string value)
        {
            Delegates.Params_set_text @params = new()
            {
                self = self, value = value
            };
            _beforeset_text?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_text != null) _afterset_text.Invoke(@params);
        }

        internal static void Hookget_isRightToLeftText()
        {
            if (!HookedList.Contains("get_isRightToLeftText"))
            {
                HookedList.Add("get_isRightToLeftText");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_isRightToLeftText"),
                    get_isRightToLeftText);
            }
        }

        internal static event Delegates.get_isRightToLeftText_BeforeArgs _beforeget_isRightToLeftText;
        internal static event Delegates.get_isRightToLeftText_NormalArgs _afterget_isRightToLeftText;

        private static bool get_isRightToLeftText(Func<TMP_Text, bool> orig, TMP_Text self)
        {
            Delegates.Params_get_isRightToLeftText @params = new()
            {
                self = self
            };
            _beforeget_isRightToLeftText?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_isRightToLeftText != null) retVal = _afterget_isRightToLeftText.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_isRightToLeftText()
        {
            if (!HookedList.Contains("set_isRightToLeftText"))
            {
                HookedList.Add("set_isRightToLeftText");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_isRightToLeftText"),
                    set_isRightToLeftText);
            }
        }

        internal static event Delegates.set_isRightToLeftText_BeforeArgs _beforeset_isRightToLeftText;
        internal static event Delegates.set_isRightToLeftText_NormalArgs _afterset_isRightToLeftText;

        private static void set_isRightToLeftText(Action<TMP_Text, bool> orig, TMP_Text self, bool value)
        {
            Delegates.Params_set_isRightToLeftText @params = new()
            {
                self = self, value = value
            };
            _beforeset_isRightToLeftText?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_isRightToLeftText != null) _afterset_isRightToLeftText.Invoke(@params);
        }

        internal static void Hookget_font()
        {
            if (!HookedList.Contains("get_font"))
            {
                HookedList.Add("get_font");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_font"), get_font);
            }
        }

        internal static event Delegates.get_font_BeforeArgs _beforeget_font;
        internal static event Delegates.get_font_NormalArgs _afterget_font;

        private static TMP_FontAsset get_font(Func<TMP_Text, TMP_FontAsset> orig, TMP_Text self)
        {
            Delegates.Params_get_font @params = new()
            {
                self = self
            };
            _beforeget_font?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_font != null) retVal = _afterget_font.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_font()
        {
            if (!HookedList.Contains("set_font"))
            {
                HookedList.Add("set_font");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_font"), set_font);
            }
        }

        internal static event Delegates.set_font_BeforeArgs _beforeset_font;
        internal static event Delegates.set_font_NormalArgs _afterset_font;

        private static void set_font(Action<TMP_Text, TMP_FontAsset> orig, TMP_Text self, TMP_FontAsset value)
        {
            Delegates.Params_set_font @params = new()
            {
                self = self, value = value
            };
            _beforeset_font?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_font != null) _afterset_font.Invoke(@params);
        }

        internal static void Hookget_fontSharedMaterial()
        {
            if (!HookedList.Contains("get_fontSharedMaterial"))
            {
                HookedList.Add("get_fontSharedMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontSharedMaterial"),
                    get_fontSharedMaterial);
            }
        }

        internal static event Delegates.get_fontSharedMaterial_BeforeArgs _beforeget_fontSharedMaterial;
        internal static event Delegates.get_fontSharedMaterial_NormalArgs _afterget_fontSharedMaterial;

        private static Material get_fontSharedMaterial(Func<TMP_Text, Material> orig, TMP_Text self)
        {
            Delegates.Params_get_fontSharedMaterial @params = new()
            {
                self = self
            };
            _beforeget_fontSharedMaterial?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_fontSharedMaterial != null) retVal = _afterget_fontSharedMaterial.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_fontSharedMaterial()
        {
            if (!HookedList.Contains("set_fontSharedMaterial"))
            {
                HookedList.Add("set_fontSharedMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontSharedMaterial"),
                    set_fontSharedMaterial);
            }
        }

        internal static event Delegates.set_fontSharedMaterial_BeforeArgs _beforeset_fontSharedMaterial;
        internal static event Delegates.set_fontSharedMaterial_NormalArgs _afterset_fontSharedMaterial;

        private static void set_fontSharedMaterial(Action<TMP_Text, Material> orig, TMP_Text self, Material value)
        {
            Delegates.Params_set_fontSharedMaterial @params = new()
            {
                self = self, value = value
            };
            _beforeset_fontSharedMaterial?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_fontSharedMaterial != null) _afterset_fontSharedMaterial.Invoke(@params);
        }

        internal static void Hookget_fontSharedMaterials()
        {
            if (!HookedList.Contains("get_fontSharedMaterials"))
            {
                HookedList.Add("get_fontSharedMaterials");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontSharedMaterials"),
                    get_fontSharedMaterials);
            }
        }

        internal static event Delegates.get_fontSharedMaterials_BeforeArgs _beforeget_fontSharedMaterials;
        internal static event Delegates.get_fontSharedMaterials_NormalArgs _afterget_fontSharedMaterials;

        private static Material[] get_fontSharedMaterials(Func<TMP_Text, Material[]> orig, TMP_Text self)
        {
            Delegates.Params_get_fontSharedMaterials @params = new()
            {
                self = self
            };
            _beforeget_fontSharedMaterials?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_fontSharedMaterials != null) retVal = _afterget_fontSharedMaterials.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_fontSharedMaterials()
        {
            if (!HookedList.Contains("set_fontSharedMaterials"))
            {
                HookedList.Add("set_fontSharedMaterials");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontSharedMaterials"),
                    set_fontSharedMaterials);
            }
        }

        internal static event Delegates.set_fontSharedMaterials_BeforeArgs _beforeset_fontSharedMaterials;
        internal static event Delegates.set_fontSharedMaterials_NormalArgs _afterset_fontSharedMaterials;

        private static void set_fontSharedMaterials(Action<TMP_Text, Material[]> orig, TMP_Text self, Material[] value)
        {
            Delegates.Params_set_fontSharedMaterials @params = new()
            {
                self = self, value = value
            };
            _beforeset_fontSharedMaterials?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_fontSharedMaterials != null) _afterset_fontSharedMaterials.Invoke(@params);
        }

        internal static void Hookget_fontMaterial()
        {
            if (!HookedList.Contains("get_fontMaterial"))
            {
                HookedList.Add("get_fontMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontMaterial"), get_fontMaterial);
            }
        }

        internal static event Delegates.get_fontMaterial_BeforeArgs _beforeget_fontMaterial;
        internal static event Delegates.get_fontMaterial_NormalArgs _afterget_fontMaterial;

        private static Material get_fontMaterial(Func<TMP_Text, Material> orig, TMP_Text self)
        {
            Delegates.Params_get_fontMaterial @params = new()
            {
                self = self
            };
            _beforeget_fontMaterial?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_fontMaterial != null) retVal = _afterget_fontMaterial.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_fontMaterial()
        {
            if (!HookedList.Contains("set_fontMaterial"))
            {
                HookedList.Add("set_fontMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontMaterial"), set_fontMaterial);
            }
        }

        internal static event Delegates.set_fontMaterial_BeforeArgs _beforeset_fontMaterial;
        internal static event Delegates.set_fontMaterial_NormalArgs _afterset_fontMaterial;

        private static void set_fontMaterial(Action<TMP_Text, Material> orig, TMP_Text self, Material value)
        {
            Delegates.Params_set_fontMaterial @params = new()
            {
                self = self, value = value
            };
            _beforeset_fontMaterial?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_fontMaterial != null) _afterset_fontMaterial.Invoke(@params);
        }

        internal static void Hookget_fontMaterials()
        {
            if (!HookedList.Contains("get_fontMaterials"))
            {
                HookedList.Add("get_fontMaterials");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontMaterials"), get_fontMaterials);
            }
        }

        internal static event Delegates.get_fontMaterials_BeforeArgs _beforeget_fontMaterials;
        internal static event Delegates.get_fontMaterials_NormalArgs _afterget_fontMaterials;

        private static Material[] get_fontMaterials(Func<TMP_Text, Material[]> orig, TMP_Text self)
        {
            Delegates.Params_get_fontMaterials @params = new()
            {
                self = self
            };
            _beforeget_fontMaterials?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_fontMaterials != null) retVal = _afterget_fontMaterials.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_fontMaterials()
        {
            if (!HookedList.Contains("set_fontMaterials"))
            {
                HookedList.Add("set_fontMaterials");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontMaterials"), set_fontMaterials);
            }
        }

        internal static event Delegates.set_fontMaterials_BeforeArgs _beforeset_fontMaterials;
        internal static event Delegates.set_fontMaterials_NormalArgs _afterset_fontMaterials;

        private static void set_fontMaterials(Action<TMP_Text, Material[]> orig, TMP_Text self, Material[] value)
        {
            Delegates.Params_set_fontMaterials @params = new()
            {
                self = self, value = value
            };
            _beforeset_fontMaterials?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_fontMaterials != null) _afterset_fontMaterials.Invoke(@params);
        }

        internal static void Hookget_color()
        {
            if (!HookedList.Contains("get_color"))
            {
                HookedList.Add("get_color");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_color"), get_color);
            }
        }

        internal static event Delegates.get_color_BeforeArgs _beforeget_color;
        internal static event Delegates.get_color_NormalArgs _afterget_color;

        private static Color get_color(Func<TMP_Text, Color> orig, TMP_Text self)
        {
            Delegates.Params_get_color @params = new()
            {
                self = self
            };
            _beforeget_color?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_color != null) retVal = _afterget_color.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_color()
        {
            if (!HookedList.Contains("set_color"))
            {
                HookedList.Add("set_color");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_color"), set_color);
            }
        }

        internal static event Delegates.set_color_BeforeArgs _beforeset_color;
        internal static event Delegates.set_color_NormalArgs _afterset_color;

        private static void set_color(Action<TMP_Text, Color> orig, TMP_Text self, Color value)
        {
            Delegates.Params_set_color @params = new()
            {
                self = self, value = value
            };
            _beforeset_color?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_color != null) _afterset_color.Invoke(@params);
        }

        internal static void Hookget_alpha()
        {
            if (!HookedList.Contains("get_alpha"))
            {
                HookedList.Add("get_alpha");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_alpha"), get_alpha);
            }
        }

        internal static event Delegates.get_alpha_BeforeArgs _beforeget_alpha;
        internal static event Delegates.get_alpha_NormalArgs _afterget_alpha;

        private static float get_alpha(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_get_alpha @params = new()
            {
                self = self
            };
            _beforeget_alpha?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_alpha != null) retVal = _afterget_alpha.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_alpha()
        {
            if (!HookedList.Contains("set_alpha"))
            {
                HookedList.Add("set_alpha");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_alpha"), set_alpha);
            }
        }

        internal static event Delegates.set_alpha_BeforeArgs _beforeset_alpha;
        internal static event Delegates.set_alpha_NormalArgs _afterset_alpha;

        private static void set_alpha(Action<TMP_Text, float> orig, TMP_Text self, float value)
        {
            Delegates.Params_set_alpha @params = new()
            {
                self = self, value = value
            };
            _beforeset_alpha?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_alpha != null) _afterset_alpha.Invoke(@params);
        }

        internal static void Hookget_enableVertexGradient()
        {
            if (!HookedList.Contains("get_enableVertexGradient"))
            {
                HookedList.Add("get_enableVertexGradient");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_enableVertexGradient"),
                    get_enableVertexGradient);
            }
        }

        internal static event Delegates.get_enableVertexGradient_BeforeArgs _beforeget_enableVertexGradient;
        internal static event Delegates.get_enableVertexGradient_NormalArgs _afterget_enableVertexGradient;

        private static bool get_enableVertexGradient(Func<TMP_Text, bool> orig, TMP_Text self)
        {
            Delegates.Params_get_enableVertexGradient @params = new()
            {
                self = self
            };
            _beforeget_enableVertexGradient?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_enableVertexGradient != null) retVal = _afterget_enableVertexGradient.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_enableVertexGradient()
        {
            if (!HookedList.Contains("set_enableVertexGradient"))
            {
                HookedList.Add("set_enableVertexGradient");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_enableVertexGradient"),
                    set_enableVertexGradient);
            }
        }

        internal static event Delegates.set_enableVertexGradient_BeforeArgs _beforeset_enableVertexGradient;
        internal static event Delegates.set_enableVertexGradient_NormalArgs _afterset_enableVertexGradient;

        private static void set_enableVertexGradient(Action<TMP_Text, bool> orig, TMP_Text self, bool value)
        {
            Delegates.Params_set_enableVertexGradient @params = new()
            {
                self = self, value = value
            };
            _beforeset_enableVertexGradient?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_enableVertexGradient != null) _afterset_enableVertexGradient.Invoke(@params);
        }

        internal static void Hookget_colorGradient()
        {
            if (!HookedList.Contains("get_colorGradient"))
            {
                HookedList.Add("get_colorGradient");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_colorGradient"), get_colorGradient);
            }
        }

        internal static event Delegates.get_colorGradient_BeforeArgs _beforeget_colorGradient;
        internal static event Delegates.get_colorGradient_NormalArgs _afterget_colorGradient;

        private static VertexGradient get_colorGradient(Func<TMP_Text, VertexGradient> orig, TMP_Text self)
        {
            Delegates.Params_get_colorGradient @params = new()
            {
                self = self
            };
            _beforeget_colorGradient?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_colorGradient != null) retVal = _afterget_colorGradient.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_colorGradient()
        {
            if (!HookedList.Contains("set_colorGradient"))
            {
                HookedList.Add("set_colorGradient");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_colorGradient"), set_colorGradient);
            }
        }

        internal static event Delegates.set_colorGradient_BeforeArgs _beforeset_colorGradient;
        internal static event Delegates.set_colorGradient_NormalArgs _afterset_colorGradient;

        private static void set_colorGradient(Action<TMP_Text, VertexGradient> orig, TMP_Text self,
            VertexGradient value)
        {
            Delegates.Params_set_colorGradient @params = new()
            {
                self = self, value = value
            };
            _beforeset_colorGradient?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_colorGradient != null) _afterset_colorGradient.Invoke(@params);
        }

        internal static void Hookget_colorGradientPreset()
        {
            if (!HookedList.Contains("get_colorGradientPreset"))
            {
                HookedList.Add("get_colorGradientPreset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_colorGradientPreset"),
                    get_colorGradientPreset);
            }
        }

        internal static event Delegates.get_colorGradientPreset_BeforeArgs _beforeget_colorGradientPreset;
        internal static event Delegates.get_colorGradientPreset_NormalArgs _afterget_colorGradientPreset;

        private static TMP_ColorGradient get_colorGradientPreset(Func<TMP_Text, TMP_ColorGradient> orig, TMP_Text self)
        {
            Delegates.Params_get_colorGradientPreset @params = new()
            {
                self = self
            };
            _beforeget_colorGradientPreset?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_colorGradientPreset != null) retVal = _afterget_colorGradientPreset.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_colorGradientPreset()
        {
            if (!HookedList.Contains("set_colorGradientPreset"))
            {
                HookedList.Add("set_colorGradientPreset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_colorGradientPreset"),
                    set_colorGradientPreset);
            }
        }

        internal static event Delegates.set_colorGradientPreset_BeforeArgs _beforeset_colorGradientPreset;
        internal static event Delegates.set_colorGradientPreset_NormalArgs _afterset_colorGradientPreset;

        private static void set_colorGradientPreset(Action<TMP_Text, TMP_ColorGradient> orig, TMP_Text self,
            TMP_ColorGradient value)
        {
            Delegates.Params_set_colorGradientPreset @params = new()
            {
                self = self, value = value
            };
            _beforeset_colorGradientPreset?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_colorGradientPreset != null) _afterset_colorGradientPreset.Invoke(@params);
        }

        internal static void Hookget_spriteAsset()
        {
            if (!HookedList.Contains("get_spriteAsset"))
            {
                HookedList.Add("get_spriteAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_spriteAsset"), get_spriteAsset);
            }
        }

        internal static event Delegates.get_spriteAsset_BeforeArgs _beforeget_spriteAsset;
        internal static event Delegates.get_spriteAsset_NormalArgs _afterget_spriteAsset;

        private static TMP_SpriteAsset get_spriteAsset(Func<TMP_Text, TMP_SpriteAsset> orig, TMP_Text self)
        {
            Delegates.Params_get_spriteAsset @params = new()
            {
                self = self
            };
            _beforeget_spriteAsset?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_spriteAsset != null) retVal = _afterget_spriteAsset.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_spriteAsset()
        {
            if (!HookedList.Contains("set_spriteAsset"))
            {
                HookedList.Add("set_spriteAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_spriteAsset"), set_spriteAsset);
            }
        }

        internal static event Delegates.set_spriteAsset_BeforeArgs _beforeset_spriteAsset;
        internal static event Delegates.set_spriteAsset_NormalArgs _afterset_spriteAsset;

        private static void set_spriteAsset(Action<TMP_Text, TMP_SpriteAsset> orig, TMP_Text self,
            TMP_SpriteAsset value)
        {
            Delegates.Params_set_spriteAsset @params = new()
            {
                self = self, value = value
            };
            _beforeset_spriteAsset?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_spriteAsset != null) _afterset_spriteAsset.Invoke(@params);
        }

        internal static void Hookget_tintAllSprites()
        {
            if (!HookedList.Contains("get_tintAllSprites"))
            {
                HookedList.Add("get_tintAllSprites");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_tintAllSprites"), get_tintAllSprites);
            }
        }

        internal static event Delegates.get_tintAllSprites_BeforeArgs _beforeget_tintAllSprites;
        internal static event Delegates.get_tintAllSprites_NormalArgs _afterget_tintAllSprites;

        private static bool get_tintAllSprites(Func<TMP_Text, bool> orig, TMP_Text self)
        {
            Delegates.Params_get_tintAllSprites @params = new()
            {
                self = self
            };
            _beforeget_tintAllSprites?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_tintAllSprites != null) retVal = _afterget_tintAllSprites.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_tintAllSprites()
        {
            if (!HookedList.Contains("set_tintAllSprites"))
            {
                HookedList.Add("set_tintAllSprites");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_tintAllSprites"), set_tintAllSprites);
            }
        }

        internal static event Delegates.set_tintAllSprites_BeforeArgs _beforeset_tintAllSprites;
        internal static event Delegates.set_tintAllSprites_NormalArgs _afterset_tintAllSprites;

        private static void set_tintAllSprites(Action<TMP_Text, bool> orig, TMP_Text self, bool value)
        {
            Delegates.Params_set_tintAllSprites @params = new()
            {
                self = self, value = value
            };
            _beforeset_tintAllSprites?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_tintAllSprites != null) _afterset_tintAllSprites.Invoke(@params);
        }

        internal static void Hookget_overrideColorTags()
        {
            if (!HookedList.Contains("get_overrideColorTags"))
            {
                HookedList.Add("get_overrideColorTags");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_overrideColorTags"),
                    get_overrideColorTags);
            }
        }

        internal static event Delegates.get_overrideColorTags_BeforeArgs _beforeget_overrideColorTags;
        internal static event Delegates.get_overrideColorTags_NormalArgs _afterget_overrideColorTags;

        private static bool get_overrideColorTags(Func<TMP_Text, bool> orig, TMP_Text self)
        {
            Delegates.Params_get_overrideColorTags @params = new()
            {
                self = self
            };
            _beforeget_overrideColorTags?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_overrideColorTags != null) retVal = _afterget_overrideColorTags.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_overrideColorTags()
        {
            if (!HookedList.Contains("set_overrideColorTags"))
            {
                HookedList.Add("set_overrideColorTags");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_overrideColorTags"),
                    set_overrideColorTags);
            }
        }

        internal static event Delegates.set_overrideColorTags_BeforeArgs _beforeset_overrideColorTags;
        internal static event Delegates.set_overrideColorTags_NormalArgs _afterset_overrideColorTags;

        private static void set_overrideColorTags(Action<TMP_Text, bool> orig, TMP_Text self, bool value)
        {
            Delegates.Params_set_overrideColorTags @params = new()
            {
                self = self, value = value
            };
            _beforeset_overrideColorTags?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_overrideColorTags != null) _afterset_overrideColorTags.Invoke(@params);
        }

        internal static void Hookget_faceColor()
        {
            if (!HookedList.Contains("get_faceColor"))
            {
                HookedList.Add("get_faceColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_faceColor"), get_faceColor);
            }
        }

        internal static event Delegates.get_faceColor_BeforeArgs _beforeget_faceColor;
        internal static event Delegates.get_faceColor_NormalArgs _afterget_faceColor;

        private static Color32 get_faceColor(Func<TMP_Text, Color32> orig, TMP_Text self)
        {
            Delegates.Params_get_faceColor @params = new()
            {
                self = self
            };
            _beforeget_faceColor?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_faceColor != null) retVal = _afterget_faceColor.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_faceColor()
        {
            if (!HookedList.Contains("set_faceColor"))
            {
                HookedList.Add("set_faceColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_faceColor"), set_faceColor);
            }
        }

        internal static event Delegates.set_faceColor_BeforeArgs _beforeset_faceColor;
        internal static event Delegates.set_faceColor_NormalArgs _afterset_faceColor;

        private static void set_faceColor(Action<TMP_Text, Color32> orig, TMP_Text self, Color32 value)
        {
            Delegates.Params_set_faceColor @params = new()
            {
                self = self, value = value
            };
            _beforeset_faceColor?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_faceColor != null) _afterset_faceColor.Invoke(@params);
        }

        internal static void Hookget_outlineColor()
        {
            if (!HookedList.Contains("get_outlineColor"))
            {
                HookedList.Add("get_outlineColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_outlineColor"), get_outlineColor);
            }
        }

        internal static event Delegates.get_outlineColor_BeforeArgs _beforeget_outlineColor;
        internal static event Delegates.get_outlineColor_NormalArgs _afterget_outlineColor;

        private static Color32 get_outlineColor(Func<TMP_Text, Color32> orig, TMP_Text self)
        {
            Delegates.Params_get_outlineColor @params = new()
            {
                self = self
            };
            _beforeget_outlineColor?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_outlineColor != null) retVal = _afterget_outlineColor.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_outlineColor()
        {
            if (!HookedList.Contains("set_outlineColor"))
            {
                HookedList.Add("set_outlineColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_outlineColor"), set_outlineColor);
            }
        }

        internal static event Delegates.set_outlineColor_BeforeArgs _beforeset_outlineColor;
        internal static event Delegates.set_outlineColor_NormalArgs _afterset_outlineColor;

        private static void set_outlineColor(Action<TMP_Text, Color32> orig, TMP_Text self, Color32 value)
        {
            Delegates.Params_set_outlineColor @params = new()
            {
                self = self, value = value
            };
            _beforeset_outlineColor?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_outlineColor != null) _afterset_outlineColor.Invoke(@params);
        }

        internal static void Hookget_outlineWidth()
        {
            if (!HookedList.Contains("get_outlineWidth"))
            {
                HookedList.Add("get_outlineWidth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_outlineWidth"), get_outlineWidth);
            }
        }

        internal static event Delegates.get_outlineWidth_BeforeArgs _beforeget_outlineWidth;
        internal static event Delegates.get_outlineWidth_NormalArgs _afterget_outlineWidth;

        private static float get_outlineWidth(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_get_outlineWidth @params = new()
            {
                self = self
            };
            _beforeget_outlineWidth?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_outlineWidth != null) retVal = _afterget_outlineWidth.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_outlineWidth()
        {
            if (!HookedList.Contains("set_outlineWidth"))
            {
                HookedList.Add("set_outlineWidth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_outlineWidth"), set_outlineWidth);
            }
        }

        internal static event Delegates.set_outlineWidth_BeforeArgs _beforeset_outlineWidth;
        internal static event Delegates.set_outlineWidth_NormalArgs _afterset_outlineWidth;

        private static void set_outlineWidth(Action<TMP_Text, float> orig, TMP_Text self, float value)
        {
            Delegates.Params_set_outlineWidth @params = new()
            {
                self = self, value = value
            };
            _beforeset_outlineWidth?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_outlineWidth != null) _afterset_outlineWidth.Invoke(@params);
        }

        internal static void Hookget_fontSize()
        {
            if (!HookedList.Contains("get_fontSize"))
            {
                HookedList.Add("get_fontSize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontSize"), get_fontSize);
            }
        }

        internal static event Delegates.get_fontSize_BeforeArgs _beforeget_fontSize;
        internal static event Delegates.get_fontSize_NormalArgs _afterget_fontSize;

        private static float get_fontSize(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_get_fontSize @params = new()
            {
                self = self
            };
            _beforeget_fontSize?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_fontSize != null) retVal = _afterget_fontSize.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_fontSize()
        {
            if (!HookedList.Contains("set_fontSize"))
            {
                HookedList.Add("set_fontSize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontSize"), set_fontSize);
            }
        }

        internal static event Delegates.set_fontSize_BeforeArgs _beforeset_fontSize;
        internal static event Delegates.set_fontSize_NormalArgs _afterset_fontSize;

        private static void set_fontSize(Action<TMP_Text, float> orig, TMP_Text self, float value)
        {
            Delegates.Params_set_fontSize @params = new()
            {
                self = self, value = value
            };
            _beforeset_fontSize?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_fontSize != null) _afterset_fontSize.Invoke(@params);
        }

        internal static void Hookget_fontScale()
        {
            if (!HookedList.Contains("get_fontScale"))
            {
                HookedList.Add("get_fontScale");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontScale"), get_fontScale);
            }
        }

        internal static event Delegates.get_fontScale_BeforeArgs _beforeget_fontScale;
        internal static event Delegates.get_fontScale_NormalArgs _afterget_fontScale;

        private static float get_fontScale(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_get_fontScale @params = new()
            {
                self = self
            };
            _beforeget_fontScale?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_fontScale != null) retVal = _afterget_fontScale.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_fontWeight()
        {
            if (!HookedList.Contains("get_fontWeight"))
            {
                HookedList.Add("get_fontWeight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontWeight"), get_fontWeight);
            }
        }

        internal static event Delegates.get_fontWeight_BeforeArgs _beforeget_fontWeight;
        internal static event Delegates.get_fontWeight_NormalArgs _afterget_fontWeight;

        private static int get_fontWeight(Func<TMP_Text, int> orig, TMP_Text self)
        {
            Delegates.Params_get_fontWeight @params = new()
            {
                self = self
            };
            _beforeget_fontWeight?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_fontWeight != null) retVal = _afterget_fontWeight.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_fontWeight()
        {
            if (!HookedList.Contains("set_fontWeight"))
            {
                HookedList.Add("set_fontWeight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontWeight"), set_fontWeight);
            }
        }

        internal static event Delegates.set_fontWeight_BeforeArgs _beforeset_fontWeight;
        internal static event Delegates.set_fontWeight_NormalArgs _afterset_fontWeight;

        private static void set_fontWeight(Action<TMP_Text, int> orig, TMP_Text self, int value)
        {
            Delegates.Params_set_fontWeight @params = new()
            {
                self = self, value = value
            };
            _beforeset_fontWeight?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_fontWeight != null) _afterset_fontWeight.Invoke(@params);
        }

        internal static void Hookget_pixelsPerUnit()
        {
            if (!HookedList.Contains("get_pixelsPerUnit"))
            {
                HookedList.Add("get_pixelsPerUnit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_pixelsPerUnit"), get_pixelsPerUnit);
            }
        }

        internal static event Delegates.get_pixelsPerUnit_BeforeArgs _beforeget_pixelsPerUnit;
        internal static event Delegates.get_pixelsPerUnit_NormalArgs _afterget_pixelsPerUnit;

        private static float get_pixelsPerUnit(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_get_pixelsPerUnit @params = new()
            {
                self = self
            };
            _beforeget_pixelsPerUnit?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_pixelsPerUnit != null) retVal = _afterget_pixelsPerUnit.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_enableAutoSizing()
        {
            if (!HookedList.Contains("get_enableAutoSizing"))
            {
                HookedList.Add("get_enableAutoSizing");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_enableAutoSizing"),
                    get_enableAutoSizing);
            }
        }

        internal static event Delegates.get_enableAutoSizing_BeforeArgs _beforeget_enableAutoSizing;
        internal static event Delegates.get_enableAutoSizing_NormalArgs _afterget_enableAutoSizing;

        private static bool get_enableAutoSizing(Func<TMP_Text, bool> orig, TMP_Text self)
        {
            Delegates.Params_get_enableAutoSizing @params = new()
            {
                self = self
            };
            _beforeget_enableAutoSizing?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_enableAutoSizing != null) retVal = _afterget_enableAutoSizing.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_enableAutoSizing()
        {
            if (!HookedList.Contains("set_enableAutoSizing"))
            {
                HookedList.Add("set_enableAutoSizing");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_enableAutoSizing"),
                    set_enableAutoSizing);
            }
        }

        internal static event Delegates.set_enableAutoSizing_BeforeArgs _beforeset_enableAutoSizing;
        internal static event Delegates.set_enableAutoSizing_NormalArgs _afterset_enableAutoSizing;

        private static void set_enableAutoSizing(Action<TMP_Text, bool> orig, TMP_Text self, bool value)
        {
            Delegates.Params_set_enableAutoSizing @params = new()
            {
                self = self, value = value
            };
            _beforeset_enableAutoSizing?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_enableAutoSizing != null) _afterset_enableAutoSizing.Invoke(@params);
        }

        internal static void Hookget_fontSizeMin()
        {
            if (!HookedList.Contains("get_fontSizeMin"))
            {
                HookedList.Add("get_fontSizeMin");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontSizeMin"), get_fontSizeMin);
            }
        }

        internal static event Delegates.get_fontSizeMin_BeforeArgs _beforeget_fontSizeMin;
        internal static event Delegates.get_fontSizeMin_NormalArgs _afterget_fontSizeMin;

        private static float get_fontSizeMin(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_get_fontSizeMin @params = new()
            {
                self = self
            };
            _beforeget_fontSizeMin?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_fontSizeMin != null) retVal = _afterget_fontSizeMin.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_fontSizeMin()
        {
            if (!HookedList.Contains("set_fontSizeMin"))
            {
                HookedList.Add("set_fontSizeMin");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontSizeMin"), set_fontSizeMin);
            }
        }

        internal static event Delegates.set_fontSizeMin_BeforeArgs _beforeset_fontSizeMin;
        internal static event Delegates.set_fontSizeMin_NormalArgs _afterset_fontSizeMin;

        private static void set_fontSizeMin(Action<TMP_Text, float> orig, TMP_Text self, float value)
        {
            Delegates.Params_set_fontSizeMin @params = new()
            {
                self = self, value = value
            };
            _beforeset_fontSizeMin?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_fontSizeMin != null) _afterset_fontSizeMin.Invoke(@params);
        }

        internal static void Hookget_fontSizeMax()
        {
            if (!HookedList.Contains("get_fontSizeMax"))
            {
                HookedList.Add("get_fontSizeMax");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontSizeMax"), get_fontSizeMax);
            }
        }

        internal static event Delegates.get_fontSizeMax_BeforeArgs _beforeget_fontSizeMax;
        internal static event Delegates.get_fontSizeMax_NormalArgs _afterget_fontSizeMax;

        private static float get_fontSizeMax(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_get_fontSizeMax @params = new()
            {
                self = self
            };
            _beforeget_fontSizeMax?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_fontSizeMax != null) retVal = _afterget_fontSizeMax.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_fontSizeMax()
        {
            if (!HookedList.Contains("set_fontSizeMax"))
            {
                HookedList.Add("set_fontSizeMax");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontSizeMax"), set_fontSizeMax);
            }
        }

        internal static event Delegates.set_fontSizeMax_BeforeArgs _beforeset_fontSizeMax;
        internal static event Delegates.set_fontSizeMax_NormalArgs _afterset_fontSizeMax;

        private static void set_fontSizeMax(Action<TMP_Text, float> orig, TMP_Text self, float value)
        {
            Delegates.Params_set_fontSizeMax @params = new()
            {
                self = self, value = value
            };
            _beforeset_fontSizeMax?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_fontSizeMax != null) _afterset_fontSizeMax.Invoke(@params);
        }

        internal static void Hookget_fontStyle()
        {
            if (!HookedList.Contains("get_fontStyle"))
            {
                HookedList.Add("get_fontStyle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontStyle"), get_fontStyle);
            }
        }

        internal static event Delegates.get_fontStyle_BeforeArgs _beforeget_fontStyle;
        internal static event Delegates.get_fontStyle_NormalArgs _afterget_fontStyle;

        private static FontStyles get_fontStyle(Func<TMP_Text, FontStyles> orig, TMP_Text self)
        {
            Delegates.Params_get_fontStyle @params = new()
            {
                self = self
            };
            _beforeget_fontStyle?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_fontStyle != null) retVal = _afterget_fontStyle.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_fontStyle()
        {
            if (!HookedList.Contains("set_fontStyle"))
            {
                HookedList.Add("set_fontStyle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontStyle"), set_fontStyle);
            }
        }

        internal static event Delegates.set_fontStyle_BeforeArgs _beforeset_fontStyle;
        internal static event Delegates.set_fontStyle_NormalArgs _afterset_fontStyle;

        private static void set_fontStyle(Action<TMP_Text, FontStyles> orig, TMP_Text self, FontStyles value)
        {
            Delegates.Params_set_fontStyle @params = new()
            {
                self = self, value = value
            };
            _beforeset_fontStyle?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_fontStyle != null) _afterset_fontStyle.Invoke(@params);
        }

        internal static void Hookget_isUsingBold()
        {
            if (!HookedList.Contains("get_isUsingBold"))
            {
                HookedList.Add("get_isUsingBold");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_isUsingBold"), get_isUsingBold);
            }
        }

        internal static event Delegates.get_isUsingBold_BeforeArgs _beforeget_isUsingBold;
        internal static event Delegates.get_isUsingBold_NormalArgs _afterget_isUsingBold;

        private static bool get_isUsingBold(Func<TMP_Text, bool> orig, TMP_Text self)
        {
            Delegates.Params_get_isUsingBold @params = new()
            {
                self = self
            };
            _beforeget_isUsingBold?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_isUsingBold != null) retVal = _afterget_isUsingBold.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_alignment()
        {
            if (!HookedList.Contains("get_alignment"))
            {
                HookedList.Add("get_alignment");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_alignment"), get_alignment);
            }
        }

        internal static event Delegates.get_alignment_BeforeArgs _beforeget_alignment;
        internal static event Delegates.get_alignment_NormalArgs _afterget_alignment;

        private static TextAlignmentOptions get_alignment(Func<TMP_Text, TextAlignmentOptions> orig, TMP_Text self)
        {
            Delegates.Params_get_alignment @params = new()
            {
                self = self
            };
            _beforeget_alignment?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_alignment != null) retVal = _afterget_alignment.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_alignment()
        {
            if (!HookedList.Contains("set_alignment"))
            {
                HookedList.Add("set_alignment");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_alignment"), set_alignment);
            }
        }

        internal static event Delegates.set_alignment_BeforeArgs _beforeset_alignment;
        internal static event Delegates.set_alignment_NormalArgs _afterset_alignment;

        private static void set_alignment(Action<TMP_Text, TextAlignmentOptions> orig, TMP_Text self,
            TextAlignmentOptions value)
        {
            Delegates.Params_set_alignment @params = new()
            {
                self = self, value = value
            };
            _beforeset_alignment?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_alignment != null) _afterset_alignment.Invoke(@params);
        }

        internal static void Hookget_characterSpacing()
        {
            if (!HookedList.Contains("get_characterSpacing"))
            {
                HookedList.Add("get_characterSpacing");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_characterSpacing"),
                    get_characterSpacing);
            }
        }

        internal static event Delegates.get_characterSpacing_BeforeArgs _beforeget_characterSpacing;
        internal static event Delegates.get_characterSpacing_NormalArgs _afterget_characterSpacing;

        private static float get_characterSpacing(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_get_characterSpacing @params = new()
            {
                self = self
            };
            _beforeget_characterSpacing?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_characterSpacing != null) retVal = _afterget_characterSpacing.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_characterSpacing()
        {
            if (!HookedList.Contains("set_characterSpacing"))
            {
                HookedList.Add("set_characterSpacing");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_characterSpacing"),
                    set_characterSpacing);
            }
        }

        internal static event Delegates.set_characterSpacing_BeforeArgs _beforeset_characterSpacing;
        internal static event Delegates.set_characterSpacing_NormalArgs _afterset_characterSpacing;

        private static void set_characterSpacing(Action<TMP_Text, float> orig, TMP_Text self, float value)
        {
            Delegates.Params_set_characterSpacing @params = new()
            {
                self = self, value = value
            };
            _beforeset_characterSpacing?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_characterSpacing != null) _afterset_characterSpacing.Invoke(@params);
        }

        internal static void Hookget_lineSpacing()
        {
            if (!HookedList.Contains("get_lineSpacing"))
            {
                HookedList.Add("get_lineSpacing");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_lineSpacing"), get_lineSpacing);
            }
        }

        internal static event Delegates.get_lineSpacing_BeforeArgs _beforeget_lineSpacing;
        internal static event Delegates.get_lineSpacing_NormalArgs _afterget_lineSpacing;

        private static float get_lineSpacing(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_get_lineSpacing @params = new()
            {
                self = self
            };
            _beforeget_lineSpacing?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_lineSpacing != null) retVal = _afterget_lineSpacing.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_lineSpacing()
        {
            if (!HookedList.Contains("set_lineSpacing"))
            {
                HookedList.Add("set_lineSpacing");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_lineSpacing"), set_lineSpacing);
            }
        }

        internal static event Delegates.set_lineSpacing_BeforeArgs _beforeset_lineSpacing;
        internal static event Delegates.set_lineSpacing_NormalArgs _afterset_lineSpacing;

        private static void set_lineSpacing(Action<TMP_Text, float> orig, TMP_Text self, float value)
        {
            Delegates.Params_set_lineSpacing @params = new()
            {
                self = self, value = value
            };
            _beforeset_lineSpacing?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_lineSpacing != null) _afterset_lineSpacing.Invoke(@params);
        }

        internal static void Hookget_paragraphSpacing()
        {
            if (!HookedList.Contains("get_paragraphSpacing"))
            {
                HookedList.Add("get_paragraphSpacing");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_paragraphSpacing"),
                    get_paragraphSpacing);
            }
        }

        internal static event Delegates.get_paragraphSpacing_BeforeArgs _beforeget_paragraphSpacing;
        internal static event Delegates.get_paragraphSpacing_NormalArgs _afterget_paragraphSpacing;

        private static float get_paragraphSpacing(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_get_paragraphSpacing @params = new()
            {
                self = self
            };
            _beforeget_paragraphSpacing?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_paragraphSpacing != null) retVal = _afterget_paragraphSpacing.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_paragraphSpacing()
        {
            if (!HookedList.Contains("set_paragraphSpacing"))
            {
                HookedList.Add("set_paragraphSpacing");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_paragraphSpacing"),
                    set_paragraphSpacing);
            }
        }

        internal static event Delegates.set_paragraphSpacing_BeforeArgs _beforeset_paragraphSpacing;
        internal static event Delegates.set_paragraphSpacing_NormalArgs _afterset_paragraphSpacing;

        private static void set_paragraphSpacing(Action<TMP_Text, float> orig, TMP_Text self, float value)
        {
            Delegates.Params_set_paragraphSpacing @params = new()
            {
                self = self, value = value
            };
            _beforeset_paragraphSpacing?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_paragraphSpacing != null) _afterset_paragraphSpacing.Invoke(@params);
        }

        internal static void Hookget_characterWidthAdjustment()
        {
            if (!HookedList.Contains("get_characterWidthAdjustment"))
            {
                HookedList.Add("get_characterWidthAdjustment");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_characterWidthAdjustment"),
                    get_characterWidthAdjustment);
            }
        }

        internal static event Delegates.get_characterWidthAdjustment_BeforeArgs _beforeget_characterWidthAdjustment;
        internal static event Delegates.get_characterWidthAdjustment_NormalArgs _afterget_characterWidthAdjustment;

        private static float get_characterWidthAdjustment(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_get_characterWidthAdjustment @params = new()
            {
                self = self
            };
            _beforeget_characterWidthAdjustment?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_characterWidthAdjustment != null) retVal = _afterget_characterWidthAdjustment.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_characterWidthAdjustment()
        {
            if (!HookedList.Contains("set_characterWidthAdjustment"))
            {
                HookedList.Add("set_characterWidthAdjustment");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_characterWidthAdjustment"),
                    set_characterWidthAdjustment);
            }
        }

        internal static event Delegates.set_characterWidthAdjustment_BeforeArgs _beforeset_characterWidthAdjustment;
        internal static event Delegates.set_characterWidthAdjustment_NormalArgs _afterset_characterWidthAdjustment;

        private static void set_characterWidthAdjustment(Action<TMP_Text, float> orig, TMP_Text self, float value)
        {
            Delegates.Params_set_characterWidthAdjustment @params = new()
            {
                self = self, value = value
            };
            _beforeset_characterWidthAdjustment?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_characterWidthAdjustment != null) _afterset_characterWidthAdjustment.Invoke(@params);
        }

        internal static void Hookget_enableWordWrapping()
        {
            if (!HookedList.Contains("get_enableWordWrapping"))
            {
                HookedList.Add("get_enableWordWrapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_enableWordWrapping"),
                    get_enableWordWrapping);
            }
        }

        internal static event Delegates.get_enableWordWrapping_BeforeArgs _beforeget_enableWordWrapping;
        internal static event Delegates.get_enableWordWrapping_NormalArgs _afterget_enableWordWrapping;

        private static bool get_enableWordWrapping(Func<TMP_Text, bool> orig, TMP_Text self)
        {
            Delegates.Params_get_enableWordWrapping @params = new()
            {
                self = self
            };
            _beforeget_enableWordWrapping?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_enableWordWrapping != null) retVal = _afterget_enableWordWrapping.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_enableWordWrapping()
        {
            if (!HookedList.Contains("set_enableWordWrapping"))
            {
                HookedList.Add("set_enableWordWrapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_enableWordWrapping"),
                    set_enableWordWrapping);
            }
        }

        internal static event Delegates.set_enableWordWrapping_BeforeArgs _beforeset_enableWordWrapping;
        internal static event Delegates.set_enableWordWrapping_NormalArgs _afterset_enableWordWrapping;

        private static void set_enableWordWrapping(Action<TMP_Text, bool> orig, TMP_Text self, bool value)
        {
            Delegates.Params_set_enableWordWrapping @params = new()
            {
                self = self, value = value
            };
            _beforeset_enableWordWrapping?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_enableWordWrapping != null) _afterset_enableWordWrapping.Invoke(@params);
        }

        internal static void Hookget_wordWrappingRatios()
        {
            if (!HookedList.Contains("get_wordWrappingRatios"))
            {
                HookedList.Add("get_wordWrappingRatios");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_wordWrappingRatios"),
                    get_wordWrappingRatios);
            }
        }

        internal static event Delegates.get_wordWrappingRatios_BeforeArgs _beforeget_wordWrappingRatios;
        internal static event Delegates.get_wordWrappingRatios_NormalArgs _afterget_wordWrappingRatios;

        private static float get_wordWrappingRatios(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_get_wordWrappingRatios @params = new()
            {
                self = self
            };
            _beforeget_wordWrappingRatios?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_wordWrappingRatios != null) retVal = _afterget_wordWrappingRatios.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_wordWrappingRatios()
        {
            if (!HookedList.Contains("set_wordWrappingRatios"))
            {
                HookedList.Add("set_wordWrappingRatios");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_wordWrappingRatios"),
                    set_wordWrappingRatios);
            }
        }

        internal static event Delegates.set_wordWrappingRatios_BeforeArgs _beforeset_wordWrappingRatios;
        internal static event Delegates.set_wordWrappingRatios_NormalArgs _afterset_wordWrappingRatios;

        private static void set_wordWrappingRatios(Action<TMP_Text, float> orig, TMP_Text self, float value)
        {
            Delegates.Params_set_wordWrappingRatios @params = new()
            {
                self = self, value = value
            };
            _beforeset_wordWrappingRatios?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_wordWrappingRatios != null) _afterset_wordWrappingRatios.Invoke(@params);
        }

        internal static void Hookget_enableAdaptiveJustification()
        {
            if (!HookedList.Contains("get_enableAdaptiveJustification"))
            {
                HookedList.Add("get_enableAdaptiveJustification");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_enableAdaptiveJustification"),
                    get_enableAdaptiveJustification);
            }
        }

        internal static event Delegates.get_enableAdaptiveJustification_BeforeArgs
            _beforeget_enableAdaptiveJustification;

        internal static event Delegates.get_enableAdaptiveJustification_NormalArgs
            _afterget_enableAdaptiveJustification;

        private static bool get_enableAdaptiveJustification(Func<TMP_Text, bool> orig, TMP_Text self)
        {
            Delegates.Params_get_enableAdaptiveJustification @params = new()
            {
                self = self
            };
            _beforeget_enableAdaptiveJustification?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_enableAdaptiveJustification != null)
                retVal = _afterget_enableAdaptiveJustification.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_enableAdaptiveJustification()
        {
            if (!HookedList.Contains("set_enableAdaptiveJustification"))
            {
                HookedList.Add("set_enableAdaptiveJustification");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_enableAdaptiveJustification"),
                    set_enableAdaptiveJustification);
            }
        }

        internal static event Delegates.set_enableAdaptiveJustification_BeforeArgs
            _beforeset_enableAdaptiveJustification;

        internal static event Delegates.set_enableAdaptiveJustification_NormalArgs
            _afterset_enableAdaptiveJustification;

        private static void set_enableAdaptiveJustification(Action<TMP_Text, bool> orig, TMP_Text self, bool value)
        {
            Delegates.Params_set_enableAdaptiveJustification @params = new()
            {
                self = self, value = value
            };
            _beforeset_enableAdaptiveJustification?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_enableAdaptiveJustification != null) _afterset_enableAdaptiveJustification.Invoke(@params);
        }

        internal static void Hookget_OverflowMode()
        {
            if (!HookedList.Contains("get_OverflowMode"))
            {
                HookedList.Add("get_OverflowMode");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_OverflowMode"), get_OverflowMode);
            }
        }

        internal static event Delegates.get_OverflowMode_BeforeArgs _beforeget_OverflowMode;
        internal static event Delegates.get_OverflowMode_NormalArgs _afterget_OverflowMode;

        private static TextOverflowModes get_OverflowMode(Func<TMP_Text, TextOverflowModes> orig, TMP_Text self)
        {
            Delegates.Params_get_OverflowMode @params = new()
            {
                self = self
            };
            _beforeget_OverflowMode?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_OverflowMode != null) retVal = _afterget_OverflowMode.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_OverflowMode()
        {
            if (!HookedList.Contains("set_OverflowMode"))
            {
                HookedList.Add("set_OverflowMode");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_OverflowMode"), set_OverflowMode);
            }
        }

        internal static event Delegates.set_OverflowMode_BeforeArgs _beforeset_OverflowMode;
        internal static event Delegates.set_OverflowMode_NormalArgs _afterset_OverflowMode;

        private static void set_OverflowMode(Action<TMP_Text, TextOverflowModes> orig, TMP_Text self,
            TextOverflowModes value)
        {
            Delegates.Params_set_OverflowMode @params = new()
            {
                self = self, value = value
            };
            _beforeset_OverflowMode?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_OverflowMode != null) _afterset_OverflowMode.Invoke(@params);
        }

        internal static void Hookget_enableKerning()
        {
            if (!HookedList.Contains("get_enableKerning"))
            {
                HookedList.Add("get_enableKerning");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_enableKerning"), get_enableKerning);
            }
        }

        internal static event Delegates.get_enableKerning_BeforeArgs _beforeget_enableKerning;
        internal static event Delegates.get_enableKerning_NormalArgs _afterget_enableKerning;

        private static bool get_enableKerning(Func<TMP_Text, bool> orig, TMP_Text self)
        {
            Delegates.Params_get_enableKerning @params = new()
            {
                self = self
            };
            _beforeget_enableKerning?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_enableKerning != null) retVal = _afterget_enableKerning.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_enableKerning()
        {
            if (!HookedList.Contains("set_enableKerning"))
            {
                HookedList.Add("set_enableKerning");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_enableKerning"), set_enableKerning);
            }
        }

        internal static event Delegates.set_enableKerning_BeforeArgs _beforeset_enableKerning;
        internal static event Delegates.set_enableKerning_NormalArgs _afterset_enableKerning;

        private static void set_enableKerning(Action<TMP_Text, bool> orig, TMP_Text self, bool value)
        {
            Delegates.Params_set_enableKerning @params = new()
            {
                self = self, value = value
            };
            _beforeset_enableKerning?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_enableKerning != null) _afterset_enableKerning.Invoke(@params);
        }

        internal static void Hookget_extraPadding()
        {
            if (!HookedList.Contains("get_extraPadding"))
            {
                HookedList.Add("get_extraPadding");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_extraPadding"), get_extraPadding);
            }
        }

        internal static event Delegates.get_extraPadding_BeforeArgs _beforeget_extraPadding;
        internal static event Delegates.get_extraPadding_NormalArgs _afterget_extraPadding;

        private static bool get_extraPadding(Func<TMP_Text, bool> orig, TMP_Text self)
        {
            Delegates.Params_get_extraPadding @params = new()
            {
                self = self
            };
            _beforeget_extraPadding?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_extraPadding != null) retVal = _afterget_extraPadding.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_extraPadding()
        {
            if (!HookedList.Contains("set_extraPadding"))
            {
                HookedList.Add("set_extraPadding");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_extraPadding"), set_extraPadding);
            }
        }

        internal static event Delegates.set_extraPadding_BeforeArgs _beforeset_extraPadding;
        internal static event Delegates.set_extraPadding_NormalArgs _afterset_extraPadding;

        private static void set_extraPadding(Action<TMP_Text, bool> orig, TMP_Text self, bool value)
        {
            Delegates.Params_set_extraPadding @params = new()
            {
                self = self, value = value
            };
            _beforeset_extraPadding?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_extraPadding != null) _afterset_extraPadding.Invoke(@params);
        }

        internal static void Hookget_richText()
        {
            if (!HookedList.Contains("get_richText"))
            {
                HookedList.Add("get_richText");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_richText"), get_richText);
            }
        }

        internal static event Delegates.get_richText_BeforeArgs _beforeget_richText;
        internal static event Delegates.get_richText_NormalArgs _afterget_richText;

        private static bool get_richText(Func<TMP_Text, bool> orig, TMP_Text self)
        {
            Delegates.Params_get_richText @params = new()
            {
                self = self
            };
            _beforeget_richText?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_richText != null) retVal = _afterget_richText.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_richText()
        {
            if (!HookedList.Contains("set_richText"))
            {
                HookedList.Add("set_richText");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_richText"), set_richText);
            }
        }

        internal static event Delegates.set_richText_BeforeArgs _beforeset_richText;
        internal static event Delegates.set_richText_NormalArgs _afterset_richText;

        private static void set_richText(Action<TMP_Text, bool> orig, TMP_Text self, bool value)
        {
            Delegates.Params_set_richText @params = new()
            {
                self = self, value = value
            };
            _beforeset_richText?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_richText != null) _afterset_richText.Invoke(@params);
        }

        internal static void Hookget_parseCtrlCharacters()
        {
            if (!HookedList.Contains("get_parseCtrlCharacters"))
            {
                HookedList.Add("get_parseCtrlCharacters");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_parseCtrlCharacters"),
                    get_parseCtrlCharacters);
            }
        }

        internal static event Delegates.get_parseCtrlCharacters_BeforeArgs _beforeget_parseCtrlCharacters;
        internal static event Delegates.get_parseCtrlCharacters_NormalArgs _afterget_parseCtrlCharacters;

        private static bool get_parseCtrlCharacters(Func<TMP_Text, bool> orig, TMP_Text self)
        {
            Delegates.Params_get_parseCtrlCharacters @params = new()
            {
                self = self
            };
            _beforeget_parseCtrlCharacters?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_parseCtrlCharacters != null) retVal = _afterget_parseCtrlCharacters.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_parseCtrlCharacters()
        {
            if (!HookedList.Contains("set_parseCtrlCharacters"))
            {
                HookedList.Add("set_parseCtrlCharacters");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_parseCtrlCharacters"),
                    set_parseCtrlCharacters);
            }
        }

        internal static event Delegates.set_parseCtrlCharacters_BeforeArgs _beforeset_parseCtrlCharacters;
        internal static event Delegates.set_parseCtrlCharacters_NormalArgs _afterset_parseCtrlCharacters;

        private static void set_parseCtrlCharacters(Action<TMP_Text, bool> orig, TMP_Text self, bool value)
        {
            Delegates.Params_set_parseCtrlCharacters @params = new()
            {
                self = self, value = value
            };
            _beforeset_parseCtrlCharacters?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_parseCtrlCharacters != null) _afterset_parseCtrlCharacters.Invoke(@params);
        }

        internal static void Hookget_isOverlay()
        {
            if (!HookedList.Contains("get_isOverlay"))
            {
                HookedList.Add("get_isOverlay");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_isOverlay"), get_isOverlay);
            }
        }

        internal static event Delegates.get_isOverlay_BeforeArgs _beforeget_isOverlay;
        internal static event Delegates.get_isOverlay_NormalArgs _afterget_isOverlay;

        private static bool get_isOverlay(Func<TMP_Text, bool> orig, TMP_Text self)
        {
            Delegates.Params_get_isOverlay @params = new()
            {
                self = self
            };
            _beforeget_isOverlay?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_isOverlay != null) retVal = _afterget_isOverlay.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_isOverlay()
        {
            if (!HookedList.Contains("set_isOverlay"))
            {
                HookedList.Add("set_isOverlay");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_isOverlay"), set_isOverlay);
            }
        }

        internal static event Delegates.set_isOverlay_BeforeArgs _beforeset_isOverlay;
        internal static event Delegates.set_isOverlay_NormalArgs _afterset_isOverlay;

        private static void set_isOverlay(Action<TMP_Text, bool> orig, TMP_Text self, bool value)
        {
            Delegates.Params_set_isOverlay @params = new()
            {
                self = self, value = value
            };
            _beforeset_isOverlay?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_isOverlay != null) _afterset_isOverlay.Invoke(@params);
        }

        internal static void Hookget_isOrthographic()
        {
            if (!HookedList.Contains("get_isOrthographic"))
            {
                HookedList.Add("get_isOrthographic");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_isOrthographic"), get_isOrthographic);
            }
        }

        internal static event Delegates.get_isOrthographic_BeforeArgs _beforeget_isOrthographic;
        internal static event Delegates.get_isOrthographic_NormalArgs _afterget_isOrthographic;

        private static bool get_isOrthographic(Func<TMP_Text, bool> orig, TMP_Text self)
        {
            Delegates.Params_get_isOrthographic @params = new()
            {
                self = self
            };
            _beforeget_isOrthographic?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_isOrthographic != null) retVal = _afterget_isOrthographic.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_isOrthographic()
        {
            if (!HookedList.Contains("set_isOrthographic"))
            {
                HookedList.Add("set_isOrthographic");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_isOrthographic"), set_isOrthographic);
            }
        }

        internal static event Delegates.set_isOrthographic_BeforeArgs _beforeset_isOrthographic;
        internal static event Delegates.set_isOrthographic_NormalArgs _afterset_isOrthographic;

        private static void set_isOrthographic(Action<TMP_Text, bool> orig, TMP_Text self, bool value)
        {
            Delegates.Params_set_isOrthographic @params = new()
            {
                self = self, value = value
            };
            _beforeset_isOrthographic?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_isOrthographic != null) _afterset_isOrthographic.Invoke(@params);
        }

        internal static void Hookget_enableCulling()
        {
            if (!HookedList.Contains("get_enableCulling"))
            {
                HookedList.Add("get_enableCulling");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_enableCulling"), get_enableCulling);
            }
        }

        internal static event Delegates.get_enableCulling_BeforeArgs _beforeget_enableCulling;
        internal static event Delegates.get_enableCulling_NormalArgs _afterget_enableCulling;

        private static bool get_enableCulling(Func<TMP_Text, bool> orig, TMP_Text self)
        {
            Delegates.Params_get_enableCulling @params = new()
            {
                self = self
            };
            _beforeget_enableCulling?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_enableCulling != null) retVal = _afterget_enableCulling.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_enableCulling()
        {
            if (!HookedList.Contains("set_enableCulling"))
            {
                HookedList.Add("set_enableCulling");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_enableCulling"), set_enableCulling);
            }
        }

        internal static event Delegates.set_enableCulling_BeforeArgs _beforeset_enableCulling;
        internal static event Delegates.set_enableCulling_NormalArgs _afterset_enableCulling;

        private static void set_enableCulling(Action<TMP_Text, bool> orig, TMP_Text self, bool value)
        {
            Delegates.Params_set_enableCulling @params = new()
            {
                self = self, value = value
            };
            _beforeset_enableCulling?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_enableCulling != null) _afterset_enableCulling.Invoke(@params);
        }

        internal static void Hookget_ignoreVisibility()
        {
            if (!HookedList.Contains("get_ignoreVisibility"))
            {
                HookedList.Add("get_ignoreVisibility");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_ignoreVisibility"),
                    get_ignoreVisibility);
            }
        }

        internal static event Delegates.get_ignoreVisibility_BeforeArgs _beforeget_ignoreVisibility;
        internal static event Delegates.get_ignoreVisibility_NormalArgs _afterget_ignoreVisibility;

        private static bool get_ignoreVisibility(Func<TMP_Text, bool> orig, TMP_Text self)
        {
            Delegates.Params_get_ignoreVisibility @params = new()
            {
                self = self
            };
            _beforeget_ignoreVisibility?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ignoreVisibility != null) retVal = _afterget_ignoreVisibility.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_ignoreVisibility()
        {
            if (!HookedList.Contains("set_ignoreVisibility"))
            {
                HookedList.Add("set_ignoreVisibility");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_ignoreVisibility"),
                    set_ignoreVisibility);
            }
        }

        internal static event Delegates.set_ignoreVisibility_BeforeArgs _beforeset_ignoreVisibility;
        internal static event Delegates.set_ignoreVisibility_NormalArgs _afterset_ignoreVisibility;

        private static void set_ignoreVisibility(Action<TMP_Text, bool> orig, TMP_Text self, bool value)
        {
            Delegates.Params_set_ignoreVisibility @params = new()
            {
                self = self, value = value
            };
            _beforeset_ignoreVisibility?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ignoreVisibility != null) _afterset_ignoreVisibility.Invoke(@params);
        }

        internal static void Hookget_horizontalMapping()
        {
            if (!HookedList.Contains("get_horizontalMapping"))
            {
                HookedList.Add("get_horizontalMapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_horizontalMapping"),
                    get_horizontalMapping);
            }
        }

        internal static event Delegates.get_horizontalMapping_BeforeArgs _beforeget_horizontalMapping;
        internal static event Delegates.get_horizontalMapping_NormalArgs _afterget_horizontalMapping;

        private static TextureMappingOptions get_horizontalMapping(Func<TMP_Text, TextureMappingOptions> orig,
            TMP_Text self)
        {
            Delegates.Params_get_horizontalMapping @params = new()
            {
                self = self
            };
            _beforeget_horizontalMapping?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_horizontalMapping != null) retVal = _afterget_horizontalMapping.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_horizontalMapping()
        {
            if (!HookedList.Contains("set_horizontalMapping"))
            {
                HookedList.Add("set_horizontalMapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_horizontalMapping"),
                    set_horizontalMapping);
            }
        }

        internal static event Delegates.set_horizontalMapping_BeforeArgs _beforeset_horizontalMapping;
        internal static event Delegates.set_horizontalMapping_NormalArgs _afterset_horizontalMapping;

        private static void set_horizontalMapping(Action<TMP_Text, TextureMappingOptions> orig, TMP_Text self,
            TextureMappingOptions value)
        {
            Delegates.Params_set_horizontalMapping @params = new()
            {
                self = self, value = value
            };
            _beforeset_horizontalMapping?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_horizontalMapping != null) _afterset_horizontalMapping.Invoke(@params);
        }

        internal static void Hookget_verticalMapping()
        {
            if (!HookedList.Contains("get_verticalMapping"))
            {
                HookedList.Add("get_verticalMapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_verticalMapping"), get_verticalMapping);
            }
        }

        internal static event Delegates.get_verticalMapping_BeforeArgs _beforeget_verticalMapping;
        internal static event Delegates.get_verticalMapping_NormalArgs _afterget_verticalMapping;

        private static TextureMappingOptions get_verticalMapping(Func<TMP_Text, TextureMappingOptions> orig,
            TMP_Text self)
        {
            Delegates.Params_get_verticalMapping @params = new()
            {
                self = self
            };
            _beforeget_verticalMapping?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_verticalMapping != null) retVal = _afterget_verticalMapping.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_verticalMapping()
        {
            if (!HookedList.Contains("set_verticalMapping"))
            {
                HookedList.Add("set_verticalMapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_verticalMapping"), set_verticalMapping);
            }
        }

        internal static event Delegates.set_verticalMapping_BeforeArgs _beforeset_verticalMapping;
        internal static event Delegates.set_verticalMapping_NormalArgs _afterset_verticalMapping;

        private static void set_verticalMapping(Action<TMP_Text, TextureMappingOptions> orig, TMP_Text self,
            TextureMappingOptions value)
        {
            Delegates.Params_set_verticalMapping @params = new()
            {
                self = self, value = value
            };
            _beforeset_verticalMapping?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_verticalMapping != null) _afterset_verticalMapping.Invoke(@params);
        }

        internal static void Hookget_renderMode()
        {
            if (!HookedList.Contains("get_renderMode"))
            {
                HookedList.Add("get_renderMode");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_renderMode"), get_renderMode);
            }
        }

        internal static event Delegates.get_renderMode_BeforeArgs _beforeget_renderMode;
        internal static event Delegates.get_renderMode_NormalArgs _afterget_renderMode;

        private static TextRenderFlags get_renderMode(Func<TMP_Text, TextRenderFlags> orig, TMP_Text self)
        {
            Delegates.Params_get_renderMode @params = new()
            {
                self = self
            };
            _beforeget_renderMode?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_renderMode != null) retVal = _afterget_renderMode.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_renderMode()
        {
            if (!HookedList.Contains("set_renderMode"))
            {
                HookedList.Add("set_renderMode");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_renderMode"), set_renderMode);
            }
        }

        internal static event Delegates.set_renderMode_BeforeArgs _beforeset_renderMode;
        internal static event Delegates.set_renderMode_NormalArgs _afterset_renderMode;

        private static void set_renderMode(Action<TMP_Text, TextRenderFlags> orig, TMP_Text self, TextRenderFlags value)
        {
            Delegates.Params_set_renderMode @params = new()
            {
                self = self, value = value
            };
            _beforeset_renderMode?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_renderMode != null) _afterset_renderMode.Invoke(@params);
        }

        internal static void Hookget_maxVisibleCharacters()
        {
            if (!HookedList.Contains("get_maxVisibleCharacters"))
            {
                HookedList.Add("get_maxVisibleCharacters");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_maxVisibleCharacters"),
                    get_maxVisibleCharacters);
            }
        }

        internal static event Delegates.get_maxVisibleCharacters_BeforeArgs _beforeget_maxVisibleCharacters;
        internal static event Delegates.get_maxVisibleCharacters_NormalArgs _afterget_maxVisibleCharacters;

        private static int get_maxVisibleCharacters(Func<TMP_Text, int> orig, TMP_Text self)
        {
            Delegates.Params_get_maxVisibleCharacters @params = new()
            {
                self = self
            };
            _beforeget_maxVisibleCharacters?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_maxVisibleCharacters != null) retVal = _afterget_maxVisibleCharacters.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_maxVisibleCharacters()
        {
            if (!HookedList.Contains("set_maxVisibleCharacters"))
            {
                HookedList.Add("set_maxVisibleCharacters");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_maxVisibleCharacters"),
                    set_maxVisibleCharacters);
            }
        }

        internal static event Delegates.set_maxVisibleCharacters_BeforeArgs _beforeset_maxVisibleCharacters;
        internal static event Delegates.set_maxVisibleCharacters_NormalArgs _afterset_maxVisibleCharacters;

        private static void set_maxVisibleCharacters(Action<TMP_Text, int> orig, TMP_Text self, int value)
        {
            Delegates.Params_set_maxVisibleCharacters @params = new()
            {
                self = self, value = value
            };
            _beforeset_maxVisibleCharacters?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_maxVisibleCharacters != null) _afterset_maxVisibleCharacters.Invoke(@params);
        }

        internal static void Hookget_maxVisibleWords()
        {
            if (!HookedList.Contains("get_maxVisibleWords"))
            {
                HookedList.Add("get_maxVisibleWords");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_maxVisibleWords"), get_maxVisibleWords);
            }
        }

        internal static event Delegates.get_maxVisibleWords_BeforeArgs _beforeget_maxVisibleWords;
        internal static event Delegates.get_maxVisibleWords_NormalArgs _afterget_maxVisibleWords;

        private static int get_maxVisibleWords(Func<TMP_Text, int> orig, TMP_Text self)
        {
            Delegates.Params_get_maxVisibleWords @params = new()
            {
                self = self
            };
            _beforeget_maxVisibleWords?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_maxVisibleWords != null) retVal = _afterget_maxVisibleWords.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_maxVisibleWords()
        {
            if (!HookedList.Contains("set_maxVisibleWords"))
            {
                HookedList.Add("set_maxVisibleWords");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_maxVisibleWords"), set_maxVisibleWords);
            }
        }

        internal static event Delegates.set_maxVisibleWords_BeforeArgs _beforeset_maxVisibleWords;
        internal static event Delegates.set_maxVisibleWords_NormalArgs _afterset_maxVisibleWords;

        private static void set_maxVisibleWords(Action<TMP_Text, int> orig, TMP_Text self, int value)
        {
            Delegates.Params_set_maxVisibleWords @params = new()
            {
                self = self, value = value
            };
            _beforeset_maxVisibleWords?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_maxVisibleWords != null) _afterset_maxVisibleWords.Invoke(@params);
        }

        internal static void Hookget_maxVisibleLines()
        {
            if (!HookedList.Contains("get_maxVisibleLines"))
            {
                HookedList.Add("get_maxVisibleLines");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_maxVisibleLines"), get_maxVisibleLines);
            }
        }

        internal static event Delegates.get_maxVisibleLines_BeforeArgs _beforeget_maxVisibleLines;
        internal static event Delegates.get_maxVisibleLines_NormalArgs _afterget_maxVisibleLines;

        private static int get_maxVisibleLines(Func<TMP_Text, int> orig, TMP_Text self)
        {
            Delegates.Params_get_maxVisibleLines @params = new()
            {
                self = self
            };
            _beforeget_maxVisibleLines?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_maxVisibleLines != null) retVal = _afterget_maxVisibleLines.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_maxVisibleLines()
        {
            if (!HookedList.Contains("set_maxVisibleLines"))
            {
                HookedList.Add("set_maxVisibleLines");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_maxVisibleLines"), set_maxVisibleLines);
            }
        }

        internal static event Delegates.set_maxVisibleLines_BeforeArgs _beforeset_maxVisibleLines;
        internal static event Delegates.set_maxVisibleLines_NormalArgs _afterset_maxVisibleLines;

        private static void set_maxVisibleLines(Action<TMP_Text, int> orig, TMP_Text self, int value)
        {
            Delegates.Params_set_maxVisibleLines @params = new()
            {
                self = self, value = value
            };
            _beforeset_maxVisibleLines?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_maxVisibleLines != null) _afterset_maxVisibleLines.Invoke(@params);
        }

        internal static void Hookget_useMaxVisibleDescender()
        {
            if (!HookedList.Contains("get_useMaxVisibleDescender"))
            {
                HookedList.Add("get_useMaxVisibleDescender");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_useMaxVisibleDescender"),
                    get_useMaxVisibleDescender);
            }
        }

        internal static event Delegates.get_useMaxVisibleDescender_BeforeArgs _beforeget_useMaxVisibleDescender;
        internal static event Delegates.get_useMaxVisibleDescender_NormalArgs _afterget_useMaxVisibleDescender;

        private static bool get_useMaxVisibleDescender(Func<TMP_Text, bool> orig, TMP_Text self)
        {
            Delegates.Params_get_useMaxVisibleDescender @params = new()
            {
                self = self
            };
            _beforeget_useMaxVisibleDescender?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_useMaxVisibleDescender != null) retVal = _afterget_useMaxVisibleDescender.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_useMaxVisibleDescender()
        {
            if (!HookedList.Contains("set_useMaxVisibleDescender"))
            {
                HookedList.Add("set_useMaxVisibleDescender");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_useMaxVisibleDescender"),
                    set_useMaxVisibleDescender);
            }
        }

        internal static event Delegates.set_useMaxVisibleDescender_BeforeArgs _beforeset_useMaxVisibleDescender;
        internal static event Delegates.set_useMaxVisibleDescender_NormalArgs _afterset_useMaxVisibleDescender;

        private static void set_useMaxVisibleDescender(Action<TMP_Text, bool> orig, TMP_Text self, bool value)
        {
            Delegates.Params_set_useMaxVisibleDescender @params = new()
            {
                self = self, value = value
            };
            _beforeset_useMaxVisibleDescender?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_useMaxVisibleDescender != null) _afterset_useMaxVisibleDescender.Invoke(@params);
        }

        internal static void Hookget_pageToDisplay()
        {
            if (!HookedList.Contains("get_pageToDisplay"))
            {
                HookedList.Add("get_pageToDisplay");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_pageToDisplay"), get_pageToDisplay);
            }
        }

        internal static event Delegates.get_pageToDisplay_BeforeArgs _beforeget_pageToDisplay;
        internal static event Delegates.get_pageToDisplay_NormalArgs _afterget_pageToDisplay;

        private static int get_pageToDisplay(Func<TMP_Text, int> orig, TMP_Text self)
        {
            Delegates.Params_get_pageToDisplay @params = new()
            {
                self = self
            };
            _beforeget_pageToDisplay?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_pageToDisplay != null) retVal = _afterget_pageToDisplay.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_pageToDisplay()
        {
            if (!HookedList.Contains("set_pageToDisplay"))
            {
                HookedList.Add("set_pageToDisplay");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_pageToDisplay"), set_pageToDisplay);
            }
        }

        internal static event Delegates.set_pageToDisplay_BeforeArgs _beforeset_pageToDisplay;
        internal static event Delegates.set_pageToDisplay_NormalArgs _afterset_pageToDisplay;

        private static void set_pageToDisplay(Action<TMP_Text, int> orig, TMP_Text self, int value)
        {
            Delegates.Params_set_pageToDisplay @params = new()
            {
                self = self, value = value
            };
            _beforeset_pageToDisplay?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_pageToDisplay != null) _afterset_pageToDisplay.Invoke(@params);
        }

        internal static void Hookget_margin()
        {
            if (!HookedList.Contains("get_margin"))
            {
                HookedList.Add("get_margin");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_margin"), get_margin);
            }
        }

        internal static event Delegates.get_margin_BeforeArgs _beforeget_margin;
        internal static event Delegates.get_margin_NormalArgs _afterget_margin;

        private static Vector4 get_margin(Func<TMP_Text, Vector4> orig, TMP_Text self)
        {
            Delegates.Params_get_margin @params = new()
            {
                self = self
            };
            _beforeget_margin?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_margin != null) retVal = _afterget_margin.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_margin()
        {
            if (!HookedList.Contains("set_margin"))
            {
                HookedList.Add("set_margin");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_margin"), set_margin);
            }
        }

        internal static event Delegates.set_margin_BeforeArgs _beforeset_margin;
        internal static event Delegates.set_margin_NormalArgs _afterset_margin;

        private static void set_margin(Action<TMP_Text, Vector4> orig, TMP_Text self, Vector4 value)
        {
            Delegates.Params_set_margin @params = new()
            {
                self = self, value = value
            };
            _beforeset_margin?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_margin != null) _afterset_margin.Invoke(@params);
        }

        internal static void Hookget_textInfo()
        {
            if (!HookedList.Contains("get_textInfo"))
            {
                HookedList.Add("get_textInfo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_textInfo"), get_textInfo);
            }
        }

        internal static event Delegates.get_textInfo_BeforeArgs _beforeget_textInfo;
        internal static event Delegates.get_textInfo_NormalArgs _afterget_textInfo;

        private static TMP_TextInfo get_textInfo(Func<TMP_Text, TMP_TextInfo> orig, TMP_Text self)
        {
            Delegates.Params_get_textInfo @params = new()
            {
                self = self
            };
            _beforeget_textInfo?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_textInfo != null) retVal = _afterget_textInfo.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_havePropertiesChanged()
        {
            if (!HookedList.Contains("get_havePropertiesChanged"))
            {
                HookedList.Add("get_havePropertiesChanged");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_havePropertiesChanged"),
                    get_havePropertiesChanged);
            }
        }

        internal static event Delegates.get_havePropertiesChanged_BeforeArgs _beforeget_havePropertiesChanged;
        internal static event Delegates.get_havePropertiesChanged_NormalArgs _afterget_havePropertiesChanged;

        private static bool get_havePropertiesChanged(Func<TMP_Text, bool> orig, TMP_Text self)
        {
            Delegates.Params_get_havePropertiesChanged @params = new()
            {
                self = self
            };
            _beforeget_havePropertiesChanged?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_havePropertiesChanged != null) retVal = _afterget_havePropertiesChanged.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_havePropertiesChanged()
        {
            if (!HookedList.Contains("set_havePropertiesChanged"))
            {
                HookedList.Add("set_havePropertiesChanged");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_havePropertiesChanged"),
                    set_havePropertiesChanged);
            }
        }

        internal static event Delegates.set_havePropertiesChanged_BeforeArgs _beforeset_havePropertiesChanged;
        internal static event Delegates.set_havePropertiesChanged_NormalArgs _afterset_havePropertiesChanged;

        private static void set_havePropertiesChanged(Action<TMP_Text, bool> orig, TMP_Text self, bool value)
        {
            Delegates.Params_set_havePropertiesChanged @params = new()
            {
                self = self, value = value
            };
            _beforeset_havePropertiesChanged?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_havePropertiesChanged != null) _afterset_havePropertiesChanged.Invoke(@params);
        }

        internal static void Hookget_isUsingLegacyAnimationComponent()
        {
            if (!HookedList.Contains("get_isUsingLegacyAnimationComponent"))
            {
                HookedList.Add("get_isUsingLegacyAnimationComponent");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_isUsingLegacyAnimationComponent"),
                    get_isUsingLegacyAnimationComponent);
            }
        }

        internal static event Delegates.get_isUsingLegacyAnimationComponent_BeforeArgs
            _beforeget_isUsingLegacyAnimationComponent;

        internal static event Delegates.get_isUsingLegacyAnimationComponent_NormalArgs
            _afterget_isUsingLegacyAnimationComponent;

        private static bool get_isUsingLegacyAnimationComponent(Func<TMP_Text, bool> orig, TMP_Text self)
        {
            Delegates.Params_get_isUsingLegacyAnimationComponent @params = new()
            {
                self = self
            };
            _beforeget_isUsingLegacyAnimationComponent?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_isUsingLegacyAnimationComponent != null)
                retVal = _afterget_isUsingLegacyAnimationComponent.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_isUsingLegacyAnimationComponent()
        {
            if (!HookedList.Contains("set_isUsingLegacyAnimationComponent"))
            {
                HookedList.Add("set_isUsingLegacyAnimationComponent");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_isUsingLegacyAnimationComponent"),
                    set_isUsingLegacyAnimationComponent);
            }
        }

        internal static event Delegates.set_isUsingLegacyAnimationComponent_BeforeArgs
            _beforeset_isUsingLegacyAnimationComponent;

        internal static event Delegates.set_isUsingLegacyAnimationComponent_NormalArgs
            _afterset_isUsingLegacyAnimationComponent;

        private static void set_isUsingLegacyAnimationComponent(Action<TMP_Text, bool> orig, TMP_Text self, bool value)
        {
            Delegates.Params_set_isUsingLegacyAnimationComponent @params = new()
            {
                self = self, value = value
            };
            _beforeset_isUsingLegacyAnimationComponent?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_isUsingLegacyAnimationComponent != null)
                _afterset_isUsingLegacyAnimationComponent.Invoke(@params);
        }

        internal static void Hookget_transform()
        {
            if (!HookedList.Contains("get_transform"))
            {
                HookedList.Add("get_transform");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_transform"), get_transform);
            }
        }

        internal static event Delegates.get_transform_BeforeArgs _beforeget_transform;
        internal static event Delegates.get_transform_NormalArgs _afterget_transform;

        private static Transform get_transform(Func<TMP_Text, Transform> orig, TMP_Text self)
        {
            Delegates.Params_get_transform @params = new()
            {
                self = self
            };
            _beforeget_transform?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_transform != null) retVal = _afterget_transform.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_rectTransform()
        {
            if (!HookedList.Contains("get_rectTransform"))
            {
                HookedList.Add("get_rectTransform");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_rectTransform"), get_rectTransform);
            }
        }

        internal static event Delegates.get_rectTransform_BeforeArgs _beforeget_rectTransform;
        internal static event Delegates.get_rectTransform_NormalArgs _afterget_rectTransform;

        private static RectTransform get_rectTransform(Func<TMP_Text, RectTransform> orig, TMP_Text self)
        {
            Delegates.Params_get_rectTransform @params = new()
            {
                self = self
            };
            _beforeget_rectTransform?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_rectTransform != null) retVal = _afterget_rectTransform.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_autoSizeTextContainer()
        {
            if (!HookedList.Contains("get_autoSizeTextContainer"))
            {
                HookedList.Add("get_autoSizeTextContainer");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_autoSizeTextContainer"),
                    get_autoSizeTextContainer);
            }
        }

        internal static event Delegates.get_autoSizeTextContainer_BeforeArgs _beforeget_autoSizeTextContainer;
        internal static event Delegates.get_autoSizeTextContainer_NormalArgs _afterget_autoSizeTextContainer;

        private static bool get_autoSizeTextContainer(Func<TMP_Text, bool> orig, TMP_Text self)
        {
            Delegates.Params_get_autoSizeTextContainer @params = new()
            {
                self = self
            };
            _beforeget_autoSizeTextContainer?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_autoSizeTextContainer != null) retVal = _afterget_autoSizeTextContainer.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_autoSizeTextContainer()
        {
            if (!HookedList.Contains("set_autoSizeTextContainer"))
            {
                HookedList.Add("set_autoSizeTextContainer");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_autoSizeTextContainer"),
                    set_autoSizeTextContainer);
            }
        }

        internal static event Delegates.set_autoSizeTextContainer_BeforeArgs _beforeset_autoSizeTextContainer;
        internal static event Delegates.set_autoSizeTextContainer_NormalArgs _afterset_autoSizeTextContainer;

        private static void set_autoSizeTextContainer(Action<TMP_Text, bool> orig, TMP_Text self, bool value)
        {
            Delegates.Params_set_autoSizeTextContainer @params = new()
            {
                self = self, value = value
            };
            _beforeset_autoSizeTextContainer?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_autoSizeTextContainer != null) _afterset_autoSizeTextContainer.Invoke(@params);
        }

        internal static void Hookget_mesh()
        {
            if (!HookedList.Contains("get_mesh"))
            {
                HookedList.Add("get_mesh");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_mesh"), get_mesh);
            }
        }

        internal static event Delegates.get_mesh_BeforeArgs _beforeget_mesh;
        internal static event Delegates.get_mesh_NormalArgs _afterget_mesh;

        private static Mesh get_mesh(Func<TMP_Text, Mesh> orig, TMP_Text self)
        {
            Delegates.Params_get_mesh @params = new()
            {
                self = self
            };
            _beforeget_mesh?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_mesh != null) retVal = _afterget_mesh.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_isVolumetricText()
        {
            if (!HookedList.Contains("get_isVolumetricText"))
            {
                HookedList.Add("get_isVolumetricText");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_isVolumetricText"),
                    get_isVolumetricText);
            }
        }

        internal static event Delegates.get_isVolumetricText_BeforeArgs _beforeget_isVolumetricText;
        internal static event Delegates.get_isVolumetricText_NormalArgs _afterget_isVolumetricText;

        private static bool get_isVolumetricText(Func<TMP_Text, bool> orig, TMP_Text self)
        {
            Delegates.Params_get_isVolumetricText @params = new()
            {
                self = self
            };
            _beforeget_isVolumetricText?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_isVolumetricText != null) retVal = _afterget_isVolumetricText.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_isVolumetricText()
        {
            if (!HookedList.Contains("set_isVolumetricText"))
            {
                HookedList.Add("set_isVolumetricText");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_isVolumetricText"),
                    set_isVolumetricText);
            }
        }

        internal static event Delegates.set_isVolumetricText_BeforeArgs _beforeset_isVolumetricText;
        internal static event Delegates.set_isVolumetricText_NormalArgs _afterset_isVolumetricText;

        private static void set_isVolumetricText(Action<TMP_Text, bool> orig, TMP_Text self, bool value)
        {
            Delegates.Params_set_isVolumetricText @params = new()
            {
                self = self, value = value
            };
            _beforeset_isVolumetricText?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_isVolumetricText != null) _afterset_isVolumetricText.Invoke(@params);
        }

        internal static void Hookget_bounds()
        {
            if (!HookedList.Contains("get_bounds"))
            {
                HookedList.Add("get_bounds");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_bounds"), get_bounds);
            }
        }

        internal static event Delegates.get_bounds_BeforeArgs _beforeget_bounds;
        internal static event Delegates.get_bounds_NormalArgs _afterget_bounds;

        private static Bounds get_bounds(Func<TMP_Text, Bounds> orig, TMP_Text self)
        {
            Delegates.Params_get_bounds @params = new()
            {
                self = self
            };
            _beforeget_bounds?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_bounds != null) retVal = _afterget_bounds.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_textBounds()
        {
            if (!HookedList.Contains("get_textBounds"))
            {
                HookedList.Add("get_textBounds");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_textBounds"), get_textBounds);
            }
        }

        internal static event Delegates.get_textBounds_BeforeArgs _beforeget_textBounds;
        internal static event Delegates.get_textBounds_NormalArgs _afterget_textBounds;

        private static Bounds get_textBounds(Func<TMP_Text, Bounds> orig, TMP_Text self)
        {
            Delegates.Params_get_textBounds @params = new()
            {
                self = self
            };
            _beforeget_textBounds?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_textBounds != null) retVal = _afterget_textBounds.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_flexibleHeight()
        {
            if (!HookedList.Contains("get_flexibleHeight"))
            {
                HookedList.Add("get_flexibleHeight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_flexibleHeight"), get_flexibleHeight);
            }
        }

        internal static event Delegates.get_flexibleHeight_BeforeArgs _beforeget_flexibleHeight;
        internal static event Delegates.get_flexibleHeight_NormalArgs _afterget_flexibleHeight;

        private static float get_flexibleHeight(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_get_flexibleHeight @params = new()
            {
                self = self
            };
            _beforeget_flexibleHeight?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_flexibleHeight != null) retVal = _afterget_flexibleHeight.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_flexibleWidth()
        {
            if (!HookedList.Contains("get_flexibleWidth"))
            {
                HookedList.Add("get_flexibleWidth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_flexibleWidth"), get_flexibleWidth);
            }
        }

        internal static event Delegates.get_flexibleWidth_BeforeArgs _beforeget_flexibleWidth;
        internal static event Delegates.get_flexibleWidth_NormalArgs _afterget_flexibleWidth;

        private static float get_flexibleWidth(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_get_flexibleWidth @params = new()
            {
                self = self
            };
            _beforeget_flexibleWidth?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_flexibleWidth != null) retVal = _afterget_flexibleWidth.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_minHeight()
        {
            if (!HookedList.Contains("get_minHeight"))
            {
                HookedList.Add("get_minHeight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_minHeight"), get_minHeight);
            }
        }

        internal static event Delegates.get_minHeight_BeforeArgs _beforeget_minHeight;
        internal static event Delegates.get_minHeight_NormalArgs _afterget_minHeight;

        private static float get_minHeight(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_get_minHeight @params = new()
            {
                self = self
            };
            _beforeget_minHeight?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_minHeight != null) retVal = _afterget_minHeight.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_minWidth()
        {
            if (!HookedList.Contains("get_minWidth"))
            {
                HookedList.Add("get_minWidth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_minWidth"), get_minWidth);
            }
        }

        internal static event Delegates.get_minWidth_BeforeArgs _beforeget_minWidth;
        internal static event Delegates.get_minWidth_NormalArgs _afterget_minWidth;

        private static float get_minWidth(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_get_minWidth @params = new()
            {
                self = self
            };
            _beforeget_minWidth?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_minWidth != null) retVal = _afterget_minWidth.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_preferredWidth()
        {
            if (!HookedList.Contains("get_preferredWidth"))
            {
                HookedList.Add("get_preferredWidth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_preferredWidth"), get_preferredWidth);
            }
        }

        internal static event Delegates.get_preferredWidth_BeforeArgs _beforeget_preferredWidth;
        internal static event Delegates.get_preferredWidth_NormalArgs _afterget_preferredWidth;

        private static float get_preferredWidth(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_get_preferredWidth @params = new()
            {
                self = self
            };
            _beforeget_preferredWidth?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_preferredWidth != null) retVal = _afterget_preferredWidth.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_preferredHeight()
        {
            if (!HookedList.Contains("get_preferredHeight"))
            {
                HookedList.Add("get_preferredHeight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_preferredHeight"), get_preferredHeight);
            }
        }

        internal static event Delegates.get_preferredHeight_BeforeArgs _beforeget_preferredHeight;
        internal static event Delegates.get_preferredHeight_NormalArgs _afterget_preferredHeight;

        private static float get_preferredHeight(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_get_preferredHeight @params = new()
            {
                self = self
            };
            _beforeget_preferredHeight?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_preferredHeight != null) retVal = _afterget_preferredHeight.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_renderedWidth()
        {
            if (!HookedList.Contains("get_renderedWidth"))
            {
                HookedList.Add("get_renderedWidth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_renderedWidth"), get_renderedWidth);
            }
        }

        internal static event Delegates.get_renderedWidth_BeforeArgs _beforeget_renderedWidth;
        internal static event Delegates.get_renderedWidth_NormalArgs _afterget_renderedWidth;

        private static float get_renderedWidth(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_get_renderedWidth @params = new()
            {
                self = self
            };
            _beforeget_renderedWidth?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_renderedWidth != null) retVal = _afterget_renderedWidth.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_renderedHeight()
        {
            if (!HookedList.Contains("get_renderedHeight"))
            {
                HookedList.Add("get_renderedHeight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_renderedHeight"), get_renderedHeight);
            }
        }

        internal static event Delegates.get_renderedHeight_BeforeArgs _beforeget_renderedHeight;
        internal static event Delegates.get_renderedHeight_NormalArgs _afterget_renderedHeight;

        private static float get_renderedHeight(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_get_renderedHeight @params = new()
            {
                self = self
            };
            _beforeget_renderedHeight?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_renderedHeight != null) retVal = _afterget_renderedHeight.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_layoutPriority()
        {
            if (!HookedList.Contains("get_layoutPriority"))
            {
                HookedList.Add("get_layoutPriority");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_layoutPriority"), get_layoutPriority);
            }
        }

        internal static event Delegates.get_layoutPriority_BeforeArgs _beforeget_layoutPriority;
        internal static event Delegates.get_layoutPriority_NormalArgs _afterget_layoutPriority;

        private static int get_layoutPriority(Func<TMP_Text, int> orig, TMP_Text self)
        {
            Delegates.Params_get_layoutPriority @params = new()
            {
                self = self
            };
            _beforeget_layoutPriority?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_layoutPriority != null) retVal = _afterget_layoutPriority.Invoke(@params);
            return retVal;
        }

        internal static void HookLoadFontAsset()
        {
            if (!HookedList.Contains("LoadFontAsset"))
            {
                HookedList.Add("LoadFontAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "LoadFontAsset"), LoadFontAsset);
            }
        }

        internal static event Delegates.LoadFontAsset_BeforeArgs _beforeLoadFontAsset;
        internal static event Delegates.LoadFontAsset_NormalArgs _afterLoadFontAsset;

        private static void LoadFontAsset(Action<TMP_Text> orig, TMP_Text self)
        {
            Delegates.Params_LoadFontAsset @params = new()
            {
                self = self
            };
            _beforeLoadFontAsset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLoadFontAsset != null) _afterLoadFontAsset.Invoke(@params);
        }

        internal static void HookSetSharedMaterial()
        {
            if (!HookedList.Contains("SetSharedMaterial"))
            {
                HookedList.Add("SetSharedMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetSharedMaterial"), SetSharedMaterial);
            }
        }

        internal static event Delegates.SetSharedMaterial_BeforeArgs _beforeSetSharedMaterial;
        internal static event Delegates.SetSharedMaterial_NormalArgs _afterSetSharedMaterial;

        private static void SetSharedMaterial(Action<TMP_Text, Material> orig, TMP_Text self, Material mat)
        {
            Delegates.Params_SetSharedMaterial @params = new()
            {
                self = self, mat = mat
            };
            _beforeSetSharedMaterial?.Invoke(@params);
            self = @params.self;
            mat = @params.mat;
            orig(self, mat);
            if (_afterSetSharedMaterial != null) _afterSetSharedMaterial.Invoke(@params);
        }

        internal static void HookGetMaterial()
        {
            if (!HookedList.Contains("GetMaterial"))
            {
                HookedList.Add("GetMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetMaterial"), GetMaterial);
            }
        }

        internal static event Delegates.GetMaterial_BeforeArgs _beforeGetMaterial;
        internal static event Delegates.GetMaterial_NormalArgs _afterGetMaterial;

        private static Material GetMaterial(Func<TMP_Text, Material, Material> orig, TMP_Text self, Material mat)
        {
            Delegates.Params_GetMaterial @params = new()
            {
                self = self, mat = mat
            };
            _beforeGetMaterial?.Invoke(@params);
            self = @params.self;
            mat = @params.mat;
            var retVal = orig(self, mat);
            if (_afterGetMaterial != null) retVal = _afterGetMaterial.Invoke(@params);
            return retVal;
        }

        internal static void HookSetFontBaseMaterial()
        {
            if (!HookedList.Contains("SetFontBaseMaterial"))
            {
                HookedList.Add("SetFontBaseMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetFontBaseMaterial"), SetFontBaseMaterial);
            }
        }

        internal static event Delegates.SetFontBaseMaterial_BeforeArgs _beforeSetFontBaseMaterial;
        internal static event Delegates.SetFontBaseMaterial_NormalArgs _afterSetFontBaseMaterial;

        private static void SetFontBaseMaterial(Action<TMP_Text, Material> orig, TMP_Text self, Material mat)
        {
            Delegates.Params_SetFontBaseMaterial @params = new()
            {
                self = self, mat = mat
            };
            _beforeSetFontBaseMaterial?.Invoke(@params);
            self = @params.self;
            mat = @params.mat;
            orig(self, mat);
            if (_afterSetFontBaseMaterial != null) _afterSetFontBaseMaterial.Invoke(@params);
        }

        internal static void HookGetSharedMaterials()
        {
            if (!HookedList.Contains("GetSharedMaterials"))
            {
                HookedList.Add("GetSharedMaterials");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetSharedMaterials"), GetSharedMaterials);
            }
        }

        internal static event Delegates.GetSharedMaterials_BeforeArgs _beforeGetSharedMaterials;
        internal static event Delegates.GetSharedMaterials_NormalArgs _afterGetSharedMaterials;

        private static Material[] GetSharedMaterials(Func<TMP_Text, Material[]> orig, TMP_Text self)
        {
            Delegates.Params_GetSharedMaterials @params = new()
            {
                self = self
            };
            _beforeGetSharedMaterials?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetSharedMaterials != null) retVal = _afterGetSharedMaterials.Invoke(@params);
            return retVal;
        }

        internal static void HookSetSharedMaterials()
        {
            if (!HookedList.Contains("SetSharedMaterials"))
            {
                HookedList.Add("SetSharedMaterials");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetSharedMaterials"), SetSharedMaterials);
            }
        }

        internal static event Delegates.SetSharedMaterials_BeforeArgs _beforeSetSharedMaterials;
        internal static event Delegates.SetSharedMaterials_NormalArgs _afterSetSharedMaterials;

        private static void SetSharedMaterials(Action<TMP_Text, Material[]> orig, TMP_Text self, Material[] materials)
        {
            Delegates.Params_SetSharedMaterials @params = new()
            {
                self = self, materials = materials
            };
            _beforeSetSharedMaterials?.Invoke(@params);
            self = @params.self;
            materials = @params.materials;
            orig(self, materials);
            if (_afterSetSharedMaterials != null) _afterSetSharedMaterials.Invoke(@params);
        }

        internal static void HookGetMaterials()
        {
            if (!HookedList.Contains("GetMaterials"))
            {
                HookedList.Add("GetMaterials");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetMaterials"), GetMaterials);
            }
        }

        internal static event Delegates.GetMaterials_BeforeArgs _beforeGetMaterials;
        internal static event Delegates.GetMaterials_NormalArgs _afterGetMaterials;

        private static Material[] GetMaterials(Func<TMP_Text, Material[], Material[]> orig, TMP_Text self,
            Material[] mats)
        {
            Delegates.Params_GetMaterials @params = new()
            {
                self = self, mats = mats
            };
            _beforeGetMaterials?.Invoke(@params);
            self = @params.self;
            mats = @params.mats;
            var retVal = orig(self, mats);
            if (_afterGetMaterials != null) retVal = _afterGetMaterials.Invoke(@params);
            return retVal;
        }

        internal static void HookCreateMaterialInstance()
        {
            if (!HookedList.Contains("CreateMaterialInstance"))
            {
                HookedList.Add("CreateMaterialInstance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "CreateMaterialInstance"),
                    CreateMaterialInstance);
            }
        }

        internal static event Delegates.CreateMaterialInstance_BeforeArgs _beforeCreateMaterialInstance;
        internal static event Delegates.CreateMaterialInstance_NormalArgs _afterCreateMaterialInstance;

        private static Material CreateMaterialInstance(Func<TMP_Text, Material, Material> orig, TMP_Text self,
            Material source)
        {
            Delegates.Params_CreateMaterialInstance @params = new()
            {
                self = self, source = source
            };
            _beforeCreateMaterialInstance?.Invoke(@params);
            self = @params.self;
            source = @params.source;
            var retVal = orig(self, source);
            if (_afterCreateMaterialInstance != null) retVal = _afterCreateMaterialInstance.Invoke(@params);
            return retVal;
        }

        internal static void HookSetVertexColorGradient()
        {
            if (!HookedList.Contains("SetVertexColorGradient"))
            {
                HookedList.Add("SetVertexColorGradient");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetVertexColorGradient"),
                    SetVertexColorGradient);
            }
        }

        internal static event Delegates.SetVertexColorGradient_BeforeArgs _beforeSetVertexColorGradient;
        internal static event Delegates.SetVertexColorGradient_NormalArgs _afterSetVertexColorGradient;

        private static void SetVertexColorGradient(Action<TMP_Text, TMP_ColorGradient> orig, TMP_Text self,
            TMP_ColorGradient gradient)
        {
            Delegates.Params_SetVertexColorGradient @params = new()
            {
                self = self, gradient = gradient
            };
            _beforeSetVertexColorGradient?.Invoke(@params);
            self = @params.self;
            gradient = @params.gradient;
            orig(self, gradient);
            if (_afterSetVertexColorGradient != null) _afterSetVertexColorGradient.Invoke(@params);
        }

        internal static void HookSetFaceColor()
        {
            if (!HookedList.Contains("SetFaceColor"))
            {
                HookedList.Add("SetFaceColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetFaceColor"), SetFaceColor);
            }
        }

        internal static event Delegates.SetFaceColor_BeforeArgs _beforeSetFaceColor;
        internal static event Delegates.SetFaceColor_NormalArgs _afterSetFaceColor;

        private static void SetFaceColor(Action<TMP_Text, Color32> orig, TMP_Text self, Color32 color)
        {
            Delegates.Params_SetFaceColor @params = new()
            {
                self = self, color = color
            };
            _beforeSetFaceColor?.Invoke(@params);
            self = @params.self;
            color = @params.color;
            orig(self, color);
            if (_afterSetFaceColor != null) _afterSetFaceColor.Invoke(@params);
        }

        internal static void HookSetOutlineColor()
        {
            if (!HookedList.Contains("SetOutlineColor"))
            {
                HookedList.Add("SetOutlineColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetOutlineColor"), SetOutlineColor);
            }
        }

        internal static event Delegates.SetOutlineColor_BeforeArgs _beforeSetOutlineColor;
        internal static event Delegates.SetOutlineColor_NormalArgs _afterSetOutlineColor;

        private static void SetOutlineColor(Action<TMP_Text, Color32> orig, TMP_Text self, Color32 color)
        {
            Delegates.Params_SetOutlineColor @params = new()
            {
                self = self, color = color
            };
            _beforeSetOutlineColor?.Invoke(@params);
            self = @params.self;
            color = @params.color;
            orig(self, color);
            if (_afterSetOutlineColor != null) _afterSetOutlineColor.Invoke(@params);
        }

        internal static void HookSetOutlineThickness()
        {
            if (!HookedList.Contains("SetOutlineThickness"))
            {
                HookedList.Add("SetOutlineThickness");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetOutlineThickness"), SetOutlineThickness);
            }
        }

        internal static event Delegates.SetOutlineThickness_BeforeArgs _beforeSetOutlineThickness;
        internal static event Delegates.SetOutlineThickness_NormalArgs _afterSetOutlineThickness;

        private static void SetOutlineThickness(Action<TMP_Text, float> orig, TMP_Text self, float thickness)
        {
            Delegates.Params_SetOutlineThickness @params = new()
            {
                self = self, thickness = thickness
            };
            _beforeSetOutlineThickness?.Invoke(@params);
            self = @params.self;
            thickness = @params.thickness;
            orig(self, thickness);
            if (_afterSetOutlineThickness != null) _afterSetOutlineThickness.Invoke(@params);
        }

        internal static void HookSetShaderDepth()
        {
            if (!HookedList.Contains("SetShaderDepth"))
            {
                HookedList.Add("SetShaderDepth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetShaderDepth"), SetShaderDepth);
            }
        }

        internal static event Delegates.SetShaderDepth_BeforeArgs _beforeSetShaderDepth;
        internal static event Delegates.SetShaderDepth_NormalArgs _afterSetShaderDepth;

        private static void SetShaderDepth(Action<TMP_Text> orig, TMP_Text self)
        {
            Delegates.Params_SetShaderDepth @params = new()
            {
                self = self
            };
            _beforeSetShaderDepth?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetShaderDepth != null) _afterSetShaderDepth.Invoke(@params);
        }

        internal static void HookSetCulling()
        {
            if (!HookedList.Contains("SetCulling"))
            {
                HookedList.Add("SetCulling");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetCulling"), SetCulling);
            }
        }

        internal static event Delegates.SetCulling_BeforeArgs _beforeSetCulling;
        internal static event Delegates.SetCulling_NormalArgs _afterSetCulling;

        private static void SetCulling(Action<TMP_Text> orig, TMP_Text self)
        {
            Delegates.Params_SetCulling @params = new()
            {
                self = self
            };
            _beforeSetCulling?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetCulling != null) _afterSetCulling.Invoke(@params);
        }

        internal static void HookGetPaddingForMaterial()
        {
            if (!HookedList.Contains("GetPaddingForMaterial"))
            {
                HookedList.Add("GetPaddingForMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPaddingForMaterial"),
                    GetPaddingForMaterial);
            }
        }

        internal static event Delegates.GetPaddingForMaterial_BeforeArgs _beforeGetPaddingForMaterial;
        internal static event Delegates.GetPaddingForMaterial_NormalArgs _afterGetPaddingForMaterial;

        private static float GetPaddingForMaterial(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_GetPaddingForMaterial @params = new()
            {
                self = self
            };
            _beforeGetPaddingForMaterial?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetPaddingForMaterial != null) retVal = _afterGetPaddingForMaterial.Invoke(@params);
            return retVal;
        }

        internal static void HookGetPaddingForMaterial_Material()
        {
            if (!HookedList.Contains("GetPaddingForMaterial_Material"))
            {
                HookedList.Add("GetPaddingForMaterial_Material");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPaddingForMaterial_Material"),
                    GetPaddingForMaterial_Material);
            }
        }

        internal static event Delegates.GetPaddingForMaterial_Material_BeforeArgs _beforeGetPaddingForMaterial_Material;
        internal static event Delegates.GetPaddingForMaterial_Material_NormalArgs _afterGetPaddingForMaterial_Material;

        private static float GetPaddingForMaterial_Material(Func<TMP_Text, Material, float> orig, TMP_Text self,
            Material mat)
        {
            Delegates.Params_GetPaddingForMaterial_Material @params = new()
            {
                self = self, mat = mat
            };
            _beforeGetPaddingForMaterial_Material?.Invoke(@params);
            self = @params.self;
            mat = @params.mat;
            var retVal = orig(self, mat);
            if (_afterGetPaddingForMaterial_Material != null)
                retVal = _afterGetPaddingForMaterial_Material.Invoke(@params);
            return retVal;
        }

        internal static void HookGetTextContainerLocalCorners()
        {
            if (!HookedList.Contains("GetTextContainerLocalCorners"))
            {
                HookedList.Add("GetTextContainerLocalCorners");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetTextContainerLocalCorners"),
                    GetTextContainerLocalCorners);
            }
        }

        internal static event Delegates.GetTextContainerLocalCorners_BeforeArgs _beforeGetTextContainerLocalCorners;
        internal static event Delegates.GetTextContainerLocalCorners_NormalArgs _afterGetTextContainerLocalCorners;

        private static Vector3[] GetTextContainerLocalCorners(Func<TMP_Text, Vector3[]> orig, TMP_Text self)
        {
            Delegates.Params_GetTextContainerLocalCorners @params = new()
            {
                self = self
            };
            _beforeGetTextContainerLocalCorners?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetTextContainerLocalCorners != null) retVal = _afterGetTextContainerLocalCorners.Invoke(@params);
            return retVal;
        }

        internal static void HookForceMeshUpdate()
        {
            if (!HookedList.Contains("ForceMeshUpdate"))
            {
                HookedList.Add("ForceMeshUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "ForceMeshUpdate"), ForceMeshUpdate);
            }
        }

        internal static event Delegates.ForceMeshUpdate_BeforeArgs _beforeForceMeshUpdate;
        internal static event Delegates.ForceMeshUpdate_NormalArgs _afterForceMeshUpdate;

        private static void ForceMeshUpdate(Action<TMP_Text> orig, TMP_Text self)
        {
            Delegates.Params_ForceMeshUpdate @params = new()
            {
                self = self
            };
            _beforeForceMeshUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterForceMeshUpdate != null) _afterForceMeshUpdate.Invoke(@params);
        }

        internal static void HookForceMeshUpdate_bool()
        {
            if (!HookedList.Contains("ForceMeshUpdate_bool"))
            {
                HookedList.Add("ForceMeshUpdate_bool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "ForceMeshUpdate_bool"),
                    ForceMeshUpdate_bool);
            }
        }

        internal static event Delegates.ForceMeshUpdate_bool_BeforeArgs _beforeForceMeshUpdate_bool;
        internal static event Delegates.ForceMeshUpdate_bool_NormalArgs _afterForceMeshUpdate_bool;

        private static void ForceMeshUpdate_bool(Action<TMP_Text, bool> orig, TMP_Text self, bool ignoreActiveState)
        {
            Delegates.Params_ForceMeshUpdate_bool @params = new()
            {
                self = self, ignoreActiveState = ignoreActiveState
            };
            _beforeForceMeshUpdate_bool?.Invoke(@params);
            self = @params.self;
            ignoreActiveState = @params.ignoreActiveState;
            orig(self, ignoreActiveState);
            if (_afterForceMeshUpdate_bool != null) _afterForceMeshUpdate_bool.Invoke(@params);
        }

        internal static void HookSetTextInternal()
        {
            if (!HookedList.Contains("SetTextInternal"))
            {
                HookedList.Add("SetTextInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetTextInternal"), SetTextInternal);
            }
        }

        internal static event Delegates.SetTextInternal_BeforeArgs _beforeSetTextInternal;
        internal static event Delegates.SetTextInternal_NormalArgs _afterSetTextInternal;

        private static void SetTextInternal(Action<TMP_Text, string> orig, TMP_Text self, string text)
        {
            Delegates.Params_SetTextInternal @params = new()
            {
                self = self, text = text
            };
            _beforeSetTextInternal?.Invoke(@params);
            self = @params.self;
            text = @params.text;
            orig(self, text);
            if (_afterSetTextInternal != null) _afterSetTextInternal.Invoke(@params);
        }

        internal static void HookUpdateGeometry()
        {
            if (!HookedList.Contains("UpdateGeometry"))
            {
                HookedList.Add("UpdateGeometry");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "UpdateGeometry"), UpdateGeometry);
            }
        }

        internal static event Delegates.UpdateGeometry_BeforeArgs _beforeUpdateGeometry;
        internal static event Delegates.UpdateGeometry_NormalArgs _afterUpdateGeometry;

        private static void UpdateGeometry(Action<TMP_Text, Mesh, int> orig, TMP_Text self, Mesh mesh, int index)
        {
            Delegates.Params_UpdateGeometry @params = new()
            {
                self = self, mesh = mesh, index = index
            };
            _beforeUpdateGeometry?.Invoke(@params);
            self = @params.self;
            mesh = @params.mesh;
            index = @params.index;
            orig(self, mesh, index);
            if (_afterUpdateGeometry != null) _afterUpdateGeometry.Invoke(@params);
        }

        internal static void HookUpdateVertexData_TMP_VertexDataUpdateFlags()
        {
            if (!HookedList.Contains("UpdateVertexData_TMP_VertexDataUpdateFlags"))
            {
                HookedList.Add("UpdateVertexData_TMP_VertexDataUpdateFlags");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "UpdateVertexData_TMP_VertexDataUpdateFlags"),
                    UpdateVertexData_TMP_VertexDataUpdateFlags);
            }
        }

        internal static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_BeforeArgs
            _beforeUpdateVertexData_TMP_VertexDataUpdateFlags;

        internal static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_NormalArgs
            _afterUpdateVertexData_TMP_VertexDataUpdateFlags;

        private static void UpdateVertexData_TMP_VertexDataUpdateFlags(Action<TMP_Text, TMP_VertexDataUpdateFlags> orig,
            TMP_Text self, TMP_VertexDataUpdateFlags flags)
        {
            Delegates.Params_UpdateVertexData_TMP_VertexDataUpdateFlags @params = new()
            {
                self = self, flags = flags
            };
            _beforeUpdateVertexData_TMP_VertexDataUpdateFlags?.Invoke(@params);
            self = @params.self;
            flags = @params.flags;
            orig(self, flags);
            if (_afterUpdateVertexData_TMP_VertexDataUpdateFlags != null)
                _afterUpdateVertexData_TMP_VertexDataUpdateFlags.Invoke(@params);
        }

        internal static void HookUpdateVertexData()
        {
            if (!HookedList.Contains("UpdateVertexData"))
            {
                HookedList.Add("UpdateVertexData");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "UpdateVertexData"), UpdateVertexData);
            }
        }

        internal static event Delegates.UpdateVertexData_BeforeArgs _beforeUpdateVertexData;
        internal static event Delegates.UpdateVertexData_NormalArgs _afterUpdateVertexData;

        private static void UpdateVertexData(Action<TMP_Text> orig, TMP_Text self)
        {
            Delegates.Params_UpdateVertexData @params = new()
            {
                self = self
            };
            _beforeUpdateVertexData?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateVertexData != null) _afterUpdateVertexData.Invoke(@params);
        }

        internal static void HookSetVertices()
        {
            if (!HookedList.Contains("SetVertices"))
            {
                HookedList.Add("SetVertices");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetVertices"), SetVertices);
            }
        }

        internal static event Delegates.SetVertices_BeforeArgs _beforeSetVertices;
        internal static event Delegates.SetVertices_NormalArgs _afterSetVertices;

        private static void SetVertices(Action<TMP_Text, Vector3[]> orig, TMP_Text self, Vector3[] vertices)
        {
            Delegates.Params_SetVertices @params = new()
            {
                self = self, vertices = vertices
            };
            _beforeSetVertices?.Invoke(@params);
            self = @params.self;
            vertices = @params.vertices;
            orig(self, vertices);
            if (_afterSetVertices != null) _afterSetVertices.Invoke(@params);
        }

        internal static void HookUpdateMeshPadding()
        {
            if (!HookedList.Contains("UpdateMeshPadding"))
            {
                HookedList.Add("UpdateMeshPadding");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "UpdateMeshPadding"), UpdateMeshPadding);
            }
        }

        internal static event Delegates.UpdateMeshPadding_BeforeArgs _beforeUpdateMeshPadding;
        internal static event Delegates.UpdateMeshPadding_NormalArgs _afterUpdateMeshPadding;

        private static void UpdateMeshPadding(Action<TMP_Text> orig, TMP_Text self)
        {
            Delegates.Params_UpdateMeshPadding @params = new()
            {
                self = self
            };
            _beforeUpdateMeshPadding?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateMeshPadding != null) _afterUpdateMeshPadding.Invoke(@params);
        }

        internal static void HookCrossFadeColor()
        {
            if (!HookedList.Contains("CrossFadeColor"))
            {
                HookedList.Add("CrossFadeColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "CrossFadeColor"), CrossFadeColor);
            }
        }

        internal static event Delegates.CrossFadeColor_BeforeArgs _beforeCrossFadeColor;
        internal static event Delegates.CrossFadeColor_NormalArgs _afterCrossFadeColor;

        private static void CrossFadeColor(Action<TMP_Text, Color, float, bool, bool> orig, TMP_Text self,
            Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha)
        {
            Delegates.Params_CrossFadeColor @params = new()
            {
                self = self, targetColor = targetColor, duration = duration, ignoreTimeScale = ignoreTimeScale,
                useAlpha = useAlpha
            };
            _beforeCrossFadeColor?.Invoke(@params);
            self = @params.self;
            targetColor = @params.targetColor;
            duration = @params.duration;
            ignoreTimeScale = @params.ignoreTimeScale;
            useAlpha = @params.useAlpha;
            orig(self, targetColor, duration, ignoreTimeScale, useAlpha);
            if (_afterCrossFadeColor != null) _afterCrossFadeColor.Invoke(@params);
        }

        internal static void HookCrossFadeAlpha()
        {
            if (!HookedList.Contains("CrossFadeAlpha"))
            {
                HookedList.Add("CrossFadeAlpha");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "CrossFadeAlpha"), CrossFadeAlpha);
            }
        }

        internal static event Delegates.CrossFadeAlpha_BeforeArgs _beforeCrossFadeAlpha;
        internal static event Delegates.CrossFadeAlpha_NormalArgs _afterCrossFadeAlpha;

        private static void CrossFadeAlpha(Action<TMP_Text, float, float, bool> orig, TMP_Text self, float alpha,
            float duration, bool ignoreTimeScale)
        {
            Delegates.Params_CrossFadeAlpha @params = new()
            {
                self = self, alpha = alpha, duration = duration, ignoreTimeScale = ignoreTimeScale
            };
            _beforeCrossFadeAlpha?.Invoke(@params);
            self = @params.self;
            alpha = @params.alpha;
            duration = @params.duration;
            ignoreTimeScale = @params.ignoreTimeScale;
            orig(self, alpha, duration, ignoreTimeScale);
            if (_afterCrossFadeAlpha != null) _afterCrossFadeAlpha.Invoke(@params);
        }

        internal static void HookInternalCrossFadeColor()
        {
            if (!HookedList.Contains("InternalCrossFadeColor"))
            {
                HookedList.Add("InternalCrossFadeColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "InternalCrossFadeColor"),
                    InternalCrossFadeColor);
            }
        }

        internal static event Delegates.InternalCrossFadeColor_BeforeArgs _beforeInternalCrossFadeColor;
        internal static event Delegates.InternalCrossFadeColor_NormalArgs _afterInternalCrossFadeColor;

        private static void InternalCrossFadeColor(Action<TMP_Text, Color, float, bool, bool> orig, TMP_Text self,
            Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha)
        {
            Delegates.Params_InternalCrossFadeColor @params = new()
            {
                self = self, targetColor = targetColor, duration = duration, ignoreTimeScale = ignoreTimeScale,
                useAlpha = useAlpha
            };
            _beforeInternalCrossFadeColor?.Invoke(@params);
            self = @params.self;
            targetColor = @params.targetColor;
            duration = @params.duration;
            ignoreTimeScale = @params.ignoreTimeScale;
            useAlpha = @params.useAlpha;
            orig(self, targetColor, duration, ignoreTimeScale, useAlpha);
            if (_afterInternalCrossFadeColor != null) _afterInternalCrossFadeColor.Invoke(@params);
        }

        internal static void HookInternalCrossFadeAlpha()
        {
            if (!HookedList.Contains("InternalCrossFadeAlpha"))
            {
                HookedList.Add("InternalCrossFadeAlpha");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "InternalCrossFadeAlpha"),
                    InternalCrossFadeAlpha);
            }
        }

        internal static event Delegates.InternalCrossFadeAlpha_BeforeArgs _beforeInternalCrossFadeAlpha;
        internal static event Delegates.InternalCrossFadeAlpha_NormalArgs _afterInternalCrossFadeAlpha;

        private static void InternalCrossFadeAlpha(Action<TMP_Text, float, float, bool> orig, TMP_Text self,
            float alpha, float duration, bool ignoreTimeScale)
        {
            Delegates.Params_InternalCrossFadeAlpha @params = new()
            {
                self = self, alpha = alpha, duration = duration, ignoreTimeScale = ignoreTimeScale
            };
            _beforeInternalCrossFadeAlpha?.Invoke(@params);
            self = @params.self;
            alpha = @params.alpha;
            duration = @params.duration;
            ignoreTimeScale = @params.ignoreTimeScale;
            orig(self, alpha, duration, ignoreTimeScale);
            if (_afterInternalCrossFadeAlpha != null) _afterInternalCrossFadeAlpha.Invoke(@params);
        }

        internal static void HookParseInputText()
        {
            if (!HookedList.Contains("ParseInputText"))
            {
                HookedList.Add("ParseInputText");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "ParseInputText"), ParseInputText);
            }
        }

        internal static event Delegates.ParseInputText_BeforeArgs _beforeParseInputText;
        internal static event Delegates.ParseInputText_NormalArgs _afterParseInputText;

        private static void ParseInputText(Action<TMP_Text> orig, TMP_Text self)
        {
            Delegates.Params_ParseInputText @params = new()
            {
                self = self
            };
            _beforeParseInputText?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterParseInputText != null) _afterParseInputText.Invoke(@params);
        }

        internal static void HookSetText_string()
        {
            if (!HookedList.Contains("SetText_string"))
            {
                HookedList.Add("SetText_string");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetText_string"), SetText_string);
            }
        }

        internal static event Delegates.SetText_string_BeforeArgs _beforeSetText_string;
        internal static event Delegates.SetText_string_NormalArgs _afterSetText_string;

        private static void SetText_string(Action<TMP_Text, string> orig, TMP_Text self, string text)
        {
            Delegates.Params_SetText_string @params = new()
            {
                self = self, text = text
            };
            _beforeSetText_string?.Invoke(@params);
            self = @params.self;
            text = @params.text;
            orig(self, text);
            if (_afterSetText_string != null) _afterSetText_string.Invoke(@params);
        }

        internal static void HookSetText_string_float()
        {
            if (!HookedList.Contains("SetText_string_float"))
            {
                HookedList.Add("SetText_string_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetText_string_float"),
                    SetText_string_float);
            }
        }

        internal static event Delegates.SetText_string_float_BeforeArgs _beforeSetText_string_float;
        internal static event Delegates.SetText_string_float_NormalArgs _afterSetText_string_float;

        private static void SetText_string_float(Action<TMP_Text, string, float> orig, TMP_Text self, string text,
            float arg0)
        {
            Delegates.Params_SetText_string_float @params = new()
            {
                self = self, text = text, arg0 = arg0
            };
            _beforeSetText_string_float?.Invoke(@params);
            self = @params.self;
            text = @params.text;
            arg0 = @params.arg0;
            orig(self, text, arg0);
            if (_afterSetText_string_float != null) _afterSetText_string_float.Invoke(@params);
        }

        internal static void HookSetText_string_float_float()
        {
            if (!HookedList.Contains("SetText_string_float_float"))
            {
                HookedList.Add("SetText_string_float_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetText_string_float_float"),
                    SetText_string_float_float);
            }
        }

        internal static event Delegates.SetText_string_float_float_BeforeArgs _beforeSetText_string_float_float;
        internal static event Delegates.SetText_string_float_float_NormalArgs _afterSetText_string_float_float;

        private static void SetText_string_float_float(Action<TMP_Text, string, float, float> orig, TMP_Text self,
            string text, float arg0, float arg1)
        {
            Delegates.Params_SetText_string_float_float @params = new()
            {
                self = self, text = text, arg0 = arg0, arg1 = arg1
            };
            _beforeSetText_string_float_float?.Invoke(@params);
            self = @params.self;
            text = @params.text;
            arg0 = @params.arg0;
            arg1 = @params.arg1;
            orig(self, text, arg0, arg1);
            if (_afterSetText_string_float_float != null) _afterSetText_string_float_float.Invoke(@params);
        }

        internal static void HookSetText_string_float_float_float()
        {
            if (!HookedList.Contains("SetText_string_float_float_float"))
            {
                HookedList.Add("SetText_string_float_float_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetText_string_float_float_float"),
                    SetText_string_float_float_float);
            }
        }

        internal static event Delegates.SetText_string_float_float_float_BeforeArgs
            _beforeSetText_string_float_float_float;

        internal static event Delegates.SetText_string_float_float_float_NormalArgs
            _afterSetText_string_float_float_float;

        private static void SetText_string_float_float_float(Action<TMP_Text, string, float, float, float> orig,
            TMP_Text self, string text, float arg0, float arg1, float arg2)
        {
            Delegates.Params_SetText_string_float_float_float @params = new()
            {
                self = self, text = text, arg0 = arg0, arg1 = arg1, arg2 = arg2
            };
            _beforeSetText_string_float_float_float?.Invoke(@params);
            self = @params.self;
            text = @params.text;
            arg0 = @params.arg0;
            arg1 = @params.arg1;
            arg2 = @params.arg2;
            orig(self, text, arg0, arg1, arg2);
            if (_afterSetText_string_float_float_float != null) _afterSetText_string_float_float_float.Invoke(@params);
        }

        internal static void HookSetText_StringBuilder()
        {
            if (!HookedList.Contains("SetText_StringBuilder"))
            {
                HookedList.Add("SetText_StringBuilder");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetText_StringBuilder"),
                    SetText_StringBuilder);
            }
        }

        internal static event Delegates.SetText_StringBuilder_BeforeArgs _beforeSetText_StringBuilder;
        internal static event Delegates.SetText_StringBuilder_NormalArgs _afterSetText_StringBuilder;

        private static void SetText_StringBuilder(Action<TMP_Text, StringBuilder> orig, TMP_Text self,
            StringBuilder text)
        {
            Delegates.Params_SetText_StringBuilder @params = new()
            {
                self = self, text = text
            };
            _beforeSetText_StringBuilder?.Invoke(@params);
            self = @params.self;
            text = @params.text;
            orig(self, text);
            if (_afterSetText_StringBuilder != null) _afterSetText_StringBuilder.Invoke(@params);
        }

        internal static void HookSetCharArray()
        {
            if (!HookedList.Contains("SetCharArray"))
            {
                HookedList.Add("SetCharArray");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetCharArray"), SetCharArray);
            }
        }

        internal static event Delegates.SetCharArray_BeforeArgs _beforeSetCharArray;
        internal static event Delegates.SetCharArray_NormalArgs _afterSetCharArray;

        private static void SetCharArray(Action<TMP_Text, char[]> orig, TMP_Text self, char[] charArray)
        {
            Delegates.Params_SetCharArray @params = new()
            {
                self = self, charArray = charArray
            };
            _beforeSetCharArray?.Invoke(@params);
            self = @params.self;
            charArray = @params.charArray;
            orig(self, charArray);
            if (_afterSetCharArray != null) _afterSetCharArray.Invoke(@params);
        }

        internal static void HookSetTextArrayToCharArray()
        {
            if (!HookedList.Contains("SetTextArrayToCharArray"))
            {
                HookedList.Add("SetTextArrayToCharArray");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetTextArrayToCharArray"),
                    SetTextArrayToCharArray);
            }
        }

        internal static event Delegates.SetTextArrayToCharArray_BeforeArgs _beforeSetTextArrayToCharArray;
        internal static event Delegates.SetTextArrayToCharArray_NormalArgs _afterSetTextArrayToCharArray;

        private static void SetTextArrayToCharArray(Action<TMP_Text, char[], int[]> orig, TMP_Text self,
            char[] charArray, int[] charBuffer)
        {
            Delegates.Params_SetTextArrayToCharArray @params = new()
            {
                self = self, charArray = charArray, charBuffer = charBuffer
            };
            _beforeSetTextArrayToCharArray?.Invoke(@params);
            self = @params.self;
            charArray = @params.charArray;
            charBuffer = @params.charBuffer;
            orig(self, charArray, charBuffer);
            if (_afterSetTextArrayToCharArray != null) _afterSetTextArrayToCharArray.Invoke(@params);
        }

        internal static void HookStringToCharArray()
        {
            if (!HookedList.Contains("StringToCharArray"))
            {
                HookedList.Add("StringToCharArray");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "StringToCharArray"), StringToCharArray);
            }
        }

        internal static event Delegates.StringToCharArray_BeforeArgs _beforeStringToCharArray;
        internal static event Delegates.StringToCharArray_NormalArgs _afterStringToCharArray;

        private static void StringToCharArray(Action<TMP_Text, string, int[]> orig, TMP_Text self, string text,
            int[] chars)
        {
            Delegates.Params_StringToCharArray @params = new()
            {
                self = self, text = text, chars = chars
            };
            _beforeStringToCharArray?.Invoke(@params);
            self = @params.self;
            text = @params.text;
            chars = @params.chars;
            orig(self, text, chars);
            if (_afterStringToCharArray != null) _afterStringToCharArray.Invoke(@params);
        }

        internal static void HookStringBuilderToIntArray()
        {
            if (!HookedList.Contains("StringBuilderToIntArray"))
            {
                HookedList.Add("StringBuilderToIntArray");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "StringBuilderToIntArray"),
                    StringBuilderToIntArray);
            }
        }

        internal static event Delegates.StringBuilderToIntArray_BeforeArgs _beforeStringBuilderToIntArray;
        internal static event Delegates.StringBuilderToIntArray_NormalArgs _afterStringBuilderToIntArray;

        private static void StringBuilderToIntArray(Action<TMP_Text, StringBuilder, int[]> orig, TMP_Text self,
            StringBuilder text, int[] chars)
        {
            Delegates.Params_StringBuilderToIntArray @params = new()
            {
                self = self, text = text, chars = chars
            };
            _beforeStringBuilderToIntArray?.Invoke(@params);
            self = @params.self;
            text = @params.text;
            chars = @params.chars;
            orig(self, text, chars);
            if (_afterStringBuilderToIntArray != null) _afterStringBuilderToIntArray.Invoke(@params);
        }

        internal static void HookAddFloatToCharArray()
        {
            if (!HookedList.Contains("AddFloatToCharArray"))
            {
                HookedList.Add("AddFloatToCharArray");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "AddFloatToCharArray"), AddFloatToCharArray);
            }
        }

        internal static event Delegates.AddFloatToCharArray_BeforeArgs _beforeAddFloatToCharArray;
        internal static event Delegates.AddFloatToCharArray_NormalArgs _afterAddFloatToCharArray;

        private static void AddFloatToCharArray(Action<TMP_Text, float, int, int> orig, TMP_Text self, float number,
            int index, int precision)
        {
            Delegates.Params_AddFloatToCharArray @params = new()
            {
                self = self, number = number, index = index, precision = precision
            };
            _beforeAddFloatToCharArray?.Invoke(@params);
            self = @params.self;
            number = @params.number;
            index = @params.index;
            precision = @params.precision;
            orig(self, number, index, precision);
            if (_afterAddFloatToCharArray != null) _afterAddFloatToCharArray.Invoke(@params);
        }

        internal static void HookAddIntToCharArray()
        {
            if (!HookedList.Contains("AddIntToCharArray"))
            {
                HookedList.Add("AddIntToCharArray");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "AddIntToCharArray"), AddIntToCharArray);
            }
        }

        internal static event Delegates.AddIntToCharArray_BeforeArgs _beforeAddIntToCharArray;
        internal static event Delegates.AddIntToCharArray_NormalArgs _afterAddIntToCharArray;

        private static void AddIntToCharArray(Action<TMP_Text, int, int, int> orig, TMP_Text self, int number,
            int index, int precision)
        {
            Delegates.Params_AddIntToCharArray @params = new()
            {
                self = self, number = number, index = index, precision = precision
            };
            _beforeAddIntToCharArray?.Invoke(@params);
            self = @params.self;
            number = @params.number;
            index = @params.index;
            precision = @params.precision;
            orig(self, number, index, precision);
            if (_afterAddIntToCharArray != null) _afterAddIntToCharArray.Invoke(@params);
        }

        internal static void HookSetArraySizes()
        {
            if (!HookedList.Contains("SetArraySizes"))
            {
                HookedList.Add("SetArraySizes");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetArraySizes"), SetArraySizes);
            }
        }

        internal static event Delegates.SetArraySizes_BeforeArgs _beforeSetArraySizes;
        internal static event Delegates.SetArraySizes_NormalArgs _afterSetArraySizes;

        private static int SetArraySizes(Func<TMP_Text, int[], int> orig, TMP_Text self, int[] chars)
        {
            Delegates.Params_SetArraySizes @params = new()
            {
                self = self, chars = chars
            };
            _beforeSetArraySizes?.Invoke(@params);
            self = @params.self;
            chars = @params.chars;
            var retVal = orig(self, chars);
            if (_afterSetArraySizes != null) retVal = _afterSetArraySizes.Invoke(@params);
            return retVal;
        }

        internal static void HookGenerateTextMesh()
        {
            if (!HookedList.Contains("GenerateTextMesh"))
            {
                HookedList.Add("GenerateTextMesh");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GenerateTextMesh"), GenerateTextMesh);
            }
        }

        internal static event Delegates.GenerateTextMesh_BeforeArgs _beforeGenerateTextMesh;
        internal static event Delegates.GenerateTextMesh_NormalArgs _afterGenerateTextMesh;

        private static void GenerateTextMesh(Action<TMP_Text> orig, TMP_Text self)
        {
            Delegates.Params_GenerateTextMesh @params = new()
            {
                self = self
            };
            _beforeGenerateTextMesh?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterGenerateTextMesh != null) _afterGenerateTextMesh.Invoke(@params);
        }

        internal static void HookGetPreferredValues()
        {
            if (!HookedList.Contains("GetPreferredValues"))
            {
                HookedList.Add("GetPreferredValues");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredValues"), GetPreferredValues);
            }
        }

        internal static event Delegates.GetPreferredValues_BeforeArgs _beforeGetPreferredValues;
        internal static event Delegates.GetPreferredValues_NormalArgs _afterGetPreferredValues;

        private static Vector2 GetPreferredValues(Func<TMP_Text, Vector2> orig, TMP_Text self)
        {
            Delegates.Params_GetPreferredValues @params = new()
            {
                self = self
            };
            _beforeGetPreferredValues?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetPreferredValues != null) retVal = _afterGetPreferredValues.Invoke(@params);
            return retVal;
        }

        internal static void HookGetPreferredValues_float_float()
        {
            if (!HookedList.Contains("GetPreferredValues_float_float"))
            {
                HookedList.Add("GetPreferredValues_float_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredValues_float_float"),
                    GetPreferredValues_float_float);
            }
        }

        internal static event Delegates.GetPreferredValues_float_float_BeforeArgs _beforeGetPreferredValues_float_float;
        internal static event Delegates.GetPreferredValues_float_float_NormalArgs _afterGetPreferredValues_float_float;

        private static Vector2 GetPreferredValues_float_float(Func<TMP_Text, float, float, Vector2> orig, TMP_Text self,
            float width, float height)
        {
            Delegates.Params_GetPreferredValues_float_float @params = new()
            {
                self = self, width = width, height = height
            };
            _beforeGetPreferredValues_float_float?.Invoke(@params);
            self = @params.self;
            width = @params.width;
            height = @params.height;
            var retVal = orig(self, width, height);
            if (_afterGetPreferredValues_float_float != null)
                retVal = _afterGetPreferredValues_float_float.Invoke(@params);
            return retVal;
        }

        internal static void HookGetPreferredValues_string()
        {
            if (!HookedList.Contains("GetPreferredValues_string"))
            {
                HookedList.Add("GetPreferredValues_string");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredValues_string"),
                    GetPreferredValues_string);
            }
        }

        internal static event Delegates.GetPreferredValues_string_BeforeArgs _beforeGetPreferredValues_string;
        internal static event Delegates.GetPreferredValues_string_NormalArgs _afterGetPreferredValues_string;

        private static Vector2 GetPreferredValues_string(Func<TMP_Text, string, Vector2> orig, TMP_Text self,
            string text)
        {
            Delegates.Params_GetPreferredValues_string @params = new()
            {
                self = self, text = text
            };
            _beforeGetPreferredValues_string?.Invoke(@params);
            self = @params.self;
            text = @params.text;
            var retVal = orig(self, text);
            if (_afterGetPreferredValues_string != null) retVal = _afterGetPreferredValues_string.Invoke(@params);
            return retVal;
        }

        internal static void HookGetPreferredValues_string_float_float()
        {
            if (!HookedList.Contains("GetPreferredValues_string_float_float"))
            {
                HookedList.Add("GetPreferredValues_string_float_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredValues_string_float_float"),
                    GetPreferredValues_string_float_float);
            }
        }

        internal static event Delegates.GetPreferredValues_string_float_float_BeforeArgs
            _beforeGetPreferredValues_string_float_float;

        internal static event Delegates.GetPreferredValues_string_float_float_NormalArgs
            _afterGetPreferredValues_string_float_float;

        private static Vector2 GetPreferredValues_string_float_float(Func<TMP_Text, string, float, float, Vector2> orig,
            TMP_Text self, string text, float width, float height)
        {
            Delegates.Params_GetPreferredValues_string_float_float @params = new()
            {
                self = self, text = text, width = width, height = height
            };
            _beforeGetPreferredValues_string_float_float?.Invoke(@params);
            self = @params.self;
            text = @params.text;
            width = @params.width;
            height = @params.height;
            var retVal = orig(self, text, width, height);
            if (_afterGetPreferredValues_string_float_float != null)
                retVal = _afterGetPreferredValues_string_float_float.Invoke(@params);
            return retVal;
        }

        internal static void HookGetPreferredWidth()
        {
            if (!HookedList.Contains("GetPreferredWidth"))
            {
                HookedList.Add("GetPreferredWidth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredWidth"), GetPreferredWidth);
            }
        }

        internal static event Delegates.GetPreferredWidth_BeforeArgs _beforeGetPreferredWidth;
        internal static event Delegates.GetPreferredWidth_NormalArgs _afterGetPreferredWidth;

        private static float GetPreferredWidth(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_GetPreferredWidth @params = new()
            {
                self = self
            };
            _beforeGetPreferredWidth?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetPreferredWidth != null) retVal = _afterGetPreferredWidth.Invoke(@params);
            return retVal;
        }

        internal static void HookGetPreferredWidth_Vector2()
        {
            if (!HookedList.Contains("GetPreferredWidth_Vector2"))
            {
                HookedList.Add("GetPreferredWidth_Vector2");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredWidth_Vector2"),
                    GetPreferredWidth_Vector2);
            }
        }

        internal static event Delegates.GetPreferredWidth_Vector2_BeforeArgs _beforeGetPreferredWidth_Vector2;
        internal static event Delegates.GetPreferredWidth_Vector2_NormalArgs _afterGetPreferredWidth_Vector2;

        private static float GetPreferredWidth_Vector2(Func<TMP_Text, Vector2, float> orig, TMP_Text self,
            Vector2 margin)
        {
            Delegates.Params_GetPreferredWidth_Vector2 @params = new()
            {
                self = self, margin = margin
            };
            _beforeGetPreferredWidth_Vector2?.Invoke(@params);
            self = @params.self;
            margin = @params.margin;
            var retVal = orig(self, margin);
            if (_afterGetPreferredWidth_Vector2 != null) retVal = _afterGetPreferredWidth_Vector2.Invoke(@params);
            return retVal;
        }

        internal static void HookGetPreferredHeight()
        {
            if (!HookedList.Contains("GetPreferredHeight"))
            {
                HookedList.Add("GetPreferredHeight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredHeight"), GetPreferredHeight);
            }
        }

        internal static event Delegates.GetPreferredHeight_BeforeArgs _beforeGetPreferredHeight;
        internal static event Delegates.GetPreferredHeight_NormalArgs _afterGetPreferredHeight;

        private static float GetPreferredHeight(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_GetPreferredHeight @params = new()
            {
                self = self
            };
            _beforeGetPreferredHeight?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetPreferredHeight != null) retVal = _afterGetPreferredHeight.Invoke(@params);
            return retVal;
        }

        internal static void HookGetPreferredHeight_Vector2()
        {
            if (!HookedList.Contains("GetPreferredHeight_Vector2"))
            {
                HookedList.Add("GetPreferredHeight_Vector2");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredHeight_Vector2"),
                    GetPreferredHeight_Vector2);
            }
        }

        internal static event Delegates.GetPreferredHeight_Vector2_BeforeArgs _beforeGetPreferredHeight_Vector2;
        internal static event Delegates.GetPreferredHeight_Vector2_NormalArgs _afterGetPreferredHeight_Vector2;

        private static float GetPreferredHeight_Vector2(Func<TMP_Text, Vector2, float> orig, TMP_Text self,
            Vector2 margin)
        {
            Delegates.Params_GetPreferredHeight_Vector2 @params = new()
            {
                self = self, margin = margin
            };
            _beforeGetPreferredHeight_Vector2?.Invoke(@params);
            self = @params.self;
            margin = @params.margin;
            var retVal = orig(self, margin);
            if (_afterGetPreferredHeight_Vector2 != null) retVal = _afterGetPreferredHeight_Vector2.Invoke(@params);
            return retVal;
        }

        internal static void HookGetRenderedValues()
        {
            if (!HookedList.Contains("GetRenderedValues"))
            {
                HookedList.Add("GetRenderedValues");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetRenderedValues"), GetRenderedValues);
            }
        }

        internal static event Delegates.GetRenderedValues_BeforeArgs _beforeGetRenderedValues;
        internal static event Delegates.GetRenderedValues_NormalArgs _afterGetRenderedValues;

        private static Vector2 GetRenderedValues(Func<TMP_Text, Vector2> orig, TMP_Text self)
        {
            Delegates.Params_GetRenderedValues @params = new()
            {
                self = self
            };
            _beforeGetRenderedValues?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetRenderedValues != null) retVal = _afterGetRenderedValues.Invoke(@params);
            return retVal;
        }

        internal static void HookGetRenderedWidth()
        {
            if (!HookedList.Contains("GetRenderedWidth"))
            {
                HookedList.Add("GetRenderedWidth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetRenderedWidth"), GetRenderedWidth);
            }
        }

        internal static event Delegates.GetRenderedWidth_BeforeArgs _beforeGetRenderedWidth;
        internal static event Delegates.GetRenderedWidth_NormalArgs _afterGetRenderedWidth;

        private static float GetRenderedWidth(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_GetRenderedWidth @params = new()
            {
                self = self
            };
            _beforeGetRenderedWidth?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetRenderedWidth != null) retVal = _afterGetRenderedWidth.Invoke(@params);
            return retVal;
        }

        internal static void HookGetRenderedHeight()
        {
            if (!HookedList.Contains("GetRenderedHeight"))
            {
                HookedList.Add("GetRenderedHeight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetRenderedHeight"), GetRenderedHeight);
            }
        }

        internal static event Delegates.GetRenderedHeight_BeforeArgs _beforeGetRenderedHeight;
        internal static event Delegates.GetRenderedHeight_NormalArgs _afterGetRenderedHeight;

        private static float GetRenderedHeight(Func<TMP_Text, float> orig, TMP_Text self)
        {
            Delegates.Params_GetRenderedHeight @params = new()
            {
                self = self
            };
            _beforeGetRenderedHeight?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetRenderedHeight != null) retVal = _afterGetRenderedHeight.Invoke(@params);
            return retVal;
        }

        internal static void HookCalculatePreferredValues()
        {
            if (!HookedList.Contains("CalculatePreferredValues"))
            {
                HookedList.Add("CalculatePreferredValues");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "CalculatePreferredValues"),
                    CalculatePreferredValues);
            }
        }

        internal static event Delegates.CalculatePreferredValues_BeforeArgs _beforeCalculatePreferredValues;
        internal static event Delegates.CalculatePreferredValues_NormalArgs _afterCalculatePreferredValues;

        private static Vector2 CalculatePreferredValues(Func<TMP_Text, float, Vector2, Vector2> orig, TMP_Text self,
            float defaultFontSize, Vector2 marginSize)
        {
            Delegates.Params_CalculatePreferredValues @params = new()
            {
                self = self, defaultFontSize = defaultFontSize, marginSize = marginSize
            };
            _beforeCalculatePreferredValues?.Invoke(@params);
            self = @params.self;
            defaultFontSize = @params.defaultFontSize;
            marginSize = @params.marginSize;
            var retVal = orig(self, defaultFontSize, marginSize);
            if (_afterCalculatePreferredValues != null) retVal = _afterCalculatePreferredValues.Invoke(@params);
            return retVal;
        }

        internal static void HookGetCompoundBounds()
        {
            if (!HookedList.Contains("GetCompoundBounds"))
            {
                HookedList.Add("GetCompoundBounds");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetCompoundBounds"), GetCompoundBounds);
            }
        }

        internal static event Delegates.GetCompoundBounds_BeforeArgs _beforeGetCompoundBounds;
        internal static event Delegates.GetCompoundBounds_NormalArgs _afterGetCompoundBounds;

        private static Bounds GetCompoundBounds(Func<TMP_Text, Bounds> orig, TMP_Text self)
        {
            Delegates.Params_GetCompoundBounds @params = new()
            {
                self = self
            };
            _beforeGetCompoundBounds?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetCompoundBounds != null) retVal = _afterGetCompoundBounds.Invoke(@params);
            return retVal;
        }

        internal static void HookGetTextBounds()
        {
            if (!HookedList.Contains("GetTextBounds"))
            {
                HookedList.Add("GetTextBounds");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetTextBounds"), GetTextBounds);
            }
        }

        internal static event Delegates.GetTextBounds_BeforeArgs _beforeGetTextBounds;
        internal static event Delegates.GetTextBounds_NormalArgs _afterGetTextBounds;

        private static Bounds GetTextBounds(Func<TMP_Text, Bounds> orig, TMP_Text self)
        {
            Delegates.Params_GetTextBounds @params = new()
            {
                self = self
            };
            _beforeGetTextBounds?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetTextBounds != null) retVal = _afterGetTextBounds.Invoke(@params);
            return retVal;
        }

        internal static void HookAdjustLineOffset()
        {
            if (!HookedList.Contains("AdjustLineOffset"))
            {
                HookedList.Add("AdjustLineOffset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "AdjustLineOffset"), AdjustLineOffset);
            }
        }

        internal static event Delegates.AdjustLineOffset_BeforeArgs _beforeAdjustLineOffset;
        internal static event Delegates.AdjustLineOffset_NormalArgs _afterAdjustLineOffset;

        private static void AdjustLineOffset(Action<TMP_Text, int, int, float> orig, TMP_Text self, int startIndex,
            int endIndex, float offset)
        {
            Delegates.Params_AdjustLineOffset @params = new()
            {
                self = self, startIndex = startIndex, endIndex = endIndex, offset = offset
            };
            _beforeAdjustLineOffset?.Invoke(@params);
            self = @params.self;
            startIndex = @params.startIndex;
            endIndex = @params.endIndex;
            offset = @params.offset;
            orig(self, startIndex, endIndex, offset);
            if (_afterAdjustLineOffset != null) _afterAdjustLineOffset.Invoke(@params);
        }

        internal static void HookResizeLineExtents()
        {
            if (!HookedList.Contains("ResizeLineExtents"))
            {
                HookedList.Add("ResizeLineExtents");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "ResizeLineExtents"), ResizeLineExtents);
            }
        }

        internal static event Delegates.ResizeLineExtents_BeforeArgs _beforeResizeLineExtents;
        internal static event Delegates.ResizeLineExtents_NormalArgs _afterResizeLineExtents;

        private static void ResizeLineExtents(Action<TMP_Text, int> orig, TMP_Text self, int size)
        {
            Delegates.Params_ResizeLineExtents @params = new()
            {
                self = self, size = size
            };
            _beforeResizeLineExtents?.Invoke(@params);
            self = @params.self;
            size = @params.size;
            orig(self, size);
            if (_afterResizeLineExtents != null) _afterResizeLineExtents.Invoke(@params);
        }

        internal static void HookGetTextInfo()
        {
            if (!HookedList.Contains("GetTextInfo"))
            {
                HookedList.Add("GetTextInfo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetTextInfo"), GetTextInfo);
            }
        }

        internal static event Delegates.GetTextInfo_BeforeArgs _beforeGetTextInfo;
        internal static event Delegates.GetTextInfo_NormalArgs _afterGetTextInfo;

        private static TMP_TextInfo GetTextInfo(Func<TMP_Text, string, TMP_TextInfo> orig, TMP_Text self, string text)
        {
            Delegates.Params_GetTextInfo @params = new()
            {
                self = self, text = text
            };
            _beforeGetTextInfo?.Invoke(@params);
            self = @params.self;
            text = @params.text;
            var retVal = orig(self, text);
            if (_afterGetTextInfo != null) retVal = _afterGetTextInfo.Invoke(@params);
            return retVal;
        }

        internal static void HookComputeMarginSize()
        {
            if (!HookedList.Contains("ComputeMarginSize"))
            {
                HookedList.Add("ComputeMarginSize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "ComputeMarginSize"), ComputeMarginSize);
            }
        }

        internal static event Delegates.ComputeMarginSize_BeforeArgs _beforeComputeMarginSize;
        internal static event Delegates.ComputeMarginSize_NormalArgs _afterComputeMarginSize;

        private static void ComputeMarginSize(Action<TMP_Text> orig, TMP_Text self)
        {
            Delegates.Params_ComputeMarginSize @params = new()
            {
                self = self
            };
            _beforeComputeMarginSize?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterComputeMarginSize != null) _afterComputeMarginSize.Invoke(@params);
        }

        internal static void HookGetArraySizes()
        {
            if (!HookedList.Contains("GetArraySizes"))
            {
                HookedList.Add("GetArraySizes");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetArraySizes"), GetArraySizes);
            }
        }

        internal static event Delegates.GetArraySizes_BeforeArgs _beforeGetArraySizes;
        internal static event Delegates.GetArraySizes_NormalArgs _afterGetArraySizes;

        private static int GetArraySizes(Func<TMP_Text, int[], int> orig, TMP_Text self, int[] chars)
        {
            Delegates.Params_GetArraySizes @params = new()
            {
                self = self, chars = chars
            };
            _beforeGetArraySizes?.Invoke(@params);
            self = @params.self;
            chars = @params.chars;
            var retVal = orig(self, chars);
            if (_afterGetArraySizes != null) retVal = _afterGetArraySizes.Invoke(@params);
            return retVal;
        }

        internal static void HookSaveWordWrappingState()
        {
            if (!HookedList.Contains("SaveWordWrappingState"))
            {
                HookedList.Add("SaveWordWrappingState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SaveWordWrappingState"),
                    SaveWordWrappingState);
            }
        }

        internal static event Delegates.SaveWordWrappingState_BeforeArgs _beforeSaveWordWrappingState;
        internal static event Delegates.SaveWordWrappingState_NormalArgs _afterSaveWordWrappingState;

        private static void SaveWordWrappingState(Action<TMP_Text, WordWrapState, int, int> orig, TMP_Text self,
            WordWrapState state, int index, int count)
        {
            Delegates.Params_SaveWordWrappingState @params = new()
            {
                self = self, state = state, index = index, count = count
            };
            _beforeSaveWordWrappingState?.Invoke(@params);
            self = @params.self;
            state = @params.state;
            index = @params.index;
            count = @params.count;
            orig(self, state, index, count);
            if (_afterSaveWordWrappingState != null) _afterSaveWordWrappingState.Invoke(@params);
        }

        internal static void HookRestoreWordWrappingState()
        {
            if (!HookedList.Contains("RestoreWordWrappingState"))
            {
                HookedList.Add("RestoreWordWrappingState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "RestoreWordWrappingState"),
                    RestoreWordWrappingState);
            }
        }

        internal static event Delegates.RestoreWordWrappingState_BeforeArgs _beforeRestoreWordWrappingState;
        internal static event Delegates.RestoreWordWrappingState_NormalArgs _afterRestoreWordWrappingState;

        private static int RestoreWordWrappingState(Func<TMP_Text, WordWrapState, int> orig, TMP_Text self,
            WordWrapState state)
        {
            Delegates.Params_RestoreWordWrappingState @params = new()
            {
                self = self, state = state
            };
            _beforeRestoreWordWrappingState?.Invoke(@params);
            self = @params.self;
            state = @params.state;
            var retVal = orig(self, state);
            if (_afterRestoreWordWrappingState != null) retVal = _afterRestoreWordWrappingState.Invoke(@params);
            return retVal;
        }

        internal static void HookSaveGlyphVertexInfo()
        {
            if (!HookedList.Contains("SaveGlyphVertexInfo"))
            {
                HookedList.Add("SaveGlyphVertexInfo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SaveGlyphVertexInfo"), SaveGlyphVertexInfo);
            }
        }

        internal static event Delegates.SaveGlyphVertexInfo_BeforeArgs _beforeSaveGlyphVertexInfo;
        internal static event Delegates.SaveGlyphVertexInfo_NormalArgs _afterSaveGlyphVertexInfo;

        private static void SaveGlyphVertexInfo(Action<TMP_Text, float, float, Color32> orig, TMP_Text self,
            float padding, float style_padding, Color32 vertexColor)
        {
            Delegates.Params_SaveGlyphVertexInfo @params = new()
            {
                self = self, padding = padding, style_padding = style_padding, vertexColor = vertexColor
            };
            _beforeSaveGlyphVertexInfo?.Invoke(@params);
            self = @params.self;
            padding = @params.padding;
            style_padding = @params.style_padding;
            vertexColor = @params.vertexColor;
            orig(self, padding, style_padding, vertexColor);
            if (_afterSaveGlyphVertexInfo != null) _afterSaveGlyphVertexInfo.Invoke(@params);
        }

        internal static void HookSaveSpriteVertexInfo()
        {
            if (!HookedList.Contains("SaveSpriteVertexInfo"))
            {
                HookedList.Add("SaveSpriteVertexInfo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SaveSpriteVertexInfo"),
                    SaveSpriteVertexInfo);
            }
        }

        internal static event Delegates.SaveSpriteVertexInfo_BeforeArgs _beforeSaveSpriteVertexInfo;
        internal static event Delegates.SaveSpriteVertexInfo_NormalArgs _afterSaveSpriteVertexInfo;

        private static void SaveSpriteVertexInfo(Action<TMP_Text, Color32> orig, TMP_Text self, Color32 vertexColor)
        {
            Delegates.Params_SaveSpriteVertexInfo @params = new()
            {
                self = self, vertexColor = vertexColor
            };
            _beforeSaveSpriteVertexInfo?.Invoke(@params);
            self = @params.self;
            vertexColor = @params.vertexColor;
            orig(self, vertexColor);
            if (_afterSaveSpriteVertexInfo != null) _afterSaveSpriteVertexInfo.Invoke(@params);
        }

        internal static void HookFillCharacterVertexBuffers_int_int()
        {
            if (!HookedList.Contains("FillCharacterVertexBuffers_int_int"))
            {
                HookedList.Add("FillCharacterVertexBuffers_int_int");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "FillCharacterVertexBuffers_int_int"),
                    FillCharacterVertexBuffers_int_int);
            }
        }

        internal static event Delegates.FillCharacterVertexBuffers_int_int_BeforeArgs
            _beforeFillCharacterVertexBuffers_int_int;

        internal static event Delegates.FillCharacterVertexBuffers_int_int_NormalArgs
            _afterFillCharacterVertexBuffers_int_int;

        private static void FillCharacterVertexBuffers_int_int(Action<TMP_Text, int, int> orig, TMP_Text self, int i,
            int index_X4)
        {
            Delegates.Params_FillCharacterVertexBuffers_int_int @params = new()
            {
                self = self, i = i, index_X4 = index_X4
            };
            _beforeFillCharacterVertexBuffers_int_int?.Invoke(@params);
            self = @params.self;
            i = @params.i;
            index_X4 = @params.index_X4;
            orig(self, i, index_X4);
            if (_afterFillCharacterVertexBuffers_int_int != null)
                _afterFillCharacterVertexBuffers_int_int.Invoke(@params);
        }

        internal static void HookFillCharacterVertexBuffers_int_int_bool()
        {
            if (!HookedList.Contains("FillCharacterVertexBuffers_int_int_bool"))
            {
                HookedList.Add("FillCharacterVertexBuffers_int_int_bool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "FillCharacterVertexBuffers_int_int_bool"),
                    FillCharacterVertexBuffers_int_int_bool);
            }
        }

        internal static event Delegates.FillCharacterVertexBuffers_int_int_bool_BeforeArgs
            _beforeFillCharacterVertexBuffers_int_int_bool;

        internal static event Delegates.FillCharacterVertexBuffers_int_int_bool_NormalArgs
            _afterFillCharacterVertexBuffers_int_int_bool;

        private static void FillCharacterVertexBuffers_int_int_bool(Action<TMP_Text, int, int, bool> orig,
            TMP_Text self, int i, int index_X4, bool isVolumetric)
        {
            Delegates.Params_FillCharacterVertexBuffers_int_int_bool @params = new()
            {
                self = self, i = i, index_X4 = index_X4, isVolumetric = isVolumetric
            };
            _beforeFillCharacterVertexBuffers_int_int_bool?.Invoke(@params);
            self = @params.self;
            i = @params.i;
            index_X4 = @params.index_X4;
            isVolumetric = @params.isVolumetric;
            orig(self, i, index_X4, isVolumetric);
            if (_afterFillCharacterVertexBuffers_int_int_bool != null)
                _afterFillCharacterVertexBuffers_int_int_bool.Invoke(@params);
        }

        internal static void HookFillSpriteVertexBuffers()
        {
            if (!HookedList.Contains("FillSpriteVertexBuffers"))
            {
                HookedList.Add("FillSpriteVertexBuffers");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "FillSpriteVertexBuffers"),
                    FillSpriteVertexBuffers);
            }
        }

        internal static event Delegates.FillSpriteVertexBuffers_BeforeArgs _beforeFillSpriteVertexBuffers;
        internal static event Delegates.FillSpriteVertexBuffers_NormalArgs _afterFillSpriteVertexBuffers;

        private static void FillSpriteVertexBuffers(Action<TMP_Text, int, int> orig, TMP_Text self, int i, int index_X4)
        {
            Delegates.Params_FillSpriteVertexBuffers @params = new()
            {
                self = self, i = i, index_X4 = index_X4
            };
            _beforeFillSpriteVertexBuffers?.Invoke(@params);
            self = @params.self;
            i = @params.i;
            index_X4 = @params.index_X4;
            orig(self, i, index_X4);
            if (_afterFillSpriteVertexBuffers != null) _afterFillSpriteVertexBuffers.Invoke(@params);
        }

        internal static void HookDrawUnderlineMesh()
        {
            if (!HookedList.Contains("DrawUnderlineMesh"))
            {
                HookedList.Add("DrawUnderlineMesh");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "DrawUnderlineMesh"), DrawUnderlineMesh);
            }
        }

        internal static event Delegates.DrawUnderlineMesh_BeforeArgs _beforeDrawUnderlineMesh;
        internal static event Delegates.DrawUnderlineMesh_NormalArgs _afterDrawUnderlineMesh;

        private static void DrawUnderlineMesh(
            Action<TMP_Text, Vector3, Vector3, int, float, float, float, float, Color32> orig, TMP_Text self,
            Vector3 start, Vector3 end, int index, float startScale, float endScale, float maxScale, float sdfScale,
            Color32 underlineColor)
        {
            Delegates.Params_DrawUnderlineMesh @params = new()
            {
                self = self, start = start, end = end, index = index, startScale = startScale, endScale = endScale,
                maxScale = maxScale, sdfScale = sdfScale, underlineColor = underlineColor
            };
            _beforeDrawUnderlineMesh?.Invoke(@params);
            self = @params.self;
            start = @params.start;
            end = @params.end;
            index = @params.index;
            startScale = @params.startScale;
            endScale = @params.endScale;
            maxScale = @params.maxScale;
            sdfScale = @params.sdfScale;
            underlineColor = @params.underlineColor;
            orig(self, start, end, index, startScale, endScale, maxScale, sdfScale, underlineColor);
            if (_afterDrawUnderlineMesh != null) _afterDrawUnderlineMesh.Invoke(@params);
        }

        internal static void HookGetSpecialCharacters()
        {
            if (!HookedList.Contains("GetSpecialCharacters"))
            {
                HookedList.Add("GetSpecialCharacters");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetSpecialCharacters"),
                    GetSpecialCharacters);
            }
        }

        internal static event Delegates.GetSpecialCharacters_BeforeArgs _beforeGetSpecialCharacters;
        internal static event Delegates.GetSpecialCharacters_NormalArgs _afterGetSpecialCharacters;

        private static void GetSpecialCharacters(Action<TMP_Text, TMP_FontAsset> orig, TMP_Text self,
            TMP_FontAsset fontAsset)
        {
            Delegates.Params_GetSpecialCharacters @params = new()
            {
                self = self, fontAsset = fontAsset
            };
            _beforeGetSpecialCharacters?.Invoke(@params);
            self = @params.self;
            fontAsset = @params.fontAsset;
            orig(self, fontAsset);
            if (_afterGetSpecialCharacters != null) _afterGetSpecialCharacters.Invoke(@params);
        }

        internal static void HookGetFontAssetForWeight()
        {
            if (!HookedList.Contains("GetFontAssetForWeight"))
            {
                HookedList.Add("GetFontAssetForWeight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetFontAssetForWeight"),
                    GetFontAssetForWeight);
            }
        }

        internal static event Delegates.GetFontAssetForWeight_BeforeArgs _beforeGetFontAssetForWeight;
        internal static event Delegates.GetFontAssetForWeight_NormalArgs _afterGetFontAssetForWeight;

        private static TMP_FontAsset GetFontAssetForWeight(Func<TMP_Text, int, TMP_FontAsset> orig, TMP_Text self,
            int fontWeight)
        {
            Delegates.Params_GetFontAssetForWeight @params = new()
            {
                self = self, fontWeight = fontWeight
            };
            _beforeGetFontAssetForWeight?.Invoke(@params);
            self = @params.self;
            fontWeight = @params.fontWeight;
            var retVal = orig(self, fontWeight);
            if (_afterGetFontAssetForWeight != null) retVal = _afterGetFontAssetForWeight.Invoke(@params);
            return retVal;
        }

        internal static void HookSetActiveSubMeshes()
        {
            if (!HookedList.Contains("SetActiveSubMeshes"))
            {
                HookedList.Add("SetActiveSubMeshes");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetActiveSubMeshes"), SetActiveSubMeshes);
            }
        }

        internal static event Delegates.SetActiveSubMeshes_BeforeArgs _beforeSetActiveSubMeshes;
        internal static event Delegates.SetActiveSubMeshes_NormalArgs _afterSetActiveSubMeshes;

        private static void SetActiveSubMeshes(Action<TMP_Text, bool> orig, TMP_Text self, bool state)
        {
            Delegates.Params_SetActiveSubMeshes @params = new()
            {
                self = self, state = state
            };
            _beforeSetActiveSubMeshes?.Invoke(@params);
            self = @params.self;
            state = @params.state;
            orig(self, state);
            if (_afterSetActiveSubMeshes != null) _afterSetActiveSubMeshes.Invoke(@params);
        }

        internal static void HookPackUV_float_float_float()
        {
            if (!HookedList.Contains("PackUV_float_float_float"))
            {
                HookedList.Add("PackUV_float_float_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "PackUV_float_float_float"),
                    PackUV_float_float_float);
            }
        }

        internal static event Delegates.PackUV_float_float_float_BeforeArgs _beforePackUV_float_float_float;
        internal static event Delegates.PackUV_float_float_float_NormalArgs _afterPackUV_float_float_float;

        private static Vector2 PackUV_float_float_float(Func<TMP_Text, float, float, float, Vector2> orig,
            TMP_Text self, float x, float y, float scale)
        {
            Delegates.Params_PackUV_float_float_float @params = new()
            {
                self = self, x = x, y = y, scale = scale
            };
            _beforePackUV_float_float_float?.Invoke(@params);
            self = @params.self;
            x = @params.x;
            y = @params.y;
            scale = @params.scale;
            var retVal = orig(self, x, y, scale);
            if (_afterPackUV_float_float_float != null) retVal = _afterPackUV_float_float_float.Invoke(@params);
            return retVal;
        }

        internal static void HookPackUV_float_float()
        {
            if (!HookedList.Contains("PackUV_float_float"))
            {
                HookedList.Add("PackUV_float_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "PackUV_float_float"), PackUV_float_float);
            }
        }

        internal static event Delegates.PackUV_float_float_BeforeArgs _beforePackUV_float_float;
        internal static event Delegates.PackUV_float_float_NormalArgs _afterPackUV_float_float;

        private static float PackUV_float_float(Func<TMP_Text, float, float, float> orig, TMP_Text self, float x,
            float y)
        {
            Delegates.Params_PackUV_float_float @params = new()
            {
                self = self, x = x, y = y
            };
            _beforePackUV_float_float?.Invoke(@params);
            self = @params.self;
            x = @params.x;
            y = @params.y;
            var retVal = orig(self, x, y);
            if (_afterPackUV_float_float != null) retVal = _afterPackUV_float_float.Invoke(@params);
            return retVal;
        }

        internal static void HookHexToInt()
        {
            if (!HookedList.Contains("HexToInt"))
            {
                HookedList.Add("HexToInt");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "HexToInt"), HexToInt);
            }
        }

        internal static event Delegates.HexToInt_BeforeArgs _beforeHexToInt;
        internal static event Delegates.HexToInt_NormalArgs _afterHexToInt;

        private static int HexToInt(Func<TMP_Text, char, int> orig, TMP_Text self, char hex)
        {
            Delegates.Params_HexToInt @params = new()
            {
                self = self, hex = hex
            };
            _beforeHexToInt?.Invoke(@params);
            self = @params.self;
            hex = @params.hex;
            var retVal = orig(self, hex);
            if (_afterHexToInt != null) retVal = _afterHexToInt.Invoke(@params);
            return retVal;
        }

        internal static void HookGetUTF16()
        {
            if (!HookedList.Contains("GetUTF16"))
            {
                HookedList.Add("GetUTF16");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetUTF16"), GetUTF16);
            }
        }

        internal static event Delegates.GetUTF16_BeforeArgs _beforeGetUTF16;
        internal static event Delegates.GetUTF16_NormalArgs _afterGetUTF16;

        private static int GetUTF16(Func<TMP_Text, int, int> orig, TMP_Text self, int i)
        {
            Delegates.Params_GetUTF16 @params = new()
            {
                self = self, i = i
            };
            _beforeGetUTF16?.Invoke(@params);
            self = @params.self;
            i = @params.i;
            var retVal = orig(self, i);
            if (_afterGetUTF16 != null) retVal = _afterGetUTF16.Invoke(@params);
            return retVal;
        }

        internal static void HookGetUTF32()
        {
            if (!HookedList.Contains("GetUTF32"))
            {
                HookedList.Add("GetUTF32");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetUTF32"), GetUTF32);
            }
        }

        internal static event Delegates.GetUTF32_BeforeArgs _beforeGetUTF32;
        internal static event Delegates.GetUTF32_NormalArgs _afterGetUTF32;

        private static int GetUTF32(Func<TMP_Text, int, int> orig, TMP_Text self, int i)
        {
            Delegates.Params_GetUTF32 @params = new()
            {
                self = self, i = i
            };
            _beforeGetUTF32?.Invoke(@params);
            self = @params.self;
            i = @params.i;
            var retVal = orig(self, i);
            if (_afterGetUTF32 != null) retVal = _afterGetUTF32.Invoke(@params);
            return retVal;
        }

        internal static void HookHexCharsToColor_Array_int()
        {
            if (!HookedList.Contains("HexCharsToColor_Array_int"))
            {
                HookedList.Add("HexCharsToColor_Array_int");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "HexCharsToColor_Array_int"),
                    HexCharsToColor_Array_int);
            }
        }

        internal static event Delegates.HexCharsToColor_Array_int_BeforeArgs _beforeHexCharsToColor_Array_int;
        internal static event Delegates.HexCharsToColor_Array_int_NormalArgs _afterHexCharsToColor_Array_int;

        private static Color32 HexCharsToColor_Array_int(Func<TMP_Text, char[], int, Color32> orig, TMP_Text self,
            char[] hexChars, int tagCount)
        {
            Delegates.Params_HexCharsToColor_Array_int @params = new()
            {
                self = self, hexChars = hexChars, tagCount = tagCount
            };
            _beforeHexCharsToColor_Array_int?.Invoke(@params);
            self = @params.self;
            hexChars = @params.hexChars;
            tagCount = @params.tagCount;
            var retVal = orig(self, hexChars, tagCount);
            if (_afterHexCharsToColor_Array_int != null) retVal = _afterHexCharsToColor_Array_int.Invoke(@params);
            return retVal;
        }

        internal static void HookHexCharsToColor_Array_int_int()
        {
            if (!HookedList.Contains("HexCharsToColor_Array_int_int"))
            {
                HookedList.Add("HexCharsToColor_Array_int_int");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "HexCharsToColor_Array_int_int"),
                    HexCharsToColor_Array_int_int);
            }
        }

        internal static event Delegates.HexCharsToColor_Array_int_int_BeforeArgs _beforeHexCharsToColor_Array_int_int;
        internal static event Delegates.HexCharsToColor_Array_int_int_NormalArgs _afterHexCharsToColor_Array_int_int;

        private static Color32 HexCharsToColor_Array_int_int(Func<TMP_Text, char[], int, int, Color32> orig,
            TMP_Text self, char[] hexChars, int startIndex, int length)
        {
            Delegates.Params_HexCharsToColor_Array_int_int @params = new()
            {
                self = self, hexChars = hexChars, startIndex = startIndex, length = length
            };
            _beforeHexCharsToColor_Array_int_int?.Invoke(@params);
            self = @params.self;
            hexChars = @params.hexChars;
            startIndex = @params.startIndex;
            length = @params.length;
            var retVal = orig(self, hexChars, startIndex, length);
            if (_afterHexCharsToColor_Array_int_int != null)
                retVal = _afterHexCharsToColor_Array_int_int.Invoke(@params);
            return retVal;
        }

        internal static void HookConvertToFloat()
        {
            if (!HookedList.Contains("ConvertToFloat"))
            {
                HookedList.Add("ConvertToFloat");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "ConvertToFloat"), ConvertToFloat);
            }
        }

        internal static event Delegates.ConvertToFloat_BeforeArgs _beforeConvertToFloat;
        internal static event Delegates.ConvertToFloat_NormalArgs _afterConvertToFloat;

        private static float ConvertToFloat(Func<TMP_Text, char[], int, int, int, float> orig, TMP_Text self,
            char[] chars, int startIndex, int length, int decimalPointIndex)
        {
            Delegates.Params_ConvertToFloat @params = new()
            {
                self = self, chars = chars, startIndex = startIndex, length = length,
                decimalPointIndex = decimalPointIndex
            };
            _beforeConvertToFloat?.Invoke(@params);
            self = @params.self;
            chars = @params.chars;
            startIndex = @params.startIndex;
            length = @params.length;
            decimalPointIndex = @params.decimalPointIndex;
            var retVal = orig(self, chars, startIndex, length, decimalPointIndex);
            if (_afterConvertToFloat != null) retVal = _afterConvertToFloat.Invoke(@params);
            return retVal;
        }

        internal static void HookValidateHtmlTag()
        {
            if (!HookedList.Contains("ValidateHtmlTag"))
            {
                HookedList.Add("ValidateHtmlTag");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "ValidateHtmlTag"), ValidateHtmlTag);
            }
        }

        internal static event Delegates.ValidateHtmlTag_BeforeArgs _beforeValidateHtmlTag;
        internal static event Delegates.ValidateHtmlTag_NormalArgs _afterValidateHtmlTag;

        private static bool ValidateHtmlTag(Func<TMP_Text, int[], int, int, bool> orig, TMP_Text self, int[] chars,
            int startIndex, int endIndex)
        {
            Delegates.Params_ValidateHtmlTag @params = new()
            {
                self = self, chars = chars, startIndex = startIndex, endIndex = endIndex
            };
            _beforeValidateHtmlTag?.Invoke(@params);
            self = @params.self;
            chars = @params.chars;
            startIndex = @params.startIndex;
            endIndex = @params.endIndex;
            var retVal = orig(self, chars, startIndex, endIndex);
            if (_afterValidateHtmlTag != null) retVal = _afterValidateHtmlTag.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AddFloatToCharArray_BeforeArgs(Params_AddFloatToCharArray args);

        public delegate void AddFloatToCharArray_NormalArgs(Params_AddFloatToCharArray args);

        public delegate void AddIntToCharArray_BeforeArgs(Params_AddIntToCharArray args);

        public delegate void AddIntToCharArray_NormalArgs(Params_AddIntToCharArray args);

        public delegate void AdjustLineOffset_BeforeArgs(Params_AdjustLineOffset args);

        public delegate void AdjustLineOffset_NormalArgs(Params_AdjustLineOffset args);

        public delegate void CalculatePreferredValues_BeforeArgs(Params_CalculatePreferredValues args);

        public delegate Vector2 CalculatePreferredValues_NormalArgs(Params_CalculatePreferredValues args);

        public delegate void ComputeMarginSize_BeforeArgs(Params_ComputeMarginSize args);

        public delegate void ComputeMarginSize_NormalArgs(Params_ComputeMarginSize args);

        public delegate void ConvertToFloat_BeforeArgs(Params_ConvertToFloat args);

        public delegate float ConvertToFloat_NormalArgs(Params_ConvertToFloat args);

        public delegate void CreateMaterialInstance_BeforeArgs(Params_CreateMaterialInstance args);

        public delegate Material CreateMaterialInstance_NormalArgs(Params_CreateMaterialInstance args);

        public delegate void CrossFadeAlpha_BeforeArgs(Params_CrossFadeAlpha args);

        public delegate void CrossFadeAlpha_NormalArgs(Params_CrossFadeAlpha args);

        public delegate void CrossFadeColor_BeforeArgs(Params_CrossFadeColor args);

        public delegate void CrossFadeColor_NormalArgs(Params_CrossFadeColor args);

        public delegate void DrawUnderlineMesh_BeforeArgs(Params_DrawUnderlineMesh args);

        public delegate void DrawUnderlineMesh_NormalArgs(Params_DrawUnderlineMesh args);

        public delegate void FillCharacterVertexBuffers_int_int_BeforeArgs(
            Params_FillCharacterVertexBuffers_int_int args);

        public delegate void FillCharacterVertexBuffers_int_int_bool_BeforeArgs(
            Params_FillCharacterVertexBuffers_int_int_bool args);

        public delegate void FillCharacterVertexBuffers_int_int_bool_NormalArgs(
            Params_FillCharacterVertexBuffers_int_int_bool args);

        public delegate void FillCharacterVertexBuffers_int_int_NormalArgs(
            Params_FillCharacterVertexBuffers_int_int args);

        public delegate void FillSpriteVertexBuffers_BeforeArgs(Params_FillSpriteVertexBuffers args);

        public delegate void FillSpriteVertexBuffers_NormalArgs(Params_FillSpriteVertexBuffers args);

        public delegate void ForceMeshUpdate_BeforeArgs(Params_ForceMeshUpdate args);

        public delegate void ForceMeshUpdate_bool_BeforeArgs(Params_ForceMeshUpdate_bool args);

        public delegate void ForceMeshUpdate_bool_NormalArgs(Params_ForceMeshUpdate_bool args);

        public delegate void ForceMeshUpdate_NormalArgs(Params_ForceMeshUpdate args);

        public delegate void GenerateTextMesh_BeforeArgs(Params_GenerateTextMesh args);

        public delegate void GenerateTextMesh_NormalArgs(Params_GenerateTextMesh args);

        public delegate void get_alignment_BeforeArgs(Params_get_alignment args);

        public delegate TextAlignmentOptions get_alignment_NormalArgs(Params_get_alignment args);

        public delegate void get_alpha_BeforeArgs(Params_get_alpha args);

        public delegate float get_alpha_NormalArgs(Params_get_alpha args);

        public delegate void get_autoSizeTextContainer_BeforeArgs(Params_get_autoSizeTextContainer args);

        public delegate bool get_autoSizeTextContainer_NormalArgs(Params_get_autoSizeTextContainer args);

        public delegate void get_bounds_BeforeArgs(Params_get_bounds args);

        public delegate Bounds get_bounds_NormalArgs(Params_get_bounds args);

        public delegate void get_characterSpacing_BeforeArgs(Params_get_characterSpacing args);

        public delegate float get_characterSpacing_NormalArgs(Params_get_characterSpacing args);

        public delegate void get_characterWidthAdjustment_BeforeArgs(Params_get_characterWidthAdjustment args);

        public delegate float get_characterWidthAdjustment_NormalArgs(Params_get_characterWidthAdjustment args);

        public delegate void get_color_BeforeArgs(Params_get_color args);

        public delegate Color get_color_NormalArgs(Params_get_color args);

        public delegate void get_colorGradient_BeforeArgs(Params_get_colorGradient args);

        public delegate VertexGradient get_colorGradient_NormalArgs(Params_get_colorGradient args);

        public delegate void get_colorGradientPreset_BeforeArgs(Params_get_colorGradientPreset args);

        public delegate TMP_ColorGradient get_colorGradientPreset_NormalArgs(Params_get_colorGradientPreset args);

        public delegate void get_enableAdaptiveJustification_BeforeArgs(Params_get_enableAdaptiveJustification args);

        public delegate bool get_enableAdaptiveJustification_NormalArgs(Params_get_enableAdaptiveJustification args);

        public delegate void get_enableAutoSizing_BeforeArgs(Params_get_enableAutoSizing args);

        public delegate bool get_enableAutoSizing_NormalArgs(Params_get_enableAutoSizing args);

        public delegate void get_enableCulling_BeforeArgs(Params_get_enableCulling args);

        public delegate bool get_enableCulling_NormalArgs(Params_get_enableCulling args);

        public delegate void get_enableKerning_BeforeArgs(Params_get_enableKerning args);

        public delegate bool get_enableKerning_NormalArgs(Params_get_enableKerning args);

        public delegate void get_enableVertexGradient_BeforeArgs(Params_get_enableVertexGradient args);

        public delegate bool get_enableVertexGradient_NormalArgs(Params_get_enableVertexGradient args);

        public delegate void get_enableWordWrapping_BeforeArgs(Params_get_enableWordWrapping args);

        public delegate bool get_enableWordWrapping_NormalArgs(Params_get_enableWordWrapping args);

        public delegate void get_extraPadding_BeforeArgs(Params_get_extraPadding args);

        public delegate bool get_extraPadding_NormalArgs(Params_get_extraPadding args);

        public delegate void get_faceColor_BeforeArgs(Params_get_faceColor args);

        public delegate Color32 get_faceColor_NormalArgs(Params_get_faceColor args);

        public delegate void get_flexibleHeight_BeforeArgs(Params_get_flexibleHeight args);

        public delegate float get_flexibleHeight_NormalArgs(Params_get_flexibleHeight args);

        public delegate void get_flexibleWidth_BeforeArgs(Params_get_flexibleWidth args);

        public delegate float get_flexibleWidth_NormalArgs(Params_get_flexibleWidth args);

        public delegate void get_font_BeforeArgs(Params_get_font args);

        public delegate TMP_FontAsset get_font_NormalArgs(Params_get_font args);

        public delegate void get_fontMaterial_BeforeArgs(Params_get_fontMaterial args);

        public delegate Material get_fontMaterial_NormalArgs(Params_get_fontMaterial args);

        public delegate void get_fontMaterials_BeforeArgs(Params_get_fontMaterials args);

        public delegate Material[] get_fontMaterials_NormalArgs(Params_get_fontMaterials args);

        public delegate void get_fontScale_BeforeArgs(Params_get_fontScale args);

        public delegate float get_fontScale_NormalArgs(Params_get_fontScale args);

        public delegate void get_fontSharedMaterial_BeforeArgs(Params_get_fontSharedMaterial args);

        public delegate Material get_fontSharedMaterial_NormalArgs(Params_get_fontSharedMaterial args);

        public delegate void get_fontSharedMaterials_BeforeArgs(Params_get_fontSharedMaterials args);

        public delegate Material[] get_fontSharedMaterials_NormalArgs(Params_get_fontSharedMaterials args);

        public delegate void get_fontSize_BeforeArgs(Params_get_fontSize args);

        public delegate float get_fontSize_NormalArgs(Params_get_fontSize args);

        public delegate void get_fontSizeMax_BeforeArgs(Params_get_fontSizeMax args);

        public delegate float get_fontSizeMax_NormalArgs(Params_get_fontSizeMax args);

        public delegate void get_fontSizeMin_BeforeArgs(Params_get_fontSizeMin args);

        public delegate float get_fontSizeMin_NormalArgs(Params_get_fontSizeMin args);

        public delegate void get_fontStyle_BeforeArgs(Params_get_fontStyle args);

        public delegate FontStyles get_fontStyle_NormalArgs(Params_get_fontStyle args);

        public delegate void get_fontWeight_BeforeArgs(Params_get_fontWeight args);

        public delegate int get_fontWeight_NormalArgs(Params_get_fontWeight args);

        public delegate void get_havePropertiesChanged_BeforeArgs(Params_get_havePropertiesChanged args);

        public delegate bool get_havePropertiesChanged_NormalArgs(Params_get_havePropertiesChanged args);

        public delegate void get_horizontalMapping_BeforeArgs(Params_get_horizontalMapping args);

        public delegate TextureMappingOptions get_horizontalMapping_NormalArgs(Params_get_horizontalMapping args);

        public delegate void get_ignoreVisibility_BeforeArgs(Params_get_ignoreVisibility args);

        public delegate bool get_ignoreVisibility_NormalArgs(Params_get_ignoreVisibility args);

        public delegate void get_isOrthographic_BeforeArgs(Params_get_isOrthographic args);

        public delegate bool get_isOrthographic_NormalArgs(Params_get_isOrthographic args);

        public delegate void get_isOverlay_BeforeArgs(Params_get_isOverlay args);

        public delegate bool get_isOverlay_NormalArgs(Params_get_isOverlay args);

        public delegate void get_isRightToLeftText_BeforeArgs(Params_get_isRightToLeftText args);

        public delegate bool get_isRightToLeftText_NormalArgs(Params_get_isRightToLeftText args);

        public delegate void get_isUsingBold_BeforeArgs(Params_get_isUsingBold args);

        public delegate bool get_isUsingBold_NormalArgs(Params_get_isUsingBold args);

        public delegate void get_isUsingLegacyAnimationComponent_BeforeArgs(
            Params_get_isUsingLegacyAnimationComponent args);

        public delegate bool get_isUsingLegacyAnimationComponent_NormalArgs(
            Params_get_isUsingLegacyAnimationComponent args);

        public delegate void get_isVolumetricText_BeforeArgs(Params_get_isVolumetricText args);

        public delegate bool get_isVolumetricText_NormalArgs(Params_get_isVolumetricText args);

        public delegate void get_layoutPriority_BeforeArgs(Params_get_layoutPriority args);

        public delegate int get_layoutPriority_NormalArgs(Params_get_layoutPriority args);

        public delegate void get_lineSpacing_BeforeArgs(Params_get_lineSpacing args);

        public delegate float get_lineSpacing_NormalArgs(Params_get_lineSpacing args);

        public delegate void get_margin_BeforeArgs(Params_get_margin args);

        public delegate Vector4 get_margin_NormalArgs(Params_get_margin args);

        public delegate void get_maxVisibleCharacters_BeforeArgs(Params_get_maxVisibleCharacters args);

        public delegate int get_maxVisibleCharacters_NormalArgs(Params_get_maxVisibleCharacters args);

        public delegate void get_maxVisibleLines_BeforeArgs(Params_get_maxVisibleLines args);

        public delegate int get_maxVisibleLines_NormalArgs(Params_get_maxVisibleLines args);

        public delegate void get_maxVisibleWords_BeforeArgs(Params_get_maxVisibleWords args);

        public delegate int get_maxVisibleWords_NormalArgs(Params_get_maxVisibleWords args);

        public delegate void get_mesh_BeforeArgs(Params_get_mesh args);

        public delegate Mesh get_mesh_NormalArgs(Params_get_mesh args);

        public delegate void get_minHeight_BeforeArgs(Params_get_minHeight args);

        public delegate float get_minHeight_NormalArgs(Params_get_minHeight args);

        public delegate void get_minWidth_BeforeArgs(Params_get_minWidth args);

        public delegate float get_minWidth_NormalArgs(Params_get_minWidth args);

        public delegate void get_outlineColor_BeforeArgs(Params_get_outlineColor args);

        public delegate Color32 get_outlineColor_NormalArgs(Params_get_outlineColor args);

        public delegate void get_outlineWidth_BeforeArgs(Params_get_outlineWidth args);

        public delegate float get_outlineWidth_NormalArgs(Params_get_outlineWidth args);

        public delegate void get_OverflowMode_BeforeArgs(Params_get_OverflowMode args);

        public delegate TextOverflowModes get_OverflowMode_NormalArgs(Params_get_OverflowMode args);

        public delegate void get_overrideColorTags_BeforeArgs(Params_get_overrideColorTags args);

        public delegate bool get_overrideColorTags_NormalArgs(Params_get_overrideColorTags args);

        public delegate void get_pageToDisplay_BeforeArgs(Params_get_pageToDisplay args);

        public delegate int get_pageToDisplay_NormalArgs(Params_get_pageToDisplay args);

        public delegate void get_paragraphSpacing_BeforeArgs(Params_get_paragraphSpacing args);

        public delegate float get_paragraphSpacing_NormalArgs(Params_get_paragraphSpacing args);

        public delegate void get_parseCtrlCharacters_BeforeArgs(Params_get_parseCtrlCharacters args);

        public delegate bool get_parseCtrlCharacters_NormalArgs(Params_get_parseCtrlCharacters args);

        public delegate void get_pixelsPerUnit_BeforeArgs(Params_get_pixelsPerUnit args);

        public delegate float get_pixelsPerUnit_NormalArgs(Params_get_pixelsPerUnit args);

        public delegate void get_preferredHeight_BeforeArgs(Params_get_preferredHeight args);

        public delegate float get_preferredHeight_NormalArgs(Params_get_preferredHeight args);

        public delegate void get_preferredWidth_BeforeArgs(Params_get_preferredWidth args);

        public delegate float get_preferredWidth_NormalArgs(Params_get_preferredWidth args);

        public delegate void get_rectTransform_BeforeArgs(Params_get_rectTransform args);

        public delegate RectTransform get_rectTransform_NormalArgs(Params_get_rectTransform args);

        public delegate void get_renderedHeight_BeforeArgs(Params_get_renderedHeight args);

        public delegate float get_renderedHeight_NormalArgs(Params_get_renderedHeight args);

        public delegate void get_renderedWidth_BeforeArgs(Params_get_renderedWidth args);

        public delegate float get_renderedWidth_NormalArgs(Params_get_renderedWidth args);

        public delegate void get_renderMode_BeforeArgs(Params_get_renderMode args);

        public delegate TextRenderFlags get_renderMode_NormalArgs(Params_get_renderMode args);

        public delegate void get_richText_BeforeArgs(Params_get_richText args);

        public delegate bool get_richText_NormalArgs(Params_get_richText args);

        public delegate void get_spriteAsset_BeforeArgs(Params_get_spriteAsset args);

        public delegate TMP_SpriteAsset get_spriteAsset_NormalArgs(Params_get_spriteAsset args);

        public delegate void get_text_BeforeArgs(Params_get_text args);

        public delegate string get_text_NormalArgs(Params_get_text args);

        public delegate void get_textBounds_BeforeArgs(Params_get_textBounds args);

        public delegate Bounds get_textBounds_NormalArgs(Params_get_textBounds args);

        public delegate void get_textInfo_BeforeArgs(Params_get_textInfo args);

        public delegate TMP_TextInfo get_textInfo_NormalArgs(Params_get_textInfo args);

        public delegate void get_tintAllSprites_BeforeArgs(Params_get_tintAllSprites args);

        public delegate bool get_tintAllSprites_NormalArgs(Params_get_tintAllSprites args);

        public delegate void get_transform_BeforeArgs(Params_get_transform args);

        public delegate Transform get_transform_NormalArgs(Params_get_transform args);

        public delegate void get_useMaxVisibleDescender_BeforeArgs(Params_get_useMaxVisibleDescender args);

        public delegate bool get_useMaxVisibleDescender_NormalArgs(Params_get_useMaxVisibleDescender args);

        public delegate void get_verticalMapping_BeforeArgs(Params_get_verticalMapping args);

        public delegate TextureMappingOptions get_verticalMapping_NormalArgs(Params_get_verticalMapping args);

        public delegate void get_wordWrappingRatios_BeforeArgs(Params_get_wordWrappingRatios args);

        public delegate float get_wordWrappingRatios_NormalArgs(Params_get_wordWrappingRatios args);

        public delegate void GetArraySizes_BeforeArgs(Params_GetArraySizes args);

        public delegate int GetArraySizes_NormalArgs(Params_GetArraySizes args);

        public delegate void GetCompoundBounds_BeforeArgs(Params_GetCompoundBounds args);

        public delegate Bounds GetCompoundBounds_NormalArgs(Params_GetCompoundBounds args);

        public delegate void GetFontAssetForWeight_BeforeArgs(Params_GetFontAssetForWeight args);

        public delegate TMP_FontAsset GetFontAssetForWeight_NormalArgs(Params_GetFontAssetForWeight args);

        public delegate void GetMaterial_BeforeArgs(Params_GetMaterial args);

        public delegate Material GetMaterial_NormalArgs(Params_GetMaterial args);

        public delegate void GetMaterials_BeforeArgs(Params_GetMaterials args);

        public delegate Material[] GetMaterials_NormalArgs(Params_GetMaterials args);

        public delegate void GetPaddingForMaterial_BeforeArgs(Params_GetPaddingForMaterial args);

        public delegate void GetPaddingForMaterial_Material_BeforeArgs(Params_GetPaddingForMaterial_Material args);

        public delegate float GetPaddingForMaterial_Material_NormalArgs(Params_GetPaddingForMaterial_Material args);

        public delegate float GetPaddingForMaterial_NormalArgs(Params_GetPaddingForMaterial args);

        public delegate void GetPreferredHeight_BeforeArgs(Params_GetPreferredHeight args);

        public delegate float GetPreferredHeight_NormalArgs(Params_GetPreferredHeight args);

        public delegate void GetPreferredHeight_Vector2_BeforeArgs(Params_GetPreferredHeight_Vector2 args);

        public delegate float GetPreferredHeight_Vector2_NormalArgs(Params_GetPreferredHeight_Vector2 args);

        public delegate void GetPreferredValues_BeforeArgs(Params_GetPreferredValues args);

        public delegate void GetPreferredValues_float_float_BeforeArgs(Params_GetPreferredValues_float_float args);

        public delegate Vector2 GetPreferredValues_float_float_NormalArgs(Params_GetPreferredValues_float_float args);

        public delegate Vector2 GetPreferredValues_NormalArgs(Params_GetPreferredValues args);

        public delegate void GetPreferredValues_string_BeforeArgs(Params_GetPreferredValues_string args);

        public delegate void GetPreferredValues_string_float_float_BeforeArgs(
            Params_GetPreferredValues_string_float_float args);

        public delegate Vector2 GetPreferredValues_string_float_float_NormalArgs(
            Params_GetPreferredValues_string_float_float args);

        public delegate Vector2 GetPreferredValues_string_NormalArgs(Params_GetPreferredValues_string args);

        public delegate void GetPreferredWidth_BeforeArgs(Params_GetPreferredWidth args);

        public delegate float GetPreferredWidth_NormalArgs(Params_GetPreferredWidth args);

        public delegate void GetPreferredWidth_Vector2_BeforeArgs(Params_GetPreferredWidth_Vector2 args);

        public delegate float GetPreferredWidth_Vector2_NormalArgs(Params_GetPreferredWidth_Vector2 args);

        public delegate void GetRenderedHeight_BeforeArgs(Params_GetRenderedHeight args);

        public delegate float GetRenderedHeight_NormalArgs(Params_GetRenderedHeight args);

        public delegate void GetRenderedValues_BeforeArgs(Params_GetRenderedValues args);

        public delegate Vector2 GetRenderedValues_NormalArgs(Params_GetRenderedValues args);

        public delegate void GetRenderedWidth_BeforeArgs(Params_GetRenderedWidth args);

        public delegate float GetRenderedWidth_NormalArgs(Params_GetRenderedWidth args);

        public delegate void GetSharedMaterials_BeforeArgs(Params_GetSharedMaterials args);

        public delegate Material[] GetSharedMaterials_NormalArgs(Params_GetSharedMaterials args);

        public delegate void GetSpecialCharacters_BeforeArgs(Params_GetSpecialCharacters args);

        public delegate void GetSpecialCharacters_NormalArgs(Params_GetSpecialCharacters args);

        public delegate void GetTextBounds_BeforeArgs(Params_GetTextBounds args);

        public delegate Bounds GetTextBounds_NormalArgs(Params_GetTextBounds args);

        public delegate void GetTextContainerLocalCorners_BeforeArgs(Params_GetTextContainerLocalCorners args);

        public delegate Vector3[] GetTextContainerLocalCorners_NormalArgs(Params_GetTextContainerLocalCorners args);

        public delegate void GetTextInfo_BeforeArgs(Params_GetTextInfo args);

        public delegate TMP_TextInfo GetTextInfo_NormalArgs(Params_GetTextInfo args);

        public delegate void GetUTF16_BeforeArgs(Params_GetUTF16 args);

        public delegate int GetUTF16_NormalArgs(Params_GetUTF16 args);

        public delegate void GetUTF32_BeforeArgs(Params_GetUTF32 args);

        public delegate int GetUTF32_NormalArgs(Params_GetUTF32 args);

        public delegate void HexCharsToColor_Array_int_BeforeArgs(Params_HexCharsToColor_Array_int args);

        public delegate void HexCharsToColor_Array_int_int_BeforeArgs(Params_HexCharsToColor_Array_int_int args);

        public delegate Color32 HexCharsToColor_Array_int_int_NormalArgs(Params_HexCharsToColor_Array_int_int args);

        public delegate Color32 HexCharsToColor_Array_int_NormalArgs(Params_HexCharsToColor_Array_int args);

        public delegate void HexToInt_BeforeArgs(Params_HexToInt args);

        public delegate int HexToInt_NormalArgs(Params_HexToInt args);

        public delegate void InternalCrossFadeAlpha_BeforeArgs(Params_InternalCrossFadeAlpha args);

        public delegate void InternalCrossFadeAlpha_NormalArgs(Params_InternalCrossFadeAlpha args);

        public delegate void InternalCrossFadeColor_BeforeArgs(Params_InternalCrossFadeColor args);

        public delegate void InternalCrossFadeColor_NormalArgs(Params_InternalCrossFadeColor args);

        public delegate void LoadFontAsset_BeforeArgs(Params_LoadFontAsset args);

        public delegate void LoadFontAsset_NormalArgs(Params_LoadFontAsset args);

        public delegate void PackUV_float_float_BeforeArgs(Params_PackUV_float_float args);

        public delegate void PackUV_float_float_float_BeforeArgs(Params_PackUV_float_float_float args);

        public delegate Vector2 PackUV_float_float_float_NormalArgs(Params_PackUV_float_float_float args);

        public delegate float PackUV_float_float_NormalArgs(Params_PackUV_float_float args);

        public delegate void ParseInputText_BeforeArgs(Params_ParseInputText args);

        public delegate void ParseInputText_NormalArgs(Params_ParseInputText args);

        public delegate void ResizeLineExtents_BeforeArgs(Params_ResizeLineExtents args);

        public delegate void ResizeLineExtents_NormalArgs(Params_ResizeLineExtents args);

        public delegate void RestoreWordWrappingState_BeforeArgs(Params_RestoreWordWrappingState args);

        public delegate int RestoreWordWrappingState_NormalArgs(Params_RestoreWordWrappingState args);

        public delegate void SaveGlyphVertexInfo_BeforeArgs(Params_SaveGlyphVertexInfo args);

        public delegate void SaveGlyphVertexInfo_NormalArgs(Params_SaveGlyphVertexInfo args);

        public delegate void SaveSpriteVertexInfo_BeforeArgs(Params_SaveSpriteVertexInfo args);

        public delegate void SaveSpriteVertexInfo_NormalArgs(Params_SaveSpriteVertexInfo args);

        public delegate void SaveWordWrappingState_BeforeArgs(Params_SaveWordWrappingState args);

        public delegate void SaveWordWrappingState_NormalArgs(Params_SaveWordWrappingState args);

        public delegate void set_alignment_BeforeArgs(Params_set_alignment args);

        public delegate void set_alignment_NormalArgs(Params_set_alignment args);

        public delegate void set_alpha_BeforeArgs(Params_set_alpha args);

        public delegate void set_alpha_NormalArgs(Params_set_alpha args);

        public delegate void set_autoSizeTextContainer_BeforeArgs(Params_set_autoSizeTextContainer args);

        public delegate void set_autoSizeTextContainer_NormalArgs(Params_set_autoSizeTextContainer args);

        public delegate void set_characterSpacing_BeforeArgs(Params_set_characterSpacing args);

        public delegate void set_characterSpacing_NormalArgs(Params_set_characterSpacing args);

        public delegate void set_characterWidthAdjustment_BeforeArgs(Params_set_characterWidthAdjustment args);

        public delegate void set_characterWidthAdjustment_NormalArgs(Params_set_characterWidthAdjustment args);

        public delegate void set_color_BeforeArgs(Params_set_color args);

        public delegate void set_color_NormalArgs(Params_set_color args);

        public delegate void set_colorGradient_BeforeArgs(Params_set_colorGradient args);

        public delegate void set_colorGradient_NormalArgs(Params_set_colorGradient args);

        public delegate void set_colorGradientPreset_BeforeArgs(Params_set_colorGradientPreset args);

        public delegate void set_colorGradientPreset_NormalArgs(Params_set_colorGradientPreset args);

        public delegate void set_enableAdaptiveJustification_BeforeArgs(Params_set_enableAdaptiveJustification args);

        public delegate void set_enableAdaptiveJustification_NormalArgs(Params_set_enableAdaptiveJustification args);

        public delegate void set_enableAutoSizing_BeforeArgs(Params_set_enableAutoSizing args);

        public delegate void set_enableAutoSizing_NormalArgs(Params_set_enableAutoSizing args);

        public delegate void set_enableCulling_BeforeArgs(Params_set_enableCulling args);

        public delegate void set_enableCulling_NormalArgs(Params_set_enableCulling args);

        public delegate void set_enableKerning_BeforeArgs(Params_set_enableKerning args);

        public delegate void set_enableKerning_NormalArgs(Params_set_enableKerning args);

        public delegate void set_enableVertexGradient_BeforeArgs(Params_set_enableVertexGradient args);

        public delegate void set_enableVertexGradient_NormalArgs(Params_set_enableVertexGradient args);

        public delegate void set_enableWordWrapping_BeforeArgs(Params_set_enableWordWrapping args);

        public delegate void set_enableWordWrapping_NormalArgs(Params_set_enableWordWrapping args);

        public delegate void set_extraPadding_BeforeArgs(Params_set_extraPadding args);

        public delegate void set_extraPadding_NormalArgs(Params_set_extraPadding args);

        public delegate void set_faceColor_BeforeArgs(Params_set_faceColor args);

        public delegate void set_faceColor_NormalArgs(Params_set_faceColor args);

        public delegate void set_font_BeforeArgs(Params_set_font args);

        public delegate void set_font_NormalArgs(Params_set_font args);

        public delegate void set_fontMaterial_BeforeArgs(Params_set_fontMaterial args);

        public delegate void set_fontMaterial_NormalArgs(Params_set_fontMaterial args);

        public delegate void set_fontMaterials_BeforeArgs(Params_set_fontMaterials args);

        public delegate void set_fontMaterials_NormalArgs(Params_set_fontMaterials args);

        public delegate void set_fontSharedMaterial_BeforeArgs(Params_set_fontSharedMaterial args);

        public delegate void set_fontSharedMaterial_NormalArgs(Params_set_fontSharedMaterial args);

        public delegate void set_fontSharedMaterials_BeforeArgs(Params_set_fontSharedMaterials args);

        public delegate void set_fontSharedMaterials_NormalArgs(Params_set_fontSharedMaterials args);

        public delegate void set_fontSize_BeforeArgs(Params_set_fontSize args);

        public delegate void set_fontSize_NormalArgs(Params_set_fontSize args);

        public delegate void set_fontSizeMax_BeforeArgs(Params_set_fontSizeMax args);

        public delegate void set_fontSizeMax_NormalArgs(Params_set_fontSizeMax args);

        public delegate void set_fontSizeMin_BeforeArgs(Params_set_fontSizeMin args);

        public delegate void set_fontSizeMin_NormalArgs(Params_set_fontSizeMin args);

        public delegate void set_fontStyle_BeforeArgs(Params_set_fontStyle args);

        public delegate void set_fontStyle_NormalArgs(Params_set_fontStyle args);

        public delegate void set_fontWeight_BeforeArgs(Params_set_fontWeight args);

        public delegate void set_fontWeight_NormalArgs(Params_set_fontWeight args);

        public delegate void set_havePropertiesChanged_BeforeArgs(Params_set_havePropertiesChanged args);

        public delegate void set_havePropertiesChanged_NormalArgs(Params_set_havePropertiesChanged args);

        public delegate void set_horizontalMapping_BeforeArgs(Params_set_horizontalMapping args);

        public delegate void set_horizontalMapping_NormalArgs(Params_set_horizontalMapping args);

        public delegate void set_ignoreVisibility_BeforeArgs(Params_set_ignoreVisibility args);

        public delegate void set_ignoreVisibility_NormalArgs(Params_set_ignoreVisibility args);

        public delegate void set_isOrthographic_BeforeArgs(Params_set_isOrthographic args);

        public delegate void set_isOrthographic_NormalArgs(Params_set_isOrthographic args);

        public delegate void set_isOverlay_BeforeArgs(Params_set_isOverlay args);

        public delegate void set_isOverlay_NormalArgs(Params_set_isOverlay args);

        public delegate void set_isRightToLeftText_BeforeArgs(Params_set_isRightToLeftText args);

        public delegate void set_isRightToLeftText_NormalArgs(Params_set_isRightToLeftText args);

        public delegate void set_isUsingLegacyAnimationComponent_BeforeArgs(
            Params_set_isUsingLegacyAnimationComponent args);

        public delegate void set_isUsingLegacyAnimationComponent_NormalArgs(
            Params_set_isUsingLegacyAnimationComponent args);

        public delegate void set_isVolumetricText_BeforeArgs(Params_set_isVolumetricText args);

        public delegate void set_isVolumetricText_NormalArgs(Params_set_isVolumetricText args);

        public delegate void set_lineSpacing_BeforeArgs(Params_set_lineSpacing args);

        public delegate void set_lineSpacing_NormalArgs(Params_set_lineSpacing args);

        public delegate void set_margin_BeforeArgs(Params_set_margin args);

        public delegate void set_margin_NormalArgs(Params_set_margin args);

        public delegate void set_maxVisibleCharacters_BeforeArgs(Params_set_maxVisibleCharacters args);

        public delegate void set_maxVisibleCharacters_NormalArgs(Params_set_maxVisibleCharacters args);

        public delegate void set_maxVisibleLines_BeforeArgs(Params_set_maxVisibleLines args);

        public delegate void set_maxVisibleLines_NormalArgs(Params_set_maxVisibleLines args);

        public delegate void set_maxVisibleWords_BeforeArgs(Params_set_maxVisibleWords args);

        public delegate void set_maxVisibleWords_NormalArgs(Params_set_maxVisibleWords args);

        public delegate void set_outlineColor_BeforeArgs(Params_set_outlineColor args);

        public delegate void set_outlineColor_NormalArgs(Params_set_outlineColor args);

        public delegate void set_outlineWidth_BeforeArgs(Params_set_outlineWidth args);

        public delegate void set_outlineWidth_NormalArgs(Params_set_outlineWidth args);

        public delegate void set_OverflowMode_BeforeArgs(Params_set_OverflowMode args);

        public delegate void set_OverflowMode_NormalArgs(Params_set_OverflowMode args);

        public delegate void set_overrideColorTags_BeforeArgs(Params_set_overrideColorTags args);

        public delegate void set_overrideColorTags_NormalArgs(Params_set_overrideColorTags args);

        public delegate void set_pageToDisplay_BeforeArgs(Params_set_pageToDisplay args);

        public delegate void set_pageToDisplay_NormalArgs(Params_set_pageToDisplay args);

        public delegate void set_paragraphSpacing_BeforeArgs(Params_set_paragraphSpacing args);

        public delegate void set_paragraphSpacing_NormalArgs(Params_set_paragraphSpacing args);

        public delegate void set_parseCtrlCharacters_BeforeArgs(Params_set_parseCtrlCharacters args);

        public delegate void set_parseCtrlCharacters_NormalArgs(Params_set_parseCtrlCharacters args);

        public delegate void set_renderMode_BeforeArgs(Params_set_renderMode args);

        public delegate void set_renderMode_NormalArgs(Params_set_renderMode args);

        public delegate void set_richText_BeforeArgs(Params_set_richText args);

        public delegate void set_richText_NormalArgs(Params_set_richText args);

        public delegate void set_spriteAsset_BeforeArgs(Params_set_spriteAsset args);

        public delegate void set_spriteAsset_NormalArgs(Params_set_spriteAsset args);

        public delegate void set_text_BeforeArgs(Params_set_text args);

        public delegate void set_text_NormalArgs(Params_set_text args);

        public delegate void set_tintAllSprites_BeforeArgs(Params_set_tintAllSprites args);

        public delegate void set_tintAllSprites_NormalArgs(Params_set_tintAllSprites args);

        public delegate void set_useMaxVisibleDescender_BeforeArgs(Params_set_useMaxVisibleDescender args);

        public delegate void set_useMaxVisibleDescender_NormalArgs(Params_set_useMaxVisibleDescender args);

        public delegate void set_verticalMapping_BeforeArgs(Params_set_verticalMapping args);

        public delegate void set_verticalMapping_NormalArgs(Params_set_verticalMapping args);

        public delegate void set_wordWrappingRatios_BeforeArgs(Params_set_wordWrappingRatios args);

        public delegate void set_wordWrappingRatios_NormalArgs(Params_set_wordWrappingRatios args);

        public delegate void SetActiveSubMeshes_BeforeArgs(Params_SetActiveSubMeshes args);

        public delegate void SetActiveSubMeshes_NormalArgs(Params_SetActiveSubMeshes args);

        public delegate void SetArraySizes_BeforeArgs(Params_SetArraySizes args);

        public delegate int SetArraySizes_NormalArgs(Params_SetArraySizes args);

        public delegate void SetCharArray_BeforeArgs(Params_SetCharArray args);

        public delegate void SetCharArray_NormalArgs(Params_SetCharArray args);

        public delegate void SetCulling_BeforeArgs(Params_SetCulling args);

        public delegate void SetCulling_NormalArgs(Params_SetCulling args);

        public delegate void SetFaceColor_BeforeArgs(Params_SetFaceColor args);

        public delegate void SetFaceColor_NormalArgs(Params_SetFaceColor args);

        public delegate void SetFontBaseMaterial_BeforeArgs(Params_SetFontBaseMaterial args);

        public delegate void SetFontBaseMaterial_NormalArgs(Params_SetFontBaseMaterial args);

        public delegate void SetOutlineColor_BeforeArgs(Params_SetOutlineColor args);

        public delegate void SetOutlineColor_NormalArgs(Params_SetOutlineColor args);

        public delegate void SetOutlineThickness_BeforeArgs(Params_SetOutlineThickness args);

        public delegate void SetOutlineThickness_NormalArgs(Params_SetOutlineThickness args);

        public delegate void SetShaderDepth_BeforeArgs(Params_SetShaderDepth args);

        public delegate void SetShaderDepth_NormalArgs(Params_SetShaderDepth args);

        public delegate void SetSharedMaterial_BeforeArgs(Params_SetSharedMaterial args);

        public delegate void SetSharedMaterial_NormalArgs(Params_SetSharedMaterial args);

        public delegate void SetSharedMaterials_BeforeArgs(Params_SetSharedMaterials args);

        public delegate void SetSharedMaterials_NormalArgs(Params_SetSharedMaterials args);

        public delegate void SetText_string_BeforeArgs(Params_SetText_string args);

        public delegate void SetText_string_float_BeforeArgs(Params_SetText_string_float args);

        public delegate void SetText_string_float_float_BeforeArgs(Params_SetText_string_float_float args);

        public delegate void SetText_string_float_float_float_BeforeArgs(Params_SetText_string_float_float_float args);

        public delegate void SetText_string_float_float_float_NormalArgs(Params_SetText_string_float_float_float args);

        public delegate void SetText_string_float_float_NormalArgs(Params_SetText_string_float_float args);

        public delegate void SetText_string_float_NormalArgs(Params_SetText_string_float args);

        public delegate void SetText_string_NormalArgs(Params_SetText_string args);

        public delegate void SetText_StringBuilder_BeforeArgs(Params_SetText_StringBuilder args);

        public delegate void SetText_StringBuilder_NormalArgs(Params_SetText_StringBuilder args);

        public delegate void SetTextArrayToCharArray_BeforeArgs(Params_SetTextArrayToCharArray args);

        public delegate void SetTextArrayToCharArray_NormalArgs(Params_SetTextArrayToCharArray args);

        public delegate void SetTextInternal_BeforeArgs(Params_SetTextInternal args);

        public delegate void SetTextInternal_NormalArgs(Params_SetTextInternal args);

        public delegate void SetVertexColorGradient_BeforeArgs(Params_SetVertexColorGradient args);

        public delegate void SetVertexColorGradient_NormalArgs(Params_SetVertexColorGradient args);

        public delegate void SetVertices_BeforeArgs(Params_SetVertices args);

        public delegate void SetVertices_NormalArgs(Params_SetVertices args);

        public delegate void StringBuilderToIntArray_BeforeArgs(Params_StringBuilderToIntArray args);

        public delegate void StringBuilderToIntArray_NormalArgs(Params_StringBuilderToIntArray args);

        public delegate void StringToCharArray_BeforeArgs(Params_StringToCharArray args);

        public delegate void StringToCharArray_NormalArgs(Params_StringToCharArray args);

        public delegate void UpdateGeometry_BeforeArgs(Params_UpdateGeometry args);

        public delegate void UpdateGeometry_NormalArgs(Params_UpdateGeometry args);

        public delegate void UpdateMeshPadding_BeforeArgs(Params_UpdateMeshPadding args);

        public delegate void UpdateMeshPadding_NormalArgs(Params_UpdateMeshPadding args);

        public delegate void UpdateVertexData_BeforeArgs(Params_UpdateVertexData args);

        public delegate void UpdateVertexData_NormalArgs(Params_UpdateVertexData args);

        public delegate void UpdateVertexData_TMP_VertexDataUpdateFlags_BeforeArgs(
            Params_UpdateVertexData_TMP_VertexDataUpdateFlags args);

        public delegate void UpdateVertexData_TMP_VertexDataUpdateFlags_NormalArgs(
            Params_UpdateVertexData_TMP_VertexDataUpdateFlags args);

        public delegate void ValidateHtmlTag_BeforeArgs(Params_ValidateHtmlTag args);

        public delegate bool ValidateHtmlTag_NormalArgs(Params_ValidateHtmlTag args);

        public sealed class Params_get_text
        {
            public TMP_Text self;
        }

        public sealed class Params_set_text
        {
            public TMP_Text self;
            public string value;
        }

        public sealed class Params_get_isRightToLeftText
        {
            public TMP_Text self;
        }

        public sealed class Params_set_isRightToLeftText
        {
            public TMP_Text self;
            public bool value;
        }

        public sealed class Params_get_font
        {
            public TMP_Text self;
        }

        public sealed class Params_set_font
        {
            public TMP_Text self;
            public TMP_FontAsset value;
        }

        public sealed class Params_get_fontSharedMaterial
        {
            public TMP_Text self;
        }

        public sealed class Params_set_fontSharedMaterial
        {
            public TMP_Text self;
            public Material value;
        }

        public sealed class Params_get_fontSharedMaterials
        {
            public TMP_Text self;
        }

        public sealed class Params_set_fontSharedMaterials
        {
            public TMP_Text self;
            public Material[] value;
        }

        public sealed class Params_get_fontMaterial
        {
            public TMP_Text self;
        }

        public sealed class Params_set_fontMaterial
        {
            public TMP_Text self;
            public Material value;
        }

        public sealed class Params_get_fontMaterials
        {
            public TMP_Text self;
        }

        public sealed class Params_set_fontMaterials
        {
            public TMP_Text self;
            public Material[] value;
        }

        public sealed class Params_get_color
        {
            public TMP_Text self;
        }

        public sealed class Params_set_color
        {
            public TMP_Text self;
            public Color value;
        }

        public sealed class Params_get_alpha
        {
            public TMP_Text self;
        }

        public sealed class Params_set_alpha
        {
            public TMP_Text self;
            public float value;
        }

        public sealed class Params_get_enableVertexGradient
        {
            public TMP_Text self;
        }

        public sealed class Params_set_enableVertexGradient
        {
            public TMP_Text self;
            public bool value;
        }

        public sealed class Params_get_colorGradient
        {
            public TMP_Text self;
        }

        public sealed class Params_set_colorGradient
        {
            public TMP_Text self;
            public VertexGradient value;
        }

        public sealed class Params_get_colorGradientPreset
        {
            public TMP_Text self;
        }

        public sealed class Params_set_colorGradientPreset
        {
            public TMP_Text self;
            public TMP_ColorGradient value;
        }

        public sealed class Params_get_spriteAsset
        {
            public TMP_Text self;
        }

        public sealed class Params_set_spriteAsset
        {
            public TMP_Text self;
            public TMP_SpriteAsset value;
        }

        public sealed class Params_get_tintAllSprites
        {
            public TMP_Text self;
        }

        public sealed class Params_set_tintAllSprites
        {
            public TMP_Text self;
            public bool value;
        }

        public sealed class Params_get_overrideColorTags
        {
            public TMP_Text self;
        }

        public sealed class Params_set_overrideColorTags
        {
            public TMP_Text self;
            public bool value;
        }

        public sealed class Params_get_faceColor
        {
            public TMP_Text self;
        }

        public sealed class Params_set_faceColor
        {
            public TMP_Text self;
            public Color32 value;
        }

        public sealed class Params_get_outlineColor
        {
            public TMP_Text self;
        }

        public sealed class Params_set_outlineColor
        {
            public TMP_Text self;
            public Color32 value;
        }

        public sealed class Params_get_outlineWidth
        {
            public TMP_Text self;
        }

        public sealed class Params_set_outlineWidth
        {
            public TMP_Text self;
            public float value;
        }

        public sealed class Params_get_fontSize
        {
            public TMP_Text self;
        }

        public sealed class Params_set_fontSize
        {
            public TMP_Text self;
            public float value;
        }

        public sealed class Params_get_fontScale
        {
            public TMP_Text self;
        }

        public sealed class Params_get_fontWeight
        {
            public TMP_Text self;
        }

        public sealed class Params_set_fontWeight
        {
            public TMP_Text self;
            public int value;
        }

        public sealed class Params_get_pixelsPerUnit
        {
            public TMP_Text self;
        }

        public sealed class Params_get_enableAutoSizing
        {
            public TMP_Text self;
        }

        public sealed class Params_set_enableAutoSizing
        {
            public TMP_Text self;
            public bool value;
        }

        public sealed class Params_get_fontSizeMin
        {
            public TMP_Text self;
        }

        public sealed class Params_set_fontSizeMin
        {
            public TMP_Text self;
            public float value;
        }

        public sealed class Params_get_fontSizeMax
        {
            public TMP_Text self;
        }

        public sealed class Params_set_fontSizeMax
        {
            public TMP_Text self;
            public float value;
        }

        public sealed class Params_get_fontStyle
        {
            public TMP_Text self;
        }

        public sealed class Params_set_fontStyle
        {
            public TMP_Text self;
            public FontStyles value;
        }

        public sealed class Params_get_isUsingBold
        {
            public TMP_Text self;
        }

        public sealed class Params_get_alignment
        {
            public TMP_Text self;
        }

        public sealed class Params_set_alignment
        {
            public TMP_Text self;
            public TextAlignmentOptions value;
        }

        public sealed class Params_get_characterSpacing
        {
            public TMP_Text self;
        }

        public sealed class Params_set_characterSpacing
        {
            public TMP_Text self;
            public float value;
        }

        public sealed class Params_get_lineSpacing
        {
            public TMP_Text self;
        }

        public sealed class Params_set_lineSpacing
        {
            public TMP_Text self;
            public float value;
        }

        public sealed class Params_get_paragraphSpacing
        {
            public TMP_Text self;
        }

        public sealed class Params_set_paragraphSpacing
        {
            public TMP_Text self;
            public float value;
        }

        public sealed class Params_get_characterWidthAdjustment
        {
            public TMP_Text self;
        }

        public sealed class Params_set_characterWidthAdjustment
        {
            public TMP_Text self;
            public float value;
        }

        public sealed class Params_get_enableWordWrapping
        {
            public TMP_Text self;
        }

        public sealed class Params_set_enableWordWrapping
        {
            public TMP_Text self;
            public bool value;
        }

        public sealed class Params_get_wordWrappingRatios
        {
            public TMP_Text self;
        }

        public sealed class Params_set_wordWrappingRatios
        {
            public TMP_Text self;
            public float value;
        }

        public sealed class Params_get_enableAdaptiveJustification
        {
            public TMP_Text self;
        }

        public sealed class Params_set_enableAdaptiveJustification
        {
            public TMP_Text self;
            public bool value;
        }

        public sealed class Params_get_OverflowMode
        {
            public TMP_Text self;
        }

        public sealed class Params_set_OverflowMode
        {
            public TMP_Text self;
            public TextOverflowModes value;
        }

        public sealed class Params_get_enableKerning
        {
            public TMP_Text self;
        }

        public sealed class Params_set_enableKerning
        {
            public TMP_Text self;
            public bool value;
        }

        public sealed class Params_get_extraPadding
        {
            public TMP_Text self;
        }

        public sealed class Params_set_extraPadding
        {
            public TMP_Text self;
            public bool value;
        }

        public sealed class Params_get_richText
        {
            public TMP_Text self;
        }

        public sealed class Params_set_richText
        {
            public TMP_Text self;
            public bool value;
        }

        public sealed class Params_get_parseCtrlCharacters
        {
            public TMP_Text self;
        }

        public sealed class Params_set_parseCtrlCharacters
        {
            public TMP_Text self;
            public bool value;
        }

        public sealed class Params_get_isOverlay
        {
            public TMP_Text self;
        }

        public sealed class Params_set_isOverlay
        {
            public TMP_Text self;
            public bool value;
        }

        public sealed class Params_get_isOrthographic
        {
            public TMP_Text self;
        }

        public sealed class Params_set_isOrthographic
        {
            public TMP_Text self;
            public bool value;
        }

        public sealed class Params_get_enableCulling
        {
            public TMP_Text self;
        }

        public sealed class Params_set_enableCulling
        {
            public TMP_Text self;
            public bool value;
        }

        public sealed class Params_get_ignoreVisibility
        {
            public TMP_Text self;
        }

        public sealed class Params_set_ignoreVisibility
        {
            public TMP_Text self;
            public bool value;
        }

        public sealed class Params_get_horizontalMapping
        {
            public TMP_Text self;
        }

        public sealed class Params_set_horizontalMapping
        {
            public TMP_Text self;
            public TextureMappingOptions value;
        }

        public sealed class Params_get_verticalMapping
        {
            public TMP_Text self;
        }

        public sealed class Params_set_verticalMapping
        {
            public TMP_Text self;
            public TextureMappingOptions value;
        }

        public sealed class Params_get_renderMode
        {
            public TMP_Text self;
        }

        public sealed class Params_set_renderMode
        {
            public TMP_Text self;
            public TextRenderFlags value;
        }

        public sealed class Params_get_maxVisibleCharacters
        {
            public TMP_Text self;
        }

        public sealed class Params_set_maxVisibleCharacters
        {
            public TMP_Text self;
            public int value;
        }

        public sealed class Params_get_maxVisibleWords
        {
            public TMP_Text self;
        }

        public sealed class Params_set_maxVisibleWords
        {
            public TMP_Text self;
            public int value;
        }

        public sealed class Params_get_maxVisibleLines
        {
            public TMP_Text self;
        }

        public sealed class Params_set_maxVisibleLines
        {
            public TMP_Text self;
            public int value;
        }

        public sealed class Params_get_useMaxVisibleDescender
        {
            public TMP_Text self;
        }

        public sealed class Params_set_useMaxVisibleDescender
        {
            public TMP_Text self;
            public bool value;
        }

        public sealed class Params_get_pageToDisplay
        {
            public TMP_Text self;
        }

        public sealed class Params_set_pageToDisplay
        {
            public TMP_Text self;
            public int value;
        }

        public sealed class Params_get_margin
        {
            public TMP_Text self;
        }

        public sealed class Params_set_margin
        {
            public TMP_Text self;
            public Vector4 value;
        }

        public sealed class Params_get_textInfo
        {
            public TMP_Text self;
        }

        public sealed class Params_get_havePropertiesChanged
        {
            public TMP_Text self;
        }

        public sealed class Params_set_havePropertiesChanged
        {
            public TMP_Text self;
            public bool value;
        }

        public sealed class Params_get_isUsingLegacyAnimationComponent
        {
            public TMP_Text self;
        }

        public sealed class Params_set_isUsingLegacyAnimationComponent
        {
            public TMP_Text self;
            public bool value;
        }

        public sealed class Params_get_transform
        {
            public TMP_Text self;
        }

        public sealed class Params_get_rectTransform
        {
            public TMP_Text self;
        }

        public sealed class Params_get_autoSizeTextContainer
        {
            public TMP_Text self;
        }

        public sealed class Params_set_autoSizeTextContainer
        {
            public TMP_Text self;
            public bool value;
        }

        public sealed class Params_get_mesh
        {
            public TMP_Text self;
        }

        public sealed class Params_get_isVolumetricText
        {
            public TMP_Text self;
        }

        public sealed class Params_set_isVolumetricText
        {
            public TMP_Text self;
            public bool value;
        }

        public sealed class Params_get_bounds
        {
            public TMP_Text self;
        }

        public sealed class Params_get_textBounds
        {
            public TMP_Text self;
        }

        public sealed class Params_get_flexibleHeight
        {
            public TMP_Text self;
        }

        public sealed class Params_get_flexibleWidth
        {
            public TMP_Text self;
        }

        public sealed class Params_get_minHeight
        {
            public TMP_Text self;
        }

        public sealed class Params_get_minWidth
        {
            public TMP_Text self;
        }

        public sealed class Params_get_preferredWidth
        {
            public TMP_Text self;
        }

        public sealed class Params_get_preferredHeight
        {
            public TMP_Text self;
        }

        public sealed class Params_get_renderedWidth
        {
            public TMP_Text self;
        }

        public sealed class Params_get_renderedHeight
        {
            public TMP_Text self;
        }

        public sealed class Params_get_layoutPriority
        {
            public TMP_Text self;
        }

        public sealed class Params_LoadFontAsset
        {
            public TMP_Text self;
        }

        public sealed class Params_SetSharedMaterial
        {
            public Material mat;
            public TMP_Text self;
        }

        public sealed class Params_GetMaterial
        {
            public Material mat;
            public TMP_Text self;
        }

        public sealed class Params_SetFontBaseMaterial
        {
            public Material mat;
            public TMP_Text self;
        }

        public sealed class Params_GetSharedMaterials
        {
            public TMP_Text self;
        }

        public sealed class Params_SetSharedMaterials
        {
            public Material[] materials;
            public TMP_Text self;
        }

        public sealed class Params_GetMaterials
        {
            public Material[] mats;
            public TMP_Text self;
        }

        public sealed class Params_CreateMaterialInstance
        {
            public TMP_Text self;
            public Material source;
        }

        public sealed class Params_SetVertexColorGradient
        {
            public TMP_ColorGradient gradient;
            public TMP_Text self;
        }

        public sealed class Params_SetFaceColor
        {
            public Color32 color;
            public TMP_Text self;
        }

        public sealed class Params_SetOutlineColor
        {
            public Color32 color;
            public TMP_Text self;
        }

        public sealed class Params_SetOutlineThickness
        {
            public TMP_Text self;
            public float thickness;
        }

        public sealed class Params_SetShaderDepth
        {
            public TMP_Text self;
        }

        public sealed class Params_SetCulling
        {
            public TMP_Text self;
        }

        public sealed class Params_GetPaddingForMaterial
        {
            public TMP_Text self;
        }

        public sealed class Params_GetPaddingForMaterial_Material
        {
            public Material mat;
            public TMP_Text self;
        }

        public sealed class Params_GetTextContainerLocalCorners
        {
            public TMP_Text self;
        }

        public sealed class Params_ForceMeshUpdate
        {
            public TMP_Text self;
        }

        public sealed class Params_ForceMeshUpdate_bool
        {
            public bool ignoreActiveState;
            public TMP_Text self;
        }

        public sealed class Params_SetTextInternal
        {
            public TMP_Text self;
            public string text;
        }

        public sealed class Params_UpdateGeometry
        {
            public int index;
            public Mesh mesh;
            public TMP_Text self;
        }

        public sealed class Params_UpdateVertexData_TMP_VertexDataUpdateFlags
        {
            public TMP_VertexDataUpdateFlags flags;
            public TMP_Text self;
        }

        public sealed class Params_UpdateVertexData
        {
            public TMP_Text self;
        }

        public sealed class Params_SetVertices
        {
            public TMP_Text self;
            public Vector3[] vertices;
        }

        public sealed class Params_UpdateMeshPadding
        {
            public TMP_Text self;
        }

        public sealed class Params_CrossFadeColor
        {
            public float duration;
            public bool ignoreTimeScale;
            public TMP_Text self;
            public Color targetColor;
            public bool useAlpha;
        }

        public sealed class Params_CrossFadeAlpha
        {
            public float alpha;
            public float duration;
            public bool ignoreTimeScale;
            public TMP_Text self;
        }

        public sealed class Params_InternalCrossFadeColor
        {
            public float duration;
            public bool ignoreTimeScale;
            public TMP_Text self;
            public Color targetColor;
            public bool useAlpha;
        }

        public sealed class Params_InternalCrossFadeAlpha
        {
            public float alpha;
            public float duration;
            public bool ignoreTimeScale;
            public TMP_Text self;
        }

        public sealed class Params_ParseInputText
        {
            public TMP_Text self;
        }

        public sealed class Params_SetText_string
        {
            public TMP_Text self;
            public string text;
        }

        public sealed class Params_SetText_string_float
        {
            public float arg0;
            public TMP_Text self;
            public string text;
        }

        public sealed class Params_SetText_string_float_float
        {
            public float arg0;
            public float arg1;
            public TMP_Text self;
            public string text;
        }

        public sealed class Params_SetText_string_float_float_float
        {
            public float arg0;
            public float arg1;
            public float arg2;
            public TMP_Text self;
            public string text;
        }

        public sealed class Params_SetText_StringBuilder
        {
            public TMP_Text self;
            public StringBuilder text;
        }

        public sealed class Params_SetCharArray
        {
            public char[] charArray;
            public TMP_Text self;
        }

        public sealed class Params_SetTextArrayToCharArray
        {
            public char[] charArray;
            public int[] charBuffer;
            public TMP_Text self;
        }

        public sealed class Params_StringToCharArray
        {
            public int[] chars;
            public TMP_Text self;
            public string text;
        }

        public sealed class Params_StringBuilderToIntArray
        {
            public int[] chars;
            public TMP_Text self;
            public StringBuilder text;
        }

        public sealed class Params_AddFloatToCharArray
        {
            public int index;
            public float number;
            public int precision;
            public TMP_Text self;
        }

        public sealed class Params_AddIntToCharArray
        {
            public int index;
            public int number;
            public int precision;
            public TMP_Text self;
        }

        public sealed class Params_SetArraySizes
        {
            public int[] chars;
            public TMP_Text self;
        }

        public sealed class Params_GenerateTextMesh
        {
            public TMP_Text self;
        }

        public sealed class Params_GetPreferredValues
        {
            public TMP_Text self;
        }

        public sealed class Params_GetPreferredValues_float_float
        {
            public float height;
            public TMP_Text self;
            public float width;
        }

        public sealed class Params_GetPreferredValues_string
        {
            public TMP_Text self;
            public string text;
        }

        public sealed class Params_GetPreferredValues_string_float_float
        {
            public float height;
            public TMP_Text self;
            public string text;
            public float width;
        }

        public sealed class Params_GetPreferredWidth
        {
            public TMP_Text self;
        }

        public sealed class Params_GetPreferredWidth_Vector2
        {
            public Vector2 margin;
            public TMP_Text self;
        }

        public sealed class Params_GetPreferredHeight
        {
            public TMP_Text self;
        }

        public sealed class Params_GetPreferredHeight_Vector2
        {
            public Vector2 margin;
            public TMP_Text self;
        }

        public sealed class Params_GetRenderedValues
        {
            public TMP_Text self;
        }

        public sealed class Params_GetRenderedWidth
        {
            public TMP_Text self;
        }

        public sealed class Params_GetRenderedHeight
        {
            public TMP_Text self;
        }

        public sealed class Params_CalculatePreferredValues
        {
            public float defaultFontSize;
            public Vector2 marginSize;
            public TMP_Text self;
        }

        public sealed class Params_GetCompoundBounds
        {
            public TMP_Text self;
        }

        public sealed class Params_GetTextBounds
        {
            public TMP_Text self;
        }

        public sealed class Params_AdjustLineOffset
        {
            public int endIndex;
            public float offset;
            public TMP_Text self;
            public int startIndex;
        }

        public sealed class Params_ResizeLineExtents
        {
            public TMP_Text self;
            public int size;
        }

        public sealed class Params_GetTextInfo
        {
            public TMP_Text self;
            public string text;
        }

        public sealed class Params_ComputeMarginSize
        {
            public TMP_Text self;
        }

        public sealed class Params_GetArraySizes
        {
            public int[] chars;
            public TMP_Text self;
        }

        public sealed class Params_SaveWordWrappingState
        {
            public int count;
            public int index;
            public TMP_Text self;
            public WordWrapState state;
        }

        public sealed class Params_RestoreWordWrappingState
        {
            public TMP_Text self;
            public WordWrapState state;
        }

        public sealed class Params_SaveGlyphVertexInfo
        {
            public float padding;
            public TMP_Text self;
            public float style_padding;
            public Color32 vertexColor;
        }

        public sealed class Params_SaveSpriteVertexInfo
        {
            public TMP_Text self;
            public Color32 vertexColor;
        }

        public sealed class Params_FillCharacterVertexBuffers_int_int
        {
            public int i;
            public int index_X4;
            public TMP_Text self;
        }

        public sealed class Params_FillCharacterVertexBuffers_int_int_bool
        {
            public int i;
            public int index_X4;
            public bool isVolumetric;
            public TMP_Text self;
        }

        public sealed class Params_FillSpriteVertexBuffers
        {
            public int i;
            public int index_X4;
            public TMP_Text self;
        }

        public sealed class Params_DrawUnderlineMesh
        {
            public Vector3 end;
            public float endScale;
            public int index;
            public float maxScale;
            public float sdfScale;
            public TMP_Text self;
            public Vector3 start;
            public float startScale;
            public Color32 underlineColor;
        }

        public sealed class Params_GetSpecialCharacters
        {
            public TMP_FontAsset fontAsset;
            public TMP_Text self;
        }

        public sealed class Params_GetFontAssetForWeight
        {
            public int fontWeight;
            public TMP_Text self;
        }

        public sealed class Params_SetActiveSubMeshes
        {
            public TMP_Text self;
            public bool state;
        }

        public sealed class Params_PackUV_float_float_float
        {
            public float scale;
            public TMP_Text self;
            public float x;
            public float y;
        }

        public sealed class Params_PackUV_float_float
        {
            public TMP_Text self;
            public float x;
            public float y;
        }

        public sealed class Params_HexToInt
        {
            public char hex;
            public TMP_Text self;
        }

        public sealed class Params_GetUTF16
        {
            public int i;
            public TMP_Text self;
        }

        public sealed class Params_GetUTF32
        {
            public int i;
            public TMP_Text self;
        }

        public sealed class Params_HexCharsToColor_Array_int
        {
            public char[] hexChars;
            public TMP_Text self;
            public int tagCount;
        }

        public sealed class Params_HexCharsToColor_Array_int_int
        {
            public char[] hexChars;
            public int length;
            public TMP_Text self;
            public int startIndex;
        }

        public sealed class Params_ConvertToFloat
        {
            public char[] chars;
            public int decimalPointIndex;
            public int length;
            public TMP_Text self;
            public int startIndex;
        }

        public sealed class Params_ValidateHtmlTag
        {
            public int[] chars;
            public int endIndex;
            public TMP_Text self;
            public int startIndex;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_text_BeforeArgs get_text
        {
            add
            {
                HookHandler._beforeget_text += value;
                HookHandler.Hookget_text();
            }
            remove => HookHandler._beforeget_text -= value;
        }

        public static event Delegates.set_text_BeforeArgs set_text
        {
            add
            {
                HookHandler._beforeset_text += value;
                HookHandler.Hookset_text();
            }
            remove => HookHandler._beforeset_text -= value;
        }

        public static event Delegates.get_isRightToLeftText_BeforeArgs get_isRightToLeftText
        {
            add
            {
                HookHandler._beforeget_isRightToLeftText += value;
                HookHandler.Hookget_isRightToLeftText();
            }
            remove => HookHandler._beforeget_isRightToLeftText -= value;
        }

        public static event Delegates.set_isRightToLeftText_BeforeArgs set_isRightToLeftText
        {
            add
            {
                HookHandler._beforeset_isRightToLeftText += value;
                HookHandler.Hookset_isRightToLeftText();
            }
            remove => HookHandler._beforeset_isRightToLeftText -= value;
        }

        public static event Delegates.get_font_BeforeArgs get_font
        {
            add
            {
                HookHandler._beforeget_font += value;
                HookHandler.Hookget_font();
            }
            remove => HookHandler._beforeget_font -= value;
        }

        public static event Delegates.set_font_BeforeArgs set_font
        {
            add
            {
                HookHandler._beforeset_font += value;
                HookHandler.Hookset_font();
            }
            remove => HookHandler._beforeset_font -= value;
        }

        public static event Delegates.get_fontSharedMaterial_BeforeArgs get_fontSharedMaterial
        {
            add
            {
                HookHandler._beforeget_fontSharedMaterial += value;
                HookHandler.Hookget_fontSharedMaterial();
            }
            remove => HookHandler._beforeget_fontSharedMaterial -= value;
        }

        public static event Delegates.set_fontSharedMaterial_BeforeArgs set_fontSharedMaterial
        {
            add
            {
                HookHandler._beforeset_fontSharedMaterial += value;
                HookHandler.Hookset_fontSharedMaterial();
            }
            remove => HookHandler._beforeset_fontSharedMaterial -= value;
        }

        public static event Delegates.get_fontSharedMaterials_BeforeArgs get_fontSharedMaterials
        {
            add
            {
                HookHandler._beforeget_fontSharedMaterials += value;
                HookHandler.Hookget_fontSharedMaterials();
            }
            remove => HookHandler._beforeget_fontSharedMaterials -= value;
        }

        public static event Delegates.set_fontSharedMaterials_BeforeArgs set_fontSharedMaterials
        {
            add
            {
                HookHandler._beforeset_fontSharedMaterials += value;
                HookHandler.Hookset_fontSharedMaterials();
            }
            remove => HookHandler._beforeset_fontSharedMaterials -= value;
        }

        public static event Delegates.get_fontMaterial_BeforeArgs get_fontMaterial
        {
            add
            {
                HookHandler._beforeget_fontMaterial += value;
                HookHandler.Hookget_fontMaterial();
            }
            remove => HookHandler._beforeget_fontMaterial -= value;
        }

        public static event Delegates.set_fontMaterial_BeforeArgs set_fontMaterial
        {
            add
            {
                HookHandler._beforeset_fontMaterial += value;
                HookHandler.Hookset_fontMaterial();
            }
            remove => HookHandler._beforeset_fontMaterial -= value;
        }

        public static event Delegates.get_fontMaterials_BeforeArgs get_fontMaterials
        {
            add
            {
                HookHandler._beforeget_fontMaterials += value;
                HookHandler.Hookget_fontMaterials();
            }
            remove => HookHandler._beforeget_fontMaterials -= value;
        }

        public static event Delegates.set_fontMaterials_BeforeArgs set_fontMaterials
        {
            add
            {
                HookHandler._beforeset_fontMaterials += value;
                HookHandler.Hookset_fontMaterials();
            }
            remove => HookHandler._beforeset_fontMaterials -= value;
        }

        public static event Delegates.get_color_BeforeArgs get_color
        {
            add
            {
                HookHandler._beforeget_color += value;
                HookHandler.Hookget_color();
            }
            remove => HookHandler._beforeget_color -= value;
        }

        public static event Delegates.set_color_BeforeArgs set_color
        {
            add
            {
                HookHandler._beforeset_color += value;
                HookHandler.Hookset_color();
            }
            remove => HookHandler._beforeset_color -= value;
        }

        public static event Delegates.get_alpha_BeforeArgs get_alpha
        {
            add
            {
                HookHandler._beforeget_alpha += value;
                HookHandler.Hookget_alpha();
            }
            remove => HookHandler._beforeget_alpha -= value;
        }

        public static event Delegates.set_alpha_BeforeArgs set_alpha
        {
            add
            {
                HookHandler._beforeset_alpha += value;
                HookHandler.Hookset_alpha();
            }
            remove => HookHandler._beforeset_alpha -= value;
        }

        public static event Delegates.get_enableVertexGradient_BeforeArgs get_enableVertexGradient
        {
            add
            {
                HookHandler._beforeget_enableVertexGradient += value;
                HookHandler.Hookget_enableVertexGradient();
            }
            remove => HookHandler._beforeget_enableVertexGradient -= value;
        }

        public static event Delegates.set_enableVertexGradient_BeforeArgs set_enableVertexGradient
        {
            add
            {
                HookHandler._beforeset_enableVertexGradient += value;
                HookHandler.Hookset_enableVertexGradient();
            }
            remove => HookHandler._beforeset_enableVertexGradient -= value;
        }

        public static event Delegates.get_colorGradient_BeforeArgs get_colorGradient
        {
            add
            {
                HookHandler._beforeget_colorGradient += value;
                HookHandler.Hookget_colorGradient();
            }
            remove => HookHandler._beforeget_colorGradient -= value;
        }

        public static event Delegates.set_colorGradient_BeforeArgs set_colorGradient
        {
            add
            {
                HookHandler._beforeset_colorGradient += value;
                HookHandler.Hookset_colorGradient();
            }
            remove => HookHandler._beforeset_colorGradient -= value;
        }

        public static event Delegates.get_colorGradientPreset_BeforeArgs get_colorGradientPreset
        {
            add
            {
                HookHandler._beforeget_colorGradientPreset += value;
                HookHandler.Hookget_colorGradientPreset();
            }
            remove => HookHandler._beforeget_colorGradientPreset -= value;
        }

        public static event Delegates.set_colorGradientPreset_BeforeArgs set_colorGradientPreset
        {
            add
            {
                HookHandler._beforeset_colorGradientPreset += value;
                HookHandler.Hookset_colorGradientPreset();
            }
            remove => HookHandler._beforeset_colorGradientPreset -= value;
        }

        public static event Delegates.get_spriteAsset_BeforeArgs get_spriteAsset
        {
            add
            {
                HookHandler._beforeget_spriteAsset += value;
                HookHandler.Hookget_spriteAsset();
            }
            remove => HookHandler._beforeget_spriteAsset -= value;
        }

        public static event Delegates.set_spriteAsset_BeforeArgs set_spriteAsset
        {
            add
            {
                HookHandler._beforeset_spriteAsset += value;
                HookHandler.Hookset_spriteAsset();
            }
            remove => HookHandler._beforeset_spriteAsset -= value;
        }

        public static event Delegates.get_tintAllSprites_BeforeArgs get_tintAllSprites
        {
            add
            {
                HookHandler._beforeget_tintAllSprites += value;
                HookHandler.Hookget_tintAllSprites();
            }
            remove => HookHandler._beforeget_tintAllSprites -= value;
        }

        public static event Delegates.set_tintAllSprites_BeforeArgs set_tintAllSprites
        {
            add
            {
                HookHandler._beforeset_tintAllSprites += value;
                HookHandler.Hookset_tintAllSprites();
            }
            remove => HookHandler._beforeset_tintAllSprites -= value;
        }

        public static event Delegates.get_overrideColorTags_BeforeArgs get_overrideColorTags
        {
            add
            {
                HookHandler._beforeget_overrideColorTags += value;
                HookHandler.Hookget_overrideColorTags();
            }
            remove => HookHandler._beforeget_overrideColorTags -= value;
        }

        public static event Delegates.set_overrideColorTags_BeforeArgs set_overrideColorTags
        {
            add
            {
                HookHandler._beforeset_overrideColorTags += value;
                HookHandler.Hookset_overrideColorTags();
            }
            remove => HookHandler._beforeset_overrideColorTags -= value;
        }

        public static event Delegates.get_faceColor_BeforeArgs get_faceColor
        {
            add
            {
                HookHandler._beforeget_faceColor += value;
                HookHandler.Hookget_faceColor();
            }
            remove => HookHandler._beforeget_faceColor -= value;
        }

        public static event Delegates.set_faceColor_BeforeArgs set_faceColor
        {
            add
            {
                HookHandler._beforeset_faceColor += value;
                HookHandler.Hookset_faceColor();
            }
            remove => HookHandler._beforeset_faceColor -= value;
        }

        public static event Delegates.get_outlineColor_BeforeArgs get_outlineColor
        {
            add
            {
                HookHandler._beforeget_outlineColor += value;
                HookHandler.Hookget_outlineColor();
            }
            remove => HookHandler._beforeget_outlineColor -= value;
        }

        public static event Delegates.set_outlineColor_BeforeArgs set_outlineColor
        {
            add
            {
                HookHandler._beforeset_outlineColor += value;
                HookHandler.Hookset_outlineColor();
            }
            remove => HookHandler._beforeset_outlineColor -= value;
        }

        public static event Delegates.get_outlineWidth_BeforeArgs get_outlineWidth
        {
            add
            {
                HookHandler._beforeget_outlineWidth += value;
                HookHandler.Hookget_outlineWidth();
            }
            remove => HookHandler._beforeget_outlineWidth -= value;
        }

        public static event Delegates.set_outlineWidth_BeforeArgs set_outlineWidth
        {
            add
            {
                HookHandler._beforeset_outlineWidth += value;
                HookHandler.Hookset_outlineWidth();
            }
            remove => HookHandler._beforeset_outlineWidth -= value;
        }

        public static event Delegates.get_fontSize_BeforeArgs get_fontSize
        {
            add
            {
                HookHandler._beforeget_fontSize += value;
                HookHandler.Hookget_fontSize();
            }
            remove => HookHandler._beforeget_fontSize -= value;
        }

        public static event Delegates.set_fontSize_BeforeArgs set_fontSize
        {
            add
            {
                HookHandler._beforeset_fontSize += value;
                HookHandler.Hookset_fontSize();
            }
            remove => HookHandler._beforeset_fontSize -= value;
        }

        public static event Delegates.get_fontScale_BeforeArgs get_fontScale
        {
            add
            {
                HookHandler._beforeget_fontScale += value;
                HookHandler.Hookget_fontScale();
            }
            remove => HookHandler._beforeget_fontScale -= value;
        }

        public static event Delegates.get_fontWeight_BeforeArgs get_fontWeight
        {
            add
            {
                HookHandler._beforeget_fontWeight += value;
                HookHandler.Hookget_fontWeight();
            }
            remove => HookHandler._beforeget_fontWeight -= value;
        }

        public static event Delegates.set_fontWeight_BeforeArgs set_fontWeight
        {
            add
            {
                HookHandler._beforeset_fontWeight += value;
                HookHandler.Hookset_fontWeight();
            }
            remove => HookHandler._beforeset_fontWeight -= value;
        }

        public static event Delegates.get_pixelsPerUnit_BeforeArgs get_pixelsPerUnit
        {
            add
            {
                HookHandler._beforeget_pixelsPerUnit += value;
                HookHandler.Hookget_pixelsPerUnit();
            }
            remove => HookHandler._beforeget_pixelsPerUnit -= value;
        }

        public static event Delegates.get_enableAutoSizing_BeforeArgs get_enableAutoSizing
        {
            add
            {
                HookHandler._beforeget_enableAutoSizing += value;
                HookHandler.Hookget_enableAutoSizing();
            }
            remove => HookHandler._beforeget_enableAutoSizing -= value;
        }

        public static event Delegates.set_enableAutoSizing_BeforeArgs set_enableAutoSizing
        {
            add
            {
                HookHandler._beforeset_enableAutoSizing += value;
                HookHandler.Hookset_enableAutoSizing();
            }
            remove => HookHandler._beforeset_enableAutoSizing -= value;
        }

        public static event Delegates.get_fontSizeMin_BeforeArgs get_fontSizeMin
        {
            add
            {
                HookHandler._beforeget_fontSizeMin += value;
                HookHandler.Hookget_fontSizeMin();
            }
            remove => HookHandler._beforeget_fontSizeMin -= value;
        }

        public static event Delegates.set_fontSizeMin_BeforeArgs set_fontSizeMin
        {
            add
            {
                HookHandler._beforeset_fontSizeMin += value;
                HookHandler.Hookset_fontSizeMin();
            }
            remove => HookHandler._beforeset_fontSizeMin -= value;
        }

        public static event Delegates.get_fontSizeMax_BeforeArgs get_fontSizeMax
        {
            add
            {
                HookHandler._beforeget_fontSizeMax += value;
                HookHandler.Hookget_fontSizeMax();
            }
            remove => HookHandler._beforeget_fontSizeMax -= value;
        }

        public static event Delegates.set_fontSizeMax_BeforeArgs set_fontSizeMax
        {
            add
            {
                HookHandler._beforeset_fontSizeMax += value;
                HookHandler.Hookset_fontSizeMax();
            }
            remove => HookHandler._beforeset_fontSizeMax -= value;
        }

        public static event Delegates.get_fontStyle_BeforeArgs get_fontStyle
        {
            add
            {
                HookHandler._beforeget_fontStyle += value;
                HookHandler.Hookget_fontStyle();
            }
            remove => HookHandler._beforeget_fontStyle -= value;
        }

        public static event Delegates.set_fontStyle_BeforeArgs set_fontStyle
        {
            add
            {
                HookHandler._beforeset_fontStyle += value;
                HookHandler.Hookset_fontStyle();
            }
            remove => HookHandler._beforeset_fontStyle -= value;
        }

        public static event Delegates.get_isUsingBold_BeforeArgs get_isUsingBold
        {
            add
            {
                HookHandler._beforeget_isUsingBold += value;
                HookHandler.Hookget_isUsingBold();
            }
            remove => HookHandler._beforeget_isUsingBold -= value;
        }

        public static event Delegates.get_alignment_BeforeArgs get_alignment
        {
            add
            {
                HookHandler._beforeget_alignment += value;
                HookHandler.Hookget_alignment();
            }
            remove => HookHandler._beforeget_alignment -= value;
        }

        public static event Delegates.set_alignment_BeforeArgs set_alignment
        {
            add
            {
                HookHandler._beforeset_alignment += value;
                HookHandler.Hookset_alignment();
            }
            remove => HookHandler._beforeset_alignment -= value;
        }

        public static event Delegates.get_characterSpacing_BeforeArgs get_characterSpacing
        {
            add
            {
                HookHandler._beforeget_characterSpacing += value;
                HookHandler.Hookget_characterSpacing();
            }
            remove => HookHandler._beforeget_characterSpacing -= value;
        }

        public static event Delegates.set_characterSpacing_BeforeArgs set_characterSpacing
        {
            add
            {
                HookHandler._beforeset_characterSpacing += value;
                HookHandler.Hookset_characterSpacing();
            }
            remove => HookHandler._beforeset_characterSpacing -= value;
        }

        public static event Delegates.get_lineSpacing_BeforeArgs get_lineSpacing
        {
            add
            {
                HookHandler._beforeget_lineSpacing += value;
                HookHandler.Hookget_lineSpacing();
            }
            remove => HookHandler._beforeget_lineSpacing -= value;
        }

        public static event Delegates.set_lineSpacing_BeforeArgs set_lineSpacing
        {
            add
            {
                HookHandler._beforeset_lineSpacing += value;
                HookHandler.Hookset_lineSpacing();
            }
            remove => HookHandler._beforeset_lineSpacing -= value;
        }

        public static event Delegates.get_paragraphSpacing_BeforeArgs get_paragraphSpacing
        {
            add
            {
                HookHandler._beforeget_paragraphSpacing += value;
                HookHandler.Hookget_paragraphSpacing();
            }
            remove => HookHandler._beforeget_paragraphSpacing -= value;
        }

        public static event Delegates.set_paragraphSpacing_BeforeArgs set_paragraphSpacing
        {
            add
            {
                HookHandler._beforeset_paragraphSpacing += value;
                HookHandler.Hookset_paragraphSpacing();
            }
            remove => HookHandler._beforeset_paragraphSpacing -= value;
        }

        public static event Delegates.get_characterWidthAdjustment_BeforeArgs get_characterWidthAdjustment
        {
            add
            {
                HookHandler._beforeget_characterWidthAdjustment += value;
                HookHandler.Hookget_characterWidthAdjustment();
            }
            remove => HookHandler._beforeget_characterWidthAdjustment -= value;
        }

        public static event Delegates.set_characterWidthAdjustment_BeforeArgs set_characterWidthAdjustment
        {
            add
            {
                HookHandler._beforeset_characterWidthAdjustment += value;
                HookHandler.Hookset_characterWidthAdjustment();
            }
            remove => HookHandler._beforeset_characterWidthAdjustment -= value;
        }

        public static event Delegates.get_enableWordWrapping_BeforeArgs get_enableWordWrapping
        {
            add
            {
                HookHandler._beforeget_enableWordWrapping += value;
                HookHandler.Hookget_enableWordWrapping();
            }
            remove => HookHandler._beforeget_enableWordWrapping -= value;
        }

        public static event Delegates.set_enableWordWrapping_BeforeArgs set_enableWordWrapping
        {
            add
            {
                HookHandler._beforeset_enableWordWrapping += value;
                HookHandler.Hookset_enableWordWrapping();
            }
            remove => HookHandler._beforeset_enableWordWrapping -= value;
        }

        public static event Delegates.get_wordWrappingRatios_BeforeArgs get_wordWrappingRatios
        {
            add
            {
                HookHandler._beforeget_wordWrappingRatios += value;
                HookHandler.Hookget_wordWrappingRatios();
            }
            remove => HookHandler._beforeget_wordWrappingRatios -= value;
        }

        public static event Delegates.set_wordWrappingRatios_BeforeArgs set_wordWrappingRatios
        {
            add
            {
                HookHandler._beforeset_wordWrappingRatios += value;
                HookHandler.Hookset_wordWrappingRatios();
            }
            remove => HookHandler._beforeset_wordWrappingRatios -= value;
        }

        public static event Delegates.get_enableAdaptiveJustification_BeforeArgs get_enableAdaptiveJustification
        {
            add
            {
                HookHandler._beforeget_enableAdaptiveJustification += value;
                HookHandler.Hookget_enableAdaptiveJustification();
            }
            remove => HookHandler._beforeget_enableAdaptiveJustification -= value;
        }

        public static event Delegates.set_enableAdaptiveJustification_BeforeArgs set_enableAdaptiveJustification
        {
            add
            {
                HookHandler._beforeset_enableAdaptiveJustification += value;
                HookHandler.Hookset_enableAdaptiveJustification();
            }
            remove => HookHandler._beforeset_enableAdaptiveJustification -= value;
        }

        public static event Delegates.get_OverflowMode_BeforeArgs get_OverflowMode
        {
            add
            {
                HookHandler._beforeget_OverflowMode += value;
                HookHandler.Hookget_OverflowMode();
            }
            remove => HookHandler._beforeget_OverflowMode -= value;
        }

        public static event Delegates.set_OverflowMode_BeforeArgs set_OverflowMode
        {
            add
            {
                HookHandler._beforeset_OverflowMode += value;
                HookHandler.Hookset_OverflowMode();
            }
            remove => HookHandler._beforeset_OverflowMode -= value;
        }

        public static event Delegates.get_enableKerning_BeforeArgs get_enableKerning
        {
            add
            {
                HookHandler._beforeget_enableKerning += value;
                HookHandler.Hookget_enableKerning();
            }
            remove => HookHandler._beforeget_enableKerning -= value;
        }

        public static event Delegates.set_enableKerning_BeforeArgs set_enableKerning
        {
            add
            {
                HookHandler._beforeset_enableKerning += value;
                HookHandler.Hookset_enableKerning();
            }
            remove => HookHandler._beforeset_enableKerning -= value;
        }

        public static event Delegates.get_extraPadding_BeforeArgs get_extraPadding
        {
            add
            {
                HookHandler._beforeget_extraPadding += value;
                HookHandler.Hookget_extraPadding();
            }
            remove => HookHandler._beforeget_extraPadding -= value;
        }

        public static event Delegates.set_extraPadding_BeforeArgs set_extraPadding
        {
            add
            {
                HookHandler._beforeset_extraPadding += value;
                HookHandler.Hookset_extraPadding();
            }
            remove => HookHandler._beforeset_extraPadding -= value;
        }

        public static event Delegates.get_richText_BeforeArgs get_richText
        {
            add
            {
                HookHandler._beforeget_richText += value;
                HookHandler.Hookget_richText();
            }
            remove => HookHandler._beforeget_richText -= value;
        }

        public static event Delegates.set_richText_BeforeArgs set_richText
        {
            add
            {
                HookHandler._beforeset_richText += value;
                HookHandler.Hookset_richText();
            }
            remove => HookHandler._beforeset_richText -= value;
        }

        public static event Delegates.get_parseCtrlCharacters_BeforeArgs get_parseCtrlCharacters
        {
            add
            {
                HookHandler._beforeget_parseCtrlCharacters += value;
                HookHandler.Hookget_parseCtrlCharacters();
            }
            remove => HookHandler._beforeget_parseCtrlCharacters -= value;
        }

        public static event Delegates.set_parseCtrlCharacters_BeforeArgs set_parseCtrlCharacters
        {
            add
            {
                HookHandler._beforeset_parseCtrlCharacters += value;
                HookHandler.Hookset_parseCtrlCharacters();
            }
            remove => HookHandler._beforeset_parseCtrlCharacters -= value;
        }

        public static event Delegates.get_isOverlay_BeforeArgs get_isOverlay
        {
            add
            {
                HookHandler._beforeget_isOverlay += value;
                HookHandler.Hookget_isOverlay();
            }
            remove => HookHandler._beforeget_isOverlay -= value;
        }

        public static event Delegates.set_isOverlay_BeforeArgs set_isOverlay
        {
            add
            {
                HookHandler._beforeset_isOverlay += value;
                HookHandler.Hookset_isOverlay();
            }
            remove => HookHandler._beforeset_isOverlay -= value;
        }

        public static event Delegates.get_isOrthographic_BeforeArgs get_isOrthographic
        {
            add
            {
                HookHandler._beforeget_isOrthographic += value;
                HookHandler.Hookget_isOrthographic();
            }
            remove => HookHandler._beforeget_isOrthographic -= value;
        }

        public static event Delegates.set_isOrthographic_BeforeArgs set_isOrthographic
        {
            add
            {
                HookHandler._beforeset_isOrthographic += value;
                HookHandler.Hookset_isOrthographic();
            }
            remove => HookHandler._beforeset_isOrthographic -= value;
        }

        public static event Delegates.get_enableCulling_BeforeArgs get_enableCulling
        {
            add
            {
                HookHandler._beforeget_enableCulling += value;
                HookHandler.Hookget_enableCulling();
            }
            remove => HookHandler._beforeget_enableCulling -= value;
        }

        public static event Delegates.set_enableCulling_BeforeArgs set_enableCulling
        {
            add
            {
                HookHandler._beforeset_enableCulling += value;
                HookHandler.Hookset_enableCulling();
            }
            remove => HookHandler._beforeset_enableCulling -= value;
        }

        public static event Delegates.get_ignoreVisibility_BeforeArgs get_ignoreVisibility
        {
            add
            {
                HookHandler._beforeget_ignoreVisibility += value;
                HookHandler.Hookget_ignoreVisibility();
            }
            remove => HookHandler._beforeget_ignoreVisibility -= value;
        }

        public static event Delegates.set_ignoreVisibility_BeforeArgs set_ignoreVisibility
        {
            add
            {
                HookHandler._beforeset_ignoreVisibility += value;
                HookHandler.Hookset_ignoreVisibility();
            }
            remove => HookHandler._beforeset_ignoreVisibility -= value;
        }

        public static event Delegates.get_horizontalMapping_BeforeArgs get_horizontalMapping
        {
            add
            {
                HookHandler._beforeget_horizontalMapping += value;
                HookHandler.Hookget_horizontalMapping();
            }
            remove => HookHandler._beforeget_horizontalMapping -= value;
        }

        public static event Delegates.set_horizontalMapping_BeforeArgs set_horizontalMapping
        {
            add
            {
                HookHandler._beforeset_horizontalMapping += value;
                HookHandler.Hookset_horizontalMapping();
            }
            remove => HookHandler._beforeset_horizontalMapping -= value;
        }

        public static event Delegates.get_verticalMapping_BeforeArgs get_verticalMapping
        {
            add
            {
                HookHandler._beforeget_verticalMapping += value;
                HookHandler.Hookget_verticalMapping();
            }
            remove => HookHandler._beforeget_verticalMapping -= value;
        }

        public static event Delegates.set_verticalMapping_BeforeArgs set_verticalMapping
        {
            add
            {
                HookHandler._beforeset_verticalMapping += value;
                HookHandler.Hookset_verticalMapping();
            }
            remove => HookHandler._beforeset_verticalMapping -= value;
        }

        public static event Delegates.get_renderMode_BeforeArgs get_renderMode
        {
            add
            {
                HookHandler._beforeget_renderMode += value;
                HookHandler.Hookget_renderMode();
            }
            remove => HookHandler._beforeget_renderMode -= value;
        }

        public static event Delegates.set_renderMode_BeforeArgs set_renderMode
        {
            add
            {
                HookHandler._beforeset_renderMode += value;
                HookHandler.Hookset_renderMode();
            }
            remove => HookHandler._beforeset_renderMode -= value;
        }

        public static event Delegates.get_maxVisibleCharacters_BeforeArgs get_maxVisibleCharacters
        {
            add
            {
                HookHandler._beforeget_maxVisibleCharacters += value;
                HookHandler.Hookget_maxVisibleCharacters();
            }
            remove => HookHandler._beforeget_maxVisibleCharacters -= value;
        }

        public static event Delegates.set_maxVisibleCharacters_BeforeArgs set_maxVisibleCharacters
        {
            add
            {
                HookHandler._beforeset_maxVisibleCharacters += value;
                HookHandler.Hookset_maxVisibleCharacters();
            }
            remove => HookHandler._beforeset_maxVisibleCharacters -= value;
        }

        public static event Delegates.get_maxVisibleWords_BeforeArgs get_maxVisibleWords
        {
            add
            {
                HookHandler._beforeget_maxVisibleWords += value;
                HookHandler.Hookget_maxVisibleWords();
            }
            remove => HookHandler._beforeget_maxVisibleWords -= value;
        }

        public static event Delegates.set_maxVisibleWords_BeforeArgs set_maxVisibleWords
        {
            add
            {
                HookHandler._beforeset_maxVisibleWords += value;
                HookHandler.Hookset_maxVisibleWords();
            }
            remove => HookHandler._beforeset_maxVisibleWords -= value;
        }

        public static event Delegates.get_maxVisibleLines_BeforeArgs get_maxVisibleLines
        {
            add
            {
                HookHandler._beforeget_maxVisibleLines += value;
                HookHandler.Hookget_maxVisibleLines();
            }
            remove => HookHandler._beforeget_maxVisibleLines -= value;
        }

        public static event Delegates.set_maxVisibleLines_BeforeArgs set_maxVisibleLines
        {
            add
            {
                HookHandler._beforeset_maxVisibleLines += value;
                HookHandler.Hookset_maxVisibleLines();
            }
            remove => HookHandler._beforeset_maxVisibleLines -= value;
        }

        public static event Delegates.get_useMaxVisibleDescender_BeforeArgs get_useMaxVisibleDescender
        {
            add
            {
                HookHandler._beforeget_useMaxVisibleDescender += value;
                HookHandler.Hookget_useMaxVisibleDescender();
            }
            remove => HookHandler._beforeget_useMaxVisibleDescender -= value;
        }

        public static event Delegates.set_useMaxVisibleDescender_BeforeArgs set_useMaxVisibleDescender
        {
            add
            {
                HookHandler._beforeset_useMaxVisibleDescender += value;
                HookHandler.Hookset_useMaxVisibleDescender();
            }
            remove => HookHandler._beforeset_useMaxVisibleDescender -= value;
        }

        public static event Delegates.get_pageToDisplay_BeforeArgs get_pageToDisplay
        {
            add
            {
                HookHandler._beforeget_pageToDisplay += value;
                HookHandler.Hookget_pageToDisplay();
            }
            remove => HookHandler._beforeget_pageToDisplay -= value;
        }

        public static event Delegates.set_pageToDisplay_BeforeArgs set_pageToDisplay
        {
            add
            {
                HookHandler._beforeset_pageToDisplay += value;
                HookHandler.Hookset_pageToDisplay();
            }
            remove => HookHandler._beforeset_pageToDisplay -= value;
        }

        public static event Delegates.get_margin_BeforeArgs get_margin
        {
            add
            {
                HookHandler._beforeget_margin += value;
                HookHandler.Hookget_margin();
            }
            remove => HookHandler._beforeget_margin -= value;
        }

        public static event Delegates.set_margin_BeforeArgs set_margin
        {
            add
            {
                HookHandler._beforeset_margin += value;
                HookHandler.Hookset_margin();
            }
            remove => HookHandler._beforeset_margin -= value;
        }

        public static event Delegates.get_textInfo_BeforeArgs get_textInfo
        {
            add
            {
                HookHandler._beforeget_textInfo += value;
                HookHandler.Hookget_textInfo();
            }
            remove => HookHandler._beforeget_textInfo -= value;
        }

        public static event Delegates.get_havePropertiesChanged_BeforeArgs get_havePropertiesChanged
        {
            add
            {
                HookHandler._beforeget_havePropertiesChanged += value;
                HookHandler.Hookget_havePropertiesChanged();
            }
            remove => HookHandler._beforeget_havePropertiesChanged -= value;
        }

        public static event Delegates.set_havePropertiesChanged_BeforeArgs set_havePropertiesChanged
        {
            add
            {
                HookHandler._beforeset_havePropertiesChanged += value;
                HookHandler.Hookset_havePropertiesChanged();
            }
            remove => HookHandler._beforeset_havePropertiesChanged -= value;
        }

        public static event Delegates.get_isUsingLegacyAnimationComponent_BeforeArgs get_isUsingLegacyAnimationComponent
        {
            add
            {
                HookHandler._beforeget_isUsingLegacyAnimationComponent += value;
                HookHandler.Hookget_isUsingLegacyAnimationComponent();
            }
            remove => HookHandler._beforeget_isUsingLegacyAnimationComponent -= value;
        }

        public static event Delegates.set_isUsingLegacyAnimationComponent_BeforeArgs set_isUsingLegacyAnimationComponent
        {
            add
            {
                HookHandler._beforeset_isUsingLegacyAnimationComponent += value;
                HookHandler.Hookset_isUsingLegacyAnimationComponent();
            }
            remove => HookHandler._beforeset_isUsingLegacyAnimationComponent -= value;
        }

        public static event Delegates.get_transform_BeforeArgs get_transform
        {
            add
            {
                HookHandler._beforeget_transform += value;
                HookHandler.Hookget_transform();
            }
            remove => HookHandler._beforeget_transform -= value;
        }

        public static event Delegates.get_rectTransform_BeforeArgs get_rectTransform
        {
            add
            {
                HookHandler._beforeget_rectTransform += value;
                HookHandler.Hookget_rectTransform();
            }
            remove => HookHandler._beforeget_rectTransform -= value;
        }

        public static event Delegates.get_autoSizeTextContainer_BeforeArgs get_autoSizeTextContainer
        {
            add
            {
                HookHandler._beforeget_autoSizeTextContainer += value;
                HookHandler.Hookget_autoSizeTextContainer();
            }
            remove => HookHandler._beforeget_autoSizeTextContainer -= value;
        }

        public static event Delegates.set_autoSizeTextContainer_BeforeArgs set_autoSizeTextContainer
        {
            add
            {
                HookHandler._beforeset_autoSizeTextContainer += value;
                HookHandler.Hookset_autoSizeTextContainer();
            }
            remove => HookHandler._beforeset_autoSizeTextContainer -= value;
        }

        public static event Delegates.get_mesh_BeforeArgs get_mesh
        {
            add
            {
                HookHandler._beforeget_mesh += value;
                HookHandler.Hookget_mesh();
            }
            remove => HookHandler._beforeget_mesh -= value;
        }

        public static event Delegates.get_isVolumetricText_BeforeArgs get_isVolumetricText
        {
            add
            {
                HookHandler._beforeget_isVolumetricText += value;
                HookHandler.Hookget_isVolumetricText();
            }
            remove => HookHandler._beforeget_isVolumetricText -= value;
        }

        public static event Delegates.set_isVolumetricText_BeforeArgs set_isVolumetricText
        {
            add
            {
                HookHandler._beforeset_isVolumetricText += value;
                HookHandler.Hookset_isVolumetricText();
            }
            remove => HookHandler._beforeset_isVolumetricText -= value;
        }

        public static event Delegates.get_bounds_BeforeArgs get_bounds
        {
            add
            {
                HookHandler._beforeget_bounds += value;
                HookHandler.Hookget_bounds();
            }
            remove => HookHandler._beforeget_bounds -= value;
        }

        public static event Delegates.get_textBounds_BeforeArgs get_textBounds
        {
            add
            {
                HookHandler._beforeget_textBounds += value;
                HookHandler.Hookget_textBounds();
            }
            remove => HookHandler._beforeget_textBounds -= value;
        }

        public static event Delegates.get_flexibleHeight_BeforeArgs get_flexibleHeight
        {
            add
            {
                HookHandler._beforeget_flexibleHeight += value;
                HookHandler.Hookget_flexibleHeight();
            }
            remove => HookHandler._beforeget_flexibleHeight -= value;
        }

        public static event Delegates.get_flexibleWidth_BeforeArgs get_flexibleWidth
        {
            add
            {
                HookHandler._beforeget_flexibleWidth += value;
                HookHandler.Hookget_flexibleWidth();
            }
            remove => HookHandler._beforeget_flexibleWidth -= value;
        }

        public static event Delegates.get_minHeight_BeforeArgs get_minHeight
        {
            add
            {
                HookHandler._beforeget_minHeight += value;
                HookHandler.Hookget_minHeight();
            }
            remove => HookHandler._beforeget_minHeight -= value;
        }

        public static event Delegates.get_minWidth_BeforeArgs get_minWidth
        {
            add
            {
                HookHandler._beforeget_minWidth += value;
                HookHandler.Hookget_minWidth();
            }
            remove => HookHandler._beforeget_minWidth -= value;
        }

        public static event Delegates.get_preferredWidth_BeforeArgs get_preferredWidth
        {
            add
            {
                HookHandler._beforeget_preferredWidth += value;
                HookHandler.Hookget_preferredWidth();
            }
            remove => HookHandler._beforeget_preferredWidth -= value;
        }

        public static event Delegates.get_preferredHeight_BeforeArgs get_preferredHeight
        {
            add
            {
                HookHandler._beforeget_preferredHeight += value;
                HookHandler.Hookget_preferredHeight();
            }
            remove => HookHandler._beforeget_preferredHeight -= value;
        }

        public static event Delegates.get_renderedWidth_BeforeArgs get_renderedWidth
        {
            add
            {
                HookHandler._beforeget_renderedWidth += value;
                HookHandler.Hookget_renderedWidth();
            }
            remove => HookHandler._beforeget_renderedWidth -= value;
        }

        public static event Delegates.get_renderedHeight_BeforeArgs get_renderedHeight
        {
            add
            {
                HookHandler._beforeget_renderedHeight += value;
                HookHandler.Hookget_renderedHeight();
            }
            remove => HookHandler._beforeget_renderedHeight -= value;
        }

        public static event Delegates.get_layoutPriority_BeforeArgs get_layoutPriority
        {
            add
            {
                HookHandler._beforeget_layoutPriority += value;
                HookHandler.Hookget_layoutPriority();
            }
            remove => HookHandler._beforeget_layoutPriority -= value;
        }

        public static event Delegates.LoadFontAsset_BeforeArgs LoadFontAsset
        {
            add
            {
                HookHandler._beforeLoadFontAsset += value;
                HookHandler.HookLoadFontAsset();
            }
            remove => HookHandler._beforeLoadFontAsset -= value;
        }

        public static event Delegates.SetSharedMaterial_BeforeArgs SetSharedMaterial
        {
            add
            {
                HookHandler._beforeSetSharedMaterial += value;
                HookHandler.HookSetSharedMaterial();
            }
            remove => HookHandler._beforeSetSharedMaterial -= value;
        }

        public static event Delegates.GetMaterial_BeforeArgs GetMaterial
        {
            add
            {
                HookHandler._beforeGetMaterial += value;
                HookHandler.HookGetMaterial();
            }
            remove => HookHandler._beforeGetMaterial -= value;
        }

        public static event Delegates.SetFontBaseMaterial_BeforeArgs SetFontBaseMaterial
        {
            add
            {
                HookHandler._beforeSetFontBaseMaterial += value;
                HookHandler.HookSetFontBaseMaterial();
            }
            remove => HookHandler._beforeSetFontBaseMaterial -= value;
        }

        public static event Delegates.GetSharedMaterials_BeforeArgs GetSharedMaterials
        {
            add
            {
                HookHandler._beforeGetSharedMaterials += value;
                HookHandler.HookGetSharedMaterials();
            }
            remove => HookHandler._beforeGetSharedMaterials -= value;
        }

        public static event Delegates.SetSharedMaterials_BeforeArgs SetSharedMaterials
        {
            add
            {
                HookHandler._beforeSetSharedMaterials += value;
                HookHandler.HookSetSharedMaterials();
            }
            remove => HookHandler._beforeSetSharedMaterials -= value;
        }

        public static event Delegates.GetMaterials_BeforeArgs GetMaterials
        {
            add
            {
                HookHandler._beforeGetMaterials += value;
                HookHandler.HookGetMaterials();
            }
            remove => HookHandler._beforeGetMaterials -= value;
        }

        public static event Delegates.CreateMaterialInstance_BeforeArgs CreateMaterialInstance
        {
            add
            {
                HookHandler._beforeCreateMaterialInstance += value;
                HookHandler.HookCreateMaterialInstance();
            }
            remove => HookHandler._beforeCreateMaterialInstance -= value;
        }

        public static event Delegates.SetVertexColorGradient_BeforeArgs SetVertexColorGradient
        {
            add
            {
                HookHandler._beforeSetVertexColorGradient += value;
                HookHandler.HookSetVertexColorGradient();
            }
            remove => HookHandler._beforeSetVertexColorGradient -= value;
        }

        public static event Delegates.SetFaceColor_BeforeArgs SetFaceColor
        {
            add
            {
                HookHandler._beforeSetFaceColor += value;
                HookHandler.HookSetFaceColor();
            }
            remove => HookHandler._beforeSetFaceColor -= value;
        }

        public static event Delegates.SetOutlineColor_BeforeArgs SetOutlineColor
        {
            add
            {
                HookHandler._beforeSetOutlineColor += value;
                HookHandler.HookSetOutlineColor();
            }
            remove => HookHandler._beforeSetOutlineColor -= value;
        }

        public static event Delegates.SetOutlineThickness_BeforeArgs SetOutlineThickness
        {
            add
            {
                HookHandler._beforeSetOutlineThickness += value;
                HookHandler.HookSetOutlineThickness();
            }
            remove => HookHandler._beforeSetOutlineThickness -= value;
        }

        public static event Delegates.SetShaderDepth_BeforeArgs SetShaderDepth
        {
            add
            {
                HookHandler._beforeSetShaderDepth += value;
                HookHandler.HookSetShaderDepth();
            }
            remove => HookHandler._beforeSetShaderDepth -= value;
        }

        public static event Delegates.SetCulling_BeforeArgs SetCulling
        {
            add
            {
                HookHandler._beforeSetCulling += value;
                HookHandler.HookSetCulling();
            }
            remove => HookHandler._beforeSetCulling -= value;
        }

        public static event Delegates.GetPaddingForMaterial_BeforeArgs GetPaddingForMaterial
        {
            add
            {
                HookHandler._beforeGetPaddingForMaterial += value;
                HookHandler.HookGetPaddingForMaterial();
            }
            remove => HookHandler._beforeGetPaddingForMaterial -= value;
        }

        public static event Delegates.GetPaddingForMaterial_Material_BeforeArgs GetPaddingForMaterial_Material
        {
            add
            {
                HookHandler._beforeGetPaddingForMaterial_Material += value;
                HookHandler.HookGetPaddingForMaterial_Material();
            }
            remove => HookHandler._beforeGetPaddingForMaterial_Material -= value;
        }

        public static event Delegates.GetTextContainerLocalCorners_BeforeArgs GetTextContainerLocalCorners
        {
            add
            {
                HookHandler._beforeGetTextContainerLocalCorners += value;
                HookHandler.HookGetTextContainerLocalCorners();
            }
            remove => HookHandler._beforeGetTextContainerLocalCorners -= value;
        }

        public static event Delegates.ForceMeshUpdate_BeforeArgs ForceMeshUpdate
        {
            add
            {
                HookHandler._beforeForceMeshUpdate += value;
                HookHandler.HookForceMeshUpdate();
            }
            remove => HookHandler._beforeForceMeshUpdate -= value;
        }

        public static event Delegates.ForceMeshUpdate_bool_BeforeArgs ForceMeshUpdate_bool
        {
            add
            {
                HookHandler._beforeForceMeshUpdate_bool += value;
                HookHandler.HookForceMeshUpdate_bool();
            }
            remove => HookHandler._beforeForceMeshUpdate_bool -= value;
        }

        public static event Delegates.SetTextInternal_BeforeArgs SetTextInternal
        {
            add
            {
                HookHandler._beforeSetTextInternal += value;
                HookHandler.HookSetTextInternal();
            }
            remove => HookHandler._beforeSetTextInternal -= value;
        }

        public static event Delegates.UpdateGeometry_BeforeArgs UpdateGeometry
        {
            add
            {
                HookHandler._beforeUpdateGeometry += value;
                HookHandler.HookUpdateGeometry();
            }
            remove => HookHandler._beforeUpdateGeometry -= value;
        }

        public static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_BeforeArgs
            UpdateVertexData_TMP_VertexDataUpdateFlags
            {
                add
                {
                    HookHandler._beforeUpdateVertexData_TMP_VertexDataUpdateFlags += value;
                    HookHandler.HookUpdateVertexData_TMP_VertexDataUpdateFlags();
                }
                remove => HookHandler._beforeUpdateVertexData_TMP_VertexDataUpdateFlags -= value;
            }

        public static event Delegates.UpdateVertexData_BeforeArgs UpdateVertexData
        {
            add
            {
                HookHandler._beforeUpdateVertexData += value;
                HookHandler.HookUpdateVertexData();
            }
            remove => HookHandler._beforeUpdateVertexData -= value;
        }

        public static event Delegates.SetVertices_BeforeArgs SetVertices
        {
            add
            {
                HookHandler._beforeSetVertices += value;
                HookHandler.HookSetVertices();
            }
            remove => HookHandler._beforeSetVertices -= value;
        }

        public static event Delegates.UpdateMeshPadding_BeforeArgs UpdateMeshPadding
        {
            add
            {
                HookHandler._beforeUpdateMeshPadding += value;
                HookHandler.HookUpdateMeshPadding();
            }
            remove => HookHandler._beforeUpdateMeshPadding -= value;
        }

        public static event Delegates.CrossFadeColor_BeforeArgs CrossFadeColor
        {
            add
            {
                HookHandler._beforeCrossFadeColor += value;
                HookHandler.HookCrossFadeColor();
            }
            remove => HookHandler._beforeCrossFadeColor -= value;
        }

        public static event Delegates.CrossFadeAlpha_BeforeArgs CrossFadeAlpha
        {
            add
            {
                HookHandler._beforeCrossFadeAlpha += value;
                HookHandler.HookCrossFadeAlpha();
            }
            remove => HookHandler._beforeCrossFadeAlpha -= value;
        }

        public static event Delegates.InternalCrossFadeColor_BeforeArgs InternalCrossFadeColor
        {
            add
            {
                HookHandler._beforeInternalCrossFadeColor += value;
                HookHandler.HookInternalCrossFadeColor();
            }
            remove => HookHandler._beforeInternalCrossFadeColor -= value;
        }

        public static event Delegates.InternalCrossFadeAlpha_BeforeArgs InternalCrossFadeAlpha
        {
            add
            {
                HookHandler._beforeInternalCrossFadeAlpha += value;
                HookHandler.HookInternalCrossFadeAlpha();
            }
            remove => HookHandler._beforeInternalCrossFadeAlpha -= value;
        }

        public static event Delegates.ParseInputText_BeforeArgs ParseInputText
        {
            add
            {
                HookHandler._beforeParseInputText += value;
                HookHandler.HookParseInputText();
            }
            remove => HookHandler._beforeParseInputText -= value;
        }

        public static event Delegates.SetText_string_BeforeArgs SetText_string
        {
            add
            {
                HookHandler._beforeSetText_string += value;
                HookHandler.HookSetText_string();
            }
            remove => HookHandler._beforeSetText_string -= value;
        }

        public static event Delegates.SetText_string_float_BeforeArgs SetText_string_float
        {
            add
            {
                HookHandler._beforeSetText_string_float += value;
                HookHandler.HookSetText_string_float();
            }
            remove => HookHandler._beforeSetText_string_float -= value;
        }

        public static event Delegates.SetText_string_float_float_BeforeArgs SetText_string_float_float
        {
            add
            {
                HookHandler._beforeSetText_string_float_float += value;
                HookHandler.HookSetText_string_float_float();
            }
            remove => HookHandler._beforeSetText_string_float_float -= value;
        }

        public static event Delegates.SetText_string_float_float_float_BeforeArgs SetText_string_float_float_float
        {
            add
            {
                HookHandler._beforeSetText_string_float_float_float += value;
                HookHandler.HookSetText_string_float_float_float();
            }
            remove => HookHandler._beforeSetText_string_float_float_float -= value;
        }

        public static event Delegates.SetText_StringBuilder_BeforeArgs SetText_StringBuilder
        {
            add
            {
                HookHandler._beforeSetText_StringBuilder += value;
                HookHandler.HookSetText_StringBuilder();
            }
            remove => HookHandler._beforeSetText_StringBuilder -= value;
        }

        public static event Delegates.SetCharArray_BeforeArgs SetCharArray
        {
            add
            {
                HookHandler._beforeSetCharArray += value;
                HookHandler.HookSetCharArray();
            }
            remove => HookHandler._beforeSetCharArray -= value;
        }

        public static event Delegates.SetTextArrayToCharArray_BeforeArgs SetTextArrayToCharArray
        {
            add
            {
                HookHandler._beforeSetTextArrayToCharArray += value;
                HookHandler.HookSetTextArrayToCharArray();
            }
            remove => HookHandler._beforeSetTextArrayToCharArray -= value;
        }

        public static event Delegates.StringToCharArray_BeforeArgs StringToCharArray
        {
            add
            {
                HookHandler._beforeStringToCharArray += value;
                HookHandler.HookStringToCharArray();
            }
            remove => HookHandler._beforeStringToCharArray -= value;
        }

        public static event Delegates.StringBuilderToIntArray_BeforeArgs StringBuilderToIntArray
        {
            add
            {
                HookHandler._beforeStringBuilderToIntArray += value;
                HookHandler.HookStringBuilderToIntArray();
            }
            remove => HookHandler._beforeStringBuilderToIntArray -= value;
        }

        public static event Delegates.AddFloatToCharArray_BeforeArgs AddFloatToCharArray
        {
            add
            {
                HookHandler._beforeAddFloatToCharArray += value;
                HookHandler.HookAddFloatToCharArray();
            }
            remove => HookHandler._beforeAddFloatToCharArray -= value;
        }

        public static event Delegates.AddIntToCharArray_BeforeArgs AddIntToCharArray
        {
            add
            {
                HookHandler._beforeAddIntToCharArray += value;
                HookHandler.HookAddIntToCharArray();
            }
            remove => HookHandler._beforeAddIntToCharArray -= value;
        }

        public static event Delegates.SetArraySizes_BeforeArgs SetArraySizes
        {
            add
            {
                HookHandler._beforeSetArraySizes += value;
                HookHandler.HookSetArraySizes();
            }
            remove => HookHandler._beforeSetArraySizes -= value;
        }

        public static event Delegates.GenerateTextMesh_BeforeArgs GenerateTextMesh
        {
            add
            {
                HookHandler._beforeGenerateTextMesh += value;
                HookHandler.HookGenerateTextMesh();
            }
            remove => HookHandler._beforeGenerateTextMesh -= value;
        }

        public static event Delegates.GetPreferredValues_BeforeArgs GetPreferredValues
        {
            add
            {
                HookHandler._beforeGetPreferredValues += value;
                HookHandler.HookGetPreferredValues();
            }
            remove => HookHandler._beforeGetPreferredValues -= value;
        }

        public static event Delegates.GetPreferredValues_float_float_BeforeArgs GetPreferredValues_float_float
        {
            add
            {
                HookHandler._beforeGetPreferredValues_float_float += value;
                HookHandler.HookGetPreferredValues_float_float();
            }
            remove => HookHandler._beforeGetPreferredValues_float_float -= value;
        }

        public static event Delegates.GetPreferredValues_string_BeforeArgs GetPreferredValues_string
        {
            add
            {
                HookHandler._beforeGetPreferredValues_string += value;
                HookHandler.HookGetPreferredValues_string();
            }
            remove => HookHandler._beforeGetPreferredValues_string -= value;
        }

        public static event Delegates.GetPreferredValues_string_float_float_BeforeArgs
            GetPreferredValues_string_float_float
            {
                add
                {
                    HookHandler._beforeGetPreferredValues_string_float_float += value;
                    HookHandler.HookGetPreferredValues_string_float_float();
                }
                remove => HookHandler._beforeGetPreferredValues_string_float_float -= value;
            }

        public static event Delegates.GetPreferredWidth_BeforeArgs GetPreferredWidth
        {
            add
            {
                HookHandler._beforeGetPreferredWidth += value;
                HookHandler.HookGetPreferredWidth();
            }
            remove => HookHandler._beforeGetPreferredWidth -= value;
        }

        public static event Delegates.GetPreferredWidth_Vector2_BeforeArgs GetPreferredWidth_Vector2
        {
            add
            {
                HookHandler._beforeGetPreferredWidth_Vector2 += value;
                HookHandler.HookGetPreferredWidth_Vector2();
            }
            remove => HookHandler._beforeGetPreferredWidth_Vector2 -= value;
        }

        public static event Delegates.GetPreferredHeight_BeforeArgs GetPreferredHeight
        {
            add
            {
                HookHandler._beforeGetPreferredHeight += value;
                HookHandler.HookGetPreferredHeight();
            }
            remove => HookHandler._beforeGetPreferredHeight -= value;
        }

        public static event Delegates.GetPreferredHeight_Vector2_BeforeArgs GetPreferredHeight_Vector2
        {
            add
            {
                HookHandler._beforeGetPreferredHeight_Vector2 += value;
                HookHandler.HookGetPreferredHeight_Vector2();
            }
            remove => HookHandler._beforeGetPreferredHeight_Vector2 -= value;
        }

        public static event Delegates.GetRenderedValues_BeforeArgs GetRenderedValues
        {
            add
            {
                HookHandler._beforeGetRenderedValues += value;
                HookHandler.HookGetRenderedValues();
            }
            remove => HookHandler._beforeGetRenderedValues -= value;
        }

        public static event Delegates.GetRenderedWidth_BeforeArgs GetRenderedWidth
        {
            add
            {
                HookHandler._beforeGetRenderedWidth += value;
                HookHandler.HookGetRenderedWidth();
            }
            remove => HookHandler._beforeGetRenderedWidth -= value;
        }

        public static event Delegates.GetRenderedHeight_BeforeArgs GetRenderedHeight
        {
            add
            {
                HookHandler._beforeGetRenderedHeight += value;
                HookHandler.HookGetRenderedHeight();
            }
            remove => HookHandler._beforeGetRenderedHeight -= value;
        }

        public static event Delegates.CalculatePreferredValues_BeforeArgs CalculatePreferredValues
        {
            add
            {
                HookHandler._beforeCalculatePreferredValues += value;
                HookHandler.HookCalculatePreferredValues();
            }
            remove => HookHandler._beforeCalculatePreferredValues -= value;
        }

        public static event Delegates.GetCompoundBounds_BeforeArgs GetCompoundBounds
        {
            add
            {
                HookHandler._beforeGetCompoundBounds += value;
                HookHandler.HookGetCompoundBounds();
            }
            remove => HookHandler._beforeGetCompoundBounds -= value;
        }

        public static event Delegates.GetTextBounds_BeforeArgs GetTextBounds
        {
            add
            {
                HookHandler._beforeGetTextBounds += value;
                HookHandler.HookGetTextBounds();
            }
            remove => HookHandler._beforeGetTextBounds -= value;
        }

        public static event Delegates.AdjustLineOffset_BeforeArgs AdjustLineOffset
        {
            add
            {
                HookHandler._beforeAdjustLineOffset += value;
                HookHandler.HookAdjustLineOffset();
            }
            remove => HookHandler._beforeAdjustLineOffset -= value;
        }

        public static event Delegates.ResizeLineExtents_BeforeArgs ResizeLineExtents
        {
            add
            {
                HookHandler._beforeResizeLineExtents += value;
                HookHandler.HookResizeLineExtents();
            }
            remove => HookHandler._beforeResizeLineExtents -= value;
        }

        public static event Delegates.GetTextInfo_BeforeArgs GetTextInfo
        {
            add
            {
                HookHandler._beforeGetTextInfo += value;
                HookHandler.HookGetTextInfo();
            }
            remove => HookHandler._beforeGetTextInfo -= value;
        }

        public static event Delegates.ComputeMarginSize_BeforeArgs ComputeMarginSize
        {
            add
            {
                HookHandler._beforeComputeMarginSize += value;
                HookHandler.HookComputeMarginSize();
            }
            remove => HookHandler._beforeComputeMarginSize -= value;
        }

        public static event Delegates.GetArraySizes_BeforeArgs GetArraySizes
        {
            add
            {
                HookHandler._beforeGetArraySizes += value;
                HookHandler.HookGetArraySizes();
            }
            remove => HookHandler._beforeGetArraySizes -= value;
        }

        public static event Delegates.SaveWordWrappingState_BeforeArgs SaveWordWrappingState
        {
            add
            {
                HookHandler._beforeSaveWordWrappingState += value;
                HookHandler.HookSaveWordWrappingState();
            }
            remove => HookHandler._beforeSaveWordWrappingState -= value;
        }

        public static event Delegates.RestoreWordWrappingState_BeforeArgs RestoreWordWrappingState
        {
            add
            {
                HookHandler._beforeRestoreWordWrappingState += value;
                HookHandler.HookRestoreWordWrappingState();
            }
            remove => HookHandler._beforeRestoreWordWrappingState -= value;
        }

        public static event Delegates.SaveGlyphVertexInfo_BeforeArgs SaveGlyphVertexInfo
        {
            add
            {
                HookHandler._beforeSaveGlyphVertexInfo += value;
                HookHandler.HookSaveGlyphVertexInfo();
            }
            remove => HookHandler._beforeSaveGlyphVertexInfo -= value;
        }

        public static event Delegates.SaveSpriteVertexInfo_BeforeArgs SaveSpriteVertexInfo
        {
            add
            {
                HookHandler._beforeSaveSpriteVertexInfo += value;
                HookHandler.HookSaveSpriteVertexInfo();
            }
            remove => HookHandler._beforeSaveSpriteVertexInfo -= value;
        }

        public static event Delegates.FillCharacterVertexBuffers_int_int_BeforeArgs FillCharacterVertexBuffers_int_int
        {
            add
            {
                HookHandler._beforeFillCharacterVertexBuffers_int_int += value;
                HookHandler.HookFillCharacterVertexBuffers_int_int();
            }
            remove => HookHandler._beforeFillCharacterVertexBuffers_int_int -= value;
        }

        public static event Delegates.FillCharacterVertexBuffers_int_int_bool_BeforeArgs
            FillCharacterVertexBuffers_int_int_bool
            {
                add
                {
                    HookHandler._beforeFillCharacterVertexBuffers_int_int_bool += value;
                    HookHandler.HookFillCharacterVertexBuffers_int_int_bool();
                }
                remove => HookHandler._beforeFillCharacterVertexBuffers_int_int_bool -= value;
            }

        public static event Delegates.FillSpriteVertexBuffers_BeforeArgs FillSpriteVertexBuffers
        {
            add
            {
                HookHandler._beforeFillSpriteVertexBuffers += value;
                HookHandler.HookFillSpriteVertexBuffers();
            }
            remove => HookHandler._beforeFillSpriteVertexBuffers -= value;
        }

        public static event Delegates.DrawUnderlineMesh_BeforeArgs DrawUnderlineMesh
        {
            add
            {
                HookHandler._beforeDrawUnderlineMesh += value;
                HookHandler.HookDrawUnderlineMesh();
            }
            remove => HookHandler._beforeDrawUnderlineMesh -= value;
        }

        public static event Delegates.GetSpecialCharacters_BeforeArgs GetSpecialCharacters
        {
            add
            {
                HookHandler._beforeGetSpecialCharacters += value;
                HookHandler.HookGetSpecialCharacters();
            }
            remove => HookHandler._beforeGetSpecialCharacters -= value;
        }

        public static event Delegates.GetFontAssetForWeight_BeforeArgs GetFontAssetForWeight
        {
            add
            {
                HookHandler._beforeGetFontAssetForWeight += value;
                HookHandler.HookGetFontAssetForWeight();
            }
            remove => HookHandler._beforeGetFontAssetForWeight -= value;
        }

        public static event Delegates.SetActiveSubMeshes_BeforeArgs SetActiveSubMeshes
        {
            add
            {
                HookHandler._beforeSetActiveSubMeshes += value;
                HookHandler.HookSetActiveSubMeshes();
            }
            remove => HookHandler._beforeSetActiveSubMeshes -= value;
        }

        public static event Delegates.PackUV_float_float_float_BeforeArgs PackUV_float_float_float
        {
            add
            {
                HookHandler._beforePackUV_float_float_float += value;
                HookHandler.HookPackUV_float_float_float();
            }
            remove => HookHandler._beforePackUV_float_float_float -= value;
        }

        public static event Delegates.PackUV_float_float_BeforeArgs PackUV_float_float
        {
            add
            {
                HookHandler._beforePackUV_float_float += value;
                HookHandler.HookPackUV_float_float();
            }
            remove => HookHandler._beforePackUV_float_float -= value;
        }

        public static event Delegates.HexToInt_BeforeArgs HexToInt
        {
            add
            {
                HookHandler._beforeHexToInt += value;
                HookHandler.HookHexToInt();
            }
            remove => HookHandler._beforeHexToInt -= value;
        }

        public static event Delegates.GetUTF16_BeforeArgs GetUTF16
        {
            add
            {
                HookHandler._beforeGetUTF16 += value;
                HookHandler.HookGetUTF16();
            }
            remove => HookHandler._beforeGetUTF16 -= value;
        }

        public static event Delegates.GetUTF32_BeforeArgs GetUTF32
        {
            add
            {
                HookHandler._beforeGetUTF32 += value;
                HookHandler.HookGetUTF32();
            }
            remove => HookHandler._beforeGetUTF32 -= value;
        }

        public static event Delegates.HexCharsToColor_Array_int_BeforeArgs HexCharsToColor_Array_int
        {
            add
            {
                HookHandler._beforeHexCharsToColor_Array_int += value;
                HookHandler.HookHexCharsToColor_Array_int();
            }
            remove => HookHandler._beforeHexCharsToColor_Array_int -= value;
        }

        public static event Delegates.HexCharsToColor_Array_int_int_BeforeArgs HexCharsToColor_Array_int_int
        {
            add
            {
                HookHandler._beforeHexCharsToColor_Array_int_int += value;
                HookHandler.HookHexCharsToColor_Array_int_int();
            }
            remove => HookHandler._beforeHexCharsToColor_Array_int_int -= value;
        }

        public static event Delegates.ConvertToFloat_BeforeArgs ConvertToFloat
        {
            add
            {
                HookHandler._beforeConvertToFloat += value;
                HookHandler.HookConvertToFloat();
            }
            remove => HookHandler._beforeConvertToFloat -= value;
        }

        public static event Delegates.ValidateHtmlTag_BeforeArgs ValidateHtmlTag
        {
            add
            {
                HookHandler._beforeValidateHtmlTag += value;
                HookHandler.HookValidateHtmlTag();
            }
            remove => HookHandler._beforeValidateHtmlTag -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_text_NormalArgs get_text
        {
            add
            {
                HookHandler._afterget_text += value;
                HookHandler.Hookget_text();
            }
            remove => HookHandler._afterget_text -= value;
        }

        public static event Delegates.set_text_NormalArgs set_text
        {
            add
            {
                HookHandler._afterset_text += value;
                HookHandler.Hookset_text();
            }
            remove => HookHandler._afterset_text -= value;
        }

        public static event Delegates.get_isRightToLeftText_NormalArgs get_isRightToLeftText
        {
            add
            {
                HookHandler._afterget_isRightToLeftText += value;
                HookHandler.Hookget_isRightToLeftText();
            }
            remove => HookHandler._afterget_isRightToLeftText -= value;
        }

        public static event Delegates.set_isRightToLeftText_NormalArgs set_isRightToLeftText
        {
            add
            {
                HookHandler._afterset_isRightToLeftText += value;
                HookHandler.Hookset_isRightToLeftText();
            }
            remove => HookHandler._afterset_isRightToLeftText -= value;
        }

        public static event Delegates.get_font_NormalArgs get_font
        {
            add
            {
                HookHandler._afterget_font += value;
                HookHandler.Hookget_font();
            }
            remove => HookHandler._afterget_font -= value;
        }

        public static event Delegates.set_font_NormalArgs set_font
        {
            add
            {
                HookHandler._afterset_font += value;
                HookHandler.Hookset_font();
            }
            remove => HookHandler._afterset_font -= value;
        }

        public static event Delegates.get_fontSharedMaterial_NormalArgs get_fontSharedMaterial
        {
            add
            {
                HookHandler._afterget_fontSharedMaterial += value;
                HookHandler.Hookget_fontSharedMaterial();
            }
            remove => HookHandler._afterget_fontSharedMaterial -= value;
        }

        public static event Delegates.set_fontSharedMaterial_NormalArgs set_fontSharedMaterial
        {
            add
            {
                HookHandler._afterset_fontSharedMaterial += value;
                HookHandler.Hookset_fontSharedMaterial();
            }
            remove => HookHandler._afterset_fontSharedMaterial -= value;
        }

        public static event Delegates.get_fontSharedMaterials_NormalArgs get_fontSharedMaterials
        {
            add
            {
                HookHandler._afterget_fontSharedMaterials += value;
                HookHandler.Hookget_fontSharedMaterials();
            }
            remove => HookHandler._afterget_fontSharedMaterials -= value;
        }

        public static event Delegates.set_fontSharedMaterials_NormalArgs set_fontSharedMaterials
        {
            add
            {
                HookHandler._afterset_fontSharedMaterials += value;
                HookHandler.Hookset_fontSharedMaterials();
            }
            remove => HookHandler._afterset_fontSharedMaterials -= value;
        }

        public static event Delegates.get_fontMaterial_NormalArgs get_fontMaterial
        {
            add
            {
                HookHandler._afterget_fontMaterial += value;
                HookHandler.Hookget_fontMaterial();
            }
            remove => HookHandler._afterget_fontMaterial -= value;
        }

        public static event Delegates.set_fontMaterial_NormalArgs set_fontMaterial
        {
            add
            {
                HookHandler._afterset_fontMaterial += value;
                HookHandler.Hookset_fontMaterial();
            }
            remove => HookHandler._afterset_fontMaterial -= value;
        }

        public static event Delegates.get_fontMaterials_NormalArgs get_fontMaterials
        {
            add
            {
                HookHandler._afterget_fontMaterials += value;
                HookHandler.Hookget_fontMaterials();
            }
            remove => HookHandler._afterget_fontMaterials -= value;
        }

        public static event Delegates.set_fontMaterials_NormalArgs set_fontMaterials
        {
            add
            {
                HookHandler._afterset_fontMaterials += value;
                HookHandler.Hookset_fontMaterials();
            }
            remove => HookHandler._afterset_fontMaterials -= value;
        }

        public static event Delegates.get_color_NormalArgs get_color
        {
            add
            {
                HookHandler._afterget_color += value;
                HookHandler.Hookget_color();
            }
            remove => HookHandler._afterget_color -= value;
        }

        public static event Delegates.set_color_NormalArgs set_color
        {
            add
            {
                HookHandler._afterset_color += value;
                HookHandler.Hookset_color();
            }
            remove => HookHandler._afterset_color -= value;
        }

        public static event Delegates.get_alpha_NormalArgs get_alpha
        {
            add
            {
                HookHandler._afterget_alpha += value;
                HookHandler.Hookget_alpha();
            }
            remove => HookHandler._afterget_alpha -= value;
        }

        public static event Delegates.set_alpha_NormalArgs set_alpha
        {
            add
            {
                HookHandler._afterset_alpha += value;
                HookHandler.Hookset_alpha();
            }
            remove => HookHandler._afterset_alpha -= value;
        }

        public static event Delegates.get_enableVertexGradient_NormalArgs get_enableVertexGradient
        {
            add
            {
                HookHandler._afterget_enableVertexGradient += value;
                HookHandler.Hookget_enableVertexGradient();
            }
            remove => HookHandler._afterget_enableVertexGradient -= value;
        }

        public static event Delegates.set_enableVertexGradient_NormalArgs set_enableVertexGradient
        {
            add
            {
                HookHandler._afterset_enableVertexGradient += value;
                HookHandler.Hookset_enableVertexGradient();
            }
            remove => HookHandler._afterset_enableVertexGradient -= value;
        }

        public static event Delegates.get_colorGradient_NormalArgs get_colorGradient
        {
            add
            {
                HookHandler._afterget_colorGradient += value;
                HookHandler.Hookget_colorGradient();
            }
            remove => HookHandler._afterget_colorGradient -= value;
        }

        public static event Delegates.set_colorGradient_NormalArgs set_colorGradient
        {
            add
            {
                HookHandler._afterset_colorGradient += value;
                HookHandler.Hookset_colorGradient();
            }
            remove => HookHandler._afterset_colorGradient -= value;
        }

        public static event Delegates.get_colorGradientPreset_NormalArgs get_colorGradientPreset
        {
            add
            {
                HookHandler._afterget_colorGradientPreset += value;
                HookHandler.Hookget_colorGradientPreset();
            }
            remove => HookHandler._afterget_colorGradientPreset -= value;
        }

        public static event Delegates.set_colorGradientPreset_NormalArgs set_colorGradientPreset
        {
            add
            {
                HookHandler._afterset_colorGradientPreset += value;
                HookHandler.Hookset_colorGradientPreset();
            }
            remove => HookHandler._afterset_colorGradientPreset -= value;
        }

        public static event Delegates.get_spriteAsset_NormalArgs get_spriteAsset
        {
            add
            {
                HookHandler._afterget_spriteAsset += value;
                HookHandler.Hookget_spriteAsset();
            }
            remove => HookHandler._afterget_spriteAsset -= value;
        }

        public static event Delegates.set_spriteAsset_NormalArgs set_spriteAsset
        {
            add
            {
                HookHandler._afterset_spriteAsset += value;
                HookHandler.Hookset_spriteAsset();
            }
            remove => HookHandler._afterset_spriteAsset -= value;
        }

        public static event Delegates.get_tintAllSprites_NormalArgs get_tintAllSprites
        {
            add
            {
                HookHandler._afterget_tintAllSprites += value;
                HookHandler.Hookget_tintAllSprites();
            }
            remove => HookHandler._afterget_tintAllSprites -= value;
        }

        public static event Delegates.set_tintAllSprites_NormalArgs set_tintAllSprites
        {
            add
            {
                HookHandler._afterset_tintAllSprites += value;
                HookHandler.Hookset_tintAllSprites();
            }
            remove => HookHandler._afterset_tintAllSprites -= value;
        }

        public static event Delegates.get_overrideColorTags_NormalArgs get_overrideColorTags
        {
            add
            {
                HookHandler._afterget_overrideColorTags += value;
                HookHandler.Hookget_overrideColorTags();
            }
            remove => HookHandler._afterget_overrideColorTags -= value;
        }

        public static event Delegates.set_overrideColorTags_NormalArgs set_overrideColorTags
        {
            add
            {
                HookHandler._afterset_overrideColorTags += value;
                HookHandler.Hookset_overrideColorTags();
            }
            remove => HookHandler._afterset_overrideColorTags -= value;
        }

        public static event Delegates.get_faceColor_NormalArgs get_faceColor
        {
            add
            {
                HookHandler._afterget_faceColor += value;
                HookHandler.Hookget_faceColor();
            }
            remove => HookHandler._afterget_faceColor -= value;
        }

        public static event Delegates.set_faceColor_NormalArgs set_faceColor
        {
            add
            {
                HookHandler._afterset_faceColor += value;
                HookHandler.Hookset_faceColor();
            }
            remove => HookHandler._afterset_faceColor -= value;
        }

        public static event Delegates.get_outlineColor_NormalArgs get_outlineColor
        {
            add
            {
                HookHandler._afterget_outlineColor += value;
                HookHandler.Hookget_outlineColor();
            }
            remove => HookHandler._afterget_outlineColor -= value;
        }

        public static event Delegates.set_outlineColor_NormalArgs set_outlineColor
        {
            add
            {
                HookHandler._afterset_outlineColor += value;
                HookHandler.Hookset_outlineColor();
            }
            remove => HookHandler._afterset_outlineColor -= value;
        }

        public static event Delegates.get_outlineWidth_NormalArgs get_outlineWidth
        {
            add
            {
                HookHandler._afterget_outlineWidth += value;
                HookHandler.Hookget_outlineWidth();
            }
            remove => HookHandler._afterget_outlineWidth -= value;
        }

        public static event Delegates.set_outlineWidth_NormalArgs set_outlineWidth
        {
            add
            {
                HookHandler._afterset_outlineWidth += value;
                HookHandler.Hookset_outlineWidth();
            }
            remove => HookHandler._afterset_outlineWidth -= value;
        }

        public static event Delegates.get_fontSize_NormalArgs get_fontSize
        {
            add
            {
                HookHandler._afterget_fontSize += value;
                HookHandler.Hookget_fontSize();
            }
            remove => HookHandler._afterget_fontSize -= value;
        }

        public static event Delegates.set_fontSize_NormalArgs set_fontSize
        {
            add
            {
                HookHandler._afterset_fontSize += value;
                HookHandler.Hookset_fontSize();
            }
            remove => HookHandler._afterset_fontSize -= value;
        }

        public static event Delegates.get_fontScale_NormalArgs get_fontScale
        {
            add
            {
                HookHandler._afterget_fontScale += value;
                HookHandler.Hookget_fontScale();
            }
            remove => HookHandler._afterget_fontScale -= value;
        }

        public static event Delegates.get_fontWeight_NormalArgs get_fontWeight
        {
            add
            {
                HookHandler._afterget_fontWeight += value;
                HookHandler.Hookget_fontWeight();
            }
            remove => HookHandler._afterget_fontWeight -= value;
        }

        public static event Delegates.set_fontWeight_NormalArgs set_fontWeight
        {
            add
            {
                HookHandler._afterset_fontWeight += value;
                HookHandler.Hookset_fontWeight();
            }
            remove => HookHandler._afterset_fontWeight -= value;
        }

        public static event Delegates.get_pixelsPerUnit_NormalArgs get_pixelsPerUnit
        {
            add
            {
                HookHandler._afterget_pixelsPerUnit += value;
                HookHandler.Hookget_pixelsPerUnit();
            }
            remove => HookHandler._afterget_pixelsPerUnit -= value;
        }

        public static event Delegates.get_enableAutoSizing_NormalArgs get_enableAutoSizing
        {
            add
            {
                HookHandler._afterget_enableAutoSizing += value;
                HookHandler.Hookget_enableAutoSizing();
            }
            remove => HookHandler._afterget_enableAutoSizing -= value;
        }

        public static event Delegates.set_enableAutoSizing_NormalArgs set_enableAutoSizing
        {
            add
            {
                HookHandler._afterset_enableAutoSizing += value;
                HookHandler.Hookset_enableAutoSizing();
            }
            remove => HookHandler._afterset_enableAutoSizing -= value;
        }

        public static event Delegates.get_fontSizeMin_NormalArgs get_fontSizeMin
        {
            add
            {
                HookHandler._afterget_fontSizeMin += value;
                HookHandler.Hookget_fontSizeMin();
            }
            remove => HookHandler._afterget_fontSizeMin -= value;
        }

        public static event Delegates.set_fontSizeMin_NormalArgs set_fontSizeMin
        {
            add
            {
                HookHandler._afterset_fontSizeMin += value;
                HookHandler.Hookset_fontSizeMin();
            }
            remove => HookHandler._afterset_fontSizeMin -= value;
        }

        public static event Delegates.get_fontSizeMax_NormalArgs get_fontSizeMax
        {
            add
            {
                HookHandler._afterget_fontSizeMax += value;
                HookHandler.Hookget_fontSizeMax();
            }
            remove => HookHandler._afterget_fontSizeMax -= value;
        }

        public static event Delegates.set_fontSizeMax_NormalArgs set_fontSizeMax
        {
            add
            {
                HookHandler._afterset_fontSizeMax += value;
                HookHandler.Hookset_fontSizeMax();
            }
            remove => HookHandler._afterset_fontSizeMax -= value;
        }

        public static event Delegates.get_fontStyle_NormalArgs get_fontStyle
        {
            add
            {
                HookHandler._afterget_fontStyle += value;
                HookHandler.Hookget_fontStyle();
            }
            remove => HookHandler._afterget_fontStyle -= value;
        }

        public static event Delegates.set_fontStyle_NormalArgs set_fontStyle
        {
            add
            {
                HookHandler._afterset_fontStyle += value;
                HookHandler.Hookset_fontStyle();
            }
            remove => HookHandler._afterset_fontStyle -= value;
        }

        public static event Delegates.get_isUsingBold_NormalArgs get_isUsingBold
        {
            add
            {
                HookHandler._afterget_isUsingBold += value;
                HookHandler.Hookget_isUsingBold();
            }
            remove => HookHandler._afterget_isUsingBold -= value;
        }

        public static event Delegates.get_alignment_NormalArgs get_alignment
        {
            add
            {
                HookHandler._afterget_alignment += value;
                HookHandler.Hookget_alignment();
            }
            remove => HookHandler._afterget_alignment -= value;
        }

        public static event Delegates.set_alignment_NormalArgs set_alignment
        {
            add
            {
                HookHandler._afterset_alignment += value;
                HookHandler.Hookset_alignment();
            }
            remove => HookHandler._afterset_alignment -= value;
        }

        public static event Delegates.get_characterSpacing_NormalArgs get_characterSpacing
        {
            add
            {
                HookHandler._afterget_characterSpacing += value;
                HookHandler.Hookget_characterSpacing();
            }
            remove => HookHandler._afterget_characterSpacing -= value;
        }

        public static event Delegates.set_characterSpacing_NormalArgs set_characterSpacing
        {
            add
            {
                HookHandler._afterset_characterSpacing += value;
                HookHandler.Hookset_characterSpacing();
            }
            remove => HookHandler._afterset_characterSpacing -= value;
        }

        public static event Delegates.get_lineSpacing_NormalArgs get_lineSpacing
        {
            add
            {
                HookHandler._afterget_lineSpacing += value;
                HookHandler.Hookget_lineSpacing();
            }
            remove => HookHandler._afterget_lineSpacing -= value;
        }

        public static event Delegates.set_lineSpacing_NormalArgs set_lineSpacing
        {
            add
            {
                HookHandler._afterset_lineSpacing += value;
                HookHandler.Hookset_lineSpacing();
            }
            remove => HookHandler._afterset_lineSpacing -= value;
        }

        public static event Delegates.get_paragraphSpacing_NormalArgs get_paragraphSpacing
        {
            add
            {
                HookHandler._afterget_paragraphSpacing += value;
                HookHandler.Hookget_paragraphSpacing();
            }
            remove => HookHandler._afterget_paragraphSpacing -= value;
        }

        public static event Delegates.set_paragraphSpacing_NormalArgs set_paragraphSpacing
        {
            add
            {
                HookHandler._afterset_paragraphSpacing += value;
                HookHandler.Hookset_paragraphSpacing();
            }
            remove => HookHandler._afterset_paragraphSpacing -= value;
        }

        public static event Delegates.get_characterWidthAdjustment_NormalArgs get_characterWidthAdjustment
        {
            add
            {
                HookHandler._afterget_characterWidthAdjustment += value;
                HookHandler.Hookget_characterWidthAdjustment();
            }
            remove => HookHandler._afterget_characterWidthAdjustment -= value;
        }

        public static event Delegates.set_characterWidthAdjustment_NormalArgs set_characterWidthAdjustment
        {
            add
            {
                HookHandler._afterset_characterWidthAdjustment += value;
                HookHandler.Hookset_characterWidthAdjustment();
            }
            remove => HookHandler._afterset_characterWidthAdjustment -= value;
        }

        public static event Delegates.get_enableWordWrapping_NormalArgs get_enableWordWrapping
        {
            add
            {
                HookHandler._afterget_enableWordWrapping += value;
                HookHandler.Hookget_enableWordWrapping();
            }
            remove => HookHandler._afterget_enableWordWrapping -= value;
        }

        public static event Delegates.set_enableWordWrapping_NormalArgs set_enableWordWrapping
        {
            add
            {
                HookHandler._afterset_enableWordWrapping += value;
                HookHandler.Hookset_enableWordWrapping();
            }
            remove => HookHandler._afterset_enableWordWrapping -= value;
        }

        public static event Delegates.get_wordWrappingRatios_NormalArgs get_wordWrappingRatios
        {
            add
            {
                HookHandler._afterget_wordWrappingRatios += value;
                HookHandler.Hookget_wordWrappingRatios();
            }
            remove => HookHandler._afterget_wordWrappingRatios -= value;
        }

        public static event Delegates.set_wordWrappingRatios_NormalArgs set_wordWrappingRatios
        {
            add
            {
                HookHandler._afterset_wordWrappingRatios += value;
                HookHandler.Hookset_wordWrappingRatios();
            }
            remove => HookHandler._afterset_wordWrappingRatios -= value;
        }

        public static event Delegates.get_enableAdaptiveJustification_NormalArgs get_enableAdaptiveJustification
        {
            add
            {
                HookHandler._afterget_enableAdaptiveJustification += value;
                HookHandler.Hookget_enableAdaptiveJustification();
            }
            remove => HookHandler._afterget_enableAdaptiveJustification -= value;
        }

        public static event Delegates.set_enableAdaptiveJustification_NormalArgs set_enableAdaptiveJustification
        {
            add
            {
                HookHandler._afterset_enableAdaptiveJustification += value;
                HookHandler.Hookset_enableAdaptiveJustification();
            }
            remove => HookHandler._afterset_enableAdaptiveJustification -= value;
        }

        public static event Delegates.get_OverflowMode_NormalArgs get_OverflowMode
        {
            add
            {
                HookHandler._afterget_OverflowMode += value;
                HookHandler.Hookget_OverflowMode();
            }
            remove => HookHandler._afterget_OverflowMode -= value;
        }

        public static event Delegates.set_OverflowMode_NormalArgs set_OverflowMode
        {
            add
            {
                HookHandler._afterset_OverflowMode += value;
                HookHandler.Hookset_OverflowMode();
            }
            remove => HookHandler._afterset_OverflowMode -= value;
        }

        public static event Delegates.get_enableKerning_NormalArgs get_enableKerning
        {
            add
            {
                HookHandler._afterget_enableKerning += value;
                HookHandler.Hookget_enableKerning();
            }
            remove => HookHandler._afterget_enableKerning -= value;
        }

        public static event Delegates.set_enableKerning_NormalArgs set_enableKerning
        {
            add
            {
                HookHandler._afterset_enableKerning += value;
                HookHandler.Hookset_enableKerning();
            }
            remove => HookHandler._afterset_enableKerning -= value;
        }

        public static event Delegates.get_extraPadding_NormalArgs get_extraPadding
        {
            add
            {
                HookHandler._afterget_extraPadding += value;
                HookHandler.Hookget_extraPadding();
            }
            remove => HookHandler._afterget_extraPadding -= value;
        }

        public static event Delegates.set_extraPadding_NormalArgs set_extraPadding
        {
            add
            {
                HookHandler._afterset_extraPadding += value;
                HookHandler.Hookset_extraPadding();
            }
            remove => HookHandler._afterset_extraPadding -= value;
        }

        public static event Delegates.get_richText_NormalArgs get_richText
        {
            add
            {
                HookHandler._afterget_richText += value;
                HookHandler.Hookget_richText();
            }
            remove => HookHandler._afterget_richText -= value;
        }

        public static event Delegates.set_richText_NormalArgs set_richText
        {
            add
            {
                HookHandler._afterset_richText += value;
                HookHandler.Hookset_richText();
            }
            remove => HookHandler._afterset_richText -= value;
        }

        public static event Delegates.get_parseCtrlCharacters_NormalArgs get_parseCtrlCharacters
        {
            add
            {
                HookHandler._afterget_parseCtrlCharacters += value;
                HookHandler.Hookget_parseCtrlCharacters();
            }
            remove => HookHandler._afterget_parseCtrlCharacters -= value;
        }

        public static event Delegates.set_parseCtrlCharacters_NormalArgs set_parseCtrlCharacters
        {
            add
            {
                HookHandler._afterset_parseCtrlCharacters += value;
                HookHandler.Hookset_parseCtrlCharacters();
            }
            remove => HookHandler._afterset_parseCtrlCharacters -= value;
        }

        public static event Delegates.get_isOverlay_NormalArgs get_isOverlay
        {
            add
            {
                HookHandler._afterget_isOverlay += value;
                HookHandler.Hookget_isOverlay();
            }
            remove => HookHandler._afterget_isOverlay -= value;
        }

        public static event Delegates.set_isOverlay_NormalArgs set_isOverlay
        {
            add
            {
                HookHandler._afterset_isOverlay += value;
                HookHandler.Hookset_isOverlay();
            }
            remove => HookHandler._afterset_isOverlay -= value;
        }

        public static event Delegates.get_isOrthographic_NormalArgs get_isOrthographic
        {
            add
            {
                HookHandler._afterget_isOrthographic += value;
                HookHandler.Hookget_isOrthographic();
            }
            remove => HookHandler._afterget_isOrthographic -= value;
        }

        public static event Delegates.set_isOrthographic_NormalArgs set_isOrthographic
        {
            add
            {
                HookHandler._afterset_isOrthographic += value;
                HookHandler.Hookset_isOrthographic();
            }
            remove => HookHandler._afterset_isOrthographic -= value;
        }

        public static event Delegates.get_enableCulling_NormalArgs get_enableCulling
        {
            add
            {
                HookHandler._afterget_enableCulling += value;
                HookHandler.Hookget_enableCulling();
            }
            remove => HookHandler._afterget_enableCulling -= value;
        }

        public static event Delegates.set_enableCulling_NormalArgs set_enableCulling
        {
            add
            {
                HookHandler._afterset_enableCulling += value;
                HookHandler.Hookset_enableCulling();
            }
            remove => HookHandler._afterset_enableCulling -= value;
        }

        public static event Delegates.get_ignoreVisibility_NormalArgs get_ignoreVisibility
        {
            add
            {
                HookHandler._afterget_ignoreVisibility += value;
                HookHandler.Hookget_ignoreVisibility();
            }
            remove => HookHandler._afterget_ignoreVisibility -= value;
        }

        public static event Delegates.set_ignoreVisibility_NormalArgs set_ignoreVisibility
        {
            add
            {
                HookHandler._afterset_ignoreVisibility += value;
                HookHandler.Hookset_ignoreVisibility();
            }
            remove => HookHandler._afterset_ignoreVisibility -= value;
        }

        public static event Delegates.get_horizontalMapping_NormalArgs get_horizontalMapping
        {
            add
            {
                HookHandler._afterget_horizontalMapping += value;
                HookHandler.Hookget_horizontalMapping();
            }
            remove => HookHandler._afterget_horizontalMapping -= value;
        }

        public static event Delegates.set_horizontalMapping_NormalArgs set_horizontalMapping
        {
            add
            {
                HookHandler._afterset_horizontalMapping += value;
                HookHandler.Hookset_horizontalMapping();
            }
            remove => HookHandler._afterset_horizontalMapping -= value;
        }

        public static event Delegates.get_verticalMapping_NormalArgs get_verticalMapping
        {
            add
            {
                HookHandler._afterget_verticalMapping += value;
                HookHandler.Hookget_verticalMapping();
            }
            remove => HookHandler._afterget_verticalMapping -= value;
        }

        public static event Delegates.set_verticalMapping_NormalArgs set_verticalMapping
        {
            add
            {
                HookHandler._afterset_verticalMapping += value;
                HookHandler.Hookset_verticalMapping();
            }
            remove => HookHandler._afterset_verticalMapping -= value;
        }

        public static event Delegates.get_renderMode_NormalArgs get_renderMode
        {
            add
            {
                HookHandler._afterget_renderMode += value;
                HookHandler.Hookget_renderMode();
            }
            remove => HookHandler._afterget_renderMode -= value;
        }

        public static event Delegates.set_renderMode_NormalArgs set_renderMode
        {
            add
            {
                HookHandler._afterset_renderMode += value;
                HookHandler.Hookset_renderMode();
            }
            remove => HookHandler._afterset_renderMode -= value;
        }

        public static event Delegates.get_maxVisibleCharacters_NormalArgs get_maxVisibleCharacters
        {
            add
            {
                HookHandler._afterget_maxVisibleCharacters += value;
                HookHandler.Hookget_maxVisibleCharacters();
            }
            remove => HookHandler._afterget_maxVisibleCharacters -= value;
        }

        public static event Delegates.set_maxVisibleCharacters_NormalArgs set_maxVisibleCharacters
        {
            add
            {
                HookHandler._afterset_maxVisibleCharacters += value;
                HookHandler.Hookset_maxVisibleCharacters();
            }
            remove => HookHandler._afterset_maxVisibleCharacters -= value;
        }

        public static event Delegates.get_maxVisibleWords_NormalArgs get_maxVisibleWords
        {
            add
            {
                HookHandler._afterget_maxVisibleWords += value;
                HookHandler.Hookget_maxVisibleWords();
            }
            remove => HookHandler._afterget_maxVisibleWords -= value;
        }

        public static event Delegates.set_maxVisibleWords_NormalArgs set_maxVisibleWords
        {
            add
            {
                HookHandler._afterset_maxVisibleWords += value;
                HookHandler.Hookset_maxVisibleWords();
            }
            remove => HookHandler._afterset_maxVisibleWords -= value;
        }

        public static event Delegates.get_maxVisibleLines_NormalArgs get_maxVisibleLines
        {
            add
            {
                HookHandler._afterget_maxVisibleLines += value;
                HookHandler.Hookget_maxVisibleLines();
            }
            remove => HookHandler._afterget_maxVisibleLines -= value;
        }

        public static event Delegates.set_maxVisibleLines_NormalArgs set_maxVisibleLines
        {
            add
            {
                HookHandler._afterset_maxVisibleLines += value;
                HookHandler.Hookset_maxVisibleLines();
            }
            remove => HookHandler._afterset_maxVisibleLines -= value;
        }

        public static event Delegates.get_useMaxVisibleDescender_NormalArgs get_useMaxVisibleDescender
        {
            add
            {
                HookHandler._afterget_useMaxVisibleDescender += value;
                HookHandler.Hookget_useMaxVisibleDescender();
            }
            remove => HookHandler._afterget_useMaxVisibleDescender -= value;
        }

        public static event Delegates.set_useMaxVisibleDescender_NormalArgs set_useMaxVisibleDescender
        {
            add
            {
                HookHandler._afterset_useMaxVisibleDescender += value;
                HookHandler.Hookset_useMaxVisibleDescender();
            }
            remove => HookHandler._afterset_useMaxVisibleDescender -= value;
        }

        public static event Delegates.get_pageToDisplay_NormalArgs get_pageToDisplay
        {
            add
            {
                HookHandler._afterget_pageToDisplay += value;
                HookHandler.Hookget_pageToDisplay();
            }
            remove => HookHandler._afterget_pageToDisplay -= value;
        }

        public static event Delegates.set_pageToDisplay_NormalArgs set_pageToDisplay
        {
            add
            {
                HookHandler._afterset_pageToDisplay += value;
                HookHandler.Hookset_pageToDisplay();
            }
            remove => HookHandler._afterset_pageToDisplay -= value;
        }

        public static event Delegates.get_margin_NormalArgs get_margin
        {
            add
            {
                HookHandler._afterget_margin += value;
                HookHandler.Hookget_margin();
            }
            remove => HookHandler._afterget_margin -= value;
        }

        public static event Delegates.set_margin_NormalArgs set_margin
        {
            add
            {
                HookHandler._afterset_margin += value;
                HookHandler.Hookset_margin();
            }
            remove => HookHandler._afterset_margin -= value;
        }

        public static event Delegates.get_textInfo_NormalArgs get_textInfo
        {
            add
            {
                HookHandler._afterget_textInfo += value;
                HookHandler.Hookget_textInfo();
            }
            remove => HookHandler._afterget_textInfo -= value;
        }

        public static event Delegates.get_havePropertiesChanged_NormalArgs get_havePropertiesChanged
        {
            add
            {
                HookHandler._afterget_havePropertiesChanged += value;
                HookHandler.Hookget_havePropertiesChanged();
            }
            remove => HookHandler._afterget_havePropertiesChanged -= value;
        }

        public static event Delegates.set_havePropertiesChanged_NormalArgs set_havePropertiesChanged
        {
            add
            {
                HookHandler._afterset_havePropertiesChanged += value;
                HookHandler.Hookset_havePropertiesChanged();
            }
            remove => HookHandler._afterset_havePropertiesChanged -= value;
        }

        public static event Delegates.get_isUsingLegacyAnimationComponent_NormalArgs get_isUsingLegacyAnimationComponent
        {
            add
            {
                HookHandler._afterget_isUsingLegacyAnimationComponent += value;
                HookHandler.Hookget_isUsingLegacyAnimationComponent();
            }
            remove => HookHandler._afterget_isUsingLegacyAnimationComponent -= value;
        }

        public static event Delegates.set_isUsingLegacyAnimationComponent_NormalArgs set_isUsingLegacyAnimationComponent
        {
            add
            {
                HookHandler._afterset_isUsingLegacyAnimationComponent += value;
                HookHandler.Hookset_isUsingLegacyAnimationComponent();
            }
            remove => HookHandler._afterset_isUsingLegacyAnimationComponent -= value;
        }

        public static event Delegates.get_transform_NormalArgs get_transform
        {
            add
            {
                HookHandler._afterget_transform += value;
                HookHandler.Hookget_transform();
            }
            remove => HookHandler._afterget_transform -= value;
        }

        public static event Delegates.get_rectTransform_NormalArgs get_rectTransform
        {
            add
            {
                HookHandler._afterget_rectTransform += value;
                HookHandler.Hookget_rectTransform();
            }
            remove => HookHandler._afterget_rectTransform -= value;
        }

        public static event Delegates.get_autoSizeTextContainer_NormalArgs get_autoSizeTextContainer
        {
            add
            {
                HookHandler._afterget_autoSizeTextContainer += value;
                HookHandler.Hookget_autoSizeTextContainer();
            }
            remove => HookHandler._afterget_autoSizeTextContainer -= value;
        }

        public static event Delegates.set_autoSizeTextContainer_NormalArgs set_autoSizeTextContainer
        {
            add
            {
                HookHandler._afterset_autoSizeTextContainer += value;
                HookHandler.Hookset_autoSizeTextContainer();
            }
            remove => HookHandler._afterset_autoSizeTextContainer -= value;
        }

        public static event Delegates.get_mesh_NormalArgs get_mesh
        {
            add
            {
                HookHandler._afterget_mesh += value;
                HookHandler.Hookget_mesh();
            }
            remove => HookHandler._afterget_mesh -= value;
        }

        public static event Delegates.get_isVolumetricText_NormalArgs get_isVolumetricText
        {
            add
            {
                HookHandler._afterget_isVolumetricText += value;
                HookHandler.Hookget_isVolumetricText();
            }
            remove => HookHandler._afterget_isVolumetricText -= value;
        }

        public static event Delegates.set_isVolumetricText_NormalArgs set_isVolumetricText
        {
            add
            {
                HookHandler._afterset_isVolumetricText += value;
                HookHandler.Hookset_isVolumetricText();
            }
            remove => HookHandler._afterset_isVolumetricText -= value;
        }

        public static event Delegates.get_bounds_NormalArgs get_bounds
        {
            add
            {
                HookHandler._afterget_bounds += value;
                HookHandler.Hookget_bounds();
            }
            remove => HookHandler._afterget_bounds -= value;
        }

        public static event Delegates.get_textBounds_NormalArgs get_textBounds
        {
            add
            {
                HookHandler._afterget_textBounds += value;
                HookHandler.Hookget_textBounds();
            }
            remove => HookHandler._afterget_textBounds -= value;
        }

        public static event Delegates.get_flexibleHeight_NormalArgs get_flexibleHeight
        {
            add
            {
                HookHandler._afterget_flexibleHeight += value;
                HookHandler.Hookget_flexibleHeight();
            }
            remove => HookHandler._afterget_flexibleHeight -= value;
        }

        public static event Delegates.get_flexibleWidth_NormalArgs get_flexibleWidth
        {
            add
            {
                HookHandler._afterget_flexibleWidth += value;
                HookHandler.Hookget_flexibleWidth();
            }
            remove => HookHandler._afterget_flexibleWidth -= value;
        }

        public static event Delegates.get_minHeight_NormalArgs get_minHeight
        {
            add
            {
                HookHandler._afterget_minHeight += value;
                HookHandler.Hookget_minHeight();
            }
            remove => HookHandler._afterget_minHeight -= value;
        }

        public static event Delegates.get_minWidth_NormalArgs get_minWidth
        {
            add
            {
                HookHandler._afterget_minWidth += value;
                HookHandler.Hookget_minWidth();
            }
            remove => HookHandler._afterget_minWidth -= value;
        }

        public static event Delegates.get_preferredWidth_NormalArgs get_preferredWidth
        {
            add
            {
                HookHandler._afterget_preferredWidth += value;
                HookHandler.Hookget_preferredWidth();
            }
            remove => HookHandler._afterget_preferredWidth -= value;
        }

        public static event Delegates.get_preferredHeight_NormalArgs get_preferredHeight
        {
            add
            {
                HookHandler._afterget_preferredHeight += value;
                HookHandler.Hookget_preferredHeight();
            }
            remove => HookHandler._afterget_preferredHeight -= value;
        }

        public static event Delegates.get_renderedWidth_NormalArgs get_renderedWidth
        {
            add
            {
                HookHandler._afterget_renderedWidth += value;
                HookHandler.Hookget_renderedWidth();
            }
            remove => HookHandler._afterget_renderedWidth -= value;
        }

        public static event Delegates.get_renderedHeight_NormalArgs get_renderedHeight
        {
            add
            {
                HookHandler._afterget_renderedHeight += value;
                HookHandler.Hookget_renderedHeight();
            }
            remove => HookHandler._afterget_renderedHeight -= value;
        }

        public static event Delegates.get_layoutPriority_NormalArgs get_layoutPriority
        {
            add
            {
                HookHandler._afterget_layoutPriority += value;
                HookHandler.Hookget_layoutPriority();
            }
            remove => HookHandler._afterget_layoutPriority -= value;
        }

        public static event Delegates.LoadFontAsset_NormalArgs LoadFontAsset
        {
            add
            {
                HookHandler._afterLoadFontAsset += value;
                HookHandler.HookLoadFontAsset();
            }
            remove => HookHandler._afterLoadFontAsset -= value;
        }

        public static event Delegates.SetSharedMaterial_NormalArgs SetSharedMaterial
        {
            add
            {
                HookHandler._afterSetSharedMaterial += value;
                HookHandler.HookSetSharedMaterial();
            }
            remove => HookHandler._afterSetSharedMaterial -= value;
        }

        public static event Delegates.GetMaterial_NormalArgs GetMaterial
        {
            add
            {
                HookHandler._afterGetMaterial += value;
                HookHandler.HookGetMaterial();
            }
            remove => HookHandler._afterGetMaterial -= value;
        }

        public static event Delegates.SetFontBaseMaterial_NormalArgs SetFontBaseMaterial
        {
            add
            {
                HookHandler._afterSetFontBaseMaterial += value;
                HookHandler.HookSetFontBaseMaterial();
            }
            remove => HookHandler._afterSetFontBaseMaterial -= value;
        }

        public static event Delegates.GetSharedMaterials_NormalArgs GetSharedMaterials
        {
            add
            {
                HookHandler._afterGetSharedMaterials += value;
                HookHandler.HookGetSharedMaterials();
            }
            remove => HookHandler._afterGetSharedMaterials -= value;
        }

        public static event Delegates.SetSharedMaterials_NormalArgs SetSharedMaterials
        {
            add
            {
                HookHandler._afterSetSharedMaterials += value;
                HookHandler.HookSetSharedMaterials();
            }
            remove => HookHandler._afterSetSharedMaterials -= value;
        }

        public static event Delegates.GetMaterials_NormalArgs GetMaterials
        {
            add
            {
                HookHandler._afterGetMaterials += value;
                HookHandler.HookGetMaterials();
            }
            remove => HookHandler._afterGetMaterials -= value;
        }

        public static event Delegates.CreateMaterialInstance_NormalArgs CreateMaterialInstance
        {
            add
            {
                HookHandler._afterCreateMaterialInstance += value;
                HookHandler.HookCreateMaterialInstance();
            }
            remove => HookHandler._afterCreateMaterialInstance -= value;
        }

        public static event Delegates.SetVertexColorGradient_NormalArgs SetVertexColorGradient
        {
            add
            {
                HookHandler._afterSetVertexColorGradient += value;
                HookHandler.HookSetVertexColorGradient();
            }
            remove => HookHandler._afterSetVertexColorGradient -= value;
        }

        public static event Delegates.SetFaceColor_NormalArgs SetFaceColor
        {
            add
            {
                HookHandler._afterSetFaceColor += value;
                HookHandler.HookSetFaceColor();
            }
            remove => HookHandler._afterSetFaceColor -= value;
        }

        public static event Delegates.SetOutlineColor_NormalArgs SetOutlineColor
        {
            add
            {
                HookHandler._afterSetOutlineColor += value;
                HookHandler.HookSetOutlineColor();
            }
            remove => HookHandler._afterSetOutlineColor -= value;
        }

        public static event Delegates.SetOutlineThickness_NormalArgs SetOutlineThickness
        {
            add
            {
                HookHandler._afterSetOutlineThickness += value;
                HookHandler.HookSetOutlineThickness();
            }
            remove => HookHandler._afterSetOutlineThickness -= value;
        }

        public static event Delegates.SetShaderDepth_NormalArgs SetShaderDepth
        {
            add
            {
                HookHandler._afterSetShaderDepth += value;
                HookHandler.HookSetShaderDepth();
            }
            remove => HookHandler._afterSetShaderDepth -= value;
        }

        public static event Delegates.SetCulling_NormalArgs SetCulling
        {
            add
            {
                HookHandler._afterSetCulling += value;
                HookHandler.HookSetCulling();
            }
            remove => HookHandler._afterSetCulling -= value;
        }

        public static event Delegates.GetPaddingForMaterial_NormalArgs GetPaddingForMaterial
        {
            add
            {
                HookHandler._afterGetPaddingForMaterial += value;
                HookHandler.HookGetPaddingForMaterial();
            }
            remove => HookHandler._afterGetPaddingForMaterial -= value;
        }

        public static event Delegates.GetPaddingForMaterial_Material_NormalArgs GetPaddingForMaterial_Material
        {
            add
            {
                HookHandler._afterGetPaddingForMaterial_Material += value;
                HookHandler.HookGetPaddingForMaterial_Material();
            }
            remove => HookHandler._afterGetPaddingForMaterial_Material -= value;
        }

        public static event Delegates.GetTextContainerLocalCorners_NormalArgs GetTextContainerLocalCorners
        {
            add
            {
                HookHandler._afterGetTextContainerLocalCorners += value;
                HookHandler.HookGetTextContainerLocalCorners();
            }
            remove => HookHandler._afterGetTextContainerLocalCorners -= value;
        }

        public static event Delegates.ForceMeshUpdate_NormalArgs ForceMeshUpdate
        {
            add
            {
                HookHandler._afterForceMeshUpdate += value;
                HookHandler.HookForceMeshUpdate();
            }
            remove => HookHandler._afterForceMeshUpdate -= value;
        }

        public static event Delegates.ForceMeshUpdate_bool_NormalArgs ForceMeshUpdate_bool
        {
            add
            {
                HookHandler._afterForceMeshUpdate_bool += value;
                HookHandler.HookForceMeshUpdate_bool();
            }
            remove => HookHandler._afterForceMeshUpdate_bool -= value;
        }

        public static event Delegates.SetTextInternal_NormalArgs SetTextInternal
        {
            add
            {
                HookHandler._afterSetTextInternal += value;
                HookHandler.HookSetTextInternal();
            }
            remove => HookHandler._afterSetTextInternal -= value;
        }

        public static event Delegates.UpdateGeometry_NormalArgs UpdateGeometry
        {
            add
            {
                HookHandler._afterUpdateGeometry += value;
                HookHandler.HookUpdateGeometry();
            }
            remove => HookHandler._afterUpdateGeometry -= value;
        }

        public static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_NormalArgs
            UpdateVertexData_TMP_VertexDataUpdateFlags
            {
                add
                {
                    HookHandler._afterUpdateVertexData_TMP_VertexDataUpdateFlags += value;
                    HookHandler.HookUpdateVertexData_TMP_VertexDataUpdateFlags();
                }
                remove => HookHandler._afterUpdateVertexData_TMP_VertexDataUpdateFlags -= value;
            }

        public static event Delegates.UpdateVertexData_NormalArgs UpdateVertexData
        {
            add
            {
                HookHandler._afterUpdateVertexData += value;
                HookHandler.HookUpdateVertexData();
            }
            remove => HookHandler._afterUpdateVertexData -= value;
        }

        public static event Delegates.SetVertices_NormalArgs SetVertices
        {
            add
            {
                HookHandler._afterSetVertices += value;
                HookHandler.HookSetVertices();
            }
            remove => HookHandler._afterSetVertices -= value;
        }

        public static event Delegates.UpdateMeshPadding_NormalArgs UpdateMeshPadding
        {
            add
            {
                HookHandler._afterUpdateMeshPadding += value;
                HookHandler.HookUpdateMeshPadding();
            }
            remove => HookHandler._afterUpdateMeshPadding -= value;
        }

        public static event Delegates.CrossFadeColor_NormalArgs CrossFadeColor
        {
            add
            {
                HookHandler._afterCrossFadeColor += value;
                HookHandler.HookCrossFadeColor();
            }
            remove => HookHandler._afterCrossFadeColor -= value;
        }

        public static event Delegates.CrossFadeAlpha_NormalArgs CrossFadeAlpha
        {
            add
            {
                HookHandler._afterCrossFadeAlpha += value;
                HookHandler.HookCrossFadeAlpha();
            }
            remove => HookHandler._afterCrossFadeAlpha -= value;
        }

        public static event Delegates.InternalCrossFadeColor_NormalArgs InternalCrossFadeColor
        {
            add
            {
                HookHandler._afterInternalCrossFadeColor += value;
                HookHandler.HookInternalCrossFadeColor();
            }
            remove => HookHandler._afterInternalCrossFadeColor -= value;
        }

        public static event Delegates.InternalCrossFadeAlpha_NormalArgs InternalCrossFadeAlpha
        {
            add
            {
                HookHandler._afterInternalCrossFadeAlpha += value;
                HookHandler.HookInternalCrossFadeAlpha();
            }
            remove => HookHandler._afterInternalCrossFadeAlpha -= value;
        }

        public static event Delegates.ParseInputText_NormalArgs ParseInputText
        {
            add
            {
                HookHandler._afterParseInputText += value;
                HookHandler.HookParseInputText();
            }
            remove => HookHandler._afterParseInputText -= value;
        }

        public static event Delegates.SetText_string_NormalArgs SetText_string
        {
            add
            {
                HookHandler._afterSetText_string += value;
                HookHandler.HookSetText_string();
            }
            remove => HookHandler._afterSetText_string -= value;
        }

        public static event Delegates.SetText_string_float_NormalArgs SetText_string_float
        {
            add
            {
                HookHandler._afterSetText_string_float += value;
                HookHandler.HookSetText_string_float();
            }
            remove => HookHandler._afterSetText_string_float -= value;
        }

        public static event Delegates.SetText_string_float_float_NormalArgs SetText_string_float_float
        {
            add
            {
                HookHandler._afterSetText_string_float_float += value;
                HookHandler.HookSetText_string_float_float();
            }
            remove => HookHandler._afterSetText_string_float_float -= value;
        }

        public static event Delegates.SetText_string_float_float_float_NormalArgs SetText_string_float_float_float
        {
            add
            {
                HookHandler._afterSetText_string_float_float_float += value;
                HookHandler.HookSetText_string_float_float_float();
            }
            remove => HookHandler._afterSetText_string_float_float_float -= value;
        }

        public static event Delegates.SetText_StringBuilder_NormalArgs SetText_StringBuilder
        {
            add
            {
                HookHandler._afterSetText_StringBuilder += value;
                HookHandler.HookSetText_StringBuilder();
            }
            remove => HookHandler._afterSetText_StringBuilder -= value;
        }

        public static event Delegates.SetCharArray_NormalArgs SetCharArray
        {
            add
            {
                HookHandler._afterSetCharArray += value;
                HookHandler.HookSetCharArray();
            }
            remove => HookHandler._afterSetCharArray -= value;
        }

        public static event Delegates.SetTextArrayToCharArray_NormalArgs SetTextArrayToCharArray
        {
            add
            {
                HookHandler._afterSetTextArrayToCharArray += value;
                HookHandler.HookSetTextArrayToCharArray();
            }
            remove => HookHandler._afterSetTextArrayToCharArray -= value;
        }

        public static event Delegates.StringToCharArray_NormalArgs StringToCharArray
        {
            add
            {
                HookHandler._afterStringToCharArray += value;
                HookHandler.HookStringToCharArray();
            }
            remove => HookHandler._afterStringToCharArray -= value;
        }

        public static event Delegates.StringBuilderToIntArray_NormalArgs StringBuilderToIntArray
        {
            add
            {
                HookHandler._afterStringBuilderToIntArray += value;
                HookHandler.HookStringBuilderToIntArray();
            }
            remove => HookHandler._afterStringBuilderToIntArray -= value;
        }

        public static event Delegates.AddFloatToCharArray_NormalArgs AddFloatToCharArray
        {
            add
            {
                HookHandler._afterAddFloatToCharArray += value;
                HookHandler.HookAddFloatToCharArray();
            }
            remove => HookHandler._afterAddFloatToCharArray -= value;
        }

        public static event Delegates.AddIntToCharArray_NormalArgs AddIntToCharArray
        {
            add
            {
                HookHandler._afterAddIntToCharArray += value;
                HookHandler.HookAddIntToCharArray();
            }
            remove => HookHandler._afterAddIntToCharArray -= value;
        }

        public static event Delegates.SetArraySizes_NormalArgs SetArraySizes
        {
            add
            {
                HookHandler._afterSetArraySizes += value;
                HookHandler.HookSetArraySizes();
            }
            remove => HookHandler._afterSetArraySizes -= value;
        }

        public static event Delegates.GenerateTextMesh_NormalArgs GenerateTextMesh
        {
            add
            {
                HookHandler._afterGenerateTextMesh += value;
                HookHandler.HookGenerateTextMesh();
            }
            remove => HookHandler._afterGenerateTextMesh -= value;
        }

        public static event Delegates.GetPreferredValues_NormalArgs GetPreferredValues
        {
            add
            {
                HookHandler._afterGetPreferredValues += value;
                HookHandler.HookGetPreferredValues();
            }
            remove => HookHandler._afterGetPreferredValues -= value;
        }

        public static event Delegates.GetPreferredValues_float_float_NormalArgs GetPreferredValues_float_float
        {
            add
            {
                HookHandler._afterGetPreferredValues_float_float += value;
                HookHandler.HookGetPreferredValues_float_float();
            }
            remove => HookHandler._afterGetPreferredValues_float_float -= value;
        }

        public static event Delegates.GetPreferredValues_string_NormalArgs GetPreferredValues_string
        {
            add
            {
                HookHandler._afterGetPreferredValues_string += value;
                HookHandler.HookGetPreferredValues_string();
            }
            remove => HookHandler._afterGetPreferredValues_string -= value;
        }

        public static event Delegates.GetPreferredValues_string_float_float_NormalArgs
            GetPreferredValues_string_float_float
            {
                add
                {
                    HookHandler._afterGetPreferredValues_string_float_float += value;
                    HookHandler.HookGetPreferredValues_string_float_float();
                }
                remove => HookHandler._afterGetPreferredValues_string_float_float -= value;
            }

        public static event Delegates.GetPreferredWidth_NormalArgs GetPreferredWidth
        {
            add
            {
                HookHandler._afterGetPreferredWidth += value;
                HookHandler.HookGetPreferredWidth();
            }
            remove => HookHandler._afterGetPreferredWidth -= value;
        }

        public static event Delegates.GetPreferredWidth_Vector2_NormalArgs GetPreferredWidth_Vector2
        {
            add
            {
                HookHandler._afterGetPreferredWidth_Vector2 += value;
                HookHandler.HookGetPreferredWidth_Vector2();
            }
            remove => HookHandler._afterGetPreferredWidth_Vector2 -= value;
        }

        public static event Delegates.GetPreferredHeight_NormalArgs GetPreferredHeight
        {
            add
            {
                HookHandler._afterGetPreferredHeight += value;
                HookHandler.HookGetPreferredHeight();
            }
            remove => HookHandler._afterGetPreferredHeight -= value;
        }

        public static event Delegates.GetPreferredHeight_Vector2_NormalArgs GetPreferredHeight_Vector2
        {
            add
            {
                HookHandler._afterGetPreferredHeight_Vector2 += value;
                HookHandler.HookGetPreferredHeight_Vector2();
            }
            remove => HookHandler._afterGetPreferredHeight_Vector2 -= value;
        }

        public static event Delegates.GetRenderedValues_NormalArgs GetRenderedValues
        {
            add
            {
                HookHandler._afterGetRenderedValues += value;
                HookHandler.HookGetRenderedValues();
            }
            remove => HookHandler._afterGetRenderedValues -= value;
        }

        public static event Delegates.GetRenderedWidth_NormalArgs GetRenderedWidth
        {
            add
            {
                HookHandler._afterGetRenderedWidth += value;
                HookHandler.HookGetRenderedWidth();
            }
            remove => HookHandler._afterGetRenderedWidth -= value;
        }

        public static event Delegates.GetRenderedHeight_NormalArgs GetRenderedHeight
        {
            add
            {
                HookHandler._afterGetRenderedHeight += value;
                HookHandler.HookGetRenderedHeight();
            }
            remove => HookHandler._afterGetRenderedHeight -= value;
        }

        public static event Delegates.CalculatePreferredValues_NormalArgs CalculatePreferredValues
        {
            add
            {
                HookHandler._afterCalculatePreferredValues += value;
                HookHandler.HookCalculatePreferredValues();
            }
            remove => HookHandler._afterCalculatePreferredValues -= value;
        }

        public static event Delegates.GetCompoundBounds_NormalArgs GetCompoundBounds
        {
            add
            {
                HookHandler._afterGetCompoundBounds += value;
                HookHandler.HookGetCompoundBounds();
            }
            remove => HookHandler._afterGetCompoundBounds -= value;
        }

        public static event Delegates.GetTextBounds_NormalArgs GetTextBounds
        {
            add
            {
                HookHandler._afterGetTextBounds += value;
                HookHandler.HookGetTextBounds();
            }
            remove => HookHandler._afterGetTextBounds -= value;
        }

        public static event Delegates.AdjustLineOffset_NormalArgs AdjustLineOffset
        {
            add
            {
                HookHandler._afterAdjustLineOffset += value;
                HookHandler.HookAdjustLineOffset();
            }
            remove => HookHandler._afterAdjustLineOffset -= value;
        }

        public static event Delegates.ResizeLineExtents_NormalArgs ResizeLineExtents
        {
            add
            {
                HookHandler._afterResizeLineExtents += value;
                HookHandler.HookResizeLineExtents();
            }
            remove => HookHandler._afterResizeLineExtents -= value;
        }

        public static event Delegates.GetTextInfo_NormalArgs GetTextInfo
        {
            add
            {
                HookHandler._afterGetTextInfo += value;
                HookHandler.HookGetTextInfo();
            }
            remove => HookHandler._afterGetTextInfo -= value;
        }

        public static event Delegates.ComputeMarginSize_NormalArgs ComputeMarginSize
        {
            add
            {
                HookHandler._afterComputeMarginSize += value;
                HookHandler.HookComputeMarginSize();
            }
            remove => HookHandler._afterComputeMarginSize -= value;
        }

        public static event Delegates.GetArraySizes_NormalArgs GetArraySizes
        {
            add
            {
                HookHandler._afterGetArraySizes += value;
                HookHandler.HookGetArraySizes();
            }
            remove => HookHandler._afterGetArraySizes -= value;
        }

        public static event Delegates.SaveWordWrappingState_NormalArgs SaveWordWrappingState
        {
            add
            {
                HookHandler._afterSaveWordWrappingState += value;
                HookHandler.HookSaveWordWrappingState();
            }
            remove => HookHandler._afterSaveWordWrappingState -= value;
        }

        public static event Delegates.RestoreWordWrappingState_NormalArgs RestoreWordWrappingState
        {
            add
            {
                HookHandler._afterRestoreWordWrappingState += value;
                HookHandler.HookRestoreWordWrappingState();
            }
            remove => HookHandler._afterRestoreWordWrappingState -= value;
        }

        public static event Delegates.SaveGlyphVertexInfo_NormalArgs SaveGlyphVertexInfo
        {
            add
            {
                HookHandler._afterSaveGlyphVertexInfo += value;
                HookHandler.HookSaveGlyphVertexInfo();
            }
            remove => HookHandler._afterSaveGlyphVertexInfo -= value;
        }

        public static event Delegates.SaveSpriteVertexInfo_NormalArgs SaveSpriteVertexInfo
        {
            add
            {
                HookHandler._afterSaveSpriteVertexInfo += value;
                HookHandler.HookSaveSpriteVertexInfo();
            }
            remove => HookHandler._afterSaveSpriteVertexInfo -= value;
        }

        public static event Delegates.FillCharacterVertexBuffers_int_int_NormalArgs FillCharacterVertexBuffers_int_int
        {
            add
            {
                HookHandler._afterFillCharacterVertexBuffers_int_int += value;
                HookHandler.HookFillCharacterVertexBuffers_int_int();
            }
            remove => HookHandler._afterFillCharacterVertexBuffers_int_int -= value;
        }

        public static event Delegates.FillCharacterVertexBuffers_int_int_bool_NormalArgs
            FillCharacterVertexBuffers_int_int_bool
            {
                add
                {
                    HookHandler._afterFillCharacterVertexBuffers_int_int_bool += value;
                    HookHandler.HookFillCharacterVertexBuffers_int_int_bool();
                }
                remove => HookHandler._afterFillCharacterVertexBuffers_int_int_bool -= value;
            }

        public static event Delegates.FillSpriteVertexBuffers_NormalArgs FillSpriteVertexBuffers
        {
            add
            {
                HookHandler._afterFillSpriteVertexBuffers += value;
                HookHandler.HookFillSpriteVertexBuffers();
            }
            remove => HookHandler._afterFillSpriteVertexBuffers -= value;
        }

        public static event Delegates.DrawUnderlineMesh_NormalArgs DrawUnderlineMesh
        {
            add
            {
                HookHandler._afterDrawUnderlineMesh += value;
                HookHandler.HookDrawUnderlineMesh();
            }
            remove => HookHandler._afterDrawUnderlineMesh -= value;
        }

        public static event Delegates.GetSpecialCharacters_NormalArgs GetSpecialCharacters
        {
            add
            {
                HookHandler._afterGetSpecialCharacters += value;
                HookHandler.HookGetSpecialCharacters();
            }
            remove => HookHandler._afterGetSpecialCharacters -= value;
        }

        public static event Delegates.GetFontAssetForWeight_NormalArgs GetFontAssetForWeight
        {
            add
            {
                HookHandler._afterGetFontAssetForWeight += value;
                HookHandler.HookGetFontAssetForWeight();
            }
            remove => HookHandler._afterGetFontAssetForWeight -= value;
        }

        public static event Delegates.SetActiveSubMeshes_NormalArgs SetActiveSubMeshes
        {
            add
            {
                HookHandler._afterSetActiveSubMeshes += value;
                HookHandler.HookSetActiveSubMeshes();
            }
            remove => HookHandler._afterSetActiveSubMeshes -= value;
        }

        public static event Delegates.PackUV_float_float_float_NormalArgs PackUV_float_float_float
        {
            add
            {
                HookHandler._afterPackUV_float_float_float += value;
                HookHandler.HookPackUV_float_float_float();
            }
            remove => HookHandler._afterPackUV_float_float_float -= value;
        }

        public static event Delegates.PackUV_float_float_NormalArgs PackUV_float_float
        {
            add
            {
                HookHandler._afterPackUV_float_float += value;
                HookHandler.HookPackUV_float_float();
            }
            remove => HookHandler._afterPackUV_float_float -= value;
        }

        public static event Delegates.HexToInt_NormalArgs HexToInt
        {
            add
            {
                HookHandler._afterHexToInt += value;
                HookHandler.HookHexToInt();
            }
            remove => HookHandler._afterHexToInt -= value;
        }

        public static event Delegates.GetUTF16_NormalArgs GetUTF16
        {
            add
            {
                HookHandler._afterGetUTF16 += value;
                HookHandler.HookGetUTF16();
            }
            remove => HookHandler._afterGetUTF16 -= value;
        }

        public static event Delegates.GetUTF32_NormalArgs GetUTF32
        {
            add
            {
                HookHandler._afterGetUTF32 += value;
                HookHandler.HookGetUTF32();
            }
            remove => HookHandler._afterGetUTF32 -= value;
        }

        public static event Delegates.HexCharsToColor_Array_int_NormalArgs HexCharsToColor_Array_int
        {
            add
            {
                HookHandler._afterHexCharsToColor_Array_int += value;
                HookHandler.HookHexCharsToColor_Array_int();
            }
            remove => HookHandler._afterHexCharsToColor_Array_int -= value;
        }

        public static event Delegates.HexCharsToColor_Array_int_int_NormalArgs HexCharsToColor_Array_int_int
        {
            add
            {
                HookHandler._afterHexCharsToColor_Array_int_int += value;
                HookHandler.HookHexCharsToColor_Array_int_int();
            }
            remove => HookHandler._afterHexCharsToColor_Array_int_int -= value;
        }

        public static event Delegates.ConvertToFloat_NormalArgs ConvertToFloat
        {
            add
            {
                HookHandler._afterConvertToFloat += value;
                HookHandler.HookConvertToFloat();
            }
            remove => HookHandler._afterConvertToFloat -= value;
        }

        public static event Delegates.ValidateHtmlTag_NormalArgs ValidateHtmlTag
        {
            add
            {
                HookHandler._afterValidateHtmlTag += value;
                HookHandler.HookValidateHtmlTag();
            }
            remove => HookHandler._afterValidateHtmlTag -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_text_NormalArgs get_text
        {
            add => HookEndpointManager.Add<Delegates.get_text_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_text"), value);
            remove => HookEndpointManager.Remove<Delegates.get_text_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_text"), value);
        }

        public static event Delegates.set_text_NormalArgs set_text
        {
            add => HookEndpointManager.Add<Delegates.set_text_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_text"), value);
            remove => HookEndpointManager.Remove<Delegates.set_text_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_text"), value);
        }

        public static event Delegates.get_isRightToLeftText_NormalArgs get_isRightToLeftText
        {
            add => HookEndpointManager.Add<Delegates.get_isRightToLeftText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_isRightToLeftText"), value);
            remove => HookEndpointManager.Remove<Delegates.get_isRightToLeftText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_isRightToLeftText"), value);
        }

        public static event Delegates.set_isRightToLeftText_NormalArgs set_isRightToLeftText
        {
            add => HookEndpointManager.Add<Delegates.set_isRightToLeftText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_isRightToLeftText"), value);
            remove => HookEndpointManager.Remove<Delegates.set_isRightToLeftText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_isRightToLeftText"), value);
        }

        public static event Delegates.get_font_NormalArgs get_font
        {
            add => HookEndpointManager.Add<Delegates.get_font_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_font"), value);
            remove => HookEndpointManager.Remove<Delegates.get_font_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_font"), value);
        }

        public static event Delegates.set_font_NormalArgs set_font
        {
            add => HookEndpointManager.Add<Delegates.set_font_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_font"), value);
            remove => HookEndpointManager.Remove<Delegates.set_font_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_font"), value);
        }

        public static event Delegates.get_fontSharedMaterial_NormalArgs get_fontSharedMaterial
        {
            add => HookEndpointManager.Add<Delegates.get_fontSharedMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontSharedMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.get_fontSharedMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontSharedMaterial"), value);
        }

        public static event Delegates.set_fontSharedMaterial_NormalArgs set_fontSharedMaterial
        {
            add => HookEndpointManager.Add<Delegates.set_fontSharedMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontSharedMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.set_fontSharedMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontSharedMaterial"), value);
        }

        public static event Delegates.get_fontSharedMaterials_NormalArgs get_fontSharedMaterials
        {
            add => HookEndpointManager.Add<Delegates.get_fontSharedMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontSharedMaterials"), value);
            remove => HookEndpointManager.Remove<Delegates.get_fontSharedMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontSharedMaterials"), value);
        }

        public static event Delegates.set_fontSharedMaterials_NormalArgs set_fontSharedMaterials
        {
            add => HookEndpointManager.Add<Delegates.set_fontSharedMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontSharedMaterials"), value);
            remove => HookEndpointManager.Remove<Delegates.set_fontSharedMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontSharedMaterials"), value);
        }

        public static event Delegates.get_fontMaterial_NormalArgs get_fontMaterial
        {
            add => HookEndpointManager.Add<Delegates.get_fontMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.get_fontMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontMaterial"), value);
        }

        public static event Delegates.set_fontMaterial_NormalArgs set_fontMaterial
        {
            add => HookEndpointManager.Add<Delegates.set_fontMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.set_fontMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontMaterial"), value);
        }

        public static event Delegates.get_fontMaterials_NormalArgs get_fontMaterials
        {
            add => HookEndpointManager.Add<Delegates.get_fontMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontMaterials"), value);
            remove => HookEndpointManager.Remove<Delegates.get_fontMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontMaterials"), value);
        }

        public static event Delegates.set_fontMaterials_NormalArgs set_fontMaterials
        {
            add => HookEndpointManager.Add<Delegates.set_fontMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontMaterials"), value);
            remove => HookEndpointManager.Remove<Delegates.set_fontMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontMaterials"), value);
        }

        public static event Delegates.get_color_NormalArgs get_color
        {
            add => HookEndpointManager.Add<Delegates.get_color_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_color"), value);
            remove => HookEndpointManager.Remove<Delegates.get_color_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_color"), value);
        }

        public static event Delegates.set_color_NormalArgs set_color
        {
            add => HookEndpointManager.Add<Delegates.set_color_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_color"), value);
            remove => HookEndpointManager.Remove<Delegates.set_color_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_color"), value);
        }

        public static event Delegates.get_alpha_NormalArgs get_alpha
        {
            add => HookEndpointManager.Add<Delegates.get_alpha_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_alpha"), value);
            remove => HookEndpointManager.Remove<Delegates.get_alpha_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_alpha"), value);
        }

        public static event Delegates.set_alpha_NormalArgs set_alpha
        {
            add => HookEndpointManager.Add<Delegates.set_alpha_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_alpha"), value);
            remove => HookEndpointManager.Remove<Delegates.set_alpha_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_alpha"), value);
        }

        public static event Delegates.get_enableVertexGradient_NormalArgs get_enableVertexGradient
        {
            add => HookEndpointManager.Add<Delegates.get_enableVertexGradient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_enableVertexGradient"), value);
            remove => HookEndpointManager.Remove<Delegates.get_enableVertexGradient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_enableVertexGradient"), value);
        }

        public static event Delegates.set_enableVertexGradient_NormalArgs set_enableVertexGradient
        {
            add => HookEndpointManager.Add<Delegates.set_enableVertexGradient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_enableVertexGradient"), value);
            remove => HookEndpointManager.Remove<Delegates.set_enableVertexGradient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_enableVertexGradient"), value);
        }

        public static event Delegates.get_colorGradient_NormalArgs get_colorGradient
        {
            add => HookEndpointManager.Add<Delegates.get_colorGradient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_colorGradient"), value);
            remove => HookEndpointManager.Remove<Delegates.get_colorGradient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_colorGradient"), value);
        }

        public static event Delegates.set_colorGradient_NormalArgs set_colorGradient
        {
            add => HookEndpointManager.Add<Delegates.set_colorGradient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_colorGradient"), value);
            remove => HookEndpointManager.Remove<Delegates.set_colorGradient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_colorGradient"), value);
        }

        public static event Delegates.get_colorGradientPreset_NormalArgs get_colorGradientPreset
        {
            add => HookEndpointManager.Add<Delegates.get_colorGradientPreset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_colorGradientPreset"), value);
            remove => HookEndpointManager.Remove<Delegates.get_colorGradientPreset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_colorGradientPreset"), value);
        }

        public static event Delegates.set_colorGradientPreset_NormalArgs set_colorGradientPreset
        {
            add => HookEndpointManager.Add<Delegates.set_colorGradientPreset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_colorGradientPreset"), value);
            remove => HookEndpointManager.Remove<Delegates.set_colorGradientPreset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_colorGradientPreset"), value);
        }

        public static event Delegates.get_spriteAsset_NormalArgs get_spriteAsset
        {
            add => HookEndpointManager.Add<Delegates.get_spriteAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_spriteAsset"), value);
            remove => HookEndpointManager.Remove<Delegates.get_spriteAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_spriteAsset"), value);
        }

        public static event Delegates.set_spriteAsset_NormalArgs set_spriteAsset
        {
            add => HookEndpointManager.Add<Delegates.set_spriteAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_spriteAsset"), value);
            remove => HookEndpointManager.Remove<Delegates.set_spriteAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_spriteAsset"), value);
        }

        public static event Delegates.get_tintAllSprites_NormalArgs get_tintAllSprites
        {
            add => HookEndpointManager.Add<Delegates.get_tintAllSprites_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_tintAllSprites"), value);
            remove => HookEndpointManager.Remove<Delegates.get_tintAllSprites_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_tintAllSprites"), value);
        }

        public static event Delegates.set_tintAllSprites_NormalArgs set_tintAllSprites
        {
            add => HookEndpointManager.Add<Delegates.set_tintAllSprites_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_tintAllSprites"), value);
            remove => HookEndpointManager.Remove<Delegates.set_tintAllSprites_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_tintAllSprites"), value);
        }

        public static event Delegates.get_overrideColorTags_NormalArgs get_overrideColorTags
        {
            add => HookEndpointManager.Add<Delegates.get_overrideColorTags_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_overrideColorTags"), value);
            remove => HookEndpointManager.Remove<Delegates.get_overrideColorTags_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_overrideColorTags"), value);
        }

        public static event Delegates.set_overrideColorTags_NormalArgs set_overrideColorTags
        {
            add => HookEndpointManager.Add<Delegates.set_overrideColorTags_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_overrideColorTags"), value);
            remove => HookEndpointManager.Remove<Delegates.set_overrideColorTags_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_overrideColorTags"), value);
        }

        public static event Delegates.get_faceColor_NormalArgs get_faceColor
        {
            add => HookEndpointManager.Add<Delegates.get_faceColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_faceColor"), value);
            remove => HookEndpointManager.Remove<Delegates.get_faceColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_faceColor"), value);
        }

        public static event Delegates.set_faceColor_NormalArgs set_faceColor
        {
            add => HookEndpointManager.Add<Delegates.set_faceColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_faceColor"), value);
            remove => HookEndpointManager.Remove<Delegates.set_faceColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_faceColor"), value);
        }

        public static event Delegates.get_outlineColor_NormalArgs get_outlineColor
        {
            add => HookEndpointManager.Add<Delegates.get_outlineColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_outlineColor"), value);
            remove => HookEndpointManager.Remove<Delegates.get_outlineColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_outlineColor"), value);
        }

        public static event Delegates.set_outlineColor_NormalArgs set_outlineColor
        {
            add => HookEndpointManager.Add<Delegates.set_outlineColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_outlineColor"), value);
            remove => HookEndpointManager.Remove<Delegates.set_outlineColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_outlineColor"), value);
        }

        public static event Delegates.get_outlineWidth_NormalArgs get_outlineWidth
        {
            add => HookEndpointManager.Add<Delegates.get_outlineWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_outlineWidth"), value);
            remove => HookEndpointManager.Remove<Delegates.get_outlineWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_outlineWidth"), value);
        }

        public static event Delegates.set_outlineWidth_NormalArgs set_outlineWidth
        {
            add => HookEndpointManager.Add<Delegates.set_outlineWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_outlineWidth"), value);
            remove => HookEndpointManager.Remove<Delegates.set_outlineWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_outlineWidth"), value);
        }

        public static event Delegates.get_fontSize_NormalArgs get_fontSize
        {
            add => HookEndpointManager.Add<Delegates.get_fontSize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontSize"), value);
            remove => HookEndpointManager.Remove<Delegates.get_fontSize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontSize"), value);
        }

        public static event Delegates.set_fontSize_NormalArgs set_fontSize
        {
            add => HookEndpointManager.Add<Delegates.set_fontSize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontSize"), value);
            remove => HookEndpointManager.Remove<Delegates.set_fontSize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontSize"), value);
        }

        public static event Delegates.get_fontScale_NormalArgs get_fontScale
        {
            add => HookEndpointManager.Add<Delegates.get_fontScale_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontScale"), value);
            remove => HookEndpointManager.Remove<Delegates.get_fontScale_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontScale"), value);
        }

        public static event Delegates.get_fontWeight_NormalArgs get_fontWeight
        {
            add => HookEndpointManager.Add<Delegates.get_fontWeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontWeight"), value);
            remove => HookEndpointManager.Remove<Delegates.get_fontWeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontWeight"), value);
        }

        public static event Delegates.set_fontWeight_NormalArgs set_fontWeight
        {
            add => HookEndpointManager.Add<Delegates.set_fontWeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontWeight"), value);
            remove => HookEndpointManager.Remove<Delegates.set_fontWeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontWeight"), value);
        }

        public static event Delegates.get_pixelsPerUnit_NormalArgs get_pixelsPerUnit
        {
            add => HookEndpointManager.Add<Delegates.get_pixelsPerUnit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_pixelsPerUnit"), value);
            remove => HookEndpointManager.Remove<Delegates.get_pixelsPerUnit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_pixelsPerUnit"), value);
        }

        public static event Delegates.get_enableAutoSizing_NormalArgs get_enableAutoSizing
        {
            add => HookEndpointManager.Add<Delegates.get_enableAutoSizing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_enableAutoSizing"), value);
            remove => HookEndpointManager.Remove<Delegates.get_enableAutoSizing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_enableAutoSizing"), value);
        }

        public static event Delegates.set_enableAutoSizing_NormalArgs set_enableAutoSizing
        {
            add => HookEndpointManager.Add<Delegates.set_enableAutoSizing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_enableAutoSizing"), value);
            remove => HookEndpointManager.Remove<Delegates.set_enableAutoSizing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_enableAutoSizing"), value);
        }

        public static event Delegates.get_fontSizeMin_NormalArgs get_fontSizeMin
        {
            add => HookEndpointManager.Add<Delegates.get_fontSizeMin_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontSizeMin"), value);
            remove => HookEndpointManager.Remove<Delegates.get_fontSizeMin_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontSizeMin"), value);
        }

        public static event Delegates.set_fontSizeMin_NormalArgs set_fontSizeMin
        {
            add => HookEndpointManager.Add<Delegates.set_fontSizeMin_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontSizeMin"), value);
            remove => HookEndpointManager.Remove<Delegates.set_fontSizeMin_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontSizeMin"), value);
        }

        public static event Delegates.get_fontSizeMax_NormalArgs get_fontSizeMax
        {
            add => HookEndpointManager.Add<Delegates.get_fontSizeMax_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontSizeMax"), value);
            remove => HookEndpointManager.Remove<Delegates.get_fontSizeMax_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontSizeMax"), value);
        }

        public static event Delegates.set_fontSizeMax_NormalArgs set_fontSizeMax
        {
            add => HookEndpointManager.Add<Delegates.set_fontSizeMax_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontSizeMax"), value);
            remove => HookEndpointManager.Remove<Delegates.set_fontSizeMax_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontSizeMax"), value);
        }

        public static event Delegates.get_fontStyle_NormalArgs get_fontStyle
        {
            add => HookEndpointManager.Add<Delegates.get_fontStyle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontStyle"), value);
            remove => HookEndpointManager.Remove<Delegates.get_fontStyle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_fontStyle"), value);
        }

        public static event Delegates.set_fontStyle_NormalArgs set_fontStyle
        {
            add => HookEndpointManager.Add<Delegates.set_fontStyle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontStyle"), value);
            remove => HookEndpointManager.Remove<Delegates.set_fontStyle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_fontStyle"), value);
        }

        public static event Delegates.get_isUsingBold_NormalArgs get_isUsingBold
        {
            add => HookEndpointManager.Add<Delegates.get_isUsingBold_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_isUsingBold"), value);
            remove => HookEndpointManager.Remove<Delegates.get_isUsingBold_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_isUsingBold"), value);
        }

        public static event Delegates.get_alignment_NormalArgs get_alignment
        {
            add => HookEndpointManager.Add<Delegates.get_alignment_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_alignment"), value);
            remove => HookEndpointManager.Remove<Delegates.get_alignment_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_alignment"), value);
        }

        public static event Delegates.set_alignment_NormalArgs set_alignment
        {
            add => HookEndpointManager.Add<Delegates.set_alignment_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_alignment"), value);
            remove => HookEndpointManager.Remove<Delegates.set_alignment_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_alignment"), value);
        }

        public static event Delegates.get_characterSpacing_NormalArgs get_characterSpacing
        {
            add => HookEndpointManager.Add<Delegates.get_characterSpacing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_characterSpacing"), value);
            remove => HookEndpointManager.Remove<Delegates.get_characterSpacing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_characterSpacing"), value);
        }

        public static event Delegates.set_characterSpacing_NormalArgs set_characterSpacing
        {
            add => HookEndpointManager.Add<Delegates.set_characterSpacing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_characterSpacing"), value);
            remove => HookEndpointManager.Remove<Delegates.set_characterSpacing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_characterSpacing"), value);
        }

        public static event Delegates.get_lineSpacing_NormalArgs get_lineSpacing
        {
            add => HookEndpointManager.Add<Delegates.get_lineSpacing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_lineSpacing"), value);
            remove => HookEndpointManager.Remove<Delegates.get_lineSpacing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_lineSpacing"), value);
        }

        public static event Delegates.set_lineSpacing_NormalArgs set_lineSpacing
        {
            add => HookEndpointManager.Add<Delegates.set_lineSpacing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_lineSpacing"), value);
            remove => HookEndpointManager.Remove<Delegates.set_lineSpacing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_lineSpacing"), value);
        }

        public static event Delegates.get_paragraphSpacing_NormalArgs get_paragraphSpacing
        {
            add => HookEndpointManager.Add<Delegates.get_paragraphSpacing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_paragraphSpacing"), value);
            remove => HookEndpointManager.Remove<Delegates.get_paragraphSpacing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_paragraphSpacing"), value);
        }

        public static event Delegates.set_paragraphSpacing_NormalArgs set_paragraphSpacing
        {
            add => HookEndpointManager.Add<Delegates.set_paragraphSpacing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_paragraphSpacing"), value);
            remove => HookEndpointManager.Remove<Delegates.set_paragraphSpacing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_paragraphSpacing"), value);
        }

        public static event Delegates.get_characterWidthAdjustment_NormalArgs get_characterWidthAdjustment
        {
            add => HookEndpointManager.Add<Delegates.get_characterWidthAdjustment_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_characterWidthAdjustment"), value);
            remove => HookEndpointManager.Remove<Delegates.get_characterWidthAdjustment_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_characterWidthAdjustment"), value);
        }

        public static event Delegates.set_characterWidthAdjustment_NormalArgs set_characterWidthAdjustment
        {
            add => HookEndpointManager.Add<Delegates.set_characterWidthAdjustment_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_characterWidthAdjustment"), value);
            remove => HookEndpointManager.Remove<Delegates.set_characterWidthAdjustment_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_characterWidthAdjustment"), value);
        }

        public static event Delegates.get_enableWordWrapping_NormalArgs get_enableWordWrapping
        {
            add => HookEndpointManager.Add<Delegates.get_enableWordWrapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_enableWordWrapping"), value);
            remove => HookEndpointManager.Remove<Delegates.get_enableWordWrapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_enableWordWrapping"), value);
        }

        public static event Delegates.set_enableWordWrapping_NormalArgs set_enableWordWrapping
        {
            add => HookEndpointManager.Add<Delegates.set_enableWordWrapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_enableWordWrapping"), value);
            remove => HookEndpointManager.Remove<Delegates.set_enableWordWrapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_enableWordWrapping"), value);
        }

        public static event Delegates.get_wordWrappingRatios_NormalArgs get_wordWrappingRatios
        {
            add => HookEndpointManager.Add<Delegates.get_wordWrappingRatios_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_wordWrappingRatios"), value);
            remove => HookEndpointManager.Remove<Delegates.get_wordWrappingRatios_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_wordWrappingRatios"), value);
        }

        public static event Delegates.set_wordWrappingRatios_NormalArgs set_wordWrappingRatios
        {
            add => HookEndpointManager.Add<Delegates.set_wordWrappingRatios_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_wordWrappingRatios"), value);
            remove => HookEndpointManager.Remove<Delegates.set_wordWrappingRatios_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_wordWrappingRatios"), value);
        }

        public static event Delegates.get_enableAdaptiveJustification_NormalArgs get_enableAdaptiveJustification
        {
            add => HookEndpointManager.Add<Delegates.get_enableAdaptiveJustification_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_enableAdaptiveJustification"), value);
            remove => HookEndpointManager.Remove<Delegates.get_enableAdaptiveJustification_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_enableAdaptiveJustification"), value);
        }

        public static event Delegates.set_enableAdaptiveJustification_NormalArgs set_enableAdaptiveJustification
        {
            add => HookEndpointManager.Add<Delegates.set_enableAdaptiveJustification_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_enableAdaptiveJustification"), value);
            remove => HookEndpointManager.Remove<Delegates.set_enableAdaptiveJustification_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_enableAdaptiveJustification"), value);
        }

        public static event Delegates.get_OverflowMode_NormalArgs get_OverflowMode
        {
            add => HookEndpointManager.Add<Delegates.get_OverflowMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_OverflowMode"), value);
            remove => HookEndpointManager.Remove<Delegates.get_OverflowMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_OverflowMode"), value);
        }

        public static event Delegates.set_OverflowMode_NormalArgs set_OverflowMode
        {
            add => HookEndpointManager.Add<Delegates.set_OverflowMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_OverflowMode"), value);
            remove => HookEndpointManager.Remove<Delegates.set_OverflowMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_OverflowMode"), value);
        }

        public static event Delegates.get_enableKerning_NormalArgs get_enableKerning
        {
            add => HookEndpointManager.Add<Delegates.get_enableKerning_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_enableKerning"), value);
            remove => HookEndpointManager.Remove<Delegates.get_enableKerning_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_enableKerning"), value);
        }

        public static event Delegates.set_enableKerning_NormalArgs set_enableKerning
        {
            add => HookEndpointManager.Add<Delegates.set_enableKerning_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_enableKerning"), value);
            remove => HookEndpointManager.Remove<Delegates.set_enableKerning_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_enableKerning"), value);
        }

        public static event Delegates.get_extraPadding_NormalArgs get_extraPadding
        {
            add => HookEndpointManager.Add<Delegates.get_extraPadding_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_extraPadding"), value);
            remove => HookEndpointManager.Remove<Delegates.get_extraPadding_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_extraPadding"), value);
        }

        public static event Delegates.set_extraPadding_NormalArgs set_extraPadding
        {
            add => HookEndpointManager.Add<Delegates.set_extraPadding_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_extraPadding"), value);
            remove => HookEndpointManager.Remove<Delegates.set_extraPadding_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_extraPadding"), value);
        }

        public static event Delegates.get_richText_NormalArgs get_richText
        {
            add => HookEndpointManager.Add<Delegates.get_richText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_richText"), value);
            remove => HookEndpointManager.Remove<Delegates.get_richText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_richText"), value);
        }

        public static event Delegates.set_richText_NormalArgs set_richText
        {
            add => HookEndpointManager.Add<Delegates.set_richText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_richText"), value);
            remove => HookEndpointManager.Remove<Delegates.set_richText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_richText"), value);
        }

        public static event Delegates.get_parseCtrlCharacters_NormalArgs get_parseCtrlCharacters
        {
            add => HookEndpointManager.Add<Delegates.get_parseCtrlCharacters_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_parseCtrlCharacters"), value);
            remove => HookEndpointManager.Remove<Delegates.get_parseCtrlCharacters_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_parseCtrlCharacters"), value);
        }

        public static event Delegates.set_parseCtrlCharacters_NormalArgs set_parseCtrlCharacters
        {
            add => HookEndpointManager.Add<Delegates.set_parseCtrlCharacters_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_parseCtrlCharacters"), value);
            remove => HookEndpointManager.Remove<Delegates.set_parseCtrlCharacters_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_parseCtrlCharacters"), value);
        }

        public static event Delegates.get_isOverlay_NormalArgs get_isOverlay
        {
            add => HookEndpointManager.Add<Delegates.get_isOverlay_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_isOverlay"), value);
            remove => HookEndpointManager.Remove<Delegates.get_isOverlay_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_isOverlay"), value);
        }

        public static event Delegates.set_isOverlay_NormalArgs set_isOverlay
        {
            add => HookEndpointManager.Add<Delegates.set_isOverlay_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_isOverlay"), value);
            remove => HookEndpointManager.Remove<Delegates.set_isOverlay_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_isOverlay"), value);
        }

        public static event Delegates.get_isOrthographic_NormalArgs get_isOrthographic
        {
            add => HookEndpointManager.Add<Delegates.get_isOrthographic_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_isOrthographic"), value);
            remove => HookEndpointManager.Remove<Delegates.get_isOrthographic_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_isOrthographic"), value);
        }

        public static event Delegates.set_isOrthographic_NormalArgs set_isOrthographic
        {
            add => HookEndpointManager.Add<Delegates.set_isOrthographic_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_isOrthographic"), value);
            remove => HookEndpointManager.Remove<Delegates.set_isOrthographic_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_isOrthographic"), value);
        }

        public static event Delegates.get_enableCulling_NormalArgs get_enableCulling
        {
            add => HookEndpointManager.Add<Delegates.get_enableCulling_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_enableCulling"), value);
            remove => HookEndpointManager.Remove<Delegates.get_enableCulling_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_enableCulling"), value);
        }

        public static event Delegates.set_enableCulling_NormalArgs set_enableCulling
        {
            add => HookEndpointManager.Add<Delegates.set_enableCulling_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_enableCulling"), value);
            remove => HookEndpointManager.Remove<Delegates.set_enableCulling_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_enableCulling"), value);
        }

        public static event Delegates.get_ignoreVisibility_NormalArgs get_ignoreVisibility
        {
            add => HookEndpointManager.Add<Delegates.get_ignoreVisibility_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_ignoreVisibility"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ignoreVisibility_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_ignoreVisibility"), value);
        }

        public static event Delegates.set_ignoreVisibility_NormalArgs set_ignoreVisibility
        {
            add => HookEndpointManager.Add<Delegates.set_ignoreVisibility_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_ignoreVisibility"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ignoreVisibility_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_ignoreVisibility"), value);
        }

        public static event Delegates.get_horizontalMapping_NormalArgs get_horizontalMapping
        {
            add => HookEndpointManager.Add<Delegates.get_horizontalMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_horizontalMapping"), value);
            remove => HookEndpointManager.Remove<Delegates.get_horizontalMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_horizontalMapping"), value);
        }

        public static event Delegates.set_horizontalMapping_NormalArgs set_horizontalMapping
        {
            add => HookEndpointManager.Add<Delegates.set_horizontalMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_horizontalMapping"), value);
            remove => HookEndpointManager.Remove<Delegates.set_horizontalMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_horizontalMapping"), value);
        }

        public static event Delegates.get_verticalMapping_NormalArgs get_verticalMapping
        {
            add => HookEndpointManager.Add<Delegates.get_verticalMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_verticalMapping"), value);
            remove => HookEndpointManager.Remove<Delegates.get_verticalMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_verticalMapping"), value);
        }

        public static event Delegates.set_verticalMapping_NormalArgs set_verticalMapping
        {
            add => HookEndpointManager.Add<Delegates.set_verticalMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_verticalMapping"), value);
            remove => HookEndpointManager.Remove<Delegates.set_verticalMapping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_verticalMapping"), value);
        }

        public static event Delegates.get_renderMode_NormalArgs get_renderMode
        {
            add => HookEndpointManager.Add<Delegates.get_renderMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_renderMode"), value);
            remove => HookEndpointManager.Remove<Delegates.get_renderMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_renderMode"), value);
        }

        public static event Delegates.set_renderMode_NormalArgs set_renderMode
        {
            add => HookEndpointManager.Add<Delegates.set_renderMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_renderMode"), value);
            remove => HookEndpointManager.Remove<Delegates.set_renderMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_renderMode"), value);
        }

        public static event Delegates.get_maxVisibleCharacters_NormalArgs get_maxVisibleCharacters
        {
            add => HookEndpointManager.Add<Delegates.get_maxVisibleCharacters_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_maxVisibleCharacters"), value);
            remove => HookEndpointManager.Remove<Delegates.get_maxVisibleCharacters_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_maxVisibleCharacters"), value);
        }

        public static event Delegates.set_maxVisibleCharacters_NormalArgs set_maxVisibleCharacters
        {
            add => HookEndpointManager.Add<Delegates.set_maxVisibleCharacters_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_maxVisibleCharacters"), value);
            remove => HookEndpointManager.Remove<Delegates.set_maxVisibleCharacters_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_maxVisibleCharacters"), value);
        }

        public static event Delegates.get_maxVisibleWords_NormalArgs get_maxVisibleWords
        {
            add => HookEndpointManager.Add<Delegates.get_maxVisibleWords_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_maxVisibleWords"), value);
            remove => HookEndpointManager.Remove<Delegates.get_maxVisibleWords_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_maxVisibleWords"), value);
        }

        public static event Delegates.set_maxVisibleWords_NormalArgs set_maxVisibleWords
        {
            add => HookEndpointManager.Add<Delegates.set_maxVisibleWords_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_maxVisibleWords"), value);
            remove => HookEndpointManager.Remove<Delegates.set_maxVisibleWords_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_maxVisibleWords"), value);
        }

        public static event Delegates.get_maxVisibleLines_NormalArgs get_maxVisibleLines
        {
            add => HookEndpointManager.Add<Delegates.get_maxVisibleLines_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_maxVisibleLines"), value);
            remove => HookEndpointManager.Remove<Delegates.get_maxVisibleLines_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_maxVisibleLines"), value);
        }

        public static event Delegates.set_maxVisibleLines_NormalArgs set_maxVisibleLines
        {
            add => HookEndpointManager.Add<Delegates.set_maxVisibleLines_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_maxVisibleLines"), value);
            remove => HookEndpointManager.Remove<Delegates.set_maxVisibleLines_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_maxVisibleLines"), value);
        }

        public static event Delegates.get_useMaxVisibleDescender_NormalArgs get_useMaxVisibleDescender
        {
            add => HookEndpointManager.Add<Delegates.get_useMaxVisibleDescender_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_useMaxVisibleDescender"), value);
            remove => HookEndpointManager.Remove<Delegates.get_useMaxVisibleDescender_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_useMaxVisibleDescender"), value);
        }

        public static event Delegates.set_useMaxVisibleDescender_NormalArgs set_useMaxVisibleDescender
        {
            add => HookEndpointManager.Add<Delegates.set_useMaxVisibleDescender_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_useMaxVisibleDescender"), value);
            remove => HookEndpointManager.Remove<Delegates.set_useMaxVisibleDescender_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_useMaxVisibleDescender"), value);
        }

        public static event Delegates.get_pageToDisplay_NormalArgs get_pageToDisplay
        {
            add => HookEndpointManager.Add<Delegates.get_pageToDisplay_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_pageToDisplay"), value);
            remove => HookEndpointManager.Remove<Delegates.get_pageToDisplay_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_pageToDisplay"), value);
        }

        public static event Delegates.set_pageToDisplay_NormalArgs set_pageToDisplay
        {
            add => HookEndpointManager.Add<Delegates.set_pageToDisplay_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_pageToDisplay"), value);
            remove => HookEndpointManager.Remove<Delegates.set_pageToDisplay_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_pageToDisplay"), value);
        }

        public static event Delegates.get_margin_NormalArgs get_margin
        {
            add => HookEndpointManager.Add<Delegates.get_margin_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_margin"), value);
            remove => HookEndpointManager.Remove<Delegates.get_margin_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_margin"), value);
        }

        public static event Delegates.set_margin_NormalArgs set_margin
        {
            add => HookEndpointManager.Add<Delegates.set_margin_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_margin"), value);
            remove => HookEndpointManager.Remove<Delegates.set_margin_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_margin"), value);
        }

        public static event Delegates.get_textInfo_NormalArgs get_textInfo
        {
            add => HookEndpointManager.Add<Delegates.get_textInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_textInfo"), value);
            remove => HookEndpointManager.Remove<Delegates.get_textInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_textInfo"), value);
        }

        public static event Delegates.get_havePropertiesChanged_NormalArgs get_havePropertiesChanged
        {
            add => HookEndpointManager.Add<Delegates.get_havePropertiesChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_havePropertiesChanged"), value);
            remove => HookEndpointManager.Remove<Delegates.get_havePropertiesChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_havePropertiesChanged"), value);
        }

        public static event Delegates.set_havePropertiesChanged_NormalArgs set_havePropertiesChanged
        {
            add => HookEndpointManager.Add<Delegates.set_havePropertiesChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_havePropertiesChanged"), value);
            remove => HookEndpointManager.Remove<Delegates.set_havePropertiesChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_havePropertiesChanged"), value);
        }

        public static event Delegates.get_isUsingLegacyAnimationComponent_NormalArgs get_isUsingLegacyAnimationComponent
        {
            add => HookEndpointManager.Add<Delegates.get_isUsingLegacyAnimationComponent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_isUsingLegacyAnimationComponent"), value);
            remove => HookEndpointManager.Remove<Delegates.get_isUsingLegacyAnimationComponent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_isUsingLegacyAnimationComponent"), value);
        }

        public static event Delegates.set_isUsingLegacyAnimationComponent_NormalArgs set_isUsingLegacyAnimationComponent
        {
            add => HookEndpointManager.Add<Delegates.set_isUsingLegacyAnimationComponent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_isUsingLegacyAnimationComponent"), value);
            remove => HookEndpointManager.Remove<Delegates.set_isUsingLegacyAnimationComponent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_isUsingLegacyAnimationComponent"), value);
        }

        public static event Delegates.get_transform_NormalArgs get_transform
        {
            add => HookEndpointManager.Add<Delegates.get_transform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_transform"), value);
            remove => HookEndpointManager.Remove<Delegates.get_transform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_transform"), value);
        }

        public static event Delegates.get_rectTransform_NormalArgs get_rectTransform
        {
            add => HookEndpointManager.Add<Delegates.get_rectTransform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_rectTransform"), value);
            remove => HookEndpointManager.Remove<Delegates.get_rectTransform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_rectTransform"), value);
        }

        public static event Delegates.get_autoSizeTextContainer_NormalArgs get_autoSizeTextContainer
        {
            add => HookEndpointManager.Add<Delegates.get_autoSizeTextContainer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_autoSizeTextContainer"), value);
            remove => HookEndpointManager.Remove<Delegates.get_autoSizeTextContainer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_autoSizeTextContainer"), value);
        }

        public static event Delegates.set_autoSizeTextContainer_NormalArgs set_autoSizeTextContainer
        {
            add => HookEndpointManager.Add<Delegates.set_autoSizeTextContainer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_autoSizeTextContainer"), value);
            remove => HookEndpointManager.Remove<Delegates.set_autoSizeTextContainer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_autoSizeTextContainer"), value);
        }

        public static event Delegates.get_mesh_NormalArgs get_mesh
        {
            add => HookEndpointManager.Add<Delegates.get_mesh_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_mesh"), value);
            remove => HookEndpointManager.Remove<Delegates.get_mesh_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_mesh"), value);
        }

        public static event Delegates.get_isVolumetricText_NormalArgs get_isVolumetricText
        {
            add => HookEndpointManager.Add<Delegates.get_isVolumetricText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_isVolumetricText"), value);
            remove => HookEndpointManager.Remove<Delegates.get_isVolumetricText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_isVolumetricText"), value);
        }

        public static event Delegates.set_isVolumetricText_NormalArgs set_isVolumetricText
        {
            add => HookEndpointManager.Add<Delegates.set_isVolumetricText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_isVolumetricText"), value);
            remove => HookEndpointManager.Remove<Delegates.set_isVolumetricText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "set_isVolumetricText"), value);
        }

        public static event Delegates.get_bounds_NormalArgs get_bounds
        {
            add => HookEndpointManager.Add<Delegates.get_bounds_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_bounds"), value);
            remove => HookEndpointManager.Remove<Delegates.get_bounds_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_bounds"), value);
        }

        public static event Delegates.get_textBounds_NormalArgs get_textBounds
        {
            add => HookEndpointManager.Add<Delegates.get_textBounds_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_textBounds"), value);
            remove => HookEndpointManager.Remove<Delegates.get_textBounds_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_textBounds"), value);
        }

        public static event Delegates.get_flexibleHeight_NormalArgs get_flexibleHeight
        {
            add => HookEndpointManager.Add<Delegates.get_flexibleHeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_flexibleHeight"), value);
            remove => HookEndpointManager.Remove<Delegates.get_flexibleHeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_flexibleHeight"), value);
        }

        public static event Delegates.get_flexibleWidth_NormalArgs get_flexibleWidth
        {
            add => HookEndpointManager.Add<Delegates.get_flexibleWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_flexibleWidth"), value);
            remove => HookEndpointManager.Remove<Delegates.get_flexibleWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_flexibleWidth"), value);
        }

        public static event Delegates.get_minHeight_NormalArgs get_minHeight
        {
            add => HookEndpointManager.Add<Delegates.get_minHeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_minHeight"), value);
            remove => HookEndpointManager.Remove<Delegates.get_minHeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_minHeight"), value);
        }

        public static event Delegates.get_minWidth_NormalArgs get_minWidth
        {
            add => HookEndpointManager.Add<Delegates.get_minWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_minWidth"), value);
            remove => HookEndpointManager.Remove<Delegates.get_minWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_minWidth"), value);
        }

        public static event Delegates.get_preferredWidth_NormalArgs get_preferredWidth
        {
            add => HookEndpointManager.Add<Delegates.get_preferredWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_preferredWidth"), value);
            remove => HookEndpointManager.Remove<Delegates.get_preferredWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_preferredWidth"), value);
        }

        public static event Delegates.get_preferredHeight_NormalArgs get_preferredHeight
        {
            add => HookEndpointManager.Add<Delegates.get_preferredHeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_preferredHeight"), value);
            remove => HookEndpointManager.Remove<Delegates.get_preferredHeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_preferredHeight"), value);
        }

        public static event Delegates.get_renderedWidth_NormalArgs get_renderedWidth
        {
            add => HookEndpointManager.Add<Delegates.get_renderedWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_renderedWidth"), value);
            remove => HookEndpointManager.Remove<Delegates.get_renderedWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_renderedWidth"), value);
        }

        public static event Delegates.get_renderedHeight_NormalArgs get_renderedHeight
        {
            add => HookEndpointManager.Add<Delegates.get_renderedHeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_renderedHeight"), value);
            remove => HookEndpointManager.Remove<Delegates.get_renderedHeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_renderedHeight"), value);
        }

        public static event Delegates.get_layoutPriority_NormalArgs get_layoutPriority
        {
            add => HookEndpointManager.Add<Delegates.get_layoutPriority_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_layoutPriority"), value);
            remove => HookEndpointManager.Remove<Delegates.get_layoutPriority_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "get_layoutPriority"), value);
        }

        public static event Delegates.LoadFontAsset_NormalArgs LoadFontAsset
        {
            add => HookEndpointManager.Add<Delegates.LoadFontAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "LoadFontAsset"), value);
            remove => HookEndpointManager.Remove<Delegates.LoadFontAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "LoadFontAsset"), value);
        }

        public static event Delegates.SetSharedMaterial_NormalArgs SetSharedMaterial
        {
            add => HookEndpointManager.Add<Delegates.SetSharedMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetSharedMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.SetSharedMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetSharedMaterial"), value);
        }

        public static event Delegates.GetMaterial_NormalArgs GetMaterial
        {
            add => HookEndpointManager.Add<Delegates.GetMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.GetMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetMaterial"), value);
        }

        public static event Delegates.SetFontBaseMaterial_NormalArgs SetFontBaseMaterial
        {
            add => HookEndpointManager.Add<Delegates.SetFontBaseMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetFontBaseMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.SetFontBaseMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetFontBaseMaterial"), value);
        }

        public static event Delegates.GetSharedMaterials_NormalArgs GetSharedMaterials
        {
            add => HookEndpointManager.Add<Delegates.GetSharedMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetSharedMaterials"), value);
            remove => HookEndpointManager.Remove<Delegates.GetSharedMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetSharedMaterials"), value);
        }

        public static event Delegates.SetSharedMaterials_NormalArgs SetSharedMaterials
        {
            add => HookEndpointManager.Add<Delegates.SetSharedMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetSharedMaterials"), value);
            remove => HookEndpointManager.Remove<Delegates.SetSharedMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetSharedMaterials"), value);
        }

        public static event Delegates.GetMaterials_NormalArgs GetMaterials
        {
            add => HookEndpointManager.Add<Delegates.GetMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetMaterials"), value);
            remove => HookEndpointManager.Remove<Delegates.GetMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetMaterials"), value);
        }

        public static event Delegates.CreateMaterialInstance_NormalArgs CreateMaterialInstance
        {
            add => HookEndpointManager.Add<Delegates.CreateMaterialInstance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "CreateMaterialInstance"), value);
            remove => HookEndpointManager.Remove<Delegates.CreateMaterialInstance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "CreateMaterialInstance"), value);
        }

        public static event Delegates.SetVertexColorGradient_NormalArgs SetVertexColorGradient
        {
            add => HookEndpointManager.Add<Delegates.SetVertexColorGradient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetVertexColorGradient"), value);
            remove => HookEndpointManager.Remove<Delegates.SetVertexColorGradient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetVertexColorGradient"), value);
        }

        public static event Delegates.SetFaceColor_NormalArgs SetFaceColor
        {
            add => HookEndpointManager.Add<Delegates.SetFaceColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetFaceColor"), value);
            remove => HookEndpointManager.Remove<Delegates.SetFaceColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetFaceColor"), value);
        }

        public static event Delegates.SetOutlineColor_NormalArgs SetOutlineColor
        {
            add => HookEndpointManager.Add<Delegates.SetOutlineColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetOutlineColor"), value);
            remove => HookEndpointManager.Remove<Delegates.SetOutlineColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetOutlineColor"), value);
        }

        public static event Delegates.SetOutlineThickness_NormalArgs SetOutlineThickness
        {
            add => HookEndpointManager.Add<Delegates.SetOutlineThickness_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetOutlineThickness"), value);
            remove => HookEndpointManager.Remove<Delegates.SetOutlineThickness_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetOutlineThickness"), value);
        }

        public static event Delegates.SetShaderDepth_NormalArgs SetShaderDepth
        {
            add => HookEndpointManager.Add<Delegates.SetShaderDepth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetShaderDepth"), value);
            remove => HookEndpointManager.Remove<Delegates.SetShaderDepth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetShaderDepth"), value);
        }

        public static event Delegates.SetCulling_NormalArgs SetCulling
        {
            add => HookEndpointManager.Add<Delegates.SetCulling_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetCulling"), value);
            remove => HookEndpointManager.Remove<Delegates.SetCulling_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetCulling"), value);
        }

        public static event Delegates.GetPaddingForMaterial_NormalArgs GetPaddingForMaterial
        {
            add => HookEndpointManager.Add<Delegates.GetPaddingForMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPaddingForMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.GetPaddingForMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPaddingForMaterial"), value);
        }

        public static event Delegates.GetPaddingForMaterial_Material_NormalArgs GetPaddingForMaterial_Material
        {
            add => HookEndpointManager.Add<Delegates.GetPaddingForMaterial_Material_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPaddingForMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.GetPaddingForMaterial_Material_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPaddingForMaterial"), value);
        }

        public static event Delegates.GetTextContainerLocalCorners_NormalArgs GetTextContainerLocalCorners
        {
            add => HookEndpointManager.Add<Delegates.GetTextContainerLocalCorners_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetTextContainerLocalCorners"), value);
            remove => HookEndpointManager.Remove<Delegates.GetTextContainerLocalCorners_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetTextContainerLocalCorners"), value);
        }

        public static event Delegates.ForceMeshUpdate_NormalArgs ForceMeshUpdate
        {
            add => HookEndpointManager.Add<Delegates.ForceMeshUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "ForceMeshUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.ForceMeshUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "ForceMeshUpdate"), value);
        }

        public static event Delegates.ForceMeshUpdate_bool_NormalArgs ForceMeshUpdate_bool
        {
            add => HookEndpointManager.Add<Delegates.ForceMeshUpdate_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "ForceMeshUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.ForceMeshUpdate_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "ForceMeshUpdate"), value);
        }

        public static event Delegates.SetTextInternal_NormalArgs SetTextInternal
        {
            add => HookEndpointManager.Add<Delegates.SetTextInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetTextInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.SetTextInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetTextInternal"), value);
        }

        public static event Delegates.UpdateGeometry_NormalArgs UpdateGeometry
        {
            add => HookEndpointManager.Add<Delegates.UpdateGeometry_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "UpdateGeometry"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateGeometry_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "UpdateGeometry"), value);
        }

        public static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_NormalArgs
            UpdateVertexData_TMP_VertexDataUpdateFlags
            {
                add => HookEndpointManager.Add<Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "UpdateVertexData"), value);
                remove => HookEndpointManager.Remove<Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "UpdateVertexData"), value);
            }

        public static event Delegates.UpdateVertexData_NormalArgs UpdateVertexData
        {
            add => HookEndpointManager.Add<Delegates.UpdateVertexData_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "UpdateVertexData"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateVertexData_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "UpdateVertexData"), value);
        }

        public static event Delegates.SetVertices_NormalArgs SetVertices
        {
            add => HookEndpointManager.Add<Delegates.SetVertices_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetVertices"), value);
            remove => HookEndpointManager.Remove<Delegates.SetVertices_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetVertices"), value);
        }

        public static event Delegates.UpdateMeshPadding_NormalArgs UpdateMeshPadding
        {
            add => HookEndpointManager.Add<Delegates.UpdateMeshPadding_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "UpdateMeshPadding"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateMeshPadding_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "UpdateMeshPadding"), value);
        }

        public static event Delegates.CrossFadeColor_NormalArgs CrossFadeColor
        {
            add => HookEndpointManager.Add<Delegates.CrossFadeColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "CrossFadeColor"), value);
            remove => HookEndpointManager.Remove<Delegates.CrossFadeColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "CrossFadeColor"), value);
        }

        public static event Delegates.CrossFadeAlpha_NormalArgs CrossFadeAlpha
        {
            add => HookEndpointManager.Add<Delegates.CrossFadeAlpha_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "CrossFadeAlpha"), value);
            remove => HookEndpointManager.Remove<Delegates.CrossFadeAlpha_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "CrossFadeAlpha"), value);
        }

        public static event Delegates.InternalCrossFadeColor_NormalArgs InternalCrossFadeColor
        {
            add => HookEndpointManager.Add<Delegates.InternalCrossFadeColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "InternalCrossFadeColor"), value);
            remove => HookEndpointManager.Remove<Delegates.InternalCrossFadeColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "InternalCrossFadeColor"), value);
        }

        public static event Delegates.InternalCrossFadeAlpha_NormalArgs InternalCrossFadeAlpha
        {
            add => HookEndpointManager.Add<Delegates.InternalCrossFadeAlpha_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "InternalCrossFadeAlpha"), value);
            remove => HookEndpointManager.Remove<Delegates.InternalCrossFadeAlpha_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "InternalCrossFadeAlpha"), value);
        }

        public static event Delegates.ParseInputText_NormalArgs ParseInputText
        {
            add => HookEndpointManager.Add<Delegates.ParseInputText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "ParseInputText"), value);
            remove => HookEndpointManager.Remove<Delegates.ParseInputText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "ParseInputText"), value);
        }

        public static event Delegates.SetText_string_NormalArgs SetText_string
        {
            add => HookEndpointManager.Add<Delegates.SetText_string_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetText"), value);
            remove => HookEndpointManager.Remove<Delegates.SetText_string_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetText"), value);
        }

        public static event Delegates.SetText_string_float_NormalArgs SetText_string_float
        {
            add => HookEndpointManager.Add<Delegates.SetText_string_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetText"), value);
            remove => HookEndpointManager.Remove<Delegates.SetText_string_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetText"), value);
        }

        public static event Delegates.SetText_string_float_float_NormalArgs SetText_string_float_float
        {
            add => HookEndpointManager.Add<Delegates.SetText_string_float_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetText"), value);
            remove => HookEndpointManager.Remove<Delegates.SetText_string_float_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetText"), value);
        }

        public static event Delegates.SetText_string_float_float_float_NormalArgs SetText_string_float_float_float
        {
            add => HookEndpointManager.Add<Delegates.SetText_string_float_float_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetText"), value);
            remove => HookEndpointManager.Remove<Delegates.SetText_string_float_float_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetText"), value);
        }

        public static event Delegates.SetText_StringBuilder_NormalArgs SetText_StringBuilder
        {
            add => HookEndpointManager.Add<Delegates.SetText_StringBuilder_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetText"), value);
            remove => HookEndpointManager.Remove<Delegates.SetText_StringBuilder_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetText"), value);
        }

        public static event Delegates.SetCharArray_NormalArgs SetCharArray
        {
            add => HookEndpointManager.Add<Delegates.SetCharArray_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetCharArray"), value);
            remove => HookEndpointManager.Remove<Delegates.SetCharArray_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetCharArray"), value);
        }

        public static event Delegates.SetTextArrayToCharArray_NormalArgs SetTextArrayToCharArray
        {
            add => HookEndpointManager.Add<Delegates.SetTextArrayToCharArray_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetTextArrayToCharArray"), value);
            remove => HookEndpointManager.Remove<Delegates.SetTextArrayToCharArray_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetTextArrayToCharArray"), value);
        }

        public static event Delegates.StringToCharArray_NormalArgs StringToCharArray
        {
            add => HookEndpointManager.Add<Delegates.StringToCharArray_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "StringToCharArray"), value);
            remove => HookEndpointManager.Remove<Delegates.StringToCharArray_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "StringToCharArray"), value);
        }

        public static event Delegates.StringBuilderToIntArray_NormalArgs StringBuilderToIntArray
        {
            add => HookEndpointManager.Add<Delegates.StringBuilderToIntArray_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "StringBuilderToIntArray"), value);
            remove => HookEndpointManager.Remove<Delegates.StringBuilderToIntArray_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "StringBuilderToIntArray"), value);
        }

        public static event Delegates.AddFloatToCharArray_NormalArgs AddFloatToCharArray
        {
            add => HookEndpointManager.Add<Delegates.AddFloatToCharArray_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "AddFloatToCharArray"), value);
            remove => HookEndpointManager.Remove<Delegates.AddFloatToCharArray_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "AddFloatToCharArray"), value);
        }

        public static event Delegates.AddIntToCharArray_NormalArgs AddIntToCharArray
        {
            add => HookEndpointManager.Add<Delegates.AddIntToCharArray_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "AddIntToCharArray"), value);
            remove => HookEndpointManager.Remove<Delegates.AddIntToCharArray_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "AddIntToCharArray"), value);
        }

        public static event Delegates.SetArraySizes_NormalArgs SetArraySizes
        {
            add => HookEndpointManager.Add<Delegates.SetArraySizes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetArraySizes"), value);
            remove => HookEndpointManager.Remove<Delegates.SetArraySizes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetArraySizes"), value);
        }

        public static event Delegates.GenerateTextMesh_NormalArgs GenerateTextMesh
        {
            add => HookEndpointManager.Add<Delegates.GenerateTextMesh_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GenerateTextMesh"), value);
            remove => HookEndpointManager.Remove<Delegates.GenerateTextMesh_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GenerateTextMesh"), value);
        }

        public static event Delegates.GetPreferredValues_NormalArgs GetPreferredValues
        {
            add => HookEndpointManager.Add<Delegates.GetPreferredValues_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredValues"), value);
            remove => HookEndpointManager.Remove<Delegates.GetPreferredValues_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredValues"), value);
        }

        public static event Delegates.GetPreferredValues_float_float_NormalArgs GetPreferredValues_float_float
        {
            add => HookEndpointManager.Add<Delegates.GetPreferredValues_float_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredValues"), value);
            remove => HookEndpointManager.Remove<Delegates.GetPreferredValues_float_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredValues"), value);
        }

        public static event Delegates.GetPreferredValues_string_NormalArgs GetPreferredValues_string
        {
            add => HookEndpointManager.Add<Delegates.GetPreferredValues_string_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredValues"), value);
            remove => HookEndpointManager.Remove<Delegates.GetPreferredValues_string_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredValues"), value);
        }

        public static event Delegates.GetPreferredValues_string_float_float_NormalArgs
            GetPreferredValues_string_float_float
            {
                add => HookEndpointManager.Add<Delegates.GetPreferredValues_string_float_float_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredValues"), value);
                remove => HookEndpointManager.Remove<Delegates.GetPreferredValues_string_float_float_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredValues"), value);
            }

        public static event Delegates.GetPreferredWidth_NormalArgs GetPreferredWidth
        {
            add => HookEndpointManager.Add<Delegates.GetPreferredWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredWidth"), value);
            remove => HookEndpointManager.Remove<Delegates.GetPreferredWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredWidth"), value);
        }

        public static event Delegates.GetPreferredWidth_Vector2_NormalArgs GetPreferredWidth_Vector2
        {
            add => HookEndpointManager.Add<Delegates.GetPreferredWidth_Vector2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredWidth"), value);
            remove => HookEndpointManager.Remove<Delegates.GetPreferredWidth_Vector2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredWidth"), value);
        }

        public static event Delegates.GetPreferredHeight_NormalArgs GetPreferredHeight
        {
            add => HookEndpointManager.Add<Delegates.GetPreferredHeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredHeight"), value);
            remove => HookEndpointManager.Remove<Delegates.GetPreferredHeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredHeight"), value);
        }

        public static event Delegates.GetPreferredHeight_Vector2_NormalArgs GetPreferredHeight_Vector2
        {
            add => HookEndpointManager.Add<Delegates.GetPreferredHeight_Vector2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredHeight"), value);
            remove => HookEndpointManager.Remove<Delegates.GetPreferredHeight_Vector2_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetPreferredHeight"), value);
        }

        public static event Delegates.GetRenderedValues_NormalArgs GetRenderedValues
        {
            add => HookEndpointManager.Add<Delegates.GetRenderedValues_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetRenderedValues"), value);
            remove => HookEndpointManager.Remove<Delegates.GetRenderedValues_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetRenderedValues"), value);
        }

        public static event Delegates.GetRenderedWidth_NormalArgs GetRenderedWidth
        {
            add => HookEndpointManager.Add<Delegates.GetRenderedWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetRenderedWidth"), value);
            remove => HookEndpointManager.Remove<Delegates.GetRenderedWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetRenderedWidth"), value);
        }

        public static event Delegates.GetRenderedHeight_NormalArgs GetRenderedHeight
        {
            add => HookEndpointManager.Add<Delegates.GetRenderedHeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetRenderedHeight"), value);
            remove => HookEndpointManager.Remove<Delegates.GetRenderedHeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetRenderedHeight"), value);
        }

        public static event Delegates.CalculatePreferredValues_NormalArgs CalculatePreferredValues
        {
            add => HookEndpointManager.Add<Delegates.CalculatePreferredValues_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "CalculatePreferredValues"), value);
            remove => HookEndpointManager.Remove<Delegates.CalculatePreferredValues_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "CalculatePreferredValues"), value);
        }

        public static event Delegates.GetCompoundBounds_NormalArgs GetCompoundBounds
        {
            add => HookEndpointManager.Add<Delegates.GetCompoundBounds_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetCompoundBounds"), value);
            remove => HookEndpointManager.Remove<Delegates.GetCompoundBounds_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetCompoundBounds"), value);
        }

        public static event Delegates.GetTextBounds_NormalArgs GetTextBounds
        {
            add => HookEndpointManager.Add<Delegates.GetTextBounds_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetTextBounds"), value);
            remove => HookEndpointManager.Remove<Delegates.GetTextBounds_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetTextBounds"), value);
        }

        public static event Delegates.AdjustLineOffset_NormalArgs AdjustLineOffset
        {
            add => HookEndpointManager.Add<Delegates.AdjustLineOffset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "AdjustLineOffset"), value);
            remove => HookEndpointManager.Remove<Delegates.AdjustLineOffset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "AdjustLineOffset"), value);
        }

        public static event Delegates.ResizeLineExtents_NormalArgs ResizeLineExtents
        {
            add => HookEndpointManager.Add<Delegates.ResizeLineExtents_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "ResizeLineExtents"), value);
            remove => HookEndpointManager.Remove<Delegates.ResizeLineExtents_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "ResizeLineExtents"), value);
        }

        public static event Delegates.GetTextInfo_NormalArgs GetTextInfo
        {
            add => HookEndpointManager.Add<Delegates.GetTextInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetTextInfo"), value);
            remove => HookEndpointManager.Remove<Delegates.GetTextInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetTextInfo"), value);
        }

        public static event Delegates.ComputeMarginSize_NormalArgs ComputeMarginSize
        {
            add => HookEndpointManager.Add<Delegates.ComputeMarginSize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "ComputeMarginSize"), value);
            remove => HookEndpointManager.Remove<Delegates.ComputeMarginSize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "ComputeMarginSize"), value);
        }

        public static event Delegates.GetArraySizes_NormalArgs GetArraySizes
        {
            add => HookEndpointManager.Add<Delegates.GetArraySizes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetArraySizes"), value);
            remove => HookEndpointManager.Remove<Delegates.GetArraySizes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetArraySizes"), value);
        }

        public static event Delegates.SaveWordWrappingState_NormalArgs SaveWordWrappingState
        {
            add => HookEndpointManager.Add<Delegates.SaveWordWrappingState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SaveWordWrappingState"), value);
            remove => HookEndpointManager.Remove<Delegates.SaveWordWrappingState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SaveWordWrappingState"), value);
        }

        public static event Delegates.RestoreWordWrappingState_NormalArgs RestoreWordWrappingState
        {
            add => HookEndpointManager.Add<Delegates.RestoreWordWrappingState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "RestoreWordWrappingState"), value);
            remove => HookEndpointManager.Remove<Delegates.RestoreWordWrappingState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "RestoreWordWrappingState"), value);
        }

        public static event Delegates.SaveGlyphVertexInfo_NormalArgs SaveGlyphVertexInfo
        {
            add => HookEndpointManager.Add<Delegates.SaveGlyphVertexInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SaveGlyphVertexInfo"), value);
            remove => HookEndpointManager.Remove<Delegates.SaveGlyphVertexInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SaveGlyphVertexInfo"), value);
        }

        public static event Delegates.SaveSpriteVertexInfo_NormalArgs SaveSpriteVertexInfo
        {
            add => HookEndpointManager.Add<Delegates.SaveSpriteVertexInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SaveSpriteVertexInfo"), value);
            remove => HookEndpointManager.Remove<Delegates.SaveSpriteVertexInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SaveSpriteVertexInfo"), value);
        }

        public static event Delegates.FillCharacterVertexBuffers_int_int_NormalArgs FillCharacterVertexBuffers_int_int
        {
            add => HookEndpointManager.Add<Delegates.FillCharacterVertexBuffers_int_int_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "FillCharacterVertexBuffers"), value);
            remove => HookEndpointManager.Remove<Delegates.FillCharacterVertexBuffers_int_int_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "FillCharacterVertexBuffers"), value);
        }

        public static event Delegates.FillCharacterVertexBuffers_int_int_bool_NormalArgs
            FillCharacterVertexBuffers_int_int_bool
            {
                add => HookEndpointManager.Add<Delegates.FillCharacterVertexBuffers_int_int_bool_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "FillCharacterVertexBuffers"), value);
                remove => HookEndpointManager.Remove<Delegates.FillCharacterVertexBuffers_int_int_bool_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "FillCharacterVertexBuffers"), value);
            }

        public static event Delegates.FillSpriteVertexBuffers_NormalArgs FillSpriteVertexBuffers
        {
            add => HookEndpointManager.Add<Delegates.FillSpriteVertexBuffers_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "FillSpriteVertexBuffers"), value);
            remove => HookEndpointManager.Remove<Delegates.FillSpriteVertexBuffers_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "FillSpriteVertexBuffers"), value);
        }

        public static event Delegates.DrawUnderlineMesh_NormalArgs DrawUnderlineMesh
        {
            add => HookEndpointManager.Add<Delegates.DrawUnderlineMesh_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "DrawUnderlineMesh"), value);
            remove => HookEndpointManager.Remove<Delegates.DrawUnderlineMesh_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "DrawUnderlineMesh"), value);
        }

        public static event Delegates.GetSpecialCharacters_NormalArgs GetSpecialCharacters
        {
            add => HookEndpointManager.Add<Delegates.GetSpecialCharacters_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetSpecialCharacters"), value);
            remove => HookEndpointManager.Remove<Delegates.GetSpecialCharacters_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetSpecialCharacters"), value);
        }

        public static event Delegates.GetFontAssetForWeight_NormalArgs GetFontAssetForWeight
        {
            add => HookEndpointManager.Add<Delegates.GetFontAssetForWeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetFontAssetForWeight"), value);
            remove => HookEndpointManager.Remove<Delegates.GetFontAssetForWeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetFontAssetForWeight"), value);
        }

        public static event Delegates.SetActiveSubMeshes_NormalArgs SetActiveSubMeshes
        {
            add => HookEndpointManager.Add<Delegates.SetActiveSubMeshes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetActiveSubMeshes"), value);
            remove => HookEndpointManager.Remove<Delegates.SetActiveSubMeshes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "SetActiveSubMeshes"), value);
        }

        public static event Delegates.PackUV_float_float_float_NormalArgs PackUV_float_float_float
        {
            add => HookEndpointManager.Add<Delegates.PackUV_float_float_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "PackUV"), value);
            remove => HookEndpointManager.Remove<Delegates.PackUV_float_float_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "PackUV"), value);
        }

        public static event Delegates.PackUV_float_float_NormalArgs PackUV_float_float
        {
            add => HookEndpointManager.Add<Delegates.PackUV_float_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "PackUV"), value);
            remove => HookEndpointManager.Remove<Delegates.PackUV_float_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "PackUV"), value);
        }

        public static event Delegates.HexToInt_NormalArgs HexToInt
        {
            add => HookEndpointManager.Add<Delegates.HexToInt_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "HexToInt"), value);
            remove => HookEndpointManager.Remove<Delegates.HexToInt_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "HexToInt"), value);
        }

        public static event Delegates.GetUTF16_NormalArgs GetUTF16
        {
            add => HookEndpointManager.Add<Delegates.GetUTF16_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetUTF16"), value);
            remove => HookEndpointManager.Remove<Delegates.GetUTF16_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetUTF16"), value);
        }

        public static event Delegates.GetUTF32_NormalArgs GetUTF32
        {
            add => HookEndpointManager.Add<Delegates.GetUTF32_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetUTF32"), value);
            remove => HookEndpointManager.Remove<Delegates.GetUTF32_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "GetUTF32"), value);
        }

        public static event Delegates.HexCharsToColor_Array_int_NormalArgs HexCharsToColor_Array_int
        {
            add => HookEndpointManager.Add<Delegates.HexCharsToColor_Array_int_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "HexCharsToColor"), value);
            remove => HookEndpointManager.Remove<Delegates.HexCharsToColor_Array_int_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "HexCharsToColor"), value);
        }

        public static event Delegates.HexCharsToColor_Array_int_int_NormalArgs HexCharsToColor_Array_int_int
        {
            add => HookEndpointManager.Add<Delegates.HexCharsToColor_Array_int_int_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "HexCharsToColor"), value);
            remove => HookEndpointManager.Remove<Delegates.HexCharsToColor_Array_int_int_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "HexCharsToColor"), value);
        }

        public static event Delegates.ConvertToFloat_NormalArgs ConvertToFloat
        {
            add => HookEndpointManager.Add<Delegates.ConvertToFloat_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "ConvertToFloat"), value);
            remove => HookEndpointManager.Remove<Delegates.ConvertToFloat_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "ConvertToFloat"), value);
        }

        public static event Delegates.ValidateHtmlTag_NormalArgs ValidateHtmlTag
        {
            add => HookEndpointManager.Add<Delegates.ValidateHtmlTag_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "ValidateHtmlTag"), value);
            remove => HookEndpointManager.Remove<Delegates.ValidateHtmlTag_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Text), "ValidateHtmlTag"), value);
        }
    }
}