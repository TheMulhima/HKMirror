using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for TMP_Text class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTMP_Text
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_text()
{
if (!HookedList.Contains("get_text"))
{
HookedList.Add("get_text");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_text", true), get_text);

}
}
internal static event Delegates.get_text_BeforeArgs _beforeget_text;
internal static event Delegates.get_text_AfterArgs _afterget_text;
private static string get_text(Func<TMPro.TMP_Text, string> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_text @params = new() 
{
self = self
};
if (_beforeget_text != null)
{
foreach (Delegates.get_text_BeforeArgs toInvoke in _beforeget_text.GetInvocationList())
{
try
{
_beforeget_text?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_text != null)
{
foreach (Delegates.get_text_AfterArgs toInvoke in _afterget_text.GetInvocationList())
{
try
{
retVal = _afterget_text.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_text()
{
if (!HookedList.Contains("set_text"))
{
HookedList.Add("set_text");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_text", true), set_text);

}
}
internal static event Delegates.set_text_BeforeArgs _beforeset_text;
internal static event Delegates.set_text_AfterArgs _afterset_text;
private static void set_text(Action<TMPro.TMP_Text,  string> orig, TMPro.TMP_Text self,  string value)
{
Delegates.Params_set_text @params = new() 
{
self = self
, value = value
};
if (_beforeset_text != null)
{
foreach (Delegates.set_text_BeforeArgs toInvoke in _beforeset_text.GetInvocationList())
{
try
{
_beforeset_text?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_text != null)
{
foreach (Delegates.set_text_AfterArgs toInvoke in _afterset_text.GetInvocationList())
{
try
{
_afterset_text.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_isRightToLeftText()
{
if (!HookedList.Contains("get_isRightToLeftText"))
{
HookedList.Add("get_isRightToLeftText");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_isRightToLeftText", true), get_isRightToLeftText);

}
}
internal static event Delegates.get_isRightToLeftText_BeforeArgs _beforeget_isRightToLeftText;
internal static event Delegates.get_isRightToLeftText_AfterArgs _afterget_isRightToLeftText;
private static bool get_isRightToLeftText(Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_isRightToLeftText @params = new() 
{
self = self
};
if (_beforeget_isRightToLeftText != null)
{
foreach (Delegates.get_isRightToLeftText_BeforeArgs toInvoke in _beforeget_isRightToLeftText.GetInvocationList())
{
try
{
_beforeget_isRightToLeftText?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_isRightToLeftText != null)
{
foreach (Delegates.get_isRightToLeftText_AfterArgs toInvoke in _afterget_isRightToLeftText.GetInvocationList())
{
try
{
retVal = _afterget_isRightToLeftText.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_isRightToLeftText()
{
if (!HookedList.Contains("set_isRightToLeftText"))
{
HookedList.Add("set_isRightToLeftText");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_isRightToLeftText", true), set_isRightToLeftText);

}
}
internal static event Delegates.set_isRightToLeftText_BeforeArgs _beforeset_isRightToLeftText;
internal static event Delegates.set_isRightToLeftText_AfterArgs _afterset_isRightToLeftText;
private static void set_isRightToLeftText(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value)
{
Delegates.Params_set_isRightToLeftText @params = new() 
{
self = self
, value = value
};
if (_beforeset_isRightToLeftText != null)
{
foreach (Delegates.set_isRightToLeftText_BeforeArgs toInvoke in _beforeset_isRightToLeftText.GetInvocationList())
{
try
{
_beforeset_isRightToLeftText?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_isRightToLeftText != null)
{
foreach (Delegates.set_isRightToLeftText_AfterArgs toInvoke in _afterset_isRightToLeftText.GetInvocationList())
{
try
{
_afterset_isRightToLeftText.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_font()
{
if (!HookedList.Contains("get_font"))
{
HookedList.Add("get_font");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_font", true), get_font);

}
}
internal static event Delegates.get_font_BeforeArgs _beforeget_font;
internal static event Delegates.get_font_AfterArgs _afterget_font;
private static TMPro.TMP_FontAsset get_font(Func<TMPro.TMP_Text, TMPro.TMP_FontAsset> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_font @params = new() 
{
self = self
};
if (_beforeget_font != null)
{
foreach (Delegates.get_font_BeforeArgs toInvoke in _beforeget_font.GetInvocationList())
{
try
{
_beforeget_font?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_font != null)
{
foreach (Delegates.get_font_AfterArgs toInvoke in _afterget_font.GetInvocationList())
{
try
{
retVal = _afterget_font.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_font()
{
if (!HookedList.Contains("set_font"))
{
HookedList.Add("set_font");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_font", true), set_font);

}
}
internal static event Delegates.set_font_BeforeArgs _beforeset_font;
internal static event Delegates.set_font_AfterArgs _afterset_font;
private static void set_font(Action<TMPro.TMP_Text,  TMPro.TMP_FontAsset> orig, TMPro.TMP_Text self,  TMPro.TMP_FontAsset value)
{
Delegates.Params_set_font @params = new() 
{
self = self
, value = value
};
if (_beforeset_font != null)
{
foreach (Delegates.set_font_BeforeArgs toInvoke in _beforeset_font.GetInvocationList())
{
try
{
_beforeset_font?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_font != null)
{
foreach (Delegates.set_font_AfterArgs toInvoke in _afterset_font.GetInvocationList())
{
try
{
_afterset_font.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_fontSharedMaterial()
{
if (!HookedList.Contains("get_fontSharedMaterial"))
{
HookedList.Add("get_fontSharedMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontSharedMaterial", true), get_fontSharedMaterial);

}
}
internal static event Delegates.get_fontSharedMaterial_BeforeArgs _beforeget_fontSharedMaterial;
internal static event Delegates.get_fontSharedMaterial_AfterArgs _afterget_fontSharedMaterial;
private static UnityEngine.Material get_fontSharedMaterial(Func<TMPro.TMP_Text, UnityEngine.Material> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_fontSharedMaterial @params = new() 
{
self = self
};
if (_beforeget_fontSharedMaterial != null)
{
foreach (Delegates.get_fontSharedMaterial_BeforeArgs toInvoke in _beforeget_fontSharedMaterial.GetInvocationList())
{
try
{
_beforeget_fontSharedMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_fontSharedMaterial != null)
{
foreach (Delegates.get_fontSharedMaterial_AfterArgs toInvoke in _afterget_fontSharedMaterial.GetInvocationList())
{
try
{
retVal = _afterget_fontSharedMaterial.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_fontSharedMaterial()
{
if (!HookedList.Contains("set_fontSharedMaterial"))
{
HookedList.Add("set_fontSharedMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontSharedMaterial", true), set_fontSharedMaterial);

}
}
internal static event Delegates.set_fontSharedMaterial_BeforeArgs _beforeset_fontSharedMaterial;
internal static event Delegates.set_fontSharedMaterial_AfterArgs _afterset_fontSharedMaterial;
private static void set_fontSharedMaterial(Action<TMPro.TMP_Text,  UnityEngine.Material> orig, TMPro.TMP_Text self,  UnityEngine.Material value)
{
Delegates.Params_set_fontSharedMaterial @params = new() 
{
self = self
, value = value
};
if (_beforeset_fontSharedMaterial != null)
{
foreach (Delegates.set_fontSharedMaterial_BeforeArgs toInvoke in _beforeset_fontSharedMaterial.GetInvocationList())
{
try
{
_beforeset_fontSharedMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_fontSharedMaterial != null)
{
foreach (Delegates.set_fontSharedMaterial_AfterArgs toInvoke in _afterset_fontSharedMaterial.GetInvocationList())
{
try
{
_afterset_fontSharedMaterial.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_fontSharedMaterials()
{
if (!HookedList.Contains("get_fontSharedMaterials"))
{
HookedList.Add("get_fontSharedMaterials");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontSharedMaterials", true), get_fontSharedMaterials);

}
}
internal static event Delegates.get_fontSharedMaterials_BeforeArgs _beforeget_fontSharedMaterials;
internal static event Delegates.get_fontSharedMaterials_AfterArgs _afterget_fontSharedMaterials;
private static UnityEngine.Material[] get_fontSharedMaterials(Func<TMPro.TMP_Text, UnityEngine.Material[]> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_fontSharedMaterials @params = new() 
{
self = self
};
if (_beforeget_fontSharedMaterials != null)
{
foreach (Delegates.get_fontSharedMaterials_BeforeArgs toInvoke in _beforeget_fontSharedMaterials.GetInvocationList())
{
try
{
_beforeget_fontSharedMaterials?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_fontSharedMaterials != null)
{
foreach (Delegates.get_fontSharedMaterials_AfterArgs toInvoke in _afterget_fontSharedMaterials.GetInvocationList())
{
try
{
retVal = _afterget_fontSharedMaterials.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_fontSharedMaterials()
{
if (!HookedList.Contains("set_fontSharedMaterials"))
{
HookedList.Add("set_fontSharedMaterials");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontSharedMaterials", true), set_fontSharedMaterials);

}
}
internal static event Delegates.set_fontSharedMaterials_BeforeArgs _beforeset_fontSharedMaterials;
internal static event Delegates.set_fontSharedMaterials_AfterArgs _afterset_fontSharedMaterials;
private static void set_fontSharedMaterials(Action<TMPro.TMP_Text,  UnityEngine.Material[]> orig, TMPro.TMP_Text self,  UnityEngine.Material[] value)
{
Delegates.Params_set_fontSharedMaterials @params = new() 
{
self = self
, value = value
};
if (_beforeset_fontSharedMaterials != null)
{
foreach (Delegates.set_fontSharedMaterials_BeforeArgs toInvoke in _beforeset_fontSharedMaterials.GetInvocationList())
{
try
{
_beforeset_fontSharedMaterials?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_fontSharedMaterials != null)
{
foreach (Delegates.set_fontSharedMaterials_AfterArgs toInvoke in _afterset_fontSharedMaterials.GetInvocationList())
{
try
{
_afterset_fontSharedMaterials.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_fontMaterial()
{
if (!HookedList.Contains("get_fontMaterial"))
{
HookedList.Add("get_fontMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontMaterial", true), get_fontMaterial);

}
}
internal static event Delegates.get_fontMaterial_BeforeArgs _beforeget_fontMaterial;
internal static event Delegates.get_fontMaterial_AfterArgs _afterget_fontMaterial;
private static UnityEngine.Material get_fontMaterial(Func<TMPro.TMP_Text, UnityEngine.Material> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_fontMaterial @params = new() 
{
self = self
};
if (_beforeget_fontMaterial != null)
{
foreach (Delegates.get_fontMaterial_BeforeArgs toInvoke in _beforeget_fontMaterial.GetInvocationList())
{
try
{
_beforeget_fontMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_fontMaterial != null)
{
foreach (Delegates.get_fontMaterial_AfterArgs toInvoke in _afterget_fontMaterial.GetInvocationList())
{
try
{
retVal = _afterget_fontMaterial.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_fontMaterial()
{
if (!HookedList.Contains("set_fontMaterial"))
{
HookedList.Add("set_fontMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontMaterial", true), set_fontMaterial);

}
}
internal static event Delegates.set_fontMaterial_BeforeArgs _beforeset_fontMaterial;
internal static event Delegates.set_fontMaterial_AfterArgs _afterset_fontMaterial;
private static void set_fontMaterial(Action<TMPro.TMP_Text,  UnityEngine.Material> orig, TMPro.TMP_Text self,  UnityEngine.Material value)
{
Delegates.Params_set_fontMaterial @params = new() 
{
self = self
, value = value
};
if (_beforeset_fontMaterial != null)
{
foreach (Delegates.set_fontMaterial_BeforeArgs toInvoke in _beforeset_fontMaterial.GetInvocationList())
{
try
{
_beforeset_fontMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_fontMaterial != null)
{
foreach (Delegates.set_fontMaterial_AfterArgs toInvoke in _afterset_fontMaterial.GetInvocationList())
{
try
{
_afterset_fontMaterial.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_fontMaterials()
{
if (!HookedList.Contains("get_fontMaterials"))
{
HookedList.Add("get_fontMaterials");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontMaterials", true), get_fontMaterials);

}
}
internal static event Delegates.get_fontMaterials_BeforeArgs _beforeget_fontMaterials;
internal static event Delegates.get_fontMaterials_AfterArgs _afterget_fontMaterials;
private static UnityEngine.Material[] get_fontMaterials(Func<TMPro.TMP_Text, UnityEngine.Material[]> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_fontMaterials @params = new() 
{
self = self
};
if (_beforeget_fontMaterials != null)
{
foreach (Delegates.get_fontMaterials_BeforeArgs toInvoke in _beforeget_fontMaterials.GetInvocationList())
{
try
{
_beforeget_fontMaterials?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_fontMaterials != null)
{
foreach (Delegates.get_fontMaterials_AfterArgs toInvoke in _afterget_fontMaterials.GetInvocationList())
{
try
{
retVal = _afterget_fontMaterials.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_fontMaterials()
{
if (!HookedList.Contains("set_fontMaterials"))
{
HookedList.Add("set_fontMaterials");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontMaterials", true), set_fontMaterials);

}
}
internal static event Delegates.set_fontMaterials_BeforeArgs _beforeset_fontMaterials;
internal static event Delegates.set_fontMaterials_AfterArgs _afterset_fontMaterials;
private static void set_fontMaterials(Action<TMPro.TMP_Text,  UnityEngine.Material[]> orig, TMPro.TMP_Text self,  UnityEngine.Material[] value)
{
Delegates.Params_set_fontMaterials @params = new() 
{
self = self
, value = value
};
if (_beforeset_fontMaterials != null)
{
foreach (Delegates.set_fontMaterials_BeforeArgs toInvoke in _beforeset_fontMaterials.GetInvocationList())
{
try
{
_beforeset_fontMaterials?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_fontMaterials != null)
{
foreach (Delegates.set_fontMaterials_AfterArgs toInvoke in _afterset_fontMaterials.GetInvocationList())
{
try
{
_afterset_fontMaterials.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_color()
{
if (!HookedList.Contains("get_color"))
{
HookedList.Add("get_color");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_color", true), get_color);

}
}
internal static event Delegates.get_color_BeforeArgs _beforeget_color;
internal static event Delegates.get_color_AfterArgs _afterget_color;
private static UnityEngine.Color get_color(Func<TMPro.TMP_Text, UnityEngine.Color> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_color @params = new() 
{
self = self
};
if (_beforeget_color != null)
{
foreach (Delegates.get_color_BeforeArgs toInvoke in _beforeget_color.GetInvocationList())
{
try
{
_beforeget_color?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_color != null)
{
foreach (Delegates.get_color_AfterArgs toInvoke in _afterget_color.GetInvocationList())
{
try
{
retVal = _afterget_color.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_color()
{
if (!HookedList.Contains("set_color"))
{
HookedList.Add("set_color");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_color", true), set_color);

}
}
internal static event Delegates.set_color_BeforeArgs _beforeset_color;
internal static event Delegates.set_color_AfterArgs _afterset_color;
private static void set_color(Action<TMPro.TMP_Text,  UnityEngine.Color> orig, TMPro.TMP_Text self,  UnityEngine.Color value)
{
Delegates.Params_set_color @params = new() 
{
self = self
, value = value
};
if (_beforeset_color != null)
{
foreach (Delegates.set_color_BeforeArgs toInvoke in _beforeset_color.GetInvocationList())
{
try
{
_beforeset_color?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_color != null)
{
foreach (Delegates.set_color_AfterArgs toInvoke in _afterset_color.GetInvocationList())
{
try
{
_afterset_color.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_alpha()
{
if (!HookedList.Contains("get_alpha"))
{
HookedList.Add("get_alpha");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_alpha", true), get_alpha);

}
}
internal static event Delegates.get_alpha_BeforeArgs _beforeget_alpha;
internal static event Delegates.get_alpha_AfterArgs _afterget_alpha;
private static float get_alpha(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_alpha @params = new() 
{
self = self
};
if (_beforeget_alpha != null)
{
foreach (Delegates.get_alpha_BeforeArgs toInvoke in _beforeget_alpha.GetInvocationList())
{
try
{
_beforeget_alpha?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_alpha != null)
{
foreach (Delegates.get_alpha_AfterArgs toInvoke in _afterget_alpha.GetInvocationList())
{
try
{
retVal = _afterget_alpha.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_alpha()
{
if (!HookedList.Contains("set_alpha"))
{
HookedList.Add("set_alpha");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_alpha", true), set_alpha);

}
}
internal static event Delegates.set_alpha_BeforeArgs _beforeset_alpha;
internal static event Delegates.set_alpha_AfterArgs _afterset_alpha;
private static void set_alpha(Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float value)
{
Delegates.Params_set_alpha @params = new() 
{
self = self
, value = value
};
if (_beforeset_alpha != null)
{
foreach (Delegates.set_alpha_BeforeArgs toInvoke in _beforeset_alpha.GetInvocationList())
{
try
{
_beforeset_alpha?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_alpha != null)
{
foreach (Delegates.set_alpha_AfterArgs toInvoke in _afterset_alpha.GetInvocationList())
{
try
{
_afterset_alpha.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_enableVertexGradient()
{
if (!HookedList.Contains("get_enableVertexGradient"))
{
HookedList.Add("get_enableVertexGradient");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_enableVertexGradient", true), get_enableVertexGradient);

}
}
internal static event Delegates.get_enableVertexGradient_BeforeArgs _beforeget_enableVertexGradient;
internal static event Delegates.get_enableVertexGradient_AfterArgs _afterget_enableVertexGradient;
private static bool get_enableVertexGradient(Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_enableVertexGradient @params = new() 
{
self = self
};
if (_beforeget_enableVertexGradient != null)
{
foreach (Delegates.get_enableVertexGradient_BeforeArgs toInvoke in _beforeget_enableVertexGradient.GetInvocationList())
{
try
{
_beforeget_enableVertexGradient?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_enableVertexGradient != null)
{
foreach (Delegates.get_enableVertexGradient_AfterArgs toInvoke in _afterget_enableVertexGradient.GetInvocationList())
{
try
{
retVal = _afterget_enableVertexGradient.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_enableVertexGradient()
{
if (!HookedList.Contains("set_enableVertexGradient"))
{
HookedList.Add("set_enableVertexGradient");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_enableVertexGradient", true), set_enableVertexGradient);

}
}
internal static event Delegates.set_enableVertexGradient_BeforeArgs _beforeset_enableVertexGradient;
internal static event Delegates.set_enableVertexGradient_AfterArgs _afterset_enableVertexGradient;
private static void set_enableVertexGradient(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value)
{
Delegates.Params_set_enableVertexGradient @params = new() 
{
self = self
, value = value
};
if (_beforeset_enableVertexGradient != null)
{
foreach (Delegates.set_enableVertexGradient_BeforeArgs toInvoke in _beforeset_enableVertexGradient.GetInvocationList())
{
try
{
_beforeset_enableVertexGradient?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_enableVertexGradient != null)
{
foreach (Delegates.set_enableVertexGradient_AfterArgs toInvoke in _afterset_enableVertexGradient.GetInvocationList())
{
try
{
_afterset_enableVertexGradient.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_colorGradient()
{
if (!HookedList.Contains("get_colorGradient"))
{
HookedList.Add("get_colorGradient");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_colorGradient", true), get_colorGradient);

}
}
internal static event Delegates.get_colorGradient_BeforeArgs _beforeget_colorGradient;
internal static event Delegates.get_colorGradient_AfterArgs _afterget_colorGradient;
private static TMPro.VertexGradient get_colorGradient(Func<TMPro.TMP_Text, TMPro.VertexGradient> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_colorGradient @params = new() 
{
self = self
};
if (_beforeget_colorGradient != null)
{
foreach (Delegates.get_colorGradient_BeforeArgs toInvoke in _beforeget_colorGradient.GetInvocationList())
{
try
{
_beforeget_colorGradient?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_colorGradient != null)
{
foreach (Delegates.get_colorGradient_AfterArgs toInvoke in _afterget_colorGradient.GetInvocationList())
{
try
{
retVal = _afterget_colorGradient.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_colorGradient()
{
if (!HookedList.Contains("set_colorGradient"))
{
HookedList.Add("set_colorGradient");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_colorGradient", true), set_colorGradient);

}
}
internal static event Delegates.set_colorGradient_BeforeArgs _beforeset_colorGradient;
internal static event Delegates.set_colorGradient_AfterArgs _afterset_colorGradient;
private static void set_colorGradient(Action<TMPro.TMP_Text,  TMPro.VertexGradient> orig, TMPro.TMP_Text self,  TMPro.VertexGradient value)
{
Delegates.Params_set_colorGradient @params = new() 
{
self = self
, value = value
};
if (_beforeset_colorGradient != null)
{
foreach (Delegates.set_colorGradient_BeforeArgs toInvoke in _beforeset_colorGradient.GetInvocationList())
{
try
{
_beforeset_colorGradient?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_colorGradient != null)
{
foreach (Delegates.set_colorGradient_AfterArgs toInvoke in _afterset_colorGradient.GetInvocationList())
{
try
{
_afterset_colorGradient.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_colorGradientPreset()
{
if (!HookedList.Contains("get_colorGradientPreset"))
{
HookedList.Add("get_colorGradientPreset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_colorGradientPreset", true), get_colorGradientPreset);

}
}
internal static event Delegates.get_colorGradientPreset_BeforeArgs _beforeget_colorGradientPreset;
internal static event Delegates.get_colorGradientPreset_AfterArgs _afterget_colorGradientPreset;
private static TMPro.TMP_ColorGradient get_colorGradientPreset(Func<TMPro.TMP_Text, TMPro.TMP_ColorGradient> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_colorGradientPreset @params = new() 
{
self = self
};
if (_beforeget_colorGradientPreset != null)
{
foreach (Delegates.get_colorGradientPreset_BeforeArgs toInvoke in _beforeget_colorGradientPreset.GetInvocationList())
{
try
{
_beforeget_colorGradientPreset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_colorGradientPreset != null)
{
foreach (Delegates.get_colorGradientPreset_AfterArgs toInvoke in _afterget_colorGradientPreset.GetInvocationList())
{
try
{
retVal = _afterget_colorGradientPreset.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_colorGradientPreset()
{
if (!HookedList.Contains("set_colorGradientPreset"))
{
HookedList.Add("set_colorGradientPreset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_colorGradientPreset", true), set_colorGradientPreset);

}
}
internal static event Delegates.set_colorGradientPreset_BeforeArgs _beforeset_colorGradientPreset;
internal static event Delegates.set_colorGradientPreset_AfterArgs _afterset_colorGradientPreset;
private static void set_colorGradientPreset(Action<TMPro.TMP_Text,  TMPro.TMP_ColorGradient> orig, TMPro.TMP_Text self,  TMPro.TMP_ColorGradient value)
{
Delegates.Params_set_colorGradientPreset @params = new() 
{
self = self
, value = value
};
if (_beforeset_colorGradientPreset != null)
{
foreach (Delegates.set_colorGradientPreset_BeforeArgs toInvoke in _beforeset_colorGradientPreset.GetInvocationList())
{
try
{
_beforeset_colorGradientPreset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_colorGradientPreset != null)
{
foreach (Delegates.set_colorGradientPreset_AfterArgs toInvoke in _afterset_colorGradientPreset.GetInvocationList())
{
try
{
_afterset_colorGradientPreset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_spriteAsset()
{
if (!HookedList.Contains("get_spriteAsset"))
{
HookedList.Add("get_spriteAsset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_spriteAsset", true), get_spriteAsset);

}
}
internal static event Delegates.get_spriteAsset_BeforeArgs _beforeget_spriteAsset;
internal static event Delegates.get_spriteAsset_AfterArgs _afterget_spriteAsset;
private static TMPro.TMP_SpriteAsset get_spriteAsset(Func<TMPro.TMP_Text, TMPro.TMP_SpriteAsset> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_spriteAsset @params = new() 
{
self = self
};
if (_beforeget_spriteAsset != null)
{
foreach (Delegates.get_spriteAsset_BeforeArgs toInvoke in _beforeget_spriteAsset.GetInvocationList())
{
try
{
_beforeget_spriteAsset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_spriteAsset != null)
{
foreach (Delegates.get_spriteAsset_AfterArgs toInvoke in _afterget_spriteAsset.GetInvocationList())
{
try
{
retVal = _afterget_spriteAsset.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_spriteAsset()
{
if (!HookedList.Contains("set_spriteAsset"))
{
HookedList.Add("set_spriteAsset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_spriteAsset", true), set_spriteAsset);

}
}
internal static event Delegates.set_spriteAsset_BeforeArgs _beforeset_spriteAsset;
internal static event Delegates.set_spriteAsset_AfterArgs _afterset_spriteAsset;
private static void set_spriteAsset(Action<TMPro.TMP_Text,  TMPro.TMP_SpriteAsset> orig, TMPro.TMP_Text self,  TMPro.TMP_SpriteAsset value)
{
Delegates.Params_set_spriteAsset @params = new() 
{
self = self
, value = value
};
if (_beforeset_spriteAsset != null)
{
foreach (Delegates.set_spriteAsset_BeforeArgs toInvoke in _beforeset_spriteAsset.GetInvocationList())
{
try
{
_beforeset_spriteAsset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_spriteAsset != null)
{
foreach (Delegates.set_spriteAsset_AfterArgs toInvoke in _afterset_spriteAsset.GetInvocationList())
{
try
{
_afterset_spriteAsset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_tintAllSprites()
{
if (!HookedList.Contains("get_tintAllSprites"))
{
HookedList.Add("get_tintAllSprites");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_tintAllSprites", true), get_tintAllSprites);

}
}
internal static event Delegates.get_tintAllSprites_BeforeArgs _beforeget_tintAllSprites;
internal static event Delegates.get_tintAllSprites_AfterArgs _afterget_tintAllSprites;
private static bool get_tintAllSprites(Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_tintAllSprites @params = new() 
{
self = self
};
if (_beforeget_tintAllSprites != null)
{
foreach (Delegates.get_tintAllSprites_BeforeArgs toInvoke in _beforeget_tintAllSprites.GetInvocationList())
{
try
{
_beforeget_tintAllSprites?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_tintAllSprites != null)
{
foreach (Delegates.get_tintAllSprites_AfterArgs toInvoke in _afterget_tintAllSprites.GetInvocationList())
{
try
{
retVal = _afterget_tintAllSprites.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_tintAllSprites()
{
if (!HookedList.Contains("set_tintAllSprites"))
{
HookedList.Add("set_tintAllSprites");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_tintAllSprites", true), set_tintAllSprites);

}
}
internal static event Delegates.set_tintAllSprites_BeforeArgs _beforeset_tintAllSprites;
internal static event Delegates.set_tintAllSprites_AfterArgs _afterset_tintAllSprites;
private static void set_tintAllSprites(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value)
{
Delegates.Params_set_tintAllSprites @params = new() 
{
self = self
, value = value
};
if (_beforeset_tintAllSprites != null)
{
foreach (Delegates.set_tintAllSprites_BeforeArgs toInvoke in _beforeset_tintAllSprites.GetInvocationList())
{
try
{
_beforeset_tintAllSprites?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_tintAllSprites != null)
{
foreach (Delegates.set_tintAllSprites_AfterArgs toInvoke in _afterset_tintAllSprites.GetInvocationList())
{
try
{
_afterset_tintAllSprites.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_overrideColorTags()
{
if (!HookedList.Contains("get_overrideColorTags"))
{
HookedList.Add("get_overrideColorTags");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_overrideColorTags", true), get_overrideColorTags);

}
}
internal static event Delegates.get_overrideColorTags_BeforeArgs _beforeget_overrideColorTags;
internal static event Delegates.get_overrideColorTags_AfterArgs _afterget_overrideColorTags;
private static bool get_overrideColorTags(Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_overrideColorTags @params = new() 
{
self = self
};
if (_beforeget_overrideColorTags != null)
{
foreach (Delegates.get_overrideColorTags_BeforeArgs toInvoke in _beforeget_overrideColorTags.GetInvocationList())
{
try
{
_beforeget_overrideColorTags?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_overrideColorTags != null)
{
foreach (Delegates.get_overrideColorTags_AfterArgs toInvoke in _afterget_overrideColorTags.GetInvocationList())
{
try
{
retVal = _afterget_overrideColorTags.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_overrideColorTags()
{
if (!HookedList.Contains("set_overrideColorTags"))
{
HookedList.Add("set_overrideColorTags");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_overrideColorTags", true), set_overrideColorTags);

}
}
internal static event Delegates.set_overrideColorTags_BeforeArgs _beforeset_overrideColorTags;
internal static event Delegates.set_overrideColorTags_AfterArgs _afterset_overrideColorTags;
private static void set_overrideColorTags(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value)
{
Delegates.Params_set_overrideColorTags @params = new() 
{
self = self
, value = value
};
if (_beforeset_overrideColorTags != null)
{
foreach (Delegates.set_overrideColorTags_BeforeArgs toInvoke in _beforeset_overrideColorTags.GetInvocationList())
{
try
{
_beforeset_overrideColorTags?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_overrideColorTags != null)
{
foreach (Delegates.set_overrideColorTags_AfterArgs toInvoke in _afterset_overrideColorTags.GetInvocationList())
{
try
{
_afterset_overrideColorTags.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_faceColor()
{
if (!HookedList.Contains("get_faceColor"))
{
HookedList.Add("get_faceColor");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_faceColor", true), get_faceColor);

}
}
internal static event Delegates.get_faceColor_BeforeArgs _beforeget_faceColor;
internal static event Delegates.get_faceColor_AfterArgs _afterget_faceColor;
private static UnityEngine.Color32 get_faceColor(Func<TMPro.TMP_Text, UnityEngine.Color32> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_faceColor @params = new() 
{
self = self
};
if (_beforeget_faceColor != null)
{
foreach (Delegates.get_faceColor_BeforeArgs toInvoke in _beforeget_faceColor.GetInvocationList())
{
try
{
_beforeget_faceColor?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_faceColor != null)
{
foreach (Delegates.get_faceColor_AfterArgs toInvoke in _afterget_faceColor.GetInvocationList())
{
try
{
retVal = _afterget_faceColor.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_faceColor()
{
if (!HookedList.Contains("set_faceColor"))
{
HookedList.Add("set_faceColor");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_faceColor", true), set_faceColor);

}
}
internal static event Delegates.set_faceColor_BeforeArgs _beforeset_faceColor;
internal static event Delegates.set_faceColor_AfterArgs _afterset_faceColor;
private static void set_faceColor(Action<TMPro.TMP_Text,  UnityEngine.Color32> orig, TMPro.TMP_Text self,  UnityEngine.Color32 value)
{
Delegates.Params_set_faceColor @params = new() 
{
self = self
, value = value
};
if (_beforeset_faceColor != null)
{
foreach (Delegates.set_faceColor_BeforeArgs toInvoke in _beforeset_faceColor.GetInvocationList())
{
try
{
_beforeset_faceColor?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_faceColor != null)
{
foreach (Delegates.set_faceColor_AfterArgs toInvoke in _afterset_faceColor.GetInvocationList())
{
try
{
_afterset_faceColor.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_outlineColor()
{
if (!HookedList.Contains("get_outlineColor"))
{
HookedList.Add("get_outlineColor");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_outlineColor", true), get_outlineColor);

}
}
internal static event Delegates.get_outlineColor_BeforeArgs _beforeget_outlineColor;
internal static event Delegates.get_outlineColor_AfterArgs _afterget_outlineColor;
private static UnityEngine.Color32 get_outlineColor(Func<TMPro.TMP_Text, UnityEngine.Color32> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_outlineColor @params = new() 
{
self = self
};
if (_beforeget_outlineColor != null)
{
foreach (Delegates.get_outlineColor_BeforeArgs toInvoke in _beforeget_outlineColor.GetInvocationList())
{
try
{
_beforeget_outlineColor?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_outlineColor != null)
{
foreach (Delegates.get_outlineColor_AfterArgs toInvoke in _afterget_outlineColor.GetInvocationList())
{
try
{
retVal = _afterget_outlineColor.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_outlineColor()
{
if (!HookedList.Contains("set_outlineColor"))
{
HookedList.Add("set_outlineColor");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_outlineColor", true), set_outlineColor);

}
}
internal static event Delegates.set_outlineColor_BeforeArgs _beforeset_outlineColor;
internal static event Delegates.set_outlineColor_AfterArgs _afterset_outlineColor;
private static void set_outlineColor(Action<TMPro.TMP_Text,  UnityEngine.Color32> orig, TMPro.TMP_Text self,  UnityEngine.Color32 value)
{
Delegates.Params_set_outlineColor @params = new() 
{
self = self
, value = value
};
if (_beforeset_outlineColor != null)
{
foreach (Delegates.set_outlineColor_BeforeArgs toInvoke in _beforeset_outlineColor.GetInvocationList())
{
try
{
_beforeset_outlineColor?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_outlineColor != null)
{
foreach (Delegates.set_outlineColor_AfterArgs toInvoke in _afterset_outlineColor.GetInvocationList())
{
try
{
_afterset_outlineColor.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_outlineWidth()
{
if (!HookedList.Contains("get_outlineWidth"))
{
HookedList.Add("get_outlineWidth");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_outlineWidth", true), get_outlineWidth);

}
}
internal static event Delegates.get_outlineWidth_BeforeArgs _beforeget_outlineWidth;
internal static event Delegates.get_outlineWidth_AfterArgs _afterget_outlineWidth;
private static float get_outlineWidth(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_outlineWidth @params = new() 
{
self = self
};
if (_beforeget_outlineWidth != null)
{
foreach (Delegates.get_outlineWidth_BeforeArgs toInvoke in _beforeget_outlineWidth.GetInvocationList())
{
try
{
_beforeget_outlineWidth?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_outlineWidth != null)
{
foreach (Delegates.get_outlineWidth_AfterArgs toInvoke in _afterget_outlineWidth.GetInvocationList())
{
try
{
retVal = _afterget_outlineWidth.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_outlineWidth()
{
if (!HookedList.Contains("set_outlineWidth"))
{
HookedList.Add("set_outlineWidth");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_outlineWidth", true), set_outlineWidth);

}
}
internal static event Delegates.set_outlineWidth_BeforeArgs _beforeset_outlineWidth;
internal static event Delegates.set_outlineWidth_AfterArgs _afterset_outlineWidth;
private static void set_outlineWidth(Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float value)
{
Delegates.Params_set_outlineWidth @params = new() 
{
self = self
, value = value
};
if (_beforeset_outlineWidth != null)
{
foreach (Delegates.set_outlineWidth_BeforeArgs toInvoke in _beforeset_outlineWidth.GetInvocationList())
{
try
{
_beforeset_outlineWidth?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_outlineWidth != null)
{
foreach (Delegates.set_outlineWidth_AfterArgs toInvoke in _afterset_outlineWidth.GetInvocationList())
{
try
{
_afterset_outlineWidth.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_fontSize()
{
if (!HookedList.Contains("get_fontSize"))
{
HookedList.Add("get_fontSize");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontSize", true), get_fontSize);

}
}
internal static event Delegates.get_fontSize_BeforeArgs _beforeget_fontSize;
internal static event Delegates.get_fontSize_AfterArgs _afterget_fontSize;
private static float get_fontSize(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_fontSize @params = new() 
{
self = self
};
if (_beforeget_fontSize != null)
{
foreach (Delegates.get_fontSize_BeforeArgs toInvoke in _beforeget_fontSize.GetInvocationList())
{
try
{
_beforeget_fontSize?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_fontSize != null)
{
foreach (Delegates.get_fontSize_AfterArgs toInvoke in _afterget_fontSize.GetInvocationList())
{
try
{
retVal = _afterget_fontSize.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_fontSize()
{
if (!HookedList.Contains("set_fontSize"))
{
HookedList.Add("set_fontSize");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontSize", true), set_fontSize);

}
}
internal static event Delegates.set_fontSize_BeforeArgs _beforeset_fontSize;
internal static event Delegates.set_fontSize_AfterArgs _afterset_fontSize;
private static void set_fontSize(Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float value)
{
Delegates.Params_set_fontSize @params = new() 
{
self = self
, value = value
};
if (_beforeset_fontSize != null)
{
foreach (Delegates.set_fontSize_BeforeArgs toInvoke in _beforeset_fontSize.GetInvocationList())
{
try
{
_beforeset_fontSize?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_fontSize != null)
{
foreach (Delegates.set_fontSize_AfterArgs toInvoke in _afterset_fontSize.GetInvocationList())
{
try
{
_afterset_fontSize.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_fontScale()
{
if (!HookedList.Contains("get_fontScale"))
{
HookedList.Add("get_fontScale");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontScale", true), get_fontScale);

}
}
internal static event Delegates.get_fontScale_BeforeArgs _beforeget_fontScale;
internal static event Delegates.get_fontScale_AfterArgs _afterget_fontScale;
private static float get_fontScale(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_fontScale @params = new() 
{
self = self
};
if (_beforeget_fontScale != null)
{
foreach (Delegates.get_fontScale_BeforeArgs toInvoke in _beforeget_fontScale.GetInvocationList())
{
try
{
_beforeget_fontScale?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_fontScale != null)
{
foreach (Delegates.get_fontScale_AfterArgs toInvoke in _afterget_fontScale.GetInvocationList())
{
try
{
retVal = _afterget_fontScale.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_fontWeight()
{
if (!HookedList.Contains("get_fontWeight"))
{
HookedList.Add("get_fontWeight");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontWeight", true), get_fontWeight);

}
}
internal static event Delegates.get_fontWeight_BeforeArgs _beforeget_fontWeight;
internal static event Delegates.get_fontWeight_AfterArgs _afterget_fontWeight;
private static int get_fontWeight(Func<TMPro.TMP_Text, int> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_fontWeight @params = new() 
{
self = self
};
if (_beforeget_fontWeight != null)
{
foreach (Delegates.get_fontWeight_BeforeArgs toInvoke in _beforeget_fontWeight.GetInvocationList())
{
try
{
_beforeget_fontWeight?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_fontWeight != null)
{
foreach (Delegates.get_fontWeight_AfterArgs toInvoke in _afterget_fontWeight.GetInvocationList())
{
try
{
retVal = _afterget_fontWeight.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_fontWeight()
{
if (!HookedList.Contains("set_fontWeight"))
{
HookedList.Add("set_fontWeight");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontWeight", true), set_fontWeight);

}
}
internal static event Delegates.set_fontWeight_BeforeArgs _beforeset_fontWeight;
internal static event Delegates.set_fontWeight_AfterArgs _afterset_fontWeight;
private static void set_fontWeight(Action<TMPro.TMP_Text,  int> orig, TMPro.TMP_Text self,  int value)
{
Delegates.Params_set_fontWeight @params = new() 
{
self = self
, value = value
};
if (_beforeset_fontWeight != null)
{
foreach (Delegates.set_fontWeight_BeforeArgs toInvoke in _beforeset_fontWeight.GetInvocationList())
{
try
{
_beforeset_fontWeight?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_fontWeight != null)
{
foreach (Delegates.set_fontWeight_AfterArgs toInvoke in _afterset_fontWeight.GetInvocationList())
{
try
{
_afterset_fontWeight.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_pixelsPerUnit()
{
if (!HookedList.Contains("get_pixelsPerUnit"))
{
HookedList.Add("get_pixelsPerUnit");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_pixelsPerUnit", true), get_pixelsPerUnit);

}
}
internal static event Delegates.get_pixelsPerUnit_BeforeArgs _beforeget_pixelsPerUnit;
internal static event Delegates.get_pixelsPerUnit_AfterArgs _afterget_pixelsPerUnit;
private static float get_pixelsPerUnit(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_pixelsPerUnit @params = new() 
{
self = self
};
if (_beforeget_pixelsPerUnit != null)
{
foreach (Delegates.get_pixelsPerUnit_BeforeArgs toInvoke in _beforeget_pixelsPerUnit.GetInvocationList())
{
try
{
_beforeget_pixelsPerUnit?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_pixelsPerUnit != null)
{
foreach (Delegates.get_pixelsPerUnit_AfterArgs toInvoke in _afterget_pixelsPerUnit.GetInvocationList())
{
try
{
retVal = _afterget_pixelsPerUnit.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_enableAutoSizing()
{
if (!HookedList.Contains("get_enableAutoSizing"))
{
HookedList.Add("get_enableAutoSizing");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_enableAutoSizing", true), get_enableAutoSizing);

}
}
internal static event Delegates.get_enableAutoSizing_BeforeArgs _beforeget_enableAutoSizing;
internal static event Delegates.get_enableAutoSizing_AfterArgs _afterget_enableAutoSizing;
private static bool get_enableAutoSizing(Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_enableAutoSizing @params = new() 
{
self = self
};
if (_beforeget_enableAutoSizing != null)
{
foreach (Delegates.get_enableAutoSizing_BeforeArgs toInvoke in _beforeget_enableAutoSizing.GetInvocationList())
{
try
{
_beforeget_enableAutoSizing?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_enableAutoSizing != null)
{
foreach (Delegates.get_enableAutoSizing_AfterArgs toInvoke in _afterget_enableAutoSizing.GetInvocationList())
{
try
{
retVal = _afterget_enableAutoSizing.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_enableAutoSizing()
{
if (!HookedList.Contains("set_enableAutoSizing"))
{
HookedList.Add("set_enableAutoSizing");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_enableAutoSizing", true), set_enableAutoSizing);

}
}
internal static event Delegates.set_enableAutoSizing_BeforeArgs _beforeset_enableAutoSizing;
internal static event Delegates.set_enableAutoSizing_AfterArgs _afterset_enableAutoSizing;
private static void set_enableAutoSizing(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value)
{
Delegates.Params_set_enableAutoSizing @params = new() 
{
self = self
, value = value
};
if (_beforeset_enableAutoSizing != null)
{
foreach (Delegates.set_enableAutoSizing_BeforeArgs toInvoke in _beforeset_enableAutoSizing.GetInvocationList())
{
try
{
_beforeset_enableAutoSizing?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_enableAutoSizing != null)
{
foreach (Delegates.set_enableAutoSizing_AfterArgs toInvoke in _afterset_enableAutoSizing.GetInvocationList())
{
try
{
_afterset_enableAutoSizing.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_fontSizeMin()
{
if (!HookedList.Contains("get_fontSizeMin"))
{
HookedList.Add("get_fontSizeMin");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontSizeMin", true), get_fontSizeMin);

}
}
internal static event Delegates.get_fontSizeMin_BeforeArgs _beforeget_fontSizeMin;
internal static event Delegates.get_fontSizeMin_AfterArgs _afterget_fontSizeMin;
private static float get_fontSizeMin(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_fontSizeMin @params = new() 
{
self = self
};
if (_beforeget_fontSizeMin != null)
{
foreach (Delegates.get_fontSizeMin_BeforeArgs toInvoke in _beforeget_fontSizeMin.GetInvocationList())
{
try
{
_beforeget_fontSizeMin?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_fontSizeMin != null)
{
foreach (Delegates.get_fontSizeMin_AfterArgs toInvoke in _afterget_fontSizeMin.GetInvocationList())
{
try
{
retVal = _afterget_fontSizeMin.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_fontSizeMin()
{
if (!HookedList.Contains("set_fontSizeMin"))
{
HookedList.Add("set_fontSizeMin");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontSizeMin", true), set_fontSizeMin);

}
}
internal static event Delegates.set_fontSizeMin_BeforeArgs _beforeset_fontSizeMin;
internal static event Delegates.set_fontSizeMin_AfterArgs _afterset_fontSizeMin;
private static void set_fontSizeMin(Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float value)
{
Delegates.Params_set_fontSizeMin @params = new() 
{
self = self
, value = value
};
if (_beforeset_fontSizeMin != null)
{
foreach (Delegates.set_fontSizeMin_BeforeArgs toInvoke in _beforeset_fontSizeMin.GetInvocationList())
{
try
{
_beforeset_fontSizeMin?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_fontSizeMin != null)
{
foreach (Delegates.set_fontSizeMin_AfterArgs toInvoke in _afterset_fontSizeMin.GetInvocationList())
{
try
{
_afterset_fontSizeMin.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_fontSizeMax()
{
if (!HookedList.Contains("get_fontSizeMax"))
{
HookedList.Add("get_fontSizeMax");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontSizeMax", true), get_fontSizeMax);

}
}
internal static event Delegates.get_fontSizeMax_BeforeArgs _beforeget_fontSizeMax;
internal static event Delegates.get_fontSizeMax_AfterArgs _afterget_fontSizeMax;
private static float get_fontSizeMax(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_fontSizeMax @params = new() 
{
self = self
};
if (_beforeget_fontSizeMax != null)
{
foreach (Delegates.get_fontSizeMax_BeforeArgs toInvoke in _beforeget_fontSizeMax.GetInvocationList())
{
try
{
_beforeget_fontSizeMax?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_fontSizeMax != null)
{
foreach (Delegates.get_fontSizeMax_AfterArgs toInvoke in _afterget_fontSizeMax.GetInvocationList())
{
try
{
retVal = _afterget_fontSizeMax.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_fontSizeMax()
{
if (!HookedList.Contains("set_fontSizeMax"))
{
HookedList.Add("set_fontSizeMax");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontSizeMax", true), set_fontSizeMax);

}
}
internal static event Delegates.set_fontSizeMax_BeforeArgs _beforeset_fontSizeMax;
internal static event Delegates.set_fontSizeMax_AfterArgs _afterset_fontSizeMax;
private static void set_fontSizeMax(Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float value)
{
Delegates.Params_set_fontSizeMax @params = new() 
{
self = self
, value = value
};
if (_beforeset_fontSizeMax != null)
{
foreach (Delegates.set_fontSizeMax_BeforeArgs toInvoke in _beforeset_fontSizeMax.GetInvocationList())
{
try
{
_beforeset_fontSizeMax?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_fontSizeMax != null)
{
foreach (Delegates.set_fontSizeMax_AfterArgs toInvoke in _afterset_fontSizeMax.GetInvocationList())
{
try
{
_afterset_fontSizeMax.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_fontStyle()
{
if (!HookedList.Contains("get_fontStyle"))
{
HookedList.Add("get_fontStyle");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontStyle", true), get_fontStyle);

}
}
internal static event Delegates.get_fontStyle_BeforeArgs _beforeget_fontStyle;
internal static event Delegates.get_fontStyle_AfterArgs _afterget_fontStyle;
private static TMPro.FontStyles get_fontStyle(Func<TMPro.TMP_Text, TMPro.FontStyles> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_fontStyle @params = new() 
{
self = self
};
if (_beforeget_fontStyle != null)
{
foreach (Delegates.get_fontStyle_BeforeArgs toInvoke in _beforeget_fontStyle.GetInvocationList())
{
try
{
_beforeget_fontStyle?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_fontStyle != null)
{
foreach (Delegates.get_fontStyle_AfterArgs toInvoke in _afterget_fontStyle.GetInvocationList())
{
try
{
retVal = _afterget_fontStyle.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_fontStyle()
{
if (!HookedList.Contains("set_fontStyle"))
{
HookedList.Add("set_fontStyle");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontStyle", true), set_fontStyle);

}
}
internal static event Delegates.set_fontStyle_BeforeArgs _beforeset_fontStyle;
internal static event Delegates.set_fontStyle_AfterArgs _afterset_fontStyle;
private static void set_fontStyle(Action<TMPro.TMP_Text,  TMPro.FontStyles> orig, TMPro.TMP_Text self,  TMPro.FontStyles value)
{
Delegates.Params_set_fontStyle @params = new() 
{
self = self
, value = value
};
if (_beforeset_fontStyle != null)
{
foreach (Delegates.set_fontStyle_BeforeArgs toInvoke in _beforeset_fontStyle.GetInvocationList())
{
try
{
_beforeset_fontStyle?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_fontStyle != null)
{
foreach (Delegates.set_fontStyle_AfterArgs toInvoke in _afterset_fontStyle.GetInvocationList())
{
try
{
_afterset_fontStyle.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_isUsingBold()
{
if (!HookedList.Contains("get_isUsingBold"))
{
HookedList.Add("get_isUsingBold");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_isUsingBold", true), get_isUsingBold);

}
}
internal static event Delegates.get_isUsingBold_BeforeArgs _beforeget_isUsingBold;
internal static event Delegates.get_isUsingBold_AfterArgs _afterget_isUsingBold;
private static bool get_isUsingBold(Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_isUsingBold @params = new() 
{
self = self
};
if (_beforeget_isUsingBold != null)
{
foreach (Delegates.get_isUsingBold_BeforeArgs toInvoke in _beforeget_isUsingBold.GetInvocationList())
{
try
{
_beforeget_isUsingBold?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_isUsingBold != null)
{
foreach (Delegates.get_isUsingBold_AfterArgs toInvoke in _afterget_isUsingBold.GetInvocationList())
{
try
{
retVal = _afterget_isUsingBold.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_alignment()
{
if (!HookedList.Contains("get_alignment"))
{
HookedList.Add("get_alignment");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_alignment", true), get_alignment);

}
}
internal static event Delegates.get_alignment_BeforeArgs _beforeget_alignment;
internal static event Delegates.get_alignment_AfterArgs _afterget_alignment;
private static TMPro.TextAlignmentOptions get_alignment(Func<TMPro.TMP_Text, TMPro.TextAlignmentOptions> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_alignment @params = new() 
{
self = self
};
if (_beforeget_alignment != null)
{
foreach (Delegates.get_alignment_BeforeArgs toInvoke in _beforeget_alignment.GetInvocationList())
{
try
{
_beforeget_alignment?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_alignment != null)
{
foreach (Delegates.get_alignment_AfterArgs toInvoke in _afterget_alignment.GetInvocationList())
{
try
{
retVal = _afterget_alignment.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_alignment()
{
if (!HookedList.Contains("set_alignment"))
{
HookedList.Add("set_alignment");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_alignment", true), set_alignment);

}
}
internal static event Delegates.set_alignment_BeforeArgs _beforeset_alignment;
internal static event Delegates.set_alignment_AfterArgs _afterset_alignment;
private static void set_alignment(Action<TMPro.TMP_Text,  TMPro.TextAlignmentOptions> orig, TMPro.TMP_Text self,  TMPro.TextAlignmentOptions value)
{
Delegates.Params_set_alignment @params = new() 
{
self = self
, value = value
};
if (_beforeset_alignment != null)
{
foreach (Delegates.set_alignment_BeforeArgs toInvoke in _beforeset_alignment.GetInvocationList())
{
try
{
_beforeset_alignment?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_alignment != null)
{
foreach (Delegates.set_alignment_AfterArgs toInvoke in _afterset_alignment.GetInvocationList())
{
try
{
_afterset_alignment.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_characterSpacing()
{
if (!HookedList.Contains("get_characterSpacing"))
{
HookedList.Add("get_characterSpacing");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_characterSpacing", true), get_characterSpacing);

}
}
internal static event Delegates.get_characterSpacing_BeforeArgs _beforeget_characterSpacing;
internal static event Delegates.get_characterSpacing_AfterArgs _afterget_characterSpacing;
private static float get_characterSpacing(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_characterSpacing @params = new() 
{
self = self
};
if (_beforeget_characterSpacing != null)
{
foreach (Delegates.get_characterSpacing_BeforeArgs toInvoke in _beforeget_characterSpacing.GetInvocationList())
{
try
{
_beforeget_characterSpacing?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_characterSpacing != null)
{
foreach (Delegates.get_characterSpacing_AfterArgs toInvoke in _afterget_characterSpacing.GetInvocationList())
{
try
{
retVal = _afterget_characterSpacing.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_characterSpacing()
{
if (!HookedList.Contains("set_characterSpacing"))
{
HookedList.Add("set_characterSpacing");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_characterSpacing", true), set_characterSpacing);

}
}
internal static event Delegates.set_characterSpacing_BeforeArgs _beforeset_characterSpacing;
internal static event Delegates.set_characterSpacing_AfterArgs _afterset_characterSpacing;
private static void set_characterSpacing(Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float value)
{
Delegates.Params_set_characterSpacing @params = new() 
{
self = self
, value = value
};
if (_beforeset_characterSpacing != null)
{
foreach (Delegates.set_characterSpacing_BeforeArgs toInvoke in _beforeset_characterSpacing.GetInvocationList())
{
try
{
_beforeset_characterSpacing?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_characterSpacing != null)
{
foreach (Delegates.set_characterSpacing_AfterArgs toInvoke in _afterset_characterSpacing.GetInvocationList())
{
try
{
_afterset_characterSpacing.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_lineSpacing()
{
if (!HookedList.Contains("get_lineSpacing"))
{
HookedList.Add("get_lineSpacing");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_lineSpacing", true), get_lineSpacing);

}
}
internal static event Delegates.get_lineSpacing_BeforeArgs _beforeget_lineSpacing;
internal static event Delegates.get_lineSpacing_AfterArgs _afterget_lineSpacing;
private static float get_lineSpacing(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_lineSpacing @params = new() 
{
self = self
};
if (_beforeget_lineSpacing != null)
{
foreach (Delegates.get_lineSpacing_BeforeArgs toInvoke in _beforeget_lineSpacing.GetInvocationList())
{
try
{
_beforeget_lineSpacing?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_lineSpacing != null)
{
foreach (Delegates.get_lineSpacing_AfterArgs toInvoke in _afterget_lineSpacing.GetInvocationList())
{
try
{
retVal = _afterget_lineSpacing.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_lineSpacing()
{
if (!HookedList.Contains("set_lineSpacing"))
{
HookedList.Add("set_lineSpacing");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_lineSpacing", true), set_lineSpacing);

}
}
internal static event Delegates.set_lineSpacing_BeforeArgs _beforeset_lineSpacing;
internal static event Delegates.set_lineSpacing_AfterArgs _afterset_lineSpacing;
private static void set_lineSpacing(Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float value)
{
Delegates.Params_set_lineSpacing @params = new() 
{
self = self
, value = value
};
if (_beforeset_lineSpacing != null)
{
foreach (Delegates.set_lineSpacing_BeforeArgs toInvoke in _beforeset_lineSpacing.GetInvocationList())
{
try
{
_beforeset_lineSpacing?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_lineSpacing != null)
{
foreach (Delegates.set_lineSpacing_AfterArgs toInvoke in _afterset_lineSpacing.GetInvocationList())
{
try
{
_afterset_lineSpacing.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_paragraphSpacing()
{
if (!HookedList.Contains("get_paragraphSpacing"))
{
HookedList.Add("get_paragraphSpacing");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_paragraphSpacing", true), get_paragraphSpacing);

}
}
internal static event Delegates.get_paragraphSpacing_BeforeArgs _beforeget_paragraphSpacing;
internal static event Delegates.get_paragraphSpacing_AfterArgs _afterget_paragraphSpacing;
private static float get_paragraphSpacing(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_paragraphSpacing @params = new() 
{
self = self
};
if (_beforeget_paragraphSpacing != null)
{
foreach (Delegates.get_paragraphSpacing_BeforeArgs toInvoke in _beforeget_paragraphSpacing.GetInvocationList())
{
try
{
_beforeget_paragraphSpacing?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_paragraphSpacing != null)
{
foreach (Delegates.get_paragraphSpacing_AfterArgs toInvoke in _afterget_paragraphSpacing.GetInvocationList())
{
try
{
retVal = _afterget_paragraphSpacing.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_paragraphSpacing()
{
if (!HookedList.Contains("set_paragraphSpacing"))
{
HookedList.Add("set_paragraphSpacing");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_paragraphSpacing", true), set_paragraphSpacing);

}
}
internal static event Delegates.set_paragraphSpacing_BeforeArgs _beforeset_paragraphSpacing;
internal static event Delegates.set_paragraphSpacing_AfterArgs _afterset_paragraphSpacing;
private static void set_paragraphSpacing(Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float value)
{
Delegates.Params_set_paragraphSpacing @params = new() 
{
self = self
, value = value
};
if (_beforeset_paragraphSpacing != null)
{
foreach (Delegates.set_paragraphSpacing_BeforeArgs toInvoke in _beforeset_paragraphSpacing.GetInvocationList())
{
try
{
_beforeset_paragraphSpacing?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_paragraphSpacing != null)
{
foreach (Delegates.set_paragraphSpacing_AfterArgs toInvoke in _afterset_paragraphSpacing.GetInvocationList())
{
try
{
_afterset_paragraphSpacing.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_characterWidthAdjustment()
{
if (!HookedList.Contains("get_characterWidthAdjustment"))
{
HookedList.Add("get_characterWidthAdjustment");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_characterWidthAdjustment", true), get_characterWidthAdjustment);

}
}
internal static event Delegates.get_characterWidthAdjustment_BeforeArgs _beforeget_characterWidthAdjustment;
internal static event Delegates.get_characterWidthAdjustment_AfterArgs _afterget_characterWidthAdjustment;
private static float get_characterWidthAdjustment(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_characterWidthAdjustment @params = new() 
{
self = self
};
if (_beforeget_characterWidthAdjustment != null)
{
foreach (Delegates.get_characterWidthAdjustment_BeforeArgs toInvoke in _beforeget_characterWidthAdjustment.GetInvocationList())
{
try
{
_beforeget_characterWidthAdjustment?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_characterWidthAdjustment != null)
{
foreach (Delegates.get_characterWidthAdjustment_AfterArgs toInvoke in _afterget_characterWidthAdjustment.GetInvocationList())
{
try
{
retVal = _afterget_characterWidthAdjustment.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_characterWidthAdjustment()
{
if (!HookedList.Contains("set_characterWidthAdjustment"))
{
HookedList.Add("set_characterWidthAdjustment");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_characterWidthAdjustment", true), set_characterWidthAdjustment);

}
}
internal static event Delegates.set_characterWidthAdjustment_BeforeArgs _beforeset_characterWidthAdjustment;
internal static event Delegates.set_characterWidthAdjustment_AfterArgs _afterset_characterWidthAdjustment;
private static void set_characterWidthAdjustment(Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float value)
{
Delegates.Params_set_characterWidthAdjustment @params = new() 
{
self = self
, value = value
};
if (_beforeset_characterWidthAdjustment != null)
{
foreach (Delegates.set_characterWidthAdjustment_BeforeArgs toInvoke in _beforeset_characterWidthAdjustment.GetInvocationList())
{
try
{
_beforeset_characterWidthAdjustment?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_characterWidthAdjustment != null)
{
foreach (Delegates.set_characterWidthAdjustment_AfterArgs toInvoke in _afterset_characterWidthAdjustment.GetInvocationList())
{
try
{
_afterset_characterWidthAdjustment.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_enableWordWrapping()
{
if (!HookedList.Contains("get_enableWordWrapping"))
{
HookedList.Add("get_enableWordWrapping");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_enableWordWrapping", true), get_enableWordWrapping);

}
}
internal static event Delegates.get_enableWordWrapping_BeforeArgs _beforeget_enableWordWrapping;
internal static event Delegates.get_enableWordWrapping_AfterArgs _afterget_enableWordWrapping;
private static bool get_enableWordWrapping(Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_enableWordWrapping @params = new() 
{
self = self
};
if (_beforeget_enableWordWrapping != null)
{
foreach (Delegates.get_enableWordWrapping_BeforeArgs toInvoke in _beforeget_enableWordWrapping.GetInvocationList())
{
try
{
_beforeget_enableWordWrapping?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_enableWordWrapping != null)
{
foreach (Delegates.get_enableWordWrapping_AfterArgs toInvoke in _afterget_enableWordWrapping.GetInvocationList())
{
try
{
retVal = _afterget_enableWordWrapping.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_enableWordWrapping()
{
if (!HookedList.Contains("set_enableWordWrapping"))
{
HookedList.Add("set_enableWordWrapping");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_enableWordWrapping", true), set_enableWordWrapping);

}
}
internal static event Delegates.set_enableWordWrapping_BeforeArgs _beforeset_enableWordWrapping;
internal static event Delegates.set_enableWordWrapping_AfterArgs _afterset_enableWordWrapping;
private static void set_enableWordWrapping(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value)
{
Delegates.Params_set_enableWordWrapping @params = new() 
{
self = self
, value = value
};
if (_beforeset_enableWordWrapping != null)
{
foreach (Delegates.set_enableWordWrapping_BeforeArgs toInvoke in _beforeset_enableWordWrapping.GetInvocationList())
{
try
{
_beforeset_enableWordWrapping?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_enableWordWrapping != null)
{
foreach (Delegates.set_enableWordWrapping_AfterArgs toInvoke in _afterset_enableWordWrapping.GetInvocationList())
{
try
{
_afterset_enableWordWrapping.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_wordWrappingRatios()
{
if (!HookedList.Contains("get_wordWrappingRatios"))
{
HookedList.Add("get_wordWrappingRatios");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_wordWrappingRatios", true), get_wordWrappingRatios);

}
}
internal static event Delegates.get_wordWrappingRatios_BeforeArgs _beforeget_wordWrappingRatios;
internal static event Delegates.get_wordWrappingRatios_AfterArgs _afterget_wordWrappingRatios;
private static float get_wordWrappingRatios(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_wordWrappingRatios @params = new() 
{
self = self
};
if (_beforeget_wordWrappingRatios != null)
{
foreach (Delegates.get_wordWrappingRatios_BeforeArgs toInvoke in _beforeget_wordWrappingRatios.GetInvocationList())
{
try
{
_beforeget_wordWrappingRatios?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_wordWrappingRatios != null)
{
foreach (Delegates.get_wordWrappingRatios_AfterArgs toInvoke in _afterget_wordWrappingRatios.GetInvocationList())
{
try
{
retVal = _afterget_wordWrappingRatios.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_wordWrappingRatios()
{
if (!HookedList.Contains("set_wordWrappingRatios"))
{
HookedList.Add("set_wordWrappingRatios");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_wordWrappingRatios", true), set_wordWrappingRatios);

}
}
internal static event Delegates.set_wordWrappingRatios_BeforeArgs _beforeset_wordWrappingRatios;
internal static event Delegates.set_wordWrappingRatios_AfterArgs _afterset_wordWrappingRatios;
private static void set_wordWrappingRatios(Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float value)
{
Delegates.Params_set_wordWrappingRatios @params = new() 
{
self = self
, value = value
};
if (_beforeset_wordWrappingRatios != null)
{
foreach (Delegates.set_wordWrappingRatios_BeforeArgs toInvoke in _beforeset_wordWrappingRatios.GetInvocationList())
{
try
{
_beforeset_wordWrappingRatios?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_wordWrappingRatios != null)
{
foreach (Delegates.set_wordWrappingRatios_AfterArgs toInvoke in _afterset_wordWrappingRatios.GetInvocationList())
{
try
{
_afterset_wordWrappingRatios.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_enableAdaptiveJustification()
{
if (!HookedList.Contains("get_enableAdaptiveJustification"))
{
HookedList.Add("get_enableAdaptiveJustification");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_enableAdaptiveJustification", true), get_enableAdaptiveJustification);

}
}
internal static event Delegates.get_enableAdaptiveJustification_BeforeArgs _beforeget_enableAdaptiveJustification;
internal static event Delegates.get_enableAdaptiveJustification_AfterArgs _afterget_enableAdaptiveJustification;
private static bool get_enableAdaptiveJustification(Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_enableAdaptiveJustification @params = new() 
{
self = self
};
if (_beforeget_enableAdaptiveJustification != null)
{
foreach (Delegates.get_enableAdaptiveJustification_BeforeArgs toInvoke in _beforeget_enableAdaptiveJustification.GetInvocationList())
{
try
{
_beforeget_enableAdaptiveJustification?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_enableAdaptiveJustification != null)
{
foreach (Delegates.get_enableAdaptiveJustification_AfterArgs toInvoke in _afterget_enableAdaptiveJustification.GetInvocationList())
{
try
{
retVal = _afterget_enableAdaptiveJustification.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_enableAdaptiveJustification()
{
if (!HookedList.Contains("set_enableAdaptiveJustification"))
{
HookedList.Add("set_enableAdaptiveJustification");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_enableAdaptiveJustification", true), set_enableAdaptiveJustification);

}
}
internal static event Delegates.set_enableAdaptiveJustification_BeforeArgs _beforeset_enableAdaptiveJustification;
internal static event Delegates.set_enableAdaptiveJustification_AfterArgs _afterset_enableAdaptiveJustification;
private static void set_enableAdaptiveJustification(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value)
{
Delegates.Params_set_enableAdaptiveJustification @params = new() 
{
self = self
, value = value
};
if (_beforeset_enableAdaptiveJustification != null)
{
foreach (Delegates.set_enableAdaptiveJustification_BeforeArgs toInvoke in _beforeset_enableAdaptiveJustification.GetInvocationList())
{
try
{
_beforeset_enableAdaptiveJustification?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_enableAdaptiveJustification != null)
{
foreach (Delegates.set_enableAdaptiveJustification_AfterArgs toInvoke in _afterset_enableAdaptiveJustification.GetInvocationList())
{
try
{
_afterset_enableAdaptiveJustification.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_OverflowMode()
{
if (!HookedList.Contains("get_OverflowMode"))
{
HookedList.Add("get_OverflowMode");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_OverflowMode", true), get_OverflowMode);

}
}
internal static event Delegates.get_OverflowMode_BeforeArgs _beforeget_OverflowMode;
internal static event Delegates.get_OverflowMode_AfterArgs _afterget_OverflowMode;
private static TMPro.TextOverflowModes get_OverflowMode(Func<TMPro.TMP_Text, TMPro.TextOverflowModes> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_OverflowMode @params = new() 
{
self = self
};
if (_beforeget_OverflowMode != null)
{
foreach (Delegates.get_OverflowMode_BeforeArgs toInvoke in _beforeget_OverflowMode.GetInvocationList())
{
try
{
_beforeget_OverflowMode?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_OverflowMode != null)
{
foreach (Delegates.get_OverflowMode_AfterArgs toInvoke in _afterget_OverflowMode.GetInvocationList())
{
try
{
retVal = _afterget_OverflowMode.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_OverflowMode()
{
if (!HookedList.Contains("set_OverflowMode"))
{
HookedList.Add("set_OverflowMode");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_OverflowMode", true), set_OverflowMode);

}
}
internal static event Delegates.set_OverflowMode_BeforeArgs _beforeset_OverflowMode;
internal static event Delegates.set_OverflowMode_AfterArgs _afterset_OverflowMode;
private static void set_OverflowMode(Action<TMPro.TMP_Text,  TMPro.TextOverflowModes> orig, TMPro.TMP_Text self,  TMPro.TextOverflowModes value)
{
Delegates.Params_set_OverflowMode @params = new() 
{
self = self
, value = value
};
if (_beforeset_OverflowMode != null)
{
foreach (Delegates.set_OverflowMode_BeforeArgs toInvoke in _beforeset_OverflowMode.GetInvocationList())
{
try
{
_beforeset_OverflowMode?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_OverflowMode != null)
{
foreach (Delegates.set_OverflowMode_AfterArgs toInvoke in _afterset_OverflowMode.GetInvocationList())
{
try
{
_afterset_OverflowMode.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_enableKerning()
{
if (!HookedList.Contains("get_enableKerning"))
{
HookedList.Add("get_enableKerning");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_enableKerning", true), get_enableKerning);

}
}
internal static event Delegates.get_enableKerning_BeforeArgs _beforeget_enableKerning;
internal static event Delegates.get_enableKerning_AfterArgs _afterget_enableKerning;
private static bool get_enableKerning(Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_enableKerning @params = new() 
{
self = self
};
if (_beforeget_enableKerning != null)
{
foreach (Delegates.get_enableKerning_BeforeArgs toInvoke in _beforeget_enableKerning.GetInvocationList())
{
try
{
_beforeget_enableKerning?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_enableKerning != null)
{
foreach (Delegates.get_enableKerning_AfterArgs toInvoke in _afterget_enableKerning.GetInvocationList())
{
try
{
retVal = _afterget_enableKerning.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_enableKerning()
{
if (!HookedList.Contains("set_enableKerning"))
{
HookedList.Add("set_enableKerning");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_enableKerning", true), set_enableKerning);

}
}
internal static event Delegates.set_enableKerning_BeforeArgs _beforeset_enableKerning;
internal static event Delegates.set_enableKerning_AfterArgs _afterset_enableKerning;
private static void set_enableKerning(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value)
{
Delegates.Params_set_enableKerning @params = new() 
{
self = self
, value = value
};
if (_beforeset_enableKerning != null)
{
foreach (Delegates.set_enableKerning_BeforeArgs toInvoke in _beforeset_enableKerning.GetInvocationList())
{
try
{
_beforeset_enableKerning?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_enableKerning != null)
{
foreach (Delegates.set_enableKerning_AfterArgs toInvoke in _afterset_enableKerning.GetInvocationList())
{
try
{
_afterset_enableKerning.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_extraPadding()
{
if (!HookedList.Contains("get_extraPadding"))
{
HookedList.Add("get_extraPadding");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_extraPadding", true), get_extraPadding);

}
}
internal static event Delegates.get_extraPadding_BeforeArgs _beforeget_extraPadding;
internal static event Delegates.get_extraPadding_AfterArgs _afterget_extraPadding;
private static bool get_extraPadding(Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_extraPadding @params = new() 
{
self = self
};
if (_beforeget_extraPadding != null)
{
foreach (Delegates.get_extraPadding_BeforeArgs toInvoke in _beforeget_extraPadding.GetInvocationList())
{
try
{
_beforeget_extraPadding?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_extraPadding != null)
{
foreach (Delegates.get_extraPadding_AfterArgs toInvoke in _afterget_extraPadding.GetInvocationList())
{
try
{
retVal = _afterget_extraPadding.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_extraPadding()
{
if (!HookedList.Contains("set_extraPadding"))
{
HookedList.Add("set_extraPadding");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_extraPadding", true), set_extraPadding);

}
}
internal static event Delegates.set_extraPadding_BeforeArgs _beforeset_extraPadding;
internal static event Delegates.set_extraPadding_AfterArgs _afterset_extraPadding;
private static void set_extraPadding(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value)
{
Delegates.Params_set_extraPadding @params = new() 
{
self = self
, value = value
};
if (_beforeset_extraPadding != null)
{
foreach (Delegates.set_extraPadding_BeforeArgs toInvoke in _beforeset_extraPadding.GetInvocationList())
{
try
{
_beforeset_extraPadding?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_extraPadding != null)
{
foreach (Delegates.set_extraPadding_AfterArgs toInvoke in _afterset_extraPadding.GetInvocationList())
{
try
{
_afterset_extraPadding.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_richText()
{
if (!HookedList.Contains("get_richText"))
{
HookedList.Add("get_richText");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_richText", true), get_richText);

}
}
internal static event Delegates.get_richText_BeforeArgs _beforeget_richText;
internal static event Delegates.get_richText_AfterArgs _afterget_richText;
private static bool get_richText(Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_richText @params = new() 
{
self = self
};
if (_beforeget_richText != null)
{
foreach (Delegates.get_richText_BeforeArgs toInvoke in _beforeget_richText.GetInvocationList())
{
try
{
_beforeget_richText?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_richText != null)
{
foreach (Delegates.get_richText_AfterArgs toInvoke in _afterget_richText.GetInvocationList())
{
try
{
retVal = _afterget_richText.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_richText()
{
if (!HookedList.Contains("set_richText"))
{
HookedList.Add("set_richText");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_richText", true), set_richText);

}
}
internal static event Delegates.set_richText_BeforeArgs _beforeset_richText;
internal static event Delegates.set_richText_AfterArgs _afterset_richText;
private static void set_richText(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value)
{
Delegates.Params_set_richText @params = new() 
{
self = self
, value = value
};
if (_beforeset_richText != null)
{
foreach (Delegates.set_richText_BeforeArgs toInvoke in _beforeset_richText.GetInvocationList())
{
try
{
_beforeset_richText?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_richText != null)
{
foreach (Delegates.set_richText_AfterArgs toInvoke in _afterset_richText.GetInvocationList())
{
try
{
_afterset_richText.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_parseCtrlCharacters()
{
if (!HookedList.Contains("get_parseCtrlCharacters"))
{
HookedList.Add("get_parseCtrlCharacters");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_parseCtrlCharacters", true), get_parseCtrlCharacters);

}
}
internal static event Delegates.get_parseCtrlCharacters_BeforeArgs _beforeget_parseCtrlCharacters;
internal static event Delegates.get_parseCtrlCharacters_AfterArgs _afterget_parseCtrlCharacters;
private static bool get_parseCtrlCharacters(Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_parseCtrlCharacters @params = new() 
{
self = self
};
if (_beforeget_parseCtrlCharacters != null)
{
foreach (Delegates.get_parseCtrlCharacters_BeforeArgs toInvoke in _beforeget_parseCtrlCharacters.GetInvocationList())
{
try
{
_beforeget_parseCtrlCharacters?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_parseCtrlCharacters != null)
{
foreach (Delegates.get_parseCtrlCharacters_AfterArgs toInvoke in _afterget_parseCtrlCharacters.GetInvocationList())
{
try
{
retVal = _afterget_parseCtrlCharacters.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_parseCtrlCharacters()
{
if (!HookedList.Contains("set_parseCtrlCharacters"))
{
HookedList.Add("set_parseCtrlCharacters");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_parseCtrlCharacters", true), set_parseCtrlCharacters);

}
}
internal static event Delegates.set_parseCtrlCharacters_BeforeArgs _beforeset_parseCtrlCharacters;
internal static event Delegates.set_parseCtrlCharacters_AfterArgs _afterset_parseCtrlCharacters;
private static void set_parseCtrlCharacters(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value)
{
Delegates.Params_set_parseCtrlCharacters @params = new() 
{
self = self
, value = value
};
if (_beforeset_parseCtrlCharacters != null)
{
foreach (Delegates.set_parseCtrlCharacters_BeforeArgs toInvoke in _beforeset_parseCtrlCharacters.GetInvocationList())
{
try
{
_beforeset_parseCtrlCharacters?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_parseCtrlCharacters != null)
{
foreach (Delegates.set_parseCtrlCharacters_AfterArgs toInvoke in _afterset_parseCtrlCharacters.GetInvocationList())
{
try
{
_afterset_parseCtrlCharacters.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_isOverlay()
{
if (!HookedList.Contains("get_isOverlay"))
{
HookedList.Add("get_isOverlay");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_isOverlay", true), get_isOverlay);

}
}
internal static event Delegates.get_isOverlay_BeforeArgs _beforeget_isOverlay;
internal static event Delegates.get_isOverlay_AfterArgs _afterget_isOverlay;
private static bool get_isOverlay(Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_isOverlay @params = new() 
{
self = self
};
if (_beforeget_isOverlay != null)
{
foreach (Delegates.get_isOverlay_BeforeArgs toInvoke in _beforeget_isOverlay.GetInvocationList())
{
try
{
_beforeget_isOverlay?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_isOverlay != null)
{
foreach (Delegates.get_isOverlay_AfterArgs toInvoke in _afterget_isOverlay.GetInvocationList())
{
try
{
retVal = _afterget_isOverlay.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_isOverlay()
{
if (!HookedList.Contains("set_isOverlay"))
{
HookedList.Add("set_isOverlay");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_isOverlay", true), set_isOverlay);

}
}
internal static event Delegates.set_isOverlay_BeforeArgs _beforeset_isOverlay;
internal static event Delegates.set_isOverlay_AfterArgs _afterset_isOverlay;
private static void set_isOverlay(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value)
{
Delegates.Params_set_isOverlay @params = new() 
{
self = self
, value = value
};
if (_beforeset_isOverlay != null)
{
foreach (Delegates.set_isOverlay_BeforeArgs toInvoke in _beforeset_isOverlay.GetInvocationList())
{
try
{
_beforeset_isOverlay?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_isOverlay != null)
{
foreach (Delegates.set_isOverlay_AfterArgs toInvoke in _afterset_isOverlay.GetInvocationList())
{
try
{
_afterset_isOverlay.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_isOrthographic()
{
if (!HookedList.Contains("get_isOrthographic"))
{
HookedList.Add("get_isOrthographic");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_isOrthographic", true), get_isOrthographic);

}
}
internal static event Delegates.get_isOrthographic_BeforeArgs _beforeget_isOrthographic;
internal static event Delegates.get_isOrthographic_AfterArgs _afterget_isOrthographic;
private static bool get_isOrthographic(Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_isOrthographic @params = new() 
{
self = self
};
if (_beforeget_isOrthographic != null)
{
foreach (Delegates.get_isOrthographic_BeforeArgs toInvoke in _beforeget_isOrthographic.GetInvocationList())
{
try
{
_beforeget_isOrthographic?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_isOrthographic != null)
{
foreach (Delegates.get_isOrthographic_AfterArgs toInvoke in _afterget_isOrthographic.GetInvocationList())
{
try
{
retVal = _afterget_isOrthographic.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_isOrthographic()
{
if (!HookedList.Contains("set_isOrthographic"))
{
HookedList.Add("set_isOrthographic");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_isOrthographic", true), set_isOrthographic);

}
}
internal static event Delegates.set_isOrthographic_BeforeArgs _beforeset_isOrthographic;
internal static event Delegates.set_isOrthographic_AfterArgs _afterset_isOrthographic;
private static void set_isOrthographic(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value)
{
Delegates.Params_set_isOrthographic @params = new() 
{
self = self
, value = value
};
if (_beforeset_isOrthographic != null)
{
foreach (Delegates.set_isOrthographic_BeforeArgs toInvoke in _beforeset_isOrthographic.GetInvocationList())
{
try
{
_beforeset_isOrthographic?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_isOrthographic != null)
{
foreach (Delegates.set_isOrthographic_AfterArgs toInvoke in _afterset_isOrthographic.GetInvocationList())
{
try
{
_afterset_isOrthographic.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_enableCulling()
{
if (!HookedList.Contains("get_enableCulling"))
{
HookedList.Add("get_enableCulling");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_enableCulling", true), get_enableCulling);

}
}
internal static event Delegates.get_enableCulling_BeforeArgs _beforeget_enableCulling;
internal static event Delegates.get_enableCulling_AfterArgs _afterget_enableCulling;
private static bool get_enableCulling(Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_enableCulling @params = new() 
{
self = self
};
if (_beforeget_enableCulling != null)
{
foreach (Delegates.get_enableCulling_BeforeArgs toInvoke in _beforeget_enableCulling.GetInvocationList())
{
try
{
_beforeget_enableCulling?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_enableCulling != null)
{
foreach (Delegates.get_enableCulling_AfterArgs toInvoke in _afterget_enableCulling.GetInvocationList())
{
try
{
retVal = _afterget_enableCulling.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_enableCulling()
{
if (!HookedList.Contains("set_enableCulling"))
{
HookedList.Add("set_enableCulling");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_enableCulling", true), set_enableCulling);

}
}
internal static event Delegates.set_enableCulling_BeforeArgs _beforeset_enableCulling;
internal static event Delegates.set_enableCulling_AfterArgs _afterset_enableCulling;
private static void set_enableCulling(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value)
{
Delegates.Params_set_enableCulling @params = new() 
{
self = self
, value = value
};
if (_beforeset_enableCulling != null)
{
foreach (Delegates.set_enableCulling_BeforeArgs toInvoke in _beforeset_enableCulling.GetInvocationList())
{
try
{
_beforeset_enableCulling?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_enableCulling != null)
{
foreach (Delegates.set_enableCulling_AfterArgs toInvoke in _afterset_enableCulling.GetInvocationList())
{
try
{
_afterset_enableCulling.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_ignoreVisibility()
{
if (!HookedList.Contains("get_ignoreVisibility"))
{
HookedList.Add("get_ignoreVisibility");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_ignoreVisibility", true), get_ignoreVisibility);

}
}
internal static event Delegates.get_ignoreVisibility_BeforeArgs _beforeget_ignoreVisibility;
internal static event Delegates.get_ignoreVisibility_AfterArgs _afterget_ignoreVisibility;
private static bool get_ignoreVisibility(Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_ignoreVisibility @params = new() 
{
self = self
};
if (_beforeget_ignoreVisibility != null)
{
foreach (Delegates.get_ignoreVisibility_BeforeArgs toInvoke in _beforeget_ignoreVisibility.GetInvocationList())
{
try
{
_beforeget_ignoreVisibility?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_ignoreVisibility != null)
{
foreach (Delegates.get_ignoreVisibility_AfterArgs toInvoke in _afterget_ignoreVisibility.GetInvocationList())
{
try
{
retVal = _afterget_ignoreVisibility.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_ignoreVisibility()
{
if (!HookedList.Contains("set_ignoreVisibility"))
{
HookedList.Add("set_ignoreVisibility");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_ignoreVisibility", true), set_ignoreVisibility);

}
}
internal static event Delegates.set_ignoreVisibility_BeforeArgs _beforeset_ignoreVisibility;
internal static event Delegates.set_ignoreVisibility_AfterArgs _afterset_ignoreVisibility;
private static void set_ignoreVisibility(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value)
{
Delegates.Params_set_ignoreVisibility @params = new() 
{
self = self
, value = value
};
if (_beforeset_ignoreVisibility != null)
{
foreach (Delegates.set_ignoreVisibility_BeforeArgs toInvoke in _beforeset_ignoreVisibility.GetInvocationList())
{
try
{
_beforeset_ignoreVisibility?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_ignoreVisibility != null)
{
foreach (Delegates.set_ignoreVisibility_AfterArgs toInvoke in _afterset_ignoreVisibility.GetInvocationList())
{
try
{
_afterset_ignoreVisibility.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_horizontalMapping()
{
if (!HookedList.Contains("get_horizontalMapping"))
{
HookedList.Add("get_horizontalMapping");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_horizontalMapping", true), get_horizontalMapping);

}
}
internal static event Delegates.get_horizontalMapping_BeforeArgs _beforeget_horizontalMapping;
internal static event Delegates.get_horizontalMapping_AfterArgs _afterget_horizontalMapping;
private static TMPro.TextureMappingOptions get_horizontalMapping(Func<TMPro.TMP_Text, TMPro.TextureMappingOptions> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_horizontalMapping @params = new() 
{
self = self
};
if (_beforeget_horizontalMapping != null)
{
foreach (Delegates.get_horizontalMapping_BeforeArgs toInvoke in _beforeget_horizontalMapping.GetInvocationList())
{
try
{
_beforeget_horizontalMapping?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_horizontalMapping != null)
{
foreach (Delegates.get_horizontalMapping_AfterArgs toInvoke in _afterget_horizontalMapping.GetInvocationList())
{
try
{
retVal = _afterget_horizontalMapping.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_horizontalMapping()
{
if (!HookedList.Contains("set_horizontalMapping"))
{
HookedList.Add("set_horizontalMapping");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_horizontalMapping", true), set_horizontalMapping);

}
}
internal static event Delegates.set_horizontalMapping_BeforeArgs _beforeset_horizontalMapping;
internal static event Delegates.set_horizontalMapping_AfterArgs _afterset_horizontalMapping;
private static void set_horizontalMapping(Action<TMPro.TMP_Text,  TMPro.TextureMappingOptions> orig, TMPro.TMP_Text self,  TMPro.TextureMappingOptions value)
{
Delegates.Params_set_horizontalMapping @params = new() 
{
self = self
, value = value
};
if (_beforeset_horizontalMapping != null)
{
foreach (Delegates.set_horizontalMapping_BeforeArgs toInvoke in _beforeset_horizontalMapping.GetInvocationList())
{
try
{
_beforeset_horizontalMapping?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_horizontalMapping != null)
{
foreach (Delegates.set_horizontalMapping_AfterArgs toInvoke in _afterset_horizontalMapping.GetInvocationList())
{
try
{
_afterset_horizontalMapping.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_verticalMapping()
{
if (!HookedList.Contains("get_verticalMapping"))
{
HookedList.Add("get_verticalMapping");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_verticalMapping", true), get_verticalMapping);

}
}
internal static event Delegates.get_verticalMapping_BeforeArgs _beforeget_verticalMapping;
internal static event Delegates.get_verticalMapping_AfterArgs _afterget_verticalMapping;
private static TMPro.TextureMappingOptions get_verticalMapping(Func<TMPro.TMP_Text, TMPro.TextureMappingOptions> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_verticalMapping @params = new() 
{
self = self
};
if (_beforeget_verticalMapping != null)
{
foreach (Delegates.get_verticalMapping_BeforeArgs toInvoke in _beforeget_verticalMapping.GetInvocationList())
{
try
{
_beforeget_verticalMapping?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_verticalMapping != null)
{
foreach (Delegates.get_verticalMapping_AfterArgs toInvoke in _afterget_verticalMapping.GetInvocationList())
{
try
{
retVal = _afterget_verticalMapping.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_verticalMapping()
{
if (!HookedList.Contains("set_verticalMapping"))
{
HookedList.Add("set_verticalMapping");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_verticalMapping", true), set_verticalMapping);

}
}
internal static event Delegates.set_verticalMapping_BeforeArgs _beforeset_verticalMapping;
internal static event Delegates.set_verticalMapping_AfterArgs _afterset_verticalMapping;
private static void set_verticalMapping(Action<TMPro.TMP_Text,  TMPro.TextureMappingOptions> orig, TMPro.TMP_Text self,  TMPro.TextureMappingOptions value)
{
Delegates.Params_set_verticalMapping @params = new() 
{
self = self
, value = value
};
if (_beforeset_verticalMapping != null)
{
foreach (Delegates.set_verticalMapping_BeforeArgs toInvoke in _beforeset_verticalMapping.GetInvocationList())
{
try
{
_beforeset_verticalMapping?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_verticalMapping != null)
{
foreach (Delegates.set_verticalMapping_AfterArgs toInvoke in _afterset_verticalMapping.GetInvocationList())
{
try
{
_afterset_verticalMapping.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_renderMode()
{
if (!HookedList.Contains("get_renderMode"))
{
HookedList.Add("get_renderMode");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_renderMode", true), get_renderMode);

}
}
internal static event Delegates.get_renderMode_BeforeArgs _beforeget_renderMode;
internal static event Delegates.get_renderMode_AfterArgs _afterget_renderMode;
private static TMPro.TextRenderFlags get_renderMode(Func<TMPro.TMP_Text, TMPro.TextRenderFlags> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_renderMode @params = new() 
{
self = self
};
if (_beforeget_renderMode != null)
{
foreach (Delegates.get_renderMode_BeforeArgs toInvoke in _beforeget_renderMode.GetInvocationList())
{
try
{
_beforeget_renderMode?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_renderMode != null)
{
foreach (Delegates.get_renderMode_AfterArgs toInvoke in _afterget_renderMode.GetInvocationList())
{
try
{
retVal = _afterget_renderMode.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_renderMode()
{
if (!HookedList.Contains("set_renderMode"))
{
HookedList.Add("set_renderMode");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_renderMode", true), set_renderMode);

}
}
internal static event Delegates.set_renderMode_BeforeArgs _beforeset_renderMode;
internal static event Delegates.set_renderMode_AfterArgs _afterset_renderMode;
private static void set_renderMode(Action<TMPro.TMP_Text,  TMPro.TextRenderFlags> orig, TMPro.TMP_Text self,  TMPro.TextRenderFlags value)
{
Delegates.Params_set_renderMode @params = new() 
{
self = self
, value = value
};
if (_beforeset_renderMode != null)
{
foreach (Delegates.set_renderMode_BeforeArgs toInvoke in _beforeset_renderMode.GetInvocationList())
{
try
{
_beforeset_renderMode?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_renderMode != null)
{
foreach (Delegates.set_renderMode_AfterArgs toInvoke in _afterset_renderMode.GetInvocationList())
{
try
{
_afterset_renderMode.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_maxVisibleCharacters()
{
if (!HookedList.Contains("get_maxVisibleCharacters"))
{
HookedList.Add("get_maxVisibleCharacters");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_maxVisibleCharacters", true), get_maxVisibleCharacters);

}
}
internal static event Delegates.get_maxVisibleCharacters_BeforeArgs _beforeget_maxVisibleCharacters;
internal static event Delegates.get_maxVisibleCharacters_AfterArgs _afterget_maxVisibleCharacters;
private static int get_maxVisibleCharacters(Func<TMPro.TMP_Text, int> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_maxVisibleCharacters @params = new() 
{
self = self
};
if (_beforeget_maxVisibleCharacters != null)
{
foreach (Delegates.get_maxVisibleCharacters_BeforeArgs toInvoke in _beforeget_maxVisibleCharacters.GetInvocationList())
{
try
{
_beforeget_maxVisibleCharacters?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_maxVisibleCharacters != null)
{
foreach (Delegates.get_maxVisibleCharacters_AfterArgs toInvoke in _afterget_maxVisibleCharacters.GetInvocationList())
{
try
{
retVal = _afterget_maxVisibleCharacters.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_maxVisibleCharacters()
{
if (!HookedList.Contains("set_maxVisibleCharacters"))
{
HookedList.Add("set_maxVisibleCharacters");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_maxVisibleCharacters", true), set_maxVisibleCharacters);

}
}
internal static event Delegates.set_maxVisibleCharacters_BeforeArgs _beforeset_maxVisibleCharacters;
internal static event Delegates.set_maxVisibleCharacters_AfterArgs _afterset_maxVisibleCharacters;
private static void set_maxVisibleCharacters(Action<TMPro.TMP_Text,  int> orig, TMPro.TMP_Text self,  int value)
{
Delegates.Params_set_maxVisibleCharacters @params = new() 
{
self = self
, value = value
};
if (_beforeset_maxVisibleCharacters != null)
{
foreach (Delegates.set_maxVisibleCharacters_BeforeArgs toInvoke in _beforeset_maxVisibleCharacters.GetInvocationList())
{
try
{
_beforeset_maxVisibleCharacters?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_maxVisibleCharacters != null)
{
foreach (Delegates.set_maxVisibleCharacters_AfterArgs toInvoke in _afterset_maxVisibleCharacters.GetInvocationList())
{
try
{
_afterset_maxVisibleCharacters.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_maxVisibleWords()
{
if (!HookedList.Contains("get_maxVisibleWords"))
{
HookedList.Add("get_maxVisibleWords");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_maxVisibleWords", true), get_maxVisibleWords);

}
}
internal static event Delegates.get_maxVisibleWords_BeforeArgs _beforeget_maxVisibleWords;
internal static event Delegates.get_maxVisibleWords_AfterArgs _afterget_maxVisibleWords;
private static int get_maxVisibleWords(Func<TMPro.TMP_Text, int> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_maxVisibleWords @params = new() 
{
self = self
};
if (_beforeget_maxVisibleWords != null)
{
foreach (Delegates.get_maxVisibleWords_BeforeArgs toInvoke in _beforeget_maxVisibleWords.GetInvocationList())
{
try
{
_beforeget_maxVisibleWords?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_maxVisibleWords != null)
{
foreach (Delegates.get_maxVisibleWords_AfterArgs toInvoke in _afterget_maxVisibleWords.GetInvocationList())
{
try
{
retVal = _afterget_maxVisibleWords.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_maxVisibleWords()
{
if (!HookedList.Contains("set_maxVisibleWords"))
{
HookedList.Add("set_maxVisibleWords");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_maxVisibleWords", true), set_maxVisibleWords);

}
}
internal static event Delegates.set_maxVisibleWords_BeforeArgs _beforeset_maxVisibleWords;
internal static event Delegates.set_maxVisibleWords_AfterArgs _afterset_maxVisibleWords;
private static void set_maxVisibleWords(Action<TMPro.TMP_Text,  int> orig, TMPro.TMP_Text self,  int value)
{
Delegates.Params_set_maxVisibleWords @params = new() 
{
self = self
, value = value
};
if (_beforeset_maxVisibleWords != null)
{
foreach (Delegates.set_maxVisibleWords_BeforeArgs toInvoke in _beforeset_maxVisibleWords.GetInvocationList())
{
try
{
_beforeset_maxVisibleWords?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_maxVisibleWords != null)
{
foreach (Delegates.set_maxVisibleWords_AfterArgs toInvoke in _afterset_maxVisibleWords.GetInvocationList())
{
try
{
_afterset_maxVisibleWords.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_maxVisibleLines()
{
if (!HookedList.Contains("get_maxVisibleLines"))
{
HookedList.Add("get_maxVisibleLines");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_maxVisibleLines", true), get_maxVisibleLines);

}
}
internal static event Delegates.get_maxVisibleLines_BeforeArgs _beforeget_maxVisibleLines;
internal static event Delegates.get_maxVisibleLines_AfterArgs _afterget_maxVisibleLines;
private static int get_maxVisibleLines(Func<TMPro.TMP_Text, int> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_maxVisibleLines @params = new() 
{
self = self
};
if (_beforeget_maxVisibleLines != null)
{
foreach (Delegates.get_maxVisibleLines_BeforeArgs toInvoke in _beforeget_maxVisibleLines.GetInvocationList())
{
try
{
_beforeget_maxVisibleLines?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_maxVisibleLines != null)
{
foreach (Delegates.get_maxVisibleLines_AfterArgs toInvoke in _afterget_maxVisibleLines.GetInvocationList())
{
try
{
retVal = _afterget_maxVisibleLines.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_maxVisibleLines()
{
if (!HookedList.Contains("set_maxVisibleLines"))
{
HookedList.Add("set_maxVisibleLines");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_maxVisibleLines", true), set_maxVisibleLines);

}
}
internal static event Delegates.set_maxVisibleLines_BeforeArgs _beforeset_maxVisibleLines;
internal static event Delegates.set_maxVisibleLines_AfterArgs _afterset_maxVisibleLines;
private static void set_maxVisibleLines(Action<TMPro.TMP_Text,  int> orig, TMPro.TMP_Text self,  int value)
{
Delegates.Params_set_maxVisibleLines @params = new() 
{
self = self
, value = value
};
if (_beforeset_maxVisibleLines != null)
{
foreach (Delegates.set_maxVisibleLines_BeforeArgs toInvoke in _beforeset_maxVisibleLines.GetInvocationList())
{
try
{
_beforeset_maxVisibleLines?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_maxVisibleLines != null)
{
foreach (Delegates.set_maxVisibleLines_AfterArgs toInvoke in _afterset_maxVisibleLines.GetInvocationList())
{
try
{
_afterset_maxVisibleLines.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_useMaxVisibleDescender()
{
if (!HookedList.Contains("get_useMaxVisibleDescender"))
{
HookedList.Add("get_useMaxVisibleDescender");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_useMaxVisibleDescender", true), get_useMaxVisibleDescender);

}
}
internal static event Delegates.get_useMaxVisibleDescender_BeforeArgs _beforeget_useMaxVisibleDescender;
internal static event Delegates.get_useMaxVisibleDescender_AfterArgs _afterget_useMaxVisibleDescender;
private static bool get_useMaxVisibleDescender(Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_useMaxVisibleDescender @params = new() 
{
self = self
};
if (_beforeget_useMaxVisibleDescender != null)
{
foreach (Delegates.get_useMaxVisibleDescender_BeforeArgs toInvoke in _beforeget_useMaxVisibleDescender.GetInvocationList())
{
try
{
_beforeget_useMaxVisibleDescender?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_useMaxVisibleDescender != null)
{
foreach (Delegates.get_useMaxVisibleDescender_AfterArgs toInvoke in _afterget_useMaxVisibleDescender.GetInvocationList())
{
try
{
retVal = _afterget_useMaxVisibleDescender.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_useMaxVisibleDescender()
{
if (!HookedList.Contains("set_useMaxVisibleDescender"))
{
HookedList.Add("set_useMaxVisibleDescender");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_useMaxVisibleDescender", true), set_useMaxVisibleDescender);

}
}
internal static event Delegates.set_useMaxVisibleDescender_BeforeArgs _beforeset_useMaxVisibleDescender;
internal static event Delegates.set_useMaxVisibleDescender_AfterArgs _afterset_useMaxVisibleDescender;
private static void set_useMaxVisibleDescender(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value)
{
Delegates.Params_set_useMaxVisibleDescender @params = new() 
{
self = self
, value = value
};
if (_beforeset_useMaxVisibleDescender != null)
{
foreach (Delegates.set_useMaxVisibleDescender_BeforeArgs toInvoke in _beforeset_useMaxVisibleDescender.GetInvocationList())
{
try
{
_beforeset_useMaxVisibleDescender?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_useMaxVisibleDescender != null)
{
foreach (Delegates.set_useMaxVisibleDescender_AfterArgs toInvoke in _afterset_useMaxVisibleDescender.GetInvocationList())
{
try
{
_afterset_useMaxVisibleDescender.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_pageToDisplay()
{
if (!HookedList.Contains("get_pageToDisplay"))
{
HookedList.Add("get_pageToDisplay");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_pageToDisplay", true), get_pageToDisplay);

}
}
internal static event Delegates.get_pageToDisplay_BeforeArgs _beforeget_pageToDisplay;
internal static event Delegates.get_pageToDisplay_AfterArgs _afterget_pageToDisplay;
private static int get_pageToDisplay(Func<TMPro.TMP_Text, int> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_pageToDisplay @params = new() 
{
self = self
};
if (_beforeget_pageToDisplay != null)
{
foreach (Delegates.get_pageToDisplay_BeforeArgs toInvoke in _beforeget_pageToDisplay.GetInvocationList())
{
try
{
_beforeget_pageToDisplay?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_pageToDisplay != null)
{
foreach (Delegates.get_pageToDisplay_AfterArgs toInvoke in _afterget_pageToDisplay.GetInvocationList())
{
try
{
retVal = _afterget_pageToDisplay.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_pageToDisplay()
{
if (!HookedList.Contains("set_pageToDisplay"))
{
HookedList.Add("set_pageToDisplay");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_pageToDisplay", true), set_pageToDisplay);

}
}
internal static event Delegates.set_pageToDisplay_BeforeArgs _beforeset_pageToDisplay;
internal static event Delegates.set_pageToDisplay_AfterArgs _afterset_pageToDisplay;
private static void set_pageToDisplay(Action<TMPro.TMP_Text,  int> orig, TMPro.TMP_Text self,  int value)
{
Delegates.Params_set_pageToDisplay @params = new() 
{
self = self
, value = value
};
if (_beforeset_pageToDisplay != null)
{
foreach (Delegates.set_pageToDisplay_BeforeArgs toInvoke in _beforeset_pageToDisplay.GetInvocationList())
{
try
{
_beforeset_pageToDisplay?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_pageToDisplay != null)
{
foreach (Delegates.set_pageToDisplay_AfterArgs toInvoke in _afterset_pageToDisplay.GetInvocationList())
{
try
{
_afterset_pageToDisplay.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_margin()
{
if (!HookedList.Contains("get_margin"))
{
HookedList.Add("get_margin");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_margin", true), get_margin);

}
}
internal static event Delegates.get_margin_BeforeArgs _beforeget_margin;
internal static event Delegates.get_margin_AfterArgs _afterget_margin;
private static UnityEngine.Vector4 get_margin(Func<TMPro.TMP_Text, UnityEngine.Vector4> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_margin @params = new() 
{
self = self
};
if (_beforeget_margin != null)
{
foreach (Delegates.get_margin_BeforeArgs toInvoke in _beforeget_margin.GetInvocationList())
{
try
{
_beforeget_margin?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_margin != null)
{
foreach (Delegates.get_margin_AfterArgs toInvoke in _afterget_margin.GetInvocationList())
{
try
{
retVal = _afterget_margin.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_margin()
{
if (!HookedList.Contains("set_margin"))
{
HookedList.Add("set_margin");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_margin", true), set_margin);

}
}
internal static event Delegates.set_margin_BeforeArgs _beforeset_margin;
internal static event Delegates.set_margin_AfterArgs _afterset_margin;
private static void set_margin(Action<TMPro.TMP_Text,  UnityEngine.Vector4> orig, TMPro.TMP_Text self,  UnityEngine.Vector4 value)
{
Delegates.Params_set_margin @params = new() 
{
self = self
, value = value
};
if (_beforeset_margin != null)
{
foreach (Delegates.set_margin_BeforeArgs toInvoke in _beforeset_margin.GetInvocationList())
{
try
{
_beforeset_margin?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_margin != null)
{
foreach (Delegates.set_margin_AfterArgs toInvoke in _afterset_margin.GetInvocationList())
{
try
{
_afterset_margin.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_textInfo()
{
if (!HookedList.Contains("get_textInfo"))
{
HookedList.Add("get_textInfo");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_textInfo", true), get_textInfo);

}
}
internal static event Delegates.get_textInfo_BeforeArgs _beforeget_textInfo;
internal static event Delegates.get_textInfo_AfterArgs _afterget_textInfo;
private static TMPro.TMP_TextInfo get_textInfo(Func<TMPro.TMP_Text, TMPro.TMP_TextInfo> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_textInfo @params = new() 
{
self = self
};
if (_beforeget_textInfo != null)
{
foreach (Delegates.get_textInfo_BeforeArgs toInvoke in _beforeget_textInfo.GetInvocationList())
{
try
{
_beforeget_textInfo?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_textInfo != null)
{
foreach (Delegates.get_textInfo_AfterArgs toInvoke in _afterget_textInfo.GetInvocationList())
{
try
{
retVal = _afterget_textInfo.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_havePropertiesChanged()
{
if (!HookedList.Contains("get_havePropertiesChanged"))
{
HookedList.Add("get_havePropertiesChanged");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_havePropertiesChanged", true), get_havePropertiesChanged);

}
}
internal static event Delegates.get_havePropertiesChanged_BeforeArgs _beforeget_havePropertiesChanged;
internal static event Delegates.get_havePropertiesChanged_AfterArgs _afterget_havePropertiesChanged;
private static bool get_havePropertiesChanged(Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_havePropertiesChanged @params = new() 
{
self = self
};
if (_beforeget_havePropertiesChanged != null)
{
foreach (Delegates.get_havePropertiesChanged_BeforeArgs toInvoke in _beforeget_havePropertiesChanged.GetInvocationList())
{
try
{
_beforeget_havePropertiesChanged?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_havePropertiesChanged != null)
{
foreach (Delegates.get_havePropertiesChanged_AfterArgs toInvoke in _afterget_havePropertiesChanged.GetInvocationList())
{
try
{
retVal = _afterget_havePropertiesChanged.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_havePropertiesChanged()
{
if (!HookedList.Contains("set_havePropertiesChanged"))
{
HookedList.Add("set_havePropertiesChanged");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_havePropertiesChanged", true), set_havePropertiesChanged);

}
}
internal static event Delegates.set_havePropertiesChanged_BeforeArgs _beforeset_havePropertiesChanged;
internal static event Delegates.set_havePropertiesChanged_AfterArgs _afterset_havePropertiesChanged;
private static void set_havePropertiesChanged(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value)
{
Delegates.Params_set_havePropertiesChanged @params = new() 
{
self = self
, value = value
};
if (_beforeset_havePropertiesChanged != null)
{
foreach (Delegates.set_havePropertiesChanged_BeforeArgs toInvoke in _beforeset_havePropertiesChanged.GetInvocationList())
{
try
{
_beforeset_havePropertiesChanged?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_havePropertiesChanged != null)
{
foreach (Delegates.set_havePropertiesChanged_AfterArgs toInvoke in _afterset_havePropertiesChanged.GetInvocationList())
{
try
{
_afterset_havePropertiesChanged.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_isUsingLegacyAnimationComponent()
{
if (!HookedList.Contains("get_isUsingLegacyAnimationComponent"))
{
HookedList.Add("get_isUsingLegacyAnimationComponent");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_isUsingLegacyAnimationComponent", true), get_isUsingLegacyAnimationComponent);

}
}
internal static event Delegates.get_isUsingLegacyAnimationComponent_BeforeArgs _beforeget_isUsingLegacyAnimationComponent;
internal static event Delegates.get_isUsingLegacyAnimationComponent_AfterArgs _afterget_isUsingLegacyAnimationComponent;
private static bool get_isUsingLegacyAnimationComponent(Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_isUsingLegacyAnimationComponent @params = new() 
{
self = self
};
if (_beforeget_isUsingLegacyAnimationComponent != null)
{
foreach (Delegates.get_isUsingLegacyAnimationComponent_BeforeArgs toInvoke in _beforeget_isUsingLegacyAnimationComponent.GetInvocationList())
{
try
{
_beforeget_isUsingLegacyAnimationComponent?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_isUsingLegacyAnimationComponent != null)
{
foreach (Delegates.get_isUsingLegacyAnimationComponent_AfterArgs toInvoke in _afterget_isUsingLegacyAnimationComponent.GetInvocationList())
{
try
{
retVal = _afterget_isUsingLegacyAnimationComponent.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_isUsingLegacyAnimationComponent()
{
if (!HookedList.Contains("set_isUsingLegacyAnimationComponent"))
{
HookedList.Add("set_isUsingLegacyAnimationComponent");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_isUsingLegacyAnimationComponent", true), set_isUsingLegacyAnimationComponent);

}
}
internal static event Delegates.set_isUsingLegacyAnimationComponent_BeforeArgs _beforeset_isUsingLegacyAnimationComponent;
internal static event Delegates.set_isUsingLegacyAnimationComponent_AfterArgs _afterset_isUsingLegacyAnimationComponent;
private static void set_isUsingLegacyAnimationComponent(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value)
{
Delegates.Params_set_isUsingLegacyAnimationComponent @params = new() 
{
self = self
, value = value
};
if (_beforeset_isUsingLegacyAnimationComponent != null)
{
foreach (Delegates.set_isUsingLegacyAnimationComponent_BeforeArgs toInvoke in _beforeset_isUsingLegacyAnimationComponent.GetInvocationList())
{
try
{
_beforeset_isUsingLegacyAnimationComponent?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_isUsingLegacyAnimationComponent != null)
{
foreach (Delegates.set_isUsingLegacyAnimationComponent_AfterArgs toInvoke in _afterset_isUsingLegacyAnimationComponent.GetInvocationList())
{
try
{
_afterset_isUsingLegacyAnimationComponent.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_transform()
{
if (!HookedList.Contains("get_transform"))
{
HookedList.Add("get_transform");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_transform", true), get_transform);

}
}
internal static event Delegates.get_transform_BeforeArgs _beforeget_transform;
internal static event Delegates.get_transform_AfterArgs _afterget_transform;
private static UnityEngine.Transform get_transform(Func<TMPro.TMP_Text, UnityEngine.Transform> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_transform @params = new() 
{
self = self
};
if (_beforeget_transform != null)
{
foreach (Delegates.get_transform_BeforeArgs toInvoke in _beforeget_transform.GetInvocationList())
{
try
{
_beforeget_transform?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_transform != null)
{
foreach (Delegates.get_transform_AfterArgs toInvoke in _afterget_transform.GetInvocationList())
{
try
{
retVal = _afterget_transform.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_rectTransform()
{
if (!HookedList.Contains("get_rectTransform"))
{
HookedList.Add("get_rectTransform");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_rectTransform", true), get_rectTransform);

}
}
internal static event Delegates.get_rectTransform_BeforeArgs _beforeget_rectTransform;
internal static event Delegates.get_rectTransform_AfterArgs _afterget_rectTransform;
private static UnityEngine.RectTransform get_rectTransform(Func<TMPro.TMP_Text, UnityEngine.RectTransform> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_rectTransform @params = new() 
{
self = self
};
if (_beforeget_rectTransform != null)
{
foreach (Delegates.get_rectTransform_BeforeArgs toInvoke in _beforeget_rectTransform.GetInvocationList())
{
try
{
_beforeget_rectTransform?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_rectTransform != null)
{
foreach (Delegates.get_rectTransform_AfterArgs toInvoke in _afterget_rectTransform.GetInvocationList())
{
try
{
retVal = _afterget_rectTransform.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_autoSizeTextContainer()
{
if (!HookedList.Contains("get_autoSizeTextContainer"))
{
HookedList.Add("get_autoSizeTextContainer");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_autoSizeTextContainer", true), get_autoSizeTextContainer);

}
}
internal static event Delegates.get_autoSizeTextContainer_BeforeArgs _beforeget_autoSizeTextContainer;
internal static event Delegates.get_autoSizeTextContainer_AfterArgs _afterget_autoSizeTextContainer;
private static bool get_autoSizeTextContainer(Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_autoSizeTextContainer @params = new() 
{
self = self
};
if (_beforeget_autoSizeTextContainer != null)
{
foreach (Delegates.get_autoSizeTextContainer_BeforeArgs toInvoke in _beforeget_autoSizeTextContainer.GetInvocationList())
{
try
{
_beforeget_autoSizeTextContainer?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_autoSizeTextContainer != null)
{
foreach (Delegates.get_autoSizeTextContainer_AfterArgs toInvoke in _afterget_autoSizeTextContainer.GetInvocationList())
{
try
{
retVal = _afterget_autoSizeTextContainer.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_autoSizeTextContainer()
{
if (!HookedList.Contains("set_autoSizeTextContainer"))
{
HookedList.Add("set_autoSizeTextContainer");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_autoSizeTextContainer", true), set_autoSizeTextContainer);

}
}
internal static event Delegates.set_autoSizeTextContainer_BeforeArgs _beforeset_autoSizeTextContainer;
internal static event Delegates.set_autoSizeTextContainer_AfterArgs _afterset_autoSizeTextContainer;
private static void set_autoSizeTextContainer(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value)
{
Delegates.Params_set_autoSizeTextContainer @params = new() 
{
self = self
, value = value
};
if (_beforeset_autoSizeTextContainer != null)
{
foreach (Delegates.set_autoSizeTextContainer_BeforeArgs toInvoke in _beforeset_autoSizeTextContainer.GetInvocationList())
{
try
{
_beforeset_autoSizeTextContainer?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_autoSizeTextContainer != null)
{
foreach (Delegates.set_autoSizeTextContainer_AfterArgs toInvoke in _afterset_autoSizeTextContainer.GetInvocationList())
{
try
{
_afterset_autoSizeTextContainer.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_mesh()
{
if (!HookedList.Contains("get_mesh"))
{
HookedList.Add("get_mesh");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_mesh", true), get_mesh);

}
}
internal static event Delegates.get_mesh_BeforeArgs _beforeget_mesh;
internal static event Delegates.get_mesh_AfterArgs _afterget_mesh;
private static UnityEngine.Mesh get_mesh(Func<TMPro.TMP_Text, UnityEngine.Mesh> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_mesh @params = new() 
{
self = self
};
if (_beforeget_mesh != null)
{
foreach (Delegates.get_mesh_BeforeArgs toInvoke in _beforeget_mesh.GetInvocationList())
{
try
{
_beforeget_mesh?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_mesh != null)
{
foreach (Delegates.get_mesh_AfterArgs toInvoke in _afterget_mesh.GetInvocationList())
{
try
{
retVal = _afterget_mesh.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_isVolumetricText()
{
if (!HookedList.Contains("get_isVolumetricText"))
{
HookedList.Add("get_isVolumetricText");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_isVolumetricText", true), get_isVolumetricText);

}
}
internal static event Delegates.get_isVolumetricText_BeforeArgs _beforeget_isVolumetricText;
internal static event Delegates.get_isVolumetricText_AfterArgs _afterget_isVolumetricText;
private static bool get_isVolumetricText(Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_isVolumetricText @params = new() 
{
self = self
};
if (_beforeget_isVolumetricText != null)
{
foreach (Delegates.get_isVolumetricText_BeforeArgs toInvoke in _beforeget_isVolumetricText.GetInvocationList())
{
try
{
_beforeget_isVolumetricText?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_isVolumetricText != null)
{
foreach (Delegates.get_isVolumetricText_AfterArgs toInvoke in _afterget_isVolumetricText.GetInvocationList())
{
try
{
retVal = _afterget_isVolumetricText.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_isVolumetricText()
{
if (!HookedList.Contains("set_isVolumetricText"))
{
HookedList.Add("set_isVolumetricText");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_isVolumetricText", true), set_isVolumetricText);

}
}
internal static event Delegates.set_isVolumetricText_BeforeArgs _beforeset_isVolumetricText;
internal static event Delegates.set_isVolumetricText_AfterArgs _afterset_isVolumetricText;
private static void set_isVolumetricText(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value)
{
Delegates.Params_set_isVolumetricText @params = new() 
{
self = self
, value = value
};
if (_beforeset_isVolumetricText != null)
{
foreach (Delegates.set_isVolumetricText_BeforeArgs toInvoke in _beforeset_isVolumetricText.GetInvocationList())
{
try
{
_beforeset_isVolumetricText?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_isVolumetricText != null)
{
foreach (Delegates.set_isVolumetricText_AfterArgs toInvoke in _afterset_isVolumetricText.GetInvocationList())
{
try
{
_afterset_isVolumetricText.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_bounds()
{
if (!HookedList.Contains("get_bounds"))
{
HookedList.Add("get_bounds");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_bounds", true), get_bounds);

}
}
internal static event Delegates.get_bounds_BeforeArgs _beforeget_bounds;
internal static event Delegates.get_bounds_AfterArgs _afterget_bounds;
private static UnityEngine.Bounds get_bounds(Func<TMPro.TMP_Text, UnityEngine.Bounds> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_bounds @params = new() 
{
self = self
};
if (_beforeget_bounds != null)
{
foreach (Delegates.get_bounds_BeforeArgs toInvoke in _beforeget_bounds.GetInvocationList())
{
try
{
_beforeget_bounds?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_bounds != null)
{
foreach (Delegates.get_bounds_AfterArgs toInvoke in _afterget_bounds.GetInvocationList())
{
try
{
retVal = _afterget_bounds.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_textBounds()
{
if (!HookedList.Contains("get_textBounds"))
{
HookedList.Add("get_textBounds");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_textBounds", true), get_textBounds);

}
}
internal static event Delegates.get_textBounds_BeforeArgs _beforeget_textBounds;
internal static event Delegates.get_textBounds_AfterArgs _afterget_textBounds;
private static UnityEngine.Bounds get_textBounds(Func<TMPro.TMP_Text, UnityEngine.Bounds> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_textBounds @params = new() 
{
self = self
};
if (_beforeget_textBounds != null)
{
foreach (Delegates.get_textBounds_BeforeArgs toInvoke in _beforeget_textBounds.GetInvocationList())
{
try
{
_beforeget_textBounds?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_textBounds != null)
{
foreach (Delegates.get_textBounds_AfterArgs toInvoke in _afterget_textBounds.GetInvocationList())
{
try
{
retVal = _afterget_textBounds.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_flexibleHeight()
{
if (!HookedList.Contains("get_flexibleHeight"))
{
HookedList.Add("get_flexibleHeight");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_flexibleHeight", true), get_flexibleHeight);

}
}
internal static event Delegates.get_flexibleHeight_BeforeArgs _beforeget_flexibleHeight;
internal static event Delegates.get_flexibleHeight_AfterArgs _afterget_flexibleHeight;
private static float get_flexibleHeight(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_flexibleHeight @params = new() 
{
self = self
};
if (_beforeget_flexibleHeight != null)
{
foreach (Delegates.get_flexibleHeight_BeforeArgs toInvoke in _beforeget_flexibleHeight.GetInvocationList())
{
try
{
_beforeget_flexibleHeight?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_flexibleHeight != null)
{
foreach (Delegates.get_flexibleHeight_AfterArgs toInvoke in _afterget_flexibleHeight.GetInvocationList())
{
try
{
retVal = _afterget_flexibleHeight.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_flexibleWidth()
{
if (!HookedList.Contains("get_flexibleWidth"))
{
HookedList.Add("get_flexibleWidth");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_flexibleWidth", true), get_flexibleWidth);

}
}
internal static event Delegates.get_flexibleWidth_BeforeArgs _beforeget_flexibleWidth;
internal static event Delegates.get_flexibleWidth_AfterArgs _afterget_flexibleWidth;
private static float get_flexibleWidth(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_flexibleWidth @params = new() 
{
self = self
};
if (_beforeget_flexibleWidth != null)
{
foreach (Delegates.get_flexibleWidth_BeforeArgs toInvoke in _beforeget_flexibleWidth.GetInvocationList())
{
try
{
_beforeget_flexibleWidth?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_flexibleWidth != null)
{
foreach (Delegates.get_flexibleWidth_AfterArgs toInvoke in _afterget_flexibleWidth.GetInvocationList())
{
try
{
retVal = _afterget_flexibleWidth.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_minHeight()
{
if (!HookedList.Contains("get_minHeight"))
{
HookedList.Add("get_minHeight");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_minHeight", true), get_minHeight);

}
}
internal static event Delegates.get_minHeight_BeforeArgs _beforeget_minHeight;
internal static event Delegates.get_minHeight_AfterArgs _afterget_minHeight;
private static float get_minHeight(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_minHeight @params = new() 
{
self = self
};
if (_beforeget_minHeight != null)
{
foreach (Delegates.get_minHeight_BeforeArgs toInvoke in _beforeget_minHeight.GetInvocationList())
{
try
{
_beforeget_minHeight?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_minHeight != null)
{
foreach (Delegates.get_minHeight_AfterArgs toInvoke in _afterget_minHeight.GetInvocationList())
{
try
{
retVal = _afterget_minHeight.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_minWidth()
{
if (!HookedList.Contains("get_minWidth"))
{
HookedList.Add("get_minWidth");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_minWidth", true), get_minWidth);

}
}
internal static event Delegates.get_minWidth_BeforeArgs _beforeget_minWidth;
internal static event Delegates.get_minWidth_AfterArgs _afterget_minWidth;
private static float get_minWidth(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_minWidth @params = new() 
{
self = self
};
if (_beforeget_minWidth != null)
{
foreach (Delegates.get_minWidth_BeforeArgs toInvoke in _beforeget_minWidth.GetInvocationList())
{
try
{
_beforeget_minWidth?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_minWidth != null)
{
foreach (Delegates.get_minWidth_AfterArgs toInvoke in _afterget_minWidth.GetInvocationList())
{
try
{
retVal = _afterget_minWidth.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_preferredWidth()
{
if (!HookedList.Contains("get_preferredWidth"))
{
HookedList.Add("get_preferredWidth");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_preferredWidth", true), get_preferredWidth);

}
}
internal static event Delegates.get_preferredWidth_BeforeArgs _beforeget_preferredWidth;
internal static event Delegates.get_preferredWidth_AfterArgs _afterget_preferredWidth;
private static float get_preferredWidth(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_preferredWidth @params = new() 
{
self = self
};
if (_beforeget_preferredWidth != null)
{
foreach (Delegates.get_preferredWidth_BeforeArgs toInvoke in _beforeget_preferredWidth.GetInvocationList())
{
try
{
_beforeget_preferredWidth?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_preferredWidth != null)
{
foreach (Delegates.get_preferredWidth_AfterArgs toInvoke in _afterget_preferredWidth.GetInvocationList())
{
try
{
retVal = _afterget_preferredWidth.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_preferredHeight()
{
if (!HookedList.Contains("get_preferredHeight"))
{
HookedList.Add("get_preferredHeight");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_preferredHeight", true), get_preferredHeight);

}
}
internal static event Delegates.get_preferredHeight_BeforeArgs _beforeget_preferredHeight;
internal static event Delegates.get_preferredHeight_AfterArgs _afterget_preferredHeight;
private static float get_preferredHeight(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_preferredHeight @params = new() 
{
self = self
};
if (_beforeget_preferredHeight != null)
{
foreach (Delegates.get_preferredHeight_BeforeArgs toInvoke in _beforeget_preferredHeight.GetInvocationList())
{
try
{
_beforeget_preferredHeight?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_preferredHeight != null)
{
foreach (Delegates.get_preferredHeight_AfterArgs toInvoke in _afterget_preferredHeight.GetInvocationList())
{
try
{
retVal = _afterget_preferredHeight.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_renderedWidth()
{
if (!HookedList.Contains("get_renderedWidth"))
{
HookedList.Add("get_renderedWidth");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_renderedWidth", true), get_renderedWidth);

}
}
internal static event Delegates.get_renderedWidth_BeforeArgs _beforeget_renderedWidth;
internal static event Delegates.get_renderedWidth_AfterArgs _afterget_renderedWidth;
private static float get_renderedWidth(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_renderedWidth @params = new() 
{
self = self
};
if (_beforeget_renderedWidth != null)
{
foreach (Delegates.get_renderedWidth_BeforeArgs toInvoke in _beforeget_renderedWidth.GetInvocationList())
{
try
{
_beforeget_renderedWidth?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_renderedWidth != null)
{
foreach (Delegates.get_renderedWidth_AfterArgs toInvoke in _afterget_renderedWidth.GetInvocationList())
{
try
{
retVal = _afterget_renderedWidth.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_renderedHeight()
{
if (!HookedList.Contains("get_renderedHeight"))
{
HookedList.Add("get_renderedHeight");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_renderedHeight", true), get_renderedHeight);

}
}
internal static event Delegates.get_renderedHeight_BeforeArgs _beforeget_renderedHeight;
internal static event Delegates.get_renderedHeight_AfterArgs _afterget_renderedHeight;
private static float get_renderedHeight(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_renderedHeight @params = new() 
{
self = self
};
if (_beforeget_renderedHeight != null)
{
foreach (Delegates.get_renderedHeight_BeforeArgs toInvoke in _beforeget_renderedHeight.GetInvocationList())
{
try
{
_beforeget_renderedHeight?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_renderedHeight != null)
{
foreach (Delegates.get_renderedHeight_AfterArgs toInvoke in _afterget_renderedHeight.GetInvocationList())
{
try
{
retVal = _afterget_renderedHeight.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_layoutPriority()
{
if (!HookedList.Contains("get_layoutPriority"))
{
HookedList.Add("get_layoutPriority");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_layoutPriority", true), get_layoutPriority);

}
}
internal static event Delegates.get_layoutPriority_BeforeArgs _beforeget_layoutPriority;
internal static event Delegates.get_layoutPriority_AfterArgs _afterget_layoutPriority;
private static int get_layoutPriority(Func<TMPro.TMP_Text, int> orig, TMPro.TMP_Text self)
{
Delegates.Params_get_layoutPriority @params = new() 
{
self = self
};
if (_beforeget_layoutPriority != null)
{
foreach (Delegates.get_layoutPriority_BeforeArgs toInvoke in _beforeget_layoutPriority.GetInvocationList())
{
try
{
_beforeget_layoutPriority?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_layoutPriority != null)
{
foreach (Delegates.get_layoutPriority_AfterArgs toInvoke in _afterget_layoutPriority.GetInvocationList())
{
try
{
retVal = _afterget_layoutPriority.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookLoadFontAsset()
{
if (!HookedList.Contains("LoadFontAsset"))
{
HookedList.Add("LoadFontAsset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "LoadFontAsset", true), LoadFontAsset);

}
}
internal static event Delegates.LoadFontAsset_BeforeArgs _beforeLoadFontAsset;
internal static event Delegates.LoadFontAsset_AfterArgs _afterLoadFontAsset;
private static void LoadFontAsset(Action<TMPro.TMP_Text> orig, TMPro.TMP_Text self)
{
Delegates.Params_LoadFontAsset @params = new() 
{
self = self
};
if (_beforeLoadFontAsset != null)
{
foreach (Delegates.LoadFontAsset_BeforeArgs toInvoke in _beforeLoadFontAsset.GetInvocationList())
{
try
{
_beforeLoadFontAsset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterLoadFontAsset != null)
{
foreach (Delegates.LoadFontAsset_AfterArgs toInvoke in _afterLoadFontAsset.GetInvocationList())
{
try
{
_afterLoadFontAsset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetSharedMaterial()
{
if (!HookedList.Contains("SetSharedMaterial"))
{
HookedList.Add("SetSharedMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetSharedMaterial", true), SetSharedMaterial);

}
}
internal static event Delegates.SetSharedMaterial_BeforeArgs _beforeSetSharedMaterial;
internal static event Delegates.SetSharedMaterial_AfterArgs _afterSetSharedMaterial;
private static void SetSharedMaterial(Action<TMPro.TMP_Text,  UnityEngine.Material> orig, TMPro.TMP_Text self,  UnityEngine.Material mat)
{
Delegates.Params_SetSharedMaterial @params = new() 
{
self = self
, mat = mat
};
if (_beforeSetSharedMaterial != null)
{
foreach (Delegates.SetSharedMaterial_BeforeArgs toInvoke in _beforeSetSharedMaterial.GetInvocationList())
{
try
{
_beforeSetSharedMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
mat = @params.mat;
orig(self, mat);
if (_afterSetSharedMaterial != null)
{
foreach (Delegates.SetSharedMaterial_AfterArgs toInvoke in _afterSetSharedMaterial.GetInvocationList())
{
try
{
_afterSetSharedMaterial.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetMaterial()
{
if (!HookedList.Contains("GetMaterial"))
{
HookedList.Add("GetMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetMaterial", true), GetMaterial);

}
}
internal static event Delegates.GetMaterial_BeforeArgs _beforeGetMaterial;
internal static event Delegates.GetMaterial_AfterArgs _afterGetMaterial;
private static UnityEngine.Material GetMaterial(Func<TMPro.TMP_Text,  UnityEngine.Material, UnityEngine.Material> orig, TMPro.TMP_Text self,  UnityEngine.Material mat)
{
Delegates.Params_GetMaterial @params = new() 
{
self = self
, mat = mat
};
if (_beforeGetMaterial != null)
{
foreach (Delegates.GetMaterial_BeforeArgs toInvoke in _beforeGetMaterial.GetInvocationList())
{
try
{
_beforeGetMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
mat = @params.mat;
var retVal = orig(self, mat);
if (_afterGetMaterial != null)
{
foreach (Delegates.GetMaterial_AfterArgs toInvoke in _afterGetMaterial.GetInvocationList())
{
try
{
retVal = _afterGetMaterial.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookSetFontBaseMaterial()
{
if (!HookedList.Contains("SetFontBaseMaterial"))
{
HookedList.Add("SetFontBaseMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetFontBaseMaterial", true), SetFontBaseMaterial);

}
}
internal static event Delegates.SetFontBaseMaterial_BeforeArgs _beforeSetFontBaseMaterial;
internal static event Delegates.SetFontBaseMaterial_AfterArgs _afterSetFontBaseMaterial;
private static void SetFontBaseMaterial(Action<TMPro.TMP_Text,  UnityEngine.Material> orig, TMPro.TMP_Text self,  UnityEngine.Material mat)
{
Delegates.Params_SetFontBaseMaterial @params = new() 
{
self = self
, mat = mat
};
if (_beforeSetFontBaseMaterial != null)
{
foreach (Delegates.SetFontBaseMaterial_BeforeArgs toInvoke in _beforeSetFontBaseMaterial.GetInvocationList())
{
try
{
_beforeSetFontBaseMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
mat = @params.mat;
orig(self, mat);
if (_afterSetFontBaseMaterial != null)
{
foreach (Delegates.SetFontBaseMaterial_AfterArgs toInvoke in _afterSetFontBaseMaterial.GetInvocationList())
{
try
{
_afterSetFontBaseMaterial.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetSharedMaterials()
{
if (!HookedList.Contains("GetSharedMaterials"))
{
HookedList.Add("GetSharedMaterials");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetSharedMaterials", true), GetSharedMaterials);

}
}
internal static event Delegates.GetSharedMaterials_BeforeArgs _beforeGetSharedMaterials;
internal static event Delegates.GetSharedMaterials_AfterArgs _afterGetSharedMaterials;
private static UnityEngine.Material[] GetSharedMaterials(Func<TMPro.TMP_Text, UnityEngine.Material[]> orig, TMPro.TMP_Text self)
{
Delegates.Params_GetSharedMaterials @params = new() 
{
self = self
};
if (_beforeGetSharedMaterials != null)
{
foreach (Delegates.GetSharedMaterials_BeforeArgs toInvoke in _beforeGetSharedMaterials.GetInvocationList())
{
try
{
_beforeGetSharedMaterials?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetSharedMaterials != null)
{
foreach (Delegates.GetSharedMaterials_AfterArgs toInvoke in _afterGetSharedMaterials.GetInvocationList())
{
try
{
retVal = _afterGetSharedMaterials.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookSetSharedMaterials()
{
if (!HookedList.Contains("SetSharedMaterials"))
{
HookedList.Add("SetSharedMaterials");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetSharedMaterials", true), SetSharedMaterials);

}
}
internal static event Delegates.SetSharedMaterials_BeforeArgs _beforeSetSharedMaterials;
internal static event Delegates.SetSharedMaterials_AfterArgs _afterSetSharedMaterials;
private static void SetSharedMaterials(Action<TMPro.TMP_Text,  UnityEngine.Material[]> orig, TMPro.TMP_Text self,  UnityEngine.Material[] materials)
{
Delegates.Params_SetSharedMaterials @params = new() 
{
self = self
, materials = materials
};
if (_beforeSetSharedMaterials != null)
{
foreach (Delegates.SetSharedMaterials_BeforeArgs toInvoke in _beforeSetSharedMaterials.GetInvocationList())
{
try
{
_beforeSetSharedMaterials?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
materials = @params.materials;
orig(self, materials);
if (_afterSetSharedMaterials != null)
{
foreach (Delegates.SetSharedMaterials_AfterArgs toInvoke in _afterSetSharedMaterials.GetInvocationList())
{
try
{
_afterSetSharedMaterials.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetMaterials()
{
if (!HookedList.Contains("GetMaterials"))
{
HookedList.Add("GetMaterials");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetMaterials", true), GetMaterials);

}
}
internal static event Delegates.GetMaterials_BeforeArgs _beforeGetMaterials;
internal static event Delegates.GetMaterials_AfterArgs _afterGetMaterials;
private static UnityEngine.Material[] GetMaterials(Func<TMPro.TMP_Text,  UnityEngine.Material[], UnityEngine.Material[]> orig, TMPro.TMP_Text self,  UnityEngine.Material[] mats)
{
Delegates.Params_GetMaterials @params = new() 
{
self = self
, mats = mats
};
if (_beforeGetMaterials != null)
{
foreach (Delegates.GetMaterials_BeforeArgs toInvoke in _beforeGetMaterials.GetInvocationList())
{
try
{
_beforeGetMaterials?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
mats = @params.mats;
var retVal = orig(self, mats);
if (_afterGetMaterials != null)
{
foreach (Delegates.GetMaterials_AfterArgs toInvoke in _afterGetMaterials.GetInvocationList())
{
try
{
retVal = _afterGetMaterials.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookCreateMaterialInstance()
{
if (!HookedList.Contains("CreateMaterialInstance"))
{
HookedList.Add("CreateMaterialInstance");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "CreateMaterialInstance", true), CreateMaterialInstance);

}
}
internal static event Delegates.CreateMaterialInstance_BeforeArgs _beforeCreateMaterialInstance;
internal static event Delegates.CreateMaterialInstance_AfterArgs _afterCreateMaterialInstance;
private static UnityEngine.Material CreateMaterialInstance(Func<TMPro.TMP_Text,  UnityEngine.Material, UnityEngine.Material> orig, TMPro.TMP_Text self,  UnityEngine.Material source)
{
Delegates.Params_CreateMaterialInstance @params = new() 
{
self = self
, source = source
};
if (_beforeCreateMaterialInstance != null)
{
foreach (Delegates.CreateMaterialInstance_BeforeArgs toInvoke in _beforeCreateMaterialInstance.GetInvocationList())
{
try
{
_beforeCreateMaterialInstance?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
source = @params.source;
var retVal = orig(self, source);
if (_afterCreateMaterialInstance != null)
{
foreach (Delegates.CreateMaterialInstance_AfterArgs toInvoke in _afterCreateMaterialInstance.GetInvocationList())
{
try
{
retVal = _afterCreateMaterialInstance.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookSetVertexColorGradient()
{
if (!HookedList.Contains("SetVertexColorGradient"))
{
HookedList.Add("SetVertexColorGradient");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetVertexColorGradient", true), SetVertexColorGradient);

}
}
internal static event Delegates.SetVertexColorGradient_BeforeArgs _beforeSetVertexColorGradient;
internal static event Delegates.SetVertexColorGradient_AfterArgs _afterSetVertexColorGradient;
private static void SetVertexColorGradient(Action<TMPro.TMP_Text,  TMPro.TMP_ColorGradient> orig, TMPro.TMP_Text self,  TMPro.TMP_ColorGradient gradient)
{
Delegates.Params_SetVertexColorGradient @params = new() 
{
self = self
, gradient = gradient
};
if (_beforeSetVertexColorGradient != null)
{
foreach (Delegates.SetVertexColorGradient_BeforeArgs toInvoke in _beforeSetVertexColorGradient.GetInvocationList())
{
try
{
_beforeSetVertexColorGradient?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
gradient = @params.gradient;
orig(self, gradient);
if (_afterSetVertexColorGradient != null)
{
foreach (Delegates.SetVertexColorGradient_AfterArgs toInvoke in _afterSetVertexColorGradient.GetInvocationList())
{
try
{
_afterSetVertexColorGradient.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetFaceColor()
{
if (!HookedList.Contains("SetFaceColor"))
{
HookedList.Add("SetFaceColor");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetFaceColor", true), SetFaceColor);

}
}
internal static event Delegates.SetFaceColor_BeforeArgs _beforeSetFaceColor;
internal static event Delegates.SetFaceColor_AfterArgs _afterSetFaceColor;
private static void SetFaceColor(Action<TMPro.TMP_Text,  UnityEngine.Color32> orig, TMPro.TMP_Text self,  UnityEngine.Color32 color)
{
Delegates.Params_SetFaceColor @params = new() 
{
self = self
, color = color
};
if (_beforeSetFaceColor != null)
{
foreach (Delegates.SetFaceColor_BeforeArgs toInvoke in _beforeSetFaceColor.GetInvocationList())
{
try
{
_beforeSetFaceColor?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
color = @params.color;
orig(self, color);
if (_afterSetFaceColor != null)
{
foreach (Delegates.SetFaceColor_AfterArgs toInvoke in _afterSetFaceColor.GetInvocationList())
{
try
{
_afterSetFaceColor.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetOutlineColor()
{
if (!HookedList.Contains("SetOutlineColor"))
{
HookedList.Add("SetOutlineColor");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetOutlineColor", true), SetOutlineColor);

}
}
internal static event Delegates.SetOutlineColor_BeforeArgs _beforeSetOutlineColor;
internal static event Delegates.SetOutlineColor_AfterArgs _afterSetOutlineColor;
private static void SetOutlineColor(Action<TMPro.TMP_Text,  UnityEngine.Color32> orig, TMPro.TMP_Text self,  UnityEngine.Color32 color)
{
Delegates.Params_SetOutlineColor @params = new() 
{
self = self
, color = color
};
if (_beforeSetOutlineColor != null)
{
foreach (Delegates.SetOutlineColor_BeforeArgs toInvoke in _beforeSetOutlineColor.GetInvocationList())
{
try
{
_beforeSetOutlineColor?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
color = @params.color;
orig(self, color);
if (_afterSetOutlineColor != null)
{
foreach (Delegates.SetOutlineColor_AfterArgs toInvoke in _afterSetOutlineColor.GetInvocationList())
{
try
{
_afterSetOutlineColor.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetOutlineThickness()
{
if (!HookedList.Contains("SetOutlineThickness"))
{
HookedList.Add("SetOutlineThickness");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetOutlineThickness", true), SetOutlineThickness);

}
}
internal static event Delegates.SetOutlineThickness_BeforeArgs _beforeSetOutlineThickness;
internal static event Delegates.SetOutlineThickness_AfterArgs _afterSetOutlineThickness;
private static void SetOutlineThickness(Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float thickness)
{
Delegates.Params_SetOutlineThickness @params = new() 
{
self = self
, thickness = thickness
};
if (_beforeSetOutlineThickness != null)
{
foreach (Delegates.SetOutlineThickness_BeforeArgs toInvoke in _beforeSetOutlineThickness.GetInvocationList())
{
try
{
_beforeSetOutlineThickness?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
thickness = @params.thickness;
orig(self, thickness);
if (_afterSetOutlineThickness != null)
{
foreach (Delegates.SetOutlineThickness_AfterArgs toInvoke in _afterSetOutlineThickness.GetInvocationList())
{
try
{
_afterSetOutlineThickness.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetShaderDepth()
{
if (!HookedList.Contains("SetShaderDepth"))
{
HookedList.Add("SetShaderDepth");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetShaderDepth", true), SetShaderDepth);

}
}
internal static event Delegates.SetShaderDepth_BeforeArgs _beforeSetShaderDepth;
internal static event Delegates.SetShaderDepth_AfterArgs _afterSetShaderDepth;
private static void SetShaderDepth(Action<TMPro.TMP_Text> orig, TMPro.TMP_Text self)
{
Delegates.Params_SetShaderDepth @params = new() 
{
self = self
};
if (_beforeSetShaderDepth != null)
{
foreach (Delegates.SetShaderDepth_BeforeArgs toInvoke in _beforeSetShaderDepth.GetInvocationList())
{
try
{
_beforeSetShaderDepth?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetShaderDepth != null)
{
foreach (Delegates.SetShaderDepth_AfterArgs toInvoke in _afterSetShaderDepth.GetInvocationList())
{
try
{
_afterSetShaderDepth.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetCulling()
{
if (!HookedList.Contains("SetCulling"))
{
HookedList.Add("SetCulling");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetCulling", true), SetCulling);

}
}
internal static event Delegates.SetCulling_BeforeArgs _beforeSetCulling;
internal static event Delegates.SetCulling_AfterArgs _afterSetCulling;
private static void SetCulling(Action<TMPro.TMP_Text> orig, TMPro.TMP_Text self)
{
Delegates.Params_SetCulling @params = new() 
{
self = self
};
if (_beforeSetCulling != null)
{
foreach (Delegates.SetCulling_BeforeArgs toInvoke in _beforeSetCulling.GetInvocationList())
{
try
{
_beforeSetCulling?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetCulling != null)
{
foreach (Delegates.SetCulling_AfterArgs toInvoke in _afterSetCulling.GetInvocationList())
{
try
{
_afterSetCulling.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetPaddingForMaterial()
{
if (!HookedList.Contains("GetPaddingForMaterial"))
{
HookedList.Add("GetPaddingForMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPaddingForMaterial", true), GetPaddingForMaterial);

}
}
internal static event Delegates.GetPaddingForMaterial_BeforeArgs _beforeGetPaddingForMaterial;
internal static event Delegates.GetPaddingForMaterial_AfterArgs _afterGetPaddingForMaterial;
private static float GetPaddingForMaterial(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_GetPaddingForMaterial @params = new() 
{
self = self
};
if (_beforeGetPaddingForMaterial != null)
{
foreach (Delegates.GetPaddingForMaterial_BeforeArgs toInvoke in _beforeGetPaddingForMaterial.GetInvocationList())
{
try
{
_beforeGetPaddingForMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetPaddingForMaterial != null)
{
foreach (Delegates.GetPaddingForMaterial_AfterArgs toInvoke in _afterGetPaddingForMaterial.GetInvocationList())
{
try
{
retVal = _afterGetPaddingForMaterial.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetPaddingForMaterial_Material()
{
if (!HookedList.Contains("GetPaddingForMaterial_Material"))
{
HookedList.Add("GetPaddingForMaterial_Material");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPaddingForMaterial_Material", true), GetPaddingForMaterial_Material);

}
}
internal static event Delegates.GetPaddingForMaterial_Material_BeforeArgs _beforeGetPaddingForMaterial_Material;
internal static event Delegates.GetPaddingForMaterial_Material_AfterArgs _afterGetPaddingForMaterial_Material;
private static float GetPaddingForMaterial_Material(Func<TMPro.TMP_Text,  UnityEngine.Material, float> orig, TMPro.TMP_Text self,  UnityEngine.Material mat)
{
Delegates.Params_GetPaddingForMaterial_Material @params = new() 
{
self = self
, mat = mat
};
if (_beforeGetPaddingForMaterial_Material != null)
{
foreach (Delegates.GetPaddingForMaterial_Material_BeforeArgs toInvoke in _beforeGetPaddingForMaterial_Material.GetInvocationList())
{
try
{
_beforeGetPaddingForMaterial_Material?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
mat = @params.mat;
var retVal = orig(self, mat);
if (_afterGetPaddingForMaterial_Material != null)
{
foreach (Delegates.GetPaddingForMaterial_Material_AfterArgs toInvoke in _afterGetPaddingForMaterial_Material.GetInvocationList())
{
try
{
retVal = _afterGetPaddingForMaterial_Material.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetTextContainerLocalCorners()
{
if (!HookedList.Contains("GetTextContainerLocalCorners"))
{
HookedList.Add("GetTextContainerLocalCorners");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetTextContainerLocalCorners", true), GetTextContainerLocalCorners);

}
}
internal static event Delegates.GetTextContainerLocalCorners_BeforeArgs _beforeGetTextContainerLocalCorners;
internal static event Delegates.GetTextContainerLocalCorners_AfterArgs _afterGetTextContainerLocalCorners;
private static UnityEngine.Vector3[] GetTextContainerLocalCorners(Func<TMPro.TMP_Text, UnityEngine.Vector3[]> orig, TMPro.TMP_Text self)
{
Delegates.Params_GetTextContainerLocalCorners @params = new() 
{
self = self
};
if (_beforeGetTextContainerLocalCorners != null)
{
foreach (Delegates.GetTextContainerLocalCorners_BeforeArgs toInvoke in _beforeGetTextContainerLocalCorners.GetInvocationList())
{
try
{
_beforeGetTextContainerLocalCorners?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetTextContainerLocalCorners != null)
{
foreach (Delegates.GetTextContainerLocalCorners_AfterArgs toInvoke in _afterGetTextContainerLocalCorners.GetInvocationList())
{
try
{
retVal = _afterGetTextContainerLocalCorners.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookForceMeshUpdate()
{
if (!HookedList.Contains("ForceMeshUpdate"))
{
HookedList.Add("ForceMeshUpdate");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "ForceMeshUpdate", true), ForceMeshUpdate);

}
}
internal static event Delegates.ForceMeshUpdate_BeforeArgs _beforeForceMeshUpdate;
internal static event Delegates.ForceMeshUpdate_AfterArgs _afterForceMeshUpdate;
private static void ForceMeshUpdate(Action<TMPro.TMP_Text> orig, TMPro.TMP_Text self)
{
Delegates.Params_ForceMeshUpdate @params = new() 
{
self = self
};
if (_beforeForceMeshUpdate != null)
{
foreach (Delegates.ForceMeshUpdate_BeforeArgs toInvoke in _beforeForceMeshUpdate.GetInvocationList())
{
try
{
_beforeForceMeshUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterForceMeshUpdate != null)
{
foreach (Delegates.ForceMeshUpdate_AfterArgs toInvoke in _afterForceMeshUpdate.GetInvocationList())
{
try
{
_afterForceMeshUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookForceMeshUpdate_bool()
{
if (!HookedList.Contains("ForceMeshUpdate_bool"))
{
HookedList.Add("ForceMeshUpdate_bool");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "ForceMeshUpdate_bool", true), ForceMeshUpdate_bool);

}
}
internal static event Delegates.ForceMeshUpdate_bool_BeforeArgs _beforeForceMeshUpdate_bool;
internal static event Delegates.ForceMeshUpdate_bool_AfterArgs _afterForceMeshUpdate_bool;
private static void ForceMeshUpdate_bool(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool ignoreActiveState)
{
Delegates.Params_ForceMeshUpdate_bool @params = new() 
{
self = self
, ignoreActiveState = ignoreActiveState
};
if (_beforeForceMeshUpdate_bool != null)
{
foreach (Delegates.ForceMeshUpdate_bool_BeforeArgs toInvoke in _beforeForceMeshUpdate_bool.GetInvocationList())
{
try
{
_beforeForceMeshUpdate_bool?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
ignoreActiveState = @params.ignoreActiveState;
orig(self, ignoreActiveState);
if (_afterForceMeshUpdate_bool != null)
{
foreach (Delegates.ForceMeshUpdate_bool_AfterArgs toInvoke in _afterForceMeshUpdate_bool.GetInvocationList())
{
try
{
_afterForceMeshUpdate_bool.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetTextInternal()
{
if (!HookedList.Contains("SetTextInternal"))
{
HookedList.Add("SetTextInternal");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetTextInternal", true), SetTextInternal);

}
}
internal static event Delegates.SetTextInternal_BeforeArgs _beforeSetTextInternal;
internal static event Delegates.SetTextInternal_AfterArgs _afterSetTextInternal;
private static void SetTextInternal(Action<TMPro.TMP_Text,  string> orig, TMPro.TMP_Text self,  string text)
{
Delegates.Params_SetTextInternal @params = new() 
{
self = self
, text = text
};
if (_beforeSetTextInternal != null)
{
foreach (Delegates.SetTextInternal_BeforeArgs toInvoke in _beforeSetTextInternal.GetInvocationList())
{
try
{
_beforeSetTextInternal?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
text = @params.text;
orig(self, text);
if (_afterSetTextInternal != null)
{
foreach (Delegates.SetTextInternal_AfterArgs toInvoke in _afterSetTextInternal.GetInvocationList())
{
try
{
_afterSetTextInternal.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateGeometry()
{
if (!HookedList.Contains("UpdateGeometry"))
{
HookedList.Add("UpdateGeometry");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "UpdateGeometry", true), UpdateGeometry);

}
}
internal static event Delegates.UpdateGeometry_BeforeArgs _beforeUpdateGeometry;
internal static event Delegates.UpdateGeometry_AfterArgs _afterUpdateGeometry;
private static void UpdateGeometry(Action<TMPro.TMP_Text,  UnityEngine.Mesh,  int> orig, TMPro.TMP_Text self,  UnityEngine.Mesh mesh,  int index)
{
Delegates.Params_UpdateGeometry @params = new() 
{
self = self
, mesh = mesh
, index = index
};
if (_beforeUpdateGeometry != null)
{
foreach (Delegates.UpdateGeometry_BeforeArgs toInvoke in _beforeUpdateGeometry.GetInvocationList())
{
try
{
_beforeUpdateGeometry?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
mesh = @params.mesh;
index = @params.index;
orig(self, mesh, index);
if (_afterUpdateGeometry != null)
{
foreach (Delegates.UpdateGeometry_AfterArgs toInvoke in _afterUpdateGeometry.GetInvocationList())
{
try
{
_afterUpdateGeometry.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateVertexData_TMP_VertexDataUpdateFlags()
{
if (!HookedList.Contains("UpdateVertexData_TMP_VertexDataUpdateFlags"))
{
HookedList.Add("UpdateVertexData_TMP_VertexDataUpdateFlags");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "UpdateVertexData_TMP_VertexDataUpdateFlags", true), UpdateVertexData_TMP_VertexDataUpdateFlags);

}
}
internal static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_BeforeArgs _beforeUpdateVertexData_TMP_VertexDataUpdateFlags;
internal static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_AfterArgs _afterUpdateVertexData_TMP_VertexDataUpdateFlags;
private static void UpdateVertexData_TMP_VertexDataUpdateFlags(Action<TMPro.TMP_Text,  TMPro.TMP_VertexDataUpdateFlags> orig, TMPro.TMP_Text self,  TMPro.TMP_VertexDataUpdateFlags flags)
{
Delegates.Params_UpdateVertexData_TMP_VertexDataUpdateFlags @params = new() 
{
self = self
, flags = flags
};
if (_beforeUpdateVertexData_TMP_VertexDataUpdateFlags != null)
{
foreach (Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_BeforeArgs toInvoke in _beforeUpdateVertexData_TMP_VertexDataUpdateFlags.GetInvocationList())
{
try
{
_beforeUpdateVertexData_TMP_VertexDataUpdateFlags?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
flags = @params.flags;
orig(self, flags);
if (_afterUpdateVertexData_TMP_VertexDataUpdateFlags != null)
{
foreach (Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_AfterArgs toInvoke in _afterUpdateVertexData_TMP_VertexDataUpdateFlags.GetInvocationList())
{
try
{
_afterUpdateVertexData_TMP_VertexDataUpdateFlags.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateVertexData()
{
if (!HookedList.Contains("UpdateVertexData"))
{
HookedList.Add("UpdateVertexData");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "UpdateVertexData", true), UpdateVertexData);

}
}
internal static event Delegates.UpdateVertexData_BeforeArgs _beforeUpdateVertexData;
internal static event Delegates.UpdateVertexData_AfterArgs _afterUpdateVertexData;
private static void UpdateVertexData(Action<TMPro.TMP_Text> orig, TMPro.TMP_Text self)
{
Delegates.Params_UpdateVertexData @params = new() 
{
self = self
};
if (_beforeUpdateVertexData != null)
{
foreach (Delegates.UpdateVertexData_BeforeArgs toInvoke in _beforeUpdateVertexData.GetInvocationList())
{
try
{
_beforeUpdateVertexData?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateVertexData != null)
{
foreach (Delegates.UpdateVertexData_AfterArgs toInvoke in _afterUpdateVertexData.GetInvocationList())
{
try
{
_afterUpdateVertexData.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetVertices()
{
if (!HookedList.Contains("SetVertices"))
{
HookedList.Add("SetVertices");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetVertices", true), SetVertices);

}
}
internal static event Delegates.SetVertices_BeforeArgs _beforeSetVertices;
internal static event Delegates.SetVertices_AfterArgs _afterSetVertices;
private static void SetVertices(Action<TMPro.TMP_Text,  UnityEngine.Vector3[]> orig, TMPro.TMP_Text self,  UnityEngine.Vector3[] vertices)
{
Delegates.Params_SetVertices @params = new() 
{
self = self
, vertices = vertices
};
if (_beforeSetVertices != null)
{
foreach (Delegates.SetVertices_BeforeArgs toInvoke in _beforeSetVertices.GetInvocationList())
{
try
{
_beforeSetVertices?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
vertices = @params.vertices;
orig(self, vertices);
if (_afterSetVertices != null)
{
foreach (Delegates.SetVertices_AfterArgs toInvoke in _afterSetVertices.GetInvocationList())
{
try
{
_afterSetVertices.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateMeshPadding()
{
if (!HookedList.Contains("UpdateMeshPadding"))
{
HookedList.Add("UpdateMeshPadding");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "UpdateMeshPadding", true), UpdateMeshPadding);

}
}
internal static event Delegates.UpdateMeshPadding_BeforeArgs _beforeUpdateMeshPadding;
internal static event Delegates.UpdateMeshPadding_AfterArgs _afterUpdateMeshPadding;
private static void UpdateMeshPadding(Action<TMPro.TMP_Text> orig, TMPro.TMP_Text self)
{
Delegates.Params_UpdateMeshPadding @params = new() 
{
self = self
};
if (_beforeUpdateMeshPadding != null)
{
foreach (Delegates.UpdateMeshPadding_BeforeArgs toInvoke in _beforeUpdateMeshPadding.GetInvocationList())
{
try
{
_beforeUpdateMeshPadding?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateMeshPadding != null)
{
foreach (Delegates.UpdateMeshPadding_AfterArgs toInvoke in _afterUpdateMeshPadding.GetInvocationList())
{
try
{
_afterUpdateMeshPadding.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCrossFadeColor()
{
if (!HookedList.Contains("CrossFadeColor"))
{
HookedList.Add("CrossFadeColor");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "CrossFadeColor", true), CrossFadeColor);

}
}
internal static event Delegates.CrossFadeColor_BeforeArgs _beforeCrossFadeColor;
internal static event Delegates.CrossFadeColor_AfterArgs _afterCrossFadeColor;
private static void CrossFadeColor(Action<TMPro.TMP_Text,  UnityEngine.Color,  float,  bool,  bool> orig, TMPro.TMP_Text self,  UnityEngine.Color targetColor,  float duration,  bool ignoreTimeScale,  bool useAlpha)
{
Delegates.Params_CrossFadeColor @params = new() 
{
self = self
, targetColor = targetColor
, duration = duration
, ignoreTimeScale = ignoreTimeScale
, useAlpha = useAlpha
};
if (_beforeCrossFadeColor != null)
{
foreach (Delegates.CrossFadeColor_BeforeArgs toInvoke in _beforeCrossFadeColor.GetInvocationList())
{
try
{
_beforeCrossFadeColor?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
targetColor = @params.targetColor;
duration = @params.duration;
ignoreTimeScale = @params.ignoreTimeScale;
useAlpha = @params.useAlpha;
orig(self, targetColor, duration, ignoreTimeScale, useAlpha);
if (_afterCrossFadeColor != null)
{
foreach (Delegates.CrossFadeColor_AfterArgs toInvoke in _afterCrossFadeColor.GetInvocationList())
{
try
{
_afterCrossFadeColor.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCrossFadeAlpha()
{
if (!HookedList.Contains("CrossFadeAlpha"))
{
HookedList.Add("CrossFadeAlpha");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "CrossFadeAlpha", true), CrossFadeAlpha);

}
}
internal static event Delegates.CrossFadeAlpha_BeforeArgs _beforeCrossFadeAlpha;
internal static event Delegates.CrossFadeAlpha_AfterArgs _afterCrossFadeAlpha;
private static void CrossFadeAlpha(Action<TMPro.TMP_Text,  float,  float,  bool> orig, TMPro.TMP_Text self,  float alpha,  float duration,  bool ignoreTimeScale)
{
Delegates.Params_CrossFadeAlpha @params = new() 
{
self = self
, alpha = alpha
, duration = duration
, ignoreTimeScale = ignoreTimeScale
};
if (_beforeCrossFadeAlpha != null)
{
foreach (Delegates.CrossFadeAlpha_BeforeArgs toInvoke in _beforeCrossFadeAlpha.GetInvocationList())
{
try
{
_beforeCrossFadeAlpha?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
alpha = @params.alpha;
duration = @params.duration;
ignoreTimeScale = @params.ignoreTimeScale;
orig(self, alpha, duration, ignoreTimeScale);
if (_afterCrossFadeAlpha != null)
{
foreach (Delegates.CrossFadeAlpha_AfterArgs toInvoke in _afterCrossFadeAlpha.GetInvocationList())
{
try
{
_afterCrossFadeAlpha.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookInternalCrossFadeColor()
{
if (!HookedList.Contains("InternalCrossFadeColor"))
{
HookedList.Add("InternalCrossFadeColor");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "InternalCrossFadeColor", true), InternalCrossFadeColor);

}
}
internal static event Delegates.InternalCrossFadeColor_BeforeArgs _beforeInternalCrossFadeColor;
internal static event Delegates.InternalCrossFadeColor_AfterArgs _afterInternalCrossFadeColor;
private static void InternalCrossFadeColor(Action<TMPro.TMP_Text,  UnityEngine.Color,  float,  bool,  bool> orig, TMPro.TMP_Text self,  UnityEngine.Color targetColor,  float duration,  bool ignoreTimeScale,  bool useAlpha)
{
Delegates.Params_InternalCrossFadeColor @params = new() 
{
self = self
, targetColor = targetColor
, duration = duration
, ignoreTimeScale = ignoreTimeScale
, useAlpha = useAlpha
};
if (_beforeInternalCrossFadeColor != null)
{
foreach (Delegates.InternalCrossFadeColor_BeforeArgs toInvoke in _beforeInternalCrossFadeColor.GetInvocationList())
{
try
{
_beforeInternalCrossFadeColor?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
targetColor = @params.targetColor;
duration = @params.duration;
ignoreTimeScale = @params.ignoreTimeScale;
useAlpha = @params.useAlpha;
orig(self, targetColor, duration, ignoreTimeScale, useAlpha);
if (_afterInternalCrossFadeColor != null)
{
foreach (Delegates.InternalCrossFadeColor_AfterArgs toInvoke in _afterInternalCrossFadeColor.GetInvocationList())
{
try
{
_afterInternalCrossFadeColor.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookInternalCrossFadeAlpha()
{
if (!HookedList.Contains("InternalCrossFadeAlpha"))
{
HookedList.Add("InternalCrossFadeAlpha");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "InternalCrossFadeAlpha", true), InternalCrossFadeAlpha);

}
}
internal static event Delegates.InternalCrossFadeAlpha_BeforeArgs _beforeInternalCrossFadeAlpha;
internal static event Delegates.InternalCrossFadeAlpha_AfterArgs _afterInternalCrossFadeAlpha;
private static void InternalCrossFadeAlpha(Action<TMPro.TMP_Text,  float,  float,  bool> orig, TMPro.TMP_Text self,  float alpha,  float duration,  bool ignoreTimeScale)
{
Delegates.Params_InternalCrossFadeAlpha @params = new() 
{
self = self
, alpha = alpha
, duration = duration
, ignoreTimeScale = ignoreTimeScale
};
if (_beforeInternalCrossFadeAlpha != null)
{
foreach (Delegates.InternalCrossFadeAlpha_BeforeArgs toInvoke in _beforeInternalCrossFadeAlpha.GetInvocationList())
{
try
{
_beforeInternalCrossFadeAlpha?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
alpha = @params.alpha;
duration = @params.duration;
ignoreTimeScale = @params.ignoreTimeScale;
orig(self, alpha, duration, ignoreTimeScale);
if (_afterInternalCrossFadeAlpha != null)
{
foreach (Delegates.InternalCrossFadeAlpha_AfterArgs toInvoke in _afterInternalCrossFadeAlpha.GetInvocationList())
{
try
{
_afterInternalCrossFadeAlpha.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookParseInputText()
{
if (!HookedList.Contains("ParseInputText"))
{
HookedList.Add("ParseInputText");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "ParseInputText", true), ParseInputText);

}
}
internal static event Delegates.ParseInputText_BeforeArgs _beforeParseInputText;
internal static event Delegates.ParseInputText_AfterArgs _afterParseInputText;
private static void ParseInputText(Action<TMPro.TMP_Text> orig, TMPro.TMP_Text self)
{
Delegates.Params_ParseInputText @params = new() 
{
self = self
};
if (_beforeParseInputText != null)
{
foreach (Delegates.ParseInputText_BeforeArgs toInvoke in _beforeParseInputText.GetInvocationList())
{
try
{
_beforeParseInputText?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterParseInputText != null)
{
foreach (Delegates.ParseInputText_AfterArgs toInvoke in _afterParseInputText.GetInvocationList())
{
try
{
_afterParseInputText.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetText_string()
{
if (!HookedList.Contains("SetText_string"))
{
HookedList.Add("SetText_string");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetText_string", true), SetText_string);

}
}
internal static event Delegates.SetText_string_BeforeArgs _beforeSetText_string;
internal static event Delegates.SetText_string_AfterArgs _afterSetText_string;
private static void SetText_string(Action<TMPro.TMP_Text,  string> orig, TMPro.TMP_Text self,  string text)
{
Delegates.Params_SetText_string @params = new() 
{
self = self
, text = text
};
if (_beforeSetText_string != null)
{
foreach (Delegates.SetText_string_BeforeArgs toInvoke in _beforeSetText_string.GetInvocationList())
{
try
{
_beforeSetText_string?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
text = @params.text;
orig(self, text);
if (_afterSetText_string != null)
{
foreach (Delegates.SetText_string_AfterArgs toInvoke in _afterSetText_string.GetInvocationList())
{
try
{
_afterSetText_string.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetText_string_float()
{
if (!HookedList.Contains("SetText_string_float"))
{
HookedList.Add("SetText_string_float");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetText_string_float", true), SetText_string_float);

}
}
internal static event Delegates.SetText_string_float_BeforeArgs _beforeSetText_string_float;
internal static event Delegates.SetText_string_float_AfterArgs _afterSetText_string_float;
private static void SetText_string_float(Action<TMPro.TMP_Text,  string,  float> orig, TMPro.TMP_Text self,  string text,  float arg0)
{
Delegates.Params_SetText_string_float @params = new() 
{
self = self
, text = text
, arg0 = arg0
};
if (_beforeSetText_string_float != null)
{
foreach (Delegates.SetText_string_float_BeforeArgs toInvoke in _beforeSetText_string_float.GetInvocationList())
{
try
{
_beforeSetText_string_float?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
text = @params.text;
arg0 = @params.arg0;
orig(self, text, arg0);
if (_afterSetText_string_float != null)
{
foreach (Delegates.SetText_string_float_AfterArgs toInvoke in _afterSetText_string_float.GetInvocationList())
{
try
{
_afterSetText_string_float.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetText_string_float_float()
{
if (!HookedList.Contains("SetText_string_float_float"))
{
HookedList.Add("SetText_string_float_float");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetText_string_float_float", true), SetText_string_float_float);

}
}
internal static event Delegates.SetText_string_float_float_BeforeArgs _beforeSetText_string_float_float;
internal static event Delegates.SetText_string_float_float_AfterArgs _afterSetText_string_float_float;
private static void SetText_string_float_float(Action<TMPro.TMP_Text,  string,  float,  float> orig, TMPro.TMP_Text self,  string text,  float arg0,  float arg1)
{
Delegates.Params_SetText_string_float_float @params = new() 
{
self = self
, text = text
, arg0 = arg0
, arg1 = arg1
};
if (_beforeSetText_string_float_float != null)
{
foreach (Delegates.SetText_string_float_float_BeforeArgs toInvoke in _beforeSetText_string_float_float.GetInvocationList())
{
try
{
_beforeSetText_string_float_float?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
text = @params.text;
arg0 = @params.arg0;
arg1 = @params.arg1;
orig(self, text, arg0, arg1);
if (_afterSetText_string_float_float != null)
{
foreach (Delegates.SetText_string_float_float_AfterArgs toInvoke in _afterSetText_string_float_float.GetInvocationList())
{
try
{
_afterSetText_string_float_float.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetText_string_float_float_float()
{
if (!HookedList.Contains("SetText_string_float_float_float"))
{
HookedList.Add("SetText_string_float_float_float");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetText_string_float_float_float", true), SetText_string_float_float_float);

}
}
internal static event Delegates.SetText_string_float_float_float_BeforeArgs _beforeSetText_string_float_float_float;
internal static event Delegates.SetText_string_float_float_float_AfterArgs _afterSetText_string_float_float_float;
private static void SetText_string_float_float_float(Action<TMPro.TMP_Text,  string,  float,  float,  float> orig, TMPro.TMP_Text self,  string text,  float arg0,  float arg1,  float arg2)
{
Delegates.Params_SetText_string_float_float_float @params = new() 
{
self = self
, text = text
, arg0 = arg0
, arg1 = arg1
, arg2 = arg2
};
if (_beforeSetText_string_float_float_float != null)
{
foreach (Delegates.SetText_string_float_float_float_BeforeArgs toInvoke in _beforeSetText_string_float_float_float.GetInvocationList())
{
try
{
_beforeSetText_string_float_float_float?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
text = @params.text;
arg0 = @params.arg0;
arg1 = @params.arg1;
arg2 = @params.arg2;
orig(self, text, arg0, arg1, arg2);
if (_afterSetText_string_float_float_float != null)
{
foreach (Delegates.SetText_string_float_float_float_AfterArgs toInvoke in _afterSetText_string_float_float_float.GetInvocationList())
{
try
{
_afterSetText_string_float_float_float.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetText_StringBuilder()
{
if (!HookedList.Contains("SetText_StringBuilder"))
{
HookedList.Add("SetText_StringBuilder");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetText_StringBuilder", true), SetText_StringBuilder);

}
}
internal static event Delegates.SetText_StringBuilder_BeforeArgs _beforeSetText_StringBuilder;
internal static event Delegates.SetText_StringBuilder_AfterArgs _afterSetText_StringBuilder;
private static void SetText_StringBuilder(Action<TMPro.TMP_Text,  System.Text.StringBuilder> orig, TMPro.TMP_Text self,  System.Text.StringBuilder text)
{
Delegates.Params_SetText_StringBuilder @params = new() 
{
self = self
, text = text
};
if (_beforeSetText_StringBuilder != null)
{
foreach (Delegates.SetText_StringBuilder_BeforeArgs toInvoke in _beforeSetText_StringBuilder.GetInvocationList())
{
try
{
_beforeSetText_StringBuilder?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
text = @params.text;
orig(self, text);
if (_afterSetText_StringBuilder != null)
{
foreach (Delegates.SetText_StringBuilder_AfterArgs toInvoke in _afterSetText_StringBuilder.GetInvocationList())
{
try
{
_afterSetText_StringBuilder.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetCharArray()
{
if (!HookedList.Contains("SetCharArray"))
{
HookedList.Add("SetCharArray");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetCharArray", true), SetCharArray);

}
}
internal static event Delegates.SetCharArray_BeforeArgs _beforeSetCharArray;
internal static event Delegates.SetCharArray_AfterArgs _afterSetCharArray;
private static void SetCharArray(Action<TMPro.TMP_Text,  char[]> orig, TMPro.TMP_Text self,  char[] charArray)
{
Delegates.Params_SetCharArray @params = new() 
{
self = self
, charArray = charArray
};
if (_beforeSetCharArray != null)
{
foreach (Delegates.SetCharArray_BeforeArgs toInvoke in _beforeSetCharArray.GetInvocationList())
{
try
{
_beforeSetCharArray?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
charArray = @params.charArray;
orig(self, charArray);
if (_afterSetCharArray != null)
{
foreach (Delegates.SetCharArray_AfterArgs toInvoke in _afterSetCharArray.GetInvocationList())
{
try
{
_afterSetCharArray.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetTextArrayToCharArray()
{
if (!HookedList.Contains("SetTextArrayToCharArray"))
{
HookedList.Add("SetTextArrayToCharArray");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetTextArrayToCharArray", true), SetTextArrayToCharArray);

}
}
internal static event Delegates.SetTextArrayToCharArray_BeforeArgs _beforeSetTextArrayToCharArray;
internal static event Delegates.SetTextArrayToCharArray_AfterArgs _afterSetTextArrayToCharArray;
private static void SetTextArrayToCharArray(Action<TMPro.TMP_Text,  char[],  int[]> orig, TMPro.TMP_Text self,  char[] charArray,  int[] charBuffer)
{
Delegates.Params_SetTextArrayToCharArray @params = new() 
{
self = self
, charArray = charArray
, charBuffer = charBuffer
};
if (_beforeSetTextArrayToCharArray != null)
{
foreach (Delegates.SetTextArrayToCharArray_BeforeArgs toInvoke in _beforeSetTextArrayToCharArray.GetInvocationList())
{
try
{
_beforeSetTextArrayToCharArray?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
charArray = @params.charArray;
charBuffer = @params.charBuffer;
orig(self, charArray, charBuffer);
if (_afterSetTextArrayToCharArray != null)
{
foreach (Delegates.SetTextArrayToCharArray_AfterArgs toInvoke in _afterSetTextArrayToCharArray.GetInvocationList())
{
try
{
_afterSetTextArrayToCharArray.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStringToCharArray()
{
if (!HookedList.Contains("StringToCharArray"))
{
HookedList.Add("StringToCharArray");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "StringToCharArray", true), StringToCharArray);

}
}
internal static event Delegates.StringToCharArray_BeforeArgs _beforeStringToCharArray;
internal static event Delegates.StringToCharArray_AfterArgs _afterStringToCharArray;
private static void StringToCharArray(Action<TMPro.TMP_Text,  string,  int[]> orig, TMPro.TMP_Text self,  string text,  int[] chars)
{
Delegates.Params_StringToCharArray @params = new() 
{
self = self
, text = text
, chars = chars
};
if (_beforeStringToCharArray != null)
{
foreach (Delegates.StringToCharArray_BeforeArgs toInvoke in _beforeStringToCharArray.GetInvocationList())
{
try
{
_beforeStringToCharArray?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
text = @params.text;
chars = @params.chars;
orig(self, text, chars);
if (_afterStringToCharArray != null)
{
foreach (Delegates.StringToCharArray_AfterArgs toInvoke in _afterStringToCharArray.GetInvocationList())
{
try
{
_afterStringToCharArray.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStringBuilderToIntArray()
{
if (!HookedList.Contains("StringBuilderToIntArray"))
{
HookedList.Add("StringBuilderToIntArray");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "StringBuilderToIntArray", true), StringBuilderToIntArray);

}
}
internal static event Delegates.StringBuilderToIntArray_BeforeArgs _beforeStringBuilderToIntArray;
internal static event Delegates.StringBuilderToIntArray_AfterArgs _afterStringBuilderToIntArray;
private static void StringBuilderToIntArray(Action<TMPro.TMP_Text,  System.Text.StringBuilder,  int[]> orig, TMPro.TMP_Text self,  System.Text.StringBuilder text,  int[] chars)
{
Delegates.Params_StringBuilderToIntArray @params = new() 
{
self = self
, text = text
, chars = chars
};
if (_beforeStringBuilderToIntArray != null)
{
foreach (Delegates.StringBuilderToIntArray_BeforeArgs toInvoke in _beforeStringBuilderToIntArray.GetInvocationList())
{
try
{
_beforeStringBuilderToIntArray?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
text = @params.text;
chars = @params.chars;
orig(self, text, chars);
if (_afterStringBuilderToIntArray != null)
{
foreach (Delegates.StringBuilderToIntArray_AfterArgs toInvoke in _afterStringBuilderToIntArray.GetInvocationList())
{
try
{
_afterStringBuilderToIntArray.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAddFloatToCharArray()
{
if (!HookedList.Contains("AddFloatToCharArray"))
{
HookedList.Add("AddFloatToCharArray");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "AddFloatToCharArray", true), AddFloatToCharArray);

}
}
internal static event Delegates.AddFloatToCharArray_BeforeArgs _beforeAddFloatToCharArray;
internal static event Delegates.AddFloatToCharArray_AfterArgs _afterAddFloatToCharArray;
private static void AddFloatToCharArray(Action<TMPro.TMP_Text,  float,  int,  int> orig, TMPro.TMP_Text self,  float number,  int index,  int precision)
{
Delegates.Params_AddFloatToCharArray @params = new() 
{
self = self
, number = number
, index = index
, precision = precision
};
if (_beforeAddFloatToCharArray != null)
{
foreach (Delegates.AddFloatToCharArray_BeforeArgs toInvoke in _beforeAddFloatToCharArray.GetInvocationList())
{
try
{
_beforeAddFloatToCharArray?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
number = @params.number;
index = @params.index;
precision = @params.precision;
orig(self, number, index, precision);
if (_afterAddFloatToCharArray != null)
{
foreach (Delegates.AddFloatToCharArray_AfterArgs toInvoke in _afterAddFloatToCharArray.GetInvocationList())
{
try
{
_afterAddFloatToCharArray.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAddIntToCharArray()
{
if (!HookedList.Contains("AddIntToCharArray"))
{
HookedList.Add("AddIntToCharArray");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "AddIntToCharArray", true), AddIntToCharArray);

}
}
internal static event Delegates.AddIntToCharArray_BeforeArgs _beforeAddIntToCharArray;
internal static event Delegates.AddIntToCharArray_AfterArgs _afterAddIntToCharArray;
private static void AddIntToCharArray(Action<TMPro.TMP_Text,  int,  int,  int> orig, TMPro.TMP_Text self,  int number,  int index,  int precision)
{
Delegates.Params_AddIntToCharArray @params = new() 
{
self = self
, number = number
, index = index
, precision = precision
};
if (_beforeAddIntToCharArray != null)
{
foreach (Delegates.AddIntToCharArray_BeforeArgs toInvoke in _beforeAddIntToCharArray.GetInvocationList())
{
try
{
_beforeAddIntToCharArray?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
number = @params.number;
index = @params.index;
precision = @params.precision;
orig(self, number, index, precision);
if (_afterAddIntToCharArray != null)
{
foreach (Delegates.AddIntToCharArray_AfterArgs toInvoke in _afterAddIntToCharArray.GetInvocationList())
{
try
{
_afterAddIntToCharArray.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetArraySizes()
{
if (!HookedList.Contains("SetArraySizes"))
{
HookedList.Add("SetArraySizes");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetArraySizes", true), SetArraySizes);

}
}
internal static event Delegates.SetArraySizes_BeforeArgs _beforeSetArraySizes;
internal static event Delegates.SetArraySizes_AfterArgs _afterSetArraySizes;
private static int SetArraySizes(Func<TMPro.TMP_Text,  int[], int> orig, TMPro.TMP_Text self,  int[] chars)
{
Delegates.Params_SetArraySizes @params = new() 
{
self = self
, chars = chars
};
if (_beforeSetArraySizes != null)
{
foreach (Delegates.SetArraySizes_BeforeArgs toInvoke in _beforeSetArraySizes.GetInvocationList())
{
try
{
_beforeSetArraySizes?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
chars = @params.chars;
var retVal = orig(self, chars);
if (_afterSetArraySizes != null)
{
foreach (Delegates.SetArraySizes_AfterArgs toInvoke in _afterSetArraySizes.GetInvocationList())
{
try
{
retVal = _afterSetArraySizes.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGenerateTextMesh()
{
if (!HookedList.Contains("GenerateTextMesh"))
{
HookedList.Add("GenerateTextMesh");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GenerateTextMesh", true), GenerateTextMesh);

}
}
internal static event Delegates.GenerateTextMesh_BeforeArgs _beforeGenerateTextMesh;
internal static event Delegates.GenerateTextMesh_AfterArgs _afterGenerateTextMesh;
private static void GenerateTextMesh(Action<TMPro.TMP_Text> orig, TMPro.TMP_Text self)
{
Delegates.Params_GenerateTextMesh @params = new() 
{
self = self
};
if (_beforeGenerateTextMesh != null)
{
foreach (Delegates.GenerateTextMesh_BeforeArgs toInvoke in _beforeGenerateTextMesh.GetInvocationList())
{
try
{
_beforeGenerateTextMesh?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterGenerateTextMesh != null)
{
foreach (Delegates.GenerateTextMesh_AfterArgs toInvoke in _afterGenerateTextMesh.GetInvocationList())
{
try
{
_afterGenerateTextMesh.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetPreferredValues()
{
if (!HookedList.Contains("GetPreferredValues"))
{
HookedList.Add("GetPreferredValues");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredValues", true), GetPreferredValues);

}
}
internal static event Delegates.GetPreferredValues_BeforeArgs _beforeGetPreferredValues;
internal static event Delegates.GetPreferredValues_AfterArgs _afterGetPreferredValues;
private static UnityEngine.Vector2 GetPreferredValues(Func<TMPro.TMP_Text, UnityEngine.Vector2> orig, TMPro.TMP_Text self)
{
Delegates.Params_GetPreferredValues @params = new() 
{
self = self
};
if (_beforeGetPreferredValues != null)
{
foreach (Delegates.GetPreferredValues_BeforeArgs toInvoke in _beforeGetPreferredValues.GetInvocationList())
{
try
{
_beforeGetPreferredValues?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetPreferredValues != null)
{
foreach (Delegates.GetPreferredValues_AfterArgs toInvoke in _afterGetPreferredValues.GetInvocationList())
{
try
{
retVal = _afterGetPreferredValues.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetPreferredValues_float_float()
{
if (!HookedList.Contains("GetPreferredValues_float_float"))
{
HookedList.Add("GetPreferredValues_float_float");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredValues_float_float", true), GetPreferredValues_float_float);

}
}
internal static event Delegates.GetPreferredValues_float_float_BeforeArgs _beforeGetPreferredValues_float_float;
internal static event Delegates.GetPreferredValues_float_float_AfterArgs _afterGetPreferredValues_float_float;
private static UnityEngine.Vector2 GetPreferredValues_float_float(Func<TMPro.TMP_Text,  float,  float, UnityEngine.Vector2> orig, TMPro.TMP_Text self,  float width,  float height)
{
Delegates.Params_GetPreferredValues_float_float @params = new() 
{
self = self
, width = width
, height = height
};
if (_beforeGetPreferredValues_float_float != null)
{
foreach (Delegates.GetPreferredValues_float_float_BeforeArgs toInvoke in _beforeGetPreferredValues_float_float.GetInvocationList())
{
try
{
_beforeGetPreferredValues_float_float?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
width = @params.width;
height = @params.height;
var retVal = orig(self, width, height);
if (_afterGetPreferredValues_float_float != null)
{
foreach (Delegates.GetPreferredValues_float_float_AfterArgs toInvoke in _afterGetPreferredValues_float_float.GetInvocationList())
{
try
{
retVal = _afterGetPreferredValues_float_float.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetPreferredValues_string()
{
if (!HookedList.Contains("GetPreferredValues_string"))
{
HookedList.Add("GetPreferredValues_string");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredValues_string", true), GetPreferredValues_string);

}
}
internal static event Delegates.GetPreferredValues_string_BeforeArgs _beforeGetPreferredValues_string;
internal static event Delegates.GetPreferredValues_string_AfterArgs _afterGetPreferredValues_string;
private static UnityEngine.Vector2 GetPreferredValues_string(Func<TMPro.TMP_Text,  string, UnityEngine.Vector2> orig, TMPro.TMP_Text self,  string text)
{
Delegates.Params_GetPreferredValues_string @params = new() 
{
self = self
, text = text
};
if (_beforeGetPreferredValues_string != null)
{
foreach (Delegates.GetPreferredValues_string_BeforeArgs toInvoke in _beforeGetPreferredValues_string.GetInvocationList())
{
try
{
_beforeGetPreferredValues_string?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
text = @params.text;
var retVal = orig(self, text);
if (_afterGetPreferredValues_string != null)
{
foreach (Delegates.GetPreferredValues_string_AfterArgs toInvoke in _afterGetPreferredValues_string.GetInvocationList())
{
try
{
retVal = _afterGetPreferredValues_string.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetPreferredValues_string_float_float()
{
if (!HookedList.Contains("GetPreferredValues_string_float_float"))
{
HookedList.Add("GetPreferredValues_string_float_float");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredValues_string_float_float", true), GetPreferredValues_string_float_float);

}
}
internal static event Delegates.GetPreferredValues_string_float_float_BeforeArgs _beforeGetPreferredValues_string_float_float;
internal static event Delegates.GetPreferredValues_string_float_float_AfterArgs _afterGetPreferredValues_string_float_float;
private static UnityEngine.Vector2 GetPreferredValues_string_float_float(Func<TMPro.TMP_Text,  string,  float,  float, UnityEngine.Vector2> orig, TMPro.TMP_Text self,  string text,  float width,  float height)
{
Delegates.Params_GetPreferredValues_string_float_float @params = new() 
{
self = self
, text = text
, width = width
, height = height
};
if (_beforeGetPreferredValues_string_float_float != null)
{
foreach (Delegates.GetPreferredValues_string_float_float_BeforeArgs toInvoke in _beforeGetPreferredValues_string_float_float.GetInvocationList())
{
try
{
_beforeGetPreferredValues_string_float_float?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
text = @params.text;
width = @params.width;
height = @params.height;
var retVal = orig(self, text, width, height);
if (_afterGetPreferredValues_string_float_float != null)
{
foreach (Delegates.GetPreferredValues_string_float_float_AfterArgs toInvoke in _afterGetPreferredValues_string_float_float.GetInvocationList())
{
try
{
retVal = _afterGetPreferredValues_string_float_float.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetPreferredWidth()
{
if (!HookedList.Contains("GetPreferredWidth"))
{
HookedList.Add("GetPreferredWidth");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredWidth", true), GetPreferredWidth);

}
}
internal static event Delegates.GetPreferredWidth_BeforeArgs _beforeGetPreferredWidth;
internal static event Delegates.GetPreferredWidth_AfterArgs _afterGetPreferredWidth;
private static float GetPreferredWidth(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_GetPreferredWidth @params = new() 
{
self = self
};
if (_beforeGetPreferredWidth != null)
{
foreach (Delegates.GetPreferredWidth_BeforeArgs toInvoke in _beforeGetPreferredWidth.GetInvocationList())
{
try
{
_beforeGetPreferredWidth?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetPreferredWidth != null)
{
foreach (Delegates.GetPreferredWidth_AfterArgs toInvoke in _afterGetPreferredWidth.GetInvocationList())
{
try
{
retVal = _afterGetPreferredWidth.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetPreferredWidth_Vector2()
{
if (!HookedList.Contains("GetPreferredWidth_Vector2"))
{
HookedList.Add("GetPreferredWidth_Vector2");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredWidth_Vector2", true), GetPreferredWidth_Vector2);

}
}
internal static event Delegates.GetPreferredWidth_Vector2_BeforeArgs _beforeGetPreferredWidth_Vector2;
internal static event Delegates.GetPreferredWidth_Vector2_AfterArgs _afterGetPreferredWidth_Vector2;
private static float GetPreferredWidth_Vector2(Func<TMPro.TMP_Text,  UnityEngine.Vector2, float> orig, TMPro.TMP_Text self,  UnityEngine.Vector2 margin)
{
Delegates.Params_GetPreferredWidth_Vector2 @params = new() 
{
self = self
, margin = margin
};
if (_beforeGetPreferredWidth_Vector2 != null)
{
foreach (Delegates.GetPreferredWidth_Vector2_BeforeArgs toInvoke in _beforeGetPreferredWidth_Vector2.GetInvocationList())
{
try
{
_beforeGetPreferredWidth_Vector2?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
margin = @params.margin;
var retVal = orig(self, margin);
if (_afterGetPreferredWidth_Vector2 != null)
{
foreach (Delegates.GetPreferredWidth_Vector2_AfterArgs toInvoke in _afterGetPreferredWidth_Vector2.GetInvocationList())
{
try
{
retVal = _afterGetPreferredWidth_Vector2.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetPreferredHeight()
{
if (!HookedList.Contains("GetPreferredHeight"))
{
HookedList.Add("GetPreferredHeight");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredHeight", true), GetPreferredHeight);

}
}
internal static event Delegates.GetPreferredHeight_BeforeArgs _beforeGetPreferredHeight;
internal static event Delegates.GetPreferredHeight_AfterArgs _afterGetPreferredHeight;
private static float GetPreferredHeight(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_GetPreferredHeight @params = new() 
{
self = self
};
if (_beforeGetPreferredHeight != null)
{
foreach (Delegates.GetPreferredHeight_BeforeArgs toInvoke in _beforeGetPreferredHeight.GetInvocationList())
{
try
{
_beforeGetPreferredHeight?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetPreferredHeight != null)
{
foreach (Delegates.GetPreferredHeight_AfterArgs toInvoke in _afterGetPreferredHeight.GetInvocationList())
{
try
{
retVal = _afterGetPreferredHeight.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetPreferredHeight_Vector2()
{
if (!HookedList.Contains("GetPreferredHeight_Vector2"))
{
HookedList.Add("GetPreferredHeight_Vector2");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredHeight_Vector2", true), GetPreferredHeight_Vector2);

}
}
internal static event Delegates.GetPreferredHeight_Vector2_BeforeArgs _beforeGetPreferredHeight_Vector2;
internal static event Delegates.GetPreferredHeight_Vector2_AfterArgs _afterGetPreferredHeight_Vector2;
private static float GetPreferredHeight_Vector2(Func<TMPro.TMP_Text,  UnityEngine.Vector2, float> orig, TMPro.TMP_Text self,  UnityEngine.Vector2 margin)
{
Delegates.Params_GetPreferredHeight_Vector2 @params = new() 
{
self = self
, margin = margin
};
if (_beforeGetPreferredHeight_Vector2 != null)
{
foreach (Delegates.GetPreferredHeight_Vector2_BeforeArgs toInvoke in _beforeGetPreferredHeight_Vector2.GetInvocationList())
{
try
{
_beforeGetPreferredHeight_Vector2?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
margin = @params.margin;
var retVal = orig(self, margin);
if (_afterGetPreferredHeight_Vector2 != null)
{
foreach (Delegates.GetPreferredHeight_Vector2_AfterArgs toInvoke in _afterGetPreferredHeight_Vector2.GetInvocationList())
{
try
{
retVal = _afterGetPreferredHeight_Vector2.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetRenderedValues()
{
if (!HookedList.Contains("GetRenderedValues"))
{
HookedList.Add("GetRenderedValues");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetRenderedValues", true), GetRenderedValues);

}
}
internal static event Delegates.GetRenderedValues_BeforeArgs _beforeGetRenderedValues;
internal static event Delegates.GetRenderedValues_AfterArgs _afterGetRenderedValues;
private static UnityEngine.Vector2 GetRenderedValues(Func<TMPro.TMP_Text, UnityEngine.Vector2> orig, TMPro.TMP_Text self)
{
Delegates.Params_GetRenderedValues @params = new() 
{
self = self
};
if (_beforeGetRenderedValues != null)
{
foreach (Delegates.GetRenderedValues_BeforeArgs toInvoke in _beforeGetRenderedValues.GetInvocationList())
{
try
{
_beforeGetRenderedValues?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetRenderedValues != null)
{
foreach (Delegates.GetRenderedValues_AfterArgs toInvoke in _afterGetRenderedValues.GetInvocationList())
{
try
{
retVal = _afterGetRenderedValues.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetRenderedWidth()
{
if (!HookedList.Contains("GetRenderedWidth"))
{
HookedList.Add("GetRenderedWidth");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetRenderedWidth", true), GetRenderedWidth);

}
}
internal static event Delegates.GetRenderedWidth_BeforeArgs _beforeGetRenderedWidth;
internal static event Delegates.GetRenderedWidth_AfterArgs _afterGetRenderedWidth;
private static float GetRenderedWidth(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_GetRenderedWidth @params = new() 
{
self = self
};
if (_beforeGetRenderedWidth != null)
{
foreach (Delegates.GetRenderedWidth_BeforeArgs toInvoke in _beforeGetRenderedWidth.GetInvocationList())
{
try
{
_beforeGetRenderedWidth?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetRenderedWidth != null)
{
foreach (Delegates.GetRenderedWidth_AfterArgs toInvoke in _afterGetRenderedWidth.GetInvocationList())
{
try
{
retVal = _afterGetRenderedWidth.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetRenderedHeight()
{
if (!HookedList.Contains("GetRenderedHeight"))
{
HookedList.Add("GetRenderedHeight");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetRenderedHeight", true), GetRenderedHeight);

}
}
internal static event Delegates.GetRenderedHeight_BeforeArgs _beforeGetRenderedHeight;
internal static event Delegates.GetRenderedHeight_AfterArgs _afterGetRenderedHeight;
private static float GetRenderedHeight(Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self)
{
Delegates.Params_GetRenderedHeight @params = new() 
{
self = self
};
if (_beforeGetRenderedHeight != null)
{
foreach (Delegates.GetRenderedHeight_BeforeArgs toInvoke in _beforeGetRenderedHeight.GetInvocationList())
{
try
{
_beforeGetRenderedHeight?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetRenderedHeight != null)
{
foreach (Delegates.GetRenderedHeight_AfterArgs toInvoke in _afterGetRenderedHeight.GetInvocationList())
{
try
{
retVal = _afterGetRenderedHeight.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookCalculatePreferredValues()
{
if (!HookedList.Contains("CalculatePreferredValues"))
{
HookedList.Add("CalculatePreferredValues");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "CalculatePreferredValues", true), CalculatePreferredValues);

}
}
internal static event Delegates.CalculatePreferredValues_BeforeArgs _beforeCalculatePreferredValues;
internal static event Delegates.CalculatePreferredValues_AfterArgs _afterCalculatePreferredValues;
private static UnityEngine.Vector2 CalculatePreferredValues(Func<TMPro.TMP_Text,  float,  UnityEngine.Vector2, UnityEngine.Vector2> orig, TMPro.TMP_Text self,  float defaultFontSize,  UnityEngine.Vector2 marginSize)
{
Delegates.Params_CalculatePreferredValues @params = new() 
{
self = self
, defaultFontSize = defaultFontSize
, marginSize = marginSize
};
if (_beforeCalculatePreferredValues != null)
{
foreach (Delegates.CalculatePreferredValues_BeforeArgs toInvoke in _beforeCalculatePreferredValues.GetInvocationList())
{
try
{
_beforeCalculatePreferredValues?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
defaultFontSize = @params.defaultFontSize;
marginSize = @params.marginSize;
var retVal = orig(self, defaultFontSize, marginSize);
if (_afterCalculatePreferredValues != null)
{
foreach (Delegates.CalculatePreferredValues_AfterArgs toInvoke in _afterCalculatePreferredValues.GetInvocationList())
{
try
{
retVal = _afterCalculatePreferredValues.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetCompoundBounds()
{
if (!HookedList.Contains("GetCompoundBounds"))
{
HookedList.Add("GetCompoundBounds");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetCompoundBounds", true), GetCompoundBounds);

}
}
internal static event Delegates.GetCompoundBounds_BeforeArgs _beforeGetCompoundBounds;
internal static event Delegates.GetCompoundBounds_AfterArgs _afterGetCompoundBounds;
private static UnityEngine.Bounds GetCompoundBounds(Func<TMPro.TMP_Text, UnityEngine.Bounds> orig, TMPro.TMP_Text self)
{
Delegates.Params_GetCompoundBounds @params = new() 
{
self = self
};
if (_beforeGetCompoundBounds != null)
{
foreach (Delegates.GetCompoundBounds_BeforeArgs toInvoke in _beforeGetCompoundBounds.GetInvocationList())
{
try
{
_beforeGetCompoundBounds?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetCompoundBounds != null)
{
foreach (Delegates.GetCompoundBounds_AfterArgs toInvoke in _afterGetCompoundBounds.GetInvocationList())
{
try
{
retVal = _afterGetCompoundBounds.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetTextBounds()
{
if (!HookedList.Contains("GetTextBounds"))
{
HookedList.Add("GetTextBounds");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetTextBounds", true), GetTextBounds);

}
}
internal static event Delegates.GetTextBounds_BeforeArgs _beforeGetTextBounds;
internal static event Delegates.GetTextBounds_AfterArgs _afterGetTextBounds;
private static UnityEngine.Bounds GetTextBounds(Func<TMPro.TMP_Text, UnityEngine.Bounds> orig, TMPro.TMP_Text self)
{
Delegates.Params_GetTextBounds @params = new() 
{
self = self
};
if (_beforeGetTextBounds != null)
{
foreach (Delegates.GetTextBounds_BeforeArgs toInvoke in _beforeGetTextBounds.GetInvocationList())
{
try
{
_beforeGetTextBounds?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetTextBounds != null)
{
foreach (Delegates.GetTextBounds_AfterArgs toInvoke in _afterGetTextBounds.GetInvocationList())
{
try
{
retVal = _afterGetTextBounds.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookAdjustLineOffset()
{
if (!HookedList.Contains("AdjustLineOffset"))
{
HookedList.Add("AdjustLineOffset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "AdjustLineOffset", true), AdjustLineOffset);

}
}
internal static event Delegates.AdjustLineOffset_BeforeArgs _beforeAdjustLineOffset;
internal static event Delegates.AdjustLineOffset_AfterArgs _afterAdjustLineOffset;
private static void AdjustLineOffset(Action<TMPro.TMP_Text,  int,  int,  float> orig, TMPro.TMP_Text self,  int startIndex,  int endIndex,  float offset)
{
Delegates.Params_AdjustLineOffset @params = new() 
{
self = self
, startIndex = startIndex
, endIndex = endIndex
, offset = offset
};
if (_beforeAdjustLineOffset != null)
{
foreach (Delegates.AdjustLineOffset_BeforeArgs toInvoke in _beforeAdjustLineOffset.GetInvocationList())
{
try
{
_beforeAdjustLineOffset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
startIndex = @params.startIndex;
endIndex = @params.endIndex;
offset = @params.offset;
orig(self, startIndex, endIndex, offset);
if (_afterAdjustLineOffset != null)
{
foreach (Delegates.AdjustLineOffset_AfterArgs toInvoke in _afterAdjustLineOffset.GetInvocationList())
{
try
{
_afterAdjustLineOffset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookResizeLineExtents()
{
if (!HookedList.Contains("ResizeLineExtents"))
{
HookedList.Add("ResizeLineExtents");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "ResizeLineExtents", true), ResizeLineExtents);

}
}
internal static event Delegates.ResizeLineExtents_BeforeArgs _beforeResizeLineExtents;
internal static event Delegates.ResizeLineExtents_AfterArgs _afterResizeLineExtents;
private static void ResizeLineExtents(Action<TMPro.TMP_Text,  int> orig, TMPro.TMP_Text self,  int size)
{
Delegates.Params_ResizeLineExtents @params = new() 
{
self = self
, size = size
};
if (_beforeResizeLineExtents != null)
{
foreach (Delegates.ResizeLineExtents_BeforeArgs toInvoke in _beforeResizeLineExtents.GetInvocationList())
{
try
{
_beforeResizeLineExtents?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
size = @params.size;
orig(self, size);
if (_afterResizeLineExtents != null)
{
foreach (Delegates.ResizeLineExtents_AfterArgs toInvoke in _afterResizeLineExtents.GetInvocationList())
{
try
{
_afterResizeLineExtents.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetTextInfo()
{
if (!HookedList.Contains("GetTextInfo"))
{
HookedList.Add("GetTextInfo");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetTextInfo", true), GetTextInfo);

}
}
internal static event Delegates.GetTextInfo_BeforeArgs _beforeGetTextInfo;
internal static event Delegates.GetTextInfo_AfterArgs _afterGetTextInfo;
private static TMPro.TMP_TextInfo GetTextInfo(Func<TMPro.TMP_Text,  string, TMPro.TMP_TextInfo> orig, TMPro.TMP_Text self,  string text)
{
Delegates.Params_GetTextInfo @params = new() 
{
self = self
, text = text
};
if (_beforeGetTextInfo != null)
{
foreach (Delegates.GetTextInfo_BeforeArgs toInvoke in _beforeGetTextInfo.GetInvocationList())
{
try
{
_beforeGetTextInfo?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
text = @params.text;
var retVal = orig(self, text);
if (_afterGetTextInfo != null)
{
foreach (Delegates.GetTextInfo_AfterArgs toInvoke in _afterGetTextInfo.GetInvocationList())
{
try
{
retVal = _afterGetTextInfo.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookComputeMarginSize()
{
if (!HookedList.Contains("ComputeMarginSize"))
{
HookedList.Add("ComputeMarginSize");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "ComputeMarginSize", true), ComputeMarginSize);

}
}
internal static event Delegates.ComputeMarginSize_BeforeArgs _beforeComputeMarginSize;
internal static event Delegates.ComputeMarginSize_AfterArgs _afterComputeMarginSize;
private static void ComputeMarginSize(Action<TMPro.TMP_Text> orig, TMPro.TMP_Text self)
{
Delegates.Params_ComputeMarginSize @params = new() 
{
self = self
};
if (_beforeComputeMarginSize != null)
{
foreach (Delegates.ComputeMarginSize_BeforeArgs toInvoke in _beforeComputeMarginSize.GetInvocationList())
{
try
{
_beforeComputeMarginSize?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterComputeMarginSize != null)
{
foreach (Delegates.ComputeMarginSize_AfterArgs toInvoke in _afterComputeMarginSize.GetInvocationList())
{
try
{
_afterComputeMarginSize.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetArraySizes()
{
if (!HookedList.Contains("GetArraySizes"))
{
HookedList.Add("GetArraySizes");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetArraySizes", true), GetArraySizes);

}
}
internal static event Delegates.GetArraySizes_BeforeArgs _beforeGetArraySizes;
internal static event Delegates.GetArraySizes_AfterArgs _afterGetArraySizes;
private static int GetArraySizes(Func<TMPro.TMP_Text,  int[], int> orig, TMPro.TMP_Text self,  int[] chars)
{
Delegates.Params_GetArraySizes @params = new() 
{
self = self
, chars = chars
};
if (_beforeGetArraySizes != null)
{
foreach (Delegates.GetArraySizes_BeforeArgs toInvoke in _beforeGetArraySizes.GetInvocationList())
{
try
{
_beforeGetArraySizes?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
chars = @params.chars;
var retVal = orig(self, chars);
if (_afterGetArraySizes != null)
{
foreach (Delegates.GetArraySizes_AfterArgs toInvoke in _afterGetArraySizes.GetInvocationList())
{
try
{
retVal = _afterGetArraySizes.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookSaveWordWrappingState()
{
if (!HookedList.Contains("SaveWordWrappingState"))
{
HookedList.Add("SaveWordWrappingState");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SaveWordWrappingState", true), SaveWordWrappingState);

}
}
internal static event Delegates.SaveWordWrappingState_BeforeArgs _beforeSaveWordWrappingState;
internal static event Delegates.SaveWordWrappingState_AfterArgs _afterSaveWordWrappingState;
private static void SaveWordWrappingState(Action<TMPro.TMP_Text,  TMPro.WordWrapState,  int,  int> orig, TMPro.TMP_Text self,  TMPro.WordWrapState state,  int index,  int count)
{
Delegates.Params_SaveWordWrappingState @params = new() 
{
self = self
, state = state
, index = index
, count = count
};
if (_beforeSaveWordWrappingState != null)
{
foreach (Delegates.SaveWordWrappingState_BeforeArgs toInvoke in _beforeSaveWordWrappingState.GetInvocationList())
{
try
{
_beforeSaveWordWrappingState?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
state = @params.state;
index = @params.index;
count = @params.count;
orig(self, state, index, count);
if (_afterSaveWordWrappingState != null)
{
foreach (Delegates.SaveWordWrappingState_AfterArgs toInvoke in _afterSaveWordWrappingState.GetInvocationList())
{
try
{
_afterSaveWordWrappingState.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookRestoreWordWrappingState()
{
if (!HookedList.Contains("RestoreWordWrappingState"))
{
HookedList.Add("RestoreWordWrappingState");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "RestoreWordWrappingState", true), RestoreWordWrappingState);

}
}
internal static event Delegates.RestoreWordWrappingState_BeforeArgs _beforeRestoreWordWrappingState;
internal static event Delegates.RestoreWordWrappingState_AfterArgs _afterRestoreWordWrappingState;
private static int RestoreWordWrappingState(Func<TMPro.TMP_Text,  TMPro.WordWrapState, int> orig, TMPro.TMP_Text self,  TMPro.WordWrapState state)
{
Delegates.Params_RestoreWordWrappingState @params = new() 
{
self = self
, state = state
};
if (_beforeRestoreWordWrappingState != null)
{
foreach (Delegates.RestoreWordWrappingState_BeforeArgs toInvoke in _beforeRestoreWordWrappingState.GetInvocationList())
{
try
{
_beforeRestoreWordWrappingState?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
state = @params.state;
var retVal = orig(self, state);
if (_afterRestoreWordWrappingState != null)
{
foreach (Delegates.RestoreWordWrappingState_AfterArgs toInvoke in _afterRestoreWordWrappingState.GetInvocationList())
{
try
{
retVal = _afterRestoreWordWrappingState.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookSaveGlyphVertexInfo()
{
if (!HookedList.Contains("SaveGlyphVertexInfo"))
{
HookedList.Add("SaveGlyphVertexInfo");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SaveGlyphVertexInfo", true), SaveGlyphVertexInfo);

}
}
internal static event Delegates.SaveGlyphVertexInfo_BeforeArgs _beforeSaveGlyphVertexInfo;
internal static event Delegates.SaveGlyphVertexInfo_AfterArgs _afterSaveGlyphVertexInfo;
private static void SaveGlyphVertexInfo(Action<TMPro.TMP_Text,  float,  float,  UnityEngine.Color32> orig, TMPro.TMP_Text self,  float padding,  float style_padding,  UnityEngine.Color32 vertexColor)
{
Delegates.Params_SaveGlyphVertexInfo @params = new() 
{
self = self
, padding = padding
, style_padding = style_padding
, vertexColor = vertexColor
};
if (_beforeSaveGlyphVertexInfo != null)
{
foreach (Delegates.SaveGlyphVertexInfo_BeforeArgs toInvoke in _beforeSaveGlyphVertexInfo.GetInvocationList())
{
try
{
_beforeSaveGlyphVertexInfo?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
padding = @params.padding;
style_padding = @params.style_padding;
vertexColor = @params.vertexColor;
orig(self, padding, style_padding, vertexColor);
if (_afterSaveGlyphVertexInfo != null)
{
foreach (Delegates.SaveGlyphVertexInfo_AfterArgs toInvoke in _afterSaveGlyphVertexInfo.GetInvocationList())
{
try
{
_afterSaveGlyphVertexInfo.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSaveSpriteVertexInfo()
{
if (!HookedList.Contains("SaveSpriteVertexInfo"))
{
HookedList.Add("SaveSpriteVertexInfo");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SaveSpriteVertexInfo", true), SaveSpriteVertexInfo);

}
}
internal static event Delegates.SaveSpriteVertexInfo_BeforeArgs _beforeSaveSpriteVertexInfo;
internal static event Delegates.SaveSpriteVertexInfo_AfterArgs _afterSaveSpriteVertexInfo;
private static void SaveSpriteVertexInfo(Action<TMPro.TMP_Text,  UnityEngine.Color32> orig, TMPro.TMP_Text self,  UnityEngine.Color32 vertexColor)
{
Delegates.Params_SaveSpriteVertexInfo @params = new() 
{
self = self
, vertexColor = vertexColor
};
if (_beforeSaveSpriteVertexInfo != null)
{
foreach (Delegates.SaveSpriteVertexInfo_BeforeArgs toInvoke in _beforeSaveSpriteVertexInfo.GetInvocationList())
{
try
{
_beforeSaveSpriteVertexInfo?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
vertexColor = @params.vertexColor;
orig(self, vertexColor);
if (_afterSaveSpriteVertexInfo != null)
{
foreach (Delegates.SaveSpriteVertexInfo_AfterArgs toInvoke in _afterSaveSpriteVertexInfo.GetInvocationList())
{
try
{
_afterSaveSpriteVertexInfo.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookFillCharacterVertexBuffers_int_int()
{
if (!HookedList.Contains("FillCharacterVertexBuffers_int_int"))
{
HookedList.Add("FillCharacterVertexBuffers_int_int");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "FillCharacterVertexBuffers_int_int", true), FillCharacterVertexBuffers_int_int);

}
}
internal static event Delegates.FillCharacterVertexBuffers_int_int_BeforeArgs _beforeFillCharacterVertexBuffers_int_int;
internal static event Delegates.FillCharacterVertexBuffers_int_int_AfterArgs _afterFillCharacterVertexBuffers_int_int;
private static void FillCharacterVertexBuffers_int_int(Action<TMPro.TMP_Text,  int,  int> orig, TMPro.TMP_Text self,  int i,  int index_X4)
{
Delegates.Params_FillCharacterVertexBuffers_int_int @params = new() 
{
self = self
, i = i
, index_X4 = index_X4
};
if (_beforeFillCharacterVertexBuffers_int_int != null)
{
foreach (Delegates.FillCharacterVertexBuffers_int_int_BeforeArgs toInvoke in _beforeFillCharacterVertexBuffers_int_int.GetInvocationList())
{
try
{
_beforeFillCharacterVertexBuffers_int_int?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
i = @params.i;
index_X4 = @params.index_X4;
orig(self, i, index_X4);
if (_afterFillCharacterVertexBuffers_int_int != null)
{
foreach (Delegates.FillCharacterVertexBuffers_int_int_AfterArgs toInvoke in _afterFillCharacterVertexBuffers_int_int.GetInvocationList())
{
try
{
_afterFillCharacterVertexBuffers_int_int.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookFillCharacterVertexBuffers_int_int_bool()
{
if (!HookedList.Contains("FillCharacterVertexBuffers_int_int_bool"))
{
HookedList.Add("FillCharacterVertexBuffers_int_int_bool");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "FillCharacterVertexBuffers_int_int_bool", true), FillCharacterVertexBuffers_int_int_bool);

}
}
internal static event Delegates.FillCharacterVertexBuffers_int_int_bool_BeforeArgs _beforeFillCharacterVertexBuffers_int_int_bool;
internal static event Delegates.FillCharacterVertexBuffers_int_int_bool_AfterArgs _afterFillCharacterVertexBuffers_int_int_bool;
private static void FillCharacterVertexBuffers_int_int_bool(Action<TMPro.TMP_Text,  int,  int,  bool> orig, TMPro.TMP_Text self,  int i,  int index_X4,  bool isVolumetric)
{
Delegates.Params_FillCharacterVertexBuffers_int_int_bool @params = new() 
{
self = self
, i = i
, index_X4 = index_X4
, isVolumetric = isVolumetric
};
if (_beforeFillCharacterVertexBuffers_int_int_bool != null)
{
foreach (Delegates.FillCharacterVertexBuffers_int_int_bool_BeforeArgs toInvoke in _beforeFillCharacterVertexBuffers_int_int_bool.GetInvocationList())
{
try
{
_beforeFillCharacterVertexBuffers_int_int_bool?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
i = @params.i;
index_X4 = @params.index_X4;
isVolumetric = @params.isVolumetric;
orig(self, i, index_X4, isVolumetric);
if (_afterFillCharacterVertexBuffers_int_int_bool != null)
{
foreach (Delegates.FillCharacterVertexBuffers_int_int_bool_AfterArgs toInvoke in _afterFillCharacterVertexBuffers_int_int_bool.GetInvocationList())
{
try
{
_afterFillCharacterVertexBuffers_int_int_bool.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookFillSpriteVertexBuffers()
{
if (!HookedList.Contains("FillSpriteVertexBuffers"))
{
HookedList.Add("FillSpriteVertexBuffers");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "FillSpriteVertexBuffers", true), FillSpriteVertexBuffers);

}
}
internal static event Delegates.FillSpriteVertexBuffers_BeforeArgs _beforeFillSpriteVertexBuffers;
internal static event Delegates.FillSpriteVertexBuffers_AfterArgs _afterFillSpriteVertexBuffers;
private static void FillSpriteVertexBuffers(Action<TMPro.TMP_Text,  int,  int> orig, TMPro.TMP_Text self,  int i,  int index_X4)
{
Delegates.Params_FillSpriteVertexBuffers @params = new() 
{
self = self
, i = i
, index_X4 = index_X4
};
if (_beforeFillSpriteVertexBuffers != null)
{
foreach (Delegates.FillSpriteVertexBuffers_BeforeArgs toInvoke in _beforeFillSpriteVertexBuffers.GetInvocationList())
{
try
{
_beforeFillSpriteVertexBuffers?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
i = @params.i;
index_X4 = @params.index_X4;
orig(self, i, index_X4);
if (_afterFillSpriteVertexBuffers != null)
{
foreach (Delegates.FillSpriteVertexBuffers_AfterArgs toInvoke in _afterFillSpriteVertexBuffers.GetInvocationList())
{
try
{
_afterFillSpriteVertexBuffers.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDrawUnderlineMesh()
{
if (!HookedList.Contains("DrawUnderlineMesh"))
{
HookedList.Add("DrawUnderlineMesh");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "DrawUnderlineMesh", true), DrawUnderlineMesh);

}
}
internal static event Delegates.DrawUnderlineMesh_BeforeArgs _beforeDrawUnderlineMesh;
internal static event Delegates.DrawUnderlineMesh_AfterArgs _afterDrawUnderlineMesh;
private static void DrawUnderlineMesh(Action<TMPro.TMP_Text,  UnityEngine.Vector3,  UnityEngine.Vector3,  int,  float,  float,  float,  float,  UnityEngine.Color32> orig, TMPro.TMP_Text self,  UnityEngine.Vector3 start,  UnityEngine.Vector3 end,  int index,  float startScale,  float endScale,  float maxScale,  float sdfScale,  UnityEngine.Color32 underlineColor)
{
Delegates.Params_DrawUnderlineMesh @params = new() 
{
self = self
, start = start
, end = end
, index = index
, startScale = startScale
, endScale = endScale
, maxScale = maxScale
, sdfScale = sdfScale
, underlineColor = underlineColor
};
if (_beforeDrawUnderlineMesh != null)
{
foreach (Delegates.DrawUnderlineMesh_BeforeArgs toInvoke in _beforeDrawUnderlineMesh.GetInvocationList())
{
try
{
_beforeDrawUnderlineMesh?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
start = @params.start;
end = @params.end;
index = @params.index;
startScale = @params.startScale;
endScale = @params.endScale;
maxScale = @params.maxScale;
sdfScale = @params.sdfScale;
underlineColor = @params.underlineColor;
orig(self, start, end, index, startScale, endScale, maxScale, sdfScale, underlineColor);
if (_afterDrawUnderlineMesh != null)
{
foreach (Delegates.DrawUnderlineMesh_AfterArgs toInvoke in _afterDrawUnderlineMesh.GetInvocationList())
{
try
{
_afterDrawUnderlineMesh.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetSpecialCharacters()
{
if (!HookedList.Contains("GetSpecialCharacters"))
{
HookedList.Add("GetSpecialCharacters");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetSpecialCharacters", true), GetSpecialCharacters);

}
}
internal static event Delegates.GetSpecialCharacters_BeforeArgs _beforeGetSpecialCharacters;
internal static event Delegates.GetSpecialCharacters_AfterArgs _afterGetSpecialCharacters;
private static void GetSpecialCharacters(Action<TMPro.TMP_Text,  TMPro.TMP_FontAsset> orig, TMPro.TMP_Text self,  TMPro.TMP_FontAsset fontAsset)
{
Delegates.Params_GetSpecialCharacters @params = new() 
{
self = self
, fontAsset = fontAsset
};
if (_beforeGetSpecialCharacters != null)
{
foreach (Delegates.GetSpecialCharacters_BeforeArgs toInvoke in _beforeGetSpecialCharacters.GetInvocationList())
{
try
{
_beforeGetSpecialCharacters?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
fontAsset = @params.fontAsset;
orig(self, fontAsset);
if (_afterGetSpecialCharacters != null)
{
foreach (Delegates.GetSpecialCharacters_AfterArgs toInvoke in _afterGetSpecialCharacters.GetInvocationList())
{
try
{
_afterGetSpecialCharacters.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetFontAssetForWeight()
{
if (!HookedList.Contains("GetFontAssetForWeight"))
{
HookedList.Add("GetFontAssetForWeight");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetFontAssetForWeight", true), GetFontAssetForWeight);

}
}
internal static event Delegates.GetFontAssetForWeight_BeforeArgs _beforeGetFontAssetForWeight;
internal static event Delegates.GetFontAssetForWeight_AfterArgs _afterGetFontAssetForWeight;
private static TMPro.TMP_FontAsset GetFontAssetForWeight(Func<TMPro.TMP_Text,  int, TMPro.TMP_FontAsset> orig, TMPro.TMP_Text self,  int fontWeight)
{
Delegates.Params_GetFontAssetForWeight @params = new() 
{
self = self
, fontWeight = fontWeight
};
if (_beforeGetFontAssetForWeight != null)
{
foreach (Delegates.GetFontAssetForWeight_BeforeArgs toInvoke in _beforeGetFontAssetForWeight.GetInvocationList())
{
try
{
_beforeGetFontAssetForWeight?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
fontWeight = @params.fontWeight;
var retVal = orig(self, fontWeight);
if (_afterGetFontAssetForWeight != null)
{
foreach (Delegates.GetFontAssetForWeight_AfterArgs toInvoke in _afterGetFontAssetForWeight.GetInvocationList())
{
try
{
retVal = _afterGetFontAssetForWeight.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookSetActiveSubMeshes()
{
if (!HookedList.Contains("SetActiveSubMeshes"))
{
HookedList.Add("SetActiveSubMeshes");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetActiveSubMeshes", true), SetActiveSubMeshes);

}
}
internal static event Delegates.SetActiveSubMeshes_BeforeArgs _beforeSetActiveSubMeshes;
internal static event Delegates.SetActiveSubMeshes_AfterArgs _afterSetActiveSubMeshes;
private static void SetActiveSubMeshes(Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool state)
{
Delegates.Params_SetActiveSubMeshes @params = new() 
{
self = self
, state = state
};
if (_beforeSetActiveSubMeshes != null)
{
foreach (Delegates.SetActiveSubMeshes_BeforeArgs toInvoke in _beforeSetActiveSubMeshes.GetInvocationList())
{
try
{
_beforeSetActiveSubMeshes?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
state = @params.state;
orig(self, state);
if (_afterSetActiveSubMeshes != null)
{
foreach (Delegates.SetActiveSubMeshes_AfterArgs toInvoke in _afterSetActiveSubMeshes.GetInvocationList())
{
try
{
_afterSetActiveSubMeshes.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookPackUV_float_float_float()
{
if (!HookedList.Contains("PackUV_float_float_float"))
{
HookedList.Add("PackUV_float_float_float");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "PackUV_float_float_float", true), PackUV_float_float_float);

}
}
internal static event Delegates.PackUV_float_float_float_BeforeArgs _beforePackUV_float_float_float;
internal static event Delegates.PackUV_float_float_float_AfterArgs _afterPackUV_float_float_float;
private static UnityEngine.Vector2 PackUV_float_float_float(Func<TMPro.TMP_Text,  float,  float,  float, UnityEngine.Vector2> orig, TMPro.TMP_Text self,  float x,  float y,  float scale)
{
Delegates.Params_PackUV_float_float_float @params = new() 
{
self = self
, x = x
, y = y
, scale = scale
};
if (_beforePackUV_float_float_float != null)
{
foreach (Delegates.PackUV_float_float_float_BeforeArgs toInvoke in _beforePackUV_float_float_float.GetInvocationList())
{
try
{
_beforePackUV_float_float_float?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
x = @params.x;
y = @params.y;
scale = @params.scale;
var retVal = orig(self, x, y, scale);
if (_afterPackUV_float_float_float != null)
{
foreach (Delegates.PackUV_float_float_float_AfterArgs toInvoke in _afterPackUV_float_float_float.GetInvocationList())
{
try
{
retVal = _afterPackUV_float_float_float.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookPackUV_float_float()
{
if (!HookedList.Contains("PackUV_float_float"))
{
HookedList.Add("PackUV_float_float");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "PackUV_float_float", true), PackUV_float_float);

}
}
internal static event Delegates.PackUV_float_float_BeforeArgs _beforePackUV_float_float;
internal static event Delegates.PackUV_float_float_AfterArgs _afterPackUV_float_float;
private static float PackUV_float_float(Func<TMPro.TMP_Text,  float,  float, float> orig, TMPro.TMP_Text self,  float x,  float y)
{
Delegates.Params_PackUV_float_float @params = new() 
{
self = self
, x = x
, y = y
};
if (_beforePackUV_float_float != null)
{
foreach (Delegates.PackUV_float_float_BeforeArgs toInvoke in _beforePackUV_float_float.GetInvocationList())
{
try
{
_beforePackUV_float_float?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
x = @params.x;
y = @params.y;
var retVal = orig(self, x, y);
if (_afterPackUV_float_float != null)
{
foreach (Delegates.PackUV_float_float_AfterArgs toInvoke in _afterPackUV_float_float.GetInvocationList())
{
try
{
retVal = _afterPackUV_float_float.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookHexToInt()
{
if (!HookedList.Contains("HexToInt"))
{
HookedList.Add("HexToInt");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "HexToInt", true), HexToInt);

}
}
internal static event Delegates.HexToInt_BeforeArgs _beforeHexToInt;
internal static event Delegates.HexToInt_AfterArgs _afterHexToInt;
private static int HexToInt(Func<TMPro.TMP_Text,  char, int> orig, TMPro.TMP_Text self,  char hex)
{
Delegates.Params_HexToInt @params = new() 
{
self = self
, hex = hex
};
if (_beforeHexToInt != null)
{
foreach (Delegates.HexToInt_BeforeArgs toInvoke in _beforeHexToInt.GetInvocationList())
{
try
{
_beforeHexToInt?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
hex = @params.hex;
var retVal = orig(self, hex);
if (_afterHexToInt != null)
{
foreach (Delegates.HexToInt_AfterArgs toInvoke in _afterHexToInt.GetInvocationList())
{
try
{
retVal = _afterHexToInt.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetUTF16()
{
if (!HookedList.Contains("GetUTF16"))
{
HookedList.Add("GetUTF16");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetUTF16", true), GetUTF16);

}
}
internal static event Delegates.GetUTF16_BeforeArgs _beforeGetUTF16;
internal static event Delegates.GetUTF16_AfterArgs _afterGetUTF16;
private static int GetUTF16(Func<TMPro.TMP_Text,  int, int> orig, TMPro.TMP_Text self,  int i)
{
Delegates.Params_GetUTF16 @params = new() 
{
self = self
, i = i
};
if (_beforeGetUTF16 != null)
{
foreach (Delegates.GetUTF16_BeforeArgs toInvoke in _beforeGetUTF16.GetInvocationList())
{
try
{
_beforeGetUTF16?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
i = @params.i;
var retVal = orig(self, i);
if (_afterGetUTF16 != null)
{
foreach (Delegates.GetUTF16_AfterArgs toInvoke in _afterGetUTF16.GetInvocationList())
{
try
{
retVal = _afterGetUTF16.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetUTF32()
{
if (!HookedList.Contains("GetUTF32"))
{
HookedList.Add("GetUTF32");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetUTF32", true), GetUTF32);

}
}
internal static event Delegates.GetUTF32_BeforeArgs _beforeGetUTF32;
internal static event Delegates.GetUTF32_AfterArgs _afterGetUTF32;
private static int GetUTF32(Func<TMPro.TMP_Text,  int, int> orig, TMPro.TMP_Text self,  int i)
{
Delegates.Params_GetUTF32 @params = new() 
{
self = self
, i = i
};
if (_beforeGetUTF32 != null)
{
foreach (Delegates.GetUTF32_BeforeArgs toInvoke in _beforeGetUTF32.GetInvocationList())
{
try
{
_beforeGetUTF32?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
i = @params.i;
var retVal = orig(self, i);
if (_afterGetUTF32 != null)
{
foreach (Delegates.GetUTF32_AfterArgs toInvoke in _afterGetUTF32.GetInvocationList())
{
try
{
retVal = _afterGetUTF32.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookHexCharsToColor_Array_int()
{
if (!HookedList.Contains("HexCharsToColor_Array_int"))
{
HookedList.Add("HexCharsToColor_Array_int");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "HexCharsToColor_Array_int", true), HexCharsToColor_Array_int);

}
}
internal static event Delegates.HexCharsToColor_Array_int_BeforeArgs _beforeHexCharsToColor_Array_int;
internal static event Delegates.HexCharsToColor_Array_int_AfterArgs _afterHexCharsToColor_Array_int;
private static UnityEngine.Color32 HexCharsToColor_Array_int(Func<TMPro.TMP_Text,  char[],  int, UnityEngine.Color32> orig, TMPro.TMP_Text self,  char[] hexChars,  int tagCount)
{
Delegates.Params_HexCharsToColor_Array_int @params = new() 
{
self = self
, hexChars = hexChars
, tagCount = tagCount
};
if (_beforeHexCharsToColor_Array_int != null)
{
foreach (Delegates.HexCharsToColor_Array_int_BeforeArgs toInvoke in _beforeHexCharsToColor_Array_int.GetInvocationList())
{
try
{
_beforeHexCharsToColor_Array_int?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
hexChars = @params.hexChars;
tagCount = @params.tagCount;
var retVal = orig(self, hexChars, tagCount);
if (_afterHexCharsToColor_Array_int != null)
{
foreach (Delegates.HexCharsToColor_Array_int_AfterArgs toInvoke in _afterHexCharsToColor_Array_int.GetInvocationList())
{
try
{
retVal = _afterHexCharsToColor_Array_int.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookHexCharsToColor_Array_int_int()
{
if (!HookedList.Contains("HexCharsToColor_Array_int_int"))
{
HookedList.Add("HexCharsToColor_Array_int_int");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "HexCharsToColor_Array_int_int", true), HexCharsToColor_Array_int_int);

}
}
internal static event Delegates.HexCharsToColor_Array_int_int_BeforeArgs _beforeHexCharsToColor_Array_int_int;
internal static event Delegates.HexCharsToColor_Array_int_int_AfterArgs _afterHexCharsToColor_Array_int_int;
private static UnityEngine.Color32 HexCharsToColor_Array_int_int(Func<TMPro.TMP_Text,  char[],  int,  int, UnityEngine.Color32> orig, TMPro.TMP_Text self,  char[] hexChars,  int startIndex,  int length)
{
Delegates.Params_HexCharsToColor_Array_int_int @params = new() 
{
self = self
, hexChars = hexChars
, startIndex = startIndex
, length = length
};
if (_beforeHexCharsToColor_Array_int_int != null)
{
foreach (Delegates.HexCharsToColor_Array_int_int_BeforeArgs toInvoke in _beforeHexCharsToColor_Array_int_int.GetInvocationList())
{
try
{
_beforeHexCharsToColor_Array_int_int?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
hexChars = @params.hexChars;
startIndex = @params.startIndex;
length = @params.length;
var retVal = orig(self, hexChars, startIndex, length);
if (_afterHexCharsToColor_Array_int_int != null)
{
foreach (Delegates.HexCharsToColor_Array_int_int_AfterArgs toInvoke in _afterHexCharsToColor_Array_int_int.GetInvocationList())
{
try
{
retVal = _afterHexCharsToColor_Array_int_int.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookConvertToFloat()
{
if (!HookedList.Contains("ConvertToFloat"))
{
HookedList.Add("ConvertToFloat");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "ConvertToFloat", true), ConvertToFloat);

}
}
internal static event Delegates.ConvertToFloat_BeforeArgs _beforeConvertToFloat;
internal static event Delegates.ConvertToFloat_AfterArgs _afterConvertToFloat;
private static float ConvertToFloat(Func<TMPro.TMP_Text,  char[],  int,  int,  int, float> orig, TMPro.TMP_Text self,  char[] chars,  int startIndex,  int length,  int decimalPointIndex)
{
Delegates.Params_ConvertToFloat @params = new() 
{
self = self
, chars = chars
, startIndex = startIndex
, length = length
, decimalPointIndex = decimalPointIndex
};
if (_beforeConvertToFloat != null)
{
foreach (Delegates.ConvertToFloat_BeforeArgs toInvoke in _beforeConvertToFloat.GetInvocationList())
{
try
{
_beforeConvertToFloat?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
chars = @params.chars;
startIndex = @params.startIndex;
length = @params.length;
decimalPointIndex = @params.decimalPointIndex;
var retVal = orig(self, chars, startIndex, length, decimalPointIndex);
if (_afterConvertToFloat != null)
{
foreach (Delegates.ConvertToFloat_AfterArgs toInvoke in _afterConvertToFloat.GetInvocationList())
{
try
{
retVal = _afterConvertToFloat.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookValidateHtmlTag()
{
if (!HookedList.Contains("ValidateHtmlTag"))
{
HookedList.Add("ValidateHtmlTag");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "ValidateHtmlTag", true), ValidateHtmlTag);

}
}
internal static event Delegates.ValidateHtmlTag_BeforeArgs _beforeValidateHtmlTag;
internal static event Delegates.ValidateHtmlTag_AfterArgs _afterValidateHtmlTag;
private static bool ValidateHtmlTag(Func<TMPro.TMP_Text,  int[],  int,  int, bool> orig, TMPro.TMP_Text self,  int[] chars,  int startIndex,  int endIndex)
{
Delegates.Params_ValidateHtmlTag @params = new() 
{
self = self
, chars = chars
, startIndex = startIndex
, endIndex = endIndex
};
if (_beforeValidateHtmlTag != null)
{
foreach (Delegates.ValidateHtmlTag_BeforeArgs toInvoke in _beforeValidateHtmlTag.GetInvocationList())
{
try
{
_beforeValidateHtmlTag?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
chars = @params.chars;
startIndex = @params.startIndex;
endIndex = @params.endIndex;
var retVal = orig(self, chars, startIndex, endIndex);
if (_afterValidateHtmlTag != null)
{
foreach (Delegates.ValidateHtmlTag_AfterArgs toInvoke in _afterValidateHtmlTag.GetInvocationList())
{
try
{
retVal = _afterValidateHtmlTag.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_text
{
public TMPro.TMP_Text self;
}
public delegate void get_text_BeforeArgs(Params_get_text args);
public delegate string get_text_AfterArgs(Params_get_text args, string ret);
public delegate string get_text_WithArgs (Func<TMPro.TMP_Text, string> orig, TMPro.TMP_Text self);
public sealed class Params_set_text
{
public TMPro.TMP_Text self;
public string value;
}
public delegate void set_text_BeforeArgs(Params_set_text args);
public delegate void set_text_AfterArgs(Params_set_text args);
public delegate void set_text_WithArgs (Action<TMPro.TMP_Text,  string> orig, TMPro.TMP_Text self,  string value);
public sealed class Params_get_isRightToLeftText
{
public TMPro.TMP_Text self;
}
public delegate void get_isRightToLeftText_BeforeArgs(Params_get_isRightToLeftText args);
public delegate bool get_isRightToLeftText_AfterArgs(Params_get_isRightToLeftText args, bool ret);
public delegate bool get_isRightToLeftText_WithArgs (Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self);
public sealed class Params_set_isRightToLeftText
{
public TMPro.TMP_Text self;
public bool value;
}
public delegate void set_isRightToLeftText_BeforeArgs(Params_set_isRightToLeftText args);
public delegate void set_isRightToLeftText_AfterArgs(Params_set_isRightToLeftText args);
public delegate void set_isRightToLeftText_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value);
public sealed class Params_get_font
{
public TMPro.TMP_Text self;
}
public delegate void get_font_BeforeArgs(Params_get_font args);
public delegate TMPro.TMP_FontAsset get_font_AfterArgs(Params_get_font args, TMPro.TMP_FontAsset ret);
public delegate TMPro.TMP_FontAsset get_font_WithArgs (Func<TMPro.TMP_Text, TMPro.TMP_FontAsset> orig, TMPro.TMP_Text self);
public sealed class Params_set_font
{
public TMPro.TMP_Text self;
public TMPro.TMP_FontAsset value;
}
public delegate void set_font_BeforeArgs(Params_set_font args);
public delegate void set_font_AfterArgs(Params_set_font args);
public delegate void set_font_WithArgs (Action<TMPro.TMP_Text,  TMPro.TMP_FontAsset> orig, TMPro.TMP_Text self,  TMPro.TMP_FontAsset value);
public sealed class Params_get_fontSharedMaterial
{
public TMPro.TMP_Text self;
}
public delegate void get_fontSharedMaterial_BeforeArgs(Params_get_fontSharedMaterial args);
public delegate UnityEngine.Material get_fontSharedMaterial_AfterArgs(Params_get_fontSharedMaterial args, UnityEngine.Material ret);
public delegate UnityEngine.Material get_fontSharedMaterial_WithArgs (Func<TMPro.TMP_Text, UnityEngine.Material> orig, TMPro.TMP_Text self);
public sealed class Params_set_fontSharedMaterial
{
public TMPro.TMP_Text self;
public UnityEngine.Material value;
}
public delegate void set_fontSharedMaterial_BeforeArgs(Params_set_fontSharedMaterial args);
public delegate void set_fontSharedMaterial_AfterArgs(Params_set_fontSharedMaterial args);
public delegate void set_fontSharedMaterial_WithArgs (Action<TMPro.TMP_Text,  UnityEngine.Material> orig, TMPro.TMP_Text self,  UnityEngine.Material value);
public sealed class Params_get_fontSharedMaterials
{
public TMPro.TMP_Text self;
}
public delegate void get_fontSharedMaterials_BeforeArgs(Params_get_fontSharedMaterials args);
public delegate UnityEngine.Material[] get_fontSharedMaterials_AfterArgs(Params_get_fontSharedMaterials args, UnityEngine.Material[] ret);
public delegate UnityEngine.Material[] get_fontSharedMaterials_WithArgs (Func<TMPro.TMP_Text, UnityEngine.Material[]> orig, TMPro.TMP_Text self);
public sealed class Params_set_fontSharedMaterials
{
public TMPro.TMP_Text self;
public UnityEngine.Material[] value;
}
public delegate void set_fontSharedMaterials_BeforeArgs(Params_set_fontSharedMaterials args);
public delegate void set_fontSharedMaterials_AfterArgs(Params_set_fontSharedMaterials args);
public delegate void set_fontSharedMaterials_WithArgs (Action<TMPro.TMP_Text,  UnityEngine.Material[]> orig, TMPro.TMP_Text self,  UnityEngine.Material[] value);
public sealed class Params_get_fontMaterial
{
public TMPro.TMP_Text self;
}
public delegate void get_fontMaterial_BeforeArgs(Params_get_fontMaterial args);
public delegate UnityEngine.Material get_fontMaterial_AfterArgs(Params_get_fontMaterial args, UnityEngine.Material ret);
public delegate UnityEngine.Material get_fontMaterial_WithArgs (Func<TMPro.TMP_Text, UnityEngine.Material> orig, TMPro.TMP_Text self);
public sealed class Params_set_fontMaterial
{
public TMPro.TMP_Text self;
public UnityEngine.Material value;
}
public delegate void set_fontMaterial_BeforeArgs(Params_set_fontMaterial args);
public delegate void set_fontMaterial_AfterArgs(Params_set_fontMaterial args);
public delegate void set_fontMaterial_WithArgs (Action<TMPro.TMP_Text,  UnityEngine.Material> orig, TMPro.TMP_Text self,  UnityEngine.Material value);
public sealed class Params_get_fontMaterials
{
public TMPro.TMP_Text self;
}
public delegate void get_fontMaterials_BeforeArgs(Params_get_fontMaterials args);
public delegate UnityEngine.Material[] get_fontMaterials_AfterArgs(Params_get_fontMaterials args, UnityEngine.Material[] ret);
public delegate UnityEngine.Material[] get_fontMaterials_WithArgs (Func<TMPro.TMP_Text, UnityEngine.Material[]> orig, TMPro.TMP_Text self);
public sealed class Params_set_fontMaterials
{
public TMPro.TMP_Text self;
public UnityEngine.Material[] value;
}
public delegate void set_fontMaterials_BeforeArgs(Params_set_fontMaterials args);
public delegate void set_fontMaterials_AfterArgs(Params_set_fontMaterials args);
public delegate void set_fontMaterials_WithArgs (Action<TMPro.TMP_Text,  UnityEngine.Material[]> orig, TMPro.TMP_Text self,  UnityEngine.Material[] value);
public sealed class Params_get_color
{
public TMPro.TMP_Text self;
}
public delegate void get_color_BeforeArgs(Params_get_color args);
public delegate UnityEngine.Color get_color_AfterArgs(Params_get_color args, UnityEngine.Color ret);
public delegate UnityEngine.Color get_color_WithArgs (Func<TMPro.TMP_Text, UnityEngine.Color> orig, TMPro.TMP_Text self);
public sealed class Params_set_color
{
public TMPro.TMP_Text self;
public UnityEngine.Color value;
}
public delegate void set_color_BeforeArgs(Params_set_color args);
public delegate void set_color_AfterArgs(Params_set_color args);
public delegate void set_color_WithArgs (Action<TMPro.TMP_Text,  UnityEngine.Color> orig, TMPro.TMP_Text self,  UnityEngine.Color value);
public sealed class Params_get_alpha
{
public TMPro.TMP_Text self;
}
public delegate void get_alpha_BeforeArgs(Params_get_alpha args);
public delegate float get_alpha_AfterArgs(Params_get_alpha args, float ret);
public delegate float get_alpha_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_set_alpha
{
public TMPro.TMP_Text self;
public float value;
}
public delegate void set_alpha_BeforeArgs(Params_set_alpha args);
public delegate void set_alpha_AfterArgs(Params_set_alpha args);
public delegate void set_alpha_WithArgs (Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float value);
public sealed class Params_get_enableVertexGradient
{
public TMPro.TMP_Text self;
}
public delegate void get_enableVertexGradient_BeforeArgs(Params_get_enableVertexGradient args);
public delegate bool get_enableVertexGradient_AfterArgs(Params_get_enableVertexGradient args, bool ret);
public delegate bool get_enableVertexGradient_WithArgs (Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self);
public sealed class Params_set_enableVertexGradient
{
public TMPro.TMP_Text self;
public bool value;
}
public delegate void set_enableVertexGradient_BeforeArgs(Params_set_enableVertexGradient args);
public delegate void set_enableVertexGradient_AfterArgs(Params_set_enableVertexGradient args);
public delegate void set_enableVertexGradient_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value);
public sealed class Params_get_colorGradient
{
public TMPro.TMP_Text self;
}
public delegate void get_colorGradient_BeforeArgs(Params_get_colorGradient args);
public delegate TMPro.VertexGradient get_colorGradient_AfterArgs(Params_get_colorGradient args, TMPro.VertexGradient ret);
public delegate TMPro.VertexGradient get_colorGradient_WithArgs (Func<TMPro.TMP_Text, TMPro.VertexGradient> orig, TMPro.TMP_Text self);
public sealed class Params_set_colorGradient
{
public TMPro.TMP_Text self;
public TMPro.VertexGradient value;
}
public delegate void set_colorGradient_BeforeArgs(Params_set_colorGradient args);
public delegate void set_colorGradient_AfterArgs(Params_set_colorGradient args);
public delegate void set_colorGradient_WithArgs (Action<TMPro.TMP_Text,  TMPro.VertexGradient> orig, TMPro.TMP_Text self,  TMPro.VertexGradient value);
public sealed class Params_get_colorGradientPreset
{
public TMPro.TMP_Text self;
}
public delegate void get_colorGradientPreset_BeforeArgs(Params_get_colorGradientPreset args);
public delegate TMPro.TMP_ColorGradient get_colorGradientPreset_AfterArgs(Params_get_colorGradientPreset args, TMPro.TMP_ColorGradient ret);
public delegate TMPro.TMP_ColorGradient get_colorGradientPreset_WithArgs (Func<TMPro.TMP_Text, TMPro.TMP_ColorGradient> orig, TMPro.TMP_Text self);
public sealed class Params_set_colorGradientPreset
{
public TMPro.TMP_Text self;
public TMPro.TMP_ColorGradient value;
}
public delegate void set_colorGradientPreset_BeforeArgs(Params_set_colorGradientPreset args);
public delegate void set_colorGradientPreset_AfterArgs(Params_set_colorGradientPreset args);
public delegate void set_colorGradientPreset_WithArgs (Action<TMPro.TMP_Text,  TMPro.TMP_ColorGradient> orig, TMPro.TMP_Text self,  TMPro.TMP_ColorGradient value);
public sealed class Params_get_spriteAsset
{
public TMPro.TMP_Text self;
}
public delegate void get_spriteAsset_BeforeArgs(Params_get_spriteAsset args);
public delegate TMPro.TMP_SpriteAsset get_spriteAsset_AfterArgs(Params_get_spriteAsset args, TMPro.TMP_SpriteAsset ret);
public delegate TMPro.TMP_SpriteAsset get_spriteAsset_WithArgs (Func<TMPro.TMP_Text, TMPro.TMP_SpriteAsset> orig, TMPro.TMP_Text self);
public sealed class Params_set_spriteAsset
{
public TMPro.TMP_Text self;
public TMPro.TMP_SpriteAsset value;
}
public delegate void set_spriteAsset_BeforeArgs(Params_set_spriteAsset args);
public delegate void set_spriteAsset_AfterArgs(Params_set_spriteAsset args);
public delegate void set_spriteAsset_WithArgs (Action<TMPro.TMP_Text,  TMPro.TMP_SpriteAsset> orig, TMPro.TMP_Text self,  TMPro.TMP_SpriteAsset value);
public sealed class Params_get_tintAllSprites
{
public TMPro.TMP_Text self;
}
public delegate void get_tintAllSprites_BeforeArgs(Params_get_tintAllSprites args);
public delegate bool get_tintAllSprites_AfterArgs(Params_get_tintAllSprites args, bool ret);
public delegate bool get_tintAllSprites_WithArgs (Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self);
public sealed class Params_set_tintAllSprites
{
public TMPro.TMP_Text self;
public bool value;
}
public delegate void set_tintAllSprites_BeforeArgs(Params_set_tintAllSprites args);
public delegate void set_tintAllSprites_AfterArgs(Params_set_tintAllSprites args);
public delegate void set_tintAllSprites_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value);
public sealed class Params_get_overrideColorTags
{
public TMPro.TMP_Text self;
}
public delegate void get_overrideColorTags_BeforeArgs(Params_get_overrideColorTags args);
public delegate bool get_overrideColorTags_AfterArgs(Params_get_overrideColorTags args, bool ret);
public delegate bool get_overrideColorTags_WithArgs (Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self);
public sealed class Params_set_overrideColorTags
{
public TMPro.TMP_Text self;
public bool value;
}
public delegate void set_overrideColorTags_BeforeArgs(Params_set_overrideColorTags args);
public delegate void set_overrideColorTags_AfterArgs(Params_set_overrideColorTags args);
public delegate void set_overrideColorTags_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value);
public sealed class Params_get_faceColor
{
public TMPro.TMP_Text self;
}
public delegate void get_faceColor_BeforeArgs(Params_get_faceColor args);
public delegate UnityEngine.Color32 get_faceColor_AfterArgs(Params_get_faceColor args, UnityEngine.Color32 ret);
public delegate UnityEngine.Color32 get_faceColor_WithArgs (Func<TMPro.TMP_Text, UnityEngine.Color32> orig, TMPro.TMP_Text self);
public sealed class Params_set_faceColor
{
public TMPro.TMP_Text self;
public UnityEngine.Color32 value;
}
public delegate void set_faceColor_BeforeArgs(Params_set_faceColor args);
public delegate void set_faceColor_AfterArgs(Params_set_faceColor args);
public delegate void set_faceColor_WithArgs (Action<TMPro.TMP_Text,  UnityEngine.Color32> orig, TMPro.TMP_Text self,  UnityEngine.Color32 value);
public sealed class Params_get_outlineColor
{
public TMPro.TMP_Text self;
}
public delegate void get_outlineColor_BeforeArgs(Params_get_outlineColor args);
public delegate UnityEngine.Color32 get_outlineColor_AfterArgs(Params_get_outlineColor args, UnityEngine.Color32 ret);
public delegate UnityEngine.Color32 get_outlineColor_WithArgs (Func<TMPro.TMP_Text, UnityEngine.Color32> orig, TMPro.TMP_Text self);
public sealed class Params_set_outlineColor
{
public TMPro.TMP_Text self;
public UnityEngine.Color32 value;
}
public delegate void set_outlineColor_BeforeArgs(Params_set_outlineColor args);
public delegate void set_outlineColor_AfterArgs(Params_set_outlineColor args);
public delegate void set_outlineColor_WithArgs (Action<TMPro.TMP_Text,  UnityEngine.Color32> orig, TMPro.TMP_Text self,  UnityEngine.Color32 value);
public sealed class Params_get_outlineWidth
{
public TMPro.TMP_Text self;
}
public delegate void get_outlineWidth_BeforeArgs(Params_get_outlineWidth args);
public delegate float get_outlineWidth_AfterArgs(Params_get_outlineWidth args, float ret);
public delegate float get_outlineWidth_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_set_outlineWidth
{
public TMPro.TMP_Text self;
public float value;
}
public delegate void set_outlineWidth_BeforeArgs(Params_set_outlineWidth args);
public delegate void set_outlineWidth_AfterArgs(Params_set_outlineWidth args);
public delegate void set_outlineWidth_WithArgs (Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float value);
public sealed class Params_get_fontSize
{
public TMPro.TMP_Text self;
}
public delegate void get_fontSize_BeforeArgs(Params_get_fontSize args);
public delegate float get_fontSize_AfterArgs(Params_get_fontSize args, float ret);
public delegate float get_fontSize_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_set_fontSize
{
public TMPro.TMP_Text self;
public float value;
}
public delegate void set_fontSize_BeforeArgs(Params_set_fontSize args);
public delegate void set_fontSize_AfterArgs(Params_set_fontSize args);
public delegate void set_fontSize_WithArgs (Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float value);
public sealed class Params_get_fontScale
{
public TMPro.TMP_Text self;
}
public delegate void get_fontScale_BeforeArgs(Params_get_fontScale args);
public delegate float get_fontScale_AfterArgs(Params_get_fontScale args, float ret);
public delegate float get_fontScale_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_get_fontWeight
{
public TMPro.TMP_Text self;
}
public delegate void get_fontWeight_BeforeArgs(Params_get_fontWeight args);
public delegate int get_fontWeight_AfterArgs(Params_get_fontWeight args, int ret);
public delegate int get_fontWeight_WithArgs (Func<TMPro.TMP_Text, int> orig, TMPro.TMP_Text self);
public sealed class Params_set_fontWeight
{
public TMPro.TMP_Text self;
public int value;
}
public delegate void set_fontWeight_BeforeArgs(Params_set_fontWeight args);
public delegate void set_fontWeight_AfterArgs(Params_set_fontWeight args);
public delegate void set_fontWeight_WithArgs (Action<TMPro.TMP_Text,  int> orig, TMPro.TMP_Text self,  int value);
public sealed class Params_get_pixelsPerUnit
{
public TMPro.TMP_Text self;
}
public delegate void get_pixelsPerUnit_BeforeArgs(Params_get_pixelsPerUnit args);
public delegate float get_pixelsPerUnit_AfterArgs(Params_get_pixelsPerUnit args, float ret);
public delegate float get_pixelsPerUnit_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_get_enableAutoSizing
{
public TMPro.TMP_Text self;
}
public delegate void get_enableAutoSizing_BeforeArgs(Params_get_enableAutoSizing args);
public delegate bool get_enableAutoSizing_AfterArgs(Params_get_enableAutoSizing args, bool ret);
public delegate bool get_enableAutoSizing_WithArgs (Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self);
public sealed class Params_set_enableAutoSizing
{
public TMPro.TMP_Text self;
public bool value;
}
public delegate void set_enableAutoSizing_BeforeArgs(Params_set_enableAutoSizing args);
public delegate void set_enableAutoSizing_AfterArgs(Params_set_enableAutoSizing args);
public delegate void set_enableAutoSizing_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value);
public sealed class Params_get_fontSizeMin
{
public TMPro.TMP_Text self;
}
public delegate void get_fontSizeMin_BeforeArgs(Params_get_fontSizeMin args);
public delegate float get_fontSizeMin_AfterArgs(Params_get_fontSizeMin args, float ret);
public delegate float get_fontSizeMin_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_set_fontSizeMin
{
public TMPro.TMP_Text self;
public float value;
}
public delegate void set_fontSizeMin_BeforeArgs(Params_set_fontSizeMin args);
public delegate void set_fontSizeMin_AfterArgs(Params_set_fontSizeMin args);
public delegate void set_fontSizeMin_WithArgs (Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float value);
public sealed class Params_get_fontSizeMax
{
public TMPro.TMP_Text self;
}
public delegate void get_fontSizeMax_BeforeArgs(Params_get_fontSizeMax args);
public delegate float get_fontSizeMax_AfterArgs(Params_get_fontSizeMax args, float ret);
public delegate float get_fontSizeMax_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_set_fontSizeMax
{
public TMPro.TMP_Text self;
public float value;
}
public delegate void set_fontSizeMax_BeforeArgs(Params_set_fontSizeMax args);
public delegate void set_fontSizeMax_AfterArgs(Params_set_fontSizeMax args);
public delegate void set_fontSizeMax_WithArgs (Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float value);
public sealed class Params_get_fontStyle
{
public TMPro.TMP_Text self;
}
public delegate void get_fontStyle_BeforeArgs(Params_get_fontStyle args);
public delegate TMPro.FontStyles get_fontStyle_AfterArgs(Params_get_fontStyle args, TMPro.FontStyles ret);
public delegate TMPro.FontStyles get_fontStyle_WithArgs (Func<TMPro.TMP_Text, TMPro.FontStyles> orig, TMPro.TMP_Text self);
public sealed class Params_set_fontStyle
{
public TMPro.TMP_Text self;
public TMPro.FontStyles value;
}
public delegate void set_fontStyle_BeforeArgs(Params_set_fontStyle args);
public delegate void set_fontStyle_AfterArgs(Params_set_fontStyle args);
public delegate void set_fontStyle_WithArgs (Action<TMPro.TMP_Text,  TMPro.FontStyles> orig, TMPro.TMP_Text self,  TMPro.FontStyles value);
public sealed class Params_get_isUsingBold
{
public TMPro.TMP_Text self;
}
public delegate void get_isUsingBold_BeforeArgs(Params_get_isUsingBold args);
public delegate bool get_isUsingBold_AfterArgs(Params_get_isUsingBold args, bool ret);
public delegate bool get_isUsingBold_WithArgs (Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self);
public sealed class Params_get_alignment
{
public TMPro.TMP_Text self;
}
public delegate void get_alignment_BeforeArgs(Params_get_alignment args);
public delegate TMPro.TextAlignmentOptions get_alignment_AfterArgs(Params_get_alignment args, TMPro.TextAlignmentOptions ret);
public delegate TMPro.TextAlignmentOptions get_alignment_WithArgs (Func<TMPro.TMP_Text, TMPro.TextAlignmentOptions> orig, TMPro.TMP_Text self);
public sealed class Params_set_alignment
{
public TMPro.TMP_Text self;
public TMPro.TextAlignmentOptions value;
}
public delegate void set_alignment_BeforeArgs(Params_set_alignment args);
public delegate void set_alignment_AfterArgs(Params_set_alignment args);
public delegate void set_alignment_WithArgs (Action<TMPro.TMP_Text,  TMPro.TextAlignmentOptions> orig, TMPro.TMP_Text self,  TMPro.TextAlignmentOptions value);
public sealed class Params_get_characterSpacing
{
public TMPro.TMP_Text self;
}
public delegate void get_characterSpacing_BeforeArgs(Params_get_characterSpacing args);
public delegate float get_characterSpacing_AfterArgs(Params_get_characterSpacing args, float ret);
public delegate float get_characterSpacing_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_set_characterSpacing
{
public TMPro.TMP_Text self;
public float value;
}
public delegate void set_characterSpacing_BeforeArgs(Params_set_characterSpacing args);
public delegate void set_characterSpacing_AfterArgs(Params_set_characterSpacing args);
public delegate void set_characterSpacing_WithArgs (Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float value);
public sealed class Params_get_lineSpacing
{
public TMPro.TMP_Text self;
}
public delegate void get_lineSpacing_BeforeArgs(Params_get_lineSpacing args);
public delegate float get_lineSpacing_AfterArgs(Params_get_lineSpacing args, float ret);
public delegate float get_lineSpacing_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_set_lineSpacing
{
public TMPro.TMP_Text self;
public float value;
}
public delegate void set_lineSpacing_BeforeArgs(Params_set_lineSpacing args);
public delegate void set_lineSpacing_AfterArgs(Params_set_lineSpacing args);
public delegate void set_lineSpacing_WithArgs (Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float value);
public sealed class Params_get_paragraphSpacing
{
public TMPro.TMP_Text self;
}
public delegate void get_paragraphSpacing_BeforeArgs(Params_get_paragraphSpacing args);
public delegate float get_paragraphSpacing_AfterArgs(Params_get_paragraphSpacing args, float ret);
public delegate float get_paragraphSpacing_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_set_paragraphSpacing
{
public TMPro.TMP_Text self;
public float value;
}
public delegate void set_paragraphSpacing_BeforeArgs(Params_set_paragraphSpacing args);
public delegate void set_paragraphSpacing_AfterArgs(Params_set_paragraphSpacing args);
public delegate void set_paragraphSpacing_WithArgs (Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float value);
public sealed class Params_get_characterWidthAdjustment
{
public TMPro.TMP_Text self;
}
public delegate void get_characterWidthAdjustment_BeforeArgs(Params_get_characterWidthAdjustment args);
public delegate float get_characterWidthAdjustment_AfterArgs(Params_get_characterWidthAdjustment args, float ret);
public delegate float get_characterWidthAdjustment_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_set_characterWidthAdjustment
{
public TMPro.TMP_Text self;
public float value;
}
public delegate void set_characterWidthAdjustment_BeforeArgs(Params_set_characterWidthAdjustment args);
public delegate void set_characterWidthAdjustment_AfterArgs(Params_set_characterWidthAdjustment args);
public delegate void set_characterWidthAdjustment_WithArgs (Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float value);
public sealed class Params_get_enableWordWrapping
{
public TMPro.TMP_Text self;
}
public delegate void get_enableWordWrapping_BeforeArgs(Params_get_enableWordWrapping args);
public delegate bool get_enableWordWrapping_AfterArgs(Params_get_enableWordWrapping args, bool ret);
public delegate bool get_enableWordWrapping_WithArgs (Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self);
public sealed class Params_set_enableWordWrapping
{
public TMPro.TMP_Text self;
public bool value;
}
public delegate void set_enableWordWrapping_BeforeArgs(Params_set_enableWordWrapping args);
public delegate void set_enableWordWrapping_AfterArgs(Params_set_enableWordWrapping args);
public delegate void set_enableWordWrapping_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value);
public sealed class Params_get_wordWrappingRatios
{
public TMPro.TMP_Text self;
}
public delegate void get_wordWrappingRatios_BeforeArgs(Params_get_wordWrappingRatios args);
public delegate float get_wordWrappingRatios_AfterArgs(Params_get_wordWrappingRatios args, float ret);
public delegate float get_wordWrappingRatios_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_set_wordWrappingRatios
{
public TMPro.TMP_Text self;
public float value;
}
public delegate void set_wordWrappingRatios_BeforeArgs(Params_set_wordWrappingRatios args);
public delegate void set_wordWrappingRatios_AfterArgs(Params_set_wordWrappingRatios args);
public delegate void set_wordWrappingRatios_WithArgs (Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float value);
public sealed class Params_get_enableAdaptiveJustification
{
public TMPro.TMP_Text self;
}
public delegate void get_enableAdaptiveJustification_BeforeArgs(Params_get_enableAdaptiveJustification args);
public delegate bool get_enableAdaptiveJustification_AfterArgs(Params_get_enableAdaptiveJustification args, bool ret);
public delegate bool get_enableAdaptiveJustification_WithArgs (Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self);
public sealed class Params_set_enableAdaptiveJustification
{
public TMPro.TMP_Text self;
public bool value;
}
public delegate void set_enableAdaptiveJustification_BeforeArgs(Params_set_enableAdaptiveJustification args);
public delegate void set_enableAdaptiveJustification_AfterArgs(Params_set_enableAdaptiveJustification args);
public delegate void set_enableAdaptiveJustification_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value);
public sealed class Params_get_OverflowMode
{
public TMPro.TMP_Text self;
}
public delegate void get_OverflowMode_BeforeArgs(Params_get_OverflowMode args);
public delegate TMPro.TextOverflowModes get_OverflowMode_AfterArgs(Params_get_OverflowMode args, TMPro.TextOverflowModes ret);
public delegate TMPro.TextOverflowModes get_OverflowMode_WithArgs (Func<TMPro.TMP_Text, TMPro.TextOverflowModes> orig, TMPro.TMP_Text self);
public sealed class Params_set_OverflowMode
{
public TMPro.TMP_Text self;
public TMPro.TextOverflowModes value;
}
public delegate void set_OverflowMode_BeforeArgs(Params_set_OverflowMode args);
public delegate void set_OverflowMode_AfterArgs(Params_set_OverflowMode args);
public delegate void set_OverflowMode_WithArgs (Action<TMPro.TMP_Text,  TMPro.TextOverflowModes> orig, TMPro.TMP_Text self,  TMPro.TextOverflowModes value);
public sealed class Params_get_enableKerning
{
public TMPro.TMP_Text self;
}
public delegate void get_enableKerning_BeforeArgs(Params_get_enableKerning args);
public delegate bool get_enableKerning_AfterArgs(Params_get_enableKerning args, bool ret);
public delegate bool get_enableKerning_WithArgs (Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self);
public sealed class Params_set_enableKerning
{
public TMPro.TMP_Text self;
public bool value;
}
public delegate void set_enableKerning_BeforeArgs(Params_set_enableKerning args);
public delegate void set_enableKerning_AfterArgs(Params_set_enableKerning args);
public delegate void set_enableKerning_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value);
public sealed class Params_get_extraPadding
{
public TMPro.TMP_Text self;
}
public delegate void get_extraPadding_BeforeArgs(Params_get_extraPadding args);
public delegate bool get_extraPadding_AfterArgs(Params_get_extraPadding args, bool ret);
public delegate bool get_extraPadding_WithArgs (Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self);
public sealed class Params_set_extraPadding
{
public TMPro.TMP_Text self;
public bool value;
}
public delegate void set_extraPadding_BeforeArgs(Params_set_extraPadding args);
public delegate void set_extraPadding_AfterArgs(Params_set_extraPadding args);
public delegate void set_extraPadding_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value);
public sealed class Params_get_richText
{
public TMPro.TMP_Text self;
}
public delegate void get_richText_BeforeArgs(Params_get_richText args);
public delegate bool get_richText_AfterArgs(Params_get_richText args, bool ret);
public delegate bool get_richText_WithArgs (Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self);
public sealed class Params_set_richText
{
public TMPro.TMP_Text self;
public bool value;
}
public delegate void set_richText_BeforeArgs(Params_set_richText args);
public delegate void set_richText_AfterArgs(Params_set_richText args);
public delegate void set_richText_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value);
public sealed class Params_get_parseCtrlCharacters
{
public TMPro.TMP_Text self;
}
public delegate void get_parseCtrlCharacters_BeforeArgs(Params_get_parseCtrlCharacters args);
public delegate bool get_parseCtrlCharacters_AfterArgs(Params_get_parseCtrlCharacters args, bool ret);
public delegate bool get_parseCtrlCharacters_WithArgs (Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self);
public sealed class Params_set_parseCtrlCharacters
{
public TMPro.TMP_Text self;
public bool value;
}
public delegate void set_parseCtrlCharacters_BeforeArgs(Params_set_parseCtrlCharacters args);
public delegate void set_parseCtrlCharacters_AfterArgs(Params_set_parseCtrlCharacters args);
public delegate void set_parseCtrlCharacters_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value);
public sealed class Params_get_isOverlay
{
public TMPro.TMP_Text self;
}
public delegate void get_isOverlay_BeforeArgs(Params_get_isOverlay args);
public delegate bool get_isOverlay_AfterArgs(Params_get_isOverlay args, bool ret);
public delegate bool get_isOverlay_WithArgs (Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self);
public sealed class Params_set_isOverlay
{
public TMPro.TMP_Text self;
public bool value;
}
public delegate void set_isOverlay_BeforeArgs(Params_set_isOverlay args);
public delegate void set_isOverlay_AfterArgs(Params_set_isOverlay args);
public delegate void set_isOverlay_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value);
public sealed class Params_get_isOrthographic
{
public TMPro.TMP_Text self;
}
public delegate void get_isOrthographic_BeforeArgs(Params_get_isOrthographic args);
public delegate bool get_isOrthographic_AfterArgs(Params_get_isOrthographic args, bool ret);
public delegate bool get_isOrthographic_WithArgs (Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self);
public sealed class Params_set_isOrthographic
{
public TMPro.TMP_Text self;
public bool value;
}
public delegate void set_isOrthographic_BeforeArgs(Params_set_isOrthographic args);
public delegate void set_isOrthographic_AfterArgs(Params_set_isOrthographic args);
public delegate void set_isOrthographic_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value);
public sealed class Params_get_enableCulling
{
public TMPro.TMP_Text self;
}
public delegate void get_enableCulling_BeforeArgs(Params_get_enableCulling args);
public delegate bool get_enableCulling_AfterArgs(Params_get_enableCulling args, bool ret);
public delegate bool get_enableCulling_WithArgs (Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self);
public sealed class Params_set_enableCulling
{
public TMPro.TMP_Text self;
public bool value;
}
public delegate void set_enableCulling_BeforeArgs(Params_set_enableCulling args);
public delegate void set_enableCulling_AfterArgs(Params_set_enableCulling args);
public delegate void set_enableCulling_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value);
public sealed class Params_get_ignoreVisibility
{
public TMPro.TMP_Text self;
}
public delegate void get_ignoreVisibility_BeforeArgs(Params_get_ignoreVisibility args);
public delegate bool get_ignoreVisibility_AfterArgs(Params_get_ignoreVisibility args, bool ret);
public delegate bool get_ignoreVisibility_WithArgs (Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self);
public sealed class Params_set_ignoreVisibility
{
public TMPro.TMP_Text self;
public bool value;
}
public delegate void set_ignoreVisibility_BeforeArgs(Params_set_ignoreVisibility args);
public delegate void set_ignoreVisibility_AfterArgs(Params_set_ignoreVisibility args);
public delegate void set_ignoreVisibility_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value);
public sealed class Params_get_horizontalMapping
{
public TMPro.TMP_Text self;
}
public delegate void get_horizontalMapping_BeforeArgs(Params_get_horizontalMapping args);
public delegate TMPro.TextureMappingOptions get_horizontalMapping_AfterArgs(Params_get_horizontalMapping args, TMPro.TextureMappingOptions ret);
public delegate TMPro.TextureMappingOptions get_horizontalMapping_WithArgs (Func<TMPro.TMP_Text, TMPro.TextureMappingOptions> orig, TMPro.TMP_Text self);
public sealed class Params_set_horizontalMapping
{
public TMPro.TMP_Text self;
public TMPro.TextureMappingOptions value;
}
public delegate void set_horizontalMapping_BeforeArgs(Params_set_horizontalMapping args);
public delegate void set_horizontalMapping_AfterArgs(Params_set_horizontalMapping args);
public delegate void set_horizontalMapping_WithArgs (Action<TMPro.TMP_Text,  TMPro.TextureMappingOptions> orig, TMPro.TMP_Text self,  TMPro.TextureMappingOptions value);
public sealed class Params_get_verticalMapping
{
public TMPro.TMP_Text self;
}
public delegate void get_verticalMapping_BeforeArgs(Params_get_verticalMapping args);
public delegate TMPro.TextureMappingOptions get_verticalMapping_AfterArgs(Params_get_verticalMapping args, TMPro.TextureMappingOptions ret);
public delegate TMPro.TextureMappingOptions get_verticalMapping_WithArgs (Func<TMPro.TMP_Text, TMPro.TextureMappingOptions> orig, TMPro.TMP_Text self);
public sealed class Params_set_verticalMapping
{
public TMPro.TMP_Text self;
public TMPro.TextureMappingOptions value;
}
public delegate void set_verticalMapping_BeforeArgs(Params_set_verticalMapping args);
public delegate void set_verticalMapping_AfterArgs(Params_set_verticalMapping args);
public delegate void set_verticalMapping_WithArgs (Action<TMPro.TMP_Text,  TMPro.TextureMappingOptions> orig, TMPro.TMP_Text self,  TMPro.TextureMappingOptions value);
public sealed class Params_get_renderMode
{
public TMPro.TMP_Text self;
}
public delegate void get_renderMode_BeforeArgs(Params_get_renderMode args);
public delegate TMPro.TextRenderFlags get_renderMode_AfterArgs(Params_get_renderMode args, TMPro.TextRenderFlags ret);
public delegate TMPro.TextRenderFlags get_renderMode_WithArgs (Func<TMPro.TMP_Text, TMPro.TextRenderFlags> orig, TMPro.TMP_Text self);
public sealed class Params_set_renderMode
{
public TMPro.TMP_Text self;
public TMPro.TextRenderFlags value;
}
public delegate void set_renderMode_BeforeArgs(Params_set_renderMode args);
public delegate void set_renderMode_AfterArgs(Params_set_renderMode args);
public delegate void set_renderMode_WithArgs (Action<TMPro.TMP_Text,  TMPro.TextRenderFlags> orig, TMPro.TMP_Text self,  TMPro.TextRenderFlags value);
public sealed class Params_get_maxVisibleCharacters
{
public TMPro.TMP_Text self;
}
public delegate void get_maxVisibleCharacters_BeforeArgs(Params_get_maxVisibleCharacters args);
public delegate int get_maxVisibleCharacters_AfterArgs(Params_get_maxVisibleCharacters args, int ret);
public delegate int get_maxVisibleCharacters_WithArgs (Func<TMPro.TMP_Text, int> orig, TMPro.TMP_Text self);
public sealed class Params_set_maxVisibleCharacters
{
public TMPro.TMP_Text self;
public int value;
}
public delegate void set_maxVisibleCharacters_BeforeArgs(Params_set_maxVisibleCharacters args);
public delegate void set_maxVisibleCharacters_AfterArgs(Params_set_maxVisibleCharacters args);
public delegate void set_maxVisibleCharacters_WithArgs (Action<TMPro.TMP_Text,  int> orig, TMPro.TMP_Text self,  int value);
public sealed class Params_get_maxVisibleWords
{
public TMPro.TMP_Text self;
}
public delegate void get_maxVisibleWords_BeforeArgs(Params_get_maxVisibleWords args);
public delegate int get_maxVisibleWords_AfterArgs(Params_get_maxVisibleWords args, int ret);
public delegate int get_maxVisibleWords_WithArgs (Func<TMPro.TMP_Text, int> orig, TMPro.TMP_Text self);
public sealed class Params_set_maxVisibleWords
{
public TMPro.TMP_Text self;
public int value;
}
public delegate void set_maxVisibleWords_BeforeArgs(Params_set_maxVisibleWords args);
public delegate void set_maxVisibleWords_AfterArgs(Params_set_maxVisibleWords args);
public delegate void set_maxVisibleWords_WithArgs (Action<TMPro.TMP_Text,  int> orig, TMPro.TMP_Text self,  int value);
public sealed class Params_get_maxVisibleLines
{
public TMPro.TMP_Text self;
}
public delegate void get_maxVisibleLines_BeforeArgs(Params_get_maxVisibleLines args);
public delegate int get_maxVisibleLines_AfterArgs(Params_get_maxVisibleLines args, int ret);
public delegate int get_maxVisibleLines_WithArgs (Func<TMPro.TMP_Text, int> orig, TMPro.TMP_Text self);
public sealed class Params_set_maxVisibleLines
{
public TMPro.TMP_Text self;
public int value;
}
public delegate void set_maxVisibleLines_BeforeArgs(Params_set_maxVisibleLines args);
public delegate void set_maxVisibleLines_AfterArgs(Params_set_maxVisibleLines args);
public delegate void set_maxVisibleLines_WithArgs (Action<TMPro.TMP_Text,  int> orig, TMPro.TMP_Text self,  int value);
public sealed class Params_get_useMaxVisibleDescender
{
public TMPro.TMP_Text self;
}
public delegate void get_useMaxVisibleDescender_BeforeArgs(Params_get_useMaxVisibleDescender args);
public delegate bool get_useMaxVisibleDescender_AfterArgs(Params_get_useMaxVisibleDescender args, bool ret);
public delegate bool get_useMaxVisibleDescender_WithArgs (Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self);
public sealed class Params_set_useMaxVisibleDescender
{
public TMPro.TMP_Text self;
public bool value;
}
public delegate void set_useMaxVisibleDescender_BeforeArgs(Params_set_useMaxVisibleDescender args);
public delegate void set_useMaxVisibleDescender_AfterArgs(Params_set_useMaxVisibleDescender args);
public delegate void set_useMaxVisibleDescender_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value);
public sealed class Params_get_pageToDisplay
{
public TMPro.TMP_Text self;
}
public delegate void get_pageToDisplay_BeforeArgs(Params_get_pageToDisplay args);
public delegate int get_pageToDisplay_AfterArgs(Params_get_pageToDisplay args, int ret);
public delegate int get_pageToDisplay_WithArgs (Func<TMPro.TMP_Text, int> orig, TMPro.TMP_Text self);
public sealed class Params_set_pageToDisplay
{
public TMPro.TMP_Text self;
public int value;
}
public delegate void set_pageToDisplay_BeforeArgs(Params_set_pageToDisplay args);
public delegate void set_pageToDisplay_AfterArgs(Params_set_pageToDisplay args);
public delegate void set_pageToDisplay_WithArgs (Action<TMPro.TMP_Text,  int> orig, TMPro.TMP_Text self,  int value);
public sealed class Params_get_margin
{
public TMPro.TMP_Text self;
}
public delegate void get_margin_BeforeArgs(Params_get_margin args);
public delegate UnityEngine.Vector4 get_margin_AfterArgs(Params_get_margin args, UnityEngine.Vector4 ret);
public delegate UnityEngine.Vector4 get_margin_WithArgs (Func<TMPro.TMP_Text, UnityEngine.Vector4> orig, TMPro.TMP_Text self);
public sealed class Params_set_margin
{
public TMPro.TMP_Text self;
public UnityEngine.Vector4 value;
}
public delegate void set_margin_BeforeArgs(Params_set_margin args);
public delegate void set_margin_AfterArgs(Params_set_margin args);
public delegate void set_margin_WithArgs (Action<TMPro.TMP_Text,  UnityEngine.Vector4> orig, TMPro.TMP_Text self,  UnityEngine.Vector4 value);
public sealed class Params_get_textInfo
{
public TMPro.TMP_Text self;
}
public delegate void get_textInfo_BeforeArgs(Params_get_textInfo args);
public delegate TMPro.TMP_TextInfo get_textInfo_AfterArgs(Params_get_textInfo args, TMPro.TMP_TextInfo ret);
public delegate TMPro.TMP_TextInfo get_textInfo_WithArgs (Func<TMPro.TMP_Text, TMPro.TMP_TextInfo> orig, TMPro.TMP_Text self);
public sealed class Params_get_havePropertiesChanged
{
public TMPro.TMP_Text self;
}
public delegate void get_havePropertiesChanged_BeforeArgs(Params_get_havePropertiesChanged args);
public delegate bool get_havePropertiesChanged_AfterArgs(Params_get_havePropertiesChanged args, bool ret);
public delegate bool get_havePropertiesChanged_WithArgs (Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self);
public sealed class Params_set_havePropertiesChanged
{
public TMPro.TMP_Text self;
public bool value;
}
public delegate void set_havePropertiesChanged_BeforeArgs(Params_set_havePropertiesChanged args);
public delegate void set_havePropertiesChanged_AfterArgs(Params_set_havePropertiesChanged args);
public delegate void set_havePropertiesChanged_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value);
public sealed class Params_get_isUsingLegacyAnimationComponent
{
public TMPro.TMP_Text self;
}
public delegate void get_isUsingLegacyAnimationComponent_BeforeArgs(Params_get_isUsingLegacyAnimationComponent args);
public delegate bool get_isUsingLegacyAnimationComponent_AfterArgs(Params_get_isUsingLegacyAnimationComponent args, bool ret);
public delegate bool get_isUsingLegacyAnimationComponent_WithArgs (Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self);
public sealed class Params_set_isUsingLegacyAnimationComponent
{
public TMPro.TMP_Text self;
public bool value;
}
public delegate void set_isUsingLegacyAnimationComponent_BeforeArgs(Params_set_isUsingLegacyAnimationComponent args);
public delegate void set_isUsingLegacyAnimationComponent_AfterArgs(Params_set_isUsingLegacyAnimationComponent args);
public delegate void set_isUsingLegacyAnimationComponent_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value);
public sealed class Params_get_transform
{
public TMPro.TMP_Text self;
}
public delegate void get_transform_BeforeArgs(Params_get_transform args);
public delegate UnityEngine.Transform get_transform_AfterArgs(Params_get_transform args, UnityEngine.Transform ret);
public delegate UnityEngine.Transform get_transform_WithArgs (Func<TMPro.TMP_Text, UnityEngine.Transform> orig, TMPro.TMP_Text self);
public sealed class Params_get_rectTransform
{
public TMPro.TMP_Text self;
}
public delegate void get_rectTransform_BeforeArgs(Params_get_rectTransform args);
public delegate UnityEngine.RectTransform get_rectTransform_AfterArgs(Params_get_rectTransform args, UnityEngine.RectTransform ret);
public delegate UnityEngine.RectTransform get_rectTransform_WithArgs (Func<TMPro.TMP_Text, UnityEngine.RectTransform> orig, TMPro.TMP_Text self);
public sealed class Params_get_autoSizeTextContainer
{
public TMPro.TMP_Text self;
}
public delegate void get_autoSizeTextContainer_BeforeArgs(Params_get_autoSizeTextContainer args);
public delegate bool get_autoSizeTextContainer_AfterArgs(Params_get_autoSizeTextContainer args, bool ret);
public delegate bool get_autoSizeTextContainer_WithArgs (Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self);
public sealed class Params_set_autoSizeTextContainer
{
public TMPro.TMP_Text self;
public bool value;
}
public delegate void set_autoSizeTextContainer_BeforeArgs(Params_set_autoSizeTextContainer args);
public delegate void set_autoSizeTextContainer_AfterArgs(Params_set_autoSizeTextContainer args);
public delegate void set_autoSizeTextContainer_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value);
public sealed class Params_get_mesh
{
public TMPro.TMP_Text self;
}
public delegate void get_mesh_BeforeArgs(Params_get_mesh args);
public delegate UnityEngine.Mesh get_mesh_AfterArgs(Params_get_mesh args, UnityEngine.Mesh ret);
public delegate UnityEngine.Mesh get_mesh_WithArgs (Func<TMPro.TMP_Text, UnityEngine.Mesh> orig, TMPro.TMP_Text self);
public sealed class Params_get_isVolumetricText
{
public TMPro.TMP_Text self;
}
public delegate void get_isVolumetricText_BeforeArgs(Params_get_isVolumetricText args);
public delegate bool get_isVolumetricText_AfterArgs(Params_get_isVolumetricText args, bool ret);
public delegate bool get_isVolumetricText_WithArgs (Func<TMPro.TMP_Text, bool> orig, TMPro.TMP_Text self);
public sealed class Params_set_isVolumetricText
{
public TMPro.TMP_Text self;
public bool value;
}
public delegate void set_isVolumetricText_BeforeArgs(Params_set_isVolumetricText args);
public delegate void set_isVolumetricText_AfterArgs(Params_set_isVolumetricText args);
public delegate void set_isVolumetricText_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool value);
public sealed class Params_get_bounds
{
public TMPro.TMP_Text self;
}
public delegate void get_bounds_BeforeArgs(Params_get_bounds args);
public delegate UnityEngine.Bounds get_bounds_AfterArgs(Params_get_bounds args, UnityEngine.Bounds ret);
public delegate UnityEngine.Bounds get_bounds_WithArgs (Func<TMPro.TMP_Text, UnityEngine.Bounds> orig, TMPro.TMP_Text self);
public sealed class Params_get_textBounds
{
public TMPro.TMP_Text self;
}
public delegate void get_textBounds_BeforeArgs(Params_get_textBounds args);
public delegate UnityEngine.Bounds get_textBounds_AfterArgs(Params_get_textBounds args, UnityEngine.Bounds ret);
public delegate UnityEngine.Bounds get_textBounds_WithArgs (Func<TMPro.TMP_Text, UnityEngine.Bounds> orig, TMPro.TMP_Text self);
public sealed class Params_get_flexibleHeight
{
public TMPro.TMP_Text self;
}
public delegate void get_flexibleHeight_BeforeArgs(Params_get_flexibleHeight args);
public delegate float get_flexibleHeight_AfterArgs(Params_get_flexibleHeight args, float ret);
public delegate float get_flexibleHeight_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_get_flexibleWidth
{
public TMPro.TMP_Text self;
}
public delegate void get_flexibleWidth_BeforeArgs(Params_get_flexibleWidth args);
public delegate float get_flexibleWidth_AfterArgs(Params_get_flexibleWidth args, float ret);
public delegate float get_flexibleWidth_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_get_minHeight
{
public TMPro.TMP_Text self;
}
public delegate void get_minHeight_BeforeArgs(Params_get_minHeight args);
public delegate float get_minHeight_AfterArgs(Params_get_minHeight args, float ret);
public delegate float get_minHeight_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_get_minWidth
{
public TMPro.TMP_Text self;
}
public delegate void get_minWidth_BeforeArgs(Params_get_minWidth args);
public delegate float get_minWidth_AfterArgs(Params_get_minWidth args, float ret);
public delegate float get_minWidth_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_get_preferredWidth
{
public TMPro.TMP_Text self;
}
public delegate void get_preferredWidth_BeforeArgs(Params_get_preferredWidth args);
public delegate float get_preferredWidth_AfterArgs(Params_get_preferredWidth args, float ret);
public delegate float get_preferredWidth_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_get_preferredHeight
{
public TMPro.TMP_Text self;
}
public delegate void get_preferredHeight_BeforeArgs(Params_get_preferredHeight args);
public delegate float get_preferredHeight_AfterArgs(Params_get_preferredHeight args, float ret);
public delegate float get_preferredHeight_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_get_renderedWidth
{
public TMPro.TMP_Text self;
}
public delegate void get_renderedWidth_BeforeArgs(Params_get_renderedWidth args);
public delegate float get_renderedWidth_AfterArgs(Params_get_renderedWidth args, float ret);
public delegate float get_renderedWidth_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_get_renderedHeight
{
public TMPro.TMP_Text self;
}
public delegate void get_renderedHeight_BeforeArgs(Params_get_renderedHeight args);
public delegate float get_renderedHeight_AfterArgs(Params_get_renderedHeight args, float ret);
public delegate float get_renderedHeight_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_get_layoutPriority
{
public TMPro.TMP_Text self;
}
public delegate void get_layoutPriority_BeforeArgs(Params_get_layoutPriority args);
public delegate int get_layoutPriority_AfterArgs(Params_get_layoutPriority args, int ret);
public delegate int get_layoutPriority_WithArgs (Func<TMPro.TMP_Text, int> orig, TMPro.TMP_Text self);
public sealed class Params_LoadFontAsset
{
public TMPro.TMP_Text self;
}
public delegate void LoadFontAsset_BeforeArgs(Params_LoadFontAsset args);
public delegate void LoadFontAsset_AfterArgs(Params_LoadFontAsset args);
public delegate void LoadFontAsset_WithArgs (Action<TMPro.TMP_Text> orig, TMPro.TMP_Text self);
public sealed class Params_SetSharedMaterial
{
public TMPro.TMP_Text self;
public UnityEngine.Material mat;
}
public delegate void SetSharedMaterial_BeforeArgs(Params_SetSharedMaterial args);
public delegate void SetSharedMaterial_AfterArgs(Params_SetSharedMaterial args);
public delegate void SetSharedMaterial_WithArgs (Action<TMPro.TMP_Text,  UnityEngine.Material> orig, TMPro.TMP_Text self,  UnityEngine.Material mat);
public sealed class Params_GetMaterial
{
public TMPro.TMP_Text self;
public UnityEngine.Material mat;
}
public delegate void GetMaterial_BeforeArgs(Params_GetMaterial args);
public delegate UnityEngine.Material GetMaterial_AfterArgs(Params_GetMaterial args, UnityEngine.Material ret);
public delegate UnityEngine.Material GetMaterial_WithArgs (Func<TMPro.TMP_Text,  UnityEngine.Material, UnityEngine.Material> orig, TMPro.TMP_Text self,  UnityEngine.Material mat);
public sealed class Params_SetFontBaseMaterial
{
public TMPro.TMP_Text self;
public UnityEngine.Material mat;
}
public delegate void SetFontBaseMaterial_BeforeArgs(Params_SetFontBaseMaterial args);
public delegate void SetFontBaseMaterial_AfterArgs(Params_SetFontBaseMaterial args);
public delegate void SetFontBaseMaterial_WithArgs (Action<TMPro.TMP_Text,  UnityEngine.Material> orig, TMPro.TMP_Text self,  UnityEngine.Material mat);
public sealed class Params_GetSharedMaterials
{
public TMPro.TMP_Text self;
}
public delegate void GetSharedMaterials_BeforeArgs(Params_GetSharedMaterials args);
public delegate UnityEngine.Material[] GetSharedMaterials_AfterArgs(Params_GetSharedMaterials args, UnityEngine.Material[] ret);
public delegate UnityEngine.Material[] GetSharedMaterials_WithArgs (Func<TMPro.TMP_Text, UnityEngine.Material[]> orig, TMPro.TMP_Text self);
public sealed class Params_SetSharedMaterials
{
public TMPro.TMP_Text self;
public UnityEngine.Material[] materials;
}
public delegate void SetSharedMaterials_BeforeArgs(Params_SetSharedMaterials args);
public delegate void SetSharedMaterials_AfterArgs(Params_SetSharedMaterials args);
public delegate void SetSharedMaterials_WithArgs (Action<TMPro.TMP_Text,  UnityEngine.Material[]> orig, TMPro.TMP_Text self,  UnityEngine.Material[] materials);
public sealed class Params_GetMaterials
{
public TMPro.TMP_Text self;
public UnityEngine.Material[] mats;
}
public delegate void GetMaterials_BeforeArgs(Params_GetMaterials args);
public delegate UnityEngine.Material[] GetMaterials_AfterArgs(Params_GetMaterials args, UnityEngine.Material[] ret);
public delegate UnityEngine.Material[] GetMaterials_WithArgs (Func<TMPro.TMP_Text,  UnityEngine.Material[], UnityEngine.Material[]> orig, TMPro.TMP_Text self,  UnityEngine.Material[] mats);
public sealed class Params_CreateMaterialInstance
{
public TMPro.TMP_Text self;
public UnityEngine.Material source;
}
public delegate void CreateMaterialInstance_BeforeArgs(Params_CreateMaterialInstance args);
public delegate UnityEngine.Material CreateMaterialInstance_AfterArgs(Params_CreateMaterialInstance args, UnityEngine.Material ret);
public delegate UnityEngine.Material CreateMaterialInstance_WithArgs (Func<TMPro.TMP_Text,  UnityEngine.Material, UnityEngine.Material> orig, TMPro.TMP_Text self,  UnityEngine.Material source);
public sealed class Params_SetVertexColorGradient
{
public TMPro.TMP_Text self;
public TMPro.TMP_ColorGradient gradient;
}
public delegate void SetVertexColorGradient_BeforeArgs(Params_SetVertexColorGradient args);
public delegate void SetVertexColorGradient_AfterArgs(Params_SetVertexColorGradient args);
public delegate void SetVertexColorGradient_WithArgs (Action<TMPro.TMP_Text,  TMPro.TMP_ColorGradient> orig, TMPro.TMP_Text self,  TMPro.TMP_ColorGradient gradient);
public sealed class Params_SetFaceColor
{
public TMPro.TMP_Text self;
public UnityEngine.Color32 color;
}
public delegate void SetFaceColor_BeforeArgs(Params_SetFaceColor args);
public delegate void SetFaceColor_AfterArgs(Params_SetFaceColor args);
public delegate void SetFaceColor_WithArgs (Action<TMPro.TMP_Text,  UnityEngine.Color32> orig, TMPro.TMP_Text self,  UnityEngine.Color32 color);
public sealed class Params_SetOutlineColor
{
public TMPro.TMP_Text self;
public UnityEngine.Color32 color;
}
public delegate void SetOutlineColor_BeforeArgs(Params_SetOutlineColor args);
public delegate void SetOutlineColor_AfterArgs(Params_SetOutlineColor args);
public delegate void SetOutlineColor_WithArgs (Action<TMPro.TMP_Text,  UnityEngine.Color32> orig, TMPro.TMP_Text self,  UnityEngine.Color32 color);
public sealed class Params_SetOutlineThickness
{
public TMPro.TMP_Text self;
public float thickness;
}
public delegate void SetOutlineThickness_BeforeArgs(Params_SetOutlineThickness args);
public delegate void SetOutlineThickness_AfterArgs(Params_SetOutlineThickness args);
public delegate void SetOutlineThickness_WithArgs (Action<TMPro.TMP_Text,  float> orig, TMPro.TMP_Text self,  float thickness);
public sealed class Params_SetShaderDepth
{
public TMPro.TMP_Text self;
}
public delegate void SetShaderDepth_BeforeArgs(Params_SetShaderDepth args);
public delegate void SetShaderDepth_AfterArgs(Params_SetShaderDepth args);
public delegate void SetShaderDepth_WithArgs (Action<TMPro.TMP_Text> orig, TMPro.TMP_Text self);
public sealed class Params_SetCulling
{
public TMPro.TMP_Text self;
}
public delegate void SetCulling_BeforeArgs(Params_SetCulling args);
public delegate void SetCulling_AfterArgs(Params_SetCulling args);
public delegate void SetCulling_WithArgs (Action<TMPro.TMP_Text> orig, TMPro.TMP_Text self);
public sealed class Params_GetPaddingForMaterial
{
public TMPro.TMP_Text self;
}
public delegate void GetPaddingForMaterial_BeforeArgs(Params_GetPaddingForMaterial args);
public delegate float GetPaddingForMaterial_AfterArgs(Params_GetPaddingForMaterial args, float ret);
public delegate float GetPaddingForMaterial_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_GetPaddingForMaterial_Material
{
public TMPro.TMP_Text self;
public UnityEngine.Material mat;
}
public delegate void GetPaddingForMaterial_Material_BeforeArgs(Params_GetPaddingForMaterial_Material args);
public delegate float GetPaddingForMaterial_Material_AfterArgs(Params_GetPaddingForMaterial_Material args, float ret);
public delegate float GetPaddingForMaterial_Material_WithArgs (Func<TMPro.TMP_Text,  UnityEngine.Material, float> orig, TMPro.TMP_Text self,  UnityEngine.Material mat);
public sealed class Params_GetTextContainerLocalCorners
{
public TMPro.TMP_Text self;
}
public delegate void GetTextContainerLocalCorners_BeforeArgs(Params_GetTextContainerLocalCorners args);
public delegate UnityEngine.Vector3[] GetTextContainerLocalCorners_AfterArgs(Params_GetTextContainerLocalCorners args, UnityEngine.Vector3[] ret);
public delegate UnityEngine.Vector3[] GetTextContainerLocalCorners_WithArgs (Func<TMPro.TMP_Text, UnityEngine.Vector3[]> orig, TMPro.TMP_Text self);
public sealed class Params_ForceMeshUpdate
{
public TMPro.TMP_Text self;
}
public delegate void ForceMeshUpdate_BeforeArgs(Params_ForceMeshUpdate args);
public delegate void ForceMeshUpdate_AfterArgs(Params_ForceMeshUpdate args);
public delegate void ForceMeshUpdate_WithArgs (Action<TMPro.TMP_Text> orig, TMPro.TMP_Text self);
public sealed class Params_ForceMeshUpdate_bool
{
public TMPro.TMP_Text self;
public bool ignoreActiveState;
}
public delegate void ForceMeshUpdate_bool_BeforeArgs(Params_ForceMeshUpdate_bool args);
public delegate void ForceMeshUpdate_bool_AfterArgs(Params_ForceMeshUpdate_bool args);
public delegate void ForceMeshUpdate_bool_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool ignoreActiveState);
public sealed class Params_SetTextInternal
{
public TMPro.TMP_Text self;
public string text;
}
public delegate void SetTextInternal_BeforeArgs(Params_SetTextInternal args);
public delegate void SetTextInternal_AfterArgs(Params_SetTextInternal args);
public delegate void SetTextInternal_WithArgs (Action<TMPro.TMP_Text,  string> orig, TMPro.TMP_Text self,  string text);
public sealed class Params_UpdateGeometry
{
public TMPro.TMP_Text self;
public UnityEngine.Mesh mesh;
public int index;
}
public delegate void UpdateGeometry_BeforeArgs(Params_UpdateGeometry args);
public delegate void UpdateGeometry_AfterArgs(Params_UpdateGeometry args);
public delegate void UpdateGeometry_WithArgs (Action<TMPro.TMP_Text,  UnityEngine.Mesh,  int> orig, TMPro.TMP_Text self,  UnityEngine.Mesh mesh,  int index);
public sealed class Params_UpdateVertexData_TMP_VertexDataUpdateFlags
{
public TMPro.TMP_Text self;
public TMPro.TMP_VertexDataUpdateFlags flags;
}
public delegate void UpdateVertexData_TMP_VertexDataUpdateFlags_BeforeArgs(Params_UpdateVertexData_TMP_VertexDataUpdateFlags args);
public delegate void UpdateVertexData_TMP_VertexDataUpdateFlags_AfterArgs(Params_UpdateVertexData_TMP_VertexDataUpdateFlags args);
public delegate void UpdateVertexData_TMP_VertexDataUpdateFlags_WithArgs (Action<TMPro.TMP_Text,  TMPro.TMP_VertexDataUpdateFlags> orig, TMPro.TMP_Text self,  TMPro.TMP_VertexDataUpdateFlags flags);
public sealed class Params_UpdateVertexData
{
public TMPro.TMP_Text self;
}
public delegate void UpdateVertexData_BeforeArgs(Params_UpdateVertexData args);
public delegate void UpdateVertexData_AfterArgs(Params_UpdateVertexData args);
public delegate void UpdateVertexData_WithArgs (Action<TMPro.TMP_Text> orig, TMPro.TMP_Text self);
public sealed class Params_SetVertices
{
public TMPro.TMP_Text self;
public UnityEngine.Vector3[] vertices;
}
public delegate void SetVertices_BeforeArgs(Params_SetVertices args);
public delegate void SetVertices_AfterArgs(Params_SetVertices args);
public delegate void SetVertices_WithArgs (Action<TMPro.TMP_Text,  UnityEngine.Vector3[]> orig, TMPro.TMP_Text self,  UnityEngine.Vector3[] vertices);
public sealed class Params_UpdateMeshPadding
{
public TMPro.TMP_Text self;
}
public delegate void UpdateMeshPadding_BeforeArgs(Params_UpdateMeshPadding args);
public delegate void UpdateMeshPadding_AfterArgs(Params_UpdateMeshPadding args);
public delegate void UpdateMeshPadding_WithArgs (Action<TMPro.TMP_Text> orig, TMPro.TMP_Text self);
public sealed class Params_CrossFadeColor
{
public TMPro.TMP_Text self;
public UnityEngine.Color targetColor;
public float duration;
public bool ignoreTimeScale;
public bool useAlpha;
}
public delegate void CrossFadeColor_BeforeArgs(Params_CrossFadeColor args);
public delegate void CrossFadeColor_AfterArgs(Params_CrossFadeColor args);
public delegate void CrossFadeColor_WithArgs (Action<TMPro.TMP_Text,  UnityEngine.Color,  float,  bool,  bool> orig, TMPro.TMP_Text self,  UnityEngine.Color targetColor,  float duration,  bool ignoreTimeScale,  bool useAlpha);
public sealed class Params_CrossFadeAlpha
{
public TMPro.TMP_Text self;
public float alpha;
public float duration;
public bool ignoreTimeScale;
}
public delegate void CrossFadeAlpha_BeforeArgs(Params_CrossFadeAlpha args);
public delegate void CrossFadeAlpha_AfterArgs(Params_CrossFadeAlpha args);
public delegate void CrossFadeAlpha_WithArgs (Action<TMPro.TMP_Text,  float,  float,  bool> orig, TMPro.TMP_Text self,  float alpha,  float duration,  bool ignoreTimeScale);
public sealed class Params_InternalCrossFadeColor
{
public TMPro.TMP_Text self;
public UnityEngine.Color targetColor;
public float duration;
public bool ignoreTimeScale;
public bool useAlpha;
}
public delegate void InternalCrossFadeColor_BeforeArgs(Params_InternalCrossFadeColor args);
public delegate void InternalCrossFadeColor_AfterArgs(Params_InternalCrossFadeColor args);
public delegate void InternalCrossFadeColor_WithArgs (Action<TMPro.TMP_Text,  UnityEngine.Color,  float,  bool,  bool> orig, TMPro.TMP_Text self,  UnityEngine.Color targetColor,  float duration,  bool ignoreTimeScale,  bool useAlpha);
public sealed class Params_InternalCrossFadeAlpha
{
public TMPro.TMP_Text self;
public float alpha;
public float duration;
public bool ignoreTimeScale;
}
public delegate void InternalCrossFadeAlpha_BeforeArgs(Params_InternalCrossFadeAlpha args);
public delegate void InternalCrossFadeAlpha_AfterArgs(Params_InternalCrossFadeAlpha args);
public delegate void InternalCrossFadeAlpha_WithArgs (Action<TMPro.TMP_Text,  float,  float,  bool> orig, TMPro.TMP_Text self,  float alpha,  float duration,  bool ignoreTimeScale);
public sealed class Params_ParseInputText
{
public TMPro.TMP_Text self;
}
public delegate void ParseInputText_BeforeArgs(Params_ParseInputText args);
public delegate void ParseInputText_AfterArgs(Params_ParseInputText args);
public delegate void ParseInputText_WithArgs (Action<TMPro.TMP_Text> orig, TMPro.TMP_Text self);
public sealed class Params_SetText_string
{
public TMPro.TMP_Text self;
public string text;
}
public delegate void SetText_string_BeforeArgs(Params_SetText_string args);
public delegate void SetText_string_AfterArgs(Params_SetText_string args);
public delegate void SetText_string_WithArgs (Action<TMPro.TMP_Text,  string> orig, TMPro.TMP_Text self,  string text);
public sealed class Params_SetText_string_float
{
public TMPro.TMP_Text self;
public string text;
public float arg0;
}
public delegate void SetText_string_float_BeforeArgs(Params_SetText_string_float args);
public delegate void SetText_string_float_AfterArgs(Params_SetText_string_float args);
public delegate void SetText_string_float_WithArgs (Action<TMPro.TMP_Text,  string,  float> orig, TMPro.TMP_Text self,  string text,  float arg0);
public sealed class Params_SetText_string_float_float
{
public TMPro.TMP_Text self;
public string text;
public float arg0;
public float arg1;
}
public delegate void SetText_string_float_float_BeforeArgs(Params_SetText_string_float_float args);
public delegate void SetText_string_float_float_AfterArgs(Params_SetText_string_float_float args);
public delegate void SetText_string_float_float_WithArgs (Action<TMPro.TMP_Text,  string,  float,  float> orig, TMPro.TMP_Text self,  string text,  float arg0,  float arg1);
public sealed class Params_SetText_string_float_float_float
{
public TMPro.TMP_Text self;
public string text;
public float arg0;
public float arg1;
public float arg2;
}
public delegate void SetText_string_float_float_float_BeforeArgs(Params_SetText_string_float_float_float args);
public delegate void SetText_string_float_float_float_AfterArgs(Params_SetText_string_float_float_float args);
public delegate void SetText_string_float_float_float_WithArgs (Action<TMPro.TMP_Text,  string,  float,  float,  float> orig, TMPro.TMP_Text self,  string text,  float arg0,  float arg1,  float arg2);
public sealed class Params_SetText_StringBuilder
{
public TMPro.TMP_Text self;
public System.Text.StringBuilder text;
}
public delegate void SetText_StringBuilder_BeforeArgs(Params_SetText_StringBuilder args);
public delegate void SetText_StringBuilder_AfterArgs(Params_SetText_StringBuilder args);
public delegate void SetText_StringBuilder_WithArgs (Action<TMPro.TMP_Text,  System.Text.StringBuilder> orig, TMPro.TMP_Text self,  System.Text.StringBuilder text);
public sealed class Params_SetCharArray
{
public TMPro.TMP_Text self;
public char[] charArray;
}
public delegate void SetCharArray_BeforeArgs(Params_SetCharArray args);
public delegate void SetCharArray_AfterArgs(Params_SetCharArray args);
public delegate void SetCharArray_WithArgs (Action<TMPro.TMP_Text,  char[]> orig, TMPro.TMP_Text self,  char[] charArray);
public sealed class Params_SetTextArrayToCharArray
{
public TMPro.TMP_Text self;
public char[] charArray;
public int[] charBuffer;
}
public delegate void SetTextArrayToCharArray_BeforeArgs(Params_SetTextArrayToCharArray args);
public delegate void SetTextArrayToCharArray_AfterArgs(Params_SetTextArrayToCharArray args);
public delegate void SetTextArrayToCharArray_WithArgs (Action<TMPro.TMP_Text,  char[],  int[]> orig, TMPro.TMP_Text self,  char[] charArray,  int[] charBuffer);
public sealed class Params_StringToCharArray
{
public TMPro.TMP_Text self;
public string text;
public int[] chars;
}
public delegate void StringToCharArray_BeforeArgs(Params_StringToCharArray args);
public delegate void StringToCharArray_AfterArgs(Params_StringToCharArray args);
public delegate void StringToCharArray_WithArgs (Action<TMPro.TMP_Text,  string,  int[]> orig, TMPro.TMP_Text self,  string text,  int[] chars);
public sealed class Params_StringBuilderToIntArray
{
public TMPro.TMP_Text self;
public System.Text.StringBuilder text;
public int[] chars;
}
public delegate void StringBuilderToIntArray_BeforeArgs(Params_StringBuilderToIntArray args);
public delegate void StringBuilderToIntArray_AfterArgs(Params_StringBuilderToIntArray args);
public delegate void StringBuilderToIntArray_WithArgs (Action<TMPro.TMP_Text,  System.Text.StringBuilder,  int[]> orig, TMPro.TMP_Text self,  System.Text.StringBuilder text,  int[] chars);
public sealed class Params_AddFloatToCharArray
{
public TMPro.TMP_Text self;
public float number;
public int index;
public int precision;
}
public delegate void AddFloatToCharArray_BeforeArgs(Params_AddFloatToCharArray args);
public delegate void AddFloatToCharArray_AfterArgs(Params_AddFloatToCharArray args);
public delegate void AddFloatToCharArray_WithArgs (Action<TMPro.TMP_Text,  float,  int,  int> orig, TMPro.TMP_Text self,  float number,  int index,  int precision);
public sealed class Params_AddIntToCharArray
{
public TMPro.TMP_Text self;
public int number;
public int index;
public int precision;
}
public delegate void AddIntToCharArray_BeforeArgs(Params_AddIntToCharArray args);
public delegate void AddIntToCharArray_AfterArgs(Params_AddIntToCharArray args);
public delegate void AddIntToCharArray_WithArgs (Action<TMPro.TMP_Text,  int,  int,  int> orig, TMPro.TMP_Text self,  int number,  int index,  int precision);
public sealed class Params_SetArraySizes
{
public TMPro.TMP_Text self;
public int[] chars;
}
public delegate void SetArraySizes_BeforeArgs(Params_SetArraySizes args);
public delegate int SetArraySizes_AfterArgs(Params_SetArraySizes args, int ret);
public delegate int SetArraySizes_WithArgs (Func<TMPro.TMP_Text,  int[], int> orig, TMPro.TMP_Text self,  int[] chars);
public sealed class Params_GenerateTextMesh
{
public TMPro.TMP_Text self;
}
public delegate void GenerateTextMesh_BeforeArgs(Params_GenerateTextMesh args);
public delegate void GenerateTextMesh_AfterArgs(Params_GenerateTextMesh args);
public delegate void GenerateTextMesh_WithArgs (Action<TMPro.TMP_Text> orig, TMPro.TMP_Text self);
public sealed class Params_GetPreferredValues
{
public TMPro.TMP_Text self;
}
public delegate void GetPreferredValues_BeforeArgs(Params_GetPreferredValues args);
public delegate UnityEngine.Vector2 GetPreferredValues_AfterArgs(Params_GetPreferredValues args, UnityEngine.Vector2 ret);
public delegate UnityEngine.Vector2 GetPreferredValues_WithArgs (Func<TMPro.TMP_Text, UnityEngine.Vector2> orig, TMPro.TMP_Text self);
public sealed class Params_GetPreferredValues_float_float
{
public TMPro.TMP_Text self;
public float width;
public float height;
}
public delegate void GetPreferredValues_float_float_BeforeArgs(Params_GetPreferredValues_float_float args);
public delegate UnityEngine.Vector2 GetPreferredValues_float_float_AfterArgs(Params_GetPreferredValues_float_float args, UnityEngine.Vector2 ret);
public delegate UnityEngine.Vector2 GetPreferredValues_float_float_WithArgs (Func<TMPro.TMP_Text,  float,  float, UnityEngine.Vector2> orig, TMPro.TMP_Text self,  float width,  float height);
public sealed class Params_GetPreferredValues_string
{
public TMPro.TMP_Text self;
public string text;
}
public delegate void GetPreferredValues_string_BeforeArgs(Params_GetPreferredValues_string args);
public delegate UnityEngine.Vector2 GetPreferredValues_string_AfterArgs(Params_GetPreferredValues_string args, UnityEngine.Vector2 ret);
public delegate UnityEngine.Vector2 GetPreferredValues_string_WithArgs (Func<TMPro.TMP_Text,  string, UnityEngine.Vector2> orig, TMPro.TMP_Text self,  string text);
public sealed class Params_GetPreferredValues_string_float_float
{
public TMPro.TMP_Text self;
public string text;
public float width;
public float height;
}
public delegate void GetPreferredValues_string_float_float_BeforeArgs(Params_GetPreferredValues_string_float_float args);
public delegate UnityEngine.Vector2 GetPreferredValues_string_float_float_AfterArgs(Params_GetPreferredValues_string_float_float args, UnityEngine.Vector2 ret);
public delegate UnityEngine.Vector2 GetPreferredValues_string_float_float_WithArgs (Func<TMPro.TMP_Text,  string,  float,  float, UnityEngine.Vector2> orig, TMPro.TMP_Text self,  string text,  float width,  float height);
public sealed class Params_GetPreferredWidth
{
public TMPro.TMP_Text self;
}
public delegate void GetPreferredWidth_BeforeArgs(Params_GetPreferredWidth args);
public delegate float GetPreferredWidth_AfterArgs(Params_GetPreferredWidth args, float ret);
public delegate float GetPreferredWidth_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_GetPreferredWidth_Vector2
{
public TMPro.TMP_Text self;
public UnityEngine.Vector2 margin;
}
public delegate void GetPreferredWidth_Vector2_BeforeArgs(Params_GetPreferredWidth_Vector2 args);
public delegate float GetPreferredWidth_Vector2_AfterArgs(Params_GetPreferredWidth_Vector2 args, float ret);
public delegate float GetPreferredWidth_Vector2_WithArgs (Func<TMPro.TMP_Text,  UnityEngine.Vector2, float> orig, TMPro.TMP_Text self,  UnityEngine.Vector2 margin);
public sealed class Params_GetPreferredHeight
{
public TMPro.TMP_Text self;
}
public delegate void GetPreferredHeight_BeforeArgs(Params_GetPreferredHeight args);
public delegate float GetPreferredHeight_AfterArgs(Params_GetPreferredHeight args, float ret);
public delegate float GetPreferredHeight_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_GetPreferredHeight_Vector2
{
public TMPro.TMP_Text self;
public UnityEngine.Vector2 margin;
}
public delegate void GetPreferredHeight_Vector2_BeforeArgs(Params_GetPreferredHeight_Vector2 args);
public delegate float GetPreferredHeight_Vector2_AfterArgs(Params_GetPreferredHeight_Vector2 args, float ret);
public delegate float GetPreferredHeight_Vector2_WithArgs (Func<TMPro.TMP_Text,  UnityEngine.Vector2, float> orig, TMPro.TMP_Text self,  UnityEngine.Vector2 margin);
public sealed class Params_GetRenderedValues
{
public TMPro.TMP_Text self;
}
public delegate void GetRenderedValues_BeforeArgs(Params_GetRenderedValues args);
public delegate UnityEngine.Vector2 GetRenderedValues_AfterArgs(Params_GetRenderedValues args, UnityEngine.Vector2 ret);
public delegate UnityEngine.Vector2 GetRenderedValues_WithArgs (Func<TMPro.TMP_Text, UnityEngine.Vector2> orig, TMPro.TMP_Text self);
public sealed class Params_GetRenderedWidth
{
public TMPro.TMP_Text self;
}
public delegate void GetRenderedWidth_BeforeArgs(Params_GetRenderedWidth args);
public delegate float GetRenderedWidth_AfterArgs(Params_GetRenderedWidth args, float ret);
public delegate float GetRenderedWidth_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_GetRenderedHeight
{
public TMPro.TMP_Text self;
}
public delegate void GetRenderedHeight_BeforeArgs(Params_GetRenderedHeight args);
public delegate float GetRenderedHeight_AfterArgs(Params_GetRenderedHeight args, float ret);
public delegate float GetRenderedHeight_WithArgs (Func<TMPro.TMP_Text, float> orig, TMPro.TMP_Text self);
public sealed class Params_CalculatePreferredValues
{
public TMPro.TMP_Text self;
public float defaultFontSize;
public UnityEngine.Vector2 marginSize;
}
public delegate void CalculatePreferredValues_BeforeArgs(Params_CalculatePreferredValues args);
public delegate UnityEngine.Vector2 CalculatePreferredValues_AfterArgs(Params_CalculatePreferredValues args, UnityEngine.Vector2 ret);
public delegate UnityEngine.Vector2 CalculatePreferredValues_WithArgs (Func<TMPro.TMP_Text,  float,  UnityEngine.Vector2, UnityEngine.Vector2> orig, TMPro.TMP_Text self,  float defaultFontSize,  UnityEngine.Vector2 marginSize);
public sealed class Params_GetCompoundBounds
{
public TMPro.TMP_Text self;
}
public delegate void GetCompoundBounds_BeforeArgs(Params_GetCompoundBounds args);
public delegate UnityEngine.Bounds GetCompoundBounds_AfterArgs(Params_GetCompoundBounds args, UnityEngine.Bounds ret);
public delegate UnityEngine.Bounds GetCompoundBounds_WithArgs (Func<TMPro.TMP_Text, UnityEngine.Bounds> orig, TMPro.TMP_Text self);
public sealed class Params_GetTextBounds
{
public TMPro.TMP_Text self;
}
public delegate void GetTextBounds_BeforeArgs(Params_GetTextBounds args);
public delegate UnityEngine.Bounds GetTextBounds_AfterArgs(Params_GetTextBounds args, UnityEngine.Bounds ret);
public delegate UnityEngine.Bounds GetTextBounds_WithArgs (Func<TMPro.TMP_Text, UnityEngine.Bounds> orig, TMPro.TMP_Text self);
public sealed class Params_AdjustLineOffset
{
public TMPro.TMP_Text self;
public int startIndex;
public int endIndex;
public float offset;
}
public delegate void AdjustLineOffset_BeforeArgs(Params_AdjustLineOffset args);
public delegate void AdjustLineOffset_AfterArgs(Params_AdjustLineOffset args);
public delegate void AdjustLineOffset_WithArgs (Action<TMPro.TMP_Text,  int,  int,  float> orig, TMPro.TMP_Text self,  int startIndex,  int endIndex,  float offset);
public sealed class Params_ResizeLineExtents
{
public TMPro.TMP_Text self;
public int size;
}
public delegate void ResizeLineExtents_BeforeArgs(Params_ResizeLineExtents args);
public delegate void ResizeLineExtents_AfterArgs(Params_ResizeLineExtents args);
public delegate void ResizeLineExtents_WithArgs (Action<TMPro.TMP_Text,  int> orig, TMPro.TMP_Text self,  int size);
public sealed class Params_GetTextInfo
{
public TMPro.TMP_Text self;
public string text;
}
public delegate void GetTextInfo_BeforeArgs(Params_GetTextInfo args);
public delegate TMPro.TMP_TextInfo GetTextInfo_AfterArgs(Params_GetTextInfo args, TMPro.TMP_TextInfo ret);
public delegate TMPro.TMP_TextInfo GetTextInfo_WithArgs (Func<TMPro.TMP_Text,  string, TMPro.TMP_TextInfo> orig, TMPro.TMP_Text self,  string text);
public sealed class Params_ComputeMarginSize
{
public TMPro.TMP_Text self;
}
public delegate void ComputeMarginSize_BeforeArgs(Params_ComputeMarginSize args);
public delegate void ComputeMarginSize_AfterArgs(Params_ComputeMarginSize args);
public delegate void ComputeMarginSize_WithArgs (Action<TMPro.TMP_Text> orig, TMPro.TMP_Text self);
public sealed class Params_GetArraySizes
{
public TMPro.TMP_Text self;
public int[] chars;
}
public delegate void GetArraySizes_BeforeArgs(Params_GetArraySizes args);
public delegate int GetArraySizes_AfterArgs(Params_GetArraySizes args, int ret);
public delegate int GetArraySizes_WithArgs (Func<TMPro.TMP_Text,  int[], int> orig, TMPro.TMP_Text self,  int[] chars);
public sealed class Params_SaveWordWrappingState
{
public TMPro.TMP_Text self;
public TMPro.WordWrapState state;
public int index;
public int count;
}
public delegate void SaveWordWrappingState_BeforeArgs(Params_SaveWordWrappingState args);
public delegate void SaveWordWrappingState_AfterArgs(Params_SaveWordWrappingState args);
public delegate void SaveWordWrappingState_WithArgs (Action<TMPro.TMP_Text,  TMPro.WordWrapState,  int,  int> orig, TMPro.TMP_Text self,  TMPro.WordWrapState state,  int index,  int count);
public sealed class Params_RestoreWordWrappingState
{
public TMPro.TMP_Text self;
public TMPro.WordWrapState state;
}
public delegate void RestoreWordWrappingState_BeforeArgs(Params_RestoreWordWrappingState args);
public delegate int RestoreWordWrappingState_AfterArgs(Params_RestoreWordWrappingState args, int ret);
public delegate int RestoreWordWrappingState_WithArgs (Func<TMPro.TMP_Text,  TMPro.WordWrapState, int> orig, TMPro.TMP_Text self,  TMPro.WordWrapState state);
public sealed class Params_SaveGlyphVertexInfo
{
public TMPro.TMP_Text self;
public float padding;
public float style_padding;
public UnityEngine.Color32 vertexColor;
}
public delegate void SaveGlyphVertexInfo_BeforeArgs(Params_SaveGlyphVertexInfo args);
public delegate void SaveGlyphVertexInfo_AfterArgs(Params_SaveGlyphVertexInfo args);
public delegate void SaveGlyphVertexInfo_WithArgs (Action<TMPro.TMP_Text,  float,  float,  UnityEngine.Color32> orig, TMPro.TMP_Text self,  float padding,  float style_padding,  UnityEngine.Color32 vertexColor);
public sealed class Params_SaveSpriteVertexInfo
{
public TMPro.TMP_Text self;
public UnityEngine.Color32 vertexColor;
}
public delegate void SaveSpriteVertexInfo_BeforeArgs(Params_SaveSpriteVertexInfo args);
public delegate void SaveSpriteVertexInfo_AfterArgs(Params_SaveSpriteVertexInfo args);
public delegate void SaveSpriteVertexInfo_WithArgs (Action<TMPro.TMP_Text,  UnityEngine.Color32> orig, TMPro.TMP_Text self,  UnityEngine.Color32 vertexColor);
public sealed class Params_FillCharacterVertexBuffers_int_int
{
public TMPro.TMP_Text self;
public int i;
public int index_X4;
}
public delegate void FillCharacterVertexBuffers_int_int_BeforeArgs(Params_FillCharacterVertexBuffers_int_int args);
public delegate void FillCharacterVertexBuffers_int_int_AfterArgs(Params_FillCharacterVertexBuffers_int_int args);
public delegate void FillCharacterVertexBuffers_int_int_WithArgs (Action<TMPro.TMP_Text,  int,  int> orig, TMPro.TMP_Text self,  int i,  int index_X4);
public sealed class Params_FillCharacterVertexBuffers_int_int_bool
{
public TMPro.TMP_Text self;
public int i;
public int index_X4;
public bool isVolumetric;
}
public delegate void FillCharacterVertexBuffers_int_int_bool_BeforeArgs(Params_FillCharacterVertexBuffers_int_int_bool args);
public delegate void FillCharacterVertexBuffers_int_int_bool_AfterArgs(Params_FillCharacterVertexBuffers_int_int_bool args);
public delegate void FillCharacterVertexBuffers_int_int_bool_WithArgs (Action<TMPro.TMP_Text,  int,  int,  bool> orig, TMPro.TMP_Text self,  int i,  int index_X4,  bool isVolumetric);
public sealed class Params_FillSpriteVertexBuffers
{
public TMPro.TMP_Text self;
public int i;
public int index_X4;
}
public delegate void FillSpriteVertexBuffers_BeforeArgs(Params_FillSpriteVertexBuffers args);
public delegate void FillSpriteVertexBuffers_AfterArgs(Params_FillSpriteVertexBuffers args);
public delegate void FillSpriteVertexBuffers_WithArgs (Action<TMPro.TMP_Text,  int,  int> orig, TMPro.TMP_Text self,  int i,  int index_X4);
public sealed class Params_DrawUnderlineMesh
{
public TMPro.TMP_Text self;
public UnityEngine.Vector3 start;
public UnityEngine.Vector3 end;
public int index;
public float startScale;
public float endScale;
public float maxScale;
public float sdfScale;
public UnityEngine.Color32 underlineColor;
}
public delegate void DrawUnderlineMesh_BeforeArgs(Params_DrawUnderlineMesh args);
public delegate void DrawUnderlineMesh_AfterArgs(Params_DrawUnderlineMesh args);
public delegate void DrawUnderlineMesh_WithArgs (Action<TMPro.TMP_Text,  UnityEngine.Vector3,  UnityEngine.Vector3,  int,  float,  float,  float,  float,  UnityEngine.Color32> orig, TMPro.TMP_Text self,  UnityEngine.Vector3 start,  UnityEngine.Vector3 end,  int index,  float startScale,  float endScale,  float maxScale,  float sdfScale,  UnityEngine.Color32 underlineColor);
public sealed class Params_GetSpecialCharacters
{
public TMPro.TMP_Text self;
public TMPro.TMP_FontAsset fontAsset;
}
public delegate void GetSpecialCharacters_BeforeArgs(Params_GetSpecialCharacters args);
public delegate void GetSpecialCharacters_AfterArgs(Params_GetSpecialCharacters args);
public delegate void GetSpecialCharacters_WithArgs (Action<TMPro.TMP_Text,  TMPro.TMP_FontAsset> orig, TMPro.TMP_Text self,  TMPro.TMP_FontAsset fontAsset);
public sealed class Params_GetFontAssetForWeight
{
public TMPro.TMP_Text self;
public int fontWeight;
}
public delegate void GetFontAssetForWeight_BeforeArgs(Params_GetFontAssetForWeight args);
public delegate TMPro.TMP_FontAsset GetFontAssetForWeight_AfterArgs(Params_GetFontAssetForWeight args, TMPro.TMP_FontAsset ret);
public delegate TMPro.TMP_FontAsset GetFontAssetForWeight_WithArgs (Func<TMPro.TMP_Text,  int, TMPro.TMP_FontAsset> orig, TMPro.TMP_Text self,  int fontWeight);
public sealed class Params_SetActiveSubMeshes
{
public TMPro.TMP_Text self;
public bool state;
}
public delegate void SetActiveSubMeshes_BeforeArgs(Params_SetActiveSubMeshes args);
public delegate void SetActiveSubMeshes_AfterArgs(Params_SetActiveSubMeshes args);
public delegate void SetActiveSubMeshes_WithArgs (Action<TMPro.TMP_Text,  bool> orig, TMPro.TMP_Text self,  bool state);
public sealed class Params_PackUV_float_float_float
{
public TMPro.TMP_Text self;
public float x;
public float y;
public float scale;
}
public delegate void PackUV_float_float_float_BeforeArgs(Params_PackUV_float_float_float args);
public delegate UnityEngine.Vector2 PackUV_float_float_float_AfterArgs(Params_PackUV_float_float_float args, UnityEngine.Vector2 ret);
public delegate UnityEngine.Vector2 PackUV_float_float_float_WithArgs (Func<TMPro.TMP_Text,  float,  float,  float, UnityEngine.Vector2> orig, TMPro.TMP_Text self,  float x,  float y,  float scale);
public sealed class Params_PackUV_float_float
{
public TMPro.TMP_Text self;
public float x;
public float y;
}
public delegate void PackUV_float_float_BeforeArgs(Params_PackUV_float_float args);
public delegate float PackUV_float_float_AfterArgs(Params_PackUV_float_float args, float ret);
public delegate float PackUV_float_float_WithArgs (Func<TMPro.TMP_Text,  float,  float, float> orig, TMPro.TMP_Text self,  float x,  float y);
public sealed class Params_HexToInt
{
public TMPro.TMP_Text self;
public char hex;
}
public delegate void HexToInt_BeforeArgs(Params_HexToInt args);
public delegate int HexToInt_AfterArgs(Params_HexToInt args, int ret);
public delegate int HexToInt_WithArgs (Func<TMPro.TMP_Text,  char, int> orig, TMPro.TMP_Text self,  char hex);
public sealed class Params_GetUTF16
{
public TMPro.TMP_Text self;
public int i;
}
public delegate void GetUTF16_BeforeArgs(Params_GetUTF16 args);
public delegate int GetUTF16_AfterArgs(Params_GetUTF16 args, int ret);
public delegate int GetUTF16_WithArgs (Func<TMPro.TMP_Text,  int, int> orig, TMPro.TMP_Text self,  int i);
public sealed class Params_GetUTF32
{
public TMPro.TMP_Text self;
public int i;
}
public delegate void GetUTF32_BeforeArgs(Params_GetUTF32 args);
public delegate int GetUTF32_AfterArgs(Params_GetUTF32 args, int ret);
public delegate int GetUTF32_WithArgs (Func<TMPro.TMP_Text,  int, int> orig, TMPro.TMP_Text self,  int i);
public sealed class Params_HexCharsToColor_Array_int
{
public TMPro.TMP_Text self;
public char[] hexChars;
public int tagCount;
}
public delegate void HexCharsToColor_Array_int_BeforeArgs(Params_HexCharsToColor_Array_int args);
public delegate UnityEngine.Color32 HexCharsToColor_Array_int_AfterArgs(Params_HexCharsToColor_Array_int args, UnityEngine.Color32 ret);
public delegate UnityEngine.Color32 HexCharsToColor_Array_int_WithArgs (Func<TMPro.TMP_Text,  char[],  int, UnityEngine.Color32> orig, TMPro.TMP_Text self,  char[] hexChars,  int tagCount);
public sealed class Params_HexCharsToColor_Array_int_int
{
public TMPro.TMP_Text self;
public char[] hexChars;
public int startIndex;
public int length;
}
public delegate void HexCharsToColor_Array_int_int_BeforeArgs(Params_HexCharsToColor_Array_int_int args);
public delegate UnityEngine.Color32 HexCharsToColor_Array_int_int_AfterArgs(Params_HexCharsToColor_Array_int_int args, UnityEngine.Color32 ret);
public delegate UnityEngine.Color32 HexCharsToColor_Array_int_int_WithArgs (Func<TMPro.TMP_Text,  char[],  int,  int, UnityEngine.Color32> orig, TMPro.TMP_Text self,  char[] hexChars,  int startIndex,  int length);
public sealed class Params_ConvertToFloat
{
public TMPro.TMP_Text self;
public char[] chars;
public int startIndex;
public int length;
public int decimalPointIndex;
}
public delegate void ConvertToFloat_BeforeArgs(Params_ConvertToFloat args);
public delegate float ConvertToFloat_AfterArgs(Params_ConvertToFloat args, float ret);
public delegate float ConvertToFloat_WithArgs (Func<TMPro.TMP_Text,  char[],  int,  int,  int, float> orig, TMPro.TMP_Text self,  char[] chars,  int startIndex,  int length,  int decimalPointIndex);
public sealed class Params_ValidateHtmlTag
{
public TMPro.TMP_Text self;
public int[] chars;
public int startIndex;
public int endIndex;
}
public delegate void ValidateHtmlTag_BeforeArgs(Params_ValidateHtmlTag args);
public delegate bool ValidateHtmlTag_AfterArgs(Params_ValidateHtmlTag args, bool ret);
public delegate bool ValidateHtmlTag_WithArgs (Func<TMPro.TMP_Text,  int[],  int,  int, bool> orig, TMPro.TMP_Text self,  int[] chars,  int startIndex,  int endIndex);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_text_BeforeArgs get_text
{
add
{

HookHandler._beforeget_text += value;
HookHandler.Hookget_text();
}
remove => HookHandler._beforeget_text -= value;
}
public static event Delegates.set_text_BeforeArgs set_text
{
add
{

HookHandler._beforeset_text += value;
HookHandler.Hookset_text();
}
remove => HookHandler._beforeset_text -= value;
}
public static event Delegates.get_isRightToLeftText_BeforeArgs get_isRightToLeftText
{
add
{

HookHandler._beforeget_isRightToLeftText += value;
HookHandler.Hookget_isRightToLeftText();
}
remove => HookHandler._beforeget_isRightToLeftText -= value;
}
public static event Delegates.set_isRightToLeftText_BeforeArgs set_isRightToLeftText
{
add
{

HookHandler._beforeset_isRightToLeftText += value;
HookHandler.Hookset_isRightToLeftText();
}
remove => HookHandler._beforeset_isRightToLeftText -= value;
}
public static event Delegates.get_font_BeforeArgs get_font
{
add
{

HookHandler._beforeget_font += value;
HookHandler.Hookget_font();
}
remove => HookHandler._beforeget_font -= value;
}
public static event Delegates.set_font_BeforeArgs set_font
{
add
{

HookHandler._beforeset_font += value;
HookHandler.Hookset_font();
}
remove => HookHandler._beforeset_font -= value;
}
public static event Delegates.get_fontSharedMaterial_BeforeArgs get_fontSharedMaterial
{
add
{

HookHandler._beforeget_fontSharedMaterial += value;
HookHandler.Hookget_fontSharedMaterial();
}
remove => HookHandler._beforeget_fontSharedMaterial -= value;
}
public static event Delegates.set_fontSharedMaterial_BeforeArgs set_fontSharedMaterial
{
add
{

HookHandler._beforeset_fontSharedMaterial += value;
HookHandler.Hookset_fontSharedMaterial();
}
remove => HookHandler._beforeset_fontSharedMaterial -= value;
}
public static event Delegates.get_fontSharedMaterials_BeforeArgs get_fontSharedMaterials
{
add
{

HookHandler._beforeget_fontSharedMaterials += value;
HookHandler.Hookget_fontSharedMaterials();
}
remove => HookHandler._beforeget_fontSharedMaterials -= value;
}
public static event Delegates.set_fontSharedMaterials_BeforeArgs set_fontSharedMaterials
{
add
{

HookHandler._beforeset_fontSharedMaterials += value;
HookHandler.Hookset_fontSharedMaterials();
}
remove => HookHandler._beforeset_fontSharedMaterials -= value;
}
public static event Delegates.get_fontMaterial_BeforeArgs get_fontMaterial
{
add
{

HookHandler._beforeget_fontMaterial += value;
HookHandler.Hookget_fontMaterial();
}
remove => HookHandler._beforeget_fontMaterial -= value;
}
public static event Delegates.set_fontMaterial_BeforeArgs set_fontMaterial
{
add
{

HookHandler._beforeset_fontMaterial += value;
HookHandler.Hookset_fontMaterial();
}
remove => HookHandler._beforeset_fontMaterial -= value;
}
public static event Delegates.get_fontMaterials_BeforeArgs get_fontMaterials
{
add
{

HookHandler._beforeget_fontMaterials += value;
HookHandler.Hookget_fontMaterials();
}
remove => HookHandler._beforeget_fontMaterials -= value;
}
public static event Delegates.set_fontMaterials_BeforeArgs set_fontMaterials
{
add
{

HookHandler._beforeset_fontMaterials += value;
HookHandler.Hookset_fontMaterials();
}
remove => HookHandler._beforeset_fontMaterials -= value;
}
public static event Delegates.get_color_BeforeArgs get_color
{
add
{

HookHandler._beforeget_color += value;
HookHandler.Hookget_color();
}
remove => HookHandler._beforeget_color -= value;
}
public static event Delegates.set_color_BeforeArgs set_color
{
add
{

HookHandler._beforeset_color += value;
HookHandler.Hookset_color();
}
remove => HookHandler._beforeset_color -= value;
}
public static event Delegates.get_alpha_BeforeArgs get_alpha
{
add
{

HookHandler._beforeget_alpha += value;
HookHandler.Hookget_alpha();
}
remove => HookHandler._beforeget_alpha -= value;
}
public static event Delegates.set_alpha_BeforeArgs set_alpha
{
add
{

HookHandler._beforeset_alpha += value;
HookHandler.Hookset_alpha();
}
remove => HookHandler._beforeset_alpha -= value;
}
public static event Delegates.get_enableVertexGradient_BeforeArgs get_enableVertexGradient
{
add
{

HookHandler._beforeget_enableVertexGradient += value;
HookHandler.Hookget_enableVertexGradient();
}
remove => HookHandler._beforeget_enableVertexGradient -= value;
}
public static event Delegates.set_enableVertexGradient_BeforeArgs set_enableVertexGradient
{
add
{

HookHandler._beforeset_enableVertexGradient += value;
HookHandler.Hookset_enableVertexGradient();
}
remove => HookHandler._beforeset_enableVertexGradient -= value;
}
public static event Delegates.get_colorGradient_BeforeArgs get_colorGradient
{
add
{

HookHandler._beforeget_colorGradient += value;
HookHandler.Hookget_colorGradient();
}
remove => HookHandler._beforeget_colorGradient -= value;
}
public static event Delegates.set_colorGradient_BeforeArgs set_colorGradient
{
add
{

HookHandler._beforeset_colorGradient += value;
HookHandler.Hookset_colorGradient();
}
remove => HookHandler._beforeset_colorGradient -= value;
}
public static event Delegates.get_colorGradientPreset_BeforeArgs get_colorGradientPreset
{
add
{

HookHandler._beforeget_colorGradientPreset += value;
HookHandler.Hookget_colorGradientPreset();
}
remove => HookHandler._beforeget_colorGradientPreset -= value;
}
public static event Delegates.set_colorGradientPreset_BeforeArgs set_colorGradientPreset
{
add
{

HookHandler._beforeset_colorGradientPreset += value;
HookHandler.Hookset_colorGradientPreset();
}
remove => HookHandler._beforeset_colorGradientPreset -= value;
}
public static event Delegates.get_spriteAsset_BeforeArgs get_spriteAsset
{
add
{

HookHandler._beforeget_spriteAsset += value;
HookHandler.Hookget_spriteAsset();
}
remove => HookHandler._beforeget_spriteAsset -= value;
}
public static event Delegates.set_spriteAsset_BeforeArgs set_spriteAsset
{
add
{

HookHandler._beforeset_spriteAsset += value;
HookHandler.Hookset_spriteAsset();
}
remove => HookHandler._beforeset_spriteAsset -= value;
}
public static event Delegates.get_tintAllSprites_BeforeArgs get_tintAllSprites
{
add
{

HookHandler._beforeget_tintAllSprites += value;
HookHandler.Hookget_tintAllSprites();
}
remove => HookHandler._beforeget_tintAllSprites -= value;
}
public static event Delegates.set_tintAllSprites_BeforeArgs set_tintAllSprites
{
add
{

HookHandler._beforeset_tintAllSprites += value;
HookHandler.Hookset_tintAllSprites();
}
remove => HookHandler._beforeset_tintAllSprites -= value;
}
public static event Delegates.get_overrideColorTags_BeforeArgs get_overrideColorTags
{
add
{

HookHandler._beforeget_overrideColorTags += value;
HookHandler.Hookget_overrideColorTags();
}
remove => HookHandler._beforeget_overrideColorTags -= value;
}
public static event Delegates.set_overrideColorTags_BeforeArgs set_overrideColorTags
{
add
{

HookHandler._beforeset_overrideColorTags += value;
HookHandler.Hookset_overrideColorTags();
}
remove => HookHandler._beforeset_overrideColorTags -= value;
}
public static event Delegates.get_faceColor_BeforeArgs get_faceColor
{
add
{

HookHandler._beforeget_faceColor += value;
HookHandler.Hookget_faceColor();
}
remove => HookHandler._beforeget_faceColor -= value;
}
public static event Delegates.set_faceColor_BeforeArgs set_faceColor
{
add
{

HookHandler._beforeset_faceColor += value;
HookHandler.Hookset_faceColor();
}
remove => HookHandler._beforeset_faceColor -= value;
}
public static event Delegates.get_outlineColor_BeforeArgs get_outlineColor
{
add
{

HookHandler._beforeget_outlineColor += value;
HookHandler.Hookget_outlineColor();
}
remove => HookHandler._beforeget_outlineColor -= value;
}
public static event Delegates.set_outlineColor_BeforeArgs set_outlineColor
{
add
{

HookHandler._beforeset_outlineColor += value;
HookHandler.Hookset_outlineColor();
}
remove => HookHandler._beforeset_outlineColor -= value;
}
public static event Delegates.get_outlineWidth_BeforeArgs get_outlineWidth
{
add
{

HookHandler._beforeget_outlineWidth += value;
HookHandler.Hookget_outlineWidth();
}
remove => HookHandler._beforeget_outlineWidth -= value;
}
public static event Delegates.set_outlineWidth_BeforeArgs set_outlineWidth
{
add
{

HookHandler._beforeset_outlineWidth += value;
HookHandler.Hookset_outlineWidth();
}
remove => HookHandler._beforeset_outlineWidth -= value;
}
public static event Delegates.get_fontSize_BeforeArgs get_fontSize
{
add
{

HookHandler._beforeget_fontSize += value;
HookHandler.Hookget_fontSize();
}
remove => HookHandler._beforeget_fontSize -= value;
}
public static event Delegates.set_fontSize_BeforeArgs set_fontSize
{
add
{

HookHandler._beforeset_fontSize += value;
HookHandler.Hookset_fontSize();
}
remove => HookHandler._beforeset_fontSize -= value;
}
public static event Delegates.get_fontScale_BeforeArgs get_fontScale
{
add
{

HookHandler._beforeget_fontScale += value;
HookHandler.Hookget_fontScale();
}
remove => HookHandler._beforeget_fontScale -= value;
}
public static event Delegates.get_fontWeight_BeforeArgs get_fontWeight
{
add
{

HookHandler._beforeget_fontWeight += value;
HookHandler.Hookget_fontWeight();
}
remove => HookHandler._beforeget_fontWeight -= value;
}
public static event Delegates.set_fontWeight_BeforeArgs set_fontWeight
{
add
{

HookHandler._beforeset_fontWeight += value;
HookHandler.Hookset_fontWeight();
}
remove => HookHandler._beforeset_fontWeight -= value;
}
public static event Delegates.get_pixelsPerUnit_BeforeArgs get_pixelsPerUnit
{
add
{

HookHandler._beforeget_pixelsPerUnit += value;
HookHandler.Hookget_pixelsPerUnit();
}
remove => HookHandler._beforeget_pixelsPerUnit -= value;
}
public static event Delegates.get_enableAutoSizing_BeforeArgs get_enableAutoSizing
{
add
{

HookHandler._beforeget_enableAutoSizing += value;
HookHandler.Hookget_enableAutoSizing();
}
remove => HookHandler._beforeget_enableAutoSizing -= value;
}
public static event Delegates.set_enableAutoSizing_BeforeArgs set_enableAutoSizing
{
add
{

HookHandler._beforeset_enableAutoSizing += value;
HookHandler.Hookset_enableAutoSizing();
}
remove => HookHandler._beforeset_enableAutoSizing -= value;
}
public static event Delegates.get_fontSizeMin_BeforeArgs get_fontSizeMin
{
add
{

HookHandler._beforeget_fontSizeMin += value;
HookHandler.Hookget_fontSizeMin();
}
remove => HookHandler._beforeget_fontSizeMin -= value;
}
public static event Delegates.set_fontSizeMin_BeforeArgs set_fontSizeMin
{
add
{

HookHandler._beforeset_fontSizeMin += value;
HookHandler.Hookset_fontSizeMin();
}
remove => HookHandler._beforeset_fontSizeMin -= value;
}
public static event Delegates.get_fontSizeMax_BeforeArgs get_fontSizeMax
{
add
{

HookHandler._beforeget_fontSizeMax += value;
HookHandler.Hookget_fontSizeMax();
}
remove => HookHandler._beforeget_fontSizeMax -= value;
}
public static event Delegates.set_fontSizeMax_BeforeArgs set_fontSizeMax
{
add
{

HookHandler._beforeset_fontSizeMax += value;
HookHandler.Hookset_fontSizeMax();
}
remove => HookHandler._beforeset_fontSizeMax -= value;
}
public static event Delegates.get_fontStyle_BeforeArgs get_fontStyle
{
add
{

HookHandler._beforeget_fontStyle += value;
HookHandler.Hookget_fontStyle();
}
remove => HookHandler._beforeget_fontStyle -= value;
}
public static event Delegates.set_fontStyle_BeforeArgs set_fontStyle
{
add
{

HookHandler._beforeset_fontStyle += value;
HookHandler.Hookset_fontStyle();
}
remove => HookHandler._beforeset_fontStyle -= value;
}
public static event Delegates.get_isUsingBold_BeforeArgs get_isUsingBold
{
add
{

HookHandler._beforeget_isUsingBold += value;
HookHandler.Hookget_isUsingBold();
}
remove => HookHandler._beforeget_isUsingBold -= value;
}
public static event Delegates.get_alignment_BeforeArgs get_alignment
{
add
{

HookHandler._beforeget_alignment += value;
HookHandler.Hookget_alignment();
}
remove => HookHandler._beforeget_alignment -= value;
}
public static event Delegates.set_alignment_BeforeArgs set_alignment
{
add
{

HookHandler._beforeset_alignment += value;
HookHandler.Hookset_alignment();
}
remove => HookHandler._beforeset_alignment -= value;
}
public static event Delegates.get_characterSpacing_BeforeArgs get_characterSpacing
{
add
{

HookHandler._beforeget_characterSpacing += value;
HookHandler.Hookget_characterSpacing();
}
remove => HookHandler._beforeget_characterSpacing -= value;
}
public static event Delegates.set_characterSpacing_BeforeArgs set_characterSpacing
{
add
{

HookHandler._beforeset_characterSpacing += value;
HookHandler.Hookset_characterSpacing();
}
remove => HookHandler._beforeset_characterSpacing -= value;
}
public static event Delegates.get_lineSpacing_BeforeArgs get_lineSpacing
{
add
{

HookHandler._beforeget_lineSpacing += value;
HookHandler.Hookget_lineSpacing();
}
remove => HookHandler._beforeget_lineSpacing -= value;
}
public static event Delegates.set_lineSpacing_BeforeArgs set_lineSpacing
{
add
{

HookHandler._beforeset_lineSpacing += value;
HookHandler.Hookset_lineSpacing();
}
remove => HookHandler._beforeset_lineSpacing -= value;
}
public static event Delegates.get_paragraphSpacing_BeforeArgs get_paragraphSpacing
{
add
{

HookHandler._beforeget_paragraphSpacing += value;
HookHandler.Hookget_paragraphSpacing();
}
remove => HookHandler._beforeget_paragraphSpacing -= value;
}
public static event Delegates.set_paragraphSpacing_BeforeArgs set_paragraphSpacing
{
add
{

HookHandler._beforeset_paragraphSpacing += value;
HookHandler.Hookset_paragraphSpacing();
}
remove => HookHandler._beforeset_paragraphSpacing -= value;
}
public static event Delegates.get_characterWidthAdjustment_BeforeArgs get_characterWidthAdjustment
{
add
{

HookHandler._beforeget_characterWidthAdjustment += value;
HookHandler.Hookget_characterWidthAdjustment();
}
remove => HookHandler._beforeget_characterWidthAdjustment -= value;
}
public static event Delegates.set_characterWidthAdjustment_BeforeArgs set_characterWidthAdjustment
{
add
{

HookHandler._beforeset_characterWidthAdjustment += value;
HookHandler.Hookset_characterWidthAdjustment();
}
remove => HookHandler._beforeset_characterWidthAdjustment -= value;
}
public static event Delegates.get_enableWordWrapping_BeforeArgs get_enableWordWrapping
{
add
{

HookHandler._beforeget_enableWordWrapping += value;
HookHandler.Hookget_enableWordWrapping();
}
remove => HookHandler._beforeget_enableWordWrapping -= value;
}
public static event Delegates.set_enableWordWrapping_BeforeArgs set_enableWordWrapping
{
add
{

HookHandler._beforeset_enableWordWrapping += value;
HookHandler.Hookset_enableWordWrapping();
}
remove => HookHandler._beforeset_enableWordWrapping -= value;
}
public static event Delegates.get_wordWrappingRatios_BeforeArgs get_wordWrappingRatios
{
add
{

HookHandler._beforeget_wordWrappingRatios += value;
HookHandler.Hookget_wordWrappingRatios();
}
remove => HookHandler._beforeget_wordWrappingRatios -= value;
}
public static event Delegates.set_wordWrappingRatios_BeforeArgs set_wordWrappingRatios
{
add
{

HookHandler._beforeset_wordWrappingRatios += value;
HookHandler.Hookset_wordWrappingRatios();
}
remove => HookHandler._beforeset_wordWrappingRatios -= value;
}
public static event Delegates.get_enableAdaptiveJustification_BeforeArgs get_enableAdaptiveJustification
{
add
{

HookHandler._beforeget_enableAdaptiveJustification += value;
HookHandler.Hookget_enableAdaptiveJustification();
}
remove => HookHandler._beforeget_enableAdaptiveJustification -= value;
}
public static event Delegates.set_enableAdaptiveJustification_BeforeArgs set_enableAdaptiveJustification
{
add
{

HookHandler._beforeset_enableAdaptiveJustification += value;
HookHandler.Hookset_enableAdaptiveJustification();
}
remove => HookHandler._beforeset_enableAdaptiveJustification -= value;
}
public static event Delegates.get_OverflowMode_BeforeArgs get_OverflowMode
{
add
{

HookHandler._beforeget_OverflowMode += value;
HookHandler.Hookget_OverflowMode();
}
remove => HookHandler._beforeget_OverflowMode -= value;
}
public static event Delegates.set_OverflowMode_BeforeArgs set_OverflowMode
{
add
{

HookHandler._beforeset_OverflowMode += value;
HookHandler.Hookset_OverflowMode();
}
remove => HookHandler._beforeset_OverflowMode -= value;
}
public static event Delegates.get_enableKerning_BeforeArgs get_enableKerning
{
add
{

HookHandler._beforeget_enableKerning += value;
HookHandler.Hookget_enableKerning();
}
remove => HookHandler._beforeget_enableKerning -= value;
}
public static event Delegates.set_enableKerning_BeforeArgs set_enableKerning
{
add
{

HookHandler._beforeset_enableKerning += value;
HookHandler.Hookset_enableKerning();
}
remove => HookHandler._beforeset_enableKerning -= value;
}
public static event Delegates.get_extraPadding_BeforeArgs get_extraPadding
{
add
{

HookHandler._beforeget_extraPadding += value;
HookHandler.Hookget_extraPadding();
}
remove => HookHandler._beforeget_extraPadding -= value;
}
public static event Delegates.set_extraPadding_BeforeArgs set_extraPadding
{
add
{

HookHandler._beforeset_extraPadding += value;
HookHandler.Hookset_extraPadding();
}
remove => HookHandler._beforeset_extraPadding -= value;
}
public static event Delegates.get_richText_BeforeArgs get_richText
{
add
{

HookHandler._beforeget_richText += value;
HookHandler.Hookget_richText();
}
remove => HookHandler._beforeget_richText -= value;
}
public static event Delegates.set_richText_BeforeArgs set_richText
{
add
{

HookHandler._beforeset_richText += value;
HookHandler.Hookset_richText();
}
remove => HookHandler._beforeset_richText -= value;
}
public static event Delegates.get_parseCtrlCharacters_BeforeArgs get_parseCtrlCharacters
{
add
{

HookHandler._beforeget_parseCtrlCharacters += value;
HookHandler.Hookget_parseCtrlCharacters();
}
remove => HookHandler._beforeget_parseCtrlCharacters -= value;
}
public static event Delegates.set_parseCtrlCharacters_BeforeArgs set_parseCtrlCharacters
{
add
{

HookHandler._beforeset_parseCtrlCharacters += value;
HookHandler.Hookset_parseCtrlCharacters();
}
remove => HookHandler._beforeset_parseCtrlCharacters -= value;
}
public static event Delegates.get_isOverlay_BeforeArgs get_isOverlay
{
add
{

HookHandler._beforeget_isOverlay += value;
HookHandler.Hookget_isOverlay();
}
remove => HookHandler._beforeget_isOverlay -= value;
}
public static event Delegates.set_isOverlay_BeforeArgs set_isOverlay
{
add
{

HookHandler._beforeset_isOverlay += value;
HookHandler.Hookset_isOverlay();
}
remove => HookHandler._beforeset_isOverlay -= value;
}
public static event Delegates.get_isOrthographic_BeforeArgs get_isOrthographic
{
add
{

HookHandler._beforeget_isOrthographic += value;
HookHandler.Hookget_isOrthographic();
}
remove => HookHandler._beforeget_isOrthographic -= value;
}
public static event Delegates.set_isOrthographic_BeforeArgs set_isOrthographic
{
add
{

HookHandler._beforeset_isOrthographic += value;
HookHandler.Hookset_isOrthographic();
}
remove => HookHandler._beforeset_isOrthographic -= value;
}
public static event Delegates.get_enableCulling_BeforeArgs get_enableCulling
{
add
{

HookHandler._beforeget_enableCulling += value;
HookHandler.Hookget_enableCulling();
}
remove => HookHandler._beforeget_enableCulling -= value;
}
public static event Delegates.set_enableCulling_BeforeArgs set_enableCulling
{
add
{

HookHandler._beforeset_enableCulling += value;
HookHandler.Hookset_enableCulling();
}
remove => HookHandler._beforeset_enableCulling -= value;
}
public static event Delegates.get_ignoreVisibility_BeforeArgs get_ignoreVisibility
{
add
{

HookHandler._beforeget_ignoreVisibility += value;
HookHandler.Hookget_ignoreVisibility();
}
remove => HookHandler._beforeget_ignoreVisibility -= value;
}
public static event Delegates.set_ignoreVisibility_BeforeArgs set_ignoreVisibility
{
add
{

HookHandler._beforeset_ignoreVisibility += value;
HookHandler.Hookset_ignoreVisibility();
}
remove => HookHandler._beforeset_ignoreVisibility -= value;
}
public static event Delegates.get_horizontalMapping_BeforeArgs get_horizontalMapping
{
add
{

HookHandler._beforeget_horizontalMapping += value;
HookHandler.Hookget_horizontalMapping();
}
remove => HookHandler._beforeget_horizontalMapping -= value;
}
public static event Delegates.set_horizontalMapping_BeforeArgs set_horizontalMapping
{
add
{

HookHandler._beforeset_horizontalMapping += value;
HookHandler.Hookset_horizontalMapping();
}
remove => HookHandler._beforeset_horizontalMapping -= value;
}
public static event Delegates.get_verticalMapping_BeforeArgs get_verticalMapping
{
add
{

HookHandler._beforeget_verticalMapping += value;
HookHandler.Hookget_verticalMapping();
}
remove => HookHandler._beforeget_verticalMapping -= value;
}
public static event Delegates.set_verticalMapping_BeforeArgs set_verticalMapping
{
add
{

HookHandler._beforeset_verticalMapping += value;
HookHandler.Hookset_verticalMapping();
}
remove => HookHandler._beforeset_verticalMapping -= value;
}
public static event Delegates.get_renderMode_BeforeArgs get_renderMode
{
add
{

HookHandler._beforeget_renderMode += value;
HookHandler.Hookget_renderMode();
}
remove => HookHandler._beforeget_renderMode -= value;
}
public static event Delegates.set_renderMode_BeforeArgs set_renderMode
{
add
{

HookHandler._beforeset_renderMode += value;
HookHandler.Hookset_renderMode();
}
remove => HookHandler._beforeset_renderMode -= value;
}
public static event Delegates.get_maxVisibleCharacters_BeforeArgs get_maxVisibleCharacters
{
add
{

HookHandler._beforeget_maxVisibleCharacters += value;
HookHandler.Hookget_maxVisibleCharacters();
}
remove => HookHandler._beforeget_maxVisibleCharacters -= value;
}
public static event Delegates.set_maxVisibleCharacters_BeforeArgs set_maxVisibleCharacters
{
add
{

HookHandler._beforeset_maxVisibleCharacters += value;
HookHandler.Hookset_maxVisibleCharacters();
}
remove => HookHandler._beforeset_maxVisibleCharacters -= value;
}
public static event Delegates.get_maxVisibleWords_BeforeArgs get_maxVisibleWords
{
add
{

HookHandler._beforeget_maxVisibleWords += value;
HookHandler.Hookget_maxVisibleWords();
}
remove => HookHandler._beforeget_maxVisibleWords -= value;
}
public static event Delegates.set_maxVisibleWords_BeforeArgs set_maxVisibleWords
{
add
{

HookHandler._beforeset_maxVisibleWords += value;
HookHandler.Hookset_maxVisibleWords();
}
remove => HookHandler._beforeset_maxVisibleWords -= value;
}
public static event Delegates.get_maxVisibleLines_BeforeArgs get_maxVisibleLines
{
add
{

HookHandler._beforeget_maxVisibleLines += value;
HookHandler.Hookget_maxVisibleLines();
}
remove => HookHandler._beforeget_maxVisibleLines -= value;
}
public static event Delegates.set_maxVisibleLines_BeforeArgs set_maxVisibleLines
{
add
{

HookHandler._beforeset_maxVisibleLines += value;
HookHandler.Hookset_maxVisibleLines();
}
remove => HookHandler._beforeset_maxVisibleLines -= value;
}
public static event Delegates.get_useMaxVisibleDescender_BeforeArgs get_useMaxVisibleDescender
{
add
{

HookHandler._beforeget_useMaxVisibleDescender += value;
HookHandler.Hookget_useMaxVisibleDescender();
}
remove => HookHandler._beforeget_useMaxVisibleDescender -= value;
}
public static event Delegates.set_useMaxVisibleDescender_BeforeArgs set_useMaxVisibleDescender
{
add
{

HookHandler._beforeset_useMaxVisibleDescender += value;
HookHandler.Hookset_useMaxVisibleDescender();
}
remove => HookHandler._beforeset_useMaxVisibleDescender -= value;
}
public static event Delegates.get_pageToDisplay_BeforeArgs get_pageToDisplay
{
add
{

HookHandler._beforeget_pageToDisplay += value;
HookHandler.Hookget_pageToDisplay();
}
remove => HookHandler._beforeget_pageToDisplay -= value;
}
public static event Delegates.set_pageToDisplay_BeforeArgs set_pageToDisplay
{
add
{

HookHandler._beforeset_pageToDisplay += value;
HookHandler.Hookset_pageToDisplay();
}
remove => HookHandler._beforeset_pageToDisplay -= value;
}
public static event Delegates.get_margin_BeforeArgs get_margin
{
add
{

HookHandler._beforeget_margin += value;
HookHandler.Hookget_margin();
}
remove => HookHandler._beforeget_margin -= value;
}
public static event Delegates.set_margin_BeforeArgs set_margin
{
add
{

HookHandler._beforeset_margin += value;
HookHandler.Hookset_margin();
}
remove => HookHandler._beforeset_margin -= value;
}
public static event Delegates.get_textInfo_BeforeArgs get_textInfo
{
add
{

HookHandler._beforeget_textInfo += value;
HookHandler.Hookget_textInfo();
}
remove => HookHandler._beforeget_textInfo -= value;
}
public static event Delegates.get_havePropertiesChanged_BeforeArgs get_havePropertiesChanged
{
add
{

HookHandler._beforeget_havePropertiesChanged += value;
HookHandler.Hookget_havePropertiesChanged();
}
remove => HookHandler._beforeget_havePropertiesChanged -= value;
}
public static event Delegates.set_havePropertiesChanged_BeforeArgs set_havePropertiesChanged
{
add
{

HookHandler._beforeset_havePropertiesChanged += value;
HookHandler.Hookset_havePropertiesChanged();
}
remove => HookHandler._beforeset_havePropertiesChanged -= value;
}
public static event Delegates.get_isUsingLegacyAnimationComponent_BeforeArgs get_isUsingLegacyAnimationComponent
{
add
{

HookHandler._beforeget_isUsingLegacyAnimationComponent += value;
HookHandler.Hookget_isUsingLegacyAnimationComponent();
}
remove => HookHandler._beforeget_isUsingLegacyAnimationComponent -= value;
}
public static event Delegates.set_isUsingLegacyAnimationComponent_BeforeArgs set_isUsingLegacyAnimationComponent
{
add
{

HookHandler._beforeset_isUsingLegacyAnimationComponent += value;
HookHandler.Hookset_isUsingLegacyAnimationComponent();
}
remove => HookHandler._beforeset_isUsingLegacyAnimationComponent -= value;
}
public static event Delegates.get_transform_BeforeArgs get_transform
{
add
{

HookHandler._beforeget_transform += value;
HookHandler.Hookget_transform();
}
remove => HookHandler._beforeget_transform -= value;
}
public static event Delegates.get_rectTransform_BeforeArgs get_rectTransform
{
add
{

HookHandler._beforeget_rectTransform += value;
HookHandler.Hookget_rectTransform();
}
remove => HookHandler._beforeget_rectTransform -= value;
}
public static event Delegates.get_autoSizeTextContainer_BeforeArgs get_autoSizeTextContainer
{
add
{

HookHandler._beforeget_autoSizeTextContainer += value;
HookHandler.Hookget_autoSizeTextContainer();
}
remove => HookHandler._beforeget_autoSizeTextContainer -= value;
}
public static event Delegates.set_autoSizeTextContainer_BeforeArgs set_autoSizeTextContainer
{
add
{

HookHandler._beforeset_autoSizeTextContainer += value;
HookHandler.Hookset_autoSizeTextContainer();
}
remove => HookHandler._beforeset_autoSizeTextContainer -= value;
}
public static event Delegates.get_mesh_BeforeArgs get_mesh
{
add
{

HookHandler._beforeget_mesh += value;
HookHandler.Hookget_mesh();
}
remove => HookHandler._beforeget_mesh -= value;
}
public static event Delegates.get_isVolumetricText_BeforeArgs get_isVolumetricText
{
add
{

HookHandler._beforeget_isVolumetricText += value;
HookHandler.Hookget_isVolumetricText();
}
remove => HookHandler._beforeget_isVolumetricText -= value;
}
public static event Delegates.set_isVolumetricText_BeforeArgs set_isVolumetricText
{
add
{

HookHandler._beforeset_isVolumetricText += value;
HookHandler.Hookset_isVolumetricText();
}
remove => HookHandler._beforeset_isVolumetricText -= value;
}
public static event Delegates.get_bounds_BeforeArgs get_bounds
{
add
{

HookHandler._beforeget_bounds += value;
HookHandler.Hookget_bounds();
}
remove => HookHandler._beforeget_bounds -= value;
}
public static event Delegates.get_textBounds_BeforeArgs get_textBounds
{
add
{

HookHandler._beforeget_textBounds += value;
HookHandler.Hookget_textBounds();
}
remove => HookHandler._beforeget_textBounds -= value;
}
public static event Delegates.get_flexibleHeight_BeforeArgs get_flexibleHeight
{
add
{

HookHandler._beforeget_flexibleHeight += value;
HookHandler.Hookget_flexibleHeight();
}
remove => HookHandler._beforeget_flexibleHeight -= value;
}
public static event Delegates.get_flexibleWidth_BeforeArgs get_flexibleWidth
{
add
{

HookHandler._beforeget_flexibleWidth += value;
HookHandler.Hookget_flexibleWidth();
}
remove => HookHandler._beforeget_flexibleWidth -= value;
}
public static event Delegates.get_minHeight_BeforeArgs get_minHeight
{
add
{

HookHandler._beforeget_minHeight += value;
HookHandler.Hookget_minHeight();
}
remove => HookHandler._beforeget_minHeight -= value;
}
public static event Delegates.get_minWidth_BeforeArgs get_minWidth
{
add
{

HookHandler._beforeget_minWidth += value;
HookHandler.Hookget_minWidth();
}
remove => HookHandler._beforeget_minWidth -= value;
}
public static event Delegates.get_preferredWidth_BeforeArgs get_preferredWidth
{
add
{

HookHandler._beforeget_preferredWidth += value;
HookHandler.Hookget_preferredWidth();
}
remove => HookHandler._beforeget_preferredWidth -= value;
}
public static event Delegates.get_preferredHeight_BeforeArgs get_preferredHeight
{
add
{

HookHandler._beforeget_preferredHeight += value;
HookHandler.Hookget_preferredHeight();
}
remove => HookHandler._beforeget_preferredHeight -= value;
}
public static event Delegates.get_renderedWidth_BeforeArgs get_renderedWidth
{
add
{

HookHandler._beforeget_renderedWidth += value;
HookHandler.Hookget_renderedWidth();
}
remove => HookHandler._beforeget_renderedWidth -= value;
}
public static event Delegates.get_renderedHeight_BeforeArgs get_renderedHeight
{
add
{

HookHandler._beforeget_renderedHeight += value;
HookHandler.Hookget_renderedHeight();
}
remove => HookHandler._beforeget_renderedHeight -= value;
}
public static event Delegates.get_layoutPriority_BeforeArgs get_layoutPriority
{
add
{

HookHandler._beforeget_layoutPriority += value;
HookHandler.Hookget_layoutPriority();
}
remove => HookHandler._beforeget_layoutPriority -= value;
}
public static event Delegates.LoadFontAsset_BeforeArgs LoadFontAsset
{
add
{

HookHandler._beforeLoadFontAsset += value;
HookHandler.HookLoadFontAsset();
}
remove => HookHandler._beforeLoadFontAsset -= value;
}
public static event Delegates.SetSharedMaterial_BeforeArgs SetSharedMaterial
{
add
{

HookHandler._beforeSetSharedMaterial += value;
HookHandler.HookSetSharedMaterial();
}
remove => HookHandler._beforeSetSharedMaterial -= value;
}
public static event Delegates.GetMaterial_BeforeArgs GetMaterial
{
add
{

HookHandler._beforeGetMaterial += value;
HookHandler.HookGetMaterial();
}
remove => HookHandler._beforeGetMaterial -= value;
}
public static event Delegates.SetFontBaseMaterial_BeforeArgs SetFontBaseMaterial
{
add
{

HookHandler._beforeSetFontBaseMaterial += value;
HookHandler.HookSetFontBaseMaterial();
}
remove => HookHandler._beforeSetFontBaseMaterial -= value;
}
public static event Delegates.GetSharedMaterials_BeforeArgs GetSharedMaterials
{
add
{

HookHandler._beforeGetSharedMaterials += value;
HookHandler.HookGetSharedMaterials();
}
remove => HookHandler._beforeGetSharedMaterials -= value;
}
public static event Delegates.SetSharedMaterials_BeforeArgs SetSharedMaterials
{
add
{

HookHandler._beforeSetSharedMaterials += value;
HookHandler.HookSetSharedMaterials();
}
remove => HookHandler._beforeSetSharedMaterials -= value;
}
public static event Delegates.GetMaterials_BeforeArgs GetMaterials
{
add
{

HookHandler._beforeGetMaterials += value;
HookHandler.HookGetMaterials();
}
remove => HookHandler._beforeGetMaterials -= value;
}
public static event Delegates.CreateMaterialInstance_BeforeArgs CreateMaterialInstance
{
add
{

HookHandler._beforeCreateMaterialInstance += value;
HookHandler.HookCreateMaterialInstance();
}
remove => HookHandler._beforeCreateMaterialInstance -= value;
}
public static event Delegates.SetVertexColorGradient_BeforeArgs SetVertexColorGradient
{
add
{

HookHandler._beforeSetVertexColorGradient += value;
HookHandler.HookSetVertexColorGradient();
}
remove => HookHandler._beforeSetVertexColorGradient -= value;
}
public static event Delegates.SetFaceColor_BeforeArgs SetFaceColor
{
add
{

HookHandler._beforeSetFaceColor += value;
HookHandler.HookSetFaceColor();
}
remove => HookHandler._beforeSetFaceColor -= value;
}
public static event Delegates.SetOutlineColor_BeforeArgs SetOutlineColor
{
add
{

HookHandler._beforeSetOutlineColor += value;
HookHandler.HookSetOutlineColor();
}
remove => HookHandler._beforeSetOutlineColor -= value;
}
public static event Delegates.SetOutlineThickness_BeforeArgs SetOutlineThickness
{
add
{

HookHandler._beforeSetOutlineThickness += value;
HookHandler.HookSetOutlineThickness();
}
remove => HookHandler._beforeSetOutlineThickness -= value;
}
public static event Delegates.SetShaderDepth_BeforeArgs SetShaderDepth
{
add
{

HookHandler._beforeSetShaderDepth += value;
HookHandler.HookSetShaderDepth();
}
remove => HookHandler._beforeSetShaderDepth -= value;
}
public static event Delegates.SetCulling_BeforeArgs SetCulling
{
add
{

HookHandler._beforeSetCulling += value;
HookHandler.HookSetCulling();
}
remove => HookHandler._beforeSetCulling -= value;
}
public static event Delegates.GetPaddingForMaterial_BeforeArgs GetPaddingForMaterial
{
add
{

HookHandler._beforeGetPaddingForMaterial += value;
HookHandler.HookGetPaddingForMaterial();
}
remove => HookHandler._beforeGetPaddingForMaterial -= value;
}
public static event Delegates.GetPaddingForMaterial_Material_BeforeArgs GetPaddingForMaterial_Material
{
add
{

HookHandler._beforeGetPaddingForMaterial_Material += value;
HookHandler.HookGetPaddingForMaterial_Material();
}
remove => HookHandler._beforeGetPaddingForMaterial_Material -= value;
}
public static event Delegates.GetTextContainerLocalCorners_BeforeArgs GetTextContainerLocalCorners
{
add
{

HookHandler._beforeGetTextContainerLocalCorners += value;
HookHandler.HookGetTextContainerLocalCorners();
}
remove => HookHandler._beforeGetTextContainerLocalCorners -= value;
}
public static event Delegates.ForceMeshUpdate_BeforeArgs ForceMeshUpdate
{
add
{

HookHandler._beforeForceMeshUpdate += value;
HookHandler.HookForceMeshUpdate();
}
remove => HookHandler._beforeForceMeshUpdate -= value;
}
public static event Delegates.ForceMeshUpdate_bool_BeforeArgs ForceMeshUpdate_bool
{
add
{

HookHandler._beforeForceMeshUpdate_bool += value;
HookHandler.HookForceMeshUpdate_bool();
}
remove => HookHandler._beforeForceMeshUpdate_bool -= value;
}
public static event Delegates.SetTextInternal_BeforeArgs SetTextInternal
{
add
{

HookHandler._beforeSetTextInternal += value;
HookHandler.HookSetTextInternal();
}
remove => HookHandler._beforeSetTextInternal -= value;
}
public static event Delegates.UpdateGeometry_BeforeArgs UpdateGeometry
{
add
{

HookHandler._beforeUpdateGeometry += value;
HookHandler.HookUpdateGeometry();
}
remove => HookHandler._beforeUpdateGeometry -= value;
}
public static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_BeforeArgs UpdateVertexData_TMP_VertexDataUpdateFlags
{
add
{

HookHandler._beforeUpdateVertexData_TMP_VertexDataUpdateFlags += value;
HookHandler.HookUpdateVertexData_TMP_VertexDataUpdateFlags();
}
remove => HookHandler._beforeUpdateVertexData_TMP_VertexDataUpdateFlags -= value;
}
public static event Delegates.UpdateVertexData_BeforeArgs UpdateVertexData
{
add
{

HookHandler._beforeUpdateVertexData += value;
HookHandler.HookUpdateVertexData();
}
remove => HookHandler._beforeUpdateVertexData -= value;
}
public static event Delegates.SetVertices_BeforeArgs SetVertices
{
add
{

HookHandler._beforeSetVertices += value;
HookHandler.HookSetVertices();
}
remove => HookHandler._beforeSetVertices -= value;
}
public static event Delegates.UpdateMeshPadding_BeforeArgs UpdateMeshPadding
{
add
{

HookHandler._beforeUpdateMeshPadding += value;
HookHandler.HookUpdateMeshPadding();
}
remove => HookHandler._beforeUpdateMeshPadding -= value;
}
public static event Delegates.CrossFadeColor_BeforeArgs CrossFadeColor
{
add
{

HookHandler._beforeCrossFadeColor += value;
HookHandler.HookCrossFadeColor();
}
remove => HookHandler._beforeCrossFadeColor -= value;
}
public static event Delegates.CrossFadeAlpha_BeforeArgs CrossFadeAlpha
{
add
{

HookHandler._beforeCrossFadeAlpha += value;
HookHandler.HookCrossFadeAlpha();
}
remove => HookHandler._beforeCrossFadeAlpha -= value;
}
public static event Delegates.InternalCrossFadeColor_BeforeArgs InternalCrossFadeColor
{
add
{

HookHandler._beforeInternalCrossFadeColor += value;
HookHandler.HookInternalCrossFadeColor();
}
remove => HookHandler._beforeInternalCrossFadeColor -= value;
}
public static event Delegates.InternalCrossFadeAlpha_BeforeArgs InternalCrossFadeAlpha
{
add
{

HookHandler._beforeInternalCrossFadeAlpha += value;
HookHandler.HookInternalCrossFadeAlpha();
}
remove => HookHandler._beforeInternalCrossFadeAlpha -= value;
}
public static event Delegates.ParseInputText_BeforeArgs ParseInputText
{
add
{

HookHandler._beforeParseInputText += value;
HookHandler.HookParseInputText();
}
remove => HookHandler._beforeParseInputText -= value;
}
public static event Delegates.SetText_string_BeforeArgs SetText_string
{
add
{

HookHandler._beforeSetText_string += value;
HookHandler.HookSetText_string();
}
remove => HookHandler._beforeSetText_string -= value;
}
public static event Delegates.SetText_string_float_BeforeArgs SetText_string_float
{
add
{

HookHandler._beforeSetText_string_float += value;
HookHandler.HookSetText_string_float();
}
remove => HookHandler._beforeSetText_string_float -= value;
}
public static event Delegates.SetText_string_float_float_BeforeArgs SetText_string_float_float
{
add
{

HookHandler._beforeSetText_string_float_float += value;
HookHandler.HookSetText_string_float_float();
}
remove => HookHandler._beforeSetText_string_float_float -= value;
}
public static event Delegates.SetText_string_float_float_float_BeforeArgs SetText_string_float_float_float
{
add
{

HookHandler._beforeSetText_string_float_float_float += value;
HookHandler.HookSetText_string_float_float_float();
}
remove => HookHandler._beforeSetText_string_float_float_float -= value;
}
public static event Delegates.SetText_StringBuilder_BeforeArgs SetText_StringBuilder
{
add
{

HookHandler._beforeSetText_StringBuilder += value;
HookHandler.HookSetText_StringBuilder();
}
remove => HookHandler._beforeSetText_StringBuilder -= value;
}
public static event Delegates.SetCharArray_BeforeArgs SetCharArray
{
add
{

HookHandler._beforeSetCharArray += value;
HookHandler.HookSetCharArray();
}
remove => HookHandler._beforeSetCharArray -= value;
}
public static event Delegates.SetTextArrayToCharArray_BeforeArgs SetTextArrayToCharArray
{
add
{

HookHandler._beforeSetTextArrayToCharArray += value;
HookHandler.HookSetTextArrayToCharArray();
}
remove => HookHandler._beforeSetTextArrayToCharArray -= value;
}
public static event Delegates.StringToCharArray_BeforeArgs StringToCharArray
{
add
{

HookHandler._beforeStringToCharArray += value;
HookHandler.HookStringToCharArray();
}
remove => HookHandler._beforeStringToCharArray -= value;
}
public static event Delegates.StringBuilderToIntArray_BeforeArgs StringBuilderToIntArray
{
add
{

HookHandler._beforeStringBuilderToIntArray += value;
HookHandler.HookStringBuilderToIntArray();
}
remove => HookHandler._beforeStringBuilderToIntArray -= value;
}
public static event Delegates.AddFloatToCharArray_BeforeArgs AddFloatToCharArray
{
add
{

HookHandler._beforeAddFloatToCharArray += value;
HookHandler.HookAddFloatToCharArray();
}
remove => HookHandler._beforeAddFloatToCharArray -= value;
}
public static event Delegates.AddIntToCharArray_BeforeArgs AddIntToCharArray
{
add
{

HookHandler._beforeAddIntToCharArray += value;
HookHandler.HookAddIntToCharArray();
}
remove => HookHandler._beforeAddIntToCharArray -= value;
}
public static event Delegates.SetArraySizes_BeforeArgs SetArraySizes
{
add
{

HookHandler._beforeSetArraySizes += value;
HookHandler.HookSetArraySizes();
}
remove => HookHandler._beforeSetArraySizes -= value;
}
public static event Delegates.GenerateTextMesh_BeforeArgs GenerateTextMesh
{
add
{

HookHandler._beforeGenerateTextMesh += value;
HookHandler.HookGenerateTextMesh();
}
remove => HookHandler._beforeGenerateTextMesh -= value;
}
public static event Delegates.GetPreferredValues_BeforeArgs GetPreferredValues
{
add
{

HookHandler._beforeGetPreferredValues += value;
HookHandler.HookGetPreferredValues();
}
remove => HookHandler._beforeGetPreferredValues -= value;
}
public static event Delegates.GetPreferredValues_float_float_BeforeArgs GetPreferredValues_float_float
{
add
{

HookHandler._beforeGetPreferredValues_float_float += value;
HookHandler.HookGetPreferredValues_float_float();
}
remove => HookHandler._beforeGetPreferredValues_float_float -= value;
}
public static event Delegates.GetPreferredValues_string_BeforeArgs GetPreferredValues_string
{
add
{

HookHandler._beforeGetPreferredValues_string += value;
HookHandler.HookGetPreferredValues_string();
}
remove => HookHandler._beforeGetPreferredValues_string -= value;
}
public static event Delegates.GetPreferredValues_string_float_float_BeforeArgs GetPreferredValues_string_float_float
{
add
{

HookHandler._beforeGetPreferredValues_string_float_float += value;
HookHandler.HookGetPreferredValues_string_float_float();
}
remove => HookHandler._beforeGetPreferredValues_string_float_float -= value;
}
public static event Delegates.GetPreferredWidth_BeforeArgs GetPreferredWidth
{
add
{

HookHandler._beforeGetPreferredWidth += value;
HookHandler.HookGetPreferredWidth();
}
remove => HookHandler._beforeGetPreferredWidth -= value;
}
public static event Delegates.GetPreferredWidth_Vector2_BeforeArgs GetPreferredWidth_Vector2
{
add
{

HookHandler._beforeGetPreferredWidth_Vector2 += value;
HookHandler.HookGetPreferredWidth_Vector2();
}
remove => HookHandler._beforeGetPreferredWidth_Vector2 -= value;
}
public static event Delegates.GetPreferredHeight_BeforeArgs GetPreferredHeight
{
add
{

HookHandler._beforeGetPreferredHeight += value;
HookHandler.HookGetPreferredHeight();
}
remove => HookHandler._beforeGetPreferredHeight -= value;
}
public static event Delegates.GetPreferredHeight_Vector2_BeforeArgs GetPreferredHeight_Vector2
{
add
{

HookHandler._beforeGetPreferredHeight_Vector2 += value;
HookHandler.HookGetPreferredHeight_Vector2();
}
remove => HookHandler._beforeGetPreferredHeight_Vector2 -= value;
}
public static event Delegates.GetRenderedValues_BeforeArgs GetRenderedValues
{
add
{

HookHandler._beforeGetRenderedValues += value;
HookHandler.HookGetRenderedValues();
}
remove => HookHandler._beforeGetRenderedValues -= value;
}
public static event Delegates.GetRenderedWidth_BeforeArgs GetRenderedWidth
{
add
{

HookHandler._beforeGetRenderedWidth += value;
HookHandler.HookGetRenderedWidth();
}
remove => HookHandler._beforeGetRenderedWidth -= value;
}
public static event Delegates.GetRenderedHeight_BeforeArgs GetRenderedHeight
{
add
{

HookHandler._beforeGetRenderedHeight += value;
HookHandler.HookGetRenderedHeight();
}
remove => HookHandler._beforeGetRenderedHeight -= value;
}
public static event Delegates.CalculatePreferredValues_BeforeArgs CalculatePreferredValues
{
add
{

HookHandler._beforeCalculatePreferredValues += value;
HookHandler.HookCalculatePreferredValues();
}
remove => HookHandler._beforeCalculatePreferredValues -= value;
}
public static event Delegates.GetCompoundBounds_BeforeArgs GetCompoundBounds
{
add
{

HookHandler._beforeGetCompoundBounds += value;
HookHandler.HookGetCompoundBounds();
}
remove => HookHandler._beforeGetCompoundBounds -= value;
}
public static event Delegates.GetTextBounds_BeforeArgs GetTextBounds
{
add
{

HookHandler._beforeGetTextBounds += value;
HookHandler.HookGetTextBounds();
}
remove => HookHandler._beforeGetTextBounds -= value;
}
public static event Delegates.AdjustLineOffset_BeforeArgs AdjustLineOffset
{
add
{

HookHandler._beforeAdjustLineOffset += value;
HookHandler.HookAdjustLineOffset();
}
remove => HookHandler._beforeAdjustLineOffset -= value;
}
public static event Delegates.ResizeLineExtents_BeforeArgs ResizeLineExtents
{
add
{

HookHandler._beforeResizeLineExtents += value;
HookHandler.HookResizeLineExtents();
}
remove => HookHandler._beforeResizeLineExtents -= value;
}
public static event Delegates.GetTextInfo_BeforeArgs GetTextInfo
{
add
{

HookHandler._beforeGetTextInfo += value;
HookHandler.HookGetTextInfo();
}
remove => HookHandler._beforeGetTextInfo -= value;
}
public static event Delegates.ComputeMarginSize_BeforeArgs ComputeMarginSize
{
add
{

HookHandler._beforeComputeMarginSize += value;
HookHandler.HookComputeMarginSize();
}
remove => HookHandler._beforeComputeMarginSize -= value;
}
public static event Delegates.GetArraySizes_BeforeArgs GetArraySizes
{
add
{

HookHandler._beforeGetArraySizes += value;
HookHandler.HookGetArraySizes();
}
remove => HookHandler._beforeGetArraySizes -= value;
}
public static event Delegates.SaveWordWrappingState_BeforeArgs SaveWordWrappingState
{
add
{

HookHandler._beforeSaveWordWrappingState += value;
HookHandler.HookSaveWordWrappingState();
}
remove => HookHandler._beforeSaveWordWrappingState -= value;
}
public static event Delegates.RestoreWordWrappingState_BeforeArgs RestoreWordWrappingState
{
add
{

HookHandler._beforeRestoreWordWrappingState += value;
HookHandler.HookRestoreWordWrappingState();
}
remove => HookHandler._beforeRestoreWordWrappingState -= value;
}
public static event Delegates.SaveGlyphVertexInfo_BeforeArgs SaveGlyphVertexInfo
{
add
{

HookHandler._beforeSaveGlyphVertexInfo += value;
HookHandler.HookSaveGlyphVertexInfo();
}
remove => HookHandler._beforeSaveGlyphVertexInfo -= value;
}
public static event Delegates.SaveSpriteVertexInfo_BeforeArgs SaveSpriteVertexInfo
{
add
{

HookHandler._beforeSaveSpriteVertexInfo += value;
HookHandler.HookSaveSpriteVertexInfo();
}
remove => HookHandler._beforeSaveSpriteVertexInfo -= value;
}
public static event Delegates.FillCharacterVertexBuffers_int_int_BeforeArgs FillCharacterVertexBuffers_int_int
{
add
{

HookHandler._beforeFillCharacterVertexBuffers_int_int += value;
HookHandler.HookFillCharacterVertexBuffers_int_int();
}
remove => HookHandler._beforeFillCharacterVertexBuffers_int_int -= value;
}
public static event Delegates.FillCharacterVertexBuffers_int_int_bool_BeforeArgs FillCharacterVertexBuffers_int_int_bool
{
add
{

HookHandler._beforeFillCharacterVertexBuffers_int_int_bool += value;
HookHandler.HookFillCharacterVertexBuffers_int_int_bool();
}
remove => HookHandler._beforeFillCharacterVertexBuffers_int_int_bool -= value;
}
public static event Delegates.FillSpriteVertexBuffers_BeforeArgs FillSpriteVertexBuffers
{
add
{

HookHandler._beforeFillSpriteVertexBuffers += value;
HookHandler.HookFillSpriteVertexBuffers();
}
remove => HookHandler._beforeFillSpriteVertexBuffers -= value;
}
public static event Delegates.DrawUnderlineMesh_BeforeArgs DrawUnderlineMesh
{
add
{

HookHandler._beforeDrawUnderlineMesh += value;
HookHandler.HookDrawUnderlineMesh();
}
remove => HookHandler._beforeDrawUnderlineMesh -= value;
}
public static event Delegates.GetSpecialCharacters_BeforeArgs GetSpecialCharacters
{
add
{

HookHandler._beforeGetSpecialCharacters += value;
HookHandler.HookGetSpecialCharacters();
}
remove => HookHandler._beforeGetSpecialCharacters -= value;
}
public static event Delegates.GetFontAssetForWeight_BeforeArgs GetFontAssetForWeight
{
add
{

HookHandler._beforeGetFontAssetForWeight += value;
HookHandler.HookGetFontAssetForWeight();
}
remove => HookHandler._beforeGetFontAssetForWeight -= value;
}
public static event Delegates.SetActiveSubMeshes_BeforeArgs SetActiveSubMeshes
{
add
{

HookHandler._beforeSetActiveSubMeshes += value;
HookHandler.HookSetActiveSubMeshes();
}
remove => HookHandler._beforeSetActiveSubMeshes -= value;
}
public static event Delegates.PackUV_float_float_float_BeforeArgs PackUV_float_float_float
{
add
{

HookHandler._beforePackUV_float_float_float += value;
HookHandler.HookPackUV_float_float_float();
}
remove => HookHandler._beforePackUV_float_float_float -= value;
}
public static event Delegates.PackUV_float_float_BeforeArgs PackUV_float_float
{
add
{

HookHandler._beforePackUV_float_float += value;
HookHandler.HookPackUV_float_float();
}
remove => HookHandler._beforePackUV_float_float -= value;
}
public static event Delegates.HexToInt_BeforeArgs HexToInt
{
add
{

HookHandler._beforeHexToInt += value;
HookHandler.HookHexToInt();
}
remove => HookHandler._beforeHexToInt -= value;
}
public static event Delegates.GetUTF16_BeforeArgs GetUTF16
{
add
{

HookHandler._beforeGetUTF16 += value;
HookHandler.HookGetUTF16();
}
remove => HookHandler._beforeGetUTF16 -= value;
}
public static event Delegates.GetUTF32_BeforeArgs GetUTF32
{
add
{

HookHandler._beforeGetUTF32 += value;
HookHandler.HookGetUTF32();
}
remove => HookHandler._beforeGetUTF32 -= value;
}
public static event Delegates.HexCharsToColor_Array_int_BeforeArgs HexCharsToColor_Array_int
{
add
{

HookHandler._beforeHexCharsToColor_Array_int += value;
HookHandler.HookHexCharsToColor_Array_int();
}
remove => HookHandler._beforeHexCharsToColor_Array_int -= value;
}
public static event Delegates.HexCharsToColor_Array_int_int_BeforeArgs HexCharsToColor_Array_int_int
{
add
{

HookHandler._beforeHexCharsToColor_Array_int_int += value;
HookHandler.HookHexCharsToColor_Array_int_int();
}
remove => HookHandler._beforeHexCharsToColor_Array_int_int -= value;
}
public static event Delegates.ConvertToFloat_BeforeArgs ConvertToFloat
{
add
{

HookHandler._beforeConvertToFloat += value;
HookHandler.HookConvertToFloat();
}
remove => HookHandler._beforeConvertToFloat -= value;
}
public static event Delegates.ValidateHtmlTag_BeforeArgs ValidateHtmlTag
{
add
{

HookHandler._beforeValidateHtmlTag += value;
HookHandler.HookValidateHtmlTag();
}
remove => HookHandler._beforeValidateHtmlTag -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_text_AfterArgs get_text
{
add
{

HookHandler._afterget_text += value;
HookHandler.Hookget_text();
}
remove => HookHandler._afterget_text -= value;
}
public static event Delegates.set_text_AfterArgs set_text
{
add
{

HookHandler._afterset_text += value;
HookHandler.Hookset_text();
}
remove => HookHandler._afterset_text -= value;
}
public static event Delegates.get_isRightToLeftText_AfterArgs get_isRightToLeftText
{
add
{

HookHandler._afterget_isRightToLeftText += value;
HookHandler.Hookget_isRightToLeftText();
}
remove => HookHandler._afterget_isRightToLeftText -= value;
}
public static event Delegates.set_isRightToLeftText_AfterArgs set_isRightToLeftText
{
add
{

HookHandler._afterset_isRightToLeftText += value;
HookHandler.Hookset_isRightToLeftText();
}
remove => HookHandler._afterset_isRightToLeftText -= value;
}
public static event Delegates.get_font_AfterArgs get_font
{
add
{

HookHandler._afterget_font += value;
HookHandler.Hookget_font();
}
remove => HookHandler._afterget_font -= value;
}
public static event Delegates.set_font_AfterArgs set_font
{
add
{

HookHandler._afterset_font += value;
HookHandler.Hookset_font();
}
remove => HookHandler._afterset_font -= value;
}
public static event Delegates.get_fontSharedMaterial_AfterArgs get_fontSharedMaterial
{
add
{

HookHandler._afterget_fontSharedMaterial += value;
HookHandler.Hookget_fontSharedMaterial();
}
remove => HookHandler._afterget_fontSharedMaterial -= value;
}
public static event Delegates.set_fontSharedMaterial_AfterArgs set_fontSharedMaterial
{
add
{

HookHandler._afterset_fontSharedMaterial += value;
HookHandler.Hookset_fontSharedMaterial();
}
remove => HookHandler._afterset_fontSharedMaterial -= value;
}
public static event Delegates.get_fontSharedMaterials_AfterArgs get_fontSharedMaterials
{
add
{

HookHandler._afterget_fontSharedMaterials += value;
HookHandler.Hookget_fontSharedMaterials();
}
remove => HookHandler._afterget_fontSharedMaterials -= value;
}
public static event Delegates.set_fontSharedMaterials_AfterArgs set_fontSharedMaterials
{
add
{

HookHandler._afterset_fontSharedMaterials += value;
HookHandler.Hookset_fontSharedMaterials();
}
remove => HookHandler._afterset_fontSharedMaterials -= value;
}
public static event Delegates.get_fontMaterial_AfterArgs get_fontMaterial
{
add
{

HookHandler._afterget_fontMaterial += value;
HookHandler.Hookget_fontMaterial();
}
remove => HookHandler._afterget_fontMaterial -= value;
}
public static event Delegates.set_fontMaterial_AfterArgs set_fontMaterial
{
add
{

HookHandler._afterset_fontMaterial += value;
HookHandler.Hookset_fontMaterial();
}
remove => HookHandler._afterset_fontMaterial -= value;
}
public static event Delegates.get_fontMaterials_AfterArgs get_fontMaterials
{
add
{

HookHandler._afterget_fontMaterials += value;
HookHandler.Hookget_fontMaterials();
}
remove => HookHandler._afterget_fontMaterials -= value;
}
public static event Delegates.set_fontMaterials_AfterArgs set_fontMaterials
{
add
{

HookHandler._afterset_fontMaterials += value;
HookHandler.Hookset_fontMaterials();
}
remove => HookHandler._afterset_fontMaterials -= value;
}
public static event Delegates.get_color_AfterArgs get_color
{
add
{

HookHandler._afterget_color += value;
HookHandler.Hookget_color();
}
remove => HookHandler._afterget_color -= value;
}
public static event Delegates.set_color_AfterArgs set_color
{
add
{

HookHandler._afterset_color += value;
HookHandler.Hookset_color();
}
remove => HookHandler._afterset_color -= value;
}
public static event Delegates.get_alpha_AfterArgs get_alpha
{
add
{

HookHandler._afterget_alpha += value;
HookHandler.Hookget_alpha();
}
remove => HookHandler._afterget_alpha -= value;
}
public static event Delegates.set_alpha_AfterArgs set_alpha
{
add
{

HookHandler._afterset_alpha += value;
HookHandler.Hookset_alpha();
}
remove => HookHandler._afterset_alpha -= value;
}
public static event Delegates.get_enableVertexGradient_AfterArgs get_enableVertexGradient
{
add
{

HookHandler._afterget_enableVertexGradient += value;
HookHandler.Hookget_enableVertexGradient();
}
remove => HookHandler._afterget_enableVertexGradient -= value;
}
public static event Delegates.set_enableVertexGradient_AfterArgs set_enableVertexGradient
{
add
{

HookHandler._afterset_enableVertexGradient += value;
HookHandler.Hookset_enableVertexGradient();
}
remove => HookHandler._afterset_enableVertexGradient -= value;
}
public static event Delegates.get_colorGradient_AfterArgs get_colorGradient
{
add
{

HookHandler._afterget_colorGradient += value;
HookHandler.Hookget_colorGradient();
}
remove => HookHandler._afterget_colorGradient -= value;
}
public static event Delegates.set_colorGradient_AfterArgs set_colorGradient
{
add
{

HookHandler._afterset_colorGradient += value;
HookHandler.Hookset_colorGradient();
}
remove => HookHandler._afterset_colorGradient -= value;
}
public static event Delegates.get_colorGradientPreset_AfterArgs get_colorGradientPreset
{
add
{

HookHandler._afterget_colorGradientPreset += value;
HookHandler.Hookget_colorGradientPreset();
}
remove => HookHandler._afterget_colorGradientPreset -= value;
}
public static event Delegates.set_colorGradientPreset_AfterArgs set_colorGradientPreset
{
add
{

HookHandler._afterset_colorGradientPreset += value;
HookHandler.Hookset_colorGradientPreset();
}
remove => HookHandler._afterset_colorGradientPreset -= value;
}
public static event Delegates.get_spriteAsset_AfterArgs get_spriteAsset
{
add
{

HookHandler._afterget_spriteAsset += value;
HookHandler.Hookget_spriteAsset();
}
remove => HookHandler._afterget_spriteAsset -= value;
}
public static event Delegates.set_spriteAsset_AfterArgs set_spriteAsset
{
add
{

HookHandler._afterset_spriteAsset += value;
HookHandler.Hookset_spriteAsset();
}
remove => HookHandler._afterset_spriteAsset -= value;
}
public static event Delegates.get_tintAllSprites_AfterArgs get_tintAllSprites
{
add
{

HookHandler._afterget_tintAllSprites += value;
HookHandler.Hookget_tintAllSprites();
}
remove => HookHandler._afterget_tintAllSprites -= value;
}
public static event Delegates.set_tintAllSprites_AfterArgs set_tintAllSprites
{
add
{

HookHandler._afterset_tintAllSprites += value;
HookHandler.Hookset_tintAllSprites();
}
remove => HookHandler._afterset_tintAllSprites -= value;
}
public static event Delegates.get_overrideColorTags_AfterArgs get_overrideColorTags
{
add
{

HookHandler._afterget_overrideColorTags += value;
HookHandler.Hookget_overrideColorTags();
}
remove => HookHandler._afterget_overrideColorTags -= value;
}
public static event Delegates.set_overrideColorTags_AfterArgs set_overrideColorTags
{
add
{

HookHandler._afterset_overrideColorTags += value;
HookHandler.Hookset_overrideColorTags();
}
remove => HookHandler._afterset_overrideColorTags -= value;
}
public static event Delegates.get_faceColor_AfterArgs get_faceColor
{
add
{

HookHandler._afterget_faceColor += value;
HookHandler.Hookget_faceColor();
}
remove => HookHandler._afterget_faceColor -= value;
}
public static event Delegates.set_faceColor_AfterArgs set_faceColor
{
add
{

HookHandler._afterset_faceColor += value;
HookHandler.Hookset_faceColor();
}
remove => HookHandler._afterset_faceColor -= value;
}
public static event Delegates.get_outlineColor_AfterArgs get_outlineColor
{
add
{

HookHandler._afterget_outlineColor += value;
HookHandler.Hookget_outlineColor();
}
remove => HookHandler._afterget_outlineColor -= value;
}
public static event Delegates.set_outlineColor_AfterArgs set_outlineColor
{
add
{

HookHandler._afterset_outlineColor += value;
HookHandler.Hookset_outlineColor();
}
remove => HookHandler._afterset_outlineColor -= value;
}
public static event Delegates.get_outlineWidth_AfterArgs get_outlineWidth
{
add
{

HookHandler._afterget_outlineWidth += value;
HookHandler.Hookget_outlineWidth();
}
remove => HookHandler._afterget_outlineWidth -= value;
}
public static event Delegates.set_outlineWidth_AfterArgs set_outlineWidth
{
add
{

HookHandler._afterset_outlineWidth += value;
HookHandler.Hookset_outlineWidth();
}
remove => HookHandler._afterset_outlineWidth -= value;
}
public static event Delegates.get_fontSize_AfterArgs get_fontSize
{
add
{

HookHandler._afterget_fontSize += value;
HookHandler.Hookget_fontSize();
}
remove => HookHandler._afterget_fontSize -= value;
}
public static event Delegates.set_fontSize_AfterArgs set_fontSize
{
add
{

HookHandler._afterset_fontSize += value;
HookHandler.Hookset_fontSize();
}
remove => HookHandler._afterset_fontSize -= value;
}
public static event Delegates.get_fontScale_AfterArgs get_fontScale
{
add
{

HookHandler._afterget_fontScale += value;
HookHandler.Hookget_fontScale();
}
remove => HookHandler._afterget_fontScale -= value;
}
public static event Delegates.get_fontWeight_AfterArgs get_fontWeight
{
add
{

HookHandler._afterget_fontWeight += value;
HookHandler.Hookget_fontWeight();
}
remove => HookHandler._afterget_fontWeight -= value;
}
public static event Delegates.set_fontWeight_AfterArgs set_fontWeight
{
add
{

HookHandler._afterset_fontWeight += value;
HookHandler.Hookset_fontWeight();
}
remove => HookHandler._afterset_fontWeight -= value;
}
public static event Delegates.get_pixelsPerUnit_AfterArgs get_pixelsPerUnit
{
add
{

HookHandler._afterget_pixelsPerUnit += value;
HookHandler.Hookget_pixelsPerUnit();
}
remove => HookHandler._afterget_pixelsPerUnit -= value;
}
public static event Delegates.get_enableAutoSizing_AfterArgs get_enableAutoSizing
{
add
{

HookHandler._afterget_enableAutoSizing += value;
HookHandler.Hookget_enableAutoSizing();
}
remove => HookHandler._afterget_enableAutoSizing -= value;
}
public static event Delegates.set_enableAutoSizing_AfterArgs set_enableAutoSizing
{
add
{

HookHandler._afterset_enableAutoSizing += value;
HookHandler.Hookset_enableAutoSizing();
}
remove => HookHandler._afterset_enableAutoSizing -= value;
}
public static event Delegates.get_fontSizeMin_AfterArgs get_fontSizeMin
{
add
{

HookHandler._afterget_fontSizeMin += value;
HookHandler.Hookget_fontSizeMin();
}
remove => HookHandler._afterget_fontSizeMin -= value;
}
public static event Delegates.set_fontSizeMin_AfterArgs set_fontSizeMin
{
add
{

HookHandler._afterset_fontSizeMin += value;
HookHandler.Hookset_fontSizeMin();
}
remove => HookHandler._afterset_fontSizeMin -= value;
}
public static event Delegates.get_fontSizeMax_AfterArgs get_fontSizeMax
{
add
{

HookHandler._afterget_fontSizeMax += value;
HookHandler.Hookget_fontSizeMax();
}
remove => HookHandler._afterget_fontSizeMax -= value;
}
public static event Delegates.set_fontSizeMax_AfterArgs set_fontSizeMax
{
add
{

HookHandler._afterset_fontSizeMax += value;
HookHandler.Hookset_fontSizeMax();
}
remove => HookHandler._afterset_fontSizeMax -= value;
}
public static event Delegates.get_fontStyle_AfterArgs get_fontStyle
{
add
{

HookHandler._afterget_fontStyle += value;
HookHandler.Hookget_fontStyle();
}
remove => HookHandler._afterget_fontStyle -= value;
}
public static event Delegates.set_fontStyle_AfterArgs set_fontStyle
{
add
{

HookHandler._afterset_fontStyle += value;
HookHandler.Hookset_fontStyle();
}
remove => HookHandler._afterset_fontStyle -= value;
}
public static event Delegates.get_isUsingBold_AfterArgs get_isUsingBold
{
add
{

HookHandler._afterget_isUsingBold += value;
HookHandler.Hookget_isUsingBold();
}
remove => HookHandler._afterget_isUsingBold -= value;
}
public static event Delegates.get_alignment_AfterArgs get_alignment
{
add
{

HookHandler._afterget_alignment += value;
HookHandler.Hookget_alignment();
}
remove => HookHandler._afterget_alignment -= value;
}
public static event Delegates.set_alignment_AfterArgs set_alignment
{
add
{

HookHandler._afterset_alignment += value;
HookHandler.Hookset_alignment();
}
remove => HookHandler._afterset_alignment -= value;
}
public static event Delegates.get_characterSpacing_AfterArgs get_characterSpacing
{
add
{

HookHandler._afterget_characterSpacing += value;
HookHandler.Hookget_characterSpacing();
}
remove => HookHandler._afterget_characterSpacing -= value;
}
public static event Delegates.set_characterSpacing_AfterArgs set_characterSpacing
{
add
{

HookHandler._afterset_characterSpacing += value;
HookHandler.Hookset_characterSpacing();
}
remove => HookHandler._afterset_characterSpacing -= value;
}
public static event Delegates.get_lineSpacing_AfterArgs get_lineSpacing
{
add
{

HookHandler._afterget_lineSpacing += value;
HookHandler.Hookget_lineSpacing();
}
remove => HookHandler._afterget_lineSpacing -= value;
}
public static event Delegates.set_lineSpacing_AfterArgs set_lineSpacing
{
add
{

HookHandler._afterset_lineSpacing += value;
HookHandler.Hookset_lineSpacing();
}
remove => HookHandler._afterset_lineSpacing -= value;
}
public static event Delegates.get_paragraphSpacing_AfterArgs get_paragraphSpacing
{
add
{

HookHandler._afterget_paragraphSpacing += value;
HookHandler.Hookget_paragraphSpacing();
}
remove => HookHandler._afterget_paragraphSpacing -= value;
}
public static event Delegates.set_paragraphSpacing_AfterArgs set_paragraphSpacing
{
add
{

HookHandler._afterset_paragraphSpacing += value;
HookHandler.Hookset_paragraphSpacing();
}
remove => HookHandler._afterset_paragraphSpacing -= value;
}
public static event Delegates.get_characterWidthAdjustment_AfterArgs get_characterWidthAdjustment
{
add
{

HookHandler._afterget_characterWidthAdjustment += value;
HookHandler.Hookget_characterWidthAdjustment();
}
remove => HookHandler._afterget_characterWidthAdjustment -= value;
}
public static event Delegates.set_characterWidthAdjustment_AfterArgs set_characterWidthAdjustment
{
add
{

HookHandler._afterset_characterWidthAdjustment += value;
HookHandler.Hookset_characterWidthAdjustment();
}
remove => HookHandler._afterset_characterWidthAdjustment -= value;
}
public static event Delegates.get_enableWordWrapping_AfterArgs get_enableWordWrapping
{
add
{

HookHandler._afterget_enableWordWrapping += value;
HookHandler.Hookget_enableWordWrapping();
}
remove => HookHandler._afterget_enableWordWrapping -= value;
}
public static event Delegates.set_enableWordWrapping_AfterArgs set_enableWordWrapping
{
add
{

HookHandler._afterset_enableWordWrapping += value;
HookHandler.Hookset_enableWordWrapping();
}
remove => HookHandler._afterset_enableWordWrapping -= value;
}
public static event Delegates.get_wordWrappingRatios_AfterArgs get_wordWrappingRatios
{
add
{

HookHandler._afterget_wordWrappingRatios += value;
HookHandler.Hookget_wordWrappingRatios();
}
remove => HookHandler._afterget_wordWrappingRatios -= value;
}
public static event Delegates.set_wordWrappingRatios_AfterArgs set_wordWrappingRatios
{
add
{

HookHandler._afterset_wordWrappingRatios += value;
HookHandler.Hookset_wordWrappingRatios();
}
remove => HookHandler._afterset_wordWrappingRatios -= value;
}
public static event Delegates.get_enableAdaptiveJustification_AfterArgs get_enableAdaptiveJustification
{
add
{

HookHandler._afterget_enableAdaptiveJustification += value;
HookHandler.Hookget_enableAdaptiveJustification();
}
remove => HookHandler._afterget_enableAdaptiveJustification -= value;
}
public static event Delegates.set_enableAdaptiveJustification_AfterArgs set_enableAdaptiveJustification
{
add
{

HookHandler._afterset_enableAdaptiveJustification += value;
HookHandler.Hookset_enableAdaptiveJustification();
}
remove => HookHandler._afterset_enableAdaptiveJustification -= value;
}
public static event Delegates.get_OverflowMode_AfterArgs get_OverflowMode
{
add
{

HookHandler._afterget_OverflowMode += value;
HookHandler.Hookget_OverflowMode();
}
remove => HookHandler._afterget_OverflowMode -= value;
}
public static event Delegates.set_OverflowMode_AfterArgs set_OverflowMode
{
add
{

HookHandler._afterset_OverflowMode += value;
HookHandler.Hookset_OverflowMode();
}
remove => HookHandler._afterset_OverflowMode -= value;
}
public static event Delegates.get_enableKerning_AfterArgs get_enableKerning
{
add
{

HookHandler._afterget_enableKerning += value;
HookHandler.Hookget_enableKerning();
}
remove => HookHandler._afterget_enableKerning -= value;
}
public static event Delegates.set_enableKerning_AfterArgs set_enableKerning
{
add
{

HookHandler._afterset_enableKerning += value;
HookHandler.Hookset_enableKerning();
}
remove => HookHandler._afterset_enableKerning -= value;
}
public static event Delegates.get_extraPadding_AfterArgs get_extraPadding
{
add
{

HookHandler._afterget_extraPadding += value;
HookHandler.Hookget_extraPadding();
}
remove => HookHandler._afterget_extraPadding -= value;
}
public static event Delegates.set_extraPadding_AfterArgs set_extraPadding
{
add
{

HookHandler._afterset_extraPadding += value;
HookHandler.Hookset_extraPadding();
}
remove => HookHandler._afterset_extraPadding -= value;
}
public static event Delegates.get_richText_AfterArgs get_richText
{
add
{

HookHandler._afterget_richText += value;
HookHandler.Hookget_richText();
}
remove => HookHandler._afterget_richText -= value;
}
public static event Delegates.set_richText_AfterArgs set_richText
{
add
{

HookHandler._afterset_richText += value;
HookHandler.Hookset_richText();
}
remove => HookHandler._afterset_richText -= value;
}
public static event Delegates.get_parseCtrlCharacters_AfterArgs get_parseCtrlCharacters
{
add
{

HookHandler._afterget_parseCtrlCharacters += value;
HookHandler.Hookget_parseCtrlCharacters();
}
remove => HookHandler._afterget_parseCtrlCharacters -= value;
}
public static event Delegates.set_parseCtrlCharacters_AfterArgs set_parseCtrlCharacters
{
add
{

HookHandler._afterset_parseCtrlCharacters += value;
HookHandler.Hookset_parseCtrlCharacters();
}
remove => HookHandler._afterset_parseCtrlCharacters -= value;
}
public static event Delegates.get_isOverlay_AfterArgs get_isOverlay
{
add
{

HookHandler._afterget_isOverlay += value;
HookHandler.Hookget_isOverlay();
}
remove => HookHandler._afterget_isOverlay -= value;
}
public static event Delegates.set_isOverlay_AfterArgs set_isOverlay
{
add
{

HookHandler._afterset_isOverlay += value;
HookHandler.Hookset_isOverlay();
}
remove => HookHandler._afterset_isOverlay -= value;
}
public static event Delegates.get_isOrthographic_AfterArgs get_isOrthographic
{
add
{

HookHandler._afterget_isOrthographic += value;
HookHandler.Hookget_isOrthographic();
}
remove => HookHandler._afterget_isOrthographic -= value;
}
public static event Delegates.set_isOrthographic_AfterArgs set_isOrthographic
{
add
{

HookHandler._afterset_isOrthographic += value;
HookHandler.Hookset_isOrthographic();
}
remove => HookHandler._afterset_isOrthographic -= value;
}
public static event Delegates.get_enableCulling_AfterArgs get_enableCulling
{
add
{

HookHandler._afterget_enableCulling += value;
HookHandler.Hookget_enableCulling();
}
remove => HookHandler._afterget_enableCulling -= value;
}
public static event Delegates.set_enableCulling_AfterArgs set_enableCulling
{
add
{

HookHandler._afterset_enableCulling += value;
HookHandler.Hookset_enableCulling();
}
remove => HookHandler._afterset_enableCulling -= value;
}
public static event Delegates.get_ignoreVisibility_AfterArgs get_ignoreVisibility
{
add
{

HookHandler._afterget_ignoreVisibility += value;
HookHandler.Hookget_ignoreVisibility();
}
remove => HookHandler._afterget_ignoreVisibility -= value;
}
public static event Delegates.set_ignoreVisibility_AfterArgs set_ignoreVisibility
{
add
{

HookHandler._afterset_ignoreVisibility += value;
HookHandler.Hookset_ignoreVisibility();
}
remove => HookHandler._afterset_ignoreVisibility -= value;
}
public static event Delegates.get_horizontalMapping_AfterArgs get_horizontalMapping
{
add
{

HookHandler._afterget_horizontalMapping += value;
HookHandler.Hookget_horizontalMapping();
}
remove => HookHandler._afterget_horizontalMapping -= value;
}
public static event Delegates.set_horizontalMapping_AfterArgs set_horizontalMapping
{
add
{

HookHandler._afterset_horizontalMapping += value;
HookHandler.Hookset_horizontalMapping();
}
remove => HookHandler._afterset_horizontalMapping -= value;
}
public static event Delegates.get_verticalMapping_AfterArgs get_verticalMapping
{
add
{

HookHandler._afterget_verticalMapping += value;
HookHandler.Hookget_verticalMapping();
}
remove => HookHandler._afterget_verticalMapping -= value;
}
public static event Delegates.set_verticalMapping_AfterArgs set_verticalMapping
{
add
{

HookHandler._afterset_verticalMapping += value;
HookHandler.Hookset_verticalMapping();
}
remove => HookHandler._afterset_verticalMapping -= value;
}
public static event Delegates.get_renderMode_AfterArgs get_renderMode
{
add
{

HookHandler._afterget_renderMode += value;
HookHandler.Hookget_renderMode();
}
remove => HookHandler._afterget_renderMode -= value;
}
public static event Delegates.set_renderMode_AfterArgs set_renderMode
{
add
{

HookHandler._afterset_renderMode += value;
HookHandler.Hookset_renderMode();
}
remove => HookHandler._afterset_renderMode -= value;
}
public static event Delegates.get_maxVisibleCharacters_AfterArgs get_maxVisibleCharacters
{
add
{

HookHandler._afterget_maxVisibleCharacters += value;
HookHandler.Hookget_maxVisibleCharacters();
}
remove => HookHandler._afterget_maxVisibleCharacters -= value;
}
public static event Delegates.set_maxVisibleCharacters_AfterArgs set_maxVisibleCharacters
{
add
{

HookHandler._afterset_maxVisibleCharacters += value;
HookHandler.Hookset_maxVisibleCharacters();
}
remove => HookHandler._afterset_maxVisibleCharacters -= value;
}
public static event Delegates.get_maxVisibleWords_AfterArgs get_maxVisibleWords
{
add
{

HookHandler._afterget_maxVisibleWords += value;
HookHandler.Hookget_maxVisibleWords();
}
remove => HookHandler._afterget_maxVisibleWords -= value;
}
public static event Delegates.set_maxVisibleWords_AfterArgs set_maxVisibleWords
{
add
{

HookHandler._afterset_maxVisibleWords += value;
HookHandler.Hookset_maxVisibleWords();
}
remove => HookHandler._afterset_maxVisibleWords -= value;
}
public static event Delegates.get_maxVisibleLines_AfterArgs get_maxVisibleLines
{
add
{

HookHandler._afterget_maxVisibleLines += value;
HookHandler.Hookget_maxVisibleLines();
}
remove => HookHandler._afterget_maxVisibleLines -= value;
}
public static event Delegates.set_maxVisibleLines_AfterArgs set_maxVisibleLines
{
add
{

HookHandler._afterset_maxVisibleLines += value;
HookHandler.Hookset_maxVisibleLines();
}
remove => HookHandler._afterset_maxVisibleLines -= value;
}
public static event Delegates.get_useMaxVisibleDescender_AfterArgs get_useMaxVisibleDescender
{
add
{

HookHandler._afterget_useMaxVisibleDescender += value;
HookHandler.Hookget_useMaxVisibleDescender();
}
remove => HookHandler._afterget_useMaxVisibleDescender -= value;
}
public static event Delegates.set_useMaxVisibleDescender_AfterArgs set_useMaxVisibleDescender
{
add
{

HookHandler._afterset_useMaxVisibleDescender += value;
HookHandler.Hookset_useMaxVisibleDescender();
}
remove => HookHandler._afterset_useMaxVisibleDescender -= value;
}
public static event Delegates.get_pageToDisplay_AfterArgs get_pageToDisplay
{
add
{

HookHandler._afterget_pageToDisplay += value;
HookHandler.Hookget_pageToDisplay();
}
remove => HookHandler._afterget_pageToDisplay -= value;
}
public static event Delegates.set_pageToDisplay_AfterArgs set_pageToDisplay
{
add
{

HookHandler._afterset_pageToDisplay += value;
HookHandler.Hookset_pageToDisplay();
}
remove => HookHandler._afterset_pageToDisplay -= value;
}
public static event Delegates.get_margin_AfterArgs get_margin
{
add
{

HookHandler._afterget_margin += value;
HookHandler.Hookget_margin();
}
remove => HookHandler._afterget_margin -= value;
}
public static event Delegates.set_margin_AfterArgs set_margin
{
add
{

HookHandler._afterset_margin += value;
HookHandler.Hookset_margin();
}
remove => HookHandler._afterset_margin -= value;
}
public static event Delegates.get_textInfo_AfterArgs get_textInfo
{
add
{

HookHandler._afterget_textInfo += value;
HookHandler.Hookget_textInfo();
}
remove => HookHandler._afterget_textInfo -= value;
}
public static event Delegates.get_havePropertiesChanged_AfterArgs get_havePropertiesChanged
{
add
{

HookHandler._afterget_havePropertiesChanged += value;
HookHandler.Hookget_havePropertiesChanged();
}
remove => HookHandler._afterget_havePropertiesChanged -= value;
}
public static event Delegates.set_havePropertiesChanged_AfterArgs set_havePropertiesChanged
{
add
{

HookHandler._afterset_havePropertiesChanged += value;
HookHandler.Hookset_havePropertiesChanged();
}
remove => HookHandler._afterset_havePropertiesChanged -= value;
}
public static event Delegates.get_isUsingLegacyAnimationComponent_AfterArgs get_isUsingLegacyAnimationComponent
{
add
{

HookHandler._afterget_isUsingLegacyAnimationComponent += value;
HookHandler.Hookget_isUsingLegacyAnimationComponent();
}
remove => HookHandler._afterget_isUsingLegacyAnimationComponent -= value;
}
public static event Delegates.set_isUsingLegacyAnimationComponent_AfterArgs set_isUsingLegacyAnimationComponent
{
add
{

HookHandler._afterset_isUsingLegacyAnimationComponent += value;
HookHandler.Hookset_isUsingLegacyAnimationComponent();
}
remove => HookHandler._afterset_isUsingLegacyAnimationComponent -= value;
}
public static event Delegates.get_transform_AfterArgs get_transform
{
add
{

HookHandler._afterget_transform += value;
HookHandler.Hookget_transform();
}
remove => HookHandler._afterget_transform -= value;
}
public static event Delegates.get_rectTransform_AfterArgs get_rectTransform
{
add
{

HookHandler._afterget_rectTransform += value;
HookHandler.Hookget_rectTransform();
}
remove => HookHandler._afterget_rectTransform -= value;
}
public static event Delegates.get_autoSizeTextContainer_AfterArgs get_autoSizeTextContainer
{
add
{

HookHandler._afterget_autoSizeTextContainer += value;
HookHandler.Hookget_autoSizeTextContainer();
}
remove => HookHandler._afterget_autoSizeTextContainer -= value;
}
public static event Delegates.set_autoSizeTextContainer_AfterArgs set_autoSizeTextContainer
{
add
{

HookHandler._afterset_autoSizeTextContainer += value;
HookHandler.Hookset_autoSizeTextContainer();
}
remove => HookHandler._afterset_autoSizeTextContainer -= value;
}
public static event Delegates.get_mesh_AfterArgs get_mesh
{
add
{

HookHandler._afterget_mesh += value;
HookHandler.Hookget_mesh();
}
remove => HookHandler._afterget_mesh -= value;
}
public static event Delegates.get_isVolumetricText_AfterArgs get_isVolumetricText
{
add
{

HookHandler._afterget_isVolumetricText += value;
HookHandler.Hookget_isVolumetricText();
}
remove => HookHandler._afterget_isVolumetricText -= value;
}
public static event Delegates.set_isVolumetricText_AfterArgs set_isVolumetricText
{
add
{

HookHandler._afterset_isVolumetricText += value;
HookHandler.Hookset_isVolumetricText();
}
remove => HookHandler._afterset_isVolumetricText -= value;
}
public static event Delegates.get_bounds_AfterArgs get_bounds
{
add
{

HookHandler._afterget_bounds += value;
HookHandler.Hookget_bounds();
}
remove => HookHandler._afterget_bounds -= value;
}
public static event Delegates.get_textBounds_AfterArgs get_textBounds
{
add
{

HookHandler._afterget_textBounds += value;
HookHandler.Hookget_textBounds();
}
remove => HookHandler._afterget_textBounds -= value;
}
public static event Delegates.get_flexibleHeight_AfterArgs get_flexibleHeight
{
add
{

HookHandler._afterget_flexibleHeight += value;
HookHandler.Hookget_flexibleHeight();
}
remove => HookHandler._afterget_flexibleHeight -= value;
}
public static event Delegates.get_flexibleWidth_AfterArgs get_flexibleWidth
{
add
{

HookHandler._afterget_flexibleWidth += value;
HookHandler.Hookget_flexibleWidth();
}
remove => HookHandler._afterget_flexibleWidth -= value;
}
public static event Delegates.get_minHeight_AfterArgs get_minHeight
{
add
{

HookHandler._afterget_minHeight += value;
HookHandler.Hookget_minHeight();
}
remove => HookHandler._afterget_minHeight -= value;
}
public static event Delegates.get_minWidth_AfterArgs get_minWidth
{
add
{

HookHandler._afterget_minWidth += value;
HookHandler.Hookget_minWidth();
}
remove => HookHandler._afterget_minWidth -= value;
}
public static event Delegates.get_preferredWidth_AfterArgs get_preferredWidth
{
add
{

HookHandler._afterget_preferredWidth += value;
HookHandler.Hookget_preferredWidth();
}
remove => HookHandler._afterget_preferredWidth -= value;
}
public static event Delegates.get_preferredHeight_AfterArgs get_preferredHeight
{
add
{

HookHandler._afterget_preferredHeight += value;
HookHandler.Hookget_preferredHeight();
}
remove => HookHandler._afterget_preferredHeight -= value;
}
public static event Delegates.get_renderedWidth_AfterArgs get_renderedWidth
{
add
{

HookHandler._afterget_renderedWidth += value;
HookHandler.Hookget_renderedWidth();
}
remove => HookHandler._afterget_renderedWidth -= value;
}
public static event Delegates.get_renderedHeight_AfterArgs get_renderedHeight
{
add
{

HookHandler._afterget_renderedHeight += value;
HookHandler.Hookget_renderedHeight();
}
remove => HookHandler._afterget_renderedHeight -= value;
}
public static event Delegates.get_layoutPriority_AfterArgs get_layoutPriority
{
add
{

HookHandler._afterget_layoutPriority += value;
HookHandler.Hookget_layoutPriority();
}
remove => HookHandler._afterget_layoutPriority -= value;
}
public static event Delegates.LoadFontAsset_AfterArgs LoadFontAsset
{
add
{

HookHandler._afterLoadFontAsset += value;
HookHandler.HookLoadFontAsset();
}
remove => HookHandler._afterLoadFontAsset -= value;
}
public static event Delegates.SetSharedMaterial_AfterArgs SetSharedMaterial
{
add
{

HookHandler._afterSetSharedMaterial += value;
HookHandler.HookSetSharedMaterial();
}
remove => HookHandler._afterSetSharedMaterial -= value;
}
public static event Delegates.GetMaterial_AfterArgs GetMaterial
{
add
{

HookHandler._afterGetMaterial += value;
HookHandler.HookGetMaterial();
}
remove => HookHandler._afterGetMaterial -= value;
}
public static event Delegates.SetFontBaseMaterial_AfterArgs SetFontBaseMaterial
{
add
{

HookHandler._afterSetFontBaseMaterial += value;
HookHandler.HookSetFontBaseMaterial();
}
remove => HookHandler._afterSetFontBaseMaterial -= value;
}
public static event Delegates.GetSharedMaterials_AfterArgs GetSharedMaterials
{
add
{

HookHandler._afterGetSharedMaterials += value;
HookHandler.HookGetSharedMaterials();
}
remove => HookHandler._afterGetSharedMaterials -= value;
}
public static event Delegates.SetSharedMaterials_AfterArgs SetSharedMaterials
{
add
{

HookHandler._afterSetSharedMaterials += value;
HookHandler.HookSetSharedMaterials();
}
remove => HookHandler._afterSetSharedMaterials -= value;
}
public static event Delegates.GetMaterials_AfterArgs GetMaterials
{
add
{

HookHandler._afterGetMaterials += value;
HookHandler.HookGetMaterials();
}
remove => HookHandler._afterGetMaterials -= value;
}
public static event Delegates.CreateMaterialInstance_AfterArgs CreateMaterialInstance
{
add
{

HookHandler._afterCreateMaterialInstance += value;
HookHandler.HookCreateMaterialInstance();
}
remove => HookHandler._afterCreateMaterialInstance -= value;
}
public static event Delegates.SetVertexColorGradient_AfterArgs SetVertexColorGradient
{
add
{

HookHandler._afterSetVertexColorGradient += value;
HookHandler.HookSetVertexColorGradient();
}
remove => HookHandler._afterSetVertexColorGradient -= value;
}
public static event Delegates.SetFaceColor_AfterArgs SetFaceColor
{
add
{

HookHandler._afterSetFaceColor += value;
HookHandler.HookSetFaceColor();
}
remove => HookHandler._afterSetFaceColor -= value;
}
public static event Delegates.SetOutlineColor_AfterArgs SetOutlineColor
{
add
{

HookHandler._afterSetOutlineColor += value;
HookHandler.HookSetOutlineColor();
}
remove => HookHandler._afterSetOutlineColor -= value;
}
public static event Delegates.SetOutlineThickness_AfterArgs SetOutlineThickness
{
add
{

HookHandler._afterSetOutlineThickness += value;
HookHandler.HookSetOutlineThickness();
}
remove => HookHandler._afterSetOutlineThickness -= value;
}
public static event Delegates.SetShaderDepth_AfterArgs SetShaderDepth
{
add
{

HookHandler._afterSetShaderDepth += value;
HookHandler.HookSetShaderDepth();
}
remove => HookHandler._afterSetShaderDepth -= value;
}
public static event Delegates.SetCulling_AfterArgs SetCulling
{
add
{

HookHandler._afterSetCulling += value;
HookHandler.HookSetCulling();
}
remove => HookHandler._afterSetCulling -= value;
}
public static event Delegates.GetPaddingForMaterial_AfterArgs GetPaddingForMaterial
{
add
{

HookHandler._afterGetPaddingForMaterial += value;
HookHandler.HookGetPaddingForMaterial();
}
remove => HookHandler._afterGetPaddingForMaterial -= value;
}
public static event Delegates.GetPaddingForMaterial_Material_AfterArgs GetPaddingForMaterial_Material
{
add
{

HookHandler._afterGetPaddingForMaterial_Material += value;
HookHandler.HookGetPaddingForMaterial_Material();
}
remove => HookHandler._afterGetPaddingForMaterial_Material -= value;
}
public static event Delegates.GetTextContainerLocalCorners_AfterArgs GetTextContainerLocalCorners
{
add
{

HookHandler._afterGetTextContainerLocalCorners += value;
HookHandler.HookGetTextContainerLocalCorners();
}
remove => HookHandler._afterGetTextContainerLocalCorners -= value;
}
public static event Delegates.ForceMeshUpdate_AfterArgs ForceMeshUpdate
{
add
{

HookHandler._afterForceMeshUpdate += value;
HookHandler.HookForceMeshUpdate();
}
remove => HookHandler._afterForceMeshUpdate -= value;
}
public static event Delegates.ForceMeshUpdate_bool_AfterArgs ForceMeshUpdate_bool
{
add
{

HookHandler._afterForceMeshUpdate_bool += value;
HookHandler.HookForceMeshUpdate_bool();
}
remove => HookHandler._afterForceMeshUpdate_bool -= value;
}
public static event Delegates.SetTextInternal_AfterArgs SetTextInternal
{
add
{

HookHandler._afterSetTextInternal += value;
HookHandler.HookSetTextInternal();
}
remove => HookHandler._afterSetTextInternal -= value;
}
public static event Delegates.UpdateGeometry_AfterArgs UpdateGeometry
{
add
{

HookHandler._afterUpdateGeometry += value;
HookHandler.HookUpdateGeometry();
}
remove => HookHandler._afterUpdateGeometry -= value;
}
public static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_AfterArgs UpdateVertexData_TMP_VertexDataUpdateFlags
{
add
{

HookHandler._afterUpdateVertexData_TMP_VertexDataUpdateFlags += value;
HookHandler.HookUpdateVertexData_TMP_VertexDataUpdateFlags();
}
remove => HookHandler._afterUpdateVertexData_TMP_VertexDataUpdateFlags -= value;
}
public static event Delegates.UpdateVertexData_AfterArgs UpdateVertexData
{
add
{

HookHandler._afterUpdateVertexData += value;
HookHandler.HookUpdateVertexData();
}
remove => HookHandler._afterUpdateVertexData -= value;
}
public static event Delegates.SetVertices_AfterArgs SetVertices
{
add
{

HookHandler._afterSetVertices += value;
HookHandler.HookSetVertices();
}
remove => HookHandler._afterSetVertices -= value;
}
public static event Delegates.UpdateMeshPadding_AfterArgs UpdateMeshPadding
{
add
{

HookHandler._afterUpdateMeshPadding += value;
HookHandler.HookUpdateMeshPadding();
}
remove => HookHandler._afterUpdateMeshPadding -= value;
}
public static event Delegates.CrossFadeColor_AfterArgs CrossFadeColor
{
add
{

HookHandler._afterCrossFadeColor += value;
HookHandler.HookCrossFadeColor();
}
remove => HookHandler._afterCrossFadeColor -= value;
}
public static event Delegates.CrossFadeAlpha_AfterArgs CrossFadeAlpha
{
add
{

HookHandler._afterCrossFadeAlpha += value;
HookHandler.HookCrossFadeAlpha();
}
remove => HookHandler._afterCrossFadeAlpha -= value;
}
public static event Delegates.InternalCrossFadeColor_AfterArgs InternalCrossFadeColor
{
add
{

HookHandler._afterInternalCrossFadeColor += value;
HookHandler.HookInternalCrossFadeColor();
}
remove => HookHandler._afterInternalCrossFadeColor -= value;
}
public static event Delegates.InternalCrossFadeAlpha_AfterArgs InternalCrossFadeAlpha
{
add
{

HookHandler._afterInternalCrossFadeAlpha += value;
HookHandler.HookInternalCrossFadeAlpha();
}
remove => HookHandler._afterInternalCrossFadeAlpha -= value;
}
public static event Delegates.ParseInputText_AfterArgs ParseInputText
{
add
{

HookHandler._afterParseInputText += value;
HookHandler.HookParseInputText();
}
remove => HookHandler._afterParseInputText -= value;
}
public static event Delegates.SetText_string_AfterArgs SetText_string
{
add
{

HookHandler._afterSetText_string += value;
HookHandler.HookSetText_string();
}
remove => HookHandler._afterSetText_string -= value;
}
public static event Delegates.SetText_string_float_AfterArgs SetText_string_float
{
add
{

HookHandler._afterSetText_string_float += value;
HookHandler.HookSetText_string_float();
}
remove => HookHandler._afterSetText_string_float -= value;
}
public static event Delegates.SetText_string_float_float_AfterArgs SetText_string_float_float
{
add
{

HookHandler._afterSetText_string_float_float += value;
HookHandler.HookSetText_string_float_float();
}
remove => HookHandler._afterSetText_string_float_float -= value;
}
public static event Delegates.SetText_string_float_float_float_AfterArgs SetText_string_float_float_float
{
add
{

HookHandler._afterSetText_string_float_float_float += value;
HookHandler.HookSetText_string_float_float_float();
}
remove => HookHandler._afterSetText_string_float_float_float -= value;
}
public static event Delegates.SetText_StringBuilder_AfterArgs SetText_StringBuilder
{
add
{

HookHandler._afterSetText_StringBuilder += value;
HookHandler.HookSetText_StringBuilder();
}
remove => HookHandler._afterSetText_StringBuilder -= value;
}
public static event Delegates.SetCharArray_AfterArgs SetCharArray
{
add
{

HookHandler._afterSetCharArray += value;
HookHandler.HookSetCharArray();
}
remove => HookHandler._afterSetCharArray -= value;
}
public static event Delegates.SetTextArrayToCharArray_AfterArgs SetTextArrayToCharArray
{
add
{

HookHandler._afterSetTextArrayToCharArray += value;
HookHandler.HookSetTextArrayToCharArray();
}
remove => HookHandler._afterSetTextArrayToCharArray -= value;
}
public static event Delegates.StringToCharArray_AfterArgs StringToCharArray
{
add
{

HookHandler._afterStringToCharArray += value;
HookHandler.HookStringToCharArray();
}
remove => HookHandler._afterStringToCharArray -= value;
}
public static event Delegates.StringBuilderToIntArray_AfterArgs StringBuilderToIntArray
{
add
{

HookHandler._afterStringBuilderToIntArray += value;
HookHandler.HookStringBuilderToIntArray();
}
remove => HookHandler._afterStringBuilderToIntArray -= value;
}
public static event Delegates.AddFloatToCharArray_AfterArgs AddFloatToCharArray
{
add
{

HookHandler._afterAddFloatToCharArray += value;
HookHandler.HookAddFloatToCharArray();
}
remove => HookHandler._afterAddFloatToCharArray -= value;
}
public static event Delegates.AddIntToCharArray_AfterArgs AddIntToCharArray
{
add
{

HookHandler._afterAddIntToCharArray += value;
HookHandler.HookAddIntToCharArray();
}
remove => HookHandler._afterAddIntToCharArray -= value;
}
public static event Delegates.SetArraySizes_AfterArgs SetArraySizes
{
add
{

HookHandler._afterSetArraySizes += value;
HookHandler.HookSetArraySizes();
}
remove => HookHandler._afterSetArraySizes -= value;
}
public static event Delegates.GenerateTextMesh_AfterArgs GenerateTextMesh
{
add
{

HookHandler._afterGenerateTextMesh += value;
HookHandler.HookGenerateTextMesh();
}
remove => HookHandler._afterGenerateTextMesh -= value;
}
public static event Delegates.GetPreferredValues_AfterArgs GetPreferredValues
{
add
{

HookHandler._afterGetPreferredValues += value;
HookHandler.HookGetPreferredValues();
}
remove => HookHandler._afterGetPreferredValues -= value;
}
public static event Delegates.GetPreferredValues_float_float_AfterArgs GetPreferredValues_float_float
{
add
{

HookHandler._afterGetPreferredValues_float_float += value;
HookHandler.HookGetPreferredValues_float_float();
}
remove => HookHandler._afterGetPreferredValues_float_float -= value;
}
public static event Delegates.GetPreferredValues_string_AfterArgs GetPreferredValues_string
{
add
{

HookHandler._afterGetPreferredValues_string += value;
HookHandler.HookGetPreferredValues_string();
}
remove => HookHandler._afterGetPreferredValues_string -= value;
}
public static event Delegates.GetPreferredValues_string_float_float_AfterArgs GetPreferredValues_string_float_float
{
add
{

HookHandler._afterGetPreferredValues_string_float_float += value;
HookHandler.HookGetPreferredValues_string_float_float();
}
remove => HookHandler._afterGetPreferredValues_string_float_float -= value;
}
public static event Delegates.GetPreferredWidth_AfterArgs GetPreferredWidth
{
add
{

HookHandler._afterGetPreferredWidth += value;
HookHandler.HookGetPreferredWidth();
}
remove => HookHandler._afterGetPreferredWidth -= value;
}
public static event Delegates.GetPreferredWidth_Vector2_AfterArgs GetPreferredWidth_Vector2
{
add
{

HookHandler._afterGetPreferredWidth_Vector2 += value;
HookHandler.HookGetPreferredWidth_Vector2();
}
remove => HookHandler._afterGetPreferredWidth_Vector2 -= value;
}
public static event Delegates.GetPreferredHeight_AfterArgs GetPreferredHeight
{
add
{

HookHandler._afterGetPreferredHeight += value;
HookHandler.HookGetPreferredHeight();
}
remove => HookHandler._afterGetPreferredHeight -= value;
}
public static event Delegates.GetPreferredHeight_Vector2_AfterArgs GetPreferredHeight_Vector2
{
add
{

HookHandler._afterGetPreferredHeight_Vector2 += value;
HookHandler.HookGetPreferredHeight_Vector2();
}
remove => HookHandler._afterGetPreferredHeight_Vector2 -= value;
}
public static event Delegates.GetRenderedValues_AfterArgs GetRenderedValues
{
add
{

HookHandler._afterGetRenderedValues += value;
HookHandler.HookGetRenderedValues();
}
remove => HookHandler._afterGetRenderedValues -= value;
}
public static event Delegates.GetRenderedWidth_AfterArgs GetRenderedWidth
{
add
{

HookHandler._afterGetRenderedWidth += value;
HookHandler.HookGetRenderedWidth();
}
remove => HookHandler._afterGetRenderedWidth -= value;
}
public static event Delegates.GetRenderedHeight_AfterArgs GetRenderedHeight
{
add
{

HookHandler._afterGetRenderedHeight += value;
HookHandler.HookGetRenderedHeight();
}
remove => HookHandler._afterGetRenderedHeight -= value;
}
public static event Delegates.CalculatePreferredValues_AfterArgs CalculatePreferredValues
{
add
{

HookHandler._afterCalculatePreferredValues += value;
HookHandler.HookCalculatePreferredValues();
}
remove => HookHandler._afterCalculatePreferredValues -= value;
}
public static event Delegates.GetCompoundBounds_AfterArgs GetCompoundBounds
{
add
{

HookHandler._afterGetCompoundBounds += value;
HookHandler.HookGetCompoundBounds();
}
remove => HookHandler._afterGetCompoundBounds -= value;
}
public static event Delegates.GetTextBounds_AfterArgs GetTextBounds
{
add
{

HookHandler._afterGetTextBounds += value;
HookHandler.HookGetTextBounds();
}
remove => HookHandler._afterGetTextBounds -= value;
}
public static event Delegates.AdjustLineOffset_AfterArgs AdjustLineOffset
{
add
{

HookHandler._afterAdjustLineOffset += value;
HookHandler.HookAdjustLineOffset();
}
remove => HookHandler._afterAdjustLineOffset -= value;
}
public static event Delegates.ResizeLineExtents_AfterArgs ResizeLineExtents
{
add
{

HookHandler._afterResizeLineExtents += value;
HookHandler.HookResizeLineExtents();
}
remove => HookHandler._afterResizeLineExtents -= value;
}
public static event Delegates.GetTextInfo_AfterArgs GetTextInfo
{
add
{

HookHandler._afterGetTextInfo += value;
HookHandler.HookGetTextInfo();
}
remove => HookHandler._afterGetTextInfo -= value;
}
public static event Delegates.ComputeMarginSize_AfterArgs ComputeMarginSize
{
add
{

HookHandler._afterComputeMarginSize += value;
HookHandler.HookComputeMarginSize();
}
remove => HookHandler._afterComputeMarginSize -= value;
}
public static event Delegates.GetArraySizes_AfterArgs GetArraySizes
{
add
{

HookHandler._afterGetArraySizes += value;
HookHandler.HookGetArraySizes();
}
remove => HookHandler._afterGetArraySizes -= value;
}
public static event Delegates.SaveWordWrappingState_AfterArgs SaveWordWrappingState
{
add
{

HookHandler._afterSaveWordWrappingState += value;
HookHandler.HookSaveWordWrappingState();
}
remove => HookHandler._afterSaveWordWrappingState -= value;
}
public static event Delegates.RestoreWordWrappingState_AfterArgs RestoreWordWrappingState
{
add
{

HookHandler._afterRestoreWordWrappingState += value;
HookHandler.HookRestoreWordWrappingState();
}
remove => HookHandler._afterRestoreWordWrappingState -= value;
}
public static event Delegates.SaveGlyphVertexInfo_AfterArgs SaveGlyphVertexInfo
{
add
{

HookHandler._afterSaveGlyphVertexInfo += value;
HookHandler.HookSaveGlyphVertexInfo();
}
remove => HookHandler._afterSaveGlyphVertexInfo -= value;
}
public static event Delegates.SaveSpriteVertexInfo_AfterArgs SaveSpriteVertexInfo
{
add
{

HookHandler._afterSaveSpriteVertexInfo += value;
HookHandler.HookSaveSpriteVertexInfo();
}
remove => HookHandler._afterSaveSpriteVertexInfo -= value;
}
public static event Delegates.FillCharacterVertexBuffers_int_int_AfterArgs FillCharacterVertexBuffers_int_int
{
add
{

HookHandler._afterFillCharacterVertexBuffers_int_int += value;
HookHandler.HookFillCharacterVertexBuffers_int_int();
}
remove => HookHandler._afterFillCharacterVertexBuffers_int_int -= value;
}
public static event Delegates.FillCharacterVertexBuffers_int_int_bool_AfterArgs FillCharacterVertexBuffers_int_int_bool
{
add
{

HookHandler._afterFillCharacterVertexBuffers_int_int_bool += value;
HookHandler.HookFillCharacterVertexBuffers_int_int_bool();
}
remove => HookHandler._afterFillCharacterVertexBuffers_int_int_bool -= value;
}
public static event Delegates.FillSpriteVertexBuffers_AfterArgs FillSpriteVertexBuffers
{
add
{

HookHandler._afterFillSpriteVertexBuffers += value;
HookHandler.HookFillSpriteVertexBuffers();
}
remove => HookHandler._afterFillSpriteVertexBuffers -= value;
}
public static event Delegates.DrawUnderlineMesh_AfterArgs DrawUnderlineMesh
{
add
{

HookHandler._afterDrawUnderlineMesh += value;
HookHandler.HookDrawUnderlineMesh();
}
remove => HookHandler._afterDrawUnderlineMesh -= value;
}
public static event Delegates.GetSpecialCharacters_AfterArgs GetSpecialCharacters
{
add
{

HookHandler._afterGetSpecialCharacters += value;
HookHandler.HookGetSpecialCharacters();
}
remove => HookHandler._afterGetSpecialCharacters -= value;
}
public static event Delegates.GetFontAssetForWeight_AfterArgs GetFontAssetForWeight
{
add
{

HookHandler._afterGetFontAssetForWeight += value;
HookHandler.HookGetFontAssetForWeight();
}
remove => HookHandler._afterGetFontAssetForWeight -= value;
}
public static event Delegates.SetActiveSubMeshes_AfterArgs SetActiveSubMeshes
{
add
{

HookHandler._afterSetActiveSubMeshes += value;
HookHandler.HookSetActiveSubMeshes();
}
remove => HookHandler._afterSetActiveSubMeshes -= value;
}
public static event Delegates.PackUV_float_float_float_AfterArgs PackUV_float_float_float
{
add
{

HookHandler._afterPackUV_float_float_float += value;
HookHandler.HookPackUV_float_float_float();
}
remove => HookHandler._afterPackUV_float_float_float -= value;
}
public static event Delegates.PackUV_float_float_AfterArgs PackUV_float_float
{
add
{

HookHandler._afterPackUV_float_float += value;
HookHandler.HookPackUV_float_float();
}
remove => HookHandler._afterPackUV_float_float -= value;
}
public static event Delegates.HexToInt_AfterArgs HexToInt
{
add
{

HookHandler._afterHexToInt += value;
HookHandler.HookHexToInt();
}
remove => HookHandler._afterHexToInt -= value;
}
public static event Delegates.GetUTF16_AfterArgs GetUTF16
{
add
{

HookHandler._afterGetUTF16 += value;
HookHandler.HookGetUTF16();
}
remove => HookHandler._afterGetUTF16 -= value;
}
public static event Delegates.GetUTF32_AfterArgs GetUTF32
{
add
{

HookHandler._afterGetUTF32 += value;
HookHandler.HookGetUTF32();
}
remove => HookHandler._afterGetUTF32 -= value;
}
public static event Delegates.HexCharsToColor_Array_int_AfterArgs HexCharsToColor_Array_int
{
add
{

HookHandler._afterHexCharsToColor_Array_int += value;
HookHandler.HookHexCharsToColor_Array_int();
}
remove => HookHandler._afterHexCharsToColor_Array_int -= value;
}
public static event Delegates.HexCharsToColor_Array_int_int_AfterArgs HexCharsToColor_Array_int_int
{
add
{

HookHandler._afterHexCharsToColor_Array_int_int += value;
HookHandler.HookHexCharsToColor_Array_int_int();
}
remove => HookHandler._afterHexCharsToColor_Array_int_int -= value;
}
public static event Delegates.ConvertToFloat_AfterArgs ConvertToFloat
{
add
{

HookHandler._afterConvertToFloat += value;
HookHandler.HookConvertToFloat();
}
remove => HookHandler._afterConvertToFloat -= value;
}
public static event Delegates.ValidateHtmlTag_AfterArgs ValidateHtmlTag
{
add
{

HookHandler._afterValidateHtmlTag += value;
HookHandler.HookValidateHtmlTag();
}
remove => HookHandler._afterValidateHtmlTag -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_text_WithArgs get_text
{
add => HookEndpointManager.Add<Delegates.get_text_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_text", true), value);
remove => HookEndpointManager.Remove<Delegates.get_text_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_text", true), value);
}
public static event Delegates.set_text_WithArgs set_text
{
add => HookEndpointManager.Add<Delegates.set_text_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_text", true), value);
remove => HookEndpointManager.Remove<Delegates.set_text_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_text", true), value);
}
public static event Delegates.get_isRightToLeftText_WithArgs get_isRightToLeftText
{
add => HookEndpointManager.Add<Delegates.get_isRightToLeftText_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_isRightToLeftText", true), value);
remove => HookEndpointManager.Remove<Delegates.get_isRightToLeftText_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_isRightToLeftText", true), value);
}
public static event Delegates.set_isRightToLeftText_WithArgs set_isRightToLeftText
{
add => HookEndpointManager.Add<Delegates.set_isRightToLeftText_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_isRightToLeftText", true), value);
remove => HookEndpointManager.Remove<Delegates.set_isRightToLeftText_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_isRightToLeftText", true), value);
}
public static event Delegates.get_font_WithArgs get_font
{
add => HookEndpointManager.Add<Delegates.get_font_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_font", true), value);
remove => HookEndpointManager.Remove<Delegates.get_font_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_font", true), value);
}
public static event Delegates.set_font_WithArgs set_font
{
add => HookEndpointManager.Add<Delegates.set_font_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_font", true), value);
remove => HookEndpointManager.Remove<Delegates.set_font_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_font", true), value);
}
public static event Delegates.get_fontSharedMaterial_WithArgs get_fontSharedMaterial
{
add => HookEndpointManager.Add<Delegates.get_fontSharedMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontSharedMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.get_fontSharedMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontSharedMaterial", true), value);
}
public static event Delegates.set_fontSharedMaterial_WithArgs set_fontSharedMaterial
{
add => HookEndpointManager.Add<Delegates.set_fontSharedMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontSharedMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.set_fontSharedMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontSharedMaterial", true), value);
}
public static event Delegates.get_fontSharedMaterials_WithArgs get_fontSharedMaterials
{
add => HookEndpointManager.Add<Delegates.get_fontSharedMaterials_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontSharedMaterials", true), value);
remove => HookEndpointManager.Remove<Delegates.get_fontSharedMaterials_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontSharedMaterials", true), value);
}
public static event Delegates.set_fontSharedMaterials_WithArgs set_fontSharedMaterials
{
add => HookEndpointManager.Add<Delegates.set_fontSharedMaterials_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontSharedMaterials", true), value);
remove => HookEndpointManager.Remove<Delegates.set_fontSharedMaterials_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontSharedMaterials", true), value);
}
public static event Delegates.get_fontMaterial_WithArgs get_fontMaterial
{
add => HookEndpointManager.Add<Delegates.get_fontMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.get_fontMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontMaterial", true), value);
}
public static event Delegates.set_fontMaterial_WithArgs set_fontMaterial
{
add => HookEndpointManager.Add<Delegates.set_fontMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.set_fontMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontMaterial", true), value);
}
public static event Delegates.get_fontMaterials_WithArgs get_fontMaterials
{
add => HookEndpointManager.Add<Delegates.get_fontMaterials_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontMaterials", true), value);
remove => HookEndpointManager.Remove<Delegates.get_fontMaterials_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontMaterials", true), value);
}
public static event Delegates.set_fontMaterials_WithArgs set_fontMaterials
{
add => HookEndpointManager.Add<Delegates.set_fontMaterials_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontMaterials", true), value);
remove => HookEndpointManager.Remove<Delegates.set_fontMaterials_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontMaterials", true), value);
}
public static event Delegates.get_color_WithArgs get_color
{
add => HookEndpointManager.Add<Delegates.get_color_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_color", true), value);
remove => HookEndpointManager.Remove<Delegates.get_color_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_color", true), value);
}
public static event Delegates.set_color_WithArgs set_color
{
add => HookEndpointManager.Add<Delegates.set_color_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_color", true), value);
remove => HookEndpointManager.Remove<Delegates.set_color_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_color", true), value);
}
public static event Delegates.get_alpha_WithArgs get_alpha
{
add => HookEndpointManager.Add<Delegates.get_alpha_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_alpha", true), value);
remove => HookEndpointManager.Remove<Delegates.get_alpha_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_alpha", true), value);
}
public static event Delegates.set_alpha_WithArgs set_alpha
{
add => HookEndpointManager.Add<Delegates.set_alpha_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_alpha", true), value);
remove => HookEndpointManager.Remove<Delegates.set_alpha_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_alpha", true), value);
}
public static event Delegates.get_enableVertexGradient_WithArgs get_enableVertexGradient
{
add => HookEndpointManager.Add<Delegates.get_enableVertexGradient_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_enableVertexGradient", true), value);
remove => HookEndpointManager.Remove<Delegates.get_enableVertexGradient_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_enableVertexGradient", true), value);
}
public static event Delegates.set_enableVertexGradient_WithArgs set_enableVertexGradient
{
add => HookEndpointManager.Add<Delegates.set_enableVertexGradient_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_enableVertexGradient", true), value);
remove => HookEndpointManager.Remove<Delegates.set_enableVertexGradient_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_enableVertexGradient", true), value);
}
public static event Delegates.get_colorGradient_WithArgs get_colorGradient
{
add => HookEndpointManager.Add<Delegates.get_colorGradient_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_colorGradient", true), value);
remove => HookEndpointManager.Remove<Delegates.get_colorGradient_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_colorGradient", true), value);
}
public static event Delegates.set_colorGradient_WithArgs set_colorGradient
{
add => HookEndpointManager.Add<Delegates.set_colorGradient_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_colorGradient", true), value);
remove => HookEndpointManager.Remove<Delegates.set_colorGradient_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_colorGradient", true), value);
}
public static event Delegates.get_colorGradientPreset_WithArgs get_colorGradientPreset
{
add => HookEndpointManager.Add<Delegates.get_colorGradientPreset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_colorGradientPreset", true), value);
remove => HookEndpointManager.Remove<Delegates.get_colorGradientPreset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_colorGradientPreset", true), value);
}
public static event Delegates.set_colorGradientPreset_WithArgs set_colorGradientPreset
{
add => HookEndpointManager.Add<Delegates.set_colorGradientPreset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_colorGradientPreset", true), value);
remove => HookEndpointManager.Remove<Delegates.set_colorGradientPreset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_colorGradientPreset", true), value);
}
public static event Delegates.get_spriteAsset_WithArgs get_spriteAsset
{
add => HookEndpointManager.Add<Delegates.get_spriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_spriteAsset", true), value);
remove => HookEndpointManager.Remove<Delegates.get_spriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_spriteAsset", true), value);
}
public static event Delegates.set_spriteAsset_WithArgs set_spriteAsset
{
add => HookEndpointManager.Add<Delegates.set_spriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_spriteAsset", true), value);
remove => HookEndpointManager.Remove<Delegates.set_spriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_spriteAsset", true), value);
}
public static event Delegates.get_tintAllSprites_WithArgs get_tintAllSprites
{
add => HookEndpointManager.Add<Delegates.get_tintAllSprites_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_tintAllSprites", true), value);
remove => HookEndpointManager.Remove<Delegates.get_tintAllSprites_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_tintAllSprites", true), value);
}
public static event Delegates.set_tintAllSprites_WithArgs set_tintAllSprites
{
add => HookEndpointManager.Add<Delegates.set_tintAllSprites_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_tintAllSprites", true), value);
remove => HookEndpointManager.Remove<Delegates.set_tintAllSprites_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_tintAllSprites", true), value);
}
public static event Delegates.get_overrideColorTags_WithArgs get_overrideColorTags
{
add => HookEndpointManager.Add<Delegates.get_overrideColorTags_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_overrideColorTags", true), value);
remove => HookEndpointManager.Remove<Delegates.get_overrideColorTags_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_overrideColorTags", true), value);
}
public static event Delegates.set_overrideColorTags_WithArgs set_overrideColorTags
{
add => HookEndpointManager.Add<Delegates.set_overrideColorTags_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_overrideColorTags", true), value);
remove => HookEndpointManager.Remove<Delegates.set_overrideColorTags_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_overrideColorTags", true), value);
}
public static event Delegates.get_faceColor_WithArgs get_faceColor
{
add => HookEndpointManager.Add<Delegates.get_faceColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_faceColor", true), value);
remove => HookEndpointManager.Remove<Delegates.get_faceColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_faceColor", true), value);
}
public static event Delegates.set_faceColor_WithArgs set_faceColor
{
add => HookEndpointManager.Add<Delegates.set_faceColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_faceColor", true), value);
remove => HookEndpointManager.Remove<Delegates.set_faceColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_faceColor", true), value);
}
public static event Delegates.get_outlineColor_WithArgs get_outlineColor
{
add => HookEndpointManager.Add<Delegates.get_outlineColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_outlineColor", true), value);
remove => HookEndpointManager.Remove<Delegates.get_outlineColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_outlineColor", true), value);
}
public static event Delegates.set_outlineColor_WithArgs set_outlineColor
{
add => HookEndpointManager.Add<Delegates.set_outlineColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_outlineColor", true), value);
remove => HookEndpointManager.Remove<Delegates.set_outlineColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_outlineColor", true), value);
}
public static event Delegates.get_outlineWidth_WithArgs get_outlineWidth
{
add => HookEndpointManager.Add<Delegates.get_outlineWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_outlineWidth", true), value);
remove => HookEndpointManager.Remove<Delegates.get_outlineWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_outlineWidth", true), value);
}
public static event Delegates.set_outlineWidth_WithArgs set_outlineWidth
{
add => HookEndpointManager.Add<Delegates.set_outlineWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_outlineWidth", true), value);
remove => HookEndpointManager.Remove<Delegates.set_outlineWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_outlineWidth", true), value);
}
public static event Delegates.get_fontSize_WithArgs get_fontSize
{
add => HookEndpointManager.Add<Delegates.get_fontSize_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontSize", true), value);
remove => HookEndpointManager.Remove<Delegates.get_fontSize_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontSize", true), value);
}
public static event Delegates.set_fontSize_WithArgs set_fontSize
{
add => HookEndpointManager.Add<Delegates.set_fontSize_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontSize", true), value);
remove => HookEndpointManager.Remove<Delegates.set_fontSize_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontSize", true), value);
}
public static event Delegates.get_fontScale_WithArgs get_fontScale
{
add => HookEndpointManager.Add<Delegates.get_fontScale_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontScale", true), value);
remove => HookEndpointManager.Remove<Delegates.get_fontScale_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontScale", true), value);
}
public static event Delegates.get_fontWeight_WithArgs get_fontWeight
{
add => HookEndpointManager.Add<Delegates.get_fontWeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontWeight", true), value);
remove => HookEndpointManager.Remove<Delegates.get_fontWeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontWeight", true), value);
}
public static event Delegates.set_fontWeight_WithArgs set_fontWeight
{
add => HookEndpointManager.Add<Delegates.set_fontWeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontWeight", true), value);
remove => HookEndpointManager.Remove<Delegates.set_fontWeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontWeight", true), value);
}
public static event Delegates.get_pixelsPerUnit_WithArgs get_pixelsPerUnit
{
add => HookEndpointManager.Add<Delegates.get_pixelsPerUnit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_pixelsPerUnit", true), value);
remove => HookEndpointManager.Remove<Delegates.get_pixelsPerUnit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_pixelsPerUnit", true), value);
}
public static event Delegates.get_enableAutoSizing_WithArgs get_enableAutoSizing
{
add => HookEndpointManager.Add<Delegates.get_enableAutoSizing_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_enableAutoSizing", true), value);
remove => HookEndpointManager.Remove<Delegates.get_enableAutoSizing_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_enableAutoSizing", true), value);
}
public static event Delegates.set_enableAutoSizing_WithArgs set_enableAutoSizing
{
add => HookEndpointManager.Add<Delegates.set_enableAutoSizing_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_enableAutoSizing", true), value);
remove => HookEndpointManager.Remove<Delegates.set_enableAutoSizing_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_enableAutoSizing", true), value);
}
public static event Delegates.get_fontSizeMin_WithArgs get_fontSizeMin
{
add => HookEndpointManager.Add<Delegates.get_fontSizeMin_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontSizeMin", true), value);
remove => HookEndpointManager.Remove<Delegates.get_fontSizeMin_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontSizeMin", true), value);
}
public static event Delegates.set_fontSizeMin_WithArgs set_fontSizeMin
{
add => HookEndpointManager.Add<Delegates.set_fontSizeMin_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontSizeMin", true), value);
remove => HookEndpointManager.Remove<Delegates.set_fontSizeMin_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontSizeMin", true), value);
}
public static event Delegates.get_fontSizeMax_WithArgs get_fontSizeMax
{
add => HookEndpointManager.Add<Delegates.get_fontSizeMax_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontSizeMax", true), value);
remove => HookEndpointManager.Remove<Delegates.get_fontSizeMax_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontSizeMax", true), value);
}
public static event Delegates.set_fontSizeMax_WithArgs set_fontSizeMax
{
add => HookEndpointManager.Add<Delegates.set_fontSizeMax_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontSizeMax", true), value);
remove => HookEndpointManager.Remove<Delegates.set_fontSizeMax_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontSizeMax", true), value);
}
public static event Delegates.get_fontStyle_WithArgs get_fontStyle
{
add => HookEndpointManager.Add<Delegates.get_fontStyle_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontStyle", true), value);
remove => HookEndpointManager.Remove<Delegates.get_fontStyle_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_fontStyle", true), value);
}
public static event Delegates.set_fontStyle_WithArgs set_fontStyle
{
add => HookEndpointManager.Add<Delegates.set_fontStyle_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontStyle", true), value);
remove => HookEndpointManager.Remove<Delegates.set_fontStyle_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_fontStyle", true), value);
}
public static event Delegates.get_isUsingBold_WithArgs get_isUsingBold
{
add => HookEndpointManager.Add<Delegates.get_isUsingBold_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_isUsingBold", true), value);
remove => HookEndpointManager.Remove<Delegates.get_isUsingBold_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_isUsingBold", true), value);
}
public static event Delegates.get_alignment_WithArgs get_alignment
{
add => HookEndpointManager.Add<Delegates.get_alignment_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_alignment", true), value);
remove => HookEndpointManager.Remove<Delegates.get_alignment_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_alignment", true), value);
}
public static event Delegates.set_alignment_WithArgs set_alignment
{
add => HookEndpointManager.Add<Delegates.set_alignment_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_alignment", true), value);
remove => HookEndpointManager.Remove<Delegates.set_alignment_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_alignment", true), value);
}
public static event Delegates.get_characterSpacing_WithArgs get_characterSpacing
{
add => HookEndpointManager.Add<Delegates.get_characterSpacing_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_characterSpacing", true), value);
remove => HookEndpointManager.Remove<Delegates.get_characterSpacing_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_characterSpacing", true), value);
}
public static event Delegates.set_characterSpacing_WithArgs set_characterSpacing
{
add => HookEndpointManager.Add<Delegates.set_characterSpacing_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_characterSpacing", true), value);
remove => HookEndpointManager.Remove<Delegates.set_characterSpacing_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_characterSpacing", true), value);
}
public static event Delegates.get_lineSpacing_WithArgs get_lineSpacing
{
add => HookEndpointManager.Add<Delegates.get_lineSpacing_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_lineSpacing", true), value);
remove => HookEndpointManager.Remove<Delegates.get_lineSpacing_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_lineSpacing", true), value);
}
public static event Delegates.set_lineSpacing_WithArgs set_lineSpacing
{
add => HookEndpointManager.Add<Delegates.set_lineSpacing_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_lineSpacing", true), value);
remove => HookEndpointManager.Remove<Delegates.set_lineSpacing_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_lineSpacing", true), value);
}
public static event Delegates.get_paragraphSpacing_WithArgs get_paragraphSpacing
{
add => HookEndpointManager.Add<Delegates.get_paragraphSpacing_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_paragraphSpacing", true), value);
remove => HookEndpointManager.Remove<Delegates.get_paragraphSpacing_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_paragraphSpacing", true), value);
}
public static event Delegates.set_paragraphSpacing_WithArgs set_paragraphSpacing
{
add => HookEndpointManager.Add<Delegates.set_paragraphSpacing_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_paragraphSpacing", true), value);
remove => HookEndpointManager.Remove<Delegates.set_paragraphSpacing_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_paragraphSpacing", true), value);
}
public static event Delegates.get_characterWidthAdjustment_WithArgs get_characterWidthAdjustment
{
add => HookEndpointManager.Add<Delegates.get_characterWidthAdjustment_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_characterWidthAdjustment", true), value);
remove => HookEndpointManager.Remove<Delegates.get_characterWidthAdjustment_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_characterWidthAdjustment", true), value);
}
public static event Delegates.set_characterWidthAdjustment_WithArgs set_characterWidthAdjustment
{
add => HookEndpointManager.Add<Delegates.set_characterWidthAdjustment_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_characterWidthAdjustment", true), value);
remove => HookEndpointManager.Remove<Delegates.set_characterWidthAdjustment_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_characterWidthAdjustment", true), value);
}
public static event Delegates.get_enableWordWrapping_WithArgs get_enableWordWrapping
{
add => HookEndpointManager.Add<Delegates.get_enableWordWrapping_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_enableWordWrapping", true), value);
remove => HookEndpointManager.Remove<Delegates.get_enableWordWrapping_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_enableWordWrapping", true), value);
}
public static event Delegates.set_enableWordWrapping_WithArgs set_enableWordWrapping
{
add => HookEndpointManager.Add<Delegates.set_enableWordWrapping_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_enableWordWrapping", true), value);
remove => HookEndpointManager.Remove<Delegates.set_enableWordWrapping_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_enableWordWrapping", true), value);
}
public static event Delegates.get_wordWrappingRatios_WithArgs get_wordWrappingRatios
{
add => HookEndpointManager.Add<Delegates.get_wordWrappingRatios_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_wordWrappingRatios", true), value);
remove => HookEndpointManager.Remove<Delegates.get_wordWrappingRatios_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_wordWrappingRatios", true), value);
}
public static event Delegates.set_wordWrappingRatios_WithArgs set_wordWrappingRatios
{
add => HookEndpointManager.Add<Delegates.set_wordWrappingRatios_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_wordWrappingRatios", true), value);
remove => HookEndpointManager.Remove<Delegates.set_wordWrappingRatios_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_wordWrappingRatios", true), value);
}
public static event Delegates.get_enableAdaptiveJustification_WithArgs get_enableAdaptiveJustification
{
add => HookEndpointManager.Add<Delegates.get_enableAdaptiveJustification_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_enableAdaptiveJustification", true), value);
remove => HookEndpointManager.Remove<Delegates.get_enableAdaptiveJustification_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_enableAdaptiveJustification", true), value);
}
public static event Delegates.set_enableAdaptiveJustification_WithArgs set_enableAdaptiveJustification
{
add => HookEndpointManager.Add<Delegates.set_enableAdaptiveJustification_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_enableAdaptiveJustification", true), value);
remove => HookEndpointManager.Remove<Delegates.set_enableAdaptiveJustification_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_enableAdaptiveJustification", true), value);
}
public static event Delegates.get_OverflowMode_WithArgs get_OverflowMode
{
add => HookEndpointManager.Add<Delegates.get_OverflowMode_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_OverflowMode", true), value);
remove => HookEndpointManager.Remove<Delegates.get_OverflowMode_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_OverflowMode", true), value);
}
public static event Delegates.set_OverflowMode_WithArgs set_OverflowMode
{
add => HookEndpointManager.Add<Delegates.set_OverflowMode_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_OverflowMode", true), value);
remove => HookEndpointManager.Remove<Delegates.set_OverflowMode_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_OverflowMode", true), value);
}
public static event Delegates.get_enableKerning_WithArgs get_enableKerning
{
add => HookEndpointManager.Add<Delegates.get_enableKerning_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_enableKerning", true), value);
remove => HookEndpointManager.Remove<Delegates.get_enableKerning_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_enableKerning", true), value);
}
public static event Delegates.set_enableKerning_WithArgs set_enableKerning
{
add => HookEndpointManager.Add<Delegates.set_enableKerning_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_enableKerning", true), value);
remove => HookEndpointManager.Remove<Delegates.set_enableKerning_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_enableKerning", true), value);
}
public static event Delegates.get_extraPadding_WithArgs get_extraPadding
{
add => HookEndpointManager.Add<Delegates.get_extraPadding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_extraPadding", true), value);
remove => HookEndpointManager.Remove<Delegates.get_extraPadding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_extraPadding", true), value);
}
public static event Delegates.set_extraPadding_WithArgs set_extraPadding
{
add => HookEndpointManager.Add<Delegates.set_extraPadding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_extraPadding", true), value);
remove => HookEndpointManager.Remove<Delegates.set_extraPadding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_extraPadding", true), value);
}
public static event Delegates.get_richText_WithArgs get_richText
{
add => HookEndpointManager.Add<Delegates.get_richText_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_richText", true), value);
remove => HookEndpointManager.Remove<Delegates.get_richText_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_richText", true), value);
}
public static event Delegates.set_richText_WithArgs set_richText
{
add => HookEndpointManager.Add<Delegates.set_richText_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_richText", true), value);
remove => HookEndpointManager.Remove<Delegates.set_richText_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_richText", true), value);
}
public static event Delegates.get_parseCtrlCharacters_WithArgs get_parseCtrlCharacters
{
add => HookEndpointManager.Add<Delegates.get_parseCtrlCharacters_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_parseCtrlCharacters", true), value);
remove => HookEndpointManager.Remove<Delegates.get_parseCtrlCharacters_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_parseCtrlCharacters", true), value);
}
public static event Delegates.set_parseCtrlCharacters_WithArgs set_parseCtrlCharacters
{
add => HookEndpointManager.Add<Delegates.set_parseCtrlCharacters_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_parseCtrlCharacters", true), value);
remove => HookEndpointManager.Remove<Delegates.set_parseCtrlCharacters_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_parseCtrlCharacters", true), value);
}
public static event Delegates.get_isOverlay_WithArgs get_isOverlay
{
add => HookEndpointManager.Add<Delegates.get_isOverlay_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_isOverlay", true), value);
remove => HookEndpointManager.Remove<Delegates.get_isOverlay_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_isOverlay", true), value);
}
public static event Delegates.set_isOverlay_WithArgs set_isOverlay
{
add => HookEndpointManager.Add<Delegates.set_isOverlay_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_isOverlay", true), value);
remove => HookEndpointManager.Remove<Delegates.set_isOverlay_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_isOverlay", true), value);
}
public static event Delegates.get_isOrthographic_WithArgs get_isOrthographic
{
add => HookEndpointManager.Add<Delegates.get_isOrthographic_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_isOrthographic", true), value);
remove => HookEndpointManager.Remove<Delegates.get_isOrthographic_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_isOrthographic", true), value);
}
public static event Delegates.set_isOrthographic_WithArgs set_isOrthographic
{
add => HookEndpointManager.Add<Delegates.set_isOrthographic_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_isOrthographic", true), value);
remove => HookEndpointManager.Remove<Delegates.set_isOrthographic_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_isOrthographic", true), value);
}
public static event Delegates.get_enableCulling_WithArgs get_enableCulling
{
add => HookEndpointManager.Add<Delegates.get_enableCulling_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_enableCulling", true), value);
remove => HookEndpointManager.Remove<Delegates.get_enableCulling_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_enableCulling", true), value);
}
public static event Delegates.set_enableCulling_WithArgs set_enableCulling
{
add => HookEndpointManager.Add<Delegates.set_enableCulling_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_enableCulling", true), value);
remove => HookEndpointManager.Remove<Delegates.set_enableCulling_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_enableCulling", true), value);
}
public static event Delegates.get_ignoreVisibility_WithArgs get_ignoreVisibility
{
add => HookEndpointManager.Add<Delegates.get_ignoreVisibility_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_ignoreVisibility", true), value);
remove => HookEndpointManager.Remove<Delegates.get_ignoreVisibility_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_ignoreVisibility", true), value);
}
public static event Delegates.set_ignoreVisibility_WithArgs set_ignoreVisibility
{
add => HookEndpointManager.Add<Delegates.set_ignoreVisibility_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_ignoreVisibility", true), value);
remove => HookEndpointManager.Remove<Delegates.set_ignoreVisibility_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_ignoreVisibility", true), value);
}
public static event Delegates.get_horizontalMapping_WithArgs get_horizontalMapping
{
add => HookEndpointManager.Add<Delegates.get_horizontalMapping_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_horizontalMapping", true), value);
remove => HookEndpointManager.Remove<Delegates.get_horizontalMapping_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_horizontalMapping", true), value);
}
public static event Delegates.set_horizontalMapping_WithArgs set_horizontalMapping
{
add => HookEndpointManager.Add<Delegates.set_horizontalMapping_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_horizontalMapping", true), value);
remove => HookEndpointManager.Remove<Delegates.set_horizontalMapping_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_horizontalMapping", true), value);
}
public static event Delegates.get_verticalMapping_WithArgs get_verticalMapping
{
add => HookEndpointManager.Add<Delegates.get_verticalMapping_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_verticalMapping", true), value);
remove => HookEndpointManager.Remove<Delegates.get_verticalMapping_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_verticalMapping", true), value);
}
public static event Delegates.set_verticalMapping_WithArgs set_verticalMapping
{
add => HookEndpointManager.Add<Delegates.set_verticalMapping_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_verticalMapping", true), value);
remove => HookEndpointManager.Remove<Delegates.set_verticalMapping_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_verticalMapping", true), value);
}
public static event Delegates.get_renderMode_WithArgs get_renderMode
{
add => HookEndpointManager.Add<Delegates.get_renderMode_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_renderMode", true), value);
remove => HookEndpointManager.Remove<Delegates.get_renderMode_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_renderMode", true), value);
}
public static event Delegates.set_renderMode_WithArgs set_renderMode
{
add => HookEndpointManager.Add<Delegates.set_renderMode_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_renderMode", true), value);
remove => HookEndpointManager.Remove<Delegates.set_renderMode_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_renderMode", true), value);
}
public static event Delegates.get_maxVisibleCharacters_WithArgs get_maxVisibleCharacters
{
add => HookEndpointManager.Add<Delegates.get_maxVisibleCharacters_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_maxVisibleCharacters", true), value);
remove => HookEndpointManager.Remove<Delegates.get_maxVisibleCharacters_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_maxVisibleCharacters", true), value);
}
public static event Delegates.set_maxVisibleCharacters_WithArgs set_maxVisibleCharacters
{
add => HookEndpointManager.Add<Delegates.set_maxVisibleCharacters_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_maxVisibleCharacters", true), value);
remove => HookEndpointManager.Remove<Delegates.set_maxVisibleCharacters_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_maxVisibleCharacters", true), value);
}
public static event Delegates.get_maxVisibleWords_WithArgs get_maxVisibleWords
{
add => HookEndpointManager.Add<Delegates.get_maxVisibleWords_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_maxVisibleWords", true), value);
remove => HookEndpointManager.Remove<Delegates.get_maxVisibleWords_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_maxVisibleWords", true), value);
}
public static event Delegates.set_maxVisibleWords_WithArgs set_maxVisibleWords
{
add => HookEndpointManager.Add<Delegates.set_maxVisibleWords_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_maxVisibleWords", true), value);
remove => HookEndpointManager.Remove<Delegates.set_maxVisibleWords_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_maxVisibleWords", true), value);
}
public static event Delegates.get_maxVisibleLines_WithArgs get_maxVisibleLines
{
add => HookEndpointManager.Add<Delegates.get_maxVisibleLines_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_maxVisibleLines", true), value);
remove => HookEndpointManager.Remove<Delegates.get_maxVisibleLines_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_maxVisibleLines", true), value);
}
public static event Delegates.set_maxVisibleLines_WithArgs set_maxVisibleLines
{
add => HookEndpointManager.Add<Delegates.set_maxVisibleLines_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_maxVisibleLines", true), value);
remove => HookEndpointManager.Remove<Delegates.set_maxVisibleLines_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_maxVisibleLines", true), value);
}
public static event Delegates.get_useMaxVisibleDescender_WithArgs get_useMaxVisibleDescender
{
add => HookEndpointManager.Add<Delegates.get_useMaxVisibleDescender_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_useMaxVisibleDescender", true), value);
remove => HookEndpointManager.Remove<Delegates.get_useMaxVisibleDescender_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_useMaxVisibleDescender", true), value);
}
public static event Delegates.set_useMaxVisibleDescender_WithArgs set_useMaxVisibleDescender
{
add => HookEndpointManager.Add<Delegates.set_useMaxVisibleDescender_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_useMaxVisibleDescender", true), value);
remove => HookEndpointManager.Remove<Delegates.set_useMaxVisibleDescender_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_useMaxVisibleDescender", true), value);
}
public static event Delegates.get_pageToDisplay_WithArgs get_pageToDisplay
{
add => HookEndpointManager.Add<Delegates.get_pageToDisplay_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_pageToDisplay", true), value);
remove => HookEndpointManager.Remove<Delegates.get_pageToDisplay_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_pageToDisplay", true), value);
}
public static event Delegates.set_pageToDisplay_WithArgs set_pageToDisplay
{
add => HookEndpointManager.Add<Delegates.set_pageToDisplay_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_pageToDisplay", true), value);
remove => HookEndpointManager.Remove<Delegates.set_pageToDisplay_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_pageToDisplay", true), value);
}
public static event Delegates.get_margin_WithArgs get_margin
{
add => HookEndpointManager.Add<Delegates.get_margin_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_margin", true), value);
remove => HookEndpointManager.Remove<Delegates.get_margin_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_margin", true), value);
}
public static event Delegates.set_margin_WithArgs set_margin
{
add => HookEndpointManager.Add<Delegates.set_margin_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_margin", true), value);
remove => HookEndpointManager.Remove<Delegates.set_margin_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_margin", true), value);
}
public static event Delegates.get_textInfo_WithArgs get_textInfo
{
add => HookEndpointManager.Add<Delegates.get_textInfo_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_textInfo", true), value);
remove => HookEndpointManager.Remove<Delegates.get_textInfo_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_textInfo", true), value);
}
public static event Delegates.get_havePropertiesChanged_WithArgs get_havePropertiesChanged
{
add => HookEndpointManager.Add<Delegates.get_havePropertiesChanged_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_havePropertiesChanged", true), value);
remove => HookEndpointManager.Remove<Delegates.get_havePropertiesChanged_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_havePropertiesChanged", true), value);
}
public static event Delegates.set_havePropertiesChanged_WithArgs set_havePropertiesChanged
{
add => HookEndpointManager.Add<Delegates.set_havePropertiesChanged_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_havePropertiesChanged", true), value);
remove => HookEndpointManager.Remove<Delegates.set_havePropertiesChanged_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_havePropertiesChanged", true), value);
}
public static event Delegates.get_isUsingLegacyAnimationComponent_WithArgs get_isUsingLegacyAnimationComponent
{
add => HookEndpointManager.Add<Delegates.get_isUsingLegacyAnimationComponent_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_isUsingLegacyAnimationComponent", true), value);
remove => HookEndpointManager.Remove<Delegates.get_isUsingLegacyAnimationComponent_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_isUsingLegacyAnimationComponent", true), value);
}
public static event Delegates.set_isUsingLegacyAnimationComponent_WithArgs set_isUsingLegacyAnimationComponent
{
add => HookEndpointManager.Add<Delegates.set_isUsingLegacyAnimationComponent_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_isUsingLegacyAnimationComponent", true), value);
remove => HookEndpointManager.Remove<Delegates.set_isUsingLegacyAnimationComponent_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_isUsingLegacyAnimationComponent", true), value);
}
public static event Delegates.get_transform_WithArgs get_transform
{
add => HookEndpointManager.Add<Delegates.get_transform_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_transform", true), value);
remove => HookEndpointManager.Remove<Delegates.get_transform_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_transform", true), value);
}
public static event Delegates.get_rectTransform_WithArgs get_rectTransform
{
add => HookEndpointManager.Add<Delegates.get_rectTransform_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_rectTransform", true), value);
remove => HookEndpointManager.Remove<Delegates.get_rectTransform_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_rectTransform", true), value);
}
public static event Delegates.get_autoSizeTextContainer_WithArgs get_autoSizeTextContainer
{
add => HookEndpointManager.Add<Delegates.get_autoSizeTextContainer_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_autoSizeTextContainer", true), value);
remove => HookEndpointManager.Remove<Delegates.get_autoSizeTextContainer_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_autoSizeTextContainer", true), value);
}
public static event Delegates.set_autoSizeTextContainer_WithArgs set_autoSizeTextContainer
{
add => HookEndpointManager.Add<Delegates.set_autoSizeTextContainer_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_autoSizeTextContainer", true), value);
remove => HookEndpointManager.Remove<Delegates.set_autoSizeTextContainer_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_autoSizeTextContainer", true), value);
}
public static event Delegates.get_mesh_WithArgs get_mesh
{
add => HookEndpointManager.Add<Delegates.get_mesh_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_mesh", true), value);
remove => HookEndpointManager.Remove<Delegates.get_mesh_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_mesh", true), value);
}
public static event Delegates.get_isVolumetricText_WithArgs get_isVolumetricText
{
add => HookEndpointManager.Add<Delegates.get_isVolumetricText_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_isVolumetricText", true), value);
remove => HookEndpointManager.Remove<Delegates.get_isVolumetricText_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_isVolumetricText", true), value);
}
public static event Delegates.set_isVolumetricText_WithArgs set_isVolumetricText
{
add => HookEndpointManager.Add<Delegates.set_isVolumetricText_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_isVolumetricText", true), value);
remove => HookEndpointManager.Remove<Delegates.set_isVolumetricText_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "set_isVolumetricText", true), value);
}
public static event Delegates.get_bounds_WithArgs get_bounds
{
add => HookEndpointManager.Add<Delegates.get_bounds_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_bounds", true), value);
remove => HookEndpointManager.Remove<Delegates.get_bounds_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_bounds", true), value);
}
public static event Delegates.get_textBounds_WithArgs get_textBounds
{
add => HookEndpointManager.Add<Delegates.get_textBounds_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_textBounds", true), value);
remove => HookEndpointManager.Remove<Delegates.get_textBounds_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_textBounds", true), value);
}
public static event Delegates.get_flexibleHeight_WithArgs get_flexibleHeight
{
add => HookEndpointManager.Add<Delegates.get_flexibleHeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_flexibleHeight", true), value);
remove => HookEndpointManager.Remove<Delegates.get_flexibleHeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_flexibleHeight", true), value);
}
public static event Delegates.get_flexibleWidth_WithArgs get_flexibleWidth
{
add => HookEndpointManager.Add<Delegates.get_flexibleWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_flexibleWidth", true), value);
remove => HookEndpointManager.Remove<Delegates.get_flexibleWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_flexibleWidth", true), value);
}
public static event Delegates.get_minHeight_WithArgs get_minHeight
{
add => HookEndpointManager.Add<Delegates.get_minHeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_minHeight", true), value);
remove => HookEndpointManager.Remove<Delegates.get_minHeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_minHeight", true), value);
}
public static event Delegates.get_minWidth_WithArgs get_minWidth
{
add => HookEndpointManager.Add<Delegates.get_minWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_minWidth", true), value);
remove => HookEndpointManager.Remove<Delegates.get_minWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_minWidth", true), value);
}
public static event Delegates.get_preferredWidth_WithArgs get_preferredWidth
{
add => HookEndpointManager.Add<Delegates.get_preferredWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_preferredWidth", true), value);
remove => HookEndpointManager.Remove<Delegates.get_preferredWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_preferredWidth", true), value);
}
public static event Delegates.get_preferredHeight_WithArgs get_preferredHeight
{
add => HookEndpointManager.Add<Delegates.get_preferredHeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_preferredHeight", true), value);
remove => HookEndpointManager.Remove<Delegates.get_preferredHeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_preferredHeight", true), value);
}
public static event Delegates.get_renderedWidth_WithArgs get_renderedWidth
{
add => HookEndpointManager.Add<Delegates.get_renderedWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_renderedWidth", true), value);
remove => HookEndpointManager.Remove<Delegates.get_renderedWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_renderedWidth", true), value);
}
public static event Delegates.get_renderedHeight_WithArgs get_renderedHeight
{
add => HookEndpointManager.Add<Delegates.get_renderedHeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_renderedHeight", true), value);
remove => HookEndpointManager.Remove<Delegates.get_renderedHeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_renderedHeight", true), value);
}
public static event Delegates.get_layoutPriority_WithArgs get_layoutPriority
{
add => HookEndpointManager.Add<Delegates.get_layoutPriority_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_layoutPriority", true), value);
remove => HookEndpointManager.Remove<Delegates.get_layoutPriority_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "get_layoutPriority", true), value);
}
public static event Delegates.LoadFontAsset_WithArgs LoadFontAsset
{
add => HookEndpointManager.Add<Delegates.LoadFontAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "LoadFontAsset", true), value);
remove => HookEndpointManager.Remove<Delegates.LoadFontAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "LoadFontAsset", true), value);
}
public static event Delegates.SetSharedMaterial_WithArgs SetSharedMaterial
{
add => HookEndpointManager.Add<Delegates.SetSharedMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetSharedMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.SetSharedMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetSharedMaterial", true), value);
}
public static event Delegates.GetMaterial_WithArgs GetMaterial
{
add => HookEndpointManager.Add<Delegates.GetMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.GetMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetMaterial", true), value);
}
public static event Delegates.SetFontBaseMaterial_WithArgs SetFontBaseMaterial
{
add => HookEndpointManager.Add<Delegates.SetFontBaseMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetFontBaseMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.SetFontBaseMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetFontBaseMaterial", true), value);
}
public static event Delegates.GetSharedMaterials_WithArgs GetSharedMaterials
{
add => HookEndpointManager.Add<Delegates.GetSharedMaterials_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetSharedMaterials", true), value);
remove => HookEndpointManager.Remove<Delegates.GetSharedMaterials_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetSharedMaterials", true), value);
}
public static event Delegates.SetSharedMaterials_WithArgs SetSharedMaterials
{
add => HookEndpointManager.Add<Delegates.SetSharedMaterials_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetSharedMaterials", true), value);
remove => HookEndpointManager.Remove<Delegates.SetSharedMaterials_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetSharedMaterials", true), value);
}
public static event Delegates.GetMaterials_WithArgs GetMaterials
{
add => HookEndpointManager.Add<Delegates.GetMaterials_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetMaterials", true), value);
remove => HookEndpointManager.Remove<Delegates.GetMaterials_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetMaterials", true), value);
}
public static event Delegates.CreateMaterialInstance_WithArgs CreateMaterialInstance
{
add => HookEndpointManager.Add<Delegates.CreateMaterialInstance_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "CreateMaterialInstance", true), value);
remove => HookEndpointManager.Remove<Delegates.CreateMaterialInstance_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "CreateMaterialInstance", true), value);
}
public static event Delegates.SetVertexColorGradient_WithArgs SetVertexColorGradient
{
add => HookEndpointManager.Add<Delegates.SetVertexColorGradient_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetVertexColorGradient", true), value);
remove => HookEndpointManager.Remove<Delegates.SetVertexColorGradient_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetVertexColorGradient", true), value);
}
public static event Delegates.SetFaceColor_WithArgs SetFaceColor
{
add => HookEndpointManager.Add<Delegates.SetFaceColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetFaceColor", true), value);
remove => HookEndpointManager.Remove<Delegates.SetFaceColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetFaceColor", true), value);
}
public static event Delegates.SetOutlineColor_WithArgs SetOutlineColor
{
add => HookEndpointManager.Add<Delegates.SetOutlineColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetOutlineColor", true), value);
remove => HookEndpointManager.Remove<Delegates.SetOutlineColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetOutlineColor", true), value);
}
public static event Delegates.SetOutlineThickness_WithArgs SetOutlineThickness
{
add => HookEndpointManager.Add<Delegates.SetOutlineThickness_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetOutlineThickness", true), value);
remove => HookEndpointManager.Remove<Delegates.SetOutlineThickness_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetOutlineThickness", true), value);
}
public static event Delegates.SetShaderDepth_WithArgs SetShaderDepth
{
add => HookEndpointManager.Add<Delegates.SetShaderDepth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetShaderDepth", true), value);
remove => HookEndpointManager.Remove<Delegates.SetShaderDepth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetShaderDepth", true), value);
}
public static event Delegates.SetCulling_WithArgs SetCulling
{
add => HookEndpointManager.Add<Delegates.SetCulling_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetCulling", true), value);
remove => HookEndpointManager.Remove<Delegates.SetCulling_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetCulling", true), value);
}
public static event Delegates.GetPaddingForMaterial_WithArgs GetPaddingForMaterial
{
add => HookEndpointManager.Add<Delegates.GetPaddingForMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPaddingForMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.GetPaddingForMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPaddingForMaterial", true), value);
}
public static event Delegates.GetPaddingForMaterial_Material_WithArgs GetPaddingForMaterial_Material
{
add => HookEndpointManager.Add<Delegates.GetPaddingForMaterial_Material_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPaddingForMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.GetPaddingForMaterial_Material_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPaddingForMaterial", true), value);
}
public static event Delegates.GetTextContainerLocalCorners_WithArgs GetTextContainerLocalCorners
{
add => HookEndpointManager.Add<Delegates.GetTextContainerLocalCorners_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetTextContainerLocalCorners", true), value);
remove => HookEndpointManager.Remove<Delegates.GetTextContainerLocalCorners_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetTextContainerLocalCorners", true), value);
}
public static event Delegates.ForceMeshUpdate_WithArgs ForceMeshUpdate
{
add => HookEndpointManager.Add<Delegates.ForceMeshUpdate_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "ForceMeshUpdate", true), value);
remove => HookEndpointManager.Remove<Delegates.ForceMeshUpdate_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "ForceMeshUpdate", true), value);
}
public static event Delegates.ForceMeshUpdate_bool_WithArgs ForceMeshUpdate_bool
{
add => HookEndpointManager.Add<Delegates.ForceMeshUpdate_bool_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "ForceMeshUpdate", true), value);
remove => HookEndpointManager.Remove<Delegates.ForceMeshUpdate_bool_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "ForceMeshUpdate", true), value);
}
public static event Delegates.SetTextInternal_WithArgs SetTextInternal
{
add => HookEndpointManager.Add<Delegates.SetTextInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetTextInternal", true), value);
remove => HookEndpointManager.Remove<Delegates.SetTextInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetTextInternal", true), value);
}
public static event Delegates.UpdateGeometry_WithArgs UpdateGeometry
{
add => HookEndpointManager.Add<Delegates.UpdateGeometry_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "UpdateGeometry", true), value);
remove => HookEndpointManager.Remove<Delegates.UpdateGeometry_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "UpdateGeometry", true), value);
}
public static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_WithArgs UpdateVertexData_TMP_VertexDataUpdateFlags
{
add => HookEndpointManager.Add<Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "UpdateVertexData", true), value);
remove => HookEndpointManager.Remove<Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "UpdateVertexData", true), value);
}
public static event Delegates.UpdateVertexData_WithArgs UpdateVertexData
{
add => HookEndpointManager.Add<Delegates.UpdateVertexData_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "UpdateVertexData", true), value);
remove => HookEndpointManager.Remove<Delegates.UpdateVertexData_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "UpdateVertexData", true), value);
}
public static event Delegates.SetVertices_WithArgs SetVertices
{
add => HookEndpointManager.Add<Delegates.SetVertices_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetVertices", true), value);
remove => HookEndpointManager.Remove<Delegates.SetVertices_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetVertices", true), value);
}
public static event Delegates.UpdateMeshPadding_WithArgs UpdateMeshPadding
{
add => HookEndpointManager.Add<Delegates.UpdateMeshPadding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "UpdateMeshPadding", true), value);
remove => HookEndpointManager.Remove<Delegates.UpdateMeshPadding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "UpdateMeshPadding", true), value);
}
public static event Delegates.CrossFadeColor_WithArgs CrossFadeColor
{
add => HookEndpointManager.Add<Delegates.CrossFadeColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "CrossFadeColor", true), value);
remove => HookEndpointManager.Remove<Delegates.CrossFadeColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "CrossFadeColor", true), value);
}
public static event Delegates.CrossFadeAlpha_WithArgs CrossFadeAlpha
{
add => HookEndpointManager.Add<Delegates.CrossFadeAlpha_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "CrossFadeAlpha", true), value);
remove => HookEndpointManager.Remove<Delegates.CrossFadeAlpha_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "CrossFadeAlpha", true), value);
}
public static event Delegates.InternalCrossFadeColor_WithArgs InternalCrossFadeColor
{
add => HookEndpointManager.Add<Delegates.InternalCrossFadeColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "InternalCrossFadeColor", true), value);
remove => HookEndpointManager.Remove<Delegates.InternalCrossFadeColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "InternalCrossFadeColor", true), value);
}
public static event Delegates.InternalCrossFadeAlpha_WithArgs InternalCrossFadeAlpha
{
add => HookEndpointManager.Add<Delegates.InternalCrossFadeAlpha_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "InternalCrossFadeAlpha", true), value);
remove => HookEndpointManager.Remove<Delegates.InternalCrossFadeAlpha_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "InternalCrossFadeAlpha", true), value);
}
public static event Delegates.ParseInputText_WithArgs ParseInputText
{
add => HookEndpointManager.Add<Delegates.ParseInputText_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "ParseInputText", true), value);
remove => HookEndpointManager.Remove<Delegates.ParseInputText_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "ParseInputText", true), value);
}
public static event Delegates.SetText_string_WithArgs SetText_string
{
add => HookEndpointManager.Add<Delegates.SetText_string_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetText", true), value);
remove => HookEndpointManager.Remove<Delegates.SetText_string_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetText", true), value);
}
public static event Delegates.SetText_string_float_WithArgs SetText_string_float
{
add => HookEndpointManager.Add<Delegates.SetText_string_float_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetText", true), value);
remove => HookEndpointManager.Remove<Delegates.SetText_string_float_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetText", true), value);
}
public static event Delegates.SetText_string_float_float_WithArgs SetText_string_float_float
{
add => HookEndpointManager.Add<Delegates.SetText_string_float_float_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetText", true), value);
remove => HookEndpointManager.Remove<Delegates.SetText_string_float_float_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetText", true), value);
}
public static event Delegates.SetText_string_float_float_float_WithArgs SetText_string_float_float_float
{
add => HookEndpointManager.Add<Delegates.SetText_string_float_float_float_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetText", true), value);
remove => HookEndpointManager.Remove<Delegates.SetText_string_float_float_float_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetText", true), value);
}
public static event Delegates.SetText_StringBuilder_WithArgs SetText_StringBuilder
{
add => HookEndpointManager.Add<Delegates.SetText_StringBuilder_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetText", true), value);
remove => HookEndpointManager.Remove<Delegates.SetText_StringBuilder_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetText", true), value);
}
public static event Delegates.SetCharArray_WithArgs SetCharArray
{
add => HookEndpointManager.Add<Delegates.SetCharArray_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetCharArray", true), value);
remove => HookEndpointManager.Remove<Delegates.SetCharArray_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetCharArray", true), value);
}
public static event Delegates.SetTextArrayToCharArray_WithArgs SetTextArrayToCharArray
{
add => HookEndpointManager.Add<Delegates.SetTextArrayToCharArray_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetTextArrayToCharArray", true), value);
remove => HookEndpointManager.Remove<Delegates.SetTextArrayToCharArray_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetTextArrayToCharArray", true), value);
}
public static event Delegates.StringToCharArray_WithArgs StringToCharArray
{
add => HookEndpointManager.Add<Delegates.StringToCharArray_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "StringToCharArray", true), value);
remove => HookEndpointManager.Remove<Delegates.StringToCharArray_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "StringToCharArray", true), value);
}
public static event Delegates.StringBuilderToIntArray_WithArgs StringBuilderToIntArray
{
add => HookEndpointManager.Add<Delegates.StringBuilderToIntArray_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "StringBuilderToIntArray", true), value);
remove => HookEndpointManager.Remove<Delegates.StringBuilderToIntArray_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "StringBuilderToIntArray", true), value);
}
public static event Delegates.AddFloatToCharArray_WithArgs AddFloatToCharArray
{
add => HookEndpointManager.Add<Delegates.AddFloatToCharArray_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "AddFloatToCharArray", true), value);
remove => HookEndpointManager.Remove<Delegates.AddFloatToCharArray_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "AddFloatToCharArray", true), value);
}
public static event Delegates.AddIntToCharArray_WithArgs AddIntToCharArray
{
add => HookEndpointManager.Add<Delegates.AddIntToCharArray_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "AddIntToCharArray", true), value);
remove => HookEndpointManager.Remove<Delegates.AddIntToCharArray_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "AddIntToCharArray", true), value);
}
public static event Delegates.SetArraySizes_WithArgs SetArraySizes
{
add => HookEndpointManager.Add<Delegates.SetArraySizes_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetArraySizes", true), value);
remove => HookEndpointManager.Remove<Delegates.SetArraySizes_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetArraySizes", true), value);
}
public static event Delegates.GenerateTextMesh_WithArgs GenerateTextMesh
{
add => HookEndpointManager.Add<Delegates.GenerateTextMesh_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GenerateTextMesh", true), value);
remove => HookEndpointManager.Remove<Delegates.GenerateTextMesh_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GenerateTextMesh", true), value);
}
public static event Delegates.GetPreferredValues_WithArgs GetPreferredValues
{
add => HookEndpointManager.Add<Delegates.GetPreferredValues_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredValues", true), value);
remove => HookEndpointManager.Remove<Delegates.GetPreferredValues_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredValues", true), value);
}
public static event Delegates.GetPreferredValues_float_float_WithArgs GetPreferredValues_float_float
{
add => HookEndpointManager.Add<Delegates.GetPreferredValues_float_float_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredValues", true), value);
remove => HookEndpointManager.Remove<Delegates.GetPreferredValues_float_float_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredValues", true), value);
}
public static event Delegates.GetPreferredValues_string_WithArgs GetPreferredValues_string
{
add => HookEndpointManager.Add<Delegates.GetPreferredValues_string_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredValues", true), value);
remove => HookEndpointManager.Remove<Delegates.GetPreferredValues_string_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredValues", true), value);
}
public static event Delegates.GetPreferredValues_string_float_float_WithArgs GetPreferredValues_string_float_float
{
add => HookEndpointManager.Add<Delegates.GetPreferredValues_string_float_float_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredValues", true), value);
remove => HookEndpointManager.Remove<Delegates.GetPreferredValues_string_float_float_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredValues", true), value);
}
public static event Delegates.GetPreferredWidth_WithArgs GetPreferredWidth
{
add => HookEndpointManager.Add<Delegates.GetPreferredWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredWidth", true), value);
remove => HookEndpointManager.Remove<Delegates.GetPreferredWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredWidth", true), value);
}
public static event Delegates.GetPreferredWidth_Vector2_WithArgs GetPreferredWidth_Vector2
{
add => HookEndpointManager.Add<Delegates.GetPreferredWidth_Vector2_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredWidth", true), value);
remove => HookEndpointManager.Remove<Delegates.GetPreferredWidth_Vector2_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredWidth", true), value);
}
public static event Delegates.GetPreferredHeight_WithArgs GetPreferredHeight
{
add => HookEndpointManager.Add<Delegates.GetPreferredHeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredHeight", true), value);
remove => HookEndpointManager.Remove<Delegates.GetPreferredHeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredHeight", true), value);
}
public static event Delegates.GetPreferredHeight_Vector2_WithArgs GetPreferredHeight_Vector2
{
add => HookEndpointManager.Add<Delegates.GetPreferredHeight_Vector2_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredHeight", true), value);
remove => HookEndpointManager.Remove<Delegates.GetPreferredHeight_Vector2_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetPreferredHeight", true), value);
}
public static event Delegates.GetRenderedValues_WithArgs GetRenderedValues
{
add => HookEndpointManager.Add<Delegates.GetRenderedValues_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetRenderedValues", true), value);
remove => HookEndpointManager.Remove<Delegates.GetRenderedValues_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetRenderedValues", true), value);
}
public static event Delegates.GetRenderedWidth_WithArgs GetRenderedWidth
{
add => HookEndpointManager.Add<Delegates.GetRenderedWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetRenderedWidth", true), value);
remove => HookEndpointManager.Remove<Delegates.GetRenderedWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetRenderedWidth", true), value);
}
public static event Delegates.GetRenderedHeight_WithArgs GetRenderedHeight
{
add => HookEndpointManager.Add<Delegates.GetRenderedHeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetRenderedHeight", true), value);
remove => HookEndpointManager.Remove<Delegates.GetRenderedHeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetRenderedHeight", true), value);
}
public static event Delegates.CalculatePreferredValues_WithArgs CalculatePreferredValues
{
add => HookEndpointManager.Add<Delegates.CalculatePreferredValues_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "CalculatePreferredValues", true), value);
remove => HookEndpointManager.Remove<Delegates.CalculatePreferredValues_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "CalculatePreferredValues", true), value);
}
public static event Delegates.GetCompoundBounds_WithArgs GetCompoundBounds
{
add => HookEndpointManager.Add<Delegates.GetCompoundBounds_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetCompoundBounds", true), value);
remove => HookEndpointManager.Remove<Delegates.GetCompoundBounds_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetCompoundBounds", true), value);
}
public static event Delegates.GetTextBounds_WithArgs GetTextBounds
{
add => HookEndpointManager.Add<Delegates.GetTextBounds_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetTextBounds", true), value);
remove => HookEndpointManager.Remove<Delegates.GetTextBounds_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetTextBounds", true), value);
}
public static event Delegates.AdjustLineOffset_WithArgs AdjustLineOffset
{
add => HookEndpointManager.Add<Delegates.AdjustLineOffset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "AdjustLineOffset", true), value);
remove => HookEndpointManager.Remove<Delegates.AdjustLineOffset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "AdjustLineOffset", true), value);
}
public static event Delegates.ResizeLineExtents_WithArgs ResizeLineExtents
{
add => HookEndpointManager.Add<Delegates.ResizeLineExtents_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "ResizeLineExtents", true), value);
remove => HookEndpointManager.Remove<Delegates.ResizeLineExtents_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "ResizeLineExtents", true), value);
}
public static event Delegates.GetTextInfo_WithArgs GetTextInfo
{
add => HookEndpointManager.Add<Delegates.GetTextInfo_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetTextInfo", true), value);
remove => HookEndpointManager.Remove<Delegates.GetTextInfo_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetTextInfo", true), value);
}
public static event Delegates.ComputeMarginSize_WithArgs ComputeMarginSize
{
add => HookEndpointManager.Add<Delegates.ComputeMarginSize_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "ComputeMarginSize", true), value);
remove => HookEndpointManager.Remove<Delegates.ComputeMarginSize_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "ComputeMarginSize", true), value);
}
public static event Delegates.GetArraySizes_WithArgs GetArraySizes
{
add => HookEndpointManager.Add<Delegates.GetArraySizes_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetArraySizes", true), value);
remove => HookEndpointManager.Remove<Delegates.GetArraySizes_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetArraySizes", true), value);
}
public static event Delegates.SaveWordWrappingState_WithArgs SaveWordWrappingState
{
add => HookEndpointManager.Add<Delegates.SaveWordWrappingState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SaveWordWrappingState", true), value);
remove => HookEndpointManager.Remove<Delegates.SaveWordWrappingState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SaveWordWrappingState", true), value);
}
public static event Delegates.RestoreWordWrappingState_WithArgs RestoreWordWrappingState
{
add => HookEndpointManager.Add<Delegates.RestoreWordWrappingState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "RestoreWordWrappingState", true), value);
remove => HookEndpointManager.Remove<Delegates.RestoreWordWrappingState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "RestoreWordWrappingState", true), value);
}
public static event Delegates.SaveGlyphVertexInfo_WithArgs SaveGlyphVertexInfo
{
add => HookEndpointManager.Add<Delegates.SaveGlyphVertexInfo_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SaveGlyphVertexInfo", true), value);
remove => HookEndpointManager.Remove<Delegates.SaveGlyphVertexInfo_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SaveGlyphVertexInfo", true), value);
}
public static event Delegates.SaveSpriteVertexInfo_WithArgs SaveSpriteVertexInfo
{
add => HookEndpointManager.Add<Delegates.SaveSpriteVertexInfo_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SaveSpriteVertexInfo", true), value);
remove => HookEndpointManager.Remove<Delegates.SaveSpriteVertexInfo_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SaveSpriteVertexInfo", true), value);
}
public static event Delegates.FillCharacterVertexBuffers_int_int_WithArgs FillCharacterVertexBuffers_int_int
{
add => HookEndpointManager.Add<Delegates.FillCharacterVertexBuffers_int_int_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "FillCharacterVertexBuffers", true), value);
remove => HookEndpointManager.Remove<Delegates.FillCharacterVertexBuffers_int_int_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "FillCharacterVertexBuffers", true), value);
}
public static event Delegates.FillCharacterVertexBuffers_int_int_bool_WithArgs FillCharacterVertexBuffers_int_int_bool
{
add => HookEndpointManager.Add<Delegates.FillCharacterVertexBuffers_int_int_bool_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "FillCharacterVertexBuffers", true), value);
remove => HookEndpointManager.Remove<Delegates.FillCharacterVertexBuffers_int_int_bool_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "FillCharacterVertexBuffers", true), value);
}
public static event Delegates.FillSpriteVertexBuffers_WithArgs FillSpriteVertexBuffers
{
add => HookEndpointManager.Add<Delegates.FillSpriteVertexBuffers_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "FillSpriteVertexBuffers", true), value);
remove => HookEndpointManager.Remove<Delegates.FillSpriteVertexBuffers_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "FillSpriteVertexBuffers", true), value);
}
public static event Delegates.DrawUnderlineMesh_WithArgs DrawUnderlineMesh
{
add => HookEndpointManager.Add<Delegates.DrawUnderlineMesh_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "DrawUnderlineMesh", true), value);
remove => HookEndpointManager.Remove<Delegates.DrawUnderlineMesh_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "DrawUnderlineMesh", true), value);
}
public static event Delegates.GetSpecialCharacters_WithArgs GetSpecialCharacters
{
add => HookEndpointManager.Add<Delegates.GetSpecialCharacters_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetSpecialCharacters", true), value);
remove => HookEndpointManager.Remove<Delegates.GetSpecialCharacters_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetSpecialCharacters", true), value);
}
public static event Delegates.GetFontAssetForWeight_WithArgs GetFontAssetForWeight
{
add => HookEndpointManager.Add<Delegates.GetFontAssetForWeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetFontAssetForWeight", true), value);
remove => HookEndpointManager.Remove<Delegates.GetFontAssetForWeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetFontAssetForWeight", true), value);
}
public static event Delegates.SetActiveSubMeshes_WithArgs SetActiveSubMeshes
{
add => HookEndpointManager.Add<Delegates.SetActiveSubMeshes_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetActiveSubMeshes", true), value);
remove => HookEndpointManager.Remove<Delegates.SetActiveSubMeshes_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "SetActiveSubMeshes", true), value);
}
public static event Delegates.PackUV_float_float_float_WithArgs PackUV_float_float_float
{
add => HookEndpointManager.Add<Delegates.PackUV_float_float_float_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "PackUV", true), value);
remove => HookEndpointManager.Remove<Delegates.PackUV_float_float_float_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "PackUV", true), value);
}
public static event Delegates.PackUV_float_float_WithArgs PackUV_float_float
{
add => HookEndpointManager.Add<Delegates.PackUV_float_float_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "PackUV", true), value);
remove => HookEndpointManager.Remove<Delegates.PackUV_float_float_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "PackUV", true), value);
}
public static event Delegates.HexToInt_WithArgs HexToInt
{
add => HookEndpointManager.Add<Delegates.HexToInt_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "HexToInt", true), value);
remove => HookEndpointManager.Remove<Delegates.HexToInt_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "HexToInt", true), value);
}
public static event Delegates.GetUTF16_WithArgs GetUTF16
{
add => HookEndpointManager.Add<Delegates.GetUTF16_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetUTF16", true), value);
remove => HookEndpointManager.Remove<Delegates.GetUTF16_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetUTF16", true), value);
}
public static event Delegates.GetUTF32_WithArgs GetUTF32
{
add => HookEndpointManager.Add<Delegates.GetUTF32_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetUTF32", true), value);
remove => HookEndpointManager.Remove<Delegates.GetUTF32_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "GetUTF32", true), value);
}
public static event Delegates.HexCharsToColor_Array_int_WithArgs HexCharsToColor_Array_int
{
add => HookEndpointManager.Add<Delegates.HexCharsToColor_Array_int_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "HexCharsToColor", true), value);
remove => HookEndpointManager.Remove<Delegates.HexCharsToColor_Array_int_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "HexCharsToColor", true), value);
}
public static event Delegates.HexCharsToColor_Array_int_int_WithArgs HexCharsToColor_Array_int_int
{
add => HookEndpointManager.Add<Delegates.HexCharsToColor_Array_int_int_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "HexCharsToColor", true), value);
remove => HookEndpointManager.Remove<Delegates.HexCharsToColor_Array_int_int_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "HexCharsToColor", true), value);
}
public static event Delegates.ConvertToFloat_WithArgs ConvertToFloat
{
add => HookEndpointManager.Add<Delegates.ConvertToFloat_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "ConvertToFloat", true), value);
remove => HookEndpointManager.Remove<Delegates.ConvertToFloat_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "ConvertToFloat", true), value);
}
public static event Delegates.ValidateHtmlTag_WithArgs ValidateHtmlTag
{
add => HookEndpointManager.Add<Delegates.ValidateHtmlTag_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "ValidateHtmlTag", true), value);
remove => HookEndpointManager.Remove<Delegates.ValidateHtmlTag_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Text), "ValidateHtmlTag", true), value);
}
}

}
