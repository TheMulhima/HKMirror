using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.UI.Extensions;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for SoftMaskScript class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSoftMaskScript
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SoftMaskScript), "Start"), Start);
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(Action<SoftMaskScript> orig, SoftMaskScript self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SoftMaskScript), "Update"), Update);
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(Action<SoftMaskScript> orig, SoftMaskScript self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookSetMask()
        {
            if (!HookedList.Contains("SetMask"))
            {
                HookedList.Add("SetMask");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SoftMaskScript), "SetMask"), SetMask);
            }
        }

        internal static event Delegates.SetMask_BeforeArgs _beforeSetMask;
        internal static event Delegates.SetMask_NormalArgs _afterSetMask;

        private static void SetMask(Action<SoftMaskScript> orig, SoftMaskScript self)
        {
            Delegates.Params_SetMask @params = new()
            {
                self = self
            };
            _beforeSetMask?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetMask != null) _afterSetMask.Invoke(@params);
        }

        internal static void HookGetCanvasRect()
        {
            if (!HookedList.Contains("GetCanvasRect"))
            {
                HookedList.Add("GetCanvasRect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SoftMaskScript), "GetCanvasRect"), GetCanvasRect);
            }
        }

        internal static event Delegates.GetCanvasRect_BeforeArgs _beforeGetCanvasRect;
        internal static event Delegates.GetCanvasRect_NormalArgs _afterGetCanvasRect;

        private static Rect GetCanvasRect(Func<SoftMaskScript, Rect> orig, SoftMaskScript self)
        {
            Delegates.Params_GetCanvasRect @params = new()
            {
                self = self
            };
            _beforeGetCanvasRect?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetCanvasRect != null) retVal = _afterGetCanvasRect.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void GetCanvasRect_BeforeArgs(Params_GetCanvasRect args);

        public delegate Rect GetCanvasRect_NormalArgs(Params_GetCanvasRect args);

        public delegate void SetMask_BeforeArgs(Params_SetMask args);

        public delegate void SetMask_NormalArgs(Params_SetMask args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_Start
        {
            public SoftMaskScript self;
        }

        public sealed class Params_Update
        {
            public SoftMaskScript self;
        }

        public sealed class Params_SetMask
        {
            public SoftMaskScript self;
        }

        public sealed class Params_GetCanvasRect
        {
            public SoftMaskScript self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.SetMask_BeforeArgs SetMask
        {
            add
            {
                HookHandler._beforeSetMask += value;
                HookHandler.HookSetMask();
            }
            remove => HookHandler._beforeSetMask -= value;
        }

        public static event Delegates.GetCanvasRect_BeforeArgs GetCanvasRect
        {
            add
            {
                HookHandler._beforeGetCanvasRect += value;
                HookHandler.HookGetCanvasRect();
            }
            remove => HookHandler._beforeGetCanvasRect -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.SetMask_NormalArgs SetMask
        {
            add
            {
                HookHandler._afterSetMask += value;
                HookHandler.HookSetMask();
            }
            remove => HookHandler._afterSetMask -= value;
        }

        public static event Delegates.GetCanvasRect_NormalArgs GetCanvasRect
        {
            add
            {
                HookHandler._afterGetCanvasRect += value;
                HookHandler.HookGetCanvasRect();
            }
            remove => HookHandler._afterGetCanvasRect -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Start_NormalArgs Start
        {
            add => HookEndpointManager.Add<Delegates.Start_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SoftMaskScript), "Start"), value);
            remove => HookEndpointManager.Remove<Delegates.Start_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SoftMaskScript), "Start"), value);
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add => HookEndpointManager.Add<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SoftMaskScript), "Update"), value);
            remove => HookEndpointManager.Remove<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SoftMaskScript), "Update"), value);
        }

        public static event Delegates.SetMask_NormalArgs SetMask
        {
            add => HookEndpointManager.Add<Delegates.SetMask_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SoftMaskScript), "SetMask"), value);
            remove => HookEndpointManager.Remove<Delegates.SetMask_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SoftMaskScript), "SetMask"), value);
        }

        public static event Delegates.GetCanvasRect_NormalArgs GetCanvasRect
        {
            add => HookEndpointManager.Add<Delegates.GetCanvasRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SoftMaskScript), "GetCanvasRect"), value);
            remove => HookEndpointManager.Remove<Delegates.GetCanvasRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SoftMaskScript), "GetCanvasRect"), value);
        }
    }
}