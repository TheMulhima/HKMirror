using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for CinematicVideoReference class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCinematicVideoReference
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_VideoFileName()
        {
            if (!HookedList.Contains("get_VideoFileName"))
            {
                HookedList.Add("get_VideoFileName");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CinematicVideoReference), "get_VideoFileName", true),
                    get_VideoFileName);
            }
        }

        internal static event Delegates.get_VideoFileName_BeforeArgs _beforeget_VideoFileName;
        internal static event Delegates.get_VideoFileName_AfterArgs _afterget_VideoFileName;

        private static string get_VideoFileName(Func<CinematicVideoReference, string> orig,
            CinematicVideoReference self)
        {
            Delegates.Params_get_VideoFileName @params = new()
            {
                self = self
            };
            if (_beforeget_VideoFileName != null)
            {
                foreach (Delegates.get_VideoFileName_BeforeArgs toInvoke in
                         _beforeget_VideoFileName.GetInvocationList())
                {
                    try
                    {
                        _beforeget_VideoFileName?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_VideoFileName != null)
            {
                foreach (Delegates.get_VideoFileName_AfterArgs toInvoke in _afterget_VideoFileName.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_VideoFileName.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_VideoAssetPath()
        {
            if (!HookedList.Contains("get_VideoAssetPath"))
            {
                HookedList.Add("get_VideoAssetPath");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CinematicVideoReference), "get_VideoAssetPath", true),
                    get_VideoAssetPath);
            }
        }

        internal static event Delegates.get_VideoAssetPath_BeforeArgs _beforeget_VideoAssetPath;
        internal static event Delegates.get_VideoAssetPath_AfterArgs _afterget_VideoAssetPath;

        private static string get_VideoAssetPath(Func<CinematicVideoReference, string> orig,
            CinematicVideoReference self)
        {
            Delegates.Params_get_VideoAssetPath @params = new()
            {
                self = self
            };
            if (_beforeget_VideoAssetPath != null)
            {
                foreach (Delegates.get_VideoAssetPath_BeforeArgs toInvoke in
                         _beforeget_VideoAssetPath.GetInvocationList())
                {
                    try
                    {
                        _beforeget_VideoAssetPath?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_VideoAssetPath != null)
            {
                foreach (Delegates.get_VideoAssetPath_AfterArgs toInvoke in
                         _afterget_VideoAssetPath.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_VideoAssetPath.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_AudioAssetPath()
        {
            if (!HookedList.Contains("get_AudioAssetPath"))
            {
                HookedList.Add("get_AudioAssetPath");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CinematicVideoReference), "get_AudioAssetPath", true),
                    get_AudioAssetPath);
            }
        }

        internal static event Delegates.get_AudioAssetPath_BeforeArgs _beforeget_AudioAssetPath;
        internal static event Delegates.get_AudioAssetPath_AfterArgs _afterget_AudioAssetPath;

        private static string get_AudioAssetPath(Func<CinematicVideoReference, string> orig,
            CinematicVideoReference self)
        {
            Delegates.Params_get_AudioAssetPath @params = new()
            {
                self = self
            };
            if (_beforeget_AudioAssetPath != null)
            {
                foreach (Delegates.get_AudioAssetPath_BeforeArgs toInvoke in
                         _beforeget_AudioAssetPath.GetInvocationList())
                {
                    try
                    {
                        _beforeget_AudioAssetPath?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AudioAssetPath != null)
            {
                foreach (Delegates.get_AudioAssetPath_AfterArgs toInvoke in
                         _afterget_AudioAssetPath.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_AudioAssetPath.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_EmbeddedVideoClip()
        {
            if (!HookedList.Contains("get_EmbeddedVideoClip"))
            {
                HookedList.Add("get_EmbeddedVideoClip");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CinematicVideoReference), "get_EmbeddedVideoClip", true),
                    get_EmbeddedVideoClip);
            }
        }

        internal static event Delegates.get_EmbeddedVideoClip_BeforeArgs _beforeget_EmbeddedVideoClip;
        internal static event Delegates.get_EmbeddedVideoClip_AfterArgs _afterget_EmbeddedVideoClip;

        private static UnityEngine.Video.VideoClip get_EmbeddedVideoClip(
            Func<CinematicVideoReference, UnityEngine.Video.VideoClip> orig, CinematicVideoReference self)
        {
            Delegates.Params_get_EmbeddedVideoClip @params = new()
            {
                self = self
            };
            if (_beforeget_EmbeddedVideoClip != null)
            {
                foreach (Delegates.get_EmbeddedVideoClip_BeforeArgs toInvoke in _beforeget_EmbeddedVideoClip
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_EmbeddedVideoClip?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_EmbeddedVideoClip != null)
            {
                foreach (Delegates.get_EmbeddedVideoClip_AfterArgs toInvoke in _afterget_EmbeddedVideoClip
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_EmbeddedVideoClip.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_VideoFileName
        {
            public CinematicVideoReference self;
        }

        public delegate void get_VideoFileName_BeforeArgs(Params_get_VideoFileName args);

        public delegate string get_VideoFileName_AfterArgs(Params_get_VideoFileName args, string ret);

        public delegate string get_VideoFileName_WithArgs(Func<CinematicVideoReference, string> orig,
            CinematicVideoReference self);

        public sealed class Params_get_VideoAssetPath
        {
            public CinematicVideoReference self;
        }

        public delegate void get_VideoAssetPath_BeforeArgs(Params_get_VideoAssetPath args);

        public delegate string get_VideoAssetPath_AfterArgs(Params_get_VideoAssetPath args, string ret);

        public delegate string get_VideoAssetPath_WithArgs(Func<CinematicVideoReference, string> orig,
            CinematicVideoReference self);

        public sealed class Params_get_AudioAssetPath
        {
            public CinematicVideoReference self;
        }

        public delegate void get_AudioAssetPath_BeforeArgs(Params_get_AudioAssetPath args);

        public delegate string get_AudioAssetPath_AfterArgs(Params_get_AudioAssetPath args, string ret);

        public delegate string get_AudioAssetPath_WithArgs(Func<CinematicVideoReference, string> orig,
            CinematicVideoReference self);

        public sealed class Params_get_EmbeddedVideoClip
        {
            public CinematicVideoReference self;
        }

        public delegate void get_EmbeddedVideoClip_BeforeArgs(Params_get_EmbeddedVideoClip args);

        public delegate UnityEngine.Video.VideoClip get_EmbeddedVideoClip_AfterArgs(Params_get_EmbeddedVideoClip args,
            UnityEngine.Video.VideoClip ret);

        public delegate UnityEngine.Video.VideoClip get_EmbeddedVideoClip_WithArgs(
            Func<CinematicVideoReference, UnityEngine.Video.VideoClip> orig, CinematicVideoReference self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_VideoFileName_BeforeArgs get_VideoFileName
        {
            add
            {
                HookHandler._beforeget_VideoFileName += value;
                HookHandler.Hookget_VideoFileName();
            }
            remove => HookHandler._beforeget_VideoFileName -= value;
        }

        public static event Delegates.get_VideoAssetPath_BeforeArgs get_VideoAssetPath
        {
            add
            {
                HookHandler._beforeget_VideoAssetPath += value;
                HookHandler.Hookget_VideoAssetPath();
            }
            remove => HookHandler._beforeget_VideoAssetPath -= value;
        }

        public static event Delegates.get_AudioAssetPath_BeforeArgs get_AudioAssetPath
        {
            add
            {
                HookHandler._beforeget_AudioAssetPath += value;
                HookHandler.Hookget_AudioAssetPath();
            }
            remove => HookHandler._beforeget_AudioAssetPath -= value;
        }

        public static event Delegates.get_EmbeddedVideoClip_BeforeArgs get_EmbeddedVideoClip
        {
            add
            {
                HookHandler._beforeget_EmbeddedVideoClip += value;
                HookHandler.Hookget_EmbeddedVideoClip();
            }
            remove => HookHandler._beforeget_EmbeddedVideoClip -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_VideoFileName_AfterArgs get_VideoFileName
        {
            add
            {
                HookHandler._afterget_VideoFileName += value;
                HookHandler.Hookget_VideoFileName();
            }
            remove => HookHandler._afterget_VideoFileName -= value;
        }

        public static event Delegates.get_VideoAssetPath_AfterArgs get_VideoAssetPath
        {
            add
            {
                HookHandler._afterget_VideoAssetPath += value;
                HookHandler.Hookget_VideoAssetPath();
            }
            remove => HookHandler._afterget_VideoAssetPath -= value;
        }

        public static event Delegates.get_AudioAssetPath_AfterArgs get_AudioAssetPath
        {
            add
            {
                HookHandler._afterget_AudioAssetPath += value;
                HookHandler.Hookget_AudioAssetPath();
            }
            remove => HookHandler._afterget_AudioAssetPath -= value;
        }

        public static event Delegates.get_EmbeddedVideoClip_AfterArgs get_EmbeddedVideoClip
        {
            add
            {
                HookHandler._afterget_EmbeddedVideoClip += value;
                HookHandler.Hookget_EmbeddedVideoClip();
            }
            remove => HookHandler._afterget_EmbeddedVideoClip -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_VideoFileName_WithArgs get_VideoFileName
        {
            add => HookEndpointManager.Add<Delegates.get_VideoFileName_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicVideoReference), "get_VideoFileName", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_VideoFileName_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicVideoReference), "get_VideoFileName", true), value);
        }

        public static event Delegates.get_VideoAssetPath_WithArgs get_VideoAssetPath
        {
            add => HookEndpointManager.Add<Delegates.get_VideoAssetPath_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicVideoReference), "get_VideoAssetPath", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_VideoAssetPath_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicVideoReference), "get_VideoAssetPath", true), value);
        }

        public static event Delegates.get_AudioAssetPath_WithArgs get_AudioAssetPath
        {
            add => HookEndpointManager.Add<Delegates.get_AudioAssetPath_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicVideoReference), "get_AudioAssetPath", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_AudioAssetPath_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicVideoReference), "get_AudioAssetPath", true), value);
        }

        public static event Delegates.get_EmbeddedVideoClip_WithArgs get_EmbeddedVideoClip
        {
            add => HookEndpointManager.Add<Delegates.get_EmbeddedVideoClip_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicVideoReference), "get_EmbeddedVideoClip", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_EmbeddedVideoClip_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicVideoReference), "get_EmbeddedVideoClip", true), value);
        }
    }
}