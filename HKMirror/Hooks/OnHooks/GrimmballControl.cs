using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GrimmballControl class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGrimmballControl
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Force()
        {
            if (!HookedList.Contains("get_Force"))
            {
                HookedList.Add("get_Force");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GrimmballControl), "get_Force"), get_Force);
            }
        }

        internal static event Delegates.get_Force_BeforeArgs _beforeget_Force;
        internal static event Delegates.get_Force_AfterArgs _afterget_Force;

        private static float get_Force(Func<GrimmballControl, float> orig, GrimmballControl self)
        {
            Delegates.Params_get_Force @params = new()
            {
                self = self
            };
            if (_beforeget_Force != null)
                foreach (Delegates.get_Force_BeforeArgs toInvoke in _beforeget_Force.GetInvocationList())
                    try
                    {
                        _beforeget_Force?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Force != null)
                foreach (Delegates.get_Force_AfterArgs toInvoke in _afterget_Force.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Force.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Force()
        {
            if (!HookedList.Contains("set_Force"))
            {
                HookedList.Add("set_Force");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GrimmballControl), "set_Force"), set_Force);
            }
        }

        internal static event Delegates.set_Force_BeforeArgs _beforeset_Force;
        internal static event Delegates.set_Force_AfterArgs _afterset_Force;

        private static void set_Force(Action<GrimmballControl, float> orig, GrimmballControl self, float value)
        {
            Delegates.Params_set_Force @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Force != null)
                foreach (Delegates.set_Force_BeforeArgs toInvoke in _beforeset_Force.GetInvocationList())
                    try
                    {
                        _beforeset_Force?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Force != null)
                foreach (Delegates.set_Force_AfterArgs toInvoke in _afterset_Force.GetInvocationList())
                    try
                    {
                        _afterset_Force.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_TweenY()
        {
            if (!HookedList.Contains("get_TweenY"))
            {
                HookedList.Add("get_TweenY");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GrimmballControl), "get_TweenY"), get_TweenY);
            }
        }

        internal static event Delegates.get_TweenY_BeforeArgs _beforeget_TweenY;
        internal static event Delegates.get_TweenY_AfterArgs _afterget_TweenY;

        private static float get_TweenY(Func<GrimmballControl, float> orig, GrimmballControl self)
        {
            Delegates.Params_get_TweenY @params = new()
            {
                self = self
            };
            if (_beforeget_TweenY != null)
                foreach (Delegates.get_TweenY_BeforeArgs toInvoke in _beforeget_TweenY.GetInvocationList())
                    try
                    {
                        _beforeget_TweenY?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_TweenY != null)
                foreach (Delegates.get_TweenY_AfterArgs toInvoke in _afterget_TweenY.GetInvocationList())
                    try
                    {
                        retVal = _afterget_TweenY.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_TweenY()
        {
            if (!HookedList.Contains("set_TweenY"))
            {
                HookedList.Add("set_TweenY");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GrimmballControl), "set_TweenY"), set_TweenY);
            }
        }

        internal static event Delegates.set_TweenY_BeforeArgs _beforeset_TweenY;
        internal static event Delegates.set_TweenY_AfterArgs _afterset_TweenY;

        private static void set_TweenY(Action<GrimmballControl, float> orig, GrimmballControl self, float value)
        {
            Delegates.Params_set_TweenY @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_TweenY != null)
                foreach (Delegates.set_TweenY_BeforeArgs toInvoke in _beforeset_TweenY.GetInvocationList())
                    try
                    {
                        _beforeset_TweenY?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_TweenY != null)
                foreach (Delegates.set_TweenY_AfterArgs toInvoke in _afterset_TweenY.GetInvocationList())
                    try
                    {
                        _afterset_TweenY.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.GrimmballControl.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.GrimmballControl.orig_Awake orig, GrimmballControl self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.GrimmballControl.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.GrimmballControl.orig_OnEnable orig, GrimmballControl self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.GrimmballControl.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(On.GrimmballControl.orig_OnDisable orig, GrimmballControl self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.GrimmballControl.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_AfterArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.GrimmballControl.orig_OnTriggerEnter2D orig, GrimmballControl self,
            Collider2D collision)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, collision = collision
            };
            if (_beforeOnTriggerEnter2D != null)
                foreach (Delegates.OnTriggerEnter2D_BeforeArgs toInvoke in _beforeOnTriggerEnter2D.GetInvocationList())
                    try
                    {
                        _beforeOnTriggerEnter2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnTriggerEnter2D != null)
                foreach (Delegates.OnTriggerEnter2D_AfterArgs toInvoke in _afterOnTriggerEnter2D.GetInvocationList())
                    try
                    {
                        _afterOnTriggerEnter2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDoHit()
        {
            if (!HookedList.Contains("DoHit"))
            {
                HookedList.Add("DoHit");
                On.GrimmballControl.DoHit += DoHit;
            }
        }

        internal static event Delegates.DoHit_BeforeArgs _beforeDoHit;
        internal static event Delegates.DoHit_AfterArgs _afterDoHit;

        private static void DoHit(On.GrimmballControl.orig_DoHit orig, GrimmballControl self)
        {
            Delegates.Params_DoHit @params = new()
            {
                self = self
            };
            if (_beforeDoHit != null)
                foreach (Delegates.DoHit_BeforeArgs toInvoke in _beforeDoHit.GetInvocationList())
                    try
                    {
                        _beforeDoHit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterDoHit != null)
                foreach (Delegates.DoHit_AfterArgs toInvoke in _afterDoHit.GetInvocationList())
                    try
                    {
                        _afterDoHit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFire()
        {
            if (!HookedList.Contains("Fire"))
            {
                HookedList.Add("Fire");
                On.GrimmballControl.Fire += Fire;
            }
        }

        internal static event Delegates.Fire_BeforeArgs _beforeFire;
        internal static event Delegates.Fire_AfterArgs _afterFire;

        private static void Fire(On.GrimmballControl.orig_Fire orig, GrimmballControl self)
        {
            Delegates.Params_Fire @params = new()
            {
                self = self
            };
            if (_beforeFire != null)
                foreach (Delegates.Fire_BeforeArgs toInvoke in _beforeFire.GetInvocationList())
                    try
                    {
                        _beforeFire?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterFire != null)
                foreach (Delegates.Fire_AfterArgs toInvoke in _afterFire.GetInvocationList())
                    try
                    {
                        _afterFire.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDoFire()
        {
            if (!HookedList.Contains("DoFire"))
            {
                HookedList.Add("DoFire");
                On.GrimmballControl.DoFire += DoFire;
            }
        }

        internal static event Delegates.DoFire_BeforeArgs _beforeDoFire;

        private static IEnumerator DoFire(On.GrimmballControl.orig_DoFire orig, GrimmballControl self)
        {
            Delegates.Params_DoFire @params = new()
            {
                self = self
            };
            if (_beforeDoFire != null)
                foreach (Delegates.DoFire_BeforeArgs toInvoke in _beforeDoFire.GetInvocationList())
                    try
                    {
                        _beforeDoFire?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookShrink()
        {
            if (!HookedList.Contains("Shrink"))
            {
                HookedList.Add("Shrink");
                On.GrimmballControl.Shrink += Shrink;
            }
        }

        internal static event Delegates.Shrink_BeforeArgs _beforeShrink;

        private static IEnumerator Shrink(On.GrimmballControl.orig_Shrink orig, GrimmballControl self)
        {
            Delegates.Params_Shrink @params = new()
            {
                self = self
            };
            if (_beforeShrink != null)
                foreach (Delegates.Shrink_BeforeArgs toInvoke in _beforeShrink.GetInvocationList())
                    try
                    {
                        _beforeShrink?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<GrimmballControl> orig, GrimmballControl self);

        public delegate IEnumerator DoFire_AfterArgs(Params_DoFire args, IEnumerator ret);

        public delegate void DoFire_BeforeArgs(Params_DoFire args);

        public delegate IEnumerator DoFire_WithArgs(Func<GrimmballControl, IEnumerator> orig, GrimmballControl self);

        public delegate void DoHit_AfterArgs(Params_DoHit args);

        public delegate void DoHit_BeforeArgs(Params_DoHit args);

        public delegate void DoHit_WithArgs(Action<GrimmballControl> orig, GrimmballControl self);

        public delegate void Fire_AfterArgs(Params_Fire args);

        public delegate void Fire_BeforeArgs(Params_Fire args);

        public delegate void Fire_WithArgs(Action<GrimmballControl> orig, GrimmballControl self);

        public delegate float get_Force_AfterArgs(Params_get_Force args, float ret);

        public delegate void get_Force_BeforeArgs(Params_get_Force args);

        public delegate float get_Force_WithArgs(Func<GrimmballControl, float> orig, GrimmballControl self);

        public delegate float get_TweenY_AfterArgs(Params_get_TweenY args, float ret);

        public delegate void get_TweenY_BeforeArgs(Params_get_TweenY args);

        public delegate float get_TweenY_WithArgs(Func<GrimmballControl, float> orig, GrimmballControl self);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<GrimmballControl> orig, GrimmballControl self);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<GrimmballControl> orig, GrimmballControl self);

        public delegate void OnTriggerEnter2D_AfterArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_WithArgs(Action<GrimmballControl, Collider2D> orig, GrimmballControl self,
            Collider2D collision);

        public delegate void set_Force_AfterArgs(Params_set_Force args);

        public delegate void set_Force_BeforeArgs(Params_set_Force args);

        public delegate void set_Force_WithArgs(Action<GrimmballControl, float> orig, GrimmballControl self,
            float value);

        public delegate void set_TweenY_AfterArgs(Params_set_TweenY args);

        public delegate void set_TweenY_BeforeArgs(Params_set_TweenY args);

        public delegate void set_TweenY_WithArgs(Action<GrimmballControl, float> orig, GrimmballControl self,
            float value);

        public delegate IEnumerator Shrink_AfterArgs(Params_Shrink args, IEnumerator ret);

        public delegate void Shrink_BeforeArgs(Params_Shrink args);

        public delegate IEnumerator Shrink_WithArgs(Func<GrimmballControl, IEnumerator> orig, GrimmballControl self);

        public sealed class Params_get_Force
        {
            public GrimmballControl self;
        }

        public sealed class Params_set_Force
        {
            public GrimmballControl self;
            public float value;
        }

        public sealed class Params_get_TweenY
        {
            public GrimmballControl self;
        }

        public sealed class Params_set_TweenY
        {
            public GrimmballControl self;
            public float value;
        }

        public sealed class Params_Awake
        {
            public GrimmballControl self;
        }

        public sealed class Params_OnEnable
        {
            public GrimmballControl self;
        }

        public sealed class Params_OnDisable
        {
            public GrimmballControl self;
        }

        public sealed class Params_OnTriggerEnter2D
        {
            public Collider2D collision;
            public GrimmballControl self;
        }

        public sealed class Params_DoHit
        {
            public GrimmballControl self;
        }

        public sealed class Params_Fire
        {
            public GrimmballControl self;
        }

        public sealed class Params_DoFire
        {
            public GrimmballControl self;
        }

        public sealed class Params_Shrink
        {
            public GrimmballControl self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Force_BeforeArgs get_Force
        {
            add
            {
                HookHandler._beforeget_Force += value;
                HookHandler.Hookget_Force();
            }
            remove => HookHandler._beforeget_Force -= value;
        }

        public static event Delegates.set_Force_BeforeArgs set_Force
        {
            add
            {
                HookHandler._beforeset_Force += value;
                HookHandler.Hookset_Force();
            }
            remove => HookHandler._beforeset_Force -= value;
        }

        public static event Delegates.get_TweenY_BeforeArgs get_TweenY
        {
            add
            {
                HookHandler._beforeget_TweenY += value;
                HookHandler.Hookget_TweenY();
            }
            remove => HookHandler._beforeget_TweenY -= value;
        }

        public static event Delegates.set_TweenY_BeforeArgs set_TweenY
        {
            add
            {
                HookHandler._beforeset_TweenY += value;
                HookHandler.Hookset_TweenY();
            }
            remove => HookHandler._beforeset_TweenY -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.DoHit_BeforeArgs DoHit
        {
            add
            {
                HookHandler._beforeDoHit += value;
                HookHandler.HookDoHit();
            }
            remove => HookHandler._beforeDoHit -= value;
        }

        public static event Delegates.Fire_BeforeArgs Fire
        {
            add
            {
                HookHandler._beforeFire += value;
                HookHandler.HookFire();
            }
            remove => HookHandler._beforeFire -= value;
        }

        public static event Delegates.DoFire_BeforeArgs DoFire
        {
            add
            {
                HookHandler._beforeDoFire += value;
                HookHandler.HookDoFire();
            }
            remove => HookHandler._beforeDoFire -= value;
        }

        public static event Delegates.Shrink_BeforeArgs Shrink
        {
            add
            {
                HookHandler._beforeShrink += value;
                HookHandler.HookShrink();
            }
            remove => HookHandler._beforeShrink -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Force_AfterArgs get_Force
        {
            add
            {
                HookHandler._afterget_Force += value;
                HookHandler.Hookget_Force();
            }
            remove => HookHandler._afterget_Force -= value;
        }

        public static event Delegates.set_Force_AfterArgs set_Force
        {
            add
            {
                HookHandler._afterset_Force += value;
                HookHandler.Hookset_Force();
            }
            remove => HookHandler._afterset_Force -= value;
        }

        public static event Delegates.get_TweenY_AfterArgs get_TweenY
        {
            add
            {
                HookHandler._afterget_TweenY += value;
                HookHandler.Hookget_TweenY();
            }
            remove => HookHandler._afterget_TweenY -= value;
        }

        public static event Delegates.set_TweenY_AfterArgs set_TweenY
        {
            add
            {
                HookHandler._afterset_TweenY += value;
                HookHandler.Hookset_TweenY();
            }
            remove => HookHandler._afterset_TweenY -= value;
        }

        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.OnTriggerEnter2D_AfterArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }

        public static event Delegates.DoHit_AfterArgs DoHit
        {
            add
            {
                HookHandler._afterDoHit += value;
                HookHandler.HookDoHit();
            }
            remove => HookHandler._afterDoHit -= value;
        }

        public static event Delegates.Fire_AfterArgs Fire
        {
            add
            {
                HookHandler._afterFire += value;
                HookHandler.HookFire();
            }
            remove => HookHandler._afterFire -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Force_WithArgs get_Force
        {
            add => HookEndpointManager.Add<Delegates.get_Force_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GrimmballControl), "get_Force"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Force_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GrimmballControl), "get_Force"), value);
        }

        public static event Delegates.set_Force_WithArgs set_Force
        {
            add => HookEndpointManager.Add<Delegates.set_Force_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GrimmballControl), "set_Force"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Force_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GrimmballControl), "set_Force"), value);
        }

        public static event Delegates.get_TweenY_WithArgs get_TweenY
        {
            add => HookEndpointManager.Add<Delegates.get_TweenY_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GrimmballControl), "get_TweenY"), value);
            remove => HookEndpointManager.Remove<Delegates.get_TweenY_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GrimmballControl), "get_TweenY"), value);
        }

        public static event Delegates.set_TweenY_WithArgs set_TweenY
        {
            add => HookEndpointManager.Add<Delegates.set_TweenY_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GrimmballControl), "set_TweenY"), value);
            remove => HookEndpointManager.Remove<Delegates.set_TweenY_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GrimmballControl), "set_TweenY"), value);
        }

        public static event On.GrimmballControl.hook_Awake Awake
        {
            add => On.GrimmballControl.Awake += value;
            remove => On.GrimmballControl.Awake -= value;
        }

        public static event On.GrimmballControl.hook_OnEnable OnEnable
        {
            add => On.GrimmballControl.OnEnable += value;
            remove => On.GrimmballControl.OnEnable -= value;
        }

        public static event On.GrimmballControl.hook_OnDisable OnDisable
        {
            add => On.GrimmballControl.OnDisable += value;
            remove => On.GrimmballControl.OnDisable -= value;
        }

        public static event On.GrimmballControl.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.GrimmballControl.OnTriggerEnter2D += value;
            remove => On.GrimmballControl.OnTriggerEnter2D -= value;
        }

        public static event On.GrimmballControl.hook_DoHit DoHit
        {
            add => On.GrimmballControl.DoHit += value;
            remove => On.GrimmballControl.DoHit -= value;
        }

        public static event On.GrimmballControl.hook_Fire Fire
        {
            add => On.GrimmballControl.Fire += value;
            remove => On.GrimmballControl.Fire -= value;
        }

        public static event On.GrimmballControl.hook_DoFire DoFire
        {
            add => On.GrimmballControl.DoFire += value;
            remove => On.GrimmballControl.DoFire -= value;
        }

        public static event On.GrimmballControl.hook_Shrink Shrink
        {
            add => On.GrimmballControl.Shrink += value;
            remove => On.GrimmballControl.Shrink -= value;
        }
    }
}