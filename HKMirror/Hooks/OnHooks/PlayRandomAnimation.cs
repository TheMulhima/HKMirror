using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for PlayRandomAnimation class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPlayRandomAnimation
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookReset()
{
if (!HookedList.Contains("Reset"))
{
HookedList.Add("Reset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.PlayRandomAnimation), "Reset", true), Reset);

}
}
internal static event Delegates.Reset_BeforeArgs _beforeReset;
internal static event Delegates.Reset_AfterArgs _afterReset;
private static void Reset(Action<HutongGames.PlayMaker.Actions.PlayRandomAnimation> orig, HutongGames.PlayMaker.Actions.PlayRandomAnimation self)
{
Delegates.Params_Reset @params = new() 
{
self = self
};
if (_beforeReset != null)
{
foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
{
try
{
_beforeReset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterReset != null)
{
foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
{
try
{
_afterReset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnEnter()
{
if (!HookedList.Contains("OnEnter"))
{
HookedList.Add("OnEnter");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.PlayRandomAnimation), "OnEnter", true), OnEnter);

}
}
internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
internal static event Delegates.OnEnter_AfterArgs _afterOnEnter;
private static void OnEnter(Action<HutongGames.PlayMaker.Actions.PlayRandomAnimation> orig, HutongGames.PlayMaker.Actions.PlayRandomAnimation self)
{
Delegates.Params_OnEnter @params = new() 
{
self = self
};
if (_beforeOnEnter != null)
{
foreach (Delegates.OnEnter_BeforeArgs toInvoke in _beforeOnEnter.GetInvocationList())
{
try
{
_beforeOnEnter?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnter != null)
{
foreach (Delegates.OnEnter_AfterArgs toInvoke in _afterOnEnter.GetInvocationList())
{
try
{
_afterOnEnter.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDoPlayRandomAnimation()
{
if (!HookedList.Contains("DoPlayRandomAnimation"))
{
HookedList.Add("DoPlayRandomAnimation");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.PlayRandomAnimation), "DoPlayRandomAnimation", true), DoPlayRandomAnimation);

}
}
internal static event Delegates.DoPlayRandomAnimation_BeforeArgs _beforeDoPlayRandomAnimation;
internal static event Delegates.DoPlayRandomAnimation_AfterArgs _afterDoPlayRandomAnimation;
private static void DoPlayRandomAnimation(Action<HutongGames.PlayMaker.Actions.PlayRandomAnimation> orig, HutongGames.PlayMaker.Actions.PlayRandomAnimation self)
{
Delegates.Params_DoPlayRandomAnimation @params = new() 
{
self = self
};
if (_beforeDoPlayRandomAnimation != null)
{
foreach (Delegates.DoPlayRandomAnimation_BeforeArgs toInvoke in _beforeDoPlayRandomAnimation.GetInvocationList())
{
try
{
_beforeDoPlayRandomAnimation?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterDoPlayRandomAnimation != null)
{
foreach (Delegates.DoPlayRandomAnimation_AfterArgs toInvoke in _afterDoPlayRandomAnimation.GetInvocationList())
{
try
{
_afterDoPlayRandomAnimation.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDoPlayAnimation()
{
if (!HookedList.Contains("DoPlayAnimation"))
{
HookedList.Add("DoPlayAnimation");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.PlayRandomAnimation), "DoPlayAnimation", true), DoPlayAnimation);

}
}
internal static event Delegates.DoPlayAnimation_BeforeArgs _beforeDoPlayAnimation;
internal static event Delegates.DoPlayAnimation_AfterArgs _afterDoPlayAnimation;
private static void DoPlayAnimation(Action<HutongGames.PlayMaker.Actions.PlayRandomAnimation,  string> orig, HutongGames.PlayMaker.Actions.PlayRandomAnimation self,  string animName)
{
Delegates.Params_DoPlayAnimation @params = new() 
{
self = self
, animName = animName
};
if (_beforeDoPlayAnimation != null)
{
foreach (Delegates.DoPlayAnimation_BeforeArgs toInvoke in _beforeDoPlayAnimation.GetInvocationList())
{
try
{
_beforeDoPlayAnimation?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
animName = @params.animName;
orig(self, animName);
if (_afterDoPlayAnimation != null)
{
foreach (Delegates.DoPlayAnimation_AfterArgs toInvoke in _afterDoPlayAnimation.GetInvocationList())
{
try
{
_afterDoPlayAnimation.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnUpdate()
{
if (!HookedList.Contains("OnUpdate"))
{
HookedList.Add("OnUpdate");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.PlayRandomAnimation), "OnUpdate", true), OnUpdate);

}
}
internal static event Delegates.OnUpdate_BeforeArgs _beforeOnUpdate;
internal static event Delegates.OnUpdate_AfterArgs _afterOnUpdate;
private static void OnUpdate(Action<HutongGames.PlayMaker.Actions.PlayRandomAnimation> orig, HutongGames.PlayMaker.Actions.PlayRandomAnimation self)
{
Delegates.Params_OnUpdate @params = new() 
{
self = self
};
if (_beforeOnUpdate != null)
{
foreach (Delegates.OnUpdate_BeforeArgs toInvoke in _beforeOnUpdate.GetInvocationList())
{
try
{
_beforeOnUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnUpdate != null)
{
foreach (Delegates.OnUpdate_AfterArgs toInvoke in _afterOnUpdate.GetInvocationList())
{
try
{
_afterOnUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnExit()
{
if (!HookedList.Contains("OnExit"))
{
HookedList.Add("OnExit");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.PlayRandomAnimation), "OnExit", true), OnExit);

}
}
internal static event Delegates.OnExit_BeforeArgs _beforeOnExit;
internal static event Delegates.OnExit_AfterArgs _afterOnExit;
private static void OnExit(Action<HutongGames.PlayMaker.Actions.PlayRandomAnimation> orig, HutongGames.PlayMaker.Actions.PlayRandomAnimation self)
{
Delegates.Params_OnExit @params = new() 
{
self = self
};
if (_beforeOnExit != null)
{
foreach (Delegates.OnExit_BeforeArgs toInvoke in _beforeOnExit.GetInvocationList())
{
try
{
_beforeOnExit?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnExit != null)
{
foreach (Delegates.OnExit_AfterArgs toInvoke in _afterOnExit.GetInvocationList())
{
try
{
_afterOnExit.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStopAnimation()
{
if (!HookedList.Contains("StopAnimation"))
{
HookedList.Add("StopAnimation");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.PlayRandomAnimation), "StopAnimation", true), StopAnimation);

}
}
internal static event Delegates.StopAnimation_BeforeArgs _beforeStopAnimation;
internal static event Delegates.StopAnimation_AfterArgs _afterStopAnimation;
private static void StopAnimation(Action<HutongGames.PlayMaker.Actions.PlayRandomAnimation> orig, HutongGames.PlayMaker.Actions.PlayRandomAnimation self)
{
Delegates.Params_StopAnimation @params = new() 
{
self = self
};
if (_beforeStopAnimation != null)
{
foreach (Delegates.StopAnimation_BeforeArgs toInvoke in _beforeStopAnimation.GetInvocationList())
{
try
{
_beforeStopAnimation?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStopAnimation != null)
{
foreach (Delegates.StopAnimation_AfterArgs toInvoke in _afterStopAnimation.GetInvocationList())
{
try
{
_afterStopAnimation.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Reset
{
public HutongGames.PlayMaker.Actions.PlayRandomAnimation self;
}
public delegate void Reset_BeforeArgs(Params_Reset args);
public delegate void Reset_AfterArgs(Params_Reset args);
public delegate void Reset_WithArgs (Action<HutongGames.PlayMaker.Actions.PlayRandomAnimation> orig, HutongGames.PlayMaker.Actions.PlayRandomAnimation self);
public sealed class Params_OnEnter
{
public HutongGames.PlayMaker.Actions.PlayRandomAnimation self;
}
public delegate void OnEnter_BeforeArgs(Params_OnEnter args);
public delegate void OnEnter_AfterArgs(Params_OnEnter args);
public delegate void OnEnter_WithArgs (Action<HutongGames.PlayMaker.Actions.PlayRandomAnimation> orig, HutongGames.PlayMaker.Actions.PlayRandomAnimation self);
public sealed class Params_DoPlayRandomAnimation
{
public HutongGames.PlayMaker.Actions.PlayRandomAnimation self;
}
public delegate void DoPlayRandomAnimation_BeforeArgs(Params_DoPlayRandomAnimation args);
public delegate void DoPlayRandomAnimation_AfterArgs(Params_DoPlayRandomAnimation args);
public delegate void DoPlayRandomAnimation_WithArgs (Action<HutongGames.PlayMaker.Actions.PlayRandomAnimation> orig, HutongGames.PlayMaker.Actions.PlayRandomAnimation self);
public sealed class Params_DoPlayAnimation
{
public HutongGames.PlayMaker.Actions.PlayRandomAnimation self;
public string animName;
}
public delegate void DoPlayAnimation_BeforeArgs(Params_DoPlayAnimation args);
public delegate void DoPlayAnimation_AfterArgs(Params_DoPlayAnimation args);
public delegate void DoPlayAnimation_WithArgs (Action<HutongGames.PlayMaker.Actions.PlayRandomAnimation,  string> orig, HutongGames.PlayMaker.Actions.PlayRandomAnimation self,  string animName);
public sealed class Params_OnUpdate
{
public HutongGames.PlayMaker.Actions.PlayRandomAnimation self;
}
public delegate void OnUpdate_BeforeArgs(Params_OnUpdate args);
public delegate void OnUpdate_AfterArgs(Params_OnUpdate args);
public delegate void OnUpdate_WithArgs (Action<HutongGames.PlayMaker.Actions.PlayRandomAnimation> orig, HutongGames.PlayMaker.Actions.PlayRandomAnimation self);
public sealed class Params_OnExit
{
public HutongGames.PlayMaker.Actions.PlayRandomAnimation self;
}
public delegate void OnExit_BeforeArgs(Params_OnExit args);
public delegate void OnExit_AfterArgs(Params_OnExit args);
public delegate void OnExit_WithArgs (Action<HutongGames.PlayMaker.Actions.PlayRandomAnimation> orig, HutongGames.PlayMaker.Actions.PlayRandomAnimation self);
public sealed class Params_StopAnimation
{
public HutongGames.PlayMaker.Actions.PlayRandomAnimation self;
}
public delegate void StopAnimation_BeforeArgs(Params_StopAnimation args);
public delegate void StopAnimation_AfterArgs(Params_StopAnimation args);
public delegate void StopAnimation_WithArgs (Action<HutongGames.PlayMaker.Actions.PlayRandomAnimation> orig, HutongGames.PlayMaker.Actions.PlayRandomAnimation self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Reset_BeforeArgs Reset
{
add
{

HookHandler._beforeReset += value;
HookHandler.HookReset();
}
remove => HookHandler._beforeReset -= value;
}
public static event Delegates.OnEnter_BeforeArgs OnEnter
{
add
{

HookHandler._beforeOnEnter += value;
HookHandler.HookOnEnter();
}
remove => HookHandler._beforeOnEnter -= value;
}
public static event Delegates.DoPlayRandomAnimation_BeforeArgs DoPlayRandomAnimation
{
add
{

HookHandler._beforeDoPlayRandomAnimation += value;
HookHandler.HookDoPlayRandomAnimation();
}
remove => HookHandler._beforeDoPlayRandomAnimation -= value;
}
public static event Delegates.DoPlayAnimation_BeforeArgs DoPlayAnimation
{
add
{

HookHandler._beforeDoPlayAnimation += value;
HookHandler.HookDoPlayAnimation();
}
remove => HookHandler._beforeDoPlayAnimation -= value;
}
public static event Delegates.OnUpdate_BeforeArgs OnUpdate
{
add
{

HookHandler._beforeOnUpdate += value;
HookHandler.HookOnUpdate();
}
remove => HookHandler._beforeOnUpdate -= value;
}
public static event Delegates.OnExit_BeforeArgs OnExit
{
add
{

HookHandler._beforeOnExit += value;
HookHandler.HookOnExit();
}
remove => HookHandler._beforeOnExit -= value;
}
public static event Delegates.StopAnimation_BeforeArgs StopAnimation
{
add
{

HookHandler._beforeStopAnimation += value;
HookHandler.HookStopAnimation();
}
remove => HookHandler._beforeStopAnimation -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Reset_AfterArgs Reset
{
add
{

HookHandler._afterReset += value;
HookHandler.HookReset();
}
remove => HookHandler._afterReset -= value;
}
public static event Delegates.OnEnter_AfterArgs OnEnter
{
add
{

HookHandler._afterOnEnter += value;
HookHandler.HookOnEnter();
}
remove => HookHandler._afterOnEnter -= value;
}
public static event Delegates.DoPlayRandomAnimation_AfterArgs DoPlayRandomAnimation
{
add
{

HookHandler._afterDoPlayRandomAnimation += value;
HookHandler.HookDoPlayRandomAnimation();
}
remove => HookHandler._afterDoPlayRandomAnimation -= value;
}
public static event Delegates.DoPlayAnimation_AfterArgs DoPlayAnimation
{
add
{

HookHandler._afterDoPlayAnimation += value;
HookHandler.HookDoPlayAnimation();
}
remove => HookHandler._afterDoPlayAnimation -= value;
}
public static event Delegates.OnUpdate_AfterArgs OnUpdate
{
add
{

HookHandler._afterOnUpdate += value;
HookHandler.HookOnUpdate();
}
remove => HookHandler._afterOnUpdate -= value;
}
public static event Delegates.OnExit_AfterArgs OnExit
{
add
{

HookHandler._afterOnExit += value;
HookHandler.HookOnExit();
}
remove => HookHandler._afterOnExit -= value;
}
public static event Delegates.StopAnimation_AfterArgs StopAnimation
{
add
{

HookHandler._afterStopAnimation += value;
HookHandler.HookStopAnimation();
}
remove => HookHandler._afterStopAnimation -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.Reset_WithArgs Reset
{
add => HookEndpointManager.Add<Delegates.Reset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.PlayRandomAnimation), "Reset", true), value);
remove => HookEndpointManager.Remove<Delegates.Reset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.PlayRandomAnimation), "Reset", true), value);
}
public static event Delegates.OnEnter_WithArgs OnEnter
{
add => HookEndpointManager.Add<Delegates.OnEnter_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.PlayRandomAnimation), "OnEnter", true), value);
remove => HookEndpointManager.Remove<Delegates.OnEnter_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.PlayRandomAnimation), "OnEnter", true), value);
}
public static event Delegates.DoPlayRandomAnimation_WithArgs DoPlayRandomAnimation
{
add => HookEndpointManager.Add<Delegates.DoPlayRandomAnimation_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.PlayRandomAnimation), "DoPlayRandomAnimation", true), value);
remove => HookEndpointManager.Remove<Delegates.DoPlayRandomAnimation_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.PlayRandomAnimation), "DoPlayRandomAnimation", true), value);
}
public static event Delegates.DoPlayAnimation_WithArgs DoPlayAnimation
{
add => HookEndpointManager.Add<Delegates.DoPlayAnimation_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.PlayRandomAnimation), "DoPlayAnimation", true), value);
remove => HookEndpointManager.Remove<Delegates.DoPlayAnimation_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.PlayRandomAnimation), "DoPlayAnimation", true), value);
}
public static event Delegates.OnUpdate_WithArgs OnUpdate
{
add => HookEndpointManager.Add<Delegates.OnUpdate_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.PlayRandomAnimation), "OnUpdate", true), value);
remove => HookEndpointManager.Remove<Delegates.OnUpdate_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.PlayRandomAnimation), "OnUpdate", true), value);
}
public static event Delegates.OnExit_WithArgs OnExit
{
add => HookEndpointManager.Add<Delegates.OnExit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.PlayRandomAnimation), "OnExit", true), value);
remove => HookEndpointManager.Remove<Delegates.OnExit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.PlayRandomAnimation), "OnExit", true), value);
}
public static event Delegates.StopAnimation_WithArgs StopAnimation
{
add => HookEndpointManager.Add<Delegates.StopAnimation_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.PlayRandomAnimation), "StopAnimation", true), value);
remove => HookEndpointManager.Remove<Delegates.StopAnimation_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.PlayRandomAnimation), "StopAnimation", true), value);
}
}

}
