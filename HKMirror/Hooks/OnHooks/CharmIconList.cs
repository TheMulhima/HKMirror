namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for CharmIconList class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCharmIconList
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.CharmIconList.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.CharmIconList.orig_Awake orig, CharmIconList self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.CharmIconList.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.CharmIconList.orig_Start orig, CharmIconList self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookGetSprite()
        {
            if (!HookedList.Contains("GetSprite"))
            {
                HookedList.Add("GetSprite");
                On.CharmIconList.GetSprite += GetSprite;
            }
        }

        internal static event Delegates.GetSprite_BeforeArgs _beforeGetSprite;
        internal static event Delegates.GetSprite_NormalArgs _afterGetSprite;

        private static Sprite GetSprite(On.CharmIconList.orig_GetSprite orig, CharmIconList self, int id)
        {
            Delegates.Params_GetSprite @params = new()
            {
                self = self, id = id
            };
            _beforeGetSprite?.Invoke(@params);
            self = @params.self;
            id = @params.id;
            var retVal = orig(self, id);
            if (_afterGetSprite != null) retVal = _afterGetSprite.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void GetSprite_BeforeArgs(Params_GetSprite args);

        public delegate Sprite GetSprite_NormalArgs(Params_GetSprite args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Awake
        {
            public CharmIconList self;
        }

        public sealed class Params_Start
        {
            public CharmIconList self;
        }

        public sealed class Params_GetSprite
        {
            public int id;
            public CharmIconList self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.GetSprite_BeforeArgs GetSprite
        {
            add
            {
                HookHandler._beforeGetSprite += value;
                HookHandler.HookGetSprite();
            }
            remove => HookHandler._beforeGetSprite -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.GetSprite_NormalArgs GetSprite
        {
            add
            {
                HookHandler._afterGetSprite += value;
                HookHandler.HookGetSprite();
            }
            remove => HookHandler._afterGetSprite -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.CharmIconList.hook_Awake Awake
        {
            add => On.CharmIconList.Awake += value;
            remove => On.CharmIconList.Awake -= value;
        }

        public static event On.CharmIconList.hook_Start Start
        {
            add => On.CharmIconList.Start += value;
            remove => On.CharmIconList.Start -= value;
        }

        public static event On.CharmIconList.hook_GetSprite GetSprite
        {
            add => On.CharmIconList.GetSprite += value;
            remove => On.CharmIconList.GetSprite -= value;
        }
    }
}