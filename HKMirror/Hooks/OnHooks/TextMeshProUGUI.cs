using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;
using UnityEngine.UI;
using Bounds = UnityEngine.Bounds;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TextMeshProUGUI class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTextMeshProUGUI
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "Awake"), Awake);
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnEnable"), OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnDisable"), OnDisable);
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnDestroy"), OnDestroy);
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_NormalArgs _afterOnDestroy;

        private static void OnDestroy(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            _beforeOnDestroy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null) _afterOnDestroy.Invoke(@params);
        }

        internal static void HookLoadFontAsset()
        {
            if (!HookedList.Contains("LoadFontAsset"))
            {
                HookedList.Add("LoadFontAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "LoadFontAsset"), LoadFontAsset);
            }
        }

        internal static event Delegates.LoadFontAsset_BeforeArgs _beforeLoadFontAsset;
        internal static event Delegates.LoadFontAsset_NormalArgs _afterLoadFontAsset;

        private static void LoadFontAsset(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_LoadFontAsset @params = new()
            {
                self = self
            };
            _beforeLoadFontAsset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLoadFontAsset != null) _afterLoadFontAsset.Invoke(@params);
        }

        internal static void HookGetCanvas()
        {
            if (!HookedList.Contains("GetCanvas"))
            {
                HookedList.Add("GetCanvas");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetCanvas"), GetCanvas);
            }
        }

        internal static event Delegates.GetCanvas_BeforeArgs _beforeGetCanvas;
        internal static event Delegates.GetCanvas_NormalArgs _afterGetCanvas;

        private static Canvas GetCanvas(Func<TextMeshProUGUI, Canvas> orig, TextMeshProUGUI self)
        {
            Delegates.Params_GetCanvas @params = new()
            {
                self = self
            };
            _beforeGetCanvas?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetCanvas != null) retVal = _afterGetCanvas.Invoke(@params);
            return retVal;
        }

        internal static void HookUpdateEnvMapMatrix()
        {
            if (!HookedList.Contains("UpdateEnvMapMatrix"))
            {
                HookedList.Add("UpdateEnvMapMatrix");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateEnvMapMatrix"),
                    UpdateEnvMapMatrix);
            }
        }

        internal static event Delegates.UpdateEnvMapMatrix_BeforeArgs _beforeUpdateEnvMapMatrix;
        internal static event Delegates.UpdateEnvMapMatrix_NormalArgs _afterUpdateEnvMapMatrix;

        private static void UpdateEnvMapMatrix(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_UpdateEnvMapMatrix @params = new()
            {
                self = self
            };
            _beforeUpdateEnvMapMatrix?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateEnvMapMatrix != null) _afterUpdateEnvMapMatrix.Invoke(@params);
        }

        internal static void HookEnableMasking()
        {
            if (!HookedList.Contains("EnableMasking"))
            {
                HookedList.Add("EnableMasking");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "EnableMasking"), EnableMasking);
            }
        }

        internal static event Delegates.EnableMasking_BeforeArgs _beforeEnableMasking;
        internal static event Delegates.EnableMasking_NormalArgs _afterEnableMasking;

        private static void EnableMasking(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_EnableMasking @params = new()
            {
                self = self
            };
            _beforeEnableMasking?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterEnableMasking != null) _afterEnableMasking.Invoke(@params);
        }

        internal static void HookDisableMasking()
        {
            if (!HookedList.Contains("DisableMasking"))
            {
                HookedList.Add("DisableMasking");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "DisableMasking"), DisableMasking);
            }
        }

        internal static event Delegates.DisableMasking_BeforeArgs _beforeDisableMasking;
        internal static event Delegates.DisableMasking_NormalArgs _afterDisableMasking;

        private static void DisableMasking(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_DisableMasking @params = new()
            {
                self = self
            };
            _beforeDisableMasking?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDisableMasking != null) _afterDisableMasking.Invoke(@params);
        }

        internal static void HookUpdateMask()
        {
            if (!HookedList.Contains("UpdateMask"))
            {
                HookedList.Add("UpdateMask");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateMask"), UpdateMask);
            }
        }

        internal static event Delegates.UpdateMask_BeforeArgs _beforeUpdateMask;
        internal static event Delegates.UpdateMask_NormalArgs _afterUpdateMask;

        private static void UpdateMask(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_UpdateMask @params = new()
            {
                self = self
            };
            _beforeUpdateMask?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateMask != null) _afterUpdateMask.Invoke(@params);
        }

        internal static void HookGetMaterial()
        {
            if (!HookedList.Contains("GetMaterial"))
            {
                HookedList.Add("GetMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetMaterial"), GetMaterial);
            }
        }

        internal static event Delegates.GetMaterial_BeforeArgs _beforeGetMaterial;
        internal static event Delegates.GetMaterial_NormalArgs _afterGetMaterial;

        private static Material GetMaterial(Func<TextMeshProUGUI, Material, Material> orig, TextMeshProUGUI self,
            Material mat)
        {
            Delegates.Params_GetMaterial @params = new()
            {
                self = self, mat = mat
            };
            _beforeGetMaterial?.Invoke(@params);
            self = @params.self;
            mat = @params.mat;
            var retVal = orig(self, mat);
            if (_afterGetMaterial != null) retVal = _afterGetMaterial.Invoke(@params);
            return retVal;
        }

        internal static void HookGetMaterials()
        {
            if (!HookedList.Contains("GetMaterials"))
            {
                HookedList.Add("GetMaterials");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetMaterials"), GetMaterials);
            }
        }

        internal static event Delegates.GetMaterials_BeforeArgs _beforeGetMaterials;
        internal static event Delegates.GetMaterials_NormalArgs _afterGetMaterials;

        private static Material[] GetMaterials(Func<TextMeshProUGUI, Material[], Material[]> orig, TextMeshProUGUI self,
            Material[] mats)
        {
            Delegates.Params_GetMaterials @params = new()
            {
                self = self, mats = mats
            };
            _beforeGetMaterials?.Invoke(@params);
            self = @params.self;
            mats = @params.mats;
            var retVal = orig(self, mats);
            if (_afterGetMaterials != null) retVal = _afterGetMaterials.Invoke(@params);
            return retVal;
        }

        internal static void HookSetSharedMaterial()
        {
            if (!HookedList.Contains("SetSharedMaterial"))
            {
                HookedList.Add("SetSharedMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetSharedMaterial"),
                    SetSharedMaterial);
            }
        }

        internal static event Delegates.SetSharedMaterial_BeforeArgs _beforeSetSharedMaterial;
        internal static event Delegates.SetSharedMaterial_NormalArgs _afterSetSharedMaterial;

        private static void SetSharedMaterial(Action<TextMeshProUGUI, Material> orig, TextMeshProUGUI self,
            Material mat)
        {
            Delegates.Params_SetSharedMaterial @params = new()
            {
                self = self, mat = mat
            };
            _beforeSetSharedMaterial?.Invoke(@params);
            self = @params.self;
            mat = @params.mat;
            orig(self, mat);
            if (_afterSetSharedMaterial != null) _afterSetSharedMaterial.Invoke(@params);
        }

        internal static void HookGetSharedMaterials()
        {
            if (!HookedList.Contains("GetSharedMaterials"))
            {
                HookedList.Add("GetSharedMaterials");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetSharedMaterials"),
                    GetSharedMaterials);
            }
        }

        internal static event Delegates.GetSharedMaterials_BeforeArgs _beforeGetSharedMaterials;
        internal static event Delegates.GetSharedMaterials_NormalArgs _afterGetSharedMaterials;

        private static Material[] GetSharedMaterials(Func<TextMeshProUGUI, Material[]> orig, TextMeshProUGUI self)
        {
            Delegates.Params_GetSharedMaterials @params = new()
            {
                self = self
            };
            _beforeGetSharedMaterials?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetSharedMaterials != null) retVal = _afterGetSharedMaterials.Invoke(@params);
            return retVal;
        }

        internal static void HookSetSharedMaterials()
        {
            if (!HookedList.Contains("SetSharedMaterials"))
            {
                HookedList.Add("SetSharedMaterials");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetSharedMaterials"),
                    SetSharedMaterials);
            }
        }

        internal static event Delegates.SetSharedMaterials_BeforeArgs _beforeSetSharedMaterials;
        internal static event Delegates.SetSharedMaterials_NormalArgs _afterSetSharedMaterials;

        private static void SetSharedMaterials(Action<TextMeshProUGUI, Material[]> orig, TextMeshProUGUI self,
            Material[] materials)
        {
            Delegates.Params_SetSharedMaterials @params = new()
            {
                self = self, materials = materials
            };
            _beforeSetSharedMaterials?.Invoke(@params);
            self = @params.self;
            materials = @params.materials;
            orig(self, materials);
            if (_afterSetSharedMaterials != null) _afterSetSharedMaterials.Invoke(@params);
        }

        internal static void HookSetOutlineThickness()
        {
            if (!HookedList.Contains("SetOutlineThickness"))
            {
                HookedList.Add("SetOutlineThickness");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetOutlineThickness"),
                    SetOutlineThickness);
            }
        }

        internal static event Delegates.SetOutlineThickness_BeforeArgs _beforeSetOutlineThickness;
        internal static event Delegates.SetOutlineThickness_NormalArgs _afterSetOutlineThickness;

        private static void SetOutlineThickness(Action<TextMeshProUGUI, float> orig, TextMeshProUGUI self,
            float thickness)
        {
            Delegates.Params_SetOutlineThickness @params = new()
            {
                self = self, thickness = thickness
            };
            _beforeSetOutlineThickness?.Invoke(@params);
            self = @params.self;
            thickness = @params.thickness;
            orig(self, thickness);
            if (_afterSetOutlineThickness != null) _afterSetOutlineThickness.Invoke(@params);
        }

        internal static void HookSetFaceColor()
        {
            if (!HookedList.Contains("SetFaceColor"))
            {
                HookedList.Add("SetFaceColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetFaceColor"), SetFaceColor);
            }
        }

        internal static event Delegates.SetFaceColor_BeforeArgs _beforeSetFaceColor;
        internal static event Delegates.SetFaceColor_NormalArgs _afterSetFaceColor;

        private static void SetFaceColor(Action<TextMeshProUGUI, Color32> orig, TextMeshProUGUI self, Color32 color)
        {
            Delegates.Params_SetFaceColor @params = new()
            {
                self = self, color = color
            };
            _beforeSetFaceColor?.Invoke(@params);
            self = @params.self;
            color = @params.color;
            orig(self, color);
            if (_afterSetFaceColor != null) _afterSetFaceColor.Invoke(@params);
        }

        internal static void HookSetOutlineColor()
        {
            if (!HookedList.Contains("SetOutlineColor"))
            {
                HookedList.Add("SetOutlineColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetOutlineColor"), SetOutlineColor);
            }
        }

        internal static event Delegates.SetOutlineColor_BeforeArgs _beforeSetOutlineColor;
        internal static event Delegates.SetOutlineColor_NormalArgs _afterSetOutlineColor;

        private static void SetOutlineColor(Action<TextMeshProUGUI, Color32> orig, TextMeshProUGUI self, Color32 color)
        {
            Delegates.Params_SetOutlineColor @params = new()
            {
                self = self, color = color
            };
            _beforeSetOutlineColor?.Invoke(@params);
            self = @params.self;
            color = @params.color;
            orig(self, color);
            if (_afterSetOutlineColor != null) _afterSetOutlineColor.Invoke(@params);
        }

        internal static void HookSetShaderDepth()
        {
            if (!HookedList.Contains("SetShaderDepth"))
            {
                HookedList.Add("SetShaderDepth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetShaderDepth"), SetShaderDepth);
            }
        }

        internal static event Delegates.SetShaderDepth_BeforeArgs _beforeSetShaderDepth;
        internal static event Delegates.SetShaderDepth_NormalArgs _afterSetShaderDepth;

        private static void SetShaderDepth(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_SetShaderDepth @params = new()
            {
                self = self
            };
            _beforeSetShaderDepth?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetShaderDepth != null) _afterSetShaderDepth.Invoke(@params);
        }

        internal static void HookSetCulling()
        {
            if (!HookedList.Contains("SetCulling"))
            {
                HookedList.Add("SetCulling");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetCulling"), SetCulling);
            }
        }

        internal static event Delegates.SetCulling_BeforeArgs _beforeSetCulling;
        internal static event Delegates.SetCulling_NormalArgs _afterSetCulling;

        private static void SetCulling(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_SetCulling @params = new()
            {
                self = self
            };
            _beforeSetCulling?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetCulling != null) _afterSetCulling.Invoke(@params);
        }

        internal static void HookSetPerspectiveCorrection()
        {
            if (!HookedList.Contains("SetPerspectiveCorrection"))
            {
                HookedList.Add("SetPerspectiveCorrection");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetPerspectiveCorrection"),
                    SetPerspectiveCorrection);
            }
        }

        internal static event Delegates.SetPerspectiveCorrection_BeforeArgs _beforeSetPerspectiveCorrection;
        internal static event Delegates.SetPerspectiveCorrection_NormalArgs _afterSetPerspectiveCorrection;

        private static void SetPerspectiveCorrection(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_SetPerspectiveCorrection @params = new()
            {
                self = self
            };
            _beforeSetPerspectiveCorrection?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetPerspectiveCorrection != null) _afterSetPerspectiveCorrection.Invoke(@params);
        }

        internal static void HookGetPaddingForMaterial_Material()
        {
            if (!HookedList.Contains("GetPaddingForMaterial_Material"))
            {
                HookedList.Add("GetPaddingForMaterial_Material");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetPaddingForMaterial_Material"),
                    GetPaddingForMaterial_Material);
            }
        }

        internal static event Delegates.GetPaddingForMaterial_Material_BeforeArgs _beforeGetPaddingForMaterial_Material;
        internal static event Delegates.GetPaddingForMaterial_Material_NormalArgs _afterGetPaddingForMaterial_Material;

        private static float GetPaddingForMaterial_Material(Func<TextMeshProUGUI, Material, float> orig,
            TextMeshProUGUI self, Material mat)
        {
            Delegates.Params_GetPaddingForMaterial_Material @params = new()
            {
                self = self, mat = mat
            };
            _beforeGetPaddingForMaterial_Material?.Invoke(@params);
            self = @params.self;
            mat = @params.mat;
            var retVal = orig(self, mat);
            if (_afterGetPaddingForMaterial_Material != null)
                retVal = _afterGetPaddingForMaterial_Material.Invoke(@params);
            return retVal;
        }

        internal static void HookGetPaddingForMaterial()
        {
            if (!HookedList.Contains("GetPaddingForMaterial"))
            {
                HookedList.Add("GetPaddingForMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetPaddingForMaterial"),
                    GetPaddingForMaterial);
            }
        }

        internal static event Delegates.GetPaddingForMaterial_BeforeArgs _beforeGetPaddingForMaterial;
        internal static event Delegates.GetPaddingForMaterial_NormalArgs _afterGetPaddingForMaterial;

        private static float GetPaddingForMaterial(Func<TextMeshProUGUI, float> orig, TextMeshProUGUI self)
        {
            Delegates.Params_GetPaddingForMaterial @params = new()
            {
                self = self
            };
            _beforeGetPaddingForMaterial?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetPaddingForMaterial != null) retVal = _afterGetPaddingForMaterial.Invoke(@params);
            return retVal;
        }

        internal static void HookSetMeshArrays()
        {
            if (!HookedList.Contains("SetMeshArrays"))
            {
                HookedList.Add("SetMeshArrays");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetMeshArrays"), SetMeshArrays);
            }
        }

        internal static event Delegates.SetMeshArrays_BeforeArgs _beforeSetMeshArrays;
        internal static event Delegates.SetMeshArrays_NormalArgs _afterSetMeshArrays;

        private static void SetMeshArrays(Action<TextMeshProUGUI, int> orig, TextMeshProUGUI self, int size)
        {
            Delegates.Params_SetMeshArrays @params = new()
            {
                self = self, size = size
            };
            _beforeSetMeshArrays?.Invoke(@params);
            self = @params.self;
            size = @params.size;
            orig(self, size);
            if (_afterSetMeshArrays != null) _afterSetMeshArrays.Invoke(@params);
        }

        internal static void HookSetArraySizes()
        {
            if (!HookedList.Contains("SetArraySizes"))
            {
                HookedList.Add("SetArraySizes");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetArraySizes"), SetArraySizes);
            }
        }

        internal static event Delegates.SetArraySizes_BeforeArgs _beforeSetArraySizes;
        internal static event Delegates.SetArraySizes_NormalArgs _afterSetArraySizes;

        private static int SetArraySizes(Func<TextMeshProUGUI, int[], int> orig, TextMeshProUGUI self, int[] chars)
        {
            Delegates.Params_SetArraySizes @params = new()
            {
                self = self, chars = chars
            };
            _beforeSetArraySizes?.Invoke(@params);
            self = @params.self;
            chars = @params.chars;
            var retVal = orig(self, chars);
            if (_afterSetArraySizes != null) retVal = _afterSetArraySizes.Invoke(@params);
            return retVal;
        }

        internal static void HookComputeMarginSize()
        {
            if (!HookedList.Contains("ComputeMarginSize"))
            {
                HookedList.Add("ComputeMarginSize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "ComputeMarginSize"),
                    ComputeMarginSize);
            }
        }

        internal static event Delegates.ComputeMarginSize_BeforeArgs _beforeComputeMarginSize;
        internal static event Delegates.ComputeMarginSize_NormalArgs _afterComputeMarginSize;

        private static void ComputeMarginSize(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_ComputeMarginSize @params = new()
            {
                self = self
            };
            _beforeComputeMarginSize?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterComputeMarginSize != null) _afterComputeMarginSize.Invoke(@params);
        }

        internal static void HookOnDidApplyAnimationProperties()
        {
            if (!HookedList.Contains("OnDidApplyAnimationProperties"))
            {
                HookedList.Add("OnDidApplyAnimationProperties");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnDidApplyAnimationProperties"),
                    OnDidApplyAnimationProperties);
            }
        }

        internal static event Delegates.OnDidApplyAnimationProperties_BeforeArgs _beforeOnDidApplyAnimationProperties;
        internal static event Delegates.OnDidApplyAnimationProperties_NormalArgs _afterOnDidApplyAnimationProperties;

        private static void OnDidApplyAnimationProperties(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_OnDidApplyAnimationProperties @params = new()
            {
                self = self
            };
            _beforeOnDidApplyAnimationProperties?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDidApplyAnimationProperties != null) _afterOnDidApplyAnimationProperties.Invoke(@params);
        }

        internal static void HookOnCanvasHierarchyChanged()
        {
            if (!HookedList.Contains("OnCanvasHierarchyChanged"))
            {
                HookedList.Add("OnCanvasHierarchyChanged");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnCanvasHierarchyChanged"),
                    OnCanvasHierarchyChanged);
            }
        }

        internal static event Delegates.OnCanvasHierarchyChanged_BeforeArgs _beforeOnCanvasHierarchyChanged;
        internal static event Delegates.OnCanvasHierarchyChanged_NormalArgs _afterOnCanvasHierarchyChanged;

        private static void OnCanvasHierarchyChanged(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_OnCanvasHierarchyChanged @params = new()
            {
                self = self
            };
            _beforeOnCanvasHierarchyChanged?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnCanvasHierarchyChanged != null) _afterOnCanvasHierarchyChanged.Invoke(@params);
        }

        internal static void HookOnTransformParentChanged()
        {
            if (!HookedList.Contains("OnTransformParentChanged"))
            {
                HookedList.Add("OnTransformParentChanged");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnTransformParentChanged"),
                    OnTransformParentChanged);
            }
        }

        internal static event Delegates.OnTransformParentChanged_BeforeArgs _beforeOnTransformParentChanged;
        internal static event Delegates.OnTransformParentChanged_NormalArgs _afterOnTransformParentChanged;

        private static void OnTransformParentChanged(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_OnTransformParentChanged @params = new()
            {
                self = self
            };
            _beforeOnTransformParentChanged?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnTransformParentChanged != null) _afterOnTransformParentChanged.Invoke(@params);
        }

        internal static void HookOnRectTransformDimensionsChange()
        {
            if (!HookedList.Contains("OnRectTransformDimensionsChange"))
            {
                HookedList.Add("OnRectTransformDimensionsChange");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnRectTransformDimensionsChange"),
                    OnRectTransformDimensionsChange);
            }
        }

        internal static event Delegates.OnRectTransformDimensionsChange_BeforeArgs
            _beforeOnRectTransformDimensionsChange;

        internal static event Delegates.OnRectTransformDimensionsChange_NormalArgs
            _afterOnRectTransformDimensionsChange;

        private static void OnRectTransformDimensionsChange(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_OnRectTransformDimensionsChange @params = new()
            {
                self = self
            };
            _beforeOnRectTransformDimensionsChange?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnRectTransformDimensionsChange != null) _afterOnRectTransformDimensionsChange.Invoke(@params);
        }

        internal static void HookLateUpdate()
        {
            if (!HookedList.Contains("LateUpdate"))
            {
                HookedList.Add("LateUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "LateUpdate"), LateUpdate);
            }
        }

        internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
        internal static event Delegates.LateUpdate_NormalArgs _afterLateUpdate;

        private static void LateUpdate(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_LateUpdate @params = new()
            {
                self = self
            };
            _beforeLateUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLateUpdate != null) _afterLateUpdate.Invoke(@params);
        }

        internal static void HookOnPreRenderCanvas()
        {
            if (!HookedList.Contains("OnPreRenderCanvas"))
            {
                HookedList.Add("OnPreRenderCanvas");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnPreRenderCanvas"),
                    OnPreRenderCanvas);
            }
        }

        internal static event Delegates.OnPreRenderCanvas_BeforeArgs _beforeOnPreRenderCanvas;
        internal static event Delegates.OnPreRenderCanvas_NormalArgs _afterOnPreRenderCanvas;

        private static void OnPreRenderCanvas(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_OnPreRenderCanvas @params = new()
            {
                self = self
            };
            _beforeOnPreRenderCanvas?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnPreRenderCanvas != null) _afterOnPreRenderCanvas.Invoke(@params);
        }

        internal static void HookGenerateTextMesh()
        {
            if (!HookedList.Contains("GenerateTextMesh"))
            {
                HookedList.Add("GenerateTextMesh");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GenerateTextMesh"), GenerateTextMesh);
            }
        }

        internal static event Delegates.GenerateTextMesh_BeforeArgs _beforeGenerateTextMesh;
        internal static event Delegates.GenerateTextMesh_NormalArgs _afterGenerateTextMesh;

        private static void GenerateTextMesh(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_GenerateTextMesh @params = new()
            {
                self = self
            };
            _beforeGenerateTextMesh?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterGenerateTextMesh != null) _afterGenerateTextMesh.Invoke(@params);
        }

        internal static void HookGetTextContainerLocalCorners()
        {
            if (!HookedList.Contains("GetTextContainerLocalCorners"))
            {
                HookedList.Add("GetTextContainerLocalCorners");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetTextContainerLocalCorners"),
                    GetTextContainerLocalCorners);
            }
        }

        internal static event Delegates.GetTextContainerLocalCorners_BeforeArgs _beforeGetTextContainerLocalCorners;
        internal static event Delegates.GetTextContainerLocalCorners_NormalArgs _afterGetTextContainerLocalCorners;

        private static Vector3[] GetTextContainerLocalCorners(Func<TextMeshProUGUI, Vector3[]> orig,
            TextMeshProUGUI self)
        {
            Delegates.Params_GetTextContainerLocalCorners @params = new()
            {
                self = self
            };
            _beforeGetTextContainerLocalCorners?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetTextContainerLocalCorners != null) retVal = _afterGetTextContainerLocalCorners.Invoke(@params);
            return retVal;
        }

        internal static void HookClearMesh()
        {
            if (!HookedList.Contains("ClearMesh"))
            {
                HookedList.Add("ClearMesh");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "ClearMesh"), ClearMesh);
            }
        }

        internal static event Delegates.ClearMesh_BeforeArgs _beforeClearMesh;
        internal static event Delegates.ClearMesh_NormalArgs _afterClearMesh;

        private static void ClearMesh(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_ClearMesh @params = new()
            {
                self = self
            };
            _beforeClearMesh?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClearMesh != null) _afterClearMesh.Invoke(@params);
        }

        internal static void HookSetActiveSubMeshes()
        {
            if (!HookedList.Contains("SetActiveSubMeshes"))
            {
                HookedList.Add("SetActiveSubMeshes");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetActiveSubMeshes"),
                    SetActiveSubMeshes);
            }
        }

        internal static event Delegates.SetActiveSubMeshes_BeforeArgs _beforeSetActiveSubMeshes;
        internal static event Delegates.SetActiveSubMeshes_NormalArgs _afterSetActiveSubMeshes;

        private static void SetActiveSubMeshes(Action<TextMeshProUGUI, bool> orig, TextMeshProUGUI self, bool state)
        {
            Delegates.Params_SetActiveSubMeshes @params = new()
            {
                self = self, state = state
            };
            _beforeSetActiveSubMeshes?.Invoke(@params);
            self = @params.self;
            state = @params.state;
            orig(self, state);
            if (_afterSetActiveSubMeshes != null) _afterSetActiveSubMeshes.Invoke(@params);
        }

        internal static void HookGetCompoundBounds()
        {
            if (!HookedList.Contains("GetCompoundBounds"))
            {
                HookedList.Add("GetCompoundBounds");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetCompoundBounds"),
                    GetCompoundBounds);
            }
        }

        internal static event Delegates.GetCompoundBounds_BeforeArgs _beforeGetCompoundBounds;
        internal static event Delegates.GetCompoundBounds_NormalArgs _afterGetCompoundBounds;

        private static Bounds GetCompoundBounds(Func<TextMeshProUGUI, Bounds> orig, TextMeshProUGUI self)
        {
            Delegates.Params_GetCompoundBounds @params = new()
            {
                self = self
            };
            _beforeGetCompoundBounds?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetCompoundBounds != null) retVal = _afterGetCompoundBounds.Invoke(@params);
            return retVal;
        }

        internal static void HookUpdateSDFScale()
        {
            if (!HookedList.Contains("UpdateSDFScale"))
            {
                HookedList.Add("UpdateSDFScale");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateSDFScale"), UpdateSDFScale);
            }
        }

        internal static event Delegates.UpdateSDFScale_BeforeArgs _beforeUpdateSDFScale;
        internal static event Delegates.UpdateSDFScale_NormalArgs _afterUpdateSDFScale;

        private static void UpdateSDFScale(Action<TextMeshProUGUI, float> orig, TextMeshProUGUI self, float lossyScale)
        {
            Delegates.Params_UpdateSDFScale @params = new()
            {
                self = self, lossyScale = lossyScale
            };
            _beforeUpdateSDFScale?.Invoke(@params);
            self = @params.self;
            lossyScale = @params.lossyScale;
            orig(self, lossyScale);
            if (_afterUpdateSDFScale != null) _afterUpdateSDFScale.Invoke(@params);
        }

        internal static void HookAdjustLineOffset()
        {
            if (!HookedList.Contains("AdjustLineOffset"))
            {
                HookedList.Add("AdjustLineOffset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "AdjustLineOffset"), AdjustLineOffset);
            }
        }

        internal static event Delegates.AdjustLineOffset_BeforeArgs _beforeAdjustLineOffset;
        internal static event Delegates.AdjustLineOffset_NormalArgs _afterAdjustLineOffset;

        private static void AdjustLineOffset(Action<TextMeshProUGUI, int, int, float> orig, TextMeshProUGUI self,
            int startIndex, int endIndex, float offset)
        {
            Delegates.Params_AdjustLineOffset @params = new()
            {
                self = self, startIndex = startIndex, endIndex = endIndex, offset = offset
            };
            _beforeAdjustLineOffset?.Invoke(@params);
            self = @params.self;
            startIndex = @params.startIndex;
            endIndex = @params.endIndex;
            offset = @params.offset;
            orig(self, startIndex, endIndex, offset);
            if (_afterAdjustLineOffset != null) _afterAdjustLineOffset.Invoke(@params);
        }

        internal static void Hookget_materialForRendering()
        {
            if (!HookedList.Contains("get_materialForRendering"))
            {
                HookedList.Add("get_materialForRendering");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "get_materialForRendering"),
                    get_materialForRendering);
            }
        }

        internal static event Delegates.get_materialForRendering_BeforeArgs _beforeget_materialForRendering;
        internal static event Delegates.get_materialForRendering_NormalArgs _afterget_materialForRendering;

        private static Material get_materialForRendering(Func<TextMeshProUGUI, Material> orig, TextMeshProUGUI self)
        {
            Delegates.Params_get_materialForRendering @params = new()
            {
                self = self
            };
            _beforeget_materialForRendering?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_materialForRendering != null) retVal = _afterget_materialForRendering.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_mesh()
        {
            if (!HookedList.Contains("get_mesh"))
            {
                HookedList.Add("get_mesh");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "get_mesh"), get_mesh);
            }
        }

        internal static event Delegates.get_mesh_BeforeArgs _beforeget_mesh;
        internal static event Delegates.get_mesh_NormalArgs _afterget_mesh;

        private static Mesh get_mesh(Func<TextMeshProUGUI, Mesh> orig, TextMeshProUGUI self)
        {
            Delegates.Params_get_mesh @params = new()
            {
                self = self
            };
            _beforeget_mesh?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_mesh != null) retVal = _afterget_mesh.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_canvasRenderer()
        {
            if (!HookedList.Contains("get_canvasRenderer"))
            {
                HookedList.Add("get_canvasRenderer");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "get_canvasRenderer"),
                    get_canvasRenderer);
            }
        }

        internal static event Delegates.get_canvasRenderer_BeforeArgs _beforeget_canvasRenderer;
        internal static event Delegates.get_canvasRenderer_NormalArgs _afterget_canvasRenderer;

        private static CanvasRenderer get_canvasRenderer(Func<TextMeshProUGUI, CanvasRenderer> orig,
            TextMeshProUGUI self)
        {
            Delegates.Params_get_canvasRenderer @params = new()
            {
                self = self
            };
            _beforeget_canvasRenderer?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_canvasRenderer != null) retVal = _afterget_canvasRenderer.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_inlineGraphicManager()
        {
            if (!HookedList.Contains("get_inlineGraphicManager"))
            {
                HookedList.Add("get_inlineGraphicManager");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "get_inlineGraphicManager"),
                    get_inlineGraphicManager);
            }
        }

        internal static event Delegates.get_inlineGraphicManager_BeforeArgs _beforeget_inlineGraphicManager;
        internal static event Delegates.get_inlineGraphicManager_NormalArgs _afterget_inlineGraphicManager;

        private static InlineGraphicManager get_inlineGraphicManager(Func<TextMeshProUGUI, InlineGraphicManager> orig,
            TextMeshProUGUI self)
        {
            Delegates.Params_get_inlineGraphicManager @params = new()
            {
                self = self
            };
            _beforeget_inlineGraphicManager?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_inlineGraphicManager != null) retVal = _afterget_inlineGraphicManager.Invoke(@params);
            return retVal;
        }

        internal static void HookCalculateLayoutInputHorizontal()
        {
            if (!HookedList.Contains("CalculateLayoutInputHorizontal"))
            {
                HookedList.Add("CalculateLayoutInputHorizontal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "CalculateLayoutInputHorizontal"),
                    CalculateLayoutInputHorizontal);
            }
        }

        internal static event Delegates.CalculateLayoutInputHorizontal_BeforeArgs _beforeCalculateLayoutInputHorizontal;
        internal static event Delegates.CalculateLayoutInputHorizontal_NormalArgs _afterCalculateLayoutInputHorizontal;

        private static void CalculateLayoutInputHorizontal(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_CalculateLayoutInputHorizontal @params = new()
            {
                self = self
            };
            _beforeCalculateLayoutInputHorizontal?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCalculateLayoutInputHorizontal != null) _afterCalculateLayoutInputHorizontal.Invoke(@params);
        }

        internal static void HookCalculateLayoutInputVertical()
        {
            if (!HookedList.Contains("CalculateLayoutInputVertical"))
            {
                HookedList.Add("CalculateLayoutInputVertical");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "CalculateLayoutInputVertical"),
                    CalculateLayoutInputVertical);
            }
        }

        internal static event Delegates.CalculateLayoutInputVertical_BeforeArgs _beforeCalculateLayoutInputVertical;
        internal static event Delegates.CalculateLayoutInputVertical_NormalArgs _afterCalculateLayoutInputVertical;

        private static void CalculateLayoutInputVertical(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_CalculateLayoutInputVertical @params = new()
            {
                self = self
            };
            _beforeCalculateLayoutInputVertical?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCalculateLayoutInputVertical != null) _afterCalculateLayoutInputVertical.Invoke(@params);
        }

        internal static void HookSetVerticesDirty()
        {
            if (!HookedList.Contains("SetVerticesDirty"))
            {
                HookedList.Add("SetVerticesDirty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetVerticesDirty"), SetVerticesDirty);
            }
        }

        internal static event Delegates.SetVerticesDirty_BeforeArgs _beforeSetVerticesDirty;
        internal static event Delegates.SetVerticesDirty_NormalArgs _afterSetVerticesDirty;

        private static void SetVerticesDirty(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_SetVerticesDirty @params = new()
            {
                self = self
            };
            _beforeSetVerticesDirty?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetVerticesDirty != null) _afterSetVerticesDirty.Invoke(@params);
        }

        internal static void HookSetLayoutDirty()
        {
            if (!HookedList.Contains("SetLayoutDirty"))
            {
                HookedList.Add("SetLayoutDirty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetLayoutDirty"), SetLayoutDirty);
            }
        }

        internal static event Delegates.SetLayoutDirty_BeforeArgs _beforeSetLayoutDirty;
        internal static event Delegates.SetLayoutDirty_NormalArgs _afterSetLayoutDirty;

        private static void SetLayoutDirty(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_SetLayoutDirty @params = new()
            {
                self = self
            };
            _beforeSetLayoutDirty?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetLayoutDirty != null) _afterSetLayoutDirty.Invoke(@params);
        }

        internal static void HookSetMaterialDirty()
        {
            if (!HookedList.Contains("SetMaterialDirty"))
            {
                HookedList.Add("SetMaterialDirty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetMaterialDirty"), SetMaterialDirty);
            }
        }

        internal static event Delegates.SetMaterialDirty_BeforeArgs _beforeSetMaterialDirty;
        internal static event Delegates.SetMaterialDirty_NormalArgs _afterSetMaterialDirty;

        private static void SetMaterialDirty(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_SetMaterialDirty @params = new()
            {
                self = self
            };
            _beforeSetMaterialDirty?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetMaterialDirty != null) _afterSetMaterialDirty.Invoke(@params);
        }

        internal static void HookSetAllDirty()
        {
            if (!HookedList.Contains("SetAllDirty"))
            {
                HookedList.Add("SetAllDirty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetAllDirty"), SetAllDirty);
            }
        }

        internal static event Delegates.SetAllDirty_BeforeArgs _beforeSetAllDirty;
        internal static event Delegates.SetAllDirty_NormalArgs _afterSetAllDirty;

        private static void SetAllDirty(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_SetAllDirty @params = new()
            {
                self = self
            };
            _beforeSetAllDirty?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetAllDirty != null) _afterSetAllDirty.Invoke(@params);
        }

        internal static void HookRebuild()
        {
            if (!HookedList.Contains("Rebuild"))
            {
                HookedList.Add("Rebuild");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "Rebuild"), Rebuild);
            }
        }

        internal static event Delegates.Rebuild_BeforeArgs _beforeRebuild;
        internal static event Delegates.Rebuild_NormalArgs _afterRebuild;

        private static void Rebuild(Action<TextMeshProUGUI, CanvasUpdate> orig, TextMeshProUGUI self,
            CanvasUpdate update)
        {
            Delegates.Params_Rebuild @params = new()
            {
                self = self, update = update
            };
            _beforeRebuild?.Invoke(@params);
            self = @params.self;
            update = @params.update;
            orig(self, update);
            if (_afterRebuild != null) _afterRebuild.Invoke(@params);
        }

        internal static void HookUpdateSubObjectPivot()
        {
            if (!HookedList.Contains("UpdateSubObjectPivot"))
            {
                HookedList.Add("UpdateSubObjectPivot");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateSubObjectPivot"),
                    UpdateSubObjectPivot);
            }
        }

        internal static event Delegates.UpdateSubObjectPivot_BeforeArgs _beforeUpdateSubObjectPivot;
        internal static event Delegates.UpdateSubObjectPivot_NormalArgs _afterUpdateSubObjectPivot;

        private static void UpdateSubObjectPivot(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_UpdateSubObjectPivot @params = new()
            {
                self = self
            };
            _beforeUpdateSubObjectPivot?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateSubObjectPivot != null) _afterUpdateSubObjectPivot.Invoke(@params);
        }

        internal static void HookGetModifiedMaterial()
        {
            if (!HookedList.Contains("GetModifiedMaterial"))
            {
                HookedList.Add("GetModifiedMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetModifiedMaterial"),
                    GetModifiedMaterial);
            }
        }

        internal static event Delegates.GetModifiedMaterial_BeforeArgs _beforeGetModifiedMaterial;
        internal static event Delegates.GetModifiedMaterial_NormalArgs _afterGetModifiedMaterial;

        private static Material GetModifiedMaterial(Func<TextMeshProUGUI, Material, Material> orig,
            TextMeshProUGUI self, Material baseMaterial)
        {
            Delegates.Params_GetModifiedMaterial @params = new()
            {
                self = self, baseMaterial = baseMaterial
            };
            _beforeGetModifiedMaterial?.Invoke(@params);
            self = @params.self;
            baseMaterial = @params.baseMaterial;
            var retVal = orig(self, baseMaterial);
            if (_afterGetModifiedMaterial != null) retVal = _afterGetModifiedMaterial.Invoke(@params);
            return retVal;
        }

        internal static void HookUpdateMaterial()
        {
            if (!HookedList.Contains("UpdateMaterial"))
            {
                HookedList.Add("UpdateMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateMaterial"), UpdateMaterial);
            }
        }

        internal static event Delegates.UpdateMaterial_BeforeArgs _beforeUpdateMaterial;
        internal static event Delegates.UpdateMaterial_NormalArgs _afterUpdateMaterial;

        private static void UpdateMaterial(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_UpdateMaterial @params = new()
            {
                self = self
            };
            _beforeUpdateMaterial?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateMaterial != null) _afterUpdateMaterial.Invoke(@params);
        }

        internal static void Hookget_maskOffset()
        {
            if (!HookedList.Contains("get_maskOffset"))
            {
                HookedList.Add("get_maskOffset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "get_maskOffset"), get_maskOffset);
            }
        }

        internal static event Delegates.get_maskOffset_BeforeArgs _beforeget_maskOffset;
        internal static event Delegates.get_maskOffset_NormalArgs _afterget_maskOffset;

        private static Vector4 get_maskOffset(Func<TextMeshProUGUI, Vector4> orig, TextMeshProUGUI self)
        {
            Delegates.Params_get_maskOffset @params = new()
            {
                self = self
            };
            _beforeget_maskOffset?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_maskOffset != null) retVal = _afterget_maskOffset.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_maskOffset()
        {
            if (!HookedList.Contains("set_maskOffset"))
            {
                HookedList.Add("set_maskOffset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "set_maskOffset"), set_maskOffset);
            }
        }

        internal static event Delegates.set_maskOffset_BeforeArgs _beforeset_maskOffset;
        internal static event Delegates.set_maskOffset_NormalArgs _afterset_maskOffset;

        private static void set_maskOffset(Action<TextMeshProUGUI, Vector4> orig, TextMeshProUGUI self, Vector4 value)
        {
            Delegates.Params_set_maskOffset @params = new()
            {
                self = self, value = value
            };
            _beforeset_maskOffset?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_maskOffset != null) _afterset_maskOffset.Invoke(@params);
        }

        internal static void HookRecalculateClipping()
        {
            if (!HookedList.Contains("RecalculateClipping"))
            {
                HookedList.Add("RecalculateClipping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "RecalculateClipping"),
                    RecalculateClipping);
            }
        }

        internal static event Delegates.RecalculateClipping_BeforeArgs _beforeRecalculateClipping;
        internal static event Delegates.RecalculateClipping_NormalArgs _afterRecalculateClipping;

        private static void RecalculateClipping(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_RecalculateClipping @params = new()
            {
                self = self
            };
            _beforeRecalculateClipping?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRecalculateClipping != null) _afterRecalculateClipping.Invoke(@params);
        }

        internal static void HookRecalculateMasking()
        {
            if (!HookedList.Contains("RecalculateMasking"))
            {
                HookedList.Add("RecalculateMasking");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "RecalculateMasking"),
                    RecalculateMasking);
            }
        }

        internal static event Delegates.RecalculateMasking_BeforeArgs _beforeRecalculateMasking;
        internal static event Delegates.RecalculateMasking_NormalArgs _afterRecalculateMasking;

        private static void RecalculateMasking(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_RecalculateMasking @params = new()
            {
                self = self
            };
            _beforeRecalculateMasking?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRecalculateMasking != null) _afterRecalculateMasking.Invoke(@params);
        }

        internal static void HookUpdateMeshPadding()
        {
            if (!HookedList.Contains("UpdateMeshPadding"))
            {
                HookedList.Add("UpdateMeshPadding");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateMeshPadding"),
                    UpdateMeshPadding);
            }
        }

        internal static event Delegates.UpdateMeshPadding_BeforeArgs _beforeUpdateMeshPadding;
        internal static event Delegates.UpdateMeshPadding_NormalArgs _afterUpdateMeshPadding;

        private static void UpdateMeshPadding(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_UpdateMeshPadding @params = new()
            {
                self = self
            };
            _beforeUpdateMeshPadding?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateMeshPadding != null) _afterUpdateMeshPadding.Invoke(@params);
        }

        internal static void HookInternalCrossFadeColor()
        {
            if (!HookedList.Contains("InternalCrossFadeColor"))
            {
                HookedList.Add("InternalCrossFadeColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "InternalCrossFadeColor"),
                    InternalCrossFadeColor);
            }
        }

        internal static event Delegates.InternalCrossFadeColor_BeforeArgs _beforeInternalCrossFadeColor;
        internal static event Delegates.InternalCrossFadeColor_NormalArgs _afterInternalCrossFadeColor;

        private static void InternalCrossFadeColor(Action<TextMeshProUGUI, Color, float, bool, bool> orig,
            TextMeshProUGUI self, Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha)
        {
            Delegates.Params_InternalCrossFadeColor @params = new()
            {
                self = self, targetColor = targetColor, duration = duration, ignoreTimeScale = ignoreTimeScale,
                useAlpha = useAlpha
            };
            _beforeInternalCrossFadeColor?.Invoke(@params);
            self = @params.self;
            targetColor = @params.targetColor;
            duration = @params.duration;
            ignoreTimeScale = @params.ignoreTimeScale;
            useAlpha = @params.useAlpha;
            orig(self, targetColor, duration, ignoreTimeScale, useAlpha);
            if (_afterInternalCrossFadeColor != null) _afterInternalCrossFadeColor.Invoke(@params);
        }

        internal static void HookInternalCrossFadeAlpha()
        {
            if (!HookedList.Contains("InternalCrossFadeAlpha"))
            {
                HookedList.Add("InternalCrossFadeAlpha");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "InternalCrossFadeAlpha"),
                    InternalCrossFadeAlpha);
            }
        }

        internal static event Delegates.InternalCrossFadeAlpha_BeforeArgs _beforeInternalCrossFadeAlpha;
        internal static event Delegates.InternalCrossFadeAlpha_NormalArgs _afterInternalCrossFadeAlpha;

        private static void InternalCrossFadeAlpha(Action<TextMeshProUGUI, float, float, bool> orig,
            TextMeshProUGUI self, float alpha, float duration, bool ignoreTimeScale)
        {
            Delegates.Params_InternalCrossFadeAlpha @params = new()
            {
                self = self, alpha = alpha, duration = duration, ignoreTimeScale = ignoreTimeScale
            };
            _beforeInternalCrossFadeAlpha?.Invoke(@params);
            self = @params.self;
            alpha = @params.alpha;
            duration = @params.duration;
            ignoreTimeScale = @params.ignoreTimeScale;
            orig(self, alpha, duration, ignoreTimeScale);
            if (_afterInternalCrossFadeAlpha != null) _afterInternalCrossFadeAlpha.Invoke(@params);
        }

        internal static void HookForceMeshUpdate()
        {
            if (!HookedList.Contains("ForceMeshUpdate"))
            {
                HookedList.Add("ForceMeshUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "ForceMeshUpdate"), ForceMeshUpdate);
            }
        }

        internal static event Delegates.ForceMeshUpdate_BeforeArgs _beforeForceMeshUpdate;
        internal static event Delegates.ForceMeshUpdate_NormalArgs _afterForceMeshUpdate;

        private static void ForceMeshUpdate(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_ForceMeshUpdate @params = new()
            {
                self = self
            };
            _beforeForceMeshUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterForceMeshUpdate != null) _afterForceMeshUpdate.Invoke(@params);
        }

        internal static void HookForceMeshUpdate_bool()
        {
            if (!HookedList.Contains("ForceMeshUpdate_bool"))
            {
                HookedList.Add("ForceMeshUpdate_bool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "ForceMeshUpdate_bool"),
                    ForceMeshUpdate_bool);
            }
        }

        internal static event Delegates.ForceMeshUpdate_bool_BeforeArgs _beforeForceMeshUpdate_bool;
        internal static event Delegates.ForceMeshUpdate_bool_NormalArgs _afterForceMeshUpdate_bool;

        private static void ForceMeshUpdate_bool(Action<TextMeshProUGUI, bool> orig, TextMeshProUGUI self,
            bool ignoreInactive)
        {
            Delegates.Params_ForceMeshUpdate_bool @params = new()
            {
                self = self, ignoreInactive = ignoreInactive
            };
            _beforeForceMeshUpdate_bool?.Invoke(@params);
            self = @params.self;
            ignoreInactive = @params.ignoreInactive;
            orig(self, ignoreInactive);
            if (_afterForceMeshUpdate_bool != null) _afterForceMeshUpdate_bool.Invoke(@params);
        }

        internal static void HookGetTextInfo()
        {
            if (!HookedList.Contains("GetTextInfo"))
            {
                HookedList.Add("GetTextInfo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetTextInfo"), GetTextInfo);
            }
        }

        internal static event Delegates.GetTextInfo_BeforeArgs _beforeGetTextInfo;
        internal static event Delegates.GetTextInfo_NormalArgs _afterGetTextInfo;

        private static TMP_TextInfo GetTextInfo(Func<TextMeshProUGUI, string, TMP_TextInfo> orig, TextMeshProUGUI self,
            string text)
        {
            Delegates.Params_GetTextInfo @params = new()
            {
                self = self, text = text
            };
            _beforeGetTextInfo?.Invoke(@params);
            self = @params.self;
            text = @params.text;
            var retVal = orig(self, text);
            if (_afterGetTextInfo != null) retVal = _afterGetTextInfo.Invoke(@params);
            return retVal;
        }

        internal static void HookUpdateGeometry()
        {
            if (!HookedList.Contains("UpdateGeometry"))
            {
                HookedList.Add("UpdateGeometry");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateGeometry"), UpdateGeometry);
            }
        }

        internal static event Delegates.UpdateGeometry_BeforeArgs _beforeUpdateGeometry;
        internal static event Delegates.UpdateGeometry_NormalArgs _afterUpdateGeometry;

        private static void UpdateGeometry(Action<TextMeshProUGUI, Mesh, int> orig, TextMeshProUGUI self, Mesh mesh,
            int index)
        {
            Delegates.Params_UpdateGeometry @params = new()
            {
                self = self, mesh = mesh, index = index
            };
            _beforeUpdateGeometry?.Invoke(@params);
            self = @params.self;
            mesh = @params.mesh;
            index = @params.index;
            orig(self, mesh, index);
            if (_afterUpdateGeometry != null) _afterUpdateGeometry.Invoke(@params);
        }

        internal static void HookUpdateVertexData_TMP_VertexDataUpdateFlags()
        {
            if (!HookedList.Contains("UpdateVertexData_TMP_VertexDataUpdateFlags"))
            {
                HookedList.Add("UpdateVertexData_TMP_VertexDataUpdateFlags");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI),
                        "UpdateVertexData_TMP_VertexDataUpdateFlags"), UpdateVertexData_TMP_VertexDataUpdateFlags);
            }
        }

        internal static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_BeforeArgs
            _beforeUpdateVertexData_TMP_VertexDataUpdateFlags;

        internal static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_NormalArgs
            _afterUpdateVertexData_TMP_VertexDataUpdateFlags;

        private static void UpdateVertexData_TMP_VertexDataUpdateFlags(
            Action<TextMeshProUGUI, TMP_VertexDataUpdateFlags> orig, TextMeshProUGUI self,
            TMP_VertexDataUpdateFlags flags)
        {
            Delegates.Params_UpdateVertexData_TMP_VertexDataUpdateFlags @params = new()
            {
                self = self, flags = flags
            };
            _beforeUpdateVertexData_TMP_VertexDataUpdateFlags?.Invoke(@params);
            self = @params.self;
            flags = @params.flags;
            orig(self, flags);
            if (_afterUpdateVertexData_TMP_VertexDataUpdateFlags != null)
                _afterUpdateVertexData_TMP_VertexDataUpdateFlags.Invoke(@params);
        }

        internal static void HookUpdateVertexData()
        {
            if (!HookedList.Contains("UpdateVertexData"))
            {
                HookedList.Add("UpdateVertexData");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateVertexData"), UpdateVertexData);
            }
        }

        internal static event Delegates.UpdateVertexData_BeforeArgs _beforeUpdateVertexData;
        internal static event Delegates.UpdateVertexData_NormalArgs _afterUpdateVertexData;

        private static void UpdateVertexData(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_UpdateVertexData @params = new()
            {
                self = self
            };
            _beforeUpdateVertexData?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateVertexData != null) _afterUpdateVertexData.Invoke(@params);
        }

        internal static void HookUpdateFontAsset()
        {
            if (!HookedList.Contains("UpdateFontAsset"))
            {
                HookedList.Add("UpdateFontAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateFontAsset"), UpdateFontAsset);
            }
        }

        internal static event Delegates.UpdateFontAsset_BeforeArgs _beforeUpdateFontAsset;
        internal static event Delegates.UpdateFontAsset_NormalArgs _afterUpdateFontAsset;

        private static void UpdateFontAsset(Action<TextMeshProUGUI> orig, TextMeshProUGUI self)
        {
            Delegates.Params_UpdateFontAsset @params = new()
            {
                self = self
            };
            _beforeUpdateFontAsset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateFontAsset != null) _afterUpdateFontAsset.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AdjustLineOffset_BeforeArgs(Params_AdjustLineOffset args);

        public delegate void AdjustLineOffset_NormalArgs(Params_AdjustLineOffset args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void CalculateLayoutInputHorizontal_BeforeArgs(Params_CalculateLayoutInputHorizontal args);

        public delegate void CalculateLayoutInputHorizontal_NormalArgs(Params_CalculateLayoutInputHorizontal args);

        public delegate void CalculateLayoutInputVertical_BeforeArgs(Params_CalculateLayoutInputVertical args);

        public delegate void CalculateLayoutInputVertical_NormalArgs(Params_CalculateLayoutInputVertical args);

        public delegate void ClearMesh_BeforeArgs(Params_ClearMesh args);

        public delegate void ClearMesh_NormalArgs(Params_ClearMesh args);

        public delegate void ComputeMarginSize_BeforeArgs(Params_ComputeMarginSize args);

        public delegate void ComputeMarginSize_NormalArgs(Params_ComputeMarginSize args);

        public delegate void DisableMasking_BeforeArgs(Params_DisableMasking args);

        public delegate void DisableMasking_NormalArgs(Params_DisableMasking args);

        public delegate void EnableMasking_BeforeArgs(Params_EnableMasking args);

        public delegate void EnableMasking_NormalArgs(Params_EnableMasking args);

        public delegate void ForceMeshUpdate_BeforeArgs(Params_ForceMeshUpdate args);

        public delegate void ForceMeshUpdate_bool_BeforeArgs(Params_ForceMeshUpdate_bool args);

        public delegate void ForceMeshUpdate_bool_NormalArgs(Params_ForceMeshUpdate_bool args);

        public delegate void ForceMeshUpdate_NormalArgs(Params_ForceMeshUpdate args);

        public delegate void GenerateTextMesh_BeforeArgs(Params_GenerateTextMesh args);

        public delegate void GenerateTextMesh_NormalArgs(Params_GenerateTextMesh args);

        public delegate void get_canvasRenderer_BeforeArgs(Params_get_canvasRenderer args);

        public delegate CanvasRenderer get_canvasRenderer_NormalArgs(Params_get_canvasRenderer args);

        public delegate void get_inlineGraphicManager_BeforeArgs(Params_get_inlineGraphicManager args);

        public delegate InlineGraphicManager get_inlineGraphicManager_NormalArgs(Params_get_inlineGraphicManager args);

        public delegate void get_maskOffset_BeforeArgs(Params_get_maskOffset args);

        public delegate Vector4 get_maskOffset_NormalArgs(Params_get_maskOffset args);

        public delegate void get_materialForRendering_BeforeArgs(Params_get_materialForRendering args);

        public delegate Material get_materialForRendering_NormalArgs(Params_get_materialForRendering args);

        public delegate void get_mesh_BeforeArgs(Params_get_mesh args);

        public delegate Mesh get_mesh_NormalArgs(Params_get_mesh args);

        public delegate void GetCanvas_BeforeArgs(Params_GetCanvas args);

        public delegate Canvas GetCanvas_NormalArgs(Params_GetCanvas args);

        public delegate void GetCompoundBounds_BeforeArgs(Params_GetCompoundBounds args);

        public delegate Bounds GetCompoundBounds_NormalArgs(Params_GetCompoundBounds args);

        public delegate void GetMaterial_BeforeArgs(Params_GetMaterial args);

        public delegate Material GetMaterial_NormalArgs(Params_GetMaterial args);

        public delegate void GetMaterials_BeforeArgs(Params_GetMaterials args);

        public delegate Material[] GetMaterials_NormalArgs(Params_GetMaterials args);

        public delegate void GetModifiedMaterial_BeforeArgs(Params_GetModifiedMaterial args);

        public delegate Material GetModifiedMaterial_NormalArgs(Params_GetModifiedMaterial args);

        public delegate void GetPaddingForMaterial_BeforeArgs(Params_GetPaddingForMaterial args);

        public delegate void GetPaddingForMaterial_Material_BeforeArgs(Params_GetPaddingForMaterial_Material args);

        public delegate float GetPaddingForMaterial_Material_NormalArgs(Params_GetPaddingForMaterial_Material args);

        public delegate float GetPaddingForMaterial_NormalArgs(Params_GetPaddingForMaterial args);

        public delegate void GetSharedMaterials_BeforeArgs(Params_GetSharedMaterials args);

        public delegate Material[] GetSharedMaterials_NormalArgs(Params_GetSharedMaterials args);

        public delegate void GetTextContainerLocalCorners_BeforeArgs(Params_GetTextContainerLocalCorners args);

        public delegate Vector3[] GetTextContainerLocalCorners_NormalArgs(Params_GetTextContainerLocalCorners args);

        public delegate void GetTextInfo_BeforeArgs(Params_GetTextInfo args);

        public delegate TMP_TextInfo GetTextInfo_NormalArgs(Params_GetTextInfo args);

        public delegate void InternalCrossFadeAlpha_BeforeArgs(Params_InternalCrossFadeAlpha args);

        public delegate void InternalCrossFadeAlpha_NormalArgs(Params_InternalCrossFadeAlpha args);

        public delegate void InternalCrossFadeColor_BeforeArgs(Params_InternalCrossFadeColor args);

        public delegate void InternalCrossFadeColor_NormalArgs(Params_InternalCrossFadeColor args);

        public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);

        public delegate void LateUpdate_NormalArgs(Params_LateUpdate args);

        public delegate void LoadFontAsset_BeforeArgs(Params_LoadFontAsset args);

        public delegate void LoadFontAsset_NormalArgs(Params_LoadFontAsset args);

        public delegate void OnCanvasHierarchyChanged_BeforeArgs(Params_OnCanvasHierarchyChanged args);

        public delegate void OnCanvasHierarchyChanged_NormalArgs(Params_OnCanvasHierarchyChanged args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_NormalArgs(Params_OnDestroy args);

        public delegate void OnDidApplyAnimationProperties_BeforeArgs(Params_OnDidApplyAnimationProperties args);

        public delegate void OnDidApplyAnimationProperties_NormalArgs(Params_OnDidApplyAnimationProperties args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void OnPreRenderCanvas_BeforeArgs(Params_OnPreRenderCanvas args);

        public delegate void OnPreRenderCanvas_NormalArgs(Params_OnPreRenderCanvas args);

        public delegate void OnRectTransformDimensionsChange_BeforeArgs(Params_OnRectTransformDimensionsChange args);

        public delegate void OnRectTransformDimensionsChange_NormalArgs(Params_OnRectTransformDimensionsChange args);

        public delegate void OnTransformParentChanged_BeforeArgs(Params_OnTransformParentChanged args);

        public delegate void OnTransformParentChanged_NormalArgs(Params_OnTransformParentChanged args);

        public delegate void Rebuild_BeforeArgs(Params_Rebuild args);

        public delegate void Rebuild_NormalArgs(Params_Rebuild args);

        public delegate void RecalculateClipping_BeforeArgs(Params_RecalculateClipping args);

        public delegate void RecalculateClipping_NormalArgs(Params_RecalculateClipping args);

        public delegate void RecalculateMasking_BeforeArgs(Params_RecalculateMasking args);

        public delegate void RecalculateMasking_NormalArgs(Params_RecalculateMasking args);

        public delegate void set_maskOffset_BeforeArgs(Params_set_maskOffset args);

        public delegate void set_maskOffset_NormalArgs(Params_set_maskOffset args);

        public delegate void SetActiveSubMeshes_BeforeArgs(Params_SetActiveSubMeshes args);

        public delegate void SetActiveSubMeshes_NormalArgs(Params_SetActiveSubMeshes args);

        public delegate void SetAllDirty_BeforeArgs(Params_SetAllDirty args);

        public delegate void SetAllDirty_NormalArgs(Params_SetAllDirty args);

        public delegate void SetArraySizes_BeforeArgs(Params_SetArraySizes args);

        public delegate int SetArraySizes_NormalArgs(Params_SetArraySizes args);

        public delegate void SetCulling_BeforeArgs(Params_SetCulling args);

        public delegate void SetCulling_NormalArgs(Params_SetCulling args);

        public delegate void SetFaceColor_BeforeArgs(Params_SetFaceColor args);

        public delegate void SetFaceColor_NormalArgs(Params_SetFaceColor args);

        public delegate void SetLayoutDirty_BeforeArgs(Params_SetLayoutDirty args);

        public delegate void SetLayoutDirty_NormalArgs(Params_SetLayoutDirty args);

        public delegate void SetMaterialDirty_BeforeArgs(Params_SetMaterialDirty args);

        public delegate void SetMaterialDirty_NormalArgs(Params_SetMaterialDirty args);

        public delegate void SetMeshArrays_BeforeArgs(Params_SetMeshArrays args);

        public delegate void SetMeshArrays_NormalArgs(Params_SetMeshArrays args);

        public delegate void SetOutlineColor_BeforeArgs(Params_SetOutlineColor args);

        public delegate void SetOutlineColor_NormalArgs(Params_SetOutlineColor args);

        public delegate void SetOutlineThickness_BeforeArgs(Params_SetOutlineThickness args);

        public delegate void SetOutlineThickness_NormalArgs(Params_SetOutlineThickness args);

        public delegate void SetPerspectiveCorrection_BeforeArgs(Params_SetPerspectiveCorrection args);

        public delegate void SetPerspectiveCorrection_NormalArgs(Params_SetPerspectiveCorrection args);

        public delegate void SetShaderDepth_BeforeArgs(Params_SetShaderDepth args);

        public delegate void SetShaderDepth_NormalArgs(Params_SetShaderDepth args);

        public delegate void SetSharedMaterial_BeforeArgs(Params_SetSharedMaterial args);

        public delegate void SetSharedMaterial_NormalArgs(Params_SetSharedMaterial args);

        public delegate void SetSharedMaterials_BeforeArgs(Params_SetSharedMaterials args);

        public delegate void SetSharedMaterials_NormalArgs(Params_SetSharedMaterials args);

        public delegate void SetVerticesDirty_BeforeArgs(Params_SetVerticesDirty args);

        public delegate void SetVerticesDirty_NormalArgs(Params_SetVerticesDirty args);

        public delegate void UpdateEnvMapMatrix_BeforeArgs(Params_UpdateEnvMapMatrix args);

        public delegate void UpdateEnvMapMatrix_NormalArgs(Params_UpdateEnvMapMatrix args);

        public delegate void UpdateFontAsset_BeforeArgs(Params_UpdateFontAsset args);

        public delegate void UpdateFontAsset_NormalArgs(Params_UpdateFontAsset args);

        public delegate void UpdateGeometry_BeforeArgs(Params_UpdateGeometry args);

        public delegate void UpdateGeometry_NormalArgs(Params_UpdateGeometry args);

        public delegate void UpdateMask_BeforeArgs(Params_UpdateMask args);

        public delegate void UpdateMask_NormalArgs(Params_UpdateMask args);

        public delegate void UpdateMaterial_BeforeArgs(Params_UpdateMaterial args);

        public delegate void UpdateMaterial_NormalArgs(Params_UpdateMaterial args);

        public delegate void UpdateMeshPadding_BeforeArgs(Params_UpdateMeshPadding args);

        public delegate void UpdateMeshPadding_NormalArgs(Params_UpdateMeshPadding args);

        public delegate void UpdateSDFScale_BeforeArgs(Params_UpdateSDFScale args);

        public delegate void UpdateSDFScale_NormalArgs(Params_UpdateSDFScale args);

        public delegate void UpdateSubObjectPivot_BeforeArgs(Params_UpdateSubObjectPivot args);

        public delegate void UpdateSubObjectPivot_NormalArgs(Params_UpdateSubObjectPivot args);

        public delegate void UpdateVertexData_BeforeArgs(Params_UpdateVertexData args);

        public delegate void UpdateVertexData_NormalArgs(Params_UpdateVertexData args);

        public delegate void UpdateVertexData_TMP_VertexDataUpdateFlags_BeforeArgs(
            Params_UpdateVertexData_TMP_VertexDataUpdateFlags args);

        public delegate void UpdateVertexData_TMP_VertexDataUpdateFlags_NormalArgs(
            Params_UpdateVertexData_TMP_VertexDataUpdateFlags args);

        public sealed class Params_Awake
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_OnEnable
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_OnDisable
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_OnDestroy
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_LoadFontAsset
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_GetCanvas
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_UpdateEnvMapMatrix
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_EnableMasking
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_DisableMasking
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_UpdateMask
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_GetMaterial
        {
            public Material mat;
            public TextMeshProUGUI self;
        }

        public sealed class Params_GetMaterials
        {
            public Material[] mats;
            public TextMeshProUGUI self;
        }

        public sealed class Params_SetSharedMaterial
        {
            public Material mat;
            public TextMeshProUGUI self;
        }

        public sealed class Params_GetSharedMaterials
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_SetSharedMaterials
        {
            public Material[] materials;
            public TextMeshProUGUI self;
        }

        public sealed class Params_SetOutlineThickness
        {
            public TextMeshProUGUI self;
            public float thickness;
        }

        public sealed class Params_SetFaceColor
        {
            public Color32 color;
            public TextMeshProUGUI self;
        }

        public sealed class Params_SetOutlineColor
        {
            public Color32 color;
            public TextMeshProUGUI self;
        }

        public sealed class Params_SetShaderDepth
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_SetCulling
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_SetPerspectiveCorrection
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_GetPaddingForMaterial_Material
        {
            public Material mat;
            public TextMeshProUGUI self;
        }

        public sealed class Params_GetPaddingForMaterial
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_SetMeshArrays
        {
            public TextMeshProUGUI self;
            public int size;
        }

        public sealed class Params_SetArraySizes
        {
            public int[] chars;
            public TextMeshProUGUI self;
        }

        public sealed class Params_ComputeMarginSize
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_OnDidApplyAnimationProperties
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_OnCanvasHierarchyChanged
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_OnTransformParentChanged
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_OnRectTransformDimensionsChange
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_LateUpdate
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_OnPreRenderCanvas
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_GenerateTextMesh
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_GetTextContainerLocalCorners
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_ClearMesh
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_SetActiveSubMeshes
        {
            public TextMeshProUGUI self;
            public bool state;
        }

        public sealed class Params_GetCompoundBounds
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_UpdateSDFScale
        {
            public float lossyScale;
            public TextMeshProUGUI self;
        }

        public sealed class Params_AdjustLineOffset
        {
            public int endIndex;
            public float offset;
            public TextMeshProUGUI self;
            public int startIndex;
        }

        public sealed class Params_get_materialForRendering
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_get_mesh
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_get_canvasRenderer
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_get_inlineGraphicManager
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_CalculateLayoutInputHorizontal
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_CalculateLayoutInputVertical
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_SetVerticesDirty
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_SetLayoutDirty
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_SetMaterialDirty
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_SetAllDirty
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_Rebuild
        {
            public TextMeshProUGUI self;
            public CanvasUpdate update;
        }

        public sealed class Params_UpdateSubObjectPivot
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_GetModifiedMaterial
        {
            public Material baseMaterial;
            public TextMeshProUGUI self;
        }

        public sealed class Params_UpdateMaterial
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_get_maskOffset
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_set_maskOffset
        {
            public TextMeshProUGUI self;
            public Vector4 value;
        }

        public sealed class Params_RecalculateClipping
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_RecalculateMasking
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_UpdateMeshPadding
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_InternalCrossFadeColor
        {
            public float duration;
            public bool ignoreTimeScale;
            public TextMeshProUGUI self;
            public Color targetColor;
            public bool useAlpha;
        }

        public sealed class Params_InternalCrossFadeAlpha
        {
            public float alpha;
            public float duration;
            public bool ignoreTimeScale;
            public TextMeshProUGUI self;
        }

        public sealed class Params_ForceMeshUpdate
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_ForceMeshUpdate_bool
        {
            public bool ignoreInactive;
            public TextMeshProUGUI self;
        }

        public sealed class Params_GetTextInfo
        {
            public TextMeshProUGUI self;
            public string text;
        }

        public sealed class Params_UpdateGeometry
        {
            public int index;
            public Mesh mesh;
            public TextMeshProUGUI self;
        }

        public sealed class Params_UpdateVertexData_TMP_VertexDataUpdateFlags
        {
            public TMP_VertexDataUpdateFlags flags;
            public TextMeshProUGUI self;
        }

        public sealed class Params_UpdateVertexData
        {
            public TextMeshProUGUI self;
        }

        public sealed class Params_UpdateFontAsset
        {
            public TextMeshProUGUI self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.LoadFontAsset_BeforeArgs LoadFontAsset
        {
            add
            {
                HookHandler._beforeLoadFontAsset += value;
                HookHandler.HookLoadFontAsset();
            }
            remove => HookHandler._beforeLoadFontAsset -= value;
        }

        public static event Delegates.GetCanvas_BeforeArgs GetCanvas
        {
            add
            {
                HookHandler._beforeGetCanvas += value;
                HookHandler.HookGetCanvas();
            }
            remove => HookHandler._beforeGetCanvas -= value;
        }

        public static event Delegates.UpdateEnvMapMatrix_BeforeArgs UpdateEnvMapMatrix
        {
            add
            {
                HookHandler._beforeUpdateEnvMapMatrix += value;
                HookHandler.HookUpdateEnvMapMatrix();
            }
            remove => HookHandler._beforeUpdateEnvMapMatrix -= value;
        }

        public static event Delegates.EnableMasking_BeforeArgs EnableMasking
        {
            add
            {
                HookHandler._beforeEnableMasking += value;
                HookHandler.HookEnableMasking();
            }
            remove => HookHandler._beforeEnableMasking -= value;
        }

        public static event Delegates.DisableMasking_BeforeArgs DisableMasking
        {
            add
            {
                HookHandler._beforeDisableMasking += value;
                HookHandler.HookDisableMasking();
            }
            remove => HookHandler._beforeDisableMasking -= value;
        }

        public static event Delegates.UpdateMask_BeforeArgs UpdateMask
        {
            add
            {
                HookHandler._beforeUpdateMask += value;
                HookHandler.HookUpdateMask();
            }
            remove => HookHandler._beforeUpdateMask -= value;
        }

        public static event Delegates.GetMaterial_BeforeArgs GetMaterial
        {
            add
            {
                HookHandler._beforeGetMaterial += value;
                HookHandler.HookGetMaterial();
            }
            remove => HookHandler._beforeGetMaterial -= value;
        }

        public static event Delegates.GetMaterials_BeforeArgs GetMaterials
        {
            add
            {
                HookHandler._beforeGetMaterials += value;
                HookHandler.HookGetMaterials();
            }
            remove => HookHandler._beforeGetMaterials -= value;
        }

        public static event Delegates.SetSharedMaterial_BeforeArgs SetSharedMaterial
        {
            add
            {
                HookHandler._beforeSetSharedMaterial += value;
                HookHandler.HookSetSharedMaterial();
            }
            remove => HookHandler._beforeSetSharedMaterial -= value;
        }

        public static event Delegates.GetSharedMaterials_BeforeArgs GetSharedMaterials
        {
            add
            {
                HookHandler._beforeGetSharedMaterials += value;
                HookHandler.HookGetSharedMaterials();
            }
            remove => HookHandler._beforeGetSharedMaterials -= value;
        }

        public static event Delegates.SetSharedMaterials_BeforeArgs SetSharedMaterials
        {
            add
            {
                HookHandler._beforeSetSharedMaterials += value;
                HookHandler.HookSetSharedMaterials();
            }
            remove => HookHandler._beforeSetSharedMaterials -= value;
        }

        public static event Delegates.SetOutlineThickness_BeforeArgs SetOutlineThickness
        {
            add
            {
                HookHandler._beforeSetOutlineThickness += value;
                HookHandler.HookSetOutlineThickness();
            }
            remove => HookHandler._beforeSetOutlineThickness -= value;
        }

        public static event Delegates.SetFaceColor_BeforeArgs SetFaceColor
        {
            add
            {
                HookHandler._beforeSetFaceColor += value;
                HookHandler.HookSetFaceColor();
            }
            remove => HookHandler._beforeSetFaceColor -= value;
        }

        public static event Delegates.SetOutlineColor_BeforeArgs SetOutlineColor
        {
            add
            {
                HookHandler._beforeSetOutlineColor += value;
                HookHandler.HookSetOutlineColor();
            }
            remove => HookHandler._beforeSetOutlineColor -= value;
        }

        public static event Delegates.SetShaderDepth_BeforeArgs SetShaderDepth
        {
            add
            {
                HookHandler._beforeSetShaderDepth += value;
                HookHandler.HookSetShaderDepth();
            }
            remove => HookHandler._beforeSetShaderDepth -= value;
        }

        public static event Delegates.SetCulling_BeforeArgs SetCulling
        {
            add
            {
                HookHandler._beforeSetCulling += value;
                HookHandler.HookSetCulling();
            }
            remove => HookHandler._beforeSetCulling -= value;
        }

        public static event Delegates.SetPerspectiveCorrection_BeforeArgs SetPerspectiveCorrection
        {
            add
            {
                HookHandler._beforeSetPerspectiveCorrection += value;
                HookHandler.HookSetPerspectiveCorrection();
            }
            remove => HookHandler._beforeSetPerspectiveCorrection -= value;
        }

        public static event Delegates.GetPaddingForMaterial_Material_BeforeArgs GetPaddingForMaterial_Material
        {
            add
            {
                HookHandler._beforeGetPaddingForMaterial_Material += value;
                HookHandler.HookGetPaddingForMaterial_Material();
            }
            remove => HookHandler._beforeGetPaddingForMaterial_Material -= value;
        }

        public static event Delegates.GetPaddingForMaterial_BeforeArgs GetPaddingForMaterial
        {
            add
            {
                HookHandler._beforeGetPaddingForMaterial += value;
                HookHandler.HookGetPaddingForMaterial();
            }
            remove => HookHandler._beforeGetPaddingForMaterial -= value;
        }

        public static event Delegates.SetMeshArrays_BeforeArgs SetMeshArrays
        {
            add
            {
                HookHandler._beforeSetMeshArrays += value;
                HookHandler.HookSetMeshArrays();
            }
            remove => HookHandler._beforeSetMeshArrays -= value;
        }

        public static event Delegates.SetArraySizes_BeforeArgs SetArraySizes
        {
            add
            {
                HookHandler._beforeSetArraySizes += value;
                HookHandler.HookSetArraySizes();
            }
            remove => HookHandler._beforeSetArraySizes -= value;
        }

        public static event Delegates.ComputeMarginSize_BeforeArgs ComputeMarginSize
        {
            add
            {
                HookHandler._beforeComputeMarginSize += value;
                HookHandler.HookComputeMarginSize();
            }
            remove => HookHandler._beforeComputeMarginSize -= value;
        }

        public static event Delegates.OnDidApplyAnimationProperties_BeforeArgs OnDidApplyAnimationProperties
        {
            add
            {
                HookHandler._beforeOnDidApplyAnimationProperties += value;
                HookHandler.HookOnDidApplyAnimationProperties();
            }
            remove => HookHandler._beforeOnDidApplyAnimationProperties -= value;
        }

        public static event Delegates.OnCanvasHierarchyChanged_BeforeArgs OnCanvasHierarchyChanged
        {
            add
            {
                HookHandler._beforeOnCanvasHierarchyChanged += value;
                HookHandler.HookOnCanvasHierarchyChanged();
            }
            remove => HookHandler._beforeOnCanvasHierarchyChanged -= value;
        }

        public static event Delegates.OnTransformParentChanged_BeforeArgs OnTransformParentChanged
        {
            add
            {
                HookHandler._beforeOnTransformParentChanged += value;
                HookHandler.HookOnTransformParentChanged();
            }
            remove => HookHandler._beforeOnTransformParentChanged -= value;
        }

        public static event Delegates.OnRectTransformDimensionsChange_BeforeArgs OnRectTransformDimensionsChange
        {
            add
            {
                HookHandler._beforeOnRectTransformDimensionsChange += value;
                HookHandler.HookOnRectTransformDimensionsChange();
            }
            remove => HookHandler._beforeOnRectTransformDimensionsChange -= value;
        }

        public static event Delegates.LateUpdate_BeforeArgs LateUpdate
        {
            add
            {
                HookHandler._beforeLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._beforeLateUpdate -= value;
        }

        public static event Delegates.OnPreRenderCanvas_BeforeArgs OnPreRenderCanvas
        {
            add
            {
                HookHandler._beforeOnPreRenderCanvas += value;
                HookHandler.HookOnPreRenderCanvas();
            }
            remove => HookHandler._beforeOnPreRenderCanvas -= value;
        }

        public static event Delegates.GenerateTextMesh_BeforeArgs GenerateTextMesh
        {
            add
            {
                HookHandler._beforeGenerateTextMesh += value;
                HookHandler.HookGenerateTextMesh();
            }
            remove => HookHandler._beforeGenerateTextMesh -= value;
        }

        public static event Delegates.GetTextContainerLocalCorners_BeforeArgs GetTextContainerLocalCorners
        {
            add
            {
                HookHandler._beforeGetTextContainerLocalCorners += value;
                HookHandler.HookGetTextContainerLocalCorners();
            }
            remove => HookHandler._beforeGetTextContainerLocalCorners -= value;
        }

        public static event Delegates.ClearMesh_BeforeArgs ClearMesh
        {
            add
            {
                HookHandler._beforeClearMesh += value;
                HookHandler.HookClearMesh();
            }
            remove => HookHandler._beforeClearMesh -= value;
        }

        public static event Delegates.SetActiveSubMeshes_BeforeArgs SetActiveSubMeshes
        {
            add
            {
                HookHandler._beforeSetActiveSubMeshes += value;
                HookHandler.HookSetActiveSubMeshes();
            }
            remove => HookHandler._beforeSetActiveSubMeshes -= value;
        }

        public static event Delegates.GetCompoundBounds_BeforeArgs GetCompoundBounds
        {
            add
            {
                HookHandler._beforeGetCompoundBounds += value;
                HookHandler.HookGetCompoundBounds();
            }
            remove => HookHandler._beforeGetCompoundBounds -= value;
        }

        public static event Delegates.UpdateSDFScale_BeforeArgs UpdateSDFScale
        {
            add
            {
                HookHandler._beforeUpdateSDFScale += value;
                HookHandler.HookUpdateSDFScale();
            }
            remove => HookHandler._beforeUpdateSDFScale -= value;
        }

        public static event Delegates.AdjustLineOffset_BeforeArgs AdjustLineOffset
        {
            add
            {
                HookHandler._beforeAdjustLineOffset += value;
                HookHandler.HookAdjustLineOffset();
            }
            remove => HookHandler._beforeAdjustLineOffset -= value;
        }

        public static event Delegates.get_materialForRendering_BeforeArgs get_materialForRendering
        {
            add
            {
                HookHandler._beforeget_materialForRendering += value;
                HookHandler.Hookget_materialForRendering();
            }
            remove => HookHandler._beforeget_materialForRendering -= value;
        }

        public static event Delegates.get_mesh_BeforeArgs get_mesh
        {
            add
            {
                HookHandler._beforeget_mesh += value;
                HookHandler.Hookget_mesh();
            }
            remove => HookHandler._beforeget_mesh -= value;
        }

        public static event Delegates.get_canvasRenderer_BeforeArgs get_canvasRenderer
        {
            add
            {
                HookHandler._beforeget_canvasRenderer += value;
                HookHandler.Hookget_canvasRenderer();
            }
            remove => HookHandler._beforeget_canvasRenderer -= value;
        }

        public static event Delegates.get_inlineGraphicManager_BeforeArgs get_inlineGraphicManager
        {
            add
            {
                HookHandler._beforeget_inlineGraphicManager += value;
                HookHandler.Hookget_inlineGraphicManager();
            }
            remove => HookHandler._beforeget_inlineGraphicManager -= value;
        }

        public static event Delegates.CalculateLayoutInputHorizontal_BeforeArgs CalculateLayoutInputHorizontal
        {
            add
            {
                HookHandler._beforeCalculateLayoutInputHorizontal += value;
                HookHandler.HookCalculateLayoutInputHorizontal();
            }
            remove => HookHandler._beforeCalculateLayoutInputHorizontal -= value;
        }

        public static event Delegates.CalculateLayoutInputVertical_BeforeArgs CalculateLayoutInputVertical
        {
            add
            {
                HookHandler._beforeCalculateLayoutInputVertical += value;
                HookHandler.HookCalculateLayoutInputVertical();
            }
            remove => HookHandler._beforeCalculateLayoutInputVertical -= value;
        }

        public static event Delegates.SetVerticesDirty_BeforeArgs SetVerticesDirty
        {
            add
            {
                HookHandler._beforeSetVerticesDirty += value;
                HookHandler.HookSetVerticesDirty();
            }
            remove => HookHandler._beforeSetVerticesDirty -= value;
        }

        public static event Delegates.SetLayoutDirty_BeforeArgs SetLayoutDirty
        {
            add
            {
                HookHandler._beforeSetLayoutDirty += value;
                HookHandler.HookSetLayoutDirty();
            }
            remove => HookHandler._beforeSetLayoutDirty -= value;
        }

        public static event Delegates.SetMaterialDirty_BeforeArgs SetMaterialDirty
        {
            add
            {
                HookHandler._beforeSetMaterialDirty += value;
                HookHandler.HookSetMaterialDirty();
            }
            remove => HookHandler._beforeSetMaterialDirty -= value;
        }

        public static event Delegates.SetAllDirty_BeforeArgs SetAllDirty
        {
            add
            {
                HookHandler._beforeSetAllDirty += value;
                HookHandler.HookSetAllDirty();
            }
            remove => HookHandler._beforeSetAllDirty -= value;
        }

        public static event Delegates.Rebuild_BeforeArgs Rebuild
        {
            add
            {
                HookHandler._beforeRebuild += value;
                HookHandler.HookRebuild();
            }
            remove => HookHandler._beforeRebuild -= value;
        }

        public static event Delegates.UpdateSubObjectPivot_BeforeArgs UpdateSubObjectPivot
        {
            add
            {
                HookHandler._beforeUpdateSubObjectPivot += value;
                HookHandler.HookUpdateSubObjectPivot();
            }
            remove => HookHandler._beforeUpdateSubObjectPivot -= value;
        }

        public static event Delegates.GetModifiedMaterial_BeforeArgs GetModifiedMaterial
        {
            add
            {
                HookHandler._beforeGetModifiedMaterial += value;
                HookHandler.HookGetModifiedMaterial();
            }
            remove => HookHandler._beforeGetModifiedMaterial -= value;
        }

        public static event Delegates.UpdateMaterial_BeforeArgs UpdateMaterial
        {
            add
            {
                HookHandler._beforeUpdateMaterial += value;
                HookHandler.HookUpdateMaterial();
            }
            remove => HookHandler._beforeUpdateMaterial -= value;
        }

        public static event Delegates.get_maskOffset_BeforeArgs get_maskOffset
        {
            add
            {
                HookHandler._beforeget_maskOffset += value;
                HookHandler.Hookget_maskOffset();
            }
            remove => HookHandler._beforeget_maskOffset -= value;
        }

        public static event Delegates.set_maskOffset_BeforeArgs set_maskOffset
        {
            add
            {
                HookHandler._beforeset_maskOffset += value;
                HookHandler.Hookset_maskOffset();
            }
            remove => HookHandler._beforeset_maskOffset -= value;
        }

        public static event Delegates.RecalculateClipping_BeforeArgs RecalculateClipping
        {
            add
            {
                HookHandler._beforeRecalculateClipping += value;
                HookHandler.HookRecalculateClipping();
            }
            remove => HookHandler._beforeRecalculateClipping -= value;
        }

        public static event Delegates.RecalculateMasking_BeforeArgs RecalculateMasking
        {
            add
            {
                HookHandler._beforeRecalculateMasking += value;
                HookHandler.HookRecalculateMasking();
            }
            remove => HookHandler._beforeRecalculateMasking -= value;
        }

        public static event Delegates.UpdateMeshPadding_BeforeArgs UpdateMeshPadding
        {
            add
            {
                HookHandler._beforeUpdateMeshPadding += value;
                HookHandler.HookUpdateMeshPadding();
            }
            remove => HookHandler._beforeUpdateMeshPadding -= value;
        }

        public static event Delegates.InternalCrossFadeColor_BeforeArgs InternalCrossFadeColor
        {
            add
            {
                HookHandler._beforeInternalCrossFadeColor += value;
                HookHandler.HookInternalCrossFadeColor();
            }
            remove => HookHandler._beforeInternalCrossFadeColor -= value;
        }

        public static event Delegates.InternalCrossFadeAlpha_BeforeArgs InternalCrossFadeAlpha
        {
            add
            {
                HookHandler._beforeInternalCrossFadeAlpha += value;
                HookHandler.HookInternalCrossFadeAlpha();
            }
            remove => HookHandler._beforeInternalCrossFadeAlpha -= value;
        }

        public static event Delegates.ForceMeshUpdate_BeforeArgs ForceMeshUpdate
        {
            add
            {
                HookHandler._beforeForceMeshUpdate += value;
                HookHandler.HookForceMeshUpdate();
            }
            remove => HookHandler._beforeForceMeshUpdate -= value;
        }

        public static event Delegates.ForceMeshUpdate_bool_BeforeArgs ForceMeshUpdate_bool
        {
            add
            {
                HookHandler._beforeForceMeshUpdate_bool += value;
                HookHandler.HookForceMeshUpdate_bool();
            }
            remove => HookHandler._beforeForceMeshUpdate_bool -= value;
        }

        public static event Delegates.GetTextInfo_BeforeArgs GetTextInfo
        {
            add
            {
                HookHandler._beforeGetTextInfo += value;
                HookHandler.HookGetTextInfo();
            }
            remove => HookHandler._beforeGetTextInfo -= value;
        }

        public static event Delegates.UpdateGeometry_BeforeArgs UpdateGeometry
        {
            add
            {
                HookHandler._beforeUpdateGeometry += value;
                HookHandler.HookUpdateGeometry();
            }
            remove => HookHandler._beforeUpdateGeometry -= value;
        }

        public static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_BeforeArgs
            UpdateVertexData_TMP_VertexDataUpdateFlags
            {
                add
                {
                    HookHandler._beforeUpdateVertexData_TMP_VertexDataUpdateFlags += value;
                    HookHandler.HookUpdateVertexData_TMP_VertexDataUpdateFlags();
                }
                remove => HookHandler._beforeUpdateVertexData_TMP_VertexDataUpdateFlags -= value;
            }

        public static event Delegates.UpdateVertexData_BeforeArgs UpdateVertexData
        {
            add
            {
                HookHandler._beforeUpdateVertexData += value;
                HookHandler.HookUpdateVertexData();
            }
            remove => HookHandler._beforeUpdateVertexData -= value;
        }

        public static event Delegates.UpdateFontAsset_BeforeArgs UpdateFontAsset
        {
            add
            {
                HookHandler._beforeUpdateFontAsset += value;
                HookHandler.HookUpdateFontAsset();
            }
            remove => HookHandler._beforeUpdateFontAsset -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.LoadFontAsset_NormalArgs LoadFontAsset
        {
            add
            {
                HookHandler._afterLoadFontAsset += value;
                HookHandler.HookLoadFontAsset();
            }
            remove => HookHandler._afterLoadFontAsset -= value;
        }

        public static event Delegates.GetCanvas_NormalArgs GetCanvas
        {
            add
            {
                HookHandler._afterGetCanvas += value;
                HookHandler.HookGetCanvas();
            }
            remove => HookHandler._afterGetCanvas -= value;
        }

        public static event Delegates.UpdateEnvMapMatrix_NormalArgs UpdateEnvMapMatrix
        {
            add
            {
                HookHandler._afterUpdateEnvMapMatrix += value;
                HookHandler.HookUpdateEnvMapMatrix();
            }
            remove => HookHandler._afterUpdateEnvMapMatrix -= value;
        }

        public static event Delegates.EnableMasking_NormalArgs EnableMasking
        {
            add
            {
                HookHandler._afterEnableMasking += value;
                HookHandler.HookEnableMasking();
            }
            remove => HookHandler._afterEnableMasking -= value;
        }

        public static event Delegates.DisableMasking_NormalArgs DisableMasking
        {
            add
            {
                HookHandler._afterDisableMasking += value;
                HookHandler.HookDisableMasking();
            }
            remove => HookHandler._afterDisableMasking -= value;
        }

        public static event Delegates.UpdateMask_NormalArgs UpdateMask
        {
            add
            {
                HookHandler._afterUpdateMask += value;
                HookHandler.HookUpdateMask();
            }
            remove => HookHandler._afterUpdateMask -= value;
        }

        public static event Delegates.GetMaterial_NormalArgs GetMaterial
        {
            add
            {
                HookHandler._afterGetMaterial += value;
                HookHandler.HookGetMaterial();
            }
            remove => HookHandler._afterGetMaterial -= value;
        }

        public static event Delegates.GetMaterials_NormalArgs GetMaterials
        {
            add
            {
                HookHandler._afterGetMaterials += value;
                HookHandler.HookGetMaterials();
            }
            remove => HookHandler._afterGetMaterials -= value;
        }

        public static event Delegates.SetSharedMaterial_NormalArgs SetSharedMaterial
        {
            add
            {
                HookHandler._afterSetSharedMaterial += value;
                HookHandler.HookSetSharedMaterial();
            }
            remove => HookHandler._afterSetSharedMaterial -= value;
        }

        public static event Delegates.GetSharedMaterials_NormalArgs GetSharedMaterials
        {
            add
            {
                HookHandler._afterGetSharedMaterials += value;
                HookHandler.HookGetSharedMaterials();
            }
            remove => HookHandler._afterGetSharedMaterials -= value;
        }

        public static event Delegates.SetSharedMaterials_NormalArgs SetSharedMaterials
        {
            add
            {
                HookHandler._afterSetSharedMaterials += value;
                HookHandler.HookSetSharedMaterials();
            }
            remove => HookHandler._afterSetSharedMaterials -= value;
        }

        public static event Delegates.SetOutlineThickness_NormalArgs SetOutlineThickness
        {
            add
            {
                HookHandler._afterSetOutlineThickness += value;
                HookHandler.HookSetOutlineThickness();
            }
            remove => HookHandler._afterSetOutlineThickness -= value;
        }

        public static event Delegates.SetFaceColor_NormalArgs SetFaceColor
        {
            add
            {
                HookHandler._afterSetFaceColor += value;
                HookHandler.HookSetFaceColor();
            }
            remove => HookHandler._afterSetFaceColor -= value;
        }

        public static event Delegates.SetOutlineColor_NormalArgs SetOutlineColor
        {
            add
            {
                HookHandler._afterSetOutlineColor += value;
                HookHandler.HookSetOutlineColor();
            }
            remove => HookHandler._afterSetOutlineColor -= value;
        }

        public static event Delegates.SetShaderDepth_NormalArgs SetShaderDepth
        {
            add
            {
                HookHandler._afterSetShaderDepth += value;
                HookHandler.HookSetShaderDepth();
            }
            remove => HookHandler._afterSetShaderDepth -= value;
        }

        public static event Delegates.SetCulling_NormalArgs SetCulling
        {
            add
            {
                HookHandler._afterSetCulling += value;
                HookHandler.HookSetCulling();
            }
            remove => HookHandler._afterSetCulling -= value;
        }

        public static event Delegates.SetPerspectiveCorrection_NormalArgs SetPerspectiveCorrection
        {
            add
            {
                HookHandler._afterSetPerspectiveCorrection += value;
                HookHandler.HookSetPerspectiveCorrection();
            }
            remove => HookHandler._afterSetPerspectiveCorrection -= value;
        }

        public static event Delegates.GetPaddingForMaterial_Material_NormalArgs GetPaddingForMaterial_Material
        {
            add
            {
                HookHandler._afterGetPaddingForMaterial_Material += value;
                HookHandler.HookGetPaddingForMaterial_Material();
            }
            remove => HookHandler._afterGetPaddingForMaterial_Material -= value;
        }

        public static event Delegates.GetPaddingForMaterial_NormalArgs GetPaddingForMaterial
        {
            add
            {
                HookHandler._afterGetPaddingForMaterial += value;
                HookHandler.HookGetPaddingForMaterial();
            }
            remove => HookHandler._afterGetPaddingForMaterial -= value;
        }

        public static event Delegates.SetMeshArrays_NormalArgs SetMeshArrays
        {
            add
            {
                HookHandler._afterSetMeshArrays += value;
                HookHandler.HookSetMeshArrays();
            }
            remove => HookHandler._afterSetMeshArrays -= value;
        }

        public static event Delegates.SetArraySizes_NormalArgs SetArraySizes
        {
            add
            {
                HookHandler._afterSetArraySizes += value;
                HookHandler.HookSetArraySizes();
            }
            remove => HookHandler._afterSetArraySizes -= value;
        }

        public static event Delegates.ComputeMarginSize_NormalArgs ComputeMarginSize
        {
            add
            {
                HookHandler._afterComputeMarginSize += value;
                HookHandler.HookComputeMarginSize();
            }
            remove => HookHandler._afterComputeMarginSize -= value;
        }

        public static event Delegates.OnDidApplyAnimationProperties_NormalArgs OnDidApplyAnimationProperties
        {
            add
            {
                HookHandler._afterOnDidApplyAnimationProperties += value;
                HookHandler.HookOnDidApplyAnimationProperties();
            }
            remove => HookHandler._afterOnDidApplyAnimationProperties -= value;
        }

        public static event Delegates.OnCanvasHierarchyChanged_NormalArgs OnCanvasHierarchyChanged
        {
            add
            {
                HookHandler._afterOnCanvasHierarchyChanged += value;
                HookHandler.HookOnCanvasHierarchyChanged();
            }
            remove => HookHandler._afterOnCanvasHierarchyChanged -= value;
        }

        public static event Delegates.OnTransformParentChanged_NormalArgs OnTransformParentChanged
        {
            add
            {
                HookHandler._afterOnTransformParentChanged += value;
                HookHandler.HookOnTransformParentChanged();
            }
            remove => HookHandler._afterOnTransformParentChanged -= value;
        }

        public static event Delegates.OnRectTransformDimensionsChange_NormalArgs OnRectTransformDimensionsChange
        {
            add
            {
                HookHandler._afterOnRectTransformDimensionsChange += value;
                HookHandler.HookOnRectTransformDimensionsChange();
            }
            remove => HookHandler._afterOnRectTransformDimensionsChange -= value;
        }

        public static event Delegates.LateUpdate_NormalArgs LateUpdate
        {
            add
            {
                HookHandler._afterLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._afterLateUpdate -= value;
        }

        public static event Delegates.OnPreRenderCanvas_NormalArgs OnPreRenderCanvas
        {
            add
            {
                HookHandler._afterOnPreRenderCanvas += value;
                HookHandler.HookOnPreRenderCanvas();
            }
            remove => HookHandler._afterOnPreRenderCanvas -= value;
        }

        public static event Delegates.GenerateTextMesh_NormalArgs GenerateTextMesh
        {
            add
            {
                HookHandler._afterGenerateTextMesh += value;
                HookHandler.HookGenerateTextMesh();
            }
            remove => HookHandler._afterGenerateTextMesh -= value;
        }

        public static event Delegates.GetTextContainerLocalCorners_NormalArgs GetTextContainerLocalCorners
        {
            add
            {
                HookHandler._afterGetTextContainerLocalCorners += value;
                HookHandler.HookGetTextContainerLocalCorners();
            }
            remove => HookHandler._afterGetTextContainerLocalCorners -= value;
        }

        public static event Delegates.ClearMesh_NormalArgs ClearMesh
        {
            add
            {
                HookHandler._afterClearMesh += value;
                HookHandler.HookClearMesh();
            }
            remove => HookHandler._afterClearMesh -= value;
        }

        public static event Delegates.SetActiveSubMeshes_NormalArgs SetActiveSubMeshes
        {
            add
            {
                HookHandler._afterSetActiveSubMeshes += value;
                HookHandler.HookSetActiveSubMeshes();
            }
            remove => HookHandler._afterSetActiveSubMeshes -= value;
        }

        public static event Delegates.GetCompoundBounds_NormalArgs GetCompoundBounds
        {
            add
            {
                HookHandler._afterGetCompoundBounds += value;
                HookHandler.HookGetCompoundBounds();
            }
            remove => HookHandler._afterGetCompoundBounds -= value;
        }

        public static event Delegates.UpdateSDFScale_NormalArgs UpdateSDFScale
        {
            add
            {
                HookHandler._afterUpdateSDFScale += value;
                HookHandler.HookUpdateSDFScale();
            }
            remove => HookHandler._afterUpdateSDFScale -= value;
        }

        public static event Delegates.AdjustLineOffset_NormalArgs AdjustLineOffset
        {
            add
            {
                HookHandler._afterAdjustLineOffset += value;
                HookHandler.HookAdjustLineOffset();
            }
            remove => HookHandler._afterAdjustLineOffset -= value;
        }

        public static event Delegates.get_materialForRendering_NormalArgs get_materialForRendering
        {
            add
            {
                HookHandler._afterget_materialForRendering += value;
                HookHandler.Hookget_materialForRendering();
            }
            remove => HookHandler._afterget_materialForRendering -= value;
        }

        public static event Delegates.get_mesh_NormalArgs get_mesh
        {
            add
            {
                HookHandler._afterget_mesh += value;
                HookHandler.Hookget_mesh();
            }
            remove => HookHandler._afterget_mesh -= value;
        }

        public static event Delegates.get_canvasRenderer_NormalArgs get_canvasRenderer
        {
            add
            {
                HookHandler._afterget_canvasRenderer += value;
                HookHandler.Hookget_canvasRenderer();
            }
            remove => HookHandler._afterget_canvasRenderer -= value;
        }

        public static event Delegates.get_inlineGraphicManager_NormalArgs get_inlineGraphicManager
        {
            add
            {
                HookHandler._afterget_inlineGraphicManager += value;
                HookHandler.Hookget_inlineGraphicManager();
            }
            remove => HookHandler._afterget_inlineGraphicManager -= value;
        }

        public static event Delegates.CalculateLayoutInputHorizontal_NormalArgs CalculateLayoutInputHorizontal
        {
            add
            {
                HookHandler._afterCalculateLayoutInputHorizontal += value;
                HookHandler.HookCalculateLayoutInputHorizontal();
            }
            remove => HookHandler._afterCalculateLayoutInputHorizontal -= value;
        }

        public static event Delegates.CalculateLayoutInputVertical_NormalArgs CalculateLayoutInputVertical
        {
            add
            {
                HookHandler._afterCalculateLayoutInputVertical += value;
                HookHandler.HookCalculateLayoutInputVertical();
            }
            remove => HookHandler._afterCalculateLayoutInputVertical -= value;
        }

        public static event Delegates.SetVerticesDirty_NormalArgs SetVerticesDirty
        {
            add
            {
                HookHandler._afterSetVerticesDirty += value;
                HookHandler.HookSetVerticesDirty();
            }
            remove => HookHandler._afterSetVerticesDirty -= value;
        }

        public static event Delegates.SetLayoutDirty_NormalArgs SetLayoutDirty
        {
            add
            {
                HookHandler._afterSetLayoutDirty += value;
                HookHandler.HookSetLayoutDirty();
            }
            remove => HookHandler._afterSetLayoutDirty -= value;
        }

        public static event Delegates.SetMaterialDirty_NormalArgs SetMaterialDirty
        {
            add
            {
                HookHandler._afterSetMaterialDirty += value;
                HookHandler.HookSetMaterialDirty();
            }
            remove => HookHandler._afterSetMaterialDirty -= value;
        }

        public static event Delegates.SetAllDirty_NormalArgs SetAllDirty
        {
            add
            {
                HookHandler._afterSetAllDirty += value;
                HookHandler.HookSetAllDirty();
            }
            remove => HookHandler._afterSetAllDirty -= value;
        }

        public static event Delegates.Rebuild_NormalArgs Rebuild
        {
            add
            {
                HookHandler._afterRebuild += value;
                HookHandler.HookRebuild();
            }
            remove => HookHandler._afterRebuild -= value;
        }

        public static event Delegates.UpdateSubObjectPivot_NormalArgs UpdateSubObjectPivot
        {
            add
            {
                HookHandler._afterUpdateSubObjectPivot += value;
                HookHandler.HookUpdateSubObjectPivot();
            }
            remove => HookHandler._afterUpdateSubObjectPivot -= value;
        }

        public static event Delegates.GetModifiedMaterial_NormalArgs GetModifiedMaterial
        {
            add
            {
                HookHandler._afterGetModifiedMaterial += value;
                HookHandler.HookGetModifiedMaterial();
            }
            remove => HookHandler._afterGetModifiedMaterial -= value;
        }

        public static event Delegates.UpdateMaterial_NormalArgs UpdateMaterial
        {
            add
            {
                HookHandler._afterUpdateMaterial += value;
                HookHandler.HookUpdateMaterial();
            }
            remove => HookHandler._afterUpdateMaterial -= value;
        }

        public static event Delegates.get_maskOffset_NormalArgs get_maskOffset
        {
            add
            {
                HookHandler._afterget_maskOffset += value;
                HookHandler.Hookget_maskOffset();
            }
            remove => HookHandler._afterget_maskOffset -= value;
        }

        public static event Delegates.set_maskOffset_NormalArgs set_maskOffset
        {
            add
            {
                HookHandler._afterset_maskOffset += value;
                HookHandler.Hookset_maskOffset();
            }
            remove => HookHandler._afterset_maskOffset -= value;
        }

        public static event Delegates.RecalculateClipping_NormalArgs RecalculateClipping
        {
            add
            {
                HookHandler._afterRecalculateClipping += value;
                HookHandler.HookRecalculateClipping();
            }
            remove => HookHandler._afterRecalculateClipping -= value;
        }

        public static event Delegates.RecalculateMasking_NormalArgs RecalculateMasking
        {
            add
            {
                HookHandler._afterRecalculateMasking += value;
                HookHandler.HookRecalculateMasking();
            }
            remove => HookHandler._afterRecalculateMasking -= value;
        }

        public static event Delegates.UpdateMeshPadding_NormalArgs UpdateMeshPadding
        {
            add
            {
                HookHandler._afterUpdateMeshPadding += value;
                HookHandler.HookUpdateMeshPadding();
            }
            remove => HookHandler._afterUpdateMeshPadding -= value;
        }

        public static event Delegates.InternalCrossFadeColor_NormalArgs InternalCrossFadeColor
        {
            add
            {
                HookHandler._afterInternalCrossFadeColor += value;
                HookHandler.HookInternalCrossFadeColor();
            }
            remove => HookHandler._afterInternalCrossFadeColor -= value;
        }

        public static event Delegates.InternalCrossFadeAlpha_NormalArgs InternalCrossFadeAlpha
        {
            add
            {
                HookHandler._afterInternalCrossFadeAlpha += value;
                HookHandler.HookInternalCrossFadeAlpha();
            }
            remove => HookHandler._afterInternalCrossFadeAlpha -= value;
        }

        public static event Delegates.ForceMeshUpdate_NormalArgs ForceMeshUpdate
        {
            add
            {
                HookHandler._afterForceMeshUpdate += value;
                HookHandler.HookForceMeshUpdate();
            }
            remove => HookHandler._afterForceMeshUpdate -= value;
        }

        public static event Delegates.ForceMeshUpdate_bool_NormalArgs ForceMeshUpdate_bool
        {
            add
            {
                HookHandler._afterForceMeshUpdate_bool += value;
                HookHandler.HookForceMeshUpdate_bool();
            }
            remove => HookHandler._afterForceMeshUpdate_bool -= value;
        }

        public static event Delegates.GetTextInfo_NormalArgs GetTextInfo
        {
            add
            {
                HookHandler._afterGetTextInfo += value;
                HookHandler.HookGetTextInfo();
            }
            remove => HookHandler._afterGetTextInfo -= value;
        }

        public static event Delegates.UpdateGeometry_NormalArgs UpdateGeometry
        {
            add
            {
                HookHandler._afterUpdateGeometry += value;
                HookHandler.HookUpdateGeometry();
            }
            remove => HookHandler._afterUpdateGeometry -= value;
        }

        public static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_NormalArgs
            UpdateVertexData_TMP_VertexDataUpdateFlags
            {
                add
                {
                    HookHandler._afterUpdateVertexData_TMP_VertexDataUpdateFlags += value;
                    HookHandler.HookUpdateVertexData_TMP_VertexDataUpdateFlags();
                }
                remove => HookHandler._afterUpdateVertexData_TMP_VertexDataUpdateFlags -= value;
            }

        public static event Delegates.UpdateVertexData_NormalArgs UpdateVertexData
        {
            add
            {
                HookHandler._afterUpdateVertexData += value;
                HookHandler.HookUpdateVertexData();
            }
            remove => HookHandler._afterUpdateVertexData -= value;
        }

        public static event Delegates.UpdateFontAsset_NormalArgs UpdateFontAsset
        {
            add
            {
                HookHandler._afterUpdateFontAsset += value;
                HookHandler.HookUpdateFontAsset();
            }
            remove => HookHandler._afterUpdateFontAsset -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add => HookEndpointManager.Add<Delegates.Awake_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "Awake"), value);
            remove => HookEndpointManager.Remove<Delegates.Awake_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "Awake"), value);
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnEnable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnEnable"), value);
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add => HookEndpointManager.Add<Delegates.OnDisable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnDisable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDisable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnDisable"), value);
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add => HookEndpointManager.Add<Delegates.OnDestroy_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnDestroy"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDestroy_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnDestroy"), value);
        }

        public static event Delegates.LoadFontAsset_NormalArgs LoadFontAsset
        {
            add => HookEndpointManager.Add<Delegates.LoadFontAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "LoadFontAsset"), value);
            remove => HookEndpointManager.Remove<Delegates.LoadFontAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "LoadFontAsset"), value);
        }

        public static event Delegates.GetCanvas_NormalArgs GetCanvas
        {
            add => HookEndpointManager.Add<Delegates.GetCanvas_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetCanvas"), value);
            remove => HookEndpointManager.Remove<Delegates.GetCanvas_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetCanvas"), value);
        }

        public static event Delegates.UpdateEnvMapMatrix_NormalArgs UpdateEnvMapMatrix
        {
            add => HookEndpointManager.Add<Delegates.UpdateEnvMapMatrix_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateEnvMapMatrix"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateEnvMapMatrix_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateEnvMapMatrix"), value);
        }

        public static event Delegates.EnableMasking_NormalArgs EnableMasking
        {
            add => HookEndpointManager.Add<Delegates.EnableMasking_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "EnableMasking"), value);
            remove => HookEndpointManager.Remove<Delegates.EnableMasking_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "EnableMasking"), value);
        }

        public static event Delegates.DisableMasking_NormalArgs DisableMasking
        {
            add => HookEndpointManager.Add<Delegates.DisableMasking_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "DisableMasking"), value);
            remove => HookEndpointManager.Remove<Delegates.DisableMasking_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "DisableMasking"), value);
        }

        public static event Delegates.UpdateMask_NormalArgs UpdateMask
        {
            add => HookEndpointManager.Add<Delegates.UpdateMask_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateMask"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateMask_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateMask"), value);
        }

        public static event Delegates.GetMaterial_NormalArgs GetMaterial
        {
            add => HookEndpointManager.Add<Delegates.GetMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.GetMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetMaterial"), value);
        }

        public static event Delegates.GetMaterials_NormalArgs GetMaterials
        {
            add => HookEndpointManager.Add<Delegates.GetMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetMaterials"), value);
            remove => HookEndpointManager.Remove<Delegates.GetMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetMaterials"), value);
        }

        public static event Delegates.SetSharedMaterial_NormalArgs SetSharedMaterial
        {
            add => HookEndpointManager.Add<Delegates.SetSharedMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetSharedMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.SetSharedMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetSharedMaterial"), value);
        }

        public static event Delegates.GetSharedMaterials_NormalArgs GetSharedMaterials
        {
            add => HookEndpointManager.Add<Delegates.GetSharedMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetSharedMaterials"), value);
            remove => HookEndpointManager.Remove<Delegates.GetSharedMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetSharedMaterials"), value);
        }

        public static event Delegates.SetSharedMaterials_NormalArgs SetSharedMaterials
        {
            add => HookEndpointManager.Add<Delegates.SetSharedMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetSharedMaterials"), value);
            remove => HookEndpointManager.Remove<Delegates.SetSharedMaterials_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetSharedMaterials"), value);
        }

        public static event Delegates.SetOutlineThickness_NormalArgs SetOutlineThickness
        {
            add => HookEndpointManager.Add<Delegates.SetOutlineThickness_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetOutlineThickness"), value);
            remove => HookEndpointManager.Remove<Delegates.SetOutlineThickness_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetOutlineThickness"), value);
        }

        public static event Delegates.SetFaceColor_NormalArgs SetFaceColor
        {
            add => HookEndpointManager.Add<Delegates.SetFaceColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetFaceColor"), value);
            remove => HookEndpointManager.Remove<Delegates.SetFaceColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetFaceColor"), value);
        }

        public static event Delegates.SetOutlineColor_NormalArgs SetOutlineColor
        {
            add => HookEndpointManager.Add<Delegates.SetOutlineColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetOutlineColor"), value);
            remove => HookEndpointManager.Remove<Delegates.SetOutlineColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetOutlineColor"), value);
        }

        public static event Delegates.SetShaderDepth_NormalArgs SetShaderDepth
        {
            add => HookEndpointManager.Add<Delegates.SetShaderDepth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetShaderDepth"), value);
            remove => HookEndpointManager.Remove<Delegates.SetShaderDepth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetShaderDepth"), value);
        }

        public static event Delegates.SetCulling_NormalArgs SetCulling
        {
            add => HookEndpointManager.Add<Delegates.SetCulling_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetCulling"), value);
            remove => HookEndpointManager.Remove<Delegates.SetCulling_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetCulling"), value);
        }

        public static event Delegates.SetPerspectiveCorrection_NormalArgs SetPerspectiveCorrection
        {
            add => HookEndpointManager.Add<Delegates.SetPerspectiveCorrection_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetPerspectiveCorrection"), value);
            remove => HookEndpointManager.Remove<Delegates.SetPerspectiveCorrection_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetPerspectiveCorrection"), value);
        }

        public static event Delegates.GetPaddingForMaterial_Material_NormalArgs GetPaddingForMaterial_Material
        {
            add => HookEndpointManager.Add<Delegates.GetPaddingForMaterial_Material_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetPaddingForMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.GetPaddingForMaterial_Material_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetPaddingForMaterial"), value);
        }

        public static event Delegates.GetPaddingForMaterial_NormalArgs GetPaddingForMaterial
        {
            add => HookEndpointManager.Add<Delegates.GetPaddingForMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetPaddingForMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.GetPaddingForMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetPaddingForMaterial"), value);
        }

        public static event Delegates.SetMeshArrays_NormalArgs SetMeshArrays
        {
            add => HookEndpointManager.Add<Delegates.SetMeshArrays_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetMeshArrays"), value);
            remove => HookEndpointManager.Remove<Delegates.SetMeshArrays_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetMeshArrays"), value);
        }

        public static event Delegates.SetArraySizes_NormalArgs SetArraySizes
        {
            add => HookEndpointManager.Add<Delegates.SetArraySizes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetArraySizes"), value);
            remove => HookEndpointManager.Remove<Delegates.SetArraySizes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetArraySizes"), value);
        }

        public static event Delegates.ComputeMarginSize_NormalArgs ComputeMarginSize
        {
            add => HookEndpointManager.Add<Delegates.ComputeMarginSize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "ComputeMarginSize"), value);
            remove => HookEndpointManager.Remove<Delegates.ComputeMarginSize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "ComputeMarginSize"), value);
        }

        public static event Delegates.OnDidApplyAnimationProperties_NormalArgs OnDidApplyAnimationProperties
        {
            add => HookEndpointManager.Add<Delegates.OnDidApplyAnimationProperties_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnDidApplyAnimationProperties"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDidApplyAnimationProperties_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnDidApplyAnimationProperties"), value);
        }

        public static event Delegates.OnCanvasHierarchyChanged_NormalArgs OnCanvasHierarchyChanged
        {
            add => HookEndpointManager.Add<Delegates.OnCanvasHierarchyChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnCanvasHierarchyChanged"), value);
            remove => HookEndpointManager.Remove<Delegates.OnCanvasHierarchyChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnCanvasHierarchyChanged"), value);
        }

        public static event Delegates.OnTransformParentChanged_NormalArgs OnTransformParentChanged
        {
            add => HookEndpointManager.Add<Delegates.OnTransformParentChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnTransformParentChanged"), value);
            remove => HookEndpointManager.Remove<Delegates.OnTransformParentChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnTransformParentChanged"), value);
        }

        public static event Delegates.OnRectTransformDimensionsChange_NormalArgs OnRectTransformDimensionsChange
        {
            add => HookEndpointManager.Add<Delegates.OnRectTransformDimensionsChange_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnRectTransformDimensionsChange"), value);
            remove => HookEndpointManager.Remove<Delegates.OnRectTransformDimensionsChange_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnRectTransformDimensionsChange"), value);
        }

        public static event Delegates.LateUpdate_NormalArgs LateUpdate
        {
            add => HookEndpointManager.Add<Delegates.LateUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "LateUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.LateUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "LateUpdate"), value);
        }

        public static event Delegates.OnPreRenderCanvas_NormalArgs OnPreRenderCanvas
        {
            add => HookEndpointManager.Add<Delegates.OnPreRenderCanvas_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnPreRenderCanvas"), value);
            remove => HookEndpointManager.Remove<Delegates.OnPreRenderCanvas_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "OnPreRenderCanvas"), value);
        }

        public static event Delegates.GenerateTextMesh_NormalArgs GenerateTextMesh
        {
            add => HookEndpointManager.Add<Delegates.GenerateTextMesh_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GenerateTextMesh"), value);
            remove => HookEndpointManager.Remove<Delegates.GenerateTextMesh_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GenerateTextMesh"), value);
        }

        public static event Delegates.GetTextContainerLocalCorners_NormalArgs GetTextContainerLocalCorners
        {
            add => HookEndpointManager.Add<Delegates.GetTextContainerLocalCorners_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetTextContainerLocalCorners"), value);
            remove => HookEndpointManager.Remove<Delegates.GetTextContainerLocalCorners_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetTextContainerLocalCorners"), value);
        }

        public static event Delegates.ClearMesh_NormalArgs ClearMesh
        {
            add => HookEndpointManager.Add<Delegates.ClearMesh_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "ClearMesh"), value);
            remove => HookEndpointManager.Remove<Delegates.ClearMesh_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "ClearMesh"), value);
        }

        public static event Delegates.SetActiveSubMeshes_NormalArgs SetActiveSubMeshes
        {
            add => HookEndpointManager.Add<Delegates.SetActiveSubMeshes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetActiveSubMeshes"), value);
            remove => HookEndpointManager.Remove<Delegates.SetActiveSubMeshes_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetActiveSubMeshes"), value);
        }

        public static event Delegates.GetCompoundBounds_NormalArgs GetCompoundBounds
        {
            add => HookEndpointManager.Add<Delegates.GetCompoundBounds_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetCompoundBounds"), value);
            remove => HookEndpointManager.Remove<Delegates.GetCompoundBounds_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetCompoundBounds"), value);
        }

        public static event Delegates.UpdateSDFScale_NormalArgs UpdateSDFScale
        {
            add => HookEndpointManager.Add<Delegates.UpdateSDFScale_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateSDFScale"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateSDFScale_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateSDFScale"), value);
        }

        public static event Delegates.AdjustLineOffset_NormalArgs AdjustLineOffset
        {
            add => HookEndpointManager.Add<Delegates.AdjustLineOffset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "AdjustLineOffset"), value);
            remove => HookEndpointManager.Remove<Delegates.AdjustLineOffset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "AdjustLineOffset"), value);
        }

        public static event Delegates.get_materialForRendering_NormalArgs get_materialForRendering
        {
            add => HookEndpointManager.Add<Delegates.get_materialForRendering_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "get_materialForRendering"), value);
            remove => HookEndpointManager.Remove<Delegates.get_materialForRendering_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "get_materialForRendering"), value);
        }

        public static event Delegates.get_mesh_NormalArgs get_mesh
        {
            add => HookEndpointManager.Add<Delegates.get_mesh_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "get_mesh"), value);
            remove => HookEndpointManager.Remove<Delegates.get_mesh_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "get_mesh"), value);
        }

        public static event Delegates.get_canvasRenderer_NormalArgs get_canvasRenderer
        {
            add => HookEndpointManager.Add<Delegates.get_canvasRenderer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "get_canvasRenderer"), value);
            remove => HookEndpointManager.Remove<Delegates.get_canvasRenderer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "get_canvasRenderer"), value);
        }

        public static event Delegates.get_inlineGraphicManager_NormalArgs get_inlineGraphicManager
        {
            add => HookEndpointManager.Add<Delegates.get_inlineGraphicManager_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "get_inlineGraphicManager"), value);
            remove => HookEndpointManager.Remove<Delegates.get_inlineGraphicManager_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "get_inlineGraphicManager"), value);
        }

        public static event Delegates.CalculateLayoutInputHorizontal_NormalArgs CalculateLayoutInputHorizontal
        {
            add => HookEndpointManager.Add<Delegates.CalculateLayoutInputHorizontal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "CalculateLayoutInputHorizontal"), value);
            remove => HookEndpointManager.Remove<Delegates.CalculateLayoutInputHorizontal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "CalculateLayoutInputHorizontal"), value);
        }

        public static event Delegates.CalculateLayoutInputVertical_NormalArgs CalculateLayoutInputVertical
        {
            add => HookEndpointManager.Add<Delegates.CalculateLayoutInputVertical_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "CalculateLayoutInputVertical"), value);
            remove => HookEndpointManager.Remove<Delegates.CalculateLayoutInputVertical_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "CalculateLayoutInputVertical"), value);
        }

        public static event Delegates.SetVerticesDirty_NormalArgs SetVerticesDirty
        {
            add => HookEndpointManager.Add<Delegates.SetVerticesDirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetVerticesDirty"), value);
            remove => HookEndpointManager.Remove<Delegates.SetVerticesDirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetVerticesDirty"), value);
        }

        public static event Delegates.SetLayoutDirty_NormalArgs SetLayoutDirty
        {
            add => HookEndpointManager.Add<Delegates.SetLayoutDirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetLayoutDirty"), value);
            remove => HookEndpointManager.Remove<Delegates.SetLayoutDirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetLayoutDirty"), value);
        }

        public static event Delegates.SetMaterialDirty_NormalArgs SetMaterialDirty
        {
            add => HookEndpointManager.Add<Delegates.SetMaterialDirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetMaterialDirty"), value);
            remove => HookEndpointManager.Remove<Delegates.SetMaterialDirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetMaterialDirty"), value);
        }

        public static event Delegates.SetAllDirty_NormalArgs SetAllDirty
        {
            add => HookEndpointManager.Add<Delegates.SetAllDirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetAllDirty"), value);
            remove => HookEndpointManager.Remove<Delegates.SetAllDirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "SetAllDirty"), value);
        }

        public static event Delegates.Rebuild_NormalArgs Rebuild
        {
            add => HookEndpointManager.Add<Delegates.Rebuild_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "Rebuild"), value);
            remove => HookEndpointManager.Remove<Delegates.Rebuild_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "Rebuild"), value);
        }

        public static event Delegates.UpdateSubObjectPivot_NormalArgs UpdateSubObjectPivot
        {
            add => HookEndpointManager.Add<Delegates.UpdateSubObjectPivot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateSubObjectPivot"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateSubObjectPivot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateSubObjectPivot"), value);
        }

        public static event Delegates.GetModifiedMaterial_NormalArgs GetModifiedMaterial
        {
            add => HookEndpointManager.Add<Delegates.GetModifiedMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetModifiedMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.GetModifiedMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetModifiedMaterial"), value);
        }

        public static event Delegates.UpdateMaterial_NormalArgs UpdateMaterial
        {
            add => HookEndpointManager.Add<Delegates.UpdateMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateMaterial"), value);
        }

        public static event Delegates.get_maskOffset_NormalArgs get_maskOffset
        {
            add => HookEndpointManager.Add<Delegates.get_maskOffset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "get_maskOffset"), value);
            remove => HookEndpointManager.Remove<Delegates.get_maskOffset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "get_maskOffset"), value);
        }

        public static event Delegates.set_maskOffset_NormalArgs set_maskOffset
        {
            add => HookEndpointManager.Add<Delegates.set_maskOffset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "set_maskOffset"), value);
            remove => HookEndpointManager.Remove<Delegates.set_maskOffset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "set_maskOffset"), value);
        }

        public static event Delegates.RecalculateClipping_NormalArgs RecalculateClipping
        {
            add => HookEndpointManager.Add<Delegates.RecalculateClipping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "RecalculateClipping"), value);
            remove => HookEndpointManager.Remove<Delegates.RecalculateClipping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "RecalculateClipping"), value);
        }

        public static event Delegates.RecalculateMasking_NormalArgs RecalculateMasking
        {
            add => HookEndpointManager.Add<Delegates.RecalculateMasking_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "RecalculateMasking"), value);
            remove => HookEndpointManager.Remove<Delegates.RecalculateMasking_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "RecalculateMasking"), value);
        }

        public static event Delegates.UpdateMeshPadding_NormalArgs UpdateMeshPadding
        {
            add => HookEndpointManager.Add<Delegates.UpdateMeshPadding_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateMeshPadding"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateMeshPadding_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateMeshPadding"), value);
        }

        public static event Delegates.InternalCrossFadeColor_NormalArgs InternalCrossFadeColor
        {
            add => HookEndpointManager.Add<Delegates.InternalCrossFadeColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "InternalCrossFadeColor"), value);
            remove => HookEndpointManager.Remove<Delegates.InternalCrossFadeColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "InternalCrossFadeColor"), value);
        }

        public static event Delegates.InternalCrossFadeAlpha_NormalArgs InternalCrossFadeAlpha
        {
            add => HookEndpointManager.Add<Delegates.InternalCrossFadeAlpha_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "InternalCrossFadeAlpha"), value);
            remove => HookEndpointManager.Remove<Delegates.InternalCrossFadeAlpha_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "InternalCrossFadeAlpha"), value);
        }

        public static event Delegates.ForceMeshUpdate_NormalArgs ForceMeshUpdate
        {
            add => HookEndpointManager.Add<Delegates.ForceMeshUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "ForceMeshUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.ForceMeshUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "ForceMeshUpdate"), value);
        }

        public static event Delegates.ForceMeshUpdate_bool_NormalArgs ForceMeshUpdate_bool
        {
            add => HookEndpointManager.Add<Delegates.ForceMeshUpdate_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "ForceMeshUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.ForceMeshUpdate_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "ForceMeshUpdate"), value);
        }

        public static event Delegates.GetTextInfo_NormalArgs GetTextInfo
        {
            add => HookEndpointManager.Add<Delegates.GetTextInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetTextInfo"), value);
            remove => HookEndpointManager.Remove<Delegates.GetTextInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "GetTextInfo"), value);
        }

        public static event Delegates.UpdateGeometry_NormalArgs UpdateGeometry
        {
            add => HookEndpointManager.Add<Delegates.UpdateGeometry_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateGeometry"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateGeometry_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateGeometry"), value);
        }

        public static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_NormalArgs
            UpdateVertexData_TMP_VertexDataUpdateFlags
            {
                add => HookEndpointManager.Add<Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateVertexData"), value);
                remove => HookEndpointManager.Remove<Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateVertexData"), value);
            }

        public static event Delegates.UpdateVertexData_NormalArgs UpdateVertexData
        {
            add => HookEndpointManager.Add<Delegates.UpdateVertexData_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateVertexData"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateVertexData_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateVertexData"), value);
        }

        public static event Delegates.UpdateFontAsset_NormalArgs UpdateFontAsset
        {
            add => HookEndpointManager.Add<Delegates.UpdateFontAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateFontAsset"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateFontAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TextMeshProUGUI), "UpdateFontAsset"), value);
        }
    }
}