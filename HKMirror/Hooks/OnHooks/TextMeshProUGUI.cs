using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for TextMeshProUGUI class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTextMeshProUGUI
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "Awake", true), Awake);
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
            {
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                {
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
            {
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                {
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnEnable", true), OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
            {
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
            {
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnDisable", true), OnDisable);
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
            {
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
            {
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                {
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnDestroy", true), OnDestroy);
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_AfterArgs _afterOnDestroy;

        private static void OnDestroy(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            if (_beforeOnDestroy != null)
            {
                foreach (Delegates.OnDestroy_BeforeArgs toInvoke in _beforeOnDestroy.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDestroy?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null)
            {
                foreach (Delegates.OnDestroy_AfterArgs toInvoke in _afterOnDestroy.GetInvocationList())
                {
                    try
                    {
                        _afterOnDestroy.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookLoadFontAsset()
        {
            if (!HookedList.Contains("LoadFontAsset"))
            {
                HookedList.Add("LoadFontAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "LoadFontAsset", true),
                    LoadFontAsset);
            }
        }

        internal static event Delegates.LoadFontAsset_BeforeArgs _beforeLoadFontAsset;
        internal static event Delegates.LoadFontAsset_AfterArgs _afterLoadFontAsset;

        private static void LoadFontAsset(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_LoadFontAsset @params = new()
            {
                self = self
            };
            if (_beforeLoadFontAsset != null)
            {
                foreach (Delegates.LoadFontAsset_BeforeArgs toInvoke in _beforeLoadFontAsset.GetInvocationList())
                {
                    try
                    {
                        _beforeLoadFontAsset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterLoadFontAsset != null)
            {
                foreach (Delegates.LoadFontAsset_AfterArgs toInvoke in _afterLoadFontAsset.GetInvocationList())
                {
                    try
                    {
                        _afterLoadFontAsset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetCanvas()
        {
            if (!HookedList.Contains("GetCanvas"))
            {
                HookedList.Add("GetCanvas");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetCanvas", true), GetCanvas);
            }
        }

        internal static event Delegates.GetCanvas_BeforeArgs _beforeGetCanvas;
        internal static event Delegates.GetCanvas_AfterArgs _afterGetCanvas;

        private static UnityEngine.Canvas GetCanvas(Func<TMPro.TextMeshProUGUI, UnityEngine.Canvas> orig,
            TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_GetCanvas @params = new()
            {
                self = self
            };
            if (_beforeGetCanvas != null)
            {
                foreach (Delegates.GetCanvas_BeforeArgs toInvoke in _beforeGetCanvas.GetInvocationList())
                {
                    try
                    {
                        _beforeGetCanvas?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetCanvas != null)
            {
                foreach (Delegates.GetCanvas_AfterArgs toInvoke in _afterGetCanvas.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetCanvas.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookUpdateEnvMapMatrix()
        {
            if (!HookedList.Contains("UpdateEnvMapMatrix"))
            {
                HookedList.Add("UpdateEnvMapMatrix");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateEnvMapMatrix", true),
                    UpdateEnvMapMatrix);
            }
        }

        internal static event Delegates.UpdateEnvMapMatrix_BeforeArgs _beforeUpdateEnvMapMatrix;
        internal static event Delegates.UpdateEnvMapMatrix_AfterArgs _afterUpdateEnvMapMatrix;

        private static void UpdateEnvMapMatrix(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_UpdateEnvMapMatrix @params = new()
            {
                self = self
            };
            if (_beforeUpdateEnvMapMatrix != null)
            {
                foreach (Delegates.UpdateEnvMapMatrix_BeforeArgs toInvoke in
                         _beforeUpdateEnvMapMatrix.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateEnvMapMatrix?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdateEnvMapMatrix != null)
            {
                foreach (Delegates.UpdateEnvMapMatrix_AfterArgs toInvoke in
                         _afterUpdateEnvMapMatrix.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateEnvMapMatrix.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookEnableMasking()
        {
            if (!HookedList.Contains("EnableMasking"))
            {
                HookedList.Add("EnableMasking");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "EnableMasking", true),
                    EnableMasking);
            }
        }

        internal static event Delegates.EnableMasking_BeforeArgs _beforeEnableMasking;
        internal static event Delegates.EnableMasking_AfterArgs _afterEnableMasking;

        private static void EnableMasking(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_EnableMasking @params = new()
            {
                self = self
            };
            if (_beforeEnableMasking != null)
            {
                foreach (Delegates.EnableMasking_BeforeArgs toInvoke in _beforeEnableMasking.GetInvocationList())
                {
                    try
                    {
                        _beforeEnableMasking?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterEnableMasking != null)
            {
                foreach (Delegates.EnableMasking_AfterArgs toInvoke in _afterEnableMasking.GetInvocationList())
                {
                    try
                    {
                        _afterEnableMasking.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDisableMasking()
        {
            if (!HookedList.Contains("DisableMasking"))
            {
                HookedList.Add("DisableMasking");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "DisableMasking", true),
                    DisableMasking);
            }
        }

        internal static event Delegates.DisableMasking_BeforeArgs _beforeDisableMasking;
        internal static event Delegates.DisableMasking_AfterArgs _afterDisableMasking;

        private static void DisableMasking(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_DisableMasking @params = new()
            {
                self = self
            };
            if (_beforeDisableMasking != null)
            {
                foreach (Delegates.DisableMasking_BeforeArgs toInvoke in _beforeDisableMasking.GetInvocationList())
                {
                    try
                    {
                        _beforeDisableMasking?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterDisableMasking != null)
            {
                foreach (Delegates.DisableMasking_AfterArgs toInvoke in _afterDisableMasking.GetInvocationList())
                {
                    try
                    {
                        _afterDisableMasking.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateMask()
        {
            if (!HookedList.Contains("UpdateMask"))
            {
                HookedList.Add("UpdateMask");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateMask", true), UpdateMask);
            }
        }

        internal static event Delegates.UpdateMask_BeforeArgs _beforeUpdateMask;
        internal static event Delegates.UpdateMask_AfterArgs _afterUpdateMask;

        private static void UpdateMask(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_UpdateMask @params = new()
            {
                self = self
            };
            if (_beforeUpdateMask != null)
            {
                foreach (Delegates.UpdateMask_BeforeArgs toInvoke in _beforeUpdateMask.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateMask?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdateMask != null)
            {
                foreach (Delegates.UpdateMask_AfterArgs toInvoke in _afterUpdateMask.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateMask.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetMaterial()
        {
            if (!HookedList.Contains("GetMaterial"))
            {
                HookedList.Add("GetMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetMaterial", true),
                    GetMaterial);
            }
        }

        internal static event Delegates.GetMaterial_BeforeArgs _beforeGetMaterial;
        internal static event Delegates.GetMaterial_AfterArgs _afterGetMaterial;

        private static UnityEngine.Material GetMaterial(
            Func<TMPro.TextMeshProUGUI, UnityEngine.Material, UnityEngine.Material> orig, TMPro.TextMeshProUGUI self,
            UnityEngine.Material mat)
        {
            Delegates.Params_GetMaterial @params = new()
            {
                self = self, mat = mat
            };
            if (_beforeGetMaterial != null)
            {
                foreach (Delegates.GetMaterial_BeforeArgs toInvoke in _beforeGetMaterial.GetInvocationList())
                {
                    try
                    {
                        _beforeGetMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            mat = @params.mat;
            var retVal = orig(self, mat);
            if (_afterGetMaterial != null)
            {
                foreach (Delegates.GetMaterial_AfterArgs toInvoke in _afterGetMaterial.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetMaterial.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetMaterials()
        {
            if (!HookedList.Contains("GetMaterials"))
            {
                HookedList.Add("GetMaterials");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetMaterials", true),
                    GetMaterials);
            }
        }

        internal static event Delegates.GetMaterials_BeforeArgs _beforeGetMaterials;
        internal static event Delegates.GetMaterials_AfterArgs _afterGetMaterials;

        private static UnityEngine.Material[] GetMaterials(
            Func<TMPro.TextMeshProUGUI, UnityEngine.Material[], UnityEngine.Material[]> orig,
            TMPro.TextMeshProUGUI self, UnityEngine.Material[] mats)
        {
            Delegates.Params_GetMaterials @params = new()
            {
                self = self, mats = mats
            };
            if (_beforeGetMaterials != null)
            {
                foreach (Delegates.GetMaterials_BeforeArgs toInvoke in _beforeGetMaterials.GetInvocationList())
                {
                    try
                    {
                        _beforeGetMaterials?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            mats = @params.mats;
            var retVal = orig(self, mats);
            if (_afterGetMaterials != null)
            {
                foreach (Delegates.GetMaterials_AfterArgs toInvoke in _afterGetMaterials.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetMaterials.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookSetSharedMaterial()
        {
            if (!HookedList.Contains("SetSharedMaterial"))
            {
                HookedList.Add("SetSharedMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetSharedMaterial", true),
                    SetSharedMaterial);
            }
        }

        internal static event Delegates.SetSharedMaterial_BeforeArgs _beforeSetSharedMaterial;
        internal static event Delegates.SetSharedMaterial_AfterArgs _afterSetSharedMaterial;

        private static void SetSharedMaterial(Action<TMPro.TextMeshProUGUI, UnityEngine.Material> orig,
            TMPro.TextMeshProUGUI self, UnityEngine.Material mat)
        {
            Delegates.Params_SetSharedMaterial @params = new()
            {
                self = self, mat = mat
            };
            if (_beforeSetSharedMaterial != null)
            {
                foreach (Delegates.SetSharedMaterial_BeforeArgs toInvoke in
                         _beforeSetSharedMaterial.GetInvocationList())
                {
                    try
                    {
                        _beforeSetSharedMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            mat = @params.mat;
            orig(self, mat);
            if (_afterSetSharedMaterial != null)
            {
                foreach (Delegates.SetSharedMaterial_AfterArgs toInvoke in _afterSetSharedMaterial.GetInvocationList())
                {
                    try
                    {
                        _afterSetSharedMaterial.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetSharedMaterials()
        {
            if (!HookedList.Contains("GetSharedMaterials"))
            {
                HookedList.Add("GetSharedMaterials");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetSharedMaterials", true),
                    GetSharedMaterials);
            }
        }

        internal static event Delegates.GetSharedMaterials_BeforeArgs _beforeGetSharedMaterials;
        internal static event Delegates.GetSharedMaterials_AfterArgs _afterGetSharedMaterials;

        private static UnityEngine.Material[] GetSharedMaterials(
            Func<TMPro.TextMeshProUGUI, UnityEngine.Material[]> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_GetSharedMaterials @params = new()
            {
                self = self
            };
            if (_beforeGetSharedMaterials != null)
            {
                foreach (Delegates.GetSharedMaterials_BeforeArgs toInvoke in
                         _beforeGetSharedMaterials.GetInvocationList())
                {
                    try
                    {
                        _beforeGetSharedMaterials?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetSharedMaterials != null)
            {
                foreach (Delegates.GetSharedMaterials_AfterArgs toInvoke in
                         _afterGetSharedMaterials.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetSharedMaterials.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookSetSharedMaterials()
        {
            if (!HookedList.Contains("SetSharedMaterials"))
            {
                HookedList.Add("SetSharedMaterials");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetSharedMaterials", true),
                    SetSharedMaterials);
            }
        }

        internal static event Delegates.SetSharedMaterials_BeforeArgs _beforeSetSharedMaterials;
        internal static event Delegates.SetSharedMaterials_AfterArgs _afterSetSharedMaterials;

        private static void SetSharedMaterials(Action<TMPro.TextMeshProUGUI, UnityEngine.Material[]> orig,
            TMPro.TextMeshProUGUI self, UnityEngine.Material[] materials)
        {
            Delegates.Params_SetSharedMaterials @params = new()
            {
                self = self, materials = materials
            };
            if (_beforeSetSharedMaterials != null)
            {
                foreach (Delegates.SetSharedMaterials_BeforeArgs toInvoke in
                         _beforeSetSharedMaterials.GetInvocationList())
                {
                    try
                    {
                        _beforeSetSharedMaterials?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            materials = @params.materials;
            orig(self, materials);
            if (_afterSetSharedMaterials != null)
            {
                foreach (Delegates.SetSharedMaterials_AfterArgs toInvoke in
                         _afterSetSharedMaterials.GetInvocationList())
                {
                    try
                    {
                        _afterSetSharedMaterials.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetOutlineThickness()
        {
            if (!HookedList.Contains("SetOutlineThickness"))
            {
                HookedList.Add("SetOutlineThickness");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetOutlineThickness", true),
                    SetOutlineThickness);
            }
        }

        internal static event Delegates.SetOutlineThickness_BeforeArgs _beforeSetOutlineThickness;
        internal static event Delegates.SetOutlineThickness_AfterArgs _afterSetOutlineThickness;

        private static void SetOutlineThickness(Action<TMPro.TextMeshProUGUI, float> orig, TMPro.TextMeshProUGUI self,
            float thickness)
        {
            Delegates.Params_SetOutlineThickness @params = new()
            {
                self = self, thickness = thickness
            };
            if (_beforeSetOutlineThickness != null)
            {
                foreach (Delegates.SetOutlineThickness_BeforeArgs toInvoke in _beforeSetOutlineThickness
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeSetOutlineThickness?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            thickness = @params.thickness;
            orig(self, thickness);
            if (_afterSetOutlineThickness != null)
            {
                foreach (Delegates.SetOutlineThickness_AfterArgs toInvoke in
                         _afterSetOutlineThickness.GetInvocationList())
                {
                    try
                    {
                        _afterSetOutlineThickness.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetFaceColor()
        {
            if (!HookedList.Contains("SetFaceColor"))
            {
                HookedList.Add("SetFaceColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetFaceColor", true),
                    SetFaceColor);
            }
        }

        internal static event Delegates.SetFaceColor_BeforeArgs _beforeSetFaceColor;
        internal static event Delegates.SetFaceColor_AfterArgs _afterSetFaceColor;

        private static void SetFaceColor(Action<TMPro.TextMeshProUGUI, UnityEngine.Color32> orig,
            TMPro.TextMeshProUGUI self, UnityEngine.Color32 color)
        {
            Delegates.Params_SetFaceColor @params = new()
            {
                self = self, color = color
            };
            if (_beforeSetFaceColor != null)
            {
                foreach (Delegates.SetFaceColor_BeforeArgs toInvoke in _beforeSetFaceColor.GetInvocationList())
                {
                    try
                    {
                        _beforeSetFaceColor?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            color = @params.color;
            orig(self, color);
            if (_afterSetFaceColor != null)
            {
                foreach (Delegates.SetFaceColor_AfterArgs toInvoke in _afterSetFaceColor.GetInvocationList())
                {
                    try
                    {
                        _afterSetFaceColor.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetOutlineColor()
        {
            if (!HookedList.Contains("SetOutlineColor"))
            {
                HookedList.Add("SetOutlineColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetOutlineColor", true),
                    SetOutlineColor);
            }
        }

        internal static event Delegates.SetOutlineColor_BeforeArgs _beforeSetOutlineColor;
        internal static event Delegates.SetOutlineColor_AfterArgs _afterSetOutlineColor;

        private static void SetOutlineColor(Action<TMPro.TextMeshProUGUI, UnityEngine.Color32> orig,
            TMPro.TextMeshProUGUI self, UnityEngine.Color32 color)
        {
            Delegates.Params_SetOutlineColor @params = new()
            {
                self = self, color = color
            };
            if (_beforeSetOutlineColor != null)
            {
                foreach (Delegates.SetOutlineColor_BeforeArgs toInvoke in _beforeSetOutlineColor.GetInvocationList())
                {
                    try
                    {
                        _beforeSetOutlineColor?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            color = @params.color;
            orig(self, color);
            if (_afterSetOutlineColor != null)
            {
                foreach (Delegates.SetOutlineColor_AfterArgs toInvoke in _afterSetOutlineColor.GetInvocationList())
                {
                    try
                    {
                        _afterSetOutlineColor.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetShaderDepth()
        {
            if (!HookedList.Contains("SetShaderDepth"))
            {
                HookedList.Add("SetShaderDepth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetShaderDepth", true),
                    SetShaderDepth);
            }
        }

        internal static event Delegates.SetShaderDepth_BeforeArgs _beforeSetShaderDepth;
        internal static event Delegates.SetShaderDepth_AfterArgs _afterSetShaderDepth;

        private static void SetShaderDepth(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_SetShaderDepth @params = new()
            {
                self = self
            };
            if (_beforeSetShaderDepth != null)
            {
                foreach (Delegates.SetShaderDepth_BeforeArgs toInvoke in _beforeSetShaderDepth.GetInvocationList())
                {
                    try
                    {
                        _beforeSetShaderDepth?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterSetShaderDepth != null)
            {
                foreach (Delegates.SetShaderDepth_AfterArgs toInvoke in _afterSetShaderDepth.GetInvocationList())
                {
                    try
                    {
                        _afterSetShaderDepth.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetCulling()
        {
            if (!HookedList.Contains("SetCulling"))
            {
                HookedList.Add("SetCulling");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetCulling", true), SetCulling);
            }
        }

        internal static event Delegates.SetCulling_BeforeArgs _beforeSetCulling;
        internal static event Delegates.SetCulling_AfterArgs _afterSetCulling;

        private static void SetCulling(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_SetCulling @params = new()
            {
                self = self
            };
            if (_beforeSetCulling != null)
            {
                foreach (Delegates.SetCulling_BeforeArgs toInvoke in _beforeSetCulling.GetInvocationList())
                {
                    try
                    {
                        _beforeSetCulling?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterSetCulling != null)
            {
                foreach (Delegates.SetCulling_AfterArgs toInvoke in _afterSetCulling.GetInvocationList())
                {
                    try
                    {
                        _afterSetCulling.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetPerspectiveCorrection()
        {
            if (!HookedList.Contains("SetPerspectiveCorrection"))
            {
                HookedList.Add("SetPerspectiveCorrection");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetPerspectiveCorrection", true),
                    SetPerspectiveCorrection);
            }
        }

        internal static event Delegates.SetPerspectiveCorrection_BeforeArgs _beforeSetPerspectiveCorrection;
        internal static event Delegates.SetPerspectiveCorrection_AfterArgs _afterSetPerspectiveCorrection;

        private static void SetPerspectiveCorrection(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_SetPerspectiveCorrection @params = new()
            {
                self = self
            };
            if (_beforeSetPerspectiveCorrection != null)
            {
                foreach (Delegates.SetPerspectiveCorrection_BeforeArgs toInvoke in _beforeSetPerspectiveCorrection
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeSetPerspectiveCorrection?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterSetPerspectiveCorrection != null)
            {
                foreach (Delegates.SetPerspectiveCorrection_AfterArgs toInvoke in _afterSetPerspectiveCorrection
                             .GetInvocationList())
                {
                    try
                    {
                        _afterSetPerspectiveCorrection.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetPaddingForMaterial_Material()
        {
            if (!HookedList.Contains("GetPaddingForMaterial_Material"))
            {
                HookedList.Add("GetPaddingForMaterial_Material");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetPaddingForMaterial_Material",
                        true), GetPaddingForMaterial_Material);
            }
        }

        internal static event Delegates.GetPaddingForMaterial_Material_BeforeArgs _beforeGetPaddingForMaterial_Material;
        internal static event Delegates.GetPaddingForMaterial_Material_AfterArgs _afterGetPaddingForMaterial_Material;

        private static float GetPaddingForMaterial_Material(
            Func<TMPro.TextMeshProUGUI, UnityEngine.Material, float> orig, TMPro.TextMeshProUGUI self,
            UnityEngine.Material mat)
        {
            Delegates.Params_GetPaddingForMaterial_Material @params = new()
            {
                self = self, mat = mat
            };
            if (_beforeGetPaddingForMaterial_Material != null)
            {
                foreach (Delegates.GetPaddingForMaterial_Material_BeforeArgs toInvoke in
                         _beforeGetPaddingForMaterial_Material.GetInvocationList())
                {
                    try
                    {
                        _beforeGetPaddingForMaterial_Material?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            mat = @params.mat;
            var retVal = orig(self, mat);
            if (_afterGetPaddingForMaterial_Material != null)
            {
                foreach (Delegates.GetPaddingForMaterial_Material_AfterArgs toInvoke in
                         _afterGetPaddingForMaterial_Material.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetPaddingForMaterial_Material.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetPaddingForMaterial()
        {
            if (!HookedList.Contains("GetPaddingForMaterial"))
            {
                HookedList.Add("GetPaddingForMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetPaddingForMaterial", true),
                    GetPaddingForMaterial);
            }
        }

        internal static event Delegates.GetPaddingForMaterial_BeforeArgs _beforeGetPaddingForMaterial;
        internal static event Delegates.GetPaddingForMaterial_AfterArgs _afterGetPaddingForMaterial;

        private static float GetPaddingForMaterial(Func<TMPro.TextMeshProUGUI, float> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_GetPaddingForMaterial @params = new()
            {
                self = self
            };
            if (_beforeGetPaddingForMaterial != null)
            {
                foreach (Delegates.GetPaddingForMaterial_BeforeArgs toInvoke in _beforeGetPaddingForMaterial
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeGetPaddingForMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetPaddingForMaterial != null)
            {
                foreach (Delegates.GetPaddingForMaterial_AfterArgs toInvoke in _afterGetPaddingForMaterial
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetPaddingForMaterial.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookSetMeshArrays()
        {
            if (!HookedList.Contains("SetMeshArrays"))
            {
                HookedList.Add("SetMeshArrays");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetMeshArrays", true),
                    SetMeshArrays);
            }
        }

        internal static event Delegates.SetMeshArrays_BeforeArgs _beforeSetMeshArrays;
        internal static event Delegates.SetMeshArrays_AfterArgs _afterSetMeshArrays;

        private static void SetMeshArrays(Action<TMPro.TextMeshProUGUI, int> orig, TMPro.TextMeshProUGUI self, int size)
        {
            Delegates.Params_SetMeshArrays @params = new()
            {
                self = self, size = size
            };
            if (_beforeSetMeshArrays != null)
            {
                foreach (Delegates.SetMeshArrays_BeforeArgs toInvoke in _beforeSetMeshArrays.GetInvocationList())
                {
                    try
                    {
                        _beforeSetMeshArrays?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            size = @params.size;
            orig(self, size);
            if (_afterSetMeshArrays != null)
            {
                foreach (Delegates.SetMeshArrays_AfterArgs toInvoke in _afterSetMeshArrays.GetInvocationList())
                {
                    try
                    {
                        _afterSetMeshArrays.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetArraySizes()
        {
            if (!HookedList.Contains("SetArraySizes"))
            {
                HookedList.Add("SetArraySizes");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetArraySizes", true),
                    SetArraySizes);
            }
        }

        internal static event Delegates.SetArraySizes_BeforeArgs _beforeSetArraySizes;
        internal static event Delegates.SetArraySizes_AfterArgs _afterSetArraySizes;

        private static int SetArraySizes(Func<TMPro.TextMeshProUGUI, int[], int> orig, TMPro.TextMeshProUGUI self,
            int[] chars)
        {
            Delegates.Params_SetArraySizes @params = new()
            {
                self = self, chars = chars
            };
            if (_beforeSetArraySizes != null)
            {
                foreach (Delegates.SetArraySizes_BeforeArgs toInvoke in _beforeSetArraySizes.GetInvocationList())
                {
                    try
                    {
                        _beforeSetArraySizes?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            chars = @params.chars;
            var retVal = orig(self, chars);
            if (_afterSetArraySizes != null)
            {
                foreach (Delegates.SetArraySizes_AfterArgs toInvoke in _afterSetArraySizes.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterSetArraySizes.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookComputeMarginSize()
        {
            if (!HookedList.Contains("ComputeMarginSize"))
            {
                HookedList.Add("ComputeMarginSize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "ComputeMarginSize", true),
                    ComputeMarginSize);
            }
        }

        internal static event Delegates.ComputeMarginSize_BeforeArgs _beforeComputeMarginSize;
        internal static event Delegates.ComputeMarginSize_AfterArgs _afterComputeMarginSize;

        private static void ComputeMarginSize(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_ComputeMarginSize @params = new()
            {
                self = self
            };
            if (_beforeComputeMarginSize != null)
            {
                foreach (Delegates.ComputeMarginSize_BeforeArgs toInvoke in
                         _beforeComputeMarginSize.GetInvocationList())
                {
                    try
                    {
                        _beforeComputeMarginSize?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterComputeMarginSize != null)
            {
                foreach (Delegates.ComputeMarginSize_AfterArgs toInvoke in _afterComputeMarginSize.GetInvocationList())
                {
                    try
                    {
                        _afterComputeMarginSize.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnDidApplyAnimationProperties()
        {
            if (!HookedList.Contains("OnDidApplyAnimationProperties"))
            {
                HookedList.Add("OnDidApplyAnimationProperties");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnDidApplyAnimationProperties",
                        true), OnDidApplyAnimationProperties);
            }
        }

        internal static event Delegates.OnDidApplyAnimationProperties_BeforeArgs _beforeOnDidApplyAnimationProperties;
        internal static event Delegates.OnDidApplyAnimationProperties_AfterArgs _afterOnDidApplyAnimationProperties;

        private static void OnDidApplyAnimationProperties(Action<TMPro.TextMeshProUGUI> orig,
            TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_OnDidApplyAnimationProperties @params = new()
            {
                self = self
            };
            if (_beforeOnDidApplyAnimationProperties != null)
            {
                foreach (Delegates.OnDidApplyAnimationProperties_BeforeArgs toInvoke in
                         _beforeOnDidApplyAnimationProperties.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDidApplyAnimationProperties?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnDidApplyAnimationProperties != null)
            {
                foreach (Delegates.OnDidApplyAnimationProperties_AfterArgs toInvoke in
                         _afterOnDidApplyAnimationProperties.GetInvocationList())
                {
                    try
                    {
                        _afterOnDidApplyAnimationProperties.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnCanvasHierarchyChanged()
        {
            if (!HookedList.Contains("OnCanvasHierarchyChanged"))
            {
                HookedList.Add("OnCanvasHierarchyChanged");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnCanvasHierarchyChanged", true),
                    OnCanvasHierarchyChanged);
            }
        }

        internal static event Delegates.OnCanvasHierarchyChanged_BeforeArgs _beforeOnCanvasHierarchyChanged;
        internal static event Delegates.OnCanvasHierarchyChanged_AfterArgs _afterOnCanvasHierarchyChanged;

        private static void OnCanvasHierarchyChanged(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_OnCanvasHierarchyChanged @params = new()
            {
                self = self
            };
            if (_beforeOnCanvasHierarchyChanged != null)
            {
                foreach (Delegates.OnCanvasHierarchyChanged_BeforeArgs toInvoke in _beforeOnCanvasHierarchyChanged
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeOnCanvasHierarchyChanged?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnCanvasHierarchyChanged != null)
            {
                foreach (Delegates.OnCanvasHierarchyChanged_AfterArgs toInvoke in _afterOnCanvasHierarchyChanged
                             .GetInvocationList())
                {
                    try
                    {
                        _afterOnCanvasHierarchyChanged.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnTransformParentChanged()
        {
            if (!HookedList.Contains("OnTransformParentChanged"))
            {
                HookedList.Add("OnTransformParentChanged");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnTransformParentChanged", true),
                    OnTransformParentChanged);
            }
        }

        internal static event Delegates.OnTransformParentChanged_BeforeArgs _beforeOnTransformParentChanged;
        internal static event Delegates.OnTransformParentChanged_AfterArgs _afterOnTransformParentChanged;

        private static void OnTransformParentChanged(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_OnTransformParentChanged @params = new()
            {
                self = self
            };
            if (_beforeOnTransformParentChanged != null)
            {
                foreach (Delegates.OnTransformParentChanged_BeforeArgs toInvoke in _beforeOnTransformParentChanged
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeOnTransformParentChanged?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnTransformParentChanged != null)
            {
                foreach (Delegates.OnTransformParentChanged_AfterArgs toInvoke in _afterOnTransformParentChanged
                             .GetInvocationList())
                {
                    try
                    {
                        _afterOnTransformParentChanged.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnRectTransformDimensionsChange()
        {
            if (!HookedList.Contains("OnRectTransformDimensionsChange"))
            {
                HookedList.Add("OnRectTransformDimensionsChange");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnRectTransformDimensionsChange",
                        true), OnRectTransformDimensionsChange);
            }
        }

        internal static event Delegates.OnRectTransformDimensionsChange_BeforeArgs
            _beforeOnRectTransformDimensionsChange;

        internal static event Delegates.OnRectTransformDimensionsChange_AfterArgs _afterOnRectTransformDimensionsChange;

        private static void OnRectTransformDimensionsChange(Action<TMPro.TextMeshProUGUI> orig,
            TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_OnRectTransformDimensionsChange @params = new()
            {
                self = self
            };
            if (_beforeOnRectTransformDimensionsChange != null)
            {
                foreach (Delegates.OnRectTransformDimensionsChange_BeforeArgs toInvoke in
                         _beforeOnRectTransformDimensionsChange.GetInvocationList())
                {
                    try
                    {
                        _beforeOnRectTransformDimensionsChange?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnRectTransformDimensionsChange != null)
            {
                foreach (Delegates.OnRectTransformDimensionsChange_AfterArgs toInvoke in
                         _afterOnRectTransformDimensionsChange.GetInvocationList())
                {
                    try
                    {
                        _afterOnRectTransformDimensionsChange.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookLateUpdate()
        {
            if (!HookedList.Contains("LateUpdate"))
            {
                HookedList.Add("LateUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "LateUpdate", true), LateUpdate);
            }
        }

        internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
        internal static event Delegates.LateUpdate_AfterArgs _afterLateUpdate;

        private static void LateUpdate(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_LateUpdate @params = new()
            {
                self = self
            };
            if (_beforeLateUpdate != null)
            {
                foreach (Delegates.LateUpdate_BeforeArgs toInvoke in _beforeLateUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeLateUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterLateUpdate != null)
            {
                foreach (Delegates.LateUpdate_AfterArgs toInvoke in _afterLateUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterLateUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnPreRenderCanvas()
        {
            if (!HookedList.Contains("OnPreRenderCanvas"))
            {
                HookedList.Add("OnPreRenderCanvas");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnPreRenderCanvas", true),
                    OnPreRenderCanvas);
            }
        }

        internal static event Delegates.OnPreRenderCanvas_BeforeArgs _beforeOnPreRenderCanvas;
        internal static event Delegates.OnPreRenderCanvas_AfterArgs _afterOnPreRenderCanvas;

        private static void OnPreRenderCanvas(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_OnPreRenderCanvas @params = new()
            {
                self = self
            };
            if (_beforeOnPreRenderCanvas != null)
            {
                foreach (Delegates.OnPreRenderCanvas_BeforeArgs toInvoke in
                         _beforeOnPreRenderCanvas.GetInvocationList())
                {
                    try
                    {
                        _beforeOnPreRenderCanvas?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnPreRenderCanvas != null)
            {
                foreach (Delegates.OnPreRenderCanvas_AfterArgs toInvoke in _afterOnPreRenderCanvas.GetInvocationList())
                {
                    try
                    {
                        _afterOnPreRenderCanvas.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGenerateTextMesh()
        {
            if (!HookedList.Contains("GenerateTextMesh"))
            {
                HookedList.Add("GenerateTextMesh");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GenerateTextMesh", true),
                    GenerateTextMesh);
            }
        }

        internal static event Delegates.GenerateTextMesh_BeforeArgs _beforeGenerateTextMesh;
        internal static event Delegates.GenerateTextMesh_AfterArgs _afterGenerateTextMesh;

        private static void GenerateTextMesh(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_GenerateTextMesh @params = new()
            {
                self = self
            };
            if (_beforeGenerateTextMesh != null)
            {
                foreach (Delegates.GenerateTextMesh_BeforeArgs toInvoke in _beforeGenerateTextMesh.GetInvocationList())
                {
                    try
                    {
                        _beforeGenerateTextMesh?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterGenerateTextMesh != null)
            {
                foreach (Delegates.GenerateTextMesh_AfterArgs toInvoke in _afterGenerateTextMesh.GetInvocationList())
                {
                    try
                    {
                        _afterGenerateTextMesh.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetTextContainerLocalCorners()
        {
            if (!HookedList.Contains("GetTextContainerLocalCorners"))
            {
                HookedList.Add("GetTextContainerLocalCorners");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetTextContainerLocalCorners", true),
                    GetTextContainerLocalCorners);
            }
        }

        internal static event Delegates.GetTextContainerLocalCorners_BeforeArgs _beforeGetTextContainerLocalCorners;
        internal static event Delegates.GetTextContainerLocalCorners_AfterArgs _afterGetTextContainerLocalCorners;

        private static UnityEngine.Vector3[] GetTextContainerLocalCorners(
            Func<TMPro.TextMeshProUGUI, UnityEngine.Vector3[]> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_GetTextContainerLocalCorners @params = new()
            {
                self = self
            };
            if (_beforeGetTextContainerLocalCorners != null)
            {
                foreach (Delegates.GetTextContainerLocalCorners_BeforeArgs toInvoke in
                         _beforeGetTextContainerLocalCorners.GetInvocationList())
                {
                    try
                    {
                        _beforeGetTextContainerLocalCorners?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetTextContainerLocalCorners != null)
            {
                foreach (Delegates.GetTextContainerLocalCorners_AfterArgs toInvoke in _afterGetTextContainerLocalCorners
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetTextContainerLocalCorners.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookClearMesh()
        {
            if (!HookedList.Contains("ClearMesh"))
            {
                HookedList.Add("ClearMesh");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "ClearMesh", true), ClearMesh);
            }
        }

        internal static event Delegates.ClearMesh_BeforeArgs _beforeClearMesh;
        internal static event Delegates.ClearMesh_AfterArgs _afterClearMesh;

        private static void ClearMesh(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_ClearMesh @params = new()
            {
                self = self
            };
            if (_beforeClearMesh != null)
            {
                foreach (Delegates.ClearMesh_BeforeArgs toInvoke in _beforeClearMesh.GetInvocationList())
                {
                    try
                    {
                        _beforeClearMesh?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterClearMesh != null)
            {
                foreach (Delegates.ClearMesh_AfterArgs toInvoke in _afterClearMesh.GetInvocationList())
                {
                    try
                    {
                        _afterClearMesh.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetActiveSubMeshes()
        {
            if (!HookedList.Contains("SetActiveSubMeshes"))
            {
                HookedList.Add("SetActiveSubMeshes");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetActiveSubMeshes", true),
                    SetActiveSubMeshes);
            }
        }

        internal static event Delegates.SetActiveSubMeshes_BeforeArgs _beforeSetActiveSubMeshes;
        internal static event Delegates.SetActiveSubMeshes_AfterArgs _afterSetActiveSubMeshes;

        private static void SetActiveSubMeshes(Action<TMPro.TextMeshProUGUI, bool> orig, TMPro.TextMeshProUGUI self,
            bool state)
        {
            Delegates.Params_SetActiveSubMeshes @params = new()
            {
                self = self, state = state
            };
            if (_beforeSetActiveSubMeshes != null)
            {
                foreach (Delegates.SetActiveSubMeshes_BeforeArgs toInvoke in
                         _beforeSetActiveSubMeshes.GetInvocationList())
                {
                    try
                    {
                        _beforeSetActiveSubMeshes?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            state = @params.state;
            orig(self, state);
            if (_afterSetActiveSubMeshes != null)
            {
                foreach (Delegates.SetActiveSubMeshes_AfterArgs toInvoke in
                         _afterSetActiveSubMeshes.GetInvocationList())
                {
                    try
                    {
                        _afterSetActiveSubMeshes.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetCompoundBounds()
        {
            if (!HookedList.Contains("GetCompoundBounds"))
            {
                HookedList.Add("GetCompoundBounds");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetCompoundBounds", true),
                    GetCompoundBounds);
            }
        }

        internal static event Delegates.GetCompoundBounds_BeforeArgs _beforeGetCompoundBounds;
        internal static event Delegates.GetCompoundBounds_AfterArgs _afterGetCompoundBounds;

        private static UnityEngine.Bounds GetCompoundBounds(Func<TMPro.TextMeshProUGUI, UnityEngine.Bounds> orig,
            TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_GetCompoundBounds @params = new()
            {
                self = self
            };
            if (_beforeGetCompoundBounds != null)
            {
                foreach (Delegates.GetCompoundBounds_BeforeArgs toInvoke in
                         _beforeGetCompoundBounds.GetInvocationList())
                {
                    try
                    {
                        _beforeGetCompoundBounds?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetCompoundBounds != null)
            {
                foreach (Delegates.GetCompoundBounds_AfterArgs toInvoke in _afterGetCompoundBounds.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetCompoundBounds.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookUpdateSDFScale()
        {
            if (!HookedList.Contains("UpdateSDFScale"))
            {
                HookedList.Add("UpdateSDFScale");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateSDFScale", true),
                    UpdateSDFScale);
            }
        }

        internal static event Delegates.UpdateSDFScale_BeforeArgs _beforeUpdateSDFScale;
        internal static event Delegates.UpdateSDFScale_AfterArgs _afterUpdateSDFScale;

        private static void UpdateSDFScale(Action<TMPro.TextMeshProUGUI, float> orig, TMPro.TextMeshProUGUI self,
            float lossyScale)
        {
            Delegates.Params_UpdateSDFScale @params = new()
            {
                self = self, lossyScale = lossyScale
            };
            if (_beforeUpdateSDFScale != null)
            {
                foreach (Delegates.UpdateSDFScale_BeforeArgs toInvoke in _beforeUpdateSDFScale.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateSDFScale?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            lossyScale = @params.lossyScale;
            orig(self, lossyScale);
            if (_afterUpdateSDFScale != null)
            {
                foreach (Delegates.UpdateSDFScale_AfterArgs toInvoke in _afterUpdateSDFScale.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateSDFScale.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookAdjustLineOffset()
        {
            if (!HookedList.Contains("AdjustLineOffset"))
            {
                HookedList.Add("AdjustLineOffset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "AdjustLineOffset", true),
                    AdjustLineOffset);
            }
        }

        internal static event Delegates.AdjustLineOffset_BeforeArgs _beforeAdjustLineOffset;
        internal static event Delegates.AdjustLineOffset_AfterArgs _afterAdjustLineOffset;

        private static void AdjustLineOffset(Action<TMPro.TextMeshProUGUI, int, int, float> orig,
            TMPro.TextMeshProUGUI self, int startIndex, int endIndex, float offset)
        {
            Delegates.Params_AdjustLineOffset @params = new()
            {
                self = self, startIndex = startIndex, endIndex = endIndex, offset = offset
            };
            if (_beforeAdjustLineOffset != null)
            {
                foreach (Delegates.AdjustLineOffset_BeforeArgs toInvoke in _beforeAdjustLineOffset.GetInvocationList())
                {
                    try
                    {
                        _beforeAdjustLineOffset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            startIndex = @params.startIndex;
            endIndex = @params.endIndex;
            offset = @params.offset;
            orig(self, startIndex, endIndex, offset);
            if (_afterAdjustLineOffset != null)
            {
                foreach (Delegates.AdjustLineOffset_AfterArgs toInvoke in _afterAdjustLineOffset.GetInvocationList())
                {
                    try
                    {
                        _afterAdjustLineOffset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_materialForRendering()
        {
            if (!HookedList.Contains("get_materialForRendering"))
            {
                HookedList.Add("get_materialForRendering");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "get_materialForRendering", true),
                    get_materialForRendering);
            }
        }

        internal static event Delegates.get_materialForRendering_BeforeArgs _beforeget_materialForRendering;
        internal static event Delegates.get_materialForRendering_AfterArgs _afterget_materialForRendering;

        private static UnityEngine.Material get_materialForRendering(
            Func<TMPro.TextMeshProUGUI, UnityEngine.Material> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_get_materialForRendering @params = new()
            {
                self = self
            };
            if (_beforeget_materialForRendering != null)
            {
                foreach (Delegates.get_materialForRendering_BeforeArgs toInvoke in _beforeget_materialForRendering
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_materialForRendering?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_materialForRendering != null)
            {
                foreach (Delegates.get_materialForRendering_AfterArgs toInvoke in _afterget_materialForRendering
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_materialForRendering.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_mesh()
        {
            if (!HookedList.Contains("get_mesh"))
            {
                HookedList.Add("get_mesh");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "get_mesh", true), get_mesh);
            }
        }

        internal static event Delegates.get_mesh_BeforeArgs _beforeget_mesh;
        internal static event Delegates.get_mesh_AfterArgs _afterget_mesh;

        private static UnityEngine.Mesh get_mesh(Func<TMPro.TextMeshProUGUI, UnityEngine.Mesh> orig,
            TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_get_mesh @params = new()
            {
                self = self
            };
            if (_beforeget_mesh != null)
            {
                foreach (Delegates.get_mesh_BeforeArgs toInvoke in _beforeget_mesh.GetInvocationList())
                {
                    try
                    {
                        _beforeget_mesh?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_mesh != null)
            {
                foreach (Delegates.get_mesh_AfterArgs toInvoke in _afterget_mesh.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_mesh.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_canvasRenderer()
        {
            if (!HookedList.Contains("get_canvasRenderer"))
            {
                HookedList.Add("get_canvasRenderer");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "get_canvasRenderer", true),
                    get_canvasRenderer);
            }
        }

        internal static event Delegates.get_canvasRenderer_BeforeArgs _beforeget_canvasRenderer;
        internal static event Delegates.get_canvasRenderer_AfterArgs _afterget_canvasRenderer;

        private static UnityEngine.CanvasRenderer get_canvasRenderer(
            Func<TMPro.TextMeshProUGUI, UnityEngine.CanvasRenderer> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_get_canvasRenderer @params = new()
            {
                self = self
            };
            if (_beforeget_canvasRenderer != null)
            {
                foreach (Delegates.get_canvasRenderer_BeforeArgs toInvoke in
                         _beforeget_canvasRenderer.GetInvocationList())
                {
                    try
                    {
                        _beforeget_canvasRenderer?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_canvasRenderer != null)
            {
                foreach (Delegates.get_canvasRenderer_AfterArgs toInvoke in
                         _afterget_canvasRenderer.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_canvasRenderer.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_inlineGraphicManager()
        {
            if (!HookedList.Contains("get_inlineGraphicManager"))
            {
                HookedList.Add("get_inlineGraphicManager");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "get_inlineGraphicManager", true),
                    get_inlineGraphicManager);
            }
        }

        internal static event Delegates.get_inlineGraphicManager_BeforeArgs _beforeget_inlineGraphicManager;
        internal static event Delegates.get_inlineGraphicManager_AfterArgs _afterget_inlineGraphicManager;

        private static TMPro.InlineGraphicManager get_inlineGraphicManager(
            Func<TMPro.TextMeshProUGUI, TMPro.InlineGraphicManager> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_get_inlineGraphicManager @params = new()
            {
                self = self
            };
            if (_beforeget_inlineGraphicManager != null)
            {
                foreach (Delegates.get_inlineGraphicManager_BeforeArgs toInvoke in _beforeget_inlineGraphicManager
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_inlineGraphicManager?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_inlineGraphicManager != null)
            {
                foreach (Delegates.get_inlineGraphicManager_AfterArgs toInvoke in _afterget_inlineGraphicManager
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_inlineGraphicManager.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookCalculateLayoutInputHorizontal()
        {
            if (!HookedList.Contains("CalculateLayoutInputHorizontal"))
            {
                HookedList.Add("CalculateLayoutInputHorizontal");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "CalculateLayoutInputHorizontal",
                        true), CalculateLayoutInputHorizontal);
            }
        }

        internal static event Delegates.CalculateLayoutInputHorizontal_BeforeArgs _beforeCalculateLayoutInputHorizontal;
        internal static event Delegates.CalculateLayoutInputHorizontal_AfterArgs _afterCalculateLayoutInputHorizontal;

        private static void CalculateLayoutInputHorizontal(Action<TMPro.TextMeshProUGUI> orig,
            TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_CalculateLayoutInputHorizontal @params = new()
            {
                self = self
            };
            if (_beforeCalculateLayoutInputHorizontal != null)
            {
                foreach (Delegates.CalculateLayoutInputHorizontal_BeforeArgs toInvoke in
                         _beforeCalculateLayoutInputHorizontal.GetInvocationList())
                {
                    try
                    {
                        _beforeCalculateLayoutInputHorizontal?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterCalculateLayoutInputHorizontal != null)
            {
                foreach (Delegates.CalculateLayoutInputHorizontal_AfterArgs toInvoke in
                         _afterCalculateLayoutInputHorizontal.GetInvocationList())
                {
                    try
                    {
                        _afterCalculateLayoutInputHorizontal.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookCalculateLayoutInputVertical()
        {
            if (!HookedList.Contains("CalculateLayoutInputVertical"))
            {
                HookedList.Add("CalculateLayoutInputVertical");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "CalculateLayoutInputVertical", true),
                    CalculateLayoutInputVertical);
            }
        }

        internal static event Delegates.CalculateLayoutInputVertical_BeforeArgs _beforeCalculateLayoutInputVertical;
        internal static event Delegates.CalculateLayoutInputVertical_AfterArgs _afterCalculateLayoutInputVertical;

        private static void CalculateLayoutInputVertical(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_CalculateLayoutInputVertical @params = new()
            {
                self = self
            };
            if (_beforeCalculateLayoutInputVertical != null)
            {
                foreach (Delegates.CalculateLayoutInputVertical_BeforeArgs toInvoke in
                         _beforeCalculateLayoutInputVertical.GetInvocationList())
                {
                    try
                    {
                        _beforeCalculateLayoutInputVertical?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterCalculateLayoutInputVertical != null)
            {
                foreach (Delegates.CalculateLayoutInputVertical_AfterArgs toInvoke in _afterCalculateLayoutInputVertical
                             .GetInvocationList())
                {
                    try
                    {
                        _afterCalculateLayoutInputVertical.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetVerticesDirty()
        {
            if (!HookedList.Contains("SetVerticesDirty"))
            {
                HookedList.Add("SetVerticesDirty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetVerticesDirty", true),
                    SetVerticesDirty);
            }
        }

        internal static event Delegates.SetVerticesDirty_BeforeArgs _beforeSetVerticesDirty;
        internal static event Delegates.SetVerticesDirty_AfterArgs _afterSetVerticesDirty;

        private static void SetVerticesDirty(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_SetVerticesDirty @params = new()
            {
                self = self
            };
            if (_beforeSetVerticesDirty != null)
            {
                foreach (Delegates.SetVerticesDirty_BeforeArgs toInvoke in _beforeSetVerticesDirty.GetInvocationList())
                {
                    try
                    {
                        _beforeSetVerticesDirty?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterSetVerticesDirty != null)
            {
                foreach (Delegates.SetVerticesDirty_AfterArgs toInvoke in _afterSetVerticesDirty.GetInvocationList())
                {
                    try
                    {
                        _afterSetVerticesDirty.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetLayoutDirty()
        {
            if (!HookedList.Contains("SetLayoutDirty"))
            {
                HookedList.Add("SetLayoutDirty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetLayoutDirty", true),
                    SetLayoutDirty);
            }
        }

        internal static event Delegates.SetLayoutDirty_BeforeArgs _beforeSetLayoutDirty;
        internal static event Delegates.SetLayoutDirty_AfterArgs _afterSetLayoutDirty;

        private static void SetLayoutDirty(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_SetLayoutDirty @params = new()
            {
                self = self
            };
            if (_beforeSetLayoutDirty != null)
            {
                foreach (Delegates.SetLayoutDirty_BeforeArgs toInvoke in _beforeSetLayoutDirty.GetInvocationList())
                {
                    try
                    {
                        _beforeSetLayoutDirty?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterSetLayoutDirty != null)
            {
                foreach (Delegates.SetLayoutDirty_AfterArgs toInvoke in _afterSetLayoutDirty.GetInvocationList())
                {
                    try
                    {
                        _afterSetLayoutDirty.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetMaterialDirty()
        {
            if (!HookedList.Contains("SetMaterialDirty"))
            {
                HookedList.Add("SetMaterialDirty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetMaterialDirty", true),
                    SetMaterialDirty);
            }
        }

        internal static event Delegates.SetMaterialDirty_BeforeArgs _beforeSetMaterialDirty;
        internal static event Delegates.SetMaterialDirty_AfterArgs _afterSetMaterialDirty;

        private static void SetMaterialDirty(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_SetMaterialDirty @params = new()
            {
                self = self
            };
            if (_beforeSetMaterialDirty != null)
            {
                foreach (Delegates.SetMaterialDirty_BeforeArgs toInvoke in _beforeSetMaterialDirty.GetInvocationList())
                {
                    try
                    {
                        _beforeSetMaterialDirty?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterSetMaterialDirty != null)
            {
                foreach (Delegates.SetMaterialDirty_AfterArgs toInvoke in _afterSetMaterialDirty.GetInvocationList())
                {
                    try
                    {
                        _afterSetMaterialDirty.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetAllDirty()
        {
            if (!HookedList.Contains("SetAllDirty"))
            {
                HookedList.Add("SetAllDirty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetAllDirty", true),
                    SetAllDirty);
            }
        }

        internal static event Delegates.SetAllDirty_BeforeArgs _beforeSetAllDirty;
        internal static event Delegates.SetAllDirty_AfterArgs _afterSetAllDirty;

        private static void SetAllDirty(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_SetAllDirty @params = new()
            {
                self = self
            };
            if (_beforeSetAllDirty != null)
            {
                foreach (Delegates.SetAllDirty_BeforeArgs toInvoke in _beforeSetAllDirty.GetInvocationList())
                {
                    try
                    {
                        _beforeSetAllDirty?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterSetAllDirty != null)
            {
                foreach (Delegates.SetAllDirty_AfterArgs toInvoke in _afterSetAllDirty.GetInvocationList())
                {
                    try
                    {
                        _afterSetAllDirty.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookRebuild()
        {
            if (!HookedList.Contains("Rebuild"))
            {
                HookedList.Add("Rebuild");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "Rebuild", true), Rebuild);
            }
        }

        internal static event Delegates.Rebuild_BeforeArgs _beforeRebuild;
        internal static event Delegates.Rebuild_AfterArgs _afterRebuild;

        private static void Rebuild(Action<TMPro.TextMeshProUGUI, UnityEngine.UI.CanvasUpdate> orig,
            TMPro.TextMeshProUGUI self, UnityEngine.UI.CanvasUpdate update)
        {
            Delegates.Params_Rebuild @params = new()
            {
                self = self, update = update
            };
            if (_beforeRebuild != null)
            {
                foreach (Delegates.Rebuild_BeforeArgs toInvoke in _beforeRebuild.GetInvocationList())
                {
                    try
                    {
                        _beforeRebuild?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            update = @params.update;
            orig(self, update);
            if (_afterRebuild != null)
            {
                foreach (Delegates.Rebuild_AfterArgs toInvoke in _afterRebuild.GetInvocationList())
                {
                    try
                    {
                        _afterRebuild.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateSubObjectPivot()
        {
            if (!HookedList.Contains("UpdateSubObjectPivot"))
            {
                HookedList.Add("UpdateSubObjectPivot");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateSubObjectPivot", true),
                    UpdateSubObjectPivot);
            }
        }

        internal static event Delegates.UpdateSubObjectPivot_BeforeArgs _beforeUpdateSubObjectPivot;
        internal static event Delegates.UpdateSubObjectPivot_AfterArgs _afterUpdateSubObjectPivot;

        private static void UpdateSubObjectPivot(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_UpdateSubObjectPivot @params = new()
            {
                self = self
            };
            if (_beforeUpdateSubObjectPivot != null)
            {
                foreach (Delegates.UpdateSubObjectPivot_BeforeArgs toInvoke in _beforeUpdateSubObjectPivot
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateSubObjectPivot?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdateSubObjectPivot != null)
            {
                foreach (Delegates.UpdateSubObjectPivot_AfterArgs toInvoke in _afterUpdateSubObjectPivot
                             .GetInvocationList())
                {
                    try
                    {
                        _afterUpdateSubObjectPivot.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetModifiedMaterial()
        {
            if (!HookedList.Contains("GetModifiedMaterial"))
            {
                HookedList.Add("GetModifiedMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetModifiedMaterial", true),
                    GetModifiedMaterial);
            }
        }

        internal static event Delegates.GetModifiedMaterial_BeforeArgs _beforeGetModifiedMaterial;
        internal static event Delegates.GetModifiedMaterial_AfterArgs _afterGetModifiedMaterial;

        private static UnityEngine.Material GetModifiedMaterial(
            Func<TMPro.TextMeshProUGUI, UnityEngine.Material, UnityEngine.Material> orig, TMPro.TextMeshProUGUI self,
            UnityEngine.Material baseMaterial)
        {
            Delegates.Params_GetModifiedMaterial @params = new()
            {
                self = self, baseMaterial = baseMaterial
            };
            if (_beforeGetModifiedMaterial != null)
            {
                foreach (Delegates.GetModifiedMaterial_BeforeArgs toInvoke in _beforeGetModifiedMaterial
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeGetModifiedMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            baseMaterial = @params.baseMaterial;
            var retVal = orig(self, baseMaterial);
            if (_afterGetModifiedMaterial != null)
            {
                foreach (Delegates.GetModifiedMaterial_AfterArgs toInvoke in
                         _afterGetModifiedMaterial.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetModifiedMaterial.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookUpdateMaterial()
        {
            if (!HookedList.Contains("UpdateMaterial"))
            {
                HookedList.Add("UpdateMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateMaterial", true),
                    UpdateMaterial);
            }
        }

        internal static event Delegates.UpdateMaterial_BeforeArgs _beforeUpdateMaterial;
        internal static event Delegates.UpdateMaterial_AfterArgs _afterUpdateMaterial;

        private static void UpdateMaterial(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_UpdateMaterial @params = new()
            {
                self = self
            };
            if (_beforeUpdateMaterial != null)
            {
                foreach (Delegates.UpdateMaterial_BeforeArgs toInvoke in _beforeUpdateMaterial.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdateMaterial != null)
            {
                foreach (Delegates.UpdateMaterial_AfterArgs toInvoke in _afterUpdateMaterial.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateMaterial.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_maskOffset()
        {
            if (!HookedList.Contains("get_maskOffset"))
            {
                HookedList.Add("get_maskOffset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "get_maskOffset", true),
                    get_maskOffset);
            }
        }

        internal static event Delegates.get_maskOffset_BeforeArgs _beforeget_maskOffset;
        internal static event Delegates.get_maskOffset_AfterArgs _afterget_maskOffset;

        private static UnityEngine.Vector4 get_maskOffset(Func<TMPro.TextMeshProUGUI, UnityEngine.Vector4> orig,
            TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_get_maskOffset @params = new()
            {
                self = self
            };
            if (_beforeget_maskOffset != null)
            {
                foreach (Delegates.get_maskOffset_BeforeArgs toInvoke in _beforeget_maskOffset.GetInvocationList())
                {
                    try
                    {
                        _beforeget_maskOffset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_maskOffset != null)
            {
                foreach (Delegates.get_maskOffset_AfterArgs toInvoke in _afterget_maskOffset.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_maskOffset.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_maskOffset()
        {
            if (!HookedList.Contains("set_maskOffset"))
            {
                HookedList.Add("set_maskOffset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "set_maskOffset", true),
                    set_maskOffset);
            }
        }

        internal static event Delegates.set_maskOffset_BeforeArgs _beforeset_maskOffset;
        internal static event Delegates.set_maskOffset_AfterArgs _afterset_maskOffset;

        private static void set_maskOffset(Action<TMPro.TextMeshProUGUI, UnityEngine.Vector4> orig,
            TMPro.TextMeshProUGUI self, UnityEngine.Vector4 value)
        {
            Delegates.Params_set_maskOffset @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_maskOffset != null)
            {
                foreach (Delegates.set_maskOffset_BeforeArgs toInvoke in _beforeset_maskOffset.GetInvocationList())
                {
                    try
                    {
                        _beforeset_maskOffset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_maskOffset != null)
            {
                foreach (Delegates.set_maskOffset_AfterArgs toInvoke in _afterset_maskOffset.GetInvocationList())
                {
                    try
                    {
                        _afterset_maskOffset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookRecalculateClipping()
        {
            if (!HookedList.Contains("RecalculateClipping"))
            {
                HookedList.Add("RecalculateClipping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "RecalculateClipping", true),
                    RecalculateClipping);
            }
        }

        internal static event Delegates.RecalculateClipping_BeforeArgs _beforeRecalculateClipping;
        internal static event Delegates.RecalculateClipping_AfterArgs _afterRecalculateClipping;

        private static void RecalculateClipping(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_RecalculateClipping @params = new()
            {
                self = self
            };
            if (_beforeRecalculateClipping != null)
            {
                foreach (Delegates.RecalculateClipping_BeforeArgs toInvoke in _beforeRecalculateClipping
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeRecalculateClipping?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterRecalculateClipping != null)
            {
                foreach (Delegates.RecalculateClipping_AfterArgs toInvoke in
                         _afterRecalculateClipping.GetInvocationList())
                {
                    try
                    {
                        _afterRecalculateClipping.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookRecalculateMasking()
        {
            if (!HookedList.Contains("RecalculateMasking"))
            {
                HookedList.Add("RecalculateMasking");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "RecalculateMasking", true),
                    RecalculateMasking);
            }
        }

        internal static event Delegates.RecalculateMasking_BeforeArgs _beforeRecalculateMasking;
        internal static event Delegates.RecalculateMasking_AfterArgs _afterRecalculateMasking;

        private static void RecalculateMasking(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_RecalculateMasking @params = new()
            {
                self = self
            };
            if (_beforeRecalculateMasking != null)
            {
                foreach (Delegates.RecalculateMasking_BeforeArgs toInvoke in
                         _beforeRecalculateMasking.GetInvocationList())
                {
                    try
                    {
                        _beforeRecalculateMasking?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterRecalculateMasking != null)
            {
                foreach (Delegates.RecalculateMasking_AfterArgs toInvoke in
                         _afterRecalculateMasking.GetInvocationList())
                {
                    try
                    {
                        _afterRecalculateMasking.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateMeshPadding()
        {
            if (!HookedList.Contains("UpdateMeshPadding"))
            {
                HookedList.Add("UpdateMeshPadding");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateMeshPadding", true),
                    UpdateMeshPadding);
            }
        }

        internal static event Delegates.UpdateMeshPadding_BeforeArgs _beforeUpdateMeshPadding;
        internal static event Delegates.UpdateMeshPadding_AfterArgs _afterUpdateMeshPadding;

        private static void UpdateMeshPadding(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_UpdateMeshPadding @params = new()
            {
                self = self
            };
            if (_beforeUpdateMeshPadding != null)
            {
                foreach (Delegates.UpdateMeshPadding_BeforeArgs toInvoke in
                         _beforeUpdateMeshPadding.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateMeshPadding?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdateMeshPadding != null)
            {
                foreach (Delegates.UpdateMeshPadding_AfterArgs toInvoke in _afterUpdateMeshPadding.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateMeshPadding.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookInternalCrossFadeColor()
        {
            if (!HookedList.Contains("InternalCrossFadeColor"))
            {
                HookedList.Add("InternalCrossFadeColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "InternalCrossFadeColor", true),
                    InternalCrossFadeColor);
            }
        }

        internal static event Delegates.InternalCrossFadeColor_BeforeArgs _beforeInternalCrossFadeColor;
        internal static event Delegates.InternalCrossFadeColor_AfterArgs _afterInternalCrossFadeColor;

        private static void InternalCrossFadeColor(
            Action<TMPro.TextMeshProUGUI, UnityEngine.Color, float, bool, bool> orig, TMPro.TextMeshProUGUI self,
            UnityEngine.Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha)
        {
            Delegates.Params_InternalCrossFadeColor @params = new()
            {
                self = self, targetColor = targetColor, duration = duration, ignoreTimeScale = ignoreTimeScale,
                useAlpha = useAlpha
            };
            if (_beforeInternalCrossFadeColor != null)
            {
                foreach (Delegates.InternalCrossFadeColor_BeforeArgs toInvoke in _beforeInternalCrossFadeColor
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeInternalCrossFadeColor?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            targetColor = @params.targetColor;
            duration = @params.duration;
            ignoreTimeScale = @params.ignoreTimeScale;
            useAlpha = @params.useAlpha;
            orig(self, targetColor, duration, ignoreTimeScale, useAlpha);
            if (_afterInternalCrossFadeColor != null)
            {
                foreach (Delegates.InternalCrossFadeColor_AfterArgs toInvoke in _afterInternalCrossFadeColor
                             .GetInvocationList())
                {
                    try
                    {
                        _afterInternalCrossFadeColor.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookInternalCrossFadeAlpha()
        {
            if (!HookedList.Contains("InternalCrossFadeAlpha"))
            {
                HookedList.Add("InternalCrossFadeAlpha");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "InternalCrossFadeAlpha", true),
                    InternalCrossFadeAlpha);
            }
        }

        internal static event Delegates.InternalCrossFadeAlpha_BeforeArgs _beforeInternalCrossFadeAlpha;
        internal static event Delegates.InternalCrossFadeAlpha_AfterArgs _afterInternalCrossFadeAlpha;

        private static void InternalCrossFadeAlpha(Action<TMPro.TextMeshProUGUI, float, float, bool> orig,
            TMPro.TextMeshProUGUI self, float alpha, float duration, bool ignoreTimeScale)
        {
            Delegates.Params_InternalCrossFadeAlpha @params = new()
            {
                self = self, alpha = alpha, duration = duration, ignoreTimeScale = ignoreTimeScale
            };
            if (_beforeInternalCrossFadeAlpha != null)
            {
                foreach (Delegates.InternalCrossFadeAlpha_BeforeArgs toInvoke in _beforeInternalCrossFadeAlpha
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeInternalCrossFadeAlpha?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            alpha = @params.alpha;
            duration = @params.duration;
            ignoreTimeScale = @params.ignoreTimeScale;
            orig(self, alpha, duration, ignoreTimeScale);
            if (_afterInternalCrossFadeAlpha != null)
            {
                foreach (Delegates.InternalCrossFadeAlpha_AfterArgs toInvoke in _afterInternalCrossFadeAlpha
                             .GetInvocationList())
                {
                    try
                    {
                        _afterInternalCrossFadeAlpha.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookForceMeshUpdate()
        {
            if (!HookedList.Contains("ForceMeshUpdate"))
            {
                HookedList.Add("ForceMeshUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "ForceMeshUpdate", true),
                    ForceMeshUpdate);
            }
        }

        internal static event Delegates.ForceMeshUpdate_BeforeArgs _beforeForceMeshUpdate;
        internal static event Delegates.ForceMeshUpdate_AfterArgs _afterForceMeshUpdate;

        private static void ForceMeshUpdate(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_ForceMeshUpdate @params = new()
            {
                self = self
            };
            if (_beforeForceMeshUpdate != null)
            {
                foreach (Delegates.ForceMeshUpdate_BeforeArgs toInvoke in _beforeForceMeshUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeForceMeshUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterForceMeshUpdate != null)
            {
                foreach (Delegates.ForceMeshUpdate_AfterArgs toInvoke in _afterForceMeshUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterForceMeshUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookForceMeshUpdate_bool()
        {
            if (!HookedList.Contains("ForceMeshUpdate_bool"))
            {
                HookedList.Add("ForceMeshUpdate_bool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "ForceMeshUpdate_bool", true),
                    ForceMeshUpdate_bool);
            }
        }

        internal static event Delegates.ForceMeshUpdate_bool_BeforeArgs _beforeForceMeshUpdate_bool;
        internal static event Delegates.ForceMeshUpdate_bool_AfterArgs _afterForceMeshUpdate_bool;

        private static void ForceMeshUpdate_bool(Action<TMPro.TextMeshProUGUI, bool> orig, TMPro.TextMeshProUGUI self,
            bool ignoreInactive)
        {
            Delegates.Params_ForceMeshUpdate_bool @params = new()
            {
                self = self, ignoreInactive = ignoreInactive
            };
            if (_beforeForceMeshUpdate_bool != null)
            {
                foreach (Delegates.ForceMeshUpdate_bool_BeforeArgs toInvoke in _beforeForceMeshUpdate_bool
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeForceMeshUpdate_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            ignoreInactive = @params.ignoreInactive;
            orig(self, ignoreInactive);
            if (_afterForceMeshUpdate_bool != null)
            {
                foreach (Delegates.ForceMeshUpdate_bool_AfterArgs toInvoke in _afterForceMeshUpdate_bool
                             .GetInvocationList())
                {
                    try
                    {
                        _afterForceMeshUpdate_bool.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetTextInfo()
        {
            if (!HookedList.Contains("GetTextInfo"))
            {
                HookedList.Add("GetTextInfo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetTextInfo", true),
                    GetTextInfo);
            }
        }

        internal static event Delegates.GetTextInfo_BeforeArgs _beforeGetTextInfo;
        internal static event Delegates.GetTextInfo_AfterArgs _afterGetTextInfo;

        private static TMPro.TMP_TextInfo GetTextInfo(Func<TMPro.TextMeshProUGUI, string, TMPro.TMP_TextInfo> orig,
            TMPro.TextMeshProUGUI self, string text)
        {
            Delegates.Params_GetTextInfo @params = new()
            {
                self = self, text = text
            };
            if (_beforeGetTextInfo != null)
            {
                foreach (Delegates.GetTextInfo_BeforeArgs toInvoke in _beforeGetTextInfo.GetInvocationList())
                {
                    try
                    {
                        _beforeGetTextInfo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            text = @params.text;
            var retVal = orig(self, text);
            if (_afterGetTextInfo != null)
            {
                foreach (Delegates.GetTextInfo_AfterArgs toInvoke in _afterGetTextInfo.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetTextInfo.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookUpdateGeometry()
        {
            if (!HookedList.Contains("UpdateGeometry"))
            {
                HookedList.Add("UpdateGeometry");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateGeometry", true),
                    UpdateGeometry);
            }
        }

        internal static event Delegates.UpdateGeometry_BeforeArgs _beforeUpdateGeometry;
        internal static event Delegates.UpdateGeometry_AfterArgs _afterUpdateGeometry;

        private static void UpdateGeometry(Action<TMPro.TextMeshProUGUI, UnityEngine.Mesh, int> orig,
            TMPro.TextMeshProUGUI self, UnityEngine.Mesh mesh, int index)
        {
            Delegates.Params_UpdateGeometry @params = new()
            {
                self = self, mesh = mesh, index = index
            };
            if (_beforeUpdateGeometry != null)
            {
                foreach (Delegates.UpdateGeometry_BeforeArgs toInvoke in _beforeUpdateGeometry.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateGeometry?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            mesh = @params.mesh;
            index = @params.index;
            orig(self, mesh, index);
            if (_afterUpdateGeometry != null)
            {
                foreach (Delegates.UpdateGeometry_AfterArgs toInvoke in _afterUpdateGeometry.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateGeometry.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateVertexData_TMP_VertexDataUpdateFlags()
        {
            if (!HookedList.Contains("UpdateVertexData_TMP_VertexDataUpdateFlags"))
            {
                HookedList.Add("UpdateVertexData_TMP_VertexDataUpdateFlags");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI),
                        "UpdateVertexData_TMP_VertexDataUpdateFlags", true),
                    UpdateVertexData_TMP_VertexDataUpdateFlags);
            }
        }

        internal static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_BeforeArgs
            _beforeUpdateVertexData_TMP_VertexDataUpdateFlags;

        internal static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_AfterArgs
            _afterUpdateVertexData_TMP_VertexDataUpdateFlags;

        private static void UpdateVertexData_TMP_VertexDataUpdateFlags(
            Action<TMPro.TextMeshProUGUI, TMPro.TMP_VertexDataUpdateFlags> orig, TMPro.TextMeshProUGUI self,
            TMPro.TMP_VertexDataUpdateFlags flags)
        {
            Delegates.Params_UpdateVertexData_TMP_VertexDataUpdateFlags @params = new()
            {
                self = self, flags = flags
            };
            if (_beforeUpdateVertexData_TMP_VertexDataUpdateFlags != null)
            {
                foreach (Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_BeforeArgs toInvoke in
                         _beforeUpdateVertexData_TMP_VertexDataUpdateFlags.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateVertexData_TMP_VertexDataUpdateFlags?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            flags = @params.flags;
            orig(self, flags);
            if (_afterUpdateVertexData_TMP_VertexDataUpdateFlags != null)
            {
                foreach (Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_AfterArgs toInvoke in
                         _afterUpdateVertexData_TMP_VertexDataUpdateFlags.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateVertexData_TMP_VertexDataUpdateFlags.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateVertexData()
        {
            if (!HookedList.Contains("UpdateVertexData"))
            {
                HookedList.Add("UpdateVertexData");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateVertexData", true),
                    UpdateVertexData);
            }
        }

        internal static event Delegates.UpdateVertexData_BeforeArgs _beforeUpdateVertexData;
        internal static event Delegates.UpdateVertexData_AfterArgs _afterUpdateVertexData;

        private static void UpdateVertexData(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_UpdateVertexData @params = new()
            {
                self = self
            };
            if (_beforeUpdateVertexData != null)
            {
                foreach (Delegates.UpdateVertexData_BeforeArgs toInvoke in _beforeUpdateVertexData.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateVertexData?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdateVertexData != null)
            {
                foreach (Delegates.UpdateVertexData_AfterArgs toInvoke in _afterUpdateVertexData.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateVertexData.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateFontAsset()
        {
            if (!HookedList.Contains("UpdateFontAsset"))
            {
                HookedList.Add("UpdateFontAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateFontAsset", true),
                    UpdateFontAsset);
            }
        }

        internal static event Delegates.UpdateFontAsset_BeforeArgs _beforeUpdateFontAsset;
        internal static event Delegates.UpdateFontAsset_AfterArgs _afterUpdateFontAsset;

        private static void UpdateFontAsset(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self)
        {
            Delegates.Params_UpdateFontAsset @params = new()
            {
                self = self
            };
            if (_beforeUpdateFontAsset != null)
            {
                foreach (Delegates.UpdateFontAsset_BeforeArgs toInvoke in _beforeUpdateFontAsset.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateFontAsset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdateFontAsset != null)
            {
                foreach (Delegates.UpdateFontAsset_AfterArgs toInvoke in _afterUpdateFontAsset.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateFontAsset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Awake
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_OnEnable
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_OnDisable
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_OnDestroy
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_AfterArgs(Params_OnDestroy args);

        public delegate void OnDestroy_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_LoadFontAsset
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void LoadFontAsset_BeforeArgs(Params_LoadFontAsset args);

        public delegate void LoadFontAsset_AfterArgs(Params_LoadFontAsset args);

        public delegate void LoadFontAsset_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_GetCanvas
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void GetCanvas_BeforeArgs(Params_GetCanvas args);

        public delegate UnityEngine.Canvas GetCanvas_AfterArgs(Params_GetCanvas args, UnityEngine.Canvas ret);

        public delegate UnityEngine.Canvas GetCanvas_WithArgs(Func<TMPro.TextMeshProUGUI, UnityEngine.Canvas> orig,
            TMPro.TextMeshProUGUI self);

        public sealed class Params_UpdateEnvMapMatrix
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void UpdateEnvMapMatrix_BeforeArgs(Params_UpdateEnvMapMatrix args);

        public delegate void UpdateEnvMapMatrix_AfterArgs(Params_UpdateEnvMapMatrix args);

        public delegate void
            UpdateEnvMapMatrix_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_EnableMasking
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void EnableMasking_BeforeArgs(Params_EnableMasking args);

        public delegate void EnableMasking_AfterArgs(Params_EnableMasking args);

        public delegate void EnableMasking_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_DisableMasking
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void DisableMasking_BeforeArgs(Params_DisableMasking args);

        public delegate void DisableMasking_AfterArgs(Params_DisableMasking args);

        public delegate void DisableMasking_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_UpdateMask
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void UpdateMask_BeforeArgs(Params_UpdateMask args);

        public delegate void UpdateMask_AfterArgs(Params_UpdateMask args);

        public delegate void UpdateMask_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_GetMaterial
        {
            public TMPro.TextMeshProUGUI self;
            public UnityEngine.Material mat;
        }

        public delegate void GetMaterial_BeforeArgs(Params_GetMaterial args);

        public delegate UnityEngine.Material GetMaterial_AfterArgs(Params_GetMaterial args, UnityEngine.Material ret);

        public delegate UnityEngine.Material GetMaterial_WithArgs(
            Func<TMPro.TextMeshProUGUI, UnityEngine.Material, UnityEngine.Material> orig, TMPro.TextMeshProUGUI self,
            UnityEngine.Material mat);

        public sealed class Params_GetMaterials
        {
            public TMPro.TextMeshProUGUI self;
            public UnityEngine.Material[] mats;
        }

        public delegate void GetMaterials_BeforeArgs(Params_GetMaterials args);

        public delegate UnityEngine.Material[] GetMaterials_AfterArgs(Params_GetMaterials args,
            UnityEngine.Material[] ret);

        public delegate UnityEngine.Material[] GetMaterials_WithArgs(
            Func<TMPro.TextMeshProUGUI, UnityEngine.Material[], UnityEngine.Material[]> orig,
            TMPro.TextMeshProUGUI self, UnityEngine.Material[] mats);

        public sealed class Params_SetSharedMaterial
        {
            public TMPro.TextMeshProUGUI self;
            public UnityEngine.Material mat;
        }

        public delegate void SetSharedMaterial_BeforeArgs(Params_SetSharedMaterial args);

        public delegate void SetSharedMaterial_AfterArgs(Params_SetSharedMaterial args);

        public delegate void SetSharedMaterial_WithArgs(Action<TMPro.TextMeshProUGUI, UnityEngine.Material> orig,
            TMPro.TextMeshProUGUI self, UnityEngine.Material mat);

        public sealed class Params_GetSharedMaterials
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void GetSharedMaterials_BeforeArgs(Params_GetSharedMaterials args);

        public delegate UnityEngine.Material[] GetSharedMaterials_AfterArgs(Params_GetSharedMaterials args,
            UnityEngine.Material[] ret);

        public delegate UnityEngine.Material[] GetSharedMaterials_WithArgs(
            Func<TMPro.TextMeshProUGUI, UnityEngine.Material[]> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_SetSharedMaterials
        {
            public TMPro.TextMeshProUGUI self;
            public UnityEngine.Material[] materials;
        }

        public delegate void SetSharedMaterials_BeforeArgs(Params_SetSharedMaterials args);

        public delegate void SetSharedMaterials_AfterArgs(Params_SetSharedMaterials args);

        public delegate void SetSharedMaterials_WithArgs(Action<TMPro.TextMeshProUGUI, UnityEngine.Material[]> orig,
            TMPro.TextMeshProUGUI self, UnityEngine.Material[] materials);

        public sealed class Params_SetOutlineThickness
        {
            public TMPro.TextMeshProUGUI self;
            public float thickness;
        }

        public delegate void SetOutlineThickness_BeforeArgs(Params_SetOutlineThickness args);

        public delegate void SetOutlineThickness_AfterArgs(Params_SetOutlineThickness args);

        public delegate void SetOutlineThickness_WithArgs(Action<TMPro.TextMeshProUGUI, float> orig,
            TMPro.TextMeshProUGUI self, float thickness);

        public sealed class Params_SetFaceColor
        {
            public TMPro.TextMeshProUGUI self;
            public UnityEngine.Color32 color;
        }

        public delegate void SetFaceColor_BeforeArgs(Params_SetFaceColor args);

        public delegate void SetFaceColor_AfterArgs(Params_SetFaceColor args);

        public delegate void SetFaceColor_WithArgs(Action<TMPro.TextMeshProUGUI, UnityEngine.Color32> orig,
            TMPro.TextMeshProUGUI self, UnityEngine.Color32 color);

        public sealed class Params_SetOutlineColor
        {
            public TMPro.TextMeshProUGUI self;
            public UnityEngine.Color32 color;
        }

        public delegate void SetOutlineColor_BeforeArgs(Params_SetOutlineColor args);

        public delegate void SetOutlineColor_AfterArgs(Params_SetOutlineColor args);

        public delegate void SetOutlineColor_WithArgs(Action<TMPro.TextMeshProUGUI, UnityEngine.Color32> orig,
            TMPro.TextMeshProUGUI self, UnityEngine.Color32 color);

        public sealed class Params_SetShaderDepth
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void SetShaderDepth_BeforeArgs(Params_SetShaderDepth args);

        public delegate void SetShaderDepth_AfterArgs(Params_SetShaderDepth args);

        public delegate void SetShaderDepth_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_SetCulling
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void SetCulling_BeforeArgs(Params_SetCulling args);

        public delegate void SetCulling_AfterArgs(Params_SetCulling args);

        public delegate void SetCulling_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_SetPerspectiveCorrection
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void SetPerspectiveCorrection_BeforeArgs(Params_SetPerspectiveCorrection args);

        public delegate void SetPerspectiveCorrection_AfterArgs(Params_SetPerspectiveCorrection args);

        public delegate void SetPerspectiveCorrection_WithArgs(Action<TMPro.TextMeshProUGUI> orig,
            TMPro.TextMeshProUGUI self);

        public sealed class Params_GetPaddingForMaterial_Material
        {
            public TMPro.TextMeshProUGUI self;
            public UnityEngine.Material mat;
        }

        public delegate void GetPaddingForMaterial_Material_BeforeArgs(Params_GetPaddingForMaterial_Material args);

        public delegate float GetPaddingForMaterial_Material_AfterArgs(Params_GetPaddingForMaterial_Material args,
            float ret);

        public delegate float GetPaddingForMaterial_Material_WithArgs(
            Func<TMPro.TextMeshProUGUI, UnityEngine.Material, float> orig, TMPro.TextMeshProUGUI self,
            UnityEngine.Material mat);

        public sealed class Params_GetPaddingForMaterial
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void GetPaddingForMaterial_BeforeArgs(Params_GetPaddingForMaterial args);

        public delegate float GetPaddingForMaterial_AfterArgs(Params_GetPaddingForMaterial args, float ret);

        public delegate float GetPaddingForMaterial_WithArgs(Func<TMPro.TextMeshProUGUI, float> orig,
            TMPro.TextMeshProUGUI self);

        public sealed class Params_SetMeshArrays
        {
            public TMPro.TextMeshProUGUI self;
            public int size;
        }

        public delegate void SetMeshArrays_BeforeArgs(Params_SetMeshArrays args);

        public delegate void SetMeshArrays_AfterArgs(Params_SetMeshArrays args);

        public delegate void SetMeshArrays_WithArgs(Action<TMPro.TextMeshProUGUI, int> orig, TMPro.TextMeshProUGUI self,
            int size);

        public sealed class Params_SetArraySizes
        {
            public TMPro.TextMeshProUGUI self;
            public int[] chars;
        }

        public delegate void SetArraySizes_BeforeArgs(Params_SetArraySizes args);

        public delegate int SetArraySizes_AfterArgs(Params_SetArraySizes args, int ret);

        public delegate int SetArraySizes_WithArgs(Func<TMPro.TextMeshProUGUI, int[], int> orig,
            TMPro.TextMeshProUGUI self, int[] chars);

        public sealed class Params_ComputeMarginSize
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void ComputeMarginSize_BeforeArgs(Params_ComputeMarginSize args);

        public delegate void ComputeMarginSize_AfterArgs(Params_ComputeMarginSize args);

        public delegate void ComputeMarginSize_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_OnDidApplyAnimationProperties
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void OnDidApplyAnimationProperties_BeforeArgs(Params_OnDidApplyAnimationProperties args);

        public delegate void OnDidApplyAnimationProperties_AfterArgs(Params_OnDidApplyAnimationProperties args);

        public delegate void OnDidApplyAnimationProperties_WithArgs(Action<TMPro.TextMeshProUGUI> orig,
            TMPro.TextMeshProUGUI self);

        public sealed class Params_OnCanvasHierarchyChanged
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void OnCanvasHierarchyChanged_BeforeArgs(Params_OnCanvasHierarchyChanged args);

        public delegate void OnCanvasHierarchyChanged_AfterArgs(Params_OnCanvasHierarchyChanged args);

        public delegate void OnCanvasHierarchyChanged_WithArgs(Action<TMPro.TextMeshProUGUI> orig,
            TMPro.TextMeshProUGUI self);

        public sealed class Params_OnTransformParentChanged
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void OnTransformParentChanged_BeforeArgs(Params_OnTransformParentChanged args);

        public delegate void OnTransformParentChanged_AfterArgs(Params_OnTransformParentChanged args);

        public delegate void OnTransformParentChanged_WithArgs(Action<TMPro.TextMeshProUGUI> orig,
            TMPro.TextMeshProUGUI self);

        public sealed class Params_OnRectTransformDimensionsChange
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void OnRectTransformDimensionsChange_BeforeArgs(Params_OnRectTransformDimensionsChange args);

        public delegate void OnRectTransformDimensionsChange_AfterArgs(Params_OnRectTransformDimensionsChange args);

        public delegate void OnRectTransformDimensionsChange_WithArgs(Action<TMPro.TextMeshProUGUI> orig,
            TMPro.TextMeshProUGUI self);

        public sealed class Params_LateUpdate
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);

        public delegate void LateUpdate_AfterArgs(Params_LateUpdate args);

        public delegate void LateUpdate_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_OnPreRenderCanvas
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void OnPreRenderCanvas_BeforeArgs(Params_OnPreRenderCanvas args);

        public delegate void OnPreRenderCanvas_AfterArgs(Params_OnPreRenderCanvas args);

        public delegate void OnPreRenderCanvas_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_GenerateTextMesh
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void GenerateTextMesh_BeforeArgs(Params_GenerateTextMesh args);

        public delegate void GenerateTextMesh_AfterArgs(Params_GenerateTextMesh args);

        public delegate void GenerateTextMesh_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_GetTextContainerLocalCorners
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void GetTextContainerLocalCorners_BeforeArgs(Params_GetTextContainerLocalCorners args);

        public delegate UnityEngine.Vector3[] GetTextContainerLocalCorners_AfterArgs(
            Params_GetTextContainerLocalCorners args, UnityEngine.Vector3[] ret);

        public delegate UnityEngine.Vector3[] GetTextContainerLocalCorners_WithArgs(
            Func<TMPro.TextMeshProUGUI, UnityEngine.Vector3[]> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_ClearMesh
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void ClearMesh_BeforeArgs(Params_ClearMesh args);

        public delegate void ClearMesh_AfterArgs(Params_ClearMesh args);

        public delegate void ClearMesh_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_SetActiveSubMeshes
        {
            public TMPro.TextMeshProUGUI self;
            public bool state;
        }

        public delegate void SetActiveSubMeshes_BeforeArgs(Params_SetActiveSubMeshes args);

        public delegate void SetActiveSubMeshes_AfterArgs(Params_SetActiveSubMeshes args);

        public delegate void SetActiveSubMeshes_WithArgs(Action<TMPro.TextMeshProUGUI, bool> orig,
            TMPro.TextMeshProUGUI self, bool state);

        public sealed class Params_GetCompoundBounds
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void GetCompoundBounds_BeforeArgs(Params_GetCompoundBounds args);

        public delegate UnityEngine.Bounds GetCompoundBounds_AfterArgs(Params_GetCompoundBounds args,
            UnityEngine.Bounds ret);

        public delegate UnityEngine.Bounds GetCompoundBounds_WithArgs(
            Func<TMPro.TextMeshProUGUI, UnityEngine.Bounds> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_UpdateSDFScale
        {
            public TMPro.TextMeshProUGUI self;
            public float lossyScale;
        }

        public delegate void UpdateSDFScale_BeforeArgs(Params_UpdateSDFScale args);

        public delegate void UpdateSDFScale_AfterArgs(Params_UpdateSDFScale args);

        public delegate void UpdateSDFScale_WithArgs(Action<TMPro.TextMeshProUGUI, float> orig,
            TMPro.TextMeshProUGUI self, float lossyScale);

        public sealed class Params_AdjustLineOffset
        {
            public TMPro.TextMeshProUGUI self;
            public int startIndex;
            public int endIndex;
            public float offset;
        }

        public delegate void AdjustLineOffset_BeforeArgs(Params_AdjustLineOffset args);

        public delegate void AdjustLineOffset_AfterArgs(Params_AdjustLineOffset args);

        public delegate void AdjustLineOffset_WithArgs(Action<TMPro.TextMeshProUGUI, int, int, float> orig,
            TMPro.TextMeshProUGUI self, int startIndex, int endIndex, float offset);

        public sealed class Params_get_materialForRendering
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void get_materialForRendering_BeforeArgs(Params_get_materialForRendering args);

        public delegate UnityEngine.Material get_materialForRendering_AfterArgs(Params_get_materialForRendering args,
            UnityEngine.Material ret);

        public delegate UnityEngine.Material get_materialForRendering_WithArgs(
            Func<TMPro.TextMeshProUGUI, UnityEngine.Material> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_get_mesh
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void get_mesh_BeforeArgs(Params_get_mesh args);

        public delegate UnityEngine.Mesh get_mesh_AfterArgs(Params_get_mesh args, UnityEngine.Mesh ret);

        public delegate UnityEngine.Mesh get_mesh_WithArgs(Func<TMPro.TextMeshProUGUI, UnityEngine.Mesh> orig,
            TMPro.TextMeshProUGUI self);

        public sealed class Params_get_canvasRenderer
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void get_canvasRenderer_BeforeArgs(Params_get_canvasRenderer args);

        public delegate UnityEngine.CanvasRenderer get_canvasRenderer_AfterArgs(Params_get_canvasRenderer args,
            UnityEngine.CanvasRenderer ret);

        public delegate UnityEngine.CanvasRenderer get_canvasRenderer_WithArgs(
            Func<TMPro.TextMeshProUGUI, UnityEngine.CanvasRenderer> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_get_inlineGraphicManager
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void get_inlineGraphicManager_BeforeArgs(Params_get_inlineGraphicManager args);

        public delegate TMPro.InlineGraphicManager get_inlineGraphicManager_AfterArgs(
            Params_get_inlineGraphicManager args, TMPro.InlineGraphicManager ret);

        public delegate TMPro.InlineGraphicManager get_inlineGraphicManager_WithArgs(
            Func<TMPro.TextMeshProUGUI, TMPro.InlineGraphicManager> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_CalculateLayoutInputHorizontal
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void CalculateLayoutInputHorizontal_BeforeArgs(Params_CalculateLayoutInputHorizontal args);

        public delegate void CalculateLayoutInputHorizontal_AfterArgs(Params_CalculateLayoutInputHorizontal args);

        public delegate void CalculateLayoutInputHorizontal_WithArgs(Action<TMPro.TextMeshProUGUI> orig,
            TMPro.TextMeshProUGUI self);

        public sealed class Params_CalculateLayoutInputVertical
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void CalculateLayoutInputVertical_BeforeArgs(Params_CalculateLayoutInputVertical args);

        public delegate void CalculateLayoutInputVertical_AfterArgs(Params_CalculateLayoutInputVertical args);

        public delegate void CalculateLayoutInputVertical_WithArgs(Action<TMPro.TextMeshProUGUI> orig,
            TMPro.TextMeshProUGUI self);

        public sealed class Params_SetVerticesDirty
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void SetVerticesDirty_BeforeArgs(Params_SetVerticesDirty args);

        public delegate void SetVerticesDirty_AfterArgs(Params_SetVerticesDirty args);

        public delegate void SetVerticesDirty_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_SetLayoutDirty
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void SetLayoutDirty_BeforeArgs(Params_SetLayoutDirty args);

        public delegate void SetLayoutDirty_AfterArgs(Params_SetLayoutDirty args);

        public delegate void SetLayoutDirty_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_SetMaterialDirty
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void SetMaterialDirty_BeforeArgs(Params_SetMaterialDirty args);

        public delegate void SetMaterialDirty_AfterArgs(Params_SetMaterialDirty args);

        public delegate void SetMaterialDirty_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_SetAllDirty
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void SetAllDirty_BeforeArgs(Params_SetAllDirty args);

        public delegate void SetAllDirty_AfterArgs(Params_SetAllDirty args);

        public delegate void SetAllDirty_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_Rebuild
        {
            public TMPro.TextMeshProUGUI self;
            public UnityEngine.UI.CanvasUpdate update;
        }

        public delegate void Rebuild_BeforeArgs(Params_Rebuild args);

        public delegate void Rebuild_AfterArgs(Params_Rebuild args);

        public delegate void Rebuild_WithArgs(Action<TMPro.TextMeshProUGUI, UnityEngine.UI.CanvasUpdate> orig,
            TMPro.TextMeshProUGUI self, UnityEngine.UI.CanvasUpdate update);

        public sealed class Params_UpdateSubObjectPivot
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void UpdateSubObjectPivot_BeforeArgs(Params_UpdateSubObjectPivot args);

        public delegate void UpdateSubObjectPivot_AfterArgs(Params_UpdateSubObjectPivot args);

        public delegate void UpdateSubObjectPivot_WithArgs(Action<TMPro.TextMeshProUGUI> orig,
            TMPro.TextMeshProUGUI self);

        public sealed class Params_GetModifiedMaterial
        {
            public TMPro.TextMeshProUGUI self;
            public UnityEngine.Material baseMaterial;
        }

        public delegate void GetModifiedMaterial_BeforeArgs(Params_GetModifiedMaterial args);

        public delegate UnityEngine.Material GetModifiedMaterial_AfterArgs(Params_GetModifiedMaterial args,
            UnityEngine.Material ret);

        public delegate UnityEngine.Material GetModifiedMaterial_WithArgs(
            Func<TMPro.TextMeshProUGUI, UnityEngine.Material, UnityEngine.Material> orig, TMPro.TextMeshProUGUI self,
            UnityEngine.Material baseMaterial);

        public sealed class Params_UpdateMaterial
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void UpdateMaterial_BeforeArgs(Params_UpdateMaterial args);

        public delegate void UpdateMaterial_AfterArgs(Params_UpdateMaterial args);

        public delegate void UpdateMaterial_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_get_maskOffset
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void get_maskOffset_BeforeArgs(Params_get_maskOffset args);

        public delegate UnityEngine.Vector4 get_maskOffset_AfterArgs(Params_get_maskOffset args,
            UnityEngine.Vector4 ret);

        public delegate UnityEngine.Vector4 get_maskOffset_WithArgs(
            Func<TMPro.TextMeshProUGUI, UnityEngine.Vector4> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_set_maskOffset
        {
            public TMPro.TextMeshProUGUI self;
            public UnityEngine.Vector4 value;
        }

        public delegate void set_maskOffset_BeforeArgs(Params_set_maskOffset args);

        public delegate void set_maskOffset_AfterArgs(Params_set_maskOffset args);

        public delegate void set_maskOffset_WithArgs(Action<TMPro.TextMeshProUGUI, UnityEngine.Vector4> orig,
            TMPro.TextMeshProUGUI self, UnityEngine.Vector4 value);

        public sealed class Params_RecalculateClipping
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void RecalculateClipping_BeforeArgs(Params_RecalculateClipping args);

        public delegate void RecalculateClipping_AfterArgs(Params_RecalculateClipping args);

        public delegate void RecalculateClipping_WithArgs(Action<TMPro.TextMeshProUGUI> orig,
            TMPro.TextMeshProUGUI self);

        public sealed class Params_RecalculateMasking
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void RecalculateMasking_BeforeArgs(Params_RecalculateMasking args);

        public delegate void RecalculateMasking_AfterArgs(Params_RecalculateMasking args);

        public delegate void
            RecalculateMasking_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_UpdateMeshPadding
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void UpdateMeshPadding_BeforeArgs(Params_UpdateMeshPadding args);

        public delegate void UpdateMeshPadding_AfterArgs(Params_UpdateMeshPadding args);

        public delegate void UpdateMeshPadding_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_InternalCrossFadeColor
        {
            public TMPro.TextMeshProUGUI self;
            public UnityEngine.Color targetColor;
            public float duration;
            public bool ignoreTimeScale;
            public bool useAlpha;
        }

        public delegate void InternalCrossFadeColor_BeforeArgs(Params_InternalCrossFadeColor args);

        public delegate void InternalCrossFadeColor_AfterArgs(Params_InternalCrossFadeColor args);

        public delegate void InternalCrossFadeColor_WithArgs(
            Action<TMPro.TextMeshProUGUI, UnityEngine.Color, float, bool, bool> orig, TMPro.TextMeshProUGUI self,
            UnityEngine.Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha);

        public sealed class Params_InternalCrossFadeAlpha
        {
            public TMPro.TextMeshProUGUI self;
            public float alpha;
            public float duration;
            public bool ignoreTimeScale;
        }

        public delegate void InternalCrossFadeAlpha_BeforeArgs(Params_InternalCrossFadeAlpha args);

        public delegate void InternalCrossFadeAlpha_AfterArgs(Params_InternalCrossFadeAlpha args);

        public delegate void InternalCrossFadeAlpha_WithArgs(Action<TMPro.TextMeshProUGUI, float, float, bool> orig,
            TMPro.TextMeshProUGUI self, float alpha, float duration, bool ignoreTimeScale);

        public sealed class Params_ForceMeshUpdate
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void ForceMeshUpdate_BeforeArgs(Params_ForceMeshUpdate args);

        public delegate void ForceMeshUpdate_AfterArgs(Params_ForceMeshUpdate args);

        public delegate void ForceMeshUpdate_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_ForceMeshUpdate_bool
        {
            public TMPro.TextMeshProUGUI self;
            public bool ignoreInactive;
        }

        public delegate void ForceMeshUpdate_bool_BeforeArgs(Params_ForceMeshUpdate_bool args);

        public delegate void ForceMeshUpdate_bool_AfterArgs(Params_ForceMeshUpdate_bool args);

        public delegate void ForceMeshUpdate_bool_WithArgs(Action<TMPro.TextMeshProUGUI, bool> orig,
            TMPro.TextMeshProUGUI self, bool ignoreInactive);

        public sealed class Params_GetTextInfo
        {
            public TMPro.TextMeshProUGUI self;
            public string text;
        }

        public delegate void GetTextInfo_BeforeArgs(Params_GetTextInfo args);

        public delegate TMPro.TMP_TextInfo GetTextInfo_AfterArgs(Params_GetTextInfo args, TMPro.TMP_TextInfo ret);

        public delegate TMPro.TMP_TextInfo GetTextInfo_WithArgs(
            Func<TMPro.TextMeshProUGUI, string, TMPro.TMP_TextInfo> orig, TMPro.TextMeshProUGUI self, string text);

        public sealed class Params_UpdateGeometry
        {
            public TMPro.TextMeshProUGUI self;
            public UnityEngine.Mesh mesh;
            public int index;
        }

        public delegate void UpdateGeometry_BeforeArgs(Params_UpdateGeometry args);

        public delegate void UpdateGeometry_AfterArgs(Params_UpdateGeometry args);

        public delegate void UpdateGeometry_WithArgs(Action<TMPro.TextMeshProUGUI, UnityEngine.Mesh, int> orig,
            TMPro.TextMeshProUGUI self, UnityEngine.Mesh mesh, int index);

        public sealed class Params_UpdateVertexData_TMP_VertexDataUpdateFlags
        {
            public TMPro.TextMeshProUGUI self;
            public TMPro.TMP_VertexDataUpdateFlags flags;
        }

        public delegate void UpdateVertexData_TMP_VertexDataUpdateFlags_BeforeArgs(
            Params_UpdateVertexData_TMP_VertexDataUpdateFlags args);

        public delegate void UpdateVertexData_TMP_VertexDataUpdateFlags_AfterArgs(
            Params_UpdateVertexData_TMP_VertexDataUpdateFlags args);

        public delegate void UpdateVertexData_TMP_VertexDataUpdateFlags_WithArgs(
            Action<TMPro.TextMeshProUGUI, TMPro.TMP_VertexDataUpdateFlags> orig, TMPro.TextMeshProUGUI self,
            TMPro.TMP_VertexDataUpdateFlags flags);

        public sealed class Params_UpdateVertexData
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void UpdateVertexData_BeforeArgs(Params_UpdateVertexData args);

        public delegate void UpdateVertexData_AfterArgs(Params_UpdateVertexData args);

        public delegate void UpdateVertexData_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);

        public sealed class Params_UpdateFontAsset
        {
            public TMPro.TextMeshProUGUI self;
        }

        public delegate void UpdateFontAsset_BeforeArgs(Params_UpdateFontAsset args);

        public delegate void UpdateFontAsset_AfterArgs(Params_UpdateFontAsset args);

        public delegate void UpdateFontAsset_WithArgs(Action<TMPro.TextMeshProUGUI> orig, TMPro.TextMeshProUGUI self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.LoadFontAsset_BeforeArgs LoadFontAsset
        {
            add
            {
                HookHandler._beforeLoadFontAsset += value;
                HookHandler.HookLoadFontAsset();
            }
            remove => HookHandler._beforeLoadFontAsset -= value;
        }

        public static event Delegates.GetCanvas_BeforeArgs GetCanvas
        {
            add
            {
                HookHandler._beforeGetCanvas += value;
                HookHandler.HookGetCanvas();
            }
            remove => HookHandler._beforeGetCanvas -= value;
        }

        public static event Delegates.UpdateEnvMapMatrix_BeforeArgs UpdateEnvMapMatrix
        {
            add
            {
                HookHandler._beforeUpdateEnvMapMatrix += value;
                HookHandler.HookUpdateEnvMapMatrix();
            }
            remove => HookHandler._beforeUpdateEnvMapMatrix -= value;
        }

        public static event Delegates.EnableMasking_BeforeArgs EnableMasking
        {
            add
            {
                HookHandler._beforeEnableMasking += value;
                HookHandler.HookEnableMasking();
            }
            remove => HookHandler._beforeEnableMasking -= value;
        }

        public static event Delegates.DisableMasking_BeforeArgs DisableMasking
        {
            add
            {
                HookHandler._beforeDisableMasking += value;
                HookHandler.HookDisableMasking();
            }
            remove => HookHandler._beforeDisableMasking -= value;
        }

        public static event Delegates.UpdateMask_BeforeArgs UpdateMask
        {
            add
            {
                HookHandler._beforeUpdateMask += value;
                HookHandler.HookUpdateMask();
            }
            remove => HookHandler._beforeUpdateMask -= value;
        }

        public static event Delegates.GetMaterial_BeforeArgs GetMaterial
        {
            add
            {
                HookHandler._beforeGetMaterial += value;
                HookHandler.HookGetMaterial();
            }
            remove => HookHandler._beforeGetMaterial -= value;
        }

        public static event Delegates.GetMaterials_BeforeArgs GetMaterials
        {
            add
            {
                HookHandler._beforeGetMaterials += value;
                HookHandler.HookGetMaterials();
            }
            remove => HookHandler._beforeGetMaterials -= value;
        }

        public static event Delegates.SetSharedMaterial_BeforeArgs SetSharedMaterial
        {
            add
            {
                HookHandler._beforeSetSharedMaterial += value;
                HookHandler.HookSetSharedMaterial();
            }
            remove => HookHandler._beforeSetSharedMaterial -= value;
        }

        public static event Delegates.GetSharedMaterials_BeforeArgs GetSharedMaterials
        {
            add
            {
                HookHandler._beforeGetSharedMaterials += value;
                HookHandler.HookGetSharedMaterials();
            }
            remove => HookHandler._beforeGetSharedMaterials -= value;
        }

        public static event Delegates.SetSharedMaterials_BeforeArgs SetSharedMaterials
        {
            add
            {
                HookHandler._beforeSetSharedMaterials += value;
                HookHandler.HookSetSharedMaterials();
            }
            remove => HookHandler._beforeSetSharedMaterials -= value;
        }

        public static event Delegates.SetOutlineThickness_BeforeArgs SetOutlineThickness
        {
            add
            {
                HookHandler._beforeSetOutlineThickness += value;
                HookHandler.HookSetOutlineThickness();
            }
            remove => HookHandler._beforeSetOutlineThickness -= value;
        }

        public static event Delegates.SetFaceColor_BeforeArgs SetFaceColor
        {
            add
            {
                HookHandler._beforeSetFaceColor += value;
                HookHandler.HookSetFaceColor();
            }
            remove => HookHandler._beforeSetFaceColor -= value;
        }

        public static event Delegates.SetOutlineColor_BeforeArgs SetOutlineColor
        {
            add
            {
                HookHandler._beforeSetOutlineColor += value;
                HookHandler.HookSetOutlineColor();
            }
            remove => HookHandler._beforeSetOutlineColor -= value;
        }

        public static event Delegates.SetShaderDepth_BeforeArgs SetShaderDepth
        {
            add
            {
                HookHandler._beforeSetShaderDepth += value;
                HookHandler.HookSetShaderDepth();
            }
            remove => HookHandler._beforeSetShaderDepth -= value;
        }

        public static event Delegates.SetCulling_BeforeArgs SetCulling
        {
            add
            {
                HookHandler._beforeSetCulling += value;
                HookHandler.HookSetCulling();
            }
            remove => HookHandler._beforeSetCulling -= value;
        }

        public static event Delegates.SetPerspectiveCorrection_BeforeArgs SetPerspectiveCorrection
        {
            add
            {
                HookHandler._beforeSetPerspectiveCorrection += value;
                HookHandler.HookSetPerspectiveCorrection();
            }
            remove => HookHandler._beforeSetPerspectiveCorrection -= value;
        }

        public static event Delegates.GetPaddingForMaterial_Material_BeforeArgs GetPaddingForMaterial_Material
        {
            add
            {
                HookHandler._beforeGetPaddingForMaterial_Material += value;
                HookHandler.HookGetPaddingForMaterial_Material();
            }
            remove => HookHandler._beforeGetPaddingForMaterial_Material -= value;
        }

        public static event Delegates.GetPaddingForMaterial_BeforeArgs GetPaddingForMaterial
        {
            add
            {
                HookHandler._beforeGetPaddingForMaterial += value;
                HookHandler.HookGetPaddingForMaterial();
            }
            remove => HookHandler._beforeGetPaddingForMaterial -= value;
        }

        public static event Delegates.SetMeshArrays_BeforeArgs SetMeshArrays
        {
            add
            {
                HookHandler._beforeSetMeshArrays += value;
                HookHandler.HookSetMeshArrays();
            }
            remove => HookHandler._beforeSetMeshArrays -= value;
        }

        public static event Delegates.SetArraySizes_BeforeArgs SetArraySizes
        {
            add
            {
                HookHandler._beforeSetArraySizes += value;
                HookHandler.HookSetArraySizes();
            }
            remove => HookHandler._beforeSetArraySizes -= value;
        }

        public static event Delegates.ComputeMarginSize_BeforeArgs ComputeMarginSize
        {
            add
            {
                HookHandler._beforeComputeMarginSize += value;
                HookHandler.HookComputeMarginSize();
            }
            remove => HookHandler._beforeComputeMarginSize -= value;
        }

        public static event Delegates.OnDidApplyAnimationProperties_BeforeArgs OnDidApplyAnimationProperties
        {
            add
            {
                HookHandler._beforeOnDidApplyAnimationProperties += value;
                HookHandler.HookOnDidApplyAnimationProperties();
            }
            remove => HookHandler._beforeOnDidApplyAnimationProperties -= value;
        }

        public static event Delegates.OnCanvasHierarchyChanged_BeforeArgs OnCanvasHierarchyChanged
        {
            add
            {
                HookHandler._beforeOnCanvasHierarchyChanged += value;
                HookHandler.HookOnCanvasHierarchyChanged();
            }
            remove => HookHandler._beforeOnCanvasHierarchyChanged -= value;
        }

        public static event Delegates.OnTransformParentChanged_BeforeArgs OnTransformParentChanged
        {
            add
            {
                HookHandler._beforeOnTransformParentChanged += value;
                HookHandler.HookOnTransformParentChanged();
            }
            remove => HookHandler._beforeOnTransformParentChanged -= value;
        }

        public static event Delegates.OnRectTransformDimensionsChange_BeforeArgs OnRectTransformDimensionsChange
        {
            add
            {
                HookHandler._beforeOnRectTransformDimensionsChange += value;
                HookHandler.HookOnRectTransformDimensionsChange();
            }
            remove => HookHandler._beforeOnRectTransformDimensionsChange -= value;
        }

        public static event Delegates.LateUpdate_BeforeArgs LateUpdate
        {
            add
            {
                HookHandler._beforeLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._beforeLateUpdate -= value;
        }

        public static event Delegates.OnPreRenderCanvas_BeforeArgs OnPreRenderCanvas
        {
            add
            {
                HookHandler._beforeOnPreRenderCanvas += value;
                HookHandler.HookOnPreRenderCanvas();
            }
            remove => HookHandler._beforeOnPreRenderCanvas -= value;
        }

        public static event Delegates.GenerateTextMesh_BeforeArgs GenerateTextMesh
        {
            add
            {
                HookHandler._beforeGenerateTextMesh += value;
                HookHandler.HookGenerateTextMesh();
            }
            remove => HookHandler._beforeGenerateTextMesh -= value;
        }

        public static event Delegates.GetTextContainerLocalCorners_BeforeArgs GetTextContainerLocalCorners
        {
            add
            {
                HookHandler._beforeGetTextContainerLocalCorners += value;
                HookHandler.HookGetTextContainerLocalCorners();
            }
            remove => HookHandler._beforeGetTextContainerLocalCorners -= value;
        }

        public static event Delegates.ClearMesh_BeforeArgs ClearMesh
        {
            add
            {
                HookHandler._beforeClearMesh += value;
                HookHandler.HookClearMesh();
            }
            remove => HookHandler._beforeClearMesh -= value;
        }

        public static event Delegates.SetActiveSubMeshes_BeforeArgs SetActiveSubMeshes
        {
            add
            {
                HookHandler._beforeSetActiveSubMeshes += value;
                HookHandler.HookSetActiveSubMeshes();
            }
            remove => HookHandler._beforeSetActiveSubMeshes -= value;
        }

        public static event Delegates.GetCompoundBounds_BeforeArgs GetCompoundBounds
        {
            add
            {
                HookHandler._beforeGetCompoundBounds += value;
                HookHandler.HookGetCompoundBounds();
            }
            remove => HookHandler._beforeGetCompoundBounds -= value;
        }

        public static event Delegates.UpdateSDFScale_BeforeArgs UpdateSDFScale
        {
            add
            {
                HookHandler._beforeUpdateSDFScale += value;
                HookHandler.HookUpdateSDFScale();
            }
            remove => HookHandler._beforeUpdateSDFScale -= value;
        }

        public static event Delegates.AdjustLineOffset_BeforeArgs AdjustLineOffset
        {
            add
            {
                HookHandler._beforeAdjustLineOffset += value;
                HookHandler.HookAdjustLineOffset();
            }
            remove => HookHandler._beforeAdjustLineOffset -= value;
        }

        public static event Delegates.get_materialForRendering_BeforeArgs get_materialForRendering
        {
            add
            {
                HookHandler._beforeget_materialForRendering += value;
                HookHandler.Hookget_materialForRendering();
            }
            remove => HookHandler._beforeget_materialForRendering -= value;
        }

        public static event Delegates.get_mesh_BeforeArgs get_mesh
        {
            add
            {
                HookHandler._beforeget_mesh += value;
                HookHandler.Hookget_mesh();
            }
            remove => HookHandler._beforeget_mesh -= value;
        }

        public static event Delegates.get_canvasRenderer_BeforeArgs get_canvasRenderer
        {
            add
            {
                HookHandler._beforeget_canvasRenderer += value;
                HookHandler.Hookget_canvasRenderer();
            }
            remove => HookHandler._beforeget_canvasRenderer -= value;
        }

        public static event Delegates.get_inlineGraphicManager_BeforeArgs get_inlineGraphicManager
        {
            add
            {
                HookHandler._beforeget_inlineGraphicManager += value;
                HookHandler.Hookget_inlineGraphicManager();
            }
            remove => HookHandler._beforeget_inlineGraphicManager -= value;
        }

        public static event Delegates.CalculateLayoutInputHorizontal_BeforeArgs CalculateLayoutInputHorizontal
        {
            add
            {
                HookHandler._beforeCalculateLayoutInputHorizontal += value;
                HookHandler.HookCalculateLayoutInputHorizontal();
            }
            remove => HookHandler._beforeCalculateLayoutInputHorizontal -= value;
        }

        public static event Delegates.CalculateLayoutInputVertical_BeforeArgs CalculateLayoutInputVertical
        {
            add
            {
                HookHandler._beforeCalculateLayoutInputVertical += value;
                HookHandler.HookCalculateLayoutInputVertical();
            }
            remove => HookHandler._beforeCalculateLayoutInputVertical -= value;
        }

        public static event Delegates.SetVerticesDirty_BeforeArgs SetVerticesDirty
        {
            add
            {
                HookHandler._beforeSetVerticesDirty += value;
                HookHandler.HookSetVerticesDirty();
            }
            remove => HookHandler._beforeSetVerticesDirty -= value;
        }

        public static event Delegates.SetLayoutDirty_BeforeArgs SetLayoutDirty
        {
            add
            {
                HookHandler._beforeSetLayoutDirty += value;
                HookHandler.HookSetLayoutDirty();
            }
            remove => HookHandler._beforeSetLayoutDirty -= value;
        }

        public static event Delegates.SetMaterialDirty_BeforeArgs SetMaterialDirty
        {
            add
            {
                HookHandler._beforeSetMaterialDirty += value;
                HookHandler.HookSetMaterialDirty();
            }
            remove => HookHandler._beforeSetMaterialDirty -= value;
        }

        public static event Delegates.SetAllDirty_BeforeArgs SetAllDirty
        {
            add
            {
                HookHandler._beforeSetAllDirty += value;
                HookHandler.HookSetAllDirty();
            }
            remove => HookHandler._beforeSetAllDirty -= value;
        }

        public static event Delegates.Rebuild_BeforeArgs Rebuild
        {
            add
            {
                HookHandler._beforeRebuild += value;
                HookHandler.HookRebuild();
            }
            remove => HookHandler._beforeRebuild -= value;
        }

        public static event Delegates.UpdateSubObjectPivot_BeforeArgs UpdateSubObjectPivot
        {
            add
            {
                HookHandler._beforeUpdateSubObjectPivot += value;
                HookHandler.HookUpdateSubObjectPivot();
            }
            remove => HookHandler._beforeUpdateSubObjectPivot -= value;
        }

        public static event Delegates.GetModifiedMaterial_BeforeArgs GetModifiedMaterial
        {
            add
            {
                HookHandler._beforeGetModifiedMaterial += value;
                HookHandler.HookGetModifiedMaterial();
            }
            remove => HookHandler._beforeGetModifiedMaterial -= value;
        }

        public static event Delegates.UpdateMaterial_BeforeArgs UpdateMaterial
        {
            add
            {
                HookHandler._beforeUpdateMaterial += value;
                HookHandler.HookUpdateMaterial();
            }
            remove => HookHandler._beforeUpdateMaterial -= value;
        }

        public static event Delegates.get_maskOffset_BeforeArgs get_maskOffset
        {
            add
            {
                HookHandler._beforeget_maskOffset += value;
                HookHandler.Hookget_maskOffset();
            }
            remove => HookHandler._beforeget_maskOffset -= value;
        }

        public static event Delegates.set_maskOffset_BeforeArgs set_maskOffset
        {
            add
            {
                HookHandler._beforeset_maskOffset += value;
                HookHandler.Hookset_maskOffset();
            }
            remove => HookHandler._beforeset_maskOffset -= value;
        }

        public static event Delegates.RecalculateClipping_BeforeArgs RecalculateClipping
        {
            add
            {
                HookHandler._beforeRecalculateClipping += value;
                HookHandler.HookRecalculateClipping();
            }
            remove => HookHandler._beforeRecalculateClipping -= value;
        }

        public static event Delegates.RecalculateMasking_BeforeArgs RecalculateMasking
        {
            add
            {
                HookHandler._beforeRecalculateMasking += value;
                HookHandler.HookRecalculateMasking();
            }
            remove => HookHandler._beforeRecalculateMasking -= value;
        }

        public static event Delegates.UpdateMeshPadding_BeforeArgs UpdateMeshPadding
        {
            add
            {
                HookHandler._beforeUpdateMeshPadding += value;
                HookHandler.HookUpdateMeshPadding();
            }
            remove => HookHandler._beforeUpdateMeshPadding -= value;
        }

        public static event Delegates.InternalCrossFadeColor_BeforeArgs InternalCrossFadeColor
        {
            add
            {
                HookHandler._beforeInternalCrossFadeColor += value;
                HookHandler.HookInternalCrossFadeColor();
            }
            remove => HookHandler._beforeInternalCrossFadeColor -= value;
        }

        public static event Delegates.InternalCrossFadeAlpha_BeforeArgs InternalCrossFadeAlpha
        {
            add
            {
                HookHandler._beforeInternalCrossFadeAlpha += value;
                HookHandler.HookInternalCrossFadeAlpha();
            }
            remove => HookHandler._beforeInternalCrossFadeAlpha -= value;
        }

        public static event Delegates.ForceMeshUpdate_BeforeArgs ForceMeshUpdate
        {
            add
            {
                HookHandler._beforeForceMeshUpdate += value;
                HookHandler.HookForceMeshUpdate();
            }
            remove => HookHandler._beforeForceMeshUpdate -= value;
        }

        public static event Delegates.ForceMeshUpdate_bool_BeforeArgs ForceMeshUpdate_bool
        {
            add
            {
                HookHandler._beforeForceMeshUpdate_bool += value;
                HookHandler.HookForceMeshUpdate_bool();
            }
            remove => HookHandler._beforeForceMeshUpdate_bool -= value;
        }

        public static event Delegates.GetTextInfo_BeforeArgs GetTextInfo
        {
            add
            {
                HookHandler._beforeGetTextInfo += value;
                HookHandler.HookGetTextInfo();
            }
            remove => HookHandler._beforeGetTextInfo -= value;
        }

        public static event Delegates.UpdateGeometry_BeforeArgs UpdateGeometry
        {
            add
            {
                HookHandler._beforeUpdateGeometry += value;
                HookHandler.HookUpdateGeometry();
            }
            remove => HookHandler._beforeUpdateGeometry -= value;
        }

        public static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_BeforeArgs
            UpdateVertexData_TMP_VertexDataUpdateFlags
            {
                add
                {
                    HookHandler._beforeUpdateVertexData_TMP_VertexDataUpdateFlags += value;
                    HookHandler.HookUpdateVertexData_TMP_VertexDataUpdateFlags();
                }
                remove => HookHandler._beforeUpdateVertexData_TMP_VertexDataUpdateFlags -= value;
            }

        public static event Delegates.UpdateVertexData_BeforeArgs UpdateVertexData
        {
            add
            {
                HookHandler._beforeUpdateVertexData += value;
                HookHandler.HookUpdateVertexData();
            }
            remove => HookHandler._beforeUpdateVertexData -= value;
        }

        public static event Delegates.UpdateFontAsset_BeforeArgs UpdateFontAsset
        {
            add
            {
                HookHandler._beforeUpdateFontAsset += value;
                HookHandler.HookUpdateFontAsset();
            }
            remove => HookHandler._beforeUpdateFontAsset -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.OnDestroy_AfterArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.LoadFontAsset_AfterArgs LoadFontAsset
        {
            add
            {
                HookHandler._afterLoadFontAsset += value;
                HookHandler.HookLoadFontAsset();
            }
            remove => HookHandler._afterLoadFontAsset -= value;
        }

        public static event Delegates.GetCanvas_AfterArgs GetCanvas
        {
            add
            {
                HookHandler._afterGetCanvas += value;
                HookHandler.HookGetCanvas();
            }
            remove => HookHandler._afterGetCanvas -= value;
        }

        public static event Delegates.UpdateEnvMapMatrix_AfterArgs UpdateEnvMapMatrix
        {
            add
            {
                HookHandler._afterUpdateEnvMapMatrix += value;
                HookHandler.HookUpdateEnvMapMatrix();
            }
            remove => HookHandler._afterUpdateEnvMapMatrix -= value;
        }

        public static event Delegates.EnableMasking_AfterArgs EnableMasking
        {
            add
            {
                HookHandler._afterEnableMasking += value;
                HookHandler.HookEnableMasking();
            }
            remove => HookHandler._afterEnableMasking -= value;
        }

        public static event Delegates.DisableMasking_AfterArgs DisableMasking
        {
            add
            {
                HookHandler._afterDisableMasking += value;
                HookHandler.HookDisableMasking();
            }
            remove => HookHandler._afterDisableMasking -= value;
        }

        public static event Delegates.UpdateMask_AfterArgs UpdateMask
        {
            add
            {
                HookHandler._afterUpdateMask += value;
                HookHandler.HookUpdateMask();
            }
            remove => HookHandler._afterUpdateMask -= value;
        }

        public static event Delegates.GetMaterial_AfterArgs GetMaterial
        {
            add
            {
                HookHandler._afterGetMaterial += value;
                HookHandler.HookGetMaterial();
            }
            remove => HookHandler._afterGetMaterial -= value;
        }

        public static event Delegates.GetMaterials_AfterArgs GetMaterials
        {
            add
            {
                HookHandler._afterGetMaterials += value;
                HookHandler.HookGetMaterials();
            }
            remove => HookHandler._afterGetMaterials -= value;
        }

        public static event Delegates.SetSharedMaterial_AfterArgs SetSharedMaterial
        {
            add
            {
                HookHandler._afterSetSharedMaterial += value;
                HookHandler.HookSetSharedMaterial();
            }
            remove => HookHandler._afterSetSharedMaterial -= value;
        }

        public static event Delegates.GetSharedMaterials_AfterArgs GetSharedMaterials
        {
            add
            {
                HookHandler._afterGetSharedMaterials += value;
                HookHandler.HookGetSharedMaterials();
            }
            remove => HookHandler._afterGetSharedMaterials -= value;
        }

        public static event Delegates.SetSharedMaterials_AfterArgs SetSharedMaterials
        {
            add
            {
                HookHandler._afterSetSharedMaterials += value;
                HookHandler.HookSetSharedMaterials();
            }
            remove => HookHandler._afterSetSharedMaterials -= value;
        }

        public static event Delegates.SetOutlineThickness_AfterArgs SetOutlineThickness
        {
            add
            {
                HookHandler._afterSetOutlineThickness += value;
                HookHandler.HookSetOutlineThickness();
            }
            remove => HookHandler._afterSetOutlineThickness -= value;
        }

        public static event Delegates.SetFaceColor_AfterArgs SetFaceColor
        {
            add
            {
                HookHandler._afterSetFaceColor += value;
                HookHandler.HookSetFaceColor();
            }
            remove => HookHandler._afterSetFaceColor -= value;
        }

        public static event Delegates.SetOutlineColor_AfterArgs SetOutlineColor
        {
            add
            {
                HookHandler._afterSetOutlineColor += value;
                HookHandler.HookSetOutlineColor();
            }
            remove => HookHandler._afterSetOutlineColor -= value;
        }

        public static event Delegates.SetShaderDepth_AfterArgs SetShaderDepth
        {
            add
            {
                HookHandler._afterSetShaderDepth += value;
                HookHandler.HookSetShaderDepth();
            }
            remove => HookHandler._afterSetShaderDepth -= value;
        }

        public static event Delegates.SetCulling_AfterArgs SetCulling
        {
            add
            {
                HookHandler._afterSetCulling += value;
                HookHandler.HookSetCulling();
            }
            remove => HookHandler._afterSetCulling -= value;
        }

        public static event Delegates.SetPerspectiveCorrection_AfterArgs SetPerspectiveCorrection
        {
            add
            {
                HookHandler._afterSetPerspectiveCorrection += value;
                HookHandler.HookSetPerspectiveCorrection();
            }
            remove => HookHandler._afterSetPerspectiveCorrection -= value;
        }

        public static event Delegates.GetPaddingForMaterial_Material_AfterArgs GetPaddingForMaterial_Material
        {
            add
            {
                HookHandler._afterGetPaddingForMaterial_Material += value;
                HookHandler.HookGetPaddingForMaterial_Material();
            }
            remove => HookHandler._afterGetPaddingForMaterial_Material -= value;
        }

        public static event Delegates.GetPaddingForMaterial_AfterArgs GetPaddingForMaterial
        {
            add
            {
                HookHandler._afterGetPaddingForMaterial += value;
                HookHandler.HookGetPaddingForMaterial();
            }
            remove => HookHandler._afterGetPaddingForMaterial -= value;
        }

        public static event Delegates.SetMeshArrays_AfterArgs SetMeshArrays
        {
            add
            {
                HookHandler._afterSetMeshArrays += value;
                HookHandler.HookSetMeshArrays();
            }
            remove => HookHandler._afterSetMeshArrays -= value;
        }

        public static event Delegates.SetArraySizes_AfterArgs SetArraySizes
        {
            add
            {
                HookHandler._afterSetArraySizes += value;
                HookHandler.HookSetArraySizes();
            }
            remove => HookHandler._afterSetArraySizes -= value;
        }

        public static event Delegates.ComputeMarginSize_AfterArgs ComputeMarginSize
        {
            add
            {
                HookHandler._afterComputeMarginSize += value;
                HookHandler.HookComputeMarginSize();
            }
            remove => HookHandler._afterComputeMarginSize -= value;
        }

        public static event Delegates.OnDidApplyAnimationProperties_AfterArgs OnDidApplyAnimationProperties
        {
            add
            {
                HookHandler._afterOnDidApplyAnimationProperties += value;
                HookHandler.HookOnDidApplyAnimationProperties();
            }
            remove => HookHandler._afterOnDidApplyAnimationProperties -= value;
        }

        public static event Delegates.OnCanvasHierarchyChanged_AfterArgs OnCanvasHierarchyChanged
        {
            add
            {
                HookHandler._afterOnCanvasHierarchyChanged += value;
                HookHandler.HookOnCanvasHierarchyChanged();
            }
            remove => HookHandler._afterOnCanvasHierarchyChanged -= value;
        }

        public static event Delegates.OnTransformParentChanged_AfterArgs OnTransformParentChanged
        {
            add
            {
                HookHandler._afterOnTransformParentChanged += value;
                HookHandler.HookOnTransformParentChanged();
            }
            remove => HookHandler._afterOnTransformParentChanged -= value;
        }

        public static event Delegates.OnRectTransformDimensionsChange_AfterArgs OnRectTransformDimensionsChange
        {
            add
            {
                HookHandler._afterOnRectTransformDimensionsChange += value;
                HookHandler.HookOnRectTransformDimensionsChange();
            }
            remove => HookHandler._afterOnRectTransformDimensionsChange -= value;
        }

        public static event Delegates.LateUpdate_AfterArgs LateUpdate
        {
            add
            {
                HookHandler._afterLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._afterLateUpdate -= value;
        }

        public static event Delegates.OnPreRenderCanvas_AfterArgs OnPreRenderCanvas
        {
            add
            {
                HookHandler._afterOnPreRenderCanvas += value;
                HookHandler.HookOnPreRenderCanvas();
            }
            remove => HookHandler._afterOnPreRenderCanvas -= value;
        }

        public static event Delegates.GenerateTextMesh_AfterArgs GenerateTextMesh
        {
            add
            {
                HookHandler._afterGenerateTextMesh += value;
                HookHandler.HookGenerateTextMesh();
            }
            remove => HookHandler._afterGenerateTextMesh -= value;
        }

        public static event Delegates.GetTextContainerLocalCorners_AfterArgs GetTextContainerLocalCorners
        {
            add
            {
                HookHandler._afterGetTextContainerLocalCorners += value;
                HookHandler.HookGetTextContainerLocalCorners();
            }
            remove => HookHandler._afterGetTextContainerLocalCorners -= value;
        }

        public static event Delegates.ClearMesh_AfterArgs ClearMesh
        {
            add
            {
                HookHandler._afterClearMesh += value;
                HookHandler.HookClearMesh();
            }
            remove => HookHandler._afterClearMesh -= value;
        }

        public static event Delegates.SetActiveSubMeshes_AfterArgs SetActiveSubMeshes
        {
            add
            {
                HookHandler._afterSetActiveSubMeshes += value;
                HookHandler.HookSetActiveSubMeshes();
            }
            remove => HookHandler._afterSetActiveSubMeshes -= value;
        }

        public static event Delegates.GetCompoundBounds_AfterArgs GetCompoundBounds
        {
            add
            {
                HookHandler._afterGetCompoundBounds += value;
                HookHandler.HookGetCompoundBounds();
            }
            remove => HookHandler._afterGetCompoundBounds -= value;
        }

        public static event Delegates.UpdateSDFScale_AfterArgs UpdateSDFScale
        {
            add
            {
                HookHandler._afterUpdateSDFScale += value;
                HookHandler.HookUpdateSDFScale();
            }
            remove => HookHandler._afterUpdateSDFScale -= value;
        }

        public static event Delegates.AdjustLineOffset_AfterArgs AdjustLineOffset
        {
            add
            {
                HookHandler._afterAdjustLineOffset += value;
                HookHandler.HookAdjustLineOffset();
            }
            remove => HookHandler._afterAdjustLineOffset -= value;
        }

        public static event Delegates.get_materialForRendering_AfterArgs get_materialForRendering
        {
            add
            {
                HookHandler._afterget_materialForRendering += value;
                HookHandler.Hookget_materialForRendering();
            }
            remove => HookHandler._afterget_materialForRendering -= value;
        }

        public static event Delegates.get_mesh_AfterArgs get_mesh
        {
            add
            {
                HookHandler._afterget_mesh += value;
                HookHandler.Hookget_mesh();
            }
            remove => HookHandler._afterget_mesh -= value;
        }

        public static event Delegates.get_canvasRenderer_AfterArgs get_canvasRenderer
        {
            add
            {
                HookHandler._afterget_canvasRenderer += value;
                HookHandler.Hookget_canvasRenderer();
            }
            remove => HookHandler._afterget_canvasRenderer -= value;
        }

        public static event Delegates.get_inlineGraphicManager_AfterArgs get_inlineGraphicManager
        {
            add
            {
                HookHandler._afterget_inlineGraphicManager += value;
                HookHandler.Hookget_inlineGraphicManager();
            }
            remove => HookHandler._afterget_inlineGraphicManager -= value;
        }

        public static event Delegates.CalculateLayoutInputHorizontal_AfterArgs CalculateLayoutInputHorizontal
        {
            add
            {
                HookHandler._afterCalculateLayoutInputHorizontal += value;
                HookHandler.HookCalculateLayoutInputHorizontal();
            }
            remove => HookHandler._afterCalculateLayoutInputHorizontal -= value;
        }

        public static event Delegates.CalculateLayoutInputVertical_AfterArgs CalculateLayoutInputVertical
        {
            add
            {
                HookHandler._afterCalculateLayoutInputVertical += value;
                HookHandler.HookCalculateLayoutInputVertical();
            }
            remove => HookHandler._afterCalculateLayoutInputVertical -= value;
        }

        public static event Delegates.SetVerticesDirty_AfterArgs SetVerticesDirty
        {
            add
            {
                HookHandler._afterSetVerticesDirty += value;
                HookHandler.HookSetVerticesDirty();
            }
            remove => HookHandler._afterSetVerticesDirty -= value;
        }

        public static event Delegates.SetLayoutDirty_AfterArgs SetLayoutDirty
        {
            add
            {
                HookHandler._afterSetLayoutDirty += value;
                HookHandler.HookSetLayoutDirty();
            }
            remove => HookHandler._afterSetLayoutDirty -= value;
        }

        public static event Delegates.SetMaterialDirty_AfterArgs SetMaterialDirty
        {
            add
            {
                HookHandler._afterSetMaterialDirty += value;
                HookHandler.HookSetMaterialDirty();
            }
            remove => HookHandler._afterSetMaterialDirty -= value;
        }

        public static event Delegates.SetAllDirty_AfterArgs SetAllDirty
        {
            add
            {
                HookHandler._afterSetAllDirty += value;
                HookHandler.HookSetAllDirty();
            }
            remove => HookHandler._afterSetAllDirty -= value;
        }

        public static event Delegates.Rebuild_AfterArgs Rebuild
        {
            add
            {
                HookHandler._afterRebuild += value;
                HookHandler.HookRebuild();
            }
            remove => HookHandler._afterRebuild -= value;
        }

        public static event Delegates.UpdateSubObjectPivot_AfterArgs UpdateSubObjectPivot
        {
            add
            {
                HookHandler._afterUpdateSubObjectPivot += value;
                HookHandler.HookUpdateSubObjectPivot();
            }
            remove => HookHandler._afterUpdateSubObjectPivot -= value;
        }

        public static event Delegates.GetModifiedMaterial_AfterArgs GetModifiedMaterial
        {
            add
            {
                HookHandler._afterGetModifiedMaterial += value;
                HookHandler.HookGetModifiedMaterial();
            }
            remove => HookHandler._afterGetModifiedMaterial -= value;
        }

        public static event Delegates.UpdateMaterial_AfterArgs UpdateMaterial
        {
            add
            {
                HookHandler._afterUpdateMaterial += value;
                HookHandler.HookUpdateMaterial();
            }
            remove => HookHandler._afterUpdateMaterial -= value;
        }

        public static event Delegates.get_maskOffset_AfterArgs get_maskOffset
        {
            add
            {
                HookHandler._afterget_maskOffset += value;
                HookHandler.Hookget_maskOffset();
            }
            remove => HookHandler._afterget_maskOffset -= value;
        }

        public static event Delegates.set_maskOffset_AfterArgs set_maskOffset
        {
            add
            {
                HookHandler._afterset_maskOffset += value;
                HookHandler.Hookset_maskOffset();
            }
            remove => HookHandler._afterset_maskOffset -= value;
        }

        public static event Delegates.RecalculateClipping_AfterArgs RecalculateClipping
        {
            add
            {
                HookHandler._afterRecalculateClipping += value;
                HookHandler.HookRecalculateClipping();
            }
            remove => HookHandler._afterRecalculateClipping -= value;
        }

        public static event Delegates.RecalculateMasking_AfterArgs RecalculateMasking
        {
            add
            {
                HookHandler._afterRecalculateMasking += value;
                HookHandler.HookRecalculateMasking();
            }
            remove => HookHandler._afterRecalculateMasking -= value;
        }

        public static event Delegates.UpdateMeshPadding_AfterArgs UpdateMeshPadding
        {
            add
            {
                HookHandler._afterUpdateMeshPadding += value;
                HookHandler.HookUpdateMeshPadding();
            }
            remove => HookHandler._afterUpdateMeshPadding -= value;
        }

        public static event Delegates.InternalCrossFadeColor_AfterArgs InternalCrossFadeColor
        {
            add
            {
                HookHandler._afterInternalCrossFadeColor += value;
                HookHandler.HookInternalCrossFadeColor();
            }
            remove => HookHandler._afterInternalCrossFadeColor -= value;
        }

        public static event Delegates.InternalCrossFadeAlpha_AfterArgs InternalCrossFadeAlpha
        {
            add
            {
                HookHandler._afterInternalCrossFadeAlpha += value;
                HookHandler.HookInternalCrossFadeAlpha();
            }
            remove => HookHandler._afterInternalCrossFadeAlpha -= value;
        }

        public static event Delegates.ForceMeshUpdate_AfterArgs ForceMeshUpdate
        {
            add
            {
                HookHandler._afterForceMeshUpdate += value;
                HookHandler.HookForceMeshUpdate();
            }
            remove => HookHandler._afterForceMeshUpdate -= value;
        }

        public static event Delegates.ForceMeshUpdate_bool_AfterArgs ForceMeshUpdate_bool
        {
            add
            {
                HookHandler._afterForceMeshUpdate_bool += value;
                HookHandler.HookForceMeshUpdate_bool();
            }
            remove => HookHandler._afterForceMeshUpdate_bool -= value;
        }

        public static event Delegates.GetTextInfo_AfterArgs GetTextInfo
        {
            add
            {
                HookHandler._afterGetTextInfo += value;
                HookHandler.HookGetTextInfo();
            }
            remove => HookHandler._afterGetTextInfo -= value;
        }

        public static event Delegates.UpdateGeometry_AfterArgs UpdateGeometry
        {
            add
            {
                HookHandler._afterUpdateGeometry += value;
                HookHandler.HookUpdateGeometry();
            }
            remove => HookHandler._afterUpdateGeometry -= value;
        }

        public static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_AfterArgs
            UpdateVertexData_TMP_VertexDataUpdateFlags
            {
                add
                {
                    HookHandler._afterUpdateVertexData_TMP_VertexDataUpdateFlags += value;
                    HookHandler.HookUpdateVertexData_TMP_VertexDataUpdateFlags();
                }
                remove => HookHandler._afterUpdateVertexData_TMP_VertexDataUpdateFlags -= value;
            }

        public static event Delegates.UpdateVertexData_AfterArgs UpdateVertexData
        {
            add
            {
                HookHandler._afterUpdateVertexData += value;
                HookHandler.HookUpdateVertexData();
            }
            remove => HookHandler._afterUpdateVertexData -= value;
        }

        public static event Delegates.UpdateFontAsset_AfterArgs UpdateFontAsset
        {
            add
            {
                HookHandler._afterUpdateFontAsset += value;
                HookHandler.HookUpdateFontAsset();
            }
            remove => HookHandler._afterUpdateFontAsset -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Awake_WithArgs Awake
        {
            add => HookEndpointManager.Add<Delegates.Awake_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "Awake", true), value);
            remove => HookEndpointManager.Remove<Delegates.Awake_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "Awake", true), value);
        }

        public static event Delegates.OnEnable_WithArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnEnable", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnEnable", true), value);
        }

        public static event Delegates.OnDisable_WithArgs OnDisable
        {
            add => HookEndpointManager.Add<Delegates.OnDisable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnDisable", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnDisable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnDisable", true), value);
        }

        public static event Delegates.OnDestroy_WithArgs OnDestroy
        {
            add => HookEndpointManager.Add<Delegates.OnDestroy_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnDestroy", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnDestroy_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnDestroy", true), value);
        }

        public static event Delegates.LoadFontAsset_WithArgs LoadFontAsset
        {
            add => HookEndpointManager.Add<Delegates.LoadFontAsset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "LoadFontAsset", true), value);
            remove => HookEndpointManager.Remove<Delegates.LoadFontAsset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "LoadFontAsset", true), value);
        }

        public static event Delegates.GetCanvas_WithArgs GetCanvas
        {
            add => HookEndpointManager.Add<Delegates.GetCanvas_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetCanvas", true), value);
            remove => HookEndpointManager.Remove<Delegates.GetCanvas_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetCanvas", true), value);
        }

        public static event Delegates.UpdateEnvMapMatrix_WithArgs UpdateEnvMapMatrix
        {
            add => HookEndpointManager.Add<Delegates.UpdateEnvMapMatrix_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateEnvMapMatrix", true), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateEnvMapMatrix_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateEnvMapMatrix", true), value);
        }

        public static event Delegates.EnableMasking_WithArgs EnableMasking
        {
            add => HookEndpointManager.Add<Delegates.EnableMasking_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "EnableMasking", true), value);
            remove => HookEndpointManager.Remove<Delegates.EnableMasking_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "EnableMasking", true), value);
        }

        public static event Delegates.DisableMasking_WithArgs DisableMasking
        {
            add => HookEndpointManager.Add<Delegates.DisableMasking_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "DisableMasking", true), value);
            remove => HookEndpointManager.Remove<Delegates.DisableMasking_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "DisableMasking", true), value);
        }

        public static event Delegates.UpdateMask_WithArgs UpdateMask
        {
            add => HookEndpointManager.Add<Delegates.UpdateMask_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateMask", true), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateMask_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateMask", true), value);
        }

        public static event Delegates.GetMaterial_WithArgs GetMaterial
        {
            add => HookEndpointManager.Add<Delegates.GetMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetMaterial", true), value);
            remove => HookEndpointManager.Remove<Delegates.GetMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetMaterial", true), value);
        }

        public static event Delegates.GetMaterials_WithArgs GetMaterials
        {
            add => HookEndpointManager.Add<Delegates.GetMaterials_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetMaterials", true), value);
            remove => HookEndpointManager.Remove<Delegates.GetMaterials_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetMaterials", true), value);
        }

        public static event Delegates.SetSharedMaterial_WithArgs SetSharedMaterial
        {
            add => HookEndpointManager.Add<Delegates.SetSharedMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetSharedMaterial", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetSharedMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetSharedMaterial", true), value);
        }

        public static event Delegates.GetSharedMaterials_WithArgs GetSharedMaterials
        {
            add => HookEndpointManager.Add<Delegates.GetSharedMaterials_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetSharedMaterials", true), value);
            remove => HookEndpointManager.Remove<Delegates.GetSharedMaterials_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetSharedMaterials", true), value);
        }

        public static event Delegates.SetSharedMaterials_WithArgs SetSharedMaterials
        {
            add => HookEndpointManager.Add<Delegates.SetSharedMaterials_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetSharedMaterials", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetSharedMaterials_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetSharedMaterials", true), value);
        }

        public static event Delegates.SetOutlineThickness_WithArgs SetOutlineThickness
        {
            add => HookEndpointManager.Add<Delegates.SetOutlineThickness_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetOutlineThickness", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetOutlineThickness_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetOutlineThickness", true), value);
        }

        public static event Delegates.SetFaceColor_WithArgs SetFaceColor
        {
            add => HookEndpointManager.Add<Delegates.SetFaceColor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetFaceColor", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetFaceColor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetFaceColor", true), value);
        }

        public static event Delegates.SetOutlineColor_WithArgs SetOutlineColor
        {
            add => HookEndpointManager.Add<Delegates.SetOutlineColor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetOutlineColor", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetOutlineColor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetOutlineColor", true), value);
        }

        public static event Delegates.SetShaderDepth_WithArgs SetShaderDepth
        {
            add => HookEndpointManager.Add<Delegates.SetShaderDepth_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetShaderDepth", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetShaderDepth_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetShaderDepth", true), value);
        }

        public static event Delegates.SetCulling_WithArgs SetCulling
        {
            add => HookEndpointManager.Add<Delegates.SetCulling_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetCulling", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetCulling_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetCulling", true), value);
        }

        public static event Delegates.SetPerspectiveCorrection_WithArgs SetPerspectiveCorrection
        {
            add => HookEndpointManager.Add<Delegates.SetPerspectiveCorrection_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetPerspectiveCorrection", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetPerspectiveCorrection_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetPerspectiveCorrection", true), value);
        }

        public static event Delegates.GetPaddingForMaterial_Material_WithArgs GetPaddingForMaterial_Material
        {
            add => HookEndpointManager.Add<Delegates.GetPaddingForMaterial_Material_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetPaddingForMaterial", true), value);
            remove => HookEndpointManager.Remove<Delegates.GetPaddingForMaterial_Material_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetPaddingForMaterial", true), value);
        }

        public static event Delegates.GetPaddingForMaterial_WithArgs GetPaddingForMaterial
        {
            add => HookEndpointManager.Add<Delegates.GetPaddingForMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetPaddingForMaterial", true), value);
            remove => HookEndpointManager.Remove<Delegates.GetPaddingForMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetPaddingForMaterial", true), value);
        }

        public static event Delegates.SetMeshArrays_WithArgs SetMeshArrays
        {
            add => HookEndpointManager.Add<Delegates.SetMeshArrays_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetMeshArrays", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetMeshArrays_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetMeshArrays", true), value);
        }

        public static event Delegates.SetArraySizes_WithArgs SetArraySizes
        {
            add => HookEndpointManager.Add<Delegates.SetArraySizes_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetArraySizes", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetArraySizes_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetArraySizes", true), value);
        }

        public static event Delegates.ComputeMarginSize_WithArgs ComputeMarginSize
        {
            add => HookEndpointManager.Add<Delegates.ComputeMarginSize_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "ComputeMarginSize", true), value);
            remove => HookEndpointManager.Remove<Delegates.ComputeMarginSize_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "ComputeMarginSize", true), value);
        }

        public static event Delegates.OnDidApplyAnimationProperties_WithArgs OnDidApplyAnimationProperties
        {
            add => HookEndpointManager.Add<Delegates.OnDidApplyAnimationProperties_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnDidApplyAnimationProperties", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.OnDidApplyAnimationProperties_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnDidApplyAnimationProperties", true),
                value);
        }

        public static event Delegates.OnCanvasHierarchyChanged_WithArgs OnCanvasHierarchyChanged
        {
            add => HookEndpointManager.Add<Delegates.OnCanvasHierarchyChanged_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnCanvasHierarchyChanged", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnCanvasHierarchyChanged_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnCanvasHierarchyChanged", true), value);
        }

        public static event Delegates.OnTransformParentChanged_WithArgs OnTransformParentChanged
        {
            add => HookEndpointManager.Add<Delegates.OnTransformParentChanged_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnTransformParentChanged", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnTransformParentChanged_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnTransformParentChanged", true), value);
        }

        public static event Delegates.OnRectTransformDimensionsChange_WithArgs OnRectTransformDimensionsChange
        {
            add => HookEndpointManager.Add<Delegates.OnRectTransformDimensionsChange_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnRectTransformDimensionsChange", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.OnRectTransformDimensionsChange_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnRectTransformDimensionsChange", true),
                value);
        }

        public static event Delegates.LateUpdate_WithArgs LateUpdate
        {
            add => HookEndpointManager.Add<Delegates.LateUpdate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "LateUpdate", true), value);
            remove => HookEndpointManager.Remove<Delegates.LateUpdate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "LateUpdate", true), value);
        }

        public static event Delegates.OnPreRenderCanvas_WithArgs OnPreRenderCanvas
        {
            add => HookEndpointManager.Add<Delegates.OnPreRenderCanvas_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnPreRenderCanvas", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnPreRenderCanvas_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "OnPreRenderCanvas", true), value);
        }

        public static event Delegates.GenerateTextMesh_WithArgs GenerateTextMesh
        {
            add => HookEndpointManager.Add<Delegates.GenerateTextMesh_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GenerateTextMesh", true), value);
            remove => HookEndpointManager.Remove<Delegates.GenerateTextMesh_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GenerateTextMesh", true), value);
        }

        public static event Delegates.GetTextContainerLocalCorners_WithArgs GetTextContainerLocalCorners
        {
            add => HookEndpointManager.Add<Delegates.GetTextContainerLocalCorners_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetTextContainerLocalCorners", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.GetTextContainerLocalCorners_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetTextContainerLocalCorners", true),
                value);
        }

        public static event Delegates.ClearMesh_WithArgs ClearMesh
        {
            add => HookEndpointManager.Add<Delegates.ClearMesh_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "ClearMesh", true), value);
            remove => HookEndpointManager.Remove<Delegates.ClearMesh_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "ClearMesh", true), value);
        }

        public static event Delegates.SetActiveSubMeshes_WithArgs SetActiveSubMeshes
        {
            add => HookEndpointManager.Add<Delegates.SetActiveSubMeshes_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetActiveSubMeshes", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetActiveSubMeshes_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetActiveSubMeshes", true), value);
        }

        public static event Delegates.GetCompoundBounds_WithArgs GetCompoundBounds
        {
            add => HookEndpointManager.Add<Delegates.GetCompoundBounds_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetCompoundBounds", true), value);
            remove => HookEndpointManager.Remove<Delegates.GetCompoundBounds_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetCompoundBounds", true), value);
        }

        public static event Delegates.UpdateSDFScale_WithArgs UpdateSDFScale
        {
            add => HookEndpointManager.Add<Delegates.UpdateSDFScale_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateSDFScale", true), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateSDFScale_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateSDFScale", true), value);
        }

        public static event Delegates.AdjustLineOffset_WithArgs AdjustLineOffset
        {
            add => HookEndpointManager.Add<Delegates.AdjustLineOffset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "AdjustLineOffset", true), value);
            remove => HookEndpointManager.Remove<Delegates.AdjustLineOffset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "AdjustLineOffset", true), value);
        }

        public static event Delegates.get_materialForRendering_WithArgs get_materialForRendering
        {
            add => HookEndpointManager.Add<Delegates.get_materialForRendering_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "get_materialForRendering", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_materialForRendering_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "get_materialForRendering", true), value);
        }

        public static event Delegates.get_mesh_WithArgs get_mesh
        {
            add => HookEndpointManager.Add<Delegates.get_mesh_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "get_mesh", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_mesh_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "get_mesh", true), value);
        }

        public static event Delegates.get_canvasRenderer_WithArgs get_canvasRenderer
        {
            add => HookEndpointManager.Add<Delegates.get_canvasRenderer_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "get_canvasRenderer", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_canvasRenderer_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "get_canvasRenderer", true), value);
        }

        public static event Delegates.get_inlineGraphicManager_WithArgs get_inlineGraphicManager
        {
            add => HookEndpointManager.Add<Delegates.get_inlineGraphicManager_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "get_inlineGraphicManager", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_inlineGraphicManager_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "get_inlineGraphicManager", true), value);
        }

        public static event Delegates.CalculateLayoutInputHorizontal_WithArgs CalculateLayoutInputHorizontal
        {
            add => HookEndpointManager.Add<Delegates.CalculateLayoutInputHorizontal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "CalculateLayoutInputHorizontal", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.CalculateLayoutInputHorizontal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "CalculateLayoutInputHorizontal", true),
                value);
        }

        public static event Delegates.CalculateLayoutInputVertical_WithArgs CalculateLayoutInputVertical
        {
            add => HookEndpointManager.Add<Delegates.CalculateLayoutInputVertical_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "CalculateLayoutInputVertical", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.CalculateLayoutInputVertical_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "CalculateLayoutInputVertical", true),
                value);
        }

        public static event Delegates.SetVerticesDirty_WithArgs SetVerticesDirty
        {
            add => HookEndpointManager.Add<Delegates.SetVerticesDirty_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetVerticesDirty", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetVerticesDirty_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetVerticesDirty", true), value);
        }

        public static event Delegates.SetLayoutDirty_WithArgs SetLayoutDirty
        {
            add => HookEndpointManager.Add<Delegates.SetLayoutDirty_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetLayoutDirty", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetLayoutDirty_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetLayoutDirty", true), value);
        }

        public static event Delegates.SetMaterialDirty_WithArgs SetMaterialDirty
        {
            add => HookEndpointManager.Add<Delegates.SetMaterialDirty_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetMaterialDirty", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetMaterialDirty_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetMaterialDirty", true), value);
        }

        public static event Delegates.SetAllDirty_WithArgs SetAllDirty
        {
            add => HookEndpointManager.Add<Delegates.SetAllDirty_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetAllDirty", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetAllDirty_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "SetAllDirty", true), value);
        }

        public static event Delegates.Rebuild_WithArgs Rebuild
        {
            add => HookEndpointManager.Add<Delegates.Rebuild_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "Rebuild", true), value);
            remove => HookEndpointManager.Remove<Delegates.Rebuild_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "Rebuild", true), value);
        }

        public static event Delegates.UpdateSubObjectPivot_WithArgs UpdateSubObjectPivot
        {
            add => HookEndpointManager.Add<Delegates.UpdateSubObjectPivot_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateSubObjectPivot", true), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateSubObjectPivot_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateSubObjectPivot", true), value);
        }

        public static event Delegates.GetModifiedMaterial_WithArgs GetModifiedMaterial
        {
            add => HookEndpointManager.Add<Delegates.GetModifiedMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetModifiedMaterial", true), value);
            remove => HookEndpointManager.Remove<Delegates.GetModifiedMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetModifiedMaterial", true), value);
        }

        public static event Delegates.UpdateMaterial_WithArgs UpdateMaterial
        {
            add => HookEndpointManager.Add<Delegates.UpdateMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateMaterial", true), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateMaterial", true), value);
        }

        public static event Delegates.get_maskOffset_WithArgs get_maskOffset
        {
            add => HookEndpointManager.Add<Delegates.get_maskOffset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "get_maskOffset", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_maskOffset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "get_maskOffset", true), value);
        }

        public static event Delegates.set_maskOffset_WithArgs set_maskOffset
        {
            add => HookEndpointManager.Add<Delegates.set_maskOffset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "set_maskOffset", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_maskOffset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "set_maskOffset", true), value);
        }

        public static event Delegates.RecalculateClipping_WithArgs RecalculateClipping
        {
            add => HookEndpointManager.Add<Delegates.RecalculateClipping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "RecalculateClipping", true), value);
            remove => HookEndpointManager.Remove<Delegates.RecalculateClipping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "RecalculateClipping", true), value);
        }

        public static event Delegates.RecalculateMasking_WithArgs RecalculateMasking
        {
            add => HookEndpointManager.Add<Delegates.RecalculateMasking_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "RecalculateMasking", true), value);
            remove => HookEndpointManager.Remove<Delegates.RecalculateMasking_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "RecalculateMasking", true), value);
        }

        public static event Delegates.UpdateMeshPadding_WithArgs UpdateMeshPadding
        {
            add => HookEndpointManager.Add<Delegates.UpdateMeshPadding_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateMeshPadding", true), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateMeshPadding_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateMeshPadding", true), value);
        }

        public static event Delegates.InternalCrossFadeColor_WithArgs InternalCrossFadeColor
        {
            add => HookEndpointManager.Add<Delegates.InternalCrossFadeColor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "InternalCrossFadeColor", true), value);
            remove => HookEndpointManager.Remove<Delegates.InternalCrossFadeColor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "InternalCrossFadeColor", true), value);
        }

        public static event Delegates.InternalCrossFadeAlpha_WithArgs InternalCrossFadeAlpha
        {
            add => HookEndpointManager.Add<Delegates.InternalCrossFadeAlpha_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "InternalCrossFadeAlpha", true), value);
            remove => HookEndpointManager.Remove<Delegates.InternalCrossFadeAlpha_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "InternalCrossFadeAlpha", true), value);
        }

        public static event Delegates.ForceMeshUpdate_WithArgs ForceMeshUpdate
        {
            add => HookEndpointManager.Add<Delegates.ForceMeshUpdate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "ForceMeshUpdate", true), value);
            remove => HookEndpointManager.Remove<Delegates.ForceMeshUpdate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "ForceMeshUpdate", true), value);
        }

        public static event Delegates.ForceMeshUpdate_bool_WithArgs ForceMeshUpdate_bool
        {
            add => HookEndpointManager.Add<Delegates.ForceMeshUpdate_bool_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "ForceMeshUpdate", true), value);
            remove => HookEndpointManager.Remove<Delegates.ForceMeshUpdate_bool_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "ForceMeshUpdate", true), value);
        }

        public static event Delegates.GetTextInfo_WithArgs GetTextInfo
        {
            add => HookEndpointManager.Add<Delegates.GetTextInfo_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetTextInfo", true), value);
            remove => HookEndpointManager.Remove<Delegates.GetTextInfo_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "GetTextInfo", true), value);
        }

        public static event Delegates.UpdateGeometry_WithArgs UpdateGeometry
        {
            add => HookEndpointManager.Add<Delegates.UpdateGeometry_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateGeometry", true), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateGeometry_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateGeometry", true), value);
        }

        public static event Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_WithArgs
            UpdateVertexData_TMP_VertexDataUpdateFlags
            {
                add => HookEndpointManager.Add<Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateVertexData", true), value);
                remove => HookEndpointManager.Remove<Delegates.UpdateVertexData_TMP_VertexDataUpdateFlags_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateVertexData", true), value);
            }

        public static event Delegates.UpdateVertexData_WithArgs UpdateVertexData
        {
            add => HookEndpointManager.Add<Delegates.UpdateVertexData_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateVertexData", true), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateVertexData_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateVertexData", true), value);
        }

        public static event Delegates.UpdateFontAsset_WithArgs UpdateFontAsset
        {
            add => HookEndpointManager.Add<Delegates.UpdateFontAsset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateFontAsset", true), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateFontAsset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TextMeshProUGUI), "UpdateFontAsset", true), value);
        }
    }
}