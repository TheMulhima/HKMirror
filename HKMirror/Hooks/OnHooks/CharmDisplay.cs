using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for CharmDisplay class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCharmDisplay
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookReset()
{
if (!HookedList.Contains("Reset"))
{
HookedList.Add("Reset");
On.CharmDisplay.Reset += Reset;

}
}
internal static event Delegates.Reset_BeforeArgs _beforeReset;
internal static event Delegates.Reset_AfterArgs _afterReset;
private static void Reset(On.CharmDisplay.orig_Reset orig,CharmDisplay self)
{
Delegates.Params_Reset @params = new() 
{
self = self
};
if (_beforeReset != null)
{
foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
{
try
{
_beforeReset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterReset != null)
{
foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
{
try
{
_afterReset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.CharmDisplay.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.CharmDisplay.orig_Start orig,CharmDisplay self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCheck()
{
if (!HookedList.Contains("Check"))
{
HookedList.Add("Check");
On.CharmDisplay.Check += Check;

}
}
internal static event Delegates.Check_BeforeArgs _beforeCheck;
internal static event Delegates.Check_AfterArgs _afterCheck;
private static void Check(On.CharmDisplay.orig_Check orig,CharmDisplay self)
{
Delegates.Params_Check @params = new() 
{
self = self
};
if (_beforeCheck != null)
{
foreach (Delegates.Check_BeforeArgs toInvoke in _beforeCheck.GetInvocationList())
{
try
{
_beforeCheck?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterCheck != null)
{
foreach (Delegates.Check_AfterArgs toInvoke in _afterCheck.GetInvocationList())
{
try
{
_afterCheck.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookFixedUpdate()
{
if (!HookedList.Contains("FixedUpdate"))
{
HookedList.Add("FixedUpdate");
On.CharmDisplay.FixedUpdate += FixedUpdate;

}
}
internal static event Delegates.FixedUpdate_BeforeArgs _beforeFixedUpdate;
internal static event Delegates.FixedUpdate_AfterArgs _afterFixedUpdate;
private static void FixedUpdate(On.CharmDisplay.orig_FixedUpdate orig,CharmDisplay self)
{
Delegates.Params_FixedUpdate @params = new() 
{
self = self
};
if (_beforeFixedUpdate != null)
{
foreach (Delegates.FixedUpdate_BeforeArgs toInvoke in _beforeFixedUpdate.GetInvocationList())
{
try
{
_beforeFixedUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterFixedUpdate != null)
{
foreach (Delegates.FixedUpdate_AfterArgs toInvoke in _afterFixedUpdate.GetInvocationList())
{
try
{
_afterFixedUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Reset
{
public CharmDisplay self;
}
public delegate void Reset_BeforeArgs(Params_Reset args);
public delegate void Reset_AfterArgs(Params_Reset args);
public delegate void Reset_WithArgs (Action<CharmDisplay> orig, CharmDisplay self);
public sealed class Params_Start
{
public CharmDisplay self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<CharmDisplay> orig, CharmDisplay self);
public sealed class Params_Check
{
public CharmDisplay self;
}
public delegate void Check_BeforeArgs(Params_Check args);
public delegate void Check_AfterArgs(Params_Check args);
public delegate void Check_WithArgs (Action<CharmDisplay> orig, CharmDisplay self);
public sealed class Params_FixedUpdate
{
public CharmDisplay self;
}
public delegate void FixedUpdate_BeforeArgs(Params_FixedUpdate args);
public delegate void FixedUpdate_AfterArgs(Params_FixedUpdate args);
public delegate void FixedUpdate_WithArgs (Action<CharmDisplay> orig, CharmDisplay self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Reset_BeforeArgs Reset
{
add
{

HookHandler._beforeReset += value;
HookHandler.HookReset();
}
remove => HookHandler._beforeReset -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.Check_BeforeArgs Check
{
add
{

HookHandler._beforeCheck += value;
HookHandler.HookCheck();
}
remove => HookHandler._beforeCheck -= value;
}
public static event Delegates.FixedUpdate_BeforeArgs FixedUpdate
{
add
{

HookHandler._beforeFixedUpdate += value;
HookHandler.HookFixedUpdate();
}
remove => HookHandler._beforeFixedUpdate -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Reset_AfterArgs Reset
{
add
{

HookHandler._afterReset += value;
HookHandler.HookReset();
}
remove => HookHandler._afterReset -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.Check_AfterArgs Check
{
add
{

HookHandler._afterCheck += value;
HookHandler.HookCheck();
}
remove => HookHandler._afterCheck -= value;
}
public static event Delegates.FixedUpdate_AfterArgs FixedUpdate
{
add
{

HookHandler._afterFixedUpdate += value;
HookHandler.HookFixedUpdate();
}
remove => HookHandler._afterFixedUpdate -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.CharmDisplay.hook_Reset Reset
{
add => On.CharmDisplay.Reset += value;
remove => On.CharmDisplay.Reset -= value;
}
public static event On.CharmDisplay.hook_Start Start
{
add => On.CharmDisplay.Start += value;
remove => On.CharmDisplay.Start -= value;
}
public static event On.CharmDisplay.hook_Check Check
{
add => On.CharmDisplay.Check += value;
remove => On.CharmDisplay.Check -= value;
}
public static event On.CharmDisplay.hook_FixedUpdate FixedUpdate
{
add => On.CharmDisplay.FixedUpdate += value;
remove => On.CharmDisplay.FixedUpdate -= value;
}
}

}
