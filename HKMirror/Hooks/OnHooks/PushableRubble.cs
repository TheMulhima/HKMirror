using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for PushableRubble class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPushableRubble
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.PushableRubble.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.PushableRubble.orig_Awake orig, PushableRubble self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
            {
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                {
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
            {
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                {
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.PushableRubble.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_AfterArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.PushableRubble.orig_OnTriggerEnter2D orig, PushableRubble self,
            UnityEngine.Collider2D collider)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, collider = collider
            };
            if (_beforeOnTriggerEnter2D != null)
            {
                foreach (Delegates.OnTriggerEnter2D_BeforeArgs toInvoke in _beforeOnTriggerEnter2D.GetInvocationList())
                {
                    try
                    {
                        _beforeOnTriggerEnter2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            collider = @params.collider;
            orig(self, collider);
            if (_afterOnTriggerEnter2D != null)
            {
                foreach (Delegates.OnTriggerEnter2D_AfterArgs toInvoke in _afterOnTriggerEnter2D.GetInvocationList())
                {
                    try
                    {
                        _afterOnTriggerEnter2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookPush()
        {
            if (!HookedList.Contains("Push"))
            {
                HookedList.Add("Push");
                On.PushableRubble.Push += Push;
            }
        }

        internal static event Delegates.Push_BeforeArgs _beforePush;
        internal static event Delegates.Push_AfterArgs _afterPush;

        private static void Push(On.PushableRubble.orig_Push orig, PushableRubble self)
        {
            Delegates.Params_Push @params = new()
            {
                self = self
            };
            if (_beforePush != null)
            {
                foreach (Delegates.Push_BeforeArgs toInvoke in _beforePush.GetInvocationList())
                {
                    try
                    {
                        _beforePush?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterPush != null)
            {
                foreach (Delegates.Push_AfterArgs toInvoke in _afterPush.GetInvocationList())
                {
                    try
                    {
                        _afterPush.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookEndRubble()
        {
            if (!HookedList.Contains("EndRubble"))
            {
                HookedList.Add("EndRubble");
                On.PushableRubble.EndRubble += EndRubble;
            }
        }

        internal static event Delegates.EndRubble_BeforeArgs _beforeEndRubble;
        internal static event Delegates.EndRubble_AfterArgs _afterEndRubble;

        private static void EndRubble(On.PushableRubble.orig_EndRubble orig, PushableRubble self)
        {
            Delegates.Params_EndRubble @params = new()
            {
                self = self
            };
            if (_beforeEndRubble != null)
            {
                foreach (Delegates.EndRubble_BeforeArgs toInvoke in _beforeEndRubble.GetInvocationList())
                {
                    try
                    {
                        _beforeEndRubble?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterEndRubble != null)
            {
                foreach (Delegates.EndRubble_AfterArgs toInvoke in _afterEndRubble.GetInvocationList())
                {
                    try
                    {
                        _afterEndRubble.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookEndRubbleContinuation()
        {
            if (!HookedList.Contains("EndRubbleContinuation"))
            {
                HookedList.Add("EndRubbleContinuation");
                On.PushableRubble.EndRubbleContinuation += EndRubbleContinuation;
            }
        }

        internal static event Delegates.EndRubbleContinuation_BeforeArgs _beforeEndRubbleContinuation;
        internal static event Delegates.EndRubbleContinuation_AfterArgs _afterEndRubbleContinuation;

        private static void EndRubbleContinuation(On.PushableRubble.orig_EndRubbleContinuation orig,
            PushableRubble self)
        {
            Delegates.Params_EndRubbleContinuation @params = new()
            {
                self = self
            };
            if (_beforeEndRubbleContinuation != null)
            {
                foreach (Delegates.EndRubbleContinuation_BeforeArgs toInvoke in _beforeEndRubbleContinuation
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeEndRubbleContinuation?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterEndRubbleContinuation != null)
            {
                foreach (Delegates.EndRubbleContinuation_AfterArgs toInvoke in _afterEndRubbleContinuation
                             .GetInvocationList())
                {
                    try
                    {
                        _afterEndRubbleContinuation.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Awake
        {
            public PushableRubble self;
        }

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<PushableRubble> orig, PushableRubble self);

        public sealed class Params_OnTriggerEnter2D
        {
            public PushableRubble self;
            public UnityEngine.Collider2D collider;
        }

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_AfterArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_WithArgs(Action<PushableRubble, UnityEngine.Collider2D> orig,
            PushableRubble self, UnityEngine.Collider2D collider);

        public sealed class Params_Push
        {
            public PushableRubble self;
        }

        public delegate void Push_BeforeArgs(Params_Push args);

        public delegate void Push_AfterArgs(Params_Push args);

        public delegate void Push_WithArgs(Action<PushableRubble> orig, PushableRubble self);

        public sealed class Params_EndRubble
        {
            public PushableRubble self;
        }

        public delegate void EndRubble_BeforeArgs(Params_EndRubble args);

        public delegate void EndRubble_AfterArgs(Params_EndRubble args);

        public delegate void EndRubble_WithArgs(Action<PushableRubble> orig, PushableRubble self);

        public sealed class Params_EndRubbleContinuation
        {
            public PushableRubble self;
        }

        public delegate void EndRubbleContinuation_BeforeArgs(Params_EndRubbleContinuation args);

        public delegate void EndRubbleContinuation_AfterArgs(Params_EndRubbleContinuation args);

        public delegate void EndRubbleContinuation_WithArgs(Action<PushableRubble> orig, PushableRubble self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.Push_BeforeArgs Push
        {
            add
            {
                HookHandler._beforePush += value;
                HookHandler.HookPush();
            }
            remove => HookHandler._beforePush -= value;
        }

        public static event Delegates.EndRubble_BeforeArgs EndRubble
        {
            add
            {
                HookHandler._beforeEndRubble += value;
                HookHandler.HookEndRubble();
            }
            remove => HookHandler._beforeEndRubble -= value;
        }

        public static event Delegates.EndRubbleContinuation_BeforeArgs EndRubbleContinuation
        {
            add
            {
                HookHandler._beforeEndRubbleContinuation += value;
                HookHandler.HookEndRubbleContinuation();
            }
            remove => HookHandler._beforeEndRubbleContinuation -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnTriggerEnter2D_AfterArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }

        public static event Delegates.Push_AfterArgs Push
        {
            add
            {
                HookHandler._afterPush += value;
                HookHandler.HookPush();
            }
            remove => HookHandler._afterPush -= value;
        }

        public static event Delegates.EndRubble_AfterArgs EndRubble
        {
            add
            {
                HookHandler._afterEndRubble += value;
                HookHandler.HookEndRubble();
            }
            remove => HookHandler._afterEndRubble -= value;
        }

        public static event Delegates.EndRubbleContinuation_AfterArgs EndRubbleContinuation
        {
            add
            {
                HookHandler._afterEndRubbleContinuation += value;
                HookHandler.HookEndRubbleContinuation();
            }
            remove => HookHandler._afterEndRubbleContinuation -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.PushableRubble.hook_Awake Awake
        {
            add => On.PushableRubble.Awake += value;
            remove => On.PushableRubble.Awake -= value;
        }

        public static event On.PushableRubble.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.PushableRubble.OnTriggerEnter2D += value;
            remove => On.PushableRubble.OnTriggerEnter2D -= value;
        }

        public static event On.PushableRubble.hook_Push Push
        {
            add => On.PushableRubble.Push += value;
            remove => On.PushableRubble.Push -= value;
        }

        public static event On.PushableRubble.hook_EndRubble EndRubble
        {
            add => On.PushableRubble.EndRubble += value;
            remove => On.PushableRubble.EndRubble -= value;
        }

        public static event On.PushableRubble.hook_EndRubbleContinuation EndRubbleContinuation
        {
            add => On.PushableRubble.EndRubbleContinuation += value;
            remove => On.PushableRubble.EndRubbleContinuation -= value;
        }
    }
}