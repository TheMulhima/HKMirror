using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TouchUtility class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTouchUtility
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAnchorToViewPoint()
        {
            if (!HookedList.Contains("AnchorToViewPoint"))
            {
                HookedList.Add("AnchorToViewPoint");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchUtility), "AnchorToViewPoint", false),
                    AnchorToViewPoint);
            }
        }

        internal static event Delegates.AnchorToViewPoint_BeforeArgs _beforeAnchorToViewPoint;
        internal static event Delegates.AnchorToViewPoint_AfterArgs _afterAnchorToViewPoint;

        private static Vector2 AnchorToViewPoint(Func<TouchControlAnchor, Vector2> orig,
            TouchControlAnchor touchControlAnchor)
        {
            Delegates.Params_AnchorToViewPoint @params = new()
            {
                touchControlAnchor = touchControlAnchor
            };
            if (_beforeAnchorToViewPoint != null)
                foreach (Delegates.AnchorToViewPoint_BeforeArgs toInvoke in
                         _beforeAnchorToViewPoint.GetInvocationList())
                    try
                    {
                        _beforeAnchorToViewPoint?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            touchControlAnchor = @params.touchControlAnchor;
            var retVal = orig(touchControlAnchor);
            if (_afterAnchorToViewPoint != null)
                foreach (Delegates.AnchorToViewPoint_AfterArgs toInvoke in _afterAnchorToViewPoint.GetInvocationList())
                    try
                    {
                        retVal = _afterAnchorToViewPoint.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookRoundVector()
        {
            if (!HookedList.Contains("RoundVector"))
            {
                HookedList.Add("RoundVector");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchUtility), "RoundVector", false), RoundVector);
            }
        }

        internal static event Delegates.RoundVector_BeforeArgs _beforeRoundVector;
        internal static event Delegates.RoundVector_AfterArgs _afterRoundVector;

        private static Vector2 RoundVector(Func<Vector2, Vector2> orig, Vector2 vector)
        {
            Delegates.Params_RoundVector @params = new()
            {
                vector = vector
            };
            if (_beforeRoundVector != null)
                foreach (Delegates.RoundVector_BeforeArgs toInvoke in _beforeRoundVector.GetInvocationList())
                    try
                    {
                        _beforeRoundVector?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            vector = @params.vector;
            var retVal = orig(vector);
            if (_afterRoundVector != null)
                foreach (Delegates.RoundVector_AfterArgs toInvoke in _afterRoundVector.GetInvocationList())
                    try
                    {
                        retVal = _afterRoundVector.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate Vector2 AnchorToViewPoint_AfterArgs(Params_AnchorToViewPoint args, Vector2 ret);

        public delegate void AnchorToViewPoint_BeforeArgs(Params_AnchorToViewPoint args);

        public delegate Vector2 AnchorToViewPoint_WithArgs(Func<TouchControlAnchor, Vector2> orig,
            TouchControlAnchor touchControlAnchor);

        public delegate Vector2 RoundVector_AfterArgs(Params_RoundVector args, Vector2 ret);

        public delegate void RoundVector_BeforeArgs(Params_RoundVector args);

        public delegate Vector2 RoundVector_WithArgs(Func<Vector2, Vector2> orig, Vector2 vector);

        public sealed class Params_AnchorToViewPoint
        {
            public TouchControlAnchor touchControlAnchor;
        }

        public sealed class Params_RoundVector
        {
            public Vector2 vector;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.AnchorToViewPoint_BeforeArgs AnchorToViewPoint
        {
            add
            {
                HookHandler._beforeAnchorToViewPoint += value;
                HookHandler.HookAnchorToViewPoint();
            }
            remove => HookHandler._beforeAnchorToViewPoint -= value;
        }

        public static event Delegates.RoundVector_BeforeArgs RoundVector
        {
            add
            {
                HookHandler._beforeRoundVector += value;
                HookHandler.HookRoundVector();
            }
            remove => HookHandler._beforeRoundVector -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.AnchorToViewPoint_AfterArgs AnchorToViewPoint
        {
            add
            {
                HookHandler._afterAnchorToViewPoint += value;
                HookHandler.HookAnchorToViewPoint();
            }
            remove => HookHandler._afterAnchorToViewPoint -= value;
        }

        public static event Delegates.RoundVector_AfterArgs RoundVector
        {
            add
            {
                HookHandler._afterRoundVector += value;
                HookHandler.HookRoundVector();
            }
            remove => HookHandler._afterRoundVector -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.AnchorToViewPoint_WithArgs AnchorToViewPoint
        {
            add => HookEndpointManager.Add<Delegates.AnchorToViewPoint_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchUtility), "AnchorToViewPoint", false), value);
            remove => HookEndpointManager.Remove<Delegates.AnchorToViewPoint_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchUtility), "AnchorToViewPoint", false), value);
        }

        public static event Delegates.RoundVector_WithArgs RoundVector
        {
            add => HookEndpointManager.Add<Delegates.RoundVector_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchUtility), "RoundVector", false), value);
            remove => HookEndpointManager.Remove<Delegates.RoundVector_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchUtility), "RoundVector", false), value);
        }
    }
}