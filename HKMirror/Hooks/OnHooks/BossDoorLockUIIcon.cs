namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for BossDoorLockUIIcon class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBossDoorLockUIIcon
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.BossDoorLockUIIcon.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.BossDoorLockUIIcon.orig_Awake orig, BossDoorLockUIIcon self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetUnlocked()
        {
            if (!HookedList.Contains("SetUnlocked"))
            {
                HookedList.Add("SetUnlocked");
                On.BossDoorLockUIIcon.SetUnlocked += SetUnlocked;
            }
        }

        internal static event Delegates.SetUnlocked_BeforeArgs _beforeSetUnlocked;
        internal static event Delegates.SetUnlocked_AfterArgs _afterSetUnlocked;

        private static void SetUnlocked(On.BossDoorLockUIIcon.orig_SetUnlocked orig, BossDoorLockUIIcon self,
            bool unlocked, bool doUnlockAnim, int indexAnimOffset)
        {
            Delegates.Params_SetUnlocked @params = new()
            {
                self = self, unlocked = unlocked, doUnlockAnim = doUnlockAnim, indexAnimOffset = indexAnimOffset
            };
            if (_beforeSetUnlocked != null)
                foreach (Delegates.SetUnlocked_BeforeArgs toInvoke in _beforeSetUnlocked.GetInvocationList())
                    try
                    {
                        _beforeSetUnlocked?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            unlocked = @params.unlocked;
            doUnlockAnim = @params.doUnlockAnim;
            indexAnimOffset = @params.indexAnimOffset;
            orig(self, unlocked, doUnlockAnim, indexAnimOffset);
            if (_afterSetUnlocked != null)
                foreach (Delegates.SetUnlocked_AfterArgs toInvoke in _afterSetUnlocked.GetInvocationList())
                    try
                    {
                        _afterSetUnlocked.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPlayAnimWithDelay()
        {
            if (!HookedList.Contains("PlayAnimWithDelay"))
            {
                HookedList.Add("PlayAnimWithDelay");
                On.BossDoorLockUIIcon.PlayAnimWithDelay += PlayAnimWithDelay;
            }
        }

        internal static event Delegates.PlayAnimWithDelay_BeforeArgs _beforePlayAnimWithDelay;

        private static IEnumerator PlayAnimWithDelay(On.BossDoorLockUIIcon.orig_PlayAnimWithDelay orig,
            BossDoorLockUIIcon self, string anim, bool doAnim, float delay)
        {
            Delegates.Params_PlayAnimWithDelay @params = new()
            {
                self = self, anim = anim, doAnim = doAnim, delay = delay
            };
            if (_beforePlayAnimWithDelay != null)
                foreach (Delegates.PlayAnimWithDelay_BeforeArgs toInvoke in
                         _beforePlayAnimWithDelay.GetInvocationList())
                    try
                    {
                        _beforePlayAnimWithDelay?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            anim = @params.anim;
            doAnim = @params.doAnim;
            delay = @params.delay;
            return orig(self, anim, doAnim, delay);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<BossDoorLockUIIcon> orig, BossDoorLockUIIcon self);

        public delegate IEnumerator PlayAnimWithDelay_AfterArgs(Params_PlayAnimWithDelay args, IEnumerator ret);

        public delegate void PlayAnimWithDelay_BeforeArgs(Params_PlayAnimWithDelay args);

        public delegate IEnumerator PlayAnimWithDelay_WithArgs(
            Func<BossDoorLockUIIcon, string, bool, float, IEnumerator> orig, BossDoorLockUIIcon self, string anim,
            bool doAnim, float delay);

        public delegate void SetUnlocked_AfterArgs(Params_SetUnlocked args);

        public delegate void SetUnlocked_BeforeArgs(Params_SetUnlocked args);

        public delegate void SetUnlocked_WithArgs(Action<BossDoorLockUIIcon, bool, bool, int> orig,
            BossDoorLockUIIcon self, bool unlocked, bool doUnlockAnim, int indexAnimOffset);

        public sealed class Params_Awake
        {
            public BossDoorLockUIIcon self;
        }

        public sealed class Params_SetUnlocked
        {
            public bool doUnlockAnim;
            public int indexAnimOffset;
            public BossDoorLockUIIcon self;
            public bool unlocked;
        }

        public sealed class Params_PlayAnimWithDelay
        {
            public string anim;
            public float delay;
            public bool doAnim;
            public BossDoorLockUIIcon self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.SetUnlocked_BeforeArgs SetUnlocked
        {
            add
            {
                HookHandler._beforeSetUnlocked += value;
                HookHandler.HookSetUnlocked();
            }
            remove => HookHandler._beforeSetUnlocked -= value;
        }

        public static event Delegates.PlayAnimWithDelay_BeforeArgs PlayAnimWithDelay
        {
            add
            {
                HookHandler._beforePlayAnimWithDelay += value;
                HookHandler.HookPlayAnimWithDelay();
            }
            remove => HookHandler._beforePlayAnimWithDelay -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.SetUnlocked_AfterArgs SetUnlocked
        {
            add
            {
                HookHandler._afterSetUnlocked += value;
                HookHandler.HookSetUnlocked();
            }
            remove => HookHandler._afterSetUnlocked -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.BossDoorLockUIIcon.hook_Awake Awake
        {
            add => On.BossDoorLockUIIcon.Awake += value;
            remove => On.BossDoorLockUIIcon.Awake -= value;
        }

        public static event On.BossDoorLockUIIcon.hook_SetUnlocked SetUnlocked
        {
            add => On.BossDoorLockUIIcon.SetUnlocked += value;
            remove => On.BossDoorLockUIIcon.SetUnlocked -= value;
        }

        public static event On.BossDoorLockUIIcon.hook_PlayAnimWithDelay PlayAnimWithDelay
        {
            add => On.BossDoorLockUIIcon.PlayAnimWithDelay += value;
            remove => On.BossDoorLockUIIcon.PlayAnimWithDelay -= value;
        }
    }
}