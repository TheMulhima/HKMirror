using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for GamepadVibration class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGamepadVibration
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_SmallMotor()
        {
            if (!HookedList.Contains("get_SmallMotor"))
            {
                HookedList.Add("get_SmallMotor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GamepadVibration), "get_SmallMotor", true),
                    get_SmallMotor);
            }
        }

        internal static event Delegates.get_SmallMotor_BeforeArgs _beforeget_SmallMotor;
        internal static event Delegates.get_SmallMotor_AfterArgs _afterget_SmallMotor;

        private static UnityEngine.AnimationCurve get_SmallMotor(
            Func<GamepadVibration, UnityEngine.AnimationCurve> orig, GamepadVibration self)
        {
            Delegates.Params_get_SmallMotor @params = new()
            {
                self = self
            };
            if (_beforeget_SmallMotor != null)
            {
                foreach (Delegates.get_SmallMotor_BeforeArgs toInvoke in _beforeget_SmallMotor.GetInvocationList())
                {
                    try
                    {
                        _beforeget_SmallMotor?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SmallMotor != null)
            {
                foreach (Delegates.get_SmallMotor_AfterArgs toInvoke in _afterget_SmallMotor.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_SmallMotor.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_LargeMotor()
        {
            if (!HookedList.Contains("get_LargeMotor"))
            {
                HookedList.Add("get_LargeMotor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GamepadVibration), "get_LargeMotor", true),
                    get_LargeMotor);
            }
        }

        internal static event Delegates.get_LargeMotor_BeforeArgs _beforeget_LargeMotor;
        internal static event Delegates.get_LargeMotor_AfterArgs _afterget_LargeMotor;

        private static UnityEngine.AnimationCurve get_LargeMotor(
            Func<GamepadVibration, UnityEngine.AnimationCurve> orig, GamepadVibration self)
        {
            Delegates.Params_get_LargeMotor @params = new()
            {
                self = self
            };
            if (_beforeget_LargeMotor != null)
            {
                foreach (Delegates.get_LargeMotor_BeforeArgs toInvoke in _beforeget_LargeMotor.GetInvocationList())
                {
                    try
                    {
                        _beforeget_LargeMotor?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LargeMotor != null)
            {
                foreach (Delegates.get_LargeMotor_AfterArgs toInvoke in _afterget_LargeMotor.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_LargeMotor.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_PlaybackRate()
        {
            if (!HookedList.Contains("get_PlaybackRate"))
            {
                HookedList.Add("get_PlaybackRate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GamepadVibration), "get_PlaybackRate", true),
                    get_PlaybackRate);
            }
        }

        internal static event Delegates.get_PlaybackRate_BeforeArgs _beforeget_PlaybackRate;
        internal static event Delegates.get_PlaybackRate_AfterArgs _afterget_PlaybackRate;

        private static float get_PlaybackRate(Func<GamepadVibration, float> orig, GamepadVibration self)
        {
            Delegates.Params_get_PlaybackRate @params = new()
            {
                self = self
            };
            if (_beforeget_PlaybackRate != null)
            {
                foreach (Delegates.get_PlaybackRate_BeforeArgs toInvoke in _beforeget_PlaybackRate.GetInvocationList())
                {
                    try
                    {
                        _beforeget_PlaybackRate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_PlaybackRate != null)
            {
                foreach (Delegates.get_PlaybackRate_AfterArgs toInvoke in _afterget_PlaybackRate.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_PlaybackRate.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                On.GamepadVibration.Reset += Reset;
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_AfterArgs _afterReset;

        private static void Reset(On.GamepadVibration.orig_Reset orig, GamepadVibration self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            if (_beforeReset != null)
            {
                foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
                {
                    try
                    {
                        _beforeReset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterReset != null)
            {
                foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
                {
                    try
                    {
                        _afterReset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetDuration()
        {
            if (!HookedList.Contains("GetDuration"))
            {
                HookedList.Add("GetDuration");
                On.GamepadVibration.GetDuration += GetDuration;
            }
        }

        internal static event Delegates.GetDuration_BeforeArgs _beforeGetDuration;
        internal static event Delegates.GetDuration_AfterArgs _afterGetDuration;

        private static float GetDuration(On.GamepadVibration.orig_GetDuration orig, GamepadVibration self)
        {
            Delegates.Params_GetDuration @params = new()
            {
                self = self
            };
            if (_beforeGetDuration != null)
            {
                foreach (Delegates.GetDuration_BeforeArgs toInvoke in _beforeGetDuration.GetInvocationList())
                {
                    try
                    {
                        _beforeGetDuration?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetDuration != null)
            {
                foreach (Delegates.GetDuration_AfterArgs toInvoke in _afterGetDuration.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetDuration.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetDuration_AnimationCurve()
        {
            if (!HookedList.Contains("GetDuration_AnimationCurve"))
            {
                HookedList.Add("GetDuration_AnimationCurve");
                On.GamepadVibration.GetDuration_AnimationCurve += GetDuration_AnimationCurve;
            }
        }

        internal static event Delegates.GetDuration_AnimationCurve_BeforeArgs _beforeGetDuration_AnimationCurve;
        internal static event Delegates.GetDuration_AnimationCurve_AfterArgs _afterGetDuration_AnimationCurve;

        private static float GetDuration_AnimationCurve(On.GamepadVibration.orig_GetDuration_AnimationCurve orig,
            UnityEngine.AnimationCurve animationCurve)
        {
            Delegates.Params_GetDuration_AnimationCurve @params = new()
            {
                animationCurve = animationCurve
            };
            if (_beforeGetDuration_AnimationCurve != null)
            {
                foreach (Delegates.GetDuration_AnimationCurve_BeforeArgs toInvoke in _beforeGetDuration_AnimationCurve
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeGetDuration_AnimationCurve?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            animationCurve = @params.animationCurve;
            var retVal = orig(animationCurve);
            if (_afterGetDuration_AnimationCurve != null)
            {
                foreach (Delegates.GetDuration_AnimationCurve_AfterArgs toInvoke in _afterGetDuration_AnimationCurve
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetDuration_AnimationCurve.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_SmallMotor
        {
            public GamepadVibration self;
        }

        public delegate void get_SmallMotor_BeforeArgs(Params_get_SmallMotor args);

        public delegate UnityEngine.AnimationCurve get_SmallMotor_AfterArgs(Params_get_SmallMotor args,
            UnityEngine.AnimationCurve ret);

        public delegate UnityEngine.AnimationCurve get_SmallMotor_WithArgs(
            Func<GamepadVibration, UnityEngine.AnimationCurve> orig, GamepadVibration self);

        public sealed class Params_get_LargeMotor
        {
            public GamepadVibration self;
        }

        public delegate void get_LargeMotor_BeforeArgs(Params_get_LargeMotor args);

        public delegate UnityEngine.AnimationCurve get_LargeMotor_AfterArgs(Params_get_LargeMotor args,
            UnityEngine.AnimationCurve ret);

        public delegate UnityEngine.AnimationCurve get_LargeMotor_WithArgs(
            Func<GamepadVibration, UnityEngine.AnimationCurve> orig, GamepadVibration self);

        public sealed class Params_get_PlaybackRate
        {
            public GamepadVibration self;
        }

        public delegate void get_PlaybackRate_BeforeArgs(Params_get_PlaybackRate args);

        public delegate float get_PlaybackRate_AfterArgs(Params_get_PlaybackRate args, float ret);

        public delegate float get_PlaybackRate_WithArgs(Func<GamepadVibration, float> orig, GamepadVibration self);

        public sealed class Params_Reset
        {
            public GamepadVibration self;
        }

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_AfterArgs(Params_Reset args);

        public delegate void Reset_WithArgs(Action<GamepadVibration> orig, GamepadVibration self);

        public sealed class Params_GetDuration
        {
            public GamepadVibration self;
        }

        public delegate void GetDuration_BeforeArgs(Params_GetDuration args);

        public delegate float GetDuration_AfterArgs(Params_GetDuration args, float ret);

        public delegate float GetDuration_WithArgs(Func<GamepadVibration, float> orig, GamepadVibration self);

        public sealed class Params_GetDuration_AnimationCurve
        {
            public UnityEngine.AnimationCurve animationCurve;
        }

        public delegate void GetDuration_AnimationCurve_BeforeArgs(Params_GetDuration_AnimationCurve args);

        public delegate float GetDuration_AnimationCurve_AfterArgs(Params_GetDuration_AnimationCurve args, float ret);

        public delegate float GetDuration_AnimationCurve_WithArgs(Func<UnityEngine.AnimationCurve, float> orig,
            UnityEngine.AnimationCurve animationCurve);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_SmallMotor_BeforeArgs get_SmallMotor
        {
            add
            {
                HookHandler._beforeget_SmallMotor += value;
                HookHandler.Hookget_SmallMotor();
            }
            remove => HookHandler._beforeget_SmallMotor -= value;
        }

        public static event Delegates.get_LargeMotor_BeforeArgs get_LargeMotor
        {
            add
            {
                HookHandler._beforeget_LargeMotor += value;
                HookHandler.Hookget_LargeMotor();
            }
            remove => HookHandler._beforeget_LargeMotor -= value;
        }

        public static event Delegates.get_PlaybackRate_BeforeArgs get_PlaybackRate
        {
            add
            {
                HookHandler._beforeget_PlaybackRate += value;
                HookHandler.Hookget_PlaybackRate();
            }
            remove => HookHandler._beforeget_PlaybackRate -= value;
        }

        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.GetDuration_BeforeArgs GetDuration
        {
            add
            {
                HookHandler._beforeGetDuration += value;
                HookHandler.HookGetDuration();
            }
            remove => HookHandler._beforeGetDuration -= value;
        }

        public static event Delegates.GetDuration_AnimationCurve_BeforeArgs GetDuration_AnimationCurve
        {
            add
            {
                HookHandler._beforeGetDuration_AnimationCurve += value;
                HookHandler.HookGetDuration_AnimationCurve();
            }
            remove => HookHandler._beforeGetDuration_AnimationCurve -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_SmallMotor_AfterArgs get_SmallMotor
        {
            add
            {
                HookHandler._afterget_SmallMotor += value;
                HookHandler.Hookget_SmallMotor();
            }
            remove => HookHandler._afterget_SmallMotor -= value;
        }

        public static event Delegates.get_LargeMotor_AfterArgs get_LargeMotor
        {
            add
            {
                HookHandler._afterget_LargeMotor += value;
                HookHandler.Hookget_LargeMotor();
            }
            remove => HookHandler._afterget_LargeMotor -= value;
        }

        public static event Delegates.get_PlaybackRate_AfterArgs get_PlaybackRate
        {
            add
            {
                HookHandler._afterget_PlaybackRate += value;
                HookHandler.Hookget_PlaybackRate();
            }
            remove => HookHandler._afterget_PlaybackRate -= value;
        }

        public static event Delegates.Reset_AfterArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.GetDuration_AfterArgs GetDuration
        {
            add
            {
                HookHandler._afterGetDuration += value;
                HookHandler.HookGetDuration();
            }
            remove => HookHandler._afterGetDuration -= value;
        }

        public static event Delegates.GetDuration_AnimationCurve_AfterArgs GetDuration_AnimationCurve
        {
            add
            {
                HookHandler._afterGetDuration_AnimationCurve += value;
                HookHandler.HookGetDuration_AnimationCurve();
            }
            remove => HookHandler._afterGetDuration_AnimationCurve -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_SmallMotor_WithArgs get_SmallMotor
        {
            add => HookEndpointManager.Add<Delegates.get_SmallMotor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GamepadVibration), "get_SmallMotor", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_SmallMotor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GamepadVibration), "get_SmallMotor", true), value);
        }

        public static event Delegates.get_LargeMotor_WithArgs get_LargeMotor
        {
            add => HookEndpointManager.Add<Delegates.get_LargeMotor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GamepadVibration), "get_LargeMotor", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_LargeMotor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GamepadVibration), "get_LargeMotor", true), value);
        }

        public static event Delegates.get_PlaybackRate_WithArgs get_PlaybackRate
        {
            add => HookEndpointManager.Add<Delegates.get_PlaybackRate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GamepadVibration), "get_PlaybackRate", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_PlaybackRate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GamepadVibration), "get_PlaybackRate", true), value);
        }

        public static event On.GamepadVibration.hook_Reset Reset
        {
            add => On.GamepadVibration.Reset += value;
            remove => On.GamepadVibration.Reset -= value;
        }

        public static event On.GamepadVibration.hook_GetDuration GetDuration
        {
            add => On.GamepadVibration.GetDuration += value;
            remove => On.GamepadVibration.GetDuration -= value;
        }

        public static event On.GamepadVibration.hook_GetDuration_AnimationCurve GetDuration_AnimationCurve
        {
            add => On.GamepadVibration.GetDuration_AnimationCurve += value;
            remove => On.GamepadVibration.GetDuration_AnimationCurve -= value;
        }
    }
}