using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GamepadVibration class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGamepadVibration
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_SmallMotor()
        {
            if (!HookedList.Contains("get_SmallMotor"))
            {
                HookedList.Add("get_SmallMotor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GamepadVibration), "get_SmallMotor"), get_SmallMotor);
            }
        }

        internal static event Delegates.get_SmallMotor_BeforeArgs _beforeget_SmallMotor;
        internal static event Delegates.get_SmallMotor_NormalArgs _afterget_SmallMotor;

        private static AnimationCurve get_SmallMotor(Func<GamepadVibration, AnimationCurve> orig, GamepadVibration self)
        {
            Delegates.Params_get_SmallMotor @params = new()
            {
                self = self
            };
            _beforeget_SmallMotor?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SmallMotor != null) retVal = _afterget_SmallMotor.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_LargeMotor()
        {
            if (!HookedList.Contains("get_LargeMotor"))
            {
                HookedList.Add("get_LargeMotor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GamepadVibration), "get_LargeMotor"), get_LargeMotor);
            }
        }

        internal static event Delegates.get_LargeMotor_BeforeArgs _beforeget_LargeMotor;
        internal static event Delegates.get_LargeMotor_NormalArgs _afterget_LargeMotor;

        private static AnimationCurve get_LargeMotor(Func<GamepadVibration, AnimationCurve> orig, GamepadVibration self)
        {
            Delegates.Params_get_LargeMotor @params = new()
            {
                self = self
            };
            _beforeget_LargeMotor?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LargeMotor != null) retVal = _afterget_LargeMotor.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_PlaybackRate()
        {
            if (!HookedList.Contains("get_PlaybackRate"))
            {
                HookedList.Add("get_PlaybackRate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GamepadVibration), "get_PlaybackRate"),
                    get_PlaybackRate);
            }
        }

        internal static event Delegates.get_PlaybackRate_BeforeArgs _beforeget_PlaybackRate;
        internal static event Delegates.get_PlaybackRate_NormalArgs _afterget_PlaybackRate;

        private static float get_PlaybackRate(Func<GamepadVibration, float> orig, GamepadVibration self)
        {
            Delegates.Params_get_PlaybackRate @params = new()
            {
                self = self
            };
            _beforeget_PlaybackRate?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_PlaybackRate != null) retVal = _afterget_PlaybackRate.Invoke(@params);
            return retVal;
        }

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                On.GamepadVibration.Reset += Reset;
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(On.GamepadVibration.orig_Reset orig, GamepadVibration self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookGetDuration()
        {
            if (!HookedList.Contains("GetDuration"))
            {
                HookedList.Add("GetDuration");
                On.GamepadVibration.GetDuration += GetDuration;
            }
        }

        internal static event Delegates.GetDuration_BeforeArgs _beforeGetDuration;
        internal static event Delegates.GetDuration_NormalArgs _afterGetDuration;

        private static float GetDuration(On.GamepadVibration.orig_GetDuration orig, GamepadVibration self)
        {
            Delegates.Params_GetDuration @params = new()
            {
                self = self
            };
            _beforeGetDuration?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetDuration != null) retVal = _afterGetDuration.Invoke(@params);
            return retVal;
        }

        internal static void HookGetDuration_AnimationCurve()
        {
            if (!HookedList.Contains("GetDuration_AnimationCurve"))
            {
                HookedList.Add("GetDuration_AnimationCurve");
                On.GamepadVibration.GetDuration_AnimationCurve += GetDuration_AnimationCurve;
            }
        }

        internal static event Delegates.GetDuration_AnimationCurve_BeforeArgs _beforeGetDuration_AnimationCurve;
        internal static event Delegates.GetDuration_AnimationCurve_NormalArgs _afterGetDuration_AnimationCurve;

        private static float GetDuration_AnimationCurve(On.GamepadVibration.orig_GetDuration_AnimationCurve orig,
            AnimationCurve animationCurve)
        {
            Delegates.Params_GetDuration_AnimationCurve @params = new()
            {
                animationCurve = animationCurve
            };
            _beforeGetDuration_AnimationCurve?.Invoke(@params);
            animationCurve = @params.animationCurve;
            var retVal = orig(animationCurve);
            if (_afterGetDuration_AnimationCurve != null) retVal = _afterGetDuration_AnimationCurve.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_LargeMotor_BeforeArgs(Params_get_LargeMotor args);

        public delegate AnimationCurve get_LargeMotor_NormalArgs(Params_get_LargeMotor args);

        public delegate void get_PlaybackRate_BeforeArgs(Params_get_PlaybackRate args);

        public delegate float get_PlaybackRate_NormalArgs(Params_get_PlaybackRate args);

        public delegate void get_SmallMotor_BeforeArgs(Params_get_SmallMotor args);

        public delegate AnimationCurve get_SmallMotor_NormalArgs(Params_get_SmallMotor args);

        public delegate void GetDuration_AnimationCurve_BeforeArgs(Params_GetDuration_AnimationCurve args);

        public delegate float GetDuration_AnimationCurve_NormalArgs(Params_GetDuration_AnimationCurve args);

        public delegate void GetDuration_BeforeArgs(Params_GetDuration args);

        public delegate float GetDuration_NormalArgs(Params_GetDuration args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public sealed class Params_get_SmallMotor
        {
            public GamepadVibration self;
        }

        public sealed class Params_get_LargeMotor
        {
            public GamepadVibration self;
        }

        public sealed class Params_get_PlaybackRate
        {
            public GamepadVibration self;
        }

        public sealed class Params_Reset
        {
            public GamepadVibration self;
        }

        public sealed class Params_GetDuration
        {
            public GamepadVibration self;
        }

        public sealed class Params_GetDuration_AnimationCurve
        {
            public AnimationCurve animationCurve;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_SmallMotor_BeforeArgs get_SmallMotor
        {
            add
            {
                HookHandler._beforeget_SmallMotor += value;
                HookHandler.Hookget_SmallMotor();
            }
            remove => HookHandler._beforeget_SmallMotor -= value;
        }

        public static event Delegates.get_LargeMotor_BeforeArgs get_LargeMotor
        {
            add
            {
                HookHandler._beforeget_LargeMotor += value;
                HookHandler.Hookget_LargeMotor();
            }
            remove => HookHandler._beforeget_LargeMotor -= value;
        }

        public static event Delegates.get_PlaybackRate_BeforeArgs get_PlaybackRate
        {
            add
            {
                HookHandler._beforeget_PlaybackRate += value;
                HookHandler.Hookget_PlaybackRate();
            }
            remove => HookHandler._beforeget_PlaybackRate -= value;
        }

        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.GetDuration_BeforeArgs GetDuration
        {
            add
            {
                HookHandler._beforeGetDuration += value;
                HookHandler.HookGetDuration();
            }
            remove => HookHandler._beforeGetDuration -= value;
        }

        public static event Delegates.GetDuration_AnimationCurve_BeforeArgs GetDuration_AnimationCurve
        {
            add
            {
                HookHandler._beforeGetDuration_AnimationCurve += value;
                HookHandler.HookGetDuration_AnimationCurve();
            }
            remove => HookHandler._beforeGetDuration_AnimationCurve -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_SmallMotor_NormalArgs get_SmallMotor
        {
            add
            {
                HookHandler._afterget_SmallMotor += value;
                HookHandler.Hookget_SmallMotor();
            }
            remove => HookHandler._afterget_SmallMotor -= value;
        }

        public static event Delegates.get_LargeMotor_NormalArgs get_LargeMotor
        {
            add
            {
                HookHandler._afterget_LargeMotor += value;
                HookHandler.Hookget_LargeMotor();
            }
            remove => HookHandler._afterget_LargeMotor -= value;
        }

        public static event Delegates.get_PlaybackRate_NormalArgs get_PlaybackRate
        {
            add
            {
                HookHandler._afterget_PlaybackRate += value;
                HookHandler.Hookget_PlaybackRate();
            }
            remove => HookHandler._afterget_PlaybackRate -= value;
        }

        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.GetDuration_NormalArgs GetDuration
        {
            add
            {
                HookHandler._afterGetDuration += value;
                HookHandler.HookGetDuration();
            }
            remove => HookHandler._afterGetDuration -= value;
        }

        public static event Delegates.GetDuration_AnimationCurve_NormalArgs GetDuration_AnimationCurve
        {
            add
            {
                HookHandler._afterGetDuration_AnimationCurve += value;
                HookHandler.HookGetDuration_AnimationCurve();
            }
            remove => HookHandler._afterGetDuration_AnimationCurve -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_SmallMotor_NormalArgs get_SmallMotor
        {
            add => HookEndpointManager.Add<Delegates.get_SmallMotor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GamepadVibration), "get_SmallMotor"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SmallMotor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GamepadVibration), "get_SmallMotor"), value);
        }

        public static event Delegates.get_LargeMotor_NormalArgs get_LargeMotor
        {
            add => HookEndpointManager.Add<Delegates.get_LargeMotor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GamepadVibration), "get_LargeMotor"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LargeMotor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GamepadVibration), "get_LargeMotor"), value);
        }

        public static event Delegates.get_PlaybackRate_NormalArgs get_PlaybackRate
        {
            add => HookEndpointManager.Add<Delegates.get_PlaybackRate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GamepadVibration), "get_PlaybackRate"), value);
            remove => HookEndpointManager.Remove<Delegates.get_PlaybackRate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GamepadVibration), "get_PlaybackRate"), value);
        }

        public static event On.GamepadVibration.hook_Reset Reset
        {
            add => On.GamepadVibration.Reset += value;
            remove => On.GamepadVibration.Reset -= value;
        }

        public static event On.GamepadVibration.hook_GetDuration GetDuration
        {
            add => On.GamepadVibration.GetDuration += value;
            remove => On.GamepadVibration.GetDuration -= value;
        }

        public static event On.GamepadVibration.hook_GetDuration_AnimationCurve GetDuration_AnimationCurve
        {
            add => On.GamepadVibration.GetDuration_AnimationCurve += value;
            remove => On.GamepadVibration.GetDuration_AnimationCurve -= value;
        }
    }
}