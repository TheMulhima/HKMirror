using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ShaderUtilities class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnShaderUtilities
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookGetShaderPropertyIDs()
        {
            if (!HookedList.Contains("GetShaderPropertyIDs"))
            {
                HookedList.Add("GetShaderPropertyIDs");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ShaderUtilities), "GetShaderPropertyIDs", false),
                    GetShaderPropertyIDs);
            }
        }

        internal static event Delegates.GetShaderPropertyIDs_BeforeArgs _beforeGetShaderPropertyIDs;
        internal static event Delegates.GetShaderPropertyIDs_AfterArgs _afterGetShaderPropertyIDs;

        private static void GetShaderPropertyIDs(Action orig)
        {
            if (_beforeGetShaderPropertyIDs != null)
                foreach (Delegates.GetShaderPropertyIDs_BeforeArgs toInvoke in _beforeGetShaderPropertyIDs
                             .GetInvocationList())
                    try
                    {
                        _beforeGetShaderPropertyIDs?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterGetShaderPropertyIDs != null)
                foreach (Delegates.GetShaderPropertyIDs_AfterArgs toInvoke in _afterGetShaderPropertyIDs
                             .GetInvocationList())
                    try
                    {
                        _afterGetShaderPropertyIDs.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateShaderRatios()
        {
            if (!HookedList.Contains("UpdateShaderRatios"))
            {
                HookedList.Add("UpdateShaderRatios");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ShaderUtilities), "UpdateShaderRatios", false),
                    UpdateShaderRatios);
            }
        }

        internal static event Delegates.UpdateShaderRatios_BeforeArgs _beforeUpdateShaderRatios;
        internal static event Delegates.UpdateShaderRatios_AfterArgs _afterUpdateShaderRatios;

        private static void UpdateShaderRatios(Action<Material, bool> orig, Material mat, bool isBold)
        {
            Delegates.Params_UpdateShaderRatios @params = new()
            {
                mat = mat, isBold = isBold
            };
            if (_beforeUpdateShaderRatios != null)
                foreach (Delegates.UpdateShaderRatios_BeforeArgs toInvoke in
                         _beforeUpdateShaderRatios.GetInvocationList())
                    try
                    {
                        _beforeUpdateShaderRatios?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            mat = @params.mat;
            isBold = @params.isBold;
            orig(mat, isBold);
            if (_afterUpdateShaderRatios != null)
                foreach (Delegates.UpdateShaderRatios_AfterArgs toInvoke in
                         _afterUpdateShaderRatios.GetInvocationList())
                    try
                    {
                        _afterUpdateShaderRatios.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetFontExtent()
        {
            if (!HookedList.Contains("GetFontExtent"))
            {
                HookedList.Add("GetFontExtent");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ShaderUtilities), "GetFontExtent", false),
                    GetFontExtent);
            }
        }

        internal static event Delegates.GetFontExtent_BeforeArgs _beforeGetFontExtent;
        internal static event Delegates.GetFontExtent_AfterArgs _afterGetFontExtent;

        private static Vector4 GetFontExtent(Func<Material, Vector4> orig, Material material)
        {
            Delegates.Params_GetFontExtent @params = new()
            {
                material = material
            };
            if (_beforeGetFontExtent != null)
                foreach (Delegates.GetFontExtent_BeforeArgs toInvoke in _beforeGetFontExtent.GetInvocationList())
                    try
                    {
                        _beforeGetFontExtent?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            material = @params.material;
            var retVal = orig(material);
            if (_afterGetFontExtent != null)
                foreach (Delegates.GetFontExtent_AfterArgs toInvoke in _afterGetFontExtent.GetInvocationList())
                    try
                    {
                        retVal = _afterGetFontExtent.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookIsMaskingEnabled()
        {
            if (!HookedList.Contains("IsMaskingEnabled"))
            {
                HookedList.Add("IsMaskingEnabled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ShaderUtilities), "IsMaskingEnabled", false),
                    IsMaskingEnabled);
            }
        }

        internal static event Delegates.IsMaskingEnabled_BeforeArgs _beforeIsMaskingEnabled;
        internal static event Delegates.IsMaskingEnabled_AfterArgs _afterIsMaskingEnabled;

        private static bool IsMaskingEnabled(Func<Material, bool> orig, Material material)
        {
            Delegates.Params_IsMaskingEnabled @params = new()
            {
                material = material
            };
            if (_beforeIsMaskingEnabled != null)
                foreach (Delegates.IsMaskingEnabled_BeforeArgs toInvoke in _beforeIsMaskingEnabled.GetInvocationList())
                    try
                    {
                        _beforeIsMaskingEnabled?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            material = @params.material;
            var retVal = orig(material);
            if (_afterIsMaskingEnabled != null)
                foreach (Delegates.IsMaskingEnabled_AfterArgs toInvoke in _afterIsMaskingEnabled.GetInvocationList())
                    try
                    {
                        retVal = _afterIsMaskingEnabled.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetPadding_Material_bool_bool()
        {
            if (!HookedList.Contains("GetPadding_Material_bool_bool"))
            {
                HookedList.Add("GetPadding_Material_bool_bool");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(ShaderUtilities), "GetPadding_Material_bool_bool", false),
                    GetPadding_Material_bool_bool);
            }
        }

        internal static event Delegates.GetPadding_Material_bool_bool_BeforeArgs _beforeGetPadding_Material_bool_bool;
        internal static event Delegates.GetPadding_Material_bool_bool_AfterArgs _afterGetPadding_Material_bool_bool;

        private static float GetPadding_Material_bool_bool(Func<Material, bool, bool, float> orig, Material material,
            bool enableExtraPadding, bool isBold)
        {
            Delegates.Params_GetPadding_Material_bool_bool @params = new()
            {
                material = material, enableExtraPadding = enableExtraPadding, isBold = isBold
            };
            if (_beforeGetPadding_Material_bool_bool != null)
                foreach (Delegates.GetPadding_Material_bool_bool_BeforeArgs toInvoke in
                         _beforeGetPadding_Material_bool_bool.GetInvocationList())
                    try
                    {
                        _beforeGetPadding_Material_bool_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            material = @params.material;
            enableExtraPadding = @params.enableExtraPadding;
            isBold = @params.isBold;
            var retVal = orig(material, enableExtraPadding, isBold);
            if (_afterGetPadding_Material_bool_bool != null)
                foreach (Delegates.GetPadding_Material_bool_bool_AfterArgs toInvoke in
                         _afterGetPadding_Material_bool_bool.GetInvocationList())
                    try
                    {
                        retVal = _afterGetPadding_Material_bool_bool.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetPadding_Array_bool_bool()
        {
            if (!HookedList.Contains("GetPadding_Array_bool_bool"))
            {
                HookedList.Add("GetPadding_Array_bool_bool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ShaderUtilities), "GetPadding_Array_bool_bool", false),
                    GetPadding_Array_bool_bool);
            }
        }

        internal static event Delegates.GetPadding_Array_bool_bool_BeforeArgs _beforeGetPadding_Array_bool_bool;
        internal static event Delegates.GetPadding_Array_bool_bool_AfterArgs _afterGetPadding_Array_bool_bool;

        private static float GetPadding_Array_bool_bool(Func<Material[], bool, bool, float> orig, Material[] materials,
            bool enableExtraPadding, bool isBold)
        {
            Delegates.Params_GetPadding_Array_bool_bool @params = new()
            {
                materials = materials, enableExtraPadding = enableExtraPadding, isBold = isBold
            };
            if (_beforeGetPadding_Array_bool_bool != null)
                foreach (Delegates.GetPadding_Array_bool_bool_BeforeArgs toInvoke in _beforeGetPadding_Array_bool_bool
                             .GetInvocationList())
                    try
                    {
                        _beforeGetPadding_Array_bool_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            materials = @params.materials;
            enableExtraPadding = @params.enableExtraPadding;
            isBold = @params.isBold;
            var retVal = orig(materials, enableExtraPadding, isBold);
            if (_afterGetPadding_Array_bool_bool != null)
                foreach (Delegates.GetPadding_Array_bool_bool_AfterArgs toInvoke in _afterGetPadding_Array_bool_bool
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetPadding_Array_bool_bool.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate Vector4 GetFontExtent_AfterArgs(Params_GetFontExtent args, Vector4 ret);

        public delegate void GetFontExtent_BeforeArgs(Params_GetFontExtent args);

        public delegate Vector4 GetFontExtent_WithArgs(Func<Material, Vector4> orig, Material material);

        public delegate float GetPadding_Array_bool_bool_AfterArgs(Params_GetPadding_Array_bool_bool args, float ret);

        public delegate void GetPadding_Array_bool_bool_BeforeArgs(Params_GetPadding_Array_bool_bool args);

        public delegate float GetPadding_Array_bool_bool_WithArgs(Func<Material[], bool, bool, float> orig,
            Material[] materials, bool enableExtraPadding, bool isBold);

        public delegate float GetPadding_Material_bool_bool_AfterArgs(Params_GetPadding_Material_bool_bool args,
            float ret);

        public delegate void GetPadding_Material_bool_bool_BeforeArgs(Params_GetPadding_Material_bool_bool args);

        public delegate float GetPadding_Material_bool_bool_WithArgs(Func<Material, bool, bool, float> orig,
            Material material, bool enableExtraPadding, bool isBold);

        public delegate void GetShaderPropertyIDs_AfterArgs();

        public delegate void GetShaderPropertyIDs_BeforeArgs();

        public delegate void GetShaderPropertyIDs_WithArgs(Action orig);

        public delegate bool IsMaskingEnabled_AfterArgs(Params_IsMaskingEnabled args, bool ret);

        public delegate void IsMaskingEnabled_BeforeArgs(Params_IsMaskingEnabled args);

        public delegate bool IsMaskingEnabled_WithArgs(Func<Material, bool> orig, Material material);

        public delegate void UpdateShaderRatios_AfterArgs(Params_UpdateShaderRatios args);

        public delegate void UpdateShaderRatios_BeforeArgs(Params_UpdateShaderRatios args);

        public delegate void UpdateShaderRatios_WithArgs(Action<Material, bool> orig, Material mat, bool isBold);

        public sealed class Params_UpdateShaderRatios
        {
            public bool isBold;
            public Material mat;
        }

        public sealed class Params_GetFontExtent
        {
            public Material material;
        }

        public sealed class Params_IsMaskingEnabled
        {
            public Material material;
        }

        public sealed class Params_GetPadding_Material_bool_bool
        {
            public bool enableExtraPadding;
            public bool isBold;
            public Material material;
        }

        public sealed class Params_GetPadding_Array_bool_bool
        {
            public bool enableExtraPadding;
            public bool isBold;
            public Material[] materials;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.GetShaderPropertyIDs_BeforeArgs GetShaderPropertyIDs
        {
            add
            {
                HookHandler._beforeGetShaderPropertyIDs += value;
                HookHandler.HookGetShaderPropertyIDs();
            }
            remove => HookHandler._beforeGetShaderPropertyIDs -= value;
        }

        public static event Delegates.UpdateShaderRatios_BeforeArgs UpdateShaderRatios
        {
            add
            {
                HookHandler._beforeUpdateShaderRatios += value;
                HookHandler.HookUpdateShaderRatios();
            }
            remove => HookHandler._beforeUpdateShaderRatios -= value;
        }

        public static event Delegates.GetFontExtent_BeforeArgs GetFontExtent
        {
            add
            {
                HookHandler._beforeGetFontExtent += value;
                HookHandler.HookGetFontExtent();
            }
            remove => HookHandler._beforeGetFontExtent -= value;
        }

        public static event Delegates.IsMaskingEnabled_BeforeArgs IsMaskingEnabled
        {
            add
            {
                HookHandler._beforeIsMaskingEnabled += value;
                HookHandler.HookIsMaskingEnabled();
            }
            remove => HookHandler._beforeIsMaskingEnabled -= value;
        }

        public static event Delegates.GetPadding_Material_bool_bool_BeforeArgs GetPadding_Material_bool_bool
        {
            add
            {
                HookHandler._beforeGetPadding_Material_bool_bool += value;
                HookHandler.HookGetPadding_Material_bool_bool();
            }
            remove => HookHandler._beforeGetPadding_Material_bool_bool -= value;
        }

        public static event Delegates.GetPadding_Array_bool_bool_BeforeArgs GetPadding_Array_bool_bool
        {
            add
            {
                HookHandler._beforeGetPadding_Array_bool_bool += value;
                HookHandler.HookGetPadding_Array_bool_bool();
            }
            remove => HookHandler._beforeGetPadding_Array_bool_bool -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.GetShaderPropertyIDs_AfterArgs GetShaderPropertyIDs
        {
            add
            {
                HookHandler._afterGetShaderPropertyIDs += value;
                HookHandler.HookGetShaderPropertyIDs();
            }
            remove => HookHandler._afterGetShaderPropertyIDs -= value;
        }

        public static event Delegates.UpdateShaderRatios_AfterArgs UpdateShaderRatios
        {
            add
            {
                HookHandler._afterUpdateShaderRatios += value;
                HookHandler.HookUpdateShaderRatios();
            }
            remove => HookHandler._afterUpdateShaderRatios -= value;
        }

        public static event Delegates.GetFontExtent_AfterArgs GetFontExtent
        {
            add
            {
                HookHandler._afterGetFontExtent += value;
                HookHandler.HookGetFontExtent();
            }
            remove => HookHandler._afterGetFontExtent -= value;
        }

        public static event Delegates.IsMaskingEnabled_AfterArgs IsMaskingEnabled
        {
            add
            {
                HookHandler._afterIsMaskingEnabled += value;
                HookHandler.HookIsMaskingEnabled();
            }
            remove => HookHandler._afterIsMaskingEnabled -= value;
        }

        public static event Delegates.GetPadding_Material_bool_bool_AfterArgs GetPadding_Material_bool_bool
        {
            add
            {
                HookHandler._afterGetPadding_Material_bool_bool += value;
                HookHandler.HookGetPadding_Material_bool_bool();
            }
            remove => HookHandler._afterGetPadding_Material_bool_bool -= value;
        }

        public static event Delegates.GetPadding_Array_bool_bool_AfterArgs GetPadding_Array_bool_bool
        {
            add
            {
                HookHandler._afterGetPadding_Array_bool_bool += value;
                HookHandler.HookGetPadding_Array_bool_bool();
            }
            remove => HookHandler._afterGetPadding_Array_bool_bool -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.GetShaderPropertyIDs_WithArgs GetShaderPropertyIDs
        {
            add => HookEndpointManager.Add<Delegates.GetShaderPropertyIDs_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ShaderUtilities), "GetShaderPropertyIDs", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetShaderPropertyIDs_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ShaderUtilities), "GetShaderPropertyIDs", false), value);
        }

        public static event Delegates.UpdateShaderRatios_WithArgs UpdateShaderRatios
        {
            add => HookEndpointManager.Add<Delegates.UpdateShaderRatios_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ShaderUtilities), "UpdateShaderRatios", false), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateShaderRatios_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ShaderUtilities), "UpdateShaderRatios", false), value);
        }

        public static event Delegates.GetFontExtent_WithArgs GetFontExtent
        {
            add => HookEndpointManager.Add<Delegates.GetFontExtent_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ShaderUtilities), "GetFontExtent", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetFontExtent_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ShaderUtilities), "GetFontExtent", false), value);
        }

        public static event Delegates.IsMaskingEnabled_WithArgs IsMaskingEnabled
        {
            add => HookEndpointManager.Add<Delegates.IsMaskingEnabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ShaderUtilities), "IsMaskingEnabled", false), value);
            remove => HookEndpointManager.Remove<Delegates.IsMaskingEnabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ShaderUtilities), "IsMaskingEnabled", false), value);
        }

        public static event Delegates.GetPadding_Material_bool_bool_WithArgs GetPadding_Material_bool_bool
        {
            add => HookEndpointManager.Add<Delegates.GetPadding_Material_bool_bool_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ShaderUtilities), "GetPadding", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetPadding_Material_bool_bool_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ShaderUtilities), "GetPadding", false), value);
        }

        public static event Delegates.GetPadding_Array_bool_bool_WithArgs GetPadding_Array_bool_bool
        {
            add => HookEndpointManager.Add<Delegates.GetPadding_Array_bool_bool_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ShaderUtilities), "GetPadding", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetPadding_Array_bool_bool_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ShaderUtilities), "GetPadding", false), value);
        }
    }
}