namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for BreakableInfectedVine class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBreakableInfectedVine
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.BreakableInfectedVine.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.BreakableInfectedVine.orig_Awake orig, BreakableInfectedVine self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.BreakableInfectedVine.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.BreakableInfectedVine.orig_Start orig, BreakableInfectedVine self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.BreakableInfectedVine.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_NormalArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.BreakableInfectedVine.orig_OnTriggerEnter2D orig,
            BreakableInfectedVine self, Collider2D collision)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, collision = collision
            };
            _beforeOnTriggerEnter2D?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnTriggerEnter2D != null) _afterOnTriggerEnter2D.Invoke(@params);
        }

        internal static void HookSpawnSpatters()
        {
            if (!HookedList.Contains("SpawnSpatters"))
            {
                HookedList.Add("SpawnSpatters");
                On.BreakableInfectedVine.SpawnSpatters += SpawnSpatters;
            }
        }

        internal static event Delegates.SpawnSpatters_BeforeArgs _beforeSpawnSpatters;
        internal static event Delegates.SpawnSpatters_NormalArgs _afterSpawnSpatters;

        private static void SpawnSpatters(On.BreakableInfectedVine.orig_SpawnSpatters orig, BreakableInfectedVine self,
            Vector3 position)
        {
            Delegates.Params_SpawnSpatters @params = new()
            {
                self = self, position = position
            };
            _beforeSpawnSpatters?.Invoke(@params);
            self = @params.self;
            position = @params.position;
            orig(self, position);
            if (_afterSpawnSpatters != null) _afterSpawnSpatters.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_NormalArgs(Params_OnTriggerEnter2D args);

        public delegate void SpawnSpatters_BeforeArgs(Params_SpawnSpatters args);

        public delegate void SpawnSpatters_NormalArgs(Params_SpawnSpatters args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Awake
        {
            public BreakableInfectedVine self;
        }

        public sealed class Params_Start
        {
            public BreakableInfectedVine self;
        }

        public sealed class Params_OnTriggerEnter2D
        {
            public Collider2D collision;
            public BreakableInfectedVine self;
        }

        public sealed class Params_SpawnSpatters
        {
            public Vector3 position;
            public BreakableInfectedVine self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.SpawnSpatters_BeforeArgs SpawnSpatters
        {
            add
            {
                HookHandler._beforeSpawnSpatters += value;
                HookHandler.HookSpawnSpatters();
            }
            remove => HookHandler._beforeSpawnSpatters -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnTriggerEnter2D_NormalArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }

        public static event Delegates.SpawnSpatters_NormalArgs SpawnSpatters
        {
            add
            {
                HookHandler._afterSpawnSpatters += value;
                HookHandler.HookSpawnSpatters();
            }
            remove => HookHandler._afterSpawnSpatters -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.BreakableInfectedVine.hook_Awake Awake
        {
            add => On.BreakableInfectedVine.Awake += value;
            remove => On.BreakableInfectedVine.Awake -= value;
        }

        public static event On.BreakableInfectedVine.hook_Start Start
        {
            add => On.BreakableInfectedVine.Start += value;
            remove => On.BreakableInfectedVine.Start -= value;
        }

        public static event On.BreakableInfectedVine.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.BreakableInfectedVine.OnTriggerEnter2D += value;
            remove => On.BreakableInfectedVine.OnTriggerEnter2D -= value;
        }

        public static event On.BreakableInfectedVine.hook_SpawnSpatters SpawnSpatters
        {
            add => On.BreakableInfectedVine.SpawnSpatters += value;
            remove => On.BreakableInfectedVine.SpawnSpatters -= value;
        }
    }
}