using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for PlayerPrefsSharedData class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPlayerPrefsSharedData
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_IsEncrypted()
{
if (!HookedList.Contains("get_IsEncrypted"))
{
HookedList.Add("get_IsEncrypted");
new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerPrefsSharedData), "get_IsEncrypted", true), get_IsEncrypted);

}
}
internal static event Delegates.get_IsEncrypted_BeforeArgs _beforeget_IsEncrypted;
internal static event Delegates.get_IsEncrypted_AfterArgs _afterget_IsEncrypted;
private static bool get_IsEncrypted(Func<PlayerPrefsSharedData, bool> orig, PlayerPrefsSharedData self)
{
Delegates.Params_get_IsEncrypted @params = new() 
{
self = self
};
if (_beforeget_IsEncrypted != null)
{
foreach (Delegates.get_IsEncrypted_BeforeArgs toInvoke in _beforeget_IsEncrypted.GetInvocationList())
{
try
{
_beforeget_IsEncrypted?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_IsEncrypted != null)
{
foreach (Delegates.get_IsEncrypted_AfterArgs toInvoke in _afterget_IsEncrypted.GetInvocationList())
{
try
{
retVal = _afterget_IsEncrypted.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookReadEncrypted()
{
if (!HookedList.Contains("ReadEncrypted"))
{
HookedList.Add("ReadEncrypted");
On.PlayerPrefsSharedData.ReadEncrypted += ReadEncrypted;

}
}
internal static event Delegates.ReadEncrypted_BeforeArgs _beforeReadEncrypted;
internal static event Delegates.ReadEncrypted_AfterArgs _afterReadEncrypted;
private static string ReadEncrypted(On.PlayerPrefsSharedData.orig_ReadEncrypted orig,PlayerPrefsSharedData self,  string key)
{
Delegates.Params_ReadEncrypted @params = new() 
{
self = self
, key = key
};
if (_beforeReadEncrypted != null)
{
foreach (Delegates.ReadEncrypted_BeforeArgs toInvoke in _beforeReadEncrypted.GetInvocationList())
{
try
{
_beforeReadEncrypted?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
key = @params.key;
var retVal = orig(self, key);
if (_afterReadEncrypted != null)
{
foreach (Delegates.ReadEncrypted_AfterArgs toInvoke in _afterReadEncrypted.GetInvocationList())
{
try
{
retVal = _afterReadEncrypted.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookWriteEncrypted()
{
if (!HookedList.Contains("WriteEncrypted"))
{
HookedList.Add("WriteEncrypted");
On.PlayerPrefsSharedData.WriteEncrypted += WriteEncrypted;

}
}
internal static event Delegates.WriteEncrypted_BeforeArgs _beforeWriteEncrypted;
internal static event Delegates.WriteEncrypted_AfterArgs _afterWriteEncrypted;
private static void WriteEncrypted(On.PlayerPrefsSharedData.orig_WriteEncrypted orig,PlayerPrefsSharedData self,  string key,  string val)
{
Delegates.Params_WriteEncrypted @params = new() 
{
self = self
, key = key
, val = val
};
if (_beforeWriteEncrypted != null)
{
foreach (Delegates.WriteEncrypted_BeforeArgs toInvoke in _beforeWriteEncrypted.GetInvocationList())
{
try
{
_beforeWriteEncrypted?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
key = @params.key;
val = @params.val;
orig(self, key, val);
if (_afterWriteEncrypted != null)
{
foreach (Delegates.WriteEncrypted_AfterArgs toInvoke in _afterWriteEncrypted.GetInvocationList())
{
try
{
_afterWriteEncrypted.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookHasKey()
{
if (!HookedList.Contains("HasKey"))
{
HookedList.Add("HasKey");
On.PlayerPrefsSharedData.HasKey += HasKey;

}
}
internal static event Delegates.HasKey_BeforeArgs _beforeHasKey;
internal static event Delegates.HasKey_AfterArgs _afterHasKey;
private static bool HasKey(On.PlayerPrefsSharedData.orig_HasKey orig,PlayerPrefsSharedData self,  string key)
{
Delegates.Params_HasKey @params = new() 
{
self = self
, key = key
};
if (_beforeHasKey != null)
{
foreach (Delegates.HasKey_BeforeArgs toInvoke in _beforeHasKey.GetInvocationList())
{
try
{
_beforeHasKey?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
key = @params.key;
var retVal = orig(self, key);
if (_afterHasKey != null)
{
foreach (Delegates.HasKey_AfterArgs toInvoke in _afterHasKey.GetInvocationList())
{
try
{
retVal = _afterHasKey.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookDeleteKey()
{
if (!HookedList.Contains("DeleteKey"))
{
HookedList.Add("DeleteKey");
On.PlayerPrefsSharedData.DeleteKey += DeleteKey;

}
}
internal static event Delegates.DeleteKey_BeforeArgs _beforeDeleteKey;
internal static event Delegates.DeleteKey_AfterArgs _afterDeleteKey;
private static void DeleteKey(On.PlayerPrefsSharedData.orig_DeleteKey orig,PlayerPrefsSharedData self,  string key)
{
Delegates.Params_DeleteKey @params = new() 
{
self = self
, key = key
};
if (_beforeDeleteKey != null)
{
foreach (Delegates.DeleteKey_BeforeArgs toInvoke in _beforeDeleteKey.GetInvocationList())
{
try
{
_beforeDeleteKey?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
key = @params.key;
orig(self, key);
if (_afterDeleteKey != null)
{
foreach (Delegates.DeleteKey_AfterArgs toInvoke in _afterDeleteKey.GetInvocationList())
{
try
{
_afterDeleteKey.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDeleteAll()
{
if (!HookedList.Contains("DeleteAll"))
{
HookedList.Add("DeleteAll");
On.PlayerPrefsSharedData.DeleteAll += DeleteAll;

}
}
internal static event Delegates.DeleteAll_BeforeArgs _beforeDeleteAll;
internal static event Delegates.DeleteAll_AfterArgs _afterDeleteAll;
private static void DeleteAll(On.PlayerPrefsSharedData.orig_DeleteAll orig,PlayerPrefsSharedData self)
{
Delegates.Params_DeleteAll @params = new() 
{
self = self
};
if (_beforeDeleteAll != null)
{
foreach (Delegates.DeleteAll_BeforeArgs toInvoke in _beforeDeleteAll.GetInvocationList())
{
try
{
_beforeDeleteAll?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterDeleteAll != null)
{
foreach (Delegates.DeleteAll_AfterArgs toInvoke in _afterDeleteAll.GetInvocationList())
{
try
{
_afterDeleteAll.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetBool()
{
if (!HookedList.Contains("GetBool"))
{
HookedList.Add("GetBool");
On.PlayerPrefsSharedData.GetBool += GetBool;

}
}
internal static event Delegates.GetBool_BeforeArgs _beforeGetBool;
internal static event Delegates.GetBool_AfterArgs _afterGetBool;
private static bool GetBool(On.PlayerPrefsSharedData.orig_GetBool orig,PlayerPrefsSharedData self,  string key,  bool def)
{
Delegates.Params_GetBool @params = new() 
{
self = self
, key = key
, def = def
};
if (_beforeGetBool != null)
{
foreach (Delegates.GetBool_BeforeArgs toInvoke in _beforeGetBool.GetInvocationList())
{
try
{
_beforeGetBool?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
key = @params.key;
def = @params.def;
var retVal = orig(self, key, def);
if (_afterGetBool != null)
{
foreach (Delegates.GetBool_AfterArgs toInvoke in _afterGetBool.GetInvocationList())
{
try
{
retVal = _afterGetBool.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookSetBool()
{
if (!HookedList.Contains("SetBool"))
{
HookedList.Add("SetBool");
On.PlayerPrefsSharedData.SetBool += SetBool;

}
}
internal static event Delegates.SetBool_BeforeArgs _beforeSetBool;
internal static event Delegates.SetBool_AfterArgs _afterSetBool;
private static void SetBool(On.PlayerPrefsSharedData.orig_SetBool orig,PlayerPrefsSharedData self,  string key,  bool val)
{
Delegates.Params_SetBool @params = new() 
{
self = self
, key = key
, val = val
};
if (_beforeSetBool != null)
{
foreach (Delegates.SetBool_BeforeArgs toInvoke in _beforeSetBool.GetInvocationList())
{
try
{
_beforeSetBool?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
key = @params.key;
val = @params.val;
orig(self, key, val);
if (_afterSetBool != null)
{
foreach (Delegates.SetBool_AfterArgs toInvoke in _afterSetBool.GetInvocationList())
{
try
{
_afterSetBool.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetInt()
{
if (!HookedList.Contains("GetInt"))
{
HookedList.Add("GetInt");
On.PlayerPrefsSharedData.GetInt += GetInt;

}
}
internal static event Delegates.GetInt_BeforeArgs _beforeGetInt;
internal static event Delegates.GetInt_AfterArgs _afterGetInt;
private static int GetInt(On.PlayerPrefsSharedData.orig_GetInt orig,PlayerPrefsSharedData self,  string key,  int def)
{
Delegates.Params_GetInt @params = new() 
{
self = self
, key = key
, def = def
};
if (_beforeGetInt != null)
{
foreach (Delegates.GetInt_BeforeArgs toInvoke in _beforeGetInt.GetInvocationList())
{
try
{
_beforeGetInt?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
key = @params.key;
def = @params.def;
var retVal = orig(self, key, def);
if (_afterGetInt != null)
{
foreach (Delegates.GetInt_AfterArgs toInvoke in _afterGetInt.GetInvocationList())
{
try
{
retVal = _afterGetInt.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookSetInt()
{
if (!HookedList.Contains("SetInt"))
{
HookedList.Add("SetInt");
On.PlayerPrefsSharedData.SetInt += SetInt;

}
}
internal static event Delegates.SetInt_BeforeArgs _beforeSetInt;
internal static event Delegates.SetInt_AfterArgs _afterSetInt;
private static void SetInt(On.PlayerPrefsSharedData.orig_SetInt orig,PlayerPrefsSharedData self,  string key,  int val)
{
Delegates.Params_SetInt @params = new() 
{
self = self
, key = key
, val = val
};
if (_beforeSetInt != null)
{
foreach (Delegates.SetInt_BeforeArgs toInvoke in _beforeSetInt.GetInvocationList())
{
try
{
_beforeSetInt?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
key = @params.key;
val = @params.val;
orig(self, key, val);
if (_afterSetInt != null)
{
foreach (Delegates.SetInt_AfterArgs toInvoke in _afterSetInt.GetInvocationList())
{
try
{
_afterSetInt.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetFloat()
{
if (!HookedList.Contains("GetFloat"))
{
HookedList.Add("GetFloat");
On.PlayerPrefsSharedData.GetFloat += GetFloat;

}
}
internal static event Delegates.GetFloat_BeforeArgs _beforeGetFloat;
internal static event Delegates.GetFloat_AfterArgs _afterGetFloat;
private static float GetFloat(On.PlayerPrefsSharedData.orig_GetFloat orig,PlayerPrefsSharedData self,  string key,  float def)
{
Delegates.Params_GetFloat @params = new() 
{
self = self
, key = key
, def = def
};
if (_beforeGetFloat != null)
{
foreach (Delegates.GetFloat_BeforeArgs toInvoke in _beforeGetFloat.GetInvocationList())
{
try
{
_beforeGetFloat?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
key = @params.key;
def = @params.def;
var retVal = orig(self, key, def);
if (_afterGetFloat != null)
{
foreach (Delegates.GetFloat_AfterArgs toInvoke in _afterGetFloat.GetInvocationList())
{
try
{
retVal = _afterGetFloat.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookSetFloat()
{
if (!HookedList.Contains("SetFloat"))
{
HookedList.Add("SetFloat");
On.PlayerPrefsSharedData.SetFloat += SetFloat;

}
}
internal static event Delegates.SetFloat_BeforeArgs _beforeSetFloat;
internal static event Delegates.SetFloat_AfterArgs _afterSetFloat;
private static void SetFloat(On.PlayerPrefsSharedData.orig_SetFloat orig,PlayerPrefsSharedData self,  string key,  float val)
{
Delegates.Params_SetFloat @params = new() 
{
self = self
, key = key
, val = val
};
if (_beforeSetFloat != null)
{
foreach (Delegates.SetFloat_BeforeArgs toInvoke in _beforeSetFloat.GetInvocationList())
{
try
{
_beforeSetFloat?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
key = @params.key;
val = @params.val;
orig(self, key, val);
if (_afterSetFloat != null)
{
foreach (Delegates.SetFloat_AfterArgs toInvoke in _afterSetFloat.GetInvocationList())
{
try
{
_afterSetFloat.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetString()
{
if (!HookedList.Contains("GetString"))
{
HookedList.Add("GetString");
On.PlayerPrefsSharedData.GetString += GetString;

}
}
internal static event Delegates.GetString_BeforeArgs _beforeGetString;
internal static event Delegates.GetString_AfterArgs _afterGetString;
private static string GetString(On.PlayerPrefsSharedData.orig_GetString orig,PlayerPrefsSharedData self,  string key,  string def)
{
Delegates.Params_GetString @params = new() 
{
self = self
, key = key
, def = def
};
if (_beforeGetString != null)
{
foreach (Delegates.GetString_BeforeArgs toInvoke in _beforeGetString.GetInvocationList())
{
try
{
_beforeGetString?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
key = @params.key;
def = @params.def;
var retVal = orig(self, key, def);
if (_afterGetString != null)
{
foreach (Delegates.GetString_AfterArgs toInvoke in _afterGetString.GetInvocationList())
{
try
{
retVal = _afterGetString.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookSetString()
{
if (!HookedList.Contains("SetString"))
{
HookedList.Add("SetString");
On.PlayerPrefsSharedData.SetString += SetString;

}
}
internal static event Delegates.SetString_BeforeArgs _beforeSetString;
internal static event Delegates.SetString_AfterArgs _afterSetString;
private static void SetString(On.PlayerPrefsSharedData.orig_SetString orig,PlayerPrefsSharedData self,  string key,  string val)
{
Delegates.Params_SetString @params = new() 
{
self = self
, key = key
, val = val
};
if (_beforeSetString != null)
{
foreach (Delegates.SetString_BeforeArgs toInvoke in _beforeSetString.GetInvocationList())
{
try
{
_beforeSetString?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
key = @params.key;
val = @params.val;
orig(self, key, val);
if (_afterSetString != null)
{
foreach (Delegates.SetString_AfterArgs toInvoke in _afterSetString.GetInvocationList())
{
try
{
_afterSetString.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSave()
{
if (!HookedList.Contains("Save"))
{
HookedList.Add("Save");
On.PlayerPrefsSharedData.Save += Save;

}
}
internal static event Delegates.Save_BeforeArgs _beforeSave;
internal static event Delegates.Save_AfterArgs _afterSave;
private static void Save(On.PlayerPrefsSharedData.orig_Save orig,PlayerPrefsSharedData self)
{
Delegates.Params_Save @params = new() 
{
self = self
};
if (_beforeSave != null)
{
foreach (Delegates.Save_BeforeArgs toInvoke in _beforeSave.GetInvocationList())
{
try
{
_beforeSave?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSave != null)
{
foreach (Delegates.Save_AfterArgs toInvoke in _afterSave.GetInvocationList())
{
try
{
_afterSave.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_IsEncrypted
{
public PlayerPrefsSharedData self;
}
public delegate void get_IsEncrypted_BeforeArgs(Params_get_IsEncrypted args);
public delegate bool get_IsEncrypted_AfterArgs(Params_get_IsEncrypted args, bool ret);
public delegate bool get_IsEncrypted_WithArgs (Func<PlayerPrefsSharedData, bool> orig, PlayerPrefsSharedData self);
public sealed class Params_ReadEncrypted
{
public PlayerPrefsSharedData self;
public string key;
}
public delegate void ReadEncrypted_BeforeArgs(Params_ReadEncrypted args);
public delegate string ReadEncrypted_AfterArgs(Params_ReadEncrypted args, string ret);
public delegate string ReadEncrypted_WithArgs (Func<PlayerPrefsSharedData,  string, string> orig, PlayerPrefsSharedData self,  string key);
public sealed class Params_WriteEncrypted
{
public PlayerPrefsSharedData self;
public string key;
public string val;
}
public delegate void WriteEncrypted_BeforeArgs(Params_WriteEncrypted args);
public delegate void WriteEncrypted_AfterArgs(Params_WriteEncrypted args);
public delegate void WriteEncrypted_WithArgs (Action<PlayerPrefsSharedData,  string,  string> orig, PlayerPrefsSharedData self,  string key,  string val);
public sealed class Params_HasKey
{
public PlayerPrefsSharedData self;
public string key;
}
public delegate void HasKey_BeforeArgs(Params_HasKey args);
public delegate bool HasKey_AfterArgs(Params_HasKey args, bool ret);
public delegate bool HasKey_WithArgs (Func<PlayerPrefsSharedData,  string, bool> orig, PlayerPrefsSharedData self,  string key);
public sealed class Params_DeleteKey
{
public PlayerPrefsSharedData self;
public string key;
}
public delegate void DeleteKey_BeforeArgs(Params_DeleteKey args);
public delegate void DeleteKey_AfterArgs(Params_DeleteKey args);
public delegate void DeleteKey_WithArgs (Action<PlayerPrefsSharedData,  string> orig, PlayerPrefsSharedData self,  string key);
public sealed class Params_DeleteAll
{
public PlayerPrefsSharedData self;
}
public delegate void DeleteAll_BeforeArgs(Params_DeleteAll args);
public delegate void DeleteAll_AfterArgs(Params_DeleteAll args);
public delegate void DeleteAll_WithArgs (Action<PlayerPrefsSharedData> orig, PlayerPrefsSharedData self);
public sealed class Params_GetBool
{
public PlayerPrefsSharedData self;
public string key;
public bool def;
}
public delegate void GetBool_BeforeArgs(Params_GetBool args);
public delegate bool GetBool_AfterArgs(Params_GetBool args, bool ret);
public delegate bool GetBool_WithArgs (Func<PlayerPrefsSharedData,  string,  bool, bool> orig, PlayerPrefsSharedData self,  string key,  bool def);
public sealed class Params_SetBool
{
public PlayerPrefsSharedData self;
public string key;
public bool val;
}
public delegate void SetBool_BeforeArgs(Params_SetBool args);
public delegate void SetBool_AfterArgs(Params_SetBool args);
public delegate void SetBool_WithArgs (Action<PlayerPrefsSharedData,  string,  bool> orig, PlayerPrefsSharedData self,  string key,  bool val);
public sealed class Params_GetInt
{
public PlayerPrefsSharedData self;
public string key;
public int def;
}
public delegate void GetInt_BeforeArgs(Params_GetInt args);
public delegate int GetInt_AfterArgs(Params_GetInt args, int ret);
public delegate int GetInt_WithArgs (Func<PlayerPrefsSharedData,  string,  int, int> orig, PlayerPrefsSharedData self,  string key,  int def);
public sealed class Params_SetInt
{
public PlayerPrefsSharedData self;
public string key;
public int val;
}
public delegate void SetInt_BeforeArgs(Params_SetInt args);
public delegate void SetInt_AfterArgs(Params_SetInt args);
public delegate void SetInt_WithArgs (Action<PlayerPrefsSharedData,  string,  int> orig, PlayerPrefsSharedData self,  string key,  int val);
public sealed class Params_GetFloat
{
public PlayerPrefsSharedData self;
public string key;
public float def;
}
public delegate void GetFloat_BeforeArgs(Params_GetFloat args);
public delegate float GetFloat_AfterArgs(Params_GetFloat args, float ret);
public delegate float GetFloat_WithArgs (Func<PlayerPrefsSharedData,  string,  float, float> orig, PlayerPrefsSharedData self,  string key,  float def);
public sealed class Params_SetFloat
{
public PlayerPrefsSharedData self;
public string key;
public float val;
}
public delegate void SetFloat_BeforeArgs(Params_SetFloat args);
public delegate void SetFloat_AfterArgs(Params_SetFloat args);
public delegate void SetFloat_WithArgs (Action<PlayerPrefsSharedData,  string,  float> orig, PlayerPrefsSharedData self,  string key,  float val);
public sealed class Params_GetString
{
public PlayerPrefsSharedData self;
public string key;
public string def;
}
public delegate void GetString_BeforeArgs(Params_GetString args);
public delegate string GetString_AfterArgs(Params_GetString args, string ret);
public delegate string GetString_WithArgs (Func<PlayerPrefsSharedData,  string,  string, string> orig, PlayerPrefsSharedData self,  string key,  string def);
public sealed class Params_SetString
{
public PlayerPrefsSharedData self;
public string key;
public string val;
}
public delegate void SetString_BeforeArgs(Params_SetString args);
public delegate void SetString_AfterArgs(Params_SetString args);
public delegate void SetString_WithArgs (Action<PlayerPrefsSharedData,  string,  string> orig, PlayerPrefsSharedData self,  string key,  string val);
public sealed class Params_Save
{
public PlayerPrefsSharedData self;
}
public delegate void Save_BeforeArgs(Params_Save args);
public delegate void Save_AfterArgs(Params_Save args);
public delegate void Save_WithArgs (Action<PlayerPrefsSharedData> orig, PlayerPrefsSharedData self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_IsEncrypted_BeforeArgs get_IsEncrypted
{
add
{

HookHandler._beforeget_IsEncrypted += value;
HookHandler.Hookget_IsEncrypted();
}
remove => HookHandler._beforeget_IsEncrypted -= value;
}
public static event Delegates.ReadEncrypted_BeforeArgs ReadEncrypted
{
add
{

HookHandler._beforeReadEncrypted += value;
HookHandler.HookReadEncrypted();
}
remove => HookHandler._beforeReadEncrypted -= value;
}
public static event Delegates.WriteEncrypted_BeforeArgs WriteEncrypted
{
add
{

HookHandler._beforeWriteEncrypted += value;
HookHandler.HookWriteEncrypted();
}
remove => HookHandler._beforeWriteEncrypted -= value;
}
public static event Delegates.HasKey_BeforeArgs HasKey
{
add
{

HookHandler._beforeHasKey += value;
HookHandler.HookHasKey();
}
remove => HookHandler._beforeHasKey -= value;
}
public static event Delegates.DeleteKey_BeforeArgs DeleteKey
{
add
{

HookHandler._beforeDeleteKey += value;
HookHandler.HookDeleteKey();
}
remove => HookHandler._beforeDeleteKey -= value;
}
public static event Delegates.DeleteAll_BeforeArgs DeleteAll
{
add
{

HookHandler._beforeDeleteAll += value;
HookHandler.HookDeleteAll();
}
remove => HookHandler._beforeDeleteAll -= value;
}
public static event Delegates.GetBool_BeforeArgs GetBool
{
add
{

HookHandler._beforeGetBool += value;
HookHandler.HookGetBool();
}
remove => HookHandler._beforeGetBool -= value;
}
public static event Delegates.SetBool_BeforeArgs SetBool
{
add
{

HookHandler._beforeSetBool += value;
HookHandler.HookSetBool();
}
remove => HookHandler._beforeSetBool -= value;
}
public static event Delegates.GetInt_BeforeArgs GetInt
{
add
{

HookHandler._beforeGetInt += value;
HookHandler.HookGetInt();
}
remove => HookHandler._beforeGetInt -= value;
}
public static event Delegates.SetInt_BeforeArgs SetInt
{
add
{

HookHandler._beforeSetInt += value;
HookHandler.HookSetInt();
}
remove => HookHandler._beforeSetInt -= value;
}
public static event Delegates.GetFloat_BeforeArgs GetFloat
{
add
{

HookHandler._beforeGetFloat += value;
HookHandler.HookGetFloat();
}
remove => HookHandler._beforeGetFloat -= value;
}
public static event Delegates.SetFloat_BeforeArgs SetFloat
{
add
{

HookHandler._beforeSetFloat += value;
HookHandler.HookSetFloat();
}
remove => HookHandler._beforeSetFloat -= value;
}
public static event Delegates.GetString_BeforeArgs GetString
{
add
{

HookHandler._beforeGetString += value;
HookHandler.HookGetString();
}
remove => HookHandler._beforeGetString -= value;
}
public static event Delegates.SetString_BeforeArgs SetString
{
add
{

HookHandler._beforeSetString += value;
HookHandler.HookSetString();
}
remove => HookHandler._beforeSetString -= value;
}
public static event Delegates.Save_BeforeArgs Save
{
add
{

HookHandler._beforeSave += value;
HookHandler.HookSave();
}
remove => HookHandler._beforeSave -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_IsEncrypted_AfterArgs get_IsEncrypted
{
add
{

HookHandler._afterget_IsEncrypted += value;
HookHandler.Hookget_IsEncrypted();
}
remove => HookHandler._afterget_IsEncrypted -= value;
}
public static event Delegates.ReadEncrypted_AfterArgs ReadEncrypted
{
add
{

HookHandler._afterReadEncrypted += value;
HookHandler.HookReadEncrypted();
}
remove => HookHandler._afterReadEncrypted -= value;
}
public static event Delegates.WriteEncrypted_AfterArgs WriteEncrypted
{
add
{

HookHandler._afterWriteEncrypted += value;
HookHandler.HookWriteEncrypted();
}
remove => HookHandler._afterWriteEncrypted -= value;
}
public static event Delegates.HasKey_AfterArgs HasKey
{
add
{

HookHandler._afterHasKey += value;
HookHandler.HookHasKey();
}
remove => HookHandler._afterHasKey -= value;
}
public static event Delegates.DeleteKey_AfterArgs DeleteKey
{
add
{

HookHandler._afterDeleteKey += value;
HookHandler.HookDeleteKey();
}
remove => HookHandler._afterDeleteKey -= value;
}
public static event Delegates.DeleteAll_AfterArgs DeleteAll
{
add
{

HookHandler._afterDeleteAll += value;
HookHandler.HookDeleteAll();
}
remove => HookHandler._afterDeleteAll -= value;
}
public static event Delegates.GetBool_AfterArgs GetBool
{
add
{

HookHandler._afterGetBool += value;
HookHandler.HookGetBool();
}
remove => HookHandler._afterGetBool -= value;
}
public static event Delegates.SetBool_AfterArgs SetBool
{
add
{

HookHandler._afterSetBool += value;
HookHandler.HookSetBool();
}
remove => HookHandler._afterSetBool -= value;
}
public static event Delegates.GetInt_AfterArgs GetInt
{
add
{

HookHandler._afterGetInt += value;
HookHandler.HookGetInt();
}
remove => HookHandler._afterGetInt -= value;
}
public static event Delegates.SetInt_AfterArgs SetInt
{
add
{

HookHandler._afterSetInt += value;
HookHandler.HookSetInt();
}
remove => HookHandler._afterSetInt -= value;
}
public static event Delegates.GetFloat_AfterArgs GetFloat
{
add
{

HookHandler._afterGetFloat += value;
HookHandler.HookGetFloat();
}
remove => HookHandler._afterGetFloat -= value;
}
public static event Delegates.SetFloat_AfterArgs SetFloat
{
add
{

HookHandler._afterSetFloat += value;
HookHandler.HookSetFloat();
}
remove => HookHandler._afterSetFloat -= value;
}
public static event Delegates.GetString_AfterArgs GetString
{
add
{

HookHandler._afterGetString += value;
HookHandler.HookGetString();
}
remove => HookHandler._afterGetString -= value;
}
public static event Delegates.SetString_AfterArgs SetString
{
add
{

HookHandler._afterSetString += value;
HookHandler.HookSetString();
}
remove => HookHandler._afterSetString -= value;
}
public static event Delegates.Save_AfterArgs Save
{
add
{

HookHandler._afterSave += value;
HookHandler.HookSave();
}
remove => HookHandler._afterSave -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_IsEncrypted_WithArgs get_IsEncrypted
{
add => HookEndpointManager.Add<Delegates.get_IsEncrypted_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(PlayerPrefsSharedData), "get_IsEncrypted", true), value);
remove => HookEndpointManager.Remove<Delegates.get_IsEncrypted_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(PlayerPrefsSharedData), "get_IsEncrypted", true), value);
}
public static event On.PlayerPrefsSharedData.hook_ReadEncrypted ReadEncrypted
{
add => On.PlayerPrefsSharedData.ReadEncrypted += value;
remove => On.PlayerPrefsSharedData.ReadEncrypted -= value;
}
public static event On.PlayerPrefsSharedData.hook_WriteEncrypted WriteEncrypted
{
add => On.PlayerPrefsSharedData.WriteEncrypted += value;
remove => On.PlayerPrefsSharedData.WriteEncrypted -= value;
}
public static event On.PlayerPrefsSharedData.hook_HasKey HasKey
{
add => On.PlayerPrefsSharedData.HasKey += value;
remove => On.PlayerPrefsSharedData.HasKey -= value;
}
public static event On.PlayerPrefsSharedData.hook_DeleteKey DeleteKey
{
add => On.PlayerPrefsSharedData.DeleteKey += value;
remove => On.PlayerPrefsSharedData.DeleteKey -= value;
}
public static event On.PlayerPrefsSharedData.hook_DeleteAll DeleteAll
{
add => On.PlayerPrefsSharedData.DeleteAll += value;
remove => On.PlayerPrefsSharedData.DeleteAll -= value;
}
public static event On.PlayerPrefsSharedData.hook_GetBool GetBool
{
add => On.PlayerPrefsSharedData.GetBool += value;
remove => On.PlayerPrefsSharedData.GetBool -= value;
}
public static event On.PlayerPrefsSharedData.hook_SetBool SetBool
{
add => On.PlayerPrefsSharedData.SetBool += value;
remove => On.PlayerPrefsSharedData.SetBool -= value;
}
public static event On.PlayerPrefsSharedData.hook_GetInt GetInt
{
add => On.PlayerPrefsSharedData.GetInt += value;
remove => On.PlayerPrefsSharedData.GetInt -= value;
}
public static event On.PlayerPrefsSharedData.hook_SetInt SetInt
{
add => On.PlayerPrefsSharedData.SetInt += value;
remove => On.PlayerPrefsSharedData.SetInt -= value;
}
public static event On.PlayerPrefsSharedData.hook_GetFloat GetFloat
{
add => On.PlayerPrefsSharedData.GetFloat += value;
remove => On.PlayerPrefsSharedData.GetFloat -= value;
}
public static event On.PlayerPrefsSharedData.hook_SetFloat SetFloat
{
add => On.PlayerPrefsSharedData.SetFloat += value;
remove => On.PlayerPrefsSharedData.SetFloat -= value;
}
public static event On.PlayerPrefsSharedData.hook_GetString GetString
{
add => On.PlayerPrefsSharedData.GetString += value;
remove => On.PlayerPrefsSharedData.GetString -= value;
}
public static event On.PlayerPrefsSharedData.hook_SetString SetString
{
add => On.PlayerPrefsSharedData.SetString += value;
remove => On.PlayerPrefsSharedData.SetString -= value;
}
public static event On.PlayerPrefsSharedData.hook_Save Save
{
add => On.PlayerPrefsSharedData.Save += value;
remove => On.PlayerPrefsSharedData.Save -= value;
}
}

}
