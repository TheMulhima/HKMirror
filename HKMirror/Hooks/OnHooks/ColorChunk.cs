using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using tk2dRuntime.TileMap;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ColorChunk class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnColorChunk
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Dirty()
        {
            if (!HookedList.Contains("get_Dirty"))
            {
                HookedList.Add("get_Dirty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ColorChunk), "get_Dirty"), get_Dirty);
            }
        }

        internal static event Delegates.get_Dirty_BeforeArgs _beforeget_Dirty;
        internal static event Delegates.get_Dirty_NormalArgs _afterget_Dirty;

        private static bool get_Dirty(Func<ColorChunk, bool> orig, ColorChunk self)
        {
            Delegates.Params_get_Dirty @params = new()
            {
                self = self
            };
            _beforeget_Dirty?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Dirty != null) retVal = _afterget_Dirty.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Dirty()
        {
            if (!HookedList.Contains("set_Dirty"))
            {
                HookedList.Add("set_Dirty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ColorChunk), "set_Dirty"), set_Dirty);
            }
        }

        internal static event Delegates.set_Dirty_BeforeArgs _beforeset_Dirty;
        internal static event Delegates.set_Dirty_NormalArgs _afterset_Dirty;

        private static void set_Dirty(Action<ColorChunk, bool> orig, ColorChunk self, bool value)
        {
            Delegates.Params_set_Dirty @params = new()
            {
                self = self, value = value
            };
            _beforeset_Dirty?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Dirty != null) _afterset_Dirty.Invoke(@params);
        }

        internal static void Hookget_Empty()
        {
            if (!HookedList.Contains("get_Empty"))
            {
                HookedList.Add("get_Empty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ColorChunk), "get_Empty"), get_Empty);
            }
        }

        internal static event Delegates.get_Empty_BeforeArgs _beforeget_Empty;
        internal static event Delegates.get_Empty_NormalArgs _afterget_Empty;

        private static bool get_Empty(Func<ColorChunk, bool> orig, ColorChunk self)
        {
            Delegates.Params_get_Empty @params = new()
            {
                self = self
            };
            _beforeget_Empty?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Empty != null) retVal = _afterget_Empty.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_Dirty_BeforeArgs(Params_get_Dirty args);

        public delegate bool get_Dirty_NormalArgs(Params_get_Dirty args);

        public delegate void get_Empty_BeforeArgs(Params_get_Empty args);

        public delegate bool get_Empty_NormalArgs(Params_get_Empty args);

        public delegate void set_Dirty_BeforeArgs(Params_set_Dirty args);

        public delegate void set_Dirty_NormalArgs(Params_set_Dirty args);

        public sealed class Params_get_Dirty
        {
            public ColorChunk self;
        }

        public sealed class Params_set_Dirty
        {
            public ColorChunk self;
            public bool value;
        }

        public sealed class Params_get_Empty
        {
            public ColorChunk self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Dirty_BeforeArgs get_Dirty
        {
            add
            {
                HookHandler._beforeget_Dirty += value;
                HookHandler.Hookget_Dirty();
            }
            remove => HookHandler._beforeget_Dirty -= value;
        }

        public static event Delegates.set_Dirty_BeforeArgs set_Dirty
        {
            add
            {
                HookHandler._beforeset_Dirty += value;
                HookHandler.Hookset_Dirty();
            }
            remove => HookHandler._beforeset_Dirty -= value;
        }

        public static event Delegates.get_Empty_BeforeArgs get_Empty
        {
            add
            {
                HookHandler._beforeget_Empty += value;
                HookHandler.Hookget_Empty();
            }
            remove => HookHandler._beforeget_Empty -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Dirty_NormalArgs get_Dirty
        {
            add
            {
                HookHandler._afterget_Dirty += value;
                HookHandler.Hookget_Dirty();
            }
            remove => HookHandler._afterget_Dirty -= value;
        }

        public static event Delegates.set_Dirty_NormalArgs set_Dirty
        {
            add
            {
                HookHandler._afterset_Dirty += value;
                HookHandler.Hookset_Dirty();
            }
            remove => HookHandler._afterset_Dirty -= value;
        }

        public static event Delegates.get_Empty_NormalArgs get_Empty
        {
            add
            {
                HookHandler._afterget_Empty += value;
                HookHandler.Hookget_Empty();
            }
            remove => HookHandler._afterget_Empty -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Dirty_NormalArgs get_Dirty
        {
            add => HookEndpointManager.Add<Delegates.get_Dirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChunk), "get_Dirty"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Dirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChunk), "get_Dirty"), value);
        }

        public static event Delegates.set_Dirty_NormalArgs set_Dirty
        {
            add => HookEndpointManager.Add<Delegates.set_Dirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChunk), "set_Dirty"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Dirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChunk), "set_Dirty"), value);
        }

        public static event Delegates.get_Empty_NormalArgs get_Empty
        {
            add => HookEndpointManager.Add<Delegates.get_Empty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChunk), "get_Empty"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Empty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChunk), "get_Empty"), value);
        }
    }
}