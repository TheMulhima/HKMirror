using Modding.Menu;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MenuResources class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuResources
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_TrajanRegular()
        {
            if (!HookedList.Contains("get_TrajanRegular"))
            {
                HookedList.Add("get_TrajanRegular");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_TrajanRegular", false),
                    get_TrajanRegular);
            }
        }

        internal static event Delegates.get_TrajanRegular_BeforeArgs _beforeget_TrajanRegular;
        internal static event Delegates.get_TrajanRegular_NormalArgs _afterget_TrajanRegular;

        private static Font get_TrajanRegular(Func<Font> orig)
        {
            _beforeget_TrajanRegular?.Invoke();
            var retVal = orig();
            if (_afterget_TrajanRegular != null) retVal = _afterget_TrajanRegular.Invoke();
            return retVal;
        }

        internal static void Hookset_TrajanRegular()
        {
            if (!HookedList.Contains("set_TrajanRegular"))
            {
                HookedList.Add("set_TrajanRegular");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_TrajanRegular", false),
                    set_TrajanRegular);
            }
        }

        internal static event Delegates.set_TrajanRegular_BeforeArgs _beforeset_TrajanRegular;
        internal static event Delegates.set_TrajanRegular_NormalArgs _afterset_TrajanRegular;

        private static void set_TrajanRegular(Action<Font> orig, Font value)
        {
            Delegates.Params_set_TrajanRegular @params = new()
            {
                value = value
            };
            _beforeset_TrajanRegular?.Invoke(@params);
            value = @params.value;
            orig(value);
            if (_afterset_TrajanRegular != null) _afterset_TrajanRegular.Invoke(@params);
        }

        internal static void Hookget_TrajanBold()
        {
            if (!HookedList.Contains("get_TrajanBold"))
            {
                HookedList.Add("get_TrajanBold");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_TrajanBold", false),
                    get_TrajanBold);
            }
        }

        internal static event Delegates.get_TrajanBold_BeforeArgs _beforeget_TrajanBold;
        internal static event Delegates.get_TrajanBold_NormalArgs _afterget_TrajanBold;

        private static Font get_TrajanBold(Func<Font> orig)
        {
            _beforeget_TrajanBold?.Invoke();
            var retVal = orig();
            if (_afterget_TrajanBold != null) retVal = _afterget_TrajanBold.Invoke();
            return retVal;
        }

        internal static void Hookset_TrajanBold()
        {
            if (!HookedList.Contains("set_TrajanBold"))
            {
                HookedList.Add("set_TrajanBold");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_TrajanBold", false),
                    set_TrajanBold);
            }
        }

        internal static event Delegates.set_TrajanBold_BeforeArgs _beforeset_TrajanBold;
        internal static event Delegates.set_TrajanBold_NormalArgs _afterset_TrajanBold;

        private static void set_TrajanBold(Action<Font> orig, Font value)
        {
            Delegates.Params_set_TrajanBold @params = new()
            {
                value = value
            };
            _beforeset_TrajanBold?.Invoke(@params);
            value = @params.value;
            orig(value);
            if (_afterset_TrajanBold != null) _afterset_TrajanBold.Invoke(@params);
        }

        internal static void Hookget_Perpetua()
        {
            if (!HookedList.Contains("get_Perpetua"))
            {
                HookedList.Add("get_Perpetua");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_Perpetua", false), get_Perpetua);
            }
        }

        internal static event Delegates.get_Perpetua_BeforeArgs _beforeget_Perpetua;
        internal static event Delegates.get_Perpetua_NormalArgs _afterget_Perpetua;

        private static Font get_Perpetua(Func<Font> orig)
        {
            _beforeget_Perpetua?.Invoke();
            var retVal = orig();
            if (_afterget_Perpetua != null) retVal = _afterget_Perpetua.Invoke();
            return retVal;
        }

        internal static void Hookset_Perpetua()
        {
            if (!HookedList.Contains("set_Perpetua"))
            {
                HookedList.Add("set_Perpetua");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_Perpetua", false), set_Perpetua);
            }
        }

        internal static event Delegates.set_Perpetua_BeforeArgs _beforeset_Perpetua;
        internal static event Delegates.set_Perpetua_NormalArgs _afterset_Perpetua;

        private static void set_Perpetua(Action<Font> orig, Font value)
        {
            Delegates.Params_set_Perpetua @params = new()
            {
                value = value
            };
            _beforeset_Perpetua?.Invoke(@params);
            value = @params.value;
            orig(value);
            if (_afterset_Perpetua != null) _afterset_Perpetua.Invoke(@params);
        }

        internal static void Hookget_NotoSerifCJKSCRegular()
        {
            if (!HookedList.Contains("get_NotoSerifCJKSCRegular"))
            {
                HookedList.Add("get_NotoSerifCJKSCRegular");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_NotoSerifCJKSCRegular", false),
                    get_NotoSerifCJKSCRegular);
            }
        }

        internal static event Delegates.get_NotoSerifCJKSCRegular_BeforeArgs _beforeget_NotoSerifCJKSCRegular;
        internal static event Delegates.get_NotoSerifCJKSCRegular_NormalArgs _afterget_NotoSerifCJKSCRegular;

        private static Font get_NotoSerifCJKSCRegular(Func<Font> orig)
        {
            _beforeget_NotoSerifCJKSCRegular?.Invoke();
            var retVal = orig();
            if (_afterget_NotoSerifCJKSCRegular != null) retVal = _afterget_NotoSerifCJKSCRegular.Invoke();
            return retVal;
        }

        internal static void Hookset_NotoSerifCJKSCRegular()
        {
            if (!HookedList.Contains("set_NotoSerifCJKSCRegular"))
            {
                HookedList.Add("set_NotoSerifCJKSCRegular");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_NotoSerifCJKSCRegular", false),
                    set_NotoSerifCJKSCRegular);
            }
        }

        internal static event Delegates.set_NotoSerifCJKSCRegular_BeforeArgs _beforeset_NotoSerifCJKSCRegular;
        internal static event Delegates.set_NotoSerifCJKSCRegular_NormalArgs _afterset_NotoSerifCJKSCRegular;

        private static void set_NotoSerifCJKSCRegular(Action<Font> orig, Font value)
        {
            Delegates.Params_set_NotoSerifCJKSCRegular @params = new()
            {
                value = value
            };
            _beforeset_NotoSerifCJKSCRegular?.Invoke(@params);
            value = @params.value;
            orig(value);
            if (_afterset_NotoSerifCJKSCRegular != null) _afterset_NotoSerifCJKSCRegular.Invoke(@params);
        }

        internal static void Hookget_MenuTopFleurAnimator()
        {
            if (!HookedList.Contains("get_MenuTopFleurAnimator"))
            {
                HookedList.Add("get_MenuTopFleurAnimator");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_MenuTopFleurAnimator", false),
                    get_MenuTopFleurAnimator);
            }
        }

        internal static event Delegates.get_MenuTopFleurAnimator_BeforeArgs _beforeget_MenuTopFleurAnimator;
        internal static event Delegates.get_MenuTopFleurAnimator_NormalArgs _afterget_MenuTopFleurAnimator;

        private static RuntimeAnimatorController get_MenuTopFleurAnimator(Func<RuntimeAnimatorController> orig)
        {
            _beforeget_MenuTopFleurAnimator?.Invoke();
            var retVal = orig();
            if (_afterget_MenuTopFleurAnimator != null) retVal = _afterget_MenuTopFleurAnimator.Invoke();
            return retVal;
        }

        internal static void Hookset_MenuTopFleurAnimator()
        {
            if (!HookedList.Contains("set_MenuTopFleurAnimator"))
            {
                HookedList.Add("set_MenuTopFleurAnimator");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_MenuTopFleurAnimator", false),
                    set_MenuTopFleurAnimator);
            }
        }

        internal static event Delegates.set_MenuTopFleurAnimator_BeforeArgs _beforeset_MenuTopFleurAnimator;
        internal static event Delegates.set_MenuTopFleurAnimator_NormalArgs _afterset_MenuTopFleurAnimator;

        private static void set_MenuTopFleurAnimator(Action<RuntimeAnimatorController> orig,
            RuntimeAnimatorController value)
        {
            Delegates.Params_set_MenuTopFleurAnimator @params = new()
            {
                value = value
            };
            _beforeset_MenuTopFleurAnimator?.Invoke(@params);
            value = @params.value;
            orig(value);
            if (_afterset_MenuTopFleurAnimator != null) _afterset_MenuTopFleurAnimator.Invoke(@params);
        }

        internal static void Hookget_MenuCursorAnimator()
        {
            if (!HookedList.Contains("get_MenuCursorAnimator"))
            {
                HookedList.Add("get_MenuCursorAnimator");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_MenuCursorAnimator", false),
                    get_MenuCursorAnimator);
            }
        }

        internal static event Delegates.get_MenuCursorAnimator_BeforeArgs _beforeget_MenuCursorAnimator;
        internal static event Delegates.get_MenuCursorAnimator_NormalArgs _afterget_MenuCursorAnimator;

        private static RuntimeAnimatorController get_MenuCursorAnimator(Func<RuntimeAnimatorController> orig)
        {
            _beforeget_MenuCursorAnimator?.Invoke();
            var retVal = orig();
            if (_afterget_MenuCursorAnimator != null) retVal = _afterget_MenuCursorAnimator.Invoke();
            return retVal;
        }

        internal static void Hookset_MenuCursorAnimator()
        {
            if (!HookedList.Contains("set_MenuCursorAnimator"))
            {
                HookedList.Add("set_MenuCursorAnimator");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_MenuCursorAnimator", false),
                    set_MenuCursorAnimator);
            }
        }

        internal static event Delegates.set_MenuCursorAnimator_BeforeArgs _beforeset_MenuCursorAnimator;
        internal static event Delegates.set_MenuCursorAnimator_NormalArgs _afterset_MenuCursorAnimator;

        private static void set_MenuCursorAnimator(Action<RuntimeAnimatorController> orig,
            RuntimeAnimatorController value)
        {
            Delegates.Params_set_MenuCursorAnimator @params = new()
            {
                value = value
            };
            _beforeset_MenuCursorAnimator?.Invoke(@params);
            value = @params.value;
            orig(value);
            if (_afterset_MenuCursorAnimator != null) _afterset_MenuCursorAnimator.Invoke(@params);
        }

        internal static void Hookget_MenuButtonFlashAnimator()
        {
            if (!HookedList.Contains("get_MenuButtonFlashAnimator"))
            {
                HookedList.Add("get_MenuButtonFlashAnimator");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_MenuButtonFlashAnimator", false),
                    get_MenuButtonFlashAnimator);
            }
        }

        internal static event Delegates.get_MenuButtonFlashAnimator_BeforeArgs _beforeget_MenuButtonFlashAnimator;
        internal static event Delegates.get_MenuButtonFlashAnimator_NormalArgs _afterget_MenuButtonFlashAnimator;

        private static RuntimeAnimatorController get_MenuButtonFlashAnimator(Func<RuntimeAnimatorController> orig)
        {
            _beforeget_MenuButtonFlashAnimator?.Invoke();
            var retVal = orig();
            if (_afterget_MenuButtonFlashAnimator != null) retVal = _afterget_MenuButtonFlashAnimator.Invoke();
            return retVal;
        }

        internal static void Hookset_MenuButtonFlashAnimator()
        {
            if (!HookedList.Contains("set_MenuButtonFlashAnimator"))
            {
                HookedList.Add("set_MenuButtonFlashAnimator");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_MenuButtonFlashAnimator", false),
                    set_MenuButtonFlashAnimator);
            }
        }

        internal static event Delegates.set_MenuButtonFlashAnimator_BeforeArgs _beforeset_MenuButtonFlashAnimator;
        internal static event Delegates.set_MenuButtonFlashAnimator_NormalArgs _afterset_MenuButtonFlashAnimator;

        private static void set_MenuButtonFlashAnimator(Action<RuntimeAnimatorController> orig,
            RuntimeAnimatorController value)
        {
            Delegates.Params_set_MenuButtonFlashAnimator @params = new()
            {
                value = value
            };
            _beforeset_MenuButtonFlashAnimator?.Invoke(@params);
            value = @params.value;
            orig(value);
            if (_afterset_MenuButtonFlashAnimator != null) _afterset_MenuButtonFlashAnimator.Invoke(@params);
        }

        internal static void Hookget_TextHideShowAnimator()
        {
            if (!HookedList.Contains("get_TextHideShowAnimator"))
            {
                HookedList.Add("get_TextHideShowAnimator");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_TextHideShowAnimator", false),
                    get_TextHideShowAnimator);
            }
        }

        internal static event Delegates.get_TextHideShowAnimator_BeforeArgs _beforeget_TextHideShowAnimator;
        internal static event Delegates.get_TextHideShowAnimator_NormalArgs _afterget_TextHideShowAnimator;

        private static AnimatorOverrideController get_TextHideShowAnimator(Func<AnimatorOverrideController> orig)
        {
            _beforeget_TextHideShowAnimator?.Invoke();
            var retVal = orig();
            if (_afterget_TextHideShowAnimator != null) retVal = _afterget_TextHideShowAnimator.Invoke();
            return retVal;
        }

        internal static void Hookset_TextHideShowAnimator()
        {
            if (!HookedList.Contains("set_TextHideShowAnimator"))
            {
                HookedList.Add("set_TextHideShowAnimator");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_TextHideShowAnimator", false),
                    set_TextHideShowAnimator);
            }
        }

        internal static event Delegates.set_TextHideShowAnimator_BeforeArgs _beforeset_TextHideShowAnimator;
        internal static event Delegates.set_TextHideShowAnimator_NormalArgs _afterset_TextHideShowAnimator;

        private static void set_TextHideShowAnimator(Action<AnimatorOverrideController> orig,
            AnimatorOverrideController value)
        {
            Delegates.Params_set_TextHideShowAnimator @params = new()
            {
                value = value
            };
            _beforeset_TextHideShowAnimator?.Invoke(@params);
            value = @params.value;
            orig(value);
            if (_afterset_TextHideShowAnimator != null) _afterset_TextHideShowAnimator.Invoke(@params);
        }

        internal static void Hookget_ScrollbarHandleSprite()
        {
            if (!HookedList.Contains("get_ScrollbarHandleSprite"))
            {
                HookedList.Add("get_ScrollbarHandleSprite");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_ScrollbarHandleSprite", false),
                    get_ScrollbarHandleSprite);
            }
        }

        internal static event Delegates.get_ScrollbarHandleSprite_BeforeArgs _beforeget_ScrollbarHandleSprite;
        internal static event Delegates.get_ScrollbarHandleSprite_NormalArgs _afterget_ScrollbarHandleSprite;

        private static Sprite get_ScrollbarHandleSprite(Func<Sprite> orig)
        {
            _beforeget_ScrollbarHandleSprite?.Invoke();
            var retVal = orig();
            if (_afterget_ScrollbarHandleSprite != null) retVal = _afterget_ScrollbarHandleSprite.Invoke();
            return retVal;
        }

        internal static void Hookset_ScrollbarHandleSprite()
        {
            if (!HookedList.Contains("set_ScrollbarHandleSprite"))
            {
                HookedList.Add("set_ScrollbarHandleSprite");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_ScrollbarHandleSprite", false),
                    set_ScrollbarHandleSprite);
            }
        }

        internal static event Delegates.set_ScrollbarHandleSprite_BeforeArgs _beforeset_ScrollbarHandleSprite;
        internal static event Delegates.set_ScrollbarHandleSprite_NormalArgs _afterset_ScrollbarHandleSprite;

        private static void set_ScrollbarHandleSprite(Action<Sprite> orig, Sprite value)
        {
            Delegates.Params_set_ScrollbarHandleSprite @params = new()
            {
                value = value
            };
            _beforeset_ScrollbarHandleSprite?.Invoke(@params);
            value = @params.value;
            orig(value);
            if (_afterset_ScrollbarHandleSprite != null) _afterset_ScrollbarHandleSprite.Invoke(@params);
        }

        internal static void Hookget_ScrollbarBackgroundSprite()
        {
            if (!HookedList.Contains("get_ScrollbarBackgroundSprite"))
            {
                HookedList.Add("get_ScrollbarBackgroundSprite");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_ScrollbarBackgroundSprite", false),
                    get_ScrollbarBackgroundSprite);
            }
        }

        internal static event Delegates.get_ScrollbarBackgroundSprite_BeforeArgs _beforeget_ScrollbarBackgroundSprite;
        internal static event Delegates.get_ScrollbarBackgroundSprite_NormalArgs _afterget_ScrollbarBackgroundSprite;

        private static Sprite get_ScrollbarBackgroundSprite(Func<Sprite> orig)
        {
            _beforeget_ScrollbarBackgroundSprite?.Invoke();
            var retVal = orig();
            if (_afterget_ScrollbarBackgroundSprite != null) retVal = _afterget_ScrollbarBackgroundSprite.Invoke();
            return retVal;
        }

        internal static void Hookset_ScrollbarBackgroundSprite()
        {
            if (!HookedList.Contains("set_ScrollbarBackgroundSprite"))
            {
                HookedList.Add("set_ScrollbarBackgroundSprite");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_ScrollbarBackgroundSprite", false),
                    set_ScrollbarBackgroundSprite);
            }
        }

        internal static event Delegates.set_ScrollbarBackgroundSprite_BeforeArgs _beforeset_ScrollbarBackgroundSprite;
        internal static event Delegates.set_ScrollbarBackgroundSprite_NormalArgs _afterset_ScrollbarBackgroundSprite;

        private static void set_ScrollbarBackgroundSprite(Action<Sprite> orig, Sprite value)
        {
            Delegates.Params_set_ScrollbarBackgroundSprite @params = new()
            {
                value = value
            };
            _beforeset_ScrollbarBackgroundSprite?.Invoke(@params);
            value = @params.value;
            orig(value);
            if (_afterset_ScrollbarBackgroundSprite != null) _afterset_ScrollbarBackgroundSprite.Invoke(@params);
        }

        internal static void HookReloadResources()
        {
            if (!HookedList.Contains("ReloadResources"))
            {
                HookedList.Add("ReloadResources");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuResources), "ReloadResources", false),
                    ReloadResources);
            }
        }

        internal static event Delegates.ReloadResources_BeforeArgs _beforeReloadResources;
        internal static event Delegates.ReloadResources_NormalArgs _afterReloadResources;

        private static void ReloadResources(Action orig)
        {
            _beforeReloadResources?.Invoke();
            orig();
            if (_afterReloadResources != null) _afterReloadResources.Invoke();
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_MenuButtonFlashAnimator_BeforeArgs();

        public delegate RuntimeAnimatorController get_MenuButtonFlashAnimator_NormalArgs();

        public delegate void get_MenuCursorAnimator_BeforeArgs();

        public delegate RuntimeAnimatorController get_MenuCursorAnimator_NormalArgs();

        public delegate void get_MenuTopFleurAnimator_BeforeArgs();

        public delegate RuntimeAnimatorController get_MenuTopFleurAnimator_NormalArgs();

        public delegate void get_NotoSerifCJKSCRegular_BeforeArgs();

        public delegate Font get_NotoSerifCJKSCRegular_NormalArgs();

        public delegate void get_Perpetua_BeforeArgs();

        public delegate Font get_Perpetua_NormalArgs();

        public delegate void get_ScrollbarBackgroundSprite_BeforeArgs();

        public delegate Sprite get_ScrollbarBackgroundSprite_NormalArgs();

        public delegate void get_ScrollbarHandleSprite_BeforeArgs();

        public delegate Sprite get_ScrollbarHandleSprite_NormalArgs();

        public delegate void get_TextHideShowAnimator_BeforeArgs();

        public delegate AnimatorOverrideController get_TextHideShowAnimator_NormalArgs();

        public delegate void get_TrajanBold_BeforeArgs();

        public delegate Font get_TrajanBold_NormalArgs();

        public delegate void get_TrajanRegular_BeforeArgs();

        public delegate Font get_TrajanRegular_NormalArgs();

        public delegate void ReloadResources_BeforeArgs();

        public delegate void ReloadResources_NormalArgs();

        public delegate void set_MenuButtonFlashAnimator_BeforeArgs(Params_set_MenuButtonFlashAnimator args);

        public delegate void set_MenuButtonFlashAnimator_NormalArgs(Params_set_MenuButtonFlashAnimator args);

        public delegate void set_MenuCursorAnimator_BeforeArgs(Params_set_MenuCursorAnimator args);

        public delegate void set_MenuCursorAnimator_NormalArgs(Params_set_MenuCursorAnimator args);

        public delegate void set_MenuTopFleurAnimator_BeforeArgs(Params_set_MenuTopFleurAnimator args);

        public delegate void set_MenuTopFleurAnimator_NormalArgs(Params_set_MenuTopFleurAnimator args);

        public delegate void set_NotoSerifCJKSCRegular_BeforeArgs(Params_set_NotoSerifCJKSCRegular args);

        public delegate void set_NotoSerifCJKSCRegular_NormalArgs(Params_set_NotoSerifCJKSCRegular args);

        public delegate void set_Perpetua_BeforeArgs(Params_set_Perpetua args);

        public delegate void set_Perpetua_NormalArgs(Params_set_Perpetua args);

        public delegate void set_ScrollbarBackgroundSprite_BeforeArgs(Params_set_ScrollbarBackgroundSprite args);

        public delegate void set_ScrollbarBackgroundSprite_NormalArgs(Params_set_ScrollbarBackgroundSprite args);

        public delegate void set_ScrollbarHandleSprite_BeforeArgs(Params_set_ScrollbarHandleSprite args);

        public delegate void set_ScrollbarHandleSprite_NormalArgs(Params_set_ScrollbarHandleSprite args);

        public delegate void set_TextHideShowAnimator_BeforeArgs(Params_set_TextHideShowAnimator args);

        public delegate void set_TextHideShowAnimator_NormalArgs(Params_set_TextHideShowAnimator args);

        public delegate void set_TrajanBold_BeforeArgs(Params_set_TrajanBold args);

        public delegate void set_TrajanBold_NormalArgs(Params_set_TrajanBold args);

        public delegate void set_TrajanRegular_BeforeArgs(Params_set_TrajanRegular args);

        public delegate void set_TrajanRegular_NormalArgs(Params_set_TrajanRegular args);

        public sealed class Params_set_TrajanRegular
        {
            public Font value;
        }

        public sealed class Params_set_TrajanBold
        {
            public Font value;
        }

        public sealed class Params_set_Perpetua
        {
            public Font value;
        }

        public sealed class Params_set_NotoSerifCJKSCRegular
        {
            public Font value;
        }

        public sealed class Params_set_MenuTopFleurAnimator
        {
            public RuntimeAnimatorController value;
        }

        public sealed class Params_set_MenuCursorAnimator
        {
            public RuntimeAnimatorController value;
        }

        public sealed class Params_set_MenuButtonFlashAnimator
        {
            public RuntimeAnimatorController value;
        }

        public sealed class Params_set_TextHideShowAnimator
        {
            public AnimatorOverrideController value;
        }

        public sealed class Params_set_ScrollbarHandleSprite
        {
            public Sprite value;
        }

        public sealed class Params_set_ScrollbarBackgroundSprite
        {
            public Sprite value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_TrajanRegular_BeforeArgs get_TrajanRegular
        {
            add
            {
                HookHandler._beforeget_TrajanRegular += value;
                HookHandler.Hookget_TrajanRegular();
            }
            remove => HookHandler._beforeget_TrajanRegular -= value;
        }

        public static event Delegates.set_TrajanRegular_BeforeArgs set_TrajanRegular
        {
            add
            {
                HookHandler._beforeset_TrajanRegular += value;
                HookHandler.Hookset_TrajanRegular();
            }
            remove => HookHandler._beforeset_TrajanRegular -= value;
        }

        public static event Delegates.get_TrajanBold_BeforeArgs get_TrajanBold
        {
            add
            {
                HookHandler._beforeget_TrajanBold += value;
                HookHandler.Hookget_TrajanBold();
            }
            remove => HookHandler._beforeget_TrajanBold -= value;
        }

        public static event Delegates.set_TrajanBold_BeforeArgs set_TrajanBold
        {
            add
            {
                HookHandler._beforeset_TrajanBold += value;
                HookHandler.Hookset_TrajanBold();
            }
            remove => HookHandler._beforeset_TrajanBold -= value;
        }

        public static event Delegates.get_Perpetua_BeforeArgs get_Perpetua
        {
            add
            {
                HookHandler._beforeget_Perpetua += value;
                HookHandler.Hookget_Perpetua();
            }
            remove => HookHandler._beforeget_Perpetua -= value;
        }

        public static event Delegates.set_Perpetua_BeforeArgs set_Perpetua
        {
            add
            {
                HookHandler._beforeset_Perpetua += value;
                HookHandler.Hookset_Perpetua();
            }
            remove => HookHandler._beforeset_Perpetua -= value;
        }

        public static event Delegates.get_NotoSerifCJKSCRegular_BeforeArgs get_NotoSerifCJKSCRegular
        {
            add
            {
                HookHandler._beforeget_NotoSerifCJKSCRegular += value;
                HookHandler.Hookget_NotoSerifCJKSCRegular();
            }
            remove => HookHandler._beforeget_NotoSerifCJKSCRegular -= value;
        }

        public static event Delegates.set_NotoSerifCJKSCRegular_BeforeArgs set_NotoSerifCJKSCRegular
        {
            add
            {
                HookHandler._beforeset_NotoSerifCJKSCRegular += value;
                HookHandler.Hookset_NotoSerifCJKSCRegular();
            }
            remove => HookHandler._beforeset_NotoSerifCJKSCRegular -= value;
        }

        public static event Delegates.get_MenuTopFleurAnimator_BeforeArgs get_MenuTopFleurAnimator
        {
            add
            {
                HookHandler._beforeget_MenuTopFleurAnimator += value;
                HookHandler.Hookget_MenuTopFleurAnimator();
            }
            remove => HookHandler._beforeget_MenuTopFleurAnimator -= value;
        }

        public static event Delegates.set_MenuTopFleurAnimator_BeforeArgs set_MenuTopFleurAnimator
        {
            add
            {
                HookHandler._beforeset_MenuTopFleurAnimator += value;
                HookHandler.Hookset_MenuTopFleurAnimator();
            }
            remove => HookHandler._beforeset_MenuTopFleurAnimator -= value;
        }

        public static event Delegates.get_MenuCursorAnimator_BeforeArgs get_MenuCursorAnimator
        {
            add
            {
                HookHandler._beforeget_MenuCursorAnimator += value;
                HookHandler.Hookget_MenuCursorAnimator();
            }
            remove => HookHandler._beforeget_MenuCursorAnimator -= value;
        }

        public static event Delegates.set_MenuCursorAnimator_BeforeArgs set_MenuCursorAnimator
        {
            add
            {
                HookHandler._beforeset_MenuCursorAnimator += value;
                HookHandler.Hookset_MenuCursorAnimator();
            }
            remove => HookHandler._beforeset_MenuCursorAnimator -= value;
        }

        public static event Delegates.get_MenuButtonFlashAnimator_BeforeArgs get_MenuButtonFlashAnimator
        {
            add
            {
                HookHandler._beforeget_MenuButtonFlashAnimator += value;
                HookHandler.Hookget_MenuButtonFlashAnimator();
            }
            remove => HookHandler._beforeget_MenuButtonFlashAnimator -= value;
        }

        public static event Delegates.set_MenuButtonFlashAnimator_BeforeArgs set_MenuButtonFlashAnimator
        {
            add
            {
                HookHandler._beforeset_MenuButtonFlashAnimator += value;
                HookHandler.Hookset_MenuButtonFlashAnimator();
            }
            remove => HookHandler._beforeset_MenuButtonFlashAnimator -= value;
        }

        public static event Delegates.get_TextHideShowAnimator_BeforeArgs get_TextHideShowAnimator
        {
            add
            {
                HookHandler._beforeget_TextHideShowAnimator += value;
                HookHandler.Hookget_TextHideShowAnimator();
            }
            remove => HookHandler._beforeget_TextHideShowAnimator -= value;
        }

        public static event Delegates.set_TextHideShowAnimator_BeforeArgs set_TextHideShowAnimator
        {
            add
            {
                HookHandler._beforeset_TextHideShowAnimator += value;
                HookHandler.Hookset_TextHideShowAnimator();
            }
            remove => HookHandler._beforeset_TextHideShowAnimator -= value;
        }

        public static event Delegates.get_ScrollbarHandleSprite_BeforeArgs get_ScrollbarHandleSprite
        {
            add
            {
                HookHandler._beforeget_ScrollbarHandleSprite += value;
                HookHandler.Hookget_ScrollbarHandleSprite();
            }
            remove => HookHandler._beforeget_ScrollbarHandleSprite -= value;
        }

        public static event Delegates.set_ScrollbarHandleSprite_BeforeArgs set_ScrollbarHandleSprite
        {
            add
            {
                HookHandler._beforeset_ScrollbarHandleSprite += value;
                HookHandler.Hookset_ScrollbarHandleSprite();
            }
            remove => HookHandler._beforeset_ScrollbarHandleSprite -= value;
        }

        public static event Delegates.get_ScrollbarBackgroundSprite_BeforeArgs get_ScrollbarBackgroundSprite
        {
            add
            {
                HookHandler._beforeget_ScrollbarBackgroundSprite += value;
                HookHandler.Hookget_ScrollbarBackgroundSprite();
            }
            remove => HookHandler._beforeget_ScrollbarBackgroundSprite -= value;
        }

        public static event Delegates.set_ScrollbarBackgroundSprite_BeforeArgs set_ScrollbarBackgroundSprite
        {
            add
            {
                HookHandler._beforeset_ScrollbarBackgroundSprite += value;
                HookHandler.Hookset_ScrollbarBackgroundSprite();
            }
            remove => HookHandler._beforeset_ScrollbarBackgroundSprite -= value;
        }

        public static event Delegates.ReloadResources_BeforeArgs ReloadResources
        {
            add
            {
                HookHandler._beforeReloadResources += value;
                HookHandler.HookReloadResources();
            }
            remove => HookHandler._beforeReloadResources -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_TrajanRegular_NormalArgs get_TrajanRegular
        {
            add
            {
                HookHandler._afterget_TrajanRegular += value;
                HookHandler.Hookget_TrajanRegular();
            }
            remove => HookHandler._afterget_TrajanRegular -= value;
        }

        public static event Delegates.set_TrajanRegular_NormalArgs set_TrajanRegular
        {
            add
            {
                HookHandler._afterset_TrajanRegular += value;
                HookHandler.Hookset_TrajanRegular();
            }
            remove => HookHandler._afterset_TrajanRegular -= value;
        }

        public static event Delegates.get_TrajanBold_NormalArgs get_TrajanBold
        {
            add
            {
                HookHandler._afterget_TrajanBold += value;
                HookHandler.Hookget_TrajanBold();
            }
            remove => HookHandler._afterget_TrajanBold -= value;
        }

        public static event Delegates.set_TrajanBold_NormalArgs set_TrajanBold
        {
            add
            {
                HookHandler._afterset_TrajanBold += value;
                HookHandler.Hookset_TrajanBold();
            }
            remove => HookHandler._afterset_TrajanBold -= value;
        }

        public static event Delegates.get_Perpetua_NormalArgs get_Perpetua
        {
            add
            {
                HookHandler._afterget_Perpetua += value;
                HookHandler.Hookget_Perpetua();
            }
            remove => HookHandler._afterget_Perpetua -= value;
        }

        public static event Delegates.set_Perpetua_NormalArgs set_Perpetua
        {
            add
            {
                HookHandler._afterset_Perpetua += value;
                HookHandler.Hookset_Perpetua();
            }
            remove => HookHandler._afterset_Perpetua -= value;
        }

        public static event Delegates.get_NotoSerifCJKSCRegular_NormalArgs get_NotoSerifCJKSCRegular
        {
            add
            {
                HookHandler._afterget_NotoSerifCJKSCRegular += value;
                HookHandler.Hookget_NotoSerifCJKSCRegular();
            }
            remove => HookHandler._afterget_NotoSerifCJKSCRegular -= value;
        }

        public static event Delegates.set_NotoSerifCJKSCRegular_NormalArgs set_NotoSerifCJKSCRegular
        {
            add
            {
                HookHandler._afterset_NotoSerifCJKSCRegular += value;
                HookHandler.Hookset_NotoSerifCJKSCRegular();
            }
            remove => HookHandler._afterset_NotoSerifCJKSCRegular -= value;
        }

        public static event Delegates.get_MenuTopFleurAnimator_NormalArgs get_MenuTopFleurAnimator
        {
            add
            {
                HookHandler._afterget_MenuTopFleurAnimator += value;
                HookHandler.Hookget_MenuTopFleurAnimator();
            }
            remove => HookHandler._afterget_MenuTopFleurAnimator -= value;
        }

        public static event Delegates.set_MenuTopFleurAnimator_NormalArgs set_MenuTopFleurAnimator
        {
            add
            {
                HookHandler._afterset_MenuTopFleurAnimator += value;
                HookHandler.Hookset_MenuTopFleurAnimator();
            }
            remove => HookHandler._afterset_MenuTopFleurAnimator -= value;
        }

        public static event Delegates.get_MenuCursorAnimator_NormalArgs get_MenuCursorAnimator
        {
            add
            {
                HookHandler._afterget_MenuCursorAnimator += value;
                HookHandler.Hookget_MenuCursorAnimator();
            }
            remove => HookHandler._afterget_MenuCursorAnimator -= value;
        }

        public static event Delegates.set_MenuCursorAnimator_NormalArgs set_MenuCursorAnimator
        {
            add
            {
                HookHandler._afterset_MenuCursorAnimator += value;
                HookHandler.Hookset_MenuCursorAnimator();
            }
            remove => HookHandler._afterset_MenuCursorAnimator -= value;
        }

        public static event Delegates.get_MenuButtonFlashAnimator_NormalArgs get_MenuButtonFlashAnimator
        {
            add
            {
                HookHandler._afterget_MenuButtonFlashAnimator += value;
                HookHandler.Hookget_MenuButtonFlashAnimator();
            }
            remove => HookHandler._afterget_MenuButtonFlashAnimator -= value;
        }

        public static event Delegates.set_MenuButtonFlashAnimator_NormalArgs set_MenuButtonFlashAnimator
        {
            add
            {
                HookHandler._afterset_MenuButtonFlashAnimator += value;
                HookHandler.Hookset_MenuButtonFlashAnimator();
            }
            remove => HookHandler._afterset_MenuButtonFlashAnimator -= value;
        }

        public static event Delegates.get_TextHideShowAnimator_NormalArgs get_TextHideShowAnimator
        {
            add
            {
                HookHandler._afterget_TextHideShowAnimator += value;
                HookHandler.Hookget_TextHideShowAnimator();
            }
            remove => HookHandler._afterget_TextHideShowAnimator -= value;
        }

        public static event Delegates.set_TextHideShowAnimator_NormalArgs set_TextHideShowAnimator
        {
            add
            {
                HookHandler._afterset_TextHideShowAnimator += value;
                HookHandler.Hookset_TextHideShowAnimator();
            }
            remove => HookHandler._afterset_TextHideShowAnimator -= value;
        }

        public static event Delegates.get_ScrollbarHandleSprite_NormalArgs get_ScrollbarHandleSprite
        {
            add
            {
                HookHandler._afterget_ScrollbarHandleSprite += value;
                HookHandler.Hookget_ScrollbarHandleSprite();
            }
            remove => HookHandler._afterget_ScrollbarHandleSprite -= value;
        }

        public static event Delegates.set_ScrollbarHandleSprite_NormalArgs set_ScrollbarHandleSprite
        {
            add
            {
                HookHandler._afterset_ScrollbarHandleSprite += value;
                HookHandler.Hookset_ScrollbarHandleSprite();
            }
            remove => HookHandler._afterset_ScrollbarHandleSprite -= value;
        }

        public static event Delegates.get_ScrollbarBackgroundSprite_NormalArgs get_ScrollbarBackgroundSprite
        {
            add
            {
                HookHandler._afterget_ScrollbarBackgroundSprite += value;
                HookHandler.Hookget_ScrollbarBackgroundSprite();
            }
            remove => HookHandler._afterget_ScrollbarBackgroundSprite -= value;
        }

        public static event Delegates.set_ScrollbarBackgroundSprite_NormalArgs set_ScrollbarBackgroundSprite
        {
            add
            {
                HookHandler._afterset_ScrollbarBackgroundSprite += value;
                HookHandler.Hookset_ScrollbarBackgroundSprite();
            }
            remove => HookHandler._afterset_ScrollbarBackgroundSprite -= value;
        }

        public static event Delegates.ReloadResources_NormalArgs ReloadResources
        {
            add
            {
                HookHandler._afterReloadResources += value;
                HookHandler.HookReloadResources();
            }
            remove => HookHandler._afterReloadResources -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_TrajanRegular_NormalArgs get_TrajanRegular
        {
            add => HookEndpointManager.Add<Delegates.get_TrajanRegular_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_TrajanRegular", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_TrajanRegular_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_TrajanRegular", false), value);
        }

        public static event Delegates.set_TrajanRegular_NormalArgs set_TrajanRegular
        {
            add => HookEndpointManager.Add<Delegates.set_TrajanRegular_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_TrajanRegular", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_TrajanRegular_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_TrajanRegular", false), value);
        }

        public static event Delegates.get_TrajanBold_NormalArgs get_TrajanBold
        {
            add => HookEndpointManager.Add<Delegates.get_TrajanBold_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_TrajanBold", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_TrajanBold_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_TrajanBold", false), value);
        }

        public static event Delegates.set_TrajanBold_NormalArgs set_TrajanBold
        {
            add => HookEndpointManager.Add<Delegates.set_TrajanBold_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_TrajanBold", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_TrajanBold_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_TrajanBold", false), value);
        }

        public static event Delegates.get_Perpetua_NormalArgs get_Perpetua
        {
            add => HookEndpointManager.Add<Delegates.get_Perpetua_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_Perpetua", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_Perpetua_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_Perpetua", false), value);
        }

        public static event Delegates.set_Perpetua_NormalArgs set_Perpetua
        {
            add => HookEndpointManager.Add<Delegates.set_Perpetua_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_Perpetua", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_Perpetua_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_Perpetua", false), value);
        }

        public static event Delegates.get_NotoSerifCJKSCRegular_NormalArgs get_NotoSerifCJKSCRegular
        {
            add => HookEndpointManager.Add<Delegates.get_NotoSerifCJKSCRegular_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_NotoSerifCJKSCRegular", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_NotoSerifCJKSCRegular_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_NotoSerifCJKSCRegular", false), value);
        }

        public static event Delegates.set_NotoSerifCJKSCRegular_NormalArgs set_NotoSerifCJKSCRegular
        {
            add => HookEndpointManager.Add<Delegates.set_NotoSerifCJKSCRegular_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_NotoSerifCJKSCRegular", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_NotoSerifCJKSCRegular_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_NotoSerifCJKSCRegular", false), value);
        }

        public static event Delegates.get_MenuTopFleurAnimator_NormalArgs get_MenuTopFleurAnimator
        {
            add => HookEndpointManager.Add<Delegates.get_MenuTopFleurAnimator_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_MenuTopFleurAnimator", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_MenuTopFleurAnimator_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_MenuTopFleurAnimator", false), value);
        }

        public static event Delegates.set_MenuTopFleurAnimator_NormalArgs set_MenuTopFleurAnimator
        {
            add => HookEndpointManager.Add<Delegates.set_MenuTopFleurAnimator_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_MenuTopFleurAnimator", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_MenuTopFleurAnimator_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_MenuTopFleurAnimator", false), value);
        }

        public static event Delegates.get_MenuCursorAnimator_NormalArgs get_MenuCursorAnimator
        {
            add => HookEndpointManager.Add<Delegates.get_MenuCursorAnimator_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_MenuCursorAnimator", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_MenuCursorAnimator_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_MenuCursorAnimator", false), value);
        }

        public static event Delegates.set_MenuCursorAnimator_NormalArgs set_MenuCursorAnimator
        {
            add => HookEndpointManager.Add<Delegates.set_MenuCursorAnimator_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_MenuCursorAnimator", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_MenuCursorAnimator_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_MenuCursorAnimator", false), value);
        }

        public static event Delegates.get_MenuButtonFlashAnimator_NormalArgs get_MenuButtonFlashAnimator
        {
            add => HookEndpointManager.Add<Delegates.get_MenuButtonFlashAnimator_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_MenuButtonFlashAnimator", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_MenuButtonFlashAnimator_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_MenuButtonFlashAnimator", false), value);
        }

        public static event Delegates.set_MenuButtonFlashAnimator_NormalArgs set_MenuButtonFlashAnimator
        {
            add => HookEndpointManager.Add<Delegates.set_MenuButtonFlashAnimator_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_MenuButtonFlashAnimator", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_MenuButtonFlashAnimator_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_MenuButtonFlashAnimator", false), value);
        }

        public static event Delegates.get_TextHideShowAnimator_NormalArgs get_TextHideShowAnimator
        {
            add => HookEndpointManager.Add<Delegates.get_TextHideShowAnimator_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_TextHideShowAnimator", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_TextHideShowAnimator_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_TextHideShowAnimator", false), value);
        }

        public static event Delegates.set_TextHideShowAnimator_NormalArgs set_TextHideShowAnimator
        {
            add => HookEndpointManager.Add<Delegates.set_TextHideShowAnimator_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_TextHideShowAnimator", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_TextHideShowAnimator_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_TextHideShowAnimator", false), value);
        }

        public static event Delegates.get_ScrollbarHandleSprite_NormalArgs get_ScrollbarHandleSprite
        {
            add => HookEndpointManager.Add<Delegates.get_ScrollbarHandleSprite_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_ScrollbarHandleSprite", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_ScrollbarHandleSprite_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_ScrollbarHandleSprite", false), value);
        }

        public static event Delegates.set_ScrollbarHandleSprite_NormalArgs set_ScrollbarHandleSprite
        {
            add => HookEndpointManager.Add<Delegates.set_ScrollbarHandleSprite_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_ScrollbarHandleSprite", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_ScrollbarHandleSprite_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_ScrollbarHandleSprite", false), value);
        }

        public static event Delegates.get_ScrollbarBackgroundSprite_NormalArgs get_ScrollbarBackgroundSprite
        {
            add => HookEndpointManager.Add<Delegates.get_ScrollbarBackgroundSprite_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_ScrollbarBackgroundSprite", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_ScrollbarBackgroundSprite_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "get_ScrollbarBackgroundSprite", false), value);
        }

        public static event Delegates.set_ScrollbarBackgroundSprite_NormalArgs set_ScrollbarBackgroundSprite
        {
            add => HookEndpointManager.Add<Delegates.set_ScrollbarBackgroundSprite_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_ScrollbarBackgroundSprite", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_ScrollbarBackgroundSprite_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "set_ScrollbarBackgroundSprite", false), value);
        }

        public static event Delegates.ReloadResources_NormalArgs ReloadResources
        {
            add => HookEndpointManager.Add<Delegates.ReloadResources_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "ReloadResources", false), value);
            remove => HookEndpointManager.Remove<Delegates.ReloadResources_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuResources), "ReloadResources", false), value);
        }
    }
}