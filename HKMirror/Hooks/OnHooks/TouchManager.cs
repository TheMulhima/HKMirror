using System.Collections.ObjectModel;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using Touch = InControl.Touch;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TouchManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTouchManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "OnEnable"), OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(Action<TouchManager> orig, TouchManager self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "OnDisable"), OnDisable);
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(Action<TouchManager> orig, TouchManager self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookSetup()
        {
            if (!HookedList.Contains("Setup"))
            {
                HookedList.Add("Setup");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "Setup"), Setup);
            }
        }

        internal static event Delegates.Setup_BeforeArgs _beforeSetup;
        internal static event Delegates.Setup_NormalArgs _afterSetup;

        private static void Setup(Action<TouchManager> orig, TouchManager self)
        {
            Delegates.Params_Setup @params = new()
            {
                self = self
            };
            _beforeSetup?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetup != null) _afterSetup.Invoke(@params);
        }

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<TouchManager> orig, TouchManager self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookUpdateScreenSizeAtEndOfFrame()
        {
            if (!HookedList.Contains("UpdateScreenSizeAtEndOfFrame"))
            {
                HookedList.Add("UpdateScreenSizeAtEndOfFrame");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "UpdateScreenSizeAtEndOfFrame"),
                    UpdateScreenSizeAtEndOfFrame);
            }
        }

        internal static event Delegates.UpdateScreenSizeAtEndOfFrame_BeforeArgs _beforeUpdateScreenSizeAtEndOfFrame;

        private static IEnumerator UpdateScreenSizeAtEndOfFrame(Func<TouchManager, IEnumerator> orig, TouchManager self)
        {
            Delegates.Params_UpdateScreenSizeAtEndOfFrame @params = new()
            {
                self = self
            };
            _beforeUpdateScreenSizeAtEndOfFrame?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "Update"), Update);
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(Action<TouchManager> orig, TouchManager self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookCreateDevice()
        {
            if (!HookedList.Contains("CreateDevice"))
            {
                HookedList.Add("CreateDevice");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "CreateDevice"), CreateDevice);
            }
        }

        internal static event Delegates.CreateDevice_BeforeArgs _beforeCreateDevice;
        internal static event Delegates.CreateDevice_NormalArgs _afterCreateDevice;

        private static void CreateDevice(Action<TouchManager> orig, TouchManager self)
        {
            Delegates.Params_CreateDevice @params = new()
            {
                self = self
            };
            _beforeCreateDevice?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCreateDevice != null) _afterCreateDevice.Invoke(@params);
        }

        internal static void HookUpdateDevice()
        {
            if (!HookedList.Contains("UpdateDevice"))
            {
                HookedList.Add("UpdateDevice");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "UpdateDevice"), UpdateDevice);
            }
        }

        internal static event Delegates.UpdateDevice_BeforeArgs _beforeUpdateDevice;
        internal static event Delegates.UpdateDevice_NormalArgs _afterUpdateDevice;

        private static void UpdateDevice(Action<TouchManager, ulong, float> orig, TouchManager self, ulong updateTick,
            float deltaTime)
        {
            Delegates.Params_UpdateDevice @params = new()
            {
                self = self, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeUpdateDevice?.Invoke(@params);
            self = @params.self;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, updateTick, deltaTime);
            if (_afterUpdateDevice != null) _afterUpdateDevice.Invoke(@params);
        }

        internal static void HookCommitDevice()
        {
            if (!HookedList.Contains("CommitDevice"))
            {
                HookedList.Add("CommitDevice");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "CommitDevice"), CommitDevice);
            }
        }

        internal static event Delegates.CommitDevice_BeforeArgs _beforeCommitDevice;
        internal static event Delegates.CommitDevice_NormalArgs _afterCommitDevice;

        private static void CommitDevice(Action<TouchManager, ulong, float> orig, TouchManager self, ulong updateTick,
            float deltaTime)
        {
            Delegates.Params_CommitDevice @params = new()
            {
                self = self, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeCommitDevice?.Invoke(@params);
            self = @params.self;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, updateTick, deltaTime);
            if (_afterCommitDevice != null) _afterCommitDevice.Invoke(@params);
        }

        internal static void HookSubmitControlStates()
        {
            if (!HookedList.Contains("SubmitControlStates"))
            {
                HookedList.Add("SubmitControlStates");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "SubmitControlStates"),
                    SubmitControlStates);
            }
        }

        internal static event Delegates.SubmitControlStates_BeforeArgs _beforeSubmitControlStates;
        internal static event Delegates.SubmitControlStates_NormalArgs _afterSubmitControlStates;

        private static void SubmitControlStates(Action<TouchManager, ulong, float> orig, TouchManager self,
            ulong updateTick, float deltaTime)
        {
            Delegates.Params_SubmitControlStates @params = new()
            {
                self = self, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeSubmitControlStates?.Invoke(@params);
            self = @params.self;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, updateTick, deltaTime);
            if (_afterSubmitControlStates != null) _afterSubmitControlStates.Invoke(@params);
        }

        internal static void HookCommitControlStates()
        {
            if (!HookedList.Contains("CommitControlStates"))
            {
                HookedList.Add("CommitControlStates");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "CommitControlStates"),
                    CommitControlStates);
            }
        }

        internal static event Delegates.CommitControlStates_BeforeArgs _beforeCommitControlStates;
        internal static event Delegates.CommitControlStates_NormalArgs _afterCommitControlStates;

        private static void CommitControlStates(Action<TouchManager, ulong, float> orig, TouchManager self,
            ulong updateTick, float deltaTime)
        {
            Delegates.Params_CommitControlStates @params = new()
            {
                self = self, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeCommitControlStates?.Invoke(@params);
            self = @params.self;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, updateTick, deltaTime);
            if (_afterCommitControlStates != null) _afterCommitControlStates.Invoke(@params);
        }

        internal static void HookUpdateScreenSize()
        {
            if (!HookedList.Contains("UpdateScreenSize"))
            {
                HookedList.Add("UpdateScreenSize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "UpdateScreenSize"), UpdateScreenSize);
            }
        }

        internal static event Delegates.UpdateScreenSize_BeforeArgs _beforeUpdateScreenSize;
        internal static event Delegates.UpdateScreenSize_NormalArgs _afterUpdateScreenSize;

        private static void UpdateScreenSize(Action<TouchManager, Vector2> orig, TouchManager self,
            Vector2 currentScreenSize)
        {
            Delegates.Params_UpdateScreenSize @params = new()
            {
                self = self, currentScreenSize = currentScreenSize
            };
            _beforeUpdateScreenSize?.Invoke(@params);
            self = @params.self;
            currentScreenSize = @params.currentScreenSize;
            orig(self, currentScreenSize);
            if (_afterUpdateScreenSize != null) _afterUpdateScreenSize.Invoke(@params);
        }

        internal static void HookCreateTouches()
        {
            if (!HookedList.Contains("CreateTouches"))
            {
                HookedList.Add("CreateTouches");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "CreateTouches"), CreateTouches);
            }
        }

        internal static event Delegates.CreateTouches_BeforeArgs _beforeCreateTouches;
        internal static event Delegates.CreateTouches_NormalArgs _afterCreateTouches;

        private static void CreateTouches(Action<TouchManager> orig, TouchManager self)
        {
            Delegates.Params_CreateTouches @params = new()
            {
                self = self
            };
            _beforeCreateTouches?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCreateTouches != null) _afterCreateTouches.Invoke(@params);
        }

        internal static void HookUpdateTouches()
        {
            if (!HookedList.Contains("UpdateTouches"))
            {
                HookedList.Add("UpdateTouches");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "UpdateTouches"), UpdateTouches);
            }
        }

        internal static event Delegates.UpdateTouches_BeforeArgs _beforeUpdateTouches;
        internal static event Delegates.UpdateTouches_NormalArgs _afterUpdateTouches;

        private static void UpdateTouches(Action<TouchManager, ulong, float> orig, TouchManager self, ulong updateTick,
            float deltaTime)
        {
            Delegates.Params_UpdateTouches @params = new()
            {
                self = self, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeUpdateTouches?.Invoke(@params);
            self = @params.self;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, updateTick, deltaTime);
            if (_afterUpdateTouches != null) _afterUpdateTouches.Invoke(@params);
        }

        internal static void HookSendTouchBegan()
        {
            if (!HookedList.Contains("SendTouchBegan"))
            {
                HookedList.Add("SendTouchBegan");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "SendTouchBegan"), SendTouchBegan);
            }
        }

        internal static event Delegates.SendTouchBegan_BeforeArgs _beforeSendTouchBegan;
        internal static event Delegates.SendTouchBegan_NormalArgs _afterSendTouchBegan;

        private static void SendTouchBegan(Action<TouchManager, Touch> orig, TouchManager self, Touch touch)
        {
            Delegates.Params_SendTouchBegan @params = new()
            {
                self = self, touch = touch
            };
            _beforeSendTouchBegan?.Invoke(@params);
            self = @params.self;
            touch = @params.touch;
            orig(self, touch);
            if (_afterSendTouchBegan != null) _afterSendTouchBegan.Invoke(@params);
        }

        internal static void HookSendTouchMoved()
        {
            if (!HookedList.Contains("SendTouchMoved"))
            {
                HookedList.Add("SendTouchMoved");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "SendTouchMoved"), SendTouchMoved);
            }
        }

        internal static event Delegates.SendTouchMoved_BeforeArgs _beforeSendTouchMoved;
        internal static event Delegates.SendTouchMoved_NormalArgs _afterSendTouchMoved;

        private static void SendTouchMoved(Action<TouchManager, Touch> orig, TouchManager self, Touch touch)
        {
            Delegates.Params_SendTouchMoved @params = new()
            {
                self = self, touch = touch
            };
            _beforeSendTouchMoved?.Invoke(@params);
            self = @params.self;
            touch = @params.touch;
            orig(self, touch);
            if (_afterSendTouchMoved != null) _afterSendTouchMoved.Invoke(@params);
        }

        internal static void HookSendTouchEnded()
        {
            if (!HookedList.Contains("SendTouchEnded"))
            {
                HookedList.Add("SendTouchEnded");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "SendTouchEnded"), SendTouchEnded);
            }
        }

        internal static event Delegates.SendTouchEnded_BeforeArgs _beforeSendTouchEnded;
        internal static event Delegates.SendTouchEnded_NormalArgs _afterSendTouchEnded;

        private static void SendTouchEnded(Action<TouchManager, Touch> orig, TouchManager self, Touch touch)
        {
            Delegates.Params_SendTouchEnded @params = new()
            {
                self = self, touch = touch
            };
            _beforeSendTouchEnded?.Invoke(@params);
            self = @params.self;
            touch = @params.touch;
            orig(self, touch);
            if (_afterSendTouchEnded != null) _afterSendTouchEnded.Invoke(@params);
        }

        internal static void HookInvokeTouchEvents()
        {
            if (!HookedList.Contains("InvokeTouchEvents"))
            {
                HookedList.Add("InvokeTouchEvents");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "InvokeTouchEvents"), InvokeTouchEvents);
            }
        }

        internal static event Delegates.InvokeTouchEvents_BeforeArgs _beforeInvokeTouchEvents;
        internal static event Delegates.InvokeTouchEvents_NormalArgs _afterInvokeTouchEvents;

        private static void InvokeTouchEvents(Action<TouchManager> orig, TouchManager self)
        {
            Delegates.Params_InvokeTouchEvents @params = new()
            {
                self = self
            };
            _beforeInvokeTouchEvents?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterInvokeTouchEvents != null) _afterInvokeTouchEvents.Invoke(@params);
        }

        internal static void HookTouchCameraIsValid()
        {
            if (!HookedList.Contains("TouchCameraIsValid"))
            {
                HookedList.Add("TouchCameraIsValid");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "TouchCameraIsValid"),
                    TouchCameraIsValid);
            }
        }

        internal static event Delegates.TouchCameraIsValid_BeforeArgs _beforeTouchCameraIsValid;
        internal static event Delegates.TouchCameraIsValid_NormalArgs _afterTouchCameraIsValid;

        private static bool TouchCameraIsValid(Func<TouchManager, bool> orig, TouchManager self)
        {
            Delegates.Params_TouchCameraIsValid @params = new()
            {
                self = self
            };
            _beforeTouchCameraIsValid?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterTouchCameraIsValid != null) retVal = _afterTouchCameraIsValid.Invoke(@params);
            return retVal;
        }

        internal static void HookConvertScreenToWorldPoint()
        {
            if (!HookedList.Contains("ConvertScreenToWorldPoint"))
            {
                HookedList.Add("ConvertScreenToWorldPoint");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ConvertScreenToWorldPoint"),
                    ConvertScreenToWorldPoint);
            }
        }

        internal static event Delegates.ConvertScreenToWorldPoint_BeforeArgs _beforeConvertScreenToWorldPoint;
        internal static event Delegates.ConvertScreenToWorldPoint_NormalArgs _afterConvertScreenToWorldPoint;

        private static Vector3 ConvertScreenToWorldPoint(Func<TouchManager, Vector2, Vector3> orig, TouchManager self,
            Vector2 point)
        {
            Delegates.Params_ConvertScreenToWorldPoint @params = new()
            {
                self = self, point = point
            };
            _beforeConvertScreenToWorldPoint?.Invoke(@params);
            self = @params.self;
            point = @params.point;
            var retVal = orig(self, point);
            if (_afterConvertScreenToWorldPoint != null) retVal = _afterConvertScreenToWorldPoint.Invoke(@params);
            return retVal;
        }

        internal static void HookConvertViewToWorldPoint()
        {
            if (!HookedList.Contains("ConvertViewToWorldPoint"))
            {
                HookedList.Add("ConvertViewToWorldPoint");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ConvertViewToWorldPoint"),
                    ConvertViewToWorldPoint);
            }
        }

        internal static event Delegates.ConvertViewToWorldPoint_BeforeArgs _beforeConvertViewToWorldPoint;
        internal static event Delegates.ConvertViewToWorldPoint_NormalArgs _afterConvertViewToWorldPoint;

        private static Vector3 ConvertViewToWorldPoint(Func<TouchManager, Vector2, Vector3> orig, TouchManager self,
            Vector2 point)
        {
            Delegates.Params_ConvertViewToWorldPoint @params = new()
            {
                self = self, point = point
            };
            _beforeConvertViewToWorldPoint?.Invoke(@params);
            self = @params.self;
            point = @params.point;
            var retVal = orig(self, point);
            if (_afterConvertViewToWorldPoint != null) retVal = _afterConvertViewToWorldPoint.Invoke(@params);
            return retVal;
        }

        internal static void HookConvertScreenToViewPoint()
        {
            if (!HookedList.Contains("ConvertScreenToViewPoint"))
            {
                HookedList.Add("ConvertScreenToViewPoint");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ConvertScreenToViewPoint"),
                    ConvertScreenToViewPoint);
            }
        }

        internal static event Delegates.ConvertScreenToViewPoint_BeforeArgs _beforeConvertScreenToViewPoint;
        internal static event Delegates.ConvertScreenToViewPoint_NormalArgs _afterConvertScreenToViewPoint;

        private static Vector3 ConvertScreenToViewPoint(Func<TouchManager, Vector2, Vector3> orig, TouchManager self,
            Vector2 point)
        {
            Delegates.Params_ConvertScreenToViewPoint @params = new()
            {
                self = self, point = point
            };
            _beforeConvertScreenToViewPoint?.Invoke(@params);
            self = @params.self;
            point = @params.point;
            var retVal = orig(self, point);
            if (_afterConvertScreenToViewPoint != null) retVal = _afterConvertScreenToViewPoint.Invoke(@params);
            return retVal;
        }

        internal static void HookGetCurrentScreenSize()
        {
            if (!HookedList.Contains("GetCurrentScreenSize"))
            {
                HookedList.Add("GetCurrentScreenSize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "GetCurrentScreenSize"),
                    GetCurrentScreenSize);
            }
        }

        internal static event Delegates.GetCurrentScreenSize_BeforeArgs _beforeGetCurrentScreenSize;
        internal static event Delegates.GetCurrentScreenSize_NormalArgs _afterGetCurrentScreenSize;

        private static Vector2 GetCurrentScreenSize(Func<TouchManager, Vector2> orig, TouchManager self)
        {
            Delegates.Params_GetCurrentScreenSize @params = new()
            {
                self = self
            };
            _beforeGetCurrentScreenSize?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetCurrentScreenSize != null) retVal = _afterGetCurrentScreenSize.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_controlsEnabled()
        {
            if (!HookedList.Contains("get_controlsEnabled"))
            {
                HookedList.Add("get_controlsEnabled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_controlsEnabled"),
                    get_controlsEnabled);
            }
        }

        internal static event Delegates.get_controlsEnabled_BeforeArgs _beforeget_controlsEnabled;
        internal static event Delegates.get_controlsEnabled_NormalArgs _afterget_controlsEnabled;

        private static bool get_controlsEnabled(Func<TouchManager, bool> orig, TouchManager self)
        {
            Delegates.Params_get_controlsEnabled @params = new()
            {
                self = self
            };
            _beforeget_controlsEnabled?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_controlsEnabled != null) retVal = _afterget_controlsEnabled.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_controlsEnabled()
        {
            if (!HookedList.Contains("set_controlsEnabled"))
            {
                HookedList.Add("set_controlsEnabled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "set_controlsEnabled"),
                    set_controlsEnabled);
            }
        }

        internal static event Delegates.set_controlsEnabled_BeforeArgs _beforeset_controlsEnabled;
        internal static event Delegates.set_controlsEnabled_NormalArgs _afterset_controlsEnabled;

        private static void set_controlsEnabled(Action<TouchManager, bool> orig, TouchManager self, bool value)
        {
            Delegates.Params_set_controlsEnabled @params = new()
            {
                self = self, value = value
            };
            _beforeset_controlsEnabled?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_controlsEnabled != null) _afterset_controlsEnabled.Invoke(@params);
        }

        internal static void Hookget_Touches()
        {
            if (!HookedList.Contains("get_Touches"))
            {
                HookedList.Add("get_Touches");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_Touches", false), get_Touches);
            }
        }

        internal static event Delegates.get_Touches_BeforeArgs _beforeget_Touches;
        internal static event Delegates.get_Touches_NormalArgs _afterget_Touches;

        private static ReadOnlyCollection<Touch> get_Touches(Func<ReadOnlyCollection<Touch>> orig)
        {
            _beforeget_Touches?.Invoke();
            var retVal = orig();
            if (_afterget_Touches != null) retVal = _afterget_Touches.Invoke();
            return retVal;
        }

        internal static void Hookget_TouchCount()
        {
            if (!HookedList.Contains("get_TouchCount"))
            {
                HookedList.Add("get_TouchCount");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_TouchCount", false), get_TouchCount);
            }
        }

        internal static event Delegates.get_TouchCount_BeforeArgs _beforeget_TouchCount;
        internal static event Delegates.get_TouchCount_NormalArgs _afterget_TouchCount;

        private static int get_TouchCount(Func<int> orig)
        {
            _beforeget_TouchCount?.Invoke();
            var retVal = orig();
            if (_afterget_TouchCount != null) retVal = _afterget_TouchCount.Invoke();
            return retVal;
        }

        internal static void HookGetTouch()
        {
            if (!HookedList.Contains("GetTouch"))
            {
                HookedList.Add("GetTouch");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "GetTouch", false), GetTouch);
            }
        }

        internal static event Delegates.GetTouch_BeforeArgs _beforeGetTouch;
        internal static event Delegates.GetTouch_NormalArgs _afterGetTouch;

        private static Touch GetTouch(Func<int, Touch> orig, int touchIndex)
        {
            Delegates.Params_GetTouch @params = new()
            {
                touchIndex = touchIndex
            };
            _beforeGetTouch?.Invoke(@params);
            touchIndex = @params.touchIndex;
            var retVal = orig(touchIndex);
            if (_afterGetTouch != null) retVal = _afterGetTouch.Invoke(@params);
            return retVal;
        }

        internal static void HookGetTouchByFingerId()
        {
            if (!HookedList.Contains("GetTouchByFingerId"))
            {
                HookedList.Add("GetTouchByFingerId");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "GetTouchByFingerId", false),
                    GetTouchByFingerId);
            }
        }

        internal static event Delegates.GetTouchByFingerId_BeforeArgs _beforeGetTouchByFingerId;
        internal static event Delegates.GetTouchByFingerId_NormalArgs _afterGetTouchByFingerId;

        private static Touch GetTouchByFingerId(Func<int, Touch> orig, int fingerId)
        {
            Delegates.Params_GetTouchByFingerId @params = new()
            {
                fingerId = fingerId
            };
            _beforeGetTouchByFingerId?.Invoke(@params);
            fingerId = @params.fingerId;
            var retVal = orig(fingerId);
            if (_afterGetTouchByFingerId != null) retVal = _afterGetTouchByFingerId.Invoke(@params);
            return retVal;
        }

        internal static void HookScreenToWorldPoint()
        {
            if (!HookedList.Contains("ScreenToWorldPoint"))
            {
                HookedList.Add("ScreenToWorldPoint");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ScreenToWorldPoint", false),
                    ScreenToWorldPoint);
            }
        }

        internal static event Delegates.ScreenToWorldPoint_BeforeArgs _beforeScreenToWorldPoint;
        internal static event Delegates.ScreenToWorldPoint_NormalArgs _afterScreenToWorldPoint;

        private static Vector3 ScreenToWorldPoint(Func<Vector2, Vector3> orig, Vector2 point)
        {
            Delegates.Params_ScreenToWorldPoint @params = new()
            {
                point = point
            };
            _beforeScreenToWorldPoint?.Invoke(@params);
            point = @params.point;
            var retVal = orig(point);
            if (_afterScreenToWorldPoint != null) retVal = _afterScreenToWorldPoint.Invoke(@params);
            return retVal;
        }

        internal static void HookViewToWorldPoint()
        {
            if (!HookedList.Contains("ViewToWorldPoint"))
            {
                HookedList.Add("ViewToWorldPoint");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ViewToWorldPoint", false),
                    ViewToWorldPoint);
            }
        }

        internal static event Delegates.ViewToWorldPoint_BeforeArgs _beforeViewToWorldPoint;
        internal static event Delegates.ViewToWorldPoint_NormalArgs _afterViewToWorldPoint;

        private static Vector3 ViewToWorldPoint(Func<Vector2, Vector3> orig, Vector2 point)
        {
            Delegates.Params_ViewToWorldPoint @params = new()
            {
                point = point
            };
            _beforeViewToWorldPoint?.Invoke(@params);
            point = @params.point;
            var retVal = orig(point);
            if (_afterViewToWorldPoint != null) retVal = _afterViewToWorldPoint.Invoke(@params);
            return retVal;
        }

        internal static void HookScreenToViewPoint()
        {
            if (!HookedList.Contains("ScreenToViewPoint"))
            {
                HookedList.Add("ScreenToViewPoint");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ScreenToViewPoint", false),
                    ScreenToViewPoint);
            }
        }

        internal static event Delegates.ScreenToViewPoint_BeforeArgs _beforeScreenToViewPoint;
        internal static event Delegates.ScreenToViewPoint_NormalArgs _afterScreenToViewPoint;

        private static Vector3 ScreenToViewPoint(Func<Vector2, Vector3> orig, Vector2 point)
        {
            Delegates.Params_ScreenToViewPoint @params = new()
            {
                point = point
            };
            _beforeScreenToViewPoint?.Invoke(@params);
            point = @params.point;
            var retVal = orig(point);
            if (_afterScreenToViewPoint != null) retVal = _afterScreenToViewPoint.Invoke(@params);
            return retVal;
        }

        internal static void HookConvertToWorld_float_TouchUnitType()
        {
            if (!HookedList.Contains("ConvertToWorld_float_TouchUnitType"))
            {
                HookedList.Add("ConvertToWorld_float_TouchUnitType");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ConvertToWorld_float_TouchUnitType", false),
                    ConvertToWorld_float_TouchUnitType);
            }
        }

        internal static event Delegates.ConvertToWorld_float_TouchUnitType_BeforeArgs
            _beforeConvertToWorld_float_TouchUnitType;

        internal static event Delegates.ConvertToWorld_float_TouchUnitType_NormalArgs
            _afterConvertToWorld_float_TouchUnitType;

        private static float ConvertToWorld_float_TouchUnitType(Func<float, TouchUnitType, float> orig, float value,
            TouchUnitType unitType)
        {
            Delegates.Params_ConvertToWorld_float_TouchUnitType @params = new()
            {
                value = value, unitType = unitType
            };
            _beforeConvertToWorld_float_TouchUnitType?.Invoke(@params);
            value = @params.value;
            unitType = @params.unitType;
            var retVal = orig(value, unitType);
            if (_afterConvertToWorld_float_TouchUnitType != null)
                retVal = _afterConvertToWorld_float_TouchUnitType.Invoke(@params);
            return retVal;
        }

        internal static void HookPercentToWorldRect()
        {
            if (!HookedList.Contains("PercentToWorldRect"))
            {
                HookedList.Add("PercentToWorldRect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "PercentToWorldRect", false),
                    PercentToWorldRect);
            }
        }

        internal static event Delegates.PercentToWorldRect_BeforeArgs _beforePercentToWorldRect;
        internal static event Delegates.PercentToWorldRect_NormalArgs _afterPercentToWorldRect;

        private static Rect PercentToWorldRect(Func<Rect, Rect> orig, Rect rect)
        {
            Delegates.Params_PercentToWorldRect @params = new()
            {
                rect = rect
            };
            _beforePercentToWorldRect?.Invoke(@params);
            rect = @params.rect;
            var retVal = orig(rect);
            if (_afterPercentToWorldRect != null) retVal = _afterPercentToWorldRect.Invoke(@params);
            return retVal;
        }

        internal static void HookPixelToWorldRect()
        {
            if (!HookedList.Contains("PixelToWorldRect"))
            {
                HookedList.Add("PixelToWorldRect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "PixelToWorldRect", false),
                    PixelToWorldRect);
            }
        }

        internal static event Delegates.PixelToWorldRect_BeforeArgs _beforePixelToWorldRect;
        internal static event Delegates.PixelToWorldRect_NormalArgs _afterPixelToWorldRect;

        private static Rect PixelToWorldRect(Func<Rect, Rect> orig, Rect rect)
        {
            Delegates.Params_PixelToWorldRect @params = new()
            {
                rect = rect
            };
            _beforePixelToWorldRect?.Invoke(@params);
            rect = @params.rect;
            var retVal = orig(rect);
            if (_afterPixelToWorldRect != null) retVal = _afterPixelToWorldRect.Invoke(@params);
            return retVal;
        }

        internal static void HookConvertToWorld_Rect_TouchUnitType()
        {
            if (!HookedList.Contains("ConvertToWorld_Rect_TouchUnitType"))
            {
                HookedList.Add("ConvertToWorld_Rect_TouchUnitType");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ConvertToWorld_Rect_TouchUnitType", false),
                    ConvertToWorld_Rect_TouchUnitType);
            }
        }

        internal static event Delegates.ConvertToWorld_Rect_TouchUnitType_BeforeArgs
            _beforeConvertToWorld_Rect_TouchUnitType;

        internal static event Delegates.ConvertToWorld_Rect_TouchUnitType_NormalArgs
            _afterConvertToWorld_Rect_TouchUnitType;

        private static Rect ConvertToWorld_Rect_TouchUnitType(Func<Rect, TouchUnitType, Rect> orig, Rect rect,
            TouchUnitType unitType)
        {
            Delegates.Params_ConvertToWorld_Rect_TouchUnitType @params = new()
            {
                rect = rect, unitType = unitType
            };
            _beforeConvertToWorld_Rect_TouchUnitType?.Invoke(@params);
            rect = @params.rect;
            unitType = @params.unitType;
            var retVal = orig(rect, unitType);
            if (_afterConvertToWorld_Rect_TouchUnitType != null)
                retVal = _afterConvertToWorld_Rect_TouchUnitType.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_Camera()
        {
            if (!HookedList.Contains("get_Camera"))
            {
                HookedList.Add("get_Camera");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_Camera", false), get_Camera);
            }
        }

        internal static event Delegates.get_Camera_BeforeArgs _beforeget_Camera;
        internal static event Delegates.get_Camera_NormalArgs _afterget_Camera;

        private static Camera get_Camera(Func<Camera> orig)
        {
            _beforeget_Camera?.Invoke();
            var retVal = orig();
            if (_afterget_Camera != null) retVal = _afterget_Camera.Invoke();
            return retVal;
        }

        internal static void Hookget_Device()
        {
            if (!HookedList.Contains("get_Device"))
            {
                HookedList.Add("get_Device");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_Device", false), get_Device);
            }
        }

        internal static event Delegates.get_Device_BeforeArgs _beforeget_Device;
        internal static event Delegates.get_Device_NormalArgs _afterget_Device;

        private static InputDevice get_Device(Func<InputDevice> orig)
        {
            _beforeget_Device?.Invoke();
            var retVal = orig();
            if (_afterget_Device != null) retVal = _afterget_Device.Invoke();
            return retVal;
        }

        internal static void Hookget_ViewSize()
        {
            if (!HookedList.Contains("get_ViewSize"))
            {
                HookedList.Add("get_ViewSize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_ViewSize", false), get_ViewSize);
            }
        }

        internal static event Delegates.get_ViewSize_BeforeArgs _beforeget_ViewSize;
        internal static event Delegates.get_ViewSize_NormalArgs _afterget_ViewSize;

        private static Vector3 get_ViewSize(Func<Vector3> orig)
        {
            _beforeget_ViewSize?.Invoke();
            var retVal = orig();
            if (_afterget_ViewSize != null) retVal = _afterget_ViewSize.Invoke();
            return retVal;
        }

        internal static void Hookget_PercentToWorld()
        {
            if (!HookedList.Contains("get_PercentToWorld"))
            {
                HookedList.Add("get_PercentToWorld");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_PercentToWorld", false),
                    get_PercentToWorld);
            }
        }

        internal static event Delegates.get_PercentToWorld_BeforeArgs _beforeget_PercentToWorld;
        internal static event Delegates.get_PercentToWorld_NormalArgs _afterget_PercentToWorld;

        private static float get_PercentToWorld(Func<float> orig)
        {
            _beforeget_PercentToWorld?.Invoke();
            var retVal = orig();
            if (_afterget_PercentToWorld != null) retVal = _afterget_PercentToWorld.Invoke();
            return retVal;
        }

        internal static void Hookget_HalfPercentToWorld()
        {
            if (!HookedList.Contains("get_HalfPercentToWorld"))
            {
                HookedList.Add("get_HalfPercentToWorld");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_HalfPercentToWorld", false),
                    get_HalfPercentToWorld);
            }
        }

        internal static event Delegates.get_HalfPercentToWorld_BeforeArgs _beforeget_HalfPercentToWorld;
        internal static event Delegates.get_HalfPercentToWorld_NormalArgs _afterget_HalfPercentToWorld;

        private static float get_HalfPercentToWorld(Func<float> orig)
        {
            _beforeget_HalfPercentToWorld?.Invoke();
            var retVal = orig();
            if (_afterget_HalfPercentToWorld != null) retVal = _afterget_HalfPercentToWorld.Invoke();
            return retVal;
        }

        internal static void Hookget_PixelToWorld()
        {
            if (!HookedList.Contains("get_PixelToWorld"))
            {
                HookedList.Add("get_PixelToWorld");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_PixelToWorld", false),
                    get_PixelToWorld);
            }
        }

        internal static event Delegates.get_PixelToWorld_BeforeArgs _beforeget_PixelToWorld;
        internal static event Delegates.get_PixelToWorld_NormalArgs _afterget_PixelToWorld;

        private static float get_PixelToWorld(Func<float> orig)
        {
            _beforeget_PixelToWorld?.Invoke();
            var retVal = orig();
            if (_afterget_PixelToWorld != null) retVal = _afterget_PixelToWorld.Invoke();
            return retVal;
        }

        internal static void Hookget_HalfPixelToWorld()
        {
            if (!HookedList.Contains("get_HalfPixelToWorld"))
            {
                HookedList.Add("get_HalfPixelToWorld");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_HalfPixelToWorld", false),
                    get_HalfPixelToWorld);
            }
        }

        internal static event Delegates.get_HalfPixelToWorld_BeforeArgs _beforeget_HalfPixelToWorld;
        internal static event Delegates.get_HalfPixelToWorld_NormalArgs _afterget_HalfPixelToWorld;

        private static float get_HalfPixelToWorld(Func<float> orig)
        {
            _beforeget_HalfPixelToWorld?.Invoke();
            var retVal = orig();
            if (_afterget_HalfPixelToWorld != null) retVal = _afterget_HalfPixelToWorld.Invoke();
            return retVal;
        }

        internal static void Hookget_ScreenSize()
        {
            if (!HookedList.Contains("get_ScreenSize"))
            {
                HookedList.Add("get_ScreenSize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_ScreenSize", false), get_ScreenSize);
            }
        }

        internal static event Delegates.get_ScreenSize_BeforeArgs _beforeget_ScreenSize;
        internal static event Delegates.get_ScreenSize_NormalArgs _afterget_ScreenSize;

        private static Vector2 get_ScreenSize(Func<Vector2> orig)
        {
            _beforeget_ScreenSize?.Invoke();
            var retVal = orig();
            if (_afterget_ScreenSize != null) retVal = _afterget_ScreenSize.Invoke();
            return retVal;
        }

        internal static void Hookget_HalfScreenSize()
        {
            if (!HookedList.Contains("get_HalfScreenSize"))
            {
                HookedList.Add("get_HalfScreenSize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_HalfScreenSize", false),
                    get_HalfScreenSize);
            }
        }

        internal static event Delegates.get_HalfScreenSize_BeforeArgs _beforeget_HalfScreenSize;
        internal static event Delegates.get_HalfScreenSize_NormalArgs _afterget_HalfScreenSize;

        private static Vector2 get_HalfScreenSize(Func<Vector2> orig)
        {
            _beforeget_HalfScreenSize?.Invoke();
            var retVal = orig();
            if (_afterget_HalfScreenSize != null) retVal = _afterget_HalfScreenSize.Invoke();
            return retVal;
        }

        internal static void Hookget_ControlsEnabled()
        {
            if (!HookedList.Contains("get_ControlsEnabled"))
            {
                HookedList.Add("get_ControlsEnabled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_ControlsEnabled", false),
                    get_ControlsEnabled);
            }
        }

        internal static event Delegates.get_ControlsEnabled_BeforeArgs _beforeget_ControlsEnabled;
        internal static event Delegates.get_ControlsEnabled_NormalArgs _afterget_ControlsEnabled;

        private static bool get_ControlsEnabled(Func<bool> orig)
        {
            _beforeget_ControlsEnabled?.Invoke();
            var retVal = orig();
            if (_afterget_ControlsEnabled != null) retVal = _afterget_ControlsEnabled.Invoke();
            return retVal;
        }

        internal static void Hookset_ControlsEnabled()
        {
            if (!HookedList.Contains("set_ControlsEnabled"))
            {
                HookedList.Add("set_ControlsEnabled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "set_ControlsEnabled", false),
                    set_ControlsEnabled);
            }
        }

        internal static event Delegates.set_ControlsEnabled_BeforeArgs _beforeset_ControlsEnabled;
        internal static event Delegates.set_ControlsEnabled_NormalArgs _afterset_ControlsEnabled;

        private static void set_ControlsEnabled(Action<bool> orig, bool value)
        {
            Delegates.Params_set_ControlsEnabled @params = new()
            {
                value = value
            };
            _beforeset_ControlsEnabled?.Invoke(@params);
            value = @params.value;
            orig(value);
            if (_afterset_ControlsEnabled != null) _afterset_ControlsEnabled.Invoke(@params);
        }

        internal static void Hookop_Implicit()
        {
            if (!HookedList.Contains("op_Implicit"))
            {
                HookedList.Add("op_Implicit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchManager), "op_Implicit", false), op_Implicit);
            }
        }

        internal static event Delegates.op_Implicit_BeforeArgs _beforeop_Implicit;
        internal static event Delegates.op_Implicit_NormalArgs _afterop_Implicit;

        private static bool op_Implicit(Func<TouchManager, bool> orig, TouchManager instance)
        {
            Delegates.Params_op_Implicit @params = new()
            {
                instance = instance
            };
            _beforeop_Implicit?.Invoke(@params);
            instance = @params.instance;
            var retVal = orig(instance);
            if (_afterop_Implicit != null) retVal = _afterop_Implicit.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void CommitControlStates_BeforeArgs(Params_CommitControlStates args);

        public delegate void CommitControlStates_NormalArgs(Params_CommitControlStates args);

        public delegate void CommitDevice_BeforeArgs(Params_CommitDevice args);

        public delegate void CommitDevice_NormalArgs(Params_CommitDevice args);

        public delegate void ConvertScreenToViewPoint_BeforeArgs(Params_ConvertScreenToViewPoint args);

        public delegate Vector3 ConvertScreenToViewPoint_NormalArgs(Params_ConvertScreenToViewPoint args);

        public delegate void ConvertScreenToWorldPoint_BeforeArgs(Params_ConvertScreenToWorldPoint args);

        public delegate Vector3 ConvertScreenToWorldPoint_NormalArgs(Params_ConvertScreenToWorldPoint args);

        public delegate void ConvertToWorld_float_TouchUnitType_BeforeArgs(
            Params_ConvertToWorld_float_TouchUnitType args);

        public delegate float ConvertToWorld_float_TouchUnitType_NormalArgs(
            Params_ConvertToWorld_float_TouchUnitType args);

        public delegate void
            ConvertToWorld_Rect_TouchUnitType_BeforeArgs(Params_ConvertToWorld_Rect_TouchUnitType args);

        public delegate Rect
            ConvertToWorld_Rect_TouchUnitType_NormalArgs(Params_ConvertToWorld_Rect_TouchUnitType args);

        public delegate void ConvertViewToWorldPoint_BeforeArgs(Params_ConvertViewToWorldPoint args);

        public delegate Vector3 ConvertViewToWorldPoint_NormalArgs(Params_ConvertViewToWorldPoint args);

        public delegate void CreateDevice_BeforeArgs(Params_CreateDevice args);

        public delegate void CreateDevice_NormalArgs(Params_CreateDevice args);

        public delegate void CreateTouches_BeforeArgs(Params_CreateTouches args);

        public delegate void CreateTouches_NormalArgs(Params_CreateTouches args);

        public delegate void get_Camera_BeforeArgs();

        public delegate Camera get_Camera_NormalArgs();

        public delegate void get_controlsEnabled_BeforeArgs(Params_get_controlsEnabled args);

        public delegate void get_ControlsEnabled_BeforeArgs();

        public delegate bool get_controlsEnabled_NormalArgs(Params_get_controlsEnabled args);

        public delegate bool get_ControlsEnabled_NormalArgs();

        public delegate void get_Device_BeforeArgs();

        public delegate InputDevice get_Device_NormalArgs();

        public delegate void get_HalfPercentToWorld_BeforeArgs();

        public delegate float get_HalfPercentToWorld_NormalArgs();

        public delegate void get_HalfPixelToWorld_BeforeArgs();

        public delegate float get_HalfPixelToWorld_NormalArgs();

        public delegate void get_HalfScreenSize_BeforeArgs();

        public delegate Vector2 get_HalfScreenSize_NormalArgs();

        public delegate void get_PercentToWorld_BeforeArgs();

        public delegate float get_PercentToWorld_NormalArgs();

        public delegate void get_PixelToWorld_BeforeArgs();

        public delegate float get_PixelToWorld_NormalArgs();

        public delegate void get_ScreenSize_BeforeArgs();

        public delegate Vector2 get_ScreenSize_NormalArgs();

        public delegate void get_TouchCount_BeforeArgs();

        public delegate int get_TouchCount_NormalArgs();

        public delegate void get_Touches_BeforeArgs();

        public delegate ReadOnlyCollection<Touch> get_Touches_NormalArgs();

        public delegate void get_ViewSize_BeforeArgs();

        public delegate Vector3 get_ViewSize_NormalArgs();

        public delegate void GetCurrentScreenSize_BeforeArgs(Params_GetCurrentScreenSize args);

        public delegate Vector2 GetCurrentScreenSize_NormalArgs(Params_GetCurrentScreenSize args);

        public delegate void GetTouch_BeforeArgs(Params_GetTouch args);

        public delegate Touch GetTouch_NormalArgs(Params_GetTouch args);

        public delegate void GetTouchByFingerId_BeforeArgs(Params_GetTouchByFingerId args);

        public delegate Touch GetTouchByFingerId_NormalArgs(Params_GetTouchByFingerId args);

        public delegate void InvokeTouchEvents_BeforeArgs(Params_InvokeTouchEvents args);

        public delegate void InvokeTouchEvents_NormalArgs(Params_InvokeTouchEvents args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void op_Implicit_BeforeArgs(Params_op_Implicit args);

        public delegate bool op_Implicit_NormalArgs(Params_op_Implicit args);

        public delegate void PercentToWorldRect_BeforeArgs(Params_PercentToWorldRect args);

        public delegate Rect PercentToWorldRect_NormalArgs(Params_PercentToWorldRect args);

        public delegate void PixelToWorldRect_BeforeArgs(Params_PixelToWorldRect args);

        public delegate Rect PixelToWorldRect_NormalArgs(Params_PixelToWorldRect args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public delegate void ScreenToViewPoint_BeforeArgs(Params_ScreenToViewPoint args);

        public delegate Vector3 ScreenToViewPoint_NormalArgs(Params_ScreenToViewPoint args);

        public delegate void ScreenToWorldPoint_BeforeArgs(Params_ScreenToWorldPoint args);

        public delegate Vector3 ScreenToWorldPoint_NormalArgs(Params_ScreenToWorldPoint args);

        public delegate void SendTouchBegan_BeforeArgs(Params_SendTouchBegan args);

        public delegate void SendTouchBegan_NormalArgs(Params_SendTouchBegan args);

        public delegate void SendTouchEnded_BeforeArgs(Params_SendTouchEnded args);

        public delegate void SendTouchEnded_NormalArgs(Params_SendTouchEnded args);

        public delegate void SendTouchMoved_BeforeArgs(Params_SendTouchMoved args);

        public delegate void SendTouchMoved_NormalArgs(Params_SendTouchMoved args);

        public delegate void set_controlsEnabled_BeforeArgs(Params_set_controlsEnabled args);

        public delegate void set_ControlsEnabled_BeforeArgs(Params_set_ControlsEnabled args);

        public delegate void set_controlsEnabled_NormalArgs(Params_set_controlsEnabled args);

        public delegate void set_ControlsEnabled_NormalArgs(Params_set_ControlsEnabled args);

        public delegate void Setup_BeforeArgs(Params_Setup args);

        public delegate void Setup_NormalArgs(Params_Setup args);

        public delegate void SubmitControlStates_BeforeArgs(Params_SubmitControlStates args);

        public delegate void SubmitControlStates_NormalArgs(Params_SubmitControlStates args);

        public delegate void TouchCameraIsValid_BeforeArgs(Params_TouchCameraIsValid args);

        public delegate bool TouchCameraIsValid_NormalArgs(Params_TouchCameraIsValid args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public delegate void UpdateDevice_BeforeArgs(Params_UpdateDevice args);

        public delegate void UpdateDevice_NormalArgs(Params_UpdateDevice args);

        public delegate void UpdateScreenSize_BeforeArgs(Params_UpdateScreenSize args);

        public delegate void UpdateScreenSize_NormalArgs(Params_UpdateScreenSize args);

        public delegate void UpdateScreenSizeAtEndOfFrame_BeforeArgs(Params_UpdateScreenSizeAtEndOfFrame args);

        public delegate IEnumerator UpdateScreenSizeAtEndOfFrame_NormalArgs(Params_UpdateScreenSizeAtEndOfFrame args);

        public delegate void UpdateTouches_BeforeArgs(Params_UpdateTouches args);

        public delegate void UpdateTouches_NormalArgs(Params_UpdateTouches args);

        public delegate void ViewToWorldPoint_BeforeArgs(Params_ViewToWorldPoint args);

        public delegate Vector3 ViewToWorldPoint_NormalArgs(Params_ViewToWorldPoint args);

        public sealed class Params_OnEnable
        {
            public TouchManager self;
        }

        public sealed class Params_OnDisable
        {
            public TouchManager self;
        }

        public sealed class Params_Setup
        {
            public TouchManager self;
        }

        public sealed class Params_Reset
        {
            public TouchManager self;
        }

        public sealed class Params_UpdateScreenSizeAtEndOfFrame
        {
            public TouchManager self;
        }

        public sealed class Params_Update
        {
            public TouchManager self;
        }

        public sealed class Params_CreateDevice
        {
            public TouchManager self;
        }

        public sealed class Params_UpdateDevice
        {
            public float deltaTime;
            public TouchManager self;
            public ulong updateTick;
        }

        public sealed class Params_CommitDevice
        {
            public float deltaTime;
            public TouchManager self;
            public ulong updateTick;
        }

        public sealed class Params_SubmitControlStates
        {
            public float deltaTime;
            public TouchManager self;
            public ulong updateTick;
        }

        public sealed class Params_CommitControlStates
        {
            public float deltaTime;
            public TouchManager self;
            public ulong updateTick;
        }

        public sealed class Params_UpdateScreenSize
        {
            public Vector2 currentScreenSize;
            public TouchManager self;
        }

        public sealed class Params_CreateTouches
        {
            public TouchManager self;
        }

        public sealed class Params_UpdateTouches
        {
            public float deltaTime;
            public TouchManager self;
            public ulong updateTick;
        }

        public sealed class Params_SendTouchBegan
        {
            public TouchManager self;
            public Touch touch;
        }

        public sealed class Params_SendTouchMoved
        {
            public TouchManager self;
            public Touch touch;
        }

        public sealed class Params_SendTouchEnded
        {
            public TouchManager self;
            public Touch touch;
        }

        public sealed class Params_InvokeTouchEvents
        {
            public TouchManager self;
        }

        public sealed class Params_TouchCameraIsValid
        {
            public TouchManager self;
        }

        public sealed class Params_ConvertScreenToWorldPoint
        {
            public Vector2 point;
            public TouchManager self;
        }

        public sealed class Params_ConvertViewToWorldPoint
        {
            public Vector2 point;
            public TouchManager self;
        }

        public sealed class Params_ConvertScreenToViewPoint
        {
            public Vector2 point;
            public TouchManager self;
        }

        public sealed class Params_GetCurrentScreenSize
        {
            public TouchManager self;
        }

        public sealed class Params_get_controlsEnabled
        {
            public TouchManager self;
        }

        public sealed class Params_set_controlsEnabled
        {
            public TouchManager self;
            public bool value;
        }

        public sealed class Params_GetTouch
        {
            public int touchIndex;
        }

        public sealed class Params_GetTouchByFingerId
        {
            public int fingerId;
        }

        public sealed class Params_ScreenToWorldPoint
        {
            public Vector2 point;
        }

        public sealed class Params_ViewToWorldPoint
        {
            public Vector2 point;
        }

        public sealed class Params_ScreenToViewPoint
        {
            public Vector2 point;
        }

        public sealed class Params_ConvertToWorld_float_TouchUnitType
        {
            public TouchUnitType unitType;
            public float value;
        }

        public sealed class Params_PercentToWorldRect
        {
            public Rect rect;
        }

        public sealed class Params_PixelToWorldRect
        {
            public Rect rect;
        }

        public sealed class Params_ConvertToWorld_Rect_TouchUnitType
        {
            public Rect rect;
            public TouchUnitType unitType;
        }

        public sealed class Params_set_ControlsEnabled
        {
            public bool value;
        }

        public sealed class Params_op_Implicit
        {
            public TouchManager instance;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.Setup_BeforeArgs Setup
        {
            add
            {
                HookHandler._beforeSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._beforeSetup -= value;
        }

        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.UpdateScreenSizeAtEndOfFrame_BeforeArgs UpdateScreenSizeAtEndOfFrame
        {
            add
            {
                HookHandler._beforeUpdateScreenSizeAtEndOfFrame += value;
                HookHandler.HookUpdateScreenSizeAtEndOfFrame();
            }
            remove => HookHandler._beforeUpdateScreenSizeAtEndOfFrame -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.CreateDevice_BeforeArgs CreateDevice
        {
            add
            {
                HookHandler._beforeCreateDevice += value;
                HookHandler.HookCreateDevice();
            }
            remove => HookHandler._beforeCreateDevice -= value;
        }

        public static event Delegates.UpdateDevice_BeforeArgs UpdateDevice
        {
            add
            {
                HookHandler._beforeUpdateDevice += value;
                HookHandler.HookUpdateDevice();
            }
            remove => HookHandler._beforeUpdateDevice -= value;
        }

        public static event Delegates.CommitDevice_BeforeArgs CommitDevice
        {
            add
            {
                HookHandler._beforeCommitDevice += value;
                HookHandler.HookCommitDevice();
            }
            remove => HookHandler._beforeCommitDevice -= value;
        }

        public static event Delegates.SubmitControlStates_BeforeArgs SubmitControlStates
        {
            add
            {
                HookHandler._beforeSubmitControlStates += value;
                HookHandler.HookSubmitControlStates();
            }
            remove => HookHandler._beforeSubmitControlStates -= value;
        }

        public static event Delegates.CommitControlStates_BeforeArgs CommitControlStates
        {
            add
            {
                HookHandler._beforeCommitControlStates += value;
                HookHandler.HookCommitControlStates();
            }
            remove => HookHandler._beforeCommitControlStates -= value;
        }

        public static event Delegates.UpdateScreenSize_BeforeArgs UpdateScreenSize
        {
            add
            {
                HookHandler._beforeUpdateScreenSize += value;
                HookHandler.HookUpdateScreenSize();
            }
            remove => HookHandler._beforeUpdateScreenSize -= value;
        }

        public static event Delegates.CreateTouches_BeforeArgs CreateTouches
        {
            add
            {
                HookHandler._beforeCreateTouches += value;
                HookHandler.HookCreateTouches();
            }
            remove => HookHandler._beforeCreateTouches -= value;
        }

        public static event Delegates.UpdateTouches_BeforeArgs UpdateTouches
        {
            add
            {
                HookHandler._beforeUpdateTouches += value;
                HookHandler.HookUpdateTouches();
            }
            remove => HookHandler._beforeUpdateTouches -= value;
        }

        public static event Delegates.SendTouchBegan_BeforeArgs SendTouchBegan
        {
            add
            {
                HookHandler._beforeSendTouchBegan += value;
                HookHandler.HookSendTouchBegan();
            }
            remove => HookHandler._beforeSendTouchBegan -= value;
        }

        public static event Delegates.SendTouchMoved_BeforeArgs SendTouchMoved
        {
            add
            {
                HookHandler._beforeSendTouchMoved += value;
                HookHandler.HookSendTouchMoved();
            }
            remove => HookHandler._beforeSendTouchMoved -= value;
        }

        public static event Delegates.SendTouchEnded_BeforeArgs SendTouchEnded
        {
            add
            {
                HookHandler._beforeSendTouchEnded += value;
                HookHandler.HookSendTouchEnded();
            }
            remove => HookHandler._beforeSendTouchEnded -= value;
        }

        public static event Delegates.InvokeTouchEvents_BeforeArgs InvokeTouchEvents
        {
            add
            {
                HookHandler._beforeInvokeTouchEvents += value;
                HookHandler.HookInvokeTouchEvents();
            }
            remove => HookHandler._beforeInvokeTouchEvents -= value;
        }

        public static event Delegates.TouchCameraIsValid_BeforeArgs TouchCameraIsValid
        {
            add
            {
                HookHandler._beforeTouchCameraIsValid += value;
                HookHandler.HookTouchCameraIsValid();
            }
            remove => HookHandler._beforeTouchCameraIsValid -= value;
        }

        public static event Delegates.ConvertScreenToWorldPoint_BeforeArgs ConvertScreenToWorldPoint
        {
            add
            {
                HookHandler._beforeConvertScreenToWorldPoint += value;
                HookHandler.HookConvertScreenToWorldPoint();
            }
            remove => HookHandler._beforeConvertScreenToWorldPoint -= value;
        }

        public static event Delegates.ConvertViewToWorldPoint_BeforeArgs ConvertViewToWorldPoint
        {
            add
            {
                HookHandler._beforeConvertViewToWorldPoint += value;
                HookHandler.HookConvertViewToWorldPoint();
            }
            remove => HookHandler._beforeConvertViewToWorldPoint -= value;
        }

        public static event Delegates.ConvertScreenToViewPoint_BeforeArgs ConvertScreenToViewPoint
        {
            add
            {
                HookHandler._beforeConvertScreenToViewPoint += value;
                HookHandler.HookConvertScreenToViewPoint();
            }
            remove => HookHandler._beforeConvertScreenToViewPoint -= value;
        }

        public static event Delegates.GetCurrentScreenSize_BeforeArgs GetCurrentScreenSize
        {
            add
            {
                HookHandler._beforeGetCurrentScreenSize += value;
                HookHandler.HookGetCurrentScreenSize();
            }
            remove => HookHandler._beforeGetCurrentScreenSize -= value;
        }

        public static event Delegates.get_controlsEnabled_BeforeArgs get_controlsEnabled
        {
            add
            {
                HookHandler._beforeget_controlsEnabled += value;
                HookHandler.Hookget_controlsEnabled();
            }
            remove => HookHandler._beforeget_controlsEnabled -= value;
        }

        public static event Delegates.set_controlsEnabled_BeforeArgs set_controlsEnabled
        {
            add
            {
                HookHandler._beforeset_controlsEnabled += value;
                HookHandler.Hookset_controlsEnabled();
            }
            remove => HookHandler._beforeset_controlsEnabled -= value;
        }

        public static event Delegates.get_Touches_BeforeArgs get_Touches
        {
            add
            {
                HookHandler._beforeget_Touches += value;
                HookHandler.Hookget_Touches();
            }
            remove => HookHandler._beforeget_Touches -= value;
        }

        public static event Delegates.get_TouchCount_BeforeArgs get_TouchCount
        {
            add
            {
                HookHandler._beforeget_TouchCount += value;
                HookHandler.Hookget_TouchCount();
            }
            remove => HookHandler._beforeget_TouchCount -= value;
        }

        public static event Delegates.GetTouch_BeforeArgs GetTouch
        {
            add
            {
                HookHandler._beforeGetTouch += value;
                HookHandler.HookGetTouch();
            }
            remove => HookHandler._beforeGetTouch -= value;
        }

        public static event Delegates.GetTouchByFingerId_BeforeArgs GetTouchByFingerId
        {
            add
            {
                HookHandler._beforeGetTouchByFingerId += value;
                HookHandler.HookGetTouchByFingerId();
            }
            remove => HookHandler._beforeGetTouchByFingerId -= value;
        }

        public static event Delegates.ScreenToWorldPoint_BeforeArgs ScreenToWorldPoint
        {
            add
            {
                HookHandler._beforeScreenToWorldPoint += value;
                HookHandler.HookScreenToWorldPoint();
            }
            remove => HookHandler._beforeScreenToWorldPoint -= value;
        }

        public static event Delegates.ViewToWorldPoint_BeforeArgs ViewToWorldPoint
        {
            add
            {
                HookHandler._beforeViewToWorldPoint += value;
                HookHandler.HookViewToWorldPoint();
            }
            remove => HookHandler._beforeViewToWorldPoint -= value;
        }

        public static event Delegates.ScreenToViewPoint_BeforeArgs ScreenToViewPoint
        {
            add
            {
                HookHandler._beforeScreenToViewPoint += value;
                HookHandler.HookScreenToViewPoint();
            }
            remove => HookHandler._beforeScreenToViewPoint -= value;
        }

        public static event Delegates.ConvertToWorld_float_TouchUnitType_BeforeArgs ConvertToWorld_float_TouchUnitType
        {
            add
            {
                HookHandler._beforeConvertToWorld_float_TouchUnitType += value;
                HookHandler.HookConvertToWorld_float_TouchUnitType();
            }
            remove => HookHandler._beforeConvertToWorld_float_TouchUnitType -= value;
        }

        public static event Delegates.PercentToWorldRect_BeforeArgs PercentToWorldRect
        {
            add
            {
                HookHandler._beforePercentToWorldRect += value;
                HookHandler.HookPercentToWorldRect();
            }
            remove => HookHandler._beforePercentToWorldRect -= value;
        }

        public static event Delegates.PixelToWorldRect_BeforeArgs PixelToWorldRect
        {
            add
            {
                HookHandler._beforePixelToWorldRect += value;
                HookHandler.HookPixelToWorldRect();
            }
            remove => HookHandler._beforePixelToWorldRect -= value;
        }

        public static event Delegates.ConvertToWorld_Rect_TouchUnitType_BeforeArgs ConvertToWorld_Rect_TouchUnitType
        {
            add
            {
                HookHandler._beforeConvertToWorld_Rect_TouchUnitType += value;
                HookHandler.HookConvertToWorld_Rect_TouchUnitType();
            }
            remove => HookHandler._beforeConvertToWorld_Rect_TouchUnitType -= value;
        }

        public static event Delegates.get_Camera_BeforeArgs get_Camera
        {
            add
            {
                HookHandler._beforeget_Camera += value;
                HookHandler.Hookget_Camera();
            }
            remove => HookHandler._beforeget_Camera -= value;
        }

        public static event Delegates.get_Device_BeforeArgs get_Device
        {
            add
            {
                HookHandler._beforeget_Device += value;
                HookHandler.Hookget_Device();
            }
            remove => HookHandler._beforeget_Device -= value;
        }

        public static event Delegates.get_ViewSize_BeforeArgs get_ViewSize
        {
            add
            {
                HookHandler._beforeget_ViewSize += value;
                HookHandler.Hookget_ViewSize();
            }
            remove => HookHandler._beforeget_ViewSize -= value;
        }

        public static event Delegates.get_PercentToWorld_BeforeArgs get_PercentToWorld
        {
            add
            {
                HookHandler._beforeget_PercentToWorld += value;
                HookHandler.Hookget_PercentToWorld();
            }
            remove => HookHandler._beforeget_PercentToWorld -= value;
        }

        public static event Delegates.get_HalfPercentToWorld_BeforeArgs get_HalfPercentToWorld
        {
            add
            {
                HookHandler._beforeget_HalfPercentToWorld += value;
                HookHandler.Hookget_HalfPercentToWorld();
            }
            remove => HookHandler._beforeget_HalfPercentToWorld -= value;
        }

        public static event Delegates.get_PixelToWorld_BeforeArgs get_PixelToWorld
        {
            add
            {
                HookHandler._beforeget_PixelToWorld += value;
                HookHandler.Hookget_PixelToWorld();
            }
            remove => HookHandler._beforeget_PixelToWorld -= value;
        }

        public static event Delegates.get_HalfPixelToWorld_BeforeArgs get_HalfPixelToWorld
        {
            add
            {
                HookHandler._beforeget_HalfPixelToWorld += value;
                HookHandler.Hookget_HalfPixelToWorld();
            }
            remove => HookHandler._beforeget_HalfPixelToWorld -= value;
        }

        public static event Delegates.get_ScreenSize_BeforeArgs get_ScreenSize
        {
            add
            {
                HookHandler._beforeget_ScreenSize += value;
                HookHandler.Hookget_ScreenSize();
            }
            remove => HookHandler._beforeget_ScreenSize -= value;
        }

        public static event Delegates.get_HalfScreenSize_BeforeArgs get_HalfScreenSize
        {
            add
            {
                HookHandler._beforeget_HalfScreenSize += value;
                HookHandler.Hookget_HalfScreenSize();
            }
            remove => HookHandler._beforeget_HalfScreenSize -= value;
        }

        public static event Delegates.get_ControlsEnabled_BeforeArgs get_ControlsEnabled
        {
            add
            {
                HookHandler._beforeget_ControlsEnabled += value;
                HookHandler.Hookget_ControlsEnabled();
            }
            remove => HookHandler._beforeget_ControlsEnabled -= value;
        }

        public static event Delegates.set_ControlsEnabled_BeforeArgs set_ControlsEnabled
        {
            add
            {
                HookHandler._beforeset_ControlsEnabled += value;
                HookHandler.Hookset_ControlsEnabled();
            }
            remove => HookHandler._beforeset_ControlsEnabled -= value;
        }

        public static event Delegates.op_Implicit_BeforeArgs op_Implicit
        {
            add
            {
                HookHandler._beforeop_Implicit += value;
                HookHandler.Hookop_Implicit();
            }
            remove => HookHandler._beforeop_Implicit -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.Setup_NormalArgs Setup
        {
            add
            {
                HookHandler._afterSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._afterSetup -= value;
        }

        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.CreateDevice_NormalArgs CreateDevice
        {
            add
            {
                HookHandler._afterCreateDevice += value;
                HookHandler.HookCreateDevice();
            }
            remove => HookHandler._afterCreateDevice -= value;
        }

        public static event Delegates.UpdateDevice_NormalArgs UpdateDevice
        {
            add
            {
                HookHandler._afterUpdateDevice += value;
                HookHandler.HookUpdateDevice();
            }
            remove => HookHandler._afterUpdateDevice -= value;
        }

        public static event Delegates.CommitDevice_NormalArgs CommitDevice
        {
            add
            {
                HookHandler._afterCommitDevice += value;
                HookHandler.HookCommitDevice();
            }
            remove => HookHandler._afterCommitDevice -= value;
        }

        public static event Delegates.SubmitControlStates_NormalArgs SubmitControlStates
        {
            add
            {
                HookHandler._afterSubmitControlStates += value;
                HookHandler.HookSubmitControlStates();
            }
            remove => HookHandler._afterSubmitControlStates -= value;
        }

        public static event Delegates.CommitControlStates_NormalArgs CommitControlStates
        {
            add
            {
                HookHandler._afterCommitControlStates += value;
                HookHandler.HookCommitControlStates();
            }
            remove => HookHandler._afterCommitControlStates -= value;
        }

        public static event Delegates.UpdateScreenSize_NormalArgs UpdateScreenSize
        {
            add
            {
                HookHandler._afterUpdateScreenSize += value;
                HookHandler.HookUpdateScreenSize();
            }
            remove => HookHandler._afterUpdateScreenSize -= value;
        }

        public static event Delegates.CreateTouches_NormalArgs CreateTouches
        {
            add
            {
                HookHandler._afterCreateTouches += value;
                HookHandler.HookCreateTouches();
            }
            remove => HookHandler._afterCreateTouches -= value;
        }

        public static event Delegates.UpdateTouches_NormalArgs UpdateTouches
        {
            add
            {
                HookHandler._afterUpdateTouches += value;
                HookHandler.HookUpdateTouches();
            }
            remove => HookHandler._afterUpdateTouches -= value;
        }

        public static event Delegates.SendTouchBegan_NormalArgs SendTouchBegan
        {
            add
            {
                HookHandler._afterSendTouchBegan += value;
                HookHandler.HookSendTouchBegan();
            }
            remove => HookHandler._afterSendTouchBegan -= value;
        }

        public static event Delegates.SendTouchMoved_NormalArgs SendTouchMoved
        {
            add
            {
                HookHandler._afterSendTouchMoved += value;
                HookHandler.HookSendTouchMoved();
            }
            remove => HookHandler._afterSendTouchMoved -= value;
        }

        public static event Delegates.SendTouchEnded_NormalArgs SendTouchEnded
        {
            add
            {
                HookHandler._afterSendTouchEnded += value;
                HookHandler.HookSendTouchEnded();
            }
            remove => HookHandler._afterSendTouchEnded -= value;
        }

        public static event Delegates.InvokeTouchEvents_NormalArgs InvokeTouchEvents
        {
            add
            {
                HookHandler._afterInvokeTouchEvents += value;
                HookHandler.HookInvokeTouchEvents();
            }
            remove => HookHandler._afterInvokeTouchEvents -= value;
        }

        public static event Delegates.TouchCameraIsValid_NormalArgs TouchCameraIsValid
        {
            add
            {
                HookHandler._afterTouchCameraIsValid += value;
                HookHandler.HookTouchCameraIsValid();
            }
            remove => HookHandler._afterTouchCameraIsValid -= value;
        }

        public static event Delegates.ConvertScreenToWorldPoint_NormalArgs ConvertScreenToWorldPoint
        {
            add
            {
                HookHandler._afterConvertScreenToWorldPoint += value;
                HookHandler.HookConvertScreenToWorldPoint();
            }
            remove => HookHandler._afterConvertScreenToWorldPoint -= value;
        }

        public static event Delegates.ConvertViewToWorldPoint_NormalArgs ConvertViewToWorldPoint
        {
            add
            {
                HookHandler._afterConvertViewToWorldPoint += value;
                HookHandler.HookConvertViewToWorldPoint();
            }
            remove => HookHandler._afterConvertViewToWorldPoint -= value;
        }

        public static event Delegates.ConvertScreenToViewPoint_NormalArgs ConvertScreenToViewPoint
        {
            add
            {
                HookHandler._afterConvertScreenToViewPoint += value;
                HookHandler.HookConvertScreenToViewPoint();
            }
            remove => HookHandler._afterConvertScreenToViewPoint -= value;
        }

        public static event Delegates.GetCurrentScreenSize_NormalArgs GetCurrentScreenSize
        {
            add
            {
                HookHandler._afterGetCurrentScreenSize += value;
                HookHandler.HookGetCurrentScreenSize();
            }
            remove => HookHandler._afterGetCurrentScreenSize -= value;
        }

        public static event Delegates.get_controlsEnabled_NormalArgs get_controlsEnabled
        {
            add
            {
                HookHandler._afterget_controlsEnabled += value;
                HookHandler.Hookget_controlsEnabled();
            }
            remove => HookHandler._afterget_controlsEnabled -= value;
        }

        public static event Delegates.set_controlsEnabled_NormalArgs set_controlsEnabled
        {
            add
            {
                HookHandler._afterset_controlsEnabled += value;
                HookHandler.Hookset_controlsEnabled();
            }
            remove => HookHandler._afterset_controlsEnabled -= value;
        }

        public static event Delegates.get_Touches_NormalArgs get_Touches
        {
            add
            {
                HookHandler._afterget_Touches += value;
                HookHandler.Hookget_Touches();
            }
            remove => HookHandler._afterget_Touches -= value;
        }

        public static event Delegates.get_TouchCount_NormalArgs get_TouchCount
        {
            add
            {
                HookHandler._afterget_TouchCount += value;
                HookHandler.Hookget_TouchCount();
            }
            remove => HookHandler._afterget_TouchCount -= value;
        }

        public static event Delegates.GetTouch_NormalArgs GetTouch
        {
            add
            {
                HookHandler._afterGetTouch += value;
                HookHandler.HookGetTouch();
            }
            remove => HookHandler._afterGetTouch -= value;
        }

        public static event Delegates.GetTouchByFingerId_NormalArgs GetTouchByFingerId
        {
            add
            {
                HookHandler._afterGetTouchByFingerId += value;
                HookHandler.HookGetTouchByFingerId();
            }
            remove => HookHandler._afterGetTouchByFingerId -= value;
        }

        public static event Delegates.ScreenToWorldPoint_NormalArgs ScreenToWorldPoint
        {
            add
            {
                HookHandler._afterScreenToWorldPoint += value;
                HookHandler.HookScreenToWorldPoint();
            }
            remove => HookHandler._afterScreenToWorldPoint -= value;
        }

        public static event Delegates.ViewToWorldPoint_NormalArgs ViewToWorldPoint
        {
            add
            {
                HookHandler._afterViewToWorldPoint += value;
                HookHandler.HookViewToWorldPoint();
            }
            remove => HookHandler._afterViewToWorldPoint -= value;
        }

        public static event Delegates.ScreenToViewPoint_NormalArgs ScreenToViewPoint
        {
            add
            {
                HookHandler._afterScreenToViewPoint += value;
                HookHandler.HookScreenToViewPoint();
            }
            remove => HookHandler._afterScreenToViewPoint -= value;
        }

        public static event Delegates.ConvertToWorld_float_TouchUnitType_NormalArgs ConvertToWorld_float_TouchUnitType
        {
            add
            {
                HookHandler._afterConvertToWorld_float_TouchUnitType += value;
                HookHandler.HookConvertToWorld_float_TouchUnitType();
            }
            remove => HookHandler._afterConvertToWorld_float_TouchUnitType -= value;
        }

        public static event Delegates.PercentToWorldRect_NormalArgs PercentToWorldRect
        {
            add
            {
                HookHandler._afterPercentToWorldRect += value;
                HookHandler.HookPercentToWorldRect();
            }
            remove => HookHandler._afterPercentToWorldRect -= value;
        }

        public static event Delegates.PixelToWorldRect_NormalArgs PixelToWorldRect
        {
            add
            {
                HookHandler._afterPixelToWorldRect += value;
                HookHandler.HookPixelToWorldRect();
            }
            remove => HookHandler._afterPixelToWorldRect -= value;
        }

        public static event Delegates.ConvertToWorld_Rect_TouchUnitType_NormalArgs ConvertToWorld_Rect_TouchUnitType
        {
            add
            {
                HookHandler._afterConvertToWorld_Rect_TouchUnitType += value;
                HookHandler.HookConvertToWorld_Rect_TouchUnitType();
            }
            remove => HookHandler._afterConvertToWorld_Rect_TouchUnitType -= value;
        }

        public static event Delegates.get_Camera_NormalArgs get_Camera
        {
            add
            {
                HookHandler._afterget_Camera += value;
                HookHandler.Hookget_Camera();
            }
            remove => HookHandler._afterget_Camera -= value;
        }

        public static event Delegates.get_Device_NormalArgs get_Device
        {
            add
            {
                HookHandler._afterget_Device += value;
                HookHandler.Hookget_Device();
            }
            remove => HookHandler._afterget_Device -= value;
        }

        public static event Delegates.get_ViewSize_NormalArgs get_ViewSize
        {
            add
            {
                HookHandler._afterget_ViewSize += value;
                HookHandler.Hookget_ViewSize();
            }
            remove => HookHandler._afterget_ViewSize -= value;
        }

        public static event Delegates.get_PercentToWorld_NormalArgs get_PercentToWorld
        {
            add
            {
                HookHandler._afterget_PercentToWorld += value;
                HookHandler.Hookget_PercentToWorld();
            }
            remove => HookHandler._afterget_PercentToWorld -= value;
        }

        public static event Delegates.get_HalfPercentToWorld_NormalArgs get_HalfPercentToWorld
        {
            add
            {
                HookHandler._afterget_HalfPercentToWorld += value;
                HookHandler.Hookget_HalfPercentToWorld();
            }
            remove => HookHandler._afterget_HalfPercentToWorld -= value;
        }

        public static event Delegates.get_PixelToWorld_NormalArgs get_PixelToWorld
        {
            add
            {
                HookHandler._afterget_PixelToWorld += value;
                HookHandler.Hookget_PixelToWorld();
            }
            remove => HookHandler._afterget_PixelToWorld -= value;
        }

        public static event Delegates.get_HalfPixelToWorld_NormalArgs get_HalfPixelToWorld
        {
            add
            {
                HookHandler._afterget_HalfPixelToWorld += value;
                HookHandler.Hookget_HalfPixelToWorld();
            }
            remove => HookHandler._afterget_HalfPixelToWorld -= value;
        }

        public static event Delegates.get_ScreenSize_NormalArgs get_ScreenSize
        {
            add
            {
                HookHandler._afterget_ScreenSize += value;
                HookHandler.Hookget_ScreenSize();
            }
            remove => HookHandler._afterget_ScreenSize -= value;
        }

        public static event Delegates.get_HalfScreenSize_NormalArgs get_HalfScreenSize
        {
            add
            {
                HookHandler._afterget_HalfScreenSize += value;
                HookHandler.Hookget_HalfScreenSize();
            }
            remove => HookHandler._afterget_HalfScreenSize -= value;
        }

        public static event Delegates.get_ControlsEnabled_NormalArgs get_ControlsEnabled
        {
            add
            {
                HookHandler._afterget_ControlsEnabled += value;
                HookHandler.Hookget_ControlsEnabled();
            }
            remove => HookHandler._afterget_ControlsEnabled -= value;
        }

        public static event Delegates.set_ControlsEnabled_NormalArgs set_ControlsEnabled
        {
            add
            {
                HookHandler._afterset_ControlsEnabled += value;
                HookHandler.Hookset_ControlsEnabled();
            }
            remove => HookHandler._afterset_ControlsEnabled -= value;
        }

        public static event Delegates.op_Implicit_NormalArgs op_Implicit
        {
            add
            {
                HookHandler._afterop_Implicit += value;
                HookHandler.Hookop_Implicit();
            }
            remove => HookHandler._afterop_Implicit -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "OnEnable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "OnEnable"), value);
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add => HookEndpointManager.Add<Delegates.OnDisable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "OnDisable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDisable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "OnDisable"), value);
        }

        public static event Delegates.Setup_NormalArgs Setup
        {
            add => HookEndpointManager.Add<Delegates.Setup_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "Setup"), value);
            remove => HookEndpointManager.Remove<Delegates.Setup_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "Setup"), value);
        }

        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "Reset"), value);
        }

        public static event Delegates.UpdateScreenSizeAtEndOfFrame_NormalArgs UpdateScreenSizeAtEndOfFrame
        {
            add => HookEndpointManager.Add<Delegates.UpdateScreenSizeAtEndOfFrame_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "UpdateScreenSizeAtEndOfFrame"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateScreenSizeAtEndOfFrame_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "UpdateScreenSizeAtEndOfFrame"), value);
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add => HookEndpointManager.Add<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "Update"), value);
            remove => HookEndpointManager.Remove<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "Update"), value);
        }

        public static event Delegates.CreateDevice_NormalArgs CreateDevice
        {
            add => HookEndpointManager.Add<Delegates.CreateDevice_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "CreateDevice"), value);
            remove => HookEndpointManager.Remove<Delegates.CreateDevice_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "CreateDevice"), value);
        }

        public static event Delegates.UpdateDevice_NormalArgs UpdateDevice
        {
            add => HookEndpointManager.Add<Delegates.UpdateDevice_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "UpdateDevice"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateDevice_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "UpdateDevice"), value);
        }

        public static event Delegates.CommitDevice_NormalArgs CommitDevice
        {
            add => HookEndpointManager.Add<Delegates.CommitDevice_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "CommitDevice"), value);
            remove => HookEndpointManager.Remove<Delegates.CommitDevice_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "CommitDevice"), value);
        }

        public static event Delegates.SubmitControlStates_NormalArgs SubmitControlStates
        {
            add => HookEndpointManager.Add<Delegates.SubmitControlStates_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "SubmitControlStates"), value);
            remove => HookEndpointManager.Remove<Delegates.SubmitControlStates_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "SubmitControlStates"), value);
        }

        public static event Delegates.CommitControlStates_NormalArgs CommitControlStates
        {
            add => HookEndpointManager.Add<Delegates.CommitControlStates_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "CommitControlStates"), value);
            remove => HookEndpointManager.Remove<Delegates.CommitControlStates_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "CommitControlStates"), value);
        }

        public static event Delegates.UpdateScreenSize_NormalArgs UpdateScreenSize
        {
            add => HookEndpointManager.Add<Delegates.UpdateScreenSize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "UpdateScreenSize"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateScreenSize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "UpdateScreenSize"), value);
        }

        public static event Delegates.CreateTouches_NormalArgs CreateTouches
        {
            add => HookEndpointManager.Add<Delegates.CreateTouches_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "CreateTouches"), value);
            remove => HookEndpointManager.Remove<Delegates.CreateTouches_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "CreateTouches"), value);
        }

        public static event Delegates.UpdateTouches_NormalArgs UpdateTouches
        {
            add => HookEndpointManager.Add<Delegates.UpdateTouches_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "UpdateTouches"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateTouches_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "UpdateTouches"), value);
        }

        public static event Delegates.SendTouchBegan_NormalArgs SendTouchBegan
        {
            add => HookEndpointManager.Add<Delegates.SendTouchBegan_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "SendTouchBegan"), value);
            remove => HookEndpointManager.Remove<Delegates.SendTouchBegan_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "SendTouchBegan"), value);
        }

        public static event Delegates.SendTouchMoved_NormalArgs SendTouchMoved
        {
            add => HookEndpointManager.Add<Delegates.SendTouchMoved_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "SendTouchMoved"), value);
            remove => HookEndpointManager.Remove<Delegates.SendTouchMoved_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "SendTouchMoved"), value);
        }

        public static event Delegates.SendTouchEnded_NormalArgs SendTouchEnded
        {
            add => HookEndpointManager.Add<Delegates.SendTouchEnded_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "SendTouchEnded"), value);
            remove => HookEndpointManager.Remove<Delegates.SendTouchEnded_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "SendTouchEnded"), value);
        }

        public static event Delegates.InvokeTouchEvents_NormalArgs InvokeTouchEvents
        {
            add => HookEndpointManager.Add<Delegates.InvokeTouchEvents_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "InvokeTouchEvents"), value);
            remove => HookEndpointManager.Remove<Delegates.InvokeTouchEvents_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "InvokeTouchEvents"), value);
        }

        public static event Delegates.TouchCameraIsValid_NormalArgs TouchCameraIsValid
        {
            add => HookEndpointManager.Add<Delegates.TouchCameraIsValid_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "TouchCameraIsValid"), value);
            remove => HookEndpointManager.Remove<Delegates.TouchCameraIsValid_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "TouchCameraIsValid"), value);
        }

        public static event Delegates.ConvertScreenToWorldPoint_NormalArgs ConvertScreenToWorldPoint
        {
            add => HookEndpointManager.Add<Delegates.ConvertScreenToWorldPoint_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ConvertScreenToWorldPoint"), value);
            remove => HookEndpointManager.Remove<Delegates.ConvertScreenToWorldPoint_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ConvertScreenToWorldPoint"), value);
        }

        public static event Delegates.ConvertViewToWorldPoint_NormalArgs ConvertViewToWorldPoint
        {
            add => HookEndpointManager.Add<Delegates.ConvertViewToWorldPoint_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ConvertViewToWorldPoint"), value);
            remove => HookEndpointManager.Remove<Delegates.ConvertViewToWorldPoint_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ConvertViewToWorldPoint"), value);
        }

        public static event Delegates.ConvertScreenToViewPoint_NormalArgs ConvertScreenToViewPoint
        {
            add => HookEndpointManager.Add<Delegates.ConvertScreenToViewPoint_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ConvertScreenToViewPoint"), value);
            remove => HookEndpointManager.Remove<Delegates.ConvertScreenToViewPoint_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ConvertScreenToViewPoint"), value);
        }

        public static event Delegates.GetCurrentScreenSize_NormalArgs GetCurrentScreenSize
        {
            add => HookEndpointManager.Add<Delegates.GetCurrentScreenSize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "GetCurrentScreenSize"), value);
            remove => HookEndpointManager.Remove<Delegates.GetCurrentScreenSize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "GetCurrentScreenSize"), value);
        }

        public static event Delegates.get_controlsEnabled_NormalArgs get_controlsEnabled
        {
            add => HookEndpointManager.Add<Delegates.get_controlsEnabled_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_controlsEnabled"), value);
            remove => HookEndpointManager.Remove<Delegates.get_controlsEnabled_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_controlsEnabled"), value);
        }

        public static event Delegates.set_controlsEnabled_NormalArgs set_controlsEnabled
        {
            add => HookEndpointManager.Add<Delegates.set_controlsEnabled_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "set_controlsEnabled"), value);
            remove => HookEndpointManager.Remove<Delegates.set_controlsEnabled_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "set_controlsEnabled"), value);
        }

        public static event Delegates.get_Touches_NormalArgs get_Touches
        {
            add => HookEndpointManager.Add<Delegates.get_Touches_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_Touches", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_Touches_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_Touches", false), value);
        }

        public static event Delegates.get_TouchCount_NormalArgs get_TouchCount
        {
            add => HookEndpointManager.Add<Delegates.get_TouchCount_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_TouchCount", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_TouchCount_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_TouchCount", false), value);
        }

        public static event Delegates.GetTouch_NormalArgs GetTouch
        {
            add => HookEndpointManager.Add<Delegates.GetTouch_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "GetTouch", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetTouch_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "GetTouch", false), value);
        }

        public static event Delegates.GetTouchByFingerId_NormalArgs GetTouchByFingerId
        {
            add => HookEndpointManager.Add<Delegates.GetTouchByFingerId_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "GetTouchByFingerId", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetTouchByFingerId_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "GetTouchByFingerId", false), value);
        }

        public static event Delegates.ScreenToWorldPoint_NormalArgs ScreenToWorldPoint
        {
            add => HookEndpointManager.Add<Delegates.ScreenToWorldPoint_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ScreenToWorldPoint", false), value);
            remove => HookEndpointManager.Remove<Delegates.ScreenToWorldPoint_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ScreenToWorldPoint", false), value);
        }

        public static event Delegates.ViewToWorldPoint_NormalArgs ViewToWorldPoint
        {
            add => HookEndpointManager.Add<Delegates.ViewToWorldPoint_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ViewToWorldPoint", false), value);
            remove => HookEndpointManager.Remove<Delegates.ViewToWorldPoint_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ViewToWorldPoint", false), value);
        }

        public static event Delegates.ScreenToViewPoint_NormalArgs ScreenToViewPoint
        {
            add => HookEndpointManager.Add<Delegates.ScreenToViewPoint_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ScreenToViewPoint", false), value);
            remove => HookEndpointManager.Remove<Delegates.ScreenToViewPoint_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ScreenToViewPoint", false), value);
        }

        public static event Delegates.ConvertToWorld_float_TouchUnitType_NormalArgs ConvertToWorld_float_TouchUnitType
        {
            add => HookEndpointManager.Add<Delegates.ConvertToWorld_float_TouchUnitType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ConvertToWorld", false), value);
            remove => HookEndpointManager.Remove<Delegates.ConvertToWorld_float_TouchUnitType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ConvertToWorld", false), value);
        }

        public static event Delegates.PercentToWorldRect_NormalArgs PercentToWorldRect
        {
            add => HookEndpointManager.Add<Delegates.PercentToWorldRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "PercentToWorldRect", false), value);
            remove => HookEndpointManager.Remove<Delegates.PercentToWorldRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "PercentToWorldRect", false), value);
        }

        public static event Delegates.PixelToWorldRect_NormalArgs PixelToWorldRect
        {
            add => HookEndpointManager.Add<Delegates.PixelToWorldRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "PixelToWorldRect", false), value);
            remove => HookEndpointManager.Remove<Delegates.PixelToWorldRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "PixelToWorldRect", false), value);
        }

        public static event Delegates.ConvertToWorld_Rect_TouchUnitType_NormalArgs ConvertToWorld_Rect_TouchUnitType
        {
            add => HookEndpointManager.Add<Delegates.ConvertToWorld_Rect_TouchUnitType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ConvertToWorld", false), value);
            remove => HookEndpointManager.Remove<Delegates.ConvertToWorld_Rect_TouchUnitType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "ConvertToWorld", false), value);
        }

        public static event Delegates.get_Camera_NormalArgs get_Camera
        {
            add => HookEndpointManager.Add<Delegates.get_Camera_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_Camera", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_Camera_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_Camera", false), value);
        }

        public static event Delegates.get_Device_NormalArgs get_Device
        {
            add => HookEndpointManager.Add<Delegates.get_Device_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_Device", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_Device_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_Device", false), value);
        }

        public static event Delegates.get_ViewSize_NormalArgs get_ViewSize
        {
            add => HookEndpointManager.Add<Delegates.get_ViewSize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_ViewSize", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_ViewSize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_ViewSize", false), value);
        }

        public static event Delegates.get_PercentToWorld_NormalArgs get_PercentToWorld
        {
            add => HookEndpointManager.Add<Delegates.get_PercentToWorld_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_PercentToWorld", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_PercentToWorld_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_PercentToWorld", false), value);
        }

        public static event Delegates.get_HalfPercentToWorld_NormalArgs get_HalfPercentToWorld
        {
            add => HookEndpointManager.Add<Delegates.get_HalfPercentToWorld_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_HalfPercentToWorld", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_HalfPercentToWorld_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_HalfPercentToWorld", false), value);
        }

        public static event Delegates.get_PixelToWorld_NormalArgs get_PixelToWorld
        {
            add => HookEndpointManager.Add<Delegates.get_PixelToWorld_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_PixelToWorld", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_PixelToWorld_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_PixelToWorld", false), value);
        }

        public static event Delegates.get_HalfPixelToWorld_NormalArgs get_HalfPixelToWorld
        {
            add => HookEndpointManager.Add<Delegates.get_HalfPixelToWorld_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_HalfPixelToWorld", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_HalfPixelToWorld_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_HalfPixelToWorld", false), value);
        }

        public static event Delegates.get_ScreenSize_NormalArgs get_ScreenSize
        {
            add => HookEndpointManager.Add<Delegates.get_ScreenSize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_ScreenSize", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_ScreenSize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_ScreenSize", false), value);
        }

        public static event Delegates.get_HalfScreenSize_NormalArgs get_HalfScreenSize
        {
            add => HookEndpointManager.Add<Delegates.get_HalfScreenSize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_HalfScreenSize", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_HalfScreenSize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_HalfScreenSize", false), value);
        }

        public static event Delegates.get_ControlsEnabled_NormalArgs get_ControlsEnabled
        {
            add => HookEndpointManager.Add<Delegates.get_ControlsEnabled_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_ControlsEnabled", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_ControlsEnabled_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "get_ControlsEnabled", false), value);
        }

        public static event Delegates.set_ControlsEnabled_NormalArgs set_ControlsEnabled
        {
            add => HookEndpointManager.Add<Delegates.set_ControlsEnabled_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "set_ControlsEnabled", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_ControlsEnabled_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "set_ControlsEnabled", false), value);
        }

        public static event Delegates.op_Implicit_NormalArgs op_Implicit
        {
            add => HookEndpointManager.Add<Delegates.op_Implicit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "op_Implicit", false), value);
            remove => HookEndpointManager.Remove<Delegates.op_Implicit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchManager), "op_Implicit", false), value);
        }
    }
}