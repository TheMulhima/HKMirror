using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for TouchManager class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTouchManager
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "OnEnable", true), OnEnable);

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(Action<InControl.TouchManager> orig, InControl.TouchManager self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDisable()
{
if (!HookedList.Contains("OnDisable"))
{
HookedList.Add("OnDisable");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "OnDisable", true), OnDisable);

}
}
internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;
private static void OnDisable(Action<InControl.TouchManager> orig, InControl.TouchManager self)
{
Delegates.Params_OnDisable @params = new() 
{
self = self
};
if (_beforeOnDisable != null)
{
foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
{
try
{
_beforeOnDisable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDisable != null)
{
foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
{
try
{
_afterOnDisable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetup()
{
if (!HookedList.Contains("Setup"))
{
HookedList.Add("Setup");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "Setup", true), Setup);

}
}
internal static event Delegates.Setup_BeforeArgs _beforeSetup;
internal static event Delegates.Setup_AfterArgs _afterSetup;
private static void Setup(Action<InControl.TouchManager> orig, InControl.TouchManager self)
{
Delegates.Params_Setup @params = new() 
{
self = self
};
if (_beforeSetup != null)
{
foreach (Delegates.Setup_BeforeArgs toInvoke in _beforeSetup.GetInvocationList())
{
try
{
_beforeSetup?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetup != null)
{
foreach (Delegates.Setup_AfterArgs toInvoke in _afterSetup.GetInvocationList())
{
try
{
_afterSetup.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookReset()
{
if (!HookedList.Contains("Reset"))
{
HookedList.Add("Reset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "Reset", true), Reset);

}
}
internal static event Delegates.Reset_BeforeArgs _beforeReset;
internal static event Delegates.Reset_AfterArgs _afterReset;
private static void Reset(Action<InControl.TouchManager> orig, InControl.TouchManager self)
{
Delegates.Params_Reset @params = new() 
{
self = self
};
if (_beforeReset != null)
{
foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
{
try
{
_beforeReset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterReset != null)
{
foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
{
try
{
_afterReset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateScreenSizeAtEndOfFrame()
{
if (!HookedList.Contains("UpdateScreenSizeAtEndOfFrame"))
{
HookedList.Add("UpdateScreenSizeAtEndOfFrame");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "UpdateScreenSizeAtEndOfFrame", true), UpdateScreenSizeAtEndOfFrame);

}
}
internal static event Delegates.UpdateScreenSizeAtEndOfFrame_BeforeArgs _beforeUpdateScreenSizeAtEndOfFrame;
private static System.Collections.IEnumerator UpdateScreenSizeAtEndOfFrame(Func<InControl.TouchManager, System.Collections.IEnumerator> orig, InControl.TouchManager self)
{
Delegates.Params_UpdateScreenSizeAtEndOfFrame @params = new() 
{
self = self
};
if (_beforeUpdateScreenSizeAtEndOfFrame != null)
{
foreach (Delegates.UpdateScreenSizeAtEndOfFrame_BeforeArgs toInvoke in _beforeUpdateScreenSizeAtEndOfFrame.GetInvocationList())
{
try
{
_beforeUpdateScreenSizeAtEndOfFrame?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
internal static void HookUpdate()
{
if (!HookedList.Contains("Update"))
{
HookedList.Add("Update");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "Update", true), Update);

}
}
internal static event Delegates.Update_BeforeArgs _beforeUpdate;
internal static event Delegates.Update_AfterArgs _afterUpdate;
private static void Update(Action<InControl.TouchManager> orig, InControl.TouchManager self)
{
Delegates.Params_Update @params = new() 
{
self = self
};
if (_beforeUpdate != null)
{
foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
{
try
{
_beforeUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdate != null)
{
foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
{
try
{
_afterUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCreateDevice()
{
if (!HookedList.Contains("CreateDevice"))
{
HookedList.Add("CreateDevice");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "CreateDevice", true), CreateDevice);

}
}
internal static event Delegates.CreateDevice_BeforeArgs _beforeCreateDevice;
internal static event Delegates.CreateDevice_AfterArgs _afterCreateDevice;
private static void CreateDevice(Action<InControl.TouchManager> orig, InControl.TouchManager self)
{
Delegates.Params_CreateDevice @params = new() 
{
self = self
};
if (_beforeCreateDevice != null)
{
foreach (Delegates.CreateDevice_BeforeArgs toInvoke in _beforeCreateDevice.GetInvocationList())
{
try
{
_beforeCreateDevice?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterCreateDevice != null)
{
foreach (Delegates.CreateDevice_AfterArgs toInvoke in _afterCreateDevice.GetInvocationList())
{
try
{
_afterCreateDevice.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateDevice()
{
if (!HookedList.Contains("UpdateDevice"))
{
HookedList.Add("UpdateDevice");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "UpdateDevice", true), UpdateDevice);

}
}
internal static event Delegates.UpdateDevice_BeforeArgs _beforeUpdateDevice;
internal static event Delegates.UpdateDevice_AfterArgs _afterUpdateDevice;
private static void UpdateDevice(Action<InControl.TouchManager,  ulong,  float> orig, InControl.TouchManager self,  ulong updateTick,  float deltaTime)
{
Delegates.Params_UpdateDevice @params = new() 
{
self = self
, updateTick = updateTick
, deltaTime = deltaTime
};
if (_beforeUpdateDevice != null)
{
foreach (Delegates.UpdateDevice_BeforeArgs toInvoke in _beforeUpdateDevice.GetInvocationList())
{
try
{
_beforeUpdateDevice?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
updateTick = @params.updateTick;
deltaTime = @params.deltaTime;
orig(self, updateTick, deltaTime);
if (_afterUpdateDevice != null)
{
foreach (Delegates.UpdateDevice_AfterArgs toInvoke in _afterUpdateDevice.GetInvocationList())
{
try
{
_afterUpdateDevice.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCommitDevice()
{
if (!HookedList.Contains("CommitDevice"))
{
HookedList.Add("CommitDevice");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "CommitDevice", true), CommitDevice);

}
}
internal static event Delegates.CommitDevice_BeforeArgs _beforeCommitDevice;
internal static event Delegates.CommitDevice_AfterArgs _afterCommitDevice;
private static void CommitDevice(Action<InControl.TouchManager,  ulong,  float> orig, InControl.TouchManager self,  ulong updateTick,  float deltaTime)
{
Delegates.Params_CommitDevice @params = new() 
{
self = self
, updateTick = updateTick
, deltaTime = deltaTime
};
if (_beforeCommitDevice != null)
{
foreach (Delegates.CommitDevice_BeforeArgs toInvoke in _beforeCommitDevice.GetInvocationList())
{
try
{
_beforeCommitDevice?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
updateTick = @params.updateTick;
deltaTime = @params.deltaTime;
orig(self, updateTick, deltaTime);
if (_afterCommitDevice != null)
{
foreach (Delegates.CommitDevice_AfterArgs toInvoke in _afterCommitDevice.GetInvocationList())
{
try
{
_afterCommitDevice.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSubmitControlStates()
{
if (!HookedList.Contains("SubmitControlStates"))
{
HookedList.Add("SubmitControlStates");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "SubmitControlStates", true), SubmitControlStates);

}
}
internal static event Delegates.SubmitControlStates_BeforeArgs _beforeSubmitControlStates;
internal static event Delegates.SubmitControlStates_AfterArgs _afterSubmitControlStates;
private static void SubmitControlStates(Action<InControl.TouchManager,  ulong,  float> orig, InControl.TouchManager self,  ulong updateTick,  float deltaTime)
{
Delegates.Params_SubmitControlStates @params = new() 
{
self = self
, updateTick = updateTick
, deltaTime = deltaTime
};
if (_beforeSubmitControlStates != null)
{
foreach (Delegates.SubmitControlStates_BeforeArgs toInvoke in _beforeSubmitControlStates.GetInvocationList())
{
try
{
_beforeSubmitControlStates?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
updateTick = @params.updateTick;
deltaTime = @params.deltaTime;
orig(self, updateTick, deltaTime);
if (_afterSubmitControlStates != null)
{
foreach (Delegates.SubmitControlStates_AfterArgs toInvoke in _afterSubmitControlStates.GetInvocationList())
{
try
{
_afterSubmitControlStates.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCommitControlStates()
{
if (!HookedList.Contains("CommitControlStates"))
{
HookedList.Add("CommitControlStates");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "CommitControlStates", true), CommitControlStates);

}
}
internal static event Delegates.CommitControlStates_BeforeArgs _beforeCommitControlStates;
internal static event Delegates.CommitControlStates_AfterArgs _afterCommitControlStates;
private static void CommitControlStates(Action<InControl.TouchManager,  ulong,  float> orig, InControl.TouchManager self,  ulong updateTick,  float deltaTime)
{
Delegates.Params_CommitControlStates @params = new() 
{
self = self
, updateTick = updateTick
, deltaTime = deltaTime
};
if (_beforeCommitControlStates != null)
{
foreach (Delegates.CommitControlStates_BeforeArgs toInvoke in _beforeCommitControlStates.GetInvocationList())
{
try
{
_beforeCommitControlStates?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
updateTick = @params.updateTick;
deltaTime = @params.deltaTime;
orig(self, updateTick, deltaTime);
if (_afterCommitControlStates != null)
{
foreach (Delegates.CommitControlStates_AfterArgs toInvoke in _afterCommitControlStates.GetInvocationList())
{
try
{
_afterCommitControlStates.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateScreenSize()
{
if (!HookedList.Contains("UpdateScreenSize"))
{
HookedList.Add("UpdateScreenSize");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "UpdateScreenSize", true), UpdateScreenSize);

}
}
internal static event Delegates.UpdateScreenSize_BeforeArgs _beforeUpdateScreenSize;
internal static event Delegates.UpdateScreenSize_AfterArgs _afterUpdateScreenSize;
private static void UpdateScreenSize(Action<InControl.TouchManager,  UnityEngine.Vector2> orig, InControl.TouchManager self,  UnityEngine.Vector2 currentScreenSize)
{
Delegates.Params_UpdateScreenSize @params = new() 
{
self = self
, currentScreenSize = currentScreenSize
};
if (_beforeUpdateScreenSize != null)
{
foreach (Delegates.UpdateScreenSize_BeforeArgs toInvoke in _beforeUpdateScreenSize.GetInvocationList())
{
try
{
_beforeUpdateScreenSize?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
currentScreenSize = @params.currentScreenSize;
orig(self, currentScreenSize);
if (_afterUpdateScreenSize != null)
{
foreach (Delegates.UpdateScreenSize_AfterArgs toInvoke in _afterUpdateScreenSize.GetInvocationList())
{
try
{
_afterUpdateScreenSize.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCreateTouches()
{
if (!HookedList.Contains("CreateTouches"))
{
HookedList.Add("CreateTouches");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "CreateTouches", true), CreateTouches);

}
}
internal static event Delegates.CreateTouches_BeforeArgs _beforeCreateTouches;
internal static event Delegates.CreateTouches_AfterArgs _afterCreateTouches;
private static void CreateTouches(Action<InControl.TouchManager> orig, InControl.TouchManager self)
{
Delegates.Params_CreateTouches @params = new() 
{
self = self
};
if (_beforeCreateTouches != null)
{
foreach (Delegates.CreateTouches_BeforeArgs toInvoke in _beforeCreateTouches.GetInvocationList())
{
try
{
_beforeCreateTouches?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterCreateTouches != null)
{
foreach (Delegates.CreateTouches_AfterArgs toInvoke in _afterCreateTouches.GetInvocationList())
{
try
{
_afterCreateTouches.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateTouches()
{
if (!HookedList.Contains("UpdateTouches"))
{
HookedList.Add("UpdateTouches");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "UpdateTouches", true), UpdateTouches);

}
}
internal static event Delegates.UpdateTouches_BeforeArgs _beforeUpdateTouches;
internal static event Delegates.UpdateTouches_AfterArgs _afterUpdateTouches;
private static void UpdateTouches(Action<InControl.TouchManager,  ulong,  float> orig, InControl.TouchManager self,  ulong updateTick,  float deltaTime)
{
Delegates.Params_UpdateTouches @params = new() 
{
self = self
, updateTick = updateTick
, deltaTime = deltaTime
};
if (_beforeUpdateTouches != null)
{
foreach (Delegates.UpdateTouches_BeforeArgs toInvoke in _beforeUpdateTouches.GetInvocationList())
{
try
{
_beforeUpdateTouches?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
updateTick = @params.updateTick;
deltaTime = @params.deltaTime;
orig(self, updateTick, deltaTime);
if (_afterUpdateTouches != null)
{
foreach (Delegates.UpdateTouches_AfterArgs toInvoke in _afterUpdateTouches.GetInvocationList())
{
try
{
_afterUpdateTouches.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSendTouchBegan()
{
if (!HookedList.Contains("SendTouchBegan"))
{
HookedList.Add("SendTouchBegan");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "SendTouchBegan", true), SendTouchBegan);

}
}
internal static event Delegates.SendTouchBegan_BeforeArgs _beforeSendTouchBegan;
internal static event Delegates.SendTouchBegan_AfterArgs _afterSendTouchBegan;
private static void SendTouchBegan(Action<InControl.TouchManager,  InControl.Touch> orig, InControl.TouchManager self,  InControl.Touch touch)
{
Delegates.Params_SendTouchBegan @params = new() 
{
self = self
, touch = touch
};
if (_beforeSendTouchBegan != null)
{
foreach (Delegates.SendTouchBegan_BeforeArgs toInvoke in _beforeSendTouchBegan.GetInvocationList())
{
try
{
_beforeSendTouchBegan?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
touch = @params.touch;
orig(self, touch);
if (_afterSendTouchBegan != null)
{
foreach (Delegates.SendTouchBegan_AfterArgs toInvoke in _afterSendTouchBegan.GetInvocationList())
{
try
{
_afterSendTouchBegan.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSendTouchMoved()
{
if (!HookedList.Contains("SendTouchMoved"))
{
HookedList.Add("SendTouchMoved");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "SendTouchMoved", true), SendTouchMoved);

}
}
internal static event Delegates.SendTouchMoved_BeforeArgs _beforeSendTouchMoved;
internal static event Delegates.SendTouchMoved_AfterArgs _afterSendTouchMoved;
private static void SendTouchMoved(Action<InControl.TouchManager,  InControl.Touch> orig, InControl.TouchManager self,  InControl.Touch touch)
{
Delegates.Params_SendTouchMoved @params = new() 
{
self = self
, touch = touch
};
if (_beforeSendTouchMoved != null)
{
foreach (Delegates.SendTouchMoved_BeforeArgs toInvoke in _beforeSendTouchMoved.GetInvocationList())
{
try
{
_beforeSendTouchMoved?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
touch = @params.touch;
orig(self, touch);
if (_afterSendTouchMoved != null)
{
foreach (Delegates.SendTouchMoved_AfterArgs toInvoke in _afterSendTouchMoved.GetInvocationList())
{
try
{
_afterSendTouchMoved.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSendTouchEnded()
{
if (!HookedList.Contains("SendTouchEnded"))
{
HookedList.Add("SendTouchEnded");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "SendTouchEnded", true), SendTouchEnded);

}
}
internal static event Delegates.SendTouchEnded_BeforeArgs _beforeSendTouchEnded;
internal static event Delegates.SendTouchEnded_AfterArgs _afterSendTouchEnded;
private static void SendTouchEnded(Action<InControl.TouchManager,  InControl.Touch> orig, InControl.TouchManager self,  InControl.Touch touch)
{
Delegates.Params_SendTouchEnded @params = new() 
{
self = self
, touch = touch
};
if (_beforeSendTouchEnded != null)
{
foreach (Delegates.SendTouchEnded_BeforeArgs toInvoke in _beforeSendTouchEnded.GetInvocationList())
{
try
{
_beforeSendTouchEnded?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
touch = @params.touch;
orig(self, touch);
if (_afterSendTouchEnded != null)
{
foreach (Delegates.SendTouchEnded_AfterArgs toInvoke in _afterSendTouchEnded.GetInvocationList())
{
try
{
_afterSendTouchEnded.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookInvokeTouchEvents()
{
if (!HookedList.Contains("InvokeTouchEvents"))
{
HookedList.Add("InvokeTouchEvents");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "InvokeTouchEvents", true), InvokeTouchEvents);

}
}
internal static event Delegates.InvokeTouchEvents_BeforeArgs _beforeInvokeTouchEvents;
internal static event Delegates.InvokeTouchEvents_AfterArgs _afterInvokeTouchEvents;
private static void InvokeTouchEvents(Action<InControl.TouchManager> orig, InControl.TouchManager self)
{
Delegates.Params_InvokeTouchEvents @params = new() 
{
self = self
};
if (_beforeInvokeTouchEvents != null)
{
foreach (Delegates.InvokeTouchEvents_BeforeArgs toInvoke in _beforeInvokeTouchEvents.GetInvocationList())
{
try
{
_beforeInvokeTouchEvents?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterInvokeTouchEvents != null)
{
foreach (Delegates.InvokeTouchEvents_AfterArgs toInvoke in _afterInvokeTouchEvents.GetInvocationList())
{
try
{
_afterInvokeTouchEvents.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookTouchCameraIsValid()
{
if (!HookedList.Contains("TouchCameraIsValid"))
{
HookedList.Add("TouchCameraIsValid");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "TouchCameraIsValid", true), TouchCameraIsValid);

}
}
internal static event Delegates.TouchCameraIsValid_BeforeArgs _beforeTouchCameraIsValid;
internal static event Delegates.TouchCameraIsValid_AfterArgs _afterTouchCameraIsValid;
private static bool TouchCameraIsValid(Func<InControl.TouchManager, bool> orig, InControl.TouchManager self)
{
Delegates.Params_TouchCameraIsValid @params = new() 
{
self = self
};
if (_beforeTouchCameraIsValid != null)
{
foreach (Delegates.TouchCameraIsValid_BeforeArgs toInvoke in _beforeTouchCameraIsValid.GetInvocationList())
{
try
{
_beforeTouchCameraIsValid?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterTouchCameraIsValid != null)
{
foreach (Delegates.TouchCameraIsValid_AfterArgs toInvoke in _afterTouchCameraIsValid.GetInvocationList())
{
try
{
retVal = _afterTouchCameraIsValid.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookConvertScreenToWorldPoint()
{
if (!HookedList.Contains("ConvertScreenToWorldPoint"))
{
HookedList.Add("ConvertScreenToWorldPoint");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ConvertScreenToWorldPoint", true), ConvertScreenToWorldPoint);

}
}
internal static event Delegates.ConvertScreenToWorldPoint_BeforeArgs _beforeConvertScreenToWorldPoint;
internal static event Delegates.ConvertScreenToWorldPoint_AfterArgs _afterConvertScreenToWorldPoint;
private static UnityEngine.Vector3 ConvertScreenToWorldPoint(Func<InControl.TouchManager,  UnityEngine.Vector2, UnityEngine.Vector3> orig, InControl.TouchManager self,  UnityEngine.Vector2 point)
{
Delegates.Params_ConvertScreenToWorldPoint @params = new() 
{
self = self
, point = point
};
if (_beforeConvertScreenToWorldPoint != null)
{
foreach (Delegates.ConvertScreenToWorldPoint_BeforeArgs toInvoke in _beforeConvertScreenToWorldPoint.GetInvocationList())
{
try
{
_beforeConvertScreenToWorldPoint?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
point = @params.point;
var retVal = orig(self, point);
if (_afterConvertScreenToWorldPoint != null)
{
foreach (Delegates.ConvertScreenToWorldPoint_AfterArgs toInvoke in _afterConvertScreenToWorldPoint.GetInvocationList())
{
try
{
retVal = _afterConvertScreenToWorldPoint.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookConvertViewToWorldPoint()
{
if (!HookedList.Contains("ConvertViewToWorldPoint"))
{
HookedList.Add("ConvertViewToWorldPoint");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ConvertViewToWorldPoint", true), ConvertViewToWorldPoint);

}
}
internal static event Delegates.ConvertViewToWorldPoint_BeforeArgs _beforeConvertViewToWorldPoint;
internal static event Delegates.ConvertViewToWorldPoint_AfterArgs _afterConvertViewToWorldPoint;
private static UnityEngine.Vector3 ConvertViewToWorldPoint(Func<InControl.TouchManager,  UnityEngine.Vector2, UnityEngine.Vector3> orig, InControl.TouchManager self,  UnityEngine.Vector2 point)
{
Delegates.Params_ConvertViewToWorldPoint @params = new() 
{
self = self
, point = point
};
if (_beforeConvertViewToWorldPoint != null)
{
foreach (Delegates.ConvertViewToWorldPoint_BeforeArgs toInvoke in _beforeConvertViewToWorldPoint.GetInvocationList())
{
try
{
_beforeConvertViewToWorldPoint?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
point = @params.point;
var retVal = orig(self, point);
if (_afterConvertViewToWorldPoint != null)
{
foreach (Delegates.ConvertViewToWorldPoint_AfterArgs toInvoke in _afterConvertViewToWorldPoint.GetInvocationList())
{
try
{
retVal = _afterConvertViewToWorldPoint.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookConvertScreenToViewPoint()
{
if (!HookedList.Contains("ConvertScreenToViewPoint"))
{
HookedList.Add("ConvertScreenToViewPoint");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ConvertScreenToViewPoint", true), ConvertScreenToViewPoint);

}
}
internal static event Delegates.ConvertScreenToViewPoint_BeforeArgs _beforeConvertScreenToViewPoint;
internal static event Delegates.ConvertScreenToViewPoint_AfterArgs _afterConvertScreenToViewPoint;
private static UnityEngine.Vector3 ConvertScreenToViewPoint(Func<InControl.TouchManager,  UnityEngine.Vector2, UnityEngine.Vector3> orig, InControl.TouchManager self,  UnityEngine.Vector2 point)
{
Delegates.Params_ConvertScreenToViewPoint @params = new() 
{
self = self
, point = point
};
if (_beforeConvertScreenToViewPoint != null)
{
foreach (Delegates.ConvertScreenToViewPoint_BeforeArgs toInvoke in _beforeConvertScreenToViewPoint.GetInvocationList())
{
try
{
_beforeConvertScreenToViewPoint?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
point = @params.point;
var retVal = orig(self, point);
if (_afterConvertScreenToViewPoint != null)
{
foreach (Delegates.ConvertScreenToViewPoint_AfterArgs toInvoke in _afterConvertScreenToViewPoint.GetInvocationList())
{
try
{
retVal = _afterConvertScreenToViewPoint.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetCurrentScreenSize()
{
if (!HookedList.Contains("GetCurrentScreenSize"))
{
HookedList.Add("GetCurrentScreenSize");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "GetCurrentScreenSize", true), GetCurrentScreenSize);

}
}
internal static event Delegates.GetCurrentScreenSize_BeforeArgs _beforeGetCurrentScreenSize;
internal static event Delegates.GetCurrentScreenSize_AfterArgs _afterGetCurrentScreenSize;
private static UnityEngine.Vector2 GetCurrentScreenSize(Func<InControl.TouchManager, UnityEngine.Vector2> orig, InControl.TouchManager self)
{
Delegates.Params_GetCurrentScreenSize @params = new() 
{
self = self
};
if (_beforeGetCurrentScreenSize != null)
{
foreach (Delegates.GetCurrentScreenSize_BeforeArgs toInvoke in _beforeGetCurrentScreenSize.GetInvocationList())
{
try
{
_beforeGetCurrentScreenSize?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetCurrentScreenSize != null)
{
foreach (Delegates.GetCurrentScreenSize_AfterArgs toInvoke in _afterGetCurrentScreenSize.GetInvocationList())
{
try
{
retVal = _afterGetCurrentScreenSize.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_controlsEnabled()
{
if (!HookedList.Contains("get_controlsEnabled"))
{
HookedList.Add("get_controlsEnabled");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_controlsEnabled", true), get_controlsEnabled);

}
}
internal static event Delegates.get_controlsEnabled_BeforeArgs _beforeget_controlsEnabled;
internal static event Delegates.get_controlsEnabled_AfterArgs _afterget_controlsEnabled;
private static bool get_controlsEnabled(Func<InControl.TouchManager, bool> orig, InControl.TouchManager self)
{
Delegates.Params_get_controlsEnabled @params = new() 
{
self = self
};
if (_beforeget_controlsEnabled != null)
{
foreach (Delegates.get_controlsEnabled_BeforeArgs toInvoke in _beforeget_controlsEnabled.GetInvocationList())
{
try
{
_beforeget_controlsEnabled?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_controlsEnabled != null)
{
foreach (Delegates.get_controlsEnabled_AfterArgs toInvoke in _afterget_controlsEnabled.GetInvocationList())
{
try
{
retVal = _afterget_controlsEnabled.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_controlsEnabled()
{
if (!HookedList.Contains("set_controlsEnabled"))
{
HookedList.Add("set_controlsEnabled");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "set_controlsEnabled", true), set_controlsEnabled);

}
}
internal static event Delegates.set_controlsEnabled_BeforeArgs _beforeset_controlsEnabled;
internal static event Delegates.set_controlsEnabled_AfterArgs _afterset_controlsEnabled;
private static void set_controlsEnabled(Action<InControl.TouchManager,  bool> orig, InControl.TouchManager self,  bool value)
{
Delegates.Params_set_controlsEnabled @params = new() 
{
self = self
, value = value
};
if (_beforeset_controlsEnabled != null)
{
foreach (Delegates.set_controlsEnabled_BeforeArgs toInvoke in _beforeset_controlsEnabled.GetInvocationList())
{
try
{
_beforeset_controlsEnabled?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_controlsEnabled != null)
{
foreach (Delegates.set_controlsEnabled_AfterArgs toInvoke in _afterset_controlsEnabled.GetInvocationList())
{
try
{
_afterset_controlsEnabled.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_Touches()
{
if (!HookedList.Contains("get_Touches"))
{
HookedList.Add("get_Touches");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_Touches", false), get_Touches);

}
}
internal static event Delegates.get_Touches_BeforeArgs _beforeget_Touches;
internal static event Delegates.get_Touches_AfterArgs _afterget_Touches;
private static System.Collections.ObjectModel.ReadOnlyCollection<InControl.Touch> get_Touches(Func<System.Collections.ObjectModel.ReadOnlyCollection<InControl.Touch>> orig)
{
if (_beforeget_Touches != null)
{
foreach (Delegates.get_Touches_BeforeArgs toInvoke in _beforeget_Touches.GetInvocationList())
{
try
{
_beforeget_Touches?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
var retVal = orig();
if (_afterget_Touches != null)
{
foreach (Delegates.get_Touches_AfterArgs toInvoke in _afterget_Touches.GetInvocationList())
{
try
{
retVal = _afterget_Touches.Invoke(retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_TouchCount()
{
if (!HookedList.Contains("get_TouchCount"))
{
HookedList.Add("get_TouchCount");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_TouchCount", false), get_TouchCount);

}
}
internal static event Delegates.get_TouchCount_BeforeArgs _beforeget_TouchCount;
internal static event Delegates.get_TouchCount_AfterArgs _afterget_TouchCount;
private static int get_TouchCount(Func<int> orig)
{
if (_beforeget_TouchCount != null)
{
foreach (Delegates.get_TouchCount_BeforeArgs toInvoke in _beforeget_TouchCount.GetInvocationList())
{
try
{
_beforeget_TouchCount?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
var retVal = orig();
if (_afterget_TouchCount != null)
{
foreach (Delegates.get_TouchCount_AfterArgs toInvoke in _afterget_TouchCount.GetInvocationList())
{
try
{
retVal = _afterget_TouchCount.Invoke(retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetTouch()
{
if (!HookedList.Contains("GetTouch"))
{
HookedList.Add("GetTouch");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "GetTouch", false), GetTouch);

}
}
internal static event Delegates.GetTouch_BeforeArgs _beforeGetTouch;
internal static event Delegates.GetTouch_AfterArgs _afterGetTouch;
private static InControl.Touch GetTouch(Func< int, InControl.Touch> orig,  int touchIndex)
{
Delegates.Params_GetTouch @params = new() 
{
touchIndex = touchIndex
};
if (_beforeGetTouch != null)
{
foreach (Delegates.GetTouch_BeforeArgs toInvoke in _beforeGetTouch.GetInvocationList())
{
try
{
_beforeGetTouch?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
touchIndex = @params.touchIndex;
var retVal = orig(touchIndex);
if (_afterGetTouch != null)
{
foreach (Delegates.GetTouch_AfterArgs toInvoke in _afterGetTouch.GetInvocationList())
{
try
{
retVal = _afterGetTouch.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetTouchByFingerId()
{
if (!HookedList.Contains("GetTouchByFingerId"))
{
HookedList.Add("GetTouchByFingerId");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "GetTouchByFingerId", false), GetTouchByFingerId);

}
}
internal static event Delegates.GetTouchByFingerId_BeforeArgs _beforeGetTouchByFingerId;
internal static event Delegates.GetTouchByFingerId_AfterArgs _afterGetTouchByFingerId;
private static InControl.Touch GetTouchByFingerId(Func< int, InControl.Touch> orig,  int fingerId)
{
Delegates.Params_GetTouchByFingerId @params = new() 
{
fingerId = fingerId
};
if (_beforeGetTouchByFingerId != null)
{
foreach (Delegates.GetTouchByFingerId_BeforeArgs toInvoke in _beforeGetTouchByFingerId.GetInvocationList())
{
try
{
_beforeGetTouchByFingerId?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
fingerId = @params.fingerId;
var retVal = orig(fingerId);
if (_afterGetTouchByFingerId != null)
{
foreach (Delegates.GetTouchByFingerId_AfterArgs toInvoke in _afterGetTouchByFingerId.GetInvocationList())
{
try
{
retVal = _afterGetTouchByFingerId.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookScreenToWorldPoint()
{
if (!HookedList.Contains("ScreenToWorldPoint"))
{
HookedList.Add("ScreenToWorldPoint");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ScreenToWorldPoint", false), ScreenToWorldPoint);

}
}
internal static event Delegates.ScreenToWorldPoint_BeforeArgs _beforeScreenToWorldPoint;
internal static event Delegates.ScreenToWorldPoint_AfterArgs _afterScreenToWorldPoint;
private static UnityEngine.Vector3 ScreenToWorldPoint(Func< UnityEngine.Vector2, UnityEngine.Vector3> orig,  UnityEngine.Vector2 point)
{
Delegates.Params_ScreenToWorldPoint @params = new() 
{
point = point
};
if (_beforeScreenToWorldPoint != null)
{
foreach (Delegates.ScreenToWorldPoint_BeforeArgs toInvoke in _beforeScreenToWorldPoint.GetInvocationList())
{
try
{
_beforeScreenToWorldPoint?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
point = @params.point;
var retVal = orig(point);
if (_afterScreenToWorldPoint != null)
{
foreach (Delegates.ScreenToWorldPoint_AfterArgs toInvoke in _afterScreenToWorldPoint.GetInvocationList())
{
try
{
retVal = _afterScreenToWorldPoint.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookViewToWorldPoint()
{
if (!HookedList.Contains("ViewToWorldPoint"))
{
HookedList.Add("ViewToWorldPoint");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ViewToWorldPoint", false), ViewToWorldPoint);

}
}
internal static event Delegates.ViewToWorldPoint_BeforeArgs _beforeViewToWorldPoint;
internal static event Delegates.ViewToWorldPoint_AfterArgs _afterViewToWorldPoint;
private static UnityEngine.Vector3 ViewToWorldPoint(Func< UnityEngine.Vector2, UnityEngine.Vector3> orig,  UnityEngine.Vector2 point)
{
Delegates.Params_ViewToWorldPoint @params = new() 
{
point = point
};
if (_beforeViewToWorldPoint != null)
{
foreach (Delegates.ViewToWorldPoint_BeforeArgs toInvoke in _beforeViewToWorldPoint.GetInvocationList())
{
try
{
_beforeViewToWorldPoint?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
point = @params.point;
var retVal = orig(point);
if (_afterViewToWorldPoint != null)
{
foreach (Delegates.ViewToWorldPoint_AfterArgs toInvoke in _afterViewToWorldPoint.GetInvocationList())
{
try
{
retVal = _afterViewToWorldPoint.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookScreenToViewPoint()
{
if (!HookedList.Contains("ScreenToViewPoint"))
{
HookedList.Add("ScreenToViewPoint");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ScreenToViewPoint", false), ScreenToViewPoint);

}
}
internal static event Delegates.ScreenToViewPoint_BeforeArgs _beforeScreenToViewPoint;
internal static event Delegates.ScreenToViewPoint_AfterArgs _afterScreenToViewPoint;
private static UnityEngine.Vector3 ScreenToViewPoint(Func< UnityEngine.Vector2, UnityEngine.Vector3> orig,  UnityEngine.Vector2 point)
{
Delegates.Params_ScreenToViewPoint @params = new() 
{
point = point
};
if (_beforeScreenToViewPoint != null)
{
foreach (Delegates.ScreenToViewPoint_BeforeArgs toInvoke in _beforeScreenToViewPoint.GetInvocationList())
{
try
{
_beforeScreenToViewPoint?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
point = @params.point;
var retVal = orig(point);
if (_afterScreenToViewPoint != null)
{
foreach (Delegates.ScreenToViewPoint_AfterArgs toInvoke in _afterScreenToViewPoint.GetInvocationList())
{
try
{
retVal = _afterScreenToViewPoint.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookConvertToWorld_float_TouchUnitType()
{
if (!HookedList.Contains("ConvertToWorld_float_TouchUnitType"))
{
HookedList.Add("ConvertToWorld_float_TouchUnitType");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ConvertToWorld_float_TouchUnitType", false), ConvertToWorld_float_TouchUnitType);

}
}
internal static event Delegates.ConvertToWorld_float_TouchUnitType_BeforeArgs _beforeConvertToWorld_float_TouchUnitType;
internal static event Delegates.ConvertToWorld_float_TouchUnitType_AfterArgs _afterConvertToWorld_float_TouchUnitType;
private static float ConvertToWorld_float_TouchUnitType(Func< float,  InControl.TouchUnitType, float> orig,  float value,  InControl.TouchUnitType unitType)
{
Delegates.Params_ConvertToWorld_float_TouchUnitType @params = new() 
{
value = value
, unitType = unitType
};
if (_beforeConvertToWorld_float_TouchUnitType != null)
{
foreach (Delegates.ConvertToWorld_float_TouchUnitType_BeforeArgs toInvoke in _beforeConvertToWorld_float_TouchUnitType.GetInvocationList())
{
try
{
_beforeConvertToWorld_float_TouchUnitType?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
value = @params.value;
unitType = @params.unitType;
var retVal = orig(value, unitType);
if (_afterConvertToWorld_float_TouchUnitType != null)
{
foreach (Delegates.ConvertToWorld_float_TouchUnitType_AfterArgs toInvoke in _afterConvertToWorld_float_TouchUnitType.GetInvocationList())
{
try
{
retVal = _afterConvertToWorld_float_TouchUnitType.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookPercentToWorldRect()
{
if (!HookedList.Contains("PercentToWorldRect"))
{
HookedList.Add("PercentToWorldRect");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "PercentToWorldRect", false), PercentToWorldRect);

}
}
internal static event Delegates.PercentToWorldRect_BeforeArgs _beforePercentToWorldRect;
internal static event Delegates.PercentToWorldRect_AfterArgs _afterPercentToWorldRect;
private static UnityEngine.Rect PercentToWorldRect(Func< UnityEngine.Rect, UnityEngine.Rect> orig,  UnityEngine.Rect rect)
{
Delegates.Params_PercentToWorldRect @params = new() 
{
rect = rect
};
if (_beforePercentToWorldRect != null)
{
foreach (Delegates.PercentToWorldRect_BeforeArgs toInvoke in _beforePercentToWorldRect.GetInvocationList())
{
try
{
_beforePercentToWorldRect?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
rect = @params.rect;
var retVal = orig(rect);
if (_afterPercentToWorldRect != null)
{
foreach (Delegates.PercentToWorldRect_AfterArgs toInvoke in _afterPercentToWorldRect.GetInvocationList())
{
try
{
retVal = _afterPercentToWorldRect.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookPixelToWorldRect()
{
if (!HookedList.Contains("PixelToWorldRect"))
{
HookedList.Add("PixelToWorldRect");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "PixelToWorldRect", false), PixelToWorldRect);

}
}
internal static event Delegates.PixelToWorldRect_BeforeArgs _beforePixelToWorldRect;
internal static event Delegates.PixelToWorldRect_AfterArgs _afterPixelToWorldRect;
private static UnityEngine.Rect PixelToWorldRect(Func< UnityEngine.Rect, UnityEngine.Rect> orig,  UnityEngine.Rect rect)
{
Delegates.Params_PixelToWorldRect @params = new() 
{
rect = rect
};
if (_beforePixelToWorldRect != null)
{
foreach (Delegates.PixelToWorldRect_BeforeArgs toInvoke in _beforePixelToWorldRect.GetInvocationList())
{
try
{
_beforePixelToWorldRect?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
rect = @params.rect;
var retVal = orig(rect);
if (_afterPixelToWorldRect != null)
{
foreach (Delegates.PixelToWorldRect_AfterArgs toInvoke in _afterPixelToWorldRect.GetInvocationList())
{
try
{
retVal = _afterPixelToWorldRect.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookConvertToWorld_Rect_TouchUnitType()
{
if (!HookedList.Contains("ConvertToWorld_Rect_TouchUnitType"))
{
HookedList.Add("ConvertToWorld_Rect_TouchUnitType");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ConvertToWorld_Rect_TouchUnitType", false), ConvertToWorld_Rect_TouchUnitType);

}
}
internal static event Delegates.ConvertToWorld_Rect_TouchUnitType_BeforeArgs _beforeConvertToWorld_Rect_TouchUnitType;
internal static event Delegates.ConvertToWorld_Rect_TouchUnitType_AfterArgs _afterConvertToWorld_Rect_TouchUnitType;
private static UnityEngine.Rect ConvertToWorld_Rect_TouchUnitType(Func< UnityEngine.Rect,  InControl.TouchUnitType, UnityEngine.Rect> orig,  UnityEngine.Rect rect,  InControl.TouchUnitType unitType)
{
Delegates.Params_ConvertToWorld_Rect_TouchUnitType @params = new() 
{
rect = rect
, unitType = unitType
};
if (_beforeConvertToWorld_Rect_TouchUnitType != null)
{
foreach (Delegates.ConvertToWorld_Rect_TouchUnitType_BeforeArgs toInvoke in _beforeConvertToWorld_Rect_TouchUnitType.GetInvocationList())
{
try
{
_beforeConvertToWorld_Rect_TouchUnitType?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
rect = @params.rect;
unitType = @params.unitType;
var retVal = orig(rect, unitType);
if (_afterConvertToWorld_Rect_TouchUnitType != null)
{
foreach (Delegates.ConvertToWorld_Rect_TouchUnitType_AfterArgs toInvoke in _afterConvertToWorld_Rect_TouchUnitType.GetInvocationList())
{
try
{
retVal = _afterConvertToWorld_Rect_TouchUnitType.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_Camera()
{
if (!HookedList.Contains("get_Camera"))
{
HookedList.Add("get_Camera");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_Camera", false), get_Camera);

}
}
internal static event Delegates.get_Camera_BeforeArgs _beforeget_Camera;
internal static event Delegates.get_Camera_AfterArgs _afterget_Camera;
private static UnityEngine.Camera get_Camera(Func<UnityEngine.Camera> orig)
{
if (_beforeget_Camera != null)
{
foreach (Delegates.get_Camera_BeforeArgs toInvoke in _beforeget_Camera.GetInvocationList())
{
try
{
_beforeget_Camera?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
var retVal = orig();
if (_afterget_Camera != null)
{
foreach (Delegates.get_Camera_AfterArgs toInvoke in _afterget_Camera.GetInvocationList())
{
try
{
retVal = _afterget_Camera.Invoke(retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_Device()
{
if (!HookedList.Contains("get_Device"))
{
HookedList.Add("get_Device");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_Device", false), get_Device);

}
}
internal static event Delegates.get_Device_BeforeArgs _beforeget_Device;
internal static event Delegates.get_Device_AfterArgs _afterget_Device;
private static InControl.InputDevice get_Device(Func<InControl.InputDevice> orig)
{
if (_beforeget_Device != null)
{
foreach (Delegates.get_Device_BeforeArgs toInvoke in _beforeget_Device.GetInvocationList())
{
try
{
_beforeget_Device?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
var retVal = orig();
if (_afterget_Device != null)
{
foreach (Delegates.get_Device_AfterArgs toInvoke in _afterget_Device.GetInvocationList())
{
try
{
retVal = _afterget_Device.Invoke(retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_ViewSize()
{
if (!HookedList.Contains("get_ViewSize"))
{
HookedList.Add("get_ViewSize");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_ViewSize", false), get_ViewSize);

}
}
internal static event Delegates.get_ViewSize_BeforeArgs _beforeget_ViewSize;
internal static event Delegates.get_ViewSize_AfterArgs _afterget_ViewSize;
private static UnityEngine.Vector3 get_ViewSize(Func<UnityEngine.Vector3> orig)
{
if (_beforeget_ViewSize != null)
{
foreach (Delegates.get_ViewSize_BeforeArgs toInvoke in _beforeget_ViewSize.GetInvocationList())
{
try
{
_beforeget_ViewSize?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
var retVal = orig();
if (_afterget_ViewSize != null)
{
foreach (Delegates.get_ViewSize_AfterArgs toInvoke in _afterget_ViewSize.GetInvocationList())
{
try
{
retVal = _afterget_ViewSize.Invoke(retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_PercentToWorld()
{
if (!HookedList.Contains("get_PercentToWorld"))
{
HookedList.Add("get_PercentToWorld");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_PercentToWorld", false), get_PercentToWorld);

}
}
internal static event Delegates.get_PercentToWorld_BeforeArgs _beforeget_PercentToWorld;
internal static event Delegates.get_PercentToWorld_AfterArgs _afterget_PercentToWorld;
private static float get_PercentToWorld(Func<float> orig)
{
if (_beforeget_PercentToWorld != null)
{
foreach (Delegates.get_PercentToWorld_BeforeArgs toInvoke in _beforeget_PercentToWorld.GetInvocationList())
{
try
{
_beforeget_PercentToWorld?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
var retVal = orig();
if (_afterget_PercentToWorld != null)
{
foreach (Delegates.get_PercentToWorld_AfterArgs toInvoke in _afterget_PercentToWorld.GetInvocationList())
{
try
{
retVal = _afterget_PercentToWorld.Invoke(retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_HalfPercentToWorld()
{
if (!HookedList.Contains("get_HalfPercentToWorld"))
{
HookedList.Add("get_HalfPercentToWorld");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_HalfPercentToWorld", false), get_HalfPercentToWorld);

}
}
internal static event Delegates.get_HalfPercentToWorld_BeforeArgs _beforeget_HalfPercentToWorld;
internal static event Delegates.get_HalfPercentToWorld_AfterArgs _afterget_HalfPercentToWorld;
private static float get_HalfPercentToWorld(Func<float> orig)
{
if (_beforeget_HalfPercentToWorld != null)
{
foreach (Delegates.get_HalfPercentToWorld_BeforeArgs toInvoke in _beforeget_HalfPercentToWorld.GetInvocationList())
{
try
{
_beforeget_HalfPercentToWorld?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
var retVal = orig();
if (_afterget_HalfPercentToWorld != null)
{
foreach (Delegates.get_HalfPercentToWorld_AfterArgs toInvoke in _afterget_HalfPercentToWorld.GetInvocationList())
{
try
{
retVal = _afterget_HalfPercentToWorld.Invoke(retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_PixelToWorld()
{
if (!HookedList.Contains("get_PixelToWorld"))
{
HookedList.Add("get_PixelToWorld");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_PixelToWorld", false), get_PixelToWorld);

}
}
internal static event Delegates.get_PixelToWorld_BeforeArgs _beforeget_PixelToWorld;
internal static event Delegates.get_PixelToWorld_AfterArgs _afterget_PixelToWorld;
private static float get_PixelToWorld(Func<float> orig)
{
if (_beforeget_PixelToWorld != null)
{
foreach (Delegates.get_PixelToWorld_BeforeArgs toInvoke in _beforeget_PixelToWorld.GetInvocationList())
{
try
{
_beforeget_PixelToWorld?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
var retVal = orig();
if (_afterget_PixelToWorld != null)
{
foreach (Delegates.get_PixelToWorld_AfterArgs toInvoke in _afterget_PixelToWorld.GetInvocationList())
{
try
{
retVal = _afterget_PixelToWorld.Invoke(retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_HalfPixelToWorld()
{
if (!HookedList.Contains("get_HalfPixelToWorld"))
{
HookedList.Add("get_HalfPixelToWorld");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_HalfPixelToWorld", false), get_HalfPixelToWorld);

}
}
internal static event Delegates.get_HalfPixelToWorld_BeforeArgs _beforeget_HalfPixelToWorld;
internal static event Delegates.get_HalfPixelToWorld_AfterArgs _afterget_HalfPixelToWorld;
private static float get_HalfPixelToWorld(Func<float> orig)
{
if (_beforeget_HalfPixelToWorld != null)
{
foreach (Delegates.get_HalfPixelToWorld_BeforeArgs toInvoke in _beforeget_HalfPixelToWorld.GetInvocationList())
{
try
{
_beforeget_HalfPixelToWorld?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
var retVal = orig();
if (_afterget_HalfPixelToWorld != null)
{
foreach (Delegates.get_HalfPixelToWorld_AfterArgs toInvoke in _afterget_HalfPixelToWorld.GetInvocationList())
{
try
{
retVal = _afterget_HalfPixelToWorld.Invoke(retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_ScreenSize()
{
if (!HookedList.Contains("get_ScreenSize"))
{
HookedList.Add("get_ScreenSize");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_ScreenSize", false), get_ScreenSize);

}
}
internal static event Delegates.get_ScreenSize_BeforeArgs _beforeget_ScreenSize;
internal static event Delegates.get_ScreenSize_AfterArgs _afterget_ScreenSize;
private static UnityEngine.Vector2 get_ScreenSize(Func<UnityEngine.Vector2> orig)
{
if (_beforeget_ScreenSize != null)
{
foreach (Delegates.get_ScreenSize_BeforeArgs toInvoke in _beforeget_ScreenSize.GetInvocationList())
{
try
{
_beforeget_ScreenSize?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
var retVal = orig();
if (_afterget_ScreenSize != null)
{
foreach (Delegates.get_ScreenSize_AfterArgs toInvoke in _afterget_ScreenSize.GetInvocationList())
{
try
{
retVal = _afterget_ScreenSize.Invoke(retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_HalfScreenSize()
{
if (!HookedList.Contains("get_HalfScreenSize"))
{
HookedList.Add("get_HalfScreenSize");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_HalfScreenSize", false), get_HalfScreenSize);

}
}
internal static event Delegates.get_HalfScreenSize_BeforeArgs _beforeget_HalfScreenSize;
internal static event Delegates.get_HalfScreenSize_AfterArgs _afterget_HalfScreenSize;
private static UnityEngine.Vector2 get_HalfScreenSize(Func<UnityEngine.Vector2> orig)
{
if (_beforeget_HalfScreenSize != null)
{
foreach (Delegates.get_HalfScreenSize_BeforeArgs toInvoke in _beforeget_HalfScreenSize.GetInvocationList())
{
try
{
_beforeget_HalfScreenSize?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
var retVal = orig();
if (_afterget_HalfScreenSize != null)
{
foreach (Delegates.get_HalfScreenSize_AfterArgs toInvoke in _afterget_HalfScreenSize.GetInvocationList())
{
try
{
retVal = _afterget_HalfScreenSize.Invoke(retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_ControlsEnabled()
{
if (!HookedList.Contains("get_ControlsEnabled"))
{
HookedList.Add("get_ControlsEnabled");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_ControlsEnabled", false), get_ControlsEnabled);

}
}
internal static event Delegates.get_ControlsEnabled_BeforeArgs _beforeget_ControlsEnabled;
internal static event Delegates.get_ControlsEnabled_AfterArgs _afterget_ControlsEnabled;
private static bool get_ControlsEnabled(Func<bool> orig)
{
if (_beforeget_ControlsEnabled != null)
{
foreach (Delegates.get_ControlsEnabled_BeforeArgs toInvoke in _beforeget_ControlsEnabled.GetInvocationList())
{
try
{
_beforeget_ControlsEnabled?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
var retVal = orig();
if (_afterget_ControlsEnabled != null)
{
foreach (Delegates.get_ControlsEnabled_AfterArgs toInvoke in _afterget_ControlsEnabled.GetInvocationList())
{
try
{
retVal = _afterget_ControlsEnabled.Invoke(retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_ControlsEnabled()
{
if (!HookedList.Contains("set_ControlsEnabled"))
{
HookedList.Add("set_ControlsEnabled");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "set_ControlsEnabled", false), set_ControlsEnabled);

}
}
internal static event Delegates.set_ControlsEnabled_BeforeArgs _beforeset_ControlsEnabled;
internal static event Delegates.set_ControlsEnabled_AfterArgs _afterset_ControlsEnabled;
private static void set_ControlsEnabled(Action< bool> orig,  bool value)
{
Delegates.Params_set_ControlsEnabled @params = new() 
{
value = value
};
if (_beforeset_ControlsEnabled != null)
{
foreach (Delegates.set_ControlsEnabled_BeforeArgs toInvoke in _beforeset_ControlsEnabled.GetInvocationList())
{
try
{
_beforeset_ControlsEnabled?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
value = @params.value;
orig(value);
if (_afterset_ControlsEnabled != null)
{
foreach (Delegates.set_ControlsEnabled_AfterArgs toInvoke in _afterset_ControlsEnabled.GetInvocationList())
{
try
{
_afterset_ControlsEnabled.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookop_Implicit()
{
if (!HookedList.Contains("op_Implicit"))
{
HookedList.Add("op_Implicit");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "op_Implicit", false), op_Implicit);

}
}
internal static event Delegates.op_Implicit_BeforeArgs _beforeop_Implicit;
internal static event Delegates.op_Implicit_AfterArgs _afterop_Implicit;
private static bool op_Implicit(Func< InControl.TouchManager, bool> orig,  InControl.TouchManager instance)
{
Delegates.Params_op_Implicit @params = new() 
{
instance = instance
};
if (_beforeop_Implicit != null)
{
foreach (Delegates.op_Implicit_BeforeArgs toInvoke in _beforeop_Implicit.GetInvocationList())
{
try
{
_beforeop_Implicit?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
instance = @params.instance;
var retVal = orig(instance);
if (_afterop_Implicit != null)
{
foreach (Delegates.op_Implicit_AfterArgs toInvoke in _afterop_Implicit.GetInvocationList())
{
try
{
retVal = _afterop_Implicit.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_OnEnable
{
public InControl.TouchManager self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<InControl.TouchManager> orig, InControl.TouchManager self);
public sealed class Params_OnDisable
{
public InControl.TouchManager self;
}
public delegate void OnDisable_BeforeArgs(Params_OnDisable args);
public delegate void OnDisable_AfterArgs(Params_OnDisable args);
public delegate void OnDisable_WithArgs (Action<InControl.TouchManager> orig, InControl.TouchManager self);
public sealed class Params_Setup
{
public InControl.TouchManager self;
}
public delegate void Setup_BeforeArgs(Params_Setup args);
public delegate void Setup_AfterArgs(Params_Setup args);
public delegate void Setup_WithArgs (Action<InControl.TouchManager> orig, InControl.TouchManager self);
public sealed class Params_Reset
{
public InControl.TouchManager self;
}
public delegate void Reset_BeforeArgs(Params_Reset args);
public delegate void Reset_AfterArgs(Params_Reset args);
public delegate void Reset_WithArgs (Action<InControl.TouchManager> orig, InControl.TouchManager self);
public sealed class Params_UpdateScreenSizeAtEndOfFrame
{
public InControl.TouchManager self;
}
public delegate void UpdateScreenSizeAtEndOfFrame_BeforeArgs(Params_UpdateScreenSizeAtEndOfFrame args);
public delegate System.Collections.IEnumerator UpdateScreenSizeAtEndOfFrame_AfterArgs(Params_UpdateScreenSizeAtEndOfFrame args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator UpdateScreenSizeAtEndOfFrame_WithArgs (Func<InControl.TouchManager, System.Collections.IEnumerator> orig, InControl.TouchManager self);
public sealed class Params_Update
{
public InControl.TouchManager self;
}
public delegate void Update_BeforeArgs(Params_Update args);
public delegate void Update_AfterArgs(Params_Update args);
public delegate void Update_WithArgs (Action<InControl.TouchManager> orig, InControl.TouchManager self);
public sealed class Params_CreateDevice
{
public InControl.TouchManager self;
}
public delegate void CreateDevice_BeforeArgs(Params_CreateDevice args);
public delegate void CreateDevice_AfterArgs(Params_CreateDevice args);
public delegate void CreateDevice_WithArgs (Action<InControl.TouchManager> orig, InControl.TouchManager self);
public sealed class Params_UpdateDevice
{
public InControl.TouchManager self;
public ulong updateTick;
public float deltaTime;
}
public delegate void UpdateDevice_BeforeArgs(Params_UpdateDevice args);
public delegate void UpdateDevice_AfterArgs(Params_UpdateDevice args);
public delegate void UpdateDevice_WithArgs (Action<InControl.TouchManager,  ulong,  float> orig, InControl.TouchManager self,  ulong updateTick,  float deltaTime);
public sealed class Params_CommitDevice
{
public InControl.TouchManager self;
public ulong updateTick;
public float deltaTime;
}
public delegate void CommitDevice_BeforeArgs(Params_CommitDevice args);
public delegate void CommitDevice_AfterArgs(Params_CommitDevice args);
public delegate void CommitDevice_WithArgs (Action<InControl.TouchManager,  ulong,  float> orig, InControl.TouchManager self,  ulong updateTick,  float deltaTime);
public sealed class Params_SubmitControlStates
{
public InControl.TouchManager self;
public ulong updateTick;
public float deltaTime;
}
public delegate void SubmitControlStates_BeforeArgs(Params_SubmitControlStates args);
public delegate void SubmitControlStates_AfterArgs(Params_SubmitControlStates args);
public delegate void SubmitControlStates_WithArgs (Action<InControl.TouchManager,  ulong,  float> orig, InControl.TouchManager self,  ulong updateTick,  float deltaTime);
public sealed class Params_CommitControlStates
{
public InControl.TouchManager self;
public ulong updateTick;
public float deltaTime;
}
public delegate void CommitControlStates_BeforeArgs(Params_CommitControlStates args);
public delegate void CommitControlStates_AfterArgs(Params_CommitControlStates args);
public delegate void CommitControlStates_WithArgs (Action<InControl.TouchManager,  ulong,  float> orig, InControl.TouchManager self,  ulong updateTick,  float deltaTime);
public sealed class Params_UpdateScreenSize
{
public InControl.TouchManager self;
public UnityEngine.Vector2 currentScreenSize;
}
public delegate void UpdateScreenSize_BeforeArgs(Params_UpdateScreenSize args);
public delegate void UpdateScreenSize_AfterArgs(Params_UpdateScreenSize args);
public delegate void UpdateScreenSize_WithArgs (Action<InControl.TouchManager,  UnityEngine.Vector2> orig, InControl.TouchManager self,  UnityEngine.Vector2 currentScreenSize);
public sealed class Params_CreateTouches
{
public InControl.TouchManager self;
}
public delegate void CreateTouches_BeforeArgs(Params_CreateTouches args);
public delegate void CreateTouches_AfterArgs(Params_CreateTouches args);
public delegate void CreateTouches_WithArgs (Action<InControl.TouchManager> orig, InControl.TouchManager self);
public sealed class Params_UpdateTouches
{
public InControl.TouchManager self;
public ulong updateTick;
public float deltaTime;
}
public delegate void UpdateTouches_BeforeArgs(Params_UpdateTouches args);
public delegate void UpdateTouches_AfterArgs(Params_UpdateTouches args);
public delegate void UpdateTouches_WithArgs (Action<InControl.TouchManager,  ulong,  float> orig, InControl.TouchManager self,  ulong updateTick,  float deltaTime);
public sealed class Params_SendTouchBegan
{
public InControl.TouchManager self;
public InControl.Touch touch;
}
public delegate void SendTouchBegan_BeforeArgs(Params_SendTouchBegan args);
public delegate void SendTouchBegan_AfterArgs(Params_SendTouchBegan args);
public delegate void SendTouchBegan_WithArgs (Action<InControl.TouchManager,  InControl.Touch> orig, InControl.TouchManager self,  InControl.Touch touch);
public sealed class Params_SendTouchMoved
{
public InControl.TouchManager self;
public InControl.Touch touch;
}
public delegate void SendTouchMoved_BeforeArgs(Params_SendTouchMoved args);
public delegate void SendTouchMoved_AfterArgs(Params_SendTouchMoved args);
public delegate void SendTouchMoved_WithArgs (Action<InControl.TouchManager,  InControl.Touch> orig, InControl.TouchManager self,  InControl.Touch touch);
public sealed class Params_SendTouchEnded
{
public InControl.TouchManager self;
public InControl.Touch touch;
}
public delegate void SendTouchEnded_BeforeArgs(Params_SendTouchEnded args);
public delegate void SendTouchEnded_AfterArgs(Params_SendTouchEnded args);
public delegate void SendTouchEnded_WithArgs (Action<InControl.TouchManager,  InControl.Touch> orig, InControl.TouchManager self,  InControl.Touch touch);
public sealed class Params_InvokeTouchEvents
{
public InControl.TouchManager self;
}
public delegate void InvokeTouchEvents_BeforeArgs(Params_InvokeTouchEvents args);
public delegate void InvokeTouchEvents_AfterArgs(Params_InvokeTouchEvents args);
public delegate void InvokeTouchEvents_WithArgs (Action<InControl.TouchManager> orig, InControl.TouchManager self);
public sealed class Params_TouchCameraIsValid
{
public InControl.TouchManager self;
}
public delegate void TouchCameraIsValid_BeforeArgs(Params_TouchCameraIsValid args);
public delegate bool TouchCameraIsValid_AfterArgs(Params_TouchCameraIsValid args, bool ret);
public delegate bool TouchCameraIsValid_WithArgs (Func<InControl.TouchManager, bool> orig, InControl.TouchManager self);
public sealed class Params_ConvertScreenToWorldPoint
{
public InControl.TouchManager self;
public UnityEngine.Vector2 point;
}
public delegate void ConvertScreenToWorldPoint_BeforeArgs(Params_ConvertScreenToWorldPoint args);
public delegate UnityEngine.Vector3 ConvertScreenToWorldPoint_AfterArgs(Params_ConvertScreenToWorldPoint args, UnityEngine.Vector3 ret);
public delegate UnityEngine.Vector3 ConvertScreenToWorldPoint_WithArgs (Func<InControl.TouchManager,  UnityEngine.Vector2, UnityEngine.Vector3> orig, InControl.TouchManager self,  UnityEngine.Vector2 point);
public sealed class Params_ConvertViewToWorldPoint
{
public InControl.TouchManager self;
public UnityEngine.Vector2 point;
}
public delegate void ConvertViewToWorldPoint_BeforeArgs(Params_ConvertViewToWorldPoint args);
public delegate UnityEngine.Vector3 ConvertViewToWorldPoint_AfterArgs(Params_ConvertViewToWorldPoint args, UnityEngine.Vector3 ret);
public delegate UnityEngine.Vector3 ConvertViewToWorldPoint_WithArgs (Func<InControl.TouchManager,  UnityEngine.Vector2, UnityEngine.Vector3> orig, InControl.TouchManager self,  UnityEngine.Vector2 point);
public sealed class Params_ConvertScreenToViewPoint
{
public InControl.TouchManager self;
public UnityEngine.Vector2 point;
}
public delegate void ConvertScreenToViewPoint_BeforeArgs(Params_ConvertScreenToViewPoint args);
public delegate UnityEngine.Vector3 ConvertScreenToViewPoint_AfterArgs(Params_ConvertScreenToViewPoint args, UnityEngine.Vector3 ret);
public delegate UnityEngine.Vector3 ConvertScreenToViewPoint_WithArgs (Func<InControl.TouchManager,  UnityEngine.Vector2, UnityEngine.Vector3> orig, InControl.TouchManager self,  UnityEngine.Vector2 point);
public sealed class Params_GetCurrentScreenSize
{
public InControl.TouchManager self;
}
public delegate void GetCurrentScreenSize_BeforeArgs(Params_GetCurrentScreenSize args);
public delegate UnityEngine.Vector2 GetCurrentScreenSize_AfterArgs(Params_GetCurrentScreenSize args, UnityEngine.Vector2 ret);
public delegate UnityEngine.Vector2 GetCurrentScreenSize_WithArgs (Func<InControl.TouchManager, UnityEngine.Vector2> orig, InControl.TouchManager self);
public sealed class Params_get_controlsEnabled
{
public InControl.TouchManager self;
}
public delegate void get_controlsEnabled_BeforeArgs(Params_get_controlsEnabled args);
public delegate bool get_controlsEnabled_AfterArgs(Params_get_controlsEnabled args, bool ret);
public delegate bool get_controlsEnabled_WithArgs (Func<InControl.TouchManager, bool> orig, InControl.TouchManager self);
public sealed class Params_set_controlsEnabled
{
public InControl.TouchManager self;
public bool value;
}
public delegate void set_controlsEnabled_BeforeArgs(Params_set_controlsEnabled args);
public delegate void set_controlsEnabled_AfterArgs(Params_set_controlsEnabled args);
public delegate void set_controlsEnabled_WithArgs (Action<InControl.TouchManager,  bool> orig, InControl.TouchManager self,  bool value);
public delegate void get_Touches_BeforeArgs();
public delegate System.Collections.ObjectModel.ReadOnlyCollection<InControl.Touch> get_Touches_AfterArgs(System.Collections.ObjectModel.ReadOnlyCollection<InControl.Touch> ret);
public delegate System.Collections.ObjectModel.ReadOnlyCollection<InControl.Touch> get_Touches_WithArgs (Func<System.Collections.ObjectModel.ReadOnlyCollection<InControl.Touch>> orig);
public delegate void get_TouchCount_BeforeArgs();
public delegate int get_TouchCount_AfterArgs(int ret);
public delegate int get_TouchCount_WithArgs (Func<int> orig);
public sealed class Params_GetTouch
{
public int touchIndex;
}
public delegate void GetTouch_BeforeArgs(Params_GetTouch args);
public delegate InControl.Touch GetTouch_AfterArgs(Params_GetTouch args, InControl.Touch ret);
public delegate InControl.Touch GetTouch_WithArgs (Func< int, InControl.Touch> orig,  int touchIndex);
public sealed class Params_GetTouchByFingerId
{
public int fingerId;
}
public delegate void GetTouchByFingerId_BeforeArgs(Params_GetTouchByFingerId args);
public delegate InControl.Touch GetTouchByFingerId_AfterArgs(Params_GetTouchByFingerId args, InControl.Touch ret);
public delegate InControl.Touch GetTouchByFingerId_WithArgs (Func< int, InControl.Touch> orig,  int fingerId);
public sealed class Params_ScreenToWorldPoint
{
public UnityEngine.Vector2 point;
}
public delegate void ScreenToWorldPoint_BeforeArgs(Params_ScreenToWorldPoint args);
public delegate UnityEngine.Vector3 ScreenToWorldPoint_AfterArgs(Params_ScreenToWorldPoint args, UnityEngine.Vector3 ret);
public delegate UnityEngine.Vector3 ScreenToWorldPoint_WithArgs (Func< UnityEngine.Vector2, UnityEngine.Vector3> orig,  UnityEngine.Vector2 point);
public sealed class Params_ViewToWorldPoint
{
public UnityEngine.Vector2 point;
}
public delegate void ViewToWorldPoint_BeforeArgs(Params_ViewToWorldPoint args);
public delegate UnityEngine.Vector3 ViewToWorldPoint_AfterArgs(Params_ViewToWorldPoint args, UnityEngine.Vector3 ret);
public delegate UnityEngine.Vector3 ViewToWorldPoint_WithArgs (Func< UnityEngine.Vector2, UnityEngine.Vector3> orig,  UnityEngine.Vector2 point);
public sealed class Params_ScreenToViewPoint
{
public UnityEngine.Vector2 point;
}
public delegate void ScreenToViewPoint_BeforeArgs(Params_ScreenToViewPoint args);
public delegate UnityEngine.Vector3 ScreenToViewPoint_AfterArgs(Params_ScreenToViewPoint args, UnityEngine.Vector3 ret);
public delegate UnityEngine.Vector3 ScreenToViewPoint_WithArgs (Func< UnityEngine.Vector2, UnityEngine.Vector3> orig,  UnityEngine.Vector2 point);
public sealed class Params_ConvertToWorld_float_TouchUnitType
{
public float value;
public InControl.TouchUnitType unitType;
}
public delegate void ConvertToWorld_float_TouchUnitType_BeforeArgs(Params_ConvertToWorld_float_TouchUnitType args);
public delegate float ConvertToWorld_float_TouchUnitType_AfterArgs(Params_ConvertToWorld_float_TouchUnitType args, float ret);
public delegate float ConvertToWorld_float_TouchUnitType_WithArgs (Func< float,  InControl.TouchUnitType, float> orig,  float value,  InControl.TouchUnitType unitType);
public sealed class Params_PercentToWorldRect
{
public UnityEngine.Rect rect;
}
public delegate void PercentToWorldRect_BeforeArgs(Params_PercentToWorldRect args);
public delegate UnityEngine.Rect PercentToWorldRect_AfterArgs(Params_PercentToWorldRect args, UnityEngine.Rect ret);
public delegate UnityEngine.Rect PercentToWorldRect_WithArgs (Func< UnityEngine.Rect, UnityEngine.Rect> orig,  UnityEngine.Rect rect);
public sealed class Params_PixelToWorldRect
{
public UnityEngine.Rect rect;
}
public delegate void PixelToWorldRect_BeforeArgs(Params_PixelToWorldRect args);
public delegate UnityEngine.Rect PixelToWorldRect_AfterArgs(Params_PixelToWorldRect args, UnityEngine.Rect ret);
public delegate UnityEngine.Rect PixelToWorldRect_WithArgs (Func< UnityEngine.Rect, UnityEngine.Rect> orig,  UnityEngine.Rect rect);
public sealed class Params_ConvertToWorld_Rect_TouchUnitType
{
public UnityEngine.Rect rect;
public InControl.TouchUnitType unitType;
}
public delegate void ConvertToWorld_Rect_TouchUnitType_BeforeArgs(Params_ConvertToWorld_Rect_TouchUnitType args);
public delegate UnityEngine.Rect ConvertToWorld_Rect_TouchUnitType_AfterArgs(Params_ConvertToWorld_Rect_TouchUnitType args, UnityEngine.Rect ret);
public delegate UnityEngine.Rect ConvertToWorld_Rect_TouchUnitType_WithArgs (Func< UnityEngine.Rect,  InControl.TouchUnitType, UnityEngine.Rect> orig,  UnityEngine.Rect rect,  InControl.TouchUnitType unitType);
public delegate void get_Camera_BeforeArgs();
public delegate UnityEngine.Camera get_Camera_AfterArgs(UnityEngine.Camera ret);
public delegate UnityEngine.Camera get_Camera_WithArgs (Func<UnityEngine.Camera> orig);
public delegate void get_Device_BeforeArgs();
public delegate InControl.InputDevice get_Device_AfterArgs(InControl.InputDevice ret);
public delegate InControl.InputDevice get_Device_WithArgs (Func<InControl.InputDevice> orig);
public delegate void get_ViewSize_BeforeArgs();
public delegate UnityEngine.Vector3 get_ViewSize_AfterArgs(UnityEngine.Vector3 ret);
public delegate UnityEngine.Vector3 get_ViewSize_WithArgs (Func<UnityEngine.Vector3> orig);
public delegate void get_PercentToWorld_BeforeArgs();
public delegate float get_PercentToWorld_AfterArgs(float ret);
public delegate float get_PercentToWorld_WithArgs (Func<float> orig);
public delegate void get_HalfPercentToWorld_BeforeArgs();
public delegate float get_HalfPercentToWorld_AfterArgs(float ret);
public delegate float get_HalfPercentToWorld_WithArgs (Func<float> orig);
public delegate void get_PixelToWorld_BeforeArgs();
public delegate float get_PixelToWorld_AfterArgs(float ret);
public delegate float get_PixelToWorld_WithArgs (Func<float> orig);
public delegate void get_HalfPixelToWorld_BeforeArgs();
public delegate float get_HalfPixelToWorld_AfterArgs(float ret);
public delegate float get_HalfPixelToWorld_WithArgs (Func<float> orig);
public delegate void get_ScreenSize_BeforeArgs();
public delegate UnityEngine.Vector2 get_ScreenSize_AfterArgs(UnityEngine.Vector2 ret);
public delegate UnityEngine.Vector2 get_ScreenSize_WithArgs (Func<UnityEngine.Vector2> orig);
public delegate void get_HalfScreenSize_BeforeArgs();
public delegate UnityEngine.Vector2 get_HalfScreenSize_AfterArgs(UnityEngine.Vector2 ret);
public delegate UnityEngine.Vector2 get_HalfScreenSize_WithArgs (Func<UnityEngine.Vector2> orig);
public delegate void get_ControlsEnabled_BeforeArgs();
public delegate bool get_ControlsEnabled_AfterArgs(bool ret);
public delegate bool get_ControlsEnabled_WithArgs (Func<bool> orig);
public sealed class Params_set_ControlsEnabled
{
public bool value;
}
public delegate void set_ControlsEnabled_BeforeArgs(Params_set_ControlsEnabled args);
public delegate void set_ControlsEnabled_AfterArgs(Params_set_ControlsEnabled args);
public delegate void set_ControlsEnabled_WithArgs (Action< bool> orig,  bool value);
public sealed class Params_op_Implicit
{
public InControl.TouchManager instance;
}
public delegate void op_Implicit_BeforeArgs(Params_op_Implicit args);
public delegate bool op_Implicit_AfterArgs(Params_op_Implicit args, bool ret);
public delegate bool op_Implicit_WithArgs (Func< InControl.TouchManager, bool> orig,  InControl.TouchManager instance);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.OnDisable_BeforeArgs OnDisable
{
add
{

HookHandler._beforeOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._beforeOnDisable -= value;
}
public static event Delegates.Setup_BeforeArgs Setup
{
add
{

HookHandler._beforeSetup += value;
HookHandler.HookSetup();
}
remove => HookHandler._beforeSetup -= value;
}
public static event Delegates.Reset_BeforeArgs Reset
{
add
{

HookHandler._beforeReset += value;
HookHandler.HookReset();
}
remove => HookHandler._beforeReset -= value;
}
public static event Delegates.UpdateScreenSizeAtEndOfFrame_BeforeArgs UpdateScreenSizeAtEndOfFrame
{
add
{

HookHandler._beforeUpdateScreenSizeAtEndOfFrame += value;
HookHandler.HookUpdateScreenSizeAtEndOfFrame();
}
remove => HookHandler._beforeUpdateScreenSizeAtEndOfFrame -= value;
}
public static event Delegates.Update_BeforeArgs Update
{
add
{

HookHandler._beforeUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._beforeUpdate -= value;
}
public static event Delegates.CreateDevice_BeforeArgs CreateDevice
{
add
{

HookHandler._beforeCreateDevice += value;
HookHandler.HookCreateDevice();
}
remove => HookHandler._beforeCreateDevice -= value;
}
public static event Delegates.UpdateDevice_BeforeArgs UpdateDevice
{
add
{

HookHandler._beforeUpdateDevice += value;
HookHandler.HookUpdateDevice();
}
remove => HookHandler._beforeUpdateDevice -= value;
}
public static event Delegates.CommitDevice_BeforeArgs CommitDevice
{
add
{

HookHandler._beforeCommitDevice += value;
HookHandler.HookCommitDevice();
}
remove => HookHandler._beforeCommitDevice -= value;
}
public static event Delegates.SubmitControlStates_BeforeArgs SubmitControlStates
{
add
{

HookHandler._beforeSubmitControlStates += value;
HookHandler.HookSubmitControlStates();
}
remove => HookHandler._beforeSubmitControlStates -= value;
}
public static event Delegates.CommitControlStates_BeforeArgs CommitControlStates
{
add
{

HookHandler._beforeCommitControlStates += value;
HookHandler.HookCommitControlStates();
}
remove => HookHandler._beforeCommitControlStates -= value;
}
public static event Delegates.UpdateScreenSize_BeforeArgs UpdateScreenSize
{
add
{

HookHandler._beforeUpdateScreenSize += value;
HookHandler.HookUpdateScreenSize();
}
remove => HookHandler._beforeUpdateScreenSize -= value;
}
public static event Delegates.CreateTouches_BeforeArgs CreateTouches
{
add
{

HookHandler._beforeCreateTouches += value;
HookHandler.HookCreateTouches();
}
remove => HookHandler._beforeCreateTouches -= value;
}
public static event Delegates.UpdateTouches_BeforeArgs UpdateTouches
{
add
{

HookHandler._beforeUpdateTouches += value;
HookHandler.HookUpdateTouches();
}
remove => HookHandler._beforeUpdateTouches -= value;
}
public static event Delegates.SendTouchBegan_BeforeArgs SendTouchBegan
{
add
{

HookHandler._beforeSendTouchBegan += value;
HookHandler.HookSendTouchBegan();
}
remove => HookHandler._beforeSendTouchBegan -= value;
}
public static event Delegates.SendTouchMoved_BeforeArgs SendTouchMoved
{
add
{

HookHandler._beforeSendTouchMoved += value;
HookHandler.HookSendTouchMoved();
}
remove => HookHandler._beforeSendTouchMoved -= value;
}
public static event Delegates.SendTouchEnded_BeforeArgs SendTouchEnded
{
add
{

HookHandler._beforeSendTouchEnded += value;
HookHandler.HookSendTouchEnded();
}
remove => HookHandler._beforeSendTouchEnded -= value;
}
public static event Delegates.InvokeTouchEvents_BeforeArgs InvokeTouchEvents
{
add
{

HookHandler._beforeInvokeTouchEvents += value;
HookHandler.HookInvokeTouchEvents();
}
remove => HookHandler._beforeInvokeTouchEvents -= value;
}
public static event Delegates.TouchCameraIsValid_BeforeArgs TouchCameraIsValid
{
add
{

HookHandler._beforeTouchCameraIsValid += value;
HookHandler.HookTouchCameraIsValid();
}
remove => HookHandler._beforeTouchCameraIsValid -= value;
}
public static event Delegates.ConvertScreenToWorldPoint_BeforeArgs ConvertScreenToWorldPoint
{
add
{

HookHandler._beforeConvertScreenToWorldPoint += value;
HookHandler.HookConvertScreenToWorldPoint();
}
remove => HookHandler._beforeConvertScreenToWorldPoint -= value;
}
public static event Delegates.ConvertViewToWorldPoint_BeforeArgs ConvertViewToWorldPoint
{
add
{

HookHandler._beforeConvertViewToWorldPoint += value;
HookHandler.HookConvertViewToWorldPoint();
}
remove => HookHandler._beforeConvertViewToWorldPoint -= value;
}
public static event Delegates.ConvertScreenToViewPoint_BeforeArgs ConvertScreenToViewPoint
{
add
{

HookHandler._beforeConvertScreenToViewPoint += value;
HookHandler.HookConvertScreenToViewPoint();
}
remove => HookHandler._beforeConvertScreenToViewPoint -= value;
}
public static event Delegates.GetCurrentScreenSize_BeforeArgs GetCurrentScreenSize
{
add
{

HookHandler._beforeGetCurrentScreenSize += value;
HookHandler.HookGetCurrentScreenSize();
}
remove => HookHandler._beforeGetCurrentScreenSize -= value;
}
public static event Delegates.get_controlsEnabled_BeforeArgs get_controlsEnabled
{
add
{

HookHandler._beforeget_controlsEnabled += value;
HookHandler.Hookget_controlsEnabled();
}
remove => HookHandler._beforeget_controlsEnabled -= value;
}
public static event Delegates.set_controlsEnabled_BeforeArgs set_controlsEnabled
{
add
{

HookHandler._beforeset_controlsEnabled += value;
HookHandler.Hookset_controlsEnabled();
}
remove => HookHandler._beforeset_controlsEnabled -= value;
}
public static event Delegates.get_Touches_BeforeArgs get_Touches
{
add
{

HookHandler._beforeget_Touches += value;
HookHandler.Hookget_Touches();
}
remove => HookHandler._beforeget_Touches -= value;
}
public static event Delegates.get_TouchCount_BeforeArgs get_TouchCount
{
add
{

HookHandler._beforeget_TouchCount += value;
HookHandler.Hookget_TouchCount();
}
remove => HookHandler._beforeget_TouchCount -= value;
}
public static event Delegates.GetTouch_BeforeArgs GetTouch
{
add
{

HookHandler._beforeGetTouch += value;
HookHandler.HookGetTouch();
}
remove => HookHandler._beforeGetTouch -= value;
}
public static event Delegates.GetTouchByFingerId_BeforeArgs GetTouchByFingerId
{
add
{

HookHandler._beforeGetTouchByFingerId += value;
HookHandler.HookGetTouchByFingerId();
}
remove => HookHandler._beforeGetTouchByFingerId -= value;
}
public static event Delegates.ScreenToWorldPoint_BeforeArgs ScreenToWorldPoint
{
add
{

HookHandler._beforeScreenToWorldPoint += value;
HookHandler.HookScreenToWorldPoint();
}
remove => HookHandler._beforeScreenToWorldPoint -= value;
}
public static event Delegates.ViewToWorldPoint_BeforeArgs ViewToWorldPoint
{
add
{

HookHandler._beforeViewToWorldPoint += value;
HookHandler.HookViewToWorldPoint();
}
remove => HookHandler._beforeViewToWorldPoint -= value;
}
public static event Delegates.ScreenToViewPoint_BeforeArgs ScreenToViewPoint
{
add
{

HookHandler._beforeScreenToViewPoint += value;
HookHandler.HookScreenToViewPoint();
}
remove => HookHandler._beforeScreenToViewPoint -= value;
}
public static event Delegates.ConvertToWorld_float_TouchUnitType_BeforeArgs ConvertToWorld_float_TouchUnitType
{
add
{

HookHandler._beforeConvertToWorld_float_TouchUnitType += value;
HookHandler.HookConvertToWorld_float_TouchUnitType();
}
remove => HookHandler._beforeConvertToWorld_float_TouchUnitType -= value;
}
public static event Delegates.PercentToWorldRect_BeforeArgs PercentToWorldRect
{
add
{

HookHandler._beforePercentToWorldRect += value;
HookHandler.HookPercentToWorldRect();
}
remove => HookHandler._beforePercentToWorldRect -= value;
}
public static event Delegates.PixelToWorldRect_BeforeArgs PixelToWorldRect
{
add
{

HookHandler._beforePixelToWorldRect += value;
HookHandler.HookPixelToWorldRect();
}
remove => HookHandler._beforePixelToWorldRect -= value;
}
public static event Delegates.ConvertToWorld_Rect_TouchUnitType_BeforeArgs ConvertToWorld_Rect_TouchUnitType
{
add
{

HookHandler._beforeConvertToWorld_Rect_TouchUnitType += value;
HookHandler.HookConvertToWorld_Rect_TouchUnitType();
}
remove => HookHandler._beforeConvertToWorld_Rect_TouchUnitType -= value;
}
public static event Delegates.get_Camera_BeforeArgs get_Camera
{
add
{

HookHandler._beforeget_Camera += value;
HookHandler.Hookget_Camera();
}
remove => HookHandler._beforeget_Camera -= value;
}
public static event Delegates.get_Device_BeforeArgs get_Device
{
add
{

HookHandler._beforeget_Device += value;
HookHandler.Hookget_Device();
}
remove => HookHandler._beforeget_Device -= value;
}
public static event Delegates.get_ViewSize_BeforeArgs get_ViewSize
{
add
{

HookHandler._beforeget_ViewSize += value;
HookHandler.Hookget_ViewSize();
}
remove => HookHandler._beforeget_ViewSize -= value;
}
public static event Delegates.get_PercentToWorld_BeforeArgs get_PercentToWorld
{
add
{

HookHandler._beforeget_PercentToWorld += value;
HookHandler.Hookget_PercentToWorld();
}
remove => HookHandler._beforeget_PercentToWorld -= value;
}
public static event Delegates.get_HalfPercentToWorld_BeforeArgs get_HalfPercentToWorld
{
add
{

HookHandler._beforeget_HalfPercentToWorld += value;
HookHandler.Hookget_HalfPercentToWorld();
}
remove => HookHandler._beforeget_HalfPercentToWorld -= value;
}
public static event Delegates.get_PixelToWorld_BeforeArgs get_PixelToWorld
{
add
{

HookHandler._beforeget_PixelToWorld += value;
HookHandler.Hookget_PixelToWorld();
}
remove => HookHandler._beforeget_PixelToWorld -= value;
}
public static event Delegates.get_HalfPixelToWorld_BeforeArgs get_HalfPixelToWorld
{
add
{

HookHandler._beforeget_HalfPixelToWorld += value;
HookHandler.Hookget_HalfPixelToWorld();
}
remove => HookHandler._beforeget_HalfPixelToWorld -= value;
}
public static event Delegates.get_ScreenSize_BeforeArgs get_ScreenSize
{
add
{

HookHandler._beforeget_ScreenSize += value;
HookHandler.Hookget_ScreenSize();
}
remove => HookHandler._beforeget_ScreenSize -= value;
}
public static event Delegates.get_HalfScreenSize_BeforeArgs get_HalfScreenSize
{
add
{

HookHandler._beforeget_HalfScreenSize += value;
HookHandler.Hookget_HalfScreenSize();
}
remove => HookHandler._beforeget_HalfScreenSize -= value;
}
public static event Delegates.get_ControlsEnabled_BeforeArgs get_ControlsEnabled
{
add
{

HookHandler._beforeget_ControlsEnabled += value;
HookHandler.Hookget_ControlsEnabled();
}
remove => HookHandler._beforeget_ControlsEnabled -= value;
}
public static event Delegates.set_ControlsEnabled_BeforeArgs set_ControlsEnabled
{
add
{

HookHandler._beforeset_ControlsEnabled += value;
HookHandler.Hookset_ControlsEnabled();
}
remove => HookHandler._beforeset_ControlsEnabled -= value;
}
public static event Delegates.op_Implicit_BeforeArgs op_Implicit
{
add
{

HookHandler._beforeop_Implicit += value;
HookHandler.Hookop_Implicit();
}
remove => HookHandler._beforeop_Implicit -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.OnDisable_AfterArgs OnDisable
{
add
{

HookHandler._afterOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._afterOnDisable -= value;
}
public static event Delegates.Setup_AfterArgs Setup
{
add
{

HookHandler._afterSetup += value;
HookHandler.HookSetup();
}
remove => HookHandler._afterSetup -= value;
}
public static event Delegates.Reset_AfterArgs Reset
{
add
{

HookHandler._afterReset += value;
HookHandler.HookReset();
}
remove => HookHandler._afterReset -= value;
}
public static event Delegates.Update_AfterArgs Update
{
add
{

HookHandler._afterUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._afterUpdate -= value;
}
public static event Delegates.CreateDevice_AfterArgs CreateDevice
{
add
{

HookHandler._afterCreateDevice += value;
HookHandler.HookCreateDevice();
}
remove => HookHandler._afterCreateDevice -= value;
}
public static event Delegates.UpdateDevice_AfterArgs UpdateDevice
{
add
{

HookHandler._afterUpdateDevice += value;
HookHandler.HookUpdateDevice();
}
remove => HookHandler._afterUpdateDevice -= value;
}
public static event Delegates.CommitDevice_AfterArgs CommitDevice
{
add
{

HookHandler._afterCommitDevice += value;
HookHandler.HookCommitDevice();
}
remove => HookHandler._afterCommitDevice -= value;
}
public static event Delegates.SubmitControlStates_AfterArgs SubmitControlStates
{
add
{

HookHandler._afterSubmitControlStates += value;
HookHandler.HookSubmitControlStates();
}
remove => HookHandler._afterSubmitControlStates -= value;
}
public static event Delegates.CommitControlStates_AfterArgs CommitControlStates
{
add
{

HookHandler._afterCommitControlStates += value;
HookHandler.HookCommitControlStates();
}
remove => HookHandler._afterCommitControlStates -= value;
}
public static event Delegates.UpdateScreenSize_AfterArgs UpdateScreenSize
{
add
{

HookHandler._afterUpdateScreenSize += value;
HookHandler.HookUpdateScreenSize();
}
remove => HookHandler._afterUpdateScreenSize -= value;
}
public static event Delegates.CreateTouches_AfterArgs CreateTouches
{
add
{

HookHandler._afterCreateTouches += value;
HookHandler.HookCreateTouches();
}
remove => HookHandler._afterCreateTouches -= value;
}
public static event Delegates.UpdateTouches_AfterArgs UpdateTouches
{
add
{

HookHandler._afterUpdateTouches += value;
HookHandler.HookUpdateTouches();
}
remove => HookHandler._afterUpdateTouches -= value;
}
public static event Delegates.SendTouchBegan_AfterArgs SendTouchBegan
{
add
{

HookHandler._afterSendTouchBegan += value;
HookHandler.HookSendTouchBegan();
}
remove => HookHandler._afterSendTouchBegan -= value;
}
public static event Delegates.SendTouchMoved_AfterArgs SendTouchMoved
{
add
{

HookHandler._afterSendTouchMoved += value;
HookHandler.HookSendTouchMoved();
}
remove => HookHandler._afterSendTouchMoved -= value;
}
public static event Delegates.SendTouchEnded_AfterArgs SendTouchEnded
{
add
{

HookHandler._afterSendTouchEnded += value;
HookHandler.HookSendTouchEnded();
}
remove => HookHandler._afterSendTouchEnded -= value;
}
public static event Delegates.InvokeTouchEvents_AfterArgs InvokeTouchEvents
{
add
{

HookHandler._afterInvokeTouchEvents += value;
HookHandler.HookInvokeTouchEvents();
}
remove => HookHandler._afterInvokeTouchEvents -= value;
}
public static event Delegates.TouchCameraIsValid_AfterArgs TouchCameraIsValid
{
add
{

HookHandler._afterTouchCameraIsValid += value;
HookHandler.HookTouchCameraIsValid();
}
remove => HookHandler._afterTouchCameraIsValid -= value;
}
public static event Delegates.ConvertScreenToWorldPoint_AfterArgs ConvertScreenToWorldPoint
{
add
{

HookHandler._afterConvertScreenToWorldPoint += value;
HookHandler.HookConvertScreenToWorldPoint();
}
remove => HookHandler._afterConvertScreenToWorldPoint -= value;
}
public static event Delegates.ConvertViewToWorldPoint_AfterArgs ConvertViewToWorldPoint
{
add
{

HookHandler._afterConvertViewToWorldPoint += value;
HookHandler.HookConvertViewToWorldPoint();
}
remove => HookHandler._afterConvertViewToWorldPoint -= value;
}
public static event Delegates.ConvertScreenToViewPoint_AfterArgs ConvertScreenToViewPoint
{
add
{

HookHandler._afterConvertScreenToViewPoint += value;
HookHandler.HookConvertScreenToViewPoint();
}
remove => HookHandler._afterConvertScreenToViewPoint -= value;
}
public static event Delegates.GetCurrentScreenSize_AfterArgs GetCurrentScreenSize
{
add
{

HookHandler._afterGetCurrentScreenSize += value;
HookHandler.HookGetCurrentScreenSize();
}
remove => HookHandler._afterGetCurrentScreenSize -= value;
}
public static event Delegates.get_controlsEnabled_AfterArgs get_controlsEnabled
{
add
{

HookHandler._afterget_controlsEnabled += value;
HookHandler.Hookget_controlsEnabled();
}
remove => HookHandler._afterget_controlsEnabled -= value;
}
public static event Delegates.set_controlsEnabled_AfterArgs set_controlsEnabled
{
add
{

HookHandler._afterset_controlsEnabled += value;
HookHandler.Hookset_controlsEnabled();
}
remove => HookHandler._afterset_controlsEnabled -= value;
}
public static event Delegates.get_Touches_AfterArgs get_Touches
{
add
{

HookHandler._afterget_Touches += value;
HookHandler.Hookget_Touches();
}
remove => HookHandler._afterget_Touches -= value;
}
public static event Delegates.get_TouchCount_AfterArgs get_TouchCount
{
add
{

HookHandler._afterget_TouchCount += value;
HookHandler.Hookget_TouchCount();
}
remove => HookHandler._afterget_TouchCount -= value;
}
public static event Delegates.GetTouch_AfterArgs GetTouch
{
add
{

HookHandler._afterGetTouch += value;
HookHandler.HookGetTouch();
}
remove => HookHandler._afterGetTouch -= value;
}
public static event Delegates.GetTouchByFingerId_AfterArgs GetTouchByFingerId
{
add
{

HookHandler._afterGetTouchByFingerId += value;
HookHandler.HookGetTouchByFingerId();
}
remove => HookHandler._afterGetTouchByFingerId -= value;
}
public static event Delegates.ScreenToWorldPoint_AfterArgs ScreenToWorldPoint
{
add
{

HookHandler._afterScreenToWorldPoint += value;
HookHandler.HookScreenToWorldPoint();
}
remove => HookHandler._afterScreenToWorldPoint -= value;
}
public static event Delegates.ViewToWorldPoint_AfterArgs ViewToWorldPoint
{
add
{

HookHandler._afterViewToWorldPoint += value;
HookHandler.HookViewToWorldPoint();
}
remove => HookHandler._afterViewToWorldPoint -= value;
}
public static event Delegates.ScreenToViewPoint_AfterArgs ScreenToViewPoint
{
add
{

HookHandler._afterScreenToViewPoint += value;
HookHandler.HookScreenToViewPoint();
}
remove => HookHandler._afterScreenToViewPoint -= value;
}
public static event Delegates.ConvertToWorld_float_TouchUnitType_AfterArgs ConvertToWorld_float_TouchUnitType
{
add
{

HookHandler._afterConvertToWorld_float_TouchUnitType += value;
HookHandler.HookConvertToWorld_float_TouchUnitType();
}
remove => HookHandler._afterConvertToWorld_float_TouchUnitType -= value;
}
public static event Delegates.PercentToWorldRect_AfterArgs PercentToWorldRect
{
add
{

HookHandler._afterPercentToWorldRect += value;
HookHandler.HookPercentToWorldRect();
}
remove => HookHandler._afterPercentToWorldRect -= value;
}
public static event Delegates.PixelToWorldRect_AfterArgs PixelToWorldRect
{
add
{

HookHandler._afterPixelToWorldRect += value;
HookHandler.HookPixelToWorldRect();
}
remove => HookHandler._afterPixelToWorldRect -= value;
}
public static event Delegates.ConvertToWorld_Rect_TouchUnitType_AfterArgs ConvertToWorld_Rect_TouchUnitType
{
add
{

HookHandler._afterConvertToWorld_Rect_TouchUnitType += value;
HookHandler.HookConvertToWorld_Rect_TouchUnitType();
}
remove => HookHandler._afterConvertToWorld_Rect_TouchUnitType -= value;
}
public static event Delegates.get_Camera_AfterArgs get_Camera
{
add
{

HookHandler._afterget_Camera += value;
HookHandler.Hookget_Camera();
}
remove => HookHandler._afterget_Camera -= value;
}
public static event Delegates.get_Device_AfterArgs get_Device
{
add
{

HookHandler._afterget_Device += value;
HookHandler.Hookget_Device();
}
remove => HookHandler._afterget_Device -= value;
}
public static event Delegates.get_ViewSize_AfterArgs get_ViewSize
{
add
{

HookHandler._afterget_ViewSize += value;
HookHandler.Hookget_ViewSize();
}
remove => HookHandler._afterget_ViewSize -= value;
}
public static event Delegates.get_PercentToWorld_AfterArgs get_PercentToWorld
{
add
{

HookHandler._afterget_PercentToWorld += value;
HookHandler.Hookget_PercentToWorld();
}
remove => HookHandler._afterget_PercentToWorld -= value;
}
public static event Delegates.get_HalfPercentToWorld_AfterArgs get_HalfPercentToWorld
{
add
{

HookHandler._afterget_HalfPercentToWorld += value;
HookHandler.Hookget_HalfPercentToWorld();
}
remove => HookHandler._afterget_HalfPercentToWorld -= value;
}
public static event Delegates.get_PixelToWorld_AfterArgs get_PixelToWorld
{
add
{

HookHandler._afterget_PixelToWorld += value;
HookHandler.Hookget_PixelToWorld();
}
remove => HookHandler._afterget_PixelToWorld -= value;
}
public static event Delegates.get_HalfPixelToWorld_AfterArgs get_HalfPixelToWorld
{
add
{

HookHandler._afterget_HalfPixelToWorld += value;
HookHandler.Hookget_HalfPixelToWorld();
}
remove => HookHandler._afterget_HalfPixelToWorld -= value;
}
public static event Delegates.get_ScreenSize_AfterArgs get_ScreenSize
{
add
{

HookHandler._afterget_ScreenSize += value;
HookHandler.Hookget_ScreenSize();
}
remove => HookHandler._afterget_ScreenSize -= value;
}
public static event Delegates.get_HalfScreenSize_AfterArgs get_HalfScreenSize
{
add
{

HookHandler._afterget_HalfScreenSize += value;
HookHandler.Hookget_HalfScreenSize();
}
remove => HookHandler._afterget_HalfScreenSize -= value;
}
public static event Delegates.get_ControlsEnabled_AfterArgs get_ControlsEnabled
{
add
{

HookHandler._afterget_ControlsEnabled += value;
HookHandler.Hookget_ControlsEnabled();
}
remove => HookHandler._afterget_ControlsEnabled -= value;
}
public static event Delegates.set_ControlsEnabled_AfterArgs set_ControlsEnabled
{
add
{

HookHandler._afterset_ControlsEnabled += value;
HookHandler.Hookset_ControlsEnabled();
}
remove => HookHandler._afterset_ControlsEnabled -= value;
}
public static event Delegates.op_Implicit_AfterArgs op_Implicit
{
add
{

HookHandler._afterop_Implicit += value;
HookHandler.Hookop_Implicit();
}
remove => HookHandler._afterop_Implicit -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.OnEnable_WithArgs OnEnable
{
add => HookEndpointManager.Add<Delegates.OnEnable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "OnEnable", true), value);
remove => HookEndpointManager.Remove<Delegates.OnEnable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "OnEnable", true), value);
}
public static event Delegates.OnDisable_WithArgs OnDisable
{
add => HookEndpointManager.Add<Delegates.OnDisable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "OnDisable", true), value);
remove => HookEndpointManager.Remove<Delegates.OnDisable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "OnDisable", true), value);
}
public static event Delegates.Setup_WithArgs Setup
{
add => HookEndpointManager.Add<Delegates.Setup_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "Setup", true), value);
remove => HookEndpointManager.Remove<Delegates.Setup_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "Setup", true), value);
}
public static event Delegates.Reset_WithArgs Reset
{
add => HookEndpointManager.Add<Delegates.Reset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "Reset", true), value);
remove => HookEndpointManager.Remove<Delegates.Reset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "Reset", true), value);
}
public static event Delegates.UpdateScreenSizeAtEndOfFrame_WithArgs UpdateScreenSizeAtEndOfFrame
{
add => HookEndpointManager.Add<Delegates.UpdateScreenSizeAtEndOfFrame_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "UpdateScreenSizeAtEndOfFrame", true), value);
remove => HookEndpointManager.Remove<Delegates.UpdateScreenSizeAtEndOfFrame_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "UpdateScreenSizeAtEndOfFrame", true), value);
}
public static event Delegates.Update_WithArgs Update
{
add => HookEndpointManager.Add<Delegates.Update_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "Update", true), value);
remove => HookEndpointManager.Remove<Delegates.Update_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "Update", true), value);
}
public static event Delegates.CreateDevice_WithArgs CreateDevice
{
add => HookEndpointManager.Add<Delegates.CreateDevice_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "CreateDevice", true), value);
remove => HookEndpointManager.Remove<Delegates.CreateDevice_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "CreateDevice", true), value);
}
public static event Delegates.UpdateDevice_WithArgs UpdateDevice
{
add => HookEndpointManager.Add<Delegates.UpdateDevice_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "UpdateDevice", true), value);
remove => HookEndpointManager.Remove<Delegates.UpdateDevice_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "UpdateDevice", true), value);
}
public static event Delegates.CommitDevice_WithArgs CommitDevice
{
add => HookEndpointManager.Add<Delegates.CommitDevice_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "CommitDevice", true), value);
remove => HookEndpointManager.Remove<Delegates.CommitDevice_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "CommitDevice", true), value);
}
public static event Delegates.SubmitControlStates_WithArgs SubmitControlStates
{
add => HookEndpointManager.Add<Delegates.SubmitControlStates_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "SubmitControlStates", true), value);
remove => HookEndpointManager.Remove<Delegates.SubmitControlStates_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "SubmitControlStates", true), value);
}
public static event Delegates.CommitControlStates_WithArgs CommitControlStates
{
add => HookEndpointManager.Add<Delegates.CommitControlStates_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "CommitControlStates", true), value);
remove => HookEndpointManager.Remove<Delegates.CommitControlStates_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "CommitControlStates", true), value);
}
public static event Delegates.UpdateScreenSize_WithArgs UpdateScreenSize
{
add => HookEndpointManager.Add<Delegates.UpdateScreenSize_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "UpdateScreenSize", true), value);
remove => HookEndpointManager.Remove<Delegates.UpdateScreenSize_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "UpdateScreenSize", true), value);
}
public static event Delegates.CreateTouches_WithArgs CreateTouches
{
add => HookEndpointManager.Add<Delegates.CreateTouches_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "CreateTouches", true), value);
remove => HookEndpointManager.Remove<Delegates.CreateTouches_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "CreateTouches", true), value);
}
public static event Delegates.UpdateTouches_WithArgs UpdateTouches
{
add => HookEndpointManager.Add<Delegates.UpdateTouches_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "UpdateTouches", true), value);
remove => HookEndpointManager.Remove<Delegates.UpdateTouches_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "UpdateTouches", true), value);
}
public static event Delegates.SendTouchBegan_WithArgs SendTouchBegan
{
add => HookEndpointManager.Add<Delegates.SendTouchBegan_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "SendTouchBegan", true), value);
remove => HookEndpointManager.Remove<Delegates.SendTouchBegan_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "SendTouchBegan", true), value);
}
public static event Delegates.SendTouchMoved_WithArgs SendTouchMoved
{
add => HookEndpointManager.Add<Delegates.SendTouchMoved_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "SendTouchMoved", true), value);
remove => HookEndpointManager.Remove<Delegates.SendTouchMoved_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "SendTouchMoved", true), value);
}
public static event Delegates.SendTouchEnded_WithArgs SendTouchEnded
{
add => HookEndpointManager.Add<Delegates.SendTouchEnded_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "SendTouchEnded", true), value);
remove => HookEndpointManager.Remove<Delegates.SendTouchEnded_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "SendTouchEnded", true), value);
}
public static event Delegates.InvokeTouchEvents_WithArgs InvokeTouchEvents
{
add => HookEndpointManager.Add<Delegates.InvokeTouchEvents_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "InvokeTouchEvents", true), value);
remove => HookEndpointManager.Remove<Delegates.InvokeTouchEvents_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "InvokeTouchEvents", true), value);
}
public static event Delegates.TouchCameraIsValid_WithArgs TouchCameraIsValid
{
add => HookEndpointManager.Add<Delegates.TouchCameraIsValid_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "TouchCameraIsValid", true), value);
remove => HookEndpointManager.Remove<Delegates.TouchCameraIsValid_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "TouchCameraIsValid", true), value);
}
public static event Delegates.ConvertScreenToWorldPoint_WithArgs ConvertScreenToWorldPoint
{
add => HookEndpointManager.Add<Delegates.ConvertScreenToWorldPoint_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ConvertScreenToWorldPoint", true), value);
remove => HookEndpointManager.Remove<Delegates.ConvertScreenToWorldPoint_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ConvertScreenToWorldPoint", true), value);
}
public static event Delegates.ConvertViewToWorldPoint_WithArgs ConvertViewToWorldPoint
{
add => HookEndpointManager.Add<Delegates.ConvertViewToWorldPoint_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ConvertViewToWorldPoint", true), value);
remove => HookEndpointManager.Remove<Delegates.ConvertViewToWorldPoint_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ConvertViewToWorldPoint", true), value);
}
public static event Delegates.ConvertScreenToViewPoint_WithArgs ConvertScreenToViewPoint
{
add => HookEndpointManager.Add<Delegates.ConvertScreenToViewPoint_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ConvertScreenToViewPoint", true), value);
remove => HookEndpointManager.Remove<Delegates.ConvertScreenToViewPoint_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ConvertScreenToViewPoint", true), value);
}
public static event Delegates.GetCurrentScreenSize_WithArgs GetCurrentScreenSize
{
add => HookEndpointManager.Add<Delegates.GetCurrentScreenSize_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "GetCurrentScreenSize", true), value);
remove => HookEndpointManager.Remove<Delegates.GetCurrentScreenSize_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "GetCurrentScreenSize", true), value);
}
public static event Delegates.get_controlsEnabled_WithArgs get_controlsEnabled
{
add => HookEndpointManager.Add<Delegates.get_controlsEnabled_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_controlsEnabled", true), value);
remove => HookEndpointManager.Remove<Delegates.get_controlsEnabled_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_controlsEnabled", true), value);
}
public static event Delegates.set_controlsEnabled_WithArgs set_controlsEnabled
{
add => HookEndpointManager.Add<Delegates.set_controlsEnabled_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "set_controlsEnabled", true), value);
remove => HookEndpointManager.Remove<Delegates.set_controlsEnabled_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "set_controlsEnabled", true), value);
}
public static event Delegates.get_Touches_WithArgs get_Touches
{
add => HookEndpointManager.Add<Delegates.get_Touches_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_Touches", false), value);
remove => HookEndpointManager.Remove<Delegates.get_Touches_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_Touches", false), value);
}
public static event Delegates.get_TouchCount_WithArgs get_TouchCount
{
add => HookEndpointManager.Add<Delegates.get_TouchCount_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_TouchCount", false), value);
remove => HookEndpointManager.Remove<Delegates.get_TouchCount_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_TouchCount", false), value);
}
public static event Delegates.GetTouch_WithArgs GetTouch
{
add => HookEndpointManager.Add<Delegates.GetTouch_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "GetTouch", false), value);
remove => HookEndpointManager.Remove<Delegates.GetTouch_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "GetTouch", false), value);
}
public static event Delegates.GetTouchByFingerId_WithArgs GetTouchByFingerId
{
add => HookEndpointManager.Add<Delegates.GetTouchByFingerId_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "GetTouchByFingerId", false), value);
remove => HookEndpointManager.Remove<Delegates.GetTouchByFingerId_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "GetTouchByFingerId", false), value);
}
public static event Delegates.ScreenToWorldPoint_WithArgs ScreenToWorldPoint
{
add => HookEndpointManager.Add<Delegates.ScreenToWorldPoint_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ScreenToWorldPoint", false), value);
remove => HookEndpointManager.Remove<Delegates.ScreenToWorldPoint_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ScreenToWorldPoint", false), value);
}
public static event Delegates.ViewToWorldPoint_WithArgs ViewToWorldPoint
{
add => HookEndpointManager.Add<Delegates.ViewToWorldPoint_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ViewToWorldPoint", false), value);
remove => HookEndpointManager.Remove<Delegates.ViewToWorldPoint_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ViewToWorldPoint", false), value);
}
public static event Delegates.ScreenToViewPoint_WithArgs ScreenToViewPoint
{
add => HookEndpointManager.Add<Delegates.ScreenToViewPoint_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ScreenToViewPoint", false), value);
remove => HookEndpointManager.Remove<Delegates.ScreenToViewPoint_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ScreenToViewPoint", false), value);
}
public static event Delegates.ConvertToWorld_float_TouchUnitType_WithArgs ConvertToWorld_float_TouchUnitType
{
add => HookEndpointManager.Add<Delegates.ConvertToWorld_float_TouchUnitType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ConvertToWorld", false), value);
remove => HookEndpointManager.Remove<Delegates.ConvertToWorld_float_TouchUnitType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ConvertToWorld", false), value);
}
public static event Delegates.PercentToWorldRect_WithArgs PercentToWorldRect
{
add => HookEndpointManager.Add<Delegates.PercentToWorldRect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "PercentToWorldRect", false), value);
remove => HookEndpointManager.Remove<Delegates.PercentToWorldRect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "PercentToWorldRect", false), value);
}
public static event Delegates.PixelToWorldRect_WithArgs PixelToWorldRect
{
add => HookEndpointManager.Add<Delegates.PixelToWorldRect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "PixelToWorldRect", false), value);
remove => HookEndpointManager.Remove<Delegates.PixelToWorldRect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "PixelToWorldRect", false), value);
}
public static event Delegates.ConvertToWorld_Rect_TouchUnitType_WithArgs ConvertToWorld_Rect_TouchUnitType
{
add => HookEndpointManager.Add<Delegates.ConvertToWorld_Rect_TouchUnitType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ConvertToWorld", false), value);
remove => HookEndpointManager.Remove<Delegates.ConvertToWorld_Rect_TouchUnitType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "ConvertToWorld", false), value);
}
public static event Delegates.get_Camera_WithArgs get_Camera
{
add => HookEndpointManager.Add<Delegates.get_Camera_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_Camera", false), value);
remove => HookEndpointManager.Remove<Delegates.get_Camera_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_Camera", false), value);
}
public static event Delegates.get_Device_WithArgs get_Device
{
add => HookEndpointManager.Add<Delegates.get_Device_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_Device", false), value);
remove => HookEndpointManager.Remove<Delegates.get_Device_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_Device", false), value);
}
public static event Delegates.get_ViewSize_WithArgs get_ViewSize
{
add => HookEndpointManager.Add<Delegates.get_ViewSize_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_ViewSize", false), value);
remove => HookEndpointManager.Remove<Delegates.get_ViewSize_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_ViewSize", false), value);
}
public static event Delegates.get_PercentToWorld_WithArgs get_PercentToWorld
{
add => HookEndpointManager.Add<Delegates.get_PercentToWorld_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_PercentToWorld", false), value);
remove => HookEndpointManager.Remove<Delegates.get_PercentToWorld_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_PercentToWorld", false), value);
}
public static event Delegates.get_HalfPercentToWorld_WithArgs get_HalfPercentToWorld
{
add => HookEndpointManager.Add<Delegates.get_HalfPercentToWorld_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_HalfPercentToWorld", false), value);
remove => HookEndpointManager.Remove<Delegates.get_HalfPercentToWorld_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_HalfPercentToWorld", false), value);
}
public static event Delegates.get_PixelToWorld_WithArgs get_PixelToWorld
{
add => HookEndpointManager.Add<Delegates.get_PixelToWorld_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_PixelToWorld", false), value);
remove => HookEndpointManager.Remove<Delegates.get_PixelToWorld_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_PixelToWorld", false), value);
}
public static event Delegates.get_HalfPixelToWorld_WithArgs get_HalfPixelToWorld
{
add => HookEndpointManager.Add<Delegates.get_HalfPixelToWorld_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_HalfPixelToWorld", false), value);
remove => HookEndpointManager.Remove<Delegates.get_HalfPixelToWorld_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_HalfPixelToWorld", false), value);
}
public static event Delegates.get_ScreenSize_WithArgs get_ScreenSize
{
add => HookEndpointManager.Add<Delegates.get_ScreenSize_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_ScreenSize", false), value);
remove => HookEndpointManager.Remove<Delegates.get_ScreenSize_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_ScreenSize", false), value);
}
public static event Delegates.get_HalfScreenSize_WithArgs get_HalfScreenSize
{
add => HookEndpointManager.Add<Delegates.get_HalfScreenSize_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_HalfScreenSize", false), value);
remove => HookEndpointManager.Remove<Delegates.get_HalfScreenSize_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_HalfScreenSize", false), value);
}
public static event Delegates.get_ControlsEnabled_WithArgs get_ControlsEnabled
{
add => HookEndpointManager.Add<Delegates.get_ControlsEnabled_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_ControlsEnabled", false), value);
remove => HookEndpointManager.Remove<Delegates.get_ControlsEnabled_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "get_ControlsEnabled", false), value);
}
public static event Delegates.set_ControlsEnabled_WithArgs set_ControlsEnabled
{
add => HookEndpointManager.Add<Delegates.set_ControlsEnabled_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "set_ControlsEnabled", false), value);
remove => HookEndpointManager.Remove<Delegates.set_ControlsEnabled_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "set_ControlsEnabled", false), value);
}
public static event Delegates.op_Implicit_WithArgs op_Implicit
{
add => HookEndpointManager.Add<Delegates.op_Implicit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "op_Implicit", false), value);
remove => HookEndpointManager.Remove<Delegates.op_Implicit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchManager), "op_Implicit", false), value);
}
}

}
