using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for GrassSpriteBehaviour class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGrassSpriteBehaviour
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.GrassSpriteBehaviour.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.GrassSpriteBehaviour.orig_Awake orig,GrassSpriteBehaviour self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.GrassSpriteBehaviour.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.GrassSpriteBehaviour.orig_Start orig,GrassSpriteBehaviour self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnBecameVisible()
{
if (!HookedList.Contains("OnBecameVisible"))
{
HookedList.Add("OnBecameVisible");
On.GrassSpriteBehaviour.OnBecameVisible += OnBecameVisible;

}
}
internal static event Delegates.OnBecameVisible_BeforeArgs _beforeOnBecameVisible;
internal static event Delegates.OnBecameVisible_AfterArgs _afterOnBecameVisible;
private static void OnBecameVisible(On.GrassSpriteBehaviour.orig_OnBecameVisible orig,GrassSpriteBehaviour self)
{
Delegates.Params_OnBecameVisible @params = new() 
{
self = self
};
if (_beforeOnBecameVisible != null)
{
foreach (Delegates.OnBecameVisible_BeforeArgs toInvoke in _beforeOnBecameVisible.GetInvocationList())
{
try
{
_beforeOnBecameVisible?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnBecameVisible != null)
{
foreach (Delegates.OnBecameVisible_AfterArgs toInvoke in _afterOnBecameVisible.GetInvocationList())
{
try
{
_afterOnBecameVisible.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnBecameInvisible()
{
if (!HookedList.Contains("OnBecameInvisible"))
{
HookedList.Add("OnBecameInvisible");
On.GrassSpriteBehaviour.OnBecameInvisible += OnBecameInvisible;

}
}
internal static event Delegates.OnBecameInvisible_BeforeArgs _beforeOnBecameInvisible;
internal static event Delegates.OnBecameInvisible_AfterArgs _afterOnBecameInvisible;
private static void OnBecameInvisible(On.GrassSpriteBehaviour.orig_OnBecameInvisible orig,GrassSpriteBehaviour self)
{
Delegates.Params_OnBecameInvisible @params = new() 
{
self = self
};
if (_beforeOnBecameInvisible != null)
{
foreach (Delegates.OnBecameInvisible_BeforeArgs toInvoke in _beforeOnBecameInvisible.GetInvocationList())
{
try
{
_beforeOnBecameInvisible?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnBecameInvisible != null)
{
foreach (Delegates.OnBecameInvisible_AfterArgs toInvoke in _afterOnBecameInvisible.GetInvocationList())
{
try
{
_afterOnBecameInvisible.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnTriggerEnter2D()
{
if (!HookedList.Contains("OnTriggerEnter2D"))
{
HookedList.Add("OnTriggerEnter2D");
On.GrassSpriteBehaviour.OnTriggerEnter2D += OnTriggerEnter2D;

}
}
internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
internal static event Delegates.OnTriggerEnter2D_AfterArgs _afterOnTriggerEnter2D;
private static void OnTriggerEnter2D(On.GrassSpriteBehaviour.orig_OnTriggerEnter2D orig,GrassSpriteBehaviour self,  UnityEngine.Collider2D collision)
{
Delegates.Params_OnTriggerEnter2D @params = new() 
{
self = self
, collision = collision
};
if (_beforeOnTriggerEnter2D != null)
{
foreach (Delegates.OnTriggerEnter2D_BeforeArgs toInvoke in _beforeOnTriggerEnter2D.GetInvocationList())
{
try
{
_beforeOnTriggerEnter2D?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
collision = @params.collision;
orig(self, collision);
if (_afterOnTriggerEnter2D != null)
{
foreach (Delegates.OnTriggerEnter2D_AfterArgs toInvoke in _afterOnTriggerEnter2D.GetInvocationList())
{
try
{
_afterOnTriggerEnter2D.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookInit()
{
if (!HookedList.Contains("Init"))
{
HookedList.Add("Init");
On.GrassSpriteBehaviour.Init += Init;

}
}
internal static event Delegates.Init_BeforeArgs _beforeInit;
internal static event Delegates.Init_AfterArgs _afterInit;
private static void Init(On.GrassSpriteBehaviour.orig_Init orig,GrassSpriteBehaviour self)
{
Delegates.Params_Init @params = new() 
{
self = self
};
if (_beforeInit != null)
{
foreach (Delegates.Init_BeforeArgs toInvoke in _beforeInit.GetInvocationList())
{
try
{
_beforeInit?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterInit != null)
{
foreach (Delegates.Init_AfterArgs toInvoke in _afterInit.GetInvocationList())
{
try
{
_afterInit.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetWindy()
{
if (!HookedList.Contains("SetWindy"))
{
HookedList.Add("SetWindy");
On.GrassSpriteBehaviour.SetWindy += SetWindy;

}
}
internal static event Delegates.SetWindy_BeforeArgs _beforeSetWindy;
internal static event Delegates.SetWindy_AfterArgs _afterSetWindy;
private static void SetWindy(On.GrassSpriteBehaviour.orig_SetWindy orig,GrassSpriteBehaviour self)
{
Delegates.Params_SetWindy @params = new() 
{
self = self
};
if (_beforeSetWindy != null)
{
foreach (Delegates.SetWindy_BeforeArgs toInvoke in _beforeSetWindy.GetInvocationList())
{
try
{
_beforeSetWindy?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetWindy != null)
{
foreach (Delegates.SetWindy_AfterArgs toInvoke in _afterSetWindy.GetInvocationList())
{
try
{
_afterSetWindy.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetNotWindy()
{
if (!HookedList.Contains("SetNotWindy"))
{
HookedList.Add("SetNotWindy");
On.GrassSpriteBehaviour.SetNotWindy += SetNotWindy;

}
}
internal static event Delegates.SetNotWindy_BeforeArgs _beforeSetNotWindy;
internal static event Delegates.SetNotWindy_AfterArgs _afterSetNotWindy;
private static void SetNotWindy(On.GrassSpriteBehaviour.orig_SetNotWindy orig,GrassSpriteBehaviour self)
{
Delegates.Params_SetNotWindy @params = new() 
{
self = self
};
if (_beforeSetNotWindy != null)
{
foreach (Delegates.SetNotWindy_BeforeArgs toInvoke in _beforeSetNotWindy.GetInvocationList())
{
try
{
_beforeSetNotWindy?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetNotWindy != null)
{
foreach (Delegates.SetNotWindy_AfterArgs toInvoke in _afterSetNotWindy.GetInvocationList())
{
try
{
_afterSetNotWindy.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Awake
{
public GrassSpriteBehaviour self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<GrassSpriteBehaviour> orig, GrassSpriteBehaviour self);
public sealed class Params_Start
{
public GrassSpriteBehaviour self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<GrassSpriteBehaviour> orig, GrassSpriteBehaviour self);
public sealed class Params_OnBecameVisible
{
public GrassSpriteBehaviour self;
}
public delegate void OnBecameVisible_BeforeArgs(Params_OnBecameVisible args);
public delegate void OnBecameVisible_AfterArgs(Params_OnBecameVisible args);
public delegate void OnBecameVisible_WithArgs (Action<GrassSpriteBehaviour> orig, GrassSpriteBehaviour self);
public sealed class Params_OnBecameInvisible
{
public GrassSpriteBehaviour self;
}
public delegate void OnBecameInvisible_BeforeArgs(Params_OnBecameInvisible args);
public delegate void OnBecameInvisible_AfterArgs(Params_OnBecameInvisible args);
public delegate void OnBecameInvisible_WithArgs (Action<GrassSpriteBehaviour> orig, GrassSpriteBehaviour self);
public sealed class Params_OnTriggerEnter2D
{
public GrassSpriteBehaviour self;
public UnityEngine.Collider2D collision;
}
public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);
public delegate void OnTriggerEnter2D_AfterArgs(Params_OnTriggerEnter2D args);
public delegate void OnTriggerEnter2D_WithArgs (Action<GrassSpriteBehaviour,  UnityEngine.Collider2D> orig, GrassSpriteBehaviour self,  UnityEngine.Collider2D collision);
public sealed class Params_Init
{
public GrassSpriteBehaviour self;
}
public delegate void Init_BeforeArgs(Params_Init args);
public delegate void Init_AfterArgs(Params_Init args);
public delegate void Init_WithArgs (Action<GrassSpriteBehaviour> orig, GrassSpriteBehaviour self);
public sealed class Params_SetWindy
{
public GrassSpriteBehaviour self;
}
public delegate void SetWindy_BeforeArgs(Params_SetWindy args);
public delegate void SetWindy_AfterArgs(Params_SetWindy args);
public delegate void SetWindy_WithArgs (Action<GrassSpriteBehaviour> orig, GrassSpriteBehaviour self);
public sealed class Params_SetNotWindy
{
public GrassSpriteBehaviour self;
}
public delegate void SetNotWindy_BeforeArgs(Params_SetNotWindy args);
public delegate void SetNotWindy_AfterArgs(Params_SetNotWindy args);
public delegate void SetNotWindy_WithArgs (Action<GrassSpriteBehaviour> orig, GrassSpriteBehaviour self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.OnBecameVisible_BeforeArgs OnBecameVisible
{
add
{

HookHandler._beforeOnBecameVisible += value;
HookHandler.HookOnBecameVisible();
}
remove => HookHandler._beforeOnBecameVisible -= value;
}
public static event Delegates.OnBecameInvisible_BeforeArgs OnBecameInvisible
{
add
{

HookHandler._beforeOnBecameInvisible += value;
HookHandler.HookOnBecameInvisible();
}
remove => HookHandler._beforeOnBecameInvisible -= value;
}
public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
{
add
{

HookHandler._beforeOnTriggerEnter2D += value;
HookHandler.HookOnTriggerEnter2D();
}
remove => HookHandler._beforeOnTriggerEnter2D -= value;
}
public static event Delegates.Init_BeforeArgs Init
{
add
{

HookHandler._beforeInit += value;
HookHandler.HookInit();
}
remove => HookHandler._beforeInit -= value;
}
public static event Delegates.SetWindy_BeforeArgs SetWindy
{
add
{

HookHandler._beforeSetWindy += value;
HookHandler.HookSetWindy();
}
remove => HookHandler._beforeSetWindy -= value;
}
public static event Delegates.SetNotWindy_BeforeArgs SetNotWindy
{
add
{

HookHandler._beforeSetNotWindy += value;
HookHandler.HookSetNotWindy();
}
remove => HookHandler._beforeSetNotWindy -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.OnBecameVisible_AfterArgs OnBecameVisible
{
add
{

HookHandler._afterOnBecameVisible += value;
HookHandler.HookOnBecameVisible();
}
remove => HookHandler._afterOnBecameVisible -= value;
}
public static event Delegates.OnBecameInvisible_AfterArgs OnBecameInvisible
{
add
{

HookHandler._afterOnBecameInvisible += value;
HookHandler.HookOnBecameInvisible();
}
remove => HookHandler._afterOnBecameInvisible -= value;
}
public static event Delegates.OnTriggerEnter2D_AfterArgs OnTriggerEnter2D
{
add
{

HookHandler._afterOnTriggerEnter2D += value;
HookHandler.HookOnTriggerEnter2D();
}
remove => HookHandler._afterOnTriggerEnter2D -= value;
}
public static event Delegates.Init_AfterArgs Init
{
add
{

HookHandler._afterInit += value;
HookHandler.HookInit();
}
remove => HookHandler._afterInit -= value;
}
public static event Delegates.SetWindy_AfterArgs SetWindy
{
add
{

HookHandler._afterSetWindy += value;
HookHandler.HookSetWindy();
}
remove => HookHandler._afterSetWindy -= value;
}
public static event Delegates.SetNotWindy_AfterArgs SetNotWindy
{
add
{

HookHandler._afterSetNotWindy += value;
HookHandler.HookSetNotWindy();
}
remove => HookHandler._afterSetNotWindy -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.GrassSpriteBehaviour.hook_Awake Awake
{
add => On.GrassSpriteBehaviour.Awake += value;
remove => On.GrassSpriteBehaviour.Awake -= value;
}
public static event On.GrassSpriteBehaviour.hook_Start Start
{
add => On.GrassSpriteBehaviour.Start += value;
remove => On.GrassSpriteBehaviour.Start -= value;
}
public static event On.GrassSpriteBehaviour.hook_OnBecameVisible OnBecameVisible
{
add => On.GrassSpriteBehaviour.OnBecameVisible += value;
remove => On.GrassSpriteBehaviour.OnBecameVisible -= value;
}
public static event On.GrassSpriteBehaviour.hook_OnBecameInvisible OnBecameInvisible
{
add => On.GrassSpriteBehaviour.OnBecameInvisible += value;
remove => On.GrassSpriteBehaviour.OnBecameInvisible -= value;
}
public static event On.GrassSpriteBehaviour.hook_OnTriggerEnter2D OnTriggerEnter2D
{
add => On.GrassSpriteBehaviour.OnTriggerEnter2D += value;
remove => On.GrassSpriteBehaviour.OnTriggerEnter2D -= value;
}
public static event On.GrassSpriteBehaviour.hook_Init Init
{
add => On.GrassSpriteBehaviour.Init += value;
remove => On.GrassSpriteBehaviour.Init -= value;
}
public static event On.GrassSpriteBehaviour.hook_SetWindy SetWindy
{
add => On.GrassSpriteBehaviour.SetWindy += value;
remove => On.GrassSpriteBehaviour.SetWindy -= value;
}
public static event On.GrassSpriteBehaviour.hook_SetNotWindy SetNotWindy
{
add => On.GrassSpriteBehaviour.SetNotWindy += value;
remove => On.GrassSpriteBehaviour.SetNotWindy -= value;
}
}

}
