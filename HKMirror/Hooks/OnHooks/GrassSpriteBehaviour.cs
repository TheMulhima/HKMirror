namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GrassSpriteBehaviour class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGrassSpriteBehaviour
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.GrassSpriteBehaviour.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.GrassSpriteBehaviour.orig_Awake orig, GrassSpriteBehaviour self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.GrassSpriteBehaviour.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.GrassSpriteBehaviour.orig_Start orig, GrassSpriteBehaviour self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookOnBecameVisible()
        {
            if (!HookedList.Contains("OnBecameVisible"))
            {
                HookedList.Add("OnBecameVisible");
                On.GrassSpriteBehaviour.OnBecameVisible += OnBecameVisible;
            }
        }

        internal static event Delegates.OnBecameVisible_BeforeArgs _beforeOnBecameVisible;
        internal static event Delegates.OnBecameVisible_NormalArgs _afterOnBecameVisible;

        private static void OnBecameVisible(On.GrassSpriteBehaviour.orig_OnBecameVisible orig,
            GrassSpriteBehaviour self)
        {
            Delegates.Params_OnBecameVisible @params = new()
            {
                self = self
            };
            _beforeOnBecameVisible?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnBecameVisible != null) _afterOnBecameVisible.Invoke(@params);
        }

        internal static void HookOnBecameInvisible()
        {
            if (!HookedList.Contains("OnBecameInvisible"))
            {
                HookedList.Add("OnBecameInvisible");
                On.GrassSpriteBehaviour.OnBecameInvisible += OnBecameInvisible;
            }
        }

        internal static event Delegates.OnBecameInvisible_BeforeArgs _beforeOnBecameInvisible;
        internal static event Delegates.OnBecameInvisible_NormalArgs _afterOnBecameInvisible;

        private static void OnBecameInvisible(On.GrassSpriteBehaviour.orig_OnBecameInvisible orig,
            GrassSpriteBehaviour self)
        {
            Delegates.Params_OnBecameInvisible @params = new()
            {
                self = self
            };
            _beforeOnBecameInvisible?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnBecameInvisible != null) _afterOnBecameInvisible.Invoke(@params);
        }

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.GrassSpriteBehaviour.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_NormalArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.GrassSpriteBehaviour.orig_OnTriggerEnter2D orig,
            GrassSpriteBehaviour self, Collider2D collision)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, collision = collision
            };
            _beforeOnTriggerEnter2D?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnTriggerEnter2D != null) _afterOnTriggerEnter2D.Invoke(@params);
        }

        internal static void HookInit()
        {
            if (!HookedList.Contains("Init"))
            {
                HookedList.Add("Init");
                On.GrassSpriteBehaviour.Init += Init;
            }
        }

        internal static event Delegates.Init_BeforeArgs _beforeInit;
        internal static event Delegates.Init_NormalArgs _afterInit;

        private static void Init(On.GrassSpriteBehaviour.orig_Init orig, GrassSpriteBehaviour self)
        {
            Delegates.Params_Init @params = new()
            {
                self = self
            };
            _beforeInit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterInit != null) _afterInit.Invoke(@params);
        }

        internal static void HookSetWindy()
        {
            if (!HookedList.Contains("SetWindy"))
            {
                HookedList.Add("SetWindy");
                On.GrassSpriteBehaviour.SetWindy += SetWindy;
            }
        }

        internal static event Delegates.SetWindy_BeforeArgs _beforeSetWindy;
        internal static event Delegates.SetWindy_NormalArgs _afterSetWindy;

        private static void SetWindy(On.GrassSpriteBehaviour.orig_SetWindy orig, GrassSpriteBehaviour self)
        {
            Delegates.Params_SetWindy @params = new()
            {
                self = self
            };
            _beforeSetWindy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetWindy != null) _afterSetWindy.Invoke(@params);
        }

        internal static void HookSetNotWindy()
        {
            if (!HookedList.Contains("SetNotWindy"))
            {
                HookedList.Add("SetNotWindy");
                On.GrassSpriteBehaviour.SetNotWindy += SetNotWindy;
            }
        }

        internal static event Delegates.SetNotWindy_BeforeArgs _beforeSetNotWindy;
        internal static event Delegates.SetNotWindy_NormalArgs _afterSetNotWindy;

        private static void SetNotWindy(On.GrassSpriteBehaviour.orig_SetNotWindy orig, GrassSpriteBehaviour self)
        {
            Delegates.Params_SetNotWindy @params = new()
            {
                self = self
            };
            _beforeSetNotWindy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetNotWindy != null) _afterSetNotWindy.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void Init_BeforeArgs(Params_Init args);

        public delegate void Init_NormalArgs(Params_Init args);

        public delegate void OnBecameInvisible_BeforeArgs(Params_OnBecameInvisible args);

        public delegate void OnBecameInvisible_NormalArgs(Params_OnBecameInvisible args);

        public delegate void OnBecameVisible_BeforeArgs(Params_OnBecameVisible args);

        public delegate void OnBecameVisible_NormalArgs(Params_OnBecameVisible args);

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_NormalArgs(Params_OnTriggerEnter2D args);

        public delegate void SetNotWindy_BeforeArgs(Params_SetNotWindy args);

        public delegate void SetNotWindy_NormalArgs(Params_SetNotWindy args);

        public delegate void SetWindy_BeforeArgs(Params_SetWindy args);

        public delegate void SetWindy_NormalArgs(Params_SetWindy args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Awake
        {
            public GrassSpriteBehaviour self;
        }

        public sealed class Params_Start
        {
            public GrassSpriteBehaviour self;
        }

        public sealed class Params_OnBecameVisible
        {
            public GrassSpriteBehaviour self;
        }

        public sealed class Params_OnBecameInvisible
        {
            public GrassSpriteBehaviour self;
        }

        public sealed class Params_OnTriggerEnter2D
        {
            public Collider2D collision;
            public GrassSpriteBehaviour self;
        }

        public sealed class Params_Init
        {
            public GrassSpriteBehaviour self;
        }

        public sealed class Params_SetWindy
        {
            public GrassSpriteBehaviour self;
        }

        public sealed class Params_SetNotWindy
        {
            public GrassSpriteBehaviour self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnBecameVisible_BeforeArgs OnBecameVisible
        {
            add
            {
                HookHandler._beforeOnBecameVisible += value;
                HookHandler.HookOnBecameVisible();
            }
            remove => HookHandler._beforeOnBecameVisible -= value;
        }

        public static event Delegates.OnBecameInvisible_BeforeArgs OnBecameInvisible
        {
            add
            {
                HookHandler._beforeOnBecameInvisible += value;
                HookHandler.HookOnBecameInvisible();
            }
            remove => HookHandler._beforeOnBecameInvisible -= value;
        }

        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.Init_BeforeArgs Init
        {
            add
            {
                HookHandler._beforeInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._beforeInit -= value;
        }

        public static event Delegates.SetWindy_BeforeArgs SetWindy
        {
            add
            {
                HookHandler._beforeSetWindy += value;
                HookHandler.HookSetWindy();
            }
            remove => HookHandler._beforeSetWindy -= value;
        }

        public static event Delegates.SetNotWindy_BeforeArgs SetNotWindy
        {
            add
            {
                HookHandler._beforeSetNotWindy += value;
                HookHandler.HookSetNotWindy();
            }
            remove => HookHandler._beforeSetNotWindy -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnBecameVisible_NormalArgs OnBecameVisible
        {
            add
            {
                HookHandler._afterOnBecameVisible += value;
                HookHandler.HookOnBecameVisible();
            }
            remove => HookHandler._afterOnBecameVisible -= value;
        }

        public static event Delegates.OnBecameInvisible_NormalArgs OnBecameInvisible
        {
            add
            {
                HookHandler._afterOnBecameInvisible += value;
                HookHandler.HookOnBecameInvisible();
            }
            remove => HookHandler._afterOnBecameInvisible -= value;
        }

        public static event Delegates.OnTriggerEnter2D_NormalArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }

        public static event Delegates.Init_NormalArgs Init
        {
            add
            {
                HookHandler._afterInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._afterInit -= value;
        }

        public static event Delegates.SetWindy_NormalArgs SetWindy
        {
            add
            {
                HookHandler._afterSetWindy += value;
                HookHandler.HookSetWindy();
            }
            remove => HookHandler._afterSetWindy -= value;
        }

        public static event Delegates.SetNotWindy_NormalArgs SetNotWindy
        {
            add
            {
                HookHandler._afterSetNotWindy += value;
                HookHandler.HookSetNotWindy();
            }
            remove => HookHandler._afterSetNotWindy -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.GrassSpriteBehaviour.hook_Awake Awake
        {
            add => On.GrassSpriteBehaviour.Awake += value;
            remove => On.GrassSpriteBehaviour.Awake -= value;
        }

        public static event On.GrassSpriteBehaviour.hook_Start Start
        {
            add => On.GrassSpriteBehaviour.Start += value;
            remove => On.GrassSpriteBehaviour.Start -= value;
        }

        public static event On.GrassSpriteBehaviour.hook_OnBecameVisible OnBecameVisible
        {
            add => On.GrassSpriteBehaviour.OnBecameVisible += value;
            remove => On.GrassSpriteBehaviour.OnBecameVisible -= value;
        }

        public static event On.GrassSpriteBehaviour.hook_OnBecameInvisible OnBecameInvisible
        {
            add => On.GrassSpriteBehaviour.OnBecameInvisible += value;
            remove => On.GrassSpriteBehaviour.OnBecameInvisible -= value;
        }

        public static event On.GrassSpriteBehaviour.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.GrassSpriteBehaviour.OnTriggerEnter2D += value;
            remove => On.GrassSpriteBehaviour.OnTriggerEnter2D -= value;
        }

        public static event On.GrassSpriteBehaviour.hook_Init Init
        {
            add => On.GrassSpriteBehaviour.Init += value;
            remove => On.GrassSpriteBehaviour.Init -= value;
        }

        public static event On.GrassSpriteBehaviour.hook_SetWindy SetWindy
        {
            add => On.GrassSpriteBehaviour.SetWindy += value;
            remove => On.GrassSpriteBehaviour.SetWindy -= value;
        }

        public static event On.GrassSpriteBehaviour.hook_SetNotWindy SetNotWindy
        {
            add => On.GrassSpriteBehaviour.SetNotWindy += value;
            remove => On.GrassSpriteBehaviour.SetNotWindy -= value;
        }
    }
}